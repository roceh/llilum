
DISCO_F746NG\mbed_simple.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000274c8  08000000  08000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.extab    00000018  080274c8  080274c8  0002f4c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .ARM.exidx    000000c8  080274e0  080274e0  0002f4e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data         00001604  200001d0  080275a8  000301d0  2**4
                  CONTENTS, ALLOC, LOAD, DATA
  4 .got.plt      0000000c  200017d4  08028bac  000317d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000002b0  200017e0  08028bb8  000317e0  2**2
                  ALLOC
  6 .ARM.attributes 00000032  00000000  00000000  000317e0  2**0
                  CONTENTS, READONLY
  7 .comment      00000070  00000000  00000000  00031812  2**0
                  CONTENTS, READONLY
  8 .debug_str    000d66bc  00000000  00000000  00031882  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00005735  00000000  00000000  00107f3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000025c2  00000000  00000000  0010d673  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0001d04c  00000000  00000000  0010fc35  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008f8  00000000  00000000  0012cc81  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 00002c1e  00000000  00000000  0012d579  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 00003454  00000000  00000000  00130197  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00007598  00000000  00000000  001335ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000fa95  00000000  00000000  0013ab84  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00000960  00000000  00000000  0014a619  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0001bfa7  00000000  00000000  0014af79  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      00000076  00000000  00000000  00166f20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	00 00 05 20 81 d4 01 08 cd d4 01 08 a1 02 00 08     ... ............
 8000010:	cd d4 01 08 29 d1 01 08 cd d4 01 08 00 00 00 00     ....)...........
	...
 800002c:	9d cf 01 08 cd d4 01 08 00 00 00 00 2d cf 01 08     ............-...
 800003c:	f1 14 01 08 cd d4 01 08 cd d4 01 08 cd d4 01 08     ................
 800004c:	cd d4 01 08 cd d4 01 08 cd d4 01 08 cd d4 01 08     ................
 800005c:	cd d4 01 08 cd d4 01 08 cd d4 01 08 cd d4 01 08     ................
 800006c:	cd d4 01 08 cd d4 01 08 cd d4 01 08 cd d4 01 08     ................
 800007c:	cd d4 01 08 cd d4 01 08 cd d4 01 08 cd d4 01 08     ................
 800008c:	cd d4 01 08 cd d4 01 08 cd d4 01 08 cd d4 01 08     ................
 800009c:	cd d4 01 08 cd d4 01 08 cd d4 01 08 cd d4 01 08     ................
 80000ac:	cd d4 01 08 cd d4 01 08 cd d4 01 08 cd d4 01 08     ................
 80000bc:	cd d4 01 08 cd d4 01 08 cd d4 01 08 cd d4 01 08     ................
 80000cc:	cd d4 01 08 cd d4 01 08 cd d4 01 08 cd d4 01 08     ................
 80000dc:	cd d4 01 08 cd d4 01 08 cd d4 01 08 cd d4 01 08     ................
 80000ec:	cd d4 01 08 cd d4 01 08 cd d4 01 08 cd d4 01 08     ................
 80000fc:	cd d4 01 08 cd d4 01 08 cd d4 01 08 cd d4 01 08     ................
 800010c:	cd d4 01 08 cd d4 01 08 cd d4 01 08 cd d4 01 08     ................
 800011c:	cd d4 01 08 cd d4 01 08 cd d4 01 08 cd d4 01 08     ................
 800012c:	cd d4 01 08 cd d4 01 08 cd d4 01 08 cd d4 01 08     ................
 800013c:	cd d4 01 08 cd d4 01 08 cd d4 01 08 cd d4 01 08     ................
 800014c:	cd d4 01 08 cd d4 01 08 cd d4 01 08 cd d4 01 08     ................
 800015c:	cd d4 01 08 cd d4 01 08 cd d4 01 08 cd d4 01 08     ................
 800016c:	cd d4 01 08 cd d4 01 08 cd d4 01 08 cd d4 01 08     ................
 800017c:	00 00 00 00 cd d4 01 08 cd d4 01 08 cd d4 01 08     ................
 800018c:	cd d4 01 08 cd d4 01 08 cd d4 01 08 cd d4 01 08     ................
 800019c:	cd d4 01 08 cd d4 01 08 cd d4 01 08 cd d4 01 08     ................
 80001ac:	cd d4 01 08 cd d4 01 08 cd d4 01 08 cd d4 01 08     ................
 80001bc:	cd d4 01 08 cd d4 01 08 cd d4 01 08                 ............

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200017e0 	.word	0x200017e0
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080274c4 	.word	0x080274c4

080001ec <frame_dummy>:
 80001ec:	4b08      	ldr	r3, [pc, #32]	; (8000210 <frame_dummy+0x24>)
 80001ee:	b510      	push	{r4, lr}
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4808      	ldr	r0, [pc, #32]	; (8000214 <frame_dummy+0x28>)
 80001f4:	4908      	ldr	r1, [pc, #32]	; (8000218 <frame_dummy+0x2c>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	4808      	ldr	r0, [pc, #32]	; (800021c <frame_dummy+0x30>)
 80001fc:	6803      	ldr	r3, [r0, #0]
 80001fe:	b903      	cbnz	r3, 8000202 <frame_dummy+0x16>
 8000200:	bd10      	pop	{r4, pc}
 8000202:	4b07      	ldr	r3, [pc, #28]	; (8000220 <frame_dummy+0x34>)
 8000204:	2b00      	cmp	r3, #0
 8000206:	d0fb      	beq.n	8000200 <frame_dummy+0x14>
 8000208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800020c:	4718      	bx	r3
 800020e:	bf00      	nop
 8000210:	00000000 	.word	0x00000000
 8000214:	080274c4 	.word	0x080274c4
 8000218:	200017e4 	.word	0x200017e4
 800021c:	200017d0 	.word	0x200017d0
 8000220:	00000000 	.word	0x00000000

08000224 <_mainCRTStartup>:
 8000224:	4b15      	ldr	r3, [pc, #84]	; (800027c <_mainCRTStartup+0x58>)
 8000226:	2b00      	cmp	r3, #0
 8000228:	bf08      	it	eq
 800022a:	4b13      	ldreq	r3, [pc, #76]	; (8000278 <_mainCRTStartup+0x54>)
 800022c:	469d      	mov	sp, r3
 800022e:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
 8000232:	2100      	movs	r1, #0
 8000234:	468b      	mov	fp, r1
 8000236:	460f      	mov	r7, r1
 8000238:	4813      	ldr	r0, [pc, #76]	; (8000288 <_mainCRTStartup+0x64>)
 800023a:	4a14      	ldr	r2, [pc, #80]	; (800028c <_mainCRTStartup+0x68>)
 800023c:	1a12      	subs	r2, r2, r0
 800023e:	f020 f871 	bl	8020324 <memset>
 8000242:	4b0f      	ldr	r3, [pc, #60]	; (8000280 <_mainCRTStartup+0x5c>)
 8000244:	2b00      	cmp	r3, #0
 8000246:	d000      	beq.n	800024a <_mainCRTStartup+0x26>
 8000248:	4798      	blx	r3
 800024a:	4b0e      	ldr	r3, [pc, #56]	; (8000284 <_mainCRTStartup+0x60>)
 800024c:	2b00      	cmp	r3, #0
 800024e:	d000      	beq.n	8000252 <_mainCRTStartup+0x2e>
 8000250:	4798      	blx	r3
 8000252:	2000      	movs	r0, #0
 8000254:	2100      	movs	r1, #0
 8000256:	0004      	movs	r4, r0
 8000258:	000d      	movs	r5, r1
 800025a:	480d      	ldr	r0, [pc, #52]	; (8000290 <_mainCRTStartup+0x6c>)
 800025c:	2800      	cmp	r0, #0
 800025e:	d002      	beq.n	8000266 <_mainCRTStartup+0x42>
 8000260:	480c      	ldr	r0, [pc, #48]	; (8000294 <_mainCRTStartup+0x70>)
 8000262:	f3af 8000 	nop.w
 8000266:	f020 f80d 	bl	8020284 <__libc_init_array>
 800026a:	0020      	movs	r0, r4
 800026c:	0029      	movs	r1, r5
 800026e:	f01d fbbd 	bl	801d9ec <__wrap_main>
 8000272:	f01f fe6b 	bl	801ff4c <exit>
 8000276:	bf00      	nop
 8000278:	00080000 	.word	0x00080000
 800027c:	20050000 	.word	0x20050000
	...
 8000288:	200017e0 	.word	0x200017e0
 800028c:	20001a90 	.word	0x20001a90
	...

080002a0 <HardFault_Handler>:
 80002a0:	f000 f822 	bl	80002e8 <ProcessorARMv7M_DebuggerConnected$3286>
 80002a4:	f010 0fff 	tst.w	r0, #255	; 0xff
 80002a8:	d006      	beq.n	80002b8 <HardFault_Handler+0x18>
 80002aa:	e7ff      	b.n	80002ac <HardFault_Handler+0xc>
 80002ac:	f000 f823 	bl	80002f6 <ProcessorARMv7M_WasHardFaultOnVectorTableRead$3281>
 80002b0:	f010 0fff 	tst.w	r0, #255	; 0xff
 80002b4:	d102      	bne.n	80002bc <HardFault_Handler+0x1c>
 80002b6:	e008      	b.n	80002ca <HardFault_Handler+0x2a>
 80002b8:	e7ff      	b.n	80002ba <HardFault_Handler+0x1a>
 80002ba:	e7fe      	b.n	80002ba <HardFault_Handler+0x1a>
 80002bc:	4806      	ldr	r0, [pc, #24]	; (80002d8 <HardFault_Handler+0x38>)
 80002be:	4907      	ldr	r1, [pc, #28]	; (80002dc <HardFault_Handler+0x3c>)
 80002c0:	4479      	add	r1, pc
 80002c2:	5840      	ldr	r0, [r0, r1]
 80002c4:	f000 f81e 	bl	8000304 <BugCheck_Raise$4648>
 80002c8:	e7ff      	b.n	80002ca <HardFault_Handler+0x2a>
 80002ca:	4805      	ldr	r0, [pc, #20]	; (80002e0 <HardFault_Handler+0x40>)
 80002cc:	4905      	ldr	r1, [pc, #20]	; (80002e4 <HardFault_Handler+0x44>)
 80002ce:	4479      	add	r1, pc
 80002d0:	5840      	ldr	r0, [r0, r1]
 80002d2:	f000 f817 	bl	8000304 <BugCheck_Raise$4648>
 80002d6:	4770      	bx	lr
 80002d8:	e80251f0 	.word	0xe80251f0
 80002dc:	18001510 	.word	0x18001510
 80002e0:	e80251ec 	.word	0xe80251ec
 80002e4:	18001502 	.word	0x18001502

080002e8 <ProcessorARMv7M_DebuggerConnected$3286>:
 80002e8:	b580      	push	{r7, lr}
 80002ea:	f01c ff03 	bl	801d0f4 <CUSTOM_STUB_DebuggerConnected>
 80002ee:	2801      	cmp	r0, #1
 80002f0:	bf18      	it	ne
 80002f2:	2000      	movne	r0, #0
 80002f4:	bd80      	pop	{r7, pc}

080002f6 <ProcessorARMv7M_WasHardFaultOnVectorTableRead$3281>:
 80002f6:	b580      	push	{r7, lr}
 80002f8:	f01c ff0a 	bl	801d110 <CUSTOM_STUB_SCB__get_HFSR>
 80002fc:	f000 0002 	and.w	r0, r0, #2
 8000300:	0840      	lsrs	r0, r0, #1
 8000302:	bd80      	pop	{r7, pc}

08000304 <BugCheck_Raise$4648>:
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	4601      	mov	r1, r0
 800030a:	4a05      	ldr	r2, [pc, #20]	; (8000320 <BugCheck_Raise$4648+0x1c>)
 800030c:	4b05      	ldr	r3, [pc, #20]	; (8000324 <BugCheck_Raise$4648+0x20>)
 800030e:	447b      	add	r3, pc
 8000310:	441a      	add	r2, r3
 8000312:	6790      	str	r0, [r2, #120]	; 0x78
            ExpectingReadyThread    ,

            NoFreeSyncBlock         ,
            SyncBlockCorruption     ,

            NegativeIndex           ,
 8000314:	9101      	str	r1, [sp, #4]
 8000316:	f01c fe5d 	bl	801cfd4 <Breakpoint>
 800031a:	b002      	add	sp, #8
 800031c:	bd80      	pop	{r7, pc}
 800031e:	46c0      	nop			; (mov r8, r8)
 8000320:	fffffe3c 	.word	0xfffffe3c
 8000324:	180014c2 	.word	0x180014c2

08000328 <main>:
            // This should only minimally setup hardware so that the system is functional.
            // For example, all the peripherals have been added to the address space,
            // memory has been initialized and operated at the nominal rate, the CPU runs at
            // the correct clock frequency, etc.
            //
            HardwareInitialization();
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	f006 fc0a 	bl	8006b44 <Bootstrap_HardwareInitialization$3695>
            
            //
            // This only initializes the heap.
            //
            HeapInitialization();
 8000330:	f006 fc3a 	bl	8006ba8 <Bootstrap_HeapInitialization$3696>

            //
            // This initializes the main software services, like object allocation, type system, thread manager, etc.
            //
            SoftwareInitialization( Device.Instance.BootstrapStack );
 8000334:	4809      	ldr	r0, [pc, #36]	; (800035c <main+0x34>)
 8000336:	490a      	ldr	r1, [pc, #40]	; (8000360 <main+0x38>)
 8000338:	4479      	add	r1, pc
 800033a:	4408      	add	r0, r1
 800033c:	9101      	str	r1, [sp, #4]
 800033e:	f006 fc45 	bl	8006bcc <Device_get_BootstrapStack$16934>
 8000342:	f006 fc4d 	bl	8006be0 <Bootstrap_SoftwareInitialization$3697>

            //
            // Once all the software services have been initialized, we can activate the hardware.
            // Activating the hardware might require starting threads, associated delegate with callbacks, etc.
            //
            HardwareActivation();
 8000346:	f006 fc6b 	bl	8006c20 <Bootstrap_HardwareActivation$3698>

            //
            // After the hardware is ready, we can start the software services, which will use the hardware one.
            //
            SoftwareActivation();
 800034a:	f006 fc75 	bl	8006c38 <Bootstrap_SoftwareActivation$3699>

            // 
            // Time to start execution of user app by delegating to the thread manager
            ThreadManager.Instance.StartThreads();
 800034e:	4805      	ldr	r0, [pc, #20]	; (8000364 <main+0x3c>)
 8000350:	9901      	ldr	r1, [sp, #4]
 8000352:	4408      	add	r0, r1
 8000354:	f006 fc7c 	bl	8006c50 <ARMv7ThreadManager_StartThreads$4924>
 8000358:	b002      	add	sp, #8
 800035a:	bd80      	pop	{r7, pc}
 800035c:	e80101ec 	.word	0xe80101ec
 8000360:	18001498 	.word	0x18001498
 8000364:	ffffeaac 	.word	0xffffeaac

08000368 <AnyInterrupt>:
 8000368:	4770      	bx	lr

0800036a <AnyInterrupt.1>:
 800036a:	4770      	bx	lr

0800036c <Peripherals_ProcessInterrupt$16676>:
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	2000      	movs	r0, #0
 8000372:	9000      	str	r0, [sp, #0]
 8000374:	4908      	ldr	r1, [pc, #32]	; (8000398 <Peripherals_ProcessInterrupt$16676+0x2c>)
 8000376:	4a09      	ldr	r2, [pc, #36]	; (800039c <Peripherals_ProcessInterrupt$16676+0x30>)
 8000378:	447a      	add	r2, pc
 800037a:	4411      	add	r1, r2
 800037c:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800037e:	9001      	str	r0, [sp, #4]
 8000380:	a801      	add	r0, sp, #4
 8000382:	3808      	subs	r0, #8
 8000384:	f004 fa48 	bl	8004818 <SwapCurrentThreadUnderInterrupt_.ctor$5054>
 8000388:	9801      	ldr	r0, [sp, #4]
 800038a:	9000      	str	r0, [sp, #0]
 800038c:	4668      	mov	r0, sp
        public override void ProcessInterrupt()
        {
            using (RT.SmartHandles.SwapCurrentThreadUnderInterrupt hnd = RT.ThreadManager.InstallInterruptThread())
            {
                Drivers.InterruptController.Instance.ProcessInterrupt();
            }
 800038e:	3808      	subs	r0, #8
 8000390:	f009 fb82 	bl	8009a98 <SwapCurrentThreadUnderInterrupt_Dispose$5056>
 8000394:	b002      	add	sp, #8
 8000396:	bd80      	pop	{r7, pc}
 8000398:	ffffeaac 	.word	0xffffeaac
 800039c:	18001458 	.word	0x18001458

080003a0 <Context_ContextSwitch$5660>:
            }

            public override void SetupForExceptionHandling( uint mode )
            {
                //
                // Stop any exception from happening
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b08c      	sub	sp, #48	; 0x30
 80003a4:	4925      	ldr	r1, [pc, #148]	; (800043c <Context_ContextSwitch$5660+0x9c>)
 80003a6:	4a26      	ldr	r2, [pc, #152]	; (8000440 <Context_ContextSwitch$5660+0xa0>)
 80003a8:	447a      	add	r2, pc
 80003aa:	4411      	add	r1, r2
 80003ac:	6a4a      	ldr	r2, [r1, #36]	; 0x24
#region Tracking Collector and Exceptions  

            public override bool Unwind( )
            {
                throw new Exception( "Unwind not implemented" );
            }
 80003ae:	6a89      	ldr	r1, [r1, #40]	; 0x28
            {
                ThreadImpl currentThread = tm.CurrentThread;
                ThreadImpl nextThread    = tm.NextThread;
                Context    ctx;

                if(currentThread != null)
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	9007      	str	r0, [sp, #28]
 80003b4:	9206      	str	r2, [sp, #24]
 80003b6:	9105      	str	r1, [sp, #20]
 80003b8:	d024      	beq.n	8000404 <Context_ContextSwitch$5660+0x64>
 80003ba:	e7ff      	b.n	80003bc <Context_ContextSwitch$5660+0x1c>
                    //SwitchToHandlerPrivilegedMode( );

                    //
                    // Set the stack pointer in the context to be teh current MSP
                    //
                    this.StackPointer = stack;
 80003bc:	9806      	ldr	r0, [sp, #24]
 80003be:	69c1      	ldr	r1, [r0, #28]
                    //ctx.Registers.Assign( ref registers );

                    //
                    // update SP as well as the EXC_RETURN address
                    //     
                    ctx.EXC_RETURN   = registers.EXC_RETURN;                    
 80003c0:	9a07      	ldr	r2, [sp, #28]
 80003c2:	6813      	ldr	r3, [r2, #0]
 80003c4:	60cb      	str	r3, [r1, #12]
                    ctx.StackPointer = AddressMath.Decrement( GetProcessStackPointer( ), RegistersOnStackNoFPContext.SwitcherFrameSize );
 80003c6:	9104      	str	r1, [sp, #16]
 80003c8:	f01c fd26 	bl	801ce18 <CMSIS_STUB_SCB__get_PSP>
 80003cc:	2100      	movs	r1, #0
 80003ce:	9109      	str	r1, [sp, #36]	; 0x24
 80003d0:	aa09      	add	r2, sp, #36	; 0x24
 80003d2:	3a08      	subs	r2, #8
 80003d4:	9003      	str	r0, [sp, #12]
 80003d6:	4610      	mov	r0, r2
 80003d8:	9a03      	ldr	r2, [sp, #12]
 80003da:	9102      	str	r1, [sp, #8]
 80003dc:	4611      	mov	r1, r2
 80003de:	f003 f8bc 	bl	800355a <UIntPtr_.ctor$2860>
 80003e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80003e4:	900a      	str	r0, [sp, #40]	; 0x28
 80003e6:	9802      	ldr	r0, [sp, #8]
 80003e8:	900b      	str	r0, [sp, #44]	; 0x2c
                    this.S11        = other.S11;
                    this.S12        = other.S12;
                    this.S13        = other.S13;
                    this.S14        = other.S14;
                    this.S15        = other.S15;
                    this.S16        = other.S16;
 80003ea:	990a      	ldr	r1, [sp, #40]	; 0x28
                [TS.AssumeReferenced] public float   S15;
                [TS.AssumeReferenced] public UIntPtr FPSCR_1;
                [TS.AssumeReferenced] public UIntPtr FPSCR_2;

                //
                // Helper Methods
 80003ec:	3928      	subs	r1, #40	; 0x28
 80003ee:	900b      	str	r0, [sp, #44]	; 0x2c
 80003f0:	aa0b      	add	r2, sp, #44	; 0x2c
 80003f2:	f1a2 0008 	sub.w	r0, r2, #8
 80003f6:	f000 fa61 	bl	80008bc <UIntPtr_.ctor$2864>
 80003fa:	990b      	ldr	r1, [sp, #44]	; 0x2c

                    //
                    // update SP as well as the EXC_RETURN address
                    //     
                    ctx.EXC_RETURN   = registers.EXC_RETURN;                    
                    ctx.StackPointer = AddressMath.Decrement( GetProcessStackPointer( ), RegistersOnStackNoFPContext.SwitcherFrameSize );
 80003fc:	9804      	ldr	r0, [sp, #16]
 80003fe:	f003 fd23 	bl	8003e48 <Context_set_StackPointer$5671>
                }
 8000402:	e7ff      	b.n	8000404 <Context_ContextSwitch$5660+0x64>
                    //SwitchToHandlerPrivilegedMode( );

                    //
                    // Set the stack pointer in the context to be teh current MSP
                    //
                    this.StackPointer = stack;
 8000404:	9805      	ldr	r0, [sp, #20]
 8000406:	69c1      	ldr	r1, [r0, #28]
 8000408:	688a      	ldr	r2, [r1, #8]
 800040a:	9208      	str	r2, [sp, #32]
 800040c:	aa08      	add	r2, sp, #32

                //
                // Pass PSP and EXC_RETURN down to the native portion of the 
                // PendSV handler we need to offset to the beginning of the frame
                //
                SetProcessStackPointer( ctx.StackPointer );
 800040e:	f1a2 0008 	sub.w	r0, r2, #8
 8000412:	9101      	str	r1, [sp, #4]
 8000414:	f003 f8b0 	bl	8003578 <UIntPtr_ToUInt32$2870>
 8000418:	f01c fd08 	bl	801ce2c <CMSIS_STUB_SCB__set_PSP>
                SetExcReturn          ( ctx.EXC_RETURN ); 
 800041c:	9801      	ldr	r0, [sp, #4]
 800041e:	68c0      	ldr	r0, [r0, #12]
 8000420:	f005 fbb6 	bl	8005b90 <ProcessorARMv7M_SetExcReturn$3279>
                    
                //
                // Update thread manager state and Thread.CurrentThread static field
                //
                tm.CurrentThread = nextThread;
 8000424:	9805      	ldr	r0, [sp, #20]
 8000426:	f005 fa77 	bl	8005918 <ThreadManager_set_CurrentThread$3192>
 800042a:	4806      	ldr	r0, [pc, #24]	; (8000444 <Context_ContextSwitch$5660+0xa4>)
 800042c:	4906      	ldr	r1, [pc, #24]	; (8000448 <Context_ContextSwitch$5660+0xa8>)
 800042e:	4479      	add	r1, pc
 8000430:	4408      	add	r0, r1
 8000432:	9905      	ldr	r1, [sp, #20]
 8000434:	f8c0 10f8 	str.w	r1, [r0, #248]	; 0xf8
 8000438:	b00c      	add	sp, #48	; 0x30
 800043a:	bd80      	pop	{r7, pc}
 800043c:	ffffeaac 	.word	0xffffeaac
 8000440:	18001428 	.word	0x18001428
 8000444:	fffffe3c 	.word	0xfffffe3c
 8000448:	180013a2 	.word	0x180013a2

0800044c <Peripherals_ProcessFastInterrupt$16677>:
 800044c:	b580      	push	{r7, lr}
 800044e:	b084      	sub	sp, #16
 8000450:	2000      	movs	r0, #0
 8000452:	9002      	str	r0, [sp, #8]
 8000454:	490b      	ldr	r1, [pc, #44]	; (8000484 <Peripherals_ProcessFastInterrupt$16677+0x38>)
 8000456:	4a0c      	ldr	r2, [pc, #48]	; (8000488 <Peripherals_ProcessFastInterrupt$16677+0x3c>)
 8000458:	447a      	add	r2, pc
 800045a:	5889      	ldr	r1, [r1, r2]
        public override void DisableInterrupt( uint index )
        {
        }

        public override void CauseInterrupt()
        {
 800045c:	9001      	str	r0, [sp, #4]
 800045e:	4608      	mov	r0, r1
 8000460:	f7ff ff50 	bl	8000304 <BugCheck_Raise$4648>
 8000464:	9801      	ldr	r0, [sp, #4]
 8000466:	9003      	str	r0, [sp, #12]
 8000468:	a903      	add	r1, sp, #12
 800046a:	f1a1 0008 	sub.w	r0, r1, #8
 800046e:	9901      	ldr	r1, [sp, #4]
 8000470:	f004 f9d2 	bl	8004818 <SwapCurrentThreadUnderInterrupt_.ctor$5054>
 8000474:	9803      	ldr	r0, [sp, #12]
 8000476:	9002      	str	r0, [sp, #8]
 8000478:	a802      	add	r0, sp, #8
        public override void ProcessFastInterrupt()
        {
            using (RT.SmartHandles.SwapCurrentThreadUnderInterrupt hnd = RT.ThreadManager.InstallFastInterruptThread())
            {
                Drivers.InterruptController.Instance.ProcessFastInterrupt();
            }
 800047a:	3808      	subs	r0, #8
 800047c:	f009 fb0c 	bl	8009a98 <SwapCurrentThreadUnderInterrupt_Dispose$5056>
 8000480:	b004      	add	sp, #16
 8000482:	bd80      	pop	{r7, pc}
 8000484:	e80254d0 	.word	0xe80254d0
 8000488:	18001378 	.word	0x18001378

0800048c <Array_Copy$1371>:
 800048c:	b580      	push	{r7, lr}
 800048e:	b08a      	sub	sp, #40	; 0x28
 8000490:	4603      	mov	r3, r0
 8000492:	2800      	cmp	r0, #0
 8000494:	9309      	str	r3, [sp, #36]	; 0x24
 8000496:	9208      	str	r2, [sp, #32]
 8000498:	9107      	str	r1, [sp, #28]
 800049a:	d112      	bne.n	80004c2 <Array_Copy$1371+0x36>
 800049c:	e7ff      	b.n	800049e <Array_Copy$1371+0x12>
 800049e:	e7ff      	b.n	80004a0 <Array_Copy$1371+0x14>
 80004a0:	481d      	ldr	r0, [pc, #116]	; (8000518 <Array_Copy$1371+0x8c>)
 80004a2:	4920      	ldr	r1, [pc, #128]	; (8000524 <Array_Copy$1371+0x98>)
 80004a4:	4479      	add	r1, pc
 80004a6:	4408      	add	r0, r1
 80004a8:	4a1d      	ldr	r2, [pc, #116]	; (8000520 <Array_Copy$1371+0x94>)
 80004aa:	4411      	add	r1, r2
 80004ac:	9006      	str	r0, [sp, #24]
 80004ae:	f000 f987 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 80004b2:	9005      	str	r0, [sp, #20]
 80004b4:	f000 f9d1 	bl	800085a <ArgumentNullException_.ctor$6069>
 80004b8:	9806      	ldr	r0, [sp, #24]
 80004ba:	9905      	ldr	r1, [sp, #20]
 80004bc:	f000 f9d6 	bl	800086c <TypeSystemManager_Throw$4954>
 80004c0:	e7ee      	b.n	80004a0 <Array_Copy$1371+0x14>
 80004c2:	9807      	ldr	r0, [sp, #28]
 80004c4:	2800      	cmp	r0, #0
 80004c6:	d112      	bne.n	80004ee <Array_Copy$1371+0x62>
 80004c8:	e7ff      	b.n	80004ca <Array_Copy$1371+0x3e>
 80004ca:	e7ff      	b.n	80004cc <Array_Copy$1371+0x40>
 80004cc:	4812      	ldr	r0, [pc, #72]	; (8000518 <Array_Copy$1371+0x8c>)
 80004ce:	4913      	ldr	r1, [pc, #76]	; (800051c <Array_Copy$1371+0x90>)
 80004d0:	4479      	add	r1, pc
 80004d2:	4408      	add	r0, r1
 80004d4:	4a12      	ldr	r2, [pc, #72]	; (8000520 <Array_Copy$1371+0x94>)
 80004d6:	4411      	add	r1, r2
 80004d8:	9004      	str	r0, [sp, #16]
 80004da:	f000 f971 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 80004de:	9003      	str	r0, [sp, #12]
 80004e0:	f000 f9bb 	bl	800085a <ArgumentNullException_.ctor$6069>
 80004e4:	9804      	ldr	r0, [sp, #16]
 80004e6:	9903      	ldr	r1, [sp, #12]
 80004e8:	f000 f9c0 	bl	800086c <TypeSystemManager_Throw$4954>
 80004ec:	e7ee      	b.n	80004cc <Array_Copy$1371+0x40>
 80004ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80004f0:	f000 f81a 	bl	8000528 <Array_GetLowerBound$3703>
 80004f4:	9907      	ldr	r1, [sp, #28]
 80004f6:	9002      	str	r0, [sp, #8]
 80004f8:	4608      	mov	r0, r1
 80004fa:	f000 f815 	bl	8000528 <Array_GetLowerBound$3703>
 80004fe:	4669      	mov	r1, sp
 8000500:	9a08      	ldr	r2, [sp, #32]
 8000502:	600a      	str	r2, [r1, #0]
 8000504:	9909      	ldr	r1, [sp, #36]	; 0x24
 8000506:	9001      	str	r0, [sp, #4]
 8000508:	4608      	mov	r0, r1
 800050a:	9902      	ldr	r1, [sp, #8]
 800050c:	9a07      	ldr	r2, [sp, #28]
 800050e:	9b01      	ldr	r3, [sp, #4]
 8000510:	f000 f840 	bl	8000594 <Array_Copy$3705>
 8000514:	b00a      	add	sp, #40	; 0x28
 8000516:	bd80      	pop	{r7, pc}
 8000518:	ffffea38 	.word	0xffffea38
 800051c:	18001300 	.word	0x18001300
 8000520:	e801049c 	.word	0xe801049c
 8000524:	1800132c 	.word	0x1800132c

08000528 <Array_GetLowerBound$3703>:
 8000528:	b580      	push	{r7, lr}
 800052a:	b086      	sub	sp, #24
 800052c:	4601      	mov	r1, r0
            }

            int indexEnd = index + length;
            if(indexEnd > array.Length)
            {
                throw new IndexOutOfRangeException();
 800052e:	3008      	adds	r0, #8
 8000530:	9004      	str	r0, [sp, #16]
 8000532:	2000      	movs	r0, #0
 8000534:	9005      	str	r0, [sp, #20]
            {
                throw new NotSupportedException();
            }

            void* voidSourcePtr      = sourceArray     .GetPointerToElement( (uint)sourceIndex      );
            void* voidDestinationPtr = destinationArray.GetPointerToElement( (uint)destinationIndex );
 8000536:	9a04      	ldr	r2, [sp, #16]
                uint* ptrEnd = (uint*)voidPtrEnd;

                while(ptr < ptrEnd)
                {
                    *ptr++ = 0;
                }
 8000538:	3a08      	subs	r2, #8
 800053a:	9005      	str	r0, [sp, #20]
 800053c:	a805      	add	r0, sp, #20
 800053e:	3808      	subs	r0, #8
 8000540:	9103      	str	r1, [sp, #12]
 8000542:	4611      	mov	r1, r2
 8000544:	f000 f9ba 	bl	80008bc <UIntPtr_.ctor$2864>
            }

            int indexEnd = index + length;
            if(indexEnd > array.Length)
            {
                throw new IndexOutOfRangeException();
 8000548:	9805      	ldr	r0, [sp, #20]
                TS.VTable vTable = TS.VTable.Get( this );

                TS.TypeRepresentation ts = vTable.TypeInfo;

                if(ts is TS.SzArrayReferenceTypeRepresentation)
                {
 800054a:	6840      	ldr	r0, [r0, #4]

        public int GetLowerBound( int dimension )
        {
            TS.VTable vTable = TS.VTable.Get( this );

            TS.TypeRepresentation ts = vTable.TypeInfo;
 800054c:	6900      	ldr	r0, [r0, #16]

            if(ts is TS.SzArrayReferenceTypeRepresentation)
 800054e:	490d      	ldr	r1, [pc, #52]	; (8000584 <Array_GetLowerBound$3703+0x5c>)
 8000550:	4a0d      	ldr	r2, [pc, #52]	; (8000588 <Array_GetLowerBound$3703+0x60>)
 8000552:	447a      	add	r2, pc
 8000554:	4411      	add	r1, r2
 8000556:	9002      	str	r0, [sp, #8]
 8000558:	f000 fb80 	bl	8000c5c <TypeSystemManager_CastToSealedTypeNoThrow$4951>
 800055c:	2800      	cmp	r0, #0
 800055e:	d003      	beq.n	8000568 <Array_GetLowerBound$3703+0x40>
 8000560:	e7ff      	b.n	8000562 <Array_GetLowerBound$3703+0x3a>
 8000562:	2000      	movs	r0, #0
            {
                return 0;
 8000564:	9001      	str	r0, [sp, #4]
 8000566:	e00a      	b.n	800057e <Array_GetLowerBound$3703+0x56>
            }

            TS.MultiArrayReferenceTypeRepresentation ts2 = (TS.MultiArrayReferenceTypeRepresentation)ts;
 8000568:	4808      	ldr	r0, [pc, #32]	; (800058c <Array_GetLowerBound$3703+0x64>)
 800056a:	4909      	ldr	r1, [pc, #36]	; (8000590 <Array_GetLowerBound$3703+0x68>)
 800056c:	4479      	add	r1, pc
 800056e:	4401      	add	r1, r0
 8000570:	9802      	ldr	r0, [sp, #8]
 8000572:	f000 fd1f 	bl	8000fb4 <TypeSystemManager_CastToSealedType$4950>
                throw new NotSupportedException();
            }

            void* voidSourcePtr      = sourceArray     .GetPointerToElement( (uint)sourceIndex      );
            void* voidDestinationPtr = destinationArray.GetPointerToElement( (uint)destinationIndex );

 8000576:	6b40      	ldr	r0, [r0, #52]	; 0x34
                return 0;
            }

            TS.MultiArrayReferenceTypeRepresentation ts2 = (TS.MultiArrayReferenceTypeRepresentation)ts;

            return (int)ts2.Dimensions[dimension].m_lowerBound;
 8000578:	68c0      	ldr	r0, [r0, #12]
 800057a:	9001      	str	r0, [sp, #4]
 800057c:	e7ff      	b.n	800057e <Array_GetLowerBound$3703+0x56>
 800057e:	9801      	ldr	r0, [sp, #4]
 8000580:	b006      	add	sp, #24
 8000582:	bd80      	pop	{r7, pc}
 8000584:	e801066c 	.word	0xe801066c
 8000588:	1800127e 	.word	0x1800127e
 800058c:	e801071c 	.word	0xe801071c
 8000590:	18001264 	.word	0x18001264

08000594 <Array_Copy$3705>:
 8000594:	b5b0      	push	{r4, r5, r7, lr}
 8000596:	b098      	sub	sp, #96	; 0x60
 8000598:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 800059c:	469e      	mov	lr, r3
 800059e:	460c      	mov	r4, r1
 80005a0:	460d      	mov	r5, r1
////        pLengths[0] = length1;
////        pLengths[1] = length2;
////
////        return InternalCreate( (void*)t.TypeHandle.Value, 2, pLengths, null );
////    }
////
 80005a2:	f1b1 3fff 	cmp.w	r1, #4294967295
 80005a6:	9513      	str	r5, [sp, #76]	; 0x4c
 80005a8:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
 80005ac:	9311      	str	r3, [sp, #68]	; 0x44
 80005ae:	9410      	str	r4, [sp, #64]	; 0x40
 80005b0:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 80005b4:	920e      	str	r2, [sp, #56]	; 0x38
 80005b6:	900d      	str	r0, [sp, #52]	; 0x34
 80005b8:	dc12      	bgt.n	80005e0 <Array_Copy$3705+0x4c>
 80005ba:	e7ff      	b.n	80005bc <Array_Copy$3705+0x28>
////    public unsafe static Array CreateInstance( Type elementType, int length1, int length2, int length3 )
////    {
////        if(length1 < 0 || length2 < 0 || length3 < 0)
////        {
 80005bc:	e7ff      	b.n	80005be <Array_Copy$3705+0x2a>
 80005be:	4853      	ldr	r0, [pc, #332]	; (800070c <Array_Copy$3705+0x178>)
 80005c0:	4958      	ldr	r1, [pc, #352]	; (8000724 <Array_Copy$3705+0x190>)
 80005c2:	4479      	add	r1, pc
 80005c4:	4408      	add	r0, r1
 80005c6:	4a55      	ldr	r2, [pc, #340]	; (800071c <Array_Copy$3705+0x188>)
 80005c8:	4411      	add	r1, r2
 80005ca:	900c      	str	r0, [sp, #48]	; 0x30
 80005cc:	f000 f8f8 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 80005d0:	900b      	str	r0, [sp, #44]	; 0x2c
 80005d2:	f000 f9ef 	bl	80009b4 <IndexOutOfRangeException_.ctor$7117>
 80005d6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80005d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80005da:	f000 f947 	bl	800086c <TypeSystemManager_Throw$4954>
 80005de:	e7ee      	b.n	80005be <Array_Copy$3705+0x2a>
////        pLengths[0] = length1;
////        pLengths[1] = length2;
////
////        return InternalCreate( (void*)t.TypeHandle.Value, 2, pLengths, null );
////    }
////
 80005e0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80005e2:	2800      	cmp	r0, #0
 80005e4:	dbea      	blt.n	80005bc <Array_Copy$3705+0x28>
 80005e6:	e7ff      	b.n	80005e8 <Array_Copy$3705+0x54>
 80005e8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80005ea:	2800      	cmp	r0, #0
 80005ec:	dbe6      	blt.n	80005bc <Array_Copy$3705+0x28>
 80005ee:	e7ff      	b.n	80005f0 <Array_Copy$3705+0x5c>
////    {
////        if(length1 < 0 || length2 < 0 || length3 < 0)
////        {
////            String arg = "length1";
////            if(length2 < 0) arg = "length2";
////            if(length3 < 0) arg = "length3";
 80005f0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80005f2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80005f4:	1842      	adds	r2, r0, r1
        // destinationArray, starting at index 0.
        //
////    [ReliabilityContract( Consistency.MayCorruptInstance, Cer.MayFail )]
        public static void Copy( Array sourceArray, Array destinationArray, int length )
        {
            if(sourceArray == null)
 80005f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80005f8:	f8d3 c008 	ldr.w	ip, [r3, #8]
////        if(length1 < 0 || length2 < 0 || length3 < 0)
////        {
////            String arg = "length1";
////            if(length2 < 0) arg = "length2";
////            if(length3 < 0) arg = "length3";
////            throw new ArgumentOutOfRangeException( arg, Environment.GetResourceString( "ArgumentOutOfRange_NeedNonNegNum" ) );
 80005fc:	4562      	cmp	r2, ip
 80005fe:	dd12      	ble.n	8000626 <Array_Copy$3705+0x92>
 8000600:	e7ff      	b.n	8000602 <Array_Copy$3705+0x6e>
////        }
////
 8000602:	e7ff      	b.n	8000604 <Array_Copy$3705+0x70>
 8000604:	4841      	ldr	r0, [pc, #260]	; (800070c <Array_Copy$3705+0x178>)
 8000606:	4946      	ldr	r1, [pc, #280]	; (8000720 <Array_Copy$3705+0x18c>)
 8000608:	4479      	add	r1, pc
 800060a:	4408      	add	r0, r1
 800060c:	4a43      	ldr	r2, [pc, #268]	; (800071c <Array_Copy$3705+0x188>)
 800060e:	4411      	add	r1, r2
 8000610:	900a      	str	r0, [sp, #40]	; 0x28
 8000612:	f000 f8d5 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8000616:	9009      	str	r0, [sp, #36]	; 0x24
 8000618:	f000 f9cc 	bl	80009b4 <IndexOutOfRangeException_.ctor$7117>
 800061c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800061e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8000620:	f000 f924 	bl	800086c <TypeSystemManager_Throw$4954>
 8000624:	e7ee      	b.n	8000604 <Array_Copy$3705+0x70>
////        if(elementType == null)
////        {
////            throw new ArgumentNullException( "elementType" );
 8000626:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000628:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800062a:	1842      	adds	r2, r0, r1
        // destinationArray, starting at index 0.
        //
////    [ReliabilityContract( Consistency.MayCorruptInstance, Cer.MayFail )]
        public static void Copy( Array sourceArray, Array destinationArray, int length )
        {
            if(sourceArray == null)
 800062c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800062e:	f8d3 c008 	ldr.w	ip, [r3, #8]
////        }
////
////        if(elementType == null)
////        {
////            throw new ArgumentNullException( "elementType" );
////        }
 8000632:	4562      	cmp	r2, ip
 8000634:	dd12      	ble.n	800065c <Array_Copy$3705+0xc8>
 8000636:	e7ff      	b.n	8000638 <Array_Copy$3705+0xa4>
////
////        RuntimeType t = elementType.UnderlyingSystemType as RuntimeType;
 8000638:	e7ff      	b.n	800063a <Array_Copy$3705+0xa6>
 800063a:	4834      	ldr	r0, [pc, #208]	; (800070c <Array_Copy$3705+0x178>)
 800063c:	4936      	ldr	r1, [pc, #216]	; (8000718 <Array_Copy$3705+0x184>)
 800063e:	4479      	add	r1, pc
 8000640:	4408      	add	r0, r1
 8000642:	4a36      	ldr	r2, [pc, #216]	; (800071c <Array_Copy$3705+0x188>)
 8000644:	4411      	add	r1, r2
 8000646:	9008      	str	r0, [sp, #32]
 8000648:	f000 f8ba 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800064c:	9007      	str	r0, [sp, #28]
 800064e:	f000 f9b1 	bl	80009b4 <IndexOutOfRangeException_.ctor$7117>
 8000652:	9808      	ldr	r0, [sp, #32]
 8000654:	9907      	ldr	r1, [sp, #28]
 8000656:	f000 f909 	bl	800086c <TypeSystemManager_Throw$4954>
 800065a:	e7ee      	b.n	800063a <Array_Copy$3705+0xa6>
            }

            if(elementType == null)
            {
#if EXCEPTION_STRINGS
                throw new ArgumentNullException( "elementType" );
 800065c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800065e:	f100 0108 	add.w	r1, r0, #8
 8000662:	9114      	str	r1, [sp, #80]	; 0x50
 8000664:	2100      	movs	r1, #0
 8000666:	9115      	str	r1, [sp, #84]	; 0x54
////        pLengths[0] = length1;
////        pLengths[1] = length2;
////        pLengths[2] = length3;
////
////        return InternalCreate( (void*)t.TypeHandle.Value, 3, pLengths, null );
////    }
 8000668:	9a14      	ldr	r2, [sp, #80]	; 0x50
        }

////    public unsafe static Array CreateInstance( Type elementType, int length1, int length2 )
////    {
////        if(length1 < 0 || length2 < 0)
////        {
 800066a:	3a08      	subs	r2, #8
 800066c:	9115      	str	r1, [sp, #84]	; 0x54
 800066e:	ab15      	add	r3, sp, #84	; 0x54
 8000670:	f1a3 0008 	sub.w	r0, r3, #8
 8000674:	9106      	str	r1, [sp, #24]
 8000676:	4611      	mov	r1, r2
 8000678:	f000 f920 	bl	80008bc <UIntPtr_.ctor$2864>
            }

            if(elementType == null)
            {
#if EXCEPTION_STRINGS
                throw new ArgumentNullException( "elementType" );
 800067c:	9815      	ldr	r0, [sp, #84]	; 0x54
        {
            Copy( sourceArray, sourceIndex, destinationArray, destinationIndex, length, false );
        }

        // Reliability-wise, this method will either possibly corrupt your
        // instance & might fail when called from within a CER, or if the
 800067e:	6840      	ldr	r0, [r0, #4]
            }

            if(elementType == null)
            {
#if EXCEPTION_STRINGS
                throw new ArgumentNullException( "elementType" );
 8000680:	990e      	ldr	r1, [sp, #56]	; 0x38
 8000682:	f101 0208 	add.w	r2, r1, #8
 8000686:	9216      	str	r2, [sp, #88]	; 0x58
 8000688:	9a06      	ldr	r2, [sp, #24]
 800068a:	9217      	str	r2, [sp, #92]	; 0x5c
////        pLengths[0] = length1;
////        pLengths[1] = length2;
////        pLengths[2] = length3;
////
////        return InternalCreate( (void*)t.TypeHandle.Value, 3, pLengths, null );
////    }
 800068c:	9b16      	ldr	r3, [sp, #88]	; 0x58
        }

////    public unsafe static Array CreateInstance( Type elementType, int length1, int length2 )
////    {
////        if(length1 < 0 || length2 < 0)
////        {
 800068e:	f1a3 0108 	sub.w	r1, r3, #8
 8000692:	9217      	str	r2, [sp, #92]	; 0x5c
 8000694:	ab17      	add	r3, sp, #92	; 0x5c
 8000696:	3b08      	subs	r3, #8
 8000698:	9005      	str	r0, [sp, #20]
 800069a:	4618      	mov	r0, r3
 800069c:	f000 f90e 	bl	80008bc <UIntPtr_.ctor$2864>
            }

            if(elementType == null)
            {
#if EXCEPTION_STRINGS
                throw new ArgumentNullException( "elementType" );
 80006a0:	9817      	ldr	r0, [sp, #92]	; 0x5c
        {
            Copy( sourceArray, sourceIndex, destinationArray, destinationIndex, length, false );
        }

        // Reliability-wise, this method will either possibly corrupt your
        // instance & might fail when called from within a CER, or if the
 80006a2:	6840      	ldr	r0, [r0, #4]
////        if(t == null)
////        {
////            throw new ArgumentException( Environment.GetResourceString( "Arg_MustBeType" ), "elementType" );
////        }
////
////        int* pLengths = stackalloc int[3];
 80006a4:	9905      	ldr	r1, [sp, #20]
 80006a6:	4281      	cmp	r1, r0
 80006a8:	d012      	beq.n	80006d0 <Array_Copy$3705+0x13c>
 80006aa:	e7ff      	b.n	80006ac <Array_Copy$3705+0x118>
////        pLengths[0] = length1;
////        pLengths[1] = length2;
 80006ac:	e7ff      	b.n	80006ae <Array_Copy$3705+0x11a>
 80006ae:	4817      	ldr	r0, [pc, #92]	; (800070c <Array_Copy$3705+0x178>)
 80006b0:	4917      	ldr	r1, [pc, #92]	; (8000710 <Array_Copy$3705+0x17c>)
 80006b2:	4479      	add	r1, pc
 80006b4:	4408      	add	r0, r1
 80006b6:	4a17      	ldr	r2, [pc, #92]	; (8000714 <Array_Copy$3705+0x180>)
 80006b8:	4411      	add	r1, r2
 80006ba:	9004      	str	r0, [sp, #16]
 80006bc:	f000 f880 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 80006c0:	9003      	str	r0, [sp, #12]
 80006c2:	f000 f965 	bl	8000990 <NotSupportedException_.ctor$7194>
 80006c6:	9804      	ldr	r0, [sp, #16]
 80006c8:	9903      	ldr	r1, [sp, #12]
 80006ca:	f000 f8cf 	bl	800086c <TypeSystemManager_Throw$4954>
 80006ce:	e7ee      	b.n	80006ae <Array_Copy$3705+0x11a>
////        pLengths[2] = length3;
////
////        return InternalCreate( (void*)t.TypeHandle.Value, 3, pLengths, null );
 80006d0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80006d2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80006d4:	f000 f8fa 	bl	80008cc <Array_GetPointerToElement$3709>
 80006d8:	4601      	mov	r1, r0
////    }
 80006da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80006dc:	9002      	str	r0, [sp, #8]
 80006de:	4610      	mov	r0, r2
 80006e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80006e2:	9101      	str	r1, [sp, #4]
 80006e4:	4619      	mov	r1, r3
 80006e6:	f000 f8f1 	bl	80008cc <Array_GetPointerToElement$3709>
 80006ea:	4601      	mov	r1, r0
////
////    public unsafe static Array CreateInstance( Type elementType, params int[] lengths )
 80006ec:	9a02      	ldr	r2, [sp, #8]
 80006ee:	4282      	cmp	r2, r0
 80006f0:	9100      	str	r1, [sp, #0]
 80006f2:	d009      	beq.n	8000708 <Array_Copy$3705+0x174>
 80006f4:	e7ff      	b.n	80006f6 <Array_Copy$3705+0x162>
////    {
////        if(lengths == null)
 80006f6:	9805      	ldr	r0, [sp, #20]
 80006f8:	68c1      	ldr	r1, [r0, #12]
 80006fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80006fc:	434a      	muls	r2, r1
 80006fe:	9801      	ldr	r0, [sp, #4]
 8000700:	9900      	ldr	r1, [sp, #0]
 8000702:	f000 f909 	bl	8000918 <Buffer_InternalMemoryMove$3747>
////        {
 8000706:	e7ff      	b.n	8000708 <Array_Copy$3705+0x174>
 8000708:	b018      	add	sp, #96	; 0x60
 800070a:	bdb0      	pop	{r4, r5, r7, pc}
 800070c:	ffffea38 	.word	0xffffea38
 8000710:	1800111e 	.word	0x1800111e
 8000714:	e801052c 	.word	0xe801052c
 8000718:	18001192 	.word	0x18001192
 800071c:	e80105bc 	.word	0xe80105bc
 8000720:	180011c8 	.word	0x180011c8
 8000724:	1800120e 	.word	0x1800120e

08000728 <Exception_ToString$7042>:
 8000728:	b580      	push	{r7, lr}
 800072a:	b086      	sub	sp, #24
 800072c:	4601      	mov	r1, r0
        public Exception( String message, Exception innerException )
        {
            m_message        = message;
            m_innerException = innerException;
////        m_stackTrace     = null;
////        m_dynamicMethods = null;
 800072e:	f100 0208 	add.w	r2, r0, #8
 8000732:	9204      	str	r2, [sp, #16]
 8000734:	2200      	movs	r2, #0
 8000736:	9205      	str	r2, [sp, #20]
            }
        }

////    public virtual IDictionary Data
////    {
////        get
 8000738:	9b04      	ldr	r3, [sp, #16]
////        m_className              =               info.GetString      ( "ClassName"                             );
////        m_exceptionMethodString  =               info.GetString      ( "ExceptionMethod"                       );
////        m_stackTraceString       =               info.GetString      ( "StackTraceString"                      );
////        m_remoteStackTraceString =               info.GetString      ( "RemoteStackTraceString"                );
////        m_remoteStackIndex       =               info.GetInt32       ( "RemoteStackIndex"                      );
////        m_source                 =               info.GetString      ( "Source"                                );
 800073a:	3b08      	subs	r3, #8
 800073c:	9205      	str	r2, [sp, #20]
 800073e:	aa05      	add	r2, sp, #20
 8000740:	3a08      	subs	r2, #8
 8000742:	9003      	str	r0, [sp, #12]
 8000744:	4610      	mov	r0, r2
 8000746:	9102      	str	r1, [sp, #8]
 8000748:	4619      	mov	r1, r3
 800074a:	f000 f8b7 	bl	80008bc <UIntPtr_.ctor$2864>
        public Exception( String message, Exception innerException )
        {
            m_message        = message;
            m_innerException = innerException;
////        m_stackTrace     = null;
////        m_dynamicMethods = null;
 800074e:	9805      	ldr	r0, [sp, #20]
////    // Sets the help link for this exception.
////    // This should be in a URL/URN form, such as:
////    // "file:///C:/Applications/Bazzal/help.html#ErrorNum42"
////    // Changed to be a read-write String and not return an exception
////    public virtual String HelpLink
////    {
 8000750:	6840      	ldr	r0, [r0, #4]
////        }
////    }

    public override String ToString()
    {
        return Message;
 8000752:	69c0      	ldr	r0, [r0, #28]
 8000754:	6980      	ldr	r0, [r0, #24]
 8000756:	9903      	ldr	r1, [sp, #12]
 8000758:	9001      	str	r0, [sp, #4]
 800075a:	4608      	mov	r0, r1
 800075c:	9a01      	ldr	r2, [sp, #4]
 800075e:	4790      	blx	r2
 8000760:	b006      	add	sp, #24
 8000762:	bd80      	pop	{r7, pc}

08000764 <Object_Equals$3819>:
 8000764:	b082      	sub	sp, #8
 8000766:	460a      	mov	r2, r1
 8000768:	4603      	mov	r3, r0
 800076a:	f04f 0c00 	mov.w	ip, #0
 800076e:	4288      	cmp	r0, r1
 8000770:	bf08      	it	eq
 8000772:	f04f 0c01 	moveq.w	ip, #1
 8000776:	4660      	mov	r0, ip
 8000778:	9301      	str	r3, [sp, #4]
 800077a:	9200      	str	r2, [sp, #0]
 800077c:	b002      	add	sp, #8
 800077e:	4770      	bx	lr

08000780 <Object_GetHashCode$3820>:
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	4601      	mov	r1, r0
        public virtual bool Equals( Object obj )
        {
            return ReferenceEquals( this, obj );
        }

////    [ResourceExposure( ResourceScope.None )]
 8000786:	9101      	str	r1, [sp, #4]
 8000788:	f001 f9fc 	bl	8001b84 <SyncBlockTable_GetHashCode$4497>
 800078c:	b002      	add	sp, #8
 800078e:	bd80      	pop	{r7, pc}

08000790 <ArgumentException_get_Message$6067>:
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	4601      	mov	r1, r0

        public override String Message
        {
            get
            {
                return m_message + " " + m_paramName;
 8000796:	6882      	ldr	r2, [r0, #8]
 8000798:	68c0      	ldr	r0, [r0, #12]
 800079a:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <ArgumentException_get_Message$6067+0x28>)
 800079c:	f8df c01c 	ldr.w	ip, [pc, #28]	; 80007bc <ArgumentException_get_Message$6067+0x2c>
 80007a0:	44fc      	add	ip, pc
 80007a2:	4463      	add	r3, ip
 80007a4:	9001      	str	r0, [sp, #4]
 80007a6:	4610      	mov	r0, r2
 80007a8:	9100      	str	r1, [sp, #0]
 80007aa:	4619      	mov	r1, r3
 80007ac:	9a01      	ldr	r2, [sp, #4]
 80007ae:	f002 fca7 	bl	8003100 <String_Concat$2588>
 80007b2:	b002      	add	sp, #8
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	e8012c7c 	.word	0xe8012c7c
 80007bc:	18001030 	.word	0x18001030

080007c0 <DefaultTypeSystemManager_AllocateObject$4960>:
 80007c0:	b510      	push	{r4, lr}
 80007c2:	b08c      	sub	sp, #48	; 0x30
 80007c4:	4608      	mov	r0, r1
 80007c6:	6889      	ldr	r1, [r1, #8]
    [ImplicitInstance]
    [ForceDevirtualization]
    public abstract class TypeSystemManager
    {
        class EmptyManager : TypeSystemManager
        {
 80007c8:	9004      	str	r0, [sp, #16]
 80007ca:	4608      	mov	r0, r1
 80007cc:	f008 fd5e 	bl	800928c <DefaultTypeSystemManager_ComputeObjectSize$4965>
 80007d0:	4601      	mov	r1, r0
            [NoInline]
 80007d2:	9103      	str	r1, [sp, #12]
 80007d4:	f008 fd62 	bl	800929c <DefaultTypeSystemManager_AllocateInner$4967>
 80007d8:	9005      	str	r0, [sp, #20]
            public override Object AllocateObject( TS.VTable vTable )
            {
 80007da:	e7ff      	b.n	80007dc <DefaultTypeSystemManager_AllocateObject$4960+0x1c>
 80007dc:	a805      	add	r0, sp, #20
 80007de:	9905      	ldr	r1, [sp, #20]
 80007e0:	9108      	str	r1, [sp, #32]
 80007e2:	2100      	movs	r1, #0
 80007e4:	9109      	str	r1, [sp, #36]	; 0x24
        private static T AtomicAllocatorSlow<T>( ref T obj ) where T : class, new()
        {
            T newObj = new T();

            System.Threading.Interlocked.CompareExchange( ref obj, newObj, default(T) );

 80007e6:	9a08      	ldr	r2, [sp, #32]
        {
            object obj = InitializeObject( memory, vTable );

            ArrayImpl array = ArrayImpl.CastAsArray( obj );

            array.m_numElements = length;
 80007e8:	9b03      	ldr	r3, [sp, #12]
 80007ea:	441a      	add	r2, r3
 80007ec:	9109      	str	r1, [sp, #36]	; 0x24
 80007ee:	a909      	add	r1, sp, #36	; 0x24
 80007f0:	3908      	subs	r1, #8
 80007f2:	9002      	str	r0, [sp, #8]
 80007f4:	4608      	mov	r0, r1
 80007f6:	4611      	mov	r1, r2
 80007f8:	f000 f860 	bl	80008bc <UIntPtr_.ctor$2864>
 80007fc:	9805      	ldr	r0, [sp, #20]
 80007fe:	900a      	str	r0, [sp, #40]	; 0x28
 8000800:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000802:	900b      	str	r0, [sp, #44]	; 0x2c
        private static T AtomicAllocatorSlow<T>( ref T obj ) where T : class, new()
        {
            T newObj = new T();

            System.Threading.Interlocked.CompareExchange( ref obj, newObj, default(T) );

 8000804:	990a      	ldr	r1, [sp, #40]	; 0x28
            Processor.Context ctx    = thread.ThrowContext;

            thread.CurrentException = obj;

            ctx.Populate();

 8000806:	1a40      	subs	r0, r0, r1
 8000808:	9001      	str	r0, [sp, #4]
 800080a:	4608      	mov	r0, r1
 800080c:	9901      	ldr	r1, [sp, #4]
 800080e:	f01f fb1e 	bl	801fe4e <__aeabi_memclr>
            [NoInline]
            public override Object AllocateObject( TS.VTable vTable )
            {
                return null;
            }

 8000812:	e7ff      	b.n	8000814 <DefaultTypeSystemManager_AllocateObject$4960+0x54>

        [Inline]
        public object InitializeObject( UIntPtr   memory ,
                                        TS.VTable vTable )
        {
            ObjectHeader oh = ObjectHeader.CastAsObjectHeader( memory );
 8000814:	9805      	ldr	r0, [sp, #20]
 8000816:	9904      	ldr	r1, [sp, #16]
 8000818:	6041      	str	r1, [r0, #4]
 800081a:	2208      	movs	r2, #8
 800081c:	6002      	str	r2, [r0, #0]
 800081e:	2000      	movs	r0, #0
 8000820:	9006      	str	r0, [sp, #24]
 8000822:	9007      	str	r0, [sp, #28]
 8000824:	9a02      	ldr	r2, [sp, #8]
 8000826:	7813      	ldrb	r3, [r2, #0]
 8000828:	f892 c001 	ldrb.w	ip, [r2, #1]
 800082c:	f892 e002 	ldrb.w	lr, [r2, #2]
 8000830:	78d4      	ldrb	r4, [r2, #3]
 8000832:	ea4e 2e04 	orr.w	lr, lr, r4, lsl #8
 8000836:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800083a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800083e:	9306      	str	r3, [sp, #24]
 8000840:	9007      	str	r0, [sp, #28]
        private static T AtomicAllocatorSlow<T>( ref T obj ) where T : class, new()
        {
            T newObj = new T();

            System.Threading.Interlocked.CompareExchange( ref obj, newObj, default(T) );

 8000842:	9b06      	ldr	r3, [sp, #24]
        {
            object obj = InitializeObject( memory, vTable );

            ArrayImpl array = ArrayImpl.CastAsArray( obj );

            array.m_numElements = length;
 8000844:	f103 0108 	add.w	r1, r3, #8
 8000848:	9007      	str	r0, [sp, #28]
 800084a:	a807      	add	r0, sp, #28
 800084c:	3808      	subs	r0, #8
 800084e:	f000 f835 	bl	80008bc <UIntPtr_.ctor$2864>
                return null;
            }

            [NoInline]
            public override Object AllocateObjectWithExtensions( TS.VTable vTable )
            {
 8000852:	9807      	ldr	r0, [sp, #28]
 8000854:	3808      	subs	r0, #8
 8000856:	b00c      	add	sp, #48	; 0x30
 8000858:	bd10      	pop	{r4, pc}

0800085a <ArgumentNullException_.ctor$6069>:
 800085a:	b580      	push	{r7, lr}
 800085c:	b082      	sub	sp, #8
 800085e:	4601      	mov	r1, r0
    public class ArgumentException : SystemException /*, ISerializable*/
    {
        private String m_paramName;

        // Creates a new ArgumentException with its message
        // string set to the empty string.
 8000860:	9101      	str	r1, [sp, #4]
 8000862:	f00a fcdc 	bl	800b21e <ArgumentException_.ctor$6062>
 8000866:	b002      	add	sp, #8
 8000868:	bd80      	pop	{r7, pc}
 800086a:	46c0      	nop			; (mov r8, r8)

0800086c <TypeSystemManager_Throw$4954>:
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	4608      	mov	r0, r1

            //
            // Our LLVM port does not yet support throwing exceptions
            //
            
             BugCheck.Log( "!!!                       WARNING                             !!!" );
 8000872:	4a0e      	ldr	r2, [pc, #56]	; (80008ac <TypeSystemManager_Throw$4954+0x40>)
 8000874:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <TypeSystemManager_Throw$4954+0x44>)
 8000876:	447b      	add	r3, pc
 8000878:	441a      	add	r2, r3
 800087a:	9003      	str	r0, [sp, #12]
 800087c:	4610      	mov	r0, r2
 800087e:	9102      	str	r1, [sp, #8]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	9300      	str	r3, [sp, #0]
 8000884:	f007 feb6 	bl	80085f4 <BugCheck_Log$4649>
             BugCheck.Log( "!!! Throwing Exceptions is not yet supported for LLVM CodeGen !!!" );
 8000888:	480a      	ldr	r0, [pc, #40]	; (80008b4 <TypeSystemManager_Throw$4954+0x48>)
 800088a:	9900      	ldr	r1, [sp, #0]
 800088c:	4408      	add	r0, r1
 800088e:	f007 feb1 	bl	80085f4 <BugCheck_Log$4649>
             BugCheck.Log( "!!!                       WARNING                             !!!" );
 8000892:	9801      	ldr	r0, [sp, #4]
 8000894:	f007 feae 	bl	80085f4 <BugCheck_Log$4649>
 8000898:	4807      	ldr	r0, [pc, #28]	; (80008b8 <TypeSystemManager_Throw$4954+0x4c>)
 800089a:	9900      	ldr	r1, [sp, #0]
 800089c:	5840      	ldr	r0, [r0, r1]

             BugCheck.Raise( BugCheck.StopCode.InvalidOperation );
 800089e:	f7ff fd31 	bl	8000304 <BugCheck_Raise$4648>

            DeliverException( obj );
 80008a2:	9802      	ldr	r0, [sp, #8]
 80008a4:	f008 fb5a 	bl	8008f5c <TypeSystemManager_DeliverException$4957>
 80008a8:	b004      	add	sp, #16
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	e801238c 	.word	0xe801238c
 80008b0:	18000f5a 	.word	0x18000f5a
 80008b4:	e801242c 	.word	0xe801242c
 80008b8:	e8025310 	.word	0xe8025310

080008bc <UIntPtr_.ctor$2864>:
 80008bc:	b082      	sub	sp, #8
 80008be:	460a      	mov	r2, r1
 80008c0:	4603      	mov	r3, r0
 80008c2:	6081      	str	r1, [r0, #8]
 80008c4:	9301      	str	r3, [sp, #4]
 80008c6:	9200      	str	r2, [sp, #0]
 80008c8:	b002      	add	sp, #8
 80008ca:	4770      	bx	lr

080008cc <Array_GetPointerToElement$3709>:
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	460a      	mov	r2, r1
 80008d2:	4603      	mov	r3, r0
        // This is used to get the pointer to the data, which is not possible in C#.
        //
        [Inline]
        public unsafe uint* GetDataPointer()
        {
            fixed(uint* ptr = &m_numElements)
 80008d4:	3008      	adds	r0, #8
 80008d6:	9004      	str	r0, [sp, #16]
 80008d8:	f04f 0c00 	mov.w	ip, #0
 80008dc:	f8cd c014 	str.w	ip, [sp, #20]
            {
                throw new NotSupportedException();
            }

            void* voidSourcePtr      = sourceArray     .GetPointerToElement( (uint)sourceIndex      );
            void* voidDestinationPtr = destinationArray.GetPointerToElement( (uint)destinationIndex );
 80008e0:	f8dd e010 	ldr.w	lr, [sp, #16]
                uint* ptrEnd = (uint*)voidPtrEnd;

                while(ptr < ptrEnd)
                {
                    *ptr++ = 0;
                }
 80008e4:	f1ae 0e08 	sub.w	lr, lr, #8
 80008e8:	f8cd c014 	str.w	ip, [sp, #20]
 80008ec:	f10d 0c14 	add.w	ip, sp, #20
 80008f0:	f1ac 0c08 	sub.w	ip, ip, #8
 80008f4:	9003      	str	r0, [sp, #12]
 80008f6:	4660      	mov	r0, ip
 80008f8:	9102      	str	r1, [sp, #8]
 80008fa:	4671      	mov	r1, lr
 80008fc:	9201      	str	r2, [sp, #4]
 80008fe:	9300      	str	r3, [sp, #0]
 8000900:	f7ff ffdc 	bl	80008bc <UIntPtr_.ctor$2864>
            }

            int indexEnd = index + length;
            if(indexEnd > array.Length)
            {
                throw new IndexOutOfRangeException();
 8000904:	9805      	ldr	r0, [sp, #20]
                TS.VTable vTable = TS.VTable.Get( this );

                TS.TypeRepresentation ts = vTable.TypeInfo;

                if(ts is TS.SzArrayReferenceTypeRepresentation)
                {
 8000906:	6840      	ldr	r0, [r0, #4]
 8000908:	68c0      	ldr	r0, [r0, #12]
        [Inline]
        public unsafe uint* GetDataPointer()
        {
            fixed(uint* ptr = &m_numElements)
            {
                return &ptr[1];
 800090a:	9902      	ldr	r1, [sp, #8]
 800090c:	9a03      	ldr	r2, [sp, #12]
 800090e:	fb01 2000 	mla	r0, r1, r0, r2
        //
        public unsafe void* GetPointerToElement( uint index )
        {
            byte* ptr = (byte*)GetDataPointer();

            return &ptr[index * this.ElementSize];
 8000912:	3004      	adds	r0, #4
 8000914:	b006      	add	sp, #24
 8000916:	bd80      	pop	{r7, pc}

08000918 <Buffer_InternalMemoryMove$3747>:
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	4613      	mov	r3, r2
 800091e:	f04f 0c00 	mov.w	ip, #0
 8000922:	f1b2 3fff 	cmp.w	r2, #4294967295
 8000926:	bfc8      	it	gt
 8000928:	f04f 0c01 	movgt.w	ip, #1
            }

            if(srcOffset < 0 || (uint)(srcOffset + count) > src.Size)
            {
#if EXCEPTION_STRINGS
                throw new IndexOutOfRangeException( "src" );
 800092c:	f1bc 0f00 	cmp.w	ip, #0
 8000930:	9003      	str	r0, [sp, #12]
 8000932:	9302      	str	r3, [sp, #8]
 8000934:	9101      	str	r1, [sp, #4]
 8000936:	d107      	bne.n	8000948 <Buffer_InternalMemoryMove$3747+0x30>
 8000938:	e7ff      	b.n	800093a <Buffer_InternalMemoryMove$3747+0x22>
 800093a:	4810      	ldr	r0, [pc, #64]	; (800097c <Buffer_InternalMemoryMove$3747+0x64>)
 800093c:	4910      	ldr	r1, [pc, #64]	; (8000980 <Buffer_InternalMemoryMove$3747+0x68>)
 800093e:	4479      	add	r1, pc
 8000940:	5840      	ldr	r0, [r0, r1]
#else
                throw new IndexOutOfRangeException();
 8000942:	f7ff fcdf 	bl	8000304 <BugCheck_Raise$4648>
#endif
 8000946:	e7ff      	b.n	8000948 <Buffer_InternalMemoryMove$3747+0x30>
                                                        byte* dst   ,
                                                        int   count )
        {
            BugCheck.Assert( count >= 0, BugCheck.StopCode.NegativeIndex );

            if(src <= dst && dst < &src[count])
 8000948:	9803      	ldr	r0, [sp, #12]
 800094a:	9901      	ldr	r1, [sp, #4]
 800094c:	4288      	cmp	r0, r1
 800094e:	d906      	bls.n	800095e <Buffer_InternalMemoryMove$3747+0x46>
 8000950:	e7ff      	b.n	8000952 <Buffer_InternalMemoryMove$3747+0x3a>
 8000952:	9801      	ldr	r0, [sp, #4]
 8000954:	9903      	ldr	r1, [sp, #12]
 8000956:	9a02      	ldr	r2, [sp, #8]
 8000958:	f01f fa7c 	bl	801fe54 <__aeabi_memcpy>
                InternalBackwardMemoryCopy( src, dst, count );
            }
            else
            {
                InternalMemoryCopy( src, dst, count );
            }
 800095c:	e00c      	b.n	8000978 <Buffer_InternalMemoryMove$3747+0x60>
                                                        byte* dst   ,
                                                        int   count )
        {
            BugCheck.Assert( count >= 0, BugCheck.StopCode.NegativeIndex );

            if(src <= dst && dst < &src[count])
 800095e:	9803      	ldr	r0, [sp, #12]
 8000960:	9902      	ldr	r1, [sp, #8]
 8000962:	1842      	adds	r2, r0, r1
 8000964:	9b01      	ldr	r3, [sp, #4]
 8000966:	4293      	cmp	r3, r2
 8000968:	d2f3      	bcs.n	8000952 <Buffer_InternalMemoryMove$3747+0x3a>
 800096a:	e7ff      	b.n	800096c <Buffer_InternalMemoryMove$3747+0x54>
 800096c:	9801      	ldr	r0, [sp, #4]
 800096e:	9903      	ldr	r1, [sp, #12]
 8000970:	9a02      	ldr	r2, [sp, #8]
 8000972:	f01f fa71 	bl	801fe58 <__aeabi_memmove>
            {
                InternalBackwardMemoryCopy( src, dst, count );
            }
 8000976:	e7ff      	b.n	8000978 <Buffer_InternalMemoryMove$3747+0x60>
 8000978:	b004      	add	sp, #16
 800097a:	bd80      	pop	{r7, pc}
 800097c:	e80253b4 	.word	0xe80253b4
 8000980:	18000e92 	.word	0x18000e92

08000984 <Exception_get_Message$7039>:
 8000984:	b081      	sub	sp, #4
 8000986:	4601      	mov	r1, r0
////
////                return String.Format( CultureInfo.CurrentCulture, Environment.GetResourceString( "Exception_WasThrown" ), m_className );
////            }
////            else
////            {
                    return m_message;
 8000988:	6880      	ldr	r0, [r0, #8]
 800098a:	9100      	str	r1, [sp, #0]
 800098c:	b001      	add	sp, #4
 800098e:	4770      	bx	lr

08000990 <NotSupportedException_.ctor$7194>:
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	4601      	mov	r1, r0
            return value;
        }

        public static double Abs( double value )
        {
            if(value < 0) return -value;
 8000996:	4a05      	ldr	r2, [pc, #20]	; (80009ac <NotSupportedException_.ctor$7194+0x1c>)
 8000998:	4b05      	ldr	r3, [pc, #20]	; (80009b0 <NotSupportedException_.ctor$7194+0x20>)
 800099a:	447b      	add	r3, pc
 800099c:	441a      	add	r2, r3
 800099e:	9101      	str	r1, [sp, #4]
 80009a0:	4611      	mov	r1, r2
 80009a2:	f00a fc4c 	bl	800b23e <SystemException_.ctor$7366>
 80009a6:	b002      	add	sp, #8
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	e8012dac 	.word	0xe8012dac
 80009b0:	18000e36 	.word	0x18000e36

080009b4 <IndexOutOfRangeException_.ctor$7117>:
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	4601      	mov	r1, r0
        //

        //--//

        //
        // Helper Methods
 80009ba:	9101      	str	r1, [sp, #4]
 80009bc:	f00a fc37 	bl	800b22e <SystemException_.ctor$7365>
 80009c0:	b002      	add	sp, #8
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <SzArrayReferenceTypeRepresentation_ToString$14547>:
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	4601      	mov	r1, r0
        // Debug Methods
        //

        public override String ToString()
        {
            System.Text.StringBuilder sb = new System.Text.StringBuilder( "SzArrayReferenceTypeRepresentation(" );
 80009ca:	4a14      	ldr	r2, [pc, #80]	; (8000a1c <SzArrayReferenceTypeRepresentation_ToString$14547+0x58>)
 80009cc:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <SzArrayReferenceTypeRepresentation_ToString$14547+0x5c>)
 80009ce:	447b      	add	r3, pc
 80009d0:	441a      	add	r2, r3
 80009d2:	f8df c050 	ldr.w	ip, [pc, #80]	; 8000a24 <SzArrayReferenceTypeRepresentation_ToString$14547+0x60>
 80009d6:	449c      	add	ip, r3
 80009d8:	9005      	str	r0, [sp, #20]
 80009da:	4610      	mov	r0, r2
 80009dc:	9104      	str	r1, [sp, #16]
 80009de:	4661      	mov	r1, ip
 80009e0:	9303      	str	r3, [sp, #12]
 80009e2:	f7ff feed 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 80009e6:	4910      	ldr	r1, [pc, #64]	; (8000a28 <SzArrayReferenceTypeRepresentation_ToString$14547+0x64>)
 80009e8:	9a03      	ldr	r2, [sp, #12]
 80009ea:	4411      	add	r1, r2
 80009ec:	9002      	str	r0, [sp, #8]
 80009ee:	f00d fc1d 	bl	800e22c <StringBuilder_.ctor$8489>
 80009f2:	480e      	ldr	r0, [pc, #56]	; (8000a2c <SzArrayReferenceTypeRepresentation_ToString$14547+0x68>)

            PrettyToString( sb, true, false );
 80009f4:	9903      	ldr	r1, [sp, #12]
 80009f6:	5c42      	ldrb	r2, [r0, r1]
 80009f8:	2300      	movs	r3, #0
 80009fa:	9805      	ldr	r0, [sp, #20]
 80009fc:	9902      	ldr	r1, [sp, #8]
 80009fe:	f000 f8dd 	bl	8000bbc <SzArrayReferenceTypeRepresentation_PrettyToString$14548>

            sb.Append( ")" );
 8000a02:	480b      	ldr	r0, [pc, #44]	; (8000a30 <SzArrayReferenceTypeRepresentation_ToString$14547+0x6c>)
 8000a04:	9903      	ldr	r1, [sp, #12]
 8000a06:	4401      	add	r1, r0
 8000a08:	9802      	ldr	r0, [sp, #8]
 8000a0a:	f00c f9f7 	bl	800cdfc <StringBuilder_Append$8507>

            return sb.ToString();
 8000a0e:	9902      	ldr	r1, [sp, #8]
 8000a10:	9001      	str	r0, [sp, #4]
 8000a12:	4608      	mov	r0, r1
 8000a14:	f001 ff36 	bl	8002884 <StringBuilder_ToString$8499>
 8000a18:	b006      	add	sp, #24
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	ffffea38 	.word	0xffffea38
 8000a20:	18000e02 	.word	0x18000e02
 8000a24:	e8010b3c 	.word	0xe8010b3c
 8000a28:	e8013e4c 	.word	0xe8013e4c
 8000a2c:	e8025457 	.word	0xe8025457
 8000a30:	e8013a4c 	.word	0xe8013a4c

08000a34 <ArrayReferenceTypeRepresentation_Equals$14392>:
 8000a34:	b510      	push	{r4, lr}
 8000a36:	b088      	sub	sp, #32
 8000a38:	460a      	mov	r2, r1
 8000a3a:	4603      	mov	r3, r0
        public override void ApplyTransformation( TransformationContext context )
        {
            context.Push( this );

            //
            // Load before calling the base method, because we might get a call to GetHashCode().
 8000a3c:	f100 0c08 	add.w	ip, r0, #8
 8000a40:	f8cd c018 	str.w	ip, [sp, #24]
 8000a44:	f04f 0c00 	mov.w	ip, #0
 8000a48:	f8cd c01c 	str.w	ip, [sp, #28]
                }

                if(thisElementType is ReferenceTypeRepresentation)
                {
                    return thisElementType.CanBeAssignedFrom( rvalueElementType, set );
                }
 8000a4c:	f8dd e018 	ldr.w	lr, [sp, #24]

        //
        // Access Methods
        //

        public override TypeRepresentation ContainedType
 8000a50:	f1ae 0e08 	sub.w	lr, lr, #8
 8000a54:	f8cd c01c 	str.w	ip, [sp, #28]
 8000a58:	ac07      	add	r4, sp, #28
 8000a5a:	3c08      	subs	r4, #8
 8000a5c:	9005      	str	r0, [sp, #20]
 8000a5e:	4620      	mov	r0, r4
 8000a60:	9104      	str	r1, [sp, #16]
 8000a62:	4671      	mov	r1, lr
 8000a64:	9303      	str	r3, [sp, #12]
 8000a66:	f8cd c008 	str.w	ip, [sp, #8]
 8000a6a:	9201      	str	r2, [sp, #4]
 8000a6c:	f7ff ff26 	bl	80008bc <UIntPtr_.ctor$2864>
        public override void ApplyTransformation( TransformationContext context )
        {
            context.Push( this );

            //
            // Load before calling the base method, because we might get a call to GetHashCode().
 8000a70:	9807      	ldr	r0, [sp, #28]
 8000a72:	6840      	ldr	r0, [r0, #4]
            return false;
        }

        public override bool Equals( object obj )
        {
            return this.EqualsThroughEquivalence( obj, null );
 8000a74:	69c0      	ldr	r0, [r0, #28]
 8000a76:	6980      	ldr	r0, [r0, #24]
 8000a78:	9905      	ldr	r1, [sp, #20]
 8000a7a:	9000      	str	r0, [sp, #0]
 8000a7c:	4608      	mov	r0, r1
 8000a7e:	9904      	ldr	r1, [sp, #16]
 8000a80:	9a02      	ldr	r2, [sp, #8]
 8000a82:	9b00      	ldr	r3, [sp, #0]
 8000a84:	4798      	blx	r3
 8000a86:	b008      	add	sp, #32
 8000a88:	bd10      	pop	{r4, pc}

08000a8a <ArrayReferenceTypeRepresentation_GetHashCode$14393>:
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b086      	sub	sp, #24
 8000a8e:	4601      	mov	r1, r0
        }

        public override int GetHashCode()
        {
            return m_elementType.GetHashCode();
 8000a90:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
        public override void ApplyTransformation( TransformationContext context )
        {
            context.Push( this );

            //
            // Load before calling the base method, because we might get a call to GetHashCode().
 8000a92:	f100 0208 	add.w	r2, r0, #8
 8000a96:	9204      	str	r2, [sp, #16]
 8000a98:	2200      	movs	r2, #0
 8000a9a:	9205      	str	r2, [sp, #20]
                }

                if(thisElementType is ReferenceTypeRepresentation)
                {
                    return thisElementType.CanBeAssignedFrom( rvalueElementType, set );
                }
 8000a9c:	9b04      	ldr	r3, [sp, #16]

        //
        // Access Methods
        //

        public override TypeRepresentation ContainedType
 8000a9e:	3b08      	subs	r3, #8
 8000aa0:	9205      	str	r2, [sp, #20]
 8000aa2:	aa05      	add	r2, sp, #20
 8000aa4:	3a08      	subs	r2, #8
 8000aa6:	9003      	str	r0, [sp, #12]
 8000aa8:	4610      	mov	r0, r2
 8000aaa:	9102      	str	r1, [sp, #8]
 8000aac:	4619      	mov	r1, r3
 8000aae:	f7ff ff05 	bl	80008bc <UIntPtr_.ctor$2864>
        public override void ApplyTransformation( TransformationContext context )
        {
            context.Push( this );

            //
            // Load before calling the base method, because we might get a call to GetHashCode().
 8000ab2:	9805      	ldr	r0, [sp, #20]
 8000ab4:	6840      	ldr	r0, [r0, #4]
            return this.EqualsThroughEquivalence( obj, null );
        }

        public override int GetHashCode()
        {
            return m_elementType.GetHashCode();
 8000ab6:	69c0      	ldr	r0, [r0, #28]
 8000ab8:	6940      	ldr	r0, [r0, #20]
 8000aba:	9903      	ldr	r1, [sp, #12]
 8000abc:	9001      	str	r0, [sp, #4]
 8000abe:	4608      	mov	r0, r1
 8000ac0:	9a01      	ldr	r2, [sp, #4]
 8000ac2:	4790      	blx	r2
 8000ac4:	b006      	add	sp, #24
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <ArrayReferenceTypeRepresentation_EqualsThroughEquivalence$14391>:
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	460b      	mov	r3, r1

            tdRes.PopulateInstantiation( this, ic );

            return tdRes;
        }

 8000ace:	f8df c04c 	ldr.w	ip, [pc, #76]	; 8000b1c <ArrayReferenceTypeRepresentation_EqualsThroughEquivalence$14391+0x54>
 8000ad2:	f8df e04c 	ldr.w	lr, [pc, #76]	; 8000b20 <ArrayReferenceTypeRepresentation_EqualsThroughEquivalence$14391+0x58>
 8000ad6:	44fe      	add	lr, pc
 8000ad8:	44f4      	add	ip, lr
 8000ada:	9003      	str	r0, [sp, #12]
 8000adc:	4608      	mov	r0, r1
 8000ade:	4661      	mov	r1, ip
 8000ae0:	9302      	str	r3, [sp, #8]
 8000ae2:	9201      	str	r2, [sp, #4]
 8000ae4:	f000 fd29 	bl	800153a <TypeSystemManager_CastToTypeNoThrow$4949>
 8000ae8:	2800      	cmp	r0, #0
 8000aea:	d010      	beq.n	8000b0e <ArrayReferenceTypeRepresentation_EqualsThroughEquivalence$14391+0x46>
 8000aec:	e7ff      	b.n	8000aee <ArrayReferenceTypeRepresentation_EqualsThroughEquivalence$14391+0x26>
        //--//

 8000aee:	480b      	ldr	r0, [pc, #44]	; (8000b1c <ArrayReferenceTypeRepresentation_EqualsThroughEquivalence$14391+0x54>)
 8000af0:	490c      	ldr	r1, [pc, #48]	; (8000b24 <ArrayReferenceTypeRepresentation_EqualsThroughEquivalence$14391+0x5c>)
 8000af2:	4479      	add	r1, pc
 8000af4:	4401      	add	r1, r0
 8000af6:	9802      	ldr	r0, [sp, #8]
 8000af8:	f005 fc2e 	bl	8006358 <TypeSystemManager_CastToType$4948>
        //
        // Access Methods
 8000afc:	9903      	ldr	r1, [sp, #12]
 8000afe:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8000b00:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8000b02:	4610      	mov	r0, r2
 8000b04:	9a01      	ldr	r2, [sp, #4]
 8000b06:	f00e fa55 	bl	800efb4 <BaseRepresentation_EqualsThroughEquivalence$13542>
 8000b0a:	9000      	str	r0, [sp, #0]
 8000b0c:	e002      	b.n	8000b14 <ArrayReferenceTypeRepresentation_EqualsThroughEquivalence$14391+0x4c>
 8000b0e:	2000      	movs	r0, #0
        //

        //--//
 8000b10:	9000      	str	r0, [sp, #0]
 8000b12:	e7ff      	b.n	8000b14 <ArrayReferenceTypeRepresentation_EqualsThroughEquivalence$14391+0x4c>
 8000b14:	9800      	ldr	r0, [sp, #0]
 8000b16:	b004      	add	sp, #16
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	e801184c 	.word	0xe801184c
 8000b20:	18000cfa 	.word	0x18000cfa
 8000b24:	18000cde 	.word	0x18000cde

08000b28 <ArrayReferenceTypeRepresentation_get_ContainedType$14397>:
 8000b28:	b081      	sub	sp, #4
 8000b2a:	4601      	mov	r1, r0

        public override TypeRepresentation ContainedType
        {
            get
            {
                return m_elementType;
 8000b2c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8000b2e:	9100      	str	r1, [sp, #0]
 8000b30:	b001      	add	sp, #4
 8000b32:	4770      	bx	lr

08000b34 <TypeRepresentation_get_UnderlyingType$14668>:
 8000b34:	b081      	sub	sp, #4
 8000b36:	4601      	mov	r1, r0
 8000b38:	9100      	str	r1, [sp, #0]
 8000b3a:	b001      	add	sp, #4
 8000b3c:	4770      	bx	lr

08000b3e <ArrayReferenceTypeRepresentation_get_IsOpenType$14398>:
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b086      	sub	sp, #24
 8000b42:	4601      	mov	r1, r0

        public override bool IsOpenType
        {
            get
            {
                return m_elementType.IsOpenType;
 8000b44:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
        public override void ApplyTransformation( TransformationContext context )
        {
            context.Push( this );

            //
            // Load before calling the base method, because we might get a call to GetHashCode().
 8000b46:	f100 0208 	add.w	r2, r0, #8
 8000b4a:	9204      	str	r2, [sp, #16]
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	9205      	str	r2, [sp, #20]
                }

                if(thisElementType is ReferenceTypeRepresentation)
                {
                    return thisElementType.CanBeAssignedFrom( rvalueElementType, set );
                }
 8000b50:	9b04      	ldr	r3, [sp, #16]

        //
        // Access Methods
        //

        public override TypeRepresentation ContainedType
 8000b52:	3b08      	subs	r3, #8
 8000b54:	9205      	str	r2, [sp, #20]
 8000b56:	aa05      	add	r2, sp, #20
 8000b58:	3a08      	subs	r2, #8
 8000b5a:	9003      	str	r0, [sp, #12]
 8000b5c:	4610      	mov	r0, r2
 8000b5e:	9102      	str	r1, [sp, #8]
 8000b60:	4619      	mov	r1, r3
 8000b62:	f7ff feab 	bl	80008bc <UIntPtr_.ctor$2864>
        public override void ApplyTransformation( TransformationContext context )
        {
            context.Push( this );

            //
            // Load before calling the base method, because we might get a call to GetHashCode().
 8000b66:	9805      	ldr	r0, [sp, #20]
 8000b68:	6840      	ldr	r0, [r0, #4]

        public override bool IsOpenType
        {
            get
            {
                return m_elementType.IsOpenType;
 8000b6a:	69c0      	ldr	r0, [r0, #28]
 8000b6c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000b6e:	9903      	ldr	r1, [sp, #12]
 8000b70:	9001      	str	r0, [sp, #4]
 8000b72:	4608      	mov	r0, r1
 8000b74:	9a01      	ldr	r2, [sp, #4]
 8000b76:	4790      	blx	r2
 8000b78:	b006      	add	sp, #24
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <ArrayReferenceTypeRepresentation_get_IsDelayedType$14399>:
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	4601      	mov	r1, r0

        public override bool IsDelayedType
        {
            get
            {
                return m_elementType.IsDelayedType;
 8000b82:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
        public override void ApplyTransformation( TransformationContext context )
        {
            context.Push( this );

            //
            // Load before calling the base method, because we might get a call to GetHashCode().
 8000b84:	f100 0208 	add.w	r2, r0, #8
 8000b88:	9204      	str	r2, [sp, #16]
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	9205      	str	r2, [sp, #20]
                }

                if(thisElementType is ReferenceTypeRepresentation)
                {
                    return thisElementType.CanBeAssignedFrom( rvalueElementType, set );
                }
 8000b8e:	9b04      	ldr	r3, [sp, #16]

        //
        // Access Methods
        //

        public override TypeRepresentation ContainedType
 8000b90:	3b08      	subs	r3, #8
 8000b92:	9205      	str	r2, [sp, #20]
 8000b94:	aa05      	add	r2, sp, #20
 8000b96:	3a08      	subs	r2, #8
 8000b98:	9003      	str	r0, [sp, #12]
 8000b9a:	4610      	mov	r0, r2
 8000b9c:	9102      	str	r1, [sp, #8]
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	f7ff fe8c 	bl	80008bc <UIntPtr_.ctor$2864>
        public override void ApplyTransformation( TransformationContext context )
        {
            context.Push( this );

            //
            // Load before calling the base method, because we might get a call to GetHashCode().
 8000ba4:	9805      	ldr	r0, [sp, #20]
 8000ba6:	6840      	ldr	r0, [r0, #4]

        public override bool IsDelayedType
        {
            get
            {
                return m_elementType.IsDelayedType;
 8000ba8:	69c0      	ldr	r0, [r0, #28]
 8000baa:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8000bac:	9903      	ldr	r1, [sp, #12]
 8000bae:	9001      	str	r0, [sp, #4]
 8000bb0:	4608      	mov	r0, r1
 8000bb2:	9a01      	ldr	r2, [sp, #4]
 8000bb4:	4790      	blx	r2
 8000bb6:	b006      	add	sp, #24
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	46c0      	nop			; (mov r8, r8)

08000bbc <SzArrayReferenceTypeRepresentation_PrettyToString$14548>:
 8000bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bbe:	b08d      	sub	sp, #52	; 0x34
 8000bc0:	469c      	mov	ip, r3
 8000bc2:	4696      	mov	lr, r2
 8000bc4:	460c      	mov	r4, r1
 8000bc6:	4605      	mov	r5, r0

        internal override void PrettyToString( System.Text.StringBuilder sb                 ,
                                               bool                      fPrefix            ,
                                               bool                      fWithAbbreviations )
        {
            m_elementType.PrettyToString( sb, fPrefix, fWithAbbreviations );
 8000bc8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

            sb.Append( "[]" );
        }
    }
}
 8000bca:	f100 0608 	add.w	r6, r0, #8
 8000bce:	960b      	str	r6, [sp, #44]	; 0x2c
 8000bd0:	2600      	movs	r6, #0
 8000bd2:	960c      	str	r6, [sp, #48]	; 0x30
 8000bd4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8000bd6:	3f08      	subs	r7, #8
 8000bd8:	960c      	str	r6, [sp, #48]	; 0x30
 8000bda:	ae0c      	add	r6, sp, #48	; 0x30
 8000bdc:	3e08      	subs	r6, #8
 8000bde:	900a      	str	r0, [sp, #40]	; 0x28
 8000be0:	4630      	mov	r0, r6
 8000be2:	9109      	str	r1, [sp, #36]	; 0x24
 8000be4:	4639      	mov	r1, r7
 8000be6:	9308      	str	r3, [sp, #32]
 8000be8:	9207      	str	r2, [sp, #28]
 8000bea:	9406      	str	r4, [sp, #24]
 8000bec:	9505      	str	r5, [sp, #20]
 8000bee:	f8cd c010 	str.w	ip, [sp, #16]
 8000bf2:	f8cd e00c 	str.w	lr, [sp, #12]
 8000bf6:	f7ff fe61 	bl	80008bc <UIntPtr_.ctor$2864>

            sb.Append( "[]" );
        }
    }
}
 8000bfa:	980c      	ldr	r0, [sp, #48]	; 0x30
 8000bfc:	6840      	ldr	r0, [r0, #4]

        internal override void PrettyToString( System.Text.StringBuilder sb                 ,
                                               bool                      fPrefix            ,
                                               bool                      fWithAbbreviations )
        {
            m_elementType.PrettyToString( sb, fPrefix, fWithAbbreviations );
 8000bfe:	69c0      	ldr	r0, [r0, #28]
 8000c00:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8000c02:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000c04:	9002      	str	r0, [sp, #8]
 8000c06:	4608      	mov	r0, r1
 8000c08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8000c0a:	9a07      	ldr	r2, [sp, #28]
 8000c0c:	9b08      	ldr	r3, [sp, #32]
 8000c0e:	f8dd c008 	ldr.w	ip, [sp, #8]
 8000c12:	47e0      	blx	ip

            sb.Append( "[]" );
 8000c14:	4804      	ldr	r0, [pc, #16]	; (8000c28 <SzArrayReferenceTypeRepresentation_PrettyToString$14548+0x6c>)
 8000c16:	4905      	ldr	r1, [pc, #20]	; (8000c2c <SzArrayReferenceTypeRepresentation_PrettyToString$14548+0x70>)
 8000c18:	4479      	add	r1, pc
 8000c1a:	4401      	add	r1, r0
 8000c1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000c1e:	f00c f8ed 	bl	800cdfc <StringBuilder_Append$8507>
 8000c22:	9001      	str	r0, [sp, #4]
 8000c24:	b00d      	add	sp, #52	; 0x34
 8000c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c28:	e8013eac 	.word	0xe8013eac
 8000c2c:	18000bb8 	.word	0x18000bb8

08000c30 <SzArrayReferenceTypeRepresentation_SameShape$14546>:
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	4608      	mov	r0, r1
                case TypeRepresentation.BuiltInTypes.I4     : return typeof(System.Int32  );
                case TypeRepresentation.BuiltInTypes.U4     : return typeof(System.UInt32 );
                case TypeRepresentation.BuiltInTypes.I8     : return typeof(System.Int64  );
                case TypeRepresentation.BuiltInTypes.U8     : return typeof(System.UInt64 );
                case TypeRepresentation.BuiltInTypes.R4     : return typeof(System.Single );
                case TypeRepresentation.BuiltInTypes.R8     : return typeof(System.Double );
 8000c36:	4a07      	ldr	r2, [pc, #28]	; (8000c54 <SzArrayReferenceTypeRepresentation_SameShape$14546+0x24>)
 8000c38:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <SzArrayReferenceTypeRepresentation_SameShape$14546+0x28>)
 8000c3a:	447b      	add	r3, pc
 8000c3c:	441a      	add	r2, r3
 8000c3e:	9001      	str	r0, [sp, #4]
 8000c40:	4608      	mov	r0, r1
 8000c42:	4611      	mov	r1, r2
 8000c44:	f000 f80a 	bl	8000c5c <TypeSystemManager_CastToSealedTypeNoThrow$4951>
 8000c48:	2800      	cmp	r0, #0
 8000c4a:	bf18      	it	ne
 8000c4c:	2001      	movne	r0, #1
 8000c4e:	b002      	add	sp, #8
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	e801066c 	.word	0xe801066c
 8000c58:	18000b96 	.word	0x18000b96

08000c5c <TypeSystemManager_CastToSealedTypeNoThrow$4951>:
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	4602      	mov	r2, r0

        [TS.WellKnownMethod( "TypeSystemManager_CastToSealedTypeNoThrow" )]
        public static object CastToSealedTypeNoThrow( object    obj      ,
                                                      TS.VTable expected )
        {
            if(obj != null)
 8000c62:	2800      	cmp	r0, #0
 8000c64:	9203      	str	r2, [sp, #12]
 8000c66:	9102      	str	r1, [sp, #8]
 8000c68:	d015      	beq.n	8000c96 <TypeSystemManager_CastToSealedTypeNoThrow$4951+0x3a>
 8000c6a:	e7ff      	b.n	8000c6c <TypeSystemManager_CastToSealedTypeNoThrow$4951+0x10>

            oh.VirtualTable = vTable;
            oh.MultiUseWord = (int)(ObjectHeader.GarbageCollectorFlags.SpecialHandlerObject | ObjectHeader.GarbageCollectorFlags.Unmarked);

            return oh.Pack();
        }
 8000c6c:	9803      	ldr	r0, [sp, #12]
 8000c6e:	f100 0108 	add.w	r1, r0, #8
 8000c72:	9104      	str	r1, [sp, #16]
 8000c74:	2100      	movs	r1, #0
 8000c76:	9105      	str	r1, [sp, #20]
        private static T AtomicAllocatorSlow<T>( ref T obj ) where T : class, new()
        {
            T newObj = new T();

            System.Threading.Interlocked.CompareExchange( ref obj, newObj, default(T) );

 8000c78:	9a04      	ldr	r2, [sp, #16]
            return array.CastThisAsArray();
        }

        [Inline]
        public String InitializeString( UIntPtr   memory ,
                                        TS.VTable vTable ,
 8000c7a:	3a08      	subs	r2, #8
 8000c7c:	9105      	str	r1, [sp, #20]
 8000c7e:	a905      	add	r1, sp, #20
 8000c80:	f1a1 0008 	sub.w	r0, r1, #8
 8000c84:	4611      	mov	r1, r2
 8000c86:	f7ff fe19 	bl	80008bc <UIntPtr_.ctor$2864>

            oh.VirtualTable = vTable;
            oh.MultiUseWord = (int)(ObjectHeader.GarbageCollectorFlags.SpecialHandlerObject | ObjectHeader.GarbageCollectorFlags.Unmarked);

            return oh.Pack();
        }
 8000c8a:	9805      	ldr	r0, [sp, #20]
        //--//

        [NoReturn]
        [NoInline]
        [TS.WellKnownMethod( "TypeSystemManager_Throw" )]
        public virtual void Throw( Exception obj )
 8000c8c:	6840      	ldr	r0, [r0, #4]
        {
            if(obj != null)
            {
                TS.VTable got = TS.VTable.Get( obj );

                if(got != expected)
 8000c8e:	9902      	ldr	r1, [sp, #8]
 8000c90:	4288      	cmp	r0, r1
 8000c92:	d106      	bne.n	8000ca2 <TypeSystemManager_CastToSealedTypeNoThrow$4951+0x46>
 8000c94:	e008      	b.n	8000ca8 <TypeSystemManager_CastToSealedTypeNoThrow$4951+0x4c>
                {
                    return null;
                }
            }

            return obj;
 8000c96:	9803      	ldr	r0, [sp, #12]
 8000c98:	9001      	str	r0, [sp, #4]
 8000c9a:	e7ff      	b.n	8000c9c <TypeSystemManager_CastToSealedTypeNoThrow$4951+0x40>
        }
 8000c9c:	9801      	ldr	r0, [sp, #4]
 8000c9e:	b006      	add	sp, #24
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	2000      	movs	r0, #0
            {
                TS.VTable got = TS.VTable.Get( obj );

                if(got != expected)
                {
                    return null;
 8000ca4:	9001      	str	r0, [sp, #4]
 8000ca6:	e7f9      	b.n	8000c9c <TypeSystemManager_CastToSealedTypeNoThrow$4951+0x40>
                }
            }
 8000ca8:	e7f5      	b.n	8000c96 <TypeSystemManager_CastToSealedTypeNoThrow$4951+0x3a>
 8000caa:	46c0      	nop			; (mov r8, r8)

08000cac <MultiArrayReferenceTypeRepresentation_ToString$14499>:
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	4601      	mov	r1, r0
        // Debug Methods
        //

        public override String ToString()
        {
            System.Text.StringBuilder sb = new System.Text.StringBuilder( "MultiArrayReferenceTypeRepresentation(" );
 8000cb2:	4a14      	ldr	r2, [pc, #80]	; (8000d04 <MultiArrayReferenceTypeRepresentation_ToString$14499+0x58>)
 8000cb4:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <MultiArrayReferenceTypeRepresentation_ToString$14499+0x5c>)
 8000cb6:	447b      	add	r3, pc
 8000cb8:	441a      	add	r2, r3
 8000cba:	f8df c050 	ldr.w	ip, [pc, #80]	; 8000d0c <MultiArrayReferenceTypeRepresentation_ToString$14499+0x60>
 8000cbe:	449c      	add	ip, r3
 8000cc0:	9005      	str	r0, [sp, #20]
 8000cc2:	4610      	mov	r0, r2
 8000cc4:	9104      	str	r1, [sp, #16]
 8000cc6:	4661      	mov	r1, ip
 8000cc8:	9303      	str	r3, [sp, #12]
 8000cca:	f7ff fd79 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8000cce:	4910      	ldr	r1, [pc, #64]	; (8000d10 <MultiArrayReferenceTypeRepresentation_ToString$14499+0x64>)
 8000cd0:	9a03      	ldr	r2, [sp, #12]
 8000cd2:	4411      	add	r1, r2
 8000cd4:	9002      	str	r0, [sp, #8]
 8000cd6:	f00d faa9 	bl	800e22c <StringBuilder_.ctor$8489>
 8000cda:	480e      	ldr	r0, [pc, #56]	; (8000d14 <MultiArrayReferenceTypeRepresentation_ToString$14499+0x68>)

            PrettyToString( sb, true, false );
 8000cdc:	9903      	ldr	r1, [sp, #12]
 8000cde:	5c42      	ldrb	r2, [r0, r1]
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	9805      	ldr	r0, [sp, #20]
 8000ce4:	9902      	ldr	r1, [sp, #8]
 8000ce6:	f000 f871 	bl	8000dcc <MultiArrayReferenceTypeRepresentation_PrettyToString$14500>

            sb.Append( ")" );
 8000cea:	480b      	ldr	r0, [pc, #44]	; (8000d18 <MultiArrayReferenceTypeRepresentation_ToString$14499+0x6c>)
 8000cec:	9903      	ldr	r1, [sp, #12]
 8000cee:	4401      	add	r1, r0
 8000cf0:	9802      	ldr	r0, [sp, #8]
 8000cf2:	f00c f883 	bl	800cdfc <StringBuilder_Append$8507>

            return sb.ToString();
 8000cf6:	9902      	ldr	r1, [sp, #8]
 8000cf8:	9001      	str	r0, [sp, #4]
 8000cfa:	4608      	mov	r0, r1
 8000cfc:	f001 fdc2 	bl	8002884 <StringBuilder_ToString$8499>
 8000d00:	b006      	add	sp, #24
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	ffffea38 	.word	0xffffea38
 8000d08:	18000b1a 	.word	0x18000b1a
 8000d0c:	e8010b3c 	.word	0xe8010b3c
 8000d10:	e8013d3c 	.word	0xe8013d3c
 8000d14:	e8025455 	.word	0xe8025455
 8000d18:	e8013a4c 	.word	0xe8013a4c

08000d1c <MultiArrayReferenceTypeRepresentation_Equals$14491>:
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	460a      	mov	r2, r1
 8000d22:	4603      	mov	r3, r0
            return false;
        }

        public override bool Equals( object obj )
        {
            return this.EqualsThroughEquivalence( obj, null );
 8000d24:	f04f 0c00 	mov.w	ip, #0
 8000d28:	9201      	str	r2, [sp, #4]
 8000d2a:	4662      	mov	r2, ip
 8000d2c:	9300      	str	r3, [sp, #0]
 8000d2e:	f000 f80b 	bl	8000d48 <MultiArrayReferenceTypeRepresentation_EqualsThroughEquivalence$14490>
 8000d32:	b002      	add	sp, #8
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <MultiArrayReferenceTypeRepresentation_GetHashCode$14492>:
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	4601      	mov	r1, r0
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
 8000d3c:	9101      	str	r1, [sp, #4]
 8000d3e:	f7ff fea4 	bl	8000a8a <ArrayReferenceTypeRepresentation_GetHashCode$14393>
 8000d42:	b002      	add	sp, #8
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	46c0      	nop			; (mov r8, r8)

08000d48 <MultiArrayReferenceTypeRepresentation_EqualsThroughEquivalence$14490>:
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	460b      	mov	r3, r1
        {
            if(rvalue is BoxedValueTypeRepresentation)
            {
                //
                // Going from a boxed valuetype to a byref is OK.
                //
 8000d4e:	f8df c070 	ldr.w	ip, [pc, #112]	; 8000dc0 <MultiArrayReferenceTypeRepresentation_EqualsThroughEquivalence$14490+0x78>
 8000d52:	f8df e070 	ldr.w	lr, [pc, #112]	; 8000dc4 <MultiArrayReferenceTypeRepresentation_EqualsThroughEquivalence$14490+0x7c>
 8000d56:	44fe      	add	lr, pc
 8000d58:	44f4      	add	ip, lr
 8000d5a:	9005      	str	r0, [sp, #20]
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	4661      	mov	r1, ip
 8000d60:	9304      	str	r3, [sp, #16]
 8000d62:	9203      	str	r2, [sp, #12]
 8000d64:	f7ff ff7a 	bl	8000c5c <TypeSystemManager_CastToSealedTypeNoThrow$4951>
 8000d68:	2800      	cmp	r0, #0
 8000d6a:	d00f      	beq.n	8000d8c <MultiArrayReferenceTypeRepresentation_EqualsThroughEquivalence$14490+0x44>
 8000d6c:	e7ff      	b.n	8000d6e <MultiArrayReferenceTypeRepresentation_EqualsThroughEquivalence$14490+0x26>
                return m_pointerType.EqualsThroughEquivalence( rvalue.UnderlyingType, set );
            }
 8000d6e:	4814      	ldr	r0, [pc, #80]	; (8000dc0 <MultiArrayReferenceTypeRepresentation_EqualsThroughEquivalence$14490+0x78>)
 8000d70:	4915      	ldr	r1, [pc, #84]	; (8000dc8 <MultiArrayReferenceTypeRepresentation_EqualsThroughEquivalence$14490+0x80>)
 8000d72:	4479      	add	r1, pc
 8000d74:	4401      	add	r1, r0
 8000d76:	9804      	ldr	r0, [sp, #16]
 8000d78:	f000 f91c 	bl	8000fb4 <TypeSystemManager_CastToSealedType$4950>
 8000d7c:	4601      	mov	r1, r0

            return base.CanBeAssignedFrom( rvalue, set );
 8000d7e:	9a05      	ldr	r2, [sp, #20]
 8000d80:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000d82:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8000d84:	4283      	cmp	r3, r0
 8000d86:	9102      	str	r1, [sp, #8]
 8000d88:	d006      	beq.n	8000d98 <MultiArrayReferenceTypeRepresentation_EqualsThroughEquivalence$14490+0x50>
 8000d8a:	e00f      	b.n	8000dac <MultiArrayReferenceTypeRepresentation_EqualsThroughEquivalence$14490+0x64>
 8000d8c:	2000      	movs	r0, #0

        //
        // Debug Methods
        //

        public override String ToString()
 8000d8e:	9001      	str	r0, [sp, #4]
 8000d90:	e7ff      	b.n	8000d92 <MultiArrayReferenceTypeRepresentation_EqualsThroughEquivalence$14490+0x4a>
 8000d92:	9801      	ldr	r0, [sp, #4]
 8000d94:	b006      	add	sp, #24
 8000d96:	bd80      	pop	{r7, pc}
                return m_pointerType.EqualsThroughEquivalence( rvalue.UnderlyingType, set );
            }

            return base.CanBeAssignedFrom( rvalue, set );
        }

 8000d98:	9805      	ldr	r0, [sp, #20]
 8000d9a:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8000d9c:	9902      	ldr	r1, [sp, #8]
 8000d9e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8000da0:	f00e f85e 	bl	800ee60 <ArrayUtility_ArrayEquals$33352>
 8000da4:	f010 0fff 	tst.w	r0, #255	; 0xff
 8000da8:	d101      	bne.n	8000dae <MultiArrayReferenceTypeRepresentation_EqualsThroughEquivalence$14490+0x66>
 8000daa:	e007      	b.n	8000dbc <MultiArrayReferenceTypeRepresentation_EqualsThroughEquivalence$14490+0x74>
        //--//

        //
        // Debug Methods
        //
 8000dac:	e7ee      	b.n	8000d8c <MultiArrayReferenceTypeRepresentation_EqualsThroughEquivalence$14490+0x44>

            return base.CanBeAssignedFrom( rvalue, set );
        }

        //--//

 8000dae:	9805      	ldr	r0, [sp, #20]
 8000db0:	9904      	ldr	r1, [sp, #16]
 8000db2:	9a03      	ldr	r2, [sp, #12]
 8000db4:	f7ff fe88 	bl	8000ac8 <ArrayReferenceTypeRepresentation_EqualsThroughEquivalence$14391>
 8000db8:	9001      	str	r0, [sp, #4]
 8000dba:	e7ea      	b.n	8000d92 <MultiArrayReferenceTypeRepresentation_EqualsThroughEquivalence$14490+0x4a>
        //
        // Debug Methods
 8000dbc:	e7f6      	b.n	8000dac <MultiArrayReferenceTypeRepresentation_EqualsThroughEquivalence$14490+0x64>
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	e801071c 	.word	0xe801071c
 8000dc4:	18000a7a 	.word	0x18000a7a
 8000dc8:	18000a5e 	.word	0x18000a5e

08000dcc <MultiArrayReferenceTypeRepresentation_PrettyToString$14500>:
 8000dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000dd0:	b09e      	sub	sp, #120	; 0x78
 8000dd2:	469c      	mov	ip, r3
 8000dd4:	4696      	mov	lr, r2
 8000dd6:	460c      	mov	r4, r1
 8000dd8:	4605      	mov	r5, r0

        internal override void PrettyToString( System.Text.StringBuilder sb                 ,
                                               bool                      fPrefix            ,
                                               bool                      fWithAbbreviations )
        {
            m_elementType.PrettyToString( sb, fPrefix, fWithAbbreviations );
 8000dda:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
        // Helper Methods
        //

        public override void ApplyTransformation( TransformationContext context )
        {
            context.Push( this );
 8000ddc:	f100 0608 	add.w	r6, r0, #8
 8000de0:	9614      	str	r6, [sp, #80]	; 0x50
 8000de2:	2600      	movs	r6, #0
 8000de4:	9615      	str	r6, [sp, #84]	; 0x54
        }

        public Dimension[] Dimensions
        {
            get
            {
 8000de6:	9f14      	ldr	r7, [sp, #80]	; 0x50

        protected override void SetShapeCategory( TypeSystem typeSystem )
        {
            m_vTable.ShapeCategory = VTable.Shape.MultiArray;
        }

 8000de8:	3f08      	subs	r7, #8
 8000dea:	9615      	str	r6, [sp, #84]	; 0x54
 8000dec:	f10d 0854 	add.w	r8, sp, #84	; 0x54
 8000df0:	f1a8 0808 	sub.w	r8, r8, #8
 8000df4:	9013      	str	r0, [sp, #76]	; 0x4c
 8000df6:	4640      	mov	r0, r8
 8000df8:	9112      	str	r1, [sp, #72]	; 0x48
 8000dfa:	4639      	mov	r1, r7
 8000dfc:	9311      	str	r3, [sp, #68]	; 0x44
 8000dfe:	9210      	str	r2, [sp, #64]	; 0x40
 8000e00:	960f      	str	r6, [sp, #60]	; 0x3c
 8000e02:	950e      	str	r5, [sp, #56]	; 0x38
 8000e04:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8000e08:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
 8000e0c:	940b      	str	r4, [sp, #44]	; 0x2c
 8000e0e:	f7ff fd55 	bl	80008bc <UIntPtr_.ctor$2864>
        // Helper Methods
        //

        public override void ApplyTransformation( TransformationContext context )
        {
            context.Push( this );
 8000e12:	9815      	ldr	r0, [sp, #84]	; 0x54
 8000e14:	6840      	ldr	r0, [r0, #4]

        internal override void PrettyToString( System.Text.StringBuilder sb                 ,
                                               bool                      fPrefix            ,
                                               bool                      fWithAbbreviations )
        {
            m_elementType.PrettyToString( sb, fPrefix, fWithAbbreviations );
 8000e16:	69c0      	ldr	r0, [r0, #28]
 8000e18:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8000e1a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8000e1c:	900a      	str	r0, [sp, #40]	; 0x28
 8000e1e:	4608      	mov	r0, r1
 8000e20:	9912      	ldr	r1, [sp, #72]	; 0x48
 8000e22:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8000e24:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8000e26:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8000e2a:	47e0      	blx	ip

            sb.Append( "[" );
 8000e2c:	483d      	ldr	r0, [pc, #244]	; (8000f24 <MultiArrayReferenceTypeRepresentation_PrettyToString$14500+0x158>)
 8000e2e:	493e      	ldr	r1, [pc, #248]	; (8000f28 <MultiArrayReferenceTypeRepresentation_PrettyToString$14500+0x15c>)
 8000e30:	4479      	add	r1, pc
 8000e32:	4401      	add	r1, r0
 8000e34:	9812      	ldr	r0, [sp, #72]	; 0x48
 8000e36:	f00b ffe1 	bl	800cdfc <StringBuilder_Append$8507>
 8000e3a:	990f      	ldr	r1, [sp, #60]	; 0x3c
            for(int i = 0; i < m_rank; i++)
 8000e3c:	9009      	str	r0, [sp, #36]	; 0x24
 8000e3e:	9108      	str	r1, [sp, #32]
 8000e40:	e7ff      	b.n	8000e42 <MultiArrayReferenceTypeRepresentation_PrettyToString$14500+0x76>
 8000e42:	9808      	ldr	r0, [sp, #32]
 8000e44:	17c1      	asrs	r1, r0, #31
 8000e46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8000e48:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000e4a:	f04f 0c00 	mov.w	ip, #0
 8000e4e:	4298      	cmp	r0, r3
 8000e50:	4663      	mov	r3, ip
 8000e52:	bf28      	it	cs
 8000e54:	2301      	movcs	r3, #1
 8000e56:	f1b1 3fff 	cmp.w	r1, #4294967295
 8000e5a:	4661      	mov	r1, ip
 8000e5c:	bfc8      	it	gt
 8000e5e:	2101      	movgt	r1, #1
 8000e60:	ebbc 7fe0 	cmp.w	ip, r0, asr #31
 8000e64:	bf08      	it	eq
 8000e66:	4619      	moveq	r1, r3
 8000e68:	2900      	cmp	r1, #0
 8000e6a:	9007      	str	r0, [sp, #28]
 8000e6c:	d104      	bne.n	8000e78 <MultiArrayReferenceTypeRepresentation_PrettyToString$14500+0xac>
 8000e6e:	e7ff      	b.n	8000e70 <MultiArrayReferenceTypeRepresentation_PrettyToString$14500+0xa4>
            {
                if(i != 0)
 8000e70:	9807      	ldr	r0, [sp, #28]
 8000e72:	2800      	cmp	r0, #0
 8000e74:	d10b      	bne.n	8000e8e <MultiArrayReferenceTypeRepresentation_PrettyToString$14500+0xc2>
 8000e76:	e013      	b.n	8000ea0 <MultiArrayReferenceTypeRepresentation_PrettyToString$14500+0xd4>
                        sb.Append( ".." );
                        sb.Append( dm.m_upperBound );
                    }
                }
            }
            sb.Append( "]" );
 8000e78:	482c      	ldr	r0, [pc, #176]	; (8000f2c <MultiArrayReferenceTypeRepresentation_PrettyToString$14500+0x160>)
 8000e7a:	492d      	ldr	r1, [pc, #180]	; (8000f30 <MultiArrayReferenceTypeRepresentation_PrettyToString$14500+0x164>)
 8000e7c:	4479      	add	r1, pc
 8000e7e:	4401      	add	r1, r0
 8000e80:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8000e82:	f00b ffbb 	bl	800cdfc <StringBuilder_Append$8507>
 8000e86:	9006      	str	r0, [sp, #24]
 8000e88:	b01e      	add	sp, #120	; 0x78
 8000e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            sb.Append( "[" );
            for(int i = 0; i < m_rank; i++)
            {
                if(i != 0)
                {
                    sb.Append( "," );
 8000e8e:	4829      	ldr	r0, [pc, #164]	; (8000f34 <MultiArrayReferenceTypeRepresentation_PrettyToString$14500+0x168>)
 8000e90:	4929      	ldr	r1, [pc, #164]	; (8000f38 <MultiArrayReferenceTypeRepresentation_PrettyToString$14500+0x16c>)
 8000e92:	4479      	add	r1, pc
 8000e94:	4401      	add	r1, r0
 8000e96:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8000e98:	f00b ffb0 	bl	800cdfc <StringBuilder_Append$8507>
                }
 8000e9c:	9005      	str	r0, [sp, #20]
 8000e9e:	e7ff      	b.n	8000ea0 <MultiArrayReferenceTypeRepresentation_PrettyToString$14500+0xd4>

                if(i < m_dimensions.Length)
 8000ea0:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000ea2:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8000ea4:	6889      	ldr	r1, [r1, #8]
                if(i != 0)
                {
                    sb.Append( "," );
                }

                if(i < m_dimensions.Length)
 8000ea6:	9a07      	ldr	r2, [sp, #28]
 8000ea8:	428a      	cmp	r2, r1
 8000eaa:	da11      	bge.n	8000ed0 <MultiArrayReferenceTypeRepresentation_PrettyToString$14500+0x104>
 8000eac:	e7ff      	b.n	8000eae <MultiArrayReferenceTypeRepresentation_PrettyToString$14500+0xe2>
                {
                    Dimension dm = m_dimensions[i];
 8000eae:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000eb0:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8000eb2:	9a07      	ldr	r2, [sp, #28]
 8000eb4:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8000eb8:	68cb      	ldr	r3, [r1, #12]
 8000eba:	6909      	ldr	r1, [r1, #16]
 8000ebc:	9316      	str	r3, [sp, #88]	; 0x58
 8000ebe:	9117      	str	r1, [sp, #92]	; 0x5c

                    if(dm.m_lowerBound != 0 || dm.m_upperBound != 0)
 8000ec0:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8000ec4:	f1bc 0f00 	cmp.w	ip, #0
 8000ec8:	9304      	str	r3, [sp, #16]
 8000eca:	9103      	str	r1, [sp, #12]
 8000ecc:	d104      	bne.n	8000ed8 <MultiArrayReferenceTypeRepresentation_PrettyToString$14500+0x10c>
 8000ece:	e020      	b.n	8000f12 <MultiArrayReferenceTypeRepresentation_PrettyToString$14500+0x146>
                                               bool                      fWithAbbreviations )
        {
            m_elementType.PrettyToString( sb, fPrefix, fWithAbbreviations );

            sb.Append( "[" );
            for(int i = 0; i < m_rank; i++)
 8000ed0:	9807      	ldr	r0, [sp, #28]
 8000ed2:	1c41      	adds	r1, r0, #1
 8000ed4:	9108      	str	r1, [sp, #32]
 8000ed6:	e7b4      	b.n	8000e42 <MultiArrayReferenceTypeRepresentation_PrettyToString$14500+0x76>
 8000ed8:	9804      	ldr	r0, [sp, #16]
 8000eda:	901a      	str	r0, [sp, #104]	; 0x68
 8000edc:	9903      	ldr	r1, [sp, #12]
 8000ede:	911b      	str	r1, [sp, #108]	; 0x6c
                {
                    Dimension dm = m_dimensions[i];

                    if(dm.m_lowerBound != 0 || dm.m_upperBound != 0)
                    {
                        sb.Append( dm.m_lowerBound );
 8000ee0:	991a      	ldr	r1, [sp, #104]	; 0x68
 8000ee2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8000ee4:	f00d fc76 	bl	800e7d4 <StringBuilder_Append$8529>
                        sb.Append( ".." );
 8000ee8:	4914      	ldr	r1, [pc, #80]	; (8000f3c <MultiArrayReferenceTypeRepresentation_PrettyToString$14500+0x170>)
 8000eea:	4a15      	ldr	r2, [pc, #84]	; (8000f40 <MultiArrayReferenceTypeRepresentation_PrettyToString$14500+0x174>)
 8000eec:	447a      	add	r2, pc
 8000eee:	4411      	add	r1, r2
 8000ef0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8000ef2:	9002      	str	r0, [sp, #8]
 8000ef4:	4610      	mov	r0, r2
 8000ef6:	f00b ff81 	bl	800cdfc <StringBuilder_Append$8507>
 8000efa:	9904      	ldr	r1, [sp, #16]
 8000efc:	911c      	str	r1, [sp, #112]	; 0x70
 8000efe:	9a03      	ldr	r2, [sp, #12]
 8000f00:	921d      	str	r2, [sp, #116]	; 0x74
                        sb.Append( dm.m_upperBound );
 8000f02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000f04:	9001      	str	r0, [sp, #4]
 8000f06:	4618      	mov	r0, r3
 8000f08:	4611      	mov	r1, r2
 8000f0a:	f00d fc63 	bl	800e7d4 <StringBuilder_Append$8529>
                    }
 8000f0e:	9000      	str	r0, [sp, #0]
 8000f10:	e006      	b.n	8000f20 <MultiArrayReferenceTypeRepresentation_PrettyToString$14500+0x154>
 8000f12:	9804      	ldr	r0, [sp, #16]
 8000f14:	9018      	str	r0, [sp, #96]	; 0x60
 8000f16:	9903      	ldr	r1, [sp, #12]
 8000f18:	9119      	str	r1, [sp, #100]	; 0x64

                if(i < m_dimensions.Length)
                {
                    Dimension dm = m_dimensions[i];

                    if(dm.m_lowerBound != 0 || dm.m_upperBound != 0)
 8000f1a:	2900      	cmp	r1, #0
 8000f1c:	d1dc      	bne.n	8000ed8 <MultiArrayReferenceTypeRepresentation_PrettyToString$14500+0x10c>
 8000f1e:	e7ff      	b.n	8000f20 <MultiArrayReferenceTypeRepresentation_PrettyToString$14500+0x154>
                    {
                        sb.Append( dm.m_lowerBound );
                        sb.Append( ".." );
                        sb.Append( dm.m_upperBound );
                    }
                }
 8000f20:	e7d6      	b.n	8000ed0 <MultiArrayReferenceTypeRepresentation_PrettyToString$14500+0x104>
 8000f22:	46c0      	nop			; (mov r8, r8)
 8000f24:	e8013d9c 	.word	0xe8013d9c
 8000f28:	180009a0 	.word	0x180009a0
 8000f2c:	e8013dbc 	.word	0xe8013dbc
 8000f30:	18000954 	.word	0x18000954
 8000f34:	e801368c 	.word	0xe801368c
 8000f38:	1800093e 	.word	0x1800093e
 8000f3c:	e8013ddc 	.word	0xe8013ddc
 8000f40:	180008e4 	.word	0x180008e4

08000f44 <MultiArrayReferenceTypeRepresentation_SameShape$14496>:
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	460a      	mov	r2, r1

        //--//

        public override bool SameShape( ArrayReferenceTypeRepresentation other )
        {
            MultiArrayReferenceTypeRepresentation other2 = other as MultiArrayReferenceTypeRepresentation;
 8000f4a:	4b18      	ldr	r3, [pc, #96]	; (8000fac <MultiArrayReferenceTypeRepresentation_SameShape$14496+0x68>)
 8000f4c:	f8df c060 	ldr.w	ip, [pc, #96]	; 8000fb0 <MultiArrayReferenceTypeRepresentation_SameShape$14496+0x6c>
 8000f50:	44fc      	add	ip, pc
 8000f52:	4463      	add	r3, ip
 8000f54:	9003      	str	r0, [sp, #12]
 8000f56:	4608      	mov	r0, r1
 8000f58:	4619      	mov	r1, r3
 8000f5a:	9202      	str	r2, [sp, #8]
 8000f5c:	f7ff fe7e 	bl	8000c5c <TypeSystemManager_CastToSealedTypeNoThrow$4951>
 8000f60:	4601      	mov	r1, r0
 8000f62:	2200      	movs	r2, #0
 8000f64:	9101      	str	r1, [sp, #4]
 8000f66:	4611      	mov	r1, r2
 8000f68:	f000 fdd3 	bl	8001b12 <Object_Equals$2231>

        public override bool SameShape( ArrayReferenceTypeRepresentation other )
        {
            MultiArrayReferenceTypeRepresentation other2 = other as MultiArrayReferenceTypeRepresentation;

            if(other2 != null)
 8000f6c:	f010 0fff 	tst.w	r0, #255	; 0xff
 8000f70:	d107      	bne.n	8000f82 <MultiArrayReferenceTypeRepresentation_SameShape$14496+0x3e>
 8000f72:	e7ff      	b.n	8000f74 <MultiArrayReferenceTypeRepresentation_SameShape$14496+0x30>
            {
                if(m_rank == other2.m_rank)
 8000f74:	9803      	ldr	r0, [sp, #12]
 8000f76:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8000f78:	9a01      	ldr	r2, [sp, #4]
 8000f7a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000f7c:	4299      	cmp	r1, r3
 8000f7e:	d006      	beq.n	8000f8e <MultiArrayReferenceTypeRepresentation_SameShape$14496+0x4a>
 8000f80:	e00f      	b.n	8000fa2 <MultiArrayReferenceTypeRepresentation_SameShape$14496+0x5e>
 8000f82:	2000      	movs	r0, #0
                        return true;
                    }
                }
            }

            return false;
 8000f84:	9000      	str	r0, [sp, #0]
 8000f86:	e7ff      	b.n	8000f88 <MultiArrayReferenceTypeRepresentation_SameShape$14496+0x44>
 8000f88:	9800      	ldr	r0, [sp, #0]
 8000f8a:	b004      	add	sp, #16
 8000f8c:	bd80      	pop	{r7, pc}

            if(other2 != null)
            {
                if(m_rank == other2.m_rank)
                {
                    if(ArrayUtility.ArrayEquals( m_dimensions, other2.m_dimensions ))
 8000f8e:	9803      	ldr	r0, [sp, #12]
 8000f90:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8000f92:	9901      	ldr	r1, [sp, #4]
 8000f94:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8000f96:	f00d ff63 	bl	800ee60 <ArrayUtility_ArrayEquals$33352>
 8000f9a:	f010 0fff 	tst.w	r0, #255	; 0xff
 8000f9e:	d101      	bne.n	8000fa4 <MultiArrayReferenceTypeRepresentation_SameShape$14496+0x60>
 8000fa0:	e003      	b.n	8000faa <MultiArrayReferenceTypeRepresentation_SameShape$14496+0x66>
                    {
                        return true;
                    }
                }
            }
 8000fa2:	e7ee      	b.n	8000f82 <MultiArrayReferenceTypeRepresentation_SameShape$14496+0x3e>
 8000fa4:	2001      	movs	r0, #1
            {
                if(m_rank == other2.m_rank)
                {
                    if(ArrayUtility.ArrayEquals( m_dimensions, other2.m_dimensions ))
                    {
                        return true;
 8000fa6:	9000      	str	r0, [sp, #0]
 8000fa8:	e7ee      	b.n	8000f88 <MultiArrayReferenceTypeRepresentation_SameShape$14496+0x44>
                    }
                }
 8000faa:	e7fa      	b.n	8000fa2 <MultiArrayReferenceTypeRepresentation_SameShape$14496+0x5e>
 8000fac:	e801071c 	.word	0xe801071c
 8000fb0:	18000880 	.word	0x18000880

08000fb4 <TypeSystemManager_CastToSealedType$4950>:
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	4602      	mov	r2, r0
        }

        [NoInline]
        public bool IsSubclassOf( VTable target )
        {
            TypeRepresentation td = this.TypeInfo;
 8000fba:	2800      	cmp	r0, #0
 8000fbc:	9205      	str	r2, [sp, #20]
 8000fbe:	9104      	str	r1, [sp, #16]
 8000fc0:	d103      	bne.n	8000fca <TypeSystemManager_CastToSealedType$4950+0x16>
 8000fc2:	e7ff      	b.n	8000fc4 <TypeSystemManager_CastToSealedType$4950+0x10>
                    return true;
                }

                td = td.Extends;
            }

 8000fc4:	9805      	ldr	r0, [sp, #20]
        }

        [NoInline]
        public bool IsSubclassOf( VTable target )
        {
            TypeRepresentation td = this.TypeInfo;
 8000fc6:	9003      	str	r0, [sp, #12]
 8000fc8:	e009      	b.n	8000fde <TypeSystemManager_CastToSealedType$4950+0x2a>
            while(td != null)
            {
 8000fca:	9805      	ldr	r0, [sp, #20]
 8000fcc:	9904      	ldr	r1, [sp, #16]
 8000fce:	f7ff fe45 	bl	8000c5c <TypeSystemManager_CastToSealedTypeNoThrow$4951>
 8000fd2:	4601      	mov	r1, r0
                if(target == td.VirtualTable)
 8000fd4:	2800      	cmp	r0, #0
 8000fd6:	9102      	str	r1, [sp, #8]
 8000fd8:	d115      	bne.n	8001006 <TypeSystemManager_CastToSealedType$4950+0x52>
 8000fda:	e7ff      	b.n	8000fdc <TypeSystemManager_CastToSealedType$4950+0x28>
                {
                    return true;
 8000fdc:	e002      	b.n	8000fe4 <TypeSystemManager_CastToSealedType$4950+0x30>
                }

                td = td.Extends;
            }

 8000fde:	9803      	ldr	r0, [sp, #12]
 8000fe0:	b006      	add	sp, #24
 8000fe2:	bd80      	pop	{r7, pc}
            TypeRepresentation td = this.TypeInfo;
            while(td != null)
            {
                if(target == td.VirtualTable)
                {
                    return true;
 8000fe4:	4809      	ldr	r0, [pc, #36]	; (800100c <TypeSystemManager_CastToSealedType$4950+0x58>)
 8000fe6:	490a      	ldr	r1, [pc, #40]	; (8001010 <TypeSystemManager_CastToSealedType$4950+0x5c>)
 8000fe8:	4479      	add	r1, pc
 8000fea:	4408      	add	r0, r1
 8000fec:	4a09      	ldr	r2, [pc, #36]	; (8001014 <TypeSystemManager_CastToSealedType$4950+0x60>)
 8000fee:	4411      	add	r1, r2
 8000ff0:	9001      	str	r0, [sp, #4]
 8000ff2:	f7ff fbe5 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8000ff6:	9000      	str	r0, [sp, #0]
 8000ff8:	f007 ff46 	bl	8008e88 <InvalidCastException_.ctor$7120>
 8000ffc:	9801      	ldr	r0, [sp, #4]
 8000ffe:	9900      	ldr	r1, [sp, #0]
 8001000:	f7ff fc34 	bl	800086c <TypeSystemManager_Throw$4954>
 8001004:	e7ee      	b.n	8000fe4 <TypeSystemManager_CastToSealedType$4950+0x30>
                }

                td = td.Extends;
            }

 8001006:	9802      	ldr	r0, [sp, #8]
            {
                if(target == td.VirtualTable)
                {
                    return true;
                }

 8001008:	9003      	str	r0, [sp, #12]
 800100a:	e7e8      	b.n	8000fde <TypeSystemManager_CastToSealedType$4950+0x2a>
 800100c:	ffffea38 	.word	0xffffea38
 8001010:	180007e8 	.word	0x180007e8
 8001014:	e801235c 	.word	0xe801235c

08001018 <Array_GetEndDataPointer$3710>:
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	4601      	mov	r1, r0
        //
        // This is used to get the pointer to the data, which is not possible in C#.
        //
        public unsafe uint* GetEndDataPointer()
        {
            return (uint*)GetPointerToElement( m_numElements );
 800101e:	6882      	ldr	r2, [r0, #8]
 8001020:	9101      	str	r1, [sp, #4]
 8001022:	4611      	mov	r1, r2
 8001024:	f7ff fc52 	bl	80008cc <Array_GetPointerToElement$3709>
 8001028:	b002      	add	sp, #8
 800102a:	bd80      	pop	{r7, pc}

0800102c <Array_SetLength$3711>:
 800102c:	b082      	sub	sp, #8
 800102e:	460a      	mov	r2, r1
 8001030:	4603      	mov	r3, r0
 8001032:	6081      	str	r1, [r0, #8]
 8001034:	9301      	str	r3, [sp, #4]
 8001036:	9200      	str	r2, [sp, #0]
 8001038:	b002      	add	sp, #8
 800103a:	4770      	bx	lr

0800103c <Byte_Equals$1616>:
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	460a      	mov	r2, r1
////            {
////                return false;
////            }
////
////            PropertyInfo baseProp = GetParentDefinition( element );
////
 8001042:	4b13      	ldr	r3, [pc, #76]	; (8001090 <Byte_Equals$1616+0x54>)
 8001044:	f8df c04c 	ldr.w	ip, [pc, #76]	; 8001094 <Byte_Equals$1616+0x58>
 8001048:	44fc      	add	ip, pc
 800104a:	4463      	add	r3, ip
 800104c:	9003      	str	r0, [sp, #12]
 800104e:	4608      	mov	r0, r1
 8001050:	4619      	mov	r1, r3
 8001052:	9202      	str	r2, [sp, #8]
 8001054:	f7ff fe02 	bl	8000c5c <TypeSystemManager_CastToSealedTypeNoThrow$4951>
 8001058:	2800      	cmp	r0, #0
 800105a:	d103      	bne.n	8001064 <Byte_Equals$1616+0x28>
 800105c:	e7ff      	b.n	800105e <Byte_Equals$1616+0x22>
 800105e:	2000      	movs	r0, #0
////            while(baseProp != null)
////            {
 8001060:	9001      	str	r0, [sp, #4]
 8001062:	e012      	b.n	800108a <Byte_Equals$1616+0x4e>
////                if(baseProp.IsDefined( attributeType, false ))
////                {
////                    return true;
 8001064:	9803      	ldr	r0, [sp, #12]
 8001066:	7a01      	ldrb	r1, [r0, #8]
 8001068:	4a09      	ldr	r2, [pc, #36]	; (8001090 <Byte_Equals$1616+0x54>)
 800106a:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <Byte_Equals$1616+0x5c>)
 800106c:	447b      	add	r3, pc
 800106e:	441a      	add	r2, r3
 8001070:	9802      	ldr	r0, [sp, #8]
 8001072:	9100      	str	r1, [sp, #0]
 8001074:	4611      	mov	r1, r2
 8001076:	f7ff ff9d 	bl	8000fb4 <TypeSystemManager_CastToSealedType$4950>
 800107a:	7a00      	ldrb	r0, [r0, #8]
 800107c:	2100      	movs	r1, #0
 800107e:	9a00      	ldr	r2, [sp, #0]
 8001080:	4282      	cmp	r2, r0
 8001082:	bf08      	it	eq
 8001084:	2101      	moveq	r1, #1
 8001086:	9101      	str	r1, [sp, #4]
 8001088:	e7ff      	b.n	800108a <Byte_Equals$1616+0x4e>
 800108a:	9801      	ldr	r0, [sp, #4]
 800108c:	b004      	add	sp, #16
 800108e:	bd80      	pop	{r7, pc}
 8001090:	e80107ac 	.word	0xe80107ac
 8001094:	18000788 	.word	0x18000788
 8001098:	18000764 	.word	0x18000764

0800109c <Object_ToString$2229>:
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	4601      	mov	r1, r0
        // Returns a String which represents the object instance.  The default
        // for an object is to return the fully qualified name of the class.
        //
        public virtual String ToString()
        {
            return GetType().ToString();
 80010a2:	9101      	str	r1, [sp, #4]
 80010a4:	f000 fd18 	bl	8001ad8 <Object_GetType$3817>
 80010a8:	f000 fd2b 	bl	8001b02 <RuntimeType_ToString$2303>
 80010ac:	b002      	add	sp, #8
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <Byte_GetHashCode$1620>:
 80010b0:	b081      	sub	sp, #4
 80010b2:	4601      	mov	r1, r0
        }

        // Gets a hash code for this instance.
        public override int GetHashCode()
        {
            return m_value;
 80010b4:	7a00      	ldrb	r0, [r0, #8]
 80010b6:	9100      	str	r1, [sp, #0]
 80010b8:	b001      	add	sp, #4
 80010ba:	4770      	bx	lr

080010bc <Byte_ToString$1639>:
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	4601      	mov	r1, r0
            return true;
        }

        public override String ToString()
        {
            return Number.FormatInt32( m_value, /*null,*/ NumberFormatInfo.CurrentInfo );
 80010c2:	7a00      	ldrb	r0, [r0, #8]
 80010c4:	9103      	str	r1, [sp, #12]
 80010c6:	9002      	str	r0, [sp, #8]
 80010c8:	f000 f810 	bl	80010ec <NumberFormatInfo_get_CurrentInfo$9720>
 80010cc:	4905      	ldr	r1, [pc, #20]	; (80010e4 <Byte_ToString$1639+0x28>)
 80010ce:	4a06      	ldr	r2, [pc, #24]	; (80010e8 <Byte_ToString$1639+0x2c>)
 80010d0:	447a      	add	r2, pc
 80010d2:	5a89      	ldrh	r1, [r1, r2]
 80010d4:	9a02      	ldr	r2, [sp, #8]
 80010d6:	9001      	str	r0, [sp, #4]
 80010d8:	4610      	mov	r0, r2
 80010da:	9a01      	ldr	r2, [sp, #4]
 80010dc:	f000 f83e 	bl	800115c <Number_FormatInt32$7246>
 80010e0:	b004      	add	sp, #16
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	e80251f4 	.word	0xe80251f4
 80010e8:	18000700 	.word	0x18000700

080010ec <NumberFormatInfo_get_CurrentInfo$9720>:
////            VerifyNativeDigits( value, "NativeDigits" );
////            nativeDigits = value;
////        }
////    }
////
////
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	4815      	ldr	r0, [pc, #84]	; (8001148 <NumberFormatInfo_get_CurrentInfo$9720+0x5c>)
 80010f2:	4916      	ldr	r1, [pc, #88]	; (800114c <NumberFormatInfo_get_CurrentInfo$9720+0x60>)
 80010f4:	4479      	add	r1, pc
 80010f6:	4408      	add	r0, r1
 80010f8:	f8d0 00e4 	ldr.w	r0, [r0, #228]	; 0xe4
        public static NumberFormatInfo CurrentInfo
        {
            get
            {
                System.Globalization.CultureInfo culture = System.Threading.Thread.CurrentThread.CurrentCulture;
                if(!culture.m_isInherited)
 80010fc:	7f01      	ldrb	r1, [r0, #28]
 80010fe:	2900      	cmp	r1, #0
 8001100:	9005      	str	r0, [sp, #20]
 8001102:	d106      	bne.n	8001112 <NumberFormatInfo_get_CurrentInfo$9720+0x26>
 8001104:	e7ff      	b.n	8001106 <NumberFormatInfo_get_CurrentInfo$9720+0x1a>
                {
                    NumberFormatInfo info = culture.numInfo;
 8001106:	9805      	ldr	r0, [sp, #20]
 8001108:	6901      	ldr	r1, [r0, #16]
                    if(info != null)
 800110a:	2900      	cmp	r1, #0
 800110c:	9104      	str	r1, [sp, #16]
 800110e:	d116      	bne.n	800113e <NumberFormatInfo_get_CurrentInfo$9720+0x52>
 8001110:	e018      	b.n	8001144 <NumberFormatInfo_get_CurrentInfo$9720+0x58>
                    {
                        return info;
                    }
                }
                return ((NumberFormatInfo)culture.GetFormat( typeof( NumberFormatInfo ) ));
 8001112:	480f      	ldr	r0, [pc, #60]	; (8001150 <NumberFormatInfo_get_CurrentInfo$9720+0x64>)
 8001114:	490f      	ldr	r1, [pc, #60]	; (8001154 <NumberFormatInfo_get_CurrentInfo$9720+0x68>)
 8001116:	4479      	add	r1, pc
 8001118:	4408      	add	r0, r1
 800111a:	9a05      	ldr	r2, [sp, #20]
 800111c:	9003      	str	r0, [sp, #12]
 800111e:	4610      	mov	r0, r2
 8001120:	9b03      	ldr	r3, [sp, #12]
 8001122:	9102      	str	r1, [sp, #8]
 8001124:	4619      	mov	r1, r3
 8001126:	f00d fbfb 	bl	800e920 <CultureInfo_GetFormat$9581>
 800112a:	490b      	ldr	r1, [pc, #44]	; (8001158 <NumberFormatInfo_get_CurrentInfo$9720+0x6c>)
 800112c:	9a02      	ldr	r2, [sp, #8]
 800112e:	4411      	add	r1, r2
 8001130:	f7ff ff40 	bl	8000fb4 <TypeSystemManager_CastToSealedType$4950>
 8001134:	9001      	str	r0, [sp, #4]
 8001136:	e7ff      	b.n	8001138 <NumberFormatInfo_get_CurrentInfo$9720+0x4c>
            }
 8001138:	9801      	ldr	r0, [sp, #4]
 800113a:	b006      	add	sp, #24
 800113c:	bd80      	pop	{r7, pc}
 800113e:	9804      	ldr	r0, [sp, #16]
                if(!culture.m_isInherited)
                {
                    NumberFormatInfo info = culture.numInfo;
                    if(info != null)
                    {
                        return info;
 8001140:	9001      	str	r0, [sp, #4]
 8001142:	e7f9      	b.n	8001138 <NumberFormatInfo_get_CurrentInfo$9720+0x4c>
                    }
                }
 8001144:	e7e5      	b.n	8001112 <NumberFormatInfo_get_CurrentInfo$9720+0x26>
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	fffffe3c 	.word	0xfffffe3c
 800114c:	180006dc 	.word	0x180006dc
 8001150:	e8013620 	.word	0xe8013620
 8001154:	180006ba 	.word	0x180006ba
 8001158:	e80135fc 	.word	0xe80135fc

0800115c <Number_FormatInt32$7246>:
 800115c:	b570      	push	{r4, r5, r6, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	4613      	mov	r3, r2
 8001162:	468c      	mov	ip, r1
 8001164:	4686      	mov	lr, r0

        internal static String FormatInt32( int              value     ,
                                            char             formatChar,
                                            NumberFormatInfo info      )
        {
            Number number = new Number( value );
 8001166:	4c10      	ldr	r4, [pc, #64]	; (80011a8 <Number_FormatInt32$7246+0x4c>)
 8001168:	4d10      	ldr	r5, [pc, #64]	; (80011ac <Number_FormatInt32$7246+0x50>)
 800116a:	447d      	add	r5, pc
 800116c:	442c      	add	r4, r5
 800116e:	4e10      	ldr	r6, [pc, #64]	; (80011b0 <Number_FormatInt32$7246+0x54>)
 8001170:	442e      	add	r6, r5
 8001172:	9007      	str	r0, [sp, #28]
 8001174:	4620      	mov	r0, r4
 8001176:	9106      	str	r1, [sp, #24]
 8001178:	4631      	mov	r1, r6
 800117a:	9205      	str	r2, [sp, #20]
 800117c:	f8cd e010 	str.w	lr, [sp, #16]
 8001180:	9503      	str	r5, [sp, #12]
 8001182:	9302      	str	r3, [sp, #8]
 8001184:	f8cd c004 	str.w	ip, [sp, #4]
 8001188:	f7ff fb1a 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800118c:	9000      	str	r0, [sp, #0]
 800118e:	9907      	ldr	r1, [sp, #28]
 8001190:	f00a f8b0 	bl	800b2f4 <Number_.ctor$7233>
 8001194:	4807      	ldr	r0, [pc, #28]	; (80011b4 <Number_FormatInt32$7246+0x58>)
 8001196:	9903      	ldr	r1, [sp, #12]
 8001198:	5842      	ldr	r2, [r0, r1]
            return number.ToString( formatChar, -1, info );
 800119a:	9800      	ldr	r0, [sp, #0]
 800119c:	9906      	ldr	r1, [sp, #24]
 800119e:	9b05      	ldr	r3, [sp, #20]
 80011a0:	f00a fab2 	bl	800b708 <Number_ToString$7257>
 80011a4:	b008      	add	sp, #32
 80011a6:	bd70      	pop	{r4, r5, r6, pc}
 80011a8:	ffffea38 	.word	0xffffea38
 80011ac:	18000666 	.word	0x18000666
 80011b0:	e8012e5c 	.word	0xe8012e5c
 80011b4:	e80253c8 	.word	0xe80253c8

080011b8 <Byte_ToString$1645>:
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	460a      	mov	r2, r1
 80011be:	4603      	mov	r3, r0
            return Number.FormatInt32( m_value, /*null,*/ NumberFormatInfo.GetInstance( provider ) );
        }
    
        public String ToString( String format, IFormatProvider provider )
        {
            return Number.FormatInt32( m_value, format, NumberFormatInfo.GetInstance( provider ) );
 80011c0:	7a00      	ldrb	r0, [r0, #8]
 80011c2:	9105      	str	r1, [sp, #20]
 80011c4:	9304      	str	r3, [sp, #16]
 80011c6:	9203      	str	r2, [sp, #12]
 80011c8:	9002      	str	r0, [sp, #8]
 80011ca:	f7ff ff8f 	bl	80010ec <NumberFormatInfo_get_CurrentInfo$9720>
            return Number.FormatInt32( m_value, /*null,*/ NumberFormatInfo.GetInstance( provider ) );
        }
    
        public String ToString( String format, IFormatProvider provider )
        {
            return Number.FormatInt32( m_value, format, NumberFormatInfo.GetInstance( provider ) );
 80011ce:	9902      	ldr	r1, [sp, #8]
 80011d0:	9001      	str	r0, [sp, #4]
 80011d2:	4608      	mov	r0, r1
 80011d4:	9905      	ldr	r1, [sp, #20]
 80011d6:	9a01      	ldr	r2, [sp, #4]
 80011d8:	f000 f802 	bl	80011e0 <Number_FormatInt32$7247>
 80011dc:	b006      	add	sp, #24
 80011de:	bd80      	pop	{r7, pc}

080011e0 <Number_FormatInt32$7247>:
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08a      	sub	sp, #40	; 0x28
 80011e4:	460b      	mov	r3, r1
 80011e6:	4684      	mov	ip, r0
 80011e8:	f04f 0e00 	mov.w	lr, #0
 80011ec:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 80011f0:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
                                          String           format ,
                                          NumberFormatInfo info   )
        {
            // rusa: see also Lightning\Src\VM\COMNumber.cpp::FormatInt32
            int digits;
            char fmt = ParseFormatSpecifier( format, out digits );
 80011f4:	9008      	str	r0, [sp, #32]
 80011f6:	4608      	mov	r0, r1
 80011f8:	4671      	mov	r1, lr
 80011fa:	f8cd c01c 	str.w	ip, [sp, #28]
 80011fe:	9306      	str	r3, [sp, #24]
 8001200:	9205      	str	r2, [sp, #20]
 8001202:	f00a f9bb 	bl	800b57c <Number_ParseFormatSpecifier$7258>
 8001206:	b281      	uxth	r1, r0
 8001208:	4602      	mov	r2, r0
            switch(fmt)
 800120a:	2959      	cmp	r1, #89	; 0x59
 800120c:	9204      	str	r2, [sp, #16]
 800120e:	9003      	str	r0, [sp, #12]
 8001210:	d305      	bcc.n	800121e <Number_FormatInt32$7247+0x3e>
 8001212:	e7ff      	b.n	8001214 <Number_FormatInt32$7247+0x34>
 8001214:	9803      	ldr	r0, [sp, #12]
 8001216:	b281      	uxth	r1, r0
 8001218:	2964      	cmp	r1, #100	; 0x64
 800121a:	d005      	beq.n	8001228 <Number_FormatInt32$7247+0x48>
 800121c:	e04a      	b.n	80012b4 <Number_FormatInt32$7247+0xd4>
 800121e:	9803      	ldr	r0, [sp, #12]
 8001220:	b281      	uxth	r1, r0
 8001222:	2944      	cmp	r1, #68	; 0x44
 8001224:	d108      	bne.n	8001238 <Number_FormatInt32$7247+0x58>
 8001226:	e7ff      	b.n	8001228 <Number_FormatInt32$7247+0x48>
                        goto case 'D';
                    }
                case 'd':
                case 'D':
                    {
                        return Int32ToDecString( value, digits, info.negativeSign );
 8001228:	9805      	ldr	r0, [sp, #20]
 800122a:	6982      	ldr	r2, [r0, #24]
 800122c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800122e:	9808      	ldr	r0, [sp, #32]
 8001230:	f00b fafa 	bl	800c828 <Number_Int32ToDecString$7261>
 8001234:	9002      	str	r0, [sp, #8]
 8001236:	e03a      	b.n	80012ae <Number_FormatInt32$7247+0xce>
 8001238:	9803      	ldr	r0, [sp, #12]
 800123a:	b281      	uxth	r1, r0
                                          NumberFormatInfo info   )
        {
            // rusa: see also Lightning\Src\VM\COMNumber.cpp::FormatInt32
            int digits;
            char fmt = ParseFormatSpecifier( format, out digits );
            switch(fmt)
 800123c:	2947      	cmp	r1, #71	; 0x47
 800123e:	d104      	bne.n	800124a <Number_FormatInt32$7247+0x6a>
 8001240:	e7ff      	b.n	8001242 <Number_FormatInt32$7247+0x62>
 8001242:	9809      	ldr	r0, [sp, #36]	; 0x24
            {
                case 'g':
                case 'G':
                    {
                        if(digits > 0) break;
 8001244:	2800      	cmp	r0, #0
 8001246:	dc0f      	bgt.n	8001268 <Number_FormatInt32$7247+0x88>
 8001248:	e7ee      	b.n	8001228 <Number_FormatInt32$7247+0x48>
 800124a:	9803      	ldr	r0, [sp, #12]
 800124c:	b281      	uxth	r1, r0
                                          NumberFormatInfo info   )
        {
            // rusa: see also Lightning\Src\VM\COMNumber.cpp::FormatInt32
            int digits;
            char fmt = ParseFormatSpecifier( format, out digits );
            switch(fmt)
 800124e:	2958      	cmp	r1, #88	; 0x58
 8001250:	d109      	bne.n	8001266 <Number_FormatInt32$7247+0x86>
 8001252:	e7ff      	b.n	8001254 <Number_FormatInt32$7247+0x74>
                        return Int32ToDecString( value, digits, info.negativeSign );
                    }
                case 'x':
                case 'X':
                    {
                        return Int32ToHexString( unchecked( (uint)value ),
 8001254:	9804      	ldr	r0, [sp, #16]
 8001256:	b281      	uxth	r1, r0
 8001258:	3921      	subs	r1, #33	; 0x21
 800125a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800125c:	9808      	ldr	r0, [sp, #32]
 800125e:	f00b fa97 	bl	800c790 <Number_Int32ToHexString$7262>
 8001262:	9002      	str	r0, [sp, #8]
 8001264:	e023      	b.n	80012ae <Number_FormatInt32$7247+0xce>
                                                (char)(fmt - ('X' - 'A' + 10)),
                                                digits );
                    }
                default:
                    {
                        break;
 8001266:	e7ff      	b.n	8001268 <Number_FormatInt32$7247+0x88>
                    }
            }
            Number number = new Number( value );
 8001268:	4817      	ldr	r0, [pc, #92]	; (80012c8 <Number_FormatInt32$7247+0xe8>)
 800126a:	4918      	ldr	r1, [pc, #96]	; (80012cc <Number_FormatInt32$7247+0xec>)
 800126c:	4479      	add	r1, pc
 800126e:	4408      	add	r0, r1
 8001270:	4a17      	ldr	r2, [pc, #92]	; (80012d0 <Number_FormatInt32$7247+0xf0>)
 8001272:	4411      	add	r1, r2
 8001274:	f7ff faa4 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8001278:	4601      	mov	r1, r0
 800127a:	9a08      	ldr	r2, [sp, #32]
 800127c:	9101      	str	r1, [sp, #4]
 800127e:	4611      	mov	r1, r2
 8001280:	f00a f838 	bl	800b2f4 <Number_.ctor$7233>
 8001284:	f64f 70ff 	movw	r0, #65535	; 0xffff
            if(fmt == 0)
 8001288:	9904      	ldr	r1, [sp, #16]
 800128a:	4201      	tst	r1, r0
 800128c:	d107      	bne.n	800129e <Number_FormatInt32$7247+0xbe>
 800128e:	e7ff      	b.n	8001290 <Number_FormatInt32$7247+0xb0>
            {
                return number.ToStringFormat( format, info );
 8001290:	9801      	ldr	r0, [sp, #4]
 8001292:	9906      	ldr	r1, [sp, #24]
 8001294:	9a05      	ldr	r2, [sp, #20]
 8001296:	f00a fc09 	bl	800baac <Number_ToStringFormat$7259>
 800129a:	9002      	str	r0, [sp, #8]
 800129c:	e007      	b.n	80012ae <Number_FormatInt32$7247+0xce>
            }
            else
            {
                return number.ToString( fmt, digits, info );
 800129e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80012a0:	9801      	ldr	r0, [sp, #4]
 80012a2:	9904      	ldr	r1, [sp, #16]
 80012a4:	9b05      	ldr	r3, [sp, #20]
 80012a6:	f00a fa2f 	bl	800b708 <Number_ToString$7257>
 80012aa:	9002      	str	r0, [sp, #8]
 80012ac:	e7ff      	b.n	80012ae <Number_FormatInt32$7247+0xce>
            }
        }
 80012ae:	9802      	ldr	r0, [sp, #8]
 80012b0:	b00a      	add	sp, #40	; 0x28
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	9803      	ldr	r0, [sp, #12]
 80012b6:	b281      	uxth	r1, r0
                                          NumberFormatInfo info   )
        {
            // rusa: see also Lightning\Src\VM\COMNumber.cpp::FormatInt32
            int digits;
            char fmt = ParseFormatSpecifier( format, out digits );
            switch(fmt)
 80012b8:	2967      	cmp	r1, #103	; 0x67
 80012ba:	d0c2      	beq.n	8001242 <Number_FormatInt32$7247+0x62>
 80012bc:	e7ff      	b.n	80012be <Number_FormatInt32$7247+0xde>
 80012be:	9803      	ldr	r0, [sp, #12]
 80012c0:	b281      	uxth	r1, r0
 80012c2:	2978      	cmp	r1, #120	; 0x78
 80012c4:	d0c6      	beq.n	8001254 <Number_FormatInt32$7247+0x74>
 80012c6:	e7ce      	b.n	8001266 <Number_FormatInt32$7247+0x86>
 80012c8:	ffffea38 	.word	0xffffea38
 80012cc:	18000564 	.word	0x18000564
 80012d0:	e8012e5c 	.word	0xe8012e5c

080012d4 <Char_GetHashCode$1685>:
 80012d4:	b081      	sub	sp, #4
 80012d6:	4601      	mov	r1, r0
                                  IFormatProvider provider )
        {
            NumberFormatInfo.ValidateParseStyleInteger( style );
    
            return Parse( s, style, NumberFormatInfo.GetInstance( provider ) );
        }
 80012d8:	8900      	ldrh	r0, [r0, #8]
 80012da:	ea40 4000 	orr.w	r0, r0, r0, lsl #16
 80012de:	9100      	str	r1, [sp, #0]
 80012e0:	b001      	add	sp, #4
 80012e2:	4770      	bx	lr

080012e4 <Char_Equals$1687>:
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	460a      	mov	r2, r1

        // Used for comparing two boxed Char objects.
        //
        public override bool Equals( Object obj )
        {
            if(!(obj is Char))
 80012ea:	4b13      	ldr	r3, [pc, #76]	; (8001338 <Char_Equals$1687+0x54>)
 80012ec:	f8df c04c 	ldr.w	ip, [pc, #76]	; 800133c <Char_Equals$1687+0x58>
 80012f0:	44fc      	add	ip, pc
 80012f2:	4463      	add	r3, ip
 80012f4:	9003      	str	r0, [sp, #12]
 80012f6:	4608      	mov	r0, r1
 80012f8:	4619      	mov	r1, r3
 80012fa:	9202      	str	r2, [sp, #8]
 80012fc:	f7ff fcae 	bl	8000c5c <TypeSystemManager_CastToSealedTypeNoThrow$4951>
 8001300:	2800      	cmp	r0, #0
 8001302:	d103      	bne.n	800130c <Char_Equals$1687+0x28>
 8001304:	e7ff      	b.n	8001306 <Char_Equals$1687+0x22>
 8001306:	2000      	movs	r0, #0
            {
                return false;
 8001308:	9001      	str	r0, [sp, #4]
 800130a:	e012      	b.n	8001332 <Char_Equals$1687+0x4e>
            }

            return (m_value == ((Char)obj).m_value);
 800130c:	9803      	ldr	r0, [sp, #12]
 800130e:	8901      	ldrh	r1, [r0, #8]
 8001310:	4a09      	ldr	r2, [pc, #36]	; (8001338 <Char_Equals$1687+0x54>)
 8001312:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <Char_Equals$1687+0x5c>)
 8001314:	447b      	add	r3, pc
 8001316:	441a      	add	r2, r3
 8001318:	9802      	ldr	r0, [sp, #8]
 800131a:	9100      	str	r1, [sp, #0]
 800131c:	4611      	mov	r1, r2
 800131e:	f7ff fe49 	bl	8000fb4 <TypeSystemManager_CastToSealedType$4950>
 8001322:	8900      	ldrh	r0, [r0, #8]
 8001324:	2100      	movs	r1, #0
 8001326:	9a00      	ldr	r2, [sp, #0]
 8001328:	4282      	cmp	r2, r0
 800132a:	bf08      	it	eq
 800132c:	2101      	moveq	r1, #1
 800132e:	9101      	str	r1, [sp, #4]
 8001330:	e7ff      	b.n	8001332 <Char_Equals$1687+0x4e>
 8001332:	9801      	ldr	r0, [sp, #4]
 8001334:	b004      	add	sp, #16
 8001336:	bd80      	pop	{r7, pc}
 8001338:	e801083c 	.word	0xe801083c
 800133c:	180004e0 	.word	0x180004e0
 8001340:	180004bc 	.word	0x180004bc

08001344 <Char_ToString$1695>:
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	4601      	mov	r1, r0
        }

        // Overrides System.Object.ToString.
        public override String ToString()
        {
            return Char.ToString( m_value );
 800134a:	8900      	ldrh	r0, [r0, #8]
 800134c:	9101      	str	r1, [sp, #4]
 800134e:	f000 f803 	bl	8001358 <Char_ToString$1699>
 8001352:	b002      	add	sp, #8
 8001354:	bd80      	pop	{r7, pc}
 8001356:	46c0      	nop			; (mov r8, r8)

08001358 <Char_ToString$1699>:
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	4601      	mov	r1, r0
 800135e:	4a0a      	ldr	r2, [pc, #40]	; (8001388 <Char_ToString$1699+0x30>)
 8001360:	4b0a      	ldr	r3, [pc, #40]	; (800138c <Char_ToString$1699+0x34>)
 8001362:	447b      	add	r3, pc
 8001364:	58d2      	ldr	r2, [r2, r3]
        **This static methods takes a character and returns the String representation of it.
        ==============================================================================*/
        // Provides a string representation of a character.
        public static String ToString( char c )
        {
            return new String( c, 1 );
 8001366:	9003      	str	r0, [sp, #12]
 8001368:	4610      	mov	r0, r2
 800136a:	9302      	str	r3, [sp, #8]
 800136c:	9101      	str	r1, [sp, #4]
 800136e:	f000 f811 	bl	8001394 <String_FastAllocateString$3886>
 8001372:	4907      	ldr	r1, [pc, #28]	; (8001390 <Char_ToString$1699+0x38>)
 8001374:	9a02      	ldr	r2, [sp, #8]
 8001376:	588a      	ldr	r2, [r1, r2]
 8001378:	9000      	str	r0, [sp, #0]
 800137a:	9903      	ldr	r1, [sp, #12]
 800137c:	f000 f828 	bl	80013d0 <String_.ctor$3885>
 8001380:	9800      	ldr	r0, [sp, #0]
 8001382:	b004      	add	sp, #16
 8001384:	bd80      	pop	{r7, pc}
 8001386:	46c0      	nop			; (mov r8, r8)
 8001388:	e80251f8 	.word	0xe80251f8
 800138c:	1800046e 	.word	0x1800046e
 8001390:	e80251fc 	.word	0xe80251fc

08001394 <String_FastAllocateString$3886>:
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	4601      	mov	r1, r0
 800139a:	4a0a      	ldr	r2, [pc, #40]	; (80013c4 <String_FastAllocateString$3886+0x30>)
 800139c:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <String_FastAllocateString$3886+0x34>)
 800139e:	447b      	add	r3, pc
 80013a0:	441a      	add	r2, r3
 80013a2:	9203      	str	r2, [sp, #12]

////    internal char FirstChar
////    {
////        get
////        {
////            return m_firstChar;
 80013a4:	f100 0c01 	add.w	ip, r0, #1
 80013a8:	f8df e020 	ldr.w	lr, [pc, #32]	; 80013cc <String_FastAllocateString$3886+0x38>
 80013ac:	4473      	add	r3, lr
 80013ae:	9002      	str	r0, [sp, #8]
 80013b0:	4618      	mov	r0, r3
 80013b2:	9101      	str	r1, [sp, #4]
 80013b4:	4611      	mov	r1, r2
 80013b6:	4662      	mov	r2, ip
 80013b8:	f001 f8c7 	bl	800254a <DefaultTypeSystemManager_AllocateString$4964>
 80013bc:	9902      	ldr	r1, [sp, #8]
 80013be:	60c1      	str	r1, [r0, #12]
 80013c0:	b004      	add	sp, #16
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	e801023c 	.word	0xe801023c
 80013c8:	18000432 	.word	0x18000432
 80013cc:	ffffea38 	.word	0xffffea38

080013d0 <String_.ctor$3885>:
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b088      	sub	sp, #32
 80013d4:	4613      	mov	r3, r2
 80013d6:	4694      	mov	ip, r2
        [NonSerialized] private char m_firstChar;

        //
        //Native Static Methods
        //

 80013d8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80013dc:	f8cd c01c 	str.w	ip, [sp, #28]
 80013e0:	9306      	str	r3, [sp, #24]
 80013e2:	9105      	str	r1, [sp, #20]
 80013e4:	9004      	str	r0, [sp, #16]
 80013e6:	dc03      	bgt.n	80013f0 <String_.ctor$3885+0x20>
 80013e8:	e7ff      	b.n	80013ea <String_.ctor$3885+0x1a>
////    // Joins an array of strings together as one string with a separator between each original string.
////    //
 80013ea:	f001 f96f 	bl	80026cc <Thread_ThrowIndexOutOfRangeException$4021>
////    public static String Join( String separator, String[] value )
 80013ee:	e005      	b.n	80013fc <String_.ctor$3885+0x2c>
 80013f0:	9804      	ldr	r0, [sp, #16]
 80013f2:	68c1      	ldr	r1, [r0, #12]
        [NonSerialized] private char m_firstChar;

        //
        //Native Static Methods
        //

 80013f4:	9a07      	ldr	r2, [sp, #28]
 80013f6:	428a      	cmp	r2, r1
 80013f8:	dcf7      	bgt.n	80013ea <String_.ctor$3885+0x1a>
 80013fa:	e7ff      	b.n	80013fc <String_.ctor$3885+0x2c>
////    // Joins an array of strings together as one string with a separator between each original string.
////    //
////    public static String Join( String separator, String[] value )
////    {
////        if(value == null)
 80013fc:	9804      	ldr	r0, [sp, #16]
 80013fe:	f100 0110 	add.w	r1, r0, #16
 8001402:	9a07      	ldr	r2, [sp, #28]
////        {
////            throw new ArgumentNullException( "value" );
 8001404:	9203      	str	r2, [sp, #12]
 8001406:	9102      	str	r1, [sp, #8]
 8001408:	e7ff      	b.n	800140a <String_.ctor$3885+0x3a>
 800140a:	9802      	ldr	r0, [sp, #8]
 800140c:	9903      	ldr	r1, [sp, #12]
////        }
////
 800140e:	3901      	subs	r1, #1
 8001410:	460a      	mov	r2, r1
 8001412:	2900      	cmp	r1, #0
 8001414:	9001      	str	r0, [sp, #4]
 8001416:	9200      	str	r2, [sp, #0]
 8001418:	db08      	blt.n	800142c <String_.ctor$3885+0x5c>
 800141a:	e7ff      	b.n	800141c <String_.ctor$3885+0x4c>
 800141c:	9801      	ldr	r0, [sp, #4]
 800141e:	9905      	ldr	r1, [sp, #20]
 8001420:	f820 1b02 	strh.w	r1, [r0], #2
 8001424:	9a00      	ldr	r2, [sp, #0]
////        return Join( separator, value, 0, value.Length );
////    }

 8001426:	9203      	str	r2, [sp, #12]
 8001428:	9002      	str	r0, [sp, #8]
 800142a:	e7ee      	b.n	800140a <String_.ctor$3885+0x3a>
 800142c:	b008      	add	sp, #32
 800142e:	bd80      	pop	{r7, pc}

08001430 <Delegate_Equals$4613>:
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	460a      	mov	r2, r1
////    private const byte CTRL        = (byte)UnicodeCategory.Control;
////    private const byte SPACE       = (byte)UnicodeCategory.SpaceSeparator;
////    private const byte DIGIT       = (byte)UnicodeCategory.DecimalDigitNumber;
////    private const byte DIGIT_OTHER = (byte)UnicodeCategory.OtherNumber;
////    private const byte LETTER_UC   = (byte)UnicodeCategory.UppercaseLetter;
////    private const byte LETTER_LC   = (byte)UnicodeCategory.LowercaseLetter;
 8001436:	2900      	cmp	r1, #0
 8001438:	9005      	str	r0, [sp, #20]
 800143a:	9204      	str	r2, [sp, #16]
 800143c:	d008      	beq.n	8001450 <Delegate_Equals$4613+0x20>
 800143e:	e7ff      	b.n	8001440 <Delegate_Equals$4613+0x10>
        public override String ToString()
        {
            return Char.ToString( m_value );
        }

        public String ToString( IFormatProvider provider )
 8001440:	9805      	ldr	r0, [sp, #20]
 8001442:	9904      	ldr	r1, [sp, #16]
 8001444:	f000 f836 	bl	80014b4 <VTable_SameType$3669>
////    private const byte CTRL        = (byte)UnicodeCategory.Control;
////    private const byte SPACE       = (byte)UnicodeCategory.SpaceSeparator;
////    private const byte DIGIT       = (byte)UnicodeCategory.DecimalDigitNumber;
////    private const byte DIGIT_OTHER = (byte)UnicodeCategory.OtherNumber;
////    private const byte LETTER_UC   = (byte)UnicodeCategory.UppercaseLetter;
////    private const byte LETTER_LC   = (byte)UnicodeCategory.LowercaseLetter;
 8001448:	f010 0fff 	tst.w	r0, #255	; 0xff
 800144c:	d106      	bne.n	800145c <Delegate_Equals$4613+0x2c>
 800144e:	e7ff      	b.n	8001450 <Delegate_Equals$4613+0x20>
 8001450:	2000      	movs	r0, #0
////    private const byte PUNCT_OPEN  = (byte)UnicodeCategory.OpenPunctuation;
////    private const byte PUNCT_CLOSE = (byte)UnicodeCategory.ClosePunctuation;
 8001452:	9003      	str	r0, [sp, #12]
 8001454:	e7ff      	b.n	8001456 <Delegate_Equals$4613+0x26>
 8001456:	9803      	ldr	r0, [sp, #12]
 8001458:	b006      	add	sp, #24
 800145a:	bd80      	pop	{r7, pc}
////    private const byte PUNCT_DASH  = (byte)UnicodeCategory.DashPunctuation;
////    private const byte PUNCT_CONN  = (byte)UnicodeCategory.ConnectorPunctuation;
////    private const byte PUNCT_IQ    = (byte)UnicodeCategory.InitialQuotePunctuation;
 800145c:	4813      	ldr	r0, [pc, #76]	; (80014ac <Delegate_Equals$4613+0x7c>)
 800145e:	4914      	ldr	r1, [pc, #80]	; (80014b0 <Delegate_Equals$4613+0x80>)
 8001460:	4479      	add	r1, pc
 8001462:	4401      	add	r1, r0
 8001464:	9804      	ldr	r0, [sp, #16]
 8001466:	f000 f868 	bl	800153a <TypeSystemManager_CastToTypeNoThrow$4949>
 800146a:	4601      	mov	r1, r0
////    private const byte PUNCT_FQ    = (byte)UnicodeCategory.FinalQuotePunctuation;
 800146c:	9102      	str	r1, [sp, #8]
 800146e:	f000 f89a 	bl	80015a6 <Delegate_op_Equality$4615>
 8001472:	f010 0fff 	tst.w	r0, #255	; 0xff
 8001476:	d003      	beq.n	8001480 <Delegate_Equals$4613+0x50>
 8001478:	e7ff      	b.n	800147a <Delegate_Equals$4613+0x4a>
 800147a:	2000      	movs	r0, #0
////    private const byte PUNCT_OTHER = (byte)UnicodeCategory.OtherPunctuation;
////    private const byte CURRENCY    = (byte)UnicodeCategory.CurrencySymbol;
 800147c:	9003      	str	r0, [sp, #12]
 800147e:	e7ea      	b.n	8001456 <Delegate_Equals$4613+0x26>
////    private const byte MATH        = (byte)UnicodeCategory.MathSymbol;
////    private const byte MODIFIER    = (byte)UnicodeCategory.ModifierSymbol;
////    private const byte OTHER       = (byte)UnicodeCategory.OtherSymbol;
 8001480:	9805      	ldr	r0, [sp, #20]
 8001482:	6881      	ldr	r1, [r0, #8]
 8001484:	9a02      	ldr	r2, [sp, #8]
 8001486:	6893      	ldr	r3, [r2, #8]
 8001488:	4299      	cmp	r1, r3
 800148a:	d003      	beq.n	8001494 <Delegate_Equals$4613+0x64>
 800148c:	e7ff      	b.n	800148e <Delegate_Equals$4613+0x5e>
 800148e:	2000      	movs	r0, #0
 8001490:	9001      	str	r0, [sp, #4]
 8001492:	e008      	b.n	80014a6 <Delegate_Equals$4613+0x76>
 8001494:	9805      	ldr	r0, [sp, #20]
 8001496:	68c0      	ldr	r0, [r0, #12]
 8001498:	9902      	ldr	r1, [sp, #8]
 800149a:	68c9      	ldr	r1, [r1, #12]
 800149c:	f000 f8ac 	bl	80015f8 <IntPtr_op_Equality$2184>
 80014a0:	b2c0      	uxtb	r0, r0
 80014a2:	9001      	str	r0, [sp, #4]
 80014a4:	e7ff      	b.n	80014a6 <Delegate_Equals$4613+0x76>
 80014a6:	9801      	ldr	r0, [sp, #4]
 80014a8:	9003      	str	r0, [sp, #12]
 80014aa:	e7d4      	b.n	8001456 <Delegate_Equals$4613+0x26>
 80014ac:	e80108cc 	.word	0xe80108cc
 80014b0:	18000370 	.word	0x18000370

080014b4 <VTable_SameType$3669>:
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08a      	sub	sp, #40	; 0x28
 80014b8:	460a      	mov	r2, r1
 80014ba:	4603      	mov	r3, r0
 80014bc:	3008      	adds	r0, #8
 80014be:	9006      	str	r0, [sp, #24]
 80014c0:	2000      	movs	r0, #0
 80014c2:	9007      	str	r0, [sp, #28]
 80014c4:	f8dd c018 	ldr.w	ip, [sp, #24]
 80014c8:	f1ac 0c08 	sub.w	ip, ip, #8
 80014cc:	9007      	str	r0, [sp, #28]
 80014ce:	f10d 0e1c 	add.w	lr, sp, #28
 80014d2:	f1ae 0e08 	sub.w	lr, lr, #8
 80014d6:	9005      	str	r0, [sp, #20]
 80014d8:	4670      	mov	r0, lr
 80014da:	9104      	str	r1, [sp, #16]
 80014dc:	4661      	mov	r1, ip
 80014de:	9203      	str	r2, [sp, #12]
 80014e0:	9302      	str	r3, [sp, #8]
 80014e2:	f7ff f9eb 	bl	80008bc <UIntPtr_.ctor$2864>
 80014e6:	9807      	ldr	r0, [sp, #28]
 80014e8:	6840      	ldr	r0, [r0, #4]
 80014ea:	9904      	ldr	r1, [sp, #16]
 80014ec:	f101 0208 	add.w	r2, r1, #8
 80014f0:	9208      	str	r2, [sp, #32]
 80014f2:	9a05      	ldr	r2, [sp, #20]
 80014f4:	9209      	str	r2, [sp, #36]	; 0x24
 80014f6:	9b08      	ldr	r3, [sp, #32]
 80014f8:	f1a3 0108 	sub.w	r1, r3, #8
 80014fc:	9209      	str	r2, [sp, #36]	; 0x24
 80014fe:	ab09      	add	r3, sp, #36	; 0x24
 8001500:	3b08      	subs	r3, #8
 8001502:	9001      	str	r0, [sp, #4]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff f9d9 	bl	80008bc <UIntPtr_.ctor$2864>
 800150a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800150c:	6840      	ldr	r0, [r0, #4]
 800150e:	9901      	ldr	r1, [sp, #4]
 8001510:	4281      	cmp	r1, r0
 8001512:	9805      	ldr	r0, [sp, #20]
 8001514:	bf08      	it	eq
 8001516:	2001      	moveq	r0, #1
 8001518:	b00a      	add	sp, #40	; 0x28
 800151a:	bd80      	pop	{r7, pc}

0800151c <Delegate_GetHashCode$4614>:
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	4601      	mov	r1, r0
            return (m_target == d.m_target && m_codePtr.Target == d.m_codePtr.Target);
        }

        public override int GetHashCode()
        {
            return m_codePtr.Target.GetHashCode();
 8001522:	3004      	adds	r0, #4
 8001524:	9101      	str	r1, [sp, #4]
 8001526:	f000 f878 	bl	800161a <IntPtr_GetHashCode$2166>
 800152a:	b002      	add	sp, #8
 800152c:	bd80      	pop	{r7, pc}

0800152e <Delegate_GetTarget$4619>:
 800152e:	b081      	sub	sp, #4
 8001530:	4601      	mov	r1, r0

        //--//

        protected virtual Object GetTarget()
        {
            return m_target;
 8001532:	6880      	ldr	r0, [r0, #8]
 8001534:	9100      	str	r1, [sp, #0]
 8001536:	b001      	add	sp, #4
 8001538:	4770      	bx	lr

0800153a <TypeSystemManager_CastToTypeNoThrow$4949>:
 800153a:	b580      	push	{r7, lr}
 800153c:	b088      	sub	sp, #32
 800153e:	4602      	mov	r2, r0

        [TS.WellKnownMethod( "TypeSystemManager_CastToTypeNoThrow" )]
        public static object CastToTypeNoThrow( object    obj      ,
                                                TS.VTable expected )
        {
            if(obj != null)
 8001540:	2800      	cmp	r0, #0
 8001542:	9205      	str	r2, [sp, #20]
 8001544:	9104      	str	r1, [sp, #16]
 8001546:	d016      	beq.n	8001576 <TypeSystemManager_CastToTypeNoThrow$4949+0x3c>
 8001548:	e7ff      	b.n	800154a <TypeSystemManager_CastToTypeNoThrow$4949+0x10>

            oh.VirtualTable = vTable;
            oh.MultiUseWord = (int)(ObjectHeader.GarbageCollectorFlags.SpecialHandlerObject | ObjectHeader.GarbageCollectorFlags.Unmarked);

            return oh.Pack();
        }
 800154a:	9805      	ldr	r0, [sp, #20]
 800154c:	f100 0108 	add.w	r1, r0, #8
 8001550:	9106      	str	r1, [sp, #24]
 8001552:	2100      	movs	r1, #0
 8001554:	9107      	str	r1, [sp, #28]
        private static T AtomicAllocatorSlow<T>( ref T obj ) where T : class, new()
        {
            T newObj = new T();

            System.Threading.Interlocked.CompareExchange( ref obj, newObj, default(T) );

 8001556:	9a06      	ldr	r2, [sp, #24]
            return array.CastThisAsArray();
        }

        [Inline]
        public String InitializeString( UIntPtr   memory ,
                                        TS.VTable vTable ,
 8001558:	3a08      	subs	r2, #8
 800155a:	9107      	str	r1, [sp, #28]
 800155c:	a907      	add	r1, sp, #28
 800155e:	f1a1 0008 	sub.w	r0, r1, #8
 8001562:	4611      	mov	r1, r2
 8001564:	f7ff f9aa 	bl	80008bc <UIntPtr_.ctor$2864>

            oh.VirtualTable = vTable;
            oh.MultiUseWord = (int)(ObjectHeader.GarbageCollectorFlags.SpecialHandlerObject | ObjectHeader.GarbageCollectorFlags.Unmarked);

            return oh.Pack();
        }
 8001568:	9807      	ldr	r0, [sp, #28]
        //--//

        [NoReturn]
        [NoInline]
        [TS.WellKnownMethod( "TypeSystemManager_Throw" )]
        public virtual void Throw( Exception obj )
 800156a:	6840      	ldr	r0, [r0, #4]

        //--//

        public static System.Reflection.MethodInfo CodePointerToMethodInfo( TS.CodePointer ptr )
        {
            throw new NotImplementedException();
 800156c:	9904      	ldr	r1, [sp, #16]
 800156e:	4281      	cmp	r1, r0
 8001570:	9003      	str	r0, [sp, #12]
 8001572:	d006      	beq.n	8001582 <TypeSystemManager_CastToTypeNoThrow$4949+0x48>
 8001574:	e008      	b.n	8001588 <TypeSystemManager_CastToTypeNoThrow$4949+0x4e>
                {
                    return null;
                }
            }

            return obj;
 8001576:	9805      	ldr	r0, [sp, #20]
 8001578:	9002      	str	r0, [sp, #8]
 800157a:	e7ff      	b.n	800157c <TypeSystemManager_CastToTypeNoThrow$4949+0x42>
        }
 800157c:	9802      	ldr	r0, [sp, #8]
 800157e:	b008      	add	sp, #32
 8001580:	bd80      	pop	{r7, pc}
 8001582:	2001      	movs	r0, #1

        public static System.Reflection.MethodInfo CodePointerToMethodInfo( TS.CodePointer ptr )
        {
            throw new NotImplementedException();
        }

 8001584:	9001      	str	r0, [sp, #4]
 8001586:	e005      	b.n	8001594 <TypeSystemManager_CastToTypeNoThrow$4949+0x5a>
        //--//

        [NoInline]
 8001588:	9804      	ldr	r0, [sp, #16]
 800158a:	9903      	ldr	r1, [sp, #12]
 800158c:	f004 fc1c 	bl	8005dc8 <VTable_CanBeAssignedFrom_Slow$3676>
 8001590:	9001      	str	r0, [sp, #4]
 8001592:	e7ff      	b.n	8001594 <TypeSystemManager_CastToTypeNoThrow$4949+0x5a>
 8001594:	9801      	ldr	r0, [sp, #4]
        {
            if(obj != null)
            {
                TS.VTable got = TS.VTable.Get( obj );

                if(expected.CanBeAssignedFrom( got ) == false)
 8001596:	f010 0fff 	tst.w	r0, #255	; 0xff
 800159a:	d103      	bne.n	80015a4 <TypeSystemManager_CastToTypeNoThrow$4949+0x6a>
 800159c:	e7ff      	b.n	800159e <TypeSystemManager_CastToTypeNoThrow$4949+0x64>
 800159e:	2000      	movs	r0, #0
                {
                    return null;
 80015a0:	9002      	str	r0, [sp, #8]
 80015a2:	e7eb      	b.n	800157c <TypeSystemManager_CastToTypeNoThrow$4949+0x42>
                }
            }
 80015a4:	e7e7      	b.n	8001576 <TypeSystemManager_CastToTypeNoThrow$4949+0x3c>

080015a6 <Delegate_op_Equality$4615>:
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b086      	sub	sp, #24
 80015aa:	4601      	mov	r1, r0
////        }
////    }
////
////    // This constructor is called from a class to generate a
////    // delegate based upon a static method name and the Type object
////    // for the class defining the method.
 80015ac:	2800      	cmp	r0, #0
 80015ae:	9103      	str	r1, [sp, #12]
 80015b0:	d103      	bne.n	80015ba <Delegate_op_Equality$4615+0x14>
 80015b2:	e7ff      	b.n	80015b4 <Delegate_op_Equality$4615+0xe>
 80015b4:	2001      	movs	r0, #1
////    protected unsafe Delegate( Type target, String method )
////    {
 80015b6:	9002      	str	r0, [sp, #8]
 80015b8:	e01b      	b.n	80015f2 <Delegate_op_Equality$4615+0x4c>
////
////        if(target.IsGenericType && target.ContainsGenericParameters)
////        {
////            throw new ArgumentException( Environment.GetResourceString( "Arg_UnboundGenParam" ), "target" );
////        }
////
 80015ba:	9803      	ldr	r0, [sp, #12]
 80015bc:	f100 0108 	add.w	r1, r0, #8
 80015c0:	9104      	str	r1, [sp, #16]
 80015c2:	2100      	movs	r1, #0
 80015c4:	9105      	str	r1, [sp, #20]
////        // if that's the case the delegates may still be equals but we need to make a more complicated check
////
////        if(m_methodPtrAux.IsNull())
////        {
////            if(!d.m_methodPtrAux.IsNull())
////            {
 80015c6:	9a04      	ldr	r2, [sp, #16]
////                         DelegateBindingFlags.StaticMethodOnly |
////                         DelegateBindingFlags.OpenDelegateOnly |
////                         DelegateBindingFlags.CaselessMatching );
////    }
////
////    // Protect the default constructor so you can't build a delegate
 80015c8:	3a08      	subs	r2, #8
 80015ca:	9105      	str	r1, [sp, #20]
 80015cc:	ab05      	add	r3, sp, #20
 80015ce:	f1a3 0008 	sub.w	r0, r3, #8
 80015d2:	9101      	str	r1, [sp, #4]
 80015d4:	4611      	mov	r1, r2
 80015d6:	f7ff f971 	bl	80008bc <UIntPtr_.ctor$2864>
////
////        if(target.IsGenericType && target.ContainsGenericParameters)
////        {
////            throw new ArgumentException( Environment.GetResourceString( "Arg_UnboundGenParam" ), "target" );
////        }
////
 80015da:	9805      	ldr	r0, [sp, #20]
////                        // see the MethodInfo itself and that breaks an important invariant. But the
////                        // target type could include important generic type information we need in order
////                        // to work out what the exact instantiation of the method's declaring type is. So
////                        // we'll walk up the inheritance chain (which will yield exactly instantiated
////                        // types at each step) until we find the declaring type. Since the declaring type
////                        // we get from the method is probably shared and those in the hierarchy we're
 80015dc:	6840      	ldr	r0, [r0, #4]
////    // for the class defining the method.
////    protected unsafe Delegate( Type target, String method )
////    {
////        if(target == null)
////        {
////            throw new ArgumentNullException( "target" );
 80015de:	69c0      	ldr	r0, [r0, #28]
 80015e0:	6900      	ldr	r0, [r0, #16]
 80015e2:	9903      	ldr	r1, [sp, #12]
 80015e4:	9000      	str	r0, [sp, #0]
 80015e6:	4608      	mov	r0, r1
 80015e8:	9901      	ldr	r1, [sp, #4]
 80015ea:	9a00      	ldr	r2, [sp, #0]
 80015ec:	4790      	blx	r2
 80015ee:	9002      	str	r0, [sp, #8]
 80015f0:	e7ff      	b.n	80015f2 <Delegate_op_Equality$4615+0x4c>
 80015f2:	9802      	ldr	r0, [sp, #8]
 80015f4:	b006      	add	sp, #24
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <IntPtr_op_Equality$2184>:
 80015f8:	b084      	sub	sp, #16
 80015fa:	460a      	mov	r2, r1
 80015fc:	4603      	mov	r3, r0
 80015fe:	9002      	str	r0, [sp, #8]
 8001600:	9103      	str	r1, [sp, #12]
        }

        ////    [ReliabilityContract( Consistency.WillNotCorruptState, Cer.Success )]
        public unsafe static bool operator ==( IntPtr value1, IntPtr value2 )
        {
            return value1.m_value == value2.m_value;
 8001602:	9802      	ldr	r0, [sp, #8]
 8001604:	f04f 0c00 	mov.w	ip, #0
 8001608:	4288      	cmp	r0, r1
 800160a:	bf08      	it	eq
 800160c:	f04f 0c01 	moveq.w	ip, #1
 8001610:	4660      	mov	r0, ip
 8001612:	9201      	str	r2, [sp, #4]
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	b004      	add	sp, #16
 8001618:	4770      	bx	lr

0800161a <IntPtr_GetHashCode$2166>:
 800161a:	b081      	sub	sp, #4
 800161c:	4601      	mov	r1, r0
        {
            return (unchecked( (int)((long)m_value) ) ^ (int)(m_value >> 32));
        }

        public override String ToString()
        {
 800161e:	6880      	ldr	r0, [r0, #8]
 8001620:	9100      	str	r1, [sp, #0]
 8001622:	b001      	add	sp, #4
 8001624:	4770      	bx	lr

08001626 <Delegate_.ctor$4612>:
 8001626:	b580      	push	{r7, lr}
 8001628:	b083      	sub	sp, #12
 800162a:	4613      	mov	r3, r2
 800162c:	468c      	mov	ip, r1
 800162e:	4686      	mov	lr, r0
 8001630:	6081      	str	r1, [r0, #8]
 8001632:	60c2      	str	r2, [r0, #12]
 8001634:	f8cd c008 	str.w	ip, [sp, #8]
 8001638:	f8cd e004 	str.w	lr, [sp, #4]
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	b003      	add	sp, #12
 8001640:	bd80      	pop	{r7, pc}

08001642 <Enum_ToString$1894>:
 8001642:	b580      	push	{r7, lr}
 8001644:	b082      	sub	sp, #8
 8001646:	4601      	mov	r1, r0
 8001648:	9101      	str	r1, [sp, #4]
 800164a:	f000 f802 	bl	8001652 <Enum_ToString$1898>
 800164e:	b002      	add	sp, #8
 8001650:	bd80      	pop	{r7, pc}

08001652 <Enum_ToString$1898>:
 8001652:	b580      	push	{r7, lr}
 8001654:	b082      	sub	sp, #8
 8001656:	4601      	mov	r1, r0
        #endregion

        #region Public Methods
        public String ToString( String format )
        {
            return ToString();
 8001658:	9101      	str	r1, [sp, #4]
 800165a:	f7ff fd1f 	bl	800109c <Object_ToString$2229>
 800165e:	b002      	add	sp, #8
 8001660:	bd80      	pop	{r7, pc}
 8001662:	46c0      	nop			; (mov r8, r8)

08001664 <String_get_Chars$3893>:
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	460a      	mov	r2, r1
        //
        //

        //
        // Search/Query methods
        //
 800166a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800166e:	9005      	str	r0, [sp, #20]
 8001670:	9204      	str	r2, [sp, #16]
 8001672:	dc12      	bgt.n	800169a <String_get_Chars$3893+0x36>
 8001674:	e7ff      	b.n	8001676 <String_get_Chars$3893+0x12>
        private unsafe static bool EqualsHelper( String strA, String strB )
        {
            int length = strA.Length;
            if(length != strB.Length) return false;

            fixed(char* ap = strA) fixed(char* bp = strB)
 8001676:	e7ff      	b.n	8001678 <String_get_Chars$3893+0x14>
 8001678:	4815      	ldr	r0, [pc, #84]	; (80016d0 <String_get_Chars$3893+0x6c>)
 800167a:	4916      	ldr	r1, [pc, #88]	; (80016d4 <String_get_Chars$3893+0x70>)
 800167c:	4479      	add	r1, pc
 800167e:	4408      	add	r0, r1
 8001680:	4a15      	ldr	r2, [pc, #84]	; (80016d8 <String_get_Chars$3893+0x74>)
 8001682:	4411      	add	r1, r2
 8001684:	9003      	str	r0, [sp, #12]
 8001686:	f7ff f89b 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800168a:	9002      	str	r0, [sp, #8]
 800168c:	f7ff f992 	bl	80009b4 <IndexOutOfRangeException_.ctor$7117>
 8001690:	9803      	ldr	r0, [sp, #12]
 8001692:	9902      	ldr	r1, [sp, #8]
 8001694:	f7ff f8ea 	bl	800086c <TypeSystemManager_Throw$4954>
 8001698:	e7ee      	b.n	8001678 <String_get_Chars$3893+0x14>
 800169a:	9805      	ldr	r0, [sp, #20]
 800169c:	68c1      	ldr	r1, [r0, #12]
        //
        //

        //
        // Search/Query methods
        //
 800169e:	9a04      	ldr	r2, [sp, #16]
 80016a0:	428a      	cmp	r2, r1
 80016a2:	dae8      	bge.n	8001676 <String_get_Chars$3893+0x12>
 80016a4:	e7ff      	b.n	80016a6 <String_get_Chars$3893+0x42>

////    [ReliabilityContract( Consistency.WillNotCorruptState, Cer.MayFail )]
 80016a6:	9805      	ldr	r0, [sp, #20]
 80016a8:	f100 0108 	add.w	r1, r0, #8
 80016ac:	2800      	cmp	r0, #0
 80016ae:	460a      	mov	r2, r1
 80016b0:	9101      	str	r1, [sp, #4]
 80016b2:	9200      	str	r2, [sp, #0]
 80016b4:	d005      	beq.n	80016c2 <String_get_Chars$3893+0x5e>
 80016b6:	e7ff      	b.n	80016b8 <String_get_Chars$3893+0x54>
 80016b8:	9801      	ldr	r0, [sp, #4]
 80016ba:	f100 0108 	add.w	r1, r0, #8
 80016be:	9100      	str	r1, [sp, #0]
 80016c0:	e7ff      	b.n	80016c2 <String_get_Chars$3893+0x5e>
 80016c2:	9800      	ldr	r0, [sp, #0]
 80016c4:	9904      	ldr	r1, [sp, #16]
 80016c6:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 80016ca:	b006      	add	sp, #24
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	46c0      	nop			; (mov r8, r8)
 80016d0:	ffffea38 	.word	0xffffea38
 80016d4:	18000154 	.word	0x18000154
 80016d8:	e80105bc 	.word	0xe80105bc

080016dc <Number_FormatUInt32$7249>:
 80016dc:	b580      	push	{r7, lr}
 80016de:	b088      	sub	sp, #32
 80016e0:	460b      	mov	r3, r1
 80016e2:	f04f 0c00 	mov.w	ip, #0
 80016e6:	f8cd c01c 	str.w	ip, [sp, #28]
 80016ea:	f10d 0c1c 	add.w	ip, sp, #28
                                           String           format ,
                                           NumberFormatInfo info   )
        {
            // rusa: see also Lightning\Src\VM\COMNumber.cpp::FormatUInt32
            int digits;
            char fmt = ParseFormatSpecifier( format, out digits );
 80016ee:	9006      	str	r0, [sp, #24]
 80016f0:	4608      	mov	r0, r1
 80016f2:	4661      	mov	r1, ip
 80016f4:	9305      	str	r3, [sp, #20]
 80016f6:	9204      	str	r2, [sp, #16]
 80016f8:	f009 ff40 	bl	800b57c <Number_ParseFormatSpecifier$7258>
 80016fc:	b281      	uxth	r1, r0
 80016fe:	4602      	mov	r2, r0
            switch(fmt)
 8001700:	2959      	cmp	r1, #89	; 0x59
 8001702:	9203      	str	r2, [sp, #12]
 8001704:	9002      	str	r0, [sp, #8]
 8001706:	d305      	bcc.n	8001714 <Number_FormatUInt32$7249+0x38>
 8001708:	e7ff      	b.n	800170a <Number_FormatUInt32$7249+0x2e>
 800170a:	9802      	ldr	r0, [sp, #8]
 800170c:	b281      	uxth	r1, r0
 800170e:	2964      	cmp	r1, #100	; 0x64
 8001710:	d005      	beq.n	800171e <Number_FormatUInt32$7249+0x42>
 8001712:	e048      	b.n	80017a6 <Number_FormatUInt32$7249+0xca>
 8001714:	9802      	ldr	r0, [sp, #8]
 8001716:	b281      	uxth	r1, r0
 8001718:	2944      	cmp	r1, #68	; 0x44
 800171a:	d106      	bne.n	800172a <Number_FormatUInt32$7249+0x4e>
 800171c:	e7ff      	b.n	800171e <Number_FormatUInt32$7249+0x42>
                        goto case 'D';
                    }
                case 'd':
                case 'D':
                    {
                        return UInt32ToDecString( value, digits );
 800171e:	9907      	ldr	r1, [sp, #28]
 8001720:	9806      	ldr	r0, [sp, #24]
 8001722:	f00b f91d 	bl	800c960 <Number_UInt32ToDecString$7264>
 8001726:	9001      	str	r0, [sp, #4]
 8001728:	e03a      	b.n	80017a0 <Number_FormatUInt32$7249+0xc4>
 800172a:	9802      	ldr	r0, [sp, #8]
 800172c:	b281      	uxth	r1, r0
                                           NumberFormatInfo info   )
        {
            // rusa: see also Lightning\Src\VM\COMNumber.cpp::FormatUInt32
            int digits;
            char fmt = ParseFormatSpecifier( format, out digits );
            switch(fmt)
 800172e:	2947      	cmp	r1, #71	; 0x47
 8001730:	d104      	bne.n	800173c <Number_FormatUInt32$7249+0x60>
 8001732:	e7ff      	b.n	8001734 <Number_FormatUInt32$7249+0x58>
 8001734:	9807      	ldr	r0, [sp, #28]
            {
                case 'g':
                case 'G':
                    {
                        if(digits > 0) break;
 8001736:	2800      	cmp	r0, #0
 8001738:	dc0f      	bgt.n	800175a <Number_FormatUInt32$7249+0x7e>
 800173a:	e7f0      	b.n	800171e <Number_FormatUInt32$7249+0x42>
 800173c:	9802      	ldr	r0, [sp, #8]
 800173e:	b281      	uxth	r1, r0
                                           NumberFormatInfo info   )
        {
            // rusa: see also Lightning\Src\VM\COMNumber.cpp::FormatUInt32
            int digits;
            char fmt = ParseFormatSpecifier( format, out digits );
            switch(fmt)
 8001740:	2958      	cmp	r1, #88	; 0x58
 8001742:	d109      	bne.n	8001758 <Number_FormatUInt32$7249+0x7c>
 8001744:	e7ff      	b.n	8001746 <Number_FormatUInt32$7249+0x6a>
                        return UInt32ToDecString( value, digits );
                    }
                case 'x':
                case 'X':
                    {
                        return Int32ToHexString( value,
 8001746:	9803      	ldr	r0, [sp, #12]
 8001748:	b281      	uxth	r1, r0
 800174a:	3921      	subs	r1, #33	; 0x21
 800174c:	9a07      	ldr	r2, [sp, #28]
 800174e:	9806      	ldr	r0, [sp, #24]
 8001750:	f00b f81e 	bl	800c790 <Number_Int32ToHexString$7262>
 8001754:	9001      	str	r0, [sp, #4]
 8001756:	e023      	b.n	80017a0 <Number_FormatUInt32$7249+0xc4>
                                                (char)(fmt - ('X' - 'A' + 10)),
                                                digits );
                    }
                default:
                    {
                        break;
 8001758:	e7ff      	b.n	800175a <Number_FormatUInt32$7249+0x7e>
                    }
            }
            Number number = new Number( value );
 800175a:	4818      	ldr	r0, [pc, #96]	; (80017bc <Number_FormatUInt32$7249+0xe0>)
 800175c:	4918      	ldr	r1, [pc, #96]	; (80017c0 <Number_FormatUInt32$7249+0xe4>)
 800175e:	4479      	add	r1, pc
 8001760:	4408      	add	r0, r1
 8001762:	4a18      	ldr	r2, [pc, #96]	; (80017c4 <Number_FormatUInt32$7249+0xe8>)
 8001764:	4411      	add	r1, r2
 8001766:	f7ff f82b 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800176a:	4601      	mov	r1, r0
 800176c:	9a06      	ldr	r2, [sp, #24]
 800176e:	9100      	str	r1, [sp, #0]
 8001770:	4611      	mov	r1, r2
 8001772:	f009 fe81 	bl	800b478 <Number_.ctor$7234>
 8001776:	f64f 70ff 	movw	r0, #65535	; 0xffff
            if(fmt == 0)
 800177a:	9903      	ldr	r1, [sp, #12]
 800177c:	4201      	tst	r1, r0
 800177e:	d107      	bne.n	8001790 <Number_FormatUInt32$7249+0xb4>
 8001780:	e7ff      	b.n	8001782 <Number_FormatUInt32$7249+0xa6>
            {
                return number.ToStringFormat( format, info );
 8001782:	9800      	ldr	r0, [sp, #0]
 8001784:	9905      	ldr	r1, [sp, #20]
 8001786:	9a04      	ldr	r2, [sp, #16]
 8001788:	f00a f990 	bl	800baac <Number_ToStringFormat$7259>
 800178c:	9001      	str	r0, [sp, #4]
 800178e:	e007      	b.n	80017a0 <Number_FormatUInt32$7249+0xc4>
            }
            else
            {
                return number.ToString( fmt, digits, info );
 8001790:	9a07      	ldr	r2, [sp, #28]
 8001792:	9800      	ldr	r0, [sp, #0]
 8001794:	9903      	ldr	r1, [sp, #12]
 8001796:	9b04      	ldr	r3, [sp, #16]
 8001798:	f009 ffb6 	bl	800b708 <Number_ToString$7257>
 800179c:	9001      	str	r0, [sp, #4]
 800179e:	e7ff      	b.n	80017a0 <Number_FormatUInt32$7249+0xc4>
            }
        }
 80017a0:	9801      	ldr	r0, [sp, #4]
 80017a2:	b008      	add	sp, #32
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	9802      	ldr	r0, [sp, #8]
 80017a8:	b281      	uxth	r1, r0
                                           NumberFormatInfo info   )
        {
            // rusa: see also Lightning\Src\VM\COMNumber.cpp::FormatUInt32
            int digits;
            char fmt = ParseFormatSpecifier( format, out digits );
            switch(fmt)
 80017aa:	2967      	cmp	r1, #103	; 0x67
 80017ac:	d0c2      	beq.n	8001734 <Number_FormatUInt32$7249+0x58>
 80017ae:	e7ff      	b.n	80017b0 <Number_FormatUInt32$7249+0xd4>
 80017b0:	9802      	ldr	r0, [sp, #8]
 80017b2:	b281      	uxth	r1, r0
 80017b4:	2978      	cmp	r1, #120	; 0x78
 80017b6:	d0c6      	beq.n	8001746 <Number_FormatUInt32$7249+0x6a>
 80017b8:	e7ce      	b.n	8001758 <Number_FormatUInt32$7249+0x7c>
 80017ba:	46c0      	nop			; (mov r8, r8)
 80017bc:	ffffea38 	.word	0xffffea38
 80017c0:	18000072 	.word	0x18000072
 80017c4:	e8012e5c 	.word	0xe8012e5c

080017c8 <Int32_Equals$2024>:
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	460a      	mov	r2, r1
        {
            if(!(obj is Int16))
            {
                return false;
            }

 80017ce:	4b10      	ldr	r3, [pc, #64]	; (8001810 <Int32_Equals$2024+0x48>)
 80017d0:	f8df c040 	ldr.w	ip, [pc, #64]	; 8001814 <Int32_Equals$2024+0x4c>
 80017d4:	44fc      	add	ip, pc
 80017d6:	4463      	add	r3, ip
 80017d8:	9003      	str	r0, [sp, #12]
 80017da:	4608      	mov	r0, r1
 80017dc:	4619      	mov	r1, r3
 80017de:	9202      	str	r2, [sp, #8]
 80017e0:	f7ff fa3c 	bl	8000c5c <TypeSystemManager_CastToSealedTypeNoThrow$4951>
 80017e4:	2800      	cmp	r0, #0
 80017e6:	d103      	bne.n	80017f0 <Int32_Equals$2024+0x28>
 80017e8:	e7ff      	b.n	80017ea <Int32_Equals$2024+0x22>
 80017ea:	2000      	movs	r0, #0
            return Equals( (Int16)obj );
        }
 80017ec:	9001      	str	r0, [sp, #4]
 80017ee:	e00c      	b.n	800180a <Int32_Equals$2024+0x42>

        public bool Equals( Int16 obj )
        {
 80017f0:	4807      	ldr	r0, [pc, #28]	; (8001810 <Int32_Equals$2024+0x48>)
 80017f2:	4909      	ldr	r1, [pc, #36]	; (8001818 <Int32_Equals$2024+0x50>)
 80017f4:	4479      	add	r1, pc
 80017f6:	4401      	add	r1, r0
 80017f8:	9802      	ldr	r0, [sp, #8]
 80017fa:	f7ff fbdb 	bl	8000fb4 <TypeSystemManager_CastToSealedType$4950>
 80017fe:	6881      	ldr	r1, [r0, #8]
 8001800:	9803      	ldr	r0, [sp, #12]
 8001802:	f000 f80b 	bl	800181c <Int32_Equals$2026>
 8001806:	9001      	str	r0, [sp, #4]
 8001808:	e7ff      	b.n	800180a <Int32_Equals$2024+0x42>
 800180a:	9801      	ldr	r0, [sp, #4]
 800180c:	b004      	add	sp, #16
 800180e:	bd80      	pop	{r7, pc}
 8001810:	e801095c 	.word	0xe801095c
 8001814:	17fffffc 	.word	0x17fffffc
 8001818:	17ffffdc 	.word	0x17ffffdc

0800181c <Int32_Equals$2026>:
 800181c:	b082      	sub	sp, #8
 800181e:	460a      	mov	r2, r1
 8001820:	4603      	mov	r3, r0
 8001822:	6880      	ldr	r0, [r0, #8]
 8001824:	f04f 0c00 	mov.w	ip, #0
 8001828:	4288      	cmp	r0, r1
 800182a:	bf08      	it	eq
 800182c:	f04f 0c01 	moveq.w	ip, #1
 8001830:	4660      	mov	r0, ip
 8001832:	9201      	str	r2, [sp, #4]
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	b002      	add	sp, #8
 8001838:	4770      	bx	lr

0800183a <Int32_GetHashCode$2028>:
 800183a:	b081      	sub	sp, #4
 800183c:	4601      	mov	r1, r0
 800183e:	6880      	ldr	r0, [r0, #8]
 8001840:	9100      	str	r1, [sp, #0]
 8001842:	b001      	add	sp, #4
 8001844:	4770      	bx	lr
 8001846:	46c0      	nop			; (mov r8, r8)

08001848 <Int32_ToString$2030>:
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	4601      	mov	r1, r0
 800184e:	6880      	ldr	r0, [r0, #8]
            return m_value;
        }

        public override String ToString()
        {
            return Number.FormatInt32( m_value, /*null,*/ NumberFormatInfo.CurrentInfo );
 8001850:	9103      	str	r1, [sp, #12]
 8001852:	9002      	str	r0, [sp, #8]
 8001854:	f7ff fc4a 	bl	80010ec <NumberFormatInfo_get_CurrentInfo$9720>
 8001858:	4905      	ldr	r1, [pc, #20]	; (8001870 <Int32_ToString$2030+0x28>)
 800185a:	4a06      	ldr	r2, [pc, #24]	; (8001874 <Int32_ToString$2030+0x2c>)
 800185c:	447a      	add	r2, pc
 800185e:	5a89      	ldrh	r1, [r1, r2]
 8001860:	9a02      	ldr	r2, [sp, #8]
 8001862:	9001      	str	r0, [sp, #4]
 8001864:	4610      	mov	r0, r2
 8001866:	9a01      	ldr	r2, [sp, #4]
 8001868:	f7ff fc78 	bl	800115c <Number_FormatInt32$7246>
 800186c:	b004      	add	sp, #16
 800186e:	bd80      	pop	{r7, pc}
 8001870:	e8025200 	.word	0xe8025200
 8001874:	17ffff74 	.word	0x17ffff74

08001878 <Int32_ToString$2036>:
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	4601      	mov	r1, r0
 800187e:	6880      	ldr	r0, [r0, #8]
 8001880:	9103      	str	r1, [sp, #12]
 8001882:	9002      	str	r0, [sp, #8]
 8001884:	f7ff fc32 	bl	80010ec <NumberFormatInfo_get_CurrentInfo$9720>
 8001888:	4905      	ldr	r1, [pc, #20]	; (80018a0 <Int32_ToString$2036+0x28>)
 800188a:	4a06      	ldr	r2, [pc, #24]	; (80018a4 <Int32_ToString$2036+0x2c>)
 800188c:	447a      	add	r2, pc
 800188e:	5a89      	ldrh	r1, [r1, r2]
 8001890:	9a02      	ldr	r2, [sp, #8]
 8001892:	9001      	str	r0, [sp, #4]
 8001894:	4610      	mov	r0, r2
 8001896:	9a01      	ldr	r2, [sp, #4]
 8001898:	f7ff fc60 	bl	800115c <Number_FormatInt32$7246>
 800189c:	b004      	add	sp, #16
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	e8025202 	.word	0xe8025202
 80018a4:	17ffff44 	.word	0x17ffff44

080018a8 <Int32_ToString$2038>:
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	460a      	mov	r2, r1
 80018ae:	4603      	mov	r3, r0
 80018b0:	6880      	ldr	r0, [r0, #8]
 80018b2:	9105      	str	r1, [sp, #20]
 80018b4:	9304      	str	r3, [sp, #16]
 80018b6:	9203      	str	r2, [sp, #12]
 80018b8:	9002      	str	r0, [sp, #8]
 80018ba:	f7ff fc17 	bl	80010ec <NumberFormatInfo_get_CurrentInfo$9720>
        }
    
        public String ToString( String          format   ,
                                IFormatProvider provider )
        {
            return Number.FormatInt32( m_value, format, NumberFormatInfo.GetInstance( provider ) );
 80018be:	9902      	ldr	r1, [sp, #8]
 80018c0:	9001      	str	r0, [sp, #4]
 80018c2:	4608      	mov	r0, r1
 80018c4:	9905      	ldr	r1, [sp, #20]
 80018c6:	9a01      	ldr	r2, [sp, #4]
 80018c8:	f7ff fc8a 	bl	80011e0 <Number_FormatInt32$7247>
 80018cc:	b006      	add	sp, #24
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <MulticastDelegate_Equals$4630>:
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	460a      	mov	r2, r1
////    [ReliabilityContract( Consistency.WillNotCorruptState, Cer.Success )]
        internal unsafe bool IsNull()
        {
            return (this.m_value == null);
        }

 80018d6:	2900      	cmp	r1, #0
 80018d8:	9003      	str	r0, [sp, #12]
 80018da:	9202      	str	r2, [sp, #8]
 80018dc:	d008      	beq.n	80018f0 <MulticastDelegate_Equals$4630+0x20>
 80018de:	e7ff      	b.n	80018e0 <MulticastDelegate_Equals$4630+0x10>
        public unsafe void* ToPointer()
        {
            return m_value;
        }
    }
}
 80018e0:	9803      	ldr	r0, [sp, #12]
 80018e2:	9902      	ldr	r1, [sp, #8]
 80018e4:	f7ff fde6 	bl	80014b4 <VTable_SameType$3669>
////    [ReliabilityContract( Consistency.WillNotCorruptState, Cer.Success )]
        internal unsafe bool IsNull()
        {
            return (this.m_value == null);
        }

 80018e8:	f010 0fff 	tst.w	r0, #255	; 0xff
 80018ec:	d106      	bne.n	80018fc <MulticastDelegate_Equals$4630+0x2c>
 80018ee:	e7ff      	b.n	80018f0 <MulticastDelegate_Equals$4630+0x20>
 80018f0:	2000      	movs	r0, #0
////    [ReliabilityContract( Consistency.MayCorruptInstance, Cer.MayFail )]
        public unsafe IntPtr( int value )
 80018f2:	9001      	str	r0, [sp, #4]
 80018f4:	e7ff      	b.n	80018f6 <MulticastDelegate_Equals$4630+0x26>
 80018f6:	9801      	ldr	r0, [sp, #4]
 80018f8:	b004      	add	sp, #16
 80018fa:	bd80      	pop	{r7, pc}
        {
            m_value = (void *)value;
        }
 80018fc:	4812      	ldr	r0, [pc, #72]	; (8001948 <MulticastDelegate_Equals$4630+0x78>)
 80018fe:	4913      	ldr	r1, [pc, #76]	; (800194c <MulticastDelegate_Equals$4630+0x7c>)
 8001900:	4479      	add	r1, pc
 8001902:	4401      	add	r1, r0
 8001904:	9802      	ldr	r0, [sp, #8]
 8001906:	f7ff fe18 	bl	800153a <TypeSystemManager_CastToTypeNoThrow$4949>
 800190a:	4601      	mov	r1, r0

 800190c:	9100      	str	r1, [sp, #0]
 800190e:	f7ff fe4a 	bl	80015a6 <Delegate_op_Equality$4615>
 8001912:	f010 0fff 	tst.w	r0, #255	; 0xff
 8001916:	d003      	beq.n	8001920 <MulticastDelegate_Equals$4630+0x50>
 8001918:	e7ff      	b.n	800191a <MulticastDelegate_Equals$4630+0x4a>
 800191a:	2000      	movs	r0, #0
        public unsafe IntPtr( long value )
        {
 800191c:	9001      	str	r0, [sp, #4]
 800191e:	e7ea      	b.n	80018f6 <MulticastDelegate_Equals$4630+0x26>
                m_value = (void *)checked((int)value);
        }

 8001920:	9803      	ldr	r0, [sp, #12]
 8001922:	6900      	ldr	r0, [r0, #16]
 8001924:	9900      	ldr	r1, [sp, #0]
 8001926:	6909      	ldr	r1, [r1, #16]
 8001928:	f000 f87f 	bl	8001a2a <ArrayUtility_ArrayEquals$32233>
 800192c:	f010 0fff 	tst.w	r0, #255	; 0xff
 8001930:	d103      	bne.n	800193a <MulticastDelegate_Equals$4630+0x6a>
 8001932:	e7ff      	b.n	8001934 <MulticastDelegate_Equals$4630+0x64>
 8001934:	2000      	movs	r0, #0
        [CLSCompliant( false )]
////    [ReliabilityContract( Consistency.MayCorruptInstance, Cer.MayFail )]
 8001936:	9001      	str	r0, [sp, #4]
 8001938:	e7dd      	b.n	80018f6 <MulticastDelegate_Equals$4630+0x26>
        public unsafe IntPtr( void* value )
        {
            m_value = value;
        }
 800193a:	9803      	ldr	r0, [sp, #12]
 800193c:	9900      	ldr	r1, [sp, #0]
 800193e:	f7ff fd77 	bl	8001430 <Delegate_Equals$4613>
 8001942:	9001      	str	r0, [sp, #4]
 8001944:	e7d7      	b.n	80018f6 <MulticastDelegate_Equals$4630+0x26>
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	e80109ec 	.word	0xe80109ec
 800194c:	17fffed0 	.word	0x17fffed0

08001950 <MulticastDelegate_GetHashCode$4631>:
 8001950:	b510      	push	{r4, lr}
 8001952:	b08e      	sub	sp, #56	; 0x38
 8001954:	4601      	mov	r1, r0
            return base.Equals( d );
        }

        public override int GetHashCode()
        {
            DelegateImpl[] invocationList = m_invocationList;
 8001956:	6900      	ldr	r0, [r0, #16]
            if(invocationList == null)
 8001958:	2800      	cmp	r0, #0
 800195a:	910a      	str	r1, [sp, #40]	; 0x28
 800195c:	9009      	str	r0, [sp, #36]	; 0x24
 800195e:	d107      	bne.n	8001970 <MulticastDelegate_GetHashCode$4631+0x20>
 8001960:	e7ff      	b.n	8001962 <MulticastDelegate_GetHashCode$4631+0x12>
            {
                return base.GetHashCode();
 8001962:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001964:	f7ff fdda 	bl	800151c <Delegate_GetHashCode$4614>
 8001968:	900b      	str	r0, [sp, #44]	; 0x2c
 800196a:	a80b      	add	r0, sp, #44	; 0x2c
 800196c:	9008      	str	r0, [sp, #32]
 800196e:	e042      	b.n	80019f6 <MulticastDelegate_GetHashCode$4631+0xa6>
 8001970:	2000      	movs	r0, #0
 8001972:	4601      	mov	r1, r0
            }
            else
            {
                int hash = 0;

                foreach(DelegateImpl d in invocationList)
 8001974:	9107      	str	r1, [sp, #28]
 8001976:	9006      	str	r0, [sp, #24]
 8001978:	e7ff      	b.n	800197a <MulticastDelegate_GetHashCode$4631+0x2a>
 800197a:	9806      	ldr	r0, [sp, #24]
 800197c:	9907      	ldr	r1, [sp, #28]
 800197e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001980:	6893      	ldr	r3, [r2, #8]
            }
            else
            {
                int hash = 0;

                foreach(DelegateImpl d in invocationList)
 8001982:	4299      	cmp	r1, r3
 8001984:	4603      	mov	r3, r0
 8001986:	9005      	str	r0, [sp, #20]
 8001988:	9104      	str	r1, [sp, #16]
 800198a:	9303      	str	r3, [sp, #12]
 800198c:	da2e      	bge.n	80019ec <MulticastDelegate_GetHashCode$4631+0x9c>
 800198e:	e7ff      	b.n	8001990 <MulticastDelegate_GetHashCode$4631+0x40>
 8001990:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001992:	9904      	ldr	r1, [sp, #16]
 8001994:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8001998:	68d2      	ldr	r2, [r2, #12]
                {
                    hash = hash * 33 + d.GetHashCode();
 800199a:	9b05      	ldr	r3, [sp, #20]
 800199c:	eb03 1c43 	add.w	ip, r3, r3, lsl #5

        // This method will combine this delegate with the passed delegate to form a new delegate.
        protected override sealed DelegateImpl CombineImpl( DelegateImpl follow )
        {
            MulticastDelegateImpl dFollow = follow as MulticastDelegateImpl;
            if(dFollow == null)
 80019a0:	f102 0e08 	add.w	lr, r2, #8
 80019a4:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
 80019a8:	f04f 0e00 	mov.w	lr, #0
 80019ac:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
                        }

                        DelegateImpl[] res = ArrayUtility.RemoveAtPositionFromNotNullArray( invocationList, i );

                        return NewMulticastDelegate( res );
                    }
 80019b0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
            }
            else
            {
                res[0] = this;
            }

 80019b2:	f1a4 0108 	sub.w	r1, r4, #8
 80019b6:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 80019ba:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
 80019be:	f1ae 0008 	sub.w	r0, lr, #8
 80019c2:	f8cd c008 	str.w	ip, [sp, #8]
 80019c6:	9201      	str	r2, [sp, #4]
 80019c8:	f7fe ff78 	bl	80008bc <UIntPtr_.ctor$2864>

        // This method will combine this delegate with the passed delegate to form a new delegate.
        protected override sealed DelegateImpl CombineImpl( DelegateImpl follow )
        {
            MulticastDelegateImpl dFollow = follow as MulticastDelegateImpl;
            if(dFollow == null)
 80019cc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80019ce:	6840      	ldr	r0, [r0, #4]
            {
                int hash = 0;

                foreach(DelegateImpl d in invocationList)
                {
                    hash = hash * 33 + d.GetHashCode();
 80019d0:	69c0      	ldr	r0, [r0, #28]
 80019d2:	6940      	ldr	r0, [r0, #20]
 80019d4:	9901      	ldr	r1, [sp, #4]
 80019d6:	9000      	str	r0, [sp, #0]
 80019d8:	4608      	mov	r0, r1
 80019da:	9a00      	ldr	r2, [sp, #0]
 80019dc:	4790      	blx	r2
 80019de:	9902      	ldr	r1, [sp, #8]
 80019e0:	4408      	add	r0, r1
                }
 80019e2:	9904      	ldr	r1, [sp, #16]
 80019e4:	1c4a      	adds	r2, r1, #1
 80019e6:	9207      	str	r2, [sp, #28]
 80019e8:	9006      	str	r0, [sp, #24]
 80019ea:	e7c6      	b.n	800197a <MulticastDelegate_GetHashCode$4631+0x2a>
 80019ec:	9803      	ldr	r0, [sp, #12]
 80019ee:	a90b      	add	r1, sp, #44	; 0x2c
 80019f0:	900b      	str	r0, [sp, #44]	; 0x2c

                return hash;
 80019f2:	9108      	str	r1, [sp, #32]
 80019f4:	e7ff      	b.n	80019f6 <MulticastDelegate_GetHashCode$4631+0xa6>
 80019f6:	9808      	ldr	r0, [sp, #32]
 80019f8:	6800      	ldr	r0, [r0, #0]
 80019fa:	b00e      	add	sp, #56	; 0x38
 80019fc:	bd10      	pop	{r4, pc}

080019fe <MulticastDelegate_GetTarget$4635>:
 80019fe:	b082      	sub	sp, #8
 8001a00:	4601      	mov	r1, r0

        protected override Object GetTarget()
        {
            DelegateImpl dlg;

            if(m_invocationList == null)
 8001a02:	6900      	ldr	r0, [r0, #16]
 8001a04:	2800      	cmp	r0, #0
 8001a06:	9101      	str	r1, [sp, #4]
 8001a08:	d103      	bne.n	8001a12 <MulticastDelegate_GetTarget$4635+0x14>
 8001a0a:	e7ff      	b.n	8001a0c <MulticastDelegate_GetTarget$4635+0xe>
            {
                dlg = this;
 8001a0c:	9801      	ldr	r0, [sp, #4]
            }
 8001a0e:	9000      	str	r0, [sp, #0]
 8001a10:	e007      	b.n	8001a22 <MulticastDelegate_GetTarget$4635+0x24>
            else
            {
                DelegateImpl[] lst = m_invocationList;
 8001a12:	9801      	ldr	r0, [sp, #4]
 8001a14:	6901      	ldr	r1, [r0, #16]
 8001a16:	688a      	ldr	r2, [r1, #8]
            {
                dlg = this;
            }
            else
            {
                DelegateImpl[] lst = m_invocationList;
 8001a18:	eb01 0182 	add.w	r1, r1, r2, lsl #2

                dlg = lst[lst.Length - 1];
 8001a1c:	6889      	ldr	r1, [r1, #8]
            }
 8001a1e:	9100      	str	r1, [sp, #0]
 8001a20:	e7ff      	b.n	8001a22 <MulticastDelegate_GetTarget$4635+0x24>

            return dlg.m_target;
 8001a22:	9800      	ldr	r0, [sp, #0]
 8001a24:	6880      	ldr	r0, [r0, #8]
 8001a26:	b002      	add	sp, #8
 8001a28:	4770      	bx	lr

08001a2a <ArrayUtility_ArrayEquals$32233>:
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b088      	sub	sp, #32
 8001a2e:	4602      	mov	r2, r0
        }

        public static bool ArrayEquals<T>( T[] s ,
                                           T[] d )
        {
            int sLen = s != null ? s.Length : 0;
 8001a30:	2800      	cmp	r0, #0
 8001a32:	9207      	str	r2, [sp, #28]
 8001a34:	9106      	str	r1, [sp, #24]
 8001a36:	d004      	beq.n	8001a42 <ArrayUtility_ArrayEquals$32233+0x18>
 8001a38:	e7ff      	b.n	8001a3a <ArrayUtility_ArrayEquals$32233+0x10>
                return array;
            }

            int len = array.Length;
            T[] res = new T[len+len2];

 8001a3a:	9807      	ldr	r0, [sp, #28]
 8001a3c:	6881      	ldr	r1, [r0, #8]
            Array.Copy( array , 0       , res, 0              ,       position );
 8001a3e:	9105      	str	r1, [sp, #20]
 8001a40:	e002      	b.n	8001a48 <ArrayUtility_ArrayEquals$32233+0x1e>
 8001a42:	2000      	movs	r0, #0
        }

        public static bool ArrayEquals<T>( T[] s ,
                                           T[] d )
        {
            int sLen = s != null ? s.Length : 0;
 8001a44:	9005      	str	r0, [sp, #20]
 8001a46:	e7ff      	b.n	8001a48 <ArrayUtility_ArrayEquals$32233+0x1e>
 8001a48:	9805      	ldr	r0, [sp, #20]
            int dLen = d != null ? d.Length : 0;
 8001a4a:	9906      	ldr	r1, [sp, #24]
 8001a4c:	2900      	cmp	r1, #0
 8001a4e:	9004      	str	r0, [sp, #16]
 8001a50:	d004      	beq.n	8001a5c <ArrayUtility_ArrayEquals$32233+0x32>
 8001a52:	e7ff      	b.n	8001a54 <ArrayUtility_ArrayEquals$32233+0x2a>
                return array;
            }

            int len = array.Length;
            T[] res = new T[len+len2];

 8001a54:	9806      	ldr	r0, [sp, #24]
 8001a56:	6881      	ldr	r1, [r0, #8]
            Array.Copy( array , 0       , res, 0              ,       position );
 8001a58:	9103      	str	r1, [sp, #12]
 8001a5a:	e002      	b.n	8001a62 <ArrayUtility_ArrayEquals$32233+0x38>
 8001a5c:	2000      	movs	r0, #0

        public static bool ArrayEquals<T>( T[] s ,
                                           T[] d )
        {
            int sLen = s != null ? s.Length : 0;
            int dLen = d != null ? d.Length : 0;
 8001a5e:	9003      	str	r0, [sp, #12]
 8001a60:	e7ff      	b.n	8001a62 <ArrayUtility_ArrayEquals$32233+0x38>
 8001a62:	9803      	ldr	r0, [sp, #12]

            if(sLen == dLen)
 8001a64:	9904      	ldr	r1, [sp, #16]
 8001a66:	4281      	cmp	r1, r0
 8001a68:	d103      	bne.n	8001a72 <ArrayUtility_ArrayEquals$32233+0x48>
 8001a6a:	e7ff      	b.n	8001a6c <ArrayUtility_ArrayEquals$32233+0x42>
 8001a6c:	2000      	movs	r0, #0
            {
                for(int i = 0; i < sLen; i++)
 8001a6e:	9002      	str	r0, [sp, #8]
 8001a70:	e005      	b.n	8001a7e <ArrayUtility_ArrayEquals$32233+0x54>
 8001a72:	2000      	movs	r0, #0
                }

                return true;
            }

            return false;
 8001a74:	9001      	str	r0, [sp, #4]
 8001a76:	e7ff      	b.n	8001a78 <ArrayUtility_ArrayEquals$32233+0x4e>
 8001a78:	9801      	ldr	r0, [sp, #4]
 8001a7a:	b008      	add	sp, #32
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	9802      	ldr	r0, [sp, #8]
            int sLen = s != null ? s.Length : 0;
            int dLen = d != null ? d.Length : 0;

            if(sLen == dLen)
            {
                for(int i = 0; i < sLen; i++)
 8001a80:	9904      	ldr	r1, [sp, #16]
 8001a82:	4288      	cmp	r0, r1
 8001a84:	9000      	str	r0, [sp, #0]
 8001a86:	da0f      	bge.n	8001aa8 <ArrayUtility_ArrayEquals$32233+0x7e>
 8001a88:	e7ff      	b.n	8001a8a <ArrayUtility_ArrayEquals$32233+0x60>
                {
                    if(Object.Equals( s[i], d[i] ) == false)
 8001a8a:	9807      	ldr	r0, [sp, #28]
 8001a8c:	9900      	ldr	r1, [sp, #0]
 8001a8e:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8001a92:	68d0      	ldr	r0, [r2, #12]
 8001a94:	9a06      	ldr	r2, [sp, #24]
 8001a96:	eb02 0381 	add.w	r3, r2, r1, lsl #2
 8001a9a:	68d9      	ldr	r1, [r3, #12]
 8001a9c:	f000 f839 	bl	8001b12 <Object_Equals$2231>
 8001aa0:	f010 0fff 	tst.w	r0, #255	; 0xff
 8001aa4:	d003      	beq.n	8001aae <ArrayUtility_ArrayEquals$32233+0x84>
 8001aa6:	e005      	b.n	8001ab4 <ArrayUtility_ArrayEquals$32233+0x8a>
 8001aa8:	2001      	movs	r0, #1
                    {
                        return false;
                    }
                }

                return true;
 8001aaa:	9001      	str	r0, [sp, #4]
 8001aac:	e7e4      	b.n	8001a78 <ArrayUtility_ArrayEquals$32233+0x4e>
 8001aae:	2000      	movs	r0, #0
            {
                for(int i = 0; i < sLen; i++)
                {
                    if(Object.Equals( s[i], d[i] ) == false)
                    {
                        return false;
 8001ab0:	9001      	str	r0, [sp, #4]
 8001ab2:	e7e1      	b.n	8001a78 <ArrayUtility_ArrayEquals$32233+0x4e>
            int sLen = s != null ? s.Length : 0;
            int dLen = d != null ? d.Length : 0;

            if(sLen == dLen)
            {
                for(int i = 0; i < sLen; i++)
 8001ab4:	9800      	ldr	r0, [sp, #0]
 8001ab6:	1c41      	adds	r1, r0, #1
 8001ab8:	9102      	str	r1, [sp, #8]
 8001aba:	e7e0      	b.n	8001a7e <ArrayUtility_ArrayEquals$32233+0x54>

08001abc <MulticastDelegate_.ctor$4629>:
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	468c      	mov	ip, r1
 8001ac4:	4686      	mov	lr, r0
        //

        [MergeWithTargetImplementation]
        [TS.WellKnownMethod( "MulticastDelegateImpl_MulticastDelegateImpl" )]
        internal MulticastDelegateImpl( Object         target  ,
                                        TS.CodePointer codePtr ) : base( target, codePtr )
 8001ac6:	9303      	str	r3, [sp, #12]
 8001ac8:	f8cd c008 	str.w	ip, [sp, #8]
 8001acc:	f8cd e004 	str.w	lr, [sp, #4]
 8001ad0:	f7ff fda9 	bl	8001626 <Delegate_.ctor$4612>
 8001ad4:	b004      	add	sp, #16
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <Object_GetType$3817>:
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	4601      	mov	r1, r0

        [TS.GenerateUnsafeCast]
        public extern UIntPtr CastAsUIntPtr();


        [TS.WellKnownMethod( "Object_NullCheck" )]
 8001ade:	3008      	adds	r0, #8
 8001ae0:	9002      	str	r0, [sp, #8]
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	9003      	str	r0, [sp, #12]
 8001ae6:	9a02      	ldr	r2, [sp, #8]
 8001ae8:	3a08      	subs	r2, #8
 8001aea:	9003      	str	r0, [sp, #12]
 8001aec:	a803      	add	r0, sp, #12
 8001aee:	3808      	subs	r0, #8
 8001af0:	9101      	str	r1, [sp, #4]
 8001af2:	4611      	mov	r1, r2
 8001af4:	f7fe fee2 	bl	80008bc <UIntPtr_.ctor$2864>

        [TS.GenerateUnsafeCast]
        public extern UIntPtr CastAsUIntPtr();


        [TS.WellKnownMethod( "Object_NullCheck" )]
 8001af8:	9803      	ldr	r0, [sp, #12]
 8001afa:	6840      	ldr	r0, [r0, #4]
        public extern virtual void FinalizeImpl();

        [NoInline]
        public new Type GetType()
        {
            return TS.VTable.Get( this ).Type;
 8001afc:	6940      	ldr	r0, [r0, #20]
 8001afe:	b004      	add	sp, #16
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <RuntimeType_ToString$2303>:
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	4601      	mov	r1, r0
 8001b08:	9101      	str	r1, [sp, #4]
 8001b0a:	f000 f99d 	bl	8001e48 <RuntimeType_get_Name$3104>
 8001b0e:	b002      	add	sp, #8
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <Object_Equals$2231>:
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b088      	sub	sp, #32
 8001b16:	460a      	mov	r2, r1
 8001b18:	4603      	mov	r3, r0
        }

        //--//

        //
        // This is used to get the pointer to the data, which is not possible in C#.
 8001b1a:	468c      	mov	ip, r1
 8001b1c:	4288      	cmp	r0, r1
 8001b1e:	9305      	str	r3, [sp, #20]
 8001b20:	f8cd c010 	str.w	ip, [sp, #16]
 8001b24:	9203      	str	r2, [sp, #12]
 8001b26:	d103      	bne.n	8001b30 <Object_Equals$2231+0x1e>
 8001b28:	e7ff      	b.n	8001b2a <Object_Equals$2231+0x18>
 8001b2a:	2001      	movs	r0, #1
        //
        [TS.GenerateUnsafeCast]
 8001b2c:	9002      	str	r0, [sp, #8]
 8001b2e:	e00a      	b.n	8001b46 <Object_Equals$2231+0x34>
        public extern unsafe uint* Unpack();

        [TS.GenerateUnsafeCast]
 8001b30:	9805      	ldr	r0, [sp, #20]
 8001b32:	2800      	cmp	r0, #0
 8001b34:	d004      	beq.n	8001b40 <Object_Equals$2231+0x2e>
 8001b36:	e7ff      	b.n	8001b38 <Object_Equals$2231+0x26>
 8001b38:	9804      	ldr	r0, [sp, #16]
 8001b3a:	2800      	cmp	r0, #0
 8001b3c:	d106      	bne.n	8001b4c <Object_Equals$2231+0x3a>
 8001b3e:	e7ff      	b.n	8001b40 <Object_Equals$2231+0x2e>
 8001b40:	2000      	movs	r0, #0
        public extern static ObjectImpl CastAsObject( UIntPtr ptr );

 8001b42:	9002      	str	r0, [sp, #8]
 8001b44:	e7ff      	b.n	8001b46 <Object_Equals$2231+0x34>
 8001b46:	9802      	ldr	r0, [sp, #8]
 8001b48:	b008      	add	sp, #32
 8001b4a:	bd80      	pop	{r7, pc}

        [TS.GenerateUnsafeCast]
        public extern UIntPtr CastAsUIntPtr();


        [TS.WellKnownMethod( "Object_NullCheck" )]
 8001b4c:	9805      	ldr	r0, [sp, #20]
 8001b4e:	f100 0108 	add.w	r1, r0, #8
 8001b52:	9106      	str	r1, [sp, #24]
 8001b54:	2100      	movs	r1, #0
 8001b56:	9107      	str	r1, [sp, #28]
 8001b58:	9a06      	ldr	r2, [sp, #24]
 8001b5a:	3a08      	subs	r2, #8
 8001b5c:	9107      	str	r1, [sp, #28]
 8001b5e:	a907      	add	r1, sp, #28
 8001b60:	f1a1 0008 	sub.w	r0, r1, #8
 8001b64:	4611      	mov	r1, r2
 8001b66:	f7fe fea9 	bl	80008bc <UIntPtr_.ctor$2864>

        [TS.GenerateUnsafeCast]
        public extern UIntPtr CastAsUIntPtr();


        [TS.WellKnownMethod( "Object_NullCheck" )]
 8001b6a:	9807      	ldr	r0, [sp, #28]
 8001b6c:	6840      	ldr	r0, [r0, #4]
        [TS.GenerateUnsafeCast]
        public extern static ObjectImpl CastAsObject( UIntPtr ptr );


        [TS.GenerateUnsafeCast]
        public extern UIntPtr CastAsUIntPtr();
 8001b6e:	69c0      	ldr	r0, [r0, #28]
 8001b70:	6900      	ldr	r0, [r0, #16]
 8001b72:	9905      	ldr	r1, [sp, #20]
 8001b74:	9001      	str	r0, [sp, #4]
 8001b76:	4608      	mov	r0, r1
 8001b78:	9903      	ldr	r1, [sp, #12]
 8001b7a:	9a01      	ldr	r2, [sp, #4]
 8001b7c:	4790      	blx	r2
 8001b7e:	9002      	str	r0, [sp, #8]
 8001b80:	e7e1      	b.n	8001b46 <Object_Equals$2231+0x34>
 8001b82:	46c0      	nop			; (mov r8, r8)

08001b84 <SyncBlockTable_GetHashCode$4497>:
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b098      	sub	sp, #96	; 0x60
 8001b88:	4601      	mov	r1, r0
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	9211      	str	r2, [sp, #68]	; 0x44
 8001b8e:	9210      	str	r2, [sp, #64]	; 0x40
 8001b90:	920f      	str	r2, [sp, #60]	; 0x3c
            {
                int leftLen  = left  != null ? left .Length : 0;
                int rightLen = right != null ? right.Length : 0;

                if(leftLen == rightLen)
                {
 8001b92:	3008      	adds	r0, #8
 8001b94:	9012      	str	r0, [sp, #72]	; 0x48
 8001b96:	9213      	str	r2, [sp, #76]	; 0x4c
                {
                    return AddressMath.RangeSize( this.Start, this.End );
                }
            }
        }

 8001b98:	9812      	ldr	r0, [sp, #72]	; 0x48

            //
            // Helper Methods
            //

            public Range CloneSettings( UIntPtr start ,
 8001b9a:	3808      	subs	r0, #8
 8001b9c:	9213      	str	r2, [sp, #76]	; 0x4c
 8001b9e:	ab13      	add	r3, sp, #76	; 0x4c
 8001ba0:	3b08      	subs	r3, #8
 8001ba2:	900e      	str	r0, [sp, #56]	; 0x38
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001ba8:	910d      	str	r1, [sp, #52]	; 0x34
 8001baa:	4619      	mov	r1, r3
 8001bac:	920c      	str	r2, [sp, #48]	; 0x30
 8001bae:	f7fe fe85 	bl	80008bc <UIntPtr_.ctor$2864>
            {
                int leftLen  = left  != null ? left .Length : 0;
                int rightLen = right != null ? right.Length : 0;

                if(leftLen == rightLen)
                {
 8001bb2:	9813      	ldr	r0, [sp, #76]	; 0x4c
                {
                    ArrayImpl array = ArrayImpl.CastAsArray( m_data );

                    return new UIntPtr( array.GetDataPointer() );
                }
            }
 8001bb4:	6801      	ldr	r1, [r0, #0]
 8001bb6:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8001bba:	0a0a      	lsrs	r2, r1, #8

            //
            // State
            //

            public readonly UIntPtr          Start;
 8001bbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001bbe:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8001bc2:	900b      	str	r0, [sp, #44]	; 0x2c
 8001bc4:	920a      	str	r2, [sp, #40]	; 0x28
 8001bc6:	d005      	beq.n	8001bd4 <SyncBlockTable_GetHashCode$4497+0x50>
 8001bc8:	e7ff      	b.n	8001bca <SyncBlockTable_GetHashCode$4497+0x46>
 8001bca:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001bcc:	2801      	cmp	r0, #1
 8001bce:	f000 80d4 	beq.w	8001d7a <SyncBlockTable_GetHashCode$4497+0x1f6>
 8001bd2:	e05d      	b.n	8001c90 <SyncBlockTable_GetHashCode$4497+0x10c>
 8001bd4:	a80f      	add	r0, sp, #60	; 0x3c
            public readonly UIntPtr          End;
            public readonly string           SectionName;
            public readonly MemoryAttributes Attributes;
            public readonly MemoryUsage      Usage;
            public readonly Type             ExtensionHandler;

 8001bd6:	9009      	str	r0, [sp, #36]	; 0x24
 8001bd8:	f005 fc2e 	bl	8007438 <SyncBlockTable_get_Lock$4506>
 8001bdc:	4601      	mov	r1, r0
 8001bde:	900f      	str	r0, [sp, #60]	; 0x3c
 8001be0:	4869      	ldr	r0, [pc, #420]	; (8001d88 <SyncBlockTable_GetHashCode$4497+0x204>)
 8001be2:	4a6a      	ldr	r2, [pc, #424]	; (8001d8c <SyncBlockTable_GetHashCode$4497+0x208>)
 8001be4:	447a      	add	r2, pc
 8001be6:	4410      	add	r0, r2
 8001be8:	f8d0 00f8 	ldr.w	r0, [r0, #248]	; 0xf8
 8001bec:	9010      	str	r0, [sp, #64]	; 0x40
            //
            // State
            //

            public readonly UIntPtr          Start;
            public readonly UIntPtr          End;
 8001bee:	2800      	cmp	r0, #0
 8001bf0:	9108      	str	r1, [sp, #32]
 8001bf2:	d007      	beq.n	8001c04 <SyncBlockTable_GetHashCode$4497+0x80>
 8001bf4:	e7ff      	b.n	8001bf6 <SyncBlockTable_GetHashCode$4497+0x72>
 8001bf6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001bf8:	6841      	ldr	r1, [r0, #4]
 8001bfa:	6909      	ldr	r1, [r1, #16]
 8001bfc:	aa14      	add	r2, sp, #80	; 0x50
 8001bfe:	9114      	str	r1, [sp, #80]	; 0x50
 8001c00:	9207      	str	r2, [sp, #28]
 8001c02:	e004      	b.n	8001c0e <SyncBlockTable_GetHashCode$4497+0x8a>
 8001c04:	2002      	movs	r0, #2
 8001c06:	9014      	str	r0, [sp, #80]	; 0x50
 8001c08:	a814      	add	r0, sp, #80	; 0x50
            //
            // State
            //

            public readonly UIntPtr          Start;
            public readonly UIntPtr          End;
 8001c0a:	9007      	str	r0, [sp, #28]
 8001c0c:	e7ff      	b.n	8001c0e <SyncBlockTable_GetHashCode$4497+0x8a>
 8001c0e:	9807      	ldr	r0, [sp, #28]
 8001c10:	7801      	ldrb	r1, [r0, #0]
 8001c12:	7842      	ldrb	r2, [r0, #1]
 8001c14:	7883      	ldrb	r3, [r0, #2]
 8001c16:	78c0      	ldrb	r0, [r0, #3]
 8001c18:	ea43 2c00 	orr.w	ip, r3, r0, lsl #8
 8001c1c:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8001c20:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8001c24:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8001c28:	f80c 1f08 	strb.w	r1, [ip, #8]!
 8001c2c:	f88c 0003 	strb.w	r0, [ip, #3]
 8001c30:	f88c 3002 	strb.w	r3, [ip, #2]
 8001c34:	f88c 2001 	strb.w	r2, [ip, #1]
            public readonly string           SectionName;
            public readonly MemoryAttributes Attributes;
 8001c38:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 8001c3c:	9808      	ldr	r0, [sp, #32]
 8001c3e:	f005 fc19 	bl	8007474 <YieldLock_Acquire$4972>
                        }
                    }

                    return true;
                }

 8001c42:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8001c44:	7801      	ldrb	r1, [r0, #0]
                get
                {
                    return m_size;
                }
            }

 8001c46:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2904      	cmp	r1, #4
 8001c4e:	bf08      	it	eq
 8001c50:	2201      	moveq	r2, #1
            public readonly MemoryAttributes Attributes;
            public readonly MemoryUsage      Usage;
            public readonly Type             ExtensionHandler;

            //
            // Constructor Methods
 8001c52:	2a00      	cmp	r2, #0
 8001c54:	d109      	bne.n	8001c6a <SyncBlockTable_GetHashCode$4497+0xe6>
 8001c56:	e7ff      	b.n	8001c58 <SyncBlockTable_GetHashCode$4497+0xd4>
                {
                    ArrayImpl array = ArrayImpl.CastAsArray( m_data );

                    return new UIntPtr( array.GetDataPointer() );
                }
            }
 8001c58:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8001c5a:	6801      	ldr	r1, [r0, #0]
 8001c5c:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8001c60:	2200      	movs	r2, #0
            // Constructor Methods
            //

            public Range( UIntPtr          start            ,
                          UIntPtr          end              ,
                          string           sectionName      ,
 8001c62:	ebb2 2f11 	cmp.w	r2, r1, lsr #8
 8001c66:	d05a      	beq.n	8001d1e <SyncBlockTable_GetHashCode$4497+0x19a>
 8001c68:	e075      	b.n	8001d56 <SyncBlockTable_GetHashCode$4497+0x1d2>
 8001c6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001c6c:	6800      	ldr	r0, [r0, #0]
 8001c6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001c70:	6849      	ldr	r1, [r1, #4]
 8001c72:	f005 fc51 	bl	8007518 <YieldLock_Release$4973>
                          MemoryAttributes attributes       ,
                          MemoryUsage      usage            ,
                          Type             extensionHandler )
            {
 8001c76:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001c78:	6841      	ldr	r1, [r0, #4]
 8001c7a:	2900      	cmp	r1, #0
 8001c7c:	d007      	beq.n	8001c8e <SyncBlockTable_GetHashCode$4497+0x10a>
 8001c7e:	e7ff      	b.n	8001c80 <SyncBlockTable_GetHashCode$4497+0xfc>
 8001c80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001c82:	6841      	ldr	r1, [r0, #4]
 8001c84:	6882      	ldr	r2, [r0, #8]
 8001c86:	6909      	ldr	r1, [r1, #16]
 8001c88:	4291      	cmp	r1, r2
 8001c8a:	d141      	bne.n	8001d10 <SyncBlockTable_GetHashCode$4497+0x18c>
 8001c8c:	e7ff      	b.n	8001c8e <SyncBlockTable_GetHashCode$4497+0x10a>
                this.Start            = start;
                this.End              = end;
                this.SectionName      = sectionName;
                this.Attributes       = attributes;
                this.Usage            = usage;
 8001c8e:	e7ff      	b.n	8001c90 <SyncBlockTable_GetHashCode$4497+0x10c>
 8001c90:	980d      	ldr	r0, [sp, #52]	; 0x34
 8001c92:	2800      	cmp	r0, #0
 8001c94:	bf18      	it	ne
 8001c96:	2001      	movne	r0, #1
                this.ExtensionHandler = extensionHandler;
            }

 8001c98:	2800      	cmp	r0, #0
 8001c9a:	d107      	bne.n	8001cac <SyncBlockTable_GetHashCode$4497+0x128>
 8001c9c:	e7ff      	b.n	8001c9e <SyncBlockTable_GetHashCode$4497+0x11a>
 8001c9e:	483f      	ldr	r0, [pc, #252]	; (8001d9c <SyncBlockTable_GetHashCode$4497+0x218>)
 8001ca0:	493f      	ldr	r1, [pc, #252]	; (8001da0 <SyncBlockTable_GetHashCode$4497+0x21c>)
 8001ca2:	4479      	add	r1, pc
 8001ca4:	5840      	ldr	r0, [r0, r1]
            //
            // Equality Methods
 8001ca6:	f7fe fb2d 	bl	8000304 <BugCheck_Raise$4648>
            //
 8001caa:	e7ff      	b.n	8001cac <SyncBlockTable_GetHashCode$4497+0x128>
            {
                int leftLen  = left  != null ? left .Length : 0;
                int rightLen = right != null ? right.Length : 0;

                if(leftLen == rightLen)
                {
 8001cac:	980d      	ldr	r0, [sp, #52]	; 0x34
 8001cae:	f100 0108 	add.w	r1, r0, #8
 8001cb2:	9115      	str	r1, [sp, #84]	; 0x54
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	9116      	str	r1, [sp, #88]	; 0x58
                {
                    return AddressMath.RangeSize( this.Start, this.End );
                }
            }
        }

 8001cb8:	9a15      	ldr	r2, [sp, #84]	; 0x54

            //
            // Helper Methods
            //

            public Range CloneSettings( UIntPtr start ,
 8001cba:	3a08      	subs	r2, #8
 8001cbc:	9116      	str	r1, [sp, #88]	; 0x58
 8001cbe:	a916      	add	r1, sp, #88	; 0x58
 8001cc0:	f1a1 0008 	sub.w	r0, r1, #8
 8001cc4:	4611      	mov	r1, r2
 8001cc6:	f7fe fdf9 	bl	80008bc <UIntPtr_.ctor$2864>
            {
                int leftLen  = left  != null ? left .Length : 0;
                int rightLen = right != null ? right.Length : 0;

                if(leftLen == rightLen)
                {
 8001cca:	9816      	ldr	r0, [sp, #88]	; 0x58
                {
                    ArrayImpl array = ArrayImpl.CastAsArray( m_data );

                    return new UIntPtr( array.GetDataPointer() );
                }
            }
 8001ccc:	6801      	ldr	r1, [r0, #0]
 8001cce:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8001cd2:	2202      	movs	r2, #2
                            return false;
                        }
                    }

                    return true;
                }
 8001cd4:	ebb2 2f11 	cmp.w	r2, r1, lsr #8
 8001cd8:	9006      	str	r0, [sp, #24]
 8001cda:	d105      	bne.n	8001ce8 <SyncBlockTable_GetHashCode$4497+0x164>
 8001cdc:	e7ff      	b.n	8001cde <SyncBlockTable_GetHashCode$4497+0x15a>
 8001cde:	9806      	ldr	r0, [sp, #24]
 8001ce0:	6801      	ldr	r1, [r0, #0]
                {
                    return m_destination;
                }
            }
        }

 8001ce2:	0a89      	lsrs	r1, r1, #10
                    }

                    return true;
                }

                return false;
 8001ce4:	9105      	str	r1, [sp, #20]
 8001ce6:	e004      	b.n	8001cf2 <SyncBlockTable_GetHashCode$4497+0x16e>
            }

            //
 8001ce8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8001cea:	f005 fc4d 	bl	8007588 <SyncBlockTable_AssignSyncBlockSlow$4500>
 8001cee:	9005      	str	r0, [sp, #20]
 8001cf0:	e7ff      	b.n	8001cf2 <SyncBlockTable_GetHashCode$4497+0x16e>
 8001cf2:	9805      	ldr	r0, [sp, #20]

            //
            // Equality Methods
            //

            public bool Equals( Range other )
 8001cf4:	f005 fdca 	bl	800788c <SyncBlockTable_GetHashCode$4501>
            {
                if(this.Start      == other.Start      &&
 8001cf8:	9004      	str	r0, [sp, #16]
 8001cfa:	f005 fde1 	bl	80078c0 <GC_KeepAlive$3788>
 8001cfe:	a817      	add	r0, sp, #92	; 0x5c
 8001d00:	9904      	ldr	r1, [sp, #16]
 8001d02:	9117      	str	r1, [sp, #92]	; 0x5c
                   this.End        == other.End        &&
                   this.Attributes == other.Attributes  )
 8001d04:	9003      	str	r0, [sp, #12]
 8001d06:	e7ff      	b.n	8001d08 <SyncBlockTable_GetHashCode$4497+0x184>
 8001d08:	9803      	ldr	r0, [sp, #12]
 8001d0a:	6800      	ldr	r0, [r0, #0]
 8001d0c:	b018      	add	sp, #96	; 0x60
 8001d0e:	bd80      	pop	{r7, pc}
                          MemoryAttributes attributes       ,
                          MemoryUsage      usage            ,
                          Type             extensionHandler )
            {
                this.Start            = start;
                this.End              = end;
 8001d10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001d12:	6840      	ldr	r0, [r0, #4]
 8001d14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001d16:	6889      	ldr	r1, [r1, #8]
 8001d18:	f001 fdde 	bl	80038d8 <Thread_set_Priority$4028>
                this.SectionName      = sectionName;
 8001d1c:	e7b7      	b.n	8001c8e <SyncBlockTable_GetHashCode$4497+0x10a>
 8001d1e:	481c      	ldr	r0, [pc, #112]	; (8001d90 <SyncBlockTable_GetHashCode$4497+0x20c>)
 8001d20:	491c      	ldr	r1, [pc, #112]	; (8001d94 <SyncBlockTable_GetHashCode$4497+0x210>)
 8001d22:	4479      	add	r1, pc
 8001d24:	4408      	add	r0, r1
 8001d26:	6942      	ldr	r2, [r0, #20]

            public Range( UIntPtr          start            ,
                          UIntPtr          end              ,
                          string           sectionName      ,
                          MemoryAttributes attributes       ,
                          MemoryUsage      usage            ,
 8001d28:	1c53      	adds	r3, r2, #1
 8001d2a:	6143      	str	r3, [r0, #20]
 8001d2c:	481a      	ldr	r0, [pc, #104]	; (8001d98 <SyncBlockTable_GetHashCode$4497+0x214>)
 8001d2e:	5841      	ldr	r1, [r0, r1]
                          Type             extensionHandler )
            {
 8001d30:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8001d32:	9202      	str	r2, [sp, #8]
 8001d34:	f002 fdd2 	bl	80048dc <ObjectHeader_UpdateExtension$3131>
 8001d38:	a817      	add	r0, sp, #92	; 0x5c
 8001d3a:	9902      	ldr	r1, [sp, #8]
 8001d3c:	9117      	str	r1, [sp, #92]	; 0x5c
            // Constructor Methods
            //

            public Range( UIntPtr          start            ,
                          UIntPtr          end              ,
                          string           sectionName      ,
 8001d3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001d40:	6813      	ldr	r3, [r2, #0]
 8001d42:	6851      	ldr	r1, [r2, #4]
 8001d44:	9001      	str	r0, [sp, #4]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f005 fbe6 	bl	8007518 <YieldLock_Release$4973>
                          MemoryAttributes attributes       ,
                          MemoryUsage      usage            ,
                          Type             extensionHandler )
            {
 8001d4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001d4e:	6841      	ldr	r1, [r0, #4]
 8001d50:	2900      	cmp	r1, #0
 8001d52:	d101      	bne.n	8001d58 <SyncBlockTable_GetHashCode$4497+0x1d4>
 8001d54:	e007      	b.n	8001d66 <SyncBlockTable_GetHashCode$4497+0x1e2>
                this.Start            = start;
                this.End              = end;
                this.SectionName      = sectionName;
                this.Attributes       = attributes;
 8001d56:	e788      	b.n	8001c6a <SyncBlockTable_GetHashCode$4497+0xe6>
                          UIntPtr          end              ,
                          string           sectionName      ,
                          MemoryAttributes attributes       ,
                          MemoryUsage      usage            ,
                          Type             extensionHandler )
            {
 8001d58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001d5a:	6841      	ldr	r1, [r0, #4]
 8001d5c:	6882      	ldr	r2, [r0, #8]
 8001d5e:	6909      	ldr	r1, [r1, #16]
 8001d60:	4291      	cmp	r1, r2
 8001d62:	d103      	bne.n	8001d6c <SyncBlockTable_GetHashCode$4497+0x1e8>
 8001d64:	e7ff      	b.n	8001d66 <SyncBlockTable_GetHashCode$4497+0x1e2>
 8001d66:	9801      	ldr	r0, [sp, #4]
                this.Start            = start;
                this.End              = end;
                this.SectionName      = sectionName;
                this.Attributes       = attributes;
                this.Usage            = usage;
 8001d68:	9003      	str	r0, [sp, #12]
 8001d6a:	e7cd      	b.n	8001d08 <SyncBlockTable_GetHashCode$4497+0x184>
                          MemoryAttributes attributes       ,
                          MemoryUsage      usage            ,
                          Type             extensionHandler )
            {
                this.Start            = start;
                this.End              = end;
 8001d6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001d6e:	6840      	ldr	r0, [r0, #4]
 8001d70:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001d72:	6889      	ldr	r1, [r1, #8]
 8001d74:	f001 fdb0 	bl	80038d8 <Thread_set_Priority$4028>
                this.SectionName      = sectionName;
 8001d78:	e7f5      	b.n	8001d66 <SyncBlockTable_GetHashCode$4497+0x1e2>
 8001d7a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8001d7c:	6801      	ldr	r1, [r0, #0]
                {
                    return m_destination;
                }
            }
        }

 8001d7e:	0a89      	lsrs	r1, r1, #10
 8001d80:	aa17      	add	r2, sp, #92	; 0x5c
 8001d82:	9117      	str	r1, [sp, #92]	; 0x5c
            //

            public readonly UIntPtr          Start;
            public readonly UIntPtr          End;
            public readonly string           SectionName;
            public readonly MemoryAttributes Attributes;
 8001d84:	9203      	str	r2, [sp, #12]
 8001d86:	e7bf      	b.n	8001d08 <SyncBlockTable_GetHashCode$4497+0x184>
 8001d88:	fffffe3c 	.word	0xfffffe3c
 8001d8c:	17fffbec 	.word	0x17fffbec
 8001d90:	ffffeafc 	.word	0xffffeafc
 8001d94:	17fffaae 	.word	0x17fffaae
 8001d98:	e80252c4 	.word	0xe80252c4
 8001d9c:	e80252c0 	.word	0xe80252c0
 8001da0:	17fffb2e 	.word	0x17fffb2e

08001da4 <RuntimeType_get_TypeHandle$2290>:
 8001da4:	b081      	sub	sp, #4
 8001da6:	4601      	mov	r1, r0
 8001da8:	6880      	ldr	r0, [r0, #8]
 8001daa:	9100      	str	r1, [sp, #0]
 8001dac:	b001      	add	sp, #4
 8001dae:	4770      	bx	lr

08001db0 <RuntimeType_get_UnderlyingSystemType$2293>:
 8001db0:	b081      	sub	sp, #4
 8001db2:	4601      	mov	r1, r0
 8001db4:	9100      	str	r1, [sp, #0]
 8001db6:	b001      	add	sp, #4
 8001db8:	4770      	bx	lr

08001dba <RuntimeType_get_FullName$3105>:
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b082      	sub	sp, #8
 8001dbe:	4601      	mov	r1, r0
////
////        // This method is purely an aid for NGen to statically deduce which
////        // instantiations to save in the ngen image.
////        // Otherwise, the JIT-compiler gets used, which is bad for working-set.
////        // Note that IBC can provide this information too.
////        // However, this helps in keeping the JIT-compiler out even for
 8001dc0:	6880      	ldr	r0, [r0, #8]
 8001dc2:	6900      	ldr	r0, [r0, #16]
////        // test scenarios which do not use IBC.
////        // This can be removed after V2, when we implement other schemes
 8001dc4:	9101      	str	r1, [sp, #4]
 8001dc6:	f000 f803 	bl	8001dd0 <TypeRepresentation_get_FullName$14665>
 8001dca:	b002      	add	sp, #8
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	46c0      	nop			; (mov r8, r8)

08001dd0 <TypeRepresentation_get_FullName$14665>:
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b088      	sub	sp, #32
 8001dd4:	4601      	mov	r1, r0

        public string FullName
        {
            get
            {
                System.Text.StringBuilder sb = new System.Text.StringBuilder();
 8001dd6:	4a19      	ldr	r2, [pc, #100]	; (8001e3c <TypeRepresentation_get_FullName$14665+0x6c>)
 8001dd8:	4b19      	ldr	r3, [pc, #100]	; (8001e40 <TypeRepresentation_get_FullName$14665+0x70>)
 8001dda:	447b      	add	r3, pc
 8001ddc:	441a      	add	r2, r3
 8001dde:	f8df c064 	ldr.w	ip, [pc, #100]	; 8001e44 <TypeRepresentation_get_FullName$14665+0x74>
 8001de2:	4463      	add	r3, ip
 8001de4:	9005      	str	r0, [sp, #20]
 8001de6:	4610      	mov	r0, r2
 8001de8:	9104      	str	r1, [sp, #16]
 8001dea:	4619      	mov	r1, r3
 8001dec:	f7fe fce8 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8001df0:	9003      	str	r0, [sp, #12]
 8001df2:	f004 fb31 	bl	8006458 <StringBuilder_.ctor$8487>
            VOID        = 0x01,
            BOOLEAN     = 0x02,
            CHAR        = 0x03,
            I1          = 0x04,
            U1          = 0x05,
            I2          = 0x06,
 8001df6:	9805      	ldr	r0, [sp, #20]
 8001df8:	f100 0108 	add.w	r1, r0, #8
 8001dfc:	9106      	str	r1, [sp, #24]
 8001dfe:	2100      	movs	r1, #0
 8001e00:	9107      	str	r1, [sp, #28]
            private TypeRepresentation[]         m_parameters;
            private GenericParameterDefinition[] m_parametersDefinition;

            //
            // Constructor Methods
            //
 8001e02:	9a06      	ldr	r2, [sp, #24]
            CLASS       = 0x12,    // CLASS <class Token>
            VAR         = 0x13,    // a class type variable VAR <U1>
            ARRAY       = 0x14,    // MDARRAY <type> <rank> <bcount> <bound1> ... <lbcount> <lb1> ...
            GENERICINST = 0x15,    // instantiated type
            TYPEDBYREF  = 0x16,    // This is a simple type.
            I           = 0x18,    // native integer size
 8001e04:	3a08      	subs	r2, #8
 8001e06:	9107      	str	r1, [sp, #28]
 8001e08:	ab07      	add	r3, sp, #28
 8001e0a:	f1a3 0008 	sub.w	r0, r3, #8
 8001e0e:	9102      	str	r1, [sp, #8]
 8001e10:	4611      	mov	r1, r2
 8001e12:	f7fe fd53 	bl	80008bc <UIntPtr_.ctor$2864>
            VOID        = 0x01,
            BOOLEAN     = 0x02,
            CHAR        = 0x03,
            I1          = 0x04,
            U1          = 0x05,
            I2          = 0x06,
 8001e16:	9807      	ldr	r0, [sp, #28]

        public struct InterfaceMap
        {
            public static readonly InterfaceMap[] SharedEmptyArray = new InterfaceMap[0];

            //
 8001e18:	6840      	ldr	r0, [r0, #4]
        {
            get
            {
                System.Text.StringBuilder sb = new System.Text.StringBuilder();

                PrettyToString( sb, false, false );
 8001e1a:	69c0      	ldr	r0, [r0, #28]
 8001e1c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8001e1e:	9905      	ldr	r1, [sp, #20]
 8001e20:	9001      	str	r0, [sp, #4]
 8001e22:	4608      	mov	r0, r1
 8001e24:	9903      	ldr	r1, [sp, #12]
 8001e26:	9a02      	ldr	r2, [sp, #8]
 8001e28:	9b02      	ldr	r3, [sp, #8]
 8001e2a:	f8dd c004 	ldr.w	ip, [sp, #4]
 8001e2e:	47e0      	blx	ip

                return sb.ToString();
 8001e30:	9803      	ldr	r0, [sp, #12]
 8001e32:	f000 fd27 	bl	8002884 <StringBuilder_ToString$8499>
 8001e36:	b008      	add	sp, #32
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	46c0      	nop			; (mov r8, r8)
 8001e3c:	ffffea38 	.word	0xffffea38
 8001e40:	17fff9f6 	.word	0x17fff9f6
 8001e44:	e8010b3c 	.word	0xe8010b3c

08001e48 <RuntimeType_get_Name$3104>:
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	4601      	mov	r1, r0
////        internal enum CacheType
////        {
////            Method,
////            Constructor,
////            Field,
////            Property,
 8001e4e:	6880      	ldr	r0, [r0, #8]
 8001e50:	6900      	ldr	r0, [r0, #16]
////            Event,
////            Interface,
 8001e52:	9101      	str	r1, [sp, #4]
 8001e54:	f7ff ffbc 	bl	8001dd0 <TypeRepresentation_get_FullName$14665>
 8001e58:	b002      	add	sp, #8
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <String_EqualsHelper$2487>:
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b099      	sub	sp, #100	; 0x64
 8001e60:	460a      	mov	r2, r1
 8001e62:	4603      	mov	r3, r0
 8001e64:	68c0      	ldr	r0, [r0, #12]
 8001e66:	68c9      	ldr	r1, [r1, #12]
    
        private static Boolean TryParse(     String           s      ,
                                             NumberStyles     style  ,
                                             NumberFormatInfo info   ,
                                         out Single           result )
        {
 8001e68:	4288      	cmp	r0, r1
 8001e6a:	9018      	str	r0, [sp, #96]	; 0x60
 8001e6c:	9317      	str	r3, [sp, #92]	; 0x5c
 8001e6e:	9216      	str	r2, [sp, #88]	; 0x58
 8001e70:	d003      	beq.n	8001e7a <String_EqualsHelper$2487+0x1e>
 8001e72:	e7ff      	b.n	8001e74 <String_EqualsHelper$2487+0x18>
 8001e74:	2000      	movs	r0, #0
 8001e76:	9015      	str	r0, [sp, #84]	; 0x54
 8001e78:	e062      	b.n	8001f40 <String_EqualsHelper$2487+0xe4>
            if(s == null)
            {
 8001e7a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8001e7c:	f100 0108 	add.w	r1, r0, #8
 8001e80:	2800      	cmp	r0, #0
 8001e82:	460a      	mov	r2, r1
 8001e84:	9114      	str	r1, [sp, #80]	; 0x50
 8001e86:	9213      	str	r2, [sp, #76]	; 0x4c
 8001e88:	d005      	beq.n	8001e96 <String_EqualsHelper$2487+0x3a>
 8001e8a:	e7ff      	b.n	8001e8c <String_EqualsHelper$2487+0x30>
 8001e8c:	9814      	ldr	r0, [sp, #80]	; 0x50
 8001e8e:	f100 0108 	add.w	r1, r0, #8
 8001e92:	9113      	str	r1, [sp, #76]	; 0x4c
 8001e94:	e7ff      	b.n	8001e96 <String_EqualsHelper$2487+0x3a>
 8001e96:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8001e98:	9916      	ldr	r1, [sp, #88]	; 0x58
 8001e9a:	f101 0208 	add.w	r2, r1, #8
 8001e9e:	2900      	cmp	r1, #0
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	9012      	str	r0, [sp, #72]	; 0x48
 8001ea4:	9211      	str	r2, [sp, #68]	; 0x44
 8001ea6:	9310      	str	r3, [sp, #64]	; 0x40
 8001ea8:	d005      	beq.n	8001eb6 <String_EqualsHelper$2487+0x5a>
 8001eaa:	e7ff      	b.n	8001eac <String_EqualsHelper$2487+0x50>
 8001eac:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001eae:	f100 0108 	add.w	r1, r0, #8
 8001eb2:	9110      	str	r1, [sp, #64]	; 0x40
 8001eb4:	e7ff      	b.n	8001eb6 <String_EqualsHelper$2487+0x5a>
 8001eb6:	9810      	ldr	r0, [sp, #64]	; 0x40
                result = 0;
                return false;
 8001eb8:	9912      	ldr	r1, [sp, #72]	; 0x48
 8001eba:	9a18      	ldr	r2, [sp, #96]	; 0x60
            }
 8001ebc:	900f      	str	r0, [sp, #60]	; 0x3c
 8001ebe:	920e      	str	r2, [sp, #56]	; 0x38
 8001ec0:	910d      	str	r1, [sp, #52]	; 0x34
 8001ec2:	e7ff      	b.n	8001ec4 <String_EqualsHelper$2487+0x68>
 8001ec4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8001ec6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8001ec8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    
            bool success = Number.TryParseSingle( s, style, info, out result );
            if(!success)
            {
 8001eca:	2a08      	cmp	r2, #8
 8001ecc:	4603      	mov	r3, r0
 8001ece:	468c      	mov	ip, r1
 8001ed0:	4696      	mov	lr, r2
 8001ed2:	900c      	str	r0, [sp, #48]	; 0x30
 8001ed4:	910b      	str	r1, [sp, #44]	; 0x2c
 8001ed6:	920a      	str	r2, [sp, #40]	; 0x28
 8001ed8:	9309      	str	r3, [sp, #36]	; 0x24
 8001eda:	f8cd c020 	str.w	ip, [sp, #32]
 8001ede:	f8cd e01c 	str.w	lr, [sp, #28]
 8001ee2:	db0b      	blt.n	8001efc <String_EqualsHelper$2487+0xa0>
 8001ee4:	e7ff      	b.n	8001ee6 <String_EqualsHelper$2487+0x8a>
 8001ee6:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001ee8:	6801      	ldr	r1, [r0, #0]
 8001eea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001eec:	6813      	ldr	r3, [r2, #0]
                String sTrim = s.Trim();
    
 8001eee:	4299      	cmp	r1, r3
 8001ef0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001ef2:	9009      	str	r0, [sp, #36]	; 0x24
 8001ef4:	9208      	str	r2, [sp, #32]
 8001ef6:	9107      	str	r1, [sp, #28]
 8001ef8:	d032      	beq.n	8001f60 <String_EqualsHelper$2487+0x104>
 8001efa:	e7ff      	b.n	8001efc <String_EqualsHelper$2487+0xa0>
 8001efc:	9807      	ldr	r0, [sp, #28]
 8001efe:	9908      	ldr	r1, [sp, #32]
 8001f00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001f02:	9106      	str	r1, [sp, #24]
 8001f04:	9005      	str	r0, [sp, #20]
 8001f06:	9204      	str	r2, [sp, #16]
 8001f08:	e7ff      	b.n	8001f0a <String_EqualsHelper$2487+0xae>
 8001f0a:	9804      	ldr	r0, [sp, #16]
 8001f0c:	9906      	ldr	r1, [sp, #24]
 8001f0e:	9a05      	ldr	r2, [sp, #20]
                {
                    result = NegativeInfinity;
                }
                else if(sTrim.Equals( info.NaNSymbol ))
                {
                    result = NaN;
 8001f10:	2a01      	cmp	r2, #1
 8001f12:	4613      	mov	r3, r2
 8001f14:	9003      	str	r0, [sp, #12]
 8001f16:	9102      	str	r1, [sp, #8]
 8001f18:	9201      	str	r2, [sp, #4]
 8001f1a:	9300      	str	r3, [sp, #0]
 8001f1c:	db09      	blt.n	8001f32 <String_EqualsHelper$2487+0xd6>
 8001f1e:	e7ff      	b.n	8001f20 <String_EqualsHelper$2487+0xc4>
 8001f20:	9803      	ldr	r0, [sp, #12]
 8001f22:	6801      	ldr	r1, [r0, #0]
 8001f24:	9a02      	ldr	r2, [sp, #8]
 8001f26:	6813      	ldr	r3, [r2, #0]
                }
                else
 8001f28:	4299      	cmp	r1, r3
 8001f2a:	9901      	ldr	r1, [sp, #4]
 8001f2c:	9100      	str	r1, [sp, #0]
 8001f2e:	d00a      	beq.n	8001f46 <String_EqualsHelper$2487+0xea>
 8001f30:	e7ff      	b.n	8001f32 <String_EqualsHelper$2487+0xd6>
 8001f32:	9800      	ldr	r0, [sp, #0]
 8001f34:	2100      	movs	r1, #0
 8001f36:	2801      	cmp	r0, #1
 8001f38:	bfb8      	it	lt
 8001f3a:	2101      	movlt	r1, #1
                {
                    return false; // We really failed
                }
            }
    
 8001f3c:	9115      	str	r1, [sp, #84]	; 0x54
 8001f3e:	e7ff      	b.n	8001f40 <String_EqualsHelper$2487+0xe4>
 8001f40:	9815      	ldr	r0, [sp, #84]	; 0x54
 8001f42:	b019      	add	sp, #100	; 0x64
 8001f44:	bd80      	pop	{r7, pc}
                {
                    result = NaN;
                }
                else
                {
                    return false; // We really failed
 8001f46:	9803      	ldr	r0, [sp, #12]
 8001f48:	1d01      	adds	r1, r0, #4
 8001f4a:	9a02      	ldr	r2, [sp, #8]
 8001f4c:	1d13      	adds	r3, r2, #4
 8001f4e:	f8dd c004 	ldr.w	ip, [sp, #4]
 8001f52:	f1ac 0e02 	sub.w	lr, ip, #2
                }
 8001f56:	9306      	str	r3, [sp, #24]
 8001f58:	f8cd e014 	str.w	lr, [sp, #20]
 8001f5c:	9104      	str	r1, [sp, #16]
 8001f5e:	e7d4      	b.n	8001f0a <String_EqualsHelper$2487+0xae>
 8001f60:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001f62:	6841      	ldr	r1, [r0, #4]
 8001f64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001f66:	6853      	ldr	r3, [r2, #4]
            bool success = Number.TryParseSingle( s, style, info, out result );
            if(!success)
            {
                String sTrim = s.Trim();
    
                if(sTrim.Equals( info.PositiveInfinitySymbol ))
 8001f68:	4299      	cmp	r1, r3
 8001f6a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001f6c:	9009      	str	r0, [sp, #36]	; 0x24
 8001f6e:	9208      	str	r2, [sp, #32]
 8001f70:	9107      	str	r1, [sp, #28]
 8001f72:	d1c3      	bne.n	8001efc <String_EqualsHelper$2487+0xa0>
 8001f74:	e7ff      	b.n	8001f76 <String_EqualsHelper$2487+0x11a>
 8001f76:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001f78:	6881      	ldr	r1, [r0, #8]
 8001f7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001f7c:	6893      	ldr	r3, [r2, #8]
                {
 8001f7e:	4299      	cmp	r1, r3
 8001f80:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001f82:	9009      	str	r0, [sp, #36]	; 0x24
 8001f84:	9208      	str	r2, [sp, #32]
 8001f86:	9107      	str	r1, [sp, #28]
 8001f88:	d1b8      	bne.n	8001efc <String_EqualsHelper$2487+0xa0>
 8001f8a:	e7ff      	b.n	8001f8c <String_EqualsHelper$2487+0x130>
 8001f8c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001f8e:	68c1      	ldr	r1, [r0, #12]
 8001f90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001f92:	68d3      	ldr	r3, [r2, #12]
                    result = PositiveInfinity;
 8001f94:	4299      	cmp	r1, r3
 8001f96:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001f98:	9009      	str	r0, [sp, #36]	; 0x24
 8001f9a:	9208      	str	r2, [sp, #32]
 8001f9c:	9107      	str	r1, [sp, #28]
 8001f9e:	d1ad      	bne.n	8001efc <String_EqualsHelper$2487+0xa0>
 8001fa0:	e7ff      	b.n	8001fa2 <String_EqualsHelper$2487+0x146>
                }
 8001fa2:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001fa4:	f100 0110 	add.w	r1, r0, #16
 8001fa8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001faa:	f102 0310 	add.w	r3, r2, #16
 8001fae:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8001fb2:	f1ac 0e08 	sub.w	lr, ip, #8
                else if(sTrim.Equals( info.NegativeInfinitySymbol ))
 8001fb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8001fb8:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8001fbc:	910d      	str	r1, [sp, #52]	; 0x34
 8001fbe:	e781      	b.n	8001ec4 <String_EqualsHelper$2487+0x68>

08001fc0 <String_Equals$2489>:
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	460a      	mov	r2, r1

        // Determines whether two strings match.
////    [ReliabilityContract( Consistency.WillNotCorruptState, Cer.MayFail )]
        public override bool Equals( Object obj )
        {
            String str = obj as String;
 8001fc6:	4b10      	ldr	r3, [pc, #64]	; (8002008 <String_Equals$2489+0x48>)
 8001fc8:	f8df c040 	ldr.w	ip, [pc, #64]	; 800200c <String_Equals$2489+0x4c>
 8001fcc:	44fc      	add	ip, pc
 8001fce:	4463      	add	r3, ip
 8001fd0:	9003      	str	r0, [sp, #12]
 8001fd2:	4608      	mov	r0, r1
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	9202      	str	r2, [sp, #8]
 8001fd8:	f7fe fe40 	bl	8000c5c <TypeSystemManager_CastToSealedTypeNoThrow$4951>
            if(str == null)
 8001fdc:	4601      	mov	r1, r0
 8001fde:	2800      	cmp	r0, #0
 8001fe0:	9101      	str	r1, [sp, #4]
 8001fe2:	d104      	bne.n	8001fee <String_Equals$2489+0x2e>
 8001fe4:	e7ff      	b.n	8001fe6 <String_Equals$2489+0x26>
            {
                // exception will be thrown later for null this
                if(this != null) return false;
 8001fe6:	9803      	ldr	r0, [sp, #12]
 8001fe8:	2800      	cmp	r0, #0
 8001fea:	d109      	bne.n	8002000 <String_Equals$2489+0x40>
 8001fec:	e00b      	b.n	8002006 <String_Equals$2489+0x46>
            }

            return EqualsHelper( this, str );
 8001fee:	9803      	ldr	r0, [sp, #12]
 8001ff0:	9901      	ldr	r1, [sp, #4]
 8001ff2:	f7ff ff33 	bl	8001e5c <String_EqualsHelper$2487>
 8001ff6:	9000      	str	r0, [sp, #0]
 8001ff8:	e7ff      	b.n	8001ffa <String_Equals$2489+0x3a>
 8001ffa:	9800      	ldr	r0, [sp, #0]
 8001ffc:	b004      	add	sp, #16
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	2000      	movs	r0, #0
        {
            String str = obj as String;
            if(str == null)
            {
                // exception will be thrown later for null this
                if(this != null) return false;
 8002002:	9000      	str	r0, [sp, #0]
 8002004:	e7f9      	b.n	8001ffa <String_Equals$2489+0x3a>
            }
 8002006:	e7f2      	b.n	8001fee <String_Equals$2489+0x2e>
 8002008:	e801023c 	.word	0xe801023c
 800200c:	17fff804 	.word	0x17fff804

08002010 <String_Equals$2490>:
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	460a      	mov	r2, r1

        // Determines whether two strings match.
////    [ReliabilityContract( Consistency.WillNotCorruptState, Cer.MayFail )]
        public bool Equals( String value )
        {
            if(value == null)
 8002016:	460b      	mov	r3, r1
 8002018:	2900      	cmp	r1, #0
 800201a:	9303      	str	r3, [sp, #12]
 800201c:	9202      	str	r2, [sp, #8]
 800201e:	9001      	str	r0, [sp, #4]
 8002020:	d104      	bne.n	800202c <String_Equals$2490+0x1c>
 8002022:	e7ff      	b.n	8002024 <String_Equals$2490+0x14>
            {
                // exception will be thrown later for null this
                if(this != null) return false;
 8002024:	9801      	ldr	r0, [sp, #4]
 8002026:	2800      	cmp	r0, #0
 8002028:	d109      	bne.n	800203e <String_Equals$2490+0x2e>
 800202a:	e00b      	b.n	8002044 <String_Equals$2490+0x34>
            }

            return EqualsHelper( this, value );
 800202c:	9801      	ldr	r0, [sp, #4]
 800202e:	9903      	ldr	r1, [sp, #12]
 8002030:	f7ff ff14 	bl	8001e5c <String_EqualsHelper$2487>
 8002034:	9000      	str	r0, [sp, #0]
 8002036:	e7ff      	b.n	8002038 <String_Equals$2490+0x28>
 8002038:	9800      	ldr	r0, [sp, #0]
 800203a:	b004      	add	sp, #16
 800203c:	bd80      	pop	{r7, pc}
 800203e:	2000      	movs	r0, #0
        public bool Equals( String value )
        {
            if(value == null)
            {
                // exception will be thrown later for null this
                if(this != null) return false;
 8002040:	9000      	str	r0, [sp, #0]
 8002042:	e7f9      	b.n	8002038 <String_Equals$2490+0x28>
            }
 8002044:	e7f2      	b.n	800202c <String_Equals$2490+0x1c>

08002046 <String_Equals$2492>:
 8002046:	b580      	push	{r7, lr}
 8002048:	b086      	sub	sp, #24
 800204a:	460a      	mov	r2, r1
 800204c:	4603      	mov	r3, r0


        // Determines whether two Strings match.
        public static bool Equals( String a, String b )
        {
            if((Object)a == (Object)b)
 800204e:	468c      	mov	ip, r1
 8002050:	468e      	mov	lr, r1
 8002052:	4288      	cmp	r0, r1
 8002054:	f8cd c014 	str.w	ip, [sp, #20]
 8002058:	f8cd e010 	str.w	lr, [sp, #16]
 800205c:	9203      	str	r2, [sp, #12]
 800205e:	9302      	str	r3, [sp, #8]
 8002060:	d103      	bne.n	800206a <String_Equals$2492+0x24>
 8002062:	e7ff      	b.n	8002064 <String_Equals$2492+0x1e>
 8002064:	2001      	movs	r0, #1
            {
                return true;
 8002066:	9001      	str	r0, [sp, #4]
 8002068:	e00a      	b.n	8002080 <String_Equals$2492+0x3a>
            }

            if((Object)a == null || (Object)b == null)
 800206a:	9802      	ldr	r0, [sp, #8]
 800206c:	2800      	cmp	r0, #0
 800206e:	d004      	beq.n	800207a <String_Equals$2492+0x34>
 8002070:	e7ff      	b.n	8002072 <String_Equals$2492+0x2c>
 8002072:	9805      	ldr	r0, [sp, #20]
 8002074:	2800      	cmp	r0, #0
 8002076:	d106      	bne.n	8002086 <String_Equals$2492+0x40>
 8002078:	e7ff      	b.n	800207a <String_Equals$2492+0x34>
 800207a:	2000      	movs	r0, #0
            {
                return false;
 800207c:	9001      	str	r0, [sp, #4]
 800207e:	e7ff      	b.n	8002080 <String_Equals$2492+0x3a>
 8002080:	9801      	ldr	r0, [sp, #4]
 8002082:	b006      	add	sp, #24
 8002084:	bd80      	pop	{r7, pc}
            }

            return EqualsHelper( a, b );
 8002086:	9802      	ldr	r0, [sp, #8]
 8002088:	9904      	ldr	r1, [sp, #16]
 800208a:	f7ff fee7 	bl	8001e5c <String_EqualsHelper$2487>
 800208e:	9001      	str	r0, [sp, #4]
 8002090:	e7f6      	b.n	8002080 <String_Equals$2492+0x3a>

08002092 <String_op_Equality$2494>:
 8002092:	b580      	push	{r7, lr}
 8002094:	b082      	sub	sp, #8
 8002096:	460a      	mov	r2, r1
 8002098:	4603      	mov	r3, r0
            return 0 == string.Compare( a, b, comparisonType );
        }

        public static bool operator ==( String a, String b )
        {
            return String.Equals( a, b );
 800209a:	9201      	str	r2, [sp, #4]
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	f7ff ffd2 	bl	8002046 <String_Equals$2492>
 80020a2:	b002      	add	sp, #8
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	46c0      	nop			; (mov r8, r8)

080020a8 <String_ToCharArray$2499>:
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b08c      	sub	sp, #48	; 0x30
 80020ac:	460a      	mov	r2, r1
 80020ae:	2301      	movs	r3, #1
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	900b      	str	r0, [sp, #44]	; 0x2c
 80020b4:	920a      	str	r2, [sp, #40]	; 0x28
 80020b6:	9109      	str	r1, [sp, #36]	; 0x24
 80020b8:	d112      	bne.n	80020e0 <String_ToCharArray$2499+0x38>
 80020ba:	e7ff      	b.n	80020bc <String_ToCharArray$2499+0x14>
 80020bc:	e7ff      	b.n	80020be <String_ToCharArray$2499+0x16>
 80020be:	4832      	ldr	r0, [pc, #200]	; (8002188 <String_ToCharArray$2499+0xe0>)
 80020c0:	4936      	ldr	r1, [pc, #216]	; (800219c <String_ToCharArray$2499+0xf4>)
 80020c2:	4479      	add	r1, pc
 80020c4:	4408      	add	r0, r1
 80020c6:	4a34      	ldr	r2, [pc, #208]	; (8002198 <String_ToCharArray$2499+0xf0>)
 80020c8:	4411      	add	r1, r2
 80020ca:	9008      	str	r0, [sp, #32]
 80020cc:	f7fe fb78 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 80020d0:	9007      	str	r0, [sp, #28]
 80020d2:	f000 f9bc 	bl	800244e <ArgumentOutOfRangeException_.ctor$6074>
 80020d6:	9808      	ldr	r0, [sp, #32]
 80020d8:	9907      	ldr	r1, [sp, #28]
 80020da:	f7fe fbc7 	bl	800086c <TypeSystemManager_Throw$4954>
 80020de:	e7ee      	b.n	80020be <String_ToCharArray$2499+0x16>
 80020e0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80020e2:	68c1      	ldr	r1, [r0, #12]
 80020e4:	2900      	cmp	r1, #0
 80020e6:	dbe9      	blt.n	80020bc <String_ToCharArray$2499+0x14>
 80020e8:	e7ff      	b.n	80020ea <String_ToCharArray$2499+0x42>
 80020ea:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80020ec:	68c1      	ldr	r1, [r0, #12]
 80020ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80020f0:	1a89      	subs	r1, r1, r2
 80020f2:	2900      	cmp	r1, #0
 80020f4:	dbe2      	blt.n	80020bc <String_ToCharArray$2499+0x14>
 80020f6:	e7ff      	b.n	80020f8 <String_ToCharArray$2499+0x50>
 80020f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80020fa:	f1b0 3fff 	cmp.w	r0, #4294967295
 80020fe:	dc12      	bgt.n	8002126 <String_ToCharArray$2499+0x7e>
 8002100:	e7ff      	b.n	8002102 <String_ToCharArray$2499+0x5a>
 8002102:	e7ff      	b.n	8002104 <String_ToCharArray$2499+0x5c>
 8002104:	4820      	ldr	r0, [pc, #128]	; (8002188 <String_ToCharArray$2499+0xe0>)
 8002106:	4923      	ldr	r1, [pc, #140]	; (8002194 <String_ToCharArray$2499+0xec>)
 8002108:	4479      	add	r1, pc
 800210a:	4408      	add	r0, r1
 800210c:	4a22      	ldr	r2, [pc, #136]	; (8002198 <String_ToCharArray$2499+0xf0>)
 800210e:	4411      	add	r1, r2
 8002110:	9006      	str	r0, [sp, #24]
 8002112:	f7fe fb55 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8002116:	9005      	str	r0, [sp, #20]
 8002118:	f000 f999 	bl	800244e <ArgumentOutOfRangeException_.ctor$6074>
 800211c:	9806      	ldr	r0, [sp, #24]
 800211e:	9905      	ldr	r1, [sp, #20]
 8002120:	f7fe fba4 	bl	800086c <TypeSystemManager_Throw$4954>
 8002124:	e7ee      	b.n	8002104 <String_ToCharArray$2499+0x5c>
 8002126:	4818      	ldr	r0, [pc, #96]	; (8002188 <String_ToCharArray$2499+0xe0>)
 8002128:	4918      	ldr	r1, [pc, #96]	; (800218c <String_ToCharArray$2499+0xe4>)
 800212a:	4479      	add	r1, pc
 800212c:	4408      	add	r0, r1
 800212e:	4a18      	ldr	r2, [pc, #96]	; (8002190 <String_ToCharArray$2499+0xe8>)
 8002130:	4411      	add	r1, r2
 8002132:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002134:	f000 f834 	bl	80021a0 <DefaultTypeSystemManager_AllocateArray$4962>
 8002138:	9909      	ldr	r1, [sp, #36]	; 0x24
 800213a:	2901      	cmp	r1, #1
 800213c:	4602      	mov	r2, r0
 800213e:	9004      	str	r0, [sp, #16]
 8002140:	9203      	str	r2, [sp, #12]
 8002142:	db08      	blt.n	8002156 <String_ToCharArray$2499+0xae>
 8002144:	e7ff      	b.n	8002146 <String_ToCharArray$2499+0x9e>
 8002146:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8002148:	f100 0110 	add.w	r1, r0, #16
 800214c:	9a04      	ldr	r2, [sp, #16]
 800214e:	2a00      	cmp	r2, #0
 8002150:	9102      	str	r1, [sp, #8]
 8002152:	d103      	bne.n	800215c <String_ToCharArray$2499+0xb4>
 8002154:	e007      	b.n	8002166 <String_ToCharArray$2499+0xbe>
 8002156:	9803      	ldr	r0, [sp, #12]
 8002158:	b00c      	add	sp, #48	; 0x30
 800215a:	bd80      	pop	{r7, pc}
                    fixed(char* ptr = (string)(object)this)
                    {
                        return ptr[index];
                    }
                }

 800215c:	9804      	ldr	r0, [sp, #16]
 800215e:	6881      	ldr	r1, [r0, #8]
 8002160:	2900      	cmp	r1, #0
 8002162:	d10b      	bne.n	800217c <String_ToCharArray$2499+0xd4>
 8002164:	e7ff      	b.n	8002166 <String_ToCharArray$2499+0xbe>
 8002166:	2000      	movs	r0, #0
 8002168:	9001      	str	r0, [sp, #4]
 800216a:	e7ff      	b.n	800216c <String_ToCharArray$2499+0xc4>
 800216c:	9801      	ldr	r0, [sp, #4]
 800216e:	9902      	ldr	r1, [sp, #8]
 8002170:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002172:	f000 f867 	bl	8002244 <String_wstrcpy$2533>
 8002176:	9804      	ldr	r0, [sp, #16]
 8002178:	9003      	str	r0, [sp, #12]
 800217a:	e7ec      	b.n	8002156 <String_ToCharArray$2499+0xae>
 800217c:	9804      	ldr	r0, [sp, #16]
 800217e:	f100 010c 	add.w	r1, r0, #12
 8002182:	9101      	str	r1, [sp, #4]
 8002184:	e7f2      	b.n	800216c <String_ToCharArray$2499+0xc4>
 8002186:	46c0      	nop			; (mov r8, r8)
 8002188:	ffffea38 	.word	0xffffea38
 800218c:	17fff6a6 	.word	0x17fff6a6
 8002190:	e801031c 	.word	0xe801031c
 8002194:	17fff6c8 	.word	0x17fff6c8
 8002198:	e8010a7c 	.word	0xe8010a7c
 800219c:	17fff70e 	.word	0x17fff70e

080021a0 <DefaultTypeSystemManager_AllocateArray$4962>:
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08c      	sub	sp, #48	; 0x30
 80021a4:	4610      	mov	r0, r2
 80021a6:	460b      	mov	r3, r1
 80021a8:	f8d1 c008 	ldr.w	ip, [r1, #8]
 80021ac:	68c9      	ldr	r1, [r1, #12]

        [NoInline]
        public override Array AllocateArray( TS.VTable vTable ,
                                             uint      length )
        {
            uint    size = ComputeArraySize( vTable, length );
 80021ae:	9004      	str	r0, [sp, #16]
 80021b0:	4660      	mov	r0, ip
 80021b2:	9303      	str	r3, [sp, #12]
 80021b4:	f007 f8b8 	bl	8009328 <DefaultTypeSystemManager_ComputeArraySize$4966>
 80021b8:	4601      	mov	r1, r0
            UIntPtr ptr  = AllocateInner   ( vTable, size   );
 80021ba:	9102      	str	r1, [sp, #8]
 80021bc:	f007 f86e 	bl	800929c <DefaultTypeSystemManager_AllocateInner$4967>
 80021c0:	9005      	str	r0, [sp, #20]

            if(MemoryManager.Configuration.TrashFreeMemory)
 80021c2:	e7ff      	b.n	80021c4 <DefaultTypeSystemManager_AllocateArray$4962+0x24>
 80021c4:	a805      	add	r0, sp, #20
 80021c6:	9905      	ldr	r1, [sp, #20]
 80021c8:	9108      	str	r1, [sp, #32]
 80021ca:	2100      	movs	r1, #0
 80021cc:	9109      	str	r1, [sp, #36]	; 0x24
 80021ce:	9a08      	ldr	r2, [sp, #32]
            //
            // Align to word boundary.
            //
            size = (size + (sizeof(uint)-1)) & ~(uint)(sizeof(uint)-1);

            return size;
 80021d0:	9b02      	ldr	r3, [sp, #8]
 80021d2:	441a      	add	r2, r3
 80021d4:	9109      	str	r1, [sp, #36]	; 0x24
 80021d6:	a909      	add	r1, sp, #36	; 0x24
 80021d8:	3908      	subs	r1, #8
 80021da:	9001      	str	r0, [sp, #4]
 80021dc:	4608      	mov	r0, r1
 80021de:	4611      	mov	r1, r2
 80021e0:	f7fe fb6c 	bl	80008bc <UIntPtr_.ctor$2864>
 80021e4:	9805      	ldr	r0, [sp, #20]
 80021e6:	900a      	str	r0, [sp, #40]	; 0x28
 80021e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80021ea:	900b      	str	r0, [sp, #44]	; 0x2c
 80021ec:	990a      	ldr	r1, [sp, #40]	; 0x28
 80021ee:	1a40      	subs	r0, r0, r1
 80021f0:	9000      	str	r0, [sp, #0]
 80021f2:	4608      	mov	r0, r1
 80021f4:	9900      	ldr	r1, [sp, #0]
 80021f6:	f01d fe2a 	bl	801fe4e <__aeabi_memclr>
            UIntPtr ptr  = AllocateInner   ( vTable, size   );

            if(MemoryManager.Configuration.TrashFreeMemory)
            {
                Memory.Zero( ptr, AddressMath.Increment( ptr, size ) ); 
            }
 80021fa:	e7ff      	b.n	80021fc <DefaultTypeSystemManager_AllocateArray$4962+0x5c>
        {
            uint    size = ComputeArraySize( vTable, length );
            UIntPtr ptr  = AllocateInner   ( vTable, size   );

            return InitializeArray( ptr, vTable, length );
        }
 80021fc:	9805      	ldr	r0, [sp, #20]
 80021fe:	9903      	ldr	r1, [sp, #12]
 8002200:	6041      	str	r1, [r0, #4]
 8002202:	2208      	movs	r2, #8
 8002204:	6002      	str	r2, [r0, #0]
 8002206:	9801      	ldr	r0, [sp, #4]
 8002208:	7802      	ldrb	r2, [r0, #0]
 800220a:	7843      	ldrb	r3, [r0, #1]
 800220c:	f890 c002 	ldrb.w	ip, [r0, #2]
 8002210:	f890 e003 	ldrb.w	lr, [r0, #3]
 8002214:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
 8002218:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800221c:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8002220:	9206      	str	r2, [sp, #24]
 8002222:	2200      	movs	r2, #0
 8002224:	9207      	str	r2, [sp, #28]
 8002226:	9b06      	ldr	r3, [sp, #24]
            //
            // Align to word boundary.
            //
            size = (size + (sizeof(uint)-1)) & ~(uint)(sizeof(uint)-1);

            return size;
 8002228:	f103 0108 	add.w	r1, r3, #8
 800222c:	9207      	str	r2, [sp, #28]
 800222e:	aa07      	add	r2, sp, #28
 8002230:	f1a2 0008 	sub.w	r0, r2, #8
 8002234:	f7fe fb42 	bl	80008bc <UIntPtr_.ctor$2864>
            size += vTable.BaseSize;

            //
            // Align to word boundary.
            //
            size = (size + (sizeof(uint)-1)) & ~(uint)(sizeof(uint)-1);
 8002238:	9807      	ldr	r0, [sp, #28]
 800223a:	9904      	ldr	r1, [sp, #16]
 800223c:	f840 1908 	str.w	r1, [r0], #-8
 8002240:	b00c      	add	sp, #48	; 0x30
 8002242:	bd80      	pop	{r7, pc}

08002244 <String_wstrcpy$2533>:
 8002244:	b580      	push	{r7, lr}
 8002246:	b0ad      	sub	sp, #180	; 0xb4
 8002248:	4613      	mov	r3, r2
 800224a:	4694      	mov	ip, r2
            }
        }

        private static unsafe void wstrcpy( char* dmem, char* smem, int charCount )
        {
            if(charCount > 0)
 800224c:	2a01      	cmp	r2, #1
 800224e:	f8cd c0b0 	str.w	ip, [sp, #176]	; 0xb0
 8002252:	932b      	str	r3, [sp, #172]	; 0xac
 8002254:	912a      	str	r1, [sp, #168]	; 0xa8
 8002256:	9029      	str	r0, [sp, #164]	; 0xa4
 8002258:	db08      	blt.n	800226c <String_wstrcpy$2533+0x28>
 800225a:	e7ff      	b.n	800225c <String_wstrcpy$2533+0x18>
            {
                if((((int)dmem | (int)smem) & (IntPtr.Size - 1)) == 0) // Both pointers word-aligned?
 800225c:	9829      	ldr	r0, [sp, #164]	; 0xa4
 800225e:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8002260:	ea40 0201 	orr.w	r2, r0, r1
 8002264:	f012 0f03 	tst.w	r2, #3
 8002268:	d002      	beq.n	8002270 <String_wstrcpy$2533+0x2c>
 800226a:	e008      	b.n	800227e <String_wstrcpy$2533+0x3a>
 800226c:	b02d      	add	sp, #180	; 0xb4
 800226e:	bd80      	pop	{r7, pc}
 8002270:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8002272:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8002274:	9a29      	ldr	r2, [sp, #164]	; 0xa4
                {
 8002276:	9028      	str	r0, [sp, #160]	; 0xa0
 8002278:	9127      	str	r1, [sp, #156]	; 0x9c
 800227a:	9226      	str	r2, [sp, #152]	; 0x98
 800227c:	e085      	b.n	800238a <String_wstrcpy$2533+0x146>
 800227e:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8002280:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8002282:	9a29      	ldr	r2, [sp, #164]	; 0xa4
                        dmem += 2;
                        smem += 2;
                    }
                }
                else
                {
 8002284:	9025      	str	r0, [sp, #148]	; 0x94
 8002286:	9124      	str	r1, [sp, #144]	; 0x90
 8002288:	9223      	str	r2, [sp, #140]	; 0x8c
 800228a:	e7ff      	b.n	800228c <String_wstrcpy$2533+0x48>
 800228c:	9823      	ldr	r0, [sp, #140]	; 0x8c
 800228e:	9924      	ldr	r1, [sp, #144]	; 0x90
 8002290:	9a25      	ldr	r2, [sp, #148]	; 0x94
                    while(charCount >= 8)
 8002292:	2a08      	cmp	r2, #8
 8002294:	4603      	mov	r3, r0
 8002296:	468c      	mov	ip, r1
 8002298:	4696      	mov	lr, r2
 800229a:	9022      	str	r0, [sp, #136]	; 0x88
 800229c:	9121      	str	r1, [sp, #132]	; 0x84
 800229e:	9220      	str	r2, [sp, #128]	; 0x80
 80022a0:	931f      	str	r3, [sp, #124]	; 0x7c
 80022a2:	f8cd c078 	str.w	ip, [sp, #120]	; 0x78
 80022a6:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
 80022aa:	db1f      	blt.n	80022ec <String_wstrcpy$2533+0xa8>
 80022ac:	e7ff      	b.n	80022ae <String_wstrcpy$2533+0x6a>
                    {
                        dmem[0] = smem[0];
 80022ae:	9821      	ldr	r0, [sp, #132]	; 0x84
 80022b0:	8801      	ldrh	r1, [r0, #0]
 80022b2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80022b4:	8011      	strh	r1, [r2, #0]
                        dmem[1] = smem[1];
 80022b6:	8841      	ldrh	r1, [r0, #2]
 80022b8:	8051      	strh	r1, [r2, #2]
                        dmem[2] = smem[2];
 80022ba:	8881      	ldrh	r1, [r0, #4]
 80022bc:	8091      	strh	r1, [r2, #4]
                        dmem[3] = smem[3];
 80022be:	88c1      	ldrh	r1, [r0, #6]
 80022c0:	80d1      	strh	r1, [r2, #6]
                        dmem[4] = smem[4];
 80022c2:	8901      	ldrh	r1, [r0, #8]
 80022c4:	8111      	strh	r1, [r2, #8]
                        dmem[5] = smem[5];
 80022c6:	8941      	ldrh	r1, [r0, #10]
 80022c8:	8151      	strh	r1, [r2, #10]
                        dmem[6] = smem[6];
 80022ca:	8981      	ldrh	r1, [r0, #12]
 80022cc:	8191      	strh	r1, [r2, #12]
                        dmem[7] = smem[7];
 80022ce:	89c1      	ldrh	r1, [r0, #14]
 80022d0:	81d1      	strh	r1, [r2, #14]

                        dmem      += 8;
 80022d2:	f102 0110 	add.w	r1, r2, #16
                        smem      += 8;
 80022d6:	f100 0310 	add.w	r3, r0, #16
                        charCount -= 8;
 80022da:	f8dd c080 	ldr.w	ip, [sp, #128]	; 0x80
 80022de:	f1ac 0e08 	sub.w	lr, ip, #8
                    }
 80022e2:	9324      	str	r3, [sp, #144]	; 0x90
 80022e4:	f8cd e094 	str.w	lr, [sp, #148]	; 0x94
 80022e8:	9123      	str	r1, [sp, #140]	; 0x8c
 80022ea:	e7cf      	b.n	800228c <String_wstrcpy$2533+0x48>
 80022ec:	981d      	ldr	r0, [sp, #116]	; 0x74
 80022ee:	991e      	ldr	r1, [sp, #120]	; 0x78
 80022f0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c

                    if((charCount & 4) != 0)
 80022f2:	f010 0f04 	tst.w	r0, #4
 80022f6:	460b      	mov	r3, r1
 80022f8:	4694      	mov	ip, r2
 80022fa:	901c      	str	r0, [sp, #112]	; 0x70
 80022fc:	911b      	str	r1, [sp, #108]	; 0x6c
 80022fe:	921a      	str	r2, [sp, #104]	; 0x68
 8002300:	9319      	str	r3, [sp, #100]	; 0x64
 8002302:	f8cd c060 	str.w	ip, [sp, #96]	; 0x60
 8002306:	d011      	beq.n	800232c <String_wstrcpy$2533+0xe8>
 8002308:	e7ff      	b.n	800230a <String_wstrcpy$2533+0xc6>
                    {
                        dmem[0] = smem[0];
 800230a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800230c:	8801      	ldrh	r1, [r0, #0]
 800230e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8002310:	8011      	strh	r1, [r2, #0]
                        dmem[1] = smem[1];
 8002312:	8841      	ldrh	r1, [r0, #2]
 8002314:	8051      	strh	r1, [r2, #2]
                        dmem[2] = smem[2];
 8002316:	8881      	ldrh	r1, [r0, #4]
 8002318:	8091      	strh	r1, [r2, #4]
                        dmem[3] = smem[3];
 800231a:	88c1      	ldrh	r1, [r0, #6]
 800231c:	80d1      	strh	r1, [r2, #6]

                        dmem += 4;
 800231e:	f102 0108 	add.w	r1, r2, #8
                        smem += 4;
 8002322:	f100 0308 	add.w	r3, r0, #8
                    }
 8002326:	9319      	str	r3, [sp, #100]	; 0x64
 8002328:	9118      	str	r1, [sp, #96]	; 0x60
 800232a:	e7ff      	b.n	800232c <String_wstrcpy$2533+0xe8>
 800232c:	9818      	ldr	r0, [sp, #96]	; 0x60
 800232e:	9919      	ldr	r1, [sp, #100]	; 0x64

                    if((charCount & 2) != 0)
 8002330:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8002332:	f012 0f02 	tst.w	r2, #2
 8002336:	460b      	mov	r3, r1
 8002338:	4684      	mov	ip, r0
 800233a:	9017      	str	r0, [sp, #92]	; 0x5c
 800233c:	9116      	str	r1, [sp, #88]	; 0x58
 800233e:	9315      	str	r3, [sp, #84]	; 0x54
 8002340:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 8002344:	d00b      	beq.n	800235e <String_wstrcpy$2533+0x11a>
 8002346:	e7ff      	b.n	8002348 <String_wstrcpy$2533+0x104>
                    {
                        dmem[0] = smem[0];
 8002348:	9816      	ldr	r0, [sp, #88]	; 0x58
 800234a:	8801      	ldrh	r1, [r0, #0]
 800234c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800234e:	8011      	strh	r1, [r2, #0]
                        dmem[1] = smem[1];
 8002350:	8841      	ldrh	r1, [r0, #2]
 8002352:	8051      	strh	r1, [r2, #2]

                        dmem += 2;
 8002354:	1d11      	adds	r1, r2, #4
                        smem += 2;
 8002356:	1d03      	adds	r3, r0, #4
                    }
 8002358:	9315      	str	r3, [sp, #84]	; 0x54
 800235a:	9114      	str	r1, [sp, #80]	; 0x50
 800235c:	e7ff      	b.n	800235e <String_wstrcpy$2533+0x11a>
 800235e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8002360:	9915      	ldr	r1, [sp, #84]	; 0x54
 8002362:	9a1c      	ldr	r2, [sp, #112]	; 0x70
                }
 8002364:	9113      	str	r1, [sp, #76]	; 0x4c
 8002366:	9212      	str	r2, [sp, #72]	; 0x48
 8002368:	9011      	str	r0, [sp, #68]	; 0x44
 800236a:	e7ff      	b.n	800236c <String_wstrcpy$2533+0x128>
 800236c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800236e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8002370:	9a12      	ldr	r2, [sp, #72]	; 0x48

                if((charCount & 1) != 0)
 8002372:	f012 0f01 	tst.w	r2, #1
 8002376:	9010      	str	r0, [sp, #64]	; 0x40
 8002378:	910f      	str	r1, [sp, #60]	; 0x3c
 800237a:	d005      	beq.n	8002388 <String_wstrcpy$2533+0x144>
 800237c:	e7ff      	b.n	800237e <String_wstrcpy$2533+0x13a>
                {
                    dmem[0] = smem[0];
 800237e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8002380:	8801      	ldrh	r1, [r0, #0]
 8002382:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002384:	8011      	strh	r1, [r2, #0]
                }
 8002386:	e7ff      	b.n	8002388 <String_wstrcpy$2533+0x144>
            }
 8002388:	e770      	b.n	800226c <String_wstrcpy$2533+0x28>
 800238a:	9826      	ldr	r0, [sp, #152]	; 0x98
 800238c:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800238e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
        {
            if(charCount > 0)
            {
                if((((int)dmem | (int)smem) & (IntPtr.Size - 1)) == 0) // Both pointers word-aligned?
                {
                    while(charCount >= 8)
 8002390:	2a08      	cmp	r2, #8
 8002392:	4603      	mov	r3, r0
 8002394:	468c      	mov	ip, r1
 8002396:	4696      	mov	lr, r2
 8002398:	900e      	str	r0, [sp, #56]	; 0x38
 800239a:	910d      	str	r1, [sp, #52]	; 0x34
 800239c:	920c      	str	r2, [sp, #48]	; 0x30
 800239e:	930b      	str	r3, [sp, #44]	; 0x2c
 80023a0:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 80023a4:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 80023a8:	db17      	blt.n	80023da <String_wstrcpy$2533+0x196>
 80023aa:	e7ff      	b.n	80023ac <String_wstrcpy$2533+0x168>
                    {
                        ((uint*)dmem)[0] = ((uint*)smem)[0];
 80023ac:	980d      	ldr	r0, [sp, #52]	; 0x34
 80023ae:	6801      	ldr	r1, [r0, #0]
 80023b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80023b2:	6011      	str	r1, [r2, #0]
                        ((uint*)dmem)[1] = ((uint*)smem)[1];
 80023b4:	6841      	ldr	r1, [r0, #4]
 80023b6:	6051      	str	r1, [r2, #4]
                        ((uint*)dmem)[2] = ((uint*)smem)[2];
 80023b8:	6881      	ldr	r1, [r0, #8]
 80023ba:	6091      	str	r1, [r2, #8]
                        ((uint*)dmem)[3] = ((uint*)smem)[3];
 80023bc:	68c1      	ldr	r1, [r0, #12]
 80023be:	60d1      	str	r1, [r2, #12]

                        dmem      += 8;
 80023c0:	f102 0110 	add.w	r1, r2, #16
                        smem      += 8;
 80023c4:	f100 0310 	add.w	r3, r0, #16
                        charCount -= 8;
 80023c8:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
 80023cc:	f1ac 0e08 	sub.w	lr, ip, #8
                    }
 80023d0:	9327      	str	r3, [sp, #156]	; 0x9c
 80023d2:	f8cd e0a0 	str.w	lr, [sp, #160]	; 0xa0
 80023d6:	9126      	str	r1, [sp, #152]	; 0x98
 80023d8:	e7d7      	b.n	800238a <String_wstrcpy$2533+0x146>
 80023da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80023dc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80023de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c

                    if((charCount & 4) != 0)
 80023e0:	f010 0f04 	tst.w	r0, #4
 80023e4:	460b      	mov	r3, r1
 80023e6:	4694      	mov	ip, r2
 80023e8:	9008      	str	r0, [sp, #32]
 80023ea:	9107      	str	r1, [sp, #28]
 80023ec:	9206      	str	r2, [sp, #24]
 80023ee:	9305      	str	r3, [sp, #20]
 80023f0:	f8cd c010 	str.w	ip, [sp, #16]
 80023f4:	d00d      	beq.n	8002412 <String_wstrcpy$2533+0x1ce>
 80023f6:	e7ff      	b.n	80023f8 <String_wstrcpy$2533+0x1b4>
                    {
                        ((uint*)dmem)[0] = ((uint*)smem)[0];
 80023f8:	9807      	ldr	r0, [sp, #28]
 80023fa:	6801      	ldr	r1, [r0, #0]
 80023fc:	9a06      	ldr	r2, [sp, #24]
 80023fe:	6011      	str	r1, [r2, #0]
                        ((uint*)dmem)[1] = ((uint*)smem)[1];
 8002400:	6841      	ldr	r1, [r0, #4]
 8002402:	6051      	str	r1, [r2, #4]

                        dmem += 4;
 8002404:	f102 0108 	add.w	r1, r2, #8
                        smem += 4;
 8002408:	f100 0308 	add.w	r3, r0, #8
                    }
 800240c:	9305      	str	r3, [sp, #20]
 800240e:	9104      	str	r1, [sp, #16]
 8002410:	e7ff      	b.n	8002412 <String_wstrcpy$2533+0x1ce>
 8002412:	9804      	ldr	r0, [sp, #16]
 8002414:	9905      	ldr	r1, [sp, #20]

                    if((charCount & 2) != 0)
 8002416:	9a08      	ldr	r2, [sp, #32]
 8002418:	f012 0f02 	tst.w	r2, #2
 800241c:	460b      	mov	r3, r1
 800241e:	4684      	mov	ip, r0
 8002420:	9003      	str	r0, [sp, #12]
 8002422:	9102      	str	r1, [sp, #8]
 8002424:	9301      	str	r3, [sp, #4]
 8002426:	f8cd c000 	str.w	ip, [sp]
 800242a:	d009      	beq.n	8002440 <String_wstrcpy$2533+0x1fc>
 800242c:	e7ff      	b.n	800242e <String_wstrcpy$2533+0x1ea>
                    {
                        ((uint*)dmem)[0] = ((uint*)smem)[0];
 800242e:	9802      	ldr	r0, [sp, #8]
 8002430:	f850 1b04 	ldr.w	r1, [r0], #4
 8002434:	9a03      	ldr	r2, [sp, #12]
 8002436:	f842 1b04 	str.w	r1, [r2], #4

                        dmem += 2;
                        smem += 2;
                    }
 800243a:	9001      	str	r0, [sp, #4]
 800243c:	9200      	str	r2, [sp, #0]
 800243e:	e7ff      	b.n	8002440 <String_wstrcpy$2533+0x1fc>
 8002440:	9800      	ldr	r0, [sp, #0]
 8002442:	9901      	ldr	r1, [sp, #4]
 8002444:	9a08      	ldr	r2, [sp, #32]
                }
 8002446:	9113      	str	r1, [sp, #76]	; 0x4c
 8002448:	9212      	str	r2, [sp, #72]	; 0x48
 800244a:	9011      	str	r0, [sp, #68]	; 0x44
 800244c:	e78e      	b.n	800236c <String_wstrcpy$2533+0x128>

0800244e <ArgumentOutOfRangeException_.ctor$6074>:
 800244e:	b580      	push	{r7, lr}
 8002450:	b082      	sub	sp, #8
 8002452:	4601      	mov	r1, r0
    {
        // Creates a new ArgumentNullException with its message
        // string set to a default message explaining an argument was null.
#if EXCEPTION_STRINGS
        public ArgumentNullException() : base( Environment.GetResourceString( "ArgumentNull_Generic" ) )
#else
 8002454:	2200      	movs	r2, #0
 8002456:	9101      	str	r1, [sp, #4]
 8002458:	4611      	mov	r1, r2
 800245a:	f003 fb67 	bl	8005b2c <ArgumentException_.ctor$6063>
 800245e:	b002      	add	sp, #8
 8002460:	bd80      	pop	{r7, pc}

08002462 <String_GetHashCode$2501>:
 8002462:	b510      	push	{r4, lr}
 8002464:	b092      	sub	sp, #72	; 0x48
 8002466:	4601      	mov	r1, r0
////    [ReliabilityContract( Consistency.WillNotCorruptState, Cer.MayFail )]
        public override int GetHashCode()
        {
            unsafe
            {
                fixed(char* src = this)
 8002468:	f100 0208 	add.w	r2, r0, #8
 800246c:	2800      	cmp	r0, #0
 800246e:	4610      	mov	r0, r2
 8002470:	9211      	str	r2, [sp, #68]	; 0x44
 8002472:	9110      	str	r1, [sp, #64]	; 0x40
 8002474:	900f      	str	r0, [sp, #60]	; 0x3c
 8002476:	d005      	beq.n	8002484 <String_GetHashCode$2501+0x22>
 8002478:	e7ff      	b.n	800247a <String_GetHashCode$2501+0x18>
 800247a:	9811      	ldr	r0, [sp, #68]	; 0x44
 800247c:	f100 0108 	add.w	r1, r0, #8
 8002480:	910f      	str	r1, [sp, #60]	; 0x3c
 8002482:	e7ff      	b.n	8002484 <String_GetHashCode$2501+0x22>
 8002484:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8002486:	9910      	ldr	r1, [sp, #64]	; 0x40
 8002488:	68ca      	ldr	r2, [r1, #12]
 800248a:	f241 5305 	movw	r3, #5381	; 0x1505
 800248e:	f2c1 5305 	movt	r3, #5381	; 0x1505
 8002492:	469c      	mov	ip, r3
                    int hash2 = hash1;

#if !WIN64
                    // 32bit machines.
                    int* pint = (int *)src;
                    int  len  =        this.Length;
 8002494:	930e      	str	r3, [sp, #56]	; 0x38
 8002496:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 800249a:	920c      	str	r2, [sp, #48]	; 0x30
 800249c:	900b      	str	r0, [sp, #44]	; 0x2c
 800249e:	e7ff      	b.n	80024a0 <String_GetHashCode$2501+0x3e>
 80024a0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80024a2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80024a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80024a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30

                    while(len > 0)
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	468c      	mov	ip, r1
 80024ac:	4696      	mov	lr, r2
 80024ae:	900a      	str	r0, [sp, #40]	; 0x28
 80024b0:	9109      	str	r1, [sp, #36]	; 0x24
 80024b2:	9208      	str	r2, [sp, #32]
 80024b4:	9307      	str	r3, [sp, #28]
 80024b6:	f8cd c018 	str.w	ip, [sp, #24]
 80024ba:	f8cd e014 	str.w	lr, [sp, #20]
 80024be:	db14      	blt.n	80024ea <String_GetHashCode$2501+0x88>
 80024c0:	e7ff      	b.n	80024c2 <String_GetHashCode$2501+0x60>
                    {
                        hash1 = ((hash1 << 5) + hash1 + (hash1 >> 27)) ^ pint[0];
 80024c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80024c4:	eb00 1140 	add.w	r1, r0, r0, lsl #5
 80024c8:	eb01 61e0 	add.w	r1, r1, r0, asr #27
 80024cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80024ce:	6813      	ldr	r3, [r2, #0]
 80024d0:	4059      	eors	r1, r3
                        if(len <= 2)
 80024d2:	9b07      	ldr	r3, [sp, #28]
 80024d4:	2b03      	cmp	r3, #3
 80024d6:	468c      	mov	ip, r1
 80024d8:	f8dd e020 	ldr.w	lr, [sp, #32]
 80024dc:	9104      	str	r1, [sp, #16]
 80024de:	f8cd c00c 	str.w	ip, [sp, #12]
 80024e2:	f8cd e008 	str.w	lr, [sp, #8]
 80024e6:	db0f      	blt.n	8002508 <String_GetHashCode$2501+0xa6>
 80024e8:	e013      	b.n	8002512 <String_GetHashCode$2501+0xb0>
 80024ea:	9805      	ldr	r0, [sp, #20]
 80024ec:	9906      	ldr	r1, [sp, #24]
 80024ee:	9001      	str	r0, [sp, #4]
 80024f0:	9100      	str	r1, [sp, #0]
 80024f2:	e7ff      	b.n	80024f4 <String_GetHashCode$2501+0x92>
 80024f4:	9800      	ldr	r0, [sp, #0]
 80024f6:	9901      	ldr	r1, [sp, #4]
////                    // This is perfectly fine as long as you don't persist the
////                    // value from GetHashCode to disk or count on String A
////                    // hashing before string B.  Those are bugs in your code.
////                    hash1 ^= ThisAssembly.DailyBuildNumber;
////#endif
                    return hash1 + (hash2 * 1566083941);
 80024f8:	f648 3265 	movw	r2, #35685	; 0x8b65
 80024fc:	f6c5 5258 	movt	r2, #23896	; 0x5d58
 8002500:	fb01 0002 	mla	r0, r1, r2, r0
 8002504:	b012      	add	sp, #72	; 0x48
 8002506:	bd10      	pop	{r4, pc}
 8002508:	9802      	ldr	r0, [sp, #8]
 800250a:	9903      	ldr	r1, [sp, #12]
                    while(len > 0)
                    {
                        hash1 = ((hash1 << 5) + hash1 + (hash1 >> 27)) ^ pint[0];
                        if(len <= 2)
                        {
                            break;
 800250c:	9001      	str	r0, [sp, #4]
 800250e:	9100      	str	r1, [sp, #0]
 8002510:	e7f0      	b.n	80024f4 <String_GetHashCode$2501+0x92>
                        }

                        hash2 = ((hash2 << 5) + hash2 + (hash2 >> 27)) ^ pint[1];
 8002512:	9808      	ldr	r0, [sp, #32]
 8002514:	eb00 1140 	add.w	r1, r0, r0, lsl #5
 8002518:	eb01 61e0 	add.w	r1, r1, r0, asr #27
 800251c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800251e:	6853      	ldr	r3, [r2, #4]
 8002520:	4059      	eors	r1, r3
                        pint += 2;
 8002522:	f102 0308 	add.w	r3, r2, #8
                        len  -= 4;
 8002526:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800252a:	f1ac 0e04 	sub.w	lr, ip, #4
 800252e:	9c04      	ldr	r4, [sp, #16]
                    }
 8002530:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
 8002534:	940e      	str	r4, [sp, #56]	; 0x38
 8002536:	910d      	str	r1, [sp, #52]	; 0x34
 8002538:	930b      	str	r3, [sp, #44]	; 0x2c
 800253a:	e7b1      	b.n	80024a0 <String_GetHashCode$2501+0x3e>

0800253c <String_get_Capacity$2504>:
 800253c:	b081      	sub	sp, #4
 800253e:	4601      	mov	r1, r0
 8002540:	6880      	ldr	r0, [r0, #8]
        // Used by StringBuilder
        internal int Capacity
        {
            get
            {
                return m_arrayLength - 1;
 8002542:	3801      	subs	r0, #1
 8002544:	9100      	str	r1, [sp, #0]
 8002546:	b001      	add	sp, #4
 8002548:	4770      	bx	lr

0800254a <DefaultTypeSystemManager_AllocateString$4964>:
 800254a:	b580      	push	{r7, lr}
 800254c:	b08e      	sub	sp, #56	; 0x38
 800254e:	4610      	mov	r0, r2
 8002550:	460b      	mov	r3, r1
 8002552:	4694      	mov	ip, r2
 8002554:	f8d1 e008 	ldr.w	lr, [r1, #8]
 8002558:	68c9      	ldr	r1, [r1, #12]

        [NoInline]
        public override String AllocateString( TS.VTable vTable ,
                                               int       length )
        {
            uint    size = ComputeArraySize( vTable, (uint)length );
 800255a:	9006      	str	r0, [sp, #24]
 800255c:	4670      	mov	r0, lr
 800255e:	f8cd c014 	str.w	ip, [sp, #20]
 8002562:	9304      	str	r3, [sp, #16]
 8002564:	f006 fee0 	bl	8009328 <DefaultTypeSystemManager_ComputeArraySize$4966>
 8002568:	4601      	mov	r1, r0
            UIntPtr ptr  = AllocateInner   ( vTable,       size   );
 800256a:	9103      	str	r1, [sp, #12]
 800256c:	f006 fe96 	bl	800929c <DefaultTypeSystemManager_AllocateInner$4967>
 8002570:	9007      	str	r0, [sp, #28]

            if(MemoryManager.Configuration.TrashFreeMemory)
 8002572:	e7ff      	b.n	8002574 <DefaultTypeSystemManager_AllocateString$4964+0x2a>
 8002574:	a807      	add	r0, sp, #28
 8002576:	9907      	ldr	r1, [sp, #28]
 8002578:	910a      	str	r1, [sp, #40]	; 0x28
 800257a:	2100      	movs	r1, #0
 800257c:	910b      	str	r1, [sp, #44]	; 0x2c
 800257e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
            //
            // Align to word boundary.
            //
            size = (size + (sizeof(uint)-1)) & ~(uint)(sizeof(uint)-1);

            return size;
 8002580:	9b03      	ldr	r3, [sp, #12]
 8002582:	441a      	add	r2, r3
 8002584:	910b      	str	r1, [sp, #44]	; 0x2c
 8002586:	a90b      	add	r1, sp, #44	; 0x2c
 8002588:	3908      	subs	r1, #8
 800258a:	9002      	str	r0, [sp, #8]
 800258c:	4608      	mov	r0, r1
 800258e:	4611      	mov	r1, r2
 8002590:	f7fe f994 	bl	80008bc <UIntPtr_.ctor$2864>
 8002594:	9807      	ldr	r0, [sp, #28]
 8002596:	900c      	str	r0, [sp, #48]	; 0x30
 8002598:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800259a:	900d      	str	r0, [sp, #52]	; 0x34
 800259c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800259e:	1a40      	subs	r0, r0, r1
 80025a0:	9001      	str	r0, [sp, #4]
 80025a2:	4608      	mov	r0, r1
 80025a4:	9901      	ldr	r1, [sp, #4]
 80025a6:	f01d fc52 	bl	801fe4e <__aeabi_memclr>
            UIntPtr ptr  = AllocateInner   ( vTable,       size   );

            if(MemoryManager.Configuration.TrashFreeMemory)
            {
                Memory.Zero( ptr, AddressMath.Increment( ptr, size ) ); 
            }
 80025aa:	e7ff      	b.n	80025ac <DefaultTypeSystemManager_AllocateString$4964+0x62>
        {
            uint    size = ComputeArraySize( vTable, length );
            UIntPtr ptr  = AllocateInner   ( vTable, size   );

            return InitializeArray( ptr, vTable, length );
        }
 80025ac:	9807      	ldr	r0, [sp, #28]
 80025ae:	9904      	ldr	r1, [sp, #16]
 80025b0:	6041      	str	r1, [r0, #4]
 80025b2:	2208      	movs	r2, #8
 80025b4:	6002      	str	r2, [r0, #0]
 80025b6:	9802      	ldr	r0, [sp, #8]
 80025b8:	7802      	ldrb	r2, [r0, #0]
 80025ba:	7843      	ldrb	r3, [r0, #1]
 80025bc:	f890 c002 	ldrb.w	ip, [r0, #2]
 80025c0:	f890 e003 	ldrb.w	lr, [r0, #3]
 80025c4:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
 80025c8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80025cc:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80025d0:	9208      	str	r2, [sp, #32]
 80025d2:	2200      	movs	r2, #0
 80025d4:	9209      	str	r2, [sp, #36]	; 0x24
 80025d6:	9b08      	ldr	r3, [sp, #32]
            //
            // Align to word boundary.
            //
            size = (size + (sizeof(uint)-1)) & ~(uint)(sizeof(uint)-1);

            return size;
 80025d8:	f103 0108 	add.w	r1, r3, #8
 80025dc:	9209      	str	r2, [sp, #36]	; 0x24
 80025de:	aa09      	add	r2, sp, #36	; 0x24
 80025e0:	f1a2 0008 	sub.w	r0, r2, #8
 80025e4:	f7fe f96a 	bl	80008bc <UIntPtr_.ctor$2864>

            size += vTable.BaseSize;
            size += vTable.ElementSize * length;

            return Microsoft.Zelig.AddressMath.AlignToWordBoundary( size );
        }
 80025e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80025ea:	9905      	ldr	r1, [sp, #20]
 80025ec:	f840 1908 	str.w	r1, [r0], #-8
 80025f0:	b00e      	add	sp, #56	; 0x38
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <String_FillStringChecked$2528>:
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	4613      	mov	r3, r2
 80025fa:	468c      	mov	ip, r1
 80025fc:	4686      	mov	lr, r0
 80025fe:	68d2      	ldr	r2, [r2, #12]
 8002600:	68c0      	ldr	r0, [r0, #12]
 8002602:	1a40      	subs	r0, r0, r1
 8002604:	4282      	cmp	r2, r0
 8002606:	f8cd e014 	str.w	lr, [sp, #20]
 800260a:	f8cd c010 	str.w	ip, [sp, #16]
 800260e:	9203      	str	r2, [sp, #12]
 8002610:	9302      	str	r3, [sp, #8]
 8002612:	dd12      	ble.n	800263a <String_FillStringChecked$2528+0x46>
 8002614:	e7ff      	b.n	8002616 <String_FillStringChecked$2528+0x22>
 8002616:	e7ff      	b.n	8002618 <String_FillStringChecked$2528+0x24>
 8002618:	480f      	ldr	r0, [pc, #60]	; (8002658 <String_FillStringChecked$2528+0x64>)
 800261a:	4910      	ldr	r1, [pc, #64]	; (800265c <String_FillStringChecked$2528+0x68>)
 800261c:	4479      	add	r1, pc
 800261e:	4408      	add	r0, r1
 8002620:	4a0f      	ldr	r2, [pc, #60]	; (8002660 <String_FillStringChecked$2528+0x6c>)
 8002622:	4411      	add	r1, r2
 8002624:	9001      	str	r0, [sp, #4]
 8002626:	f7fe f8cb 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800262a:	9000      	str	r0, [sp, #0]
 800262c:	f7fe f9c2 	bl	80009b4 <IndexOutOfRangeException_.ctor$7117>
 8002630:	9801      	ldr	r0, [sp, #4]
 8002632:	9900      	ldr	r1, [sp, #0]
 8002634:	f7fe f91a 	bl	800086c <TypeSystemManager_Throw$4954>
 8002638:	e7ee      	b.n	8002618 <String_FillStringChecked$2528+0x24>
 800263a:	9805      	ldr	r0, [sp, #20]
 800263c:	9904      	ldr	r1, [sp, #16]
 800263e:	eb00 0241 	add.w	r2, r0, r1, lsl #1
 8002642:	9b02      	ldr	r3, [sp, #8]
 8002644:	f103 0110 	add.w	r1, r3, #16
 8002648:	f102 0010 	add.w	r0, r2, #16
 800264c:	9a03      	ldr	r2, [sp, #12]
 800264e:	f7ff fdf9 	bl	8002244 <String_wstrcpy$2533>
 8002652:	b006      	add	sp, #24
 8002654:	bd80      	pop	{r7, pc}
 8002656:	46c0      	nop			; (mov r8, r8)
 8002658:	ffffea38 	.word	0xffffea38
 800265c:	17fff1b4 	.word	0x17fff1b4
 8002660:	e80105bc 	.word	0xe80105bc

08002664 <String_.ctor$3883>:
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	469c      	mov	ip, r3
    // (indices) are zero-based.
    //
    // When passing a null string into a constructor in VJ and VC, the null should be
    // explicitly type cast to a String.
    // For Example:
    // String s = new String((String)null);
 800266a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800266e:	9003      	str	r0, [sp, #12]
 8002670:	f8cd c008 	str.w	ip, [sp, #8]
 8002674:	9201      	str	r2, [sp, #4]
 8002676:	9100      	str	r1, [sp, #0]
 8002678:	dc03      	bgt.n	8002682 <String_.ctor$3883+0x1e>
 800267a:	e7ff      	b.n	800267c <String_.ctor$3883+0x18>
    // Text.Out.WriteLine(s);
    //
    [Microsoft.Zelig.Internals.WellKnownType( "System_String" )]
 800267c:	f000 f826 	bl	80026cc <Thread_ThrowIndexOutOfRangeException$4021>
    [Serializable]
 8002680:	e012      	b.n	80026a8 <String_.ctor$3883+0x44>
 8002682:	9803      	ldr	r0, [sp, #12]
 8002684:	68c1      	ldr	r1, [r0, #12]
    // (indices) are zero-based.
    //
    // When passing a null string into a constructor in VJ and VC, the null should be
    // explicitly type cast to a String.
    // For Example:
    // String s = new String((String)null);
 8002686:	9a02      	ldr	r2, [sp, #8]
 8002688:	428a      	cmp	r2, r1
 800268a:	dcf7      	bgt.n	800267c <String_.ctor$3883+0x18>
 800268c:	e7ff      	b.n	800268e <String_.ctor$3883+0x2a>
 800268e:	9801      	ldr	r0, [sp, #4]
 8002690:	2800      	cmp	r0, #0
 8002692:	dbf3      	blt.n	800267c <String_.ctor$3883+0x18>
 8002694:	e7ff      	b.n	8002696 <String_.ctor$3883+0x32>
 8002696:	9801      	ldr	r0, [sp, #4]
 8002698:	9902      	ldr	r1, [sp, #8]
 800269a:	1842      	adds	r2, r0, r1
////    [ReliabilityContract( Consistency.WillNotCorruptState, Cer.MayFail )]
        private unsafe static bool EqualsHelper( String strA, String strB )
        {
            int length = strA.Length;
            if(length != strB.Length) return false;

 800269c:	9b00      	ldr	r3, [sp, #0]
 800269e:	f8d3 c008 	ldr.w	ip, [r3, #8]
    // (indices) are zero-based.
    //
    // When passing a null string into a constructor in VJ and VC, the null should be
    // explicitly type cast to a String.
    // For Example:
    // String s = new String((String)null);
 80026a2:	4562      	cmp	r2, ip
 80026a4:	dcea      	bgt.n	800267c <String_.ctor$3883+0x18>
 80026a6:	e7ff      	b.n	80026a8 <String_.ctor$3883+0x44>
    // Text.Out.WriteLine(s);
    //
    [Microsoft.Zelig.Internals.WellKnownType( "System_String" )]
    [Serializable]
    public sealed class String : IComparable, IComparable<String>, ICloneable, IConvertible, /*IEnumerable, IEnumerable<char>,*/ IEquatable<String>
    {
 80026a8:	9802      	ldr	r0, [sp, #8]
 80026aa:	2801      	cmp	r0, #1
 80026ac:	db0c      	blt.n	80026c8 <String_.ctor$3883+0x64>
 80026ae:	e7ff      	b.n	80026b0 <String_.ctor$3883+0x4c>
        //These are defined in Com99/src/vm/COMStringCommon.h and must be kept in sync.
        private const int TrimHead = 0;
 80026b0:	9803      	ldr	r0, [sp, #12]
 80026b2:	3010      	adds	r0, #16
        private const int TrimTail = 1;
        private const int TrimBoth = 2;
 80026b4:	9900      	ldr	r1, [sp, #0]
 80026b6:	9a01      	ldr	r2, [sp, #4]
 80026b8:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 80026bc:	f103 010c 	add.w	r1, r3, #12

        // The Empty constant holds the empty string value.
 80026c0:	9a02      	ldr	r2, [sp, #8]
 80026c2:	f7ff fdbf 	bl	8002244 <String_wstrcpy$2533>
        //We need to call the String constructor so that the compiler doesn't mark this as a literal.
        //Marking this as a literal would mean that it doesn't show up as a field which we can access
        //from native.
 80026c6:	e7ff      	b.n	80026c8 <String_.ctor$3883+0x64>
 80026c8:	b004      	add	sp, #16
 80026ca:	bd80      	pop	{r7, pc}

080026cc <Thread_ThrowIndexOutOfRangeException$4021>:
        }

        [NoInline]
        [TS.WellKnownMethod( "ThreadImpl_ThrowIndexOutOfRangeException" )]
        internal static void ThrowIndexOutOfRangeException()
        {
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	e7ff      	b.n	80026d2 <Thread_ThrowIndexOutOfRangeException$4021+0x6>
            throw new IndexOutOfRangeException();
 80026d2:	4808      	ldr	r0, [pc, #32]	; (80026f4 <Thread_ThrowIndexOutOfRangeException$4021+0x28>)
 80026d4:	4908      	ldr	r1, [pc, #32]	; (80026f8 <Thread_ThrowIndexOutOfRangeException$4021+0x2c>)
 80026d6:	4479      	add	r1, pc
 80026d8:	4408      	add	r0, r1
 80026da:	4a08      	ldr	r2, [pc, #32]	; (80026fc <Thread_ThrowIndexOutOfRangeException$4021+0x30>)
 80026dc:	4411      	add	r1, r2
 80026de:	9001      	str	r0, [sp, #4]
 80026e0:	f7fe f86e 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 80026e4:	9000      	str	r0, [sp, #0]
 80026e6:	f7fe f965 	bl	80009b4 <IndexOutOfRangeException_.ctor$7117>
 80026ea:	9801      	ldr	r0, [sp, #4]
 80026ec:	9900      	ldr	r1, [sp, #0]
 80026ee:	f7fe f8bd 	bl	800086c <TypeSystemManager_Throw$4954>
 80026f2:	e7ee      	b.n	80026d2 <Thread_ThrowIndexOutOfRangeException$4021+0x6>
 80026f4:	ffffea38 	.word	0xffffea38
 80026f8:	17fff0fa 	.word	0x17fff0fa
 80026fc:	e80105bc 	.word	0xe80105bc

08002700 <String_wstrcpyPtrAligned$2531>:
 8002700:	b580      	push	{r7, lr}
 8002702:	b095      	sub	sp, #84	; 0x54
 8002704:	4613      	mov	r3, r2
 8002706:	9114      	str	r1, [sp, #80]	; 0x50
 8002708:	9313      	str	r3, [sp, #76]	; 0x4c
 800270a:	9212      	str	r2, [sp, #72]	; 0x48
 800270c:	9011      	str	r0, [sp, #68]	; 0x44
 800270e:	e7ff      	b.n	8002710 <String_wstrcpyPtrAligned$2531+0x10>
 8002710:	9811      	ldr	r0, [sp, #68]	; 0x44
 8002712:	9914      	ldr	r1, [sp, #80]	; 0x50
 8002714:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002716:	2a08      	cmp	r2, #8
 8002718:	4603      	mov	r3, r0
 800271a:	468c      	mov	ip, r1
 800271c:	4696      	mov	lr, r2
 800271e:	9010      	str	r0, [sp, #64]	; 0x40
 8002720:	910f      	str	r1, [sp, #60]	; 0x3c
 8002722:	920e      	str	r2, [sp, #56]	; 0x38
 8002724:	930d      	str	r3, [sp, #52]	; 0x34
 8002726:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 800272a:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 800272e:	db17      	blt.n	8002760 <String_wstrcpyPtrAligned$2531+0x60>
 8002730:	e7ff      	b.n	8002732 <String_wstrcpyPtrAligned$2531+0x32>
 8002732:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8002734:	6801      	ldr	r1, [r0, #0]
 8002736:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002738:	6011      	str	r1, [r2, #0]
 800273a:	6841      	ldr	r1, [r0, #4]
 800273c:	6051      	str	r1, [r2, #4]
 800273e:	6881      	ldr	r1, [r0, #8]
 8002740:	6091      	str	r1, [r2, #8]
 8002742:	68c1      	ldr	r1, [r0, #12]
 8002744:	60d1      	str	r1, [r2, #12]
 8002746:	f102 0110 	add.w	r1, r2, #16
 800274a:	f100 0310 	add.w	r3, r0, #16
 800274e:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 8002752:	f1ac 0e08 	sub.w	lr, ip, #8
 8002756:	9314      	str	r3, [sp, #80]	; 0x50
 8002758:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
 800275c:	9111      	str	r1, [sp, #68]	; 0x44
 800275e:	e7d7      	b.n	8002710 <String_wstrcpyPtrAligned$2531+0x10>
 8002760:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8002762:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002764:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002766:	f010 0f04 	tst.w	r0, #4
 800276a:	460b      	mov	r3, r1
 800276c:	4694      	mov	ip, r2
 800276e:	900a      	str	r0, [sp, #40]	; 0x28
 8002770:	9109      	str	r1, [sp, #36]	; 0x24
 8002772:	9208      	str	r2, [sp, #32]
 8002774:	9307      	str	r3, [sp, #28]
 8002776:	f8cd c018 	str.w	ip, [sp, #24]
 800277a:	d00d      	beq.n	8002798 <String_wstrcpyPtrAligned$2531+0x98>
 800277c:	e7ff      	b.n	800277e <String_wstrcpyPtrAligned$2531+0x7e>
 800277e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002780:	6801      	ldr	r1, [r0, #0]
 8002782:	9a08      	ldr	r2, [sp, #32]
 8002784:	6011      	str	r1, [r2, #0]
 8002786:	6841      	ldr	r1, [r0, #4]
 8002788:	6051      	str	r1, [r2, #4]
 800278a:	f102 0108 	add.w	r1, r2, #8
 800278e:	f100 0308 	add.w	r3, r0, #8
 8002792:	9307      	str	r3, [sp, #28]
 8002794:	9106      	str	r1, [sp, #24]
 8002796:	e7ff      	b.n	8002798 <String_wstrcpyPtrAligned$2531+0x98>
 8002798:	9806      	ldr	r0, [sp, #24]
 800279a:	9907      	ldr	r1, [sp, #28]
 800279c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800279e:	f012 0f02 	tst.w	r2, #2
 80027a2:	460b      	mov	r3, r1
 80027a4:	4684      	mov	ip, r0
 80027a6:	9005      	str	r0, [sp, #20]
 80027a8:	9104      	str	r1, [sp, #16]
 80027aa:	9303      	str	r3, [sp, #12]
 80027ac:	f8cd c008 	str.w	ip, [sp, #8]
 80027b0:	d009      	beq.n	80027c6 <String_wstrcpyPtrAligned$2531+0xc6>
 80027b2:	e7ff      	b.n	80027b4 <String_wstrcpyPtrAligned$2531+0xb4>
 80027b4:	9804      	ldr	r0, [sp, #16]
 80027b6:	f850 1b04 	ldr.w	r1, [r0], #4
 80027ba:	9a05      	ldr	r2, [sp, #20]
 80027bc:	f842 1b04 	str.w	r1, [r2], #4
 80027c0:	9003      	str	r0, [sp, #12]
 80027c2:	9202      	str	r2, [sp, #8]
 80027c4:	e7ff      	b.n	80027c6 <String_wstrcpyPtrAligned$2531+0xc6>
 80027c6:	9802      	ldr	r0, [sp, #8]
 80027c8:	9903      	ldr	r1, [sp, #12]
 80027ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80027cc:	f012 0f01 	tst.w	r2, #1
 80027d0:	9001      	str	r0, [sp, #4]
 80027d2:	9100      	str	r1, [sp, #0]
 80027d4:	d005      	beq.n	80027e2 <String_wstrcpyPtrAligned$2531+0xe2>
 80027d6:	e7ff      	b.n	80027d8 <String_wstrcpyPtrAligned$2531+0xd8>
 80027d8:	9800      	ldr	r0, [sp, #0]
 80027da:	8801      	ldrh	r1, [r0, #0]
 80027dc:	9a01      	ldr	r2, [sp, #4]
 80027de:	8011      	strh	r1, [r2, #0]
 80027e0:	e7ff      	b.n	80027e2 <String_wstrcpyPtrAligned$2531+0xe2>
 80027e2:	b015      	add	sp, #84	; 0x54
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <String_ToString$2570>:
 80027e6:	b081      	sub	sp, #4
 80027e8:	4601      	mov	r1, r0
 80027ea:	9100      	str	r1, [sp, #0]
 80027ec:	b001      	add	sp, #4
 80027ee:	4770      	bx	lr

080027f0 <String_Format$2580>:
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b088      	sub	sp, #32
 80027f4:	4602      	mov	r2, r0
            return Format( null, format, args );
        }

        public static String Format( IFormatProvider provider, String format, params Object[] args )
        {
            if(format == null || args == null)
 80027f6:	2800      	cmp	r0, #0
 80027f8:	9207      	str	r2, [sp, #28]
 80027fa:	9106      	str	r1, [sp, #24]
 80027fc:	d004      	beq.n	8002808 <String_Format$2580+0x18>
 80027fe:	e7ff      	b.n	8002800 <String_Format$2580+0x10>
 8002800:	9806      	ldr	r0, [sp, #24]
 8002802:	2800      	cmp	r0, #0
 8002804:	d112      	bne.n	800282c <String_Format$2580+0x3c>
 8002806:	e7ff      	b.n	8002808 <String_Format$2580+0x18>
            {
#if EXCEPTION_STRINGS
                throw new ArgumentNullException( (format == null) ? "format" : "args" );
#else
                throw new ArgumentNullException();
 8002808:	e7ff      	b.n	800280a <String_Format$2580+0x1a>
 800280a:	4819      	ldr	r0, [pc, #100]	; (8002870 <String_Format$2580+0x80>)
 800280c:	491b      	ldr	r1, [pc, #108]	; (800287c <String_Format$2580+0x8c>)
 800280e:	4479      	add	r1, pc
 8002810:	4408      	add	r0, r1
 8002812:	4a1b      	ldr	r2, [pc, #108]	; (8002880 <String_Format$2580+0x90>)
 8002814:	4411      	add	r1, r2
 8002816:	9005      	str	r0, [sp, #20]
 8002818:	f7fd ffd2 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800281c:	9004      	str	r0, [sp, #16]
 800281e:	f7fe f81c 	bl	800085a <ArgumentNullException_.ctor$6069>
 8002822:	9805      	ldr	r0, [sp, #20]
 8002824:	9904      	ldr	r1, [sp, #16]
 8002826:	f7fe f821 	bl	800086c <TypeSystemManager_Throw$4954>
 800282a:	e7ee      	b.n	800280a <String_Format$2580+0x1a>
 800282c:	9807      	ldr	r0, [sp, #28]
 800282e:	68c1      	ldr	r1, [r0, #12]
////    [ReliabilityContract( Consistency.WillNotCorruptState, Cer.MayFail )]
        private unsafe static bool EqualsHelper( String strA, String strB )
        {
            int length = strA.Length;
            if(length != strB.Length) return false;

 8002830:	9a06      	ldr	r2, [sp, #24]
 8002832:	6893      	ldr	r3, [r2, #8]
#else
                throw new ArgumentNullException();
#endif
            }
    
            StringBuilder sb = new StringBuilder( format.Length + args.Length * 8 );
 8002834:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8002838:	4b0d      	ldr	r3, [pc, #52]	; (8002870 <String_Format$2580+0x80>)
 800283a:	f8df c038 	ldr.w	ip, [pc, #56]	; 8002874 <String_Format$2580+0x84>
 800283e:	44fc      	add	ip, pc
 8002840:	eb03 000c 	add.w	r0, r3, ip
 8002844:	4b0c      	ldr	r3, [pc, #48]	; (8002878 <String_Format$2580+0x88>)
 8002846:	4463      	add	r3, ip
 8002848:	9103      	str	r1, [sp, #12]
 800284a:	4619      	mov	r1, r3
 800284c:	f7fd ffb8 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8002850:	9002      	str	r0, [sp, #8]
 8002852:	9903      	ldr	r1, [sp, #12]
 8002854:	f000 f848 	bl	80028e8 <StringBuilder_.ctor$8488>
    
            sb.AppendFormat( provider, format, args );
 8002858:	9802      	ldr	r0, [sp, #8]
 800285a:	9907      	ldr	r1, [sp, #28]
 800285c:	9a06      	ldr	r2, [sp, #24]
 800285e:	f000 f85f 	bl	8002920 <StringBuilder_AppendFormat$8555>
    
            return sb.ToString();
 8002862:	9902      	ldr	r1, [sp, #8]
 8002864:	9001      	str	r0, [sp, #4]
 8002866:	4608      	mov	r0, r1
 8002868:	f000 f80c 	bl	8002884 <StringBuilder_ToString$8499>
 800286c:	b008      	add	sp, #32
 800286e:	bd80      	pop	{r7, pc}
 8002870:	ffffea38 	.word	0xffffea38
 8002874:	17ffef92 	.word	0x17ffef92
 8002878:	e8010b3c 	.word	0xe8010b3c
 800287c:	17ffefc2 	.word	0x17ffefc2
 8002880:	e801049c 	.word	0xe801049c

08002884 <StringBuilder_ToString$8499>:
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	4601      	mov	r1, r0
            // If these reads get re-ordered then it is possible to get a currentString owned by some other 
            // (mutating) thread and yet think, according to currentThread, that such was not the case.
            // This is acheived by marking m_StringValue as volatile. 
            //
            String currentString = m_StringValue;
            Thread currentThread = m_currentThread;
 800288a:	6882      	ldr	r2, [r0, #8]
            // We assume that their read of m_currentThread will always occur after read of m_StringValue.  
            // If these reads get re-ordered then it is possible to get a currentString owned by some other 
            // (mutating) thread and yet think, according to currentThread, that such was not the case.
            // This is acheived by marking m_StringValue as volatile. 
            //
            String currentString = m_StringValue;
 800288c:	6900      	ldr	r0, [r0, #16]
            int currentLength = currentString.Length;
            requiredLength = currentLength + charCount;
            if(NeedsAllocation( currentString, requiredLength ))
            {
                String newString = GetNewString( currentString, requiredLength );
                newString.AppendInPlace( value, startIndex, charCount, currentLength );
 800288e:	4b14      	ldr	r3, [pc, #80]	; (80028e0 <StringBuilder_ToString$8499+0x5c>)
 8002890:	f8df c050 	ldr.w	ip, [pc, #80]	; 80028e4 <StringBuilder_ToString$8499+0x60>
 8002894:	44fc      	add	ip, pc
 8002896:	4463      	add	r3, ip
 8002898:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
            // A thread interleaving happens at this point.
            // (4) Thread T2 resumes execution.  T2 reads m_currentThread and sees that NOBODY is the registered owner
            //  Assuming its currentString is not wasting excessive space, T2 will return the same string that thread T1 is 
            //  in the middle of mutating.  
            //
            if(currentThread != Thread.CurrentThread)
 800289c:	429a      	cmp	r2, r3
 800289e:	9003      	str	r0, [sp, #12]
 80028a0:	9102      	str	r1, [sp, #8]
 80028a2:	d005      	beq.n	80028b0 <StringBuilder_ToString$8499+0x2c>
 80028a4:	e7ff      	b.n	80028a6 <StringBuilder_ToString$8499+0x22>
            {
                return String.InternalCopy( currentString );
 80028a6:	9803      	ldr	r0, [sp, #12]
 80028a8:	f000 fc12 	bl	80030d0 <String_InternalCopy$2582>
 80028ac:	9001      	str	r0, [sp, #4]
 80028ae:	e014      	b.n	80028da <StringBuilder_ToString$8499+0x56>
 80028b0:	9803      	ldr	r0, [sp, #12]
 80028b2:	6881      	ldr	r1, [r0, #8]
 80028b4:	68c2      	ldr	r2, [r0, #12]
            }

            if((2 * currentString.Length) < currentString.ArrayLength)
 80028b6:	0052      	lsls	r2, r2, #1
 80028b8:	428a      	cmp	r2, r1
 80028ba:	da05      	bge.n	80028c8 <StringBuilder_ToString$8499+0x44>
 80028bc:	e7ff      	b.n	80028be <StringBuilder_ToString$8499+0x3a>
            {
                return String.InternalCopy( currentString );
 80028be:	9803      	ldr	r0, [sp, #12]
 80028c0:	f000 fc06 	bl	80030d0 <String_InternalCopy$2582>
 80028c4:	9001      	str	r0, [sp, #4]
 80028c6:	e008      	b.n	80028da <StringBuilder_ToString$8499+0x56>
            }

            currentString.ClearPostNullChar();
 80028c8:	9803      	ldr	r0, [sp, #12]
 80028ca:	f000 fd71 	bl	80033b0 <String_ClearPostNullChar$2622>
 80028ce:	2000      	movs	r0, #0
 80028d0:	9902      	ldr	r1, [sp, #8]
 80028d2:	6088      	str	r0, [r1, #8]
            m_currentThread = null;
            return currentString;
 80028d4:	9803      	ldr	r0, [sp, #12]
 80028d6:	9001      	str	r0, [sp, #4]
 80028d8:	e7ff      	b.n	80028da <StringBuilder_ToString$8499+0x56>
        }
 80028da:	9801      	ldr	r0, [sp, #4]
 80028dc:	b004      	add	sp, #16
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	fffffe3c 	.word	0xfffffe3c
 80028e4:	17ffef3c 	.word	0x17ffef3c

080028e8 <StringBuilder_.ctor$8488>:
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	460a      	mov	r2, r1
 80028ee:	4603      	mov	r3, r0
        }

        // Create a new empty string builder (i.e., it represents String.Empty)
        // with the specified capacity.
        public StringBuilder( int capacity )
            : this( String.Empty, capacity )
 80028f0:	f8df c024 	ldr.w	ip, [pc, #36]	; 8002918 <StringBuilder_.ctor$8488+0x30>
 80028f4:	f8df e024 	ldr.w	lr, [pc, #36]	; 800291c <StringBuilder_.ctor$8488+0x34>
 80028f8:	44fe      	add	lr, pc
 80028fa:	44f4      	add	ip, lr
 80028fc:	f8dc c0d4 	ldr.w	ip, [ip, #212]	; 0xd4
 8002900:	9103      	str	r1, [sp, #12]
 8002902:	4661      	mov	r1, ip
 8002904:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8002908:	9202      	str	r2, [sp, #8]
 800290a:	4662      	mov	r2, ip
 800290c:	9301      	str	r3, [sp, #4]
 800290e:	f00b fc71 	bl	800e1f4 <StringBuilder_.ctor$8490>
 8002912:	b004      	add	sp, #16
 8002914:	bd80      	pop	{r7, pc}
 8002916:	46c0      	nop			; (mov r8, r8)
 8002918:	fffffe3c 	.word	0xfffffe3c
 800291c:	17ffeed8 	.word	0x17ffeed8

08002920 <StringBuilder_AppendFormat$8555>:
 8002920:	b510      	push	{r4, lr}
 8002922:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
 8002926:	460b      	mov	r3, r1
#endif
        }

        public StringBuilder AppendFormat( IFormatProvider provider, String format, params Object[] args )
        {
            if(format == null || args == null)
 8002928:	2900      	cmp	r1, #0
 800292a:	9387      	str	r3, [sp, #540]	; 0x21c
 800292c:	9086      	str	r0, [sp, #536]	; 0x218
 800292e:	9285      	str	r2, [sp, #532]	; 0x214
 8002930:	d004      	beq.n	800293c <StringBuilder_AppendFormat$8555+0x1c>
 8002932:	e7ff      	b.n	8002934 <StringBuilder_AppendFormat$8555+0x14>
 8002934:	9885      	ldr	r0, [sp, #532]	; 0x214
 8002936:	2800      	cmp	r0, #0
 8002938:	d115      	bne.n	8002966 <StringBuilder_AppendFormat$8555+0x46>
 800293a:	e7ff      	b.n	800293c <StringBuilder_AppendFormat$8555+0x1c>
            {
#if EXCEPTION_STRINGS
                throw new ArgumentNullException( (format == null) ? "format" : "args" );
#else
                throw new ArgumentNullException();
 800293c:	e7ff      	b.n	800293e <StringBuilder_AppendFormat$8555+0x1e>
 800293e:	f8df 077c 	ldr.w	r0, [pc, #1916]	; 80030bc <StringBuilder_AppendFormat$8555+0x79c>
 8002942:	f8df 1784 	ldr.w	r1, [pc, #1924]	; 80030c8 <StringBuilder_AppendFormat$8555+0x7a8>
 8002946:	4479      	add	r1, pc
 8002948:	4408      	add	r0, r1
 800294a:	f8df 2780 	ldr.w	r2, [pc, #1920]	; 80030cc <StringBuilder_AppendFormat$8555+0x7ac>
 800294e:	4411      	add	r1, r2
 8002950:	9084      	str	r0, [sp, #528]	; 0x210
 8002952:	f7fd ff35 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8002956:	9083      	str	r0, [sp, #524]	; 0x20c
 8002958:	f7fd ff7f 	bl	800085a <ArgumentNullException_.ctor$6069>
 800295c:	9884      	ldr	r0, [sp, #528]	; 0x210
 800295e:	9983      	ldr	r1, [sp, #524]	; 0x20c
 8002960:	f7fd ff84 	bl	800086c <TypeSystemManager_Throw$4954>
 8002964:	e7eb      	b.n	800293e <StringBuilder_AppendFormat$8555+0x1e>
 8002966:	9887      	ldr	r0, [sp, #540]	; 0x21c
 8002968:	68c1      	ldr	r1, [r0, #12]
#endif
            }
            char[] chars = format.ToCharArray( 0, format.Length );
 800296a:	f7ff fb9d 	bl	80020a8 <String_ToCharArray$2499>
 800296e:	4601      	mov	r1, r0
////            }
////
////        }
////
////        // Check values and set defaults
////        if(persistedString == null)
 8002970:	6880      	ldr	r0, [r0, #8]
            int pos = 0;
            int len = chars.Length;
            char ch = '\x0';

            ICustomFormatter cf = null;
            if(provider != null)
 8002972:	9182      	str	r1, [sp, #520]	; 0x208
 8002974:	9081      	str	r0, [sp, #516]	; 0x204
 8002976:	e7ff      	b.n	8002978 <StringBuilder_AppendFormat$8555+0x58>
 8002978:	2000      	movs	r0, #0
 800297a:	4601      	mov	r1, r0
                cf = (ICustomFormatter)provider.GetFormat( typeof( ICustomFormatter ) );
            }

            while(true)
            {
                int p = pos;
 800297c:	9080      	str	r0, [sp, #512]	; 0x200
 800297e:	917f      	str	r1, [sp, #508]	; 0x1fc
 8002980:	e7ff      	b.n	8002982 <StringBuilder_AppendFormat$8555+0x62>
 8002982:	987f      	ldr	r0, [sp, #508]	; 0x1fc
 8002984:	9980      	ldr	r1, [sp, #512]	; 0x200
 8002986:	4602      	mov	r2, r0
 8002988:	4603      	mov	r3, r0
                int i = pos;
 800298a:	907e      	str	r0, [sp, #504]	; 0x1f8
 800298c:	927d      	str	r2, [sp, #500]	; 0x1f4
 800298e:	917c      	str	r1, [sp, #496]	; 0x1f0
 8002990:	937b      	str	r3, [sp, #492]	; 0x1ec
 8002992:	e7ff      	b.n	8002994 <StringBuilder_AppendFormat$8555+0x74>
 8002994:	987b      	ldr	r0, [sp, #492]	; 0x1ec
 8002996:	997c      	ldr	r1, [sp, #496]	; 0x1f0
 8002998:	9a7d      	ldr	r2, [sp, #500]	; 0x1f4
                while(pos < len)
 800299a:	9b81      	ldr	r3, [sp, #516]	; 0x204
 800299c:	4298      	cmp	r0, r3
 800299e:	4684      	mov	ip, r0
 80029a0:	4696      	mov	lr, r2
 80029a2:	907a      	str	r0, [sp, #488]	; 0x1e8
 80029a4:	f8cd c1e4 	str.w	ip, [sp, #484]	; 0x1e4
 80029a8:	9278      	str	r2, [sp, #480]	; 0x1e0
 80029aa:	9177      	str	r1, [sp, #476]	; 0x1dc
 80029ac:	f8cd e1d8 	str.w	lr, [sp, #472]	; 0x1d8
 80029b0:	da11      	bge.n	80029d6 <StringBuilder_AppendFormat$8555+0xb6>
 80029b2:	e7ff      	b.n	80029b4 <StringBuilder_AppendFormat$8555+0x94>
                {
                    ch = chars[pos];
 80029b4:	9882      	ldr	r0, [sp, #520]	; 0x208
 80029b6:	997a      	ldr	r1, [sp, #488]	; 0x1e8
 80029b8:	eb00 0241 	add.w	r2, r0, r1, lsl #1
 80029bc:	8992      	ldrh	r2, [r2, #12]
 80029be:	4613      	mov	r3, r2

                    pos++;
 80029c0:	f101 0c01 	add.w	ip, r1, #1
                    if(ch == '}')
 80029c4:	2a7d      	cmp	r2, #125	; 0x7d
 80029c6:	4662      	mov	r2, ip
 80029c8:	f8cd c1d4 	str.w	ip, [sp, #468]	; 0x1d4
 80029cc:	9374      	str	r3, [sp, #464]	; 0x1d0
 80029ce:	9273      	str	r2, [sp, #460]	; 0x1cc
 80029d0:	f000 8313 	beq.w	8002ffa <StringBuilder_AppendFormat$8555+0x6da>
 80029d4:	e316      	b.n	8003004 <StringBuilder_AppendFormat$8555+0x6e4>
 80029d6:	9876      	ldr	r0, [sp, #472]	; 0x1d8
 80029d8:	9977      	ldr	r1, [sp, #476]	; 0x1dc
 80029da:	9a79      	ldr	r2, [sp, #484]	; 0x1e4
 80029dc:	9172      	str	r1, [sp, #456]	; 0x1c8
 80029de:	9071      	str	r0, [sp, #452]	; 0x1c4
 80029e0:	9270      	str	r2, [sp, #448]	; 0x1c0
 80029e2:	e7ff      	b.n	80029e4 <StringBuilder_AppendFormat$8555+0xc4>
 80029e4:	9870      	ldr	r0, [sp, #448]	; 0x1c0
 80029e6:	9972      	ldr	r1, [sp, #456]	; 0x1c8
 80029e8:	9a71      	ldr	r2, [sp, #452]	; 0x1c4
                        }
                    }

                    chars[i++] = ch;
                }
                if(i > p) Append( chars, p, i - p );
 80029ea:	9b7e      	ldr	r3, [sp, #504]	; 0x1f8
 80029ec:	429a      	cmp	r2, r3
 80029ee:	906f      	str	r0, [sp, #444]	; 0x1bc
 80029f0:	916e      	str	r1, [sp, #440]	; 0x1b8
 80029f2:	926d      	str	r2, [sp, #436]	; 0x1b4
 80029f4:	dd0a      	ble.n	8002a0c <StringBuilder_AppendFormat$8555+0xec>
 80029f6:	e7ff      	b.n	80029f8 <StringBuilder_AppendFormat$8555+0xd8>
 80029f8:	986d      	ldr	r0, [sp, #436]	; 0x1b4
 80029fa:	997e      	ldr	r1, [sp, #504]	; 0x1f8
 80029fc:	1a43      	subs	r3, r0, r1
 80029fe:	9886      	ldr	r0, [sp, #536]	; 0x218
 8002a00:	9982      	ldr	r1, [sp, #520]	; 0x208
 8002a02:	9a7e      	ldr	r2, [sp, #504]	; 0x1f8
 8002a04:	f00b fe1e 	bl	800e644 <StringBuilder_Append$8506>
 8002a08:	906c      	str	r0, [sp, #432]	; 0x1b0
 8002a0a:	e7ff      	b.n	8002a0c <StringBuilder_AppendFormat$8555+0xec>
                if(pos == len) break;
 8002a0c:	986f      	ldr	r0, [sp, #444]	; 0x1bc
 8002a0e:	9981      	ldr	r1, [sp, #516]	; 0x204
 8002a10:	4288      	cmp	r0, r1
 8002a12:	d104      	bne.n	8002a1e <StringBuilder_AppendFormat$8555+0xfe>
 8002a14:	e7ff      	b.n	8002a16 <StringBuilder_AppendFormat$8555+0xf6>
 8002a16:	9886      	ldr	r0, [sp, #536]	; 0x218
 8002a18:	f50d 7d0a 	add.w	sp, sp, #552	; 0x228
 8002a1c:	bd10      	pop	{r4, pc}
                pos++;
 8002a1e:	986f      	ldr	r0, [sp, #444]	; 0x1bc
 8002a20:	1c41      	adds	r1, r0, #1
 8002a22:	460a      	mov	r2, r1
                if(pos == len || (ch = chars[pos]) < '0' || ch > '9') FormatError();
 8002a24:	9b81      	ldr	r3, [sp, #516]	; 0x204
 8002a26:	4299      	cmp	r1, r3
 8002a28:	996e      	ldr	r1, [sp, #440]	; 0x1b8
 8002a2a:	926b      	str	r2, [sp, #428]	; 0x1ac
 8002a2c:	916a      	str	r1, [sp, #424]	; 0x1a8
 8002a2e:	d107      	bne.n	8002a40 <StringBuilder_AppendFormat$8555+0x120>
 8002a30:	e7ff      	b.n	8002a32 <StringBuilder_AppendFormat$8555+0x112>
 8002a32:	986a      	ldr	r0, [sp, #424]	; 0x1a8
 8002a34:	9069      	str	r0, [sp, #420]	; 0x1a4
 8002a36:	f00b feef 	bl	800e818 <StringBuilder_FormatError$8554>
 8002a3a:	9869      	ldr	r0, [sp, #420]	; 0x1a4
 8002a3c:	9068      	str	r0, [sp, #416]	; 0x1a0
 8002a3e:	e013      	b.n	8002a68 <StringBuilder_AppendFormat$8555+0x148>
 8002a40:	9882      	ldr	r0, [sp, #520]	; 0x208
 8002a42:	996b      	ldr	r1, [sp, #428]	; 0x1ac
 8002a44:	eb00 0241 	add.w	r2, r0, r1, lsl #1
 8002a48:	8992      	ldrh	r2, [r2, #12]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	2a30      	cmp	r2, #48	; 0x30
 8002a4e:	461a      	mov	r2, r3
 8002a50:	9367      	str	r3, [sp, #412]	; 0x19c
 8002a52:	926a      	str	r2, [sp, #424]	; 0x1a8
 8002a54:	dbed      	blt.n	8002a32 <StringBuilder_AppendFormat$8555+0x112>
 8002a56:	e7ff      	b.n	8002a58 <StringBuilder_AppendFormat$8555+0x138>
 8002a58:	9867      	ldr	r0, [sp, #412]	; 0x19c
 8002a5a:	b281      	uxth	r1, r0
 8002a5c:	2939      	cmp	r1, #57	; 0x39
 8002a5e:	9967      	ldr	r1, [sp, #412]	; 0x19c
 8002a60:	906a      	str	r0, [sp, #424]	; 0x1a8
 8002a62:	9168      	str	r1, [sp, #416]	; 0x1a0
 8002a64:	dce5      	bgt.n	8002a32 <StringBuilder_AppendFormat$8555+0x112>
 8002a66:	e7ff      	b.n	8002a68 <StringBuilder_AppendFormat$8555+0x148>
 8002a68:	9868      	ldr	r0, [sp, #416]	; 0x1a0
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	9a6b      	ldr	r2, [sp, #428]	; 0x1ac
                int index = 0;
 8002a6e:	9166      	str	r1, [sp, #408]	; 0x198
 8002a70:	9065      	str	r0, [sp, #404]	; 0x194
 8002a72:	9264      	str	r2, [sp, #400]	; 0x190
 8002a74:	e7ff      	b.n	8002a76 <StringBuilder_AppendFormat$8555+0x156>
 8002a76:	9864      	ldr	r0, [sp, #400]	; 0x190
 8002a78:	9965      	ldr	r1, [sp, #404]	; 0x194
 8002a7a:	9a66      	ldr	r2, [sp, #408]	; 0x198
                do
                {
                    index = index * 10 + ch - '0';
 8002a7c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002a80:	b289      	uxth	r1, r1
 8002a82:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8002a86:	3930      	subs	r1, #48	; 0x30
                    pos++;
 8002a88:	3001      	adds	r0, #1
 8002a8a:	4602      	mov	r2, r0
                    if(pos == len) FormatError();
 8002a8c:	9b81      	ldr	r3, [sp, #516]	; 0x204
 8002a8e:	4298      	cmp	r0, r3
 8002a90:	9163      	str	r1, [sp, #396]	; 0x18c
 8002a92:	9262      	str	r2, [sp, #392]	; 0x188
 8002a94:	d103      	bne.n	8002a9e <StringBuilder_AppendFormat$8555+0x17e>
 8002a96:	e7ff      	b.n	8002a98 <StringBuilder_AppendFormat$8555+0x178>
 8002a98:	f00b febe 	bl	800e818 <StringBuilder_FormatError$8554>
 8002a9c:	e7ff      	b.n	8002a9e <StringBuilder_AppendFormat$8555+0x17e>
                    ch = chars[pos];
 8002a9e:	9882      	ldr	r0, [sp, #520]	; 0x208
 8002aa0:	9962      	ldr	r1, [sp, #392]	; 0x188
 8002aa2:	eb00 0241 	add.w	r2, r0, r1, lsl #1
 8002aa6:	8992      	ldrh	r2, [r2, #12]
 8002aa8:	4613      	mov	r3, r2
                } while(ch >= '0' && ch <= '9' && index < 1000000);
 8002aaa:	2a2f      	cmp	r2, #47	; 0x2f
 8002aac:	461a      	mov	r2, r3
 8002aae:	f8dd c18c 	ldr.w	ip, [sp, #396]	; 0x18c
 8002ab2:	9161      	str	r1, [sp, #388]	; 0x184
 8002ab4:	9360      	str	r3, [sp, #384]	; 0x180
 8002ab6:	925f      	str	r2, [sp, #380]	; 0x17c
 8002ab8:	f8cd c178 	str.w	ip, [sp, #376]	; 0x178
 8002abc:	dc16      	bgt.n	8002aec <StringBuilder_AppendFormat$8555+0x1cc>
 8002abe:	e7ff      	b.n	8002ac0 <StringBuilder_AppendFormat$8555+0x1a0>
 8002ac0:	985e      	ldr	r0, [sp, #376]	; 0x178
 8002ac2:	9961      	ldr	r1, [sp, #388]	; 0x184
 8002ac4:	9a5f      	ldr	r2, [sp, #380]	; 0x17c
////            }
////
////        }
////
////        // Check values and set defaults
////        if(persistedString == null)
 8002ac6:	9b85      	ldr	r3, [sp, #532]	; 0x214
 8002ac8:	f8d3 c008 	ldr.w	ip, [r3, #8]
                    index = index * 10 + ch - '0';
                    pos++;
                    if(pos == len) FormatError();
                    ch = chars[pos];
                } while(ch >= '0' && ch <= '9' && index < 1000000);
                if(index >= args.Length) 
 8002acc:	4560      	cmp	r0, ip
 8002ace:	905d      	str	r0, [sp, #372]	; 0x174
 8002ad0:	915c      	str	r1, [sp, #368]	; 0x170
 8002ad2:	925b      	str	r2, [sp, #364]	; 0x16c
 8002ad4:	da09      	bge.n	8002aea <StringBuilder_AppendFormat$8555+0x1ca>
 8002ad6:	e7ff      	b.n	8002ad8 <StringBuilder_AppendFormat$8555+0x1b8>
#if EXCEPTION_STRINGS
                    throw new FormatException( Environment.GetResourceString( "Format_IndexOutOfRange" ) );
#else
                    throw new FormatException();
#endif
                while(pos < len && (ch = chars[pos]) == ' ') pos++;
 8002ad8:	9882      	ldr	r0, [sp, #520]	; 0x208
 8002ada:	f100 010c 	add.w	r1, r0, #12
 8002ade:	9a5b      	ldr	r2, [sp, #364]	; 0x16c
 8002ae0:	9b5c      	ldr	r3, [sp, #368]	; 0x170
 8002ae2:	915a      	str	r1, [sp, #360]	; 0x168
 8002ae4:	9259      	str	r2, [sp, #356]	; 0x164
 8002ae6:	9358      	str	r3, [sp, #352]	; 0x160
 8002ae8:	e035      	b.n	8002b56 <StringBuilder_AppendFormat$8555+0x236>
                } while(ch >= '0' && ch <= '9' && index < 1000000);
                if(index >= args.Length) 
#if EXCEPTION_STRINGS
                    throw new FormatException( Environment.GetResourceString( "Format_IndexOutOfRange" ) );
#else
                    throw new FormatException();
 8002aea:	e020      	b.n	8002b2e <StringBuilder_AppendFormat$8555+0x20e>
                {
                    index = index * 10 + ch - '0';
                    pos++;
                    if(pos == len) FormatError();
                    ch = chars[pos];
                } while(ch >= '0' && ch <= '9' && index < 1000000);
 8002aec:	9860      	ldr	r0, [sp, #384]	; 0x180
 8002aee:	b281      	uxth	r1, r0
 8002af0:	2939      	cmp	r1, #57	; 0x39
 8002af2:	9962      	ldr	r1, [sp, #392]	; 0x188
 8002af4:	9a63      	ldr	r2, [sp, #396]	; 0x18c
 8002af6:	905f      	str	r0, [sp, #380]	; 0x17c
 8002af8:	9161      	str	r1, [sp, #388]	; 0x184
 8002afa:	925e      	str	r2, [sp, #376]	; 0x178
 8002afc:	dce0      	bgt.n	8002ac0 <StringBuilder_AppendFormat$8555+0x1a0>
 8002afe:	e7ff      	b.n	8002b00 <StringBuilder_AppendFormat$8555+0x1e0>
 8002b00:	f244 2040 	movw	r0, #16960	; 0x4240
 8002b04:	f2c0 000f 	movt	r0, #15
 8002b08:	9963      	ldr	r1, [sp, #396]	; 0x18c
 8002b0a:	4281      	cmp	r1, r0
 8002b0c:	9860      	ldr	r0, [sp, #384]	; 0x180
 8002b0e:	9a62      	ldr	r2, [sp, #392]	; 0x188
 8002b10:	9b60      	ldr	r3, [sp, #384]	; 0x180
 8002b12:	f8dd c188 	ldr.w	ip, [sp, #392]	; 0x188
 8002b16:	f8dd e18c 	ldr.w	lr, [sp, #396]	; 0x18c
 8002b1a:	9166      	str	r1, [sp, #408]	; 0x198
 8002b1c:	9065      	str	r0, [sp, #404]	; 0x194
 8002b1e:	9264      	str	r2, [sp, #400]	; 0x190
 8002b20:	935f      	str	r3, [sp, #380]	; 0x17c
 8002b22:	f8cd c184 	str.w	ip, [sp, #388]	; 0x184
 8002b26:	f8cd e178 	str.w	lr, [sp, #376]	; 0x178
 8002b2a:	dba4      	blt.n	8002a76 <StringBuilder_AppendFormat$8555+0x156>
 8002b2c:	e7c8      	b.n	8002ac0 <StringBuilder_AppendFormat$8555+0x1a0>
                if(index >= args.Length) 
#if EXCEPTION_STRINGS
                    throw new FormatException( Environment.GetResourceString( "Format_IndexOutOfRange" ) );
#else
                    throw new FormatException();
 8002b2e:	f8df 058c 	ldr.w	r0, [pc, #1420]	; 80030bc <StringBuilder_AppendFormat$8555+0x79c>
 8002b32:	f8df 158c 	ldr.w	r1, [pc, #1420]	; 80030c0 <StringBuilder_AppendFormat$8555+0x7a0>
 8002b36:	4479      	add	r1, pc
 8002b38:	4408      	add	r0, r1
 8002b3a:	f8df 2588 	ldr.w	r2, [pc, #1416]	; 80030c4 <StringBuilder_AppendFormat$8555+0x7a4>
 8002b3e:	4411      	add	r1, r2
 8002b40:	9057      	str	r0, [sp, #348]	; 0x15c
 8002b42:	f7fd fe3d 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8002b46:	9056      	str	r0, [sp, #344]	; 0x158
 8002b48:	f008 fba0 	bl	800b28c <FormatException_.ctor$7045>
 8002b4c:	9857      	ldr	r0, [sp, #348]	; 0x15c
 8002b4e:	9956      	ldr	r1, [sp, #344]	; 0x158
 8002b50:	f7fd fe8c 	bl	800086c <TypeSystemManager_Throw$4954>
 8002b54:	e7eb      	b.n	8002b2e <StringBuilder_AppendFormat$8555+0x20e>
 8002b56:	9858      	ldr	r0, [sp, #352]	; 0x160
 8002b58:	9959      	ldr	r1, [sp, #356]	; 0x164
#endif
                while(pos < len && (ch = chars[pos]) == ' ') pos++;
 8002b5a:	9a81      	ldr	r2, [sp, #516]	; 0x204
 8002b5c:	4290      	cmp	r0, r2
 8002b5e:	4603      	mov	r3, r0
 8002b60:	9055      	str	r0, [sp, #340]	; 0x154
 8002b62:	9354      	str	r3, [sp, #336]	; 0x150
 8002b64:	9153      	str	r1, [sp, #332]	; 0x14c
 8002b66:	db0f      	blt.n	8002b88 <StringBuilder_AppendFormat$8555+0x268>
 8002b68:	e7ff      	b.n	8002b6a <StringBuilder_AppendFormat$8555+0x24a>
 8002b6a:	9853      	ldr	r0, [sp, #332]	; 0x14c
 8002b6c:	9954      	ldr	r1, [sp, #336]	; 0x150
 8002b6e:	b282      	uxth	r2, r0
 8002b70:	2300      	movs	r3, #0
 8002b72:	469c      	mov	ip, r3
                bool leftJustify = false;
                int width = 0;
                if(ch == ',')
 8002b74:	2a2c      	cmp	r2, #44	; 0x2c
 8002b76:	460a      	mov	r2, r1
 8002b78:	f8cd c148 	str.w	ip, [sp, #328]	; 0x148
 8002b7c:	9151      	str	r1, [sp, #324]	; 0x144
 8002b7e:	9350      	str	r3, [sp, #320]	; 0x140
 8002b80:	904f      	str	r0, [sp, #316]	; 0x13c
 8002b82:	924e      	str	r2, [sp, #312]	; 0x138
 8002b84:	d012      	beq.n	8002bac <StringBuilder_AppendFormat$8555+0x28c>
 8002b86:	e1fb      	b.n	8002f80 <StringBuilder_AppendFormat$8555+0x660>
#if EXCEPTION_STRINGS
                    throw new FormatException( Environment.GetResourceString( "Format_IndexOutOfRange" ) );
#else
                    throw new FormatException();
#endif
                while(pos < len && (ch = chars[pos]) == ' ') pos++;
 8002b88:	985a      	ldr	r0, [sp, #360]	; 0x168
 8002b8a:	9955      	ldr	r1, [sp, #340]	; 0x154
 8002b8c:	f830 2011 	ldrh.w	r2, [r0, r1, lsl #1]
 8002b90:	4613      	mov	r3, r2
 8002b92:	2a20      	cmp	r2, #32
 8002b94:	461a      	mov	r2, r3
 8002b96:	9154      	str	r1, [sp, #336]	; 0x150
 8002b98:	934d      	str	r3, [sp, #308]	; 0x134
 8002b9a:	9253      	str	r2, [sp, #332]	; 0x14c
 8002b9c:	d1e5      	bne.n	8002b6a <StringBuilder_AppendFormat$8555+0x24a>
 8002b9e:	e7ff      	b.n	8002ba0 <StringBuilder_AppendFormat$8555+0x280>
 8002ba0:	9855      	ldr	r0, [sp, #340]	; 0x154
 8002ba2:	1c41      	adds	r1, r0, #1
 8002ba4:	9a4d      	ldr	r2, [sp, #308]	; 0x134
 8002ba6:	9259      	str	r2, [sp, #356]	; 0x164
 8002ba8:	9158      	str	r1, [sp, #352]	; 0x160
 8002baa:	e7d4      	b.n	8002b56 <StringBuilder_AppendFormat$8555+0x236>
                bool leftJustify = false;
                int width = 0;
                if(ch == ',')
                {
                    pos++;
 8002bac:	9851      	ldr	r0, [sp, #324]	; 0x144
 8002bae:	1c41      	adds	r1, r0, #1
                    while(pos < len && chars[pos] == ' ') pos++;
 8002bb0:	9a82      	ldr	r2, [sp, #520]	; 0x208
 8002bb2:	f102 030c 	add.w	r3, r2, #12
                while(pos < len && (ch = chars[pos]) == ' ') pos++;
                bool leftJustify = false;
                int width = 0;
                if(ch == ',')
                {
                    pos++;
 8002bb6:	934c      	str	r3, [sp, #304]	; 0x130
 8002bb8:	914b      	str	r1, [sp, #300]	; 0x12c
 8002bba:	e166      	b.n	8002e8a <StringBuilder_AppendFormat$8555+0x56a>
 8002bbc:	984a      	ldr	r0, [sp, #296]	; 0x128
 8002bbe:	9949      	ldr	r1, [sp, #292]	; 0x124
                        if(pos == len) FormatError();
                        ch = chars[pos];
                    } while(ch >= '0' && ch <= '9' && width < 1000000);
                }

                while(pos < len && (ch = chars[pos]) == ' ') pos++;
 8002bc0:	9a81      	ldr	r2, [sp, #516]	; 0x204
 8002bc2:	4290      	cmp	r0, r2
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	9048      	str	r0, [sp, #288]	; 0x120
 8002bc8:	9347      	str	r3, [sp, #284]	; 0x11c
 8002bca:	9146      	str	r1, [sp, #280]	; 0x118
 8002bcc:	db17      	blt.n	8002bfe <StringBuilder_AppendFormat$8555+0x2de>
 8002bce:	e7ff      	b.n	8002bd0 <StringBuilder_AppendFormat$8555+0x2b0>
 8002bd0:	9846      	ldr	r0, [sp, #280]	; 0x118
 8002bd2:	9947      	ldr	r1, [sp, #284]	; 0x11c
                Object arg = args[index];
 8002bd4:	9a85      	ldr	r2, [sp, #532]	; 0x214
 8002bd6:	9b5d      	ldr	r3, [sp, #372]	; 0x174
 8002bd8:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 8002bdc:	f8dc c00c 	ldr.w	ip, [ip, #12]
 8002be0:	fa1f fe80 	uxth.w	lr, r0
 8002be4:	2400      	movs	r4, #0
                String fmt = null;
                if(ch == ':')
 8002be6:	f1be 0f3a 	cmp.w	lr, #58	; 0x3a
 8002bea:	468e      	mov	lr, r1
 8002bec:	f8cd e114 	str.w	lr, [sp, #276]	; 0x114
 8002bf0:	9144      	str	r1, [sp, #272]	; 0x110
 8002bf2:	f8cd c10c 	str.w	ip, [sp, #268]	; 0x10c
 8002bf6:	9042      	str	r0, [sp, #264]	; 0x108
 8002bf8:	9441      	str	r4, [sp, #260]	; 0x104
 8002bfa:	d012      	beq.n	8002c22 <StringBuilder_AppendFormat$8555+0x302>
 8002bfc:	e01f      	b.n	8002c3e <StringBuilder_AppendFormat$8555+0x31e>
                        if(pos == len) FormatError();
                        ch = chars[pos];
                    } while(ch >= '0' && ch <= '9' && width < 1000000);
                }

                while(pos < len && (ch = chars[pos]) == ' ') pos++;
 8002bfe:	9840      	ldr	r0, [sp, #256]	; 0x100
 8002c00:	9948      	ldr	r1, [sp, #288]	; 0x120
 8002c02:	f830 2011 	ldrh.w	r2, [r0, r1, lsl #1]
 8002c06:	4613      	mov	r3, r2
 8002c08:	2a20      	cmp	r2, #32
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	9147      	str	r1, [sp, #284]	; 0x11c
 8002c0e:	933f      	str	r3, [sp, #252]	; 0xfc
 8002c10:	9246      	str	r2, [sp, #280]	; 0x118
 8002c12:	d1dd      	bne.n	8002bd0 <StringBuilder_AppendFormat$8555+0x2b0>
 8002c14:	e7ff      	b.n	8002c16 <StringBuilder_AppendFormat$8555+0x2f6>
 8002c16:	9848      	ldr	r0, [sp, #288]	; 0x120
 8002c18:	1c41      	adds	r1, r0, #1
 8002c1a:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8002c1c:	9249      	str	r2, [sp, #292]	; 0x124
 8002c1e:	914a      	str	r1, [sp, #296]	; 0x128
 8002c20:	e7cc      	b.n	8002bbc <StringBuilder_AppendFormat$8555+0x29c>
                Object arg = args[index];
                String fmt = null;
                if(ch == ':')
                {
                    pos++;
 8002c22:	9844      	ldr	r0, [sp, #272]	; 0x110
 8002c24:	1c41      	adds	r1, r0, #1
                            else
                                FormatError();
                        }
                        else if(ch == '}')
                        {
                            if(pos < len && chars[pos] == '}')  // Treat as escape character for }}
 8002c26:	9a82      	ldr	r2, [sp, #520]	; 0x208
 8002c28:	f102 030c 	add.w	r3, r2, #12
 8002c2c:	468c      	mov	ip, r1
 8002c2e:	468e      	mov	lr, r1
                String fmt = null;
                if(ch == ':')
                {
                    pos++;
                    p = pos;
                    i = pos;
 8002c30:	913e      	str	r1, [sp, #248]	; 0xf8
 8002c32:	933d      	str	r3, [sp, #244]	; 0xf4
 8002c34:	f8cd c0f0 	str.w	ip, [sp, #240]	; 0xf0
 8002c38:	f8cd e0ec 	str.w	lr, [sp, #236]	; 0xec
 8002c3c:	e09e      	b.n	8002d7c <StringBuilder_AppendFormat$8555+0x45c>
 8002c3e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8002c40:	9945      	ldr	r1, [sp, #276]	; 0x114
 8002c42:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8002c44:	b293      	uxth	r3, r2

                        chars[i++] = ch;
                    }
                    if(i > p) fmt = new String( chars, p, i - p );
                }
                if(ch != '}') FormatError();
 8002c46:	2b7d      	cmp	r3, #125	; 0x7d
 8002c48:	903a      	str	r0, [sp, #232]	; 0xe8
 8002c4a:	9139      	str	r1, [sp, #228]	; 0xe4
 8002c4c:	9238      	str	r2, [sp, #224]	; 0xe0
 8002c4e:	d003      	beq.n	8002c58 <StringBuilder_AppendFormat$8555+0x338>
 8002c50:	e7ff      	b.n	8002c52 <StringBuilder_AppendFormat$8555+0x332>
 8002c52:	f00b fde1 	bl	800e818 <StringBuilder_FormatError$8554>
 8002c56:	e7ff      	b.n	8002c58 <StringBuilder_AppendFormat$8555+0x338>
                pos++;
 8002c58:	9839      	ldr	r0, [sp, #228]	; 0xe4
 8002c5a:	1c41      	adds	r1, r0, #1
                String s = null;
                if(cf != null)
 8002c5c:	9137      	str	r1, [sp, #220]	; 0xdc
 8002c5e:	e7ff      	b.n	8002c60 <StringBuilder_AppendFormat$8555+0x340>
 8002c60:	2000      	movs	r0, #0
 8002c62:	4601      	mov	r1, r0
                {
                    s = cf.Format( fmt, arg, provider );
                }

                if(s == null)
 8002c64:	2800      	cmp	r0, #0
 8002c66:	4608      	mov	r0, r1
 8002c68:	9036      	str	r0, [sp, #216]	; 0xd8
 8002c6a:	9135      	str	r1, [sp, #212]	; 0xd4
 8002c6c:	d106      	bne.n	8002c7c <StringBuilder_AppendFormat$8555+0x35c>
 8002c6e:	e7ff      	b.n	8002c70 <StringBuilder_AppendFormat$8555+0x350>
                {
                    if(arg is IFormattable)
 8002c70:	9843      	ldr	r0, [sp, #268]	; 0x10c
 8002c72:	f006 f941 	bl	8008ef8 <TypeSystemManager_CastToInterfaceNoThrow$4953>
 8002c76:	2800      	cmp	r0, #0
 8002c78:	d14a      	bne.n	8002d10 <StringBuilder_AppendFormat$8555+0x3f0>
 8002c7a:	e059      	b.n	8002d30 <StringBuilder_AppendFormat$8555+0x410>
                    {
                        s = arg.ToString();
                    }
                }

                if(s == null) s = String.Empty;
 8002c7c:	9835      	ldr	r0, [sp, #212]	; 0xd4
 8002c7e:	9936      	ldr	r1, [sp, #216]	; 0xd8
 8002c80:	2800      	cmp	r0, #0
 8002c82:	9134      	str	r1, [sp, #208]	; 0xd0
 8002c84:	d10a      	bne.n	8002c9c <StringBuilder_AppendFormat$8555+0x37c>
 8002c86:	e7ff      	b.n	8002c88 <StringBuilder_AppendFormat$8555+0x368>
 8002c88:	f8df 0418 	ldr.w	r0, [pc, #1048]	; 80030a4 <StringBuilder_AppendFormat$8555+0x784>
 8002c8c:	f8df 1418 	ldr.w	r1, [pc, #1048]	; 80030a8 <StringBuilder_AppendFormat$8555+0x788>
 8002c90:	4479      	add	r1, pc
 8002c92:	4408      	add	r0, r1
 8002c94:	f8d0 00d4 	ldr.w	r0, [r0, #212]	; 0xd4
 8002c98:	9034      	str	r0, [sp, #208]	; 0xd0
 8002c9a:	e7ff      	b.n	8002c9c <StringBuilder_AppendFormat$8555+0x37c>
 8002c9c:	9834      	ldr	r0, [sp, #208]	; 0xd0
 8002c9e:	68c1      	ldr	r1, [r0, #12]
                int pad = width - s.Length;
 8002ca0:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8002ca2:	1a51      	subs	r1, r2, r1
                if(!leftJustify && pad > 0) Append( ' ', pad );
 8002ca4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8002ca6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002caa:	9031      	str	r0, [sp, #196]	; 0xc4
 8002cac:	9130      	str	r1, [sp, #192]	; 0xc0
 8002cae:	d00a      	beq.n	8002cc6 <StringBuilder_AppendFormat$8555+0x3a6>
 8002cb0:	e7ff      	b.n	8002cb2 <StringBuilder_AppendFormat$8555+0x392>
                Append( s );
 8002cb2:	9886      	ldr	r0, [sp, #536]	; 0x218
 8002cb4:	9931      	ldr	r1, [sp, #196]	; 0xc4
 8002cb6:	f00a f8a1 	bl	800cdfc <StringBuilder_Append$8507>
                if(leftJustify && pad > 0) Append( ' ', pad );
 8002cba:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8002cbc:	f011 0fff 	tst.w	r1, #255	; 0xff
 8002cc0:	902f      	str	r0, [sp, #188]	; 0xbc
 8002cc2:	d110      	bne.n	8002ce6 <StringBuilder_AppendFormat$8555+0x3c6>
 8002cc4:	e013      	b.n	8002cee <StringBuilder_AppendFormat$8555+0x3ce>
                    }
                }

                if(s == null) s = String.Empty;
                int pad = width - s.Length;
                if(!leftJustify && pad > 0) Append( ' ', pad );
 8002cc6:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8002cc8:	2801      	cmp	r0, #1
 8002cca:	dbf2      	blt.n	8002cb2 <StringBuilder_AppendFormat$8555+0x392>
 8002ccc:	e7ff      	b.n	8002cce <StringBuilder_AppendFormat$8555+0x3ae>
 8002cce:	f8df 03dc 	ldr.w	r0, [pc, #988]	; 80030ac <StringBuilder_AppendFormat$8555+0x78c>
 8002cd2:	f8df 13dc 	ldr.w	r1, [pc, #988]	; 80030b0 <StringBuilder_AppendFormat$8555+0x790>
 8002cd6:	4479      	add	r1, pc
 8002cd8:	5a41      	ldrh	r1, [r0, r1]
 8002cda:	9886      	ldr	r0, [sp, #536]	; 0x218
 8002cdc:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8002cde:	f00b fb99 	bl	800e414 <StringBuilder_Append$8505>
 8002ce2:	902e      	str	r0, [sp, #184]	; 0xb8
 8002ce4:	e7e5      	b.n	8002cb2 <StringBuilder_AppendFormat$8555+0x392>
                Append( s );
                if(leftJustify && pad > 0) Append( ' ', pad );
 8002ce6:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8002ce8:	2800      	cmp	r0, #0
 8002cea:	dc05      	bgt.n	8002cf8 <StringBuilder_AppendFormat$8555+0x3d8>
 8002cec:	e7ff      	b.n	8002cee <StringBuilder_AppendFormat$8555+0x3ce>
 8002cee:	9838      	ldr	r0, [sp, #224]	; 0xe0
 8002cf0:	9937      	ldr	r1, [sp, #220]	; 0xdc
            }
 8002cf2:	9080      	str	r0, [sp, #512]	; 0x200
 8002cf4:	917f      	str	r1, [sp, #508]	; 0x1fc
 8002cf6:	e644      	b.n	8002982 <StringBuilder_AppendFormat$8555+0x62>
 8002cf8:	f8df 03b8 	ldr.w	r0, [pc, #952]	; 80030b4 <StringBuilder_AppendFormat$8555+0x794>
 8002cfc:	f8df 13b8 	ldr.w	r1, [pc, #952]	; 80030b8 <StringBuilder_AppendFormat$8555+0x798>
 8002d00:	4479      	add	r1, pc

                if(s == null) s = String.Empty;
                int pad = width - s.Length;
                if(!leftJustify && pad > 0) Append( ' ', pad );
                Append( s );
                if(leftJustify && pad > 0) Append( ' ', pad );
 8002d02:	5a41      	ldrh	r1, [r0, r1]
 8002d04:	9886      	ldr	r0, [sp, #536]	; 0x218
 8002d06:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8002d08:	f00b fb84 	bl	800e414 <StringBuilder_Append$8505>
 8002d0c:	902d      	str	r0, [sp, #180]	; 0xb4
 8002d0e:	e7ee      	b.n	8002cee <StringBuilder_AppendFormat$8555+0x3ce>

                if(s == null)
                {
                    if(arg is IFormattable)
                    {
                        s = ((IFormattable)arg).ToString( fmt, provider );
 8002d10:	9843      	ldr	r0, [sp, #268]	; 0x10c
 8002d12:	f006 f8c1 	bl	8008e98 <TypeSystemManager_CastToInterface$4952>
 8002d16:	902c      	str	r0, [sp, #176]	; 0xb0
 8002d18:	f003 f812 	bl	8005d40 <VTable_GetInterface$3672>
 8002d1c:	68c0      	ldr	r0, [r0, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8002d22:	902b      	str	r0, [sp, #172]	; 0xac
 8002d24:	4608      	mov	r0, r1
 8002d26:	993a      	ldr	r1, [sp, #232]	; 0xe8
 8002d28:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8002d2a:	4798      	blx	r3
                    }
 8002d2c:	902a      	str	r0, [sp, #168]	; 0xa8
 8002d2e:	e020      	b.n	8002d72 <StringBuilder_AppendFormat$8555+0x452>
                    else if(arg != null)
 8002d30:	9843      	ldr	r0, [sp, #268]	; 0x10c
 8002d32:	2800      	cmp	r0, #0
 8002d34:	d103      	bne.n	8002d3e <StringBuilder_AppendFormat$8555+0x41e>
 8002d36:	e7ff      	b.n	8002d38 <StringBuilder_AppendFormat$8555+0x418>
 8002d38:	2000      	movs	r0, #0
 8002d3a:	902a      	str	r0, [sp, #168]	; 0xa8
 8002d3c:	e019      	b.n	8002d72 <StringBuilder_AppendFormat$8555+0x452>
        public StringBuilder()
            : this( DefaultCapacity )
        {
        }

        // Create a new empty string builder (i.e., it represents String.Empty)
 8002d3e:	9843      	ldr	r0, [sp, #268]	; 0x10c
 8002d40:	f100 0108 	add.w	r1, r0, #8
 8002d44:	9188      	str	r1, [sp, #544]	; 0x220
 8002d46:	2100      	movs	r1, #0
 8002d48:	9189      	str	r1, [sp, #548]	; 0x224
            if(value == null)
            {
                value = String.Empty;
            }

            if(startIndex > value.Length - length)
 8002d4a:	9a88      	ldr	r2, [sp, #544]	; 0x220
            : this( value, DefaultCapacity )
        {
        }

        // Creates a new string builder from the specified string with the specified 
        // capacity.  If value is a null String (i.e., if it represents 
 8002d4c:	3a08      	subs	r2, #8
 8002d4e:	9189      	str	r1, [sp, #548]	; 0x224
 8002d50:	a989      	add	r1, sp, #548	; 0x224
 8002d52:	f1a1 0008 	sub.w	r0, r1, #8
 8002d56:	4611      	mov	r1, r2
 8002d58:	f7fd fdb0 	bl	80008bc <UIntPtr_.ctor$2864>
        public StringBuilder()
            : this( DefaultCapacity )
        {
        }

        // Create a new empty string builder (i.e., it represents String.Empty)
 8002d5c:	9889      	ldr	r0, [sp, #548]	; 0x224
////
////        // Assign
////        m_MaxCapacity = persistedMaxCapacity;
////        m_StringValue = String.GetStringForStringBuilder( persistedString, 0, persistedString.Length, persistedCapacity );
////        VerifyClassInvariant();
////    }
 8002d5e:	6840      	ldr	r0, [r0, #4]
                    {
                        s = ((IFormattable)arg).ToString( fmt, provider );
                    }
                    else if(arg != null)
                    {
                        s = arg.ToString();
 8002d60:	69c0      	ldr	r0, [r0, #28]
 8002d62:	68c0      	ldr	r0, [r0, #12]
 8002d64:	9943      	ldr	r1, [sp, #268]	; 0x10c
 8002d66:	9029      	str	r0, [sp, #164]	; 0xa4
 8002d68:	4608      	mov	r0, r1
 8002d6a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8002d6c:	4790      	blx	r2
                    }
 8002d6e:	902a      	str	r0, [sp, #168]	; 0xa8
 8002d70:	e7ff      	b.n	8002d72 <StringBuilder_AppendFormat$8555+0x452>
                }

                if(s == null) s = String.Empty;
 8002d72:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8002d74:	992a      	ldr	r1, [sp, #168]	; 0xa8
                    }
                    else if(arg != null)
                    {
                        s = arg.ToString();
                    }
                }
 8002d76:	9136      	str	r1, [sp, #216]	; 0xd8
 8002d78:	9035      	str	r0, [sp, #212]	; 0xd4
 8002d7a:	e77f      	b.n	8002c7c <StringBuilder_AppendFormat$8555+0x35c>
 8002d7c:	983b      	ldr	r0, [sp, #236]	; 0xec
 8002d7e:	993c      	ldr	r1, [sp, #240]	; 0xf0
                    pos++;
                    p = pos;
                    i = pos;
                    while(true)
                    {
                        if(pos == len) FormatError();
 8002d80:	9a81      	ldr	r2, [sp, #516]	; 0x204
 8002d82:	4290      	cmp	r0, r2
 8002d84:	9028      	str	r0, [sp, #160]	; 0xa0
 8002d86:	9127      	str	r1, [sp, #156]	; 0x9c
 8002d88:	d103      	bne.n	8002d92 <StringBuilder_AppendFormat$8555+0x472>
 8002d8a:	e7ff      	b.n	8002d8c <StringBuilder_AppendFormat$8555+0x46c>
 8002d8c:	f00b fd44 	bl	800e818 <StringBuilder_FormatError$8554>
 8002d90:	e7ff      	b.n	8002d92 <StringBuilder_AppendFormat$8555+0x472>
                        ch = chars[pos];
 8002d92:	9882      	ldr	r0, [sp, #520]	; 0x208
 8002d94:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8002d96:	eb00 0241 	add.w	r2, r0, r1, lsl #1
 8002d9a:	8992      	ldrh	r2, [r2, #12]
 8002d9c:	4613      	mov	r3, r2
                        pos++;
 8002d9e:	f101 0c01 	add.w	ip, r1, #1
                        if(ch == '{')
 8002da2:	2a7b      	cmp	r2, #123	; 0x7b
 8002da4:	f8cd c098 	str.w	ip, [sp, #152]	; 0x98
 8002da8:	9325      	str	r3, [sp, #148]	; 0x94
 8002daa:	d105      	bne.n	8002db8 <StringBuilder_AppendFormat$8555+0x498>
 8002dac:	e7ff      	b.n	8002dae <StringBuilder_AppendFormat$8555+0x48e>
                        {
                            if(pos < len && chars[pos] == '{')  // Treat as escape character for {{
 8002dae:	9826      	ldr	r0, [sp, #152]	; 0x98
 8002db0:	9981      	ldr	r1, [sp, #516]	; 0x204
 8002db2:	4288      	cmp	r0, r1
 8002db4:	da55      	bge.n	8002e62 <StringBuilder_AppendFormat$8555+0x542>
 8002db6:	e059      	b.n	8002e6c <StringBuilder_AppendFormat$8555+0x54c>
 8002db8:	9825      	ldr	r0, [sp, #148]	; 0x94
 8002dba:	b281      	uxth	r1, r0
                                pos++;
                            else
                                FormatError();
                        }
                        else if(ch == '}')
 8002dbc:	297d      	cmp	r1, #125	; 0x7d
 8002dbe:	9926      	ldr	r1, [sp, #152]	; 0x98
 8002dc0:	9124      	str	r1, [sp, #144]	; 0x90
 8002dc2:	d10a      	bne.n	8002dda <StringBuilder_AppendFormat$8555+0x4ba>
 8002dc4:	e7ff      	b.n	8002dc6 <StringBuilder_AppendFormat$8555+0x4a6>
                        {
                            if(pos < len && chars[pos] == '}')  // Treat as escape character for }}
 8002dc6:	9826      	ldr	r0, [sp, #152]	; 0x98
 8002dc8:	9981      	ldr	r1, [sp, #516]	; 0x204
 8002dca:	4288      	cmp	r0, r1
 8002dcc:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8002dce:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8002dd0:	9023      	str	r0, [sp, #140]	; 0x8c
 8002dd2:	9222      	str	r2, [sp, #136]	; 0x88
 8002dd4:	9321      	str	r3, [sp, #132]	; 0x84
 8002dd6:	da0d      	bge.n	8002df4 <StringBuilder_AppendFormat$8555+0x4d4>
 8002dd8:	e01a      	b.n	8002e10 <StringBuilder_AppendFormat$8555+0x4f0>
 8002dda:	9824      	ldr	r0, [sp, #144]	; 0x90
                                pos--;
                                break;
                            }
                        }

                        chars[i++] = ch;
 8002ddc:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8002dde:	1c4a      	adds	r2, r1, #1
 8002de0:	9b82      	ldr	r3, [sp, #520]	; 0x208
 8002de2:	eb03 0c41 	add.w	ip, r3, r1, lsl #1
 8002de6:	f8dd e094 	ldr.w	lr, [sp, #148]	; 0x94
 8002dea:	f8ac e00c 	strh.w	lr, [ip, #12]
                    }
 8002dee:	923c      	str	r2, [sp, #240]	; 0xf0
 8002df0:	903b      	str	r0, [sp, #236]	; 0xec
 8002df2:	e7c3      	b.n	8002d7c <StringBuilder_AppendFormat$8555+0x45c>
 8002df4:	9821      	ldr	r0, [sp, #132]	; 0x84
 8002df6:	9922      	ldr	r1, [sp, #136]	; 0x88
 8002df8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
                        {
                            if(pos < len && chars[pos] == '}')  // Treat as escape character for }}
                                pos++;
                            else
                            {
                                pos--;
 8002dfa:	3a01      	subs	r2, #1
 8002dfc:	2300      	movs	r3, #0
                            }
                        }

                        chars[i++] = ch;
                    }
                    if(i > p) fmt = new String( chars, p, i - p );
 8002dfe:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8002e02:	4560      	cmp	r0, ip
 8002e04:	9020      	str	r0, [sp, #128]	; 0x80
 8002e06:	911f      	str	r1, [sp, #124]	; 0x7c
 8002e08:	921e      	str	r2, [sp, #120]	; 0x78
 8002e0a:	931d      	str	r3, [sp, #116]	; 0x74
 8002e0c:	dc10      	bgt.n	8002e30 <StringBuilder_AppendFormat$8555+0x510>
 8002e0e:	e021      	b.n	8002e54 <StringBuilder_AppendFormat$8555+0x534>
                            else
                                FormatError();
                        }
                        else if(ch == '}')
                        {
                            if(pos < len && chars[pos] == '}')  // Treat as escape character for }}
 8002e10:	983d      	ldr	r0, [sp, #244]	; 0xf4
 8002e12:	9926      	ldr	r1, [sp, #152]	; 0x98
 8002e14:	f830 2011 	ldrh.w	r2, [r0, r1, lsl #1]
 8002e18:	2a7d      	cmp	r2, #125	; 0x7d
 8002e1a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8002e1c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8002e1e:	9123      	str	r1, [sp, #140]	; 0x8c
 8002e20:	9222      	str	r2, [sp, #136]	; 0x88
 8002e22:	9321      	str	r3, [sp, #132]	; 0x84
 8002e24:	d1e6      	bne.n	8002df4 <StringBuilder_AppendFormat$8555+0x4d4>
 8002e26:	e7ff      	b.n	8002e28 <StringBuilder_AppendFormat$8555+0x508>
                                pos++;
 8002e28:	9826      	ldr	r0, [sp, #152]	; 0x98
 8002e2a:	1c41      	adds	r1, r0, #1
                            else
                            {
                                pos--;
                                break;
                            }
                        }
 8002e2c:	9124      	str	r1, [sp, #144]	; 0x90
 8002e2e:	e7d4      	b.n	8002dda <StringBuilder_AppendFormat$8555+0x4ba>

                        chars[i++] = ch;
                    }
                    if(i > p) fmt = new String( chars, p, i - p );
 8002e30:	9820      	ldr	r0, [sp, #128]	; 0x80
 8002e32:	993e      	ldr	r1, [sp, #248]	; 0xf8
 8002e34:	1a42      	subs	r2, r0, r1
 8002e36:	4610      	mov	r0, r2
 8002e38:	921c      	str	r2, [sp, #112]	; 0x70
 8002e3a:	f7fe faab 	bl	8001394 <String_FastAllocateString$3886>
 8002e3e:	4601      	mov	r1, r0
 8002e40:	9a82      	ldr	r2, [sp, #520]	; 0x208
 8002e42:	911b      	str	r1, [sp, #108]	; 0x6c
 8002e44:	4611      	mov	r1, r2
 8002e46:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 8002e48:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8002e4a:	f7ff fc0b 	bl	8002664 <String_.ctor$3883>
 8002e4e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8002e50:	901d      	str	r0, [sp, #116]	; 0x74
 8002e52:	e7ff      	b.n	8002e54 <StringBuilder_AppendFormat$8555+0x534>
 8002e54:	981d      	ldr	r0, [sp, #116]	; 0x74
 8002e56:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8002e58:	9a1e      	ldr	r2, [sp, #120]	; 0x78
                }
 8002e5a:	9245      	str	r2, [sp, #276]	; 0x114
 8002e5c:	9142      	str	r1, [sp, #264]	; 0x108
 8002e5e:	9041      	str	r0, [sp, #260]	; 0x104
 8002e60:	e6ed      	b.n	8002c3e <StringBuilder_AppendFormat$8555+0x31e>
                        if(ch == '{')
                        {
                            if(pos < len && chars[pos] == '{')  // Treat as escape character for {{
                                pos++;
                            else
                                FormatError();
 8002e62:	f00b fcd9 	bl	800e818 <StringBuilder_FormatError$8554>
 8002e66:	9826      	ldr	r0, [sp, #152]	; 0x98
 8002e68:	901a      	str	r0, [sp, #104]	; 0x68
 8002e6a:	e00b      	b.n	8002e84 <StringBuilder_AppendFormat$8555+0x564>
                        if(pos == len) FormatError();
                        ch = chars[pos];
                        pos++;
                        if(ch == '{')
                        {
                            if(pos < len && chars[pos] == '{')  // Treat as escape character for {{
 8002e6c:	9882      	ldr	r0, [sp, #520]	; 0x208
 8002e6e:	9926      	ldr	r1, [sp, #152]	; 0x98
 8002e70:	eb00 0241 	add.w	r2, r0, r1, lsl #1
 8002e74:	8992      	ldrh	r2, [r2, #12]
 8002e76:	2a7b      	cmp	r2, #123	; 0x7b
 8002e78:	d1f3      	bne.n	8002e62 <StringBuilder_AppendFormat$8555+0x542>
 8002e7a:	e7ff      	b.n	8002e7c <StringBuilder_AppendFormat$8555+0x55c>
                                pos++;
 8002e7c:	9826      	ldr	r0, [sp, #152]	; 0x98
 8002e7e:	1c41      	adds	r1, r0, #1
 8002e80:	911a      	str	r1, [sp, #104]	; 0x68
 8002e82:	e7ff      	b.n	8002e84 <StringBuilder_AppendFormat$8555+0x564>
 8002e84:	981a      	ldr	r0, [sp, #104]	; 0x68
                            else
                                FormatError();
                        }
 8002e86:	9024      	str	r0, [sp, #144]	; 0x90
 8002e88:	e7a7      	b.n	8002dda <StringBuilder_AppendFormat$8555+0x4ba>
 8002e8a:	984b      	ldr	r0, [sp, #300]	; 0x12c
                bool leftJustify = false;
                int width = 0;
                if(ch == ',')
                {
                    pos++;
                    while(pos < len && chars[pos] == ' ') pos++;
 8002e8c:	9981      	ldr	r1, [sp, #516]	; 0x204
 8002e8e:	4288      	cmp	r0, r1
 8002e90:	4602      	mov	r2, r0
 8002e92:	9019      	str	r0, [sp, #100]	; 0x64
 8002e94:	9218      	str	r2, [sp, #96]	; 0x60
 8002e96:	db06      	blt.n	8002ea6 <StringBuilder_AppendFormat$8555+0x586>
 8002e98:	e7ff      	b.n	8002e9a <StringBuilder_AppendFormat$8555+0x57a>
 8002e9a:	9818      	ldr	r0, [sp, #96]	; 0x60

                    if(pos == len) FormatError();
 8002e9c:	9981      	ldr	r1, [sp, #516]	; 0x204
 8002e9e:	4288      	cmp	r0, r1
 8002ea0:	9017      	str	r0, [sp, #92]	; 0x5c
 8002ea2:	d00c      	beq.n	8002ebe <StringBuilder_AppendFormat$8555+0x59e>
 8002ea4:	e00e      	b.n	8002ec4 <StringBuilder_AppendFormat$8555+0x5a4>
                bool leftJustify = false;
                int width = 0;
                if(ch == ',')
                {
                    pos++;
                    while(pos < len && chars[pos] == ' ') pos++;
 8002ea6:	984c      	ldr	r0, [sp, #304]	; 0x130
 8002ea8:	9919      	ldr	r1, [sp, #100]	; 0x64
 8002eaa:	f830 2011 	ldrh.w	r2, [r0, r1, lsl #1]
 8002eae:	2a20      	cmp	r2, #32
 8002eb0:	9118      	str	r1, [sp, #96]	; 0x60
 8002eb2:	d1f2      	bne.n	8002e9a <StringBuilder_AppendFormat$8555+0x57a>
 8002eb4:	e7ff      	b.n	8002eb6 <StringBuilder_AppendFormat$8555+0x596>
 8002eb6:	9819      	ldr	r0, [sp, #100]	; 0x64
 8002eb8:	1c41      	adds	r1, r0, #1
 8002eba:	914b      	str	r1, [sp, #300]	; 0x12c
 8002ebc:	e7e5      	b.n	8002e8a <StringBuilder_AppendFormat$8555+0x56a>

                    if(pos == len) FormatError();
 8002ebe:	f00b fcab 	bl	800e818 <StringBuilder_FormatError$8554>
 8002ec2:	e7ff      	b.n	8002ec4 <StringBuilder_AppendFormat$8555+0x5a4>
                    ch = chars[pos];
 8002ec4:	9882      	ldr	r0, [sp, #520]	; 0x208
 8002ec6:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8002ec8:	eb00 0241 	add.w	r2, r0, r1, lsl #1
 8002ecc:	8992      	ldrh	r2, [r2, #12]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	f04f 0c00 	mov.w	ip, #0
                    if(ch == '-')
 8002ed4:	2a2d      	cmp	r2, #45	; 0x2d
 8002ed6:	9116      	str	r1, [sp, #88]	; 0x58
 8002ed8:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 8002edc:	9314      	str	r3, [sp, #80]	; 0x50
 8002ede:	d108      	bne.n	8002ef2 <StringBuilder_AppendFormat$8555+0x5d2>
 8002ee0:	e7ff      	b.n	8002ee2 <StringBuilder_AppendFormat$8555+0x5c2>
                    {
                        leftJustify = true;
                        pos++;
 8002ee2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8002ee4:	1c41      	adds	r1, r0, #1
 8002ee6:	460a      	mov	r2, r1
                        if(pos == len) FormatError();
 8002ee8:	9b81      	ldr	r3, [sp, #516]	; 0x204
 8002eea:	4299      	cmp	r1, r3
 8002eec:	9213      	str	r2, [sp, #76]	; 0x4c
 8002eee:	d077      	beq.n	8002fe0 <StringBuilder_AppendFormat$8555+0x6c0>
 8002ef0:	e079      	b.n	8002fe6 <StringBuilder_AppendFormat$8555+0x6c6>
 8002ef2:	9816      	ldr	r0, [sp, #88]	; 0x58
 8002ef4:	9914      	ldr	r1, [sp, #80]	; 0x50
 8002ef6:	9a15      	ldr	r2, [sp, #84]	; 0x54
                        ch = chars[pos];
                    }
                    if(ch < '0' || ch > '9') FormatError();
 8002ef8:	b28b      	uxth	r3, r1
 8002efa:	2b2f      	cmp	r3, #47	; 0x2f
 8002efc:	9012      	str	r0, [sp, #72]	; 0x48
 8002efe:	9111      	str	r1, [sp, #68]	; 0x44
 8002f00:	9210      	str	r2, [sp, #64]	; 0x40
 8002f02:	dc03      	bgt.n	8002f0c <StringBuilder_AppendFormat$8555+0x5ec>
 8002f04:	e7ff      	b.n	8002f06 <StringBuilder_AppendFormat$8555+0x5e6>
 8002f06:	f00b fc87 	bl	800e818 <StringBuilder_FormatError$8554>
 8002f0a:	e004      	b.n	8002f16 <StringBuilder_AppendFormat$8555+0x5f6>
 8002f0c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8002f0e:	b281      	uxth	r1, r0
 8002f10:	2939      	cmp	r1, #57	; 0x39
 8002f12:	dcf8      	bgt.n	8002f06 <StringBuilder_AppendFormat$8555+0x5e6>
 8002f14:	e7ff      	b.n	8002f16 <StringBuilder_AppendFormat$8555+0x5f6>
 8002f16:	2000      	movs	r0, #0
 8002f18:	9911      	ldr	r1, [sp, #68]	; 0x44
 8002f1a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002f1c:	900f      	str	r0, [sp, #60]	; 0x3c
 8002f1e:	910e      	str	r1, [sp, #56]	; 0x38
 8002f20:	920d      	str	r2, [sp, #52]	; 0x34
 8002f22:	e7ff      	b.n	8002f24 <StringBuilder_AppendFormat$8555+0x604>
 8002f24:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002f26:	990e      	ldr	r1, [sp, #56]	; 0x38
 8002f28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                    do
                    {
                        width = width * 10 + ch - '0';
 8002f2a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002f2e:	b289      	uxth	r1, r1
 8002f30:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8002f34:	3930      	subs	r1, #48	; 0x30
                        pos++;
 8002f36:	3001      	adds	r0, #1
 8002f38:	4602      	mov	r2, r0
                        if(pos == len) FormatError();
 8002f3a:	9b81      	ldr	r3, [sp, #516]	; 0x204
 8002f3c:	4298      	cmp	r0, r3
 8002f3e:	910c      	str	r1, [sp, #48]	; 0x30
 8002f40:	920b      	str	r2, [sp, #44]	; 0x2c
 8002f42:	d103      	bne.n	8002f4c <StringBuilder_AppendFormat$8555+0x62c>
 8002f44:	e7ff      	b.n	8002f46 <StringBuilder_AppendFormat$8555+0x626>
 8002f46:	f00b fc67 	bl	800e818 <StringBuilder_FormatError$8554>
 8002f4a:	e7ff      	b.n	8002f4c <StringBuilder_AppendFormat$8555+0x62c>
                        ch = chars[pos];
 8002f4c:	9882      	ldr	r0, [sp, #520]	; 0x208
 8002f4e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002f50:	eb00 0241 	add.w	r2, r0, r1, lsl #1
 8002f54:	8992      	ldrh	r2, [r2, #12]
 8002f56:	4613      	mov	r3, r2
                    } while(ch >= '0' && ch <= '9' && width < 1000000);
 8002f58:	2a2f      	cmp	r2, #47	; 0x2f
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
 8002f60:	910a      	str	r1, [sp, #40]	; 0x28
 8002f62:	9309      	str	r3, [sp, #36]	; 0x24
 8002f64:	9208      	str	r2, [sp, #32]
 8002f66:	f8cd c01c 	str.w	ip, [sp, #28]
 8002f6a:	dc18      	bgt.n	8002f9e <StringBuilder_AppendFormat$8555+0x67e>
 8002f6c:	e7ff      	b.n	8002f6e <StringBuilder_AppendFormat$8555+0x64e>
 8002f6e:	9807      	ldr	r0, [sp, #28]
 8002f70:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002f72:	9a08      	ldr	r2, [sp, #32]
 8002f74:	9b10      	ldr	r3, [sp, #64]	; 0x40
                }
 8002f76:	9352      	str	r3, [sp, #328]	; 0x148
 8002f78:	924f      	str	r2, [sp, #316]	; 0x13c
 8002f7a:	9050      	str	r0, [sp, #320]	; 0x140
 8002f7c:	914e      	str	r1, [sp, #312]	; 0x138
 8002f7e:	e7ff      	b.n	8002f80 <StringBuilder_AppendFormat$8555+0x660>
 8002f80:	984e      	ldr	r0, [sp, #312]	; 0x138
 8002f82:	994f      	ldr	r1, [sp, #316]	; 0x13c
 8002f84:	9a52      	ldr	r2, [sp, #328]	; 0x148
 8002f86:	9b50      	ldr	r3, [sp, #320]	; 0x140

                while(pos < len && (ch = chars[pos]) == ' ') pos++;
 8002f88:	f8dd c208 	ldr.w	ip, [sp, #520]	; 0x208
 8002f8c:	f10c 0e0c 	add.w	lr, ip, #12
 8002f90:	9149      	str	r1, [sp, #292]	; 0x124
 8002f92:	f8cd e100 	str.w	lr, [sp, #256]	; 0x100
 8002f96:	9232      	str	r2, [sp, #200]	; 0xc8
 8002f98:	9333      	str	r3, [sp, #204]	; 0xcc
 8002f9a:	904a      	str	r0, [sp, #296]	; 0x128
 8002f9c:	e60e      	b.n	8002bbc <StringBuilder_AppendFormat$8555+0x29c>
                    {
                        width = width * 10 + ch - '0';
                        pos++;
                        if(pos == len) FormatError();
                        ch = chars[pos];
                    } while(ch >= '0' && ch <= '9' && width < 1000000);
 8002f9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002fa0:	b281      	uxth	r1, r0
 8002fa2:	2939      	cmp	r1, #57	; 0x39
 8002fa4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002fa6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002fa8:	9008      	str	r0, [sp, #32]
 8002faa:	910a      	str	r1, [sp, #40]	; 0x28
 8002fac:	9207      	str	r2, [sp, #28]
 8002fae:	dcde      	bgt.n	8002f6e <StringBuilder_AppendFormat$8555+0x64e>
 8002fb0:	e7ff      	b.n	8002fb2 <StringBuilder_AppendFormat$8555+0x692>
 8002fb2:	f244 2040 	movw	r0, #16960	; 0x4240
 8002fb6:	f2c0 000f 	movt	r0, #15
 8002fba:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002fbc:	4281      	cmp	r1, r0
 8002fbe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002fc0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002fc4:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8002fc8:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 8002fcc:	910f      	str	r1, [sp, #60]	; 0x3c
 8002fce:	900e      	str	r0, [sp, #56]	; 0x38
 8002fd0:	920d      	str	r2, [sp, #52]	; 0x34
 8002fd2:	9308      	str	r3, [sp, #32]
 8002fd4:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 8002fd8:	f8cd e01c 	str.w	lr, [sp, #28]
 8002fdc:	dba2      	blt.n	8002f24 <StringBuilder_AppendFormat$8555+0x604>
 8002fde:	e7c6      	b.n	8002f6e <StringBuilder_AppendFormat$8555+0x64e>
                    ch = chars[pos];
                    if(ch == '-')
                    {
                        leftJustify = true;
                        pos++;
                        if(pos == len) FormatError();
 8002fe0:	f00b fc1a 	bl	800e818 <StringBuilder_FormatError$8554>
 8002fe4:	e7ff      	b.n	8002fe6 <StringBuilder_AppendFormat$8555+0x6c6>
                        ch = chars[pos];
 8002fe6:	9882      	ldr	r0, [sp, #520]	; 0x208
 8002fe8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8002fea:	eb00 0241 	add.w	r2, r0, r1, lsl #1
 8002fee:	8992      	ldrh	r2, [r2, #12]
 8002ff0:	2301      	movs	r3, #1
                    }
 8002ff2:	9116      	str	r1, [sp, #88]	; 0x58
 8002ff4:	9315      	str	r3, [sp, #84]	; 0x54
 8002ff6:	9214      	str	r2, [sp, #80]	; 0x50
 8002ff8:	e77b      	b.n	8002ef2 <StringBuilder_AppendFormat$8555+0x5d2>
                    ch = chars[pos];

                    pos++;
                    if(ch == '}')
                    {
                        if(pos < len && chars[pos] == '}') // Treat as escape character for }}
 8002ffa:	9875      	ldr	r0, [sp, #468]	; 0x1d4
 8002ffc:	9981      	ldr	r1, [sp, #516]	; 0x204
 8002ffe:	4288      	cmp	r0, r1
 8003000:	da3b      	bge.n	800307a <StringBuilder_AppendFormat$8555+0x75a>
 8003002:	e03f      	b.n	8003084 <StringBuilder_AppendFormat$8555+0x764>
 8003004:	9873      	ldr	r0, [sp, #460]	; 0x1cc
 8003006:	9974      	ldr	r1, [sp, #464]	; 0x1d0
 8003008:	b28a      	uxth	r2, r1
                            pos++;
                        else
                            FormatError();
                    }

                    if(ch == '{')
 800300a:	2a7b      	cmp	r2, #123	; 0x7b
 800300c:	4602      	mov	r2, r0
 800300e:	9006      	str	r0, [sp, #24]
 8003010:	9205      	str	r2, [sp, #20]
 8003012:	d10a      	bne.n	800302a <StringBuilder_AppendFormat$8555+0x70a>
 8003014:	e7ff      	b.n	8003016 <StringBuilder_AppendFormat$8555+0x6f6>
                    {
                        if(pos < len && chars[pos] == '{') // Treat as escape character for {{
 8003016:	9806      	ldr	r0, [sp, #24]
 8003018:	9981      	ldr	r1, [sp, #516]	; 0x204
 800301a:	4288      	cmp	r0, r1
 800301c:	9a74      	ldr	r2, [sp, #464]	; 0x1d0
 800301e:	9b78      	ldr	r3, [sp, #480]	; 0x1e0
 8003020:	9004      	str	r0, [sp, #16]
 8003022:	9203      	str	r2, [sp, #12]
 8003024:	9302      	str	r3, [sp, #8]
 8003026:	da0f      	bge.n	8003048 <StringBuilder_AppendFormat$8555+0x728>
 8003028:	e016      	b.n	8003058 <StringBuilder_AppendFormat$8555+0x738>
 800302a:	9805      	ldr	r0, [sp, #20]
                            pos--;
                            break;
                        }
                    }

                    chars[i++] = ch;
 800302c:	9978      	ldr	r1, [sp, #480]	; 0x1e0
 800302e:	1c4a      	adds	r2, r1, #1
 8003030:	9b82      	ldr	r3, [sp, #520]	; 0x208
 8003032:	eb03 0c41 	add.w	ip, r3, r1, lsl #1
 8003036:	f8dd e1d0 	ldr.w	lr, [sp, #464]	; 0x1d0
 800303a:	f8ac e00c 	strh.w	lr, [ip, #12]
                }
 800303e:	927d      	str	r2, [sp, #500]	; 0x1f4
 8003040:	f8cd e1f0 	str.w	lr, [sp, #496]	; 0x1f0
 8003044:	907b      	str	r0, [sp, #492]	; 0x1ec
 8003046:	e4a5      	b.n	8002994 <StringBuilder_AppendFormat$8555+0x74>
 8003048:	9802      	ldr	r0, [sp, #8]
 800304a:	9903      	ldr	r1, [sp, #12]
 800304c:	9a04      	ldr	r2, [sp, #16]
                    {
                        if(pos < len && chars[pos] == '{') // Treat as escape character for {{
                            pos++;
                        else
                        {
                            pos--;
 800304e:	3a01      	subs	r2, #1
                            break;
 8003050:	9172      	str	r1, [sp, #456]	; 0x1c8
 8003052:	9071      	str	r0, [sp, #452]	; 0x1c4
 8003054:	9270      	str	r2, [sp, #448]	; 0x1c0
 8003056:	e4c5      	b.n	80029e4 <StringBuilder_AppendFormat$8555+0xc4>
                            FormatError();
                    }

                    if(ch == '{')
                    {
                        if(pos < len && chars[pos] == '{') // Treat as escape character for {{
 8003058:	9882      	ldr	r0, [sp, #520]	; 0x208
 800305a:	9906      	ldr	r1, [sp, #24]
 800305c:	eb00 0241 	add.w	r2, r0, r1, lsl #1
 8003060:	8992      	ldrh	r2, [r2, #12]
 8003062:	2a7b      	cmp	r2, #123	; 0x7b
 8003064:	9a74      	ldr	r2, [sp, #464]	; 0x1d0
 8003066:	9b78      	ldr	r3, [sp, #480]	; 0x1e0
 8003068:	9104      	str	r1, [sp, #16]
 800306a:	9203      	str	r2, [sp, #12]
 800306c:	9302      	str	r3, [sp, #8]
 800306e:	d1eb      	bne.n	8003048 <StringBuilder_AppendFormat$8555+0x728>
 8003070:	e7ff      	b.n	8003072 <StringBuilder_AppendFormat$8555+0x752>
                            pos++;
 8003072:	9806      	ldr	r0, [sp, #24]
 8003074:	1c41      	adds	r1, r0, #1
                        else
                        {
                            pos--;
                            break;
                        }
                    }
 8003076:	9105      	str	r1, [sp, #20]
 8003078:	e7d7      	b.n	800302a <StringBuilder_AppendFormat$8555+0x70a>
                    if(ch == '}')
                    {
                        if(pos < len && chars[pos] == '}') // Treat as escape character for }}
                            pos++;
                        else
                            FormatError();
 800307a:	f00b fbcd 	bl	800e818 <StringBuilder_FormatError$8554>
 800307e:	9875      	ldr	r0, [sp, #468]	; 0x1d4
 8003080:	9001      	str	r0, [sp, #4]
 8003082:	e00b      	b.n	800309c <StringBuilder_AppendFormat$8555+0x77c>
                    ch = chars[pos];

                    pos++;
                    if(ch == '}')
                    {
                        if(pos < len && chars[pos] == '}') // Treat as escape character for }}
 8003084:	9882      	ldr	r0, [sp, #520]	; 0x208
 8003086:	9975      	ldr	r1, [sp, #468]	; 0x1d4
 8003088:	eb00 0241 	add.w	r2, r0, r1, lsl #1
 800308c:	8992      	ldrh	r2, [r2, #12]
 800308e:	2a7d      	cmp	r2, #125	; 0x7d
 8003090:	d1f3      	bne.n	800307a <StringBuilder_AppendFormat$8555+0x75a>
 8003092:	e7ff      	b.n	8003094 <StringBuilder_AppendFormat$8555+0x774>
                            pos++;
 8003094:	9875      	ldr	r0, [sp, #468]	; 0x1d4
 8003096:	1c41      	adds	r1, r0, #1
 8003098:	9101      	str	r1, [sp, #4]
 800309a:	e7ff      	b.n	800309c <StringBuilder_AppendFormat$8555+0x77c>
 800309c:	9801      	ldr	r0, [sp, #4]
                        else
                            FormatError();
                    }
 800309e:	9073      	str	r0, [sp, #460]	; 0x1cc
 80030a0:	e7b0      	b.n	8003004 <StringBuilder_AppendFormat$8555+0x6e4>
 80030a2:	46c0      	nop			; (mov r8, r8)
 80030a4:	fffffe3c 	.word	0xfffffe3c
 80030a8:	17ffeb40 	.word	0x17ffeb40
 80030ac:	e8025432 	.word	0xe8025432
 80030b0:	17ffeafa 	.word	0x17ffeafa
 80030b4:	e8025430 	.word	0xe8025430
 80030b8:	17ffead0 	.word	0x17ffead0
 80030bc:	ffffea38 	.word	0xffffea38
 80030c0:	17ffec9a 	.word	0x17ffec9a
 80030c4:	e8012eec 	.word	0xe8012eec
 80030c8:	17ffee8a 	.word	0x17ffee8a
 80030cc:	e801049c 	.word	0xe801049c

080030d0 <String_InternalCopy$2582>:
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	4601      	mov	r1, r0
 80030d6:	68c2      	ldr	r2, [r0, #12]

        // Used by StringBuilder to avoid data corruption
        unsafe internal static String InternalCopy( String str )
        {
            int    length = str.Length;
            String result = FastAllocateString( length );
 80030d8:	9003      	str	r0, [sp, #12]
 80030da:	4610      	mov	r0, r2
 80030dc:	9202      	str	r2, [sp, #8]
 80030de:	9101      	str	r1, [sp, #4]
 80030e0:	f7fe f958 	bl	8001394 <String_FastAllocateString$3886>

            // The underlying's String can changed length is StringBuilder
            fixed(char* dest = &result.m_firstChar)
 80030e4:	f100 0110 	add.w	r1, r0, #16
            {
                fixed(char* src = &str.m_firstChar)
 80030e8:	9a03      	ldr	r2, [sp, #12]
 80030ea:	f102 0310 	add.w	r3, r2, #16
                {
                    wstrcpyPtrAligned( dest, src, length );
 80030ee:	9000      	str	r0, [sp, #0]
 80030f0:	4608      	mov	r0, r1
 80030f2:	4619      	mov	r1, r3
 80030f4:	9a02      	ldr	r2, [sp, #8]
 80030f6:	f7ff fb03 	bl	8002700 <String_wstrcpyPtrAligned$2531>
 80030fa:	9800      	ldr	r0, [sp, #0]
 80030fc:	b004      	add	sp, #16
 80030fe:	bd80      	pop	{r7, pc}

08003100 <String_Concat$2588>:
 8003100:	b580      	push	{r7, lr}
 8003102:	b08c      	sub	sp, #48	; 0x30
 8003104:	4603      	mov	r3, r0
            return result;
        }

        public static String Concat( String str0, String str1, String str2 )
        {
            if(str0 == null && str1 == null && str2 == null)
 8003106:	2800      	cmp	r0, #0
 8003108:	930b      	str	r3, [sp, #44]	; 0x2c
 800310a:	920a      	str	r2, [sp, #40]	; 0x28
 800310c:	9109      	str	r1, [sp, #36]	; 0x24
 800310e:	d005      	beq.n	800311c <String_Concat$2588+0x1c>
 8003110:	e7ff      	b.n	8003112 <String_Concat$2588+0x12>
            {
                return String.Empty;
            }

            if(str0 == null)
 8003112:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003114:	2800      	cmp	r0, #0
 8003116:	9008      	str	r0, [sp, #32]
 8003118:	d010      	beq.n	800313c <String_Concat$2588+0x3c>
 800311a:	e017      	b.n	800314c <String_Concat$2588+0x4c>
            return result;
        }

        public static String Concat( String str0, String str1, String str2 )
        {
            if(str0 == null && str1 == null && str2 == null)
 800311c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800311e:	2800      	cmp	r0, #0
 8003120:	d1f7      	bne.n	8003112 <String_Concat$2588+0x12>
 8003122:	e7ff      	b.n	8003124 <String_Concat$2588+0x24>
 8003124:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003126:	2800      	cmp	r0, #0
 8003128:	d1f3      	bne.n	8003112 <String_Concat$2588+0x12>
 800312a:	e7ff      	b.n	800312c <String_Concat$2588+0x2c>
            {
                return String.Empty;
 800312c:	482a      	ldr	r0, [pc, #168]	; (80031d8 <String_Concat$2588+0xd8>)
 800312e:	492b      	ldr	r1, [pc, #172]	; (80031dc <String_Concat$2588+0xdc>)
 8003130:	4479      	add	r1, pc
 8003132:	4408      	add	r0, r1
 8003134:	f8d0 00d4 	ldr.w	r0, [r0, #212]	; 0xd4
 8003138:	9007      	str	r0, [sp, #28]
 800313a:	e04a      	b.n	80031d2 <String_Concat$2588+0xd2>
            }

            if(str0 == null)
            {
                str0 = String.Empty;
 800313c:	4826      	ldr	r0, [pc, #152]	; (80031d8 <String_Concat$2588+0xd8>)
 800313e:	4928      	ldr	r1, [pc, #160]	; (80031e0 <String_Concat$2588+0xe0>)
 8003140:	4479      	add	r1, pc
 8003142:	4408      	add	r0, r1
 8003144:	f8d0 00d4 	ldr.w	r0, [r0, #212]	; 0xd4
            }
 8003148:	9008      	str	r0, [sp, #32]
 800314a:	e7ff      	b.n	800314c <String_Concat$2588+0x4c>
 800314c:	9808      	ldr	r0, [sp, #32]

            if(str1 == null)
 800314e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003150:	2900      	cmp	r1, #0
 8003152:	9006      	str	r0, [sp, #24]
 8003154:	9105      	str	r1, [sp, #20]
 8003156:	d108      	bne.n	800316a <String_Concat$2588+0x6a>
 8003158:	e7ff      	b.n	800315a <String_Concat$2588+0x5a>
            {
                str1 = String.Empty;
 800315a:	481f      	ldr	r0, [pc, #124]	; (80031d8 <String_Concat$2588+0xd8>)
 800315c:	4921      	ldr	r1, [pc, #132]	; (80031e4 <String_Concat$2588+0xe4>)
 800315e:	4479      	add	r1, pc
 8003160:	4408      	add	r0, r1
 8003162:	f8d0 00d4 	ldr.w	r0, [r0, #212]	; 0xd4
            }
 8003166:	9005      	str	r0, [sp, #20]
 8003168:	e7ff      	b.n	800316a <String_Concat$2588+0x6a>
 800316a:	9805      	ldr	r0, [sp, #20]

            if(str2 == null)
 800316c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800316e:	2900      	cmp	r1, #0
 8003170:	9004      	str	r0, [sp, #16]
 8003172:	9103      	str	r1, [sp, #12]
 8003174:	d108      	bne.n	8003188 <String_Concat$2588+0x88>
 8003176:	e7ff      	b.n	8003178 <String_Concat$2588+0x78>
            {
                str2 = String.Empty;
 8003178:	4817      	ldr	r0, [pc, #92]	; (80031d8 <String_Concat$2588+0xd8>)
 800317a:	491b      	ldr	r1, [pc, #108]	; (80031e8 <String_Concat$2588+0xe8>)
 800317c:	4479      	add	r1, pc
 800317e:	4408      	add	r0, r1
 8003180:	f8d0 00d4 	ldr.w	r0, [r0, #212]	; 0xd4
            }
 8003184:	9003      	str	r0, [sp, #12]
 8003186:	e7ff      	b.n	8003188 <String_Concat$2588+0x88>
 8003188:	9803      	ldr	r0, [sp, #12]
 800318a:	9906      	ldr	r1, [sp, #24]
 800318c:	68ca      	ldr	r2, [r1, #12]
 800318e:	9b04      	ldr	r3, [sp, #16]
 8003190:	f8d3 c00c 	ldr.w	ip, [r3, #12]

            int totalLength = str0.Length + str1.Length + str2.Length;
 8003194:	4462      	add	r2, ip
 8003196:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 800319a:	4462      	add	r2, ip

            String result = FastAllocateString( totalLength );
 800319c:	9002      	str	r0, [sp, #8]
 800319e:	4610      	mov	r0, r2
 80031a0:	f7fe f8f8 	bl	8001394 <String_FastAllocateString$3886>
 80031a4:	2100      	movs	r1, #0

            FillStringChecked( result, 0                        , str0 );
 80031a6:	9001      	str	r0, [sp, #4]
 80031a8:	9a06      	ldr	r2, [sp, #24]
 80031aa:	f7ff fa23 	bl	80025f4 <String_FillStringChecked$2528>
 80031ae:	9806      	ldr	r0, [sp, #24]
 80031b0:	68c1      	ldr	r1, [r0, #12]
            FillStringChecked( result, str0.Length              , str1 );
 80031b2:	9801      	ldr	r0, [sp, #4]
 80031b4:	9a04      	ldr	r2, [sp, #16]
 80031b6:	f7ff fa1d 	bl	80025f4 <String_FillStringChecked$2528>
 80031ba:	9806      	ldr	r0, [sp, #24]
 80031bc:	68c1      	ldr	r1, [r0, #12]
 80031be:	9a04      	ldr	r2, [sp, #16]
 80031c0:	68d3      	ldr	r3, [r2, #12]
            FillStringChecked( result, str0.Length + str1.Length, str2 );
 80031c2:	4419      	add	r1, r3
 80031c4:	9801      	ldr	r0, [sp, #4]
 80031c6:	9a02      	ldr	r2, [sp, #8]
 80031c8:	f7ff fa14 	bl	80025f4 <String_FillStringChecked$2528>

            return result;
 80031cc:	9801      	ldr	r0, [sp, #4]
 80031ce:	9007      	str	r0, [sp, #28]
 80031d0:	e7ff      	b.n	80031d2 <String_Concat$2588+0xd2>
        }
 80031d2:	9807      	ldr	r0, [sp, #28]
 80031d4:	b00c      	add	sp, #48	; 0x30
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	fffffe3c 	.word	0xfffffe3c
 80031dc:	17ffe6a0 	.word	0x17ffe6a0
 80031e0:	17ffe690 	.word	0x17ffe690
 80031e4:	17ffe672 	.word	0x17ffe672
 80031e8:	17ffe654 	.word	0x17ffe654

080031ec <String_AppendInPlace$2612>:
 80031ec:	b510      	push	{r4, lr}
 80031ee:	b083      	sub	sp, #12
 80031f0:	4613      	mov	r3, r2
 80031f2:	468c      	mov	ip, r1
 80031f4:	4686      	mov	lr, r0
            BCLDebug.Assert( currentLength < m_arrayLength, "[String.AppendInPlace]currentLength < m_arrayLength" );
#if _DEBUG
            BCLDebug.Assert( ValidModifiableString(), "Modifiable string must not have highChars flags set" );
#endif

            fixed(char* p = &this.m_firstChar)
 80031f6:	f100 0410 	add.w	r4, r0, #16
 80031fa:	f824 1012 	strh.w	r1, [r4, r2, lsl #1]
            {
                // Append the character.
                p[currentLength] = value;
                currentLength++;
 80031fe:	1c51      	adds	r1, r2, #1
 8003200:	2200      	movs	r2, #0
 8003202:	f824 2011 	strh.w	r2, [r4, r1, lsl #1]
 8003206:	60c1      	str	r1, [r0, #12]
 8003208:	f8cd e008 	str.w	lr, [sp, #8]
 800320c:	f8cd c004 	str.w	ip, [sp, #4]
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	b003      	add	sp, #12
 8003214:	bd10      	pop	{r4, pc}

08003216 <String_AppendInPlace$2613>:
 8003216:	b5b0      	push	{r4, r5, r7, lr}
 8003218:	b089      	sub	sp, #36	; 0x24
 800321a:	469c      	mov	ip, r3
 800321c:	4696      	mov	lr, r2
 800321e:	4604      	mov	r4, r0
 8003220:	461d      	mov	r5, r3


        ///<internalonly/>
        unsafe internal void AppendInPlace( char value, int repeatCount, int currentLength )
        {
            int newLength = currentLength + repeatCount;
 8003222:	441a      	add	r2, r3
            BCLDebug.Assert( newLength < m_arrayLength, "[String.AppendInPlace]currentLength+repeatCount < m_arrayLength" );
#if _DEBUG
            BCLDebug.Assert( ValidModifiableString(), "Modifiable string must not have highChars flags set" );
#endif

            fixed(char* p = &this.m_firstChar)
 8003224:	3010      	adds	r0, #16
            {
                int i;

                for(i = currentLength; i < newLength; i++)
 8003226:	9008      	str	r0, [sp, #32]
 8003228:	9407      	str	r4, [sp, #28]
 800322a:	f8cd e018 	str.w	lr, [sp, #24]
 800322e:	9205      	str	r2, [sp, #20]
 8003230:	f8cd c010 	str.w	ip, [sp, #16]
 8003234:	9103      	str	r1, [sp, #12]
 8003236:	9502      	str	r5, [sp, #8]
 8003238:	e7ff      	b.n	800323a <String_AppendInPlace$2613+0x24>
 800323a:	9802      	ldr	r0, [sp, #8]
 800323c:	9905      	ldr	r1, [sp, #20]
 800323e:	4288      	cmp	r0, r1
 8003240:	4602      	mov	r2, r0
 8003242:	9001      	str	r0, [sp, #4]
 8003244:	9200      	str	r2, [sp, #0]
 8003246:	da08      	bge.n	800325a <String_AppendInPlace$2613+0x44>
 8003248:	e7ff      	b.n	800324a <String_AppendInPlace$2613+0x34>
 800324a:	9803      	ldr	r0, [sp, #12]
 800324c:	9908      	ldr	r1, [sp, #32]
 800324e:	9a01      	ldr	r2, [sp, #4]
 8003250:	f821 0012 	strh.w	r0, [r1, r2, lsl #1]
 8003254:	1c53      	adds	r3, r2, #1
 8003256:	9302      	str	r3, [sp, #8]
 8003258:	e7ef      	b.n	800323a <String_AppendInPlace$2613+0x24>
 800325a:	9800      	ldr	r0, [sp, #0]
 800325c:	2100      	movs	r1, #0
 800325e:	9a08      	ldr	r2, [sp, #32]
 8003260:	f822 1010 	strh.w	r1, [r2, r0, lsl #1]
 8003264:	9805      	ldr	r0, [sp, #20]
 8003266:	9907      	ldr	r1, [sp, #28]
 8003268:	60c8      	str	r0, [r1, #12]
 800326a:	b009      	add	sp, #36	; 0x24
 800326c:	bdb0      	pop	{r4, r5, r7, pc}

0800326e <String_AppendInPlace$2614>:
 800326e:	b570      	push	{r4, r5, r6, lr}
 8003270:	b086      	sub	sp, #24
 8003272:	4613      	mov	r3, r2
 8003274:	468c      	mov	ip, r1
 8003276:	4686      	mov	lr, r0
 8003278:	68cc      	ldr	r4, [r1, #12]

        ///<internalonly/>
        internal unsafe void AppendInPlace( String value, int currentLength )
        {
            int count     = value.Length;
            int newLength = currentLength + count;
 800327a:	1915      	adds	r5, r2, r4
            BCLDebug.Assert( newLength < this.m_arrayLength, "[String.AppendInPlace]Length is wrong." );
#if _DEBUG
            BCLDebug.Assert( ValidModifiableString(), "Modifiable string must not have highChars flags set" );
#endif

            fixed(char* dest = &this.m_firstChar)
 800327c:	f100 0610 	add.w	r6, r0, #16
            {
                fixed(char* src = &value.m_firstChar)
 8003280:	3110      	adds	r1, #16
                {
                    wstrcpy( dest + currentLength, src, count );
 8003282:	eb06 0242 	add.w	r2, r6, r2, lsl #1
 8003286:	9005      	str	r0, [sp, #20]
 8003288:	4610      	mov	r0, r2
 800328a:	4622      	mov	r2, r4
 800328c:	f8cd e010 	str.w	lr, [sp, #16]
 8003290:	9603      	str	r6, [sp, #12]
 8003292:	9502      	str	r5, [sp, #8]
 8003294:	9301      	str	r3, [sp, #4]
 8003296:	f8cd c000 	str.w	ip, [sp]
 800329a:	f7fe ffd3 	bl	8002244 <String_wstrcpy$2533>
 800329e:	2000      	movs	r0, #0
 80032a0:	9903      	ldr	r1, [sp, #12]
 80032a2:	9a02      	ldr	r2, [sp, #8]
 80032a4:	f821 0012 	strh.w	r0, [r1, r2, lsl #1]
 80032a8:	9805      	ldr	r0, [sp, #20]
 80032aa:	60c2      	str	r2, [r0, #12]
 80032ac:	b006      	add	sp, #24
 80032ae:	bd70      	pop	{r4, r5, r6, pc}

080032b0 <String_AppendInPlace$2617>:
 80032b0:	b5b0      	push	{r4, r5, r7, lr}
 80032b2:	b088      	sub	sp, #32
 80032b4:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
 80032b8:	469e      	mov	lr, r3
 80032ba:	4604      	mov	r4, r0


        ///<internalonly/>
        internal unsafe void AppendInPlace( char[] value, int start, int count, int currentLength )
        {
            int newLength = currentLength + count;
 80032bc:	eb0c 0503 	add.w	r5, ip, r3
            BCLDebug.Assert( value.Length - count >= start, "[String.AppendInPlace]value.Length-count>=start" );
#if _DEBUG
            BCLDebug.Assert(ValidModifiableString(), "Modifiable string must not have highChars flags set");
#endif

            fixed(char* dest = &this.m_firstChar)
 80032c0:	3010      	adds	r0, #16
            {
                // Note: fixed does not like empty arrays
                if(count > 0)
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	9007      	str	r0, [sp, #28]
 80032c6:	f8cd e018 	str.w	lr, [sp, #24]
 80032ca:	9205      	str	r2, [sp, #20]
 80032cc:	9504      	str	r5, [sp, #16]
 80032ce:	f8cd c00c 	str.w	ip, [sp, #12]
 80032d2:	9102      	str	r1, [sp, #8]
 80032d4:	9401      	str	r4, [sp, #4]
 80032d6:	db04      	blt.n	80032e2 <String_AppendInPlace$2617+0x32>
 80032d8:	e7ff      	b.n	80032da <String_AppendInPlace$2617+0x2a>
                {
                    fixed(char* src = value)
 80032da:	9802      	ldr	r0, [sp, #8]
 80032dc:	2800      	cmp	r0, #0
 80032de:	d109      	bne.n	80032f4 <String_AppendInPlace$2617+0x44>
 80032e0:	e00d      	b.n	80032fe <String_AppendInPlace$2617+0x4e>
 80032e2:	2000      	movs	r0, #0
 80032e4:	9907      	ldr	r1, [sp, #28]
 80032e6:	9a04      	ldr	r2, [sp, #16]
 80032e8:	f821 0012 	strh.w	r0, [r1, r2, lsl #1]
 80032ec:	9801      	ldr	r0, [sp, #4]
 80032ee:	60c2      	str	r2, [r0, #12]
 80032f0:	b008      	add	sp, #32
 80032f2:	bdb0      	pop	{r4, r5, r7, pc}
////    [ReliabilityContract( Consistency.WillNotCorruptState, Cer.MayFail )]
        private unsafe static bool EqualsHelper( String strA, String strB )
        {
            int length = strA.Length;
            if(length != strB.Length) return false;

 80032f4:	9802      	ldr	r0, [sp, #8]
 80032f6:	6881      	ldr	r1, [r0, #8]
            fixed(char* dest = &this.m_firstChar)
            {
                // Note: fixed does not like empty arrays
                if(count > 0)
                {
                    fixed(char* src = value)
 80032f8:	2900      	cmp	r1, #0
 80032fa:	d111      	bne.n	8003320 <String_AppendInPlace$2617+0x70>
 80032fc:	e7ff      	b.n	80032fe <String_AppendInPlace$2617+0x4e>
 80032fe:	2000      	movs	r0, #0
 8003300:	9000      	str	r0, [sp, #0]
 8003302:	e7ff      	b.n	8003304 <String_AppendInPlace$2617+0x54>
 8003304:	9800      	ldr	r0, [sp, #0]
                    {
                        wstrcpy( dest + currentLength, src + start, count );
 8003306:	9907      	ldr	r1, [sp, #28]
 8003308:	9a03      	ldr	r2, [sp, #12]
 800330a:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 800330e:	f8dd c014 	ldr.w	ip, [sp, #20]
 8003312:	eb00 014c 	add.w	r1, r0, ip, lsl #1
 8003316:	4618      	mov	r0, r3
 8003318:	9a06      	ldr	r2, [sp, #24]
 800331a:	f7fe ff93 	bl	8002244 <String_wstrcpy$2533>
                    }
                }
 800331e:	e7e0      	b.n	80032e2 <String_AppendInPlace$2617+0x32>
            fixed(char* dest = &this.m_firstChar)
            {
                // Note: fixed does not like empty arrays
                if(count > 0)
                {
                    fixed(char* src = value)
 8003320:	9802      	ldr	r0, [sp, #8]
 8003322:	f100 010c 	add.w	r1, r0, #12
 8003326:	9100      	str	r1, [sp, #0]
 8003328:	e7ec      	b.n	8003304 <String_AppendInPlace$2617+0x54>

0800332a <String_GetStringForStringBuilder$2619>:
 800332a:	b580      	push	{r7, lr}
 800332c:	b084      	sub	sp, #16
 800332e:	460a      	mov	r2, r1
 8003330:	4603      	mov	r3, r0
 8003332:	f8d0 c00c 	ldr.w	ip, [r0, #12]
        ///<internalonly/>
        internal static String GetStringForStringBuilder( String value, int capacity )
        {
            BCLDebug.Assert( value != null, "[String.GetStringForStringBuilder]value!=null" );

            return GetStringForStringBuilder( value, 0, value.Length, capacity );
 8003336:	9103      	str	r1, [sp, #12]
 8003338:	4661      	mov	r1, ip
 800333a:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800333e:	9202      	str	r2, [sp, #8]
 8003340:	4662      	mov	r2, ip
 8003342:	9301      	str	r3, [sp, #4]
 8003344:	f000 f802 	bl	800334c <String_GetStringForStringBuilder$2620>
 8003348:	b004      	add	sp, #16
 800334a:	bd80      	pop	{r7, pc}

0800334c <String_GetStringForStringBuilder$2620>:
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	4613      	mov	r3, r2
 8003352:	4684      	mov	ip, r0
        unsafe internal static String GetStringForStringBuilder( String value, int startIndex, int length, int capacity )
        {
            BCLDebug.Assert( value != null     , "[String.GetStringForStringBuilder]value!=null" );
            BCLDebug.Assert( capacity >= length, "[String.GetStringForStringBuilder]capacity>=length" );

            String newStr = FastAllocateString( capacity );
 8003354:	9005      	str	r0, [sp, #20]
 8003356:	4610      	mov	r0, r2
 8003358:	f8cd c010 	str.w	ip, [sp, #16]
 800335c:	9303      	str	r3, [sp, #12]
 800335e:	9102      	str	r1, [sp, #8]
 8003360:	f7fe f818 	bl	8001394 <String_FastAllocateString$3886>
 8003364:	9905      	ldr	r1, [sp, #20]
 8003366:	68ca      	ldr	r2, [r1, #12]

            if(value.Length == 0)
 8003368:	2a00      	cmp	r2, #0
 800336a:	9001      	str	r0, [sp, #4]
 800336c:	d107      	bne.n	800337e <String_GetStringForStringBuilder$2620+0x32>
 800336e:	e7ff      	b.n	8003370 <String_GetStringForStringBuilder$2620+0x24>
            {
                newStr.SetLength( 0 );
 8003370:	2100      	movs	r1, #0
 8003372:	9801      	ldr	r0, [sp, #4]
 8003374:	f000 f814 	bl	80033a0 <String_SetLength$2623>
                // already null terminated
                return newStr;
 8003378:	9801      	ldr	r0, [sp, #4]
 800337a:	9000      	str	r0, [sp, #0]
 800337c:	e00d      	b.n	800339a <String_GetStringForStringBuilder$2620+0x4e>
            }

            fixed(char* dest = &newStr.m_firstChar)
 800337e:	9801      	ldr	r0, [sp, #4]
 8003380:	3010      	adds	r0, #16
            {
                fixed(char* src = &value.m_firstChar)
 8003382:	9904      	ldr	r1, [sp, #16]
 8003384:	3110      	adds	r1, #16
                {
                    wstrcpy( dest, src + startIndex, length );
 8003386:	9a02      	ldr	r2, [sp, #8]
 8003388:	f7fe ff5c 	bl	8002244 <String_wstrcpy$2533>
                }
            }
            newStr.SetLength( length );
 800338c:	9801      	ldr	r0, [sp, #4]
 800338e:	9902      	ldr	r1, [sp, #8]
 8003390:	f000 f806 	bl	80033a0 <String_SetLength$2623>

            // already null terminated
            return newStr;
 8003394:	9801      	ldr	r0, [sp, #4]
 8003396:	9000      	str	r0, [sp, #0]
 8003398:	e7ff      	b.n	800339a <String_GetStringForStringBuilder$2620+0x4e>
        }
 800339a:	9800      	ldr	r0, [sp, #0]
 800339c:	b006      	add	sp, #24
 800339e:	bd80      	pop	{r7, pc}

080033a0 <String_SetLength$2623>:
 80033a0:	b082      	sub	sp, #8
 80033a2:	460a      	mov	r2, r1
 80033a4:	4603      	mov	r3, r0
 80033a6:	60c1      	str	r1, [r0, #12]
 80033a8:	9301      	str	r3, [sp, #4]
 80033aa:	9200      	str	r2, [sp, #0]
 80033ac:	b002      	add	sp, #8
 80033ae:	4770      	bx	lr

080033b0 <String_ClearPostNullChar$2622>:
 80033b0:	b082      	sub	sp, #8
 80033b2:	4601      	mov	r1, r0
 80033b4:	6882      	ldr	r2, [r0, #8]
 80033b6:	68c0      	ldr	r0, [r0, #12]
        }

        ///<internalonly/>
        unsafe internal void ClearPostNullChar()
        {
            int newLength = Length + 1;
 80033b8:	3001      	adds	r0, #1
 80033ba:	4603      	mov	r3, r0
            if(newLength < m_arrayLength)
 80033bc:	4290      	cmp	r0, r2
 80033be:	9301      	str	r3, [sp, #4]
 80033c0:	9100      	str	r1, [sp, #0]
 80033c2:	da07      	bge.n	80033d4 <String_ClearPostNullChar$2622+0x24>
 80033c4:	e7ff      	b.n	80033c6 <String_ClearPostNullChar$2622+0x16>
            {
                fixed(char* p = &this.m_firstChar)
 80033c6:	9800      	ldr	r0, [sp, #0]
 80033c8:	9901      	ldr	r1, [sp, #4]
 80033ca:	eb00 0241 	add.w	r2, r0, r1, lsl #1
 80033ce:	2300      	movs	r3, #0
 80033d0:	8213      	strh	r3, [r2, #16]
                {
                    p[newLength] = '\0';
                }
            }
 80033d2:	e7ff      	b.n	80033d4 <String_ClearPostNullChar$2622+0x24>
 80033d4:	b002      	add	sp, #8
 80033d6:	4770      	bx	lr

080033d8 <String_.cctor$2629>:

        // The Empty constant holds the empty string value.
        //We need to call the String constructor so that the compiler doesn't mark this as a literal.
        //Marking this as a literal would mean that it doesn't show up as a field which we can access
        //from native.
        public static readonly String Empty = "";
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	4809      	ldr	r0, [pc, #36]	; (8003404 <String_.cctor$2629+0x2c>)
 80033de:	490a      	ldr	r1, [pc, #40]	; (8003408 <String_.cctor$2629+0x30>)
 80033e0:	4479      	add	r1, pc
 80033e2:	4408      	add	r0, r1
 80033e4:	4a09      	ldr	r2, [pc, #36]	; (800340c <String_.cctor$2629+0x34>)
 80033e6:	440a      	add	r2, r1
 80033e8:	f8c0 20d4 	str.w	r2, [r0, #212]	; 0xd4
        //This should really live on System.Globalization.CharacterInfo.  However,
        //Trim gets called by security while resgen is running, so we can't run
        //CharacterInfo's class initializer (which goes to native and looks for a
        //resource table that hasn't yet been attached to the assembly when resgen
        //runs.
        internal static readonly char[] WhitespaceChars =
 80033ec:	f8d0 00d8 	ldr.w	r0, [r0, #216]	; 0xd8
    using System;
    using System.Text;
    using System.Runtime.ConstrainedExecution;
    using System.Globalization;
    using System.Threading;
    using System.Collections;
 80033f0:	4a07      	ldr	r2, [pc, #28]	; (8003410 <String_.cctor$2629+0x38>)
 80033f2:	4411      	add	r1, r2
 80033f4:	2219      	movs	r2, #25
 80033f6:	9001      	str	r0, [sp, #4]
 80033f8:	4608      	mov	r0, r1
 80033fa:	9901      	ldr	r1, [sp, #4]
 80033fc:	f7fd f846 	bl	800048c <Array_Copy$1371>
 8003400:	b002      	add	sp, #8
 8003402:	bd80      	pop	{r7, pc}
 8003404:	fffffe3c 	.word	0xfffffe3c
 8003408:	17ffe3f0 	.word	0x17ffe3f0
 800340c:	e8010b60 	.word	0xe8010b60
 8003410:	e8010b7c 	.word	0xe8010b7c

08003414 <Number_FormatUInt32$7248>:
 8003414:	b510      	push	{r4, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	460a      	mov	r2, r1
 800341a:	4603      	mov	r3, r0
        }

        internal static String FormatUInt32( uint value,
                                    NumberFormatInfo info )
        {
            Number number = new Number( value );
 800341c:	f8df c040 	ldr.w	ip, [pc, #64]	; 8003460 <Number_FormatUInt32$7248+0x4c>
 8003420:	f8df e040 	ldr.w	lr, [pc, #64]	; 8003464 <Number_FormatUInt32$7248+0x50>
 8003424:	44fe      	add	lr, pc
 8003426:	44f4      	add	ip, lr
 8003428:	4c0f      	ldr	r4, [pc, #60]	; (8003468 <Number_FormatUInt32$7248+0x54>)
 800342a:	4474      	add	r4, lr
 800342c:	9005      	str	r0, [sp, #20]
 800342e:	4660      	mov	r0, ip
 8003430:	9104      	str	r1, [sp, #16]
 8003432:	4621      	mov	r1, r4
 8003434:	9303      	str	r3, [sp, #12]
 8003436:	f8cd e008 	str.w	lr, [sp, #8]
 800343a:	9201      	str	r2, [sp, #4]
 800343c:	f7fd f9c0 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8003440:	9000      	str	r0, [sp, #0]
 8003442:	9905      	ldr	r1, [sp, #20]
 8003444:	f008 f818 	bl	800b478 <Number_.ctor$7234>
 8003448:	4808      	ldr	r0, [pc, #32]	; (800346c <Number_FormatUInt32$7248+0x58>)
 800344a:	4909      	ldr	r1, [pc, #36]	; (8003470 <Number_FormatUInt32$7248+0x5c>)
 800344c:	9a02      	ldr	r2, [sp, #8]
 800344e:	588a      	ldr	r2, [r1, r2]
            return number.ToString( 'G', -1, info );
 8003450:	9902      	ldr	r1, [sp, #8]
 8003452:	5a41      	ldrh	r1, [r0, r1]
 8003454:	9800      	ldr	r0, [sp, #0]
 8003456:	9b04      	ldr	r3, [sp, #16]
 8003458:	f008 f956 	bl	800b708 <Number_ToString$7257>
 800345c:	b006      	add	sp, #24
 800345e:	bd10      	pop	{r4, pc}
 8003460:	ffffea38 	.word	0xffffea38
 8003464:	17ffe3ac 	.word	0x17ffe3ac
 8003468:	e8012e5c 	.word	0xe8012e5c
 800346c:	e80253cc 	.word	0xe80253cc
 8003470:	e80253d0 	.word	0xe80253d0

08003474 <UInt32_Equals$2731>:
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	460a      	mov	r2, r1
            {
                return false;
            }

            return Equals( (UInt16)obj );
        }
 800347a:	4b10      	ldr	r3, [pc, #64]	; (80034bc <UInt32_Equals$2731+0x48>)
 800347c:	f8df c040 	ldr.w	ip, [pc, #64]	; 80034c0 <UInt32_Equals$2731+0x4c>
 8003480:	44fc      	add	ip, pc
 8003482:	4463      	add	r3, ip
 8003484:	9003      	str	r0, [sp, #12]
 8003486:	4608      	mov	r0, r1
 8003488:	4619      	mov	r1, r3
 800348a:	9202      	str	r2, [sp, #8]
 800348c:	f7fd fbe6 	bl	8000c5c <TypeSystemManager_CastToSealedTypeNoThrow$4951>
 8003490:	2800      	cmp	r0, #0
 8003492:	d103      	bne.n	800349c <UInt32_Equals$2731+0x28>
 8003494:	e7ff      	b.n	8003496 <UInt32_Equals$2731+0x22>
 8003496:	2000      	movs	r0, #0

        public bool Equals( UInt16 obj )
 8003498:	9001      	str	r0, [sp, #4]
 800349a:	e00c      	b.n	80034b6 <UInt32_Equals$2731+0x42>
        {
            return m_value == obj;
        }
 800349c:	4807      	ldr	r0, [pc, #28]	; (80034bc <UInt32_Equals$2731+0x48>)
 800349e:	4909      	ldr	r1, [pc, #36]	; (80034c4 <UInt32_Equals$2731+0x50>)
 80034a0:	4479      	add	r1, pc
 80034a2:	4401      	add	r1, r0
 80034a4:	9802      	ldr	r0, [sp, #8]
 80034a6:	f7fd fd85 	bl	8000fb4 <TypeSystemManager_CastToSealedType$4950>
 80034aa:	6881      	ldr	r1, [r0, #8]
 80034ac:	9803      	ldr	r0, [sp, #12]
 80034ae:	f000 f80b 	bl	80034c8 <UInt32_Equals$2733>
 80034b2:	9001      	str	r0, [sp, #4]
 80034b4:	e7ff      	b.n	80034b6 <UInt32_Equals$2731+0x42>
 80034b6:	9801      	ldr	r0, [sp, #4]
 80034b8:	b004      	add	sp, #16
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	e8010c1c 	.word	0xe8010c1c
 80034c0:	17ffe350 	.word	0x17ffe350
 80034c4:	17ffe330 	.word	0x17ffe330

080034c8 <UInt32_Equals$2733>:
 80034c8:	b082      	sub	sp, #8
 80034ca:	460a      	mov	r2, r1
 80034cc:	4603      	mov	r3, r0
            return Equals( (UInt32)obj );
        }

        public bool Equals( UInt32 obj )
        {
            return m_value == obj;
 80034ce:	6880      	ldr	r0, [r0, #8]
 80034d0:	f04f 0c00 	mov.w	ip, #0
 80034d4:	4288      	cmp	r0, r1
 80034d6:	bf08      	it	eq
 80034d8:	f04f 0c01 	moveq.w	ip, #1
 80034dc:	4660      	mov	r0, ip
 80034de:	9201      	str	r2, [sp, #4]
 80034e0:	9300      	str	r3, [sp, #0]
 80034e2:	b002      	add	sp, #8
 80034e4:	4770      	bx	lr

080034e6 <UInt32_GetHashCode$2735>:
 80034e6:	b081      	sub	sp, #4
 80034e8:	4601      	mov	r1, r0
        }

        // The absolute value of the int contained.
        public override int GetHashCode()
        {
            return ((int)m_value);
 80034ea:	6880      	ldr	r0, [r0, #8]
 80034ec:	9100      	str	r1, [sp, #0]
 80034ee:	b001      	add	sp, #4
 80034f0:	4770      	bx	lr

080034f2 <UInt32_ToString$2737>:
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b084      	sub	sp, #16
 80034f6:	4601      	mov	r1, r0
        }

        // The base 10 representation of the number with no extra padding.
        public override String ToString()
        {
            return Number.FormatUInt32( m_value, /*null,*/ NumberFormatInfo.CurrentInfo );
 80034f8:	6880      	ldr	r0, [r0, #8]
 80034fa:	9103      	str	r1, [sp, #12]
 80034fc:	9002      	str	r0, [sp, #8]
 80034fe:	f7fd fdf5 	bl	80010ec <NumberFormatInfo_get_CurrentInfo$9720>
 8003502:	9902      	ldr	r1, [sp, #8]
 8003504:	9001      	str	r0, [sp, #4]
 8003506:	4608      	mov	r0, r1
 8003508:	9901      	ldr	r1, [sp, #4]
 800350a:	f7ff ff83 	bl	8003414 <Number_FormatUInt32$7248>
 800350e:	b004      	add	sp, #16
 8003510:	bd80      	pop	{r7, pc}

08003512 <UInt32_ToString$2739>:
 8003512:	b580      	push	{r7, lr}
 8003514:	b084      	sub	sp, #16
 8003516:	4601      	mov	r1, r0
        }

        public String ToString( IFormatProvider provider )
        {
            return Number.FormatUInt32( m_value, /*null,*/ NumberFormatInfo.GetInstance( provider ) );
 8003518:	6880      	ldr	r0, [r0, #8]
 800351a:	9103      	str	r1, [sp, #12]
 800351c:	9002      	str	r0, [sp, #8]
 800351e:	f7fd fde5 	bl	80010ec <NumberFormatInfo_get_CurrentInfo$9720>
            return Number.FormatUInt32( m_value, /*null,*/ NumberFormatInfo.CurrentInfo );
        }

        public String ToString( IFormatProvider provider )
        {
            return Number.FormatUInt32( m_value, /*null,*/ NumberFormatInfo.GetInstance( provider ) );
 8003522:	9902      	ldr	r1, [sp, #8]
 8003524:	9001      	str	r0, [sp, #4]
 8003526:	4608      	mov	r0, r1
 8003528:	9901      	ldr	r1, [sp, #4]
 800352a:	f7ff ff73 	bl	8003414 <Number_FormatUInt32$7248>
 800352e:	b004      	add	sp, #16
 8003530:	bd80      	pop	{r7, pc}

08003532 <UInt32_ToString$2743>:
 8003532:	b580      	push	{r7, lr}
 8003534:	b086      	sub	sp, #24
 8003536:	460a      	mov	r2, r1
 8003538:	4603      	mov	r3, r0
        }
    
        public String ToString( String          format   ,
                                IFormatProvider provider )
        {
            return Number.FormatUInt32( m_value, format, NumberFormatInfo.GetInstance( provider ) );
 800353a:	6880      	ldr	r0, [r0, #8]
 800353c:	9105      	str	r1, [sp, #20]
 800353e:	9304      	str	r3, [sp, #16]
 8003540:	9203      	str	r2, [sp, #12]
 8003542:	9002      	str	r0, [sp, #8]
 8003544:	f7fd fdd2 	bl	80010ec <NumberFormatInfo_get_CurrentInfo$9720>
        }
    
        public String ToString( String          format   ,
                                IFormatProvider provider )
        {
            return Number.FormatUInt32( m_value, format, NumberFormatInfo.GetInstance( provider ) );
 8003548:	9902      	ldr	r1, [sp, #8]
 800354a:	9001      	str	r0, [sp, #4]
 800354c:	4608      	mov	r0, r1
 800354e:	9905      	ldr	r1, [sp, #20]
 8003550:	9a01      	ldr	r2, [sp, #4]
 8003552:	f7fe f8c3 	bl	80016dc <Number_FormatUInt32$7249>
 8003556:	b006      	add	sp, #24
 8003558:	bd80      	pop	{r7, pc}

0800355a <UIntPtr_.ctor$2860>:
 800355a:	b082      	sub	sp, #8
 800355c:	460a      	mov	r2, r1
 800355e:	4603      	mov	r3, r0
 8003560:	6081      	str	r1, [r0, #8]
 8003562:	9301      	str	r3, [sp, #4]
 8003564:	9200      	str	r2, [sp, #0]
 8003566:	b002      	add	sp, #8
 8003568:	4770      	bx	lr

0800356a <UIntPtr_.ctor$2862>:
 800356a:	b081      	sub	sp, #4
 800356c:	4601      	mov	r1, r0
 800356e:	2200      	movs	r2, #0
 8003570:	6082      	str	r2, [r0, #8]
 8003572:	9100      	str	r1, [sp, #0]
 8003574:	b001      	add	sp, #4
 8003576:	4770      	bx	lr

08003578 <UIntPtr_ToUInt32$2870>:
 8003578:	b081      	sub	sp, #4
 800357a:	4601      	mov	r1, r0
            return unchecked( (int)((long)m_value) ) & 0x7fffffff;
        }

        public unsafe uint ToUInt32()
        {
            return (uint)m_value;
 800357c:	6880      	ldr	r0, [r0, #8]
 800357e:	9100      	str	r1, [sp, #0]
 8003580:	b001      	add	sp, #4
 8003582:	4770      	bx	lr

08003584 <UIntPtr_op_Explicit$2874>:
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	4601      	mov	r1, r0
 800358a:	2200      	movs	r2, #0
 800358c:	9203      	str	r2, [sp, #12]
 800358e:	aa03      	add	r2, sp, #12
////        return ((uint)m_value).ToString( CultureInfo.InvariantCulture );
////    }

        public static explicit operator UIntPtr( uint value )
        {
            return new UIntPtr( value );
 8003590:	3a08      	subs	r2, #8
 8003592:	9002      	str	r0, [sp, #8]
 8003594:	4610      	mov	r0, r2
 8003596:	9a02      	ldr	r2, [sp, #8]
 8003598:	9101      	str	r1, [sp, #4]
 800359a:	4611      	mov	r1, r2
 800359c:	f7ff ffdd 	bl	800355a <UIntPtr_.ctor$2860>
 80035a0:	9803      	ldr	r0, [sp, #12]
 80035a2:	b004      	add	sp, #16
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <UIntPtr_op_Explicit$2876>:
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b082      	sub	sp, #8
 80035aa:	2000      	movs	r0, #0
 80035ac:	9001      	str	r0, [sp, #4]
 80035ae:	a801      	add	r0, sp, #4
        }

        public static explicit operator UIntPtr (ulong value) 
        {
            return new UIntPtr(value);
 80035b0:	3808      	subs	r0, #8
 80035b2:	f7ff ffda 	bl	800356a <UIntPtr_.ctor$2862>
 80035b6:	9801      	ldr	r0, [sp, #4]
 80035b8:	b002      	add	sp, #8
 80035ba:	bd80      	pop	{r7, pc}

080035bc <UIntPtr_op_Explicit$2882>:
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	4601      	mov	r1, r0
 80035c2:	2200      	movs	r2, #0
 80035c4:	9203      	str	r2, [sp, #12]
 80035c6:	aa03      	add	r2, sp, #12
        }

        [CLSCompliant( false )]
        public static unsafe explicit operator UIntPtr( void* value )
        {
            return new UIntPtr( value );
 80035c8:	3a08      	subs	r2, #8
 80035ca:	9002      	str	r0, [sp, #8]
 80035cc:	4610      	mov	r0, r2
 80035ce:	9a02      	ldr	r2, [sp, #8]
 80035d0:	9101      	str	r1, [sp, #4]
 80035d2:	4611      	mov	r1, r2
 80035d4:	f7fd f972 	bl	80008bc <UIntPtr_.ctor$2864>
 80035d8:	9803      	ldr	r0, [sp, #12]
 80035da:	b004      	add	sp, #16
 80035dc:	bd80      	pop	{r7, pc}

080035de <UIntPtr_op_Equality$2886>:
 80035de:	b084      	sub	sp, #16
 80035e0:	460a      	mov	r2, r1
 80035e2:	4603      	mov	r3, r0
 80035e4:	9002      	str	r0, [sp, #8]
 80035e6:	9103      	str	r1, [sp, #12]
        }


        public unsafe static bool operator ==( UIntPtr value1, UIntPtr value2 )
        {
            return value1.m_value == value2.m_value;
 80035e8:	9802      	ldr	r0, [sp, #8]
 80035ea:	f04f 0c00 	mov.w	ip, #0
 80035ee:	4288      	cmp	r0, r1
 80035f0:	bf08      	it	eq
 80035f2:	f04f 0c01 	moveq.w	ip, #1
 80035f6:	4660      	mov	r0, ip
 80035f8:	9201      	str	r2, [sp, #4]
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	b004      	add	sp, #16
 80035fe:	4770      	bx	lr

08003600 <UIntPtr_op_Inequality$2888>:
 8003600:	b084      	sub	sp, #16
 8003602:	460a      	mov	r2, r1
 8003604:	4603      	mov	r3, r0
 8003606:	9002      	str	r0, [sp, #8]
 8003608:	9103      	str	r1, [sp, #12]
        }

        public unsafe static bool operator !=( UIntPtr value1, UIntPtr value2 )
        {
            return value1.m_value != value2.m_value;
 800360a:	9802      	ldr	r0, [sp, #8]
 800360c:	f04f 0c00 	mov.w	ip, #0
 8003610:	4288      	cmp	r0, r1
 8003612:	bf18      	it	ne
 8003614:	f04f 0c01 	movne.w	ip, #1
 8003618:	4660      	mov	r0, ip
 800361a:	9201      	str	r2, [sp, #4]
 800361c:	9300      	str	r3, [sp, #0]
 800361e:	b004      	add	sp, #16
 8003620:	4770      	bx	lr
 8003622:	46c0      	nop			; (mov r8, r8)

08003624 <Thread_.ctor$3991>:
 8003624:	b5b0      	push	{r4, r5, r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	460a      	mov	r2, r1
 800362a:	4603      	mov	r3, r0
 800362c:	f8df c038 	ldr.w	ip, [pc, #56]	; 8003668 <Thread_.ctor$3991+0x44>
 8003630:	f8df e038 	ldr.w	lr, [pc, #56]	; 800366c <Thread_.ctor$3991+0x48>
 8003634:	44fe      	add	lr, pc
 8003636:	f85c c00e 	ldr.w	ip, [ip, lr]
////
////    unsafe void ISerializable.GetObjectData( SerializationInfo info, StreamingContext context )
////    {
////        if(info == null)
////        {
////            throw new ArgumentNullException( "info" );
 800363a:	4c0d      	ldr	r4, [pc, #52]	; (8003670 <Thread_.ctor$3991+0x4c>)
 800363c:	4474      	add	r4, lr
 800363e:	4d0d      	ldr	r5, [pc, #52]	; (8003674 <Thread_.ctor$3991+0x50>)
 8003640:	44ae      	add	lr, r5
 8003642:	9005      	str	r0, [sp, #20]
 8003644:	4620      	mov	r0, r4
 8003646:	9104      	str	r1, [sp, #16]
 8003648:	4671      	mov	r1, lr
 800364a:	9203      	str	r2, [sp, #12]
 800364c:	4662      	mov	r2, ip
 800364e:	9302      	str	r3, [sp, #8]
 8003650:	f7fe fda6 	bl	80021a0 <DefaultTypeSystemManager_AllocateArray$4962>
 8003654:	9905      	ldr	r1, [sp, #20]
 8003656:	9001      	str	r0, [sp, #4]
 8003658:	4608      	mov	r0, r1
 800365a:	9904      	ldr	r1, [sp, #16]
 800365c:	9a01      	ldr	r2, [sp, #4]
 800365e:	f000 f80b 	bl	8003678 <Thread_.ctor$3992>
 8003662:	b006      	add	sp, #24
 8003664:	bdb0      	pop	{r4, r5, r7, pc}
 8003666:	46c0      	nop			; (mov r8, r8)
 8003668:	e8025204 	.word	0xe8025204
 800366c:	17ffe19c 	.word	0x17ffe19c
 8003670:	ffffea38 	.word	0xffffea38
 8003674:	e801028c 	.word	0xe801028c

08003678 <Thread_.ctor$3992>:
 8003678:	b570      	push	{r4, r5, r6, lr}
 800367a:	b092      	sub	sp, #72	; 0x48
 800367c:	4613      	mov	r3, r2
 800367e:	468c      	mov	ip, r1
 8003680:	4686      	mov	lr, r0
////    static internal ContextCallback s_ccb = new ContextCallback( ThreadStart_Context );
////
////    static internal void ThreadStart_Context( Object state )
////    {
////        ThreadHelper t = (ThreadHelper)state;
////        if(t.m_start is ThreadStart)
 8003682:	4c46      	ldr	r4, [pc, #280]	; (800379c <Thread_.ctor$3992+0x124>)
 8003684:	4d46      	ldr	r5, [pc, #280]	; (80037a0 <Thread_.ctor$3992+0x128>)
 8003686:	447d      	add	r5, pc
 8003688:	442c      	add	r4, r5
 800368a:	4e46      	ldr	r6, [pc, #280]	; (80037a4 <Thread_.ctor$3992+0x12c>)
 800368c:	442e      	add	r6, r5
 800368e:	9011      	str	r0, [sp, #68]	; 0x44
 8003690:	4620      	mov	r0, r4
 8003692:	9110      	str	r1, [sp, #64]	; 0x40
 8003694:	4631      	mov	r1, r6
 8003696:	920f      	str	r2, [sp, #60]	; 0x3c
 8003698:	950e      	str	r5, [sp, #56]	; 0x38
 800369a:	940d      	str	r4, [sp, #52]	; 0x34
 800369c:	930c      	str	r3, [sp, #48]	; 0x30
 800369e:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 80036a2:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 80036a6:	f7fd f88b 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 80036aa:	9911      	ldr	r1, [sp, #68]	; 0x44
 80036ac:	64c8      	str	r0, [r1, #76]	; 0x4c
 80036ae:	483e      	ldr	r0, [pc, #248]	; (80037a8 <Thread_.ctor$3992+0x130>)
 80036b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80036b2:	4410      	add	r0, r2
 80036b4:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
////    // call back helper
////    internal void ThreadStart( object obj )
////    {
////        m_startArg = obj;
////
////        if(m_executionContext != null)
 80036b8:	f103 0c01 	add.w	ip, r3, #1
 80036bc:	f8c0 c0fc 	str.w	ip, [r0, #252]	; 0xfc
 80036c0:	2000      	movs	r0, #0
 80036c2:	f2c1 2034 	movt	r0, #4660	; 0x1234
 80036c6:	4318      	orrs	r0, r3
 80036c8:	6088      	str	r0, [r1, #8]
 80036ca:	9810      	ldr	r0, [sp, #64]	; 0x40
 80036cc:	6148      	str	r0, [r1, #20]
 80036ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80036d0:	618b      	str	r3, [r1, #24]
////{
////    Delegate         m_start;
////    Object           m_startArg         = null;
////    ExecutionContext m_executionContext = null;
////
////    internal ThreadHelper( Delegate start )
 80036d2:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 80037ac <Thread_.ctor$3992+0x134>
 80036d6:	4494      	add	ip, r2
 80036d8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80036da:	4661      	mov	r1, ip
 80036dc:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 80036e0:	f7fd f86e 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 80036e4:	9008      	str	r0, [sp, #32]
 80036e6:	f000 fbbc 	bl	8003e62 <Context_.ctor$16959>
 80036ea:	9808      	ldr	r0, [sp, #32]
 80036ec:	9911      	ldr	r1, [sp, #68]	; 0x44
 80036ee:	61c8      	str	r0, [r1, #28]
 80036f0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80036f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80036f4:	f7fd f864 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 80036f8:	9007      	str	r0, [sp, #28]
 80036fa:	f000 fbb2 	bl	8003e62 <Context_.ctor$16959>
 80036fe:	9807      	ldr	r0, [sp, #28]
 8003700:	9911      	ldr	r1, [sp, #68]	; 0x44
 8003702:	6208      	str	r0, [r1, #32]
 8003704:	2208      	movs	r2, #8
 8003706:	624a      	str	r2, [r1, #36]	; 0x24
////        }
////        else
////        {
////            ((ParameterizedThreadStart)m_start)( obj );
////        }
////    }
 8003708:	4a29      	ldr	r2, [pc, #164]	; (80037b0 <Thread_.ctor$3992+0x138>)
 800370a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800370c:	441a      	add	r2, r3
 800370e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003710:	4611      	mov	r1, r2
 8003712:	9206      	str	r2, [sp, #24]
 8003714:	f7fd f854 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8003718:	9005      	str	r0, [sp, #20]
 800371a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800371c:	f000 fba5 	bl	8003e6a <KernelNode`1_.ctor$17265>
 8003720:	9805      	ldr	r0, [sp, #20]
 8003722:	9911      	ldr	r1, [sp, #68]	; 0x44
 8003724:	6288      	str	r0, [r1, #40]	; 0x28
////
 8003726:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003728:	9906      	ldr	r1, [sp, #24]
 800372a:	f7fd f849 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800372e:	9004      	str	r0, [sp, #16]
 8003730:	9911      	ldr	r1, [sp, #68]	; 0x44
 8003732:	f000 fb9a 	bl	8003e6a <KernelNode`1_.ctor$17265>
 8003736:	9804      	ldr	r0, [sp, #16]
 8003738:	9911      	ldr	r1, [sp, #68]	; 0x44
 800373a:	62c8      	str	r0, [r1, #44]	; 0x2c
////    // call back helper
 800373c:	4a1d      	ldr	r2, [pc, #116]	; (80037b4 <Thread_.ctor$3992+0x13c>)
 800373e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003740:	18d1      	adds	r1, r2, r3
 8003742:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003744:	f7fd f83c 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8003748:	9003      	str	r0, [sp, #12]
 800374a:	f000 fb97 	bl	8003e7c <KernelList`1_.ctor$17406>
 800374e:	9803      	ldr	r0, [sp, #12]
 8003750:	9911      	ldr	r1, [sp, #68]	; 0x44
 8003752:	6348      	str	r0, [r1, #52]	; 0x34
////    internal void ThreadStart()
 8003754:	4a18      	ldr	r2, [pc, #96]	; (80037b8 <Thread_.ctor$3992+0x140>)
 8003756:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003758:	18d1      	adds	r1, r2, r3
 800375a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800375c:	f7fd f830 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8003760:	9002      	str	r0, [sp, #8]
 8003762:	f000 fbc1 	bl	8003ee8 <KernelList`1_.ctor$17418>
 8003766:	9802      	ldr	r0, [sp, #8]
 8003768:	9911      	ldr	r1, [sp, #68]	; 0x44
 800376a:	6388      	str	r0, [r1, #56]	; 0x38
 800376c:	2202      	movs	r2, #2
 800376e:	610a      	str	r2, [r1, #16]
////    {
////        if(m_executionContext != null)
////        {
////            ExecutionContext.Run( m_executionContext, s_ccb, (Object)this );
 8003770:	4a12      	ldr	r2, [pc, #72]	; (80037bc <Thread_.ctor$3992+0x144>)
 8003772:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003774:	18d1      	adds	r1, r2, r3
 8003776:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003778:	f7fd f822 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800377c:	4910      	ldr	r1, [pc, #64]	; (80037c0 <Thread_.ctor$3992+0x148>)
 800377e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003780:	440a      	add	r2, r1
 8003782:	9001      	str	r0, [sp, #4]
 8003784:	9911      	ldr	r1, [sp, #68]	; 0x44
 8003786:	f7fe f999 	bl	8001abc <MulticastDelegate_.ctor$4629>
////        }
////        else
 800378a:	9811      	ldr	r0, [sp, #68]	; 0x44
 800378c:	6982      	ldr	r2, [r0, #24]
 800378e:	69c0      	ldr	r0, [r0, #28]
 8003790:	9901      	ldr	r1, [sp, #4]
 8003792:	f000 f921 	bl	80039d8 <Context_PopulateFromDelegate$5655>
 8003796:	b012      	add	sp, #72	; 0x48
 8003798:	bd70      	pop	{r4, r5, r6, pc}
 800379a:	46c0      	nop			; (mov r8, r8)
 800379c:	ffffea38 	.word	0xffffea38
 80037a0:	17ffe14a 	.word	0x17ffe14a
 80037a4:	e8010d3c 	.word	0xe8010d3c
 80037a8:	fffffe3c 	.word	0xfffffe3c
 80037ac:	e8010dec 	.word	0xe8010dec
 80037b0:	e8010e7c 	.word	0xe8010e7c
 80037b4:	e8010f0c 	.word	0xe8010f0c
 80037b8:	e8010f9c 	.word	0xe8010f9c
 80037bc:	e801102c 	.word	0xe801102c
 80037c0:	e80027d5 	.word	0xe80027d5

080037c4 <Thread_Start$3993>:
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	4601      	mov	r1, r0
        // Helper Methods
        //

        public void Start()
        {
            if((m_state & ThreadState.Unstarted) == 0)
 80037ca:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 80037ce:	f010 0f08 	tst.w	r0, #8
 80037d2:	9103      	str	r1, [sp, #12]
 80037d4:	d112      	bne.n	80037fc <Thread_Start$3993+0x38>
 80037d6:	e7ff      	b.n	80037d8 <Thread_Start$3993+0x14>
            {
#if EXCEPTION_STRINGS
                throw new ThreadStateException( "Thread already started" );
#else
                throw new ThreadStateException();
 80037d8:	e7ff      	b.n	80037da <Thread_Start$3993+0x16>
 80037da:	4811      	ldr	r0, [pc, #68]	; (8003820 <Thread_Start$3993+0x5c>)
 80037dc:	4911      	ldr	r1, [pc, #68]	; (8003824 <Thread_Start$3993+0x60>)
 80037de:	4479      	add	r1, pc
 80037e0:	4408      	add	r0, r1
 80037e2:	4a11      	ldr	r2, [pc, #68]	; (8003828 <Thread_Start$3993+0x64>)
 80037e4:	4411      	add	r1, r2
 80037e6:	9002      	str	r0, [sp, #8]
 80037e8:	f7fc ffea 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 80037ec:	9001      	str	r0, [sp, #4]
 80037ee:	f000 f861 	bl	80038b4 <ThreadStateException_.ctor$7774>
 80037f2:	9802      	ldr	r0, [sp, #8]
 80037f4:	9901      	ldr	r1, [sp, #4]
 80037f6:	f7fd f839 	bl	800086c <TypeSystemManager_Throw$4954>
 80037fa:	e7ee      	b.n	80037da <Thread_Start$3993+0x16>
 80037fc:	9803      	ldr	r0, [sp, #12]
 80037fe:	6a41      	ldr	r1, [r0, #36]	; 0x24
#endif
            }

            m_state &= ~ThreadState.Unstarted;
 8003800:	f021 0108 	bic.w	r1, r1, #8
 8003804:	6241      	str	r1, [r0, #36]	; 0x24

            ThreadManager.Instance.AddThread( this );
 8003806:	4904      	ldr	r1, [pc, #16]	; (8003818 <Thread_Start$3993+0x54>)
 8003808:	4a04      	ldr	r2, [pc, #16]	; (800381c <Thread_Start$3993+0x58>)
 800380a:	447a      	add	r2, pc
 800380c:	1888      	adds	r0, r1, r2
 800380e:	9903      	ldr	r1, [sp, #12]
 8003810:	f000 f80c 	bl	800382c <ThreadManager_AddThread$3162>
 8003814:	b004      	add	sp, #16
 8003816:	bd80      	pop	{r7, pc}
 8003818:	ffffeaac 	.word	0xffffeaac
 800381c:	17ffdfc6 	.word	0x17ffdfc6
 8003820:	ffffea38 	.word	0xffffea38
 8003824:	17ffdff2 	.word	0x17ffdff2
 8003828:	e8010cac 	.word	0xe8010cac

0800382c <ThreadManager_AddThread$3162>:
 800382c:	b580      	push	{r7, lr}
 800382e:	b088      	sub	sp, #32
 8003830:	460a      	mov	r2, r1
 8003832:	ab06      	add	r3, sp, #24
 8003834:	f04f 0c00 	mov.w	ip, #0
 8003838:	f8cd c018 	str.w	ip, [sp, #24]
        {
            [Inline]
            get
            {
                return m_runningThread != m_nextThread;
            }
 800383c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
            m_allThreads.InsertAtTail( thread.RegistrationLink );
        }

        public virtual void AddThread( ThreadImpl thread )
        {
            BugCheck.Assert( thread.SchedulingLink.VerifyUnlinked(), BugCheck.StopCode.KernelNodeStillLinked );
 800383e:	9005      	str	r0, [sp, #20]
 8003840:	4608      	mov	r0, r1
 8003842:	9304      	str	r3, [sp, #16]
 8003844:	9203      	str	r2, [sp, #12]
 8003846:	f001 fa61 	bl	8004d0c <KernelNode`1_VerifyUnlinked$17272>

            public override void SetNextQuantumTimer()
            {
            }

            public override void SetNextQuantumTimer( SchedulerTime nextTimeout )
 800384a:	f010 0fff 	tst.w	r0, #255	; 0xff
 800384e:	d107      	bne.n	8003860 <ThreadManager_AddThread$3162+0x34>
 8003850:	e7ff      	b.n	8003852 <ThreadManager_AddThread$3162+0x26>
 8003852:	4816      	ldr	r0, [pc, #88]	; (80038ac <ThreadManager_AddThread$3162+0x80>)
 8003854:	4916      	ldr	r1, [pc, #88]	; (80038b0 <ThreadManager_AddThread$3162+0x84>)
 8003856:	4479      	add	r1, pc
 8003858:	5840      	ldr	r0, [r0, r1]
            {
            }
 800385a:	f7fc fd53 	bl	8000304 <BugCheck_Raise$4648>

 800385e:	e7ff      	b.n	8003860 <ThreadManager_AddThread$3162+0x34>
 8003860:	2000      	movs	r0, #0
 8003862:	9007      	str	r0, [sp, #28]
            public override void CancelQuantumTimer()
            {
            }

            public override void SetNextQuantumTimer()
            {
 8003864:	9002      	str	r0, [sp, #8]
 8003866:	f000 fed1 	bl	800460c <ProcessorARMv7M_DisableInterrupts$3259>
 800386a:	9902      	ldr	r1, [sp, #8]
 800386c:	9107      	str	r1, [sp, #28]
 800386e:	9007      	str	r0, [sp, #28]
 8003870:	0e02      	lsrs	r2, r0, #24
 8003872:	9b04      	ldr	r3, [sp, #16]
 8003874:	70da      	strb	r2, [r3, #3]
 8003876:	0c02      	lsrs	r2, r0, #16
 8003878:	709a      	strb	r2, [r3, #2]
 800387a:	0a02      	lsrs	r2, r0, #8
 800387c:	705a      	strb	r2, [r3, #1]
 800387e:	7018      	strb	r0, [r3, #0]
        {
            BugCheck.Assert( thread.SchedulingLink.VerifyUnlinked(), BugCheck.StopCode.KernelNodeStillLinked );

            using(SmartHandles.InterruptState hnd = SmartHandles.InterruptState.Disable())
            {
                RegisterThread( thread );
 8003880:	9805      	ldr	r0, [sp, #20]
 8003882:	9903      	ldr	r1, [sp, #12]
 8003884:	f001 fa0c 	bl	8004ca0 <ThreadManager_RegisterThread$3161>

                InsertInPriorityOrder( thread );
 8003888:	9805      	ldr	r0, [sp, #20]
 800388a:	9903      	ldr	r1, [sp, #12]
 800388c:	f001 fa53 	bl	8004d36 <ThreadManager_InsertInPriorityOrder$3187>

                RescheduleAndRequestContextSwitchIfNeeded( hnd.GetCurrentExceptionMode() );
 8003890:	f001 fa94 	bl	8004dbc <InterruptState_GetCurrentExceptionMode$5301>
 8003894:	9905      	ldr	r1, [sp, #20]
 8003896:	9001      	str	r0, [sp, #4]
 8003898:	4608      	mov	r0, r1
 800389a:	9901      	ldr	r1, [sp, #4]
 800389c:	f001 fada 	bl	8004e54 <ThreadManager_RescheduleAndRequestContextSwitchIfNeeded$3170>
            }

            public override void InitializeAfterStaticConstructors( uint[] systemStack )
            {
            }

 80038a0:	9806      	ldr	r0, [sp, #24]
 80038a2:	f000 fed5 	bl	8004650 <ProcessorARMv7M_DisableInterruptsWithPriorityLevelHigherOrEqualTo$3266>
 80038a6:	b008      	add	sp, #32
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	46c0      	nop			; (mov r8, r8)
 80038ac:	e8025214 	.word	0xe8025214
 80038b0:	17ffdf7a 	.word	0x17ffdf7a

080038b4 <ThreadStateException_.ctor$7774>:
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	4601      	mov	r1, r0

        [TS.WellKnownField( "ArrayImpl_m_numElements" )]
        internal uint m_numElements;

        //
        // Constructor Methods
 80038ba:	4a05      	ldr	r2, [pc, #20]	; (80038d0 <ThreadStateException_.ctor$7774+0x1c>)
 80038bc:	4b05      	ldr	r3, [pc, #20]	; (80038d4 <ThreadStateException_.ctor$7774+0x20>)
 80038be:	447b      	add	r3, pc
 80038c0:	441a      	add	r2, r3
 80038c2:	9101      	str	r1, [sp, #4]
 80038c4:	4611      	mov	r1, r2
 80038c6:	f007 fcba 	bl	800b23e <SystemException_.ctor$7366>
 80038ca:	b002      	add	sp, #8
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	46c0      	nop			; (mov r8, r8)
 80038d0:	e80131fc 	.word	0xe80131fc
 80038d4:	17ffdf12 	.word	0x17ffdf12

080038d8 <Thread_set_Priority$4028>:
 80038d8:	b082      	sub	sp, #8
 80038da:	460a      	mov	r2, r1
 80038dc:	4603      	mov	r3, r0
 80038de:	6101      	str	r1, [r0, #16]
 80038e0:	9301      	str	r3, [sp, #4]
 80038e2:	9200      	str	r2, [sp, #0]
 80038e4:	b002      	add	sp, #8
 80038e6:	4770      	bx	lr

080038e8 <Thread_Sleep$3997>:
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	4601      	mov	r1, r0
            return joinEvent.WaitOne( timeout, false );
        }

        public static void Sleep( int millisecondsTimeout )
        {
            ThreadManager.Instance.Sleep( (SchedulerTime)millisecondsTimeout );
 80038ee:	9101      	str	r1, [sp, #4]
 80038f0:	f000 f804 	bl	80038fc <SchedulerTime_op_Explicit$4823>
 80038f4:	f000 f818 	bl	8003928 <ThreadManager_Sleep$3183>
 80038f8:	b002      	add	sp, #8
 80038fa:	bd80      	pop	{r7, pc}

080038fc <SchedulerTime_op_Explicit$4823>:
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	4601      	mov	r1, r0

        //--//

        public static explicit operator SchedulerTime ( int milliseconds )
        {
            return new SchedulerTime( ConvertFromMillisecondsToUnits( milliseconds ) );
 8003902:	9101      	str	r1, [sp, #4]
 8003904:	f004 fffe 	bl	8008904 <SchedulerTime_ConvertFromMillisecondsToUnits$16440>
 8003908:	2200      	movs	r2, #0
 800390a:	9203      	str	r2, [sp, #12]
 800390c:	9202      	str	r2, [sp, #8]
 800390e:	aa02      	add	r2, sp, #8
 8003910:	3a08      	subs	r2, #8
 8003912:	9000      	str	r0, [sp, #0]
 8003914:	4610      	mov	r0, r2
 8003916:	9a00      	ldr	r2, [sp, #0]
 8003918:	460b      	mov	r3, r1
 800391a:	f004 ff4d 	bl	80087b8 <SchedulerTime_.ctor$4803>
 800391e:	9802      	ldr	r0, [sp, #8]
 8003920:	9903      	ldr	r1, [sp, #12]
 8003922:	b004      	add	sp, #16
 8003924:	bd80      	pop	{r7, pc}
 8003926:	46c0      	nop			; (mov r8, r8)

08003928 <ThreadManager_Sleep$3183>:
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	460a      	mov	r2, r1
 800392e:	4603      	mov	r3, r0

        //--//

        public void Sleep( SchedulerTime schedulerTime )
        {
            m_neverSignaledEvent.WaitOne( schedulerTime, false );
 8003930:	f8df c02c 	ldr.w	ip, [pc, #44]	; 8003960 <ThreadManager_Sleep$3183+0x38>
 8003934:	f8df e02c 	ldr.w	lr, [pc, #44]	; 8003964 <ThreadManager_Sleep$3183+0x3c>
 8003938:	44fe      	add	lr, pc
 800393a:	44f4      	add	ip, lr
 800393c:	f8dc c01c 	ldr.w	ip, [ip, #28]
 8003940:	f8dc c008 	ldr.w	ip, [ip, #8]
 8003944:	9003      	str	r0, [sp, #12]
 8003946:	4660      	mov	r0, ip
 8003948:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800394c:	9202      	str	r2, [sp, #8]
 800394e:	4662      	mov	r2, ip
 8003950:	9301      	str	r3, [sp, #4]
 8003952:	460b      	mov	r3, r1
 8003954:	f001 fd2c 	bl	80053b0 <WaitHandle_WaitOne$3940>
 8003958:	9000      	str	r0, [sp, #0]
 800395a:	b004      	add	sp, #16
 800395c:	bd80      	pop	{r7, pc}
 800395e:	46c0      	nop			; (mov r8, r8)
 8003960:	ffffeaac 	.word	0xffffeaac
 8003964:	17ffde98 	.word	0x17ffde98

08003968 <Holder_Dispose$5586>:
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	4601      	mov	r1, r0
 800396e:	aa04      	add	r2, sp, #16
 8003970:	2300      	movs	r3, #0
 8003972:	9304      	str	r3, [sp, #16]
            // Helper Methods
            //

            public void Dispose()
            {
                if(m_wr != null)
 8003974:	6980      	ldr	r0, [r0, #24]
 8003976:	2800      	cmp	r0, #0
 8003978:	9203      	str	r2, [sp, #12]
 800397a:	9102      	str	r1, [sp, #8]
 800397c:	d01d      	beq.n	80039ba <Holder_Dispose$5586+0x52>
 800397e:	e7ff      	b.n	8003980 <Holder_Dispose$5586+0x18>
 8003980:	2000      	movs	r0, #0
 8003982:	9005      	str	r0, [sp, #20]
                {
                    using(SmartHandles.InterruptState.Disable())
                    {
                        m_wr.Recycle();

 8003984:	9001      	str	r0, [sp, #4]
 8003986:	f000 fe41 	bl	800460c <ProcessorARMv7M_DisableInterrupts$3259>
 800398a:	9901      	ldr	r1, [sp, #4]
 800398c:	9105      	str	r1, [sp, #20]
 800398e:	9005      	str	r0, [sp, #20]
 8003990:	0e02      	lsrs	r2, r0, #24
 8003992:	9b03      	ldr	r3, [sp, #12]
 8003994:	70da      	strb	r2, [r3, #3]
 8003996:	0c02      	lsrs	r2, r0, #16
 8003998:	709a      	strb	r2, [r3, #2]
 800399a:	0a02      	lsrs	r2, r0, #8
 800399c:	705a      	strb	r2, [r3, #1]
 800399e:	7018      	strb	r0, [r3, #0]
            {
                if(m_wr != null)
                {
                    using(SmartHandles.InterruptState.Disable())
                    {
                        m_wr.Recycle();
 80039a0:	9802      	ldr	r0, [sp, #8]
 80039a2:	6980      	ldr	r0, [r0, #24]
 80039a4:	f005 ff3e 	bl	8009824 <WaitingRecord_Recycle$5004>
 80039a8:	9801      	ldr	r0, [sp, #4]
 80039aa:	9902      	ldr	r1, [sp, #8]
 80039ac:	6088      	str	r0, [r1, #8]
 80039ae:	60c8      	str	r0, [r1, #12]
 80039b0:	6188      	str	r0, [r1, #24]
            }

////        public Holder( ThreadImpl                     thread         ,
////                       Synchronization.WaitableObject waitableObject ,
////                       SchedulerTime                  timeout        )
////        {
 80039b2:	9804      	ldr	r0, [sp, #16]
 80039b4:	f000 fe4c 	bl	8004650 <ProcessorARMv7M_DisableInterruptsWithPriorityLevelHigherOrEqualTo$3266>

                        m_thread         = null;
                        m_waitableObject = null;
                        m_wr             = null;
                    }
                }
 80039b8:	e7ff      	b.n	80039ba <Holder_Dispose$5586+0x52>
 80039ba:	b006      	add	sp, #24
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	46c0      	nop			; (mov r8, r8)

080039c0 <Context_Populate$5653>:

                RT.BugCheck.Assert( false, BugCheck.StopCode.IllegalMode );
            }
            
            public override void Populate( )
            {
 80039c0:	b580      	push	{r7, lr}
 80039c2:	4803      	ldr	r0, [pc, #12]	; (80039d0 <Context_Populate$5653+0x10>)
 80039c4:	4903      	ldr	r1, [pc, #12]	; (80039d4 <Context_Populate$5653+0x14>)
 80039c6:	4479      	add	r1, pc
 80039c8:	5840      	ldr	r0, [r0, r1]
                BugCheck.Raise( BugCheck.StopCode.InvalidOperation );
 80039ca:	f7fc fc9b 	bl	8000304 <BugCheck_Raise$4648>
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	e8025378 	.word	0xe8025378
 80039d4:	17ffde0a 	.word	0x17ffde0a

080039d8 <Context_PopulateFromDelegate$5655>:
 80039d8:	b510      	push	{r4, lr}
 80039da:	f5ad 7d6c 	sub.w	sp, sp, #944	; 0x3b0
 80039de:	460b      	mov	r3, r1
 80039e0:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
 80039e4:	46e6      	mov	lr, ip
 80039e6:	2448      	movs	r4, #72	; 0x48
 80039e8:	901b      	str	r0, [sp, #108]	; 0x6c
 80039ea:	4660      	mov	r0, ip
 80039ec:	911a      	str	r1, [sp, #104]	; 0x68
 80039ee:	4621      	mov	r1, r4
 80039f0:	9319      	str	r3, [sp, #100]	; 0x64
 80039f2:	f8cd e060 	str.w	lr, [sp, #96]	; 0x60
 80039f6:	9217      	str	r2, [sp, #92]	; 0x5c
 80039f8:	9416      	str	r4, [sp, #88]	; 0x58
 80039fa:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 80039fe:	f01c fa26 	bl	801fe4e <__aeabi_memclr>
 8003a02:	2000      	movs	r0, #0
 8003a04:	902e      	str	r0, [sp, #184]	; 0xb8
                [TS.AssumeReferenced] public UIntPtr LR;
                [TS.AssumeReferenced] public UIntPtr PC;
                [TS.AssumeReferenced] public UIntPtr PSR;
                // HW stack frame for FP
                [TS.AssumeReferenced] public float   S0;
                [TS.AssumeReferenced] public float   S1;
 8003a06:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003a08:	f101 0208 	add.w	r2, r1, #8
 8003a0c:	922f      	str	r2, [sp, #188]	; 0xbc
 8003a0e:	9030      	str	r0, [sp, #192]	; 0xc0
                    this.S11        = other.S11;
                    this.S12        = other.S12;
                    this.S13        = other.S13;
                    this.S14        = other.S14;
                    this.S15        = other.S15;
                    this.S16        = other.S16;
 8003a10:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
                [TS.AssumeReferenced] public float   S15;
                [TS.AssumeReferenced] public UIntPtr FPSCR_1;
                [TS.AssumeReferenced] public UIntPtr FPSCR_2;

                //
                // Helper Methods
 8003a12:	f1a2 0108 	sub.w	r1, r2, #8
 8003a16:	9030      	str	r0, [sp, #192]	; 0xc0
 8003a18:	aa30      	add	r2, sp, #192	; 0xc0
 8003a1a:	3a08      	subs	r2, #8
 8003a1c:	9014      	str	r0, [sp, #80]	; 0x50
 8003a1e:	4610      	mov	r0, r2
 8003a20:	f7fc ff4c 	bl	80008bc <UIntPtr_.ctor$2864>
                [TS.AssumeReferenced] public UIntPtr LR;
                [TS.AssumeReferenced] public UIntPtr PC;
                [TS.AssumeReferenced] public UIntPtr PSR;
                // HW stack frame for FP
                [TS.AssumeReferenced] public float   S0;
                [TS.AssumeReferenced] public float   S1;
 8003a24:	9830      	ldr	r0, [sp, #192]	; 0xc0
                //

                internal unsafe UIntPtr* GetRegisterPointer( uint idx )
                {
                    switch(idx)
                    {
 8003a26:	6840      	ldr	r0, [r0, #4]
                    this.R4         = other.R4;
                    this.R5         = other.R5;
                    this.R6         = other.R6;
                    this.R7         = other.R7;
                    this.R8         = other.R8;
                    this.R9         = other.R9;
 8003a28:	69c0      	ldr	r0, [r0, #28]
 8003a2a:	6980      	ldr	r0, [r0, #24]
 8003a2c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003a2e:	9013      	str	r0, [sp, #76]	; 0x4c
 8003a30:	4608      	mov	r0, r1
 8003a32:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003a34:	4790      	blx	r2
 8003a36:	4601      	mov	r1, r0
 8003a38:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003a3a:	9012      	str	r0, [sp, #72]	; 0x48
 8003a3c:	4610      	mov	r0, r2
 8003a3e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003a40:	9111      	str	r1, [sp, #68]	; 0x44
 8003a42:	4619      	mov	r1, r3
 8003a44:	f01c fa03 	bl	801fe4e <__aeabi_memclr>

                //
                // build the first stack frame
                //
                RegistersOnStackNoFPContext registers = new RegistersOnStackNoFPContext();
                registers.PC            = new UIntPtr( dlgImpl.InnerGetCodePointer( ).Target.ToPointer( ) );
 8003a48:	9815      	ldr	r0, [sp, #84]	; 0x54
 8003a4a:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003a4c:	68ca      	ldr	r2, [r1, #12]
 8003a4e:	922e      	str	r2, [sp, #184]	; 0xb8
 8003a50:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003a52:	9331      	str	r3, [sp, #196]	; 0xc4
 8003a54:	f10d 0cc4 	add.w	ip, sp, #196	; 0xc4
 8003a58:	f1ac 0c08 	sub.w	ip, ip, #8
 8003a5c:	9010      	str	r0, [sp, #64]	; 0x40
 8003a5e:	4660      	mov	r0, ip
 8003a60:	4611      	mov	r1, r2
 8003a62:	f7fc ff2b 	bl	80008bc <UIntPtr_.ctor$2864>
 8003a66:	9815      	ldr	r0, [sp, #84]	; 0x54
 8003a68:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8003a6c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8003a6e:	f801 2b02 	strb.w	r2, [r1], #2
 8003a72:	0e13      	lsrs	r3, r2, #24
 8003a74:	704b      	strb	r3, [r1, #1]
 8003a76:	0c13      	lsrs	r3, r2, #16
 8003a78:	700b      	strb	r3, [r1, #0]
 8003a7a:	0a11      	lsrs	r1, r2, #8
 8003a7c:	f88d 10b1 	strb.w	r1, [sp, #177]	; 0xb1
 8003a80:	9914      	ldr	r1, [sp, #80]	; 0x50
 8003a82:	9132      	str	r1, [sp, #200]	; 0xc8
 8003a84:	aa32      	add	r2, sp, #200	; 0xc8
                registers.PSR           = new UIntPtr( ProcessorARMv7M.c_psr_InitialValue );
 8003a86:	f1a2 0008 	sub.w	r0, r2, #8
 8003a8a:	4abf      	ldr	r2, [pc, #764]	; (8003d88 <Context_PopulateFromDelegate$5655+0x3b0>)
 8003a8c:	4bbf      	ldr	r3, [pc, #764]	; (8003d8c <Context_PopulateFromDelegate$5655+0x3b4>)
 8003a8e:	447b      	add	r3, pc
 8003a90:	58d1      	ldr	r1, [r2, r3]
 8003a92:	f7ff fd62 	bl	800355a <UIntPtr_.ctor$2860>
 8003a96:	9815      	ldr	r0, [sp, #84]	; 0x54
 8003a98:	f100 0144 	add.w	r1, r0, #68	; 0x44
 8003a9c:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8003a9e:	f801 2b02 	strb.w	r2, [r1], #2
 8003aa2:	0e13      	lsrs	r3, r2, #24
 8003aa4:	704b      	strb	r3, [r1, #1]
 8003aa6:	0c13      	lsrs	r3, r2, #16
 8003aa8:	700b      	strb	r3, [r1, #0]
 8003aaa:	0a11      	lsrs	r1, r2, #8
 8003aac:	f88d 10b5 	strb.w	r1, [sp, #181]	; 0xb5
 8003ab0:	f06f 0102 	mvn.w	r1, #2
 8003ab4:	911c      	str	r1, [sp, #112]	; 0x70
 8003ab6:	2102      	movs	r1, #2
 8003ab8:	911d      	str	r1, [sp, #116]	; 0x74
                registers.EXC_RETURN    = c_MODE_RETURN__THREAD_PSP; // !!! here we assume that no context starts with FP context active !!!
                registers.CONTROL       = c_CONTROL__MODE__THRD_PRIV;
                
                if(objImpl != null)
 8003aba:	9912      	ldr	r1, [sp, #72]	; 0x48
 8003abc:	2900      	cmp	r1, #0
 8003abe:	900f      	str	r0, [sp, #60]	; 0x3c
 8003ac0:	d022      	beq.n	8003b08 <Context_PopulateFromDelegate$5655+0x130>
 8003ac2:	e7ff      	b.n	8003ac4 <Context_PopulateFromDelegate$5655+0xec>
                {
                    registers.R0 = AddressMath.Decrement( new UIntPtr( objImpl.Unpack( ) ), 8 );
 8003ac4:	9811      	ldr	r0, [sp, #68]	; 0x44
 8003ac6:	f100 0108 	add.w	r1, r0, #8
 8003aca:	2200      	movs	r2, #0
 8003acc:	92e9      	str	r2, [sp, #932]	; 0x3a4
 8003ace:	abe9      	add	r3, sp, #932	; 0x3a4
 8003ad0:	f1a3 0008 	sub.w	r0, r3, #8
 8003ad4:	920e      	str	r2, [sp, #56]	; 0x38
 8003ad6:	f7fc fef1 	bl	80008bc <UIntPtr_.ctor$2864>
 8003ada:	98e9      	ldr	r0, [sp, #932]	; 0x3a4
 8003adc:	90ea      	str	r0, [sp, #936]	; 0x3a8
 8003ade:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003ae0:	90eb      	str	r0, [sp, #940]	; 0x3ac
                    this.S11        = other.S11;
                    this.S12        = other.S12;
                    this.S13        = other.S13;
                    this.S14        = other.S14;
                    this.S15        = other.S15;
                    this.S16        = other.S16;
 8003ae2:	99ea      	ldr	r1, [sp, #936]	; 0x3a8
                [TS.AssumeReferenced] public float   S15;
                [TS.AssumeReferenced] public UIntPtr FPSCR_1;
                [TS.AssumeReferenced] public UIntPtr FPSCR_2;

                //
                // Helper Methods
 8003ae4:	3908      	subs	r1, #8
 8003ae6:	90eb      	str	r0, [sp, #940]	; 0x3ac
 8003ae8:	aaeb      	add	r2, sp, #940	; 0x3ac
 8003aea:	f1a2 0008 	sub.w	r0, r2, #8
 8003aee:	f7fc fee5 	bl	80008bc <UIntPtr_.ctor$2864>
 8003af2:	98eb      	ldr	r0, [sp, #940]	; 0x3ac
 8003af4:	9910      	ldr	r1, [sp, #64]	; 0x40
 8003af6:	f801 0f28 	strb.w	r0, [r1, #40]!
 8003afa:	0e02      	lsrs	r2, r0, #24
 8003afc:	70ca      	strb	r2, [r1, #3]
 8003afe:	0c02      	lsrs	r2, r0, #16
 8003b00:	708a      	strb	r2, [r1, #2]
 8003b02:	0a00      	lsrs	r0, r0, #8
 8003b04:	7048      	strb	r0, [r1, #1]
                registers.CONTROL       = c_CONTROL__MODE__THRD_PRIV;
                
                if(objImpl != null)
                {
                    registers.R0 = AddressMath.Decrement( new UIntPtr( objImpl.Unpack( ) ), 8 );
                }
 8003b06:	e013      	b.n	8003b30 <Context_PopulateFromDelegate$5655+0x158>
 8003b08:	2000      	movs	r0, #0
 8003b0a:	9033      	str	r0, [sp, #204]	; 0xcc
 8003b0c:	a933      	add	r1, sp, #204	; 0xcc
                else
                {
                    registers.R0 = new UIntPtr( 0 );
 8003b0e:	3908      	subs	r1, #8
 8003b10:	900d      	str	r0, [sp, #52]	; 0x34
 8003b12:	4608      	mov	r0, r1
 8003b14:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003b16:	f7ff fd20 	bl	800355a <UIntPtr_.ctor$2860>
 8003b1a:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8003b1c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8003b1e:	f801 0f28 	strb.w	r0, [r1, #40]!
 8003b22:	0e02      	lsrs	r2, r0, #24
 8003b24:	70ca      	strb	r2, [r1, #3]
 8003b26:	0c02      	lsrs	r2, r0, #16
 8003b28:	708a      	strb	r2, [r1, #2]
 8003b2a:	0a00      	lsrs	r0, r0, #8
 8003b2c:	7048      	strb	r0, [r1, #1]
                }
 8003b2e:	e7ff      	b.n	8003b30 <Context_PopulateFromDelegate$5655+0x158>
                //
                // Save the initial stack pointer
                // In the general case the SP will be at the top of the current frame we are building
                // When we do a LongJump though, or we start the thread first, we will have to use the base stack pointer
                //
                this.SP         = GetFirstStackPointerFromPhysicalStack( stackImpl );
 8003b30:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8003b32:	f007 f9a9 	bl	800ae88 <Context_GetFirstStackPointerFromPhysicalStack$5669>
 8003b36:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8003b38:	6088      	str	r0, [r1, #8]
 8003b3a:	f06f 0002 	mvn.w	r0, #2
 8003b3e:	60c8      	str	r0, [r1, #12]
#endif

                //
                // Initial offset from start of stack storage must be at least as large as a frame
                //
                RT.BugCheck.Assert( (((int)stackImpl.GetEndDataPointer( ) - this.SP.ToUInt32( )) >= RegistersOnStackNoFPContext.TotalFrameSize), 
 8003b40:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8003b42:	f7fd fa69 	bl	8001018 <Array_GetEndDataPointer$3710>
 8003b46:	17c1      	asrs	r1, r0, #31
 8003b48:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8003b4a:	900c      	str	r0, [sp, #48]	; 0x30
 8003b4c:	4610      	mov	r0, r2
 8003b4e:	910b      	str	r1, [sp, #44]	; 0x2c
 8003b50:	f7ff fd12 	bl	8003578 <UIntPtr_ToUInt32$2870>
 8003b54:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003b56:	1a08      	subs	r0, r1, r0
 8003b58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003b5a:	f162 0200 	sbc.w	r2, r2, #0
 8003b5e:	f04f 0300 	mov.w	r3, #0
 8003b62:	2847      	cmp	r0, #71	; 0x47
 8003b64:	4618      	mov	r0, r3
 8003b66:	bf88      	it	hi
 8003b68:	2001      	movhi	r0, #1
 8003b6a:	2a00      	cmp	r2, #0
 8003b6c:	bfc8      	it	gt
 8003b6e:	2301      	movgt	r3, #1
 8003b70:	2a00      	cmp	r2, #0
 8003b72:	bf08      	it	eq
 8003b74:	4603      	moveq	r3, r0
                [TS.AssumeReferenced] public float   S25;
                [TS.AssumeReferenced] public float   S26;
                [TS.AssumeReferenced] public float   S27;
                [TS.AssumeReferenced] public float   S28;
                [TS.AssumeReferenced] public float   S29;
                [TS.AssumeReferenced] public float   S30;
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d107      	bne.n	8003b8a <Context_PopulateFromDelegate$5655+0x1b2>
 8003b7a:	e7ff      	b.n	8003b7c <Context_PopulateFromDelegate$5655+0x1a4>
 8003b7c:	4884      	ldr	r0, [pc, #528]	; (8003d90 <Context_PopulateFromDelegate$5655+0x3b8>)
 8003b7e:	4985      	ldr	r1, [pc, #532]	; (8003d94 <Context_PopulateFromDelegate$5655+0x3bc>)
 8003b80:	4479      	add	r1, pc
 8003b82:	5840      	ldr	r0, [r0, r1]
                [TS.AssumeReferenced] public float   S31;
                // SW stack frame 
 8003b84:	f7fc fbbe 	bl	8000304 <BugCheck_Raise$4648>
                [TS.AssumeReferenced] public uint    EXC_RETURN;
 8003b88:	e7ff      	b.n	8003b8a <Context_PopulateFromDelegate$5655+0x1b2>
 8003b8a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8003b8c:	6881      	ldr	r1, [r0, #8]
 8003b8e:	9134      	str	r1, [sp, #208]	; 0xd0
                // now we need to push manually
                //

                RegistersOnStackNoFPContext* firstFrame = PointerToSimpleFrame( this.SP );

                firstFrame->Assign( ref registers );
 8003b90:	f1a1 0008 	sub.w	r0, r1, #8
 8003b94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003b96:	910a      	str	r1, [sp, #40]	; 0x28
 8003b98:	4611      	mov	r1, r2
 8003b9a:	f007 f9a4 	bl	800aee6 <RegistersOnStackNoFPContext_Assign$5831>
 8003b9e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003ba0:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8003ba2:	a935      	add	r1, sp, #212	; 0xd4
 8003ba4:	2248      	movs	r2, #72	; 0x48
 8003ba6:	9009      	str	r0, [sp, #36]	; 0x24
 8003ba8:	4608      	mov	r0, r1
 8003baa:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003bac:	f01c f952 	bl	801fe54 <__aeabi_memcpy>
 8003bb0:	993f      	ldr	r1, [sp, #252]	; 0xfc

                //--//
                
                RT.BugCheck.Assert( firstFrame->R0          == registers.R0        , BugCheck.StopCode.StackCorruptionDetected );
 8003bb2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003bb4:	f7ff fd13 	bl	80035de <UIntPtr_op_Equality$2886>
                [TS.AssumeReferenced] public float   S25;
                [TS.AssumeReferenced] public float   S26;
                [TS.AssumeReferenced] public float   S27;
                [TS.AssumeReferenced] public float   S28;
                [TS.AssumeReferenced] public float   S29;
                [TS.AssumeReferenced] public float   S30;
 8003bb8:	f010 0fff 	tst.w	r0, #255	; 0xff
 8003bbc:	d107      	bne.n	8003bce <Context_PopulateFromDelegate$5655+0x1f6>
 8003bbe:	e7ff      	b.n	8003bc0 <Context_PopulateFromDelegate$5655+0x1e8>
 8003bc0:	4875      	ldr	r0, [pc, #468]	; (8003d98 <Context_PopulateFromDelegate$5655+0x3c0>)
 8003bc2:	4976      	ldr	r1, [pc, #472]	; (8003d9c <Context_PopulateFromDelegate$5655+0x3c4>)
 8003bc4:	4479      	add	r1, pc
 8003bc6:	5840      	ldr	r0, [r0, r1]
                [TS.AssumeReferenced] public float   S31;
                // SW stack frame 
 8003bc8:	f7fc fb9c 	bl	8000304 <BugCheck_Raise$4648>
                [TS.AssumeReferenced] public uint    EXC_RETURN;
 8003bcc:	e7ff      	b.n	8003bce <Context_PopulateFromDelegate$5655+0x1f6>
 8003bce:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003bd0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8003bd2:	a947      	add	r1, sp, #284	; 0x11c
 8003bd4:	2248      	movs	r2, #72	; 0x48
 8003bd6:	9008      	str	r0, [sp, #32]
 8003bd8:	4608      	mov	r0, r1
 8003bda:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003bdc:	f01c f93a 	bl	801fe54 <__aeabi_memcpy>
 8003be0:	9952      	ldr	r1, [sp, #328]	; 0x148
                firstFrame->Assign( ref registers );

                //--//
                
                RT.BugCheck.Assert( firstFrame->R0          == registers.R0        , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->R1          == registers.R1        , BugCheck.StopCode.StackCorruptionDetected );
 8003be2:	9808      	ldr	r0, [sp, #32]
 8003be4:	f7ff fcfb 	bl	80035de <UIntPtr_op_Equality$2886>
                [TS.AssumeReferenced] public float   S25;
                [TS.AssumeReferenced] public float   S26;
                [TS.AssumeReferenced] public float   S27;
                [TS.AssumeReferenced] public float   S28;
                [TS.AssumeReferenced] public float   S29;
                [TS.AssumeReferenced] public float   S30;
 8003be8:	f010 0fff 	tst.w	r0, #255	; 0xff
 8003bec:	d107      	bne.n	8003bfe <Context_PopulateFromDelegate$5655+0x226>
 8003bee:	e7ff      	b.n	8003bf0 <Context_PopulateFromDelegate$5655+0x218>
 8003bf0:	486b      	ldr	r0, [pc, #428]	; (8003da0 <Context_PopulateFromDelegate$5655+0x3c8>)
 8003bf2:	496c      	ldr	r1, [pc, #432]	; (8003da4 <Context_PopulateFromDelegate$5655+0x3cc>)
 8003bf4:	4479      	add	r1, pc
 8003bf6:	5840      	ldr	r0, [r0, r1]
                [TS.AssumeReferenced] public float   S31;
                // SW stack frame 
 8003bf8:	f7fc fb84 	bl	8000304 <BugCheck_Raise$4648>
                [TS.AssumeReferenced] public uint    EXC_RETURN;
 8003bfc:	e7ff      	b.n	8003bfe <Context_PopulateFromDelegate$5655+0x226>
 8003bfe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003c00:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8003c02:	a959      	add	r1, sp, #356	; 0x164
 8003c04:	2248      	movs	r2, #72	; 0x48
 8003c06:	9007      	str	r0, [sp, #28]
 8003c08:	4608      	mov	r0, r1
 8003c0a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003c0c:	f01c f922 	bl	801fe54 <__aeabi_memcpy>
 8003c10:	9965      	ldr	r1, [sp, #404]	; 0x194

                //--//
                
                RT.BugCheck.Assert( firstFrame->R0          == registers.R0        , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->R1          == registers.R1        , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->R2          == registers.R2        , BugCheck.StopCode.StackCorruptionDetected );
 8003c12:	9807      	ldr	r0, [sp, #28]
 8003c14:	f7ff fce3 	bl	80035de <UIntPtr_op_Equality$2886>
                [TS.AssumeReferenced] public float   S25;
                [TS.AssumeReferenced] public float   S26;
                [TS.AssumeReferenced] public float   S27;
                [TS.AssumeReferenced] public float   S28;
                [TS.AssumeReferenced] public float   S29;
                [TS.AssumeReferenced] public float   S30;
 8003c18:	f010 0fff 	tst.w	r0, #255	; 0xff
 8003c1c:	d107      	bne.n	8003c2e <Context_PopulateFromDelegate$5655+0x256>
 8003c1e:	e7ff      	b.n	8003c20 <Context_PopulateFromDelegate$5655+0x248>
 8003c20:	4861      	ldr	r0, [pc, #388]	; (8003da8 <Context_PopulateFromDelegate$5655+0x3d0>)
 8003c22:	4962      	ldr	r1, [pc, #392]	; (8003dac <Context_PopulateFromDelegate$5655+0x3d4>)
 8003c24:	4479      	add	r1, pc
 8003c26:	5840      	ldr	r0, [r0, r1]
                [TS.AssumeReferenced] public float   S31;
                // SW stack frame 
 8003c28:	f7fc fb6c 	bl	8000304 <BugCheck_Raise$4648>
                [TS.AssumeReferenced] public uint    EXC_RETURN;
 8003c2c:	e7ff      	b.n	8003c2e <Context_PopulateFromDelegate$5655+0x256>
 8003c2e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003c30:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8003c32:	a96b      	add	r1, sp, #428	; 0x1ac
 8003c34:	2248      	movs	r2, #72	; 0x48
 8003c36:	9006      	str	r0, [sp, #24]
 8003c38:	4608      	mov	r0, r1
 8003c3a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003c3c:	f01c f90a 	bl	801fe54 <__aeabi_memcpy>
 8003c40:	9978      	ldr	r1, [sp, #480]	; 0x1e0
                //--//
                
                RT.BugCheck.Assert( firstFrame->R0          == registers.R0        , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->R1          == registers.R1        , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->R2          == registers.R2        , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->R3          == registers.R3        , BugCheck.StopCode.StackCorruptionDetected );
 8003c42:	9806      	ldr	r0, [sp, #24]
 8003c44:	f7ff fccb 	bl	80035de <UIntPtr_op_Equality$2886>
                [TS.AssumeReferenced] public float   S25;
                [TS.AssumeReferenced] public float   S26;
                [TS.AssumeReferenced] public float   S27;
                [TS.AssumeReferenced] public float   S28;
                [TS.AssumeReferenced] public float   S29;
                [TS.AssumeReferenced] public float   S30;
 8003c48:	f010 0fff 	tst.w	r0, #255	; 0xff
 8003c4c:	d107      	bne.n	8003c5e <Context_PopulateFromDelegate$5655+0x286>
 8003c4e:	e7ff      	b.n	8003c50 <Context_PopulateFromDelegate$5655+0x278>
 8003c50:	4857      	ldr	r0, [pc, #348]	; (8003db0 <Context_PopulateFromDelegate$5655+0x3d8>)
 8003c52:	4958      	ldr	r1, [pc, #352]	; (8003db4 <Context_PopulateFromDelegate$5655+0x3dc>)
 8003c54:	4479      	add	r1, pc
 8003c56:	5840      	ldr	r0, [r0, r1]
                [TS.AssumeReferenced] public float   S31;
                // SW stack frame 
 8003c58:	f7fc fb54 	bl	8000304 <BugCheck_Raise$4648>
                [TS.AssumeReferenced] public uint    EXC_RETURN;
 8003c5c:	e7ff      	b.n	8003c5e <Context_PopulateFromDelegate$5655+0x286>
 8003c5e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003c60:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8003c62:	a97d      	add	r1, sp, #500	; 0x1f4
 8003c64:	2248      	movs	r2, #72	; 0x48
 8003c66:	9005      	str	r0, [sp, #20]
 8003c68:	4608      	mov	r0, r1
 8003c6a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003c6c:	f01c f8f2 	bl	801fe54 <__aeabi_memcpy>
 8003c70:	998b      	ldr	r1, [sp, #556]	; 0x22c
                
                RT.BugCheck.Assert( firstFrame->R0          == registers.R0        , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->R1          == registers.R1        , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->R2          == registers.R2        , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->R3          == registers.R3        , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->R12         == registers.R12       , BugCheck.StopCode.StackCorruptionDetected );
 8003c72:	9805      	ldr	r0, [sp, #20]
 8003c74:	f7ff fcb3 	bl	80035de <UIntPtr_op_Equality$2886>
                [TS.AssumeReferenced] public float   S25;
                [TS.AssumeReferenced] public float   S26;
                [TS.AssumeReferenced] public float   S27;
                [TS.AssumeReferenced] public float   S28;
                [TS.AssumeReferenced] public float   S29;
                [TS.AssumeReferenced] public float   S30;
 8003c78:	f010 0fff 	tst.w	r0, #255	; 0xff
 8003c7c:	d107      	bne.n	8003c8e <Context_PopulateFromDelegate$5655+0x2b6>
 8003c7e:	e7ff      	b.n	8003c80 <Context_PopulateFromDelegate$5655+0x2a8>
 8003c80:	484d      	ldr	r0, [pc, #308]	; (8003db8 <Context_PopulateFromDelegate$5655+0x3e0>)
 8003c82:	494e      	ldr	r1, [pc, #312]	; (8003dbc <Context_PopulateFromDelegate$5655+0x3e4>)
 8003c84:	4479      	add	r1, pc
 8003c86:	5840      	ldr	r0, [r0, r1]
                [TS.AssumeReferenced] public float   S31;
                // SW stack frame 
 8003c88:	f7fc fb3c 	bl	8000304 <BugCheck_Raise$4648>
                [TS.AssumeReferenced] public uint    EXC_RETURN;
 8003c8c:	e7ff      	b.n	8003c8e <Context_PopulateFromDelegate$5655+0x2b6>
 8003c8e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003c90:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8003c92:	a98f      	add	r1, sp, #572	; 0x23c
 8003c94:	2248      	movs	r2, #72	; 0x48
 8003c96:	9004      	str	r0, [sp, #16]
 8003c98:	4608      	mov	r0, r1
 8003c9a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003c9c:	f01c f8da 	bl	801fe54 <__aeabi_memcpy>
 8003ca0:	999e      	ldr	r1, [sp, #632]	; 0x278
                RT.BugCheck.Assert( firstFrame->R0          == registers.R0        , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->R1          == registers.R1        , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->R2          == registers.R2        , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->R3          == registers.R3        , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->R12         == registers.R12       , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->LR          == registers.LR        , BugCheck.StopCode.StackCorruptionDetected );
 8003ca2:	9804      	ldr	r0, [sp, #16]
 8003ca4:	f7ff fc9b 	bl	80035de <UIntPtr_op_Equality$2886>
                [TS.AssumeReferenced] public float   S25;
                [TS.AssumeReferenced] public float   S26;
                [TS.AssumeReferenced] public float   S27;
                [TS.AssumeReferenced] public float   S28;
                [TS.AssumeReferenced] public float   S29;
                [TS.AssumeReferenced] public float   S30;
 8003ca8:	f010 0fff 	tst.w	r0, #255	; 0xff
 8003cac:	d107      	bne.n	8003cbe <Context_PopulateFromDelegate$5655+0x2e6>
 8003cae:	e7ff      	b.n	8003cb0 <Context_PopulateFromDelegate$5655+0x2d8>
 8003cb0:	4843      	ldr	r0, [pc, #268]	; (8003dc0 <Context_PopulateFromDelegate$5655+0x3e8>)
 8003cb2:	4944      	ldr	r1, [pc, #272]	; (8003dc4 <Context_PopulateFromDelegate$5655+0x3ec>)
 8003cb4:	4479      	add	r1, pc
 8003cb6:	5840      	ldr	r0, [r0, r1]
                [TS.AssumeReferenced] public float   S31;
                // SW stack frame 
 8003cb8:	f7fc fb24 	bl	8000304 <BugCheck_Raise$4648>
                [TS.AssumeReferenced] public uint    EXC_RETURN;
 8003cbc:	e7ff      	b.n	8003cbe <Context_PopulateFromDelegate$5655+0x2e6>
 8003cbe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003cc0:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8003cc2:	a9a1      	add	r1, sp, #644	; 0x284
 8003cc4:	2248      	movs	r2, #72	; 0x48
 8003cc6:	9003      	str	r0, [sp, #12]
 8003cc8:	4608      	mov	r0, r1
 8003cca:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003ccc:	f01c f8c2 	bl	801fe54 <__aeabi_memcpy>
 8003cd0:	99b1      	ldr	r1, [sp, #708]	; 0x2c4
                RT.BugCheck.Assert( firstFrame->R1          == registers.R1        , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->R2          == registers.R2        , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->R3          == registers.R3        , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->R12         == registers.R12       , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->LR          == registers.LR        , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->PC          == registers.PC        , BugCheck.StopCode.StackCorruptionDetected );
 8003cd2:	9803      	ldr	r0, [sp, #12]
 8003cd4:	f7ff fc83 	bl	80035de <UIntPtr_op_Equality$2886>
                [TS.AssumeReferenced] public float   S25;
                [TS.AssumeReferenced] public float   S26;
                [TS.AssumeReferenced] public float   S27;
                [TS.AssumeReferenced] public float   S28;
                [TS.AssumeReferenced] public float   S29;
                [TS.AssumeReferenced] public float   S30;
 8003cd8:	f010 0fff 	tst.w	r0, #255	; 0xff
 8003cdc:	d107      	bne.n	8003cee <Context_PopulateFromDelegate$5655+0x316>
 8003cde:	e7ff      	b.n	8003ce0 <Context_PopulateFromDelegate$5655+0x308>
 8003ce0:	4839      	ldr	r0, [pc, #228]	; (8003dc8 <Context_PopulateFromDelegate$5655+0x3f0>)
 8003ce2:	493a      	ldr	r1, [pc, #232]	; (8003dcc <Context_PopulateFromDelegate$5655+0x3f4>)
 8003ce4:	4479      	add	r1, pc
 8003ce6:	5840      	ldr	r0, [r0, r1]
                [TS.AssumeReferenced] public float   S31;
                // SW stack frame 
 8003ce8:	f7fc fb0c 	bl	8000304 <BugCheck_Raise$4648>
                [TS.AssumeReferenced] public uint    EXC_RETURN;
 8003cec:	e7ff      	b.n	8003cee <Context_PopulateFromDelegate$5655+0x316>
 8003cee:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003cf0:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8003cf2:	a9b3      	add	r1, sp, #716	; 0x2cc
 8003cf4:	2248      	movs	r2, #72	; 0x48
 8003cf6:	9002      	str	r0, [sp, #8]
 8003cf8:	4608      	mov	r0, r1
 8003cfa:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003cfc:	f01c f8aa 	bl	801fe54 <__aeabi_memcpy>
 8003d00:	99c4      	ldr	r1, [sp, #784]	; 0x310
                RT.BugCheck.Assert( firstFrame->R2          == registers.R2        , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->R3          == registers.R3        , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->R12         == registers.R12       , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->LR          == registers.LR        , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->PC          == registers.PC        , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->PSR         == registers.PSR       , BugCheck.StopCode.StackCorruptionDetected );
 8003d02:	9802      	ldr	r0, [sp, #8]
 8003d04:	f7ff fc6b 	bl	80035de <UIntPtr_op_Equality$2886>
                [TS.AssumeReferenced] public float   S25;
                [TS.AssumeReferenced] public float   S26;
                [TS.AssumeReferenced] public float   S27;
                [TS.AssumeReferenced] public float   S28;
                [TS.AssumeReferenced] public float   S29;
                [TS.AssumeReferenced] public float   S30;
 8003d08:	f010 0fff 	tst.w	r0, #255	; 0xff
 8003d0c:	d107      	bne.n	8003d1e <Context_PopulateFromDelegate$5655+0x346>
 8003d0e:	e7ff      	b.n	8003d10 <Context_PopulateFromDelegate$5655+0x338>
 8003d10:	482f      	ldr	r0, [pc, #188]	; (8003dd0 <Context_PopulateFromDelegate$5655+0x3f8>)
 8003d12:	4930      	ldr	r1, [pc, #192]	; (8003dd4 <Context_PopulateFromDelegate$5655+0x3fc>)
 8003d14:	4479      	add	r1, pc
 8003d16:	5840      	ldr	r0, [r0, r1]
                [TS.AssumeReferenced] public float   S31;
                // SW stack frame 
 8003d18:	f7fc faf4 	bl	8000304 <BugCheck_Raise$4648>
                [TS.AssumeReferenced] public uint    EXC_RETURN;
 8003d1c:	e7ff      	b.n	8003d1e <Context_PopulateFromDelegate$5655+0x346>
                RT.BugCheck.Assert( firstFrame->R3          == registers.R3        , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->R12         == registers.R12       , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->LR          == registers.LR        , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->PC          == registers.PC        , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->PSR         == registers.PSR       , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->EXC_RETURN  == registers.EXC_RETURN, BugCheck.StopCode.StackCorruptionDetected );
 8003d1e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003d20:	6801      	ldr	r1, [r0, #0]
 8003d22:	a8c5      	add	r0, sp, #788	; 0x314
 8003d24:	2248      	movs	r2, #72	; 0x48
 8003d26:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8003d28:	9101      	str	r1, [sp, #4]
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	f01c f892 	bl	801fe54 <__aeabi_memcpy>
 8003d30:	98c5      	ldr	r0, [sp, #788]	; 0x314
 8003d32:	2100      	movs	r1, #0
 8003d34:	9a01      	ldr	r2, [sp, #4]
 8003d36:	4282      	cmp	r2, r0
 8003d38:	bf08      	it	eq
 8003d3a:	2101      	moveq	r1, #1
                [TS.AssumeReferenced] public float   S25;
                [TS.AssumeReferenced] public float   S26;
                [TS.AssumeReferenced] public float   S27;
                [TS.AssumeReferenced] public float   S28;
                [TS.AssumeReferenced] public float   S29;
                [TS.AssumeReferenced] public float   S30;
 8003d3c:	2900      	cmp	r1, #0
 8003d3e:	d107      	bne.n	8003d50 <Context_PopulateFromDelegate$5655+0x378>
 8003d40:	e7ff      	b.n	8003d42 <Context_PopulateFromDelegate$5655+0x36a>
 8003d42:	4825      	ldr	r0, [pc, #148]	; (8003dd8 <Context_PopulateFromDelegate$5655+0x400>)
 8003d44:	4925      	ldr	r1, [pc, #148]	; (8003ddc <Context_PopulateFromDelegate$5655+0x404>)
 8003d46:	4479      	add	r1, pc
 8003d48:	5840      	ldr	r0, [r0, r1]
                [TS.AssumeReferenced] public float   S31;
                // SW stack frame 
 8003d4a:	f7fc fadb 	bl	8000304 <BugCheck_Raise$4648>
                [TS.AssumeReferenced] public uint    EXC_RETURN;
 8003d4e:	e7ff      	b.n	8003d50 <Context_PopulateFromDelegate$5655+0x378>
                RT.BugCheck.Assert( firstFrame->R12         == registers.R12       , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->LR          == registers.LR        , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->PC          == registers.PC        , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->PSR         == registers.PSR       , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->EXC_RETURN  == registers.EXC_RETURN, BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->CONTROL     == registers.CONTROL   , BugCheck.StopCode.StackCorruptionDetected );
 8003d50:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003d52:	6841      	ldr	r1, [r0, #4]
 8003d54:	a8d7      	add	r0, sp, #860	; 0x35c
 8003d56:	2248      	movs	r2, #72	; 0x48
 8003d58:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8003d5a:	9100      	str	r1, [sp, #0]
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	f01c f879 	bl	801fe54 <__aeabi_memcpy>
 8003d62:	98d8      	ldr	r0, [sp, #864]	; 0x360
 8003d64:	2100      	movs	r1, #0
 8003d66:	9a00      	ldr	r2, [sp, #0]
 8003d68:	4282      	cmp	r2, r0
 8003d6a:	bf08      	it	eq
 8003d6c:	2101      	moveq	r1, #1
                [TS.AssumeReferenced] public float   S25;
                [TS.AssumeReferenced] public float   S26;
                [TS.AssumeReferenced] public float   S27;
                [TS.AssumeReferenced] public float   S28;
                [TS.AssumeReferenced] public float   S29;
                [TS.AssumeReferenced] public float   S30;
 8003d6e:	2900      	cmp	r1, #0
 8003d70:	d107      	bne.n	8003d82 <Context_PopulateFromDelegate$5655+0x3aa>
 8003d72:	e7ff      	b.n	8003d74 <Context_PopulateFromDelegate$5655+0x39c>
 8003d74:	481a      	ldr	r0, [pc, #104]	; (8003de0 <Context_PopulateFromDelegate$5655+0x408>)
 8003d76:	491b      	ldr	r1, [pc, #108]	; (8003de4 <Context_PopulateFromDelegate$5655+0x40c>)
 8003d78:	4479      	add	r1, pc
 8003d7a:	5840      	ldr	r0, [r0, r1]
                [TS.AssumeReferenced] public float   S31;
                // SW stack frame 
 8003d7c:	f7fc fac2 	bl	8000304 <BugCheck_Raise$4648>
                [TS.AssumeReferenced] public uint    EXC_RETURN;
 8003d80:	e7ff      	b.n	8003d82 <Context_PopulateFromDelegate$5655+0x3aa>
 8003d82:	f50d 7d6c 	add.w	sp, sp, #944	; 0x3b0
 8003d86:	bd10      	pop	{r4, pc}
 8003d88:	e802537c 	.word	0xe802537c
 8003d8c:	17ffdd42 	.word	0x17ffdd42
 8003d90:	e80253a8 	.word	0xe80253a8
 8003d94:	17ffdc50 	.word	0x17ffdc50
 8003d98:	e80253a4 	.word	0xe80253a4
 8003d9c:	17ffdc0c 	.word	0x17ffdc0c
 8003da0:	e80253a0 	.word	0xe80253a0
 8003da4:	17ffdbdc 	.word	0x17ffdbdc
 8003da8:	e802539c 	.word	0xe802539c
 8003dac:	17ffdbac 	.word	0x17ffdbac
 8003db0:	e8025398 	.word	0xe8025398
 8003db4:	17ffdb7c 	.word	0x17ffdb7c
 8003db8:	e8025394 	.word	0xe8025394
 8003dbc:	17ffdb4c 	.word	0x17ffdb4c
 8003dc0:	e8025390 	.word	0xe8025390
 8003dc4:	17ffdb1c 	.word	0x17ffdb1c
 8003dc8:	e802538c 	.word	0xe802538c
 8003dcc:	17ffdaec 	.word	0x17ffdaec
 8003dd0:	e8025388 	.word	0xe8025388
 8003dd4:	17ffdabc 	.word	0x17ffdabc
 8003dd8:	e8025384 	.word	0xe8025384
 8003ddc:	17ffda8a 	.word	0x17ffda8a
 8003de0:	e8025380 	.word	0xe8025380
 8003de4:	17ffda58 	.word	0x17ffda58

08003de8 <Context_Unwind$5657>:
            }
            
#region Tracking Collector and Exceptions  

            public override bool Unwind( )
            {
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	e7ff      	b.n	8003dee <Context_Unwind$5657+0x6>
                throw new Exception( "Unwind not implemented" );
 8003dee:	480b      	ldr	r0, [pc, #44]	; (8003e1c <Context_Unwind$5657+0x34>)
 8003df0:	490b      	ldr	r1, [pc, #44]	; (8003e20 <Context_Unwind$5657+0x38>)
 8003df2:	4479      	add	r1, pc
 8003df4:	4408      	add	r0, r1
 8003df6:	4a0b      	ldr	r2, [pc, #44]	; (8003e24 <Context_Unwind$5657+0x3c>)
 8003df8:	440a      	add	r2, r1
 8003dfa:	9003      	str	r0, [sp, #12]
 8003dfc:	9102      	str	r1, [sp, #8]
 8003dfe:	4611      	mov	r1, r2
 8003e00:	f7fc fcde 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8003e04:	4908      	ldr	r1, [pc, #32]	; (8003e28 <Context_Unwind$5657+0x40>)
 8003e06:	9a02      	ldr	r2, [sp, #8]
 8003e08:	4411      	add	r1, r2
 8003e0a:	9001      	str	r0, [sp, #4]
 8003e0c:	f006 ff00 	bl	800ac10 <Exception_.ctor$7037>
 8003e10:	9803      	ldr	r0, [sp, #12]
 8003e12:	9901      	ldr	r1, [sp, #4]
 8003e14:	f7fc fd2a 	bl	800086c <TypeSystemManager_Throw$4954>
 8003e18:	e7e9      	b.n	8003dee <Context_Unwind$5657+0x6>
 8003e1a:	46c0      	nop			; (mov r8, r8)
 8003e1c:	ffffea38 	.word	0xffffea38
 8003e20:	17ffd9de 	.word	0x17ffd9de
 8003e24:	e801252c 	.word	0xe801252c
 8003e28:	e80129dc 	.word	0xe80129dc

08003e2c <Context_SwitchTo$16958>:
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	4601      	mov	r1, r0
            // DISCO_F746NG uses the Core clock (216Mhz) for SysTick 
            return (uint)( RT.Configuration.CoreClockFrequency / 1000 ) * ms; 
        }
    }
}
 8003e32:	9101      	str	r1, [sp, #4]
 8003e34:	f006 fff0 	bl	800ae18 <Context_SwitchTo$5652>
 8003e38:	b002      	add	sp, #8
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <Context_get_StackPointer$5670>:
 8003e3c:	b081      	sub	sp, #4
 8003e3e:	4601      	mov	r1, r0
 8003e40:	6880      	ldr	r0, [r0, #8]
 8003e42:	9100      	str	r1, [sp, #0]
 8003e44:	b001      	add	sp, #4
 8003e46:	4770      	bx	lr

08003e48 <Context_set_StackPointer$5671>:
 8003e48:	b082      	sub	sp, #8
 8003e4a:	460a      	mov	r2, r1
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	6081      	str	r1, [r0, #8]
 8003e50:	9301      	str	r3, [sp, #4]
 8003e52:	9200      	str	r2, [sp, #0]
 8003e54:	b002      	add	sp, #8
 8003e56:	4770      	bx	lr

08003e58 <Context_get_ProgramCounter$5672>:
            public override UIntPtr ProgramCounter
            {
                get
                {
                    //return Registers.PC;
                    return (UIntPtr)0;
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	f7ff fba4 	bl	80035a6 <UIntPtr_op_Explicit$2876>
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <Context_set_ProgramCounter$5673>:
 8003e60:	4770      	bx	lr

08003e62 <Context_.ctor$16959>:
 8003e62:	b580      	push	{r7, lr}
 8003e64:	f00c fd45 	bl	80108f2 <Context_.ctor$16405>
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <KernelNode`1_.ctor$17265>:
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	460a      	mov	r2, r1
 8003e6e:	4603      	mov	r3, r0
 8003e70:	6101      	str	r1, [r0, #16]
 8003e72:	9301      	str	r3, [sp, #4]
 8003e74:	9200      	str	r2, [sp, #0]
 8003e76:	b002      	add	sp, #8
 8003e78:	4770      	bx	lr
 8003e7a:	46c0      	nop			; (mov r8, r8)

08003e7c <KernelList`1_.ctor$17406>:
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b088      	sub	sp, #32
 8003e80:	4601      	mov	r1, r0
        //
        // Constructor Methods
        //

        public KernelNode( T target )
        {
 8003e82:	4a16      	ldr	r2, [pc, #88]	; (8003edc <KernelList`1_.ctor$17406+0x60>)
 8003e84:	4b16      	ldr	r3, [pc, #88]	; (8003ee0 <KernelList`1_.ctor$17406+0x64>)
 8003e86:	447b      	add	r3, pc
 8003e88:	441a      	add	r2, r3
 8003e8a:	f8df c058 	ldr.w	ip, [pc, #88]	; 8003ee4 <KernelList`1_.ctor$17406+0x68>
 8003e8e:	4463      	add	r3, ip
 8003e90:	9007      	str	r0, [sp, #28]
 8003e92:	4610      	mov	r0, r2
 8003e94:	9106      	str	r1, [sp, #24]
 8003e96:	4619      	mov	r1, r3
 8003e98:	9305      	str	r3, [sp, #20]
 8003e9a:	9204      	str	r2, [sp, #16]
 8003e9c:	f7fc fc90 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8003ea0:	2100      	movs	r1, #0
 8003ea2:	9003      	str	r0, [sp, #12]
 8003ea4:	9102      	str	r1, [sp, #8]
 8003ea6:	f005 fc3d 	bl	8009724 <KernelNode`1_.ctor$17680>
 8003eaa:	9803      	ldr	r0, [sp, #12]
 8003eac:	9907      	ldr	r1, [sp, #28]
 8003eae:	6088      	str	r0, [r1, #8]
            m_target = target;
 8003eb0:	9804      	ldr	r0, [sp, #16]
 8003eb2:	9905      	ldr	r1, [sp, #20]
 8003eb4:	f7fc fc84 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8003eb8:	9001      	str	r0, [sp, #4]
 8003eba:	9902      	ldr	r1, [sp, #8]
 8003ebc:	f005 fc32 	bl	8009724 <KernelNode`1_.ctor$17680>
 8003ec0:	9801      	ldr	r0, [sp, #4]
 8003ec2:	9907      	ldr	r1, [sp, #28]
 8003ec4:	60c8      	str	r0, [r1, #12]
        }

 8003ec6:	6888      	ldr	r0, [r1, #8]
 8003ec8:	9901      	ldr	r1, [sp, #4]
 8003eca:	f00d fbbb 	bl	8011644 <KernelNode`1_set_Next$17692>
        //
 8003ece:	9807      	ldr	r0, [sp, #28]
 8003ed0:	6881      	ldr	r1, [r0, #8]
 8003ed2:	68c0      	ldr	r0, [r0, #12]
 8003ed4:	f00d fbbe 	bl	8011654 <KernelNode`1_set_Previous$17694>
 8003ed8:	b008      	add	sp, #32
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	ffffea38 	.word	0xffffea38
 8003ee0:	17ffd94a 	.word	0x17ffd94a
 8003ee4:	e80125bc 	.word	0xe80125bc

08003ee8 <KernelList`1_.ctor$17418>:
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b088      	sub	sp, #32
 8003eec:	4601      	mov	r1, r0
        // Constructor Methods
        //

        public KernelList()
        {
            m_head = new KernelNode< T >( default(T) );
 8003eee:	4a16      	ldr	r2, [pc, #88]	; (8003f48 <KernelList`1_.ctor$17418+0x60>)
 8003ef0:	4b16      	ldr	r3, [pc, #88]	; (8003f4c <KernelList`1_.ctor$17418+0x64>)
 8003ef2:	447b      	add	r3, pc
 8003ef4:	441a      	add	r2, r3
 8003ef6:	f8df c058 	ldr.w	ip, [pc, #88]	; 8003f50 <KernelList`1_.ctor$17418+0x68>
 8003efa:	4463      	add	r3, ip
 8003efc:	9007      	str	r0, [sp, #28]
 8003efe:	4610      	mov	r0, r2
 8003f00:	9106      	str	r1, [sp, #24]
 8003f02:	4619      	mov	r1, r3
 8003f04:	9305      	str	r3, [sp, #20]
 8003f06:	9204      	str	r2, [sp, #16]
 8003f08:	f7fc fc5a 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	9003      	str	r0, [sp, #12]
 8003f10:	9102      	str	r1, [sp, #8]
 8003f12:	f005 fcb5 	bl	8009880 <KernelNode`1_.ctor$17431>
 8003f16:	9803      	ldr	r0, [sp, #12]
 8003f18:	9907      	ldr	r1, [sp, #28]
 8003f1a:	6088      	str	r0, [r1, #8]
            m_tail = new KernelNode< T >( default(T) );
 8003f1c:	9804      	ldr	r0, [sp, #16]
 8003f1e:	9905      	ldr	r1, [sp, #20]
 8003f20:	f7fc fc4e 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8003f24:	9001      	str	r0, [sp, #4]
 8003f26:	9902      	ldr	r1, [sp, #8]
 8003f28:	f005 fcaa 	bl	8009880 <KernelNode`1_.ctor$17431>
 8003f2c:	9801      	ldr	r0, [sp, #4]
 8003f2e:	9907      	ldr	r1, [sp, #28]
 8003f30:	60c8      	str	r0, [r1, #12]

            m_head.Next     = m_tail;
 8003f32:	6888      	ldr	r0, [r1, #8]
 8003f34:	9901      	ldr	r1, [sp, #4]
 8003f36:	f00d fbac 	bl	8011692 <KernelNode`1_set_Next$17443>
            m_tail.Previous = m_head;
 8003f3a:	9807      	ldr	r0, [sp, #28]
 8003f3c:	6881      	ldr	r1, [r0, #8]
 8003f3e:	68c0      	ldr	r0, [r0, #12]
 8003f40:	f00d fbaf 	bl	80116a2 <KernelNode`1_set_Previous$17445>
 8003f44:	b008      	add	sp, #32
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	ffffea38 	.word	0xffffea38
 8003f4c:	17ffd8de 	.word	0x17ffd8de
 8003f50:	e80126dc 	.word	0xe80126dc

08003f54 <ThreadStart_Invoke$7767>:
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	4601      	mov	r1, r0
 8003f5a:	6900      	ldr	r0, [r0, #16]
 8003f5c:	2800      	cmp	r0, #0
 8003f5e:	9105      	str	r1, [sp, #20]
 8003f60:	9004      	str	r0, [sp, #16]
 8003f62:	d006      	beq.n	8003f72 <ThreadStart_Invoke$7767+0x1e>
 8003f64:	e7ff      	b.n	8003f66 <ThreadStart_Invoke$7767+0x12>
 8003f66:	9804      	ldr	r0, [sp, #16]
 8003f68:	6881      	ldr	r1, [r0, #8]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	9103      	str	r1, [sp, #12]
 8003f6e:	9202      	str	r2, [sp, #8]
 8003f70:	e008      	b.n	8003f84 <ThreadStart_Invoke$7767+0x30>
 8003f72:	9805      	ldr	r0, [sp, #20]
 8003f74:	6880      	ldr	r0, [r0, #8]
 8003f76:	9905      	ldr	r1, [sp, #20]
 8003f78:	68ca      	ldr	r2, [r1, #12]
 8003f7a:	4790      	blx	r2
 8003f7c:	e000      	b.n	8003f80 <ThreadStart_Invoke$7767+0x2c>
 8003f7e:	e7ff      	b.n	8003f80 <ThreadStart_Invoke$7767+0x2c>
 8003f80:	b006      	add	sp, #24
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	9802      	ldr	r0, [sp, #8]
 8003f86:	9903      	ldr	r1, [sp, #12]
 8003f88:	4288      	cmp	r0, r1
 8003f8a:	9001      	str	r0, [sp, #4]
 8003f8c:	daf7      	bge.n	8003f7e <ThreadStart_Invoke$7767+0x2a>
 8003f8e:	e7ff      	b.n	8003f90 <ThreadStart_Invoke$7767+0x3c>
 8003f90:	9804      	ldr	r0, [sp, #16]
 8003f92:	9901      	ldr	r1, [sp, #4]
 8003f94:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8003f98:	68d2      	ldr	r2, [r2, #12]
 8003f9a:	6890      	ldr	r0, [r2, #8]
 8003f9c:	68d2      	ldr	r2, [r2, #12]
 8003f9e:	4790      	blx	r2
 8003fa0:	9801      	ldr	r0, [sp, #4]
 8003fa2:	1c41      	adds	r1, r0, #1
 8003fa4:	9102      	str	r1, [sp, #8]
 8003fa6:	e7ed      	b.n	8003f84 <ThreadStart_Invoke$7767+0x30>

08003fa8 <Thread_Entrypoint$4002>:
 8003fa8:	4601      	mov	r1, r0
        [BottomOfCallStack()]
        private void Entrypoint()
        {
            try
            {
                m_start();
 8003faa:	6940      	ldr	r0, [r0, #20]
 8003fac:	9101      	str	r1, [sp, #4]
 8003fae:	f7ff ffd1 	bl	8003f54 <ThreadStart_Invoke$7767>
            }
 8003fb2:	e7ff      	b.n	8003fb4 <Thread_Entrypoint$4002+0xc>
 8003fb4:	9801      	ldr	r0, [sp, #4]
 8003fb6:	6a41      	ldr	r1, [r0, #36]	; 0x24
            catch
            {
            }

            m_state |= ThreadState.StopRequested;
 8003fb8:	f041 0101 	orr.w	r1, r1, #1
 8003fbc:	6241      	str	r1, [r0, #36]	; 0x24

            ThreadManager.Instance.RemoveThread( this );
 8003fbe:	4904      	ldr	r1, [pc, #16]	; (8003fd0 <Thread_Entrypoint$4002+0x28>)
 8003fc0:	4a04      	ldr	r2, [pc, #16]	; (8003fd4 <Thread_Entrypoint$4002+0x2c>)
 8003fc2:	447a      	add	r2, pc
 8003fc4:	1888      	adds	r0, r1, r2
 8003fc6:	9901      	ldr	r1, [sp, #4]
 8003fc8:	f000 f806 	bl	8003fd8 <ARMv7ThreadManager_RemoveThread$4925>
 8003fcc:	4770      	bx	lr
 8003fce:	46c0      	nop			; (mov r8, r8)
 8003fd0:	ffffeaac 	.word	0xffffeaac
 8003fd4:	17ffd80e 	.word	0x17ffd80e

08003fd8 <ARMv7ThreadManager_RemoveThread$4925>:
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	460a      	mov	r2, r1
 8003fde:	4603      	mov	r3, r0
        public override void RemoveThread( ThreadImpl thread )
        {
            //
            // This shoudl scheduel a context switch
            //
            base.RemoveThread( thread ); 
 8003fe0:	9203      	str	r2, [sp, #12]
 8003fe2:	9302      	str	r3, [sp, #8]
 8003fe4:	f000 ff5c 	bl	8004ea0 <ThreadManager_RemoveThread$3163>
 8003fe8:	4806      	ldr	r0, [pc, #24]	; (8004004 <ARMv7ThreadManager_RemoveThread$4925+0x2c>)
 8003fea:	4907      	ldr	r1, [pc, #28]	; (8004008 <ARMv7ThreadManager_RemoveThread$4925+0x30>)
 8003fec:	4479      	add	r1, pc
                
            //
            // If context switch was not already performed, we need to jump else where
            //
            ProcessorARMv7M.RaiseSupervisorCall( ProcessorARMv7M.SVC_Code.SupervisorCall__RetireThread );
 8003fee:	5c40      	ldrb	r0, [r0, r1]
 8003ff0:	9101      	str	r1, [sp, #4]
 8003ff2:	f001 fd5d 	bl	8005ab0 <ProcessorARMv7M_RaiseSupervisorCall$3241>
 8003ff6:	4805      	ldr	r0, [pc, #20]	; (800400c <ARMv7ThreadManager_RemoveThread$4925+0x34>)
 8003ff8:	9901      	ldr	r1, [sp, #4]
 8003ffa:	5840      	ldr	r0, [r0, r1]
            //RegisterThread( m_UsageFault );
            //RegisterThread( m_SVCCall         );
            //RegisterThread( m_PendSV          );
            //RegisterThread( m_SysTick         );
            //RegisterThread( m_interruptThread );

 8003ffc:	f7fc f982 	bl	8000304 <BugCheck_Raise$4648>
 8004000:	b004      	add	sp, #16
 8004002:	bd80      	pop	{r7, pc}
 8004004:	e8025304 	.word	0xe8025304
 8004008:	17ffd7e4 	.word	0x17ffd7e4
 800400c:	e8025308 	.word	0xe8025308

08004010 <Thread_ReleasedProcessor$4003>:
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	4601      	mov	r1, r0
                // For ARMv7 we are using the async PendSV exception, which is delivered with ISRs enabled
                //
                BugCheck.AssertInterruptsOff();
#endif

            m_activeTime.Stop();
 8004016:	f100 0234 	add.w	r2, r0, #52	; 0x34
 800401a:	9001      	str	r0, [sp, #4]
 800401c:	4610      	mov	r0, r2
 800401e:	9100      	str	r1, [sp, #0]
 8004020:	f000 f80d 	bl	800403e <KernelPerformanceCounter_Stop$4665>

            if((m_state & ThreadState.StopRequested) != 0)
 8004024:	9801      	ldr	r0, [sp, #4]
 8004026:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
 800402a:	f011 0f01 	tst.w	r1, #1
 800402e:	d004      	beq.n	800403a <Thread_ReleasedProcessor$4003+0x2a>
 8004030:	e7ff      	b.n	8004032 <Thread_ReleasedProcessor$4003+0x22>
            {
                Stop();
 8004032:	9800      	ldr	r0, [sp, #0]
 8004034:	f000 f81e 	bl	8004074 <Thread_Stop$4014>
            }
 8004038:	e7ff      	b.n	800403a <Thread_ReleasedProcessor$4003+0x2a>
 800403a:	b002      	add	sp, #8
 800403c:	bd80      	pop	{r7, pc}

0800403e <KernelPerformanceCounter_Stop$4665>:
 800403e:	b580      	push	{r7, lr}
 8004040:	b084      	sub	sp, #16
 8004042:	4601      	mov	r1, r0
            m_start = Peripherals.Instance.ReadPerformanceCounter();
        }

        public void Stop()
        {
            m_hits  += 1;
 8004044:	6882      	ldr	r2, [r0, #8]
 8004046:	3201      	adds	r2, #1
 8004048:	6082      	str	r2, [r0, #8]
 800404a:	6902      	ldr	r2, [r0, #16]
 800404c:	6943      	ldr	r3, [r0, #20]
 800404e:	9003      	str	r0, [sp, #12]
 8004050:	9102      	str	r1, [sp, #8]
 8004052:	9201      	str	r2, [sp, #4]
 8004054:	9300      	str	r3, [sp, #0]
 8004056:	f019 f999 	bl	801d38c <tmp_sys_timer_read>
        }

        public void Stop()
        {
            m_hits  += 1;
            m_total += (Peripherals.Instance.ReadPerformanceCounter() - m_start);
 800405a:	9903      	ldr	r1, [sp, #12]
 800405c:	68ca      	ldr	r2, [r1, #12]
 800405e:	1a80      	subs	r0, r0, r2
 8004060:	9a01      	ldr	r2, [sp, #4]
 8004062:	1880      	adds	r0, r0, r2
 8004064:	9a00      	ldr	r2, [sp, #0]
 8004066:	f142 0200 	adc.w	r2, r2, #0
 800406a:	6108      	str	r0, [r1, #16]
 800406c:	614a      	str	r2, [r1, #20]
 800406e:	b004      	add	sp, #16
 8004070:	bd80      	pop	{r7, pc}
 8004072:	46c0      	nop			; (mov r8, r8)

08004074 <Thread_Stop$4014>:
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	4601      	mov	r1, r0

        //--//

        public void Stop()
        {
            ThreadManager.Instance.RetireThread( this );
 800407a:	4a0d      	ldr	r2, [pc, #52]	; (80040b0 <Thread_Stop$4014+0x3c>)
 800407c:	4b0d      	ldr	r3, [pc, #52]	; (80040b4 <Thread_Stop$4014+0x40>)
 800407e:	447b      	add	r3, pc
 8004080:	441a      	add	r2, r3
 8004082:	9001      	str	r0, [sp, #4]
 8004084:	4610      	mov	r0, r2
 8004086:	9a01      	ldr	r2, [sp, #4]
 8004088:	9100      	str	r1, [sp, #0]
 800408a:	4611      	mov	r1, r2
 800408c:	f000 fb19 	bl	80046c2 <ThreadManager_RetireThread$3164>
 8004090:	9801      	ldr	r0, [sp, #4]
 8004092:	6a41      	ldr	r1, [r0, #36]	; 0x24

            m_state |= ThreadState.Stopped;
 8004094:	f041 0110 	orr.w	r1, r1, #16
 8004098:	6241      	str	r1, [r0, #36]	; 0x24

            if(m_joinEvent != null)
 800409a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800409c:	2900      	cmp	r1, #0
 800409e:	d005      	beq.n	80040ac <Thread_Stop$4014+0x38>
 80040a0:	e7ff      	b.n	80040a2 <Thread_Stop$4014+0x2e>
            {
                m_joinEvent.Set();
 80040a2:	9800      	ldr	r0, [sp, #0]
 80040a4:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80040a6:	f000 fb22 	bl	80046ee <EventWaitHandle_Set$3945>
            }
 80040aa:	e7ff      	b.n	80040ac <Thread_Stop$4014+0x38>
 80040ac:	b002      	add	sp, #8
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	ffffeaac 	.word	0xffffeaac
 80040b4:	17ffd752 	.word	0x17ffd752

080040b8 <Thread_AcquiredProcessor$4004>:
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	4601      	mov	r1, r0
        {
#if !ARMv7
            BugCheck.AssertInterruptsOff();
#endif

            m_activeTime.Start();
 80040be:	3034      	adds	r0, #52	; 0x34
 80040c0:	9101      	str	r1, [sp, #4]
 80040c2:	f000 f802 	bl	80040ca <KernelPerformanceCounter_Start$4663>
 80040c6:	b002      	add	sp, #8
 80040c8:	bd80      	pop	{r7, pc}

080040ca <KernelPerformanceCounter_Start$4663>:
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b082      	sub	sp, #8
 80040ce:	4601      	mov	r1, r0
 80040d0:	9001      	str	r0, [sp, #4]
 80040d2:	9100      	str	r1, [sp, #0]
 80040d4:	f019 f95a 	bl	801d38c <tmp_sys_timer_read>
 80040d8:	9901      	ldr	r1, [sp, #4]
 80040da:	60c8      	str	r0, [r1, #12]
 80040dc:	b002      	add	sp, #8
 80040de:	bd80      	pop	{r7, pc}

080040e0 <Thread_Yield$4005>:

        //--//

        public void Yield()
        {
            ThreadManager.Instance.Yield();
 80040e0:	b580      	push	{r7, lr}
 80040e2:	4803      	ldr	r0, [pc, #12]	; (80040f0 <Thread_Yield$4005+0x10>)
 80040e4:	4903      	ldr	r1, [pc, #12]	; (80040f4 <Thread_Yield$4005+0x14>)
 80040e6:	4479      	add	r1, pc
 80040e8:	4408      	add	r0, r1
 80040ea:	f000 f805 	bl	80040f8 <ThreadManager_Yield$3165>
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	ffffeaac 	.word	0xffffeaac
 80040f4:	17ffd6ea 	.word	0x17ffd6ea

080040f8 <ThreadManager_Yield$3165>:
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8

        //--//

        public virtual void Yield()
        {
            BugCheck.AssertInterruptsOn();
 80040fc:	9001      	str	r0, [sp, #4]
 80040fe:	f000 ff2b 	bl	8004f58 <BugCheck_AssertInterruptsOn$4656>
 8004102:	480f      	ldr	r0, [pc, #60]	; (8004140 <ThreadManager_Yield$3165+0x48>)
 8004104:	490f      	ldr	r1, [pc, #60]	; (8004144 <ThreadManager_Yield$3165+0x4c>)
 8004106:	4479      	add	r1, pc
 8004108:	4408      	add	r0, r1
 800410a:	f8d0 00f8 	ldr.w	r0, [r0, #248]	; 0xf8
 800410e:	2800      	cmp	r0, #0
 8004110:	4601      	mov	r1, r0
 8004112:	bf18      	it	ne
 8004114:	2101      	movne	r1, #1

            public override void SetNextQuantumTimer()
            {
            }

            public override void SetNextQuantumTimer( SchedulerTime nextTimeout )
 8004116:	2900      	cmp	r1, #0
 8004118:	9000      	str	r0, [sp, #0]
 800411a:	d107      	bne.n	800412c <ThreadManager_Yield$3165+0x34>
 800411c:	e7ff      	b.n	800411e <ThreadManager_Yield$3165+0x26>
 800411e:	480a      	ldr	r0, [pc, #40]	; (8004148 <ThreadManager_Yield$3165+0x50>)
 8004120:	490a      	ldr	r1, [pc, #40]	; (800414c <ThreadManager_Yield$3165+0x54>)
 8004122:	4479      	add	r1, pc
 8004124:	5840      	ldr	r0, [r0, r1]
            {
            }
 8004126:	f7fc f8ed 	bl	8000304 <BugCheck_Raise$4648>

 800412a:	e7ff      	b.n	800412c <ThreadManager_Yield$3165+0x34>

            ThreadImpl thisThread = ThreadImpl.CurrentThread;

            BugCheck.Assert( thisThread != null, BugCheck.StopCode.NoCurrentThread );

            InsertInPriorityOrder( thisThread );
 800412c:	9801      	ldr	r0, [sp, #4]
 800412e:	9900      	ldr	r1, [sp, #0]
 8004130:	f000 fe01 	bl	8004d36 <ThreadManager_InsertInPriorityOrder$3187>

            RescheduleAndRequestContextSwitchIfNeeded( HardwareException.None );
 8004134:	2100      	movs	r1, #0
 8004136:	9801      	ldr	r0, [sp, #4]
 8004138:	f000 fe8c 	bl	8004e54 <ThreadManager_RescheduleAndRequestContextSwitchIfNeeded$3170>
 800413c:	b002      	add	sp, #8
 800413e:	bd80      	pop	{r7, pc}
 8004140:	fffffe3c 	.word	0xfffffe3c
 8004144:	17ffd6ca 	.word	0x17ffd6ca
 8004148:	e8025218 	.word	0xe8025218
 800414c:	17ffd6ae 	.word	0x17ffd6ae

08004150 <Thread_RegisterWait$4006>:
 8004150:	b580      	push	{r7, lr}
 8004152:	b098      	sub	sp, #96	; 0x60
 8004154:	460a      	mov	r2, r1
        }

        public void RegisterWait( KernelNode< Synchronization.WaitingRecord > node )
        {
            BugCheck.AssertInterruptsOff();
 8004156:	910f      	str	r1, [sp, #60]	; 0x3c
 8004158:	920e      	str	r2, [sp, #56]	; 0x38
 800415a:	900d      	str	r0, [sp, #52]	; 0x34
 800415c:	f000 f886 	bl	800426c <BugCheck_AssertInterruptsOff$4655>

            return joinEvent.WaitOne( timeout, false );
        }

        public static void Sleep( int millisecondsTimeout )
        {
 8004160:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004162:	6901      	ldr	r1, [r0, #16]
 8004164:	698a      	ldr	r2, [r1, #24]
 8004166:	69c9      	ldr	r1, [r1, #28]
 8004168:	4b3c      	ldr	r3, [pc, #240]	; (800425c <Thread_RegisterWait$4006+0x10c>)
 800416a:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 8004260 <Thread_RegisterWait$4006+0x110>
 800416e:	44fc      	add	ip, pc
 8004170:	4463      	add	r3, ip
 8004172:	f8d3 c094 	ldr.w	ip, [r3, #148]	; 0x94
 8004176:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800417a:	9111      	str	r1, [sp, #68]	; 0x44
 800417c:	9210      	str	r2, [sp, #64]	; 0x40
 800417e:	9313      	str	r3, [sp, #76]	; 0x4c
 8004180:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
        {
            BugCheck.AssertInterruptsOff();

            SchedulerTime timeout = node.Target.Timeout;

            if(timeout == SchedulerTime.MaxValue)
 8004184:	404b      	eors	r3, r1
 8004186:	ea8c 0c02 	eor.w	ip, ip, r2
 800418a:	ea43 030c 	orr.w	r3, r3, ip
 800418e:	2b00      	cmp	r3, #0
 8004190:	920c      	str	r2, [sp, #48]	; 0x30
 8004192:	910b      	str	r1, [sp, #44]	; 0x2c
 8004194:	d106      	bne.n	80041a4 <Thread_RegisterWait$4006+0x54>
 8004196:	e7ff      	b.n	8004198 <Thread_RegisterWait$4006+0x48>
            {
                //
                // No timeout, add at end.
                //
                m_pendingObjects.InsertAtTail( node );
 8004198:	980d      	ldr	r0, [sp, #52]	; 0x34
 800419a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800419c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800419e:	f000 f8b3 	bl	8004308 <KernelList`1_InsertAtTail$17419>
            }
 80041a2:	e04e      	b.n	8004242 <Thread_RegisterWait$4006+0xf2>
            else
            {
                //
                // Insert in order.
                //
                KernelNode< Synchronization.WaitingRecord > node2            = m_pendingObjects.StartOfForwardWalk;
 80041a4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80041a6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80041a8:	f000 f878 	bl	800429c <KernelList`1_get_StartOfForwardWalk$17425>
 80041ac:	2101      	movs	r1, #1
                bool                                        fInvalidateTimer = true;
 80041ae:	910a      	str	r1, [sp, #40]	; 0x28
 80041b0:	9009      	str	r0, [sp, #36]	; 0x24
 80041b2:	e7ff      	b.n	80041b4 <Thread_RegisterWait$4006+0x64>
 80041b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041b6:	990a      	ldr	r1, [sp, #40]	; 0x28

                while(node2.IsValidForForwardMove)
 80041b8:	9008      	str	r0, [sp, #32]
 80041ba:	9107      	str	r1, [sp, #28]
 80041bc:	f000 f875 	bl	80042aa <KernelNode`1_get_IsValidForForwardMove$17440>
 80041c0:	f010 0fff 	tst.w	r0, #255	; 0xff
 80041c4:	9808      	ldr	r0, [sp, #32]
 80041c6:	9907      	ldr	r1, [sp, #28]
 80041c8:	9006      	str	r0, [sp, #24]
 80041ca:	9105      	str	r1, [sp, #20]
 80041cc:	d020      	beq.n	8004210 <Thread_RegisterWait$4006+0xc0>
 80041ce:	e7ff      	b.n	80041d0 <Thread_RegisterWait$4006+0x80>

            return joinEvent.WaitOne( timeout, false );
        }

        public static void Sleep( int millisecondsTimeout )
        {
 80041d0:	9808      	ldr	r0, [sp, #32]
 80041d2:	6901      	ldr	r1, [r0, #16]
 80041d4:	698a      	ldr	r2, [r1, #24]
 80041d6:	69c9      	ldr	r1, [r1, #28]
 80041d8:	9115      	str	r1, [sp, #84]	; 0x54
 80041da:	9214      	str	r2, [sp, #80]	; 0x50
 80041dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80041de:	9317      	str	r3, [sp, #92]	; 0x5c
 80041e0:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
 80041e4:	f8cd c058 	str.w	ip, [sp, #88]	; 0x58
 80041e8:	f04f 0e00 	mov.w	lr, #0
 80041ec:	4562      	cmp	r2, ip
 80041ee:	4672      	mov	r2, lr
 80041f0:	bf88      	it	hi
 80041f2:	2201      	movhi	r2, #1
 80041f4:	4299      	cmp	r1, r3
 80041f6:	bf88      	it	hi
 80041f8:	f04f 0e01 	movhi.w	lr, #1
 80041fc:	4299      	cmp	r1, r3
 80041fe:	bf08      	it	eq
 8004200:	4696      	moveq	lr, r2
                KernelNode< Synchronization.WaitingRecord > node2            = m_pendingObjects.StartOfForwardWalk;
                bool                                        fInvalidateTimer = true;

                while(node2.IsValidForForwardMove)
                {
                    if(node2.Target.Timeout > timeout)
 8004202:	f1be 0f00 	cmp.w	lr, #0
 8004206:	9907      	ldr	r1, [sp, #28]
 8004208:	9004      	str	r0, [sp, #16]
 800420a:	9103      	str	r1, [sp, #12]
 800420c:	d11b      	bne.n	8004246 <Thread_RegisterWait$4006+0xf6>
 800420e:	e01f      	b.n	8004250 <Thread_RegisterWait$4006+0x100>
 8004210:	9805      	ldr	r0, [sp, #20]
 8004212:	9906      	ldr	r1, [sp, #24]

                    node2            = node2.Next;
                    fInvalidateTimer = false;
                }

                node.InsertBefore( node2 );
 8004214:	9102      	str	r1, [sp, #8]
 8004216:	9001      	str	r0, [sp, #4]
 8004218:	e7ff      	b.n	800421a <Thread_RegisterWait$4006+0xca>
 800421a:	9801      	ldr	r0, [sp, #4]
 800421c:	9902      	ldr	r1, [sp, #8]
 800421e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004220:	9000      	str	r0, [sp, #0]
 8004222:	4610      	mov	r0, r2
 8004224:	f000 f84a 	bl	80042bc <KernelNode`1_InsertBefore$17432>

                if(fInvalidateTimer)
 8004228:	9800      	ldr	r0, [sp, #0]
 800422a:	f010 0fff 	tst.w	r0, #255	; 0xff
 800422e:	d007      	beq.n	8004240 <Thread_RegisterWait$4006+0xf0>
 8004230:	e7ff      	b.n	8004232 <Thread_RegisterWait$4006+0xe2>
                {
                    ThreadManager.Instance.InvalidateNextWaitTimer();
 8004232:	480c      	ldr	r0, [pc, #48]	; (8004264 <Thread_RegisterWait$4006+0x114>)
 8004234:	490c      	ldr	r1, [pc, #48]	; (8004268 <Thread_RegisterWait$4006+0x118>)
 8004236:	4479      	add	r1, pc
 8004238:	4408      	add	r0, r1
 800423a:	f000 f856 	bl	80042ea <ThreadManager_InvalidateNextWaitTimer$3180>
                }
 800423e:	e7ff      	b.n	8004240 <Thread_RegisterWait$4006+0xf0>
            }
 8004240:	e7ff      	b.n	8004242 <Thread_RegisterWait$4006+0xf2>
 8004242:	b018      	add	sp, #96	; 0x60
 8004244:	bd80      	pop	{r7, pc}
 8004246:	9803      	ldr	r0, [sp, #12]
 8004248:	9904      	ldr	r1, [sp, #16]

                while(node2.IsValidForForwardMove)
                {
                    if(node2.Target.Timeout > timeout)
                    {
                        break;
 800424a:	9102      	str	r1, [sp, #8]
 800424c:	9001      	str	r0, [sp, #4]
 800424e:	e7e4      	b.n	800421a <Thread_RegisterWait$4006+0xca>
            }

            if((m_state & ThreadState.Stopped) != 0)
            {
                return true;
            }
 8004250:	9808      	ldr	r0, [sp, #32]
 8004252:	6881      	ldr	r1, [r0, #8]
 8004254:	2200      	movs	r2, #0
                        break;
                    }

                    node2            = node2.Next;
                    fInvalidateTimer = false;
                }
 8004256:	920a      	str	r2, [sp, #40]	; 0x28
 8004258:	9109      	str	r1, [sp, #36]	; 0x24
 800425a:	e7ab      	b.n	80041b4 <Thread_RegisterWait$4006+0x64>
 800425c:	fffffe3c 	.word	0xfffffe3c
 8004260:	17ffd662 	.word	0x17ffd662
 8004264:	ffffeaac 	.word	0xffffeaac
 8004268:	17ffd59a 	.word	0x17ffd59a

0800426c <BugCheck_AssertInterruptsOff$4655>:

        //--//

        public static void AssertInterruptsOff()
        {
            Assert( Processor.Instance.AreInterruptsDisabled() == true, BugCheck.StopCode.InterruptsNotDisabled );
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	f018 fde8 	bl	801ce44 <CMSIS_STUB_SCB__get_PRIMASK>
 8004274:	9001      	str	r0, [sp, #4]
 8004276:	f018 fdef 	bl	801ce58 <CMSIS_STUB_SCB__get_BASEPRI>
 800427a:	2100      	movs	r1, #0
 800427c:	2802      	cmp	r0, #2
 800427e:	bf38      	it	cc
 8004280:	2101      	movcc	r1, #1
 8004282:	9801      	ldr	r0, [sp, #4]
 8004284:	ea41 0100 	orr.w	r1, r1, r0

        [Inline]
        public static void Assert( bool     condition ,
                                   StopCode code      )
        {
            if(!condition)
 8004288:	f011 0f01 	tst.w	r1, #1
 800428c:	d104      	bne.n	8004298 <BugCheck_AssertInterruptsOff$4655+0x2c>
 800428e:	e7ff      	b.n	8004290 <BugCheck_AssertInterruptsOff$4655+0x24>
            {
                Raise( code );
 8004290:	2000      	movs	r0, #0
 8004292:	f7fc f837 	bl	8000304 <BugCheck_Raise$4648>
            }
 8004296:	e7ff      	b.n	8004298 <BugCheck_AssertInterruptsOff$4655+0x2c>
 8004298:	b002      	add	sp, #8
 800429a:	bd80      	pop	{r7, pc}

0800429c <KernelList`1_get_StartOfForwardWalk$17425>:
 800429c:	b081      	sub	sp, #4
 800429e:	4601      	mov	r1, r0

        public KernelNode< T > StartOfForwardWalk
        {
            get
            {
                return m_head.Next;
 80042a0:	6880      	ldr	r0, [r0, #8]
 80042a2:	6880      	ldr	r0, [r0, #8]
 80042a4:	9100      	str	r1, [sp, #0]
 80042a6:	b001      	add	sp, #4
 80042a8:	4770      	bx	lr

080042aa <KernelNode`1_get_IsValidForForwardMove$17440>:
 80042aa:	b081      	sub	sp, #4
 80042ac:	4601      	mov	r1, r0

        public bool IsValidForForwardMove
        {
            get
            {
                return m_next != null;
 80042ae:	6880      	ldr	r0, [r0, #8]
 80042b0:	2800      	cmp	r0, #0
 80042b2:	bf18      	it	ne
 80042b4:	2001      	movne	r0, #1
 80042b6:	9100      	str	r1, [sp, #0]
 80042b8:	b001      	add	sp, #4
 80042ba:	4770      	bx	lr

080042bc <KernelNode`1_InsertBefore$17432>:
 80042bc:	b082      	sub	sp, #8
 80042be:	4602      	mov	r2, r0
        // Helper Methods
        //

        public void InsertBefore( KernelNode< T > place )
        {
            if(m_next != null)
 80042c0:	6880      	ldr	r0, [r0, #8]
 80042c2:	2800      	cmp	r0, #0
 80042c4:	9201      	str	r2, [sp, #4]
 80042c6:	9100      	str	r1, [sp, #0]
 80042c8:	d006      	beq.n	80042d8 <KernelNode`1_InsertBefore$17432+0x1c>
 80042ca:	e7ff      	b.n	80042cc <KernelNode`1_InsertBefore$17432+0x10>
        //--//

        [Inline]
        private void RemoveFromList_NoClear()
        {
            KernelNode< T > next = m_next;
 80042cc:	9801      	ldr	r0, [sp, #4]
 80042ce:	6881      	ldr	r1, [r0, #8]
            KernelNode< T > prev = m_previous;
 80042d0:	68c2      	ldr	r2, [r0, #12]
 80042d2:	60ca      	str	r2, [r1, #12]
 80042d4:	6091      	str	r1, [r2, #8]
        public void InsertBefore( KernelNode< T > place )
        {
            if(m_next != null)
            {
                RemoveFromList_NoClear();
            }
 80042d6:	e7ff      	b.n	80042d8 <KernelNode`1_InsertBefore$17432+0x1c>

            KernelNode< T > prev = place.m_previous;
 80042d8:	9800      	ldr	r0, [sp, #0]
 80042da:	68c1      	ldr	r1, [r0, #12]
 80042dc:	9a01      	ldr	r2, [sp, #4]
 80042de:	608a      	str	r2, [r1, #8]
 80042e0:	60d1      	str	r1, [r2, #12]
 80042e2:	6090      	str	r0, [r2, #8]
 80042e4:	60c2      	str	r2, [r0, #12]
 80042e6:	b002      	add	sp, #8
 80042e8:	4770      	bx	lr

080042ea <ThreadManager_InvalidateNextWaitTimer$3180>:
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b082      	sub	sp, #8
 80042ee:	4601      	mov	r1, r0

        //--//

        public void InvalidateNextWaitTimer()
        {
            if(m_noInvalidateNextWaitTimerRecursion == false)
 80042f0:	f890 0020 	ldrb.w	r0, [r0, #32]
 80042f4:	2800      	cmp	r0, #0
 80042f6:	9101      	str	r1, [sp, #4]
 80042f8:	d104      	bne.n	8004304 <ThreadManager_InvalidateNextWaitTimer$3180+0x1a>
 80042fa:	e7ff      	b.n	80042fc <ThreadManager_InvalidateNextWaitTimer$3180+0x12>
            {
                ComputeNextTimeout();
 80042fc:	9801      	ldr	r0, [sp, #4]
 80042fe:	f000 ff7d 	bl	80051fc <ThreadManager_ComputeNextTimeout$3182>
            }
 8004302:	e7ff      	b.n	8004304 <ThreadManager_InvalidateNextWaitTimer$3180+0x1a>
 8004304:	b002      	add	sp, #8
 8004306:	bd80      	pop	{r7, pc}

08004308 <KernelList`1_InsertAtTail$17419>:
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	460a      	mov	r2, r1
 800430e:	4603      	mov	r3, r0
        // Helper Methods
        //

        public void InsertAtTail( KernelNode< T > node )
        {
            node.InsertBefore( m_tail );
 8004310:	68c0      	ldr	r0, [r0, #12]
 8004312:	9003      	str	r0, [sp, #12]
 8004314:	4608      	mov	r0, r1
 8004316:	9903      	ldr	r1, [sp, #12]
 8004318:	9202      	str	r2, [sp, #8]
 800431a:	9301      	str	r3, [sp, #4]
 800431c:	f7ff ffce 	bl	80042bc <KernelNode`1_InsertBefore$17432>
 8004320:	b004      	add	sp, #16
 8004322:	bd80      	pop	{r7, pc}

08004324 <Thread_UnregisterWait$4008>:
 8004324:	b580      	push	{r7, lr}
 8004326:	b086      	sub	sp, #24
 8004328:	4601      	mov	r1, r0
            }
        }

        public void UnregisterWait( KernelNode< Synchronization.WaitingRecord > node )
        {
            BugCheck.AssertInterruptsOff();
 800432a:	9001      	str	r0, [sp, #4]
 800432c:	9100      	str	r1, [sp, #0]
 800432e:	f7ff ff9d 	bl	800426c <BugCheck_AssertInterruptsOff$4655>

            node.RemoveFromList();
 8004332:	9801      	ldr	r0, [sp, #4]
 8004334:	f000 f82a 	bl	800438c <KernelNode`1_RemoveFromList$17433>

            return joinEvent.WaitOne( timeout, false );
        }

        public static void Sleep( int millisecondsTimeout )
        {
 8004338:	9801      	ldr	r0, [sp, #4]
 800433a:	6901      	ldr	r1, [r0, #16]
 800433c:	698a      	ldr	r2, [r1, #24]
 800433e:	69c9      	ldr	r1, [r1, #28]
 8004340:	4b0e      	ldr	r3, [pc, #56]	; (800437c <Thread_UnregisterWait$4008+0x58>)
 8004342:	f8df c03c 	ldr.w	ip, [pc, #60]	; 8004380 <Thread_UnregisterWait$4008+0x5c>
 8004346:	44fc      	add	ip, pc
 8004348:	4463      	add	r3, ip
 800434a:	f8d3 c094 	ldr.w	ip, [r3, #148]	; 0x94
 800434e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004352:	9103      	str	r1, [sp, #12]
 8004354:	9202      	str	r2, [sp, #8]
 8004356:	9305      	str	r3, [sp, #20]
 8004358:	f8cd c010 	str.w	ip, [sp, #16]

            node.RemoveFromList();

            SchedulerTime timeout = node.Target.Timeout;

            if(timeout != SchedulerTime.MaxValue)
 800435c:	4059      	eors	r1, r3
 800435e:	ea82 020c 	eor.w	r2, r2, ip
 8004362:	4311      	orrs	r1, r2
 8004364:	2900      	cmp	r1, #0
 8004366:	d007      	beq.n	8004378 <Thread_UnregisterWait$4008+0x54>
 8004368:	e7ff      	b.n	800436a <Thread_UnregisterWait$4008+0x46>
            {
                ThreadManager.Instance.InvalidateNextWaitTimer();
 800436a:	4806      	ldr	r0, [pc, #24]	; (8004384 <Thread_UnregisterWait$4008+0x60>)
 800436c:	4906      	ldr	r1, [pc, #24]	; (8004388 <Thread_UnregisterWait$4008+0x64>)
 800436e:	4479      	add	r1, pc
 8004370:	4408      	add	r0, r1
 8004372:	f7ff ffba 	bl	80042ea <ThreadManager_InvalidateNextWaitTimer$3180>
            }
 8004376:	e7ff      	b.n	8004378 <Thread_UnregisterWait$4008+0x54>
 8004378:	b006      	add	sp, #24
 800437a:	bd80      	pop	{r7, pc}
 800437c:	fffffe3c 	.word	0xfffffe3c
 8004380:	17ffd48a 	.word	0x17ffd48a
 8004384:	ffffeaac 	.word	0xffffeaac
 8004388:	17ffd462 	.word	0x17ffd462

0800438c <KernelNode`1_RemoveFromList$17433>:
 800438c:	b081      	sub	sp, #4
 800438e:	4601      	mov	r1, r0
            this.ConnectToNext( place );
        }

        public void RemoveFromList()
        {
            if(m_next != null)
 8004390:	6880      	ldr	r0, [r0, #8]
 8004392:	2800      	cmp	r0, #0
 8004394:	9100      	str	r1, [sp, #0]
 8004396:	d006      	beq.n	80043a6 <KernelNode`1_RemoveFromList$17433+0x1a>
 8004398:	e7ff      	b.n	800439a <KernelNode`1_RemoveFromList$17433+0xe>
        //--//

        [Inline]
        private void RemoveFromList_NoClear()
        {
            KernelNode< T > next = m_next;
 800439a:	9800      	ldr	r0, [sp, #0]
 800439c:	6881      	ldr	r1, [r0, #8]
            KernelNode< T > prev = m_previous;
 800439e:	68c2      	ldr	r2, [r0, #12]
 80043a0:	60ca      	str	r2, [r1, #12]
 80043a2:	6091      	str	r1, [r2, #8]
        public void RemoveFromList()
        {
            if(m_next != null)
            {
                RemoveFromList_NoClear();
            }
 80043a4:	e7ff      	b.n	80043a6 <KernelNode`1_RemoveFromList$17433+0x1a>
 80043a6:	2000      	movs	r0, #0
 80043a8:	9900      	ldr	r1, [sp, #0]
 80043aa:	6088      	str	r0, [r1, #8]
 80043ac:	60c8      	str	r0, [r1, #12]
 80043ae:	b001      	add	sp, #4
 80043b0:	4770      	bx	lr
 80043b2:	46c0      	nop			; (mov r8, r8)

080043b4 <Thread_GetFirstTimeout$4009>:
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b088      	sub	sp, #32
 80043b8:	4601      	mov	r1, r0
        }

        public SchedulerTime GetFirstTimeout()
        {
            BugCheck.AssertInterruptsOff();
 80043ba:	9005      	str	r0, [sp, #20]
 80043bc:	9104      	str	r1, [sp, #16]
 80043be:	f7ff ff55 	bl	800426c <BugCheck_AssertInterruptsOff$4655>

            Synchronization.WaitingRecord wr = m_pendingObjects.FirstTarget();
 80043c2:	9805      	ldr	r0, [sp, #20]
 80043c4:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80043c6:	f000 f827 	bl	8004418 <KernelList`1_FirstTarget$17421>
 80043ca:	4601      	mov	r1, r0

            return wr != null ? wr.Timeout : SchedulerTime.MaxValue;
 80043cc:	2800      	cmp	r0, #0
 80043ce:	9103      	str	r1, [sp, #12]
 80043d0:	d008      	beq.n	80043e4 <Thread_GetFirstTimeout$4009+0x30>
 80043d2:	e7ff      	b.n	80043d4 <Thread_GetFirstTimeout$4009+0x20>
 80043d4:	9803      	ldr	r0, [sp, #12]
 80043d6:	6981      	ldr	r1, [r0, #24]
 80043d8:	69c2      	ldr	r2, [r0, #28]
 80043da:	ab06      	add	r3, sp, #24
 80043dc:	9207      	str	r2, [sp, #28]
 80043de:	9106      	str	r1, [sp, #24]
            }
        }

        public void UnregisterWait( KernelNode< Synchronization.WaitingRecord > node )
        {
            BugCheck.AssertInterruptsOff();
 80043e0:	9302      	str	r3, [sp, #8]
 80043e2:	e00c      	b.n	80043fe <Thread_GetFirstTimeout$4009+0x4a>
 80043e4:	a806      	add	r0, sp, #24
 80043e6:	490a      	ldr	r1, [pc, #40]	; (8004410 <Thread_GetFirstTimeout$4009+0x5c>)
 80043e8:	4a0a      	ldr	r2, [pc, #40]	; (8004414 <Thread_GetFirstTimeout$4009+0x60>)
 80043ea:	447a      	add	r2, pc
 80043ec:	4411      	add	r1, r2
 80043ee:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 80043f2:	f8d1 1098 	ldr.w	r1, [r1, #152]	; 0x98
 80043f6:	9107      	str	r1, [sp, #28]
 80043f8:	9206      	str	r2, [sp, #24]
        {
            BugCheck.AssertInterruptsOff();

            Synchronization.WaitingRecord wr = m_pendingObjects.FirstTarget();

            return wr != null ? wr.Timeout : SchedulerTime.MaxValue;
 80043fa:	9002      	str	r0, [sp, #8]
 80043fc:	e7ff      	b.n	80043fe <Thread_GetFirstTimeout$4009+0x4a>
 80043fe:	9802      	ldr	r0, [sp, #8]
 8004400:	6801      	ldr	r1, [r0, #0]
 8004402:	6840      	ldr	r0, [r0, #4]
 8004404:	9001      	str	r0, [sp, #4]
 8004406:	4608      	mov	r0, r1
 8004408:	9901      	ldr	r1, [sp, #4]
 800440a:	b008      	add	sp, #32
 800440c:	bd80      	pop	{r7, pc}
 800440e:	46c0      	nop			; (mov r8, r8)
 8004410:	fffffe3c 	.word	0xfffffe3c
 8004414:	17ffd3e6 	.word	0x17ffd3e6

08004418 <KernelList`1_FirstTarget$17421>:
 8004418:	b083      	sub	sp, #12
 800441a:	4601      	mov	r1, r0
            return null;
        }

        public T FirstTarget()
        {
            KernelNode< T > node = m_head.Next;
 800441c:	6882      	ldr	r2, [r0, #8]

            if(node != m_tail)
 800441e:	68c0      	ldr	r0, [r0, #12]
 8004420:	6892      	ldr	r2, [r2, #8]

        public T FirstTarget()
        {
            KernelNode< T > node = m_head.Next;

            if(node != m_tail)
 8004422:	4282      	cmp	r2, r0
 8004424:	9202      	str	r2, [sp, #8]
 8004426:	9101      	str	r1, [sp, #4]
 8004428:	d004      	beq.n	8004434 <KernelList`1_FirstTarget$17421+0x1c>
 800442a:	e7ff      	b.n	800442c <KernelList`1_FirstTarget$17421+0x14>
 800442c:	9802      	ldr	r0, [sp, #8]
 800442e:	6901      	ldr	r1, [r0, #16]
        {
            KernelNode< T > node = m_head.Next;

            if(node != m_tail)
            {
                return node.Target;
 8004430:	9100      	str	r1, [sp, #0]
 8004432:	e002      	b.n	800443a <KernelList`1_FirstTarget$17421+0x22>
 8004434:	2000      	movs	r0, #0
            }

            return default(T);
 8004436:	9000      	str	r0, [sp, #0]
 8004438:	e7ff      	b.n	800443a <KernelList`1_FirstTarget$17421+0x22>
        }
 800443a:	9800      	ldr	r0, [sp, #0]
 800443c:	b003      	add	sp, #12
 800443e:	4770      	bx	lr

08004440 <Thread_ProcessWaitExpiration$4010>:
 8004440:	b510      	push	{r4, lr}
 8004442:	b094      	sub	sp, #80	; 0x50
 8004444:	4619      	mov	r1, r3
 8004446:	4694      	mov	ip, r2
 8004448:	4686      	mov	lr, r0
            set
            {
                if(m_processed == false)
                {
                    m_fulfilled = value;
                    m_processed = true;
 800444a:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
 800444e:	930e      	str	r3, [sp, #56]	; 0x38
 8004450:	900d      	str	r0, [sp, #52]	; 0x34
 8004452:	910c      	str	r1, [sp, #48]	; 0x30
 8004454:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 8004458:	920a      	str	r2, [sp, #40]	; 0x28
 800445a:	f7ff ff07 	bl	800426c <BugCheck_AssertInterruptsOff$4655>

                    Disconnect();
 800445e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004460:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8004462:	f7ff ff1b 	bl	800429c <KernelList`1_get_StartOfForwardWalk$17425>
 8004466:	2100      	movs	r1, #0
                }
 8004468:	9109      	str	r1, [sp, #36]	; 0x24
 800446a:	9008      	str	r0, [sp, #32]
 800446c:	e7ff      	b.n	800446e <Thread_ProcessWaitExpiration$4010+0x2e>
            }
        }
 800446e:	9808      	ldr	r0, [sp, #32]
 8004470:	9908      	ldr	r1, [sp, #32]
 8004472:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004474:	9207      	str	r2, [sp, #28]
 8004476:	9106      	str	r1, [sp, #24]
 8004478:	f7ff ff17 	bl	80042aa <KernelNode`1_get_IsValidForForwardMove$17440>
 800447c:	f010 0fff 	tst.w	r0, #255	; 0xff
 8004480:	9807      	ldr	r0, [sp, #28]
 8004482:	9005      	str	r0, [sp, #20]
 8004484:	d01f      	beq.n	80044c6 <Thread_ProcessWaitExpiration$4010+0x86>
 8004486:	e7ff      	b.n	8004488 <Thread_ProcessWaitExpiration$4010+0x48>

            while(s_recycledCount < RecycleLimit)
            {
                WaitingRecord wr = new WaitingRecord();

                wr.Recycle();
 8004488:	9806      	ldr	r0, [sp, #24]
 800448a:	6901      	ldr	r1, [r0, #16]
 800448c:	698a      	ldr	r2, [r1, #24]
 800448e:	69cb      	ldr	r3, [r1, #28]
 8004490:	9311      	str	r3, [sp, #68]	; 0x44
 8004492:	9210      	str	r2, [sp, #64]	; 0x40
 8004494:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 8004498:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
 800449c:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 80044a0:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
 80044a4:	2400      	movs	r4, #0
 80044a6:	4572      	cmp	r2, lr
 80044a8:	4622      	mov	r2, r4
 80044aa:	bf88      	it	hi
 80044ac:	2201      	movhi	r2, #1
 80044ae:	4563      	cmp	r3, ip
 80044b0:	bf88      	it	hi
 80044b2:	2401      	movhi	r4, #1
 80044b4:	4563      	cmp	r3, ip
 80044b6:	bf08      	it	eq
 80044b8:	4614      	moveq	r4, r2
}
 80044ba:	2c00      	cmp	r4, #0
 80044bc:	9a07      	ldr	r2, [sp, #28]
 80044be:	9104      	str	r1, [sp, #16]
 80044c0:	9203      	str	r2, [sp, #12]
 80044c2:	d10e      	bne.n	80044e2 <Thread_ProcessWaitExpiration$4010+0xa2>
 80044c4:	e010      	b.n	80044e8 <Thread_ProcessWaitExpiration$4010+0xa8>
 80044c6:	9805      	ldr	r0, [sp, #20]
 80044c8:	9002      	str	r0, [sp, #8]
 80044ca:	e7ff      	b.n	80044cc <Thread_ProcessWaitExpiration$4010+0x8c>
 80044cc:	9802      	ldr	r0, [sp, #8]
 80044ce:	f010 0fff 	tst.w	r0, #255	; 0xff
 80044d2:	d004      	beq.n	80044de <Thread_ProcessWaitExpiration$4010+0x9e>
 80044d4:	e7ff      	b.n	80044d6 <Thread_ProcessWaitExpiration$4010+0x96>
 80044d6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80044d8:	f000 f814 	bl	8004504 <Thread_Wakeup$4011>
 80044dc:	e7ff      	b.n	80044de <Thread_ProcessWaitExpiration$4010+0x9e>
 80044de:	b014      	add	sp, #80	; 0x50
 80044e0:	bd10      	pop	{r4, pc}
 80044e2:	9803      	ldr	r0, [sp, #12]
 80044e4:	9002      	str	r0, [sp, #8]
 80044e6:	e7f1      	b.n	80044cc <Thread_ProcessWaitExpiration$4010+0x8c>
        }

        //
        // State
        //

 80044e8:	9806      	ldr	r0, [sp, #24]
 80044ea:	6881      	ldr	r1, [r0, #8]
 80044ec:	2200      	movs	r2, #0
 80044ee:	9804      	ldr	r0, [sp, #16]
 80044f0:	9101      	str	r1, [sp, #4]
 80044f2:	4611      	mov	r1, r2
 80044f4:	f000 f81a 	bl	800452c <WaitingRecord_set_RequestFulfilled$5011>
 80044f8:	2001      	movs	r0, #1
 80044fa:	9901      	ldr	r1, [sp, #4]
 80044fc:	9009      	str	r0, [sp, #36]	; 0x24
 80044fe:	9108      	str	r1, [sp, #32]
 8004500:	e7b5      	b.n	800446e <Thread_ProcessWaitExpiration$4010+0x2e>
 8004502:	46c0      	nop			; (mov r8, r8)

08004504 <Thread_Wakeup$4011>:
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	4601      	mov	r1, r0
            }
        }

        public void Wakeup()
        {
            ThreadManager.Instance.Wakeup( this );
 800450a:	4a06      	ldr	r2, [pc, #24]	; (8004524 <Thread_Wakeup$4011+0x20>)
 800450c:	4b06      	ldr	r3, [pc, #24]	; (8004528 <Thread_Wakeup$4011+0x24>)
 800450e:	447b      	add	r3, pc
 8004510:	441a      	add	r2, r3
 8004512:	9001      	str	r0, [sp, #4]
 8004514:	4610      	mov	r0, r2
 8004516:	9a01      	ldr	r2, [sp, #4]
 8004518:	9100      	str	r1, [sp, #0]
 800451a:	4611      	mov	r1, r2
 800451c:	f000 f81d 	bl	800455a <ThreadManager_Wakeup$3167>
 8004520:	b002      	add	sp, #8
 8004522:	bd80      	pop	{r7, pc}
 8004524:	ffffeaac 	.word	0xffffeaac
 8004528:	17ffd2c2 	.word	0x17ffd2c2

0800452c <WaitingRecord_set_RequestFulfilled$5011>:
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	4602      	mov	r2, r0
                return m_fulfilled;
            }

            set
            {
                if(m_processed == false)
 8004532:	f890 0020 	ldrb.w	r0, [r0, #32]
 8004536:	2800      	cmp	r0, #0
 8004538:	9201      	str	r2, [sp, #4]
 800453a:	9100      	str	r1, [sp, #0]
 800453c:	d10b      	bne.n	8004556 <WaitingRecord_set_RequestFulfilled$5011+0x2a>
 800453e:	e7ff      	b.n	8004540 <WaitingRecord_set_RequestFulfilled$5011+0x14>
 8004540:	9800      	ldr	r0, [sp, #0]
 8004542:	9901      	ldr	r1, [sp, #4]
 8004544:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
 8004548:	2201      	movs	r2, #1
 800454a:	f881 2020 	strb.w	r2, [r1, #32]
                {
                    m_fulfilled = value;
                    m_processed = true;

                    Disconnect();
 800454e:	4608      	mov	r0, r1
 8004550:	f005 fa64 	bl	8009a1c <WaitingRecord_Disconnect$5005>
                }
 8004554:	e7ff      	b.n	8004556 <WaitingRecord_set_RequestFulfilled$5011+0x2a>
 8004556:	b002      	add	sp, #8
 8004558:	bd80      	pop	{r7, pc}

0800455a <ThreadManager_Wakeup$3167>:
 800455a:	b580      	push	{r7, lr}
 800455c:	b08a      	sub	sp, #40	; 0x28
 800455e:	460a      	mov	r2, r1
 8004560:	2300      	movs	r3, #0
 8004562:	9308      	str	r3, [sp, #32]
 8004564:	9309      	str	r3, [sp, #36]	; 0x24
            public override void CancelQuantumTimer()
            {
            }

            public override void SetNextQuantumTimer()
            {
 8004566:	9107      	str	r1, [sp, #28]
 8004568:	9206      	str	r2, [sp, #24]
 800456a:	9005      	str	r0, [sp, #20]
 800456c:	9304      	str	r3, [sp, #16]
 800456e:	f000 f84d 	bl	800460c <ProcessorARMv7M_DisableInterrupts$3259>
 8004572:	9904      	ldr	r1, [sp, #16]
 8004574:	9109      	str	r1, [sp, #36]	; 0x24
 8004576:	9009      	str	r0, [sp, #36]	; 0x24
 8004578:	9008      	str	r0, [sp, #32]

        public virtual void Wakeup( ThreadImpl thread )
        {
            using(SmartHandles.InterruptState hnd = SmartHandles.InterruptState.Disable())
            {
                if(thread.IsWaiting)
 800457a:	9807      	ldr	r0, [sp, #28]
 800457c:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8004580:	f012 0f20 	tst.w	r2, #32
 8004584:	d103      	bne.n	800458e <ThreadManager_Wakeup$3167+0x34>
 8004586:	e7ff      	b.n	8004588 <ThreadManager_Wakeup$3167+0x2e>
 8004588:	a808      	add	r0, sp, #32
 800458a:	9003      	str	r0, [sp, #12]
 800458c:	e016      	b.n	80045bc <ThreadManager_Wakeup$3167+0x62>
 800458e:	9806      	ldr	r0, [sp, #24]
 8004590:	6a41      	ldr	r1, [r0, #36]	; 0x24
                {
                    thread.State &= ~System.Threading.ThreadState.WaitSleepJoin;
 8004592:	f021 0120 	bic.w	r1, r1, #32
 8004596:	f000 f975 	bl	8004884 <Thread_set_State$4035>

                    InsertInPriorityOrder( thread );
 800459a:	9805      	ldr	r0, [sp, #20]
 800459c:	9906      	ldr	r1, [sp, #24]
 800459e:	f000 fbca 	bl	8004d36 <ThreadManager_InsertInPriorityOrder$3187>
 80045a2:	a808      	add	r0, sp, #32

                    RescheduleAndRequestContextSwitchIfNeeded( hnd.GetCurrentExceptionMode() );
 80045a4:	9002      	str	r0, [sp, #8]
 80045a6:	f000 fc09 	bl	8004dbc <InterruptState_GetCurrentExceptionMode$5301>
 80045aa:	9905      	ldr	r1, [sp, #20]
 80045ac:	9001      	str	r0, [sp, #4]
 80045ae:	4608      	mov	r0, r1
 80045b0:	9901      	ldr	r1, [sp, #4]
 80045b2:	f000 fc4f 	bl	8004e54 <ThreadManager_RescheduleAndRequestContextSwitchIfNeeded$3170>
            }

            public override void InitializeAfterStaticConstructors( uint[] systemStack )
            {
            }

 80045b6:	9802      	ldr	r0, [sp, #8]
                    thread.State &= ~System.Threading.ThreadState.WaitSleepJoin;

                    InsertInPriorityOrder( thread );

                    RescheduleAndRequestContextSwitchIfNeeded( hnd.GetCurrentExceptionMode() );
                }
 80045b8:	9003      	str	r0, [sp, #12]
 80045ba:	e7ff      	b.n	80045bc <ThreadManager_Wakeup$3167+0x62>
            }

            public override void InitializeAfterStaticConstructors( uint[] systemStack )
            {
            }

 80045bc:	9803      	ldr	r0, [sp, #12]
 80045be:	6800      	ldr	r0, [r0, #0]
 80045c0:	f000 f846 	bl	8004650 <ProcessorARMv7M_DisableInterruptsWithPriorityLevelHigherOrEqualTo$3266>
 80045c4:	b00a      	add	sp, #40	; 0x28
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <Thread_AcquiredWaitableObject$4012>:
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b088      	sub	sp, #32
 80045cc:	460a      	mov	r2, r1
 80045ce:	4603      	mov	r3, r0
 80045d0:	f04f 0c00 	mov.w	ip, #0
 80045d4:	f8cd c018 	str.w	ip, [sp, #24]
 80045d8:	f8cd c01c 	str.w	ip, [sp, #28]
        private          ReleaseReferenceHelper                       m_releaseReferenceHelper;

        //
        // HACK: We have a bug in the liveness of multi-pointer structure. We have to use a class instead.
        //
        internal Synchronization.WaitingRecord.Holder m_holder = new Synchronization.WaitingRecord.Holder();
 80045dc:	9105      	str	r1, [sp, #20]
 80045de:	9004      	str	r0, [sp, #16]
 80045e0:	9203      	str	r2, [sp, #12]
 80045e2:	9302      	str	r3, [sp, #8]
 80045e4:	f8cd c004 	str.w	ip, [sp, #4]
 80045e8:	f000 f810 	bl	800460c <ProcessorARMv7M_DisableInterrupts$3259>
 80045ec:	9901      	ldr	r1, [sp, #4]
 80045ee:	9107      	str	r1, [sp, #28]
 80045f0:	9007      	str	r0, [sp, #28]
 80045f2:	9006      	str	r0, [sp, #24]

        public void AcquiredWaitableObject( Synchronization.WaitableObject waitableObject )
        {
            using(SmartHandles.InterruptState.Disable())
            {
                m_ownedObjects.InsertAtTail( waitableObject.OwnershipLink );
 80045f4:	9804      	ldr	r0, [sp, #16]
 80045f6:	6b40      	ldr	r0, [r0, #52]	; 0x34

            m_start             = start;
            m_stack             = stack;
            m_swappedOutContext = Processor.Instance.AllocateProcessorContext();
            m_throwContext      = Processor.Instance.AllocateProcessorContext();

 80045f8:	9a05      	ldr	r2, [sp, #20]
 80045fa:	6891      	ldr	r1, [r2, #8]

        public void AcquiredWaitableObject( Synchronization.WaitableObject waitableObject )
        {
            using(SmartHandles.InterruptState.Disable())
            {
                m_ownedObjects.InsertAtTail( waitableObject.OwnershipLink );
 80045fc:	f000 f81a 	bl	8004634 <KernelList`1_InsertAtTail$17407>
        [TS.WellKnownField( "ThreadImpl_m_currentException" )]
        private          Exception                                    m_currentException;
                                     
        private          ThreadPriority                               m_priority;
        private readonly ThreadStart                                  m_start;
        private          uint[]                                       m_stack;
 8004600:	9806      	ldr	r0, [sp, #24]
 8004602:	f000 f825 	bl	8004650 <ProcessorARMv7M_DisableInterruptsWithPriorityLevelHigherOrEqualTo$3266>
 8004606:	b008      	add	sp, #32
 8004608:	bd80      	pop	{r7, pc}
 800460a:	46c0      	nop			; (mov r8, r8)

0800460c <ProcessorARMv7M_DisableInterrupts$3259>:
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	f018 fc22 	bl	801ce58 <CMSIS_STUB_SCB__get_BASEPRI>
 8004614:	4905      	ldr	r1, [pc, #20]	; (800462c <ProcessorARMv7M_DisableInterrupts$3259+0x20>)
 8004616:	4a06      	ldr	r2, [pc, #24]	; (8004630 <ProcessorARMv7M_DisableInterrupts$3259+0x24>)
 8004618:	447a      	add	r2, pc
 800461a:	5889      	ldr	r1, [r1, r2]
 800461c:	9001      	str	r0, [sp, #4]
 800461e:	4608      	mov	r0, r1
 8004620:	f000 f816 	bl	8004650 <ProcessorARMv7M_DisableInterruptsWithPriorityLevelHigherOrEqualTo$3266>
 8004624:	9801      	ldr	r0, [sp, #4]
 8004626:	b002      	add	sp, #8
 8004628:	bd80      	pop	{r7, pc}
 800462a:	46c0      	nop			; (mov r8, r8)
 800462c:	e8025258 	.word	0xe8025258
 8004630:	17ffd1b8 	.word	0x17ffd1b8

08004634 <KernelList`1_InsertAtTail$17407>:
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	460a      	mov	r2, r1
 800463a:	4603      	mov	r3, r0
        // Helper Methods
        //

        public void InsertAtTail( KernelNode< T > node )
        {
            node.InsertBefore( m_tail );
 800463c:	68c0      	ldr	r0, [r0, #12]
 800463e:	9003      	str	r0, [sp, #12]
 8004640:	4608      	mov	r0, r1
 8004642:	9903      	ldr	r1, [sp, #12]
 8004644:	9202      	str	r2, [sp, #8]
 8004646:	9301      	str	r3, [sp, #4]
 8004648:	f00d f80c 	bl	8011664 <KernelNode`1_InsertBefore$17681>
 800464c:	b004      	add	sp, #16
 800464e:	bd80      	pop	{r7, pc}

08004650 <ProcessorARMv7M_DisableInterruptsWithPriorityLevelHigherOrEqualTo$3266>:
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	4601      	mov	r1, r0
 8004656:	9101      	str	r1, [sp, #4]
 8004658:	f018 fc08 	bl	801ce6c <CMSIS_STUB_SCB__set_BASEPRI>
 800465c:	b002      	add	sp, #8
 800465e:	bd80      	pop	{r7, pc}

08004660 <TypeSystemManager_Rethrow$4955>:
 8004660:	b580      	push	{r7, lr}
        [NoReturn]
        [NoInline]
        [TS.WellKnownMethod( "TypeSystemManager_Rethrow" )]
        public virtual void Rethrow()
        {
            DeliverException( ThreadImpl.GetCurrentException() );
 8004662:	f000 f903 	bl	800486c <Thread_GetCurrentException$4019>
 8004666:	f004 fc79 	bl	8008f5c <TypeSystemManager_DeliverException$4957>
 800466a:	bd80      	pop	{r7, pc}

0800466c <Thread_ReleasedWaitableObject$4013>:
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	4601      	mov	r1, r0
 8004672:	2200      	movs	r2, #0
 8004674:	9204      	str	r2, [sp, #16]
 8004676:	9205      	str	r2, [sp, #20]
        private          ReleaseReferenceHelper                       m_releaseReferenceHelper;

        //
        // HACK: We have a bug in the liveness of multi-pointer structure. We have to use a class instead.
        //
        internal Synchronization.WaitingRecord.Holder m_holder = new Synchronization.WaitingRecord.Holder();
 8004678:	9003      	str	r0, [sp, #12]
 800467a:	9102      	str	r1, [sp, #8]
 800467c:	9201      	str	r2, [sp, #4]
 800467e:	f7ff ffc5 	bl	800460c <ProcessorARMv7M_DisableInterrupts$3259>
 8004682:	9901      	ldr	r1, [sp, #4]
 8004684:	9105      	str	r1, [sp, #20]
 8004686:	9005      	str	r0, [sp, #20]
 8004688:	9004      	str	r0, [sp, #16]

            m_start             = start;
            m_stack             = stack;
            m_swappedOutContext = Processor.Instance.AllocateProcessorContext();
            m_throwContext      = Processor.Instance.AllocateProcessorContext();

 800468a:	9803      	ldr	r0, [sp, #12]
 800468c:	6880      	ldr	r0, [r0, #8]

        public void ReleasedWaitableObject( Synchronization.WaitableObject waitableObject )
        {
            using(SmartHandles.InterruptState.Disable())
            {
                waitableObject.OwnershipLink.RemoveFromList();
 800468e:	f000 f805 	bl	800469c <KernelNode`1_RemoveFromList$17682>
        [TS.WellKnownField( "ThreadImpl_m_currentException" )]
        private          Exception                                    m_currentException;
                                     
        private          ThreadPriority                               m_priority;
        private readonly ThreadStart                                  m_start;
        private          uint[]                                       m_stack;
 8004692:	9804      	ldr	r0, [sp, #16]
 8004694:	f7ff ffdc 	bl	8004650 <ProcessorARMv7M_DisableInterruptsWithPriorityLevelHigherOrEqualTo$3266>
 8004698:	b006      	add	sp, #24
 800469a:	bd80      	pop	{r7, pc}

0800469c <KernelNode`1_RemoveFromList$17682>:
 800469c:	b081      	sub	sp, #4
 800469e:	4601      	mov	r1, r0
            this.ConnectToNext( place );
        }

        public void RemoveFromList()
        {
            if(m_next != null)
 80046a0:	6880      	ldr	r0, [r0, #8]
 80046a2:	2800      	cmp	r0, #0
 80046a4:	9100      	str	r1, [sp, #0]
 80046a6:	d006      	beq.n	80046b6 <KernelNode`1_RemoveFromList$17682+0x1a>
 80046a8:	e7ff      	b.n	80046aa <KernelNode`1_RemoveFromList$17682+0xe>
        //--//

        [Inline]
        private void RemoveFromList_NoClear()
        {
            KernelNode< T > next = m_next;
 80046aa:	9800      	ldr	r0, [sp, #0]
 80046ac:	6881      	ldr	r1, [r0, #8]
            KernelNode< T > prev = m_previous;
 80046ae:	68c2      	ldr	r2, [r0, #12]
 80046b0:	60ca      	str	r2, [r1, #12]
 80046b2:	6091      	str	r1, [r2, #8]
        public void RemoveFromList()
        {
            if(m_next != null)
            {
                RemoveFromList_NoClear();
            }
 80046b4:	e7ff      	b.n	80046b6 <KernelNode`1_RemoveFromList$17682+0x1a>
 80046b6:	2000      	movs	r0, #0
 80046b8:	9900      	ldr	r1, [sp, #0]
 80046ba:	6088      	str	r0, [r1, #8]
 80046bc:	60c8      	str	r0, [r1, #12]
 80046be:	b001      	add	sp, #4
 80046c0:	4770      	bx	lr

080046c2 <ThreadManager_RetireThread$3164>:
 80046c2:	b5b0      	push	{r4, r5, r7, lr}
 80046c4:	b084      	sub	sp, #16
 80046c6:	460a      	mov	r2, r1
 80046c8:	4603      	mov	r3, r0
 80046ca:	f8d1 c03c 	ldr.w	ip, [r1, #60]	; 0x3c
 80046ce:	f8d1 e040 	ldr.w	lr, [r1, #64]	; 0x40
 80046d2:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 80046d4:	6c89      	ldr	r1, [r1, #72]	; 0x48
            }
        }

        public virtual void RetireThread( ThreadImpl thread )
        {
            m_deadThreadsTime.Merge( thread.ActiveTime );
 80046d6:	3024      	adds	r0, #36	; 0x24
 80046d8:	466d      	mov	r5, sp
 80046da:	6069      	str	r1, [r5, #4]
 80046dc:	602c      	str	r4, [r5, #0]
 80046de:	4661      	mov	r1, ip
 80046e0:	9203      	str	r2, [sp, #12]
 80046e2:	4672      	mov	r2, lr
 80046e4:	9302      	str	r3, [sp, #8]
 80046e6:	f000 fc13 	bl	8004f10 <KernelPerformanceCounter_Merge$4667>
 80046ea:	b004      	add	sp, #16
 80046ec:	bdb0      	pop	{r4, r5, r7, pc}

080046ee <EventWaitHandle_Set$3945>:
 80046ee:	b580      	push	{r7, lr}
 80046f0:	b086      	sub	sp, #24
 80046f2:	4601      	mov	r1, r0
 80046f4:	2201      	movs	r2, #1
 80046f6:	7302      	strb	r2, [r0, #12]

        public bool Set()
        {
            m_state = true;

            m_handle.Release();
 80046f8:	6880      	ldr	r0, [r0, #8]
                            }
                        }

                        if(holder.RequestProcessed)
                        {
                            return holder.RequestFulfilled;
 80046fa:	f100 0208 	add.w	r2, r0, #8
 80046fe:	9204      	str	r2, [sp, #16]
 8004700:	2200      	movs	r2, #0
 8004702:	9205      	str	r2, [sp, #20]
            //--//

            m_handle = new EventWaitableObject( this );
        }

        //
 8004704:	9b04      	ldr	r3, [sp, #16]
                        if(m_owner.m_state == false)
                        {
                            return;
                        }

                        Synchronization.WaitingRecord wr = m_listWaiting.FirstTarget();
 8004706:	3b08      	subs	r3, #8
 8004708:	9205      	str	r2, [sp, #20]
 800470a:	aa05      	add	r2, sp, #20
 800470c:	3a08      	subs	r2, #8
 800470e:	9003      	str	r0, [sp, #12]
 8004710:	4610      	mov	r0, r2
 8004712:	9102      	str	r1, [sp, #8]
 8004714:	4619      	mov	r1, r3
 8004716:	f7fc f8d1 	bl	80008bc <UIntPtr_.ctor$2864>
                            }
                        }

                        if(holder.RequestProcessed)
                        {
                            return holder.RequestFulfilled;
 800471a:	9805      	ldr	r0, [sp, #20]
 800471c:	6840      	ldr	r0, [r0, #4]

        public bool Set()
        {
            m_state = true;

            m_handle.Release();
 800471e:	69c0      	ldr	r0, [r0, #28]
 8004720:	69c0      	ldr	r0, [r0, #28]
 8004722:	9903      	ldr	r1, [sp, #12]
 8004724:	9001      	str	r0, [sp, #4]
 8004726:	4608      	mov	r0, r1
 8004728:	9a01      	ldr	r2, [sp, #4]
 800472a:	4790      	blx	r2
 800472c:	b006      	add	sp, #24
 800472e:	bd80      	pop	{r7, pc}

08004730 <Thread_Detach$4015>:
 8004730:	b580      	push	{r7, lr}
 8004732:	b08a      	sub	sp, #40	; 0x28
 8004734:	2100      	movs	r1, #0
 8004736:	9106      	str	r1, [sp, #24]
 8004738:	9107      	str	r1, [sp, #28]
        private          ReleaseReferenceHelper                       m_releaseReferenceHelper;

        //
        // HACK: We have a bug in the liveness of multi-pointer structure. We have to use a class instead.
        //
        internal Synchronization.WaitingRecord.Holder m_holder = new Synchronization.WaitingRecord.Holder();
 800473a:	9005      	str	r0, [sp, #20]
 800473c:	9104      	str	r1, [sp, #16]
 800473e:	f7ff ff65 	bl	800460c <ProcessorARMv7M_DisableInterrupts$3259>
 8004742:	9904      	ldr	r1, [sp, #16]
 8004744:	9107      	str	r1, [sp, #28]
 8004746:	9007      	str	r0, [sp, #28]
 8004748:	9006      	str	r0, [sp, #24]
        }

        public void Detach()
        {
            using(SmartHandles.InterruptState.Disable())
            {
 800474a:	e7ff      	b.n	800474c <Thread_Detach$4015+0x1c>
                while(true)
                {
                    Synchronization.WaitingRecord wr = m_pendingObjects.FirstTarget();
 800474c:	9805      	ldr	r0, [sp, #20]
 800474e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8004750:	f7ff fe62 	bl	8004418 <KernelList`1_FirstTarget$17421>
                    if(wr == null)
 8004754:	4601      	mov	r1, r0
 8004756:	2800      	cmp	r0, #0
 8004758:	9103      	str	r1, [sp, #12]
 800475a:	d101      	bne.n	8004760 <Thread_Detach$4015+0x30>
 800475c:	e7ff      	b.n	800475e <Thread_Detach$4015+0x2e>

        public void Detach()
        {
            using(SmartHandles.InterruptState.Disable())
            {
                while(true)
 800475e:	e004      	b.n	800476a <Thread_Detach$4015+0x3a>
                    if(wr == null)
                    {
                        break;
                    }

                    wr.RequestFulfilled = false;
 8004760:	2100      	movs	r1, #0
 8004762:	9803      	ldr	r0, [sp, #12]
 8004764:	f7ff fee2 	bl	800452c <WaitingRecord_set_RequestFulfilled$5011>
                }
 8004768:	e7f0      	b.n	800474c <Thread_Detach$4015+0x1c>

                while(true)
                {
                    Synchronization.WaitableObject wo = m_ownedObjects.FirstTarget();
 800476a:	9805      	ldr	r0, [sp, #20]
 800476c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800476e:	f000 f82b 	bl	80047c8 <KernelList`1_FirstTarget$17409>
 8004772:	4601      	mov	r1, r0
                    if(wo == null)
 8004774:	2800      	cmp	r0, #0
 8004776:	9102      	str	r1, [sp, #8]
 8004778:	d10d      	bne.n	8004796 <Thread_Detach$4015+0x66>
 800477a:	e7ff      	b.n	800477c <Thread_Detach$4015+0x4c>
                    }

                    wo.Release();
                }

                m_schedulingLink  .RemoveFromList();
 800477c:	9805      	ldr	r0, [sp, #20]
 800477e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8004780:	f000 f836 	bl	80047f0 <KernelNode`1_RemoveFromList$17267>
                m_registrationLink.RemoveFromList();
 8004784:	9805      	ldr	r0, [sp, #20]
 8004786:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8004788:	f000 f832 	bl	80047f0 <KernelNode`1_RemoveFromList$17267>
        [TS.WellKnownField( "ThreadImpl_m_currentException" )]
        private          Exception                                    m_currentException;
                                     
        private          ThreadPriority                               m_priority;
        private readonly ThreadStart                                  m_start;
        private          uint[]                                       m_stack;
 800478c:	9806      	ldr	r0, [sp, #24]
 800478e:	f7ff ff5f 	bl	8004650 <ProcessorARMv7M_DisableInterruptsWithPriorityLevelHigherOrEqualTo$3266>
 8004792:	b00a      	add	sp, #40	; 0x28
 8004794:	bd80      	pop	{r7, pc}
            m_state             = ThreadState.Unstarted;
            m_registrationLink  = new KernelNode< ThreadImpl                     >( this );
            m_schedulingLink    = new KernelNode< ThreadImpl                     >( this );
            m_ownedObjects      = new KernelList< Synchronization.WaitableObject >();
            m_pendingObjects    = new KernelList< Synchronization.WaitingRecord  >();

 8004796:	9802      	ldr	r0, [sp, #8]
 8004798:	f100 0108 	add.w	r1, r0, #8
 800479c:	9108      	str	r1, [sp, #32]
 800479e:	2100      	movs	r1, #0
 80047a0:	9109      	str	r1, [sp, #36]	; 0x24
                {
                    joinEvent = joinEventOld;
                }
            }

            //
 80047a2:	9a08      	ldr	r2, [sp, #32]
        public void Start()
        {
            if((m_state & ThreadState.Unstarted) == 0)
            {
#if EXCEPTION_STRINGS
                throw new ThreadStateException( "Thread already started" );
 80047a4:	3a08      	subs	r2, #8
 80047a6:	9109      	str	r1, [sp, #36]	; 0x24
 80047a8:	a909      	add	r1, sp, #36	; 0x24
 80047aa:	f1a1 0008 	sub.w	r0, r1, #8
 80047ae:	4611      	mov	r1, r2
 80047b0:	f7fc f884 	bl	80008bc <UIntPtr_.ctor$2864>
            m_state             = ThreadState.Unstarted;
            m_registrationLink  = new KernelNode< ThreadImpl                     >( this );
            m_schedulingLink    = new KernelNode< ThreadImpl                     >( this );
            m_ownedObjects      = new KernelList< Synchronization.WaitableObject >();
            m_pendingObjects    = new KernelList< Synchronization.WaitingRecord  >();

 80047b4:	9809      	ldr	r0, [sp, #36]	; 0x24

            SchedulerTime timeout = node.Target.Timeout;

            if(timeout != SchedulerTime.MaxValue)
            {
                ThreadManager.Instance.InvalidateNextWaitTimer();
 80047b6:	6840      	ldr	r0, [r0, #4]
                    if(wo == null)
                    {
                        break;
                    }

                    wo.Release();
 80047b8:	69c0      	ldr	r0, [r0, #28]
 80047ba:	69c0      	ldr	r0, [r0, #28]
 80047bc:	9902      	ldr	r1, [sp, #8]
 80047be:	9001      	str	r0, [sp, #4]
 80047c0:	4608      	mov	r0, r1
 80047c2:	9a01      	ldr	r2, [sp, #4]
 80047c4:	4790      	blx	r2
                }
 80047c6:	e7d0      	b.n	800476a <Thread_Detach$4015+0x3a>

080047c8 <KernelList`1_FirstTarget$17409>:
 80047c8:	b083      	sub	sp, #12
 80047ca:	4601      	mov	r1, r0
            return null;
        }

        public T FirstTarget()
        {
            KernelNode< T > node = m_head.Next;
 80047cc:	6882      	ldr	r2, [r0, #8]

            if(node != m_tail)
 80047ce:	68c0      	ldr	r0, [r0, #12]
 80047d0:	6892      	ldr	r2, [r2, #8]

        public T FirstTarget()
        {
            KernelNode< T > node = m_head.Next;

            if(node != m_tail)
 80047d2:	4282      	cmp	r2, r0
 80047d4:	9202      	str	r2, [sp, #8]
 80047d6:	9101      	str	r1, [sp, #4]
 80047d8:	d004      	beq.n	80047e4 <KernelList`1_FirstTarget$17409+0x1c>
 80047da:	e7ff      	b.n	80047dc <KernelList`1_FirstTarget$17409+0x14>
 80047dc:	9802      	ldr	r0, [sp, #8]
 80047de:	6901      	ldr	r1, [r0, #16]
        {
            KernelNode< T > node = m_head.Next;

            if(node != m_tail)
            {
                return node.Target;
 80047e0:	9100      	str	r1, [sp, #0]
 80047e2:	e002      	b.n	80047ea <KernelList`1_FirstTarget$17409+0x22>
 80047e4:	2000      	movs	r0, #0
            }

            return default(T);
 80047e6:	9000      	str	r0, [sp, #0]
 80047e8:	e7ff      	b.n	80047ea <KernelList`1_FirstTarget$17409+0x22>
        }
 80047ea:	9800      	ldr	r0, [sp, #0]
 80047ec:	b003      	add	sp, #12
 80047ee:	4770      	bx	lr

080047f0 <KernelNode`1_RemoveFromList$17267>:
 80047f0:	b081      	sub	sp, #4
 80047f2:	4601      	mov	r1, r0
            this.ConnectToNext( place );
        }

        public void RemoveFromList()
        {
            if(m_next != null)
 80047f4:	6880      	ldr	r0, [r0, #8]
 80047f6:	2800      	cmp	r0, #0
 80047f8:	9100      	str	r1, [sp, #0]
 80047fa:	d006      	beq.n	800480a <KernelNode`1_RemoveFromList$17267+0x1a>
 80047fc:	e7ff      	b.n	80047fe <KernelNode`1_RemoveFromList$17267+0xe>
        //--//

        [Inline]
        private void RemoveFromList_NoClear()
        {
            KernelNode< T > next = m_next;
 80047fe:	9800      	ldr	r0, [sp, #0]
 8004800:	6881      	ldr	r1, [r0, #8]
            KernelNode< T > prev = m_previous;
 8004802:	68c2      	ldr	r2, [r0, #12]
 8004804:	60ca      	str	r2, [r1, #12]
 8004806:	6091      	str	r1, [r2, #8]
        public void RemoveFromList()
        {
            if(m_next != null)
            {
                RemoveFromList_NoClear();
            }
 8004808:	e7ff      	b.n	800480a <KernelNode`1_RemoveFromList$17267+0x1a>
 800480a:	2000      	movs	r0, #0
 800480c:	9900      	ldr	r1, [sp, #0]
 800480e:	6088      	str	r0, [r1, #8]
 8004810:	60c8      	str	r0, [r1, #12]
 8004812:	b001      	add	sp, #4
 8004814:	4770      	bx	lr
 8004816:	46c0      	nop			; (mov r8, r8)

08004818 <SwapCurrentThreadUnderInterrupt_.ctor$5054>:
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	4602      	mov	r2, r0
        }

        //
        // Helper Methods
        //

 800481e:	9003      	str	r0, [sp, #12]
 8004820:	9102      	str	r1, [sp, #8]
 8004822:	9201      	str	r2, [sp, #4]
 8004824:	f7ff fd22 	bl	800426c <BugCheck_AssertInterruptsOff$4655>
 8004828:	480d      	ldr	r0, [pc, #52]	; (8004860 <SwapCurrentThreadUnderInterrupt_.ctor$5054+0x48>)
 800482a:	490e      	ldr	r1, [pc, #56]	; (8004864 <SwapCurrentThreadUnderInterrupt_.ctor$5054+0x4c>)
 800482c:	4479      	add	r1, pc
 800482e:	4408      	add	r0, r1
 8004830:	f8d0 00f8 	ldr.w	r0, [r0, #248]	; 0xf8
 8004834:	9903      	ldr	r1, [sp, #12]
 8004836:	6088      	str	r0, [r1, #8]
        //

        [Inline]
        public void Dispose()
        {
            ProcessorARMv7M.DisableInterruptsWithPriorityLevelHigherOrEqualTo( m_basepri );
 8004838:	2800      	cmp	r0, #0
 800483a:	d005      	beq.n	8004848 <SwapCurrentThreadUnderInterrupt_.ctor$5054+0x30>
 800483c:	e7ff      	b.n	800483e <SwapCurrentThreadUnderInterrupt_.ctor$5054+0x26>
        }

 800483e:	9801      	ldr	r0, [sp, #4]
 8004840:	6880      	ldr	r0, [r0, #8]
 8004842:	f7ff fbe5 	bl	8004010 <Thread_ReleasedProcessor$4003>
        [Inline]
 8004846:	e7ff      	b.n	8004848 <SwapCurrentThreadUnderInterrupt_.ctor$5054+0x30>
        public void Toggle()
        {
 8004848:	9802      	ldr	r0, [sp, #8]
 800484a:	f7ff fc35 	bl	80040b8 <Thread_AcquiredProcessor$4004>
 800484e:	4804      	ldr	r0, [pc, #16]	; (8004860 <SwapCurrentThreadUnderInterrupt_.ctor$5054+0x48>)
 8004850:	4905      	ldr	r1, [pc, #20]	; (8004868 <SwapCurrentThreadUnderInterrupt_.ctor$5054+0x50>)
 8004852:	4479      	add	r1, pc
 8004854:	4408      	add	r0, r1
 8004856:	9902      	ldr	r1, [sp, #8]
 8004858:	f8c0 10f8 	str.w	r1, [r0, #248]	; 0xf8
 800485c:	b004      	add	sp, #16
 800485e:	bd80      	pop	{r7, pc}
 8004860:	fffffe3c 	.word	0xfffffe3c
 8004864:	17ffcfa4 	.word	0x17ffcfa4
 8004868:	17ffcf7e 	.word	0x17ffcf7e

0800486c <Thread_GetCurrentException$4019>:
        {
            [Inline]
            [TS.WellKnownMethod( "ThreadImpl_get_CurrentThread" )]
            get
            {
                return s_currentThread;
 800486c:	4803      	ldr	r0, [pc, #12]	; (800487c <Thread_GetCurrentException$4019+0x10>)
 800486e:	4904      	ldr	r1, [pc, #16]	; (8004880 <Thread_GetCurrentException$4019+0x14>)
 8004870:	4479      	add	r1, pc
 8004872:	4408      	add	r0, r1
 8004874:	f8d0 00f8 	ldr.w	r0, [r0, #248]	; 0xf8

        public Exception CurrentException
        {
            get
            {
                return m_currentException;
 8004878:	68c0      	ldr	r0, [r0, #12]
 800487a:	4770      	bx	lr
 800487c:	fffffe3c 	.word	0xfffffe3c
 8004880:	17ffcf60 	.word	0x17ffcf60

08004884 <Thread_set_State$4035>:
 8004884:	b082      	sub	sp, #8
 8004886:	460a      	mov	r2, r1
 8004888:	4603      	mov	r3, r0
 800488a:	6241      	str	r1, [r0, #36]	; 0x24
 800488c:	9301      	str	r3, [sp, #4]
 800488e:	9200      	str	r2, [sp, #0]
 8004890:	b002      	add	sp, #8
 8004892:	4770      	bx	lr

08004894 <Thread_set_CurrentException$4038>:
 8004894:	b082      	sub	sp, #8
 8004896:	460a      	mov	r2, r1
 8004898:	4603      	mov	r3, r0
 800489a:	60c1      	str	r1, [r0, #12]
 800489c:	9301      	str	r3, [sp, #4]
 800489e:	9200      	str	r2, [sp, #0]
 80048a0:	b002      	add	sp, #8
 80048a2:	4770      	bx	lr

080048a4 <ObjectHeader_InsertPlug$3130>:
 80048a4:	b087      	sub	sp, #28
 80048a6:	460a      	mov	r2, r1
 80048a8:	4603      	mov	r3, r0
 80048aa:	9006      	str	r0, [sp, #24]
        [TS.WellKnownMethod("DebugGC_ObjectHeader_InsertPlug")]
        public unsafe void InsertPlug( uint size )
        {
            UIntPtr address = this.ToPointer();
            uint*   dst     = (uint*)address.ToPointer();
            var bytesLeft = size;
 80048ac:	9105      	str	r1, [sp, #20]
 80048ae:	9304      	str	r3, [sp, #16]
 80048b0:	9203      	str	r2, [sp, #12]
 80048b2:	9002      	str	r0, [sp, #8]
 80048b4:	e7ff      	b.n	80048b6 <ObjectHeader_InsertPlug$3130+0x12>
 80048b6:	9802      	ldr	r0, [sp, #8]
 80048b8:	9905      	ldr	r1, [sp, #20]

            while(bytesLeft >= sizeof(uint))
 80048ba:	2904      	cmp	r1, #4
 80048bc:	9001      	str	r0, [sp, #4]
 80048be:	9100      	str	r1, [sp, #0]
 80048c0:	d309      	bcc.n	80048d6 <ObjectHeader_InsertPlug$3130+0x32>
 80048c2:	e7ff      	b.n	80048c4 <ObjectHeader_InsertPlug$3130+0x20>
 80048c4:	2002      	movs	r0, #2
 80048c6:	9901      	ldr	r1, [sp, #4]
 80048c8:	f841 0b04 	str.w	r0, [r1], #4
            {
                *dst++  = (uint)GarbageCollectorFlags.GapPlug;
                bytesLeft -= sizeof(uint);
 80048cc:	9800      	ldr	r0, [sp, #0]
 80048ce:	1f02      	subs	r2, r0, #4
            }
 80048d0:	9205      	str	r2, [sp, #20]
 80048d2:	9102      	str	r1, [sp, #8]
 80048d4:	e7ef      	b.n	80048b6 <ObjectHeader_InsertPlug$3130+0x12>
 80048d6:	b007      	add	sp, #28
 80048d8:	4770      	bx	lr
 80048da:	46c0      	nop			; (mov r8, r8)

080048dc <ObjectHeader_UpdateExtension$3131>:
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	4603      	mov	r3, r0
                fixed(int* ptr = &this.MultiUseWord)
#pragma warning restore 420
                {
                    byte* flags = (byte*)ptr;

                    return (GarbageCollectorFlags)(uint)*flags;
 80048e2:	7800      	ldrb	r0, [r0, #0]
        public GarbageCollectorFlags GarbageCollectorStateWithoutMutableBits
        {
            [Inline]
            get
            {
                return (this.GarbageCollectorState & ~GarbageCollectorFlags.MutableMask);
 80048e4:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
 80048e8:	f04f 0c00 	mov.w	ip, #0
 80048ec:	2804      	cmp	r0, #4
 80048ee:	bf08      	it	eq
 80048f0:	f04f 0c01 	moveq.w	ip, #1

        [TS.WellKnownField( "ObjectHeader_MultiUseWord" )] public volatile int       MultiUseWord;
        [TS.WellKnownField( "ObjectHeader_VirtualTable" )] public          TS.VTable VirtualTable;

        //
        // Don't allow object creation, this is not a real class, it's more of a struct.
 80048f4:	f1bc 0f00 	cmp.w	ip, #0
 80048f8:	9303      	str	r3, [sp, #12]
 80048fa:	9202      	str	r2, [sp, #8]
 80048fc:	9101      	str	r1, [sp, #4]
 80048fe:	d007      	beq.n	8004910 <ObjectHeader_UpdateExtension$3131+0x34>
 8004900:	e7ff      	b.n	8004902 <ObjectHeader_UpdateExtension$3131+0x26>
 8004902:	4810      	ldr	r0, [pc, #64]	; (8004944 <ObjectHeader_UpdateExtension$3131+0x68>)
 8004904:	4910      	ldr	r1, [pc, #64]	; (8004948 <ObjectHeader_UpdateExtension$3131+0x6c>)
 8004906:	4479      	add	r1, pc
 8004908:	5840      	ldr	r0, [r0, r1]
        //

 800490a:	f7fb fcfb 	bl	8000304 <BugCheck_Raise$4648>
        private ObjectHeader()
 800490e:	e7ff      	b.n	8004910 <ObjectHeader_UpdateExtension$3131+0x34>
        //--//

        public void UpdateExtension( ExtensionKinds kind    ,
                                     int            payload )
        {
            BugCheck.Assert( this.IsImmutable == false, BugCheck.StopCode.SyncBlockCorruption );
 8004910:	e7ff      	b.n	8004912 <ObjectHeader_UpdateExtension$3131+0x36>
 8004912:	9803      	ldr	r0, [sp, #12]
 8004914:	6801      	ldr	r1, [r0, #0]

            while(true)
            {
                var  oldValue = this.MultiUseWord;
                uint newValue = ((uint)kind << ExtensionKindShift) | ((uint)payload << ExtensionPayloadShift) | ((uint)oldValue & GarbageCollectorMask);
 8004916:	9a01      	ldr	r2, [sp, #4]
 8004918:	0213      	lsls	r3, r2, #8
 800491a:	f8dd c008 	ldr.w	ip, [sp, #8]
 800491e:	ea43 238c 	orr.w	r3, r3, ip, lsl #10
 8004922:	fa5f fe81 	uxtb.w	lr, r1
 8004926:	ea43 030e 	orr.w	r3, r3, lr

                // CS0420: a reference to a volatile field will not be treated as volatile
#pragma warning disable 420
                var oldValue2 = System.Threading.Interlocked.CompareExchange( ref this.MultiUseWord, (int)newValue, oldValue );
 800492a:	9100      	str	r1, [sp, #0]
 800492c:	4619      	mov	r1, r3
 800492e:	9a00      	ldr	r2, [sp, #0]
 8004930:	f000 f80c 	bl	800494c <Interlocked_CompareExchange$3959>
#pragma warning restore 420

                if(oldValue2 == oldValue)
 8004934:	9900      	ldr	r1, [sp, #0]
 8004936:	4288      	cmp	r0, r1
 8004938:	d102      	bne.n	8004940 <ObjectHeader_UpdateExtension$3131+0x64>
 800493a:	e7ff      	b.n	800493c <ObjectHeader_UpdateExtension$3131+0x60>
 800493c:	b004      	add	sp, #16
 800493e:	bd80      	pop	{r7, pc}
                {
                    break;
                }
            }
 8004940:	e7e7      	b.n	8004912 <ObjectHeader_UpdateExtension$3131+0x36>
 8004942:	46c0      	nop			; (mov r8, r8)
 8004944:	e8025208 	.word	0xe8025208
 8004948:	17ffceca 	.word	0x17ffceca

0800494c <Interlocked_CompareExchange$3959>:
 800494c:	b510      	push	{r4, lr}
 800494e:	b08a      	sub	sp, #40	; 0x28
 8004950:	4613      	mov	r3, r2
 8004952:	468c      	mov	ip, r1
 8004954:	4686      	mov	lr, r0
 8004956:	2400      	movs	r4, #0
 8004958:	9408      	str	r4, [sp, #32]
 800495a:	9409      	str	r4, [sp, #36]	; 0x24
                        }
                    }
                }

                using(Synchronization.WaitingRecord.Holder holder = Synchronization.WaitingRecord.Holder.Get( thisThread, this, timeout ))
                {
 800495c:	9207      	str	r2, [sp, #28]
 800495e:	f8cd e018 	str.w	lr, [sp, #24]
 8004962:	9005      	str	r0, [sp, #20]
 8004964:	9304      	str	r3, [sp, #16]
 8004966:	f8cd c00c 	str.w	ip, [sp, #12]
 800496a:	9102      	str	r1, [sp, #8]
 800496c:	9401      	str	r4, [sp, #4]
 800496e:	f7ff fe4d 	bl	800460c <ProcessorARMv7M_DisableInterrupts$3259>
 8004972:	9901      	ldr	r1, [sp, #4]
 8004974:	9109      	str	r1, [sp, #36]	; 0x24
 8004976:	9009      	str	r0, [sp, #36]	; 0x24
 8004978:	9008      	str	r0, [sp, #32]
 800497a:	9805      	ldr	r0, [sp, #20]
 800497c:	6802      	ldr	r2, [r0, #0]
            //--//

            m_handle = new EventWaitableObject( this );
        }

        //
 800497e:	9b07      	ldr	r3, [sp, #28]
 8004980:	429a      	cmp	r2, r3
 8004982:	9200      	str	r2, [sp, #0]
 8004984:	d104      	bne.n	8004990 <Interlocked_CompareExchange$3959+0x44>
 8004986:	e7ff      	b.n	8004988 <Interlocked_CompareExchange$3959+0x3c>
 8004988:	9802      	ldr	r0, [sp, #8]
 800498a:	9906      	ldr	r1, [sp, #24]
 800498c:	6008      	str	r0, [r1, #0]
        // Helper Methods
        //

 800498e:	e7ff      	b.n	8004990 <Interlocked_CompareExchange$3959+0x44>
            // Helper Methods
            //

            public override bool Acquire( SchedulerTime timeout )
            {
                ThreadImpl thisThread = ThreadImpl.CurrentThread;
 8004990:	9808      	ldr	r0, [sp, #32]
 8004992:	f7ff fe5d 	bl	8004650 <ProcessorARMv7M_DisableInterruptsWithPriorityLevelHigherOrEqualTo$3266>
 8004996:	9800      	ldr	r0, [sp, #0]
 8004998:	b00a      	add	sp, #40	; 0x28
 800499a:	bd10      	pop	{r4, pc}

0800499c <ThreadManager_get_DefaultStackSize$3154>:
 800499c:	f44f 7000 	mov.w	r0, #512	; 0x200
 80049a0:	4770      	bx	lr
 80049a2:	46c0      	nop			; (mov r8, r8)

080049a4 <ThreadManager_InitializeBeforeStaticConstructors$3155>:
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b088      	sub	sp, #32
 80049a8:	4601      	mov	r1, r0
        public virtual void InitializeBeforeStaticConstructors()
        {
            //
            // Create the first active thread.
            //
            m_mainThread = new ThreadImpl( MainThread, new uint[ ThreadManager.Instance.DefaultStackSize ] );
 80049aa:	4a1a      	ldr	r2, [pc, #104]	; (8004a14 <ThreadManager_InitializeBeforeStaticConstructors$3155+0x70>)
 80049ac:	4b1a      	ldr	r3, [pc, #104]	; (8004a18 <ThreadManager_InitializeBeforeStaticConstructors$3155+0x74>)
 80049ae:	447b      	add	r3, pc
 80049b0:	441a      	add	r2, r3
 80049b2:	f8df c068 	ldr.w	ip, [pc, #104]	; 8004a1c <ThreadManager_InitializeBeforeStaticConstructors$3155+0x78>
 80049b6:	449c      	add	ip, r3
 80049b8:	9007      	str	r0, [sp, #28]
 80049ba:	4610      	mov	r0, r2
 80049bc:	9106      	str	r1, [sp, #24]
 80049be:	4661      	mov	r1, ip
 80049c0:	9205      	str	r2, [sp, #20]
 80049c2:	9304      	str	r3, [sp, #16]
 80049c4:	f7fb fefc 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 80049c8:	4915      	ldr	r1, [pc, #84]	; (8004a20 <ThreadManager_InitializeBeforeStaticConstructors$3155+0x7c>)
 80049ca:	9a04      	ldr	r2, [sp, #16]
 80049cc:	440a      	add	r2, r1
 80049ce:	9003      	str	r0, [sp, #12]
 80049d0:	9907      	ldr	r1, [sp, #28]
 80049d2:	f7fd f873 	bl	8001abc <MulticastDelegate_.ctor$4629>
 80049d6:	4813      	ldr	r0, [pc, #76]	; (8004a24 <ThreadManager_InitializeBeforeStaticConstructors$3155+0x80>)
 80049d8:	9904      	ldr	r1, [sp, #16]
 80049da:	5842      	ldr	r2, [r0, r1]
 80049dc:	4812      	ldr	r0, [pc, #72]	; (8004a28 <ThreadManager_InitializeBeforeStaticConstructors$3155+0x84>)
 80049de:	4401      	add	r1, r0
 80049e0:	9805      	ldr	r0, [sp, #20]
 80049e2:	f7fd fbdd 	bl	80021a0 <DefaultTypeSystemManager_AllocateArray$4962>
 80049e6:	4911      	ldr	r1, [pc, #68]	; (8004a2c <ThreadManager_InitializeBeforeStaticConstructors$3155+0x88>)
 80049e8:	9a04      	ldr	r2, [sp, #16]
 80049ea:	4411      	add	r1, r2
 80049ec:	9b05      	ldr	r3, [sp, #20]
 80049ee:	9002      	str	r0, [sp, #8]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7fb fee5 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 80049f6:	9001      	str	r0, [sp, #4]
 80049f8:	9903      	ldr	r1, [sp, #12]
 80049fa:	9a02      	ldr	r2, [sp, #8]
 80049fc:	f7fe fe3c 	bl	8003678 <Thread_.ctor$3992>
 8004a00:	9801      	ldr	r0, [sp, #4]
 8004a02:	9907      	ldr	r1, [sp, #28]
 8004a04:	6148      	str	r0, [r1, #20]
 8004a06:	4a0a      	ldr	r2, [pc, #40]	; (8004a30 <ThreadManager_InitializeBeforeStaticConstructors$3155+0x8c>)
 8004a08:	9b04      	ldr	r3, [sp, #16]
 8004a0a:	441a      	add	r2, r3
 8004a0c:	f8c2 00f8 	str.w	r0, [r2, #248]	; 0xf8
 8004a10:	b008      	add	sp, #32
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	ffffea38 	.word	0xffffea38
 8004a18:	17ffce22 	.word	0x17ffce22
 8004a1c:	e801102c 	.word	0xe801102c
 8004a20:	e8003261 	.word	0xe8003261
 8004a24:	e802520c 	.word	0xe802520c
 8004a28:	e801028c 	.word	0xe801028c
 8004a2c:	e80110bc 	.word	0xe80110bc
 8004a30:	fffffe3c 	.word	0xfffffe3c

08004a34 <ThreadManager_MainThread$3189>:
                Peripherals.Instance.WaitForInterrupt();
            }
        }

        private void MainThread()
        {
 8004a34:	b580      	push	{r7, lr}
 8004a36:	e7ff      	b.n	8004a38 <ThreadManager_MainThread$3189+0x4>
                {
                    //BugCheck.Log( "[MainThreads] !!! EXECUTING APP !!!" );
                    //BugCheck.Log( "[MainThreads] !!! EXECUTING APP !!!" );
                    //BugCheck.Log( "[MainThreads] !!! EXECUTING APP !!!" );

                    Configuration.ExecuteApplication();
 8004a38:	f000 fd0e 	bl	8005458 <Program_Main$131>
 8004a3c:	4803      	ldr	r0, [pc, #12]	; (8004a4c <ThreadManager_MainThread$3189+0x18>)
 8004a3e:	4904      	ldr	r1, [pc, #16]	; (8004a50 <ThreadManager_MainThread$3189+0x1c>)
 8004a40:	4479      	add	r1, pc
 8004a42:	5840      	ldr	r0, [r0, r1]
                }
                catch
                {
                }

                BugCheck.Raise( BugCheck.StopCode.NoCurrentThread ); 
 8004a44:	f7fb fc5e 	bl	8000304 <BugCheck_Raise$4648>
            }
 8004a48:	e7f6      	b.n	8004a38 <ThreadManager_MainThread$3189+0x4>
 8004a4a:	46c0      	nop			; (mov r8, r8)
 8004a4c:	e8025228 	.word	0xe8025228
 8004a50:	17ffcd90 	.word	0x17ffcd90

08004a54 <ThreadManager_InitializeAfterStaticConstructors$3156>:
 8004a54:	b510      	push	{r4, lr}
 8004a56:	b08e      	sub	sp, #56	; 0x38
 8004a58:	460a      	mov	r2, r1
 8004a5a:	4603      	mov	r3, r0
            ThreadImpl.CurrentThread = m_mainThread;
        }

        public virtual void InitializeAfterStaticConstructors( uint[] systemStack )
        {
            m_allThreads          = new KernelList< ThreadImpl >();
 8004a5c:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 8004b1c <ThreadManager_InitializeAfterStaticConstructors$3156+0xc8>
 8004a60:	f8df e0bc 	ldr.w	lr, [pc, #188]	; 8004b20 <ThreadManager_InitializeAfterStaticConstructors$3156+0xcc>
 8004a64:	44fe      	add	lr, pc
 8004a66:	44f4      	add	ip, lr
 8004a68:	4c2e      	ldr	r4, [pc, #184]	; (8004b24 <ThreadManager_InitializeAfterStaticConstructors$3156+0xd0>)
 8004a6a:	4474      	add	r4, lr
 8004a6c:	900d      	str	r0, [sp, #52]	; 0x34
 8004a6e:	4660      	mov	r0, ip
 8004a70:	910c      	str	r1, [sp, #48]	; 0x30
 8004a72:	4621      	mov	r1, r4
 8004a74:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 8004a78:	940a      	str	r4, [sp, #40]	; 0x28
 8004a7a:	9209      	str	r2, [sp, #36]	; 0x24
 8004a7c:	9308      	str	r3, [sp, #32]
 8004a7e:	f8cd e01c 	str.w	lr, [sp, #28]
 8004a82:	f7fb fe9d 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8004a86:	9006      	str	r0, [sp, #24]
 8004a88:	f000 f858 	bl	8004b3c <KernelList`1_.ctor$17235>
 8004a8c:	9806      	ldr	r0, [sp, #24]
 8004a8e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004a90:	6088      	str	r0, [r1, #8]
            m_readyThreads        = new KernelList< ThreadImpl >();
 8004a92:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004a94:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004a96:	f7fb fe93 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8004a9a:	9005      	str	r0, [sp, #20]
 8004a9c:	f000 f84e 	bl	8004b3c <KernelList`1_.ctor$17235>
 8004aa0:	9805      	ldr	r0, [sp, #20]
 8004aa2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004aa4:	60c8      	str	r0, [r1, #12]
            m_waitingThreads      = new KernelList< ThreadImpl >();
 8004aa6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004aa8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004aaa:	f7fb fe89 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8004aae:	9004      	str	r0, [sp, #16]
 8004ab0:	f000 f844 	bl	8004b3c <KernelList`1_.ctor$17235>
 8004ab4:	9804      	ldr	r0, [sp, #16]
 8004ab6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004ab8:	6108      	str	r0, [r1, #16]

            m_idleThread          = new ThreadImpl( IdleThread, systemStack );
 8004aba:	4a1b      	ldr	r2, [pc, #108]	; (8004b28 <ThreadManager_InitializeAfterStaticConstructors$3156+0xd4>)
 8004abc:	9b07      	ldr	r3, [sp, #28]
 8004abe:	18d1      	adds	r1, r2, r3
 8004ac0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004ac2:	f7fb fe7d 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8004ac6:	4919      	ldr	r1, [pc, #100]	; (8004b2c <ThreadManager_InitializeAfterStaticConstructors$3156+0xd8>)
 8004ac8:	9a07      	ldr	r2, [sp, #28]
 8004aca:	440a      	add	r2, r1
 8004acc:	9003      	str	r0, [sp, #12]
 8004ace:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004ad0:	f7fc fff4 	bl	8001abc <MulticastDelegate_.ctor$4629>
 8004ad4:	4816      	ldr	r0, [pc, #88]	; (8004b30 <ThreadManager_InitializeAfterStaticConstructors$3156+0xdc>)
 8004ad6:	9907      	ldr	r1, [sp, #28]
 8004ad8:	4401      	add	r1, r0
 8004ada:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004adc:	f7fb fe70 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8004ae0:	9002      	str	r0, [sp, #8]
 8004ae2:	9903      	ldr	r1, [sp, #12]
 8004ae4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004ae6:	f7fe fdc7 	bl	8003678 <Thread_.ctor$3992>
 8004aea:	9802      	ldr	r0, [sp, #8]
 8004aec:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004aee:	6188      	str	r0, [r1, #24]
            m_neverSignaledEvent  = new EventWaitHandleImpl( false, System.Threading.EventResetMode.ManualReset );
 8004af0:	4a10      	ldr	r2, [pc, #64]	; (8004b34 <ThreadManager_InitializeAfterStaticConstructors$3156+0xe0>)
 8004af2:	9b07      	ldr	r3, [sp, #28]
 8004af4:	18d1      	adds	r1, r2, r3
 8004af6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004af8:	f7fb fe62 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8004afc:	490e      	ldr	r1, [pc, #56]	; (8004b38 <ThreadManager_InitializeAfterStaticConstructors$3156+0xe4>)
 8004afe:	9a07      	ldr	r2, [sp, #28]
 8004b00:	588a      	ldr	r2, [r1, r2]
 8004b02:	2100      	movs	r1, #0
 8004b04:	9001      	str	r0, [sp, #4]
 8004b06:	f000 f8a5 	bl	8004c54 <EventWaitHandle_.ctor$3943>
 8004b0a:	9801      	ldr	r0, [sp, #4]
 8004b0c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004b0e:	61c8      	str	r0, [r1, #28]

            //
            // These threads are never started, so we have to manually register them, to enable the debugger to see them.
            //
            RegisterThread( m_idleThread );
 8004b10:	6989      	ldr	r1, [r1, #24]
 8004b12:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004b14:	f000 f8c4 	bl	8004ca0 <ThreadManager_RegisterThread$3161>
 8004b18:	b00e      	add	sp, #56	; 0x38
 8004b1a:	bd10      	pop	{r4, pc}
 8004b1c:	ffffea38 	.word	0xffffea38
 8004b20:	17ffcd6c 	.word	0x17ffcd6c
 8004b24:	e801114c 	.word	0xe801114c
 8004b28:	e801102c 	.word	0xe801102c
 8004b2c:	e80033d5 	.word	0xe80033d5
 8004b30:	e80110bc 	.word	0xe80110bc
 8004b34:	e80111dc 	.word	0xe80111dc
 8004b38:	e8025210 	.word	0xe8025210

08004b3c <KernelList`1_.ctor$17235>:
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b088      	sub	sp, #32
 8004b40:	4601      	mov	r1, r0
                // BUGBUG: return to thread usign VFP state as well 
                //
                base.SwitchTo( ); 
            }
        }

 8004b42:	4a16      	ldr	r2, [pc, #88]	; (8004b9c <KernelList`1_.ctor$17235+0x60>)
 8004b44:	4b16      	ldr	r3, [pc, #88]	; (8004ba0 <KernelList`1_.ctor$17235+0x64>)
 8004b46:	447b      	add	r3, pc
 8004b48:	441a      	add	r2, r3
 8004b4a:	f8df c058 	ldr.w	ip, [pc, #88]	; 8004ba4 <KernelList`1_.ctor$17235+0x68>
 8004b4e:	4463      	add	r3, ip
 8004b50:	9007      	str	r0, [sp, #28]
 8004b52:	4610      	mov	r0, r2
 8004b54:	9106      	str	r1, [sp, #24]
 8004b56:	4619      	mov	r1, r3
 8004b58:	9305      	str	r3, [sp, #20]
 8004b5a:	9204      	str	r2, [sp, #16]
 8004b5c:	f7fb fe30 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8004b60:	2100      	movs	r1, #0
 8004b62:	9003      	str	r0, [sp, #12]
 8004b64:	9102      	str	r1, [sp, #8]
 8004b66:	f7ff f980 	bl	8003e6a <KernelNode`1_.ctor$17265>
 8004b6a:	9803      	ldr	r0, [sp, #12]
 8004b6c:	9907      	ldr	r1, [sp, #28]
 8004b6e:	6088      	str	r0, [r1, #8]
        //
 8004b70:	9804      	ldr	r0, [sp, #16]
 8004b72:	9905      	ldr	r1, [sp, #20]
 8004b74:	f7fb fe24 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8004b78:	9001      	str	r0, [sp, #4]
 8004b7a:	9902      	ldr	r1, [sp, #8]
 8004b7c:	f7ff f975 	bl	8003e6a <KernelNode`1_.ctor$17265>
 8004b80:	9801      	ldr	r0, [sp, #4]
 8004b82:	9907      	ldr	r1, [sp, #28]
 8004b84:	60c8      	str	r0, [r1, #12]
        // Helper methods
        //
 8004b86:	6888      	ldr	r0, [r1, #8]
 8004b88:	9901      	ldr	r1, [sp, #4]
 8004b8a:	f00c fd3b 	bl	8011604 <KernelNode`1_set_Next$17277>

 8004b8e:	9807      	ldr	r0, [sp, #28]
 8004b90:	6881      	ldr	r1, [r0, #8]
 8004b92:	68c0      	ldr	r0, [r0, #12]
 8004b94:	f00c fd3e 	bl	8011614 <KernelNode`1_set_Previous$17279>
 8004b98:	b008      	add	sp, #32
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	ffffea38 	.word	0xffffea38
 8004ba0:	17ffcc8a 	.word	0x17ffcc8a
 8004ba4:	e8010e7c 	.word	0xe8010e7c

08004ba8 <ThreadManager_IdleThread$3188>:

            thread.State &= ~System.Threading.ThreadState.WaitSleepJoin;
        }

        private void IdleThread()
        {
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	4808      	ldr	r0, [pc, #32]	; (8004bd0 <ThreadManager_IdleThread$3188+0x28>)
 8004bae:	4909      	ldr	r1, [pc, #36]	; (8004bd4 <ThreadManager_IdleThread$3188+0x2c>)
 8004bb0:	4479      	add	r1, pc
 8004bb2:	5840      	ldr	r0, [r0, r1]
            //BugCheck.Log( "!!!!!!!!!!!!!!!!!!!!!!!!!!!" );
            //BugCheck.Log( "!!! Idle thread running !!!" );
            //BugCheck.Log( "!!!!!!!!!!!!!!!!!!!!!!!!!!!" );

            ProcessorARMv7M.InitiateContextSwitch( );
 8004bb4:	f000 fac4 	bl	8005140 <ProcessorARMv7M_RaiseSystemHandler$3240>
 8004bb8:	2000      	movs	r0, #0
 8004bba:	9001      	str	r0, [sp, #4]
            }

            public override ThreadImpl FastInterruptThread
            {
                get
                {
 8004bbc:	9000      	str	r0, [sp, #0]
 8004bbe:	f000 fc37 	bl	8005430 <ProcessorARMv7M_EnableInterrupts$3258>
 8004bc2:	9900      	ldr	r1, [sp, #0]
 8004bc4:	9101      	str	r1, [sp, #4]
 8004bc6:	9001      	str	r0, [sp, #4]
                    return null;
                }
            }

            public override ThreadImpl FastInterruptThread
            {
 8004bc8:	e7ff      	b.n	8004bca <ThreadManager_IdleThread$3188+0x22>
                get
                {
                    return null;
                }
 8004bca:	f018 f9a3 	bl	801cf14 <CMSIS_STUB_POWER_WaitForEvent>
            }
 8004bce:	e7fc      	b.n	8004bca <ThreadManager_IdleThread$3188+0x22>
 8004bd0:	e8025224 	.word	0xe8025224
 8004bd4:	17ffcc20 	.word	0x17ffcc20

08004bd8 <WaitHandle_WaitOne$3933>:
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	460a      	mov	r2, r1
 8004bde:	4603      	mov	r3, r0
                                                 uint      length )
            {
                return null;
            }

            [NoInline]
 8004be0:	9003      	str	r0, [sp, #12]
 8004be2:	4608      	mov	r0, r1
 8004be4:	9302      	str	r3, [sp, #8]
 8004be6:	9201      	str	r2, [sp, #4]
 8004be8:	f7fe fe88 	bl	80038fc <SchedulerTime_op_Explicit$4823>
 8004bec:	9a03      	ldr	r2, [sp, #12]
 8004bee:	6893      	ldr	r3, [r2, #8]
 8004bf0:	9000      	str	r0, [sp, #0]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	9a00      	ldr	r2, [sp, #0]
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	f000 fbda 	bl	80053b0 <WaitHandle_WaitOne$3940>
 8004bfc:	b004      	add	sp, #16
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <WaitHandle_WaitOne$7790>:
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b086      	sub	sp, #24
 8004c04:	4601      	mov	r1, r0
}

 8004c06:	f100 0208 	add.w	r2, r0, #8
 8004c0a:	9204      	str	r2, [sp, #16]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	9205      	str	r2, [sp, #20]
 8004c10:	9b04      	ldr	r3, [sp, #16]
 8004c12:	3b08      	subs	r3, #8
 8004c14:	9205      	str	r2, [sp, #20]
 8004c16:	f10d 0c14 	add.w	ip, sp, #20
 8004c1a:	f1ac 0c08 	sub.w	ip, ip, #8
 8004c1e:	9003      	str	r0, [sp, #12]
 8004c20:	4660      	mov	r0, ip
 8004c22:	9102      	str	r1, [sp, #8]
 8004c24:	4619      	mov	r1, r3
 8004c26:	9201      	str	r2, [sp, #4]
 8004c28:	f7fb fe48 	bl	80008bc <UIntPtr_.ctor$2864>
}

 8004c2c:	9805      	ldr	r0, [sp, #20]
 8004c2e:	6840      	ldr	r0, [r0, #4]
 8004c30:	69c0      	ldr	r0, [r0, #28]
 8004c32:	6980      	ldr	r0, [r0, #24]
 8004c34:	4905      	ldr	r1, [pc, #20]	; (8004c4c <WaitHandle_WaitOne$7790+0x4c>)
 8004c36:	4a06      	ldr	r2, [pc, #24]	; (8004c50 <WaitHandle_WaitOne$7790+0x50>)
 8004c38:	447a      	add	r2, pc
 8004c3a:	5889      	ldr	r1, [r1, r2]
 8004c3c:	9a03      	ldr	r2, [sp, #12]
 8004c3e:	9000      	str	r0, [sp, #0]
 8004c40:	4610      	mov	r0, r2
 8004c42:	9a01      	ldr	r2, [sp, #4]
 8004c44:	9b00      	ldr	r3, [sp, #0]
 8004c46:	4798      	blx	r3
 8004c48:	b006      	add	sp, #24
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	e8025420 	.word	0xe8025420
 8004c50:	17ffcb98 	.word	0x17ffcb98

08004c54 <EventWaitHandle_.ctor$3943>:
 8004c54:	b510      	push	{r4, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	4613      	mov	r3, r2
 8004c5a:	468c      	mov	ip, r1
 8004c5c:	4686      	mov	lr, r0
 8004c5e:	7301      	strb	r1, [r0, #12]
 8004c60:	6102      	str	r2, [r0, #16]
 8004c62:	490c      	ldr	r1, [pc, #48]	; (8004c94 <EventWaitHandle_.ctor$3943+0x40>)
 8004c64:	4a0c      	ldr	r2, [pc, #48]	; (8004c98 <EventWaitHandle_.ctor$3943+0x44>)
 8004c66:	447a      	add	r2, pc
 8004c68:	4411      	add	r1, r2
 8004c6a:	4c0c      	ldr	r4, [pc, #48]	; (8004c9c <EventWaitHandle_.ctor$3943+0x48>)
 8004c6c:	4422      	add	r2, r4
 8004c6e:	9005      	str	r0, [sp, #20]
 8004c70:	4608      	mov	r0, r1
 8004c72:	4611      	mov	r1, r2
 8004c74:	f8cd c010 	str.w	ip, [sp, #16]
 8004c78:	f8cd e00c 	str.w	lr, [sp, #12]
 8004c7c:	9302      	str	r3, [sp, #8]
 8004c7e:	f7fb fd9f 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8004c82:	9001      	str	r0, [sp, #4]
 8004c84:	9905      	ldr	r1, [sp, #20]
 8004c86:	f005 fb68 	bl	800a35a <EventWaitableObject_.ctor$5359>
 8004c8a:	9801      	ldr	r0, [sp, #4]
 8004c8c:	9905      	ldr	r1, [sp, #20]
 8004c8e:	6088      	str	r0, [r1, #8]
 8004c90:	b006      	add	sp, #24
 8004c92:	bd10      	pop	{r4, pc}
 8004c94:	ffffea38 	.word	0xffffea38
 8004c98:	17ffcb6a 	.word	0x17ffcb6a
 8004c9c:	e80131cc 	.word	0xe80131cc

08004ca0 <ThreadManager_RegisterThread$3161>:
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	460a      	mov	r2, r1
 8004ca6:	4603      	mov	r3, r0
        // Helper Methods
        //

        protected void RegisterThread( ThreadImpl thread )
        {
            BugCheck.AssertInterruptsOff();
 8004ca8:	9103      	str	r1, [sp, #12]
 8004caa:	9002      	str	r0, [sp, #8]
 8004cac:	9201      	str	r2, [sp, #4]
 8004cae:	9300      	str	r3, [sp, #0]
 8004cb0:	f7ff fadc 	bl	800426c <BugCheck_AssertInterruptsOff$4655>

            m_allThreads.InsertAtTail( thread.RegistrationLink );
 8004cb4:	9802      	ldr	r0, [sp, #8]
 8004cb6:	6880      	ldr	r0, [r0, #8]
        {
            get
            {
                return m_nextThread;
            }
        }
 8004cb8:	9903      	ldr	r1, [sp, #12]
 8004cba:	6a89      	ldr	r1, [r1, #40]	; 0x28

        protected void RegisterThread( ThreadImpl thread )
        {
            BugCheck.AssertInterruptsOff();

            m_allThreads.InsertAtTail( thread.RegistrationLink );
 8004cbc:	f000 f818 	bl	8004cf0 <KernelList`1_InsertAtTail$17236>
 8004cc0:	b004      	add	sp, #16
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <ThreadManager_Activate$3159>:
 8004cc4:	4770      	bx	lr

08004cc6 <ThreadManager_StartThreads$3160>:
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b084      	sub	sp, #16
 8004cca:	4601      	mov	r1, r0
        public virtual void StartThreads()
        {
            //
            // 'm_runningThread' should never be null once the interrupts have been enabled, so we have to set it here.
            //
            ThreadImpl bootstrapThread = m_idleThread;
 8004ccc:	6982      	ldr	r2, [r0, #24]
 8004cce:	6242      	str	r2, [r0, #36]	; 0x24

            m_runningThread = bootstrapThread;
            bootstrapThread.AcquiredProcessor();
 8004cd0:	9003      	str	r0, [sp, #12]
 8004cd2:	4610      	mov	r0, r2
 8004cd4:	9202      	str	r2, [sp, #8]
 8004cd6:	9101      	str	r1, [sp, #4]
 8004cd8:	f7ff f9ee 	bl	80040b8 <Thread_AcquiredProcessor$4004>

            //
            // Start the first active thread.
            //
            m_mainThread.Start();
 8004cdc:	9803      	ldr	r0, [sp, #12]
 8004cde:	6940      	ldr	r0, [r0, #20]
 8004ce0:	f7fe fd70 	bl	80037c4 <Thread_Start$3993>
                ThreadImpl oldValue = m_runningThread;

                if(oldValue != value)
                {
                    oldValue.ReleasedProcessor();

 8004ce4:	9802      	ldr	r0, [sp, #8]
 8004ce6:	69c0      	ldr	r0, [r0, #28]

            //
            // Long jump to the idle thread context, which will reenable interrupts and 
            // cause the first context switch to the process stack of this thread
            //
            bootstrapThread.SwappedOutContext.SwitchTo();
 8004ce8:	f7ff f8a0 	bl	8003e2c <Context_SwitchTo$16958>
 8004cec:	b004      	add	sp, #16
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <KernelList`1_InsertAtTail$17236>:
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	460a      	mov	r2, r1
 8004cf6:	4603      	mov	r3, r0
        // Helper Methods
        //

        public void InsertAtTail( KernelNode< T > node )
        {
            node.InsertBefore( m_tail );
 8004cf8:	68c0      	ldr	r0, [r0, #12]
 8004cfa:	9003      	str	r0, [sp, #12]
 8004cfc:	4608      	mov	r0, r1
 8004cfe:	9903      	ldr	r1, [sp, #12]
 8004d00:	9202      	str	r2, [sp, #8]
 8004d02:	9301      	str	r3, [sp, #4]
 8004d04:	f000 fb7d 	bl	8005402 <KernelNode`1_InsertBefore$17266>
 8004d08:	b004      	add	sp, #16
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <KernelNode`1_VerifyUnlinked$17272>:
 8004d0c:	b082      	sub	sp, #8
 8004d0e:	4601      	mov	r1, r0
            next.m_previous = this;
        }

        public bool VerifyUnlinked()
        {
            return m_next == null && m_previous == null;
 8004d10:	6880      	ldr	r0, [r0, #8]
 8004d12:	2800      	cmp	r0, #0
 8004d14:	9101      	str	r1, [sp, #4]
 8004d16:	d003      	beq.n	8004d20 <KernelNode`1_VerifyUnlinked$17272+0x14>
 8004d18:	e7ff      	b.n	8004d1a <KernelNode`1_VerifyUnlinked$17272+0xe>
 8004d1a:	2000      	movs	r0, #0
 8004d1c:	9000      	str	r0, [sp, #0]
 8004d1e:	e007      	b.n	8004d30 <KernelNode`1_VerifyUnlinked$17272+0x24>
 8004d20:	9801      	ldr	r0, [sp, #4]
 8004d22:	68c1      	ldr	r1, [r0, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	2900      	cmp	r1, #0
 8004d28:	bf08      	it	eq
 8004d2a:	2201      	moveq	r2, #1
 8004d2c:	9200      	str	r2, [sp, #0]
 8004d2e:	e7ff      	b.n	8004d30 <KernelNode`1_VerifyUnlinked$17272+0x24>
 8004d30:	9800      	ldr	r0, [sp, #0]
 8004d32:	b002      	add	sp, #8
 8004d34:	4770      	bx	lr

08004d36 <ThreadManager_InsertInPriorityOrder$3187>:
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b08a      	sub	sp, #40	; 0x28
 8004d3a:	460a      	mov	r2, r1
 8004d3c:	4603      	mov	r3, r0
        protected void InsertInPriorityOrder( ThreadImpl thread )
        {
            //
            // Idle thread must never enter the set of the ready threads
            //
            if(thread == m_idleThread)
 8004d3e:	6980      	ldr	r0, [r0, #24]
 8004d40:	4281      	cmp	r1, r0
 8004d42:	9209      	str	r2, [sp, #36]	; 0x24
 8004d44:	9308      	str	r3, [sp, #32]
 8004d46:	d101      	bne.n	8004d4c <ThreadManager_InsertInPriorityOrder$3187+0x16>
 8004d48:	e7ff      	b.n	8004d4a <ThreadManager_InsertInPriorityOrder$3187+0x14>
            {
                return;
 8004d4a:	e02d      	b.n	8004da8 <ThreadManager_InsertInPriorityOrder$3187+0x72>
            }

            //
            // Insert in order.
            //
            var node = m_readyThreads.StartOfForwardWalk;
 8004d4c:	9808      	ldr	r0, [sp, #32]
 8004d4e:	68c0      	ldr	r0, [r0, #12]
 8004d50:	f000 fae8 	bl	8005324 <KernelList`1_get_StartOfForwardWalk$17242>
 8004d54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d56:	690a      	ldr	r2, [r1, #16]
            var pri  = thread.Priority;
 8004d58:	9207      	str	r2, [sp, #28]
 8004d5a:	9006      	str	r0, [sp, #24]
 8004d5c:	e7ff      	b.n	8004d5e <ThreadManager_InsertInPriorityOrder$3187+0x28>

            while(node.IsValidForForwardMove)
 8004d5e:	9806      	ldr	r0, [sp, #24]
 8004d60:	9906      	ldr	r1, [sp, #24]
 8004d62:	9105      	str	r1, [sp, #20]
 8004d64:	f000 fae5 	bl	8005332 <KernelNode`1_get_IsValidForForwardMove$17274>
 8004d68:	f010 0fff 	tst.w	r0, #255	; 0xff
 8004d6c:	9805      	ldr	r0, [sp, #20]
 8004d6e:	9004      	str	r0, [sp, #16]
 8004d70:	d008      	beq.n	8004d84 <ThreadManager_InsertInPriorityOrder$3187+0x4e>
 8004d72:	e7ff      	b.n	8004d74 <ThreadManager_InsertInPriorityOrder$3187+0x3e>
            ThreadImpl bootstrapThread = m_idleThread;

            m_runningThread = bootstrapThread;
            bootstrapThread.AcquiredProcessor();

            //
 8004d74:	9805      	ldr	r0, [sp, #20]
 8004d76:	6901      	ldr	r1, [r0, #16]
 8004d78:	6909      	ldr	r1, [r1, #16]
            var node = m_readyThreads.StartOfForwardWalk;
            var pri  = thread.Priority;

            while(node.IsValidForForwardMove)
            {
                if(node.Target.Priority < pri)
 8004d7a:	9a07      	ldr	r2, [sp, #28]
 8004d7c:	4291      	cmp	r1, r2
 8004d7e:	9003      	str	r0, [sp, #12]
 8004d80:	db14      	blt.n	8004dac <ThreadManager_InsertInPriorityOrder$3187+0x76>
 8004d82:	e016      	b.n	8004db2 <ThreadManager_InsertInPriorityOrder$3187+0x7c>
 8004d84:	9804      	ldr	r0, [sp, #16]
 8004d86:	9002      	str	r0, [sp, #8]
 8004d88:	e7ff      	b.n	8004d8a <ThreadManager_InsertInPriorityOrder$3187+0x54>
 8004d8a:	9802      	ldr	r0, [sp, #8]
        {
            [Inline]
            get
            {
                return m_runningThread != m_nextThread;
            }
 8004d8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d8e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
                }

                node = node.Next;
            }

            thread.SchedulingLink.InsertBefore( node );
 8004d90:	9001      	str	r0, [sp, #4]
 8004d92:	4610      	mov	r0, r2
 8004d94:	9901      	ldr	r1, [sp, #4]
 8004d96:	f000 fb34 	bl	8005402 <KernelNode`1_InsertBefore$17266>
 8004d9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d9c:	6a41      	ldr	r1, [r0, #36]	; 0x24

            thread.State &= ~System.Threading.ThreadState.WaitSleepJoin;
 8004d9e:	f021 0120 	bic.w	r1, r1, #32
 8004da2:	f7ff fd6f 	bl	8004884 <Thread_set_State$4035>
 8004da6:	e7ff      	b.n	8004da8 <ThreadManager_InsertInPriorityOrder$3187+0x72>
 8004da8:	b00a      	add	sp, #40	; 0x28
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	9803      	ldr	r0, [sp, #12]

            while(node.IsValidForForwardMove)
            {
                if(node.Target.Priority < pri)
                {
                    break;
 8004dae:	9002      	str	r0, [sp, #8]
 8004db0:	e7eb      	b.n	8004d8a <ThreadManager_InsertInPriorityOrder$3187+0x54>

        public virtual void InitializeAfterStaticConstructors( uint[] systemStack )
        {
            m_allThreads          = new KernelList< ThreadImpl >();
            m_readyThreads        = new KernelList< ThreadImpl >();
            m_waitingThreads      = new KernelList< ThreadImpl >();
 8004db2:	9805      	ldr	r0, [sp, #20]
 8004db4:	6881      	ldr	r1, [r0, #8]
                {
                    break;
                }

                node = node.Next;
            }
 8004db6:	9106      	str	r1, [sp, #24]
 8004db8:	e7d1      	b.n	8004d5e <ThreadManager_InsertInPriorityOrder$3187+0x28>
 8004dba:	46c0      	nop			; (mov r8, r8)

08004dbc <InterruptState_GetCurrentExceptionMode$5301>:
            return m_basepri;
        }

        public HardwareException GetCurrentExceptionMode()
        {
            ProcessorARMv7M.ISR_NUMBER ex = GetMode();
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	f004 fe63 	bl	8009a8a <InterruptState_GetMode$5303>
 8004dc4:	4601      	mov	r1, r0
            
            if(ex == ProcessorARMv7M.ISR_NUMBER.ThreadMode)
 8004dc6:	2800      	cmp	r0, #0
 8004dc8:	9103      	str	r1, [sp, #12]
 8004dca:	d103      	bne.n	8004dd4 <InterruptState_GetCurrentExceptionMode$5301+0x18>
 8004dcc:	e7ff      	b.n	8004dce <InterruptState_GetCurrentExceptionMode$5301+0x12>
 8004dce:	2000      	movs	r0, #0
            {
                return HardwareException.None;
 8004dd0:	9002      	str	r0, [sp, #8]
 8004dd2:	e037      	b.n	8004e44 <InterruptState_GetCurrentExceptionMode$5301+0x88>
            }

            switch(ex)
 8004dd4:	9803      	ldr	r0, [sp, #12]
 8004dd6:	1e41      	subs	r1, r0, #1
 8004dd8:	460a      	mov	r2, r1
 8004dda:	290e      	cmp	r1, #14
 8004ddc:	9201      	str	r2, [sp, #4]
 8004dde:	d82e      	bhi.n	8004e3e <InterruptState_GetCurrentExceptionMode$5301+0x82>
 8004de0:	9901      	ldr	r1, [sp, #4]
 8004de2:	e8df f001 	tbb	[pc, r1]
 8004de6:	1108      	.short	0x1108
 8004de8:	1d1a1714 	.word	0x1d1a1714
 8004dec:	08080808 	.word	0x08080808
 8004df0:	26082320 	.word	0x26082320
 8004df4:	0029      	.short	0x0029
 8004df6:	4815      	ldr	r0, [pc, #84]	; (8004e4c <InterruptState_GetCurrentExceptionMode$5301+0x90>)
 8004df8:	4915      	ldr	r1, [pc, #84]	; (8004e50 <InterruptState_GetCurrentExceptionMode$5301+0x94>)
 8004dfa:	4479      	add	r1, pc
 8004dfc:	5840      	ldr	r0, [r0, r1]
            return new InterruptState( ProcessorARMv7M.DisableInterrupts( ) );
        }

        [Inline]
        public static InterruptState DisableAll( )
        {
 8004dfe:	f7fb fa81 	bl	8000304 <BugCheck_Raise$4648>
 8004e02:	2008      	movs	r0, #8
                case ProcessorARMv7M.ISR_NUMBER.Reserved13      : BugCheck.Assert( false, BugCheck.StopCode.IllegalMode ); break;
                    
                default                                         : return HardwareException.Interrupt;
            }

            return HardwareException.Interrupt;
 8004e04:	9002      	str	r0, [sp, #8]
 8004e06:	e01d      	b.n	8004e44 <InterruptState_GetCurrentExceptionMode$5301+0x88>
 8004e08:	200b      	movs	r0, #11
                return HardwareException.None;
            }

            switch(ex)
            {
                case ProcessorARMv7M.ISR_NUMBER.NMI             : return HardwareException.NMI; 
 8004e0a:	9002      	str	r0, [sp, #8]
 8004e0c:	e01a      	b.n	8004e44 <InterruptState_GetCurrentExceptionMode$5301+0x88>
 8004e0e:	200c      	movs	r0, #12
                case ProcessorARMv7M.ISR_NUMBER.HardFault       : return HardwareException.Fault; 
 8004e10:	9002      	str	r0, [sp, #8]
 8004e12:	e017      	b.n	8004e44 <InterruptState_GetCurrentExceptionMode$5301+0x88>
 8004e14:	200c      	movs	r0, #12
                case ProcessorARMv7M.ISR_NUMBER.MemManage       : return HardwareException.Fault;
 8004e16:	9002      	str	r0, [sp, #8]
 8004e18:	e014      	b.n	8004e44 <InterruptState_GetCurrentExceptionMode$5301+0x88>
 8004e1a:	200c      	movs	r0, #12
                case ProcessorARMv7M.ISR_NUMBER.BusFault        : return HardwareException.Fault;
 8004e1c:	9002      	str	r0, [sp, #8]
 8004e1e:	e011      	b.n	8004e44 <InterruptState_GetCurrentExceptionMode$5301+0x88>
 8004e20:	200c      	movs	r0, #12
                case ProcessorARMv7M.ISR_NUMBER.UsageFault      : return HardwareException.Fault;
 8004e22:	9002      	str	r0, [sp, #8]
 8004e24:	e00e      	b.n	8004e44 <InterruptState_GetCurrentExceptionMode$5301+0x88>
 8004e26:	200d      	movs	r0, #13
                case ProcessorARMv7M.ISR_NUMBER.SVCall          : return HardwareException.Service;
 8004e28:	9002      	str	r0, [sp, #8]
 8004e2a:	e00b      	b.n	8004e44 <InterruptState_GetCurrentExceptionMode$5301+0x88>
 8004e2c:	200e      	movs	r0, #14
                case ProcessorARMv7M.ISR_NUMBER.ReservedForDebug: return HardwareException.Debug;
 8004e2e:	9002      	str	r0, [sp, #8]
 8004e30:	e008      	b.n	8004e44 <InterruptState_GetCurrentExceptionMode$5301+0x88>
 8004e32:	200a      	movs	r0, #10
                case ProcessorARMv7M.ISR_NUMBER.PendSV          : return HardwareException.SoftwareInterrupt;
 8004e34:	9002      	str	r0, [sp, #8]
 8004e36:	e005      	b.n	8004e44 <InterruptState_GetCurrentExceptionMode$5301+0x88>
 8004e38:	200a      	movs	r0, #10
                case ProcessorARMv7M.ISR_NUMBER.SysTick         : return HardwareException.SoftwareInterrupt;
 8004e3a:	9002      	str	r0, [sp, #8]
 8004e3c:	e002      	b.n	8004e44 <InterruptState_GetCurrentExceptionMode$5301+0x88>
 8004e3e:	2008      	movs	r0, #8
                case ProcessorARMv7M.ISR_NUMBER.Reserved8       :
                case ProcessorARMv7M.ISR_NUMBER.Reserved9       :
                case ProcessorARMv7M.ISR_NUMBER.Reserved10      :
                case ProcessorARMv7M.ISR_NUMBER.Reserved13      : BugCheck.Assert( false, BugCheck.StopCode.IllegalMode ); break;
                    
                default                                         : return HardwareException.Interrupt;
 8004e40:	9002      	str	r0, [sp, #8]
 8004e42:	e7ff      	b.n	8004e44 <InterruptState_GetCurrentExceptionMode$5301+0x88>
 8004e44:	9802      	ldr	r0, [sp, #8]
 8004e46:	b004      	add	sp, #16
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	46c0      	nop			; (mov r8, r8)
 8004e4c:	e802531c 	.word	0xe802531c
 8004e50:	17ffc9d6 	.word	0x17ffc9d6

08004e54 <ThreadManager_RescheduleAndRequestContextSwitchIfNeeded$3170>:
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	460a      	mov	r2, r1
 8004e5a:	4603      	mov	r3, r0
            }
        }

        public void RescheduleAndRequestContextSwitchIfNeeded( HardwareException mode )
        {
            Reschedule();
 8004e5c:	9103      	str	r1, [sp, #12]
 8004e5e:	9302      	str	r3, [sp, #8]
 8004e60:	9201      	str	r2, [sp, #4]
 8004e62:	f000 f908 	bl	8005076 <ThreadManager_Reschedule$3171>
            // We therefore need to  pick the case if System timer exception and let it go as if it was a normal thread mode
            // handler. When we enable the interrupts controller this case will be automatically take care of and we 
            // can remove this #if
            // 
            
            if(mode == HardwareException.None || mode == HardwareException.Interrupt )
 8004e66:	9803      	ldr	r0, [sp, #12]
 8004e68:	2800      	cmp	r0, #0
 8004e6a:	d004      	beq.n	8004e76 <ThreadManager_RescheduleAndRequestContextSwitchIfNeeded$3170+0x22>
 8004e6c:	e7ff      	b.n	8004e6e <ThreadManager_RescheduleAndRequestContextSwitchIfNeeded$3170+0x1a>
 8004e6e:	9801      	ldr	r0, [sp, #4]
 8004e70:	2808      	cmp	r0, #8
 8004e72:	d10e      	bne.n	8004e92 <ThreadManager_RescheduleAndRequestContextSwitchIfNeeded$3170+0x3e>
 8004e74:	e7ff      	b.n	8004e76 <ThreadManager_RescheduleAndRequestContextSwitchIfNeeded$3170+0x22>
        public bool ShouldContextSwitch
        {
            [Inline]
            get
            {
                return m_runningThread != m_nextThread;
 8004e76:	9802      	ldr	r0, [sp, #8]
 8004e78:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8004e7a:	6a82      	ldr	r2, [r0, #40]	; 0x28
            if(mode == HardwareException.None || mode == HardwareException.Interrupt )
#else
            if(mode == HardwareException.None)
#endif
            {
                if(this.ShouldContextSwitch)
 8004e7c:	4291      	cmp	r1, r2
 8004e7e:	d007      	beq.n	8004e90 <ThreadManager_RescheduleAndRequestContextSwitchIfNeeded$3170+0x3c>
 8004e80:	e7ff      	b.n	8004e82 <ThreadManager_RescheduleAndRequestContextSwitchIfNeeded$3170+0x2e>
 8004e82:	4805      	ldr	r0, [pc, #20]	; (8004e98 <ThreadManager_RescheduleAndRequestContextSwitchIfNeeded$3170+0x44>)
 8004e84:	4905      	ldr	r1, [pc, #20]	; (8004e9c <ThreadManager_RescheduleAndRequestContextSwitchIfNeeded$3170+0x48>)
 8004e86:	4479      	add	r1, pc
 8004e88:	5840      	ldr	r0, [r0, r1]
            }

            public override void SetNextQuantumTimer( SchedulerTime nextTimeout )
            {
            }

 8004e8a:	f000 f959 	bl	8005140 <ProcessorARMv7M_RaiseSystemHandler$3240>
#endif
            {
                if(this.ShouldContextSwitch)
                {
                    Peripherals.Instance.CauseInterrupt( );
                }
 8004e8e:	e7ff      	b.n	8004e90 <ThreadManager_RescheduleAndRequestContextSwitchIfNeeded$3170+0x3c>
            }
 8004e90:	e7ff      	b.n	8004e92 <ThreadManager_RescheduleAndRequestContextSwitchIfNeeded$3170+0x3e>
 8004e92:	b004      	add	sp, #16
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	46c0      	nop			; (mov r8, r8)
 8004e98:	e8025220 	.word	0xe8025220
 8004e9c:	17ffc94a 	.word	0x17ffc94a

08004ea0 <ThreadManager_RemoveThread$3163>:
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b08a      	sub	sp, #40	; 0x28
 8004ea4:	460a      	mov	r2, r1
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	f04f 0c00 	mov.w	ip, #0
 8004eac:	f8cd c020 	str.w	ip, [sp, #32]
 8004eb0:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
        //
        // Helper Methods
        //

        [Inline]
        public static void Assert( bool     condition ,
 8004eb4:	9107      	str	r1, [sp, #28]
 8004eb6:	9006      	str	r0, [sp, #24]
 8004eb8:	9205      	str	r2, [sp, #20]
 8004eba:	9304      	str	r3, [sp, #16]
 8004ebc:	f8cd c00c 	str.w	ip, [sp, #12]
 8004ec0:	f7ff fba4 	bl	800460c <ProcessorARMv7M_DisableInterrupts$3259>
 8004ec4:	9903      	ldr	r1, [sp, #12]
 8004ec6:	9109      	str	r1, [sp, #36]	; 0x24
 8004ec8:	9009      	str	r0, [sp, #36]	; 0x24
 8004eca:	9008      	str	r0, [sp, #32]
 8004ecc:	9807      	ldr	r0, [sp, #28]
 8004ece:	f7ff fc2f 	bl	8004730 <Thread_Detach$4015>
 8004ed2:	9806      	ldr	r0, [sp, #24]
 8004ed4:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8004ed6:	9a07      	ldr	r2, [sp, #28]
 8004ed8:	428a      	cmp	r2, r1
 8004eda:	d10d      	bne.n	8004ef8 <ThreadManager_RemoveThread$3163+0x58>
 8004edc:	e7ff      	b.n	8004ede <ThreadManager_RemoveThread$3163+0x3e>
 8004ede:	a808      	add	r0, sp, #32
 8004ee0:	9002      	str	r0, [sp, #8]
 8004ee2:	f7ff ff6b 	bl	8004dbc <InterruptState_GetCurrentExceptionMode$5301>
 8004ee6:	9904      	ldr	r1, [sp, #16]
 8004ee8:	9001      	str	r0, [sp, #4]
 8004eea:	4608      	mov	r0, r1
 8004eec:	9901      	ldr	r1, [sp, #4]
 8004eee:	f7ff ffb1 	bl	8004e54 <ThreadManager_RescheduleAndRequestContextSwitchIfNeeded$3170>
            NotAMemoryReference     ,
            HeapCorruptionDetected  ,
            
            IllegalMode             ,
            IllegalConfiguration    ,
            FailedBootstrap         ,
 8004ef2:	9802      	ldr	r0, [sp, #8]
 8004ef4:	9000      	str	r0, [sp, #0]
 8004ef6:	e005      	b.n	8004f04 <ThreadManager_RemoveThread$3163+0x64>
 8004ef8:	9805      	ldr	r0, [sp, #20]
 8004efa:	f7ff f8bb 	bl	8004074 <Thread_Stop$4014>
 8004efe:	a808      	add	r0, sp, #32
 8004f00:	9000      	str	r0, [sp, #0]
 8004f02:	e7ff      	b.n	8004f04 <ThreadManager_RemoveThread$3163+0x64>
            NotAMemoryReference     ,
            HeapCorruptionDetected  ,
            
            IllegalMode             ,
            IllegalConfiguration    ,
            FailedBootstrap         ,
 8004f04:	9800      	ldr	r0, [sp, #0]
 8004f06:	6800      	ldr	r0, [r0, #0]
 8004f08:	f7ff fba2 	bl	8004650 <ProcessorARMv7M_DisableInterruptsWithPriorityLevelHigherOrEqualTo$3266>
 8004f0c:	b00a      	add	sp, #40	; 0x28
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <KernelPerformanceCounter_Merge$4667>:
 8004f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f12:	b08b      	sub	sp, #44	; 0x2c
 8004f14:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004f16:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 8004f1a:	4696      	mov	lr, r2
 8004f1c:	460c      	mov	r4, r1
 8004f1e:	4605      	mov	r5, r0
        }

        public void Merge( KernelPerformanceCounter other )
        {
            m_hits  += other.m_hits;
 8004f20:	6886      	ldr	r6, [r0, #8]
 8004f22:	9103      	str	r1, [sp, #12]
 8004f24:	9204      	str	r2, [sp, #16]
 8004f26:	9306      	str	r3, [sp, #24]
 8004f28:	f8cd c014 	str.w	ip, [sp, #20]
 8004f2c:	9f03      	ldr	r7, [sp, #12]
 8004f2e:	443e      	add	r6, r7
 8004f30:	6086      	str	r6, [r0, #8]
 8004f32:	6906      	ldr	r6, [r0, #16]
 8004f34:	6947      	ldr	r7, [r0, #20]
 8004f36:	9107      	str	r1, [sp, #28]
 8004f38:	9208      	str	r2, [sp, #32]
 8004f3a:	930a      	str	r3, [sp, #40]	; 0x28
 8004f3c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
            m_total += other.m_total;
 8004f40:	eb16 010c 	adds.w	r1, r6, ip
 8004f44:	eb47 0203 	adc.w	r2, r7, r3
 8004f48:	6142      	str	r2, [r0, #20]
 8004f4a:	6101      	str	r1, [r0, #16]
 8004f4c:	9502      	str	r5, [sp, #8]
 8004f4e:	9401      	str	r4, [sp, #4]
 8004f50:	f8cd e000 	str.w	lr, [sp]
 8004f54:	b00b      	add	sp, #44	; 0x2c
 8004f56:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f58 <BugCheck_AssertInterruptsOn$4656>:
            Assert( Processor.Instance.AreInterruptsDisabled() == true, BugCheck.StopCode.InterruptsNotDisabled );
        }

        public static void AssertInterruptsOn()
        {
            Assert( Processor.Instance.AreInterruptsDisabled() == false, BugCheck.StopCode.InterruptsNotEnabled );
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	f017 ff72 	bl	801ce44 <CMSIS_STUB_SCB__get_PRIMASK>
 8004f60:	9001      	str	r0, [sp, #4]
 8004f62:	f017 ff79 	bl	801ce58 <CMSIS_STUB_SCB__get_BASEPRI>
 8004f66:	2100      	movs	r1, #0
 8004f68:	2802      	cmp	r0, #2
 8004f6a:	bf38      	it	cc
 8004f6c:	2101      	movcc	r1, #1
 8004f6e:	9801      	ldr	r0, [sp, #4]
 8004f70:	ea41 0100 	orr.w	r1, r1, r0

        [Inline]
        public static void Assert( bool     condition ,
                                   StopCode code      )
        {
            if(!condition)
 8004f74:	f011 0f01 	tst.w	r1, #1
 8004f78:	d007      	beq.n	8004f8a <BugCheck_AssertInterruptsOn$4656+0x32>
 8004f7a:	e7ff      	b.n	8004f7c <BugCheck_AssertInterruptsOn$4656+0x24>
 8004f7c:	4804      	ldr	r0, [pc, #16]	; (8004f90 <BugCheck_AssertInterruptsOn$4656+0x38>)
 8004f7e:	4905      	ldr	r1, [pc, #20]	; (8004f94 <BugCheck_AssertInterruptsOn$4656+0x3c>)
 8004f80:	4479      	add	r1, pc
 8004f82:	5840      	ldr	r0, [r0, r1]
            {
                Raise( code );
 8004f84:	f7fb f9be 	bl	8000304 <BugCheck_Raise$4648>
            }
 8004f88:	e7ff      	b.n	8004f8a <BugCheck_AssertInterruptsOn$4656+0x32>
 8004f8a:	b002      	add	sp, #8
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	46c0      	nop			; (mov r8, r8)
 8004f90:	e80252e0 	.word	0xe80252e0
 8004f94:	17ffc850 	.word	0x17ffc850

08004f98 <ThreadManager_SwitchToWait$3166>:
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b08c      	sub	sp, #48	; 0x30
 8004f9c:	460a      	mov	r2, r1
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	930a      	str	r3, [sp, #40]	; 0x28
 8004fa2:	9109      	str	r1, [sp, #36]	; 0x24
 8004fa4:	9208      	str	r2, [sp, #32]
 8004fa6:	9007      	str	r0, [sp, #28]
 8004fa8:	9306      	str	r3, [sp, #24]
 8004faa:	f7ff ffd5 	bl	8004f58 <BugCheck_AssertInterruptsOn$4656>
 8004fae:	9806      	ldr	r0, [sp, #24]
 8004fb0:	900b      	str	r0, [sp, #44]	; 0x2c
        //
        // Helper Methods
        //

        [Inline]
        public static void Assert( bool     condition ,
 8004fb2:	f7ff fb2b 	bl	800460c <ProcessorARMv7M_DisableInterrupts$3259>
 8004fb6:	9906      	ldr	r1, [sp, #24]
 8004fb8:	910b      	str	r1, [sp, #44]	; 0x2c
 8004fba:	900b      	str	r0, [sp, #44]	; 0x2c
 8004fbc:	900a      	str	r0, [sp, #40]	; 0x28
 8004fbe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004fc0:	f000 f844 	bl	800504c <WaitingRecord_get_Processed$5009>
 8004fc4:	f010 0fff 	tst.w	r0, #255	; 0xff
 8004fc8:	d003      	beq.n	8004fd2 <ThreadManager_SwitchToWait$3166+0x3a>
 8004fca:	e7ff      	b.n	8004fcc <ThreadManager_SwitchToWait$3166+0x34>
 8004fcc:	a80a      	add	r0, sp, #40	; 0x28
 8004fce:	9005      	str	r0, [sp, #20]
 8004fd0:	e01e      	b.n	8005010 <ThreadManager_SwitchToWait$3166+0x78>
 8004fd2:	9808      	ldr	r0, [sp, #32]
 8004fd4:	6901      	ldr	r1, [r0, #16]
 8004fd6:	9a07      	ldr	r2, [sp, #28]
 8004fd8:	6910      	ldr	r0, [r2, #16]
 8004fda:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8004fdc:	9104      	str	r1, [sp, #16]
 8004fde:	4619      	mov	r1, r3
 8004fe0:	f7ff fe86 	bl	8004cf0 <KernelList`1_InsertAtTail$17236>
 8004fe4:	9804      	ldr	r0, [sp, #16]
 8004fe6:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8004fe8:	f041 0120 	orr.w	r1, r1, #32
 8004fec:	f7ff fc4a 	bl	8004884 <Thread_set_State$4035>
 8004ff0:	9807      	ldr	r0, [sp, #28]
 8004ff2:	f7ff f97a 	bl	80042ea <ThreadManager_InvalidateNextWaitTimer$3180>
 8004ff6:	a80a      	add	r0, sp, #40	; 0x28
 8004ff8:	4601      	mov	r1, r0
 8004ffa:	9103      	str	r1, [sp, #12]
 8004ffc:	9002      	str	r0, [sp, #8]
 8004ffe:	f7ff fedd 	bl	8004dbc <InterruptState_GetCurrentExceptionMode$5301>
 8005002:	9907      	ldr	r1, [sp, #28]
 8005004:	9001      	str	r0, [sp, #4]
 8005006:	4608      	mov	r0, r1
 8005008:	9901      	ldr	r1, [sp, #4]
 800500a:	f7ff ff23 	bl	8004e54 <ThreadManager_RescheduleAndRequestContextSwitchIfNeeded$3170>
 800500e:	e005      	b.n	800501c <ThreadManager_SwitchToWait$3166+0x84>
            NotAMemoryReference     ,
            HeapCorruptionDetected  ,
            
            IllegalMode             ,
            IllegalConfiguration    ,
            FailedBootstrap         ,
 8005010:	9805      	ldr	r0, [sp, #20]
 8005012:	6800      	ldr	r0, [r0, #0]
 8005014:	f7ff fb1c 	bl	8004650 <ProcessorARMv7M_DisableInterruptsWithPriorityLevelHigherOrEqualTo$3266>
 8005018:	b00c      	add	sp, #48	; 0x30
 800501a:	bd80      	pop	{r7, pc}
 800501c:	9804      	ldr	r0, [sp, #16]
 800501e:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
 8005022:	f011 0f20 	tst.w	r1, #32
 8005026:	d00e      	beq.n	8005046 <ThreadManager_SwitchToWait$3166+0xae>
 8005028:	e7ff      	b.n	800502a <ThreadManager_SwitchToWait$3166+0x92>
            IllegalSchedule         ,
            CtxSwtchOntoSelf        ,
            CtxSwtchWrongContext    ,
            CtxSwtchFailed          ,
            StackCorruptionDetected ,
            InvalidSupervisorCall   ,
 800502a:	f017 ff15 	bl	801ce58 <CMSIS_STUB_SCB__get_BASEPRI>
            InvalidOperation        ,
            Impossible              ,
 800502e:	9903      	ldr	r1, [sp, #12]
 8005030:	680a      	ldr	r2, [r1, #0]
 8005032:	9000      	str	r0, [sp, #0]
 8005034:	4610      	mov	r0, r2
 8005036:	f017 ff19 	bl	801ce6c <CMSIS_STUB_SCB__set_BASEPRI>
            Fault_Vectors           ,
 800503a:	f017 ffd9 	bl	801cff0 <Nop>
            Fault_Unknown           ,
 800503e:	9800      	ldr	r0, [sp, #0]
 8005040:	f017 ff14 	bl	801ce6c <CMSIS_STUB_SCB__set_BASEPRI>
 8005044:	e7ea      	b.n	800501c <ThreadManager_SwitchToWait$3166+0x84>
            NotAMemoryReference     ,
            HeapCorruptionDetected  ,
            
            IllegalMode             ,
            IllegalConfiguration    ,
            FailedBootstrap         ,
 8005046:	9802      	ldr	r0, [sp, #8]
 8005048:	9005      	str	r0, [sp, #20]
 800504a:	e7e1      	b.n	8005010 <ThreadManager_SwitchToWait$3166+0x78>

0800504c <WaitingRecord_get_Processed$5009>:
 800504c:	b081      	sub	sp, #4
 800504e:	4601      	mov	r1, r0
 8005050:	f890 0020 	ldrb.w	r0, [r0, #32]
 8005054:	9100      	str	r1, [sp, #0]
 8005056:	b001      	add	sp, #4
 8005058:	4770      	bx	lr

0800505a <ThreadManager_TimeQuantumExpired$3168>:
 800505a:	b580      	push	{r7, lr}
 800505c:	b082      	sub	sp, #8
 800505e:	4601      	mov	r1, r0
        {
#if !ARMv7
            BugCheck.AssertInterruptsOff( );
#endif

            InsertInPriorityOrder( m_runningThread );
 8005060:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8005062:	9001      	str	r0, [sp, #4]
 8005064:	9100      	str	r1, [sp, #0]
 8005066:	4611      	mov	r1, r2
 8005068:	f7ff fe65 	bl	8004d36 <ThreadManager_InsertInPriorityOrder$3187>

            Reschedule( );
 800506c:	9801      	ldr	r0, [sp, #4]
 800506e:	f000 f802 	bl	8005076 <ThreadManager_Reschedule$3171>
 8005072:	b002      	add	sp, #8
 8005074:	bd80      	pop	{r7, pc}

08005076 <ThreadManager_Reschedule$3171>:
 8005076:	b580      	push	{r7, lr}
 8005078:	b082      	sub	sp, #8
 800507a:	4601      	mov	r1, r0
            }
        }

        public virtual void Reschedule()
        {
            SelectNextThreadToRun();
 800507c:	9101      	str	r1, [sp, #4]
 800507e:	f000 f87f 	bl	8005180 <ThreadManager_SelectNextThreadToRun$3172>
 8005082:	b002      	add	sp, #8
 8005084:	bd80      	pop	{r7, pc}
 8005086:	46c0      	nop			; (mov r8, r8)

08005088 <ThreadManager_SetNextQuantumTimerIfNeeded$3169>:
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	4601      	mov	r1, r0

        public virtual void SetNextQuantumTimerIfNeeded()
        {
            ThreadImpl nextThread = m_nextThread;

            if(nextThread == m_idleThread)
 800508e:	6982      	ldr	r2, [r0, #24]
            Reschedule( );
        }

        public virtual void SetNextQuantumTimerIfNeeded()
        {
            ThreadImpl nextThread = m_nextThread;
 8005090:	6a80      	ldr	r0, [r0, #40]	; 0x28

            if(nextThread == m_idleThread)
 8005092:	4290      	cmp	r0, r2
 8005094:	9003      	str	r0, [sp, #12]
 8005096:	9102      	str	r1, [sp, #8]
 8005098:	d104      	bne.n	80050a4 <ThreadManager_SetNextQuantumTimerIfNeeded$3169+0x1c>
 800509a:	e7ff      	b.n	800509c <ThreadManager_SetNextQuantumTimerIfNeeded$3169+0x14>
            {
                CancelQuantumTimer(); // No need to set a timer, we are just idling.
 800509c:	9802      	ldr	r0, [sp, #8]
 800509e:	f000 f846 	bl	800512e <ThreadManager_CancelQuantumTimer$16773>
            }
 80050a2:	e020      	b.n	80050e6 <ThreadManager_SetNextQuantumTimerIfNeeded$3169+0x5e>
            else
            {
                ThreadImpl lastThread = m_readyThreads.LastTarget();
 80050a4:	9802      	ldr	r0, [sp, #8]
 80050a6:	68c0      	ldr	r0, [r0, #12]
 80050a8:	f000 f824 	bl	80050f4 <KernelList`1_LastTarget$17240>
 80050ac:	4601      	mov	r1, r0
 80050ae:	2800      	cmp	r0, #0
 80050b0:	bf18      	it	ne
 80050b2:	2001      	movne	r0, #1

            public override void SetNextQuantumTimer()
            {
            }

            public override void SetNextQuantumTimer( SchedulerTime nextTimeout )
 80050b4:	2800      	cmp	r0, #0
 80050b6:	9101      	str	r1, [sp, #4]
 80050b8:	d107      	bne.n	80050ca <ThreadManager_SetNextQuantumTimerIfNeeded$3169+0x42>
 80050ba:	e7ff      	b.n	80050bc <ThreadManager_SetNextQuantumTimerIfNeeded$3169+0x34>
 80050bc:	480b      	ldr	r0, [pc, #44]	; (80050ec <ThreadManager_SetNextQuantumTimerIfNeeded$3169+0x64>)
 80050be:	490c      	ldr	r1, [pc, #48]	; (80050f0 <ThreadManager_SetNextQuantumTimerIfNeeded$3169+0x68>)
 80050c0:	4479      	add	r1, pc
 80050c2:	5840      	ldr	r0, [r0, r1]
            {
            }
 80050c4:	f7fb f91e 	bl	8000304 <BugCheck_Raise$4648>

 80050c8:	e7ff      	b.n	80050ca <ThreadManager_SetNextQuantumTimerIfNeeded$3169+0x42>
                //
                // If the next thread is not an idle thread, there has to be a ready thread.
                //
                BugCheck.Assert( lastThread != null, BugCheck.StopCode.ExpectingReadyThread );

                if(lastThread == nextThread)
 80050ca:	9801      	ldr	r0, [sp, #4]
 80050cc:	9903      	ldr	r1, [sp, #12]
 80050ce:	4288      	cmp	r0, r1
 80050d0:	d104      	bne.n	80050dc <ThreadManager_SetNextQuantumTimerIfNeeded$3169+0x54>
 80050d2:	e7ff      	b.n	80050d4 <ThreadManager_SetNextQuantumTimerIfNeeded$3169+0x4c>
                {
                    CancelQuantumTimer(); // Only one ready thread, no need to preempt it.
 80050d4:	9802      	ldr	r0, [sp, #8]
 80050d6:	f000 f82a 	bl	800512e <ThreadManager_CancelQuantumTimer$16773>
                }
 80050da:	e003      	b.n	80050e4 <ThreadManager_SetNextQuantumTimerIfNeeded$3169+0x5c>
                else
                {
                    SetNextQuantumTimer();
 80050dc:	9802      	ldr	r0, [sp, #8]
 80050de:	f000 f81d 	bl	800511c <ThreadManager_SetNextQuantumTimer$16774>
                }
 80050e2:	e7ff      	b.n	80050e4 <ThreadManager_SetNextQuantumTimerIfNeeded$3169+0x5c>
            }
 80050e4:	e7ff      	b.n	80050e6 <ThreadManager_SetNextQuantumTimerIfNeeded$3169+0x5e>
 80050e6:	b004      	add	sp, #16
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	46c0      	nop			; (mov r8, r8)
 80050ec:	e802521c 	.word	0xe802521c
 80050f0:	17ffc710 	.word	0x17ffc710

080050f4 <KernelList`1_LastTarget$17240>:
 80050f4:	b083      	sub	sp, #12
 80050f6:	4601      	mov	r1, r0

        public T LastTarget()
        {
            KernelNode< T > node = m_tail.Previous;

            if(node != m_head)
 80050f8:	6882      	ldr	r2, [r0, #8]
            return null;
        }

        public T LastTarget()
        {
            KernelNode< T > node = m_tail.Previous;
 80050fa:	68c0      	ldr	r0, [r0, #12]
 80050fc:	68c0      	ldr	r0, [r0, #12]

        public T LastTarget()
        {
            KernelNode< T > node = m_tail.Previous;

            if(node != m_head)
 80050fe:	4290      	cmp	r0, r2
 8005100:	9002      	str	r0, [sp, #8]
 8005102:	9101      	str	r1, [sp, #4]
 8005104:	d004      	beq.n	8005110 <KernelList`1_LastTarget$17240+0x1c>
 8005106:	e7ff      	b.n	8005108 <KernelList`1_LastTarget$17240+0x14>
 8005108:	9802      	ldr	r0, [sp, #8]
 800510a:	6901      	ldr	r1, [r0, #16]
        {
            KernelNode< T > node = m_tail.Previous;

            if(node != m_head)
            {
                return node.Target;
 800510c:	9100      	str	r1, [sp, #0]
 800510e:	e002      	b.n	8005116 <KernelList`1_LastTarget$17240+0x22>
 8005110:	2000      	movs	r0, #0
            }

            return default( T );
 8005112:	9000      	str	r0, [sp, #0]
 8005114:	e7ff      	b.n	8005116 <KernelList`1_LastTarget$17240+0x22>
        }
 8005116:	9800      	ldr	r0, [sp, #0]
 8005118:	b003      	add	sp, #12
 800511a:	4770      	bx	lr

0800511c <ThreadManager_SetNextQuantumTimer$16774>:
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	4601      	mov	r1, r0
            m_SysTickTimer.Cancel();
        }

        public override void SetNextQuantumTimer()
        {
            m_SysTickTimer.Schedule( ); 
 8005122:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8005124:	9101      	str	r1, [sp, #4]
 8005126:	f00c f8b9 	bl	801129c <SysTickTimer_Schedule$16884>
 800512a:	b002      	add	sp, #8
 800512c:	bd80      	pop	{r7, pc}

0800512e <ThreadManager_CancelQuantumTimer$16773>:
 800512e:	b580      	push	{r7, lr}
 8005130:	b082      	sub	sp, #8
 8005132:	4601      	mov	r1, r0
            m_SysTickTimer.Schedule();
        }

        public override void CancelQuantumTimer()
        {
            m_SysTickTimer.Cancel();
 8005134:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8005136:	9101      	str	r1, [sp, #4]
 8005138:	f00c f8bb 	bl	80112b2 <SysTickTimer_Cancel$16879>
 800513c:	b002      	add	sp, #8
 800513e:	bd80      	pop	{r7, pc}

08005140 <ProcessorARMv7M_RaiseSystemHandler$3240>:
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	4601      	mov	r1, r0
 8005146:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800514a:	f2c6 12bf 	movt	r2, #25023	; 0x61bf
 800514e:	2300      	movs	r3, #0
 8005150:	4210      	tst	r0, r2
 8005152:	bf08      	it	eq
 8005154:	2301      	moveq	r3, #1

            public override void SetNextQuantumTimer()
            {
            }

            public override void SetNextQuantumTimer( SchedulerTime nextTimeout )
 8005156:	2b00      	cmp	r3, #0
 8005158:	9101      	str	r1, [sp, #4]
 800515a:	d107      	bne.n	800516c <ProcessorARMv7M_RaiseSystemHandler$3240+0x2c>
 800515c:	e7ff      	b.n	800515e <ProcessorARMv7M_RaiseSystemHandler$3240+0x1e>
 800515e:	4806      	ldr	r0, [pc, #24]	; (8005178 <ProcessorARMv7M_RaiseSystemHandler$3240+0x38>)
 8005160:	4906      	ldr	r1, [pc, #24]	; (800517c <ProcessorARMv7M_RaiseSystemHandler$3240+0x3c>)
 8005162:	4479      	add	r1, pc
 8005164:	5840      	ldr	r0, [r0, r1]
            {
            }
 8005166:	f7fb f8cd 	bl	8000304 <BugCheck_Raise$4648>

 800516a:	e7ff      	b.n	800516c <ProcessorARMv7M_RaiseSystemHandler$3240+0x2c>
 800516c:	9801      	ldr	r0, [sp, #4]
 800516e:	f017 feb7 	bl	801cee0 <CUSTOM_STUB_SCB_ICSR_RaiseSystemException>
 8005172:	b002      	add	sp, #8
 8005174:	bd80      	pop	{r7, pc}
 8005176:	46c0      	nop			; (mov r8, r8)
 8005178:	e802523c 	.word	0xe802523c
 800517c:	17ffc66e 	.word	0x17ffc66e

08005180 <ThreadManager_SelectNextThreadToRun$3172>:
 8005180:	b580      	push	{r7, lr}
 8005182:	b088      	sub	sp, #32
 8005184:	4601      	mov	r1, r0
 8005186:	2200      	movs	r2, #0
 8005188:	9206      	str	r2, [sp, #24]
 800518a:	9207      	str	r2, [sp, #28]
            public override void CancelQuantumTimer()
            {
            }

            public override void SetNextQuantumTimer()
            {
 800518c:	9005      	str	r0, [sp, #20]
 800518e:	9104      	str	r1, [sp, #16]
 8005190:	9203      	str	r2, [sp, #12]
 8005192:	f7ff fa3b 	bl	800460c <ProcessorARMv7M_DisableInterrupts$3259>
 8005196:	9903      	ldr	r1, [sp, #12]
 8005198:	9107      	str	r1, [sp, #28]
 800519a:	9007      	str	r0, [sp, #28]
 800519c:	9006      	str	r0, [sp, #24]

        public void SelectNextThreadToRun()
        {
            using(SmartHandles.InterruptState.Disable())
            {
                ThreadImpl thread = m_readyThreads.FirstTarget();
 800519e:	9805      	ldr	r0, [sp, #20]
 80051a0:	68c0      	ldr	r0, [r0, #12]
 80051a2:	f000 f817 	bl	80051d4 <KernelList`1_FirstTarget$17238>

                m_nextThread = thread != null ? thread : m_idleThread;
 80051a6:	4601      	mov	r1, r0
 80051a8:	2800      	cmp	r0, #0
 80051aa:	9102      	str	r1, [sp, #8]
 80051ac:	d003      	beq.n	80051b6 <ThreadManager_SelectNextThreadToRun$3172+0x36>
 80051ae:	e7ff      	b.n	80051b0 <ThreadManager_SelectNextThreadToRun$3172+0x30>
 80051b0:	9802      	ldr	r0, [sp, #8]
 80051b2:	9001      	str	r0, [sp, #4]
 80051b4:	e003      	b.n	80051be <ThreadManager_SelectNextThreadToRun$3172+0x3e>
 80051b6:	9804      	ldr	r0, [sp, #16]
 80051b8:	6981      	ldr	r1, [r0, #24]
 80051ba:	9101      	str	r1, [sp, #4]
 80051bc:	e7ff      	b.n	80051be <ThreadManager_SelectNextThreadToRun$3172+0x3e>
 80051be:	9801      	ldr	r0, [sp, #4]
 80051c0:	9904      	ldr	r1, [sp, #16]
 80051c2:	6288      	str	r0, [r1, #40]	; 0x28
                
                SetNextQuantumTimerIfNeeded();
 80051c4:	4608      	mov	r0, r1
 80051c6:	f7ff ff5f 	bl	8005088 <ThreadManager_SetNextQuantumTimerIfNeeded$3169>
            }

            public override void InitializeAfterStaticConstructors( uint[] systemStack )
            {
            }

 80051ca:	9806      	ldr	r0, [sp, #24]
 80051cc:	f7ff fa40 	bl	8004650 <ProcessorARMv7M_DisableInterruptsWithPriorityLevelHigherOrEqualTo$3266>
 80051d0:	b008      	add	sp, #32
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <KernelList`1_FirstTarget$17238>:
 80051d4:	b083      	sub	sp, #12
 80051d6:	4601      	mov	r1, r0
            return null;
        }

        public T FirstTarget()
        {
            KernelNode< T > node = m_head.Next;
 80051d8:	6882      	ldr	r2, [r0, #8]

            if(node != m_tail)
 80051da:	68c0      	ldr	r0, [r0, #12]
 80051dc:	6892      	ldr	r2, [r2, #8]

        public T FirstTarget()
        {
            KernelNode< T > node = m_head.Next;

            if(node != m_tail)
 80051de:	4282      	cmp	r2, r0
 80051e0:	9202      	str	r2, [sp, #8]
 80051e2:	9101      	str	r1, [sp, #4]
 80051e4:	d004      	beq.n	80051f0 <KernelList`1_FirstTarget$17238+0x1c>
 80051e6:	e7ff      	b.n	80051e8 <KernelList`1_FirstTarget$17238+0x14>
 80051e8:	9802      	ldr	r0, [sp, #8]
 80051ea:	6901      	ldr	r1, [r0, #16]
        {
            KernelNode< T > node = m_head.Next;

            if(node != m_tail)
            {
                return node.Target;
 80051ec:	9100      	str	r1, [sp, #0]
 80051ee:	e002      	b.n	80051f6 <KernelList`1_FirstTarget$17238+0x22>
 80051f0:	2000      	movs	r0, #0
            }

            return default(T);
 80051f2:	9000      	str	r0, [sp, #0]
 80051f4:	e7ff      	b.n	80051f6 <KernelList`1_FirstTarget$17238+0x22>
        }
 80051f6:	9800      	ldr	r0, [sp, #0]
 80051f8:	b003      	add	sp, #12
 80051fa:	4770      	bx	lr

080051fc <ThreadManager_ComputeNextTimeout$3182>:
 80051fc:	b510      	push	{r4, lr}
 80051fe:	b094      	sub	sp, #80	; 0x50
 8005200:	4601      	mov	r1, r0
 8005202:	4a30      	ldr	r2, [pc, #192]	; (80052c4 <ThreadManager_ComputeNextTimeout$3182+0xc8>)
 8005204:	4b30      	ldr	r3, [pc, #192]	; (80052c8 <ThreadManager_ComputeNextTimeout$3182+0xcc>)
 8005206:	447b      	add	r3, pc
 8005208:	441a      	add	r2, r3
 800520a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800520e:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
        }

        private void ComputeNextTimeout()
        {
            SchedulerTime            nextTimeout = SchedulerTime.MaxValue;
            KernelNode< ThreadImpl > node        = m_waitingThreads.StartOfForwardWalk;
 8005212:	6900      	ldr	r0, [r0, #16]
 8005214:	920f      	str	r2, [sp, #60]	; 0x3c
 8005216:	910e      	str	r1, [sp, #56]	; 0x38
 8005218:	930d      	str	r3, [sp, #52]	; 0x34
 800521a:	f000 f883 	bl	8005324 <KernelList`1_get_StartOfForwardWalk$17242>
 800521e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005220:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005222:	920c      	str	r2, [sp, #48]	; 0x30
 8005224:	910b      	str	r1, [sp, #44]	; 0x2c
 8005226:	900a      	str	r0, [sp, #40]	; 0x28
 8005228:	e7ff      	b.n	800522a <ThreadManager_ComputeNextTimeout$3182+0x2e>

            while(node.IsValidForForwardMove)
 800522a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800522c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800522e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005230:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005232:	9309      	str	r3, [sp, #36]	; 0x24
 8005234:	9108      	str	r1, [sp, #32]
 8005236:	9207      	str	r2, [sp, #28]
 8005238:	f000 f87b 	bl	8005332 <KernelNode`1_get_IsValidForForwardMove$17274>
 800523c:	f010 0fff 	tst.w	r0, #255	; 0xff
 8005240:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005242:	9907      	ldr	r1, [sp, #28]
 8005244:	9006      	str	r0, [sp, #24]
 8005246:	9105      	str	r1, [sp, #20]
 8005248:	d024      	beq.n	8005294 <ThreadManager_ComputeNextTimeout$3182+0x98>
 800524a:	e7ff      	b.n	800524c <ThreadManager_ComputeNextTimeout$3182+0x50>
            ThreadImpl bootstrapThread = m_idleThread;

            m_runningThread = bootstrapThread;
            bootstrapThread.AcquiredProcessor();

            //
 800524c:	9808      	ldr	r0, [sp, #32]
 800524e:	6900      	ldr	r0, [r0, #16]
            SchedulerTime            nextTimeout = SchedulerTime.MaxValue;
            KernelNode< ThreadImpl > node        = m_waitingThreads.StartOfForwardWalk;

            while(node.IsValidForForwardMove)
            {
                SchedulerTime threadTimeout = node.Target.GetFirstTimeout();
 8005250:	f7ff f8b0 	bl	80043b4 <Thread_GetFirstTimeout$4009>
 8005254:	460a      	mov	r2, r1
 8005256:	4603      	mov	r3, r0
 8005258:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800525c:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
 8005260:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8005264:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
 8005268:	9113      	str	r1, [sp, #76]	; 0x4c
 800526a:	9012      	str	r0, [sp, #72]	; 0x48
 800526c:	2400      	movs	r4, #0
 800526e:	4586      	cmp	lr, r0
 8005270:	4620      	mov	r0, r4
 8005272:	bf88      	it	hi
 8005274:	2001      	movhi	r0, #1
 8005276:	458c      	cmp	ip, r1
 8005278:	bf88      	it	hi
 800527a:	2401      	movhi	r4, #1
 800527c:	458c      	cmp	ip, r1
 800527e:	bf08      	it	eq
 8005280:	4604      	moveq	r4, r0

                if(nextTimeout > threadTimeout)
 8005282:	2c00      	cmp	r4, #0
 8005284:	f8cd c010 	str.w	ip, [sp, #16]
 8005288:	f8cd e00c 	str.w	lr, [sp, #12]
 800528c:	9202      	str	r2, [sp, #8]
 800528e:	9301      	str	r3, [sp, #4]
 8005290:	d10b      	bne.n	80052aa <ThreadManager_ComputeNextTimeout$3182+0xae>
 8005292:	e00f      	b.n	80052b4 <ThreadManager_ComputeNextTimeout$3182+0xb8>
 8005294:	9805      	ldr	r0, [sp, #20]
 8005296:	9906      	ldr	r1, [sp, #24]
                }

                node = node.Next;
            }

            SetNextWaitTimer( nextTimeout );
 8005298:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800529a:	9000      	str	r0, [sp, #0]
 800529c:	4610      	mov	r0, r2
 800529e:	460a      	mov	r2, r1
 80052a0:	9b00      	ldr	r3, [sp, #0]
 80052a2:	f000 f84f 	bl	8005344 <ThreadManager_SetNextWaitTimer$16482>
 80052a6:	b014      	add	sp, #80	; 0x50
 80052a8:	bd10      	pop	{r4, pc}
 80052aa:	9801      	ldr	r0, [sp, #4]
 80052ac:	9902      	ldr	r1, [sp, #8]
                SchedulerTime threadTimeout = node.Target.GetFirstTimeout();

                if(nextTimeout > threadTimeout)
                {
                    nextTimeout = threadTimeout;
                }
 80052ae:	9003      	str	r0, [sp, #12]
 80052b0:	9104      	str	r1, [sp, #16]
 80052b2:	e7ff      	b.n	80052b4 <ThreadManager_ComputeNextTimeout$3182+0xb8>
 80052b4:	9804      	ldr	r0, [sp, #16]
 80052b6:	9903      	ldr	r1, [sp, #12]

        public virtual void InitializeAfterStaticConstructors( uint[] systemStack )
        {
            m_allThreads          = new KernelList< ThreadImpl >();
            m_readyThreads        = new KernelList< ThreadImpl >();
            m_waitingThreads      = new KernelList< ThreadImpl >();
 80052b8:	9a08      	ldr	r2, [sp, #32]
 80052ba:	6893      	ldr	r3, [r2, #8]
                {
                    nextTimeout = threadTimeout;
                }

                node = node.Next;
            }
 80052bc:	910b      	str	r1, [sp, #44]	; 0x2c
 80052be:	900c      	str	r0, [sp, #48]	; 0x30
 80052c0:	930a      	str	r3, [sp, #40]	; 0x28
 80052c2:	e7b2      	b.n	800522a <ThreadManager_ComputeNextTimeout$3182+0x2e>
 80052c4:	fffffe3c 	.word	0xfffffe3c
 80052c8:	17ffc5ca 	.word	0x17ffc5ca

080052cc <ThreadManager_WaitExpired$3181>:
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	4601      	mov	r1, r0
 80052d2:	f04f 0c01 	mov.w	ip, #1
 80052d6:	f880 c020 	strb.w	ip, [r0, #32]

        protected void WaitExpired( SchedulerTime currentTime )
        {
            m_noInvalidateNextWaitTimerRecursion = true;

            KernelNode< ThreadImpl > node = m_waitingThreads.StartOfForwardWalk;
 80052da:	6900      	ldr	r0, [r0, #16]
 80052dc:	9105      	str	r1, [sp, #20]
 80052de:	9304      	str	r3, [sp, #16]
 80052e0:	9203      	str	r2, [sp, #12]
 80052e2:	f000 f81f 	bl	8005324 <KernelList`1_get_StartOfForwardWalk$17242>
 80052e6:	9002      	str	r0, [sp, #8]
 80052e8:	e7ff      	b.n	80052ea <ThreadManager_WaitExpired$3181+0x1e>

            while(node.IsValidForForwardMove)
 80052ea:	9802      	ldr	r0, [sp, #8]
 80052ec:	9902      	ldr	r1, [sp, #8]
 80052ee:	9101      	str	r1, [sp, #4]
 80052f0:	f000 f81f 	bl	8005332 <KernelNode`1_get_IsValidForForwardMove$17274>
 80052f4:	f010 0fff 	tst.w	r0, #255	; 0xff
 80052f8:	d00b      	beq.n	8005312 <ThreadManager_WaitExpired$3181+0x46>
 80052fa:	e7ff      	b.n	80052fc <ThreadManager_WaitExpired$3181+0x30>

        public virtual void InitializeAfterStaticConstructors( uint[] systemStack )
        {
            m_allThreads          = new KernelList< ThreadImpl >();
            m_readyThreads        = new KernelList< ThreadImpl >();
            m_waitingThreads      = new KernelList< ThreadImpl >();
 80052fc:	9801      	ldr	r0, [sp, #4]
 80052fe:	6881      	ldr	r1, [r0, #8]
            ThreadImpl bootstrapThread = m_idleThread;

            m_runningThread = bootstrapThread;
            bootstrapThread.AcquiredProcessor();

            //
 8005300:	6900      	ldr	r0, [r0, #16]

            while(node.IsValidForForwardMove)
            {
                KernelNode< ThreadImpl > nodeNext = node.Next;

                node.Target.ProcessWaitExpiration( currentTime );
 8005302:	9a03      	ldr	r2, [sp, #12]
 8005304:	9b04      	ldr	r3, [sp, #16]
 8005306:	9100      	str	r1, [sp, #0]
 8005308:	f7ff f89a 	bl	8004440 <Thread_ProcessWaitExpiration$4010>
 800530c:	9800      	ldr	r0, [sp, #0]

                node = nodeNext;
            }
 800530e:	9002      	str	r0, [sp, #8]
 8005310:	e7eb      	b.n	80052ea <ThreadManager_WaitExpired$3181+0x1e>
 8005312:	2000      	movs	r0, #0
 8005314:	9905      	ldr	r1, [sp, #20]
 8005316:	f881 0020 	strb.w	r0, [r1, #32]

            m_noInvalidateNextWaitTimerRecursion = false;

            ComputeNextTimeout();
 800531a:	4608      	mov	r0, r1
 800531c:	f7ff ff6e 	bl	80051fc <ThreadManager_ComputeNextTimeout$3182>
 8005320:	b006      	add	sp, #24
 8005322:	bd80      	pop	{r7, pc}

08005324 <KernelList`1_get_StartOfForwardWalk$17242>:
 8005324:	b081      	sub	sp, #4
 8005326:	4601      	mov	r1, r0

        public KernelNode< T > StartOfForwardWalk
        {
            get
            {
                return m_head.Next;
 8005328:	6880      	ldr	r0, [r0, #8]
 800532a:	6880      	ldr	r0, [r0, #8]
 800532c:	9100      	str	r1, [sp, #0]
 800532e:	b001      	add	sp, #4
 8005330:	4770      	bx	lr

08005332 <KernelNode`1_get_IsValidForForwardMove$17274>:
 8005332:	b081      	sub	sp, #4
 8005334:	4601      	mov	r1, r0

        public bool IsValidForForwardMove
        {
            get
            {
                return m_next != null;
 8005336:	6880      	ldr	r0, [r0, #8]
 8005338:	2800      	cmp	r0, #0
 800533a:	bf18      	it	ne
 800533c:	2001      	movne	r0, #1
 800533e:	9100      	str	r1, [sp, #0]
 8005340:	b001      	add	sp, #4
 8005342:	4770      	bx	lr

08005344 <ThreadManager_SetNextWaitTimer$16482>:
 8005344:	b510      	push	{r4, lr}
 8005346:	b08a      	sub	sp, #40	; 0x28
 8005348:	4619      	mov	r1, r3
 800534a:	4694      	mov	ip, r2
 800534c:	9305      	str	r3, [sp, #20]
 800534e:	9204      	str	r2, [sp, #16]
 8005350:	4a15      	ldr	r2, [pc, #84]	; (80053a8 <ThreadManager_SetNextWaitTimer$16482+0x64>)
 8005352:	4b16      	ldr	r3, [pc, #88]	; (80053ac <ThreadManager_SetNextWaitTimer$16482+0x68>)
 8005354:	447b      	add	r3, pc
 8005356:	441a      	add	r2, r3
 8005358:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800535c:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 8005360:	f8dd e010 	ldr.w	lr, [sp, #16]
 8005364:	9c05      	ldr	r4, [sp, #20]
 8005366:	9407      	str	r4, [sp, #28]
 8005368:	f8cd e018 	str.w	lr, [sp, #24]
 800536c:	f8dd e018 	ldr.w	lr, [sp, #24]
 8005370:	9c07      	ldr	r4, [sp, #28]
 8005372:	9209      	str	r2, [sp, #36]	; 0x24
 8005374:	9308      	str	r3, [sp, #32]
            m_timerForWaits = Drivers.SystemTimer.Instance.CreateTimer( WaitExpired );
        }

        public override void SetNextWaitTimer( RT.SchedulerTime nextTimeout )
        {
            if(nextTimeout != RT.SchedulerTime.MaxValue)
 8005376:	4062      	eors	r2, r4
 8005378:	ea83 030e 	eor.w	r3, r3, lr
 800537c:	431a      	orrs	r2, r3
 800537e:	2a00      	cmp	r2, #0
 8005380:	9003      	str	r0, [sp, #12]
 8005382:	9102      	str	r1, [sp, #8]
 8005384:	f8cd c004 	str.w	ip, [sp, #4]
 8005388:	d007      	beq.n	800539a <ThreadManager_SetNextWaitTimer$16482+0x56>
 800538a:	e7ff      	b.n	800538c <ThreadManager_SetNextWaitTimer$16482+0x48>
            {
                m_timerForWaits.Timeout = nextTimeout.Units;
 800538c:	9803      	ldr	r0, [sp, #12]
 800538e:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8005390:	9a04      	ldr	r2, [sp, #16]
 8005392:	9b05      	ldr	r3, [sp, #20]
 8005394:	f00b fbaf 	bl	8010af6 <Timer_set_Timeout$16661>
            }
 8005398:	e004      	b.n	80053a4 <ThreadManager_SetNextWaitTimer$16482+0x60>
            else
            {
                m_timerForWaits.Cancel( );
 800539a:	9803      	ldr	r0, [sp, #12]
 800539c:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800539e:	f00b fb9d 	bl	8010adc <Timer_Cancel$16657>
            }
 80053a2:	e7ff      	b.n	80053a4 <ThreadManager_SetNextWaitTimer$16482+0x60>
 80053a4:	b00a      	add	sp, #40	; 0x28
 80053a6:	bd10      	pop	{r4, pc}
 80053a8:	fffffe3c 	.word	0xfffffe3c
 80053ac:	17ffc47c 	.word	0x17ffc47c

080053b0 <WaitHandle_WaitOne$3940>:
 80053b0:	b5b0      	push	{r4, r5, r7, lr}
 80053b2:	b08a      	sub	sp, #40	; 0x28
 80053b4:	4619      	mov	r1, r3
 80053b6:	4694      	mov	ip, r2
 80053b8:	4686      	mov	lr, r0
}

 80053ba:	f100 0408 	add.w	r4, r0, #8
 80053be:	9408      	str	r4, [sp, #32]
 80053c0:	2400      	movs	r4, #0
 80053c2:	9409      	str	r4, [sp, #36]	; 0x24
 80053c4:	9d08      	ldr	r5, [sp, #32]
 80053c6:	3d08      	subs	r5, #8
 80053c8:	9409      	str	r4, [sp, #36]	; 0x24
 80053ca:	ac09      	add	r4, sp, #36	; 0x24
 80053cc:	3c08      	subs	r4, #8
 80053ce:	9007      	str	r0, [sp, #28]
 80053d0:	4620      	mov	r0, r4
 80053d2:	9106      	str	r1, [sp, #24]
 80053d4:	4629      	mov	r1, r5
 80053d6:	9305      	str	r3, [sp, #20]
 80053d8:	9204      	str	r2, [sp, #16]
 80053da:	f8cd e00c 	str.w	lr, [sp, #12]
 80053de:	f8cd c008 	str.w	ip, [sp, #8]
 80053e2:	f7fb fa6b 	bl	80008bc <UIntPtr_.ctor$2864>
}

 80053e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053e8:	6840      	ldr	r0, [r0, #4]
        //--//

        public bool WaitOne( SchedulerTime timeout     ,
                             bool          exitContext )
        {
            return m_handle.Acquire( timeout );
 80053ea:	69c0      	ldr	r0, [r0, #28]
 80053ec:	6980      	ldr	r0, [r0, #24]
 80053ee:	9907      	ldr	r1, [sp, #28]
 80053f0:	9001      	str	r0, [sp, #4]
 80053f2:	4608      	mov	r0, r1
 80053f4:	9a04      	ldr	r2, [sp, #16]
 80053f6:	9b05      	ldr	r3, [sp, #20]
 80053f8:	f8dd c004 	ldr.w	ip, [sp, #4]
 80053fc:	47e0      	blx	ip
 80053fe:	b00a      	add	sp, #40	; 0x28
 8005400:	bdb0      	pop	{r4, r5, r7, pc}

08005402 <KernelNode`1_InsertBefore$17266>:
 8005402:	b082      	sub	sp, #8
 8005404:	4602      	mov	r2, r0
        // Helper Methods
        //

        public void InsertBefore( KernelNode< T > place )
        {
            if(m_next != null)
 8005406:	6880      	ldr	r0, [r0, #8]
 8005408:	2800      	cmp	r0, #0
 800540a:	9201      	str	r2, [sp, #4]
 800540c:	9100      	str	r1, [sp, #0]
 800540e:	d006      	beq.n	800541e <KernelNode`1_InsertBefore$17266+0x1c>
 8005410:	e7ff      	b.n	8005412 <KernelNode`1_InsertBefore$17266+0x10>
        //--//

        [Inline]
        private void RemoveFromList_NoClear()
        {
            KernelNode< T > next = m_next;
 8005412:	9801      	ldr	r0, [sp, #4]
 8005414:	6881      	ldr	r1, [r0, #8]
            KernelNode< T > prev = m_previous;
 8005416:	68c2      	ldr	r2, [r0, #12]
 8005418:	60ca      	str	r2, [r1, #12]
 800541a:	6091      	str	r1, [r2, #8]
        public void InsertBefore( KernelNode< T > place )
        {
            if(m_next != null)
            {
                RemoveFromList_NoClear();
            }
 800541c:	e7ff      	b.n	800541e <KernelNode`1_InsertBefore$17266+0x1c>

            KernelNode< T > prev = place.m_previous;
 800541e:	9800      	ldr	r0, [sp, #0]
 8005420:	68c1      	ldr	r1, [r0, #12]
 8005422:	9a01      	ldr	r2, [sp, #4]
 8005424:	608a      	str	r2, [r1, #8]
 8005426:	60d1      	str	r1, [r2, #12]
 8005428:	6090      	str	r0, [r2, #8]
 800542a:	60c2      	str	r2, [r0, #12]
 800542c:	b002      	add	sp, #8
 800542e:	4770      	bx	lr

08005430 <ProcessorARMv7M_EnableInterrupts$3258>:
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	f017 fd10 	bl	801ce58 <CMSIS_STUB_SCB__get_BASEPRI>
 8005438:	4905      	ldr	r1, [pc, #20]	; (8005450 <ProcessorARMv7M_EnableInterrupts$3258+0x20>)
 800543a:	4a06      	ldr	r2, [pc, #24]	; (8005454 <ProcessorARMv7M_EnableInterrupts$3258+0x24>)
 800543c:	447a      	add	r2, pc
 800543e:	5889      	ldr	r1, [r1, r2]
 8005440:	9001      	str	r0, [sp, #4]
 8005442:	4608      	mov	r0, r1
 8005444:	f7ff f904 	bl	8004650 <ProcessorARMv7M_DisableInterruptsWithPriorityLevelHigherOrEqualTo$3266>
 8005448:	9801      	ldr	r0, [sp, #4]
 800544a:	b002      	add	sp, #8
 800544c:	bd80      	pop	{r7, pc}
 800544e:	46c0      	nop			; (mov r8, r8)
 8005450:	e8025254 	.word	0xe8025254
 8005454:	17ffc394 	.word	0x17ffc394

08005458 <Program_Main$131>:
 8005458:	b580      	push	{r7, lr}
 800545a:	b0bc      	sub	sp, #240	; 0xf0
 800545c:	f8df 041c 	ldr.w	r0, [pc, #1052]	; 800587c <Program_Main$131+0x424>
 8005460:	f8df 141c 	ldr.w	r1, [pc, #1052]	; 8005880 <Program_Main$131+0x428>
 8005464:	4479      	add	r1, pc
 8005466:	4408      	add	r0, r1
 8005468:	f8df 2418 	ldr.w	r2, [pc, #1048]	; 8005884 <Program_Main$131+0x42c>
 800546c:	440a      	add	r2, r1
 800546e:	9039      	str	r0, [sp, #228]	; 0xe4
 8005470:	9138      	str	r1, [sp, #224]	; 0xe0
 8005472:	4611      	mov	r1, r2
 8005474:	f7fb f9a4 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
        }

        public struct InterfaceMap
        {
            public static readonly InterfaceMap[] SharedEmptyArray = new InterfaceMap[0];

 8005478:	f8df 140c 	ldr.w	r1, [pc, #1036]	; 8005888 <Program_Main$131+0x430>
 800547c:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 800547e:	4411      	add	r1, r2
        [NoInline]
        private bool CanBeAssignedFrom_Slow( VTable source )
        {
            if(source.IsSubclassOf( this ))
            {
                return true;
 8005480:	f8d1 30cc 	ldr.w	r3, [r1, #204]	; 0xcc
        }

        public struct InterfaceMap
        {
            public static readonly InterfaceMap[] SharedEmptyArray = new InterfaceMap[0];

 8005484:	f8d1 1108 	ldr.w	r1, [r1, #264]	; 0x108

        public bool IsArray
        {
            [Inline]
            get
            {
 8005488:	689a      	ldr	r2, [r3, #8]
        [NoInline]
        private bool CanBeAssignedFrom_Slow( VTable source )
        {
            if(source.IsSubclassOf( this ))
            {
                return true;
 800548a:	f8df 3400 	ldr.w	r3, [pc, #1024]	; 800588c <Program_Main$131+0x434>
 800548e:	f8dd c0e0 	ldr.w	ip, [sp, #224]	; 0xe0
 8005492:	4463      	add	r3, ip
 8005494:	f8dd e0e4 	ldr.w	lr, [sp, #228]	; 0xe4
 8005498:	9037      	str	r0, [sp, #220]	; 0xdc
 800549a:	4670      	mov	r0, lr
 800549c:	9136      	str	r1, [sp, #216]	; 0xd8
 800549e:	4619      	mov	r1, r3
 80054a0:	f7fc fe7e 	bl	80021a0 <DefaultTypeSystemManager_AllocateArray$4962>
 80054a4:	2100      	movs	r1, #0
            }

 80054a6:	9035      	str	r0, [sp, #212]	; 0xd4
 80054a8:	9134      	str	r1, [sp, #208]	; 0xd0
 80054aa:	e7ff      	b.n	80054ac <Program_Main$131+0x54>
 80054ac:	9834      	ldr	r0, [sp, #208]	; 0xd0
 80054ae:	f8df 13d8 	ldr.w	r1, [pc, #984]	; 8005888 <Program_Main$131+0x430>
 80054b2:	f8df 23dc 	ldr.w	r2, [pc, #988]	; 8005890 <Program_Main$131+0x438>
 80054b6:	447a      	add	r2, pc
 80054b8:	4411      	add	r1, r2
 80054ba:	f8d1 10cc 	ldr.w	r1, [r1, #204]	; 0xcc

        public bool IsArray
        {
            [Inline]
            get
            {
 80054be:	6889      	ldr	r1, [r1, #8]
        {
            if(source.IsSubclassOf( this ))
            {
                return true;
            }

 80054c0:	4288      	cmp	r0, r1
 80054c2:	9033      	str	r0, [sp, #204]	; 0xcc
 80054c4:	da2c      	bge.n	8005520 <Program_Main$131+0xc8>
 80054c6:	e7ff      	b.n	80054c8 <Program_Main$131+0x70>
            if(this.IsArray && source.IsArray)
            {
 80054c8:	f8df 03bc 	ldr.w	r0, [pc, #956]	; 8005888 <Program_Main$131+0x430>
 80054cc:	f8df 143c 	ldr.w	r1, [pc, #1084]	; 800590c <Program_Main$131+0x4b4>
 80054d0:	4479      	add	r1, pc
 80054d2:	4408      	add	r0, r1
 80054d4:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
 80054d8:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 80054da:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80054de:	68c0      	ldr	r0, [r0, #12]
 80054e0:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80054e2:	9032      	str	r0, [sp, #200]	; 0xc8
 80054e4:	4618      	mov	r0, r3
 80054e6:	f8dd c0c8 	ldr.w	ip, [sp, #200]	; 0xc8
 80054ea:	9131      	str	r1, [sp, #196]	; 0xc4
 80054ec:	4661      	mov	r1, ip
 80054ee:	f000 fff7 	bl	80064e0 <GpioController_OpenPin$16231>
 80054f2:	f8df 141c 	ldr.w	r1, [pc, #1052]	; 8005910 <Program_Main$131+0x4b8>
 80054f6:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 80054f8:	5889      	ldr	r1, [r1, r2]
                CHECKS.ASSERT( this.ShapeCategory == Shape.SzArray || this.ShapeCategory == Shape.MultiArray, "Found array that does not inherit from System.Array" );

                if(this.ShapeCategory == source.ShapeCategory)
 80054fa:	9030      	str	r0, [sp, #192]	; 0xc0
 80054fc:	f001 f9f8 	bl	80068f0 <GpioPin_Write$16270>
 8005500:	f8df 0410 	ldr.w	r0, [pc, #1040]	; 8005914 <Program_Main$131+0x4bc>
 8005504:	9931      	ldr	r1, [sp, #196]	; 0xc4
 8005506:	5841      	ldr	r1, [r0, r1]
                {
 8005508:	9830      	ldr	r0, [sp, #192]	; 0xc0
 800550a:	f000 fff3 	bl	80064f4 <GpioPin_SetDriveMode$16273>
                    ArrayReferenceTypeRepresentation tdThis   = (ArrayReferenceTypeRepresentation)this  .TypeInfo;
                    ArrayReferenceTypeRepresentation tdSource = (ArrayReferenceTypeRepresentation)source.TypeInfo;
 800550e:	9835      	ldr	r0, [sp, #212]	; 0xd4
 8005510:	9933      	ldr	r1, [sp, #204]	; 0xcc
 8005512:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8005516:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8005518:	60d3      	str	r3, [r2, #12]
        {
            if(source.IsSubclassOf( this ))
            {
                return true;
            }

 800551a:	1c4a      	adds	r2, r1, #1
 800551c:	9234      	str	r2, [sp, #208]	; 0xd0
 800551e:	e7c5      	b.n	80054ac <Program_Main$131+0x54>
 8005520:	48d9      	ldr	r0, [pc, #868]	; (8005888 <Program_Main$131+0x430>)
 8005522:	49dc      	ldr	r1, [pc, #880]	; (8005894 <Program_Main$131+0x43c>)
 8005524:	4479      	add	r1, pc
 8005526:	4408      	add	r0, r1
 8005528:	f8d0 20d0 	ldr.w	r2, [r0, #208]	; 0xd0
                {
                    ArrayReferenceTypeRepresentation tdThis   = (ArrayReferenceTypeRepresentation)this  .TypeInfo;
                    ArrayReferenceTypeRepresentation tdSource = (ArrayReferenceTypeRepresentation)source.TypeInfo;

                    if(tdThis.SameShape( tdSource ))
                    {
 800552c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800552e:	902f      	str	r0, [sp, #188]	; 0xbc
 8005530:	4618      	mov	r0, r3
 8005532:	912e      	str	r1, [sp, #184]	; 0xb8
 8005534:	4611      	mov	r1, r2
 8005536:	f000 ffd3 	bl	80064e0 <GpioController_OpenPin$16231>
 800553a:	9937      	ldr	r1, [sp, #220]	; 0xdc
 800553c:	60c8      	str	r0, [r1, #12]
 800553e:	4ad6      	ldr	r2, [pc, #856]	; (8005898 <Program_Main$131+0x440>)
 8005540:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8005542:	58d1      	ldr	r1, [r2, r3]
                        TypeRepresentation subThis   = tdThis  .ContainedType.UnderlyingType;
 8005544:	f000 ffd6 	bl	80064f4 <GpioPin_SetDriveMode$16273>
 8005548:	48d4      	ldr	r0, [pc, #848]	; (800589c <Program_Main$131+0x444>)
 800554a:	992e      	ldr	r1, [sp, #184]	; 0xb8
 800554c:	5842      	ldr	r2, [r0, r1]
                        TypeRepresentation subSource = tdSource.ContainedType.UnderlyingType;

 800554e:	48cb      	ldr	r0, [pc, #812]	; (800587c <Program_Main$131+0x424>)
 8005550:	4408      	add	r0, r1
 8005552:	4bd3      	ldr	r3, [pc, #844]	; (80058a0 <Program_Main$131+0x448>)
 8005554:	4419      	add	r1, r3
 8005556:	902d      	str	r0, [sp, #180]	; 0xb4
 8005558:	f7fc fe22 	bl	80021a0 <DefaultTypeSystemManager_AllocateArray$4962>
 800555c:	4601      	mov	r1, r0
                        VTable subVTableThis   = subThis  .VirtualTable;
 800555e:	4ad1      	ldr	r2, [pc, #836]	; (80058a4 <Program_Main$131+0x44c>)
 8005560:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8005562:	441a      	add	r2, r3
 8005564:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
 8005568:	902c      	str	r0, [sp, #176]	; 0xb0
 800556a:	4660      	mov	r0, ip
 800556c:	912b      	str	r1, [sp, #172]	; 0xac
 800556e:	4611      	mov	r1, r2
 8005570:	f7fb f926 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8005574:	902a      	str	r0, [sp, #168]	; 0xa8
 8005576:	9935      	ldr	r1, [sp, #212]	; 0xd4
 8005578:	f001 f837 	bl	80065ea <LedTogglerSimultaneous_.ctor$16320>
 800557c:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800557e:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8005580:	60c8      	str	r0, [r1, #12]
                        VTable subVTableSource = subSource.VirtualTable;
 8005582:	4ac9      	ldr	r2, [pc, #804]	; (80058a8 <Program_Main$131+0x450>)
 8005584:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8005586:	18d1      	adds	r1, r2, r3
 8005588:	982d      	ldr	r0, [sp, #180]	; 0xb4
 800558a:	f7fb f919 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800558e:	9029      	str	r0, [sp, #164]	; 0xa4
 8005590:	9935      	ldr	r1, [sp, #212]	; 0xd4
 8005592:	f001 f866 	bl	8006662 <LedTogglerSequential_.ctor$16322>
 8005596:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8005598:	992c      	ldr	r1, [sp, #176]	; 0xb0
 800559a:	6108      	str	r0, [r1, #16]

 800559c:	4ac3      	ldr	r2, [pc, #780]	; (80058ac <Program_Main$131+0x454>)
 800559e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80055a0:	18d1      	adds	r1, r2, r3
 80055a2:	982d      	ldr	r0, [sp, #180]	; 0xb4
 80055a4:	f7fb f90c 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 80055a8:	9028      	str	r0, [sp, #160]	; 0xa0
 80055aa:	9935      	ldr	r1, [sp, #212]	; 0xd4
 80055ac:	f001 f899 	bl	80066e2 <LedTogglerAlternate_.ctor$16324>
 80055b0:	9828      	ldr	r0, [sp, #160]	; 0xa0
 80055b2:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80055b4:	6148      	str	r0, [r1, #20]
                        if(subVTableThis == subVTableSource)
                        {
 80055b6:	4abe      	ldr	r2, [pc, #760]	; (80058b0 <Program_Main$131+0x458>)
 80055b8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80055ba:	441a      	add	r2, r3
 80055bc:	982d      	ldr	r0, [sp, #180]	; 0xb4
 80055be:	4611      	mov	r1, r2
 80055c0:	9227      	str	r2, [sp, #156]	; 0x9c
 80055c2:	f7fb f8fd 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 80055c6:	4601      	mov	r1, r0
 80055c8:	9026      	str	r0, [sp, #152]	; 0x98
 80055ca:	9125      	str	r1, [sp, #148]	; 0x94
 80055cc:	f001 f893 	bl	80066f6 <Timer_.ctor$16364>
                            return true;
 80055d0:	982d      	ldr	r0, [sp, #180]	; 0xb4
 80055d2:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80055d4:	f7fb f8f4 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 80055d8:	4601      	mov	r1, r0
 80055da:	9024      	str	r0, [sp, #144]	; 0x90
 80055dc:	9123      	str	r1, [sp, #140]	; 0x8c
 80055de:	f001 f88a 	bl	80066f6 <Timer_.ctor$16364>
                        }

 80055e2:	9826      	ldr	r0, [sp, #152]	; 0x98
 80055e4:	f001 f88f 	bl	8006706 <Timer_start$16365>
                        if(subVTableSource.IsValueType)
 80055e8:	9824      	ldr	r0, [sp, #144]	; 0x90
 80055ea:	f001 f88c 	bl	8006706 <Timer_start$16365>
                        {
                            //
                            // We require exact matching for value types.
                            //
                            return false;
 80055ee:	f001 f89b 	bl	8006728 <SpiDevice_GetDeviceSelector$16149>
                        }
 80055f2:	f001 f8cd 	bl	8006790 <DeviceInformation_FindAllAsync$16297>
 80055f6:	2100      	movs	r1, #0

 80055f8:	9122      	str	r1, [sp, #136]	; 0x88
 80055fa:	f001 f8f9 	bl	80067f0 <List`1_get_Item$22648>
            SzArray    = Reference | Array | 0x06,
            MultiArray = Reference | Array | 0x07,

            ValueType = 0x20,
            Reference = 0x40,
            Array     = 0x80,
 80055fe:	6880      	ldr	r0, [r0, #8]

                        return subVTableThis.CanBeAssignedFrom_Slow( subVTableSource );
                    }
                }
            }

 8005600:	49ac      	ldr	r1, [pc, #688]	; (80058b4 <Program_Main$131+0x45c>)
 8005602:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8005604:	4411      	add	r1, r2
 8005606:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8005608:	9021      	str	r0, [sp, #132]	; 0x84
 800560a:	4618      	mov	r0, r3
 800560c:	f7fb f8d8 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8005610:	49a9      	ldr	r1, [pc, #676]	; (80058b8 <Program_Main$131+0x460>)
 8005612:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8005614:	5889      	ldr	r1, [r1, r2]
 8005616:	9020      	str	r0, [sp, #128]	; 0x80
 8005618:	f001 f900 	bl	800681c <SpiConnectionSettings_.ctor$16125>
 800561c:	48a7      	ldr	r0, [pc, #668]	; (80058bc <Program_Main$131+0x464>)
 800561e:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8005620:	5841      	ldr	r1, [r0, r1]
 8005622:	9820      	ldr	r0, [sp, #128]	; 0x80
 8005624:	f001 f924 	bl	8006870 <SpiConnectionSettings_set_ClockFrequency$16129>
 8005628:	48a5      	ldr	r0, [pc, #660]	; (80058c0 <Program_Main$131+0x468>)
 800562a:	992e      	ldr	r1, [sp, #184]	; 0xb8
 800562c:	5841      	ldr	r1, [r0, r1]
 800562e:	9820      	ldr	r0, [sp, #128]	; 0x80
 8005630:	f001 f926 	bl	8006880 <SpiConnectionSettings_set_Mode$16133>
            return false;
        }

        [NoInline]
        public bool IsSubclassOf( VTable target )
 8005634:	9821      	ldr	r0, [sp, #132]	; 0x84
 8005636:	9920      	ldr	r1, [sp, #128]	; 0x80
 8005638:	f001 f92a 	bl	8006890 <SpiDevice_FromIdAsync$16144>
 800563c:	49a1      	ldr	r1, [pc, #644]	; (80058c4 <Program_Main$131+0x46c>)
 800563e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8005640:	588a      	ldr	r2, [r1, r2]
        {
 8005642:	49a1      	ldr	r1, [pc, #644]	; (80058c8 <Program_Main$131+0x470>)
 8005644:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8005646:	4419      	add	r1, r3
 8005648:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
 800564c:	901f      	str	r0, [sp, #124]	; 0x7c
 800564e:	4660      	mov	r0, ip
 8005650:	911e      	str	r1, [sp, #120]	; 0x78
 8005652:	f7fc fda5 	bl	80021a0 <DefaultTypeSystemManager_AllocateArray$4962>
 8005656:	499d      	ldr	r1, [pc, #628]	; (80058cc <Program_Main$131+0x474>)
 8005658:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800565a:	588a      	ldr	r2, [r1, r2]
            TypeRepresentation td = this.TypeInfo;
 800565c:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800565e:	901d      	str	r0, [sp, #116]	; 0x74
 8005660:	4608      	mov	r0, r1
 8005662:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005664:	f7fc fd9c 	bl	80021a0 <DefaultTypeSystemManager_AllocateArray$4962>
        {
            Invalid    =                     0x00,
            Scalar     = ValueType |         0x01,
            Struct     = ValueType |         0x02,
            Interface  = Reference |         0x03,
            Class      = Reference |         0x04,
 8005668:	4999      	ldr	r1, [pc, #612]	; (80058d0 <Program_Main$131+0x478>)
 800566a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800566c:	4411      	add	r1, r2
 800566e:	2203      	movs	r2, #3
 8005670:	901c      	str	r0, [sp, #112]	; 0x70
 8005672:	4608      	mov	r0, r1
 8005674:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005676:	f7fa ff09 	bl	800048c <Array_Copy$1371>
 800567a:	4896      	ldr	r0, [pc, #600]	; (80058d4 <Program_Main$131+0x47c>)
 800567c:	992e      	ldr	r1, [sp, #184]	; 0xb8
 800567e:	5842      	ldr	r2, [r0, r1]

        [NoInline]
        public bool IsSubclassOf( VTable target )
        {
            TypeRepresentation td = this.TypeInfo;
            while(td != null)
 8005680:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8005682:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005684:	f7fc fd8c 	bl	80021a0 <DefaultTypeSystemManager_AllocateArray$4962>
 8005688:	2101      	movs	r1, #1
 800568a:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 800568c:	6111      	str	r1, [r2, #16]
                }
            }

            return false;
        }

 800568e:	68d3      	ldr	r3, [r2, #12]
 8005690:	901b      	str	r0, [sp, #108]	; 0x6c
 8005692:	4618      	mov	r0, r3
 8005694:	f001 f92c 	bl	80068f0 <GpioPin_Write$16270>
 8005698:	488f      	ldr	r0, [pc, #572]	; (80058d8 <Program_Main$131+0x480>)
 800569a:	992e      	ldr	r1, [sp, #184]	; 0xb8
 800569c:	5840      	ldr	r0, [r0, r1]
        //
 800569e:	f001 f963 	bl	8006968 <Timer_wait_ms$16362>
        // Access Methods
 80056a2:	9837      	ldr	r0, [sp, #220]	; 0xdc
 80056a4:	68c0      	ldr	r0, [r0, #12]
 80056a6:	9922      	ldr	r1, [sp, #136]	; 0x88
 80056a8:	f001 f922 	bl	80068f0 <GpioPin_Write$16270>
 80056ac:	488b      	ldr	r0, [pc, #556]	; (80058dc <Program_Main$131+0x484>)
 80056ae:	992e      	ldr	r1, [sp, #184]	; 0xb8
 80056b0:	5840      	ldr	r0, [r0, r1]
        //
 80056b2:	f001 f959 	bl	8006968 <Timer_wait_ms$16362>

 80056b6:	9837      	ldr	r0, [sp, #220]	; 0xdc
 80056b8:	68c0      	ldr	r0, [r0, #12]
 80056ba:	9937      	ldr	r1, [sp, #220]	; 0xdc
 80056bc:	6909      	ldr	r1, [r1, #16]
 80056be:	f001 f917 	bl	80068f0 <GpioPin_Write$16270>
 80056c2:	9822      	ldr	r0, [sp, #136]	; 0x88
 80056c4:	9937      	ldr	r1, [sp, #220]	; 0xdc
 80056c6:	6108      	str	r0, [r1, #16]
        public bool IsArray
        {
            [Inline]
            get
 80056c8:	4a85      	ldr	r2, [pc, #532]	; (80058e0 <Program_Main$131+0x488>)
 80056ca:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80056cc:	18d1      	adds	r1, r2, r3
 80056ce:	982d      	ldr	r0, [sp, #180]	; 0xb4
 80056d0:	f7fb f876 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 80056d4:	901a      	str	r0, [sp, #104]	; 0x68
 80056d6:	f001 f960 	bl	800699a <AutoResetEvent_.ctor$7570>
 80056da:	981a      	ldr	r0, [sp, #104]	; 0x68
 80056dc:	9937      	ldr	r1, [sp, #220]	; 0xdc
 80056de:	6088      	str	r0, [r1, #8]
            {
 80056e0:	4a80      	ldr	r2, [pc, #512]	; (80058e4 <Program_Main$131+0x48c>)
 80056e2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80056e4:	18d1      	adds	r1, r2, r3
 80056e6:	982d      	ldr	r0, [sp, #180]	; 0xb4
 80056e8:	f7fb f86a 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 80056ec:	497e      	ldr	r1, [pc, #504]	; (80058e8 <Program_Main$131+0x490>)
 80056ee:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80056f0:	440a      	add	r2, r1
 80056f2:	9019      	str	r0, [sp, #100]	; 0x64
 80056f4:	9937      	ldr	r1, [sp, #220]	; 0xdc
 80056f6:	f7fc f9e1 	bl	8001abc <MulticastDelegate_.ctor$4629>
 80056fa:	487c      	ldr	r0, [pc, #496]	; (80058ec <Program_Main$131+0x494>)
 80056fc:	992e      	ldr	r1, [sp, #184]	; 0xb8
 80056fe:	4401      	add	r1, r0
 8005700:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8005702:	f7fb f85d 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8005706:	9018      	str	r0, [sp, #96]	; 0x60
 8005708:	9919      	ldr	r1, [sp, #100]	; 0x64
 800570a:	f7fd ff8b 	bl	8003624 <Thread_.ctor$3991>
        {
            [Inline]
            get
            {
                return (this.ShapeCategory & Shape.ValueType) != 0;
            }
 800570e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8005710:	f7fe f858 	bl	80037c4 <Thread_Start$3993>
        }

 8005714:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8005716:	f8d0 10c4 	ldr.w	r1, [r0, #196]	; 0xc4
 800571a:	2900      	cmp	r1, #0
 800571c:	9117      	str	r1, [sp, #92]	; 0x5c
 800571e:	d022      	beq.n	8005766 <Program_Main$131+0x30e>
 8005720:	e7ff      	b.n	8005722 <Program_Main$131+0x2ca>
 8005722:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005724:	9937      	ldr	r1, [sp, #220]	; 0xdc
 8005726:	688a      	ldr	r2, [r1, #8]
 8005728:	4b54      	ldr	r3, [pc, #336]	; (800587c <Program_Main$131+0x424>)
 800572a:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 80058fc <Program_Main$131+0x4a4>
 800572e:	44fc      	add	ip, pc
 8005730:	4463      	add	r3, ip
 8005732:	f8df e1cc 	ldr.w	lr, [pc, #460]	; 8005900 <Program_Main$131+0x4a8>
 8005736:	eb0e 010c 	add.w	r1, lr, ip
 800573a:	9016      	str	r0, [sp, #88]	; 0x58
 800573c:	4618      	mov	r0, r3
 800573e:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 8005742:	9214      	str	r2, [sp, #80]	; 0x50
 8005744:	f7fb f83c 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8005748:	496e      	ldr	r1, [pc, #440]	; (8005904 <Program_Main$131+0x4ac>)
 800574a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800574c:	588b      	ldr	r3, [r1, r2]
 800574e:	496e      	ldr	r1, [pc, #440]	; (8005908 <Program_Main$131+0x4b0>)
 8005750:	5889      	ldr	r1, [r1, r2]
 8005752:	46ec      	mov	ip, sp
 8005754:	f8cc 1000 	str.w	r1, [ip]
 8005758:	9916      	ldr	r1, [sp, #88]	; 0x58
 800575a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800575c:	f001 f9a0 	bl	8006aa0 <Timer_.ctor$3910>
 8005760:	2000      	movs	r0, #0
 8005762:	9013      	str	r0, [sp, #76]	; 0x4c
 8005764:	e01e      	b.n	80057a4 <Program_Main$131+0x34c>
 8005766:	4848      	ldr	r0, [pc, #288]	; (8005888 <Program_Main$131+0x430>)
 8005768:	4961      	ldr	r1, [pc, #388]	; (80058f0 <Program_Main$131+0x498>)
 800576a:	4479      	add	r1, pc
 800576c:	4408      	add	r0, r1
 800576e:	f8d0 20c8 	ldr.w	r2, [r0, #200]	; 0xc8
 8005772:	4b42      	ldr	r3, [pc, #264]	; (800587c <Program_Main$131+0x424>)
 8005774:	440b      	add	r3, r1
 8005776:	f8df c17c 	ldr.w	ip, [pc, #380]	; 80058f4 <Program_Main$131+0x49c>
 800577a:	448c      	add	ip, r1
 800577c:	9012      	str	r0, [sp, #72]	; 0x48
 800577e:	4618      	mov	r0, r3
 8005780:	9111      	str	r1, [sp, #68]	; 0x44
 8005782:	4661      	mov	r1, ip
 8005784:	9210      	str	r2, [sp, #64]	; 0x40
 8005786:	f7fb f81b 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800578a:	495b      	ldr	r1, [pc, #364]	; (80058f8 <Program_Main$131+0x4a0>)
 800578c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800578e:	440a      	add	r2, r1
 8005790:	900f      	str	r0, [sp, #60]	; 0x3c
 8005792:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005794:	f7fc f992 	bl	8001abc <MulticastDelegate_.ctor$4629>
 8005798:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800579a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800579c:	f8c1 00c4 	str.w	r0, [r1, #196]	; 0xc4
 80057a0:	9017      	str	r0, [sp, #92]	; 0x5c
 80057a2:	e7be      	b.n	8005722 <Program_Main$131+0x2ca>
 80057a4:	9813      	ldr	r0, [sp, #76]	; 0x4c
        // Debug Methods
        //

        public override string ToString()
        {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
 80057a6:	9925      	ldr	r1, [sp, #148]	; 0x94
 80057a8:	900e      	str	r0, [sp, #56]	; 0x38
 80057aa:	4608      	mov	r0, r1
 80057ac:	f001 f99a 	bl	8006ae4 <Timer_read$16368>
 80057b0:	f04f 517d 	mov.w	r1, #1061158912	; 0x3f400000
 80057b4:	900d      	str	r0, [sp, #52]	; 0x34
 80057b6:	910c      	str	r1, [sp, #48]	; 0x30
 80057b8:	f01f fdfa 	bl	80253b0 <__aeabi_fcmplt>
 80057bc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80057be:	900b      	str	r0, [sp, #44]	; 0x2c
 80057c0:	4608      	mov	r0, r1
 80057c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80057c4:	f01f fe1c 	bl	8025400 <__aeabi_fcmpun>
 80057c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80057ca:	4308      	orrs	r0, r1
 80057cc:	2800      	cmp	r0, #0
 80057ce:	d104      	bne.n	80057da <Program_Main$131+0x382>
 80057d0:	e7ff      	b.n	80057d2 <Program_Main$131+0x37a>

            sb.AppendFormat( "VTable({0})", this.TypeInfo );
 80057d2:	9825      	ldr	r0, [sp, #148]	; 0x94
 80057d4:	f001 f996 	bl	8006b04 <Timer_reset$16367>

 80057d8:	e7ff      	b.n	80057da <Program_Main$131+0x382>
            return sb.ToString();
        }
 80057da:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80057dc:	f001 f982 	bl	8006ae4 <Timer_read$16368>
 80057e0:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80057e4:	900a      	str	r0, [sp, #40]	; 0x28
 80057e6:	9109      	str	r1, [sp, #36]	; 0x24
 80057e8:	f01f fde2 	bl	80253b0 <__aeabi_fcmplt>
 80057ec:	990a      	ldr	r1, [sp, #40]	; 0x28
 80057ee:	9008      	str	r0, [sp, #32]
 80057f0:	4608      	mov	r0, r1
 80057f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80057f4:	f01f fe04 	bl	8025400 <__aeabi_fcmpun>
 80057f8:	9908      	ldr	r1, [sp, #32]
 80057fa:	4308      	orrs	r0, r1
 80057fc:	2800      	cmp	r0, #0
 80057fe:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005800:	9007      	str	r0, [sp, #28]
 8005802:	d10f      	bne.n	8005824 <Program_Main$131+0x3cc>
 8005804:	e7ff      	b.n	8005806 <Program_Main$131+0x3ae>
    }
}
 8005806:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005808:	1c41      	adds	r1, r0, #1

        public bool IsArray
        {
            [Inline]
            get
            {
 800580a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800580c:	6893      	ldr	r3, [r2, #8]
            sb.AppendFormat( "VTable({0})", this.TypeInfo );

            return sb.ToString();
        }
    }
}
 800580e:	fb91 fcf3 	sdiv	ip, r1, r3
 8005812:	fb0c 1113 	mls	r1, ip, r3, r1
 8005816:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8005818:	9106      	str	r1, [sp, #24]
 800581a:	f001 f973 	bl	8006b04 <Timer_reset$16367>
 800581e:	9806      	ldr	r0, [sp, #24]
 8005820:	9007      	str	r0, [sp, #28]
 8005822:	e7ff      	b.n	8005824 <Program_Main$131+0x3cc>
 8005824:	9807      	ldr	r0, [sp, #28]
 8005826:	992b      	ldr	r1, [sp, #172]	; 0xac
 8005828:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 800582c:	68d2      	ldr	r2, [r2, #12]
 800582e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8005830:	9005      	str	r0, [sp, #20]
 8005832:	4618      	mov	r0, r3
 8005834:	9204      	str	r2, [sp, #16]
 8005836:	f001 f955 	bl	8006ae4 <Timer_read$16368>
 800583a:	f04f 517d 	mov.w	r1, #1061158912	; 0x3f400000
 800583e:	f01f fccd 	bl	80251dc <__aeabi_fdiv>
        // Constructor Methods
        //

        public VTable( TypeRepresentation owner )
        {
            this.TypeInfo                = owner;
 8005842:	9904      	ldr	r1, [sp, #16]
 8005844:	f101 0208 	add.w	r2, r1, #8
 8005848:	923a      	str	r2, [sp, #232]	; 0xe8
 800584a:	2200      	movs	r2, #0
 800584c:	923b      	str	r2, [sp, #236]	; 0xec
            return GetFromTypeHandle( t.TypeHandle );
        }

        [MethodImpl( MethodImplOptions.InternalCall )]
        public extern static VTable GetFromTypeHandle( RuntimeTypeHandle hnd );

 800584e:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
        }

        //--//

        public void ApplyTransformation( TransformationContext context )
        {
 8005850:	f1a3 0108 	sub.w	r1, r3, #8
 8005854:	923b      	str	r2, [sp, #236]	; 0xec
 8005856:	aa3b      	add	r2, sp, #236	; 0xec
 8005858:	3a08      	subs	r2, #8
 800585a:	9003      	str	r0, [sp, #12]
 800585c:	4610      	mov	r0, r2
 800585e:	f7fb f82d 	bl	80008bc <UIntPtr_.ctor$2864>
        // Constructor Methods
        //

        public VTable( TypeRepresentation owner )
        {
            this.TypeInfo                = owner;
 8005862:	983b      	ldr	r0, [sp, #236]	; 0xec

        public override string ToString()
        {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();

            sb.AppendFormat( "VTable({0})", this.TypeInfo );
 8005864:	6840      	ldr	r0, [r0, #4]
 8005866:	69c0      	ldr	r0, [r0, #28]
 8005868:	6980      	ldr	r0, [r0, #24]
 800586a:	9904      	ldr	r1, [sp, #16]
 800586c:	9002      	str	r0, [sp, #8]
 800586e:	4608      	mov	r0, r1
 8005870:	9903      	ldr	r1, [sp, #12]
 8005872:	9a02      	ldr	r2, [sp, #8]
 8005874:	4790      	blx	r2
 8005876:	9805      	ldr	r0, [sp, #20]
 8005878:	9013      	str	r0, [sp, #76]	; 0x4c
 800587a:	e793      	b.n	80057a4 <Program_Main$131+0x34c>
 800587c:	ffffea38 	.word	0xffffea38
 8005880:	17ffc36c 	.word	0x17ffc36c
 8005884:	e801190c 	.word	0xe801190c
 8005888:	fffffe3c 	.word	0xfffffe3c
 800588c:	e801199c 	.word	0xe801199c
 8005890:	17ffc31a 	.word	0x17ffc31a
 8005894:	17ffc2ac 	.word	0x17ffc2ac
 8005898:	e8025264 	.word	0xe8025264
 800589c:	e8025268 	.word	0xe8025268
 80058a0:	e8011a2c 	.word	0xe8011a2c
 80058a4:	e8011abc 	.word	0xe8011abc
 80058a8:	e8011b4c 	.word	0xe8011b4c
 80058ac:	e8011bdc 	.word	0xe8011bdc
 80058b0:	e8011c6c 	.word	0xe8011c6c
 80058b4:	e8011d1c 	.word	0xe8011d1c
 80058b8:	e802526c 	.word	0xe802526c
 80058bc:	e8025270 	.word	0xe8025270
 80058c0:	e8025274 	.word	0xe8025274
 80058c4:	e8025278 	.word	0xe8025278
 80058c8:	e8011dac 	.word	0xe8011dac
 80058cc:	e802527c 	.word	0xe802527c
 80058d0:	e8011dd0 	.word	0xe8011dd0
 80058d4:	e8025280 	.word	0xe8025280
 80058d8:	e8025284 	.word	0xe8025284
 80058dc:	e8025288 	.word	0xe8025288
 80058e0:	e8011e4c 	.word	0xe8011e4c
 80058e4:	e801102c 	.word	0xe801102c
 80058e8:	e80051dd 	.word	0xe80051dd
 80058ec:	e80110bc 	.word	0xe80110bc
 80058f0:	17ffc066 	.word	0x17ffc066
 80058f4:	e8011edc 	.word	0xe8011edc
 80058f8:	e8005279 	.word	0xe8005279
 80058fc:	17ffc0a2 	.word	0x17ffc0a2
 8005900:	e8011f6c 	.word	0xe8011f6c
 8005904:	e802528c 	.word	0xe802528c
 8005908:	e8025290 	.word	0xe8025290
 800590c:	17ffc300 	.word	0x17ffc300
 8005910:	e8025294 	.word	0xe8025294
 8005914:	e8025298 	.word	0xe8025298

08005918 <ThreadManager_set_CurrentThread$3192>:
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	4601      	mov	r1, r0
                // For ARMv7 we are using the async PendSV exception, which is delivered with ISRs enabled
                //
                BugCheck.AssertInterruptsOff();
#endif

                ThreadImpl oldValue = m_runningThread;
 800591e:	4a0e      	ldr	r2, [pc, #56]	; (8005958 <ThreadManager_set_CurrentThread$3192+0x40>)
 8005920:	4b0e      	ldr	r3, [pc, #56]	; (800595c <ThreadManager_set_CurrentThread$3192+0x44>)
 8005922:	447b      	add	r3, pc
 8005924:	441a      	add	r2, r3
 8005926:	6a52      	ldr	r2, [r2, #36]	; 0x24

                if(oldValue != value)
 8005928:	4282      	cmp	r2, r0
 800592a:	9203      	str	r2, [sp, #12]
 800592c:	9102      	str	r1, [sp, #8]
 800592e:	d011      	beq.n	8005954 <ThreadManager_set_CurrentThread$3192+0x3c>
 8005930:	e7ff      	b.n	8005932 <ThreadManager_set_CurrentThread$3192+0x1a>
                {
                    oldValue.ReleasedProcessor();
 8005932:	9803      	ldr	r0, [sp, #12]
 8005934:	f7fe fb6c 	bl	8004010 <Thread_ReleasedProcessor$4003>
 8005938:	4807      	ldr	r0, [pc, #28]	; (8005958 <ThreadManager_set_CurrentThread$3192+0x40>)
 800593a:	4909      	ldr	r1, [pc, #36]	; (8005960 <ThreadManager_set_CurrentThread$3192+0x48>)
 800593c:	4479      	add	r1, pc
 800593e:	4408      	add	r0, r1
 8005940:	9902      	ldr	r1, [sp, #8]
 8005942:	6241      	str	r1, [r0, #36]	; 0x24

                    m_runningThread = value;

                    value.AcquiredProcessor();
 8005944:	9001      	str	r0, [sp, #4]
 8005946:	4608      	mov	r0, r1
 8005948:	f7fe fbb6 	bl	80040b8 <Thread_AcquiredProcessor$4004>

                    SetNextQuantumTimerIfNeeded();
 800594c:	9801      	ldr	r0, [sp, #4]
 800594e:	f7ff fb9b 	bl	8005088 <ThreadManager_SetNextQuantumTimerIfNeeded$3169>
                }
 8005952:	e7ff      	b.n	8005954 <ThreadManager_set_CurrentThread$3192+0x3c>
 8005954:	b004      	add	sp, #16
 8005956:	bd80      	pop	{r7, pc}
 8005958:	ffffeaac 	.word	0xffffeaac
 800595c:	17ffbeae 	.word	0x17ffbeae
 8005960:	17ffbe94 	.word	0x17ffbe94

08005964 <ProcessorARMv7M_InitializeProcessor$3238>:
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	f7fe fe50 	bl	800460c <ProcessorARMv7M_DisableInterrupts$3259>
 800596c:	9001      	str	r0, [sp, #4]
 800596e:	f000 f825 	bl	80059bc <ProcessorARMv7M_SetSystemControlRegister$3245>
 8005972:	f000 f828 	bl	80059c6 <ProcessorARMv7M_Set_8_BytesAlignment$3239>
 8005976:	480c      	ldr	r0, [pc, #48]	; (80059a8 <ProcessorARMv7M_InitializeProcessor$3238+0x44>)
 8005978:	490c      	ldr	r1, [pc, #48]	; (80059ac <ProcessorARMv7M_InitializeProcessor$3238+0x48>)
 800597a:	4479      	add	r1, pc
 800597c:	5840      	ldr	r0, [r0, r1]
 800597e:	9100      	str	r1, [sp, #0]
 8005980:	f000 f82a 	bl	80059d8 <ProcessorARMv7M_EnableSystemHandler$3249>
 8005984:	480a      	ldr	r0, [pc, #40]	; (80059b0 <ProcessorARMv7M_InitializeProcessor$3238+0x4c>)
 8005986:	9900      	ldr	r1, [sp, #0]
 8005988:	5840      	ldr	r0, [r0, r1]
 800598a:	f000 f825 	bl	80059d8 <ProcessorARMv7M_EnableSystemHandler$3249>
 800598e:	4809      	ldr	r0, [pc, #36]	; (80059b4 <ProcessorARMv7M_InitializeProcessor$3238+0x50>)
 8005990:	9900      	ldr	r1, [sp, #0]
 8005992:	5840      	ldr	r0, [r0, r1]
 8005994:	f000 f820 	bl	80059d8 <ProcessorARMv7M_EnableSystemHandler$3249>
 8005998:	4807      	ldr	r0, [pc, #28]	; (80059b8 <ProcessorARMv7M_InitializeProcessor$3238+0x54>)
 800599a:	9900      	ldr	r1, [sp, #0]
 800599c:	5840      	ldr	r0, [r0, r1]
 800599e:	f000 f81b 	bl	80059d8 <ProcessorARMv7M_EnableSystemHandler$3249>
 80059a2:	b002      	add	sp, #8
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	46c0      	nop			; (mov r8, r8)
 80059a8:	e802522c 	.word	0xe802522c
 80059ac:	17ffbe56 	.word	0x17ffbe56
 80059b0:	e8025230 	.word	0xe8025230
 80059b4:	e8025234 	.word	0xe8025234
 80059b8:	e8025238 	.word	0xe8025238

080059bc <ProcessorARMv7M_SetSystemControlRegister$3245>:
 80059bc:	b580      	push	{r7, lr}
 80059be:	2000      	movs	r0, #0
 80059c0:	f017 fa9e 	bl	801cf00 <CUSTOM_STUB_SCB_SCR_SetSystemControlRegister>
 80059c4:	bd80      	pop	{r7, pc}

080059c6 <ProcessorARMv7M_Set_8_BytesAlignment$3239>:
 80059c6:	b580      	push	{r7, lr}
 80059c8:	f017 fa6a 	bl	801cea0 <CUSTOM_STUB_SCB_get_CCR>
 80059cc:	f240 2119 	movw	r1, #537	; 0x219
 80059d0:	4308      	orrs	r0, r1
 80059d2:	f017 fa6b 	bl	801ceac <CUSTOM_STUB_SCB_set_CCR>
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <ProcessorARMv7M_EnableSystemHandler$3249>:
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	4601      	mov	r1, r0
 80059de:	2200      	movs	r2, #0
 80059e0:	2800      	cmp	r0, #0
 80059e2:	bfb8      	it	lt
 80059e4:	2201      	movlt	r2, #1

        [Inline]
        public static void Assert( bool     condition ,
                                   StopCode code      )
        {
            if(!condition)
 80059e6:	2a00      	cmp	r2, #0
 80059e8:	9103      	str	r1, [sp, #12]
 80059ea:	d107      	bne.n	80059fc <ProcessorARMv7M_EnableSystemHandler$3249+0x24>
 80059ec:	e7ff      	b.n	80059ee <ProcessorARMv7M_EnableSystemHandler$3249+0x16>
 80059ee:	4828      	ldr	r0, [pc, #160]	; (8005a90 <ProcessorARMv7M_EnableSystemHandler$3249+0xb8>)
 80059f0:	4928      	ldr	r1, [pc, #160]	; (8005a94 <ProcessorARMv7M_EnableSystemHandler$3249+0xbc>)
 80059f2:	4479      	add	r1, pc
 80059f4:	5840      	ldr	r0, [r0, r1]
            {
                Raise( code );
 80059f6:	f7fa fc85 	bl	8000304 <BugCheck_Raise$4648>
            }
 80059fa:	e7ff      	b.n	80059fc <ProcessorARMv7M_EnableSystemHandler$3249+0x24>
 80059fc:	2000      	movs	r0, #0
 80059fe:	9903      	ldr	r1, [sp, #12]
 8005a00:	f111 0f2a 	cmn.w	r1, #42	; 0x2a
 8005a04:	9002      	str	r0, [sp, #8]
 8005a06:	d105      	bne.n	8005a14 <ProcessorARMv7M_EnableSystemHandler$3249+0x3c>
 8005a08:	e7ff      	b.n	8005a0a <ProcessorARMv7M_EnableSystemHandler$3249+0x32>
 8005a0a:	9802      	ldr	r0, [sp, #8]
 8005a0c:	f017 fa58 	bl	801cec0 <CUSTOM_STUB_SCB_SHCRS_EnableSystemHandler>
 8005a10:	b004      	add	sp, #16
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	9803      	ldr	r0, [sp, #12]
 8005a16:	f100 010e 	add.w	r1, r0, #14
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	290d      	cmp	r1, #13
 8005a20:	9301      	str	r3, [sp, #4]
 8005a22:	9200      	str	r2, [sp, #0]
 8005a24:	d818      	bhi.n	8005a58 <ProcessorARMv7M_EnableSystemHandler$3249+0x80>
 8005a26:	9901      	ldr	r1, [sp, #4]
 8005a28:	9a00      	ldr	r2, [sp, #0]
 8005a2a:	9202      	str	r2, [sp, #8]
 8005a2c:	e8df f001 	tbb	[pc, r1]
 8005a30:	0c080707 	.word	0x0c080707
 8005a34:	14141410 	.word	0x14141410
 8005a38:	141d0714 	.word	0x141d0714
 8005a3c:	2626      	.short	0x2626
 8005a3e:	e7e4      	b.n	8005a0a <ProcessorARMv7M_EnableSystemHandler$3249+0x32>
 8005a40:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005a44:	9002      	str	r0, [sp, #8]
 8005a46:	e7e0      	b.n	8005a0a <ProcessorARMv7M_EnableSystemHandler$3249+0x32>
 8005a48:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8005a4c:	9002      	str	r0, [sp, #8]
 8005a4e:	e7dc      	b.n	8005a0a <ProcessorARMv7M_EnableSystemHandler$3249+0x32>
 8005a50:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8005a54:	9002      	str	r0, [sp, #8]
 8005a56:	e7d8      	b.n	8005a0a <ProcessorARMv7M_EnableSystemHandler$3249+0x32>
 8005a58:	4813      	ldr	r0, [pc, #76]	; (8005aa8 <ProcessorARMv7M_EnableSystemHandler$3249+0xd0>)
 8005a5a:	4914      	ldr	r1, [pc, #80]	; (8005aac <ProcessorARMv7M_EnableSystemHandler$3249+0xd4>)
 8005a5c:	4479      	add	r1, pc
 8005a5e:	5840      	ldr	r0, [r0, r1]
        public static void Assert( bool     condition ,
                                   StopCode code      )
        {
            if(!condition)
            {
                Raise( code );
 8005a60:	f7fa fc50 	bl	8000304 <BugCheck_Raise$4648>
 8005a64:	2000      	movs	r0, #0
            }
 8005a66:	9002      	str	r0, [sp, #8]
 8005a68:	e7cf      	b.n	8005a0a <ProcessorARMv7M_EnableSystemHandler$3249+0x32>
 8005a6a:	480d      	ldr	r0, [pc, #52]	; (8005aa0 <ProcessorARMv7M_EnableSystemHandler$3249+0xc8>)
 8005a6c:	490d      	ldr	r1, [pc, #52]	; (8005aa4 <ProcessorARMv7M_EnableSystemHandler$3249+0xcc>)
 8005a6e:	4479      	add	r1, pc
 8005a70:	5840      	ldr	r0, [r0, r1]
        public static void Assert( bool     condition ,
                                   StopCode code      )
        {
            if(!condition)
            {
                Raise( code );
 8005a72:	f7fa fc47 	bl	8000304 <BugCheck_Raise$4648>
 8005a76:	2000      	movs	r0, #0
            }
 8005a78:	9002      	str	r0, [sp, #8]
 8005a7a:	e7c6      	b.n	8005a0a <ProcessorARMv7M_EnableSystemHandler$3249+0x32>
 8005a7c:	4806      	ldr	r0, [pc, #24]	; (8005a98 <ProcessorARMv7M_EnableSystemHandler$3249+0xc0>)
 8005a7e:	4907      	ldr	r1, [pc, #28]	; (8005a9c <ProcessorARMv7M_EnableSystemHandler$3249+0xc4>)
 8005a80:	4479      	add	r1, pc
 8005a82:	5840      	ldr	r0, [r0, r1]
        public static void Assert( bool     condition ,
                                   StopCode code      )
        {
            if(!condition)
            {
                Raise( code );
 8005a84:	f7fa fc3e 	bl	8000304 <BugCheck_Raise$4648>
 8005a88:	2000      	movs	r0, #0
            }
 8005a8a:	9002      	str	r0, [sp, #8]
 8005a8c:	e7bd      	b.n	8005a0a <ProcessorARMv7M_EnableSystemHandler$3249+0x32>
 8005a8e:	46c0      	nop			; (mov r8, r8)
 8005a90:	e802524c 	.word	0xe802524c
 8005a94:	17ffbdde 	.word	0x17ffbdde
 8005a98:	e8025248 	.word	0xe8025248
 8005a9c:	17ffbd50 	.word	0x17ffbd50
 8005aa0:	e8025244 	.word	0xe8025244
 8005aa4:	17ffbd62 	.word	0x17ffbd62
 8005aa8:	e8025240 	.word	0xe8025240
 8005aac:	17ffbd74 	.word	0x17ffbd74

08005ab0 <ProcessorARMv7M_RaiseSupervisorCall$3241>:
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b086      	sub	sp, #24
 8005ab4:	4601      	mov	r1, r0
 8005ab6:	b2c0      	uxtb	r0, r0
 8005ab8:	3811      	subs	r0, #17
 8005aba:	4602      	mov	r2, r0
 8005abc:	2800      	cmp	r0, #0
 8005abe:	9105      	str	r1, [sp, #20]
 8005ac0:	9204      	str	r2, [sp, #16]
 8005ac2:	d009      	beq.n	8005ad8 <ProcessorARMv7M_RaiseSupervisorCall$3241+0x28>
 8005ac4:	e7ff      	b.n	8005ac6 <ProcessorARMv7M_RaiseSupervisorCall$3241+0x16>
 8005ac6:	9804      	ldr	r0, [sp, #16]
 8005ac8:	2801      	cmp	r0, #1
 8005aca:	d008      	beq.n	8005ade <ProcessorARMv7M_RaiseSupervisorCall$3241+0x2e>
 8005acc:	e7ff      	b.n	8005ace <ProcessorARMv7M_RaiseSupervisorCall$3241+0x1e>
 8005ace:	9804      	ldr	r0, [sp, #16]
 8005ad0:	2802      	cmp	r0, #2
 8005ad2:	d007      	beq.n	8005ae4 <ProcessorARMv7M_RaiseSupervisorCall$3241+0x34>
 8005ad4:	e7ff      	b.n	8005ad6 <ProcessorARMv7M_RaiseSupervisorCall$3241+0x26>
 8005ad6:	e008      	b.n	8005aea <ProcessorARMv7M_RaiseSupervisorCall$3241+0x3a>
 8005ad8:	f017 fa1e 	bl	801cf18 <CUSTOM_STUB_RaiseSupervisorCallForLongJump>
 8005adc:	e01b      	b.n	8005b16 <ProcessorARMv7M_RaiseSupervisorCall$3241+0x66>
 8005ade:	f017 fa1f 	bl	801cf20 <CUSTOM_STUB_RaiseSupervisorCallForStartThreads>
 8005ae2:	e018      	b.n	8005b16 <ProcessorARMv7M_RaiseSupervisorCall$3241+0x66>
 8005ae4:	f017 fa20 	bl	801cf28 <CUSTOM_STUB_RaiseSupervisorCallForRetireThread>
 8005ae8:	e015      	b.n	8005b16 <ProcessorARMv7M_RaiseSupervisorCall$3241+0x66>
 8005aea:	480c      	ldr	r0, [pc, #48]	; (8005b1c <ProcessorARMv7M_RaiseSupervisorCall$3241+0x6c>)
 8005aec:	490c      	ldr	r1, [pc, #48]	; (8005b20 <ProcessorARMv7M_RaiseSupervisorCall$3241+0x70>)
 8005aee:	4479      	add	r1, pc
 8005af0:	4408      	add	r0, r1
 8005af2:	4a0c      	ldr	r2, [pc, #48]	; (8005b24 <ProcessorARMv7M_RaiseSupervisorCall$3241+0x74>)
 8005af4:	440a      	add	r2, r1
 8005af6:	9003      	str	r0, [sp, #12]
 8005af8:	9102      	str	r1, [sp, #8]
 8005afa:	4611      	mov	r1, r2
 8005afc:	f7fa fe60 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8005b00:	4909      	ldr	r1, [pc, #36]	; (8005b28 <ProcessorARMv7M_RaiseSupervisorCall$3241+0x78>)
 8005b02:	9a02      	ldr	r2, [sp, #8]
 8005b04:	4411      	add	r1, r2
 8005b06:	9001      	str	r0, [sp, #4]
 8005b08:	f000 f810 	bl	8005b2c <ArgumentException_.ctor$6063>
 8005b0c:	9803      	ldr	r0, [sp, #12]
 8005b0e:	9901      	ldr	r1, [sp, #4]
 8005b10:	f7fa feac 	bl	800086c <TypeSystemManager_Throw$4954>
 8005b14:	e7e9      	b.n	8005aea <ProcessorARMv7M_RaiseSupervisorCall$3241+0x3a>
 8005b16:	b006      	add	sp, #24
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	46c0      	nop			; (mov r8, r8)
 8005b1c:	ffffea38 	.word	0xffffea38
 8005b20:	17ffbce2 	.word	0x17ffbce2
 8005b24:	e801126c 	.word	0xe801126c
 8005b28:	e801129c 	.word	0xe801129c

08005b2c <ArgumentException_.ctor$6063>:
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	460a      	mov	r2, r1
 8005b32:	4603      	mov	r3, r0
        }

        // Creates a new ArgumentException with its message
        // string set to message.
        //
        public ArgumentException( String message ) : base( message )
 8005b34:	9201      	str	r2, [sp, #4]
 8005b36:	9300      	str	r3, [sp, #0]
 8005b38:	f005 fb81 	bl	800b23e <SystemException_.ctor$7366>
 8005b3c:	b002      	add	sp, #8
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <ProcessorARMv7M_AreInterruptsDisabled$3254>:
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b082      	sub	sp, #8
 8005b44:	f017 f97e 	bl	801ce44 <CMSIS_STUB_SCB__get_PRIMASK>
 8005b48:	9001      	str	r0, [sp, #4]
 8005b4a:	f017 f985 	bl	801ce58 <CMSIS_STUB_SCB__get_BASEPRI>
 8005b4e:	2100      	movs	r1, #0
 8005b50:	2802      	cmp	r0, #2
 8005b52:	bf38      	it	cc
 8005b54:	2101      	movcc	r1, #1
 8005b56:	9801      	ldr	r0, [sp, #4]
 8005b58:	ea41 0100 	orr.w	r1, r1, r0
 8005b5c:	f001 0001 	and.w	r0, r1, #1
 8005b60:	b002      	add	sp, #8
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <ProcessorARMv7M_Breakpoint$3257>:
 8005b64:	b580      	push	{r7, lr}
 8005b66:	4803      	ldr	r0, [pc, #12]	; (8005b74 <ProcessorARMv7M_Breakpoint$3257+0x10>)
 8005b68:	4903      	ldr	r1, [pc, #12]	; (8005b78 <ProcessorARMv7M_Breakpoint$3257+0x14>)
 8005b6a:	4479      	add	r1, pc
 8005b6c:	5840      	ldr	r0, [r0, r1]
 8005b6e:	f017 fa31 	bl	801cfd4 <Breakpoint>
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	e8025250 	.word	0xe8025250
 8005b78:	17ffbc66 	.word	0x17ffbc66

08005b7c <ProcessorARMv7M_VerifyHandlerMode$3267>:
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	f017 f937 	bl	801cdf0 <CMSIS_STUB_SCB__get_CONTROL>
 8005b82:	2100      	movs	r1, #0
 8005b84:	f010 0f02 	tst.w	r0, #2
 8005b88:	bf08      	it	eq
 8005b8a:	2101      	moveq	r1, #1
 8005b8c:	4608      	mov	r0, r1
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <ProcessorARMv7M_SetExcReturn$3279>:
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	4601      	mov	r1, r0
 8005b96:	9101      	str	r1, [sp, #4]
 8005b98:	f017 f9f6 	bl	801cf88 <CUSTOM_STUB_SetExcReturn>
 8005b9c:	b002      	add	sp, #8
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <ProcessorARMv7M_IsBusFaultAddressValid$3283>:
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	f017 faaf 	bl	801d104 <CUSTOM_STUB_SCB__get_CFSR>
 8005ba6:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
 8005baa:	0bc0      	lsrs	r0, r0, #15
 8005bac:	bd80      	pop	{r7, pc}

08005bae <ProcessorARMv7M_IsBusFaultAddressPrecise$3284>:
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	f017 faa8 	bl	801d104 <CUSTOM_STUB_SCB__get_CFSR>
 8005bb4:	f400 7000 	and.w	r0, r0, #512	; 0x200
 8005bb8:	0a40      	lsrs	r0, r0, #9
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <ProcessorARMv7M_BusFault_Handler$3292>:
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b086      	sub	sp, #24
 8005bc0:	4601      	mov	r1, r0
 8005bc2:	9005      	str	r0, [sp, #20]
 8005bc4:	9104      	str	r1, [sp, #16]
 8005bc6:	f017 fa9d 	bl	801d104 <CUSTOM_STUB_SCB__get_CFSR>
 8005bca:	491c      	ldr	r1, [pc, #112]	; (8005c3c <ProcessorARMv7M_BusFault_Handler$3292+0x80>)
 8005bcc:	4a1c      	ldr	r2, [pc, #112]	; (8005c40 <ProcessorARMv7M_BusFault_Handler$3292+0x84>)
 8005bce:	447a      	add	r2, pc
 8005bd0:	4411      	add	r1, r2
 8005bd2:	9003      	str	r0, [sp, #12]
 8005bd4:	4608      	mov	r0, r1
 8005bd6:	9903      	ldr	r1, [sp, #12]
 8005bd8:	9202      	str	r2, [sp, #8]
 8005bda:	f000 f837 	bl	8005c4c <BugCheck_Log$4650>
 8005bde:	f017 fa9d 	bl	801d11c <CUSTOM_STUB_SCB__get_BFAR>
 8005be2:	4918      	ldr	r1, [pc, #96]	; (8005c44 <ProcessorARMv7M_BusFault_Handler$3292+0x88>)
 8005be4:	9a02      	ldr	r2, [sp, #8]
 8005be6:	4411      	add	r1, r2
 8005be8:	9001      	str	r0, [sp, #4]
 8005bea:	4608      	mov	r0, r1
 8005bec:	9901      	ldr	r1, [sp, #4]
 8005bee:	f000 f82d 	bl	8005c4c <BugCheck_Log$4650>
 8005bf2:	9805      	ldr	r0, [sp, #20]
 8005bf4:	3010      	adds	r0, #16
 8005bf6:	f7fd fcbf 	bl	8003578 <UIntPtr_ToUInt32$2870>
 8005bfa:	4913      	ldr	r1, [pc, #76]	; (8005c48 <ProcessorARMv7M_BusFault_Handler$3292+0x8c>)
 8005bfc:	9a02      	ldr	r2, [sp, #8]
 8005bfe:	4411      	add	r1, r2
 8005c00:	9000      	str	r0, [sp, #0]
 8005c02:	4608      	mov	r0, r1
 8005c04:	9900      	ldr	r1, [sp, #0]
 8005c06:	f000 f821 	bl	8005c4c <BugCheck_Log$4650>
 8005c0a:	f7ff ffc9 	bl	8005ba0 <ProcessorARMv7M_IsBusFaultAddressValid$3283>
 8005c0e:	f010 0fff 	tst.w	r0, #255	; 0xff
 8005c12:	d006      	beq.n	8005c22 <ProcessorARMv7M_BusFault_Handler$3292+0x66>
 8005c14:	e7ff      	b.n	8005c16 <ProcessorARMv7M_BusFault_Handler$3292+0x5a>
 8005c16:	f7ff ffca 	bl	8005bae <ProcessorARMv7M_IsBusFaultAddressPrecise$3284>
 8005c1a:	f010 0fff 	tst.w	r0, #255	; 0xff
 8005c1e:	d107      	bne.n	8005c30 <ProcessorARMv7M_BusFault_Handler$3292+0x74>
 8005c20:	e7ff      	b.n	8005c22 <ProcessorARMv7M_BusFault_Handler$3292+0x66>
 8005c22:	f017 fa6f 	bl	801d104 <CUSTOM_STUB_SCB__get_CFSR>
 8005c26:	f017 f9d5 	bl	801cfd4 <Breakpoint>
 8005c2a:	e7ff      	b.n	8005c2c <ProcessorARMv7M_BusFault_Handler$3292+0x70>
 8005c2c:	b006      	add	sp, #24
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	f017 fa74 	bl	801d11c <CUSTOM_STUB_SCB__get_BFAR>
 8005c34:	f017 f9ce 	bl	801cfd4 <Breakpoint>
 8005c38:	e7f8      	b.n	8005c2c <ProcessorARMv7M_BusFault_Handler$3292+0x70>
 8005c3a:	46c0      	nop			; (mov r8, r8)
 8005c3c:	e801130c 	.word	0xe801130c
 8005c40:	17ffbc02 	.word	0x17ffbc02
 8005c44:	e801133c 	.word	0xe801133c
 8005c48:	e801136c 	.word	0xe801136c

08005c4c <BugCheck_Log$4650>:
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	460a      	mov	r2, r1
 8005c52:	4603      	mov	r3, r0
            Device.Instance.ProcessLog(format);
        }

        public static void Log(string format, int p1)
        {
            Device.Instance.ProcessLog(format, p1);
 8005c54:	f8df c028 	ldr.w	ip, [pc, #40]	; 8005c80 <BugCheck_Log$4650+0x34>
 8005c58:	f8df e028 	ldr.w	lr, [pc, #40]	; 8005c84 <BugCheck_Log$4650+0x38>
 8005c5c:	44fe      	add	lr, pc
 8005c5e:	44f4      	add	ip, lr
 8005c60:	9003      	str	r0, [sp, #12]
 8005c62:	4660      	mov	r0, ip
 8005c64:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8005c68:	9102      	str	r1, [sp, #8]
 8005c6a:	4661      	mov	r1, ip
 8005c6c:	f8dd e008 	ldr.w	lr, [sp, #8]
 8005c70:	9201      	str	r2, [sp, #4]
 8005c72:	4672      	mov	r2, lr
 8005c74:	9300      	str	r3, [sp, #0]
 8005c76:	f002 fce9 	bl	800864c <Device_ProcessLog$16411>
 8005c7a:	b004      	add	sp, #16
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	46c0      	nop			; (mov r8, r8)
 8005c80:	e80101ec 	.word	0xe80101ec
 8005c84:	17ffbb74 	.word	0x17ffbb74

08005c88 <Generic_FaultHandler_Zelig>:
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	4601      	mov	r1, r0
 8005c8e:	2200      	movs	r2, #0
 8005c90:	9202      	str	r2, [sp, #8]
 8005c92:	aa02      	add	r2, sp, #8
 8005c94:	3a08      	subs	r2, #8
 8005c96:	9001      	str	r0, [sp, #4]
 8005c98:	4610      	mov	r0, r2
 8005c9a:	9a01      	ldr	r2, [sp, #4]
 8005c9c:	9100      	str	r1, [sp, #0]
 8005c9e:	4611      	mov	r1, r2
 8005ca0:	f7fd fc5b 	bl	800355a <UIntPtr_.ctor$2860>
 8005ca4:	9802      	ldr	r0, [sp, #8]
 8005ca6:	9003      	str	r0, [sp, #12]

        [CLSCompliant( false )]
        public unsafe void* ToPointer()
        {
            return m_value;
        }
 8005ca8:	f7ff ff88 	bl	8005bbc <ProcessorARMv7M_BusFault_Handler$3292>
 8005cac:	b004      	add	sp, #16
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <MethodWrapper_Prologue$3338>:
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	4808      	ldr	r0, [pc, #32]	; (8005cd8 <MethodWrapper_Prologue$3338+0x28>)
 8005cb6:	4909      	ldr	r1, [pc, #36]	; (8005cdc <MethodWrapper_Prologue$3338+0x2c>)
 8005cb8:	4479      	add	r1, pc
 8005cba:	5843      	ldr	r3, [r0, r1]
 8005cbc:	4808      	ldr	r0, [pc, #32]	; (8005ce0 <MethodWrapper_Prologue$3338+0x30>)
 8005cbe:	4408      	add	r0, r1
 8005cc0:	4a08      	ldr	r2, [pc, #32]	; (8005ce4 <MethodWrapper_Prologue$3338+0x34>)
 8005cc2:	440a      	add	r2, r1
 8005cc4:	f8df c020 	ldr.w	ip, [pc, #32]	; 8005ce8 <MethodWrapper_Prologue$3338+0x38>
 8005cc8:	4461      	add	r1, ip
 8005cca:	9101      	str	r1, [sp, #4]
 8005ccc:	4611      	mov	r1, r2
 8005cce:	9a01      	ldr	r2, [sp, #4]
 8005cd0:	f7ff ffee 	bl	8005cb0 <MethodWrapper_Prologue$3338>
 8005cd4:	b002      	add	sp, #8
 8005cd6:	bd80      	pop	{r7, pc}
 8005cd8:	e802525c 	.word	0xe802525c
 8005cdc:	17ffbb18 	.word	0x17ffbb18
 8005ce0:	e80101fc 	.word	0xe80101fc
 8005ce4:	e801139c 	.word	0xe801139c
 8005ce8:	e801144c 	.word	0xe801144c

08005cec <MethodWrapper_Prologue$3339>:
 8005cec:	4770      	bx	lr
 8005cee:	46c0      	nop			; (mov r8, r8)

08005cf0 <MethodWrapper_Epilogue$3340>:
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	4808      	ldr	r0, [pc, #32]	; (8005d18 <MethodWrapper_Epilogue$3340+0x28>)
 8005cf6:	4909      	ldr	r1, [pc, #36]	; (8005d1c <MethodWrapper_Epilogue$3340+0x2c>)
 8005cf8:	4479      	add	r1, pc
 8005cfa:	5843      	ldr	r3, [r0, r1]
 8005cfc:	4808      	ldr	r0, [pc, #32]	; (8005d20 <MethodWrapper_Epilogue$3340+0x30>)
 8005cfe:	4408      	add	r0, r1
 8005d00:	4a08      	ldr	r2, [pc, #32]	; (8005d24 <MethodWrapper_Epilogue$3340+0x34>)
 8005d02:	440a      	add	r2, r1
 8005d04:	f8df c020 	ldr.w	ip, [pc, #32]	; 8005d28 <MethodWrapper_Epilogue$3340+0x38>
 8005d08:	4461      	add	r1, ip
 8005d0a:	9101      	str	r1, [sp, #4]
 8005d0c:	4611      	mov	r1, r2
 8005d0e:	9a01      	ldr	r2, [sp, #4]
 8005d10:	f7ff ffee 	bl	8005cf0 <MethodWrapper_Epilogue$3340>
 8005d14:	b002      	add	sp, #8
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	e8025260 	.word	0xe8025260
 8005d1c:	17ffbad8 	.word	0x17ffbad8
 8005d20:	e80101fc 	.word	0xe80101fc
 8005d24:	e801139c 	.word	0xe801139c
 8005d28:	e80115cc 	.word	0xe80115cc

08005d2c <MethodWrapper_Epilogue$3341>:
 8005d2c:	4770      	bx	lr

08005d2e <CodePointer_get_IsValid$3651>:
 8005d2e:	b081      	sub	sp, #4
 8005d30:	4601      	mov	r1, r0
 8005d32:	6880      	ldr	r0, [r0, #8]
 8005d34:	2800      	cmp	r0, #0
 8005d36:	bf18      	it	ne
 8005d38:	2001      	movne	r0, #1
 8005d3a:	9100      	str	r1, [sp, #0]
 8005d3c:	b001      	add	sp, #4
 8005d3e:	4770      	bx	lr

08005d40 <VTable_GetInterface$3672>:
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b08a      	sub	sp, #40	; 0x28
 8005d44:	4601      	mov	r1, r0
        [Inline]
        public static ObjectHeader Unpack( object obj )
        {
            int size = System.Runtime.InteropServices.Marshal.SizeOf( typeof(ObjectHeader ) );

            return CastAsObjectHeader( AddressMath.Decrement( ((ObjectImpl)obj).CastAsUIntPtr(), (uint)size ) );
 8005d46:	3008      	adds	r0, #8
 8005d48:	9008      	str	r0, [sp, #32]
 8005d4a:	2000      	movs	r0, #0
 8005d4c:	9009      	str	r0, [sp, #36]	; 0x24
                var  oldValue = this.MultiUseWord;
                uint newValue = ((uint)kind << ExtensionKindShift) | ((uint)payload << ExtensionPayloadShift) | ((uint)oldValue & GarbageCollectorMask);

                // CS0420: a reference to a volatile field will not be treated as volatile
#pragma warning disable 420
                var oldValue2 = System.Threading.Interlocked.CompareExchange( ref this.MultiUseWord, (int)newValue, oldValue );
 8005d4e:	9a08      	ldr	r2, [sp, #32]
            return new UIntPtr( (uint)obj.Unpack() + this.ObjectSize );
        }

        public uint ObjectSize
        {
            get
 8005d50:	3a08      	subs	r2, #8
 8005d52:	9009      	str	r0, [sp, #36]	; 0x24
 8005d54:	ab09      	add	r3, sp, #36	; 0x24
 8005d56:	3b08      	subs	r3, #8
 8005d58:	9007      	str	r0, [sp, #28]
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	9106      	str	r1, [sp, #24]
 8005d5e:	4611      	mov	r1, r2
 8005d60:	f7fa fdac 	bl	80008bc <UIntPtr_.ctor$2864>
        [Inline]
        public static ObjectHeader Unpack( object obj )
        {
            int size = System.Runtime.InteropServices.Marshal.SizeOf( typeof(ObjectHeader ) );

            return CastAsObjectHeader( AddressMath.Decrement( ((ObjectImpl)obj).CastAsUIntPtr(), (uint)size ) );
 8005d64:	9809      	ldr	r0, [sp, #36]	; 0x24
            {
                ObjectImpl.NullCheck( a );

                ObjectHeader oh = ObjectHeader.Unpack( a );

                return oh.VirtualTable;
 8005d66:	6840      	ldr	r0, [r0, #4]
        public unsafe void InsertPlug( uint size )
        {
            UIntPtr address = this.ToPointer();
            uint*   dst     = (uint*)address.ToPointer();
            var bytesLeft = size;

 8005d68:	6a00      	ldr	r0, [r0, #32]
 8005d6a:	9907      	ldr	r1, [sp, #28]
            while(bytesLeft >= sizeof(uint))
            {
 8005d6c:	9005      	str	r0, [sp, #20]
 8005d6e:	9104      	str	r1, [sp, #16]
 8005d70:	e7ff      	b.n	8005d72 <VTable_GetInterface$3672+0x32>
 8005d72:	9804      	ldr	r0, [sp, #16]
        public bool IsImmutable
        {
            [Inline]
            get
            {
                return this.GarbageCollectorStateWithoutMutableBits == GarbageCollectorFlags.ReadOnlyObject;
 8005d74:	9905      	ldr	r1, [sp, #20]
 8005d76:	688a      	ldr	r2, [r1, #8]
            UIntPtr address = this.ToPointer();
            uint*   dst     = (uint*)address.ToPointer();
            var bytesLeft = size;

            while(bytesLeft >= sizeof(uint))
            {
 8005d78:	4290      	cmp	r0, r2
 8005d7a:	9003      	str	r0, [sp, #12]
 8005d7c:	da0e      	bge.n	8005d9c <VTable_GetInterface$3672+0x5c>
 8005d7e:	e7ff      	b.n	8005d80 <VTable_GetInterface$3672+0x40>
                *dst++  = (uint)GarbageCollectorFlags.GapPlug;
                bytesLeft -= sizeof(uint);
 8005d80:	9805      	ldr	r0, [sp, #20]
 8005d82:	9903      	ldr	r1, [sp, #12]
 8005d84:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8005d88:	68d2      	ldr	r2, [r2, #12]
 8005d8a:	4b0d      	ldr	r3, [pc, #52]	; (8005dc0 <VTable_GetInterface$3672+0x80>)
 8005d8c:	f8df c034 	ldr.w	ip, [pc, #52]	; 8005dc4 <VTable_GetInterface$3672+0x84>
 8005d90:	44fc      	add	ip, pc
 8005d92:	4463      	add	r3, ip
 8005d94:	429a      	cmp	r2, r3
 8005d96:	9102      	str	r1, [sp, #8]
 8005d98:	d006      	beq.n	8005da8 <VTable_GetInterface$3672+0x68>
 8005d9a:	e00c      	b.n	8005db6 <VTable_GetInterface$3672+0x76>
 8005d9c:	2000      	movs	r0, #0
            }
        }

        //--//

        public void UpdateExtension( ExtensionKinds kind    ,
 8005d9e:	9001      	str	r0, [sp, #4]
 8005da0:	e7ff      	b.n	8005da2 <VTable_GetInterface$3672+0x62>
                                     int            payload )
 8005da2:	9801      	ldr	r0, [sp, #4]
 8005da4:	b00a      	add	sp, #40	; 0x28
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	9802      	ldr	r0, [sp, #8]
            while(bytesLeft >= sizeof(uint))
            {
                *dst++  = (uint)GarbageCollectorFlags.GapPlug;
                bytesLeft -= sizeof(uint);
            }
        }
 8005daa:	9905      	ldr	r1, [sp, #20]
 8005dac:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8005db0:	6900      	ldr	r0, [r0, #16]
 8005db2:	9001      	str	r0, [sp, #4]
 8005db4:	e7f5      	b.n	8005da2 <VTable_GetInterface$3672+0x62>
            UIntPtr address = this.ToPointer();
            uint*   dst     = (uint*)address.ToPointer();
            var bytesLeft = size;

            while(bytesLeft >= sizeof(uint))
            {
 8005db6:	9803      	ldr	r0, [sp, #12]
 8005db8:	1c41      	adds	r1, r0, #1
 8005dba:	9104      	str	r1, [sp, #16]
 8005dbc:	e7d9      	b.n	8005d72 <VTable_GetInterface$3672+0x32>
 8005dbe:	46c0      	nop			; (mov r8, r8)
 8005dc0:	e8012d1c 	.word	0xe8012d1c
 8005dc4:	17ffba40 	.word	0x17ffba40

08005dc8 <VTable_CanBeAssignedFrom_Slow$3676>:
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b0a0      	sub	sp, #128	; 0x80
 8005dcc:	460a      	mov	r2, r1
 8005dce:	4603      	mov	r3, r0
 8005dd0:	6909      	ldr	r1, [r1, #16]
        }

        [NoInline]
        private bool CanBeAssignedFrom_Slow( VTable source )
        {
            if(source.IsSubclassOf( this ))
 8005dd2:	9015      	str	r0, [sp, #84]	; 0x54
 8005dd4:	4608      	mov	r0, r1
 8005dd6:	9915      	ldr	r1, [sp, #84]	; 0x54
 8005dd8:	9314      	str	r3, [sp, #80]	; 0x50
 8005dda:	9213      	str	r2, [sp, #76]	; 0x4c
 8005ddc:	f000 f902 	bl	8005fe4 <VTable_IsSubclassOf$3677>
 8005de0:	f010 0fff 	tst.w	r0, #255	; 0xff
 8005de4:	d003      	beq.n	8005dee <VTable_CanBeAssignedFrom_Slow$3676+0x26>
 8005de6:	e7ff      	b.n	8005de8 <VTable_CanBeAssignedFrom_Slow$3676+0x20>
 8005de8:	2001      	movs	r0, #1
            {
                return true;
 8005dea:	9012      	str	r0, [sp, #72]	; 0x48
 8005dec:	e010      	b.n	8005e10 <VTable_CanBeAssignedFrom_Slow$3676+0x48>
        public bool IsArray
        {
            [Inline]
            get
            {
                return (this.ShapeCategory & Shape.Array) != 0;
 8005dee:	9814      	ldr	r0, [sp, #80]	; 0x50
 8005df0:	7e01      	ldrb	r1, [r0, #24]
 8005df2:	2200      	movs	r2, #0
            if(source.IsSubclassOf( this ))
            {
                return true;
            }

            if(this.IsArray && source.IsArray)
 8005df4:	ebb2 1fd1 	cmp.w	r2, r1, lsr #7
 8005df8:	d007      	beq.n	8005e0a <VTable_CanBeAssignedFrom_Slow$3676+0x42>
 8005dfa:	e7ff      	b.n	8005dfc <VTable_CanBeAssignedFrom_Slow$3676+0x34>
        public bool IsArray
        {
            [Inline]
            get
            {
                return (this.ShapeCategory & Shape.Array) != 0;
 8005dfc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8005dfe:	7e01      	ldrb	r1, [r0, #24]
 8005e00:	2200      	movs	r2, #0
            if(source.IsSubclassOf( this ))
            {
                return true;
            }

            if(this.IsArray && source.IsArray)
 8005e02:	ebb2 1fd1 	cmp.w	r2, r1, lsr #7
 8005e06:	d106      	bne.n	8005e16 <VTable_CanBeAssignedFrom_Slow$3676+0x4e>
 8005e08:	e7ff      	b.n	8005e0a <VTable_CanBeAssignedFrom_Slow$3676+0x42>
 8005e0a:	2000      	movs	r0, #0
                        return subVTableThis.CanBeAssignedFrom_Slow( subVTableSource );
                    }
                }
            }

            return false;
 8005e0c:	9012      	str	r0, [sp, #72]	; 0x48
 8005e0e:	e7ff      	b.n	8005e10 <VTable_CanBeAssignedFrom_Slow$3676+0x48>
 8005e10:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005e12:	b020      	add	sp, #128	; 0x80
 8005e14:	bd80      	pop	{r7, pc}
                return true;
            }

            if(this.IsArray && source.IsArray)
            {
                CHECKS.ASSERT( this.ShapeCategory == Shape.SzArray || this.ShapeCategory == Shape.MultiArray, "Found array that does not inherit from System.Array" );
 8005e16:	9814      	ldr	r0, [sp, #80]	; 0x50
 8005e18:	7e01      	ldrb	r1, [r0, #24]
 8005e1a:	29c6      	cmp	r1, #198	; 0xc6
 8005e1c:	d103      	bne.n	8005e26 <VTable_CanBeAssignedFrom_Slow$3676+0x5e>
 8005e1e:	e7ff      	b.n	8005e20 <VTable_CanBeAssignedFrom_Slow$3676+0x58>
 8005e20:	2001      	movs	r0, #1
 8005e22:	9011      	str	r0, [sp, #68]	; 0x44
 8005e24:	e007      	b.n	8005e36 <VTable_CanBeAssignedFrom_Slow$3676+0x6e>
 8005e26:	9814      	ldr	r0, [sp, #80]	; 0x50
 8005e28:	7e01      	ldrb	r1, [r0, #24]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	29c7      	cmp	r1, #199	; 0xc7
 8005e2e:	bf08      	it	eq
 8005e30:	2201      	moveq	r2, #1
 8005e32:	9211      	str	r2, [sp, #68]	; 0x44
 8005e34:	e7ff      	b.n	8005e36 <VTable_CanBeAssignedFrom_Slow$3676+0x6e>
 8005e36:	9811      	ldr	r0, [sp, #68]	; 0x44
 8005e38:	4966      	ldr	r1, [pc, #408]	; (8005fd4 <VTable_CanBeAssignedFrom_Slow$3676+0x20c>)
 8005e3a:	4a67      	ldr	r2, [pc, #412]	; (8005fd8 <VTable_CanBeAssignedFrom_Slow$3676+0x210>)
 8005e3c:	447a      	add	r2, pc
 8005e3e:	4411      	add	r1, r2
 8005e40:	f000 f8f4 	bl	800602c <CHECKS_ASSERT$11839>

                if(this.ShapeCategory == source.ShapeCategory)
 8005e44:	9814      	ldr	r0, [sp, #80]	; 0x50
 8005e46:	7e01      	ldrb	r1, [r0, #24]
 8005e48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005e4a:	7e13      	ldrb	r3, [r2, #24]
 8005e4c:	4299      	cmp	r1, r3
 8005e4e:	d135      	bne.n	8005ebc <VTable_CanBeAssignedFrom_Slow$3676+0xf4>
 8005e50:	e7ff      	b.n	8005e52 <VTable_CanBeAssignedFrom_Slow$3676+0x8a>
                {
                    ArrayReferenceTypeRepresentation tdThis   = (ArrayReferenceTypeRepresentation)this  .TypeInfo;
 8005e52:	9814      	ldr	r0, [sp, #80]	; 0x50
 8005e54:	6900      	ldr	r0, [r0, #16]
 8005e56:	4961      	ldr	r1, [pc, #388]	; (8005fdc <VTable_CanBeAssignedFrom_Slow$3676+0x214>)
 8005e58:	4a61      	ldr	r2, [pc, #388]	; (8005fe0 <VTable_CanBeAssignedFrom_Slow$3676+0x218>)
 8005e5a:	447a      	add	r2, pc
 8005e5c:	4411      	add	r1, r2
 8005e5e:	9110      	str	r1, [sp, #64]	; 0x40
 8005e60:	f000 fa7a 	bl	8006358 <TypeSystemManager_CastToType$4948>
 8005e64:	4601      	mov	r1, r0
                    ArrayReferenceTypeRepresentation tdSource = (ArrayReferenceTypeRepresentation)source.TypeInfo;
 8005e66:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005e68:	6913      	ldr	r3, [r2, #16]
 8005e6a:	900f      	str	r0, [sp, #60]	; 0x3c
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005e70:	910e      	str	r1, [sp, #56]	; 0x38
 8005e72:	4619      	mov	r1, r3
 8005e74:	f000 fa70 	bl	8006358 <TypeSystemManager_CastToType$4948>
 8005e78:	4601      	mov	r1, r0
        // Constructor Methods
        //

        public VTable( TypeRepresentation owner )
        {
            this.TypeInfo                = owner;
 8005e7a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005e7c:	f102 0308 	add.w	r3, r2, #8
 8005e80:	9316      	str	r3, [sp, #88]	; 0x58
 8005e82:	2300      	movs	r3, #0
 8005e84:	9317      	str	r3, [sp, #92]	; 0x5c
            return GetFromTypeHandle( t.TypeHandle );
        }

        [MethodImpl( MethodImplOptions.InternalCall )]
        public extern static VTable GetFromTypeHandle( RuntimeTypeHandle hnd );

 8005e86:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
        }

        //--//

        public void ApplyTransformation( TransformationContext context )
        {
 8005e8a:	f1ac 0c08 	sub.w	ip, ip, #8
 8005e8e:	9317      	str	r3, [sp, #92]	; 0x5c
 8005e90:	ab17      	add	r3, sp, #92	; 0x5c
 8005e92:	3b08      	subs	r3, #8
 8005e94:	900d      	str	r0, [sp, #52]	; 0x34
 8005e96:	4618      	mov	r0, r3
 8005e98:	910c      	str	r1, [sp, #48]	; 0x30
 8005e9a:	4661      	mov	r1, ip
 8005e9c:	f7fa fd0e 	bl	80008bc <UIntPtr_.ctor$2864>
        // Constructor Methods
        //

        public VTable( TypeRepresentation owner )
        {
            this.TypeInfo                = owner;
 8005ea0:	9817      	ldr	r0, [sp, #92]	; 0x5c

        public override string ToString()
        {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();

            sb.AppendFormat( "VTable({0})", this.TypeInfo );
 8005ea2:	6840      	ldr	r0, [r0, #4]
                if(this.ShapeCategory == source.ShapeCategory)
                {
                    ArrayReferenceTypeRepresentation tdThis   = (ArrayReferenceTypeRepresentation)this  .TypeInfo;
                    ArrayReferenceTypeRepresentation tdSource = (ArrayReferenceTypeRepresentation)source.TypeInfo;

                    if(tdThis.SameShape( tdSource ))
 8005ea4:	69c0      	ldr	r0, [r0, #28]
 8005ea6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8005ea8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005eaa:	900b      	str	r0, [sp, #44]	; 0x2c
 8005eac:	4608      	mov	r0, r1
 8005eae:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005eb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005eb2:	4790      	blx	r2
 8005eb4:	f010 0fff 	tst.w	r0, #255	; 0xff
 8005eb8:	d101      	bne.n	8005ebe <VTable_CanBeAssignedFrom_Slow$3676+0xf6>
 8005eba:	e06c      	b.n	8005f96 <VTable_CanBeAssignedFrom_Slow$3676+0x1ce>
                        }

                        return subVTableThis.CanBeAssignedFrom_Slow( subVTableSource );
                    }
                }
            }
 8005ebc:	e7a5      	b.n	8005e0a <VTable_CanBeAssignedFrom_Slow$3676+0x42>
        // Constructor Methods
        //

        public VTable( TypeRepresentation owner )
        {
            this.TypeInfo                = owner;
 8005ebe:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005ec0:	f100 0108 	add.w	r1, r0, #8
 8005ec4:	9118      	str	r1, [sp, #96]	; 0x60
 8005ec6:	2100      	movs	r1, #0
 8005ec8:	9119      	str	r1, [sp, #100]	; 0x64
            return GetFromTypeHandle( t.TypeHandle );
        }

        [MethodImpl( MethodImplOptions.InternalCall )]
        public extern static VTable GetFromTypeHandle( RuntimeTypeHandle hnd );

 8005eca:	9a18      	ldr	r2, [sp, #96]	; 0x60
        }

        //--//

        public void ApplyTransformation( TransformationContext context )
        {
 8005ecc:	3a08      	subs	r2, #8
 8005ece:	9119      	str	r1, [sp, #100]	; 0x64
 8005ed0:	ab19      	add	r3, sp, #100	; 0x64
 8005ed2:	f1a3 0008 	sub.w	r0, r3, #8
 8005ed6:	910a      	str	r1, [sp, #40]	; 0x28
 8005ed8:	4611      	mov	r1, r2
 8005eda:	f7fa fcef 	bl	80008bc <UIntPtr_.ctor$2864>
        // Constructor Methods
        //

        public VTable( TypeRepresentation owner )
        {
            this.TypeInfo                = owner;
 8005ede:	9819      	ldr	r0, [sp, #100]	; 0x64

        public override string ToString()
        {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();

            sb.AppendFormat( "VTable({0})", this.TypeInfo );
 8005ee0:	6840      	ldr	r0, [r0, #4]
                    ArrayReferenceTypeRepresentation tdThis   = (ArrayReferenceTypeRepresentation)this  .TypeInfo;
                    ArrayReferenceTypeRepresentation tdSource = (ArrayReferenceTypeRepresentation)source.TypeInfo;

                    if(tdThis.SameShape( tdSource ))
                    {
                        TypeRepresentation subThis   = tdThis  .ContainedType.UnderlyingType;
 8005ee2:	69c0      	ldr	r0, [r0, #28]
 8005ee4:	69c0      	ldr	r0, [r0, #28]
 8005ee6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005ee8:	9009      	str	r0, [sp, #36]	; 0x24
 8005eea:	4608      	mov	r0, r1
 8005eec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005eee:	4790      	blx	r2
        // Constructor Methods
        //

        public VTable( TypeRepresentation owner )
        {
            this.TypeInfo                = owner;
 8005ef0:	f100 0108 	add.w	r1, r0, #8
 8005ef4:	911a      	str	r1, [sp, #104]	; 0x68
 8005ef6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005ef8:	911b      	str	r1, [sp, #108]	; 0x6c
            return GetFromTypeHandle( t.TypeHandle );
        }

        [MethodImpl( MethodImplOptions.InternalCall )]
        public extern static VTable GetFromTypeHandle( RuntimeTypeHandle hnd );

 8005efa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
        }

        //--//

        public void ApplyTransformation( TransformationContext context )
        {
 8005efc:	f1a2 0108 	sub.w	r1, r2, #8
 8005f00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f02:	921b      	str	r2, [sp, #108]	; 0x6c
 8005f04:	ab1b      	add	r3, sp, #108	; 0x6c
 8005f06:	3b08      	subs	r3, #8
 8005f08:	9008      	str	r0, [sp, #32]
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f7fa fcd6 	bl	80008bc <UIntPtr_.ctor$2864>
        // Constructor Methods
        //

        public VTable( TypeRepresentation owner )
        {
            this.TypeInfo                = owner;
 8005f10:	981b      	ldr	r0, [sp, #108]	; 0x6c

        public override string ToString()
        {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();

            sb.AppendFormat( "VTable({0})", this.TypeInfo );
 8005f12:	6840      	ldr	r0, [r0, #4]
                    ArrayReferenceTypeRepresentation tdThis   = (ArrayReferenceTypeRepresentation)this  .TypeInfo;
                    ArrayReferenceTypeRepresentation tdSource = (ArrayReferenceTypeRepresentation)source.TypeInfo;

                    if(tdThis.SameShape( tdSource ))
                    {
                        TypeRepresentation subThis   = tdThis  .ContainedType.UnderlyingType;
 8005f14:	69c0      	ldr	r0, [r0, #28]
 8005f16:	6a00      	ldr	r0, [r0, #32]
 8005f18:	9908      	ldr	r1, [sp, #32]
 8005f1a:	9007      	str	r0, [sp, #28]
 8005f1c:	4608      	mov	r0, r1
 8005f1e:	9a07      	ldr	r2, [sp, #28]
 8005f20:	4790      	blx	r2
        // Constructor Methods
        //

        public VTable( TypeRepresentation owner )
        {
            this.TypeInfo                = owner;
 8005f22:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005f24:	f101 0208 	add.w	r2, r1, #8
 8005f28:	921c      	str	r2, [sp, #112]	; 0x70
 8005f2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f2c:	921d      	str	r2, [sp, #116]	; 0x74
            return GetFromTypeHandle( t.TypeHandle );
        }

        [MethodImpl( MethodImplOptions.InternalCall )]
        public extern static VTable GetFromTypeHandle( RuntimeTypeHandle hnd );

 8005f2e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
        }

        //--//

        public void ApplyTransformation( TransformationContext context )
        {
 8005f30:	f1a3 0108 	sub.w	r1, r3, #8
 8005f34:	921d      	str	r2, [sp, #116]	; 0x74
 8005f36:	ab1d      	add	r3, sp, #116	; 0x74
 8005f38:	3b08      	subs	r3, #8
 8005f3a:	9006      	str	r0, [sp, #24]
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f7fa fcbd 	bl	80008bc <UIntPtr_.ctor$2864>
        // Constructor Methods
        //

        public VTable( TypeRepresentation owner )
        {
            this.TypeInfo                = owner;
 8005f42:	981d      	ldr	r0, [sp, #116]	; 0x74

        public override string ToString()
        {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();

            sb.AppendFormat( "VTable({0})", this.TypeInfo );
 8005f44:	6840      	ldr	r0, [r0, #4]
                    ArrayReferenceTypeRepresentation tdSource = (ArrayReferenceTypeRepresentation)source.TypeInfo;

                    if(tdThis.SameShape( tdSource ))
                    {
                        TypeRepresentation subThis   = tdThis  .ContainedType.UnderlyingType;
                        TypeRepresentation subSource = tdSource.ContainedType.UnderlyingType;
 8005f46:	69c0      	ldr	r0, [r0, #28]
 8005f48:	69c0      	ldr	r0, [r0, #28]
 8005f4a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005f4c:	9005      	str	r0, [sp, #20]
 8005f4e:	4608      	mov	r0, r1
 8005f50:	9a05      	ldr	r2, [sp, #20]
 8005f52:	4790      	blx	r2
        // Constructor Methods
        //

        public VTable( TypeRepresentation owner )
        {
            this.TypeInfo                = owner;
 8005f54:	f100 0108 	add.w	r1, r0, #8
 8005f58:	911e      	str	r1, [sp, #120]	; 0x78
 8005f5a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005f5c:	911f      	str	r1, [sp, #124]	; 0x7c
            return GetFromTypeHandle( t.TypeHandle );
        }

        [MethodImpl( MethodImplOptions.InternalCall )]
        public extern static VTable GetFromTypeHandle( RuntimeTypeHandle hnd );

 8005f5e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
        }

        //--//

        public void ApplyTransformation( TransformationContext context )
        {
 8005f60:	f1a2 0108 	sub.w	r1, r2, #8
 8005f64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f66:	921f      	str	r2, [sp, #124]	; 0x7c
 8005f68:	ab1f      	add	r3, sp, #124	; 0x7c
 8005f6a:	3b08      	subs	r3, #8
 8005f6c:	9004      	str	r0, [sp, #16]
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f7fa fca4 	bl	80008bc <UIntPtr_.ctor$2864>
        // Constructor Methods
        //

        public VTable( TypeRepresentation owner )
        {
            this.TypeInfo                = owner;
 8005f74:	981f      	ldr	r0, [sp, #124]	; 0x7c

        public override string ToString()
        {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();

            sb.AppendFormat( "VTable({0})", this.TypeInfo );
 8005f76:	6840      	ldr	r0, [r0, #4]
                    ArrayReferenceTypeRepresentation tdSource = (ArrayReferenceTypeRepresentation)source.TypeInfo;

                    if(tdThis.SameShape( tdSource ))
                    {
                        TypeRepresentation subThis   = tdThis  .ContainedType.UnderlyingType;
                        TypeRepresentation subSource = tdSource.ContainedType.UnderlyingType;
 8005f78:	69c0      	ldr	r0, [r0, #28]
 8005f7a:	6a00      	ldr	r0, [r0, #32]
 8005f7c:	9904      	ldr	r1, [sp, #16]
 8005f7e:	9003      	str	r0, [sp, #12]
 8005f80:	4608      	mov	r0, r1
 8005f82:	9a03      	ldr	r2, [sp, #12]
 8005f84:	4790      	blx	r2
 8005f86:	9906      	ldr	r1, [sp, #24]
 8005f88:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8005f8a:	6a80      	ldr	r0, [r0, #40]	; 0x28
                        TypeRepresentation subSource = tdSource.ContainedType.UnderlyingType;

                        VTable subVTableThis   = subThis  .VirtualTable;
                        VTable subVTableSource = subSource.VirtualTable;

                        if(subVTableThis == subVTableSource)
 8005f8c:	4282      	cmp	r2, r0
 8005f8e:	9202      	str	r2, [sp, #8]
 8005f90:	9001      	str	r0, [sp, #4]
 8005f92:	d001      	beq.n	8005f98 <VTable_CanBeAssignedFrom_Slow$3676+0x1d0>
 8005f94:	e003      	b.n	8005f9e <VTable_CanBeAssignedFrom_Slow$3676+0x1d6>
                            return subVTableSource.ImplementsInterface( subVTableThis );
                        }

                        return subVTableThis.CanBeAssignedFrom_Slow( subVTableSource );
                    }
                }
 8005f96:	e791      	b.n	8005ebc <VTable_CanBeAssignedFrom_Slow$3676+0xf4>
 8005f98:	2001      	movs	r0, #1
                        VTable subVTableThis   = subThis  .VirtualTable;
                        VTable subVTableSource = subSource.VirtualTable;

                        if(subVTableThis == subVTableSource)
                        {
                            return true;
 8005f9a:	9012      	str	r0, [sp, #72]	; 0x48
 8005f9c:	e738      	b.n	8005e10 <VTable_CanBeAssignedFrom_Slow$3676+0x48>
        public bool IsValueType
        {
            [Inline]
            get
            {
                return (this.ShapeCategory & Shape.ValueType) != 0;
 8005f9e:	9801      	ldr	r0, [sp, #4]
 8005fa0:	7e01      	ldrb	r1, [r0, #24]
                        if(subVTableThis == subVTableSource)
                        {
                            return true;
                        }

                        if(subVTableSource.IsValueType)
 8005fa2:	f011 0f20 	tst.w	r1, #32
 8005fa6:	d003      	beq.n	8005fb0 <VTable_CanBeAssignedFrom_Slow$3676+0x1e8>
 8005fa8:	e7ff      	b.n	8005faa <VTable_CanBeAssignedFrom_Slow$3676+0x1e2>
 8005faa:	2000      	movs	r0, #0
                        {
                            //
                            // We require exact matching for value types.
                            //
                            return false;
 8005fac:	9012      	str	r0, [sp, #72]	; 0x48
 8005fae:	e72f      	b.n	8005e10 <VTable_CanBeAssignedFrom_Slow$3676+0x48>
        public bool IsInterface
        {
            [Inline]
            get
            {
                return this.ShapeCategory == Shape.Interface;
 8005fb0:	9802      	ldr	r0, [sp, #8]
 8005fb2:	7e01      	ldrb	r1, [r0, #24]
                            // We require exact matching for value types.
                            //
                            return false;
                        }

                        if(subVTableThis.IsInterface)
 8005fb4:	2943      	cmp	r1, #67	; 0x43
 8005fb6:	d107      	bne.n	8005fc8 <VTable_CanBeAssignedFrom_Slow$3676+0x200>
 8005fb8:	e7ff      	b.n	8005fba <VTable_CanBeAssignedFrom_Slow$3676+0x1f2>
 8005fba:	9801      	ldr	r0, [sp, #4]
 8005fbc:	6a00      	ldr	r0, [r0, #32]
                        {
                            return subVTableSource.ImplementsInterface( subVTableThis );
 8005fbe:	9902      	ldr	r1, [sp, #8]
 8005fc0:	f000 f9fe 	bl	80063c0 <VTable_ImplementsInterface$3678>
 8005fc4:	9012      	str	r0, [sp, #72]	; 0x48
 8005fc6:	e723      	b.n	8005e10 <VTable_CanBeAssignedFrom_Slow$3676+0x48>
                        }

                        return subVTableThis.CanBeAssignedFrom_Slow( subVTableSource );
 8005fc8:	9802      	ldr	r0, [sp, #8]
 8005fca:	9901      	ldr	r1, [sp, #4]
 8005fcc:	f7ff fefc 	bl	8005dc8 <VTable_CanBeAssignedFrom_Slow$3676>
 8005fd0:	9012      	str	r0, [sp, #72]	; 0x48
 8005fd2:	e71d      	b.n	8005e10 <VTable_CanBeAssignedFrom_Slow$3676+0x48>
 8005fd4:	e801174c 	.word	0xe801174c
 8005fd8:	17ffb994 	.word	0x17ffb994
 8005fdc:	e801184c 	.word	0xe801184c
 8005fe0:	17ffb976 	.word	0x17ffb976

08005fe4 <VTable_IsSubclassOf$3677>:
        }

        [NoInline]
        public bool IsSubclassOf( VTable target )
        {
            TypeRepresentation td = this.TypeInfo;
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b086      	sub	sp, #24
 8005fe8:	4602      	mov	r2, r0
 8005fea:	9205      	str	r2, [sp, #20]
 8005fec:	9104      	str	r1, [sp, #16]
 8005fee:	9003      	str	r0, [sp, #12]
 8005ff0:	e7ff      	b.n	8005ff2 <VTable_IsSubclassOf$3677+0xe>
 8005ff2:	9803      	ldr	r0, [sp, #12]
 8005ff4:	2100      	movs	r1, #0
 8005ff6:	9002      	str	r0, [sp, #8]
 8005ff8:	f7fb fd8b 	bl	8001b12 <Object_Equals$2231>

        [NoInline]
        public bool IsSubclassOf( VTable target )
        {
            TypeRepresentation td = this.TypeInfo;
            while(td != null)
 8005ffc:	f010 0fff 	tst.w	r0, #255	; 0xff
 8006000:	d106      	bne.n	8006010 <VTable_IsSubclassOf$3677+0x2c>
 8006002:	e7ff      	b.n	8006004 <VTable_IsSubclassOf$3677+0x20>
 8006004:	9802      	ldr	r0, [sp, #8]
 8006006:	6a81      	ldr	r1, [r0, #40]	; 0x28
        public bool IsSubclassOf( VTable target )
        {
            TypeRepresentation td = this.TypeInfo;
            while(td != null)
            {
                if(target == td.VirtualTable)
 8006008:	9a04      	ldr	r2, [sp, #16]
 800600a:	428a      	cmp	r2, r1
 800600c:	d006      	beq.n	800601c <VTable_IsSubclassOf$3677+0x38>
 800600e:	e008      	b.n	8006022 <VTable_IsSubclassOf$3677+0x3e>
 8006010:	2000      	movs	r0, #0
                }

                td = td.Extends;
            }

            return false;
 8006012:	9001      	str	r0, [sp, #4]
 8006014:	e7ff      	b.n	8006016 <VTable_IsSubclassOf$3677+0x32>
 8006016:	9801      	ldr	r0, [sp, #4]
 8006018:	b006      	add	sp, #24
 800601a:	bd80      	pop	{r7, pc}
 800601c:	2001      	movs	r0, #1
            TypeRepresentation td = this.TypeInfo;
            while(td != null)
            {
                if(target == td.VirtualTable)
                {
                    return true;
 800601e:	9001      	str	r0, [sp, #4]
 8006020:	e7f9      	b.n	8006016 <VTable_IsSubclassOf$3677+0x32>
 8006022:	9802      	ldr	r0, [sp, #8]
 8006024:	6a41      	ldr	r1, [r0, #36]	; 0x24
                {
                    return true;
                }

                td = td.Extends;
            }
 8006026:	9103      	str	r1, [sp, #12]
 8006028:	e7e3      	b.n	8005ff2 <VTable_IsSubclassOf$3677+0xe>
 800602a:	46c0      	nop			; (mov r8, r8)

0800602c <CHECKS_ASSERT$11839>:
 800602c:	b580      	push	{r7, lr}
 800602e:	b086      	sub	sp, #24
 8006030:	4602      	mov	r2, r0
            return array;
        }

        public static T[] IncreaseSizeOfNotNullArray<T>( T[] array ,
                                                         int extra )
        {
 8006032:	f010 0fff 	tst.w	r0, #255	; 0xff
 8006036:	9205      	str	r2, [sp, #20]
 8006038:	9104      	str	r1, [sp, #16]
 800603a:	d118      	bne.n	800606e <CHECKS_ASSERT$11839+0x42>
 800603c:	e7ff      	b.n	800603e <CHECKS_ASSERT$11839+0x12>
 800603e:	e7ff      	b.n	8006040 <CHECKS_ASSERT$11839+0x14>
            int len = array.Length;
            T[] res = new T[len+extra];
 8006040:	480c      	ldr	r0, [pc, #48]	; (8006074 <CHECKS_ASSERT$11839+0x48>)
 8006042:	490d      	ldr	r1, [pc, #52]	; (8006078 <CHECKS_ASSERT$11839+0x4c>)
 8006044:	4479      	add	r1, pc
 8006046:	4408      	add	r0, r1
 8006048:	4a0c      	ldr	r2, [pc, #48]	; (800607c <CHECKS_ASSERT$11839+0x50>)
 800604a:	4411      	add	r1, r2
 800604c:	2200      	movs	r2, #0
 800604e:	9003      	str	r0, [sp, #12]
 8006050:	f7fc f8a6 	bl	80021a0 <DefaultTypeSystemManager_AllocateArray$4962>
 8006054:	9904      	ldr	r1, [sp, #16]
 8006056:	9002      	str	r0, [sp, #8]
 8006058:	4608      	mov	r0, r1
 800605a:	9902      	ldr	r1, [sp, #8]
 800605c:	f008 feb2 	bl	800edc4 <AssertionViolationException_Create$11626>
 8006060:	9903      	ldr	r1, [sp, #12]
 8006062:	9001      	str	r0, [sp, #4]
 8006064:	4608      	mov	r0, r1
 8006066:	9901      	ldr	r1, [sp, #4]
 8006068:	f7fa fc00 	bl	800086c <TypeSystemManager_Throw$4954>
 800606c:	e7e8      	b.n	8006040 <CHECKS_ASSERT$11839+0x14>
 800606e:	b006      	add	sp, #24
 8006070:	bd80      	pop	{r7, pc}
 8006072:	46c0      	nop			; (mov r8, r8)
 8006074:	ffffea38 	.word	0xffffea38
 8006078:	17ffb78c 	.word	0x17ffb78c
 800607c:	e80133bc 	.word	0xe80133bc

08006080 <TypeRepresentation_PrettyToString$14686>:
 8006080:	b580      	push	{r7, lr}
 8006082:	b0a8      	sub	sp, #160	; 0xa0
 8006084:	4694      	mov	ip, r2

        internal virtual void PrettyToString( System.Text.StringBuilder sb                 ,
                                              bool                      fPrefix            ,
                                              bool                      fWithAbbreviations )
        {
            if(fPrefix)
 8006086:	f012 0fff 	tst.w	r2, #255	; 0xff
 800608a:	911f      	str	r1, [sp, #124]	; 0x7c
 800608c:	901e      	str	r0, [sp, #120]	; 0x78
 800608e:	f8cd c074 	str.w	ip, [sp, #116]	; 0x74
 8006092:	931c      	str	r3, [sp, #112]	; 0x70
 8006094:	d01d      	beq.n	80060d2 <TypeRepresentation_PrettyToString$14686+0x52>
 8006096:	e7ff      	b.n	8006098 <TypeRepresentation_PrettyToString$14686+0x18>
            VOID        = 0x01,
            BOOLEAN     = 0x02,
            CHAR        = 0x03,
            I1          = 0x04,
            U1          = 0x05,
            I2          = 0x06,
 8006098:	981e      	ldr	r0, [sp, #120]	; 0x78
 800609a:	f100 0108 	add.w	r1, r0, #8
 800609e:	9124      	str	r1, [sp, #144]	; 0x90
 80060a0:	2100      	movs	r1, #0
 80060a2:	9125      	str	r1, [sp, #148]	; 0x94
            private TypeRepresentation[]         m_parameters;
            private GenericParameterDefinition[] m_parametersDefinition;

            //
            // Constructor Methods
            //
 80060a4:	9a24      	ldr	r2, [sp, #144]	; 0x90
            CLASS       = 0x12,    // CLASS <class Token>
            VAR         = 0x13,    // a class type variable VAR <U1>
            ARRAY       = 0x14,    // MDARRAY <type> <rank> <bcount> <bound1> ... <lbcount> <lb1> ...
            GENERICINST = 0x15,    // instantiated type
            TYPEDBYREF  = 0x16,    // This is a simple type.
            I           = 0x18,    // native integer size
 80060a6:	3a08      	subs	r2, #8
 80060a8:	9125      	str	r1, [sp, #148]	; 0x94
 80060aa:	a925      	add	r1, sp, #148	; 0x94
 80060ac:	f1a1 0008 	sub.w	r0, r1, #8
 80060b0:	4611      	mov	r1, r2
 80060b2:	f7fa fc03 	bl	80008bc <UIntPtr_.ctor$2864>
            VOID        = 0x01,
            BOOLEAN     = 0x02,
            CHAR        = 0x03,
            I1          = 0x04,
            U1          = 0x05,
            I2          = 0x06,
 80060b6:	9825      	ldr	r0, [sp, #148]	; 0x94

        public struct InterfaceMap
        {
            public static readonly InterfaceMap[] SharedEmptyArray = new InterfaceMap[0];

            //
 80060b8:	6840      	ldr	r0, [r0, #4]
                                              bool                      fPrefix            ,
                                              bool                      fWithAbbreviations )
        {
            if(fPrefix)
            {
                if(this.IsDelayedType)
 80060ba:	69c0      	ldr	r0, [r0, #28]
 80060bc:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80060be:	991e      	ldr	r1, [sp, #120]	; 0x78
 80060c0:	901b      	str	r0, [sp, #108]	; 0x6c
 80060c2:	4608      	mov	r0, r1
 80060c4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80060c6:	4790      	blx	r2
 80060c8:	f010 0fff 	tst.w	r0, #255	; 0xff
 80060cc:	f040 80f8 	bne.w	80062c0 <TypeRepresentation_PrettyToString$14686+0x240>
 80060d0:	e0ff      	b.n	80062d2 <TypeRepresentation_PrettyToString$14686+0x252>
                }
            }

            string name = null;

            if(fWithAbbreviations)
 80060d2:	981c      	ldr	r0, [sp, #112]	; 0x70
 80060d4:	f010 0fff 	tst.w	r0, #255	; 0xff
 80060d8:	d103      	bne.n	80060e2 <TypeRepresentation_PrettyToString$14686+0x62>
 80060da:	e7ff      	b.n	80060dc <TypeRepresentation_PrettyToString$14686+0x5c>
 80060dc:	2000      	movs	r0, #0
 80060de:	901a      	str	r0, [sp, #104]	; 0x68
 80060e0:	e004      	b.n	80060ec <TypeRepresentation_PrettyToString$14686+0x6c>
            {
                name = GetAbbreviation();
 80060e2:	981e      	ldr	r0, [sp, #120]	; 0x78
 80060e4:	f009 fd00 	bl	800fae8 <TypeRepresentation_GetAbbreviation$14685>
            }
 80060e8:	901a      	str	r0, [sp, #104]	; 0x68
 80060ea:	e7ff      	b.n	80060ec <TypeRepresentation_PrettyToString$14686+0x6c>

            if(name != null)
 80060ec:	981a      	ldr	r0, [sp, #104]	; 0x68
 80060ee:	991a      	ldr	r1, [sp, #104]	; 0x68
 80060f0:	2800      	cmp	r0, #0
 80060f2:	9119      	str	r1, [sp, #100]	; 0x64
 80060f4:	d006      	beq.n	8006104 <TypeRepresentation_PrettyToString$14686+0x84>
 80060f6:	e7ff      	b.n	80060f8 <TypeRepresentation_PrettyToString$14686+0x78>
            {
                sb.Append( name );
 80060f8:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80060fa:	9919      	ldr	r1, [sp, #100]	; 0x64
 80060fc:	f006 fe7e 	bl	800cdfc <StringBuilder_Append$8507>
            }
 8006100:	9018      	str	r0, [sp, #96]	; 0x60
 8006102:	e042      	b.n	800618a <TypeRepresentation_PrettyToString$14686+0x10a>
            else
            {
                if(this.IsNestedType)
 8006104:	981e      	ldr	r0, [sp, #120]	; 0x78
 8006106:	f009 fcdd 	bl	800fac4 <TypeRepresentation_get_IsNestedType$14672>
 800610a:	f010 0fff 	tst.w	r0, #255	; 0xff
 800610e:	d029      	beq.n	8006164 <TypeRepresentation_PrettyToString$14686+0xe4>
 8006110:	e7ff      	b.n	8006112 <TypeRepresentation_PrettyToString$14686+0x92>

        public TypeRepresentation EnclosingClass
        {
            get
            {
                return m_enclosingClass;
 8006112:	981e      	ldr	r0, [sp, #120]	; 0x78
 8006114:	69c1      	ldr	r1, [r0, #28]
            VOID        = 0x01,
            BOOLEAN     = 0x02,
            CHAR        = 0x03,
            I1          = 0x04,
            U1          = 0x05,
            I2          = 0x06,
 8006116:	f101 0208 	add.w	r2, r1, #8
 800611a:	9222      	str	r2, [sp, #136]	; 0x88
 800611c:	2200      	movs	r2, #0
 800611e:	9223      	str	r2, [sp, #140]	; 0x8c
            private TypeRepresentation[]         m_parameters;
            private GenericParameterDefinition[] m_parametersDefinition;

            //
            // Constructor Methods
            //
 8006120:	9b22      	ldr	r3, [sp, #136]	; 0x88
            CLASS       = 0x12,    // CLASS <class Token>
            VAR         = 0x13,    // a class type variable VAR <U1>
            ARRAY       = 0x14,    // MDARRAY <type> <rank> <bcount> <bound1> ... <lbcount> <lb1> ...
            GENERICINST = 0x15,    // instantiated type
            TYPEDBYREF  = 0x16,    // This is a simple type.
            I           = 0x18,    // native integer size
 8006122:	3b08      	subs	r3, #8
 8006124:	9223      	str	r2, [sp, #140]	; 0x8c
 8006126:	f10d 0c8c 	add.w	ip, sp, #140	; 0x8c
 800612a:	f1ac 0008 	sub.w	r0, ip, #8
 800612e:	9117      	str	r1, [sp, #92]	; 0x5c
 8006130:	4619      	mov	r1, r3
 8006132:	9216      	str	r2, [sp, #88]	; 0x58
 8006134:	f7fa fbc2 	bl	80008bc <UIntPtr_.ctor$2864>
            VOID        = 0x01,
            BOOLEAN     = 0x02,
            CHAR        = 0x03,
            I1          = 0x04,
            U1          = 0x05,
            I2          = 0x06,
 8006138:	9823      	ldr	r0, [sp, #140]	; 0x8c

        public struct InterfaceMap
        {
            public static readonly InterfaceMap[] SharedEmptyArray = new InterfaceMap[0];

            //
 800613a:	6840      	ldr	r0, [r0, #4]
            }
            else
            {
                if(this.IsNestedType)
                {
                    this.EnclosingClass.PrettyToString( sb, false, fWithAbbreviations );
 800613c:	69c0      	ldr	r0, [r0, #28]
 800613e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8006140:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8006142:	9015      	str	r0, [sp, #84]	; 0x54
 8006144:	4608      	mov	r0, r1
 8006146:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8006148:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800614a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800614c:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
 8006150:	47e0      	blx	ip
                    sb.Append( "." );
 8006152:	4877      	ldr	r0, [pc, #476]	; (8006330 <TypeRepresentation_PrettyToString$14686+0x2b0>)
 8006154:	4977      	ldr	r1, [pc, #476]	; (8006334 <TypeRepresentation_PrettyToString$14686+0x2b4>)
 8006156:	4479      	add	r1, pc
 8006158:	4401      	add	r1, r0
 800615a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800615c:	f006 fe4e 	bl	800cdfc <StringBuilder_Append$8507>
                }
 8006160:	9014      	str	r0, [sp, #80]	; 0x50
 8006162:	e7ff      	b.n	8006164 <TypeRepresentation_PrettyToString$14686+0xe4>

        public string Namespace
        {
            get
            {
                return m_namespace;
 8006164:	981e      	ldr	r0, [sp, #120]	; 0x78
 8006166:	6981      	ldr	r1, [r0, #24]
                {
                    this.EnclosingClass.PrettyToString( sb, false, fWithAbbreviations );
                    sb.Append( "." );
                }

                if(this.Namespace != null && this.Namespace.Length != 0)
 8006168:	2900      	cmp	r1, #0
 800616a:	d007      	beq.n	800617c <TypeRepresentation_PrettyToString$14686+0xfc>
 800616c:	e7ff      	b.n	800616e <TypeRepresentation_PrettyToString$14686+0xee>

        public string Namespace
        {
            get
            {
                return m_namespace;
 800616e:	981e      	ldr	r0, [sp, #120]	; 0x78
 8006170:	6981      	ldr	r1, [r0, #24]
 8006172:	68c9      	ldr	r1, [r1, #12]
                {
                    this.EnclosingClass.PrettyToString( sb, false, fWithAbbreviations );
                    sb.Append( "." );
                }

                if(this.Namespace != null && this.Namespace.Length != 0)
 8006174:	2900      	cmp	r1, #0
 8006176:	f040 8093 	bne.w	80062a0 <TypeRepresentation_PrettyToString$14686+0x220>
 800617a:	e7ff      	b.n	800617c <TypeRepresentation_PrettyToString$14686+0xfc>
        
        public string Name
        {
            get
            {
                return m_name;
 800617c:	981e      	ldr	r0, [sp, #120]	; 0x78
 800617e:	6941      	ldr	r1, [r0, #20]
                {
                    sb.Append( this.Namespace );
                    sb.Append( "."            );
                }

                sb.Append( this.Name );
 8006180:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8006182:	f006 fe3b 	bl	800cdfc <StringBuilder_Append$8507>
            }
 8006186:	9013      	str	r0, [sp, #76]	; 0x4c
 8006188:	e7ff      	b.n	800618a <TypeRepresentation_PrettyToString$14686+0x10a>

            if(m_genericContext != null)
 800618a:	981e      	ldr	r0, [sp, #120]	; 0x78
 800618c:	6a01      	ldr	r1, [r0, #32]
 800618e:	2900      	cmp	r1, #0
 8006190:	d010      	beq.n	80061b4 <TypeRepresentation_PrettyToString$14686+0x134>
 8006192:	e7ff      	b.n	8006194 <TypeRepresentation_PrettyToString$14686+0x114>
            {
                sb.Append( "<" );
 8006194:	4869      	ldr	r0, [pc, #420]	; (800633c <TypeRepresentation_PrettyToString$14686+0x2bc>)
 8006196:	496a      	ldr	r1, [pc, #424]	; (8006340 <TypeRepresentation_PrettyToString$14686+0x2c0>)
 8006198:	4479      	add	r1, pc
 800619a:	4401      	add	r1, r0
 800619c:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800619e:	f006 fe2d 	bl	800cdfc <StringBuilder_Append$8507>

                TypeRepresentation[] parameters = m_genericContext.Parameters;
 80061a2:	991e      	ldr	r1, [sp, #120]	; 0x78
 80061a4:	6a0a      	ldr	r2, [r1, #32]

            public TypeRepresentation[] Parameters
            {
                get
                {
                    return m_parameters;
 80061a6:	6892      	ldr	r2, [r2, #8]
                            {
                                return true;
                            }
                        }
                    }

 80061a8:	6893      	ldr	r3, [r2, #8]
            if(m_genericContext != null)
            {
                sb.Append( "<" );

                TypeRepresentation[] parameters = m_genericContext.Parameters;
                if(parameters.Length > 0)
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	9012      	str	r0, [sp, #72]	; 0x48
 80061ae:	9211      	str	r2, [sp, #68]	; 0x44
 80061b0:	d102      	bne.n	80061b8 <TypeRepresentation_PrettyToString$14686+0x138>
 80061b2:	e004      	b.n	80061be <TypeRepresentation_PrettyToString$14686+0x13e>
 80061b4:	b028      	add	sp, #160	; 0xa0
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	2000      	movs	r0, #0
                {
                    for(int i = 0; i < parameters.Length; i++)
 80061ba:	9010      	str	r0, [sp, #64]	; 0x40
 80061bc:	e035      	b.n	800622a <TypeRepresentation_PrettyToString$14686+0x1aa>
                        parameters[i].PrettyToString( sb, fPrefix, fWithAbbreviations );
                    }
                }
                else
                {
                    GenericParameterDefinition[] defs = m_genericContext.ParametersDefinition;
 80061be:	981e      	ldr	r0, [sp, #120]	; 0x78
 80061c0:	6a01      	ldr	r1, [r0, #32]

            public GenericParameterDefinition[] ParametersDefinition
            {
                get
                {
                    return m_parametersDefinition;
 80061c2:	68c9      	ldr	r1, [r1, #12]
                    }
                }
                else
                {
                    GenericParameterDefinition[] defs = m_genericContext.ParametersDefinition;
                    if(defs != null)
 80061c4:	2900      	cmp	r1, #0
 80061c6:	910f      	str	r1, [sp, #60]	; 0x3c
 80061c8:	d003      	beq.n	80061d2 <TypeRepresentation_PrettyToString$14686+0x152>
 80061ca:	e7ff      	b.n	80061cc <TypeRepresentation_PrettyToString$14686+0x14c>
 80061cc:	2000      	movs	r0, #0
                    {
                        for(int i = 0; i < defs.Length; i++)
 80061ce:	900e      	str	r0, [sp, #56]	; 0x38
 80061d0:	e009      	b.n	80061e6 <TypeRepresentation_PrettyToString$14686+0x166>
                            if(i != 0) sb.Append( "," );

                            sb.Append( defs[i].Name );
                        }
                    }
                }
 80061d2:	e7ff      	b.n	80061d4 <TypeRepresentation_PrettyToString$14686+0x154>

                sb.Append( ">" );
 80061d4:	485d      	ldr	r0, [pc, #372]	; (800634c <TypeRepresentation_PrettyToString$14686+0x2cc>)
 80061d6:	495e      	ldr	r1, [pc, #376]	; (8006350 <TypeRepresentation_PrettyToString$14686+0x2d0>)
 80061d8:	4479      	add	r1, pc
 80061da:	4401      	add	r1, r0
 80061dc:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80061de:	f006 fe0d 	bl	800cdfc <StringBuilder_Append$8507>
            }
 80061e2:	900d      	str	r0, [sp, #52]	; 0x34
 80061e4:	e7e6      	b.n	80061b4 <TypeRepresentation_PrettyToString$14686+0x134>
 80061e6:	980e      	ldr	r0, [sp, #56]	; 0x38
                            {
                                return true;
                            }
                        }
                    }

 80061e8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80061ea:	688a      	ldr	r2, [r1, #8]
                else
                {
                    GenericParameterDefinition[] defs = m_genericContext.ParametersDefinition;
                    if(defs != null)
                    {
                        for(int i = 0; i < defs.Length; i++)
 80061ec:	4290      	cmp	r0, r2
 80061ee:	900c      	str	r0, [sp, #48]	; 0x30
 80061f0:	da04      	bge.n	80061fc <TypeRepresentation_PrettyToString$14686+0x17c>
 80061f2:	e7ff      	b.n	80061f4 <TypeRepresentation_PrettyToString$14686+0x174>
                        {
                            if(i != 0) sb.Append( "," );
 80061f4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80061f6:	2800      	cmp	r0, #0
 80061f8:	d101      	bne.n	80061fe <TypeRepresentation_PrettyToString$14686+0x17e>
 80061fa:	e009      	b.n	8006210 <TypeRepresentation_PrettyToString$14686+0x190>

                            sb.Append( defs[i].Name );
                        }
                    }
 80061fc:	e7e9      	b.n	80061d2 <TypeRepresentation_PrettyToString$14686+0x152>
                    GenericParameterDefinition[] defs = m_genericContext.ParametersDefinition;
                    if(defs != null)
                    {
                        for(int i = 0; i < defs.Length; i++)
                        {
                            if(i != 0) sb.Append( "," );
 80061fe:	4851      	ldr	r0, [pc, #324]	; (8006344 <TypeRepresentation_PrettyToString$14686+0x2c4>)
 8006200:	4951      	ldr	r1, [pc, #324]	; (8006348 <TypeRepresentation_PrettyToString$14686+0x2c8>)
 8006202:	4479      	add	r1, pc
 8006204:	4401      	add	r1, r0
 8006206:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8006208:	f006 fdf8 	bl	800cdfc <StringBuilder_Append$8507>
 800620c:	900b      	str	r0, [sp, #44]	; 0x2c
 800620e:	e7ff      	b.n	8006210 <TypeRepresentation_PrettyToString$14686+0x190>

                            sb.Append( defs[i].Name );
 8006210:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8006212:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006214:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8006218:	68d1      	ldr	r1, [r2, #12]
 800621a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800621c:	f006 fdee 	bl	800cdfc <StringBuilder_Append$8507>
                else
                {
                    GenericParameterDefinition[] defs = m_genericContext.ParametersDefinition;
                    if(defs != null)
                    {
                        for(int i = 0; i < defs.Length; i++)
 8006220:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006222:	1c4a      	adds	r2, r1, #1
 8006224:	900a      	str	r0, [sp, #40]	; 0x28
 8006226:	920e      	str	r2, [sp, #56]	; 0x38
 8006228:	e7dd      	b.n	80061e6 <TypeRepresentation_PrettyToString$14686+0x166>
 800622a:	9810      	ldr	r0, [sp, #64]	; 0x40
                            {
                                return true;
                            }
                        }
                    }

 800622c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800622e:	688a      	ldr	r2, [r1, #8]
                sb.Append( "<" );

                TypeRepresentation[] parameters = m_genericContext.Parameters;
                if(parameters.Length > 0)
                {
                    for(int i = 0; i < parameters.Length; i++)
 8006230:	4290      	cmp	r0, r2
 8006232:	9009      	str	r0, [sp, #36]	; 0x24
 8006234:	da04      	bge.n	8006240 <TypeRepresentation_PrettyToString$14686+0x1c0>
 8006236:	e7ff      	b.n	8006238 <TypeRepresentation_PrettyToString$14686+0x1b8>
                    {
                        if(i != 0) sb.Append( "," );
 8006238:	9809      	ldr	r0, [sp, #36]	; 0x24
 800623a:	2800      	cmp	r0, #0
 800623c:	d101      	bne.n	8006242 <TypeRepresentation_PrettyToString$14686+0x1c2>
 800623e:	e009      	b.n	8006254 <TypeRepresentation_PrettyToString$14686+0x1d4>

                        parameters[i].PrettyToString( sb, fPrefix, fWithAbbreviations );
                    }
                }
 8006240:	e7c8      	b.n	80061d4 <TypeRepresentation_PrettyToString$14686+0x154>
                TypeRepresentation[] parameters = m_genericContext.Parameters;
                if(parameters.Length > 0)
                {
                    for(int i = 0; i < parameters.Length; i++)
                    {
                        if(i != 0) sb.Append( "," );
 8006242:	4840      	ldr	r0, [pc, #256]	; (8006344 <TypeRepresentation_PrettyToString$14686+0x2c4>)
 8006244:	4943      	ldr	r1, [pc, #268]	; (8006354 <TypeRepresentation_PrettyToString$14686+0x2d4>)
 8006246:	4479      	add	r1, pc
 8006248:	4401      	add	r1, r0
 800624a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800624c:	f006 fdd6 	bl	800cdfc <StringBuilder_Append$8507>
 8006250:	9008      	str	r0, [sp, #32]
 8006252:	e7ff      	b.n	8006254 <TypeRepresentation_PrettyToString$14686+0x1d4>

                        parameters[i].PrettyToString( sb, fPrefix, fWithAbbreviations );
 8006254:	9811      	ldr	r0, [sp, #68]	; 0x44
 8006256:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006258:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 800625c:	68d2      	ldr	r2, [r2, #12]
            VOID        = 0x01,
            BOOLEAN     = 0x02,
            CHAR        = 0x03,
            I1          = 0x04,
            U1          = 0x05,
            I2          = 0x06,
 800625e:	f102 0308 	add.w	r3, r2, #8
 8006262:	9320      	str	r3, [sp, #128]	; 0x80
 8006264:	2300      	movs	r3, #0
 8006266:	9321      	str	r3, [sp, #132]	; 0x84
            private TypeRepresentation[]         m_parameters;
            private GenericParameterDefinition[] m_parametersDefinition;

            //
            // Constructor Methods
            //
 8006268:	f8dd c080 	ldr.w	ip, [sp, #128]	; 0x80
            CLASS       = 0x12,    // CLASS <class Token>
            VAR         = 0x13,    // a class type variable VAR <U1>
            ARRAY       = 0x14,    // MDARRAY <type> <rank> <bcount> <bound1> ... <lbcount> <lb1> ...
            GENERICINST = 0x15,    // instantiated type
            TYPEDBYREF  = 0x16,    // This is a simple type.
            I           = 0x18,    // native integer size
 800626c:	f1ac 0108 	sub.w	r1, ip, #8
 8006270:	9321      	str	r3, [sp, #132]	; 0x84
 8006272:	ab21      	add	r3, sp, #132	; 0x84
 8006274:	f1a3 0008 	sub.w	r0, r3, #8
 8006278:	9207      	str	r2, [sp, #28]
 800627a:	f7fa fb1f 	bl	80008bc <UIntPtr_.ctor$2864>
            VOID        = 0x01,
            BOOLEAN     = 0x02,
            CHAR        = 0x03,
            I1          = 0x04,
            U1          = 0x05,
            I2          = 0x06,
 800627e:	9821      	ldr	r0, [sp, #132]	; 0x84

        public struct InterfaceMap
        {
            public static readonly InterfaceMap[] SharedEmptyArray = new InterfaceMap[0];

            //
 8006280:	6840      	ldr	r0, [r0, #4]
                {
                    for(int i = 0; i < parameters.Length; i++)
                    {
                        if(i != 0) sb.Append( "," );

                        parameters[i].PrettyToString( sb, fPrefix, fWithAbbreviations );
 8006282:	69c0      	ldr	r0, [r0, #28]
 8006284:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8006286:	9907      	ldr	r1, [sp, #28]
 8006288:	9006      	str	r0, [sp, #24]
 800628a:	4608      	mov	r0, r1
 800628c:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800628e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006290:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8006292:	f8dd c018 	ldr.w	ip, [sp, #24]
 8006296:	47e0      	blx	ip
                sb.Append( "<" );

                TypeRepresentation[] parameters = m_genericContext.Parameters;
                if(parameters.Length > 0)
                {
                    for(int i = 0; i < parameters.Length; i++)
 8006298:	9809      	ldr	r0, [sp, #36]	; 0x24
 800629a:	1c41      	adds	r1, r0, #1
 800629c:	9110      	str	r1, [sp, #64]	; 0x40
 800629e:	e7c4      	b.n	800622a <TypeRepresentation_PrettyToString$14686+0x1aa>

        public string Namespace
        {
            get
            {
                return m_namespace;
 80062a0:	981e      	ldr	r0, [sp, #120]	; 0x78
 80062a2:	6981      	ldr	r1, [r0, #24]
                    sb.Append( "." );
                }

                if(this.Namespace != null && this.Namespace.Length != 0)
                {
                    sb.Append( this.Namespace );
 80062a4:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80062a6:	f006 fda9 	bl	800cdfc <StringBuilder_Append$8507>
                    sb.Append( "."            );
 80062aa:	4921      	ldr	r1, [pc, #132]	; (8006330 <TypeRepresentation_PrettyToString$14686+0x2b0>)
 80062ac:	4a22      	ldr	r2, [pc, #136]	; (8006338 <TypeRepresentation_PrettyToString$14686+0x2b8>)
 80062ae:	447a      	add	r2, pc
 80062b0:	4411      	add	r1, r2
 80062b2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80062b4:	9005      	str	r0, [sp, #20]
 80062b6:	4610      	mov	r0, r2
 80062b8:	f006 fda0 	bl	800cdfc <StringBuilder_Append$8507>
                }
 80062bc:	9004      	str	r0, [sp, #16]
 80062be:	e75d      	b.n	800617c <TypeRepresentation_PrettyToString$14686+0xfc>
        {
            if(fPrefix)
            {
                if(this.IsDelayedType)
                {
                    sb.Append( "delayed " );
 80062c0:	4819      	ldr	r0, [pc, #100]	; (8006328 <TypeRepresentation_PrettyToString$14686+0x2a8>)
 80062c2:	491a      	ldr	r1, [pc, #104]	; (800632c <TypeRepresentation_PrettyToString$14686+0x2ac>)
 80062c4:	4479      	add	r1, pc
 80062c6:	4401      	add	r1, r0
 80062c8:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80062ca:	f006 fd97 	bl	800cdfc <StringBuilder_Append$8507>
                }
 80062ce:	9003      	str	r0, [sp, #12]
 80062d0:	e024      	b.n	800631c <TypeRepresentation_PrettyToString$14686+0x29c>
            VOID        = 0x01,
            BOOLEAN     = 0x02,
            CHAR        = 0x03,
            I1          = 0x04,
            U1          = 0x05,
            I2          = 0x06,
 80062d2:	981e      	ldr	r0, [sp, #120]	; 0x78
 80062d4:	f100 0108 	add.w	r1, r0, #8
 80062d8:	9126      	str	r1, [sp, #152]	; 0x98
 80062da:	2100      	movs	r1, #0
 80062dc:	9127      	str	r1, [sp, #156]	; 0x9c
            private TypeRepresentation[]         m_parameters;
            private GenericParameterDefinition[] m_parametersDefinition;

            //
            // Constructor Methods
            //
 80062de:	9a26      	ldr	r2, [sp, #152]	; 0x98
            CLASS       = 0x12,    // CLASS <class Token>
            VAR         = 0x13,    // a class type variable VAR <U1>
            ARRAY       = 0x14,    // MDARRAY <type> <rank> <bcount> <bound1> ... <lbcount> <lb1> ...
            GENERICINST = 0x15,    // instantiated type
            TYPEDBYREF  = 0x16,    // This is a simple type.
            I           = 0x18,    // native integer size
 80062e0:	3a08      	subs	r2, #8
 80062e2:	9127      	str	r1, [sp, #156]	; 0x9c
 80062e4:	a927      	add	r1, sp, #156	; 0x9c
 80062e6:	f1a1 0008 	sub.w	r0, r1, #8
 80062ea:	4611      	mov	r1, r2
 80062ec:	f7fa fae6 	bl	80008bc <UIntPtr_.ctor$2864>
            VOID        = 0x01,
            BOOLEAN     = 0x02,
            CHAR        = 0x03,
            I1          = 0x04,
            U1          = 0x05,
            I2          = 0x06,
 80062f0:	9827      	ldr	r0, [sp, #156]	; 0x9c

        public struct InterfaceMap
        {
            public static readonly InterfaceMap[] SharedEmptyArray = new InterfaceMap[0];

            //
 80062f2:	6840      	ldr	r0, [r0, #4]
            {
                if(this.IsDelayedType)
                {
                    sb.Append( "delayed " );
                }
                else if(this.IsOpenType)
 80062f4:	69c0      	ldr	r0, [r0, #28]
 80062f6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80062f8:	991e      	ldr	r1, [sp, #120]	; 0x78
 80062fa:	9002      	str	r0, [sp, #8]
 80062fc:	4608      	mov	r0, r1
 80062fe:	9a02      	ldr	r2, [sp, #8]
 8006300:	4790      	blx	r2
 8006302:	f010 0fff 	tst.w	r0, #255	; 0xff
 8006306:	d009      	beq.n	800631c <TypeRepresentation_PrettyToString$14686+0x29c>
 8006308:	e7ff      	b.n	800630a <TypeRepresentation_PrettyToString$14686+0x28a>
                {
                    sb.Append( "generic " );
 800630a:	4805      	ldr	r0, [pc, #20]	; (8006320 <TypeRepresentation_PrettyToString$14686+0x2a0>)
 800630c:	4905      	ldr	r1, [pc, #20]	; (8006324 <TypeRepresentation_PrettyToString$14686+0x2a4>)
 800630e:	4479      	add	r1, pc
 8006310:	4401      	add	r1, r0
 8006312:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8006314:	f006 fd72 	bl	800cdfc <StringBuilder_Append$8507>
                }
 8006318:	9001      	str	r0, [sp, #4]
 800631a:	e7ff      	b.n	800631c <TypeRepresentation_PrettyToString$14686+0x29c>
            }
 800631c:	e6d9      	b.n	80060d2 <TypeRepresentation_PrettyToString$14686+0x52>
 800631e:	46c0      	nop			; (mov r8, r8)
 8006320:	e8013aac 	.word	0xe8013aac
 8006324:	17ffb4c2 	.word	0x17ffb4c2
 8006328:	e80141bc 	.word	0xe80141bc
 800632c:	17ffb50c 	.word	0x17ffb50c
 8006330:	e801366c 	.word	0xe801366c
 8006334:	17ffb67a 	.word	0x17ffb67a
 8006338:	17ffb522 	.word	0x17ffb522
 800633c:	e8013a6c 	.word	0xe8013a6c
 8006340:	17ffb638 	.word	0x17ffb638
 8006344:	e801368c 	.word	0xe801368c
 8006348:	17ffb5ce 	.word	0x17ffb5ce
 800634c:	e8013a8c 	.word	0xe8013a8c
 8006350:	17ffb5f8 	.word	0x17ffb5f8
 8006354:	17ffb58a 	.word	0x17ffb58a

08006358 <TypeSystemManager_CastToType$4948>:
 8006358:	b580      	push	{r7, lr}
 800635a:	b086      	sub	sp, #24
 800635c:	4602      	mov	r2, r0

        [TS.WellKnownMethod( "TypeSystemManager_CastToType" )]
        public static object CastToType( object    obj      ,
                                         TS.VTable expected )
        {
            if(obj != null)
 800635e:	2800      	cmp	r0, #0
 8006360:	9205      	str	r2, [sp, #20]
 8006362:	9104      	str	r1, [sp, #16]
 8006364:	d103      	bne.n	800636e <TypeSystemManager_CastToType$4948+0x16>
 8006366:	e7ff      	b.n	8006368 <TypeSystemManager_CastToType$4948+0x10>
                    throw new InvalidCastException();
                }
            }

            return obj;
        }
 8006368:	9805      	ldr	r0, [sp, #20]

        [TS.WellKnownMethod( "TypeSystemManager_CastToType" )]
        public static object CastToType( object    obj      ,
                                         TS.VTable expected )
        {
            if(obj != null)
 800636a:	9003      	str	r0, [sp, #12]
 800636c:	e009      	b.n	8006382 <TypeSystemManager_CastToType$4948+0x2a>
            {
                obj = CastToTypeNoThrow( obj, expected );
 800636e:	9805      	ldr	r0, [sp, #20]
 8006370:	9904      	ldr	r1, [sp, #16]
 8006372:	f7fb f8e2 	bl	800153a <TypeSystemManager_CastToTypeNoThrow$4949>
 8006376:	4601      	mov	r1, r0
                if(obj == null)
 8006378:	2800      	cmp	r0, #0
 800637a:	9102      	str	r1, [sp, #8]
 800637c:	d115      	bne.n	80063aa <TypeSystemManager_CastToType$4948+0x52>
 800637e:	e7ff      	b.n	8006380 <TypeSystemManager_CastToType$4948+0x28>
                {
                    throw new InvalidCastException();
 8006380:	e002      	b.n	8006388 <TypeSystemManager_CastToType$4948+0x30>
                }
            }

            return obj;
        }
 8006382:	9803      	ldr	r0, [sp, #12]
 8006384:	b006      	add	sp, #24
 8006386:	bd80      	pop	{r7, pc}
            if(obj != null)
            {
                obj = CastToTypeNoThrow( obj, expected );
                if(obj == null)
                {
                    throw new InvalidCastException();
 8006388:	4809      	ldr	r0, [pc, #36]	; (80063b0 <TypeSystemManager_CastToType$4948+0x58>)
 800638a:	490a      	ldr	r1, [pc, #40]	; (80063b4 <TypeSystemManager_CastToType$4948+0x5c>)
 800638c:	4479      	add	r1, pc
 800638e:	4408      	add	r0, r1
 8006390:	4a09      	ldr	r2, [pc, #36]	; (80063b8 <TypeSystemManager_CastToType$4948+0x60>)
 8006392:	4411      	add	r1, r2
 8006394:	9001      	str	r0, [sp, #4]
 8006396:	f7fa fa13 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800639a:	9000      	str	r0, [sp, #0]
 800639c:	f002 fd74 	bl	8008e88 <InvalidCastException_.ctor$7120>
 80063a0:	9801      	ldr	r0, [sp, #4]
 80063a2:	9900      	ldr	r1, [sp, #0]
 80063a4:	f7fa fa62 	bl	800086c <TypeSystemManager_Throw$4954>
 80063a8:	e7ee      	b.n	8006388 <TypeSystemManager_CastToType$4948+0x30>
                }
            }

            return obj;
        }
 80063aa:	9802      	ldr	r0, [sp, #8]
                obj = CastToTypeNoThrow( obj, expected );
                if(obj == null)
                {
                    throw new InvalidCastException();
                }
            }
 80063ac:	9003      	str	r0, [sp, #12]
 80063ae:	e7e8      	b.n	8006382 <TypeSystemManager_CastToType$4948+0x2a>
 80063b0:	ffffea38 	.word	0xffffea38
 80063b4:	17ffb444 	.word	0x17ffb444
 80063b8:	e801235c 	.word	0xe801235c

080063bc <TypeRepresentation_get_ContainedType$14667>:
 80063bc:	2000      	movs	r0, #0
 80063be:	4770      	bx	lr

080063c0 <VTable_ImplementsInterface$3678>:
        }

        [NoInline]
        public bool ImplementsInterface( VTable expectedItf )
        {
            VTable.InterfaceMap[] itfs = this.InterfaceMethodPointers;
 80063c0:	b086      	sub	sp, #24
 80063c2:	4602      	mov	r2, r0
 80063c4:	4603      	mov	r3, r0

        public bool IsArray
        {
            [Inline]
            get
            {
 80063c6:	6880      	ldr	r0, [r0, #8]
        [NoInline]
        public bool ImplementsInterface( VTable expectedItf )
        {
            VTable.InterfaceMap[] itfs = this.InterfaceMethodPointers;

            for(int i = itfs.Length; --i >= 0; )
 80063c8:	9305      	str	r3, [sp, #20]
 80063ca:	9104      	str	r1, [sp, #16]
 80063cc:	9203      	str	r2, [sp, #12]
 80063ce:	9002      	str	r0, [sp, #8]
 80063d0:	e7ff      	b.n	80063d2 <VTable_ImplementsInterface$3678+0x12>
 80063d2:	9802      	ldr	r0, [sp, #8]
 80063d4:	3801      	subs	r0, #1
 80063d6:	4601      	mov	r1, r0
 80063d8:	2800      	cmp	r0, #0
 80063da:	9101      	str	r1, [sp, #4]
 80063dc:	db09      	blt.n	80063f2 <VTable_ImplementsInterface$3678+0x32>
 80063de:	e7ff      	b.n	80063e0 <VTable_ImplementsInterface$3678+0x20>
            {
                if(Object.ReferenceEquals( itfs[i].Interface, expectedItf ))
 80063e0:	9805      	ldr	r0, [sp, #20]
 80063e2:	9901      	ldr	r1, [sp, #4]
 80063e4:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 80063e8:	68d2      	ldr	r2, [r2, #12]
 80063ea:	9b04      	ldr	r3, [sp, #16]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d006      	beq.n	80063fe <VTable_ImplementsInterface$3678+0x3e>
 80063f0:	e008      	b.n	8006404 <VTable_ImplementsInterface$3678+0x44>
 80063f2:	2000      	movs	r0, #0
                {
                    return true;
                }
            }

            return false;
 80063f4:	9000      	str	r0, [sp, #0]
 80063f6:	e7ff      	b.n	80063f8 <VTable_ImplementsInterface$3678+0x38>
 80063f8:	9800      	ldr	r0, [sp, #0]
 80063fa:	b006      	add	sp, #24
 80063fc:	4770      	bx	lr
 80063fe:	2001      	movs	r0, #1

            for(int i = itfs.Length; --i >= 0; )
            {
                if(Object.ReferenceEquals( itfs[i].Interface, expectedItf ))
                {
                    return true;
 8006400:	9000      	str	r0, [sp, #0]
 8006402:	e7f9      	b.n	80063f8 <VTable_ImplementsInterface$3678+0x38>
 8006404:	9801      	ldr	r0, [sp, #4]
                }
            }
 8006406:	9002      	str	r0, [sp, #8]
 8006408:	e7e3      	b.n	80063d2 <VTable_ImplementsInterface$3678+0x12>
 800640a:	46c0      	nop			; (mov r8, r8)

0800640c <VTable_ToString$3682>:
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	4601      	mov	r1, r0
        // Debug Methods
        //

        public override string ToString()
        {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
 8006412:	4a0e      	ldr	r2, [pc, #56]	; (800644c <VTable_ToString$3682+0x40>)
 8006414:	4b0e      	ldr	r3, [pc, #56]	; (8006450 <VTable_ToString$3682+0x44>)
 8006416:	447b      	add	r3, pc
 8006418:	441a      	add	r2, r3
 800641a:	f8df c038 	ldr.w	ip, [pc, #56]	; 8006454 <VTable_ToString$3682+0x48>
 800641e:	4463      	add	r3, ip
 8006420:	9003      	str	r0, [sp, #12]
 8006422:	4610      	mov	r0, r2
 8006424:	9102      	str	r1, [sp, #8]
 8006426:	4619      	mov	r1, r3
 8006428:	f7fa f9ca 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800642c:	9001      	str	r0, [sp, #4]
 800642e:	f000 f813 	bl	8006458 <StringBuilder_.ctor$8487>

            sb.AppendFormat( "VTable({0})", this.TypeInfo );
 8006432:	9803      	ldr	r0, [sp, #12]
 8006434:	6901      	ldr	r1, [r0, #16]
 8006436:	9801      	ldr	r0, [sp, #4]
 8006438:	f000 f820 	bl	800647c <StringBuilder_AppendFormat$8550>

            return sb.ToString();
 800643c:	9901      	ldr	r1, [sp, #4]
 800643e:	9000      	str	r0, [sp, #0]
 8006440:	4608      	mov	r0, r1
 8006442:	f7fc fa1f 	bl	8002884 <StringBuilder_ToString$8499>
 8006446:	b004      	add	sp, #16
 8006448:	bd80      	pop	{r7, pc}
 800644a:	46c0      	nop			; (mov r8, r8)
 800644c:	ffffea38 	.word	0xffffea38
 8006450:	17ffb3ba 	.word	0x17ffb3ba
 8006454:	e8010b3c 	.word	0xe8010b3c

08006458 <StringBuilder_.ctor$8487>:
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	4601      	mov	r1, r0
 800645e:	4a05      	ldr	r2, [pc, #20]	; (8006474 <StringBuilder_.ctor$8487+0x1c>)
 8006460:	4b05      	ldr	r3, [pc, #20]	; (8006478 <StringBuilder_.ctor$8487+0x20>)
 8006462:	447b      	add	r3, pc
 8006464:	58d2      	ldr	r2, [r2, r3]
        }
    }
}

 8006466:	9101      	str	r1, [sp, #4]
 8006468:	4611      	mov	r1, r2
 800646a:	f7fc fa3d 	bl	80028e8 <StringBuilder_.ctor$8488>
 800646e:	b002      	add	sp, #8
 8006470:	bd80      	pop	{r7, pc}
 8006472:	46c0      	nop			; (mov r8, r8)
 8006474:	e8025424 	.word	0xe8025424
 8006478:	17ffb36e 	.word	0x17ffb36e

0800647c <StringBuilder_AppendFormat$8550>:
 800647c:	b5b0      	push	{r4, r5, r7, lr}
 800647e:	b086      	sub	sp, #24
 8006480:	460a      	mov	r2, r1
 8006482:	4603      	mov	r3, r0
 8006484:	f8df c044 	ldr.w	ip, [pc, #68]	; 80064cc <StringBuilder_AppendFormat$8550+0x50>
 8006488:	f8df e044 	ldr.w	lr, [pc, #68]	; 80064d0 <StringBuilder_AppendFormat$8550+0x54>
 800648c:	44fe      	add	lr, pc
 800648e:	f85c c00e 	ldr.w	ip, [ip, lr]
            return Insert( index, value.ToString(), 1 );
        }

        public StringBuilder AppendFormat( String format, Object arg0 )
        {
            return AppendFormat( null, format, new Object[] { arg0 } );
 8006492:	4c10      	ldr	r4, [pc, #64]	; (80064d4 <StringBuilder_AppendFormat$8550+0x58>)
 8006494:	4474      	add	r4, lr
 8006496:	4d10      	ldr	r5, [pc, #64]	; (80064d8 <StringBuilder_AppendFormat$8550+0x5c>)
 8006498:	4475      	add	r5, lr
 800649a:	9005      	str	r0, [sp, #20]
 800649c:	4620      	mov	r0, r4
 800649e:	9104      	str	r1, [sp, #16]
 80064a0:	4629      	mov	r1, r5
 80064a2:	9203      	str	r2, [sp, #12]
 80064a4:	4662      	mov	r2, ip
 80064a6:	f8cd e008 	str.w	lr, [sp, #8]
 80064aa:	9301      	str	r3, [sp, #4]
 80064ac:	f7fb fe78 	bl	80021a0 <DefaultTypeSystemManager_AllocateArray$4962>
 80064b0:	9904      	ldr	r1, [sp, #16]
 80064b2:	60c1      	str	r1, [r0, #12]
 80064b4:	4a09      	ldr	r2, [pc, #36]	; (80064dc <StringBuilder_AppendFormat$8550+0x60>)
 80064b6:	9b02      	ldr	r3, [sp, #8]
 80064b8:	18d1      	adds	r1, r2, r3
 80064ba:	9a05      	ldr	r2, [sp, #20]
 80064bc:	9000      	str	r0, [sp, #0]
 80064be:	4610      	mov	r0, r2
 80064c0:	9a00      	ldr	r2, [sp, #0]
 80064c2:	f7fc fa2d 	bl	8002920 <StringBuilder_AppendFormat$8555>
 80064c6:	b006      	add	sp, #24
 80064c8:	bdb0      	pop	{r4, r5, r7, pc}
 80064ca:	46c0      	nop			; (mov r8, r8)
 80064cc:	e802542c 	.word	0xe802542c
 80064d0:	17ffb344 	.word	0x17ffb344
 80064d4:	ffffea38 	.word	0xffffea38
 80064d8:	e80133bc 	.word	0xe80133bc
 80064dc:	e801187c 	.word	0xe801187c

080064e0 <GpioController_OpenPin$16231>:
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	4608      	mov	r0, r1
        ///     in user mode. For information about how the pin numbers correspond to physical pins, see the
        ///     documentation for your circuit board.</param>
        /// <returns>The opened GPIO pin.</returns>
        public GpioPin OpenPin(int pinNumber)
        {
            return OpenPin(pinNumber, GpioSharingMode.Exclusive);
 80064e6:	9001      	str	r0, [sp, #4]
 80064e8:	4608      	mov	r0, r1
 80064ea:	f009 ff2d 	bl	8010348 <GpioController_OpenPin$16232>
 80064ee:	b002      	add	sp, #8
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	46c0      	nop			; (mov r8, r8)

080064f4 <GpioPin_SetDriveMode$16273>:
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b086      	sub	sp, #24
 80064f8:	460a      	mov	r2, r1
 80064fa:	4603      	mov	r3, r0
 80064fc:	7c00      	ldrb	r0, [r0, #16]
        /// <param name="driveMode">An enumeration value that specifies drive mode to use for the GPIO pin. The drive
        ///     mode specifies whether the pin is configured as an input or an output, and determines how values are
        ///     driven onto the pin.</param>
        public void SetDriveMode(GpioPinDriveMode driveMode)
        {
            if (_disposed)
 80064fe:	2800      	cmp	r0, #0
 8006500:	9305      	str	r3, [sp, #20]
 8006502:	9104      	str	r1, [sp, #16]
 8006504:	9203      	str	r2, [sp, #12]
 8006506:	d01b      	beq.n	8006540 <GpioPin_SetDriveMode$16273+0x4c>
 8006508:	e7ff      	b.n	800650a <GpioPin_SetDriveMode$16273+0x16>
            {
                throw new ObjectDisposedException(this.GetType().FullName);
 800650a:	e7ff      	b.n	800650c <GpioPin_SetDriveMode$16273+0x18>
 800650c:	9805      	ldr	r0, [sp, #20]
 800650e:	f7fb fae3 	bl	8001ad8 <Object_GetType$3817>
 8006512:	f7fb fc52 	bl	8001dba <RuntimeType_get_FullName$3105>
 8006516:	4919      	ldr	r1, [pc, #100]	; (800657c <GpioPin_SetDriveMode$16273+0x88>)
 8006518:	4a19      	ldr	r2, [pc, #100]	; (8006580 <GpioPin_SetDriveMode$16273+0x8c>)
 800651a:	447a      	add	r2, pc
 800651c:	4411      	add	r1, r2
 800651e:	4b19      	ldr	r3, [pc, #100]	; (8006584 <GpioPin_SetDriveMode$16273+0x90>)
 8006520:	441a      	add	r2, r3
 8006522:	9002      	str	r0, [sp, #8]
 8006524:	4608      	mov	r0, r1
 8006526:	9101      	str	r1, [sp, #4]
 8006528:	4611      	mov	r1, r2
 800652a:	f7fa f949 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800652e:	9000      	str	r0, [sp, #0]
 8006530:	9902      	ldr	r1, [sp, #8]
 8006532:	f007 fbc7 	bl	800dcc4 <ObjectDisposedException_.ctor$7287>
 8006536:	9801      	ldr	r0, [sp, #4]
 8006538:	9900      	ldr	r1, [sp, #0]
 800653a:	f7fa f997 	bl	800086c <TypeSystemManager_Throw$4954>
 800653e:	e7e5      	b.n	800650c <GpioPin_SetDriveMode$16273+0x18>
 8006540:	9805      	ldr	r0, [sp, #20]
 8006542:	6941      	ldr	r1, [r0, #20]
            }

            if (driveMode != _driveMode)
 8006544:	9a04      	ldr	r2, [sp, #16]
 8006546:	428a      	cmp	r2, r1
 8006548:	d009      	beq.n	800655e <GpioPin_SetDriveMode$16273+0x6a>
 800654a:	e7ff      	b.n	800654c <GpioPin_SetDriveMode$16273+0x58>
            {
                _provider.SetPinDriveMode((GpioDriveMode)driveMode);
 800654c:	9805      	ldr	r0, [sp, #20]
 800654e:	6880      	ldr	r0, [r0, #8]
 8006550:	9904      	ldr	r1, [sp, #16]
 8006552:	f00a f83d 	bl	80105d0 <GpioPinMbed_SetPinDriveMode$16520>
                if (driveMode == GpioPinDriveMode.Output)
 8006556:	9804      	ldr	r0, [sp, #16]
 8006558:	2801      	cmp	r0, #1
 800655a:	d002      	beq.n	8006562 <GpioPin_SetDriveMode$16273+0x6e>
 800655c:	e009      	b.n	8006572 <GpioPin_SetDriveMode$16273+0x7e>
 800655e:	b006      	add	sp, #24
 8006560:	bd80      	pop	{r7, pc}
                {
                    _provider.Write((int)_lastOutputValue);
 8006562:	9805      	ldr	r0, [sp, #20]
 8006564:	6881      	ldr	r1, [r0, #8]
 8006566:	6982      	ldr	r2, [r0, #24]
                }
            }
        }

        /// <summary>
        /// Gets or sets the debounce timeout for the general-purpose I/O (GPIO) pin, which is an interval during which
 8006568:	6888      	ldr	r0, [r1, #8]
 800656a:	4611      	mov	r1, r2
 800656c:	f016 fe0c 	bl	801d188 <tmp_gpio_write>
            {
                _provider.SetPinDriveMode((GpioDriveMode)driveMode);
                if (driveMode == GpioPinDriveMode.Output)
                {
                    _provider.Write((int)_lastOutputValue);
                }
 8006570:	e7ff      	b.n	8006572 <GpioPin_SetDriveMode$16273+0x7e>
 8006572:	9804      	ldr	r0, [sp, #16]
 8006574:	9905      	ldr	r1, [sp, #20]
 8006576:	6148      	str	r0, [r1, #20]

                _driveMode = driveMode;
            }
 8006578:	e7f1      	b.n	800655e <GpioPin_SetDriveMode$16273+0x6a>
 800657a:	46c0      	nop			; (mov r8, r8)
 800657c:	ffffea38 	.word	0xffffea38
 8006580:	17ffb2b6 	.word	0x17ffb2b6
 8006584:	e80144bc 	.word	0xe80144bc

08006588 <LedTogglerSimultaneous_run$16321>:
 8006588:	b580      	push	{r7, lr}
 800658a:	b086      	sub	sp, #24
 800658c:	2200      	movs	r2, #0
        {
        }

        public override void run(float t)
        {
            for (int i = 0; i < PinCount; ++i)
 800658e:	9105      	str	r1, [sp, #20]
 8006590:	9004      	str	r0, [sp, #16]
 8006592:	9203      	str	r2, [sp, #12]
 8006594:	e7ff      	b.n	8006596 <LedTogglerSimultaneous_run$16321+0xe>
 8006596:	9803      	ldr	r0, [sp, #12]
 8006598:	9904      	ldr	r1, [sp, #16]
 800659a:	9002      	str	r0, [sp, #8]
 800659c:	4608      	mov	r0, r1
 800659e:	f00a f917 	bl	80107d0 <LedToggler_get_PinCount$16317>
 80065a2:	9902      	ldr	r1, [sp, #8]
 80065a4:	4281      	cmp	r1, r0
 80065a6:	da0c      	bge.n	80065c2 <LedTogglerSimultaneous_run$16321+0x3a>
 80065a8:	e7ff      	b.n	80065aa <LedTogglerSimultaneous_run$16321+0x22>
            {
                this[i] = (t < 0.5) ? GpioPinValue.High : GpioPinValue.Low;
 80065aa:	9805      	ldr	r0, [sp, #20]
 80065ac:	f01e f8ce 	bl	802474c <__aeabi_f2d>
 80065b0:	2200      	movs	r2, #0
 80065b2:	2300      	movs	r3, #0
 80065b4:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 80065b8:	f01e fb8e 	bl	8024cd8 <__aeabi_dcmplt>
 80065bc:	2800      	cmp	r0, #0
 80065be:	d102      	bne.n	80065c6 <LedTogglerSimultaneous_run$16321+0x3e>
 80065c0:	e004      	b.n	80065cc <LedTogglerSimultaneous_run$16321+0x44>
 80065c2:	b006      	add	sp, #24
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	2001      	movs	r0, #1
 80065c8:	9001      	str	r0, [sp, #4]
 80065ca:	e002      	b.n	80065d2 <LedTogglerSimultaneous_run$16321+0x4a>
 80065cc:	2000      	movs	r0, #0
 80065ce:	9001      	str	r0, [sp, #4]
 80065d0:	e7ff      	b.n	80065d2 <LedTogglerSimultaneous_run$16321+0x4a>
 80065d2:	9801      	ldr	r0, [sp, #4]
 80065d4:	9904      	ldr	r1, [sp, #16]
 80065d6:	9000      	str	r0, [sp, #0]
 80065d8:	4608      	mov	r0, r1
 80065da:	9902      	ldr	r1, [sp, #8]
 80065dc:	9a00      	ldr	r2, [sp, #0]
 80065de:	f00a f8fe 	bl	80107de <LedToggler_set_Item$16319>
        {
        }

        public override void run(float t)
        {
            for (int i = 0; i < PinCount; ++i)
 80065e2:	9802      	ldr	r0, [sp, #8]
 80065e4:	1c41      	adds	r1, r0, #1
 80065e6:	9103      	str	r1, [sp, #12]
 80065e8:	e7d5      	b.n	8006596 <LedTogglerSimultaneous_run$16321+0xe>

080065ea <LedTogglerSimultaneous_.ctor$16320>:
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b082      	sub	sp, #8
 80065ee:	460a      	mov	r2, r1
 80065f0:	4603      	mov	r3, r0
    };

    internal class LedTogglerSimultaneous : LedToggler
    {
        public LedTogglerSimultaneous(GpioPin[] pins)
            : base(pins)
 80065f2:	9201      	str	r2, [sp, #4]
 80065f4:	9300      	str	r3, [sp, #0]
 80065f6:	f00a f8e3 	bl	80107c0 <LedToggler_.ctor$16315>
 80065fa:	b002      	add	sp, #8
 80065fc:	bd80      	pop	{r7, pc}

080065fe <LedTogglerSequential_run$16323>:
 80065fe:	b580      	push	{r7, lr}
 8006600:	b086      	sub	sp, #24
 8006602:	2200      	movs	r2, #0
        {
        }

        public override void run(float t)
        {
            for (int i = 0; i < PinCount; ++i)
 8006604:	9105      	str	r1, [sp, #20]
 8006606:	9004      	str	r0, [sp, #16]
 8006608:	9203      	str	r2, [sp, #12]
 800660a:	e7ff      	b.n	800660c <LedTogglerSequential_run$16323+0xe>
 800660c:	9803      	ldr	r0, [sp, #12]
 800660e:	9904      	ldr	r1, [sp, #16]
 8006610:	9002      	str	r0, [sp, #8]
 8006612:	4608      	mov	r0, r1
 8006614:	f00a f8dc 	bl	80107d0 <LedToggler_get_PinCount$16317>
 8006618:	9902      	ldr	r1, [sp, #8]
 800661a:	4281      	cmp	r1, r0
 800661c:	da0d      	bge.n	800663a <LedTogglerSequential_run$16323+0x3c>
 800661e:	e7ff      	b.n	8006620 <LedTogglerSequential_run$16323+0x22>
            {
                this[i] = ((int)(t * 4) == i) ? GpioPinValue.High : GpioPinValue.Low;
 8006620:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8006624:	9805      	ldr	r0, [sp, #20]
 8006626:	f01e fd25 	bl	8025074 <__aeabi_fmul>
 800662a:	f01e f88f 	bl	802474c <__aeabi_f2d>
 800662e:	f01e fba3 	bl	8024d78 <__aeabi_d2uiz>
 8006632:	9902      	ldr	r1, [sp, #8]
 8006634:	4288      	cmp	r0, r1
 8006636:	d002      	beq.n	800663e <LedTogglerSequential_run$16323+0x40>
 8006638:	e004      	b.n	8006644 <LedTogglerSequential_run$16323+0x46>
 800663a:	b006      	add	sp, #24
 800663c:	bd80      	pop	{r7, pc}
 800663e:	2001      	movs	r0, #1
 8006640:	9001      	str	r0, [sp, #4]
 8006642:	e002      	b.n	800664a <LedTogglerSequential_run$16323+0x4c>
 8006644:	2000      	movs	r0, #0
 8006646:	9001      	str	r0, [sp, #4]
 8006648:	e7ff      	b.n	800664a <LedTogglerSequential_run$16323+0x4c>
 800664a:	9801      	ldr	r0, [sp, #4]
 800664c:	9904      	ldr	r1, [sp, #16]
 800664e:	9000      	str	r0, [sp, #0]
 8006650:	4608      	mov	r0, r1
 8006652:	9902      	ldr	r1, [sp, #8]
 8006654:	9a00      	ldr	r2, [sp, #0]
 8006656:	f00a f8c2 	bl	80107de <LedToggler_set_Item$16319>
        {
        }

        public override void run(float t)
        {
            for (int i = 0; i < PinCount; ++i)
 800665a:	9802      	ldr	r0, [sp, #8]
 800665c:	1c41      	adds	r1, r0, #1
 800665e:	9103      	str	r1, [sp, #12]
 8006660:	e7d4      	b.n	800660c <LedTogglerSequential_run$16323+0xe>

08006662 <LedTogglerSequential_.ctor$16322>:
 8006662:	b580      	push	{r7, lr}
 8006664:	b082      	sub	sp, #8
 8006666:	460a      	mov	r2, r1
 8006668:	4603      	mov	r3, r0
    }

    internal class LedTogglerSequential : LedToggler
    {
        public LedTogglerSequential(GpioPin[] pins)
            : base(pins)
 800666a:	9201      	str	r2, [sp, #4]
 800666c:	9300      	str	r3, [sp, #0]
 800666e:	f00a f8a7 	bl	80107c0 <LedToggler_.ctor$16315>
 8006672:	b002      	add	sp, #8
 8006674:	bd80      	pop	{r7, pc}

08006676 <LedTogglerAlternate_run$16325>:
 8006676:	b580      	push	{r7, lr}
 8006678:	b088      	sub	sp, #32
 800667a:	2200      	movs	r2, #0
        {
        }

        public override void run(float t)
        {
            for (int i = 0; i < PinCount; ++i)
 800667c:	9107      	str	r1, [sp, #28]
 800667e:	9006      	str	r0, [sp, #24]
 8006680:	9205      	str	r2, [sp, #20]
 8006682:	e7ff      	b.n	8006684 <LedTogglerAlternate_run$16325+0xe>
 8006684:	9805      	ldr	r0, [sp, #20]
 8006686:	9906      	ldr	r1, [sp, #24]
 8006688:	9004      	str	r0, [sp, #16]
 800668a:	4608      	mov	r0, r1
 800668c:	f00a f8a0 	bl	80107d0 <LedToggler_get_PinCount$16317>
 8006690:	9904      	ldr	r1, [sp, #16]
 8006692:	4281      	cmp	r1, r0
 8006694:	da11      	bge.n	80066ba <LedTogglerAlternate_run$16325+0x44>
 8006696:	e7ff      	b.n	8006698 <LedTogglerAlternate_run$16325+0x22>
            {
                this[i] = ((i % 2) == (int)(t * 2)) ? GpioPinValue.High : GpioPinValue.Low;
 8006698:	9804      	ldr	r0, [sp, #16]
 800669a:	f000 0101 	and.w	r1, r0, #1
 800669e:	9807      	ldr	r0, [sp, #28]
 80066a0:	9a07      	ldr	r2, [sp, #28]
 80066a2:	9103      	str	r1, [sp, #12]
 80066a4:	4611      	mov	r1, r2
 80066a6:	f01e fbdd 	bl	8024e64 <__addsf3>
 80066aa:	f01e f84f 	bl	802474c <__aeabi_f2d>
 80066ae:	f01e fb63 	bl	8024d78 <__aeabi_d2uiz>
 80066b2:	9903      	ldr	r1, [sp, #12]
 80066b4:	4281      	cmp	r1, r0
 80066b6:	d002      	beq.n	80066be <LedTogglerAlternate_run$16325+0x48>
 80066b8:	e004      	b.n	80066c4 <LedTogglerAlternate_run$16325+0x4e>
 80066ba:	b008      	add	sp, #32
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	2001      	movs	r0, #1
 80066c0:	9002      	str	r0, [sp, #8]
 80066c2:	e002      	b.n	80066ca <LedTogglerAlternate_run$16325+0x54>
 80066c4:	2000      	movs	r0, #0
 80066c6:	9002      	str	r0, [sp, #8]
 80066c8:	e7ff      	b.n	80066ca <LedTogglerAlternate_run$16325+0x54>
 80066ca:	9802      	ldr	r0, [sp, #8]
 80066cc:	9906      	ldr	r1, [sp, #24]
 80066ce:	9001      	str	r0, [sp, #4]
 80066d0:	4608      	mov	r0, r1
 80066d2:	9904      	ldr	r1, [sp, #16]
 80066d4:	9a01      	ldr	r2, [sp, #4]
 80066d6:	f00a f882 	bl	80107de <LedToggler_set_Item$16319>
        {
        }

        public override void run(float t)
        {
            for (int i = 0; i < PinCount; ++i)
 80066da:	9804      	ldr	r0, [sp, #16]
 80066dc:	1c41      	adds	r1, r0, #1
 80066de:	9105      	str	r1, [sp, #20]
 80066e0:	e7d0      	b.n	8006684 <LedTogglerAlternate_run$16325+0xe>

080066e2 <LedTogglerAlternate_.ctor$16324>:
 80066e2:	b580      	push	{r7, lr}
 80066e4:	b082      	sub	sp, #8
 80066e6:	460a      	mov	r2, r1
 80066e8:	4603      	mov	r3, r0
    }

    internal class LedTogglerAlternate : LedToggler
    {
        public LedTogglerAlternate(GpioPin[] pins)
            : base(pins)
 80066ea:	9201      	str	r2, [sp, #4]
 80066ec:	9300      	str	r3, [sp, #0]
 80066ee:	f00a f867 	bl	80107c0 <LedToggler_.ctor$16315>
 80066f2:	b002      	add	sp, #8
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <Timer_.ctor$16364>:
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b082      	sub	sp, #8
 80066fa:	4601      	mov	r1, r0
            while ((int)(UsTicker.us_ticker_read() - timestamp) < us) { }
        }

        public Timer()
        {
            reset();
 80066fc:	9101      	str	r1, [sp, #4]
 80066fe:	f000 fa01 	bl	8006b04 <Timer_reset$16367>
 8006702:	b002      	add	sp, #8
 8006704:	bd80      	pop	{r7, pc}

08006706 <Timer_start$16365>:
 8006706:	b580      	push	{r7, lr}
 8006708:	b082      	sub	sp, #8
 800670a:	4601      	mov	r1, r0

        /** Start the timer
         */
        public void start()
        {
            if (!_running)
 800670c:	7a00      	ldrb	r0, [r0, #8]
 800670e:	2800      	cmp	r0, #0
 8006710:	9101      	str	r1, [sp, #4]
 8006712:	d107      	bne.n	8006724 <Timer_start$16365+0x1e>
 8006714:	e7ff      	b.n	8006716 <Timer_start$16365+0x10>
            {
                reset( );
 8006716:	9801      	ldr	r0, [sp, #4]
 8006718:	f000 f9f4 	bl	8006b04 <Timer_reset$16367>
 800671c:	2001      	movs	r0, #1
 800671e:	9901      	ldr	r1, [sp, #4]
 8006720:	7208      	strb	r0, [r1, #8]
                _running = true;
            }
 8006722:	e7ff      	b.n	8006724 <Timer_start$16365+0x1e>
 8006724:	b002      	add	sp, #8
 8006726:	bd80      	pop	{r7, pc}

08006728 <SpiDevice_GetDeviceSelector$16149>:
        /// <param name="friendlyName">Input parameter specifying an identifying name for the desired bus. This usually corresponds to a name on the schematic.</param>
        /// <returns>String containing all the buses that have the input in the name.</returns>
        public static string GetDeviceSelector(string friendlyName)
        {
            // UWP prescribes returning the channels as one single string that looks like the following: "CH1;CH2;"
            string[] channels = GetSpiChannels( );
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	f009 fc6a 	bl	8010004 <SpiDevice_GetSpiChannels$4191>
 8006730:	2100      	movs	r1, #0

            foreach (string channel in channels)
 8006732:	9003      	str	r0, [sp, #12]
 8006734:	9102      	str	r1, [sp, #8]
 8006736:	e7ff      	b.n	8006738 <SpiDevice_GetDeviceSelector$16149+0x10>
 8006738:	9802      	ldr	r0, [sp, #8]
 800673a:	9903      	ldr	r1, [sp, #12]
 800673c:	688a      	ldr	r2, [r1, #8]
        public static string GetDeviceSelector(string friendlyName)
        {
            // UWP prescribes returning the channels as one single string that looks like the following: "CH1;CH2;"
            string[] channels = GetSpiChannels( );

            foreach (string channel in channels)
 800673e:	4290      	cmp	r0, r2
 8006740:	9001      	str	r0, [sp, #4]
 8006742:	da0f      	bge.n	8006764 <SpiDevice_GetDeviceSelector$16149+0x3c>
 8006744:	e7ff      	b.n	8006746 <SpiDevice_GetDeviceSelector$16149+0x1e>
 8006746:	9803      	ldr	r0, [sp, #12]
 8006748:	9901      	ldr	r1, [sp, #4]
 800674a:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 800674e:	68d0      	ldr	r0, [r2, #12]
            {
                if (channel.Equals(friendlyName))
 8006750:	4a0c      	ldr	r2, [pc, #48]	; (8006784 <SpiDevice_GetDeviceSelector$16149+0x5c>)
 8006752:	4b0d      	ldr	r3, [pc, #52]	; (8006788 <SpiDevice_GetDeviceSelector$16149+0x60>)
 8006754:	447b      	add	r3, pc
 8006756:	18d1      	adds	r1, r2, r3
 8006758:	f7fb fc5a 	bl	8002010 <String_Equals$2490>
 800675c:	f010 0fff 	tst.w	r0, #255	; 0xff
 8006760:	d106      	bne.n	8006770 <SpiDevice_GetDeviceSelector$16149+0x48>
 8006762:	e00b      	b.n	800677c <SpiDevice_GetDeviceSelector$16149+0x54>
 8006764:	2000      	movs	r0, #0
                {
                    return friendlyName;
                }
            }

            return null;
 8006766:	9000      	str	r0, [sp, #0]
 8006768:	e7ff      	b.n	800676a <SpiDevice_GetDeviceSelector$16149+0x42>
        }
 800676a:	9800      	ldr	r0, [sp, #0]
 800676c:	b004      	add	sp, #16
 800676e:	bd80      	pop	{r7, pc}
 8006770:	4804      	ldr	r0, [pc, #16]	; (8006784 <SpiDevice_GetDeviceSelector$16149+0x5c>)
 8006772:	4906      	ldr	r1, [pc, #24]	; (800678c <SpiDevice_GetDeviceSelector$16149+0x64>)
 8006774:	4479      	add	r1, pc
 8006776:	4408      	add	r0, r1

            foreach (string channel in channels)
            {
                if (channel.Equals(friendlyName))
                {
                    return friendlyName;
 8006778:	9000      	str	r0, [sp, #0]
 800677a:	e7f6      	b.n	800676a <SpiDevice_GetDeviceSelector$16149+0x42>
                }
            }
 800677c:	9801      	ldr	r0, [sp, #4]
 800677e:	1c41      	adds	r1, r0, #1
 8006780:	9102      	str	r1, [sp, #8]
 8006782:	e7d9      	b.n	8006738 <SpiDevice_GetDeviceSelector$16149+0x10>
 8006784:	e8011c9c 	.word	0xe8011c9c
 8006788:	17ffb07c 	.word	0x17ffb07c
 800678c:	17ffb05c 	.word	0x17ffb05c

08006790 <DeviceInformation_FindAllAsync$16297>:
 8006790:	b580      	push	{r7, lr}
 8006792:	b086      	sub	sp, #24
 8006794:	4601      	mov	r1, r0
        /// <param name="aqsFilter">An AQS string that filters the DeviceInformation objects to enumerate. Typically this string is retrieved from the GetDeviceSelector method of a class that interacts with devices. For example, GetDeviceSelector retrieves the string for the StorageDevice class.</param>
        //[Overload("FindAllAsyncAqsFilter"), RemoteAsync]
        //public static IAsyncOperation<DeviceInformationCollection> FindAllAsync([In] string aqsFilter)
        public static DeviceInformationCollection FindAllAsync([In] string aqsFilter)
        {
            return new DeviceInformationCollection()
 8006796:	4a12      	ldr	r2, [pc, #72]	; (80067e0 <DeviceInformation_FindAllAsync$16297+0x50>)
 8006798:	4b12      	ldr	r3, [pc, #72]	; (80067e4 <DeviceInformation_FindAllAsync$16297+0x54>)
 800679a:	447b      	add	r3, pc
 800679c:	441a      	add	r2, r3
 800679e:	f8df c048 	ldr.w	ip, [pc, #72]	; 80067e8 <DeviceInformation_FindAllAsync$16297+0x58>
 80067a2:	449c      	add	ip, r3
 80067a4:	9005      	str	r0, [sp, #20]
 80067a6:	4610      	mov	r0, r2
 80067a8:	9104      	str	r1, [sp, #16]
 80067aa:	4661      	mov	r1, ip
 80067ac:	9203      	str	r2, [sp, #12]
 80067ae:	9302      	str	r3, [sp, #8]
 80067b0:	f7fa f806 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 80067b4:	9001      	str	r0, [sp, #4]
 80067b6:	f009 ffea 	bl	801078e <DeviceInformationCollection_.ctor$16306>
 80067ba:	480c      	ldr	r0, [pc, #48]	; (80067ec <DeviceInformation_FindAllAsync$16297+0x5c>)
 80067bc:	9902      	ldr	r1, [sp, #8]
 80067be:	4401      	add	r1, r0
 80067c0:	9803      	ldr	r0, [sp, #12]
 80067c2:	f7f9 fffd 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 80067c6:	9000      	str	r0, [sp, #0]
 80067c8:	9905      	ldr	r1, [sp, #20]
 80067ca:	9a05      	ldr	r2, [sp, #20]
 80067cc:	f009 ffb2 	bl	8010734 <DeviceInformation_.ctor$16292>
 80067d0:	9801      	ldr	r0, [sp, #4]
 80067d2:	9900      	ldr	r1, [sp, #0]
 80067d4:	f009 ffbc 	bl	8010750 <List`1_Add$22653>
 80067d8:	9801      	ldr	r0, [sp, #4]
 80067da:	b006      	add	sp, #24
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	46c0      	nop			; (mov r8, r8)
 80067e0:	ffffea38 	.word	0xffffea38
 80067e4:	17ffb036 	.word	0x17ffb036
 80067e8:	e801454c 	.word	0xe801454c
 80067ec:	e80145dc 	.word	0xe80145dc

080067f0 <List`1_get_Item$22648>:
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	460a      	mov	r2, r1
 80067f6:	4603      	mov	r3, r0
 80067f8:	68c0      	ldr	r0, [r0, #12]
        public T this[int index]
        {
            get
            {
                // Fllowing trick can reduce the range check by one
                if((uint)index >= (uint)m_size)
 80067fa:	4281      	cmp	r1, r0
 80067fc:	9201      	str	r2, [sp, #4]
 80067fe:	9300      	str	r3, [sp, #0]
 8006800:	d303      	bcc.n	800680a <List`1_get_Item$22648+0x1a>
 8006802:	e7ff      	b.n	8006804 <List`1_get_Item$22648+0x14>
        // before any reallocations are required.
        //
        public List( int capacity )
        {
            if(capacity < 0)
            {
 8006804:	f007 fad0 	bl	800dda8 <ThrowHelper_ThrowArgumentOutOfRangeException$7377>
            {
                // Fllowing trick can reduce the range check by one
                if((uint)index >= (uint)m_size)
                {
                    ThrowHelper.ThrowArgumentOutOfRangeException();
                }
 8006808:	e7ff      	b.n	800680a <List`1_get_Item$22648+0x1a>

                return m_items[index];
 800680a:	9800      	ldr	r0, [sp, #0]
 800680c:	6881      	ldr	r1, [r0, #8]
 800680e:	9a01      	ldr	r2, [sp, #4]
 8006810:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006814:	68c8      	ldr	r0, [r1, #12]
 8006816:	b002      	add	sp, #8
 8006818:	bd80      	pop	{r7, pc}
 800681a:	46c0      	nop			; (mov r8, r8)

0800681c <SpiConnectionSettings_.ctor$16125>:
 800681c:	b580      	push	{r7, lr}
 800681e:	b086      	sub	sp, #24
 8006820:	460a      	mov	r2, r1
 8006822:	4603      	mov	r3, r0

    public abstract class TypeRepresentation : BaseRepresentation
    {
        //
        // This is just a copy of Microsoft.Zelig.MetaData.TypeAttributes, needed to break the dependency of TypeSystem from MetaData.
        //
 8006824:	9005      	str	r0, [sp, #20]
 8006826:	9204      	str	r2, [sp, #16]
 8006828:	9303      	str	r3, [sp, #12]
 800682a:	f009 fa98 	bl	800fd5e <SpiConnectionSettings_set_ChipSelectLine$16127>
 800682e:	480d      	ldr	r0, [pc, #52]	; (8006864 <SpiConnectionSettings_.ctor$16125+0x48>)
 8006830:	490d      	ldr	r1, [pc, #52]	; (8006868 <SpiConnectionSettings_.ctor$16125+0x4c>)
 8006832:	4479      	add	r1, pc
 8006834:	5840      	ldr	r0, [r0, r1]
        [Flags]
        public enum Attributes
        {
 8006836:	9a05      	ldr	r2, [sp, #20]
 8006838:	9002      	str	r0, [sp, #8]
 800683a:	4610      	mov	r0, r2
 800683c:	9b02      	ldr	r3, [sp, #8]
 800683e:	9101      	str	r1, [sp, #4]
 8006840:	4619      	mov	r1, r3
 8006842:	f000 f815 	bl	8006870 <SpiConnectionSettings_set_ClockFrequency$16129>
 8006846:	4809      	ldr	r0, [pc, #36]	; (800686c <SpiConnectionSettings_.ctor$16125+0x50>)
 8006848:	9901      	ldr	r1, [sp, #4]
 800684a:	5841      	ldr	r1, [r0, r1]
            VisibilityMask     = 0x00000007,
 800684c:	9805      	ldr	r0, [sp, #20]
 800684e:	f009 fa8e 	bl	800fd6e <SpiConnectionSettings_set_DataBitLength$16131>
 8006852:	2100      	movs	r1, #0
            NotPublic          = 0x00000000, // Class is not public scope.
 8006854:	9805      	ldr	r0, [sp, #20]
 8006856:	f000 f813 	bl	8006880 <SpiConnectionSettings_set_Mode$16133>
            Public             = 0x00000001, // Class is public scope.
 800685a:	9805      	ldr	r0, [sp, #20]
 800685c:	f009 fa8f 	bl	800fd7e <SpiConnectionSettings_set_SharingMode$16135>
 8006860:	b006      	add	sp, #24
 8006862:	bd80      	pop	{r7, pc}
 8006864:	e802545c 	.word	0xe802545c
 8006868:	17ffaf9e 	.word	0x17ffaf9e
 800686c:	e8025460 	.word	0xe8025460

08006870 <SpiConnectionSettings_set_ClockFrequency$16129>:
 8006870:	b082      	sub	sp, #8
 8006872:	460a      	mov	r2, r1
 8006874:	4603      	mov	r3, r0
 8006876:	60c1      	str	r1, [r0, #12]
 8006878:	9301      	str	r3, [sp, #4]
 800687a:	9200      	str	r2, [sp, #0]
 800687c:	b002      	add	sp, #8
 800687e:	4770      	bx	lr

08006880 <SpiConnectionSettings_set_Mode$16133>:
 8006880:	b082      	sub	sp, #8
 8006882:	460a      	mov	r2, r1
 8006884:	4603      	mov	r3, r0
 8006886:	6141      	str	r1, [r0, #20]
 8006888:	9301      	str	r3, [sp, #4]
 800688a:	9200      	str	r2, [sp, #0]
 800688c:	b002      	add	sp, #8
 800688e:	4770      	bx	lr

08006890 <SpiDevice_FromIdAsync$16144>:
 8006890:	b580      	push	{r7, lr}
 8006892:	b086      	sub	sp, #24
 8006894:	460a      	mov	r2, r1
 8006896:	4603      	mov	r3, r0
        /// <param name="settings">The connection settings.</param>
        /// <returns>The SPI device requested.</returns>
        /// [RemoteAsync]
        public static SpiDevice FromIdAsync( string busId, SpiConnectionSettings settings)
        {
            SpiChannel ch = AcquireSpiChannel(busId, settings);
 8006898:	9205      	str	r2, [sp, #20]
 800689a:	9304      	str	r3, [sp, #16]
 800689c:	f009 fa88 	bl	800fdb0 <SpiDevice_AcquireSpiChannel$4189>
 80068a0:	4601      	mov	r1, r0
            if(ch != null)
 80068a2:	2800      	cmp	r0, #0
 80068a4:	9103      	str	r1, [sp, #12]
 80068a6:	d016      	beq.n	80068d6 <SpiDevice_FromIdAsync$16144+0x46>
 80068a8:	e7ff      	b.n	80068aa <SpiDevice_FromIdAsync$16144+0x1a>
            {
                return new SpiDevice( busId, settings, ch );
 80068aa:	480e      	ldr	r0, [pc, #56]	; (80068e4 <SpiDevice_FromIdAsync$16144+0x54>)
 80068ac:	490e      	ldr	r1, [pc, #56]	; (80068e8 <SpiDevice_FromIdAsync$16144+0x58>)
 80068ae:	4479      	add	r1, pc
 80068b0:	4408      	add	r0, r1
 80068b2:	4a0e      	ldr	r2, [pc, #56]	; (80068ec <SpiDevice_FromIdAsync$16144+0x5c>)
 80068b4:	4411      	add	r1, r2
 80068b6:	f7f9 ff83 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 80068ba:	4601      	mov	r1, r0
        }

        /// <summary>
        /// Transfer data sequentially to the device.
        /// </summary>
        /// <param name="writeBuffer">Array containing data to write to the device.</param>
 80068bc:	9002      	str	r0, [sp, #8]
 80068be:	9101      	str	r1, [sp, #4]
 80068c0:	f000 fc78 	bl	80071b4 <Tracker_Allocate$5417>
        public static SpiDevice FromIdAsync( string busId, SpiConnectionSettings settings)
        {
            SpiChannel ch = AcquireSpiChannel(busId, settings);
            if(ch != null)
            {
                return new SpiDevice( busId, settings, ch );
 80068c4:	9802      	ldr	r0, [sp, #8]
 80068c6:	9904      	ldr	r1, [sp, #16]
 80068c8:	9a05      	ldr	r2, [sp, #20]
 80068ca:	9b03      	ldr	r3, [sp, #12]
 80068cc:	f009 fa5e 	bl	800fd8c <SpiDevice_.ctor$16140>
            }
            return null;
        }
 80068d0:	9801      	ldr	r0, [sp, #4]
        public static SpiDevice FromIdAsync( string busId, SpiConnectionSettings settings)
        {
            SpiChannel ch = AcquireSpiChannel(busId, settings);
            if(ch != null)
            {
                return new SpiDevice( busId, settings, ch );
 80068d2:	9000      	str	r0, [sp, #0]
 80068d4:	e002      	b.n	80068dc <SpiDevice_FromIdAsync$16144+0x4c>
 80068d6:	2000      	movs	r0, #0
            }
            return null;
 80068d8:	9000      	str	r0, [sp, #0]
 80068da:	e7ff      	b.n	80068dc <SpiDevice_FromIdAsync$16144+0x4c>
        }
 80068dc:	9800      	ldr	r0, [sp, #0]
 80068de:	b006      	add	sp, #24
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	46c0      	nop			; (mov r8, r8)
 80068e4:	ffffea38 	.word	0xffffea38
 80068e8:	17ffaf22 	.word	0x17ffaf22
 80068ec:	e801430c 	.word	0xe801430c

080068f0 <GpioPin_Write$16270>:
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b086      	sub	sp, #24
 80068f4:	460a      	mov	r2, r1
 80068f6:	4603      	mov	r3, r0
 80068f8:	7c00      	ldrb	r0, [r0, #16]
        ///         output.</para></param>
        /// <remarks>If the pin drive mode is not currently set to output, this will latch <paramref name="value"/>
        ///     and drive the signal the when the mode is set.</remarks>
        public void Write(GpioPinValue value)
        {
            if(_disposed)
 80068fa:	2800      	cmp	r0, #0
 80068fc:	9305      	str	r3, [sp, #20]
 80068fe:	9104      	str	r1, [sp, #16]
 8006900:	9203      	str	r2, [sp, #12]
 8006902:	d01b      	beq.n	800693c <GpioPin_Write$16270+0x4c>
 8006904:	e7ff      	b.n	8006906 <GpioPin_Write$16270+0x16>
            {
                throw new ObjectDisposedException(this.GetType().FullName);
 8006906:	e7ff      	b.n	8006908 <GpioPin_Write$16270+0x18>
 8006908:	9805      	ldr	r0, [sp, #20]
 800690a:	f7fb f8e5 	bl	8001ad8 <Object_GetType$3817>
 800690e:	f7fb fa54 	bl	8001dba <RuntimeType_get_FullName$3105>
 8006912:	4912      	ldr	r1, [pc, #72]	; (800695c <GpioPin_Write$16270+0x6c>)
 8006914:	4a12      	ldr	r2, [pc, #72]	; (8006960 <GpioPin_Write$16270+0x70>)
 8006916:	447a      	add	r2, pc
 8006918:	4411      	add	r1, r2
 800691a:	4b12      	ldr	r3, [pc, #72]	; (8006964 <GpioPin_Write$16270+0x74>)
 800691c:	441a      	add	r2, r3
 800691e:	9002      	str	r0, [sp, #8]
 8006920:	4608      	mov	r0, r1
 8006922:	9101      	str	r1, [sp, #4]
 8006924:	4611      	mov	r1, r2
 8006926:	f7f9 ff4b 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800692a:	9000      	str	r0, [sp, #0]
 800692c:	9902      	ldr	r1, [sp, #8]
 800692e:	f007 f9c9 	bl	800dcc4 <ObjectDisposedException_.ctor$7287>
 8006932:	9801      	ldr	r0, [sp, #4]
 8006934:	9900      	ldr	r1, [sp, #0]
 8006936:	f7f9 ff99 	bl	800086c <TypeSystemManager_Throw$4954>
 800693a:	e7e5      	b.n	8006908 <GpioPin_Write$16270+0x18>
 800693c:	9804      	ldr	r0, [sp, #16]
 800693e:	9905      	ldr	r1, [sp, #20]
 8006940:	6188      	str	r0, [r1, #24]
 8006942:	694a      	ldr	r2, [r1, #20]
            }

            // Remember this value in case we switch drive mode
            _lastOutputValue = value;

            if (_driveMode == GpioPinDriveMode.Output)
 8006944:	2a01      	cmp	r2, #1
 8006946:	d107      	bne.n	8006958 <GpioPin_Write$16270+0x68>
 8006948:	e7ff      	b.n	800694a <GpioPin_Write$16270+0x5a>
            {
                _provider.Write((int)value);
 800694a:	9805      	ldr	r0, [sp, #20]
 800694c:	6881      	ldr	r1, [r0, #8]
                }
            }
        }

        /// <summary>
        /// Gets or sets the debounce timeout for the general-purpose I/O (GPIO) pin, which is an interval during which
 800694e:	6888      	ldr	r0, [r1, #8]
 8006950:	9904      	ldr	r1, [sp, #16]
 8006952:	f016 fc19 	bl	801d188 <tmp_gpio_write>
            _lastOutputValue = value;

            if (_driveMode == GpioPinDriveMode.Output)
            {
                _provider.Write((int)value);
            }
 8006956:	e7ff      	b.n	8006958 <GpioPin_Write$16270+0x68>
 8006958:	b006      	add	sp, #24
 800695a:	bd80      	pop	{r7, pc}
 800695c:	ffffea38 	.word	0xffffea38
 8006960:	17ffaeba 	.word	0x17ffaeba
 8006964:	e80144bc 	.word	0xe80144bc

08006968 <Timer_wait_ms$16362>:
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	4601      	mov	r1, r0

    public static class Memory
    {
        public static unsafe byte* RequestMemoryPool( uint* size )
        {
            byte* mem = null;
 800696e:	9003      	str	r0, [sp, #12]
 8006970:	9102      	str	r1, [sp, #8]
 8006972:	f019 f835 	bl	801f9e0 <us_ticker_read>

 8006976:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800697a:	9a03      	ldr	r2, [sp, #12]
 800697c:	4351      	muls	r1, r2
 800697e:	9001      	str	r0, [sp, #4]
 8006980:	9100      	str	r1, [sp, #0]
 8006982:	e7ff      	b.n	8006984 <Timer_wait_ms$16362+0x1c>
            //
 8006984:	f019 f82c 	bl	801f9e0 <us_ticker_read>
 8006988:	9901      	ldr	r1, [sp, #4]
 800698a:	1a40      	subs	r0, r0, r1
 800698c:	9a00      	ldr	r2, [sp, #0]
 800698e:	4290      	cmp	r0, r2
 8006990:	da01      	bge.n	8006996 <Timer_wait_ms$16362+0x2e>
 8006992:	e7ff      	b.n	8006994 <Timer_wait_ms$16362+0x2c>
 8006994:	e7f6      	b.n	8006984 <Timer_wait_ms$16362+0x1c>
 8006996:	b004      	add	sp, #16
 8006998:	bd80      	pop	{r7, pc}

0800699a <AutoResetEvent_.ctor$7570>:
 800699a:	b580      	push	{r7, lr}
 800699c:	b082      	sub	sp, #8
 800699e:	4601      	mov	r1, r0
    using System.Collections.Generic;
////using System.Runtime.Versioning;
    using CultureInfo                  = System.Globalization.CultureInfo;
////using SignatureHelper              = System.Reflection.Emit.SignatureHelper;
////using StackCrawlMark               = System.Threading.StackCrawlMark;
////using DebuggerStepThroughAttribute = System.Diagnostics.DebuggerStepThroughAttribute;
 80069a0:	2200      	movs	r2, #0
 80069a2:	9101      	str	r1, [sp, #4]
 80069a4:	4611      	mov	r1, r2
 80069a6:	f7fe f955 	bl	8004c54 <EventWaitHandle_.ctor$3943>
 80069aa:	b002      	add	sp, #8
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	46c0      	nop			; (mov r8, r8)

080069b0 <<>c__DisplayClass7_0_<Main>b__0$16330>:
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	9001      	str	r0, [sp, #4]
 80069b6:	e7ff      	b.n	80069b8 <<>c__DisplayClass7_0_<Main>b__0$16330+0x8>
 80069b8:	9801      	ldr	r0, [sp, #4]
 80069ba:	6880      	ldr	r0, [r0, #8]
 80069bc:	490a      	ldr	r1, [pc, #40]	; (80069e8 <<>c__DisplayClass7_0_<Main>b__0$16330+0x38>)
 80069be:	4a0b      	ldr	r2, [pc, #44]	; (80069ec <<>c__DisplayClass7_0_<Main>b__0$16330+0x3c>)
 80069c0:	447a      	add	r2, pc
 80069c2:	5889      	ldr	r1, [r1, r2]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f7fe f907 	bl	8004bd8 <WaitHandle_WaitOne$3933>
 80069ca:	9901      	ldr	r1, [sp, #4]
 80069cc:	68ca      	ldr	r2, [r1, #12]
 80069ce:	6909      	ldr	r1, [r1, #16]
 80069d0:	9000      	str	r0, [sp, #0]
 80069d2:	4610      	mov	r0, r2
 80069d4:	f7ff ff8c 	bl	80068f0 <GpioPin_Write$16270>
 80069d8:	9801      	ldr	r0, [sp, #4]
 80069da:	6901      	ldr	r1, [r0, #16]
 80069dc:	3101      	adds	r1, #1
 80069de:	f001 0101 	and.w	r1, r1, #1
 80069e2:	6101      	str	r1, [r0, #16]
 80069e4:	e7e8      	b.n	80069b8 <<>c__DisplayClass7_0_<Main>b__0$16330+0x8>
 80069e6:	46c0      	nop			; (mov r8, r8)
 80069e8:	e8025480 	.word	0xe8025480
 80069ec:	17ffae10 	.word	0x17ffae10

080069f0 <TimerCallback_Invoke$7778>:
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b086      	sub	sp, #24
 80069f4:	4602      	mov	r2, r0
 80069f6:	6900      	ldr	r0, [r0, #16]
 80069f8:	2800      	cmp	r0, #0
 80069fa:	9205      	str	r2, [sp, #20]
 80069fc:	9104      	str	r1, [sp, #16]
 80069fe:	9003      	str	r0, [sp, #12]
 8006a00:	d006      	beq.n	8006a10 <TimerCallback_Invoke$7778+0x20>
 8006a02:	e7ff      	b.n	8006a04 <TimerCallback_Invoke$7778+0x14>
 8006a04:	9803      	ldr	r0, [sp, #12]
 8006a06:	6881      	ldr	r1, [r0, #8]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	9102      	str	r1, [sp, #8]
 8006a0c:	9201      	str	r2, [sp, #4]
 8006a0e:	e009      	b.n	8006a24 <TimerCallback_Invoke$7778+0x34>
 8006a10:	9805      	ldr	r0, [sp, #20]
 8006a12:	6880      	ldr	r0, [r0, #8]
 8006a14:	9905      	ldr	r1, [sp, #20]
 8006a16:	68ca      	ldr	r2, [r1, #12]
 8006a18:	9904      	ldr	r1, [sp, #16]
 8006a1a:	4790      	blx	r2
 8006a1c:	e000      	b.n	8006a20 <TimerCallback_Invoke$7778+0x30>
 8006a1e:	e7ff      	b.n	8006a20 <TimerCallback_Invoke$7778+0x30>
 8006a20:	b006      	add	sp, #24
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	9801      	ldr	r0, [sp, #4]
 8006a26:	9902      	ldr	r1, [sp, #8]
 8006a28:	4288      	cmp	r0, r1
 8006a2a:	9000      	str	r0, [sp, #0]
 8006a2c:	daf7      	bge.n	8006a1e <TimerCallback_Invoke$7778+0x2e>
 8006a2e:	e7ff      	b.n	8006a30 <TimerCallback_Invoke$7778+0x40>
 8006a30:	9803      	ldr	r0, [sp, #12]
 8006a32:	9900      	ldr	r1, [sp, #0]
 8006a34:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8006a38:	68d2      	ldr	r2, [r2, #12]
 8006a3a:	6890      	ldr	r0, [r2, #8]
 8006a3c:	68d2      	ldr	r2, [r2, #12]
 8006a3e:	9904      	ldr	r1, [sp, #16]
 8006a40:	4790      	blx	r2
 8006a42:	9800      	ldr	r0, [sp, #0]
 8006a44:	1c41      	adds	r1, r0, #1
 8006a46:	9101      	str	r1, [sp, #4]
 8006a48:	e7ec      	b.n	8006a24 <TimerCallback_Invoke$7778+0x34>
 8006a4a:	46c0      	nop			; (mov r8, r8)

08006a4c <<>c_<Main>b__7_1$16335>:
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b086      	sub	sp, #24
 8006a50:	2014      	movs	r0, #20
 8006a52:	9105      	str	r1, [sp, #20]
 8006a54:	9004      	str	r0, [sp, #16]
 8006a56:	e7ff      	b.n	8006a58 <<>c_<Main>b__7_1$16335+0xc>
 8006a58:	9804      	ldr	r0, [sp, #16]
 8006a5a:	1e41      	subs	r1, r0, #1
 8006a5c:	2801      	cmp	r0, #1
 8006a5e:	9103      	str	r1, [sp, #12]
 8006a60:	db16      	blt.n	8006a90 <<>c_<Main>b__7_1$16335+0x44>
 8006a62:	e7ff      	b.n	8006a64 <<>c_<Main>b__7_1$16335+0x18>
 8006a64:	480b      	ldr	r0, [pc, #44]	; (8006a94 <<>c_<Main>b__7_1$16335+0x48>)
 8006a66:	490c      	ldr	r1, [pc, #48]	; (8006a98 <<>c_<Main>b__7_1$16335+0x4c>)
 8006a68:	4479      	add	r1, pc
 8006a6a:	4408      	add	r0, r1
 8006a6c:	9a05      	ldr	r2, [sp, #20]
 8006a6e:	9002      	str	r0, [sp, #8]
 8006a70:	4610      	mov	r0, r2
 8006a72:	9b02      	ldr	r3, [sp, #8]
 8006a74:	9101      	str	r1, [sp, #4]
 8006a76:	4619      	mov	r1, r3
 8006a78:	f7fa fa9c 	bl	8000fb4 <TypeSystemManager_CastToSealedType$4950>
 8006a7c:	f7fd fe37 	bl	80046ee <EventWaitHandle_Set$3945>
 8006a80:	4806      	ldr	r0, [pc, #24]	; (8006a9c <<>c_<Main>b__7_1$16335+0x50>)
 8006a82:	9901      	ldr	r1, [sp, #4]
 8006a84:	5840      	ldr	r0, [r0, r1]
 8006a86:	f7fc ff2f 	bl	80038e8 <Thread_Sleep$3997>
 8006a8a:	9803      	ldr	r0, [sp, #12]
 8006a8c:	9004      	str	r0, [sp, #16]
 8006a8e:	e7e3      	b.n	8006a58 <<>c_<Main>b__7_1$16335+0xc>
 8006a90:	b006      	add	sp, #24
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	e8011e4c 	.word	0xe8011e4c
 8006a98:	17ffad68 	.word	0x17ffad68
 8006a9c:	e8025484 	.word	0xe8025484

08006aa0 <Timer_.ctor$3910>:
 8006aa0:	b570      	push	{r4, r5, r6, lr}
 8006aa2:	b08a      	sub	sp, #40	; 0x28
 8006aa4:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 8006aa8:	469e      	mov	lr, r3
 8006aaa:	4614      	mov	r4, r2
 8006aac:	460d      	mov	r5, r1
 8006aae:	4606      	mov	r6, r0
        }
    }

    //----------------------------------------------------------------------------------------
    // ! READ THIS BEFORE YOU WORK ON THIS CLASS.
    //
 8006ab0:	9009      	str	r0, [sp, #36]	; 0x24
 8006ab2:	9308      	str	r3, [sp, #32]
 8006ab4:	9207      	str	r2, [sp, #28]
 8006ab6:	9106      	str	r1, [sp, #24]
 8006ab8:	9605      	str	r6, [sp, #20]
 8006aba:	f8cd c010 	str.w	ip, [sp, #16]
 8006abe:	f8cd e00c 	str.w	lr, [sp, #12]
 8006ac2:	9402      	str	r4, [sp, #8]
 8006ac4:	9501      	str	r5, [sp, #4]
 8006ac6:	f007 fa4d 	bl	800df64 <Timer_.ctor$3909>
 8006aca:	9806      	ldr	r0, [sp, #24]
 8006acc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ace:	6088      	str	r0, [r1, #8]
 8006ad0:	9a07      	ldr	r2, [sp, #28]
 8006ad2:	60ca      	str	r2, [r1, #12]
    // This class is needed to allow an SZ array of type T[] to expose IList<T>,
    // IList<T.BaseType>, etc., etc. all the way up to IList<Object>. When the following call is
    // made:
    //
    //   ((IList<T>) (new U[n])).SomeIListMethod()
 8006ad4:	4608      	mov	r0, r1
 8006ad6:	9908      	ldr	r1, [sp, #32]
 8006ad8:	9a04      	ldr	r2, [sp, #16]
 8006ada:	f007 fa6f 	bl	800dfbc <Timer_Change$3913>
 8006ade:	9000      	str	r0, [sp, #0]
 8006ae0:	b00a      	add	sp, #40	; 0x28
 8006ae2:	bd70      	pop	{r4, r5, r6, pc}

08006ae4 <Timer_read$16368>:
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	4601      	mov	r1, r0

        /** Get the time passed in seconds
         */
        public float read()
        {
            return (float)read_us() / 1000000.0f;
 8006aea:	9101      	str	r1, [sp, #4]
 8006aec:	f009 fee0 	bl	80108b0 <Timer_read_us$16370>
 8006af0:	f01e fa6c 	bl	8024fcc <__aeabi_i2f>
 8006af4:	f242 4100 	movw	r1, #9216	; 0x2400
 8006af8:	f6c4 1174 	movt	r1, #18804	; 0x4974
 8006afc:	f01e fb6e 	bl	80251dc <__aeabi_fdiv>
 8006b00:	b002      	add	sp, #8
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <Timer_reset$16367>:
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	4601      	mov	r1, r0
         *
         * If it was already counting, it will continue
         */
        public void reset()
        {
            _start = UsTicker.us_ticker_read();
 8006b0a:	9001      	str	r0, [sp, #4]
 8006b0c:	9100      	str	r1, [sp, #0]
 8006b0e:	f018 ff67 	bl	801f9e0 <us_ticker_read>
 8006b12:	9901      	ldr	r1, [sp, #4]
 8006b14:	60c8      	str	r0, [r1, #12]
 8006b16:	2000      	movs	r0, #0
 8006b18:	6108      	str	r0, [r1, #16]
 8006b1a:	b002      	add	sp, #8
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	46c0      	nop			; (mov r8, r8)

08006b20 <Program_.cctor$3691>:
#if LPC1768
        static int threadPin = (int)LPC1768.PinName.LED4;
#elif K64F
        static int threadPin = (int)K64F.PinName.LED4;
#elif DISCO_F746NG
        static int threadPin = (int)K64F.PinName.LED1;
 8006b20:	4806      	ldr	r0, [pc, #24]	; (8006b3c <Program_.cctor$3691+0x1c>)
 8006b22:	4907      	ldr	r1, [pc, #28]	; (8006b40 <Program_.cctor$3691+0x20>)
 8006b24:	4479      	add	r1, pc
 8006b26:	4408      	add	r0, r1
 8006b28:	f241 0116 	movw	r1, #4118	; 0x1016
 8006b2c:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
#else
#error No target board defined.
#endif

        static int[] pinNumbers =
 8006b30:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
 8006b34:	2181      	movs	r1, #129	; 0x81
 8006b36:	60c1      	str	r1, [r0, #12]
 8006b38:	4770      	bx	lr
 8006b3a:	46c0      	nop			; (mov r8, r8)
 8006b3c:	fffffe3c 	.word	0xfffffe3c
 8006b40:	17ffacac 	.word	0x17ffacac

08006b44 <Bootstrap_HardwareInitialization$3695>:
    // 5) We pass the previously allocated array to the ThreadManager, that will use it for the stack of the Idle thread.
    // 6) We create the Idle Thread and context switch to it.
    //    This is the trick that allows to reclaim all memory: we'll never go back to the original context,
    //    so all its state can be discarded.
    //    The new thread will overwrite the same location but that's OK. And all memory is managed (AKA: it has a valid ObjectHeader to describe it).
    //
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	480f      	ldr	r0, [pc, #60]	; (8006b88 <Bootstrap_HardwareInitialization$3695+0x44>)
 8006b4a:	4910      	ldr	r1, [pc, #64]	; (8006b8c <Bootstrap_HardwareInitialization$3695+0x48>)
 8006b4c:	4479      	add	r1, pc
 8006b4e:	4408      	add	r0, r1
 8006b50:	9101      	str	r1, [sp, #4]
 8006b52:	f000 f89b 	bl	8006c8c <Processor_InitializeProcessor$16906>
    // 3) An array of words is allocated. This overlaps the current stack, by virtue of the way the memory is allocated
    //    (from the top of the memory, instead of from the bottom).
    //    [We wrap all free memory into a managed object (a uint[]), an allocation that is less than the full free block is
    //     just a decrement of the array length. This is cheaper than moving the free block and relinking it].
    // 4) All free memory is cleared, so that future allocations already have the correct memory state (all zeros).
    // 5) We pass the previously allocated array to the ThreadManager, that will use it for the stack of the Idle thread.
 8006b56:	f7fd fb89 	bl	800426c <BugCheck_AssertInterruptsOff$4655>
 8006b5a:	480d      	ldr	r0, [pc, #52]	; (8006b90 <Bootstrap_HardwareInitialization$3695+0x4c>)
 8006b5c:	9901      	ldr	r1, [sp, #4]
 8006b5e:	5840      	ldr	r0, [r0, r1]
 8006b60:	4a0c      	ldr	r2, [pc, #48]	; (8006b94 <Bootstrap_HardwareInitialization$3695+0x50>)
 8006b62:	5851      	ldr	r1, [r2, r1]
#endif // SELF_TEST
        }

        //--//

        [Inline]
 8006b64:	f016 fbae 	bl	801d2c4 <CMSIS_STUB_NVIC_SetPriority>
 8006b68:	480b      	ldr	r0, [pc, #44]	; (8006b98 <Bootstrap_HardwareInitialization$3695+0x54>)
 8006b6a:	9901      	ldr	r1, [sp, #4]
 8006b6c:	5840      	ldr	r0, [r0, r1]
 8006b6e:	4a0b      	ldr	r2, [pc, #44]	; (8006b9c <Bootstrap_HardwareInitialization$3695+0x58>)
 8006b70:	5851      	ldr	r1, [r2, r1]
 8006b72:	f016 fba7 	bl	801d2c4 <CMSIS_STUB_NVIC_SetPriority>
 8006b76:	480a      	ldr	r0, [pc, #40]	; (8006ba0 <Bootstrap_HardwareInitialization$3695+0x5c>)
 8006b78:	9901      	ldr	r1, [sp, #4]
 8006b7a:	5840      	ldr	r0, [r0, r1]
 8006b7c:	4a09      	ldr	r2, [pc, #36]	; (8006ba4 <Bootstrap_HardwareInitialization$3695+0x60>)
 8006b7e:	5851      	ldr	r1, [r2, r1]
 8006b80:	f016 fba0 	bl	801d2c4 <CMSIS_STUB_NVIC_SetPriority>
 8006b84:	b002      	add	sp, #8
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	e80101f4 	.word	0xe80101f4
 8006b8c:	17ffac84 	.word	0x17ffac84
 8006b90:	e802529c 	.word	0xe802529c
 8006b94:	e80252a0 	.word	0xe80252a0
 8006b98:	e80252a4 	.word	0xe80252a4
 8006b9c:	e80252a8 	.word	0xe80252a8
 8006ba0:	e80252ac 	.word	0xe80252ac
 8006ba4:	e80252b0 	.word	0xe80252b0

08006ba8 <Bootstrap_HeapInitialization$3696>:
        [CanAllocateOnReturn]
        private static void HeapInitialization()
        {
            MemoryManager mm = MemoryManager.Instance;
            
            mm.InitializeMemoryManager();
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	4805      	ldr	r0, [pc, #20]	; (8006bc4 <Bootstrap_HeapInitialization$3696+0x1c>)
 8006bae:	4906      	ldr	r1, [pc, #24]	; (8006bc8 <Bootstrap_HeapInitialization$3696+0x20>)
 8006bb0:	4479      	add	r1, pc
 8006bb2:	4408      	add	r0, r1
 8006bb4:	9001      	str	r0, [sp, #4]
 8006bb6:	f000 f88d 	bl	8006cd4 <MemoryManager_InitializeMemoryManager$16437>

            mm.InitializationComplete();
 8006bba:	9801      	ldr	r0, [sp, #4]
 8006bbc:	f000 f8ca 	bl	8006d54 <LinearMemoryManager_InitializationComplete$4639>
 8006bc0:	b002      	add	sp, #8
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	ffffea0c 	.word	0xffffea0c
 8006bc8:	17ffac20 	.word	0x17ffac20

08006bcc <Device_get_BootstrapStack$16934>:
        public override uint[] BootstrapStack
        {
            [RT.NoInline]
            get
            {
                return s_bootstrapStackDISCO_F746NG;
 8006bcc:	4802      	ldr	r0, [pc, #8]	; (8006bd8 <Device_get_BootstrapStack$16934+0xc>)
 8006bce:	4903      	ldr	r1, [pc, #12]	; (8006bdc <Device_get_BootstrapStack$16934+0x10>)
 8006bd0:	4479      	add	r1, pc
 8006bd2:	4408      	add	r0, r1
 8006bd4:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8006bd6:	4770      	bx	lr
 8006bd8:	fffffe3c 	.word	0xfffffe3c
 8006bdc:	17ffac00 	.word	0x17ffac00

08006be0 <Bootstrap_SoftwareInitialization$3697>:
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	4601      	mov	r1, r0

        [NoInline]
        [CanAllocateOnReturn]
        private static void SoftwareInitialization( uint[] systemStack )
        {
            ThreadManager.Instance.InitializeBeforeStaticConstructors();
 8006be6:	4a0b      	ldr	r2, [pc, #44]	; (8006c14 <Bootstrap_SoftwareInitialization$3697+0x34>)
 8006be8:	4b0b      	ldr	r3, [pc, #44]	; (8006c18 <Bootstrap_SoftwareInitialization$3697+0x38>)
 8006bea:	447b      	add	r3, pc
 8006bec:	441a      	add	r2, r3
 8006bee:	9003      	str	r0, [sp, #12]
 8006bf0:	4610      	mov	r0, r2
 8006bf2:	9202      	str	r2, [sp, #8]
 8006bf4:	9101      	str	r1, [sp, #4]
 8006bf6:	9300      	str	r3, [sp, #0]
 8006bf8:	f000 f8b6 	bl	8006d68 <ThreadManager_InitializeBeforeStaticConstructors$16770>

            TypeSystemManager.Instance.InitializeTypeSystemManager();
 8006bfc:	4807      	ldr	r0, [pc, #28]	; (8006c1c <Bootstrap_SoftwareInitialization$3697+0x3c>)
 8006bfe:	9900      	ldr	r1, [sp, #0]
 8006c00:	4408      	add	r0, r1
 8006c02:	f000 f8b9 	bl	8006d78 <TypeSystemManager_InitializeTypeSystemManager$4930>
            
            ThreadManager.Instance.InitializeAfterStaticConstructors( systemStack );
 8006c06:	9802      	ldr	r0, [sp, #8]
 8006c08:	9903      	ldr	r1, [sp, #12]
 8006c0a:	f000 f8b9 	bl	8006d80 <ThreadManager_InitializeAfterStaticConstructors$16771>
 8006c0e:	b004      	add	sp, #16
 8006c10:	bd80      	pop	{r7, pc}
 8006c12:	46c0      	nop			; (mov r8, r8)
 8006c14:	ffffeaac 	.word	0xffffeaac
 8006c18:	17ffabe6 	.word	0x17ffabe6
 8006c1c:	ffffea38 	.word	0xffffea38

08006c20 <Bootstrap_HardwareActivation$3698>:
        [NoInline]
        private static void HardwareActivation()
        {
            Storage.Instance.InitializeStorage();

            Peripherals.Instance.Activate();
 8006c20:	b580      	push	{r7, lr}
 8006c22:	4803      	ldr	r0, [pc, #12]	; (8006c30 <Bootstrap_HardwareActivation$3698+0x10>)
 8006c24:	4903      	ldr	r1, [pc, #12]	; (8006c34 <Bootstrap_HardwareActivation$3698+0x14>)
 8006c26:	4479      	add	r1, pc
 8006c28:	4408      	add	r0, r1
 8006c2a:	f000 f8b3 	bl	8006d94 <Peripherals_Activate$16419>
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	ffffea28 	.word	0xffffea28
 8006c34:	17ffabaa 	.word	0x17ffabaa

08006c38 <Bootstrap_SoftwareActivation$3699>:
        }

        [NoInline]
        private static void SoftwareActivation()
        {
            ThreadManager.Instance.Activate();
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	4803      	ldr	r0, [pc, #12]	; (8006c48 <Bootstrap_SoftwareActivation$3699+0x10>)
 8006c3c:	4903      	ldr	r1, [pc, #12]	; (8006c4c <Bootstrap_SoftwareActivation$3699+0x14>)
 8006c3e:	4479      	add	r1, pc
 8006c40:	4408      	add	r0, r1
 8006c42:	f000 f8b1 	bl	8006da8 <ThreadManager_Activate$16481>
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	ffffeaac 	.word	0xffffeaac
 8006c4c:	17ffab92 	.word	0x17ffab92

08006c50 <ARMv7ThreadManager_StartThreads$4924>:
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	4601      	mov	r1, r0
 8006c56:	4a0a      	ldr	r2, [pc, #40]	; (8006c80 <ARMv7ThreadManager_StartThreads$4924+0x30>)
 8006c58:	4b0a      	ldr	r3, [pc, #40]	; (8006c84 <ARMv7ThreadManager_StartThreads$4924+0x34>)
 8006c5a:	447b      	add	r3, pc
 8006c5c:	58d2      	ldr	r2, [r2, r3]

            //
            // Enable context switch through SVC call that will fall back into Thread/PSP mode onto 
            // whatever thread the standard thread manager intended to switch into 
            //
            ProcessorARMv7M.DisableInterruptsWithPriorityLevelHigherOrEqualTo( ProcessorARMv7M.c_Priority__SVCCall + 1 );
 8006c5e:	9003      	str	r0, [sp, #12]
 8006c60:	4610      	mov	r0, r2
 8006c62:	9302      	str	r3, [sp, #8]
 8006c64:	9101      	str	r1, [sp, #4]
 8006c66:	f7fd fcf3 	bl	8004650 <ProcessorARMv7M_DisableInterruptsWithPriorityLevelHigherOrEqualTo$3266>

            //
            // Let the standard thread manager set up the next thread to run and request the switch to its context
            // It will be a switch to the idle thread (bootstrap thread)
            //
            base.StartThreads( );
 8006c6a:	9803      	ldr	r0, [sp, #12]
 8006c6c:	f7fe f82b 	bl	8004cc6 <ThreadManager_StartThreads$3160>
 8006c70:	4805      	ldr	r0, [pc, #20]	; (8006c88 <ARMv7ThreadManager_StartThreads$4924+0x38>)
 8006c72:	9902      	ldr	r1, [sp, #8]
 8006c74:	5840      	ldr	r0, [r0, r1]
            //RegisterThread( m_UsageFault );
            //RegisterThread( m_SVCCall         );
            //RegisterThread( m_PendSV          );
            //RegisterThread( m_SysTick         );
            //RegisterThread( m_interruptThread );

 8006c76:	f7f9 fb45 	bl	8000304 <BugCheck_Raise$4648>
 8006c7a:	b004      	add	sp, #16
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	46c0      	nop			; (mov r8, r8)
 8006c80:	e80252fc 	.word	0xe80252fc
 8006c84:	17ffab76 	.word	0x17ffab76
 8006c88:	e8025300 	.word	0xe8025300

08006c8c <Processor_InitializeProcessor$16906>:
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	4601      	mov	r1, r0
**
===========================================================*/

namespace System
{
    using System;
 8006c92:	9101      	str	r1, [sp, #4]
 8006c94:	f002 ff2e 	bl	8009af4 <ProcessorARMv7M_VFP_InitializeProcessor$5271>
    using System.Runtime.InteropServices;
    using System.Runtime.CompilerServices;
    using System.Runtime.ConstrainedExecution;
////using System.Runtime.Versioning;
////using CultureInfo       = System.Globalization.CultureInfo;
////using FieldInfo         = System.Reflection.FieldInfo;
 8006c98:	f7fe ff70 	bl	8005b7c <ProcessorARMv7M_VerifyHandlerMode$3267>
 8006c9c:	f010 0fff 	tst.w	r0, #255	; 0xff
 8006ca0:	d10d      	bne.n	8006cbe <Processor_InitializeProcessor$16906+0x32>
 8006ca2:	e7ff      	b.n	8006ca4 <Processor_InitializeProcessor$16906+0x18>
////using BindingFlags      = System.Reflection.BindingFlags;
////using RemotingException = System.Runtime.Remoting.RemotingException;
 8006ca4:	4808      	ldr	r0, [pc, #32]	; (8006cc8 <Processor_InitializeProcessor$16906+0x3c>)
 8006ca6:	4909      	ldr	r1, [pc, #36]	; (8006ccc <Processor_InitializeProcessor$16906+0x40>)
 8006ca8:	4479      	add	r1, pc
 8006caa:	4408      	add	r0, r1
 8006cac:	9100      	str	r1, [sp, #0]
 8006cae:	f001 fca1 	bl	80085f4 <BugCheck_Log$4649>
 8006cb2:	4807      	ldr	r0, [pc, #28]	; (8006cd0 <Processor_InitializeProcessor$16906+0x44>)
 8006cb4:	9900      	ldr	r1, [sp, #0]
 8006cb6:	5840      	ldr	r0, [r0, r1]
        // Zelig generates proper Equals methods for all value types, so no reflection is involved.
        //
        [Microsoft.Zelig.Internals.WellKnownMethod( "Object_Equals" )]
        public virtual bool Equals( Object obj )
        {
            return ReferenceEquals( this, obj );
 8006cb8:	f7f9 fb24 	bl	8000304 <BugCheck_Raise$4648>
////using CultureInfo       = System.Globalization.CultureInfo;
////using FieldInfo         = System.Reflection.FieldInfo;
////using BindingFlags      = System.Reflection.BindingFlags;
////using RemotingException = System.Runtime.Remoting.RemotingException;

    // The Object is the root class for all object in the CLR System. Object
 8006cbc:	e7ff      	b.n	8006cbe <Processor_InitializeProcessor$16906+0x32>
    //

    //This class contains no data and does not need to be serializable
////[Serializable]
    [Microsoft.Zelig.Internals.WellKnownType( "System_Object" )]
    public class Object
 8006cbe:	f00a fa6d 	bl	801119c <NVIC_SetPriorityGrouping$16726>
 8006cc2:	b002      	add	sp, #8
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	46c0      	nop			; (mov r8, r8)
 8006cc8:	e8014bcc 	.word	0xe8014bcc
 8006ccc:	17ffab28 	.word	0x17ffab28
 8006cd0:	e80254e4 	.word	0xe80254e4

08006cd4 <MemoryManager_InitializeMemoryManager$16437>:
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b086      	sub	sp, #24
 8006cd8:	4601      	mov	r1, r0
    public class Peripherals : Chipset.Peripherals
    {
        //
        // State
        //

 8006cda:	9104      	str	r1, [sp, #16]
 8006cdc:	f001 faaa 	bl	8008234 <LinearMemoryManager_InitializeMemoryManager$4638>
 8006ce0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006ce4:	9005      	str	r0, [sp, #20]
 8006ce6:	a805      	add	r0, sp, #20
        //
        // Helper Methods
        //
        
 8006ce8:	f009 fd8c 	bl	8010804 <Memory_RequestMemoryPool$16355>
 8006cec:	4601      	mov	r1, r0
        public override void Activate()
        {
 8006cee:	4602      	mov	r2, r0
 8006cf0:	2800      	cmp	r0, #0
 8006cf2:	9203      	str	r2, [sp, #12]
 8006cf4:	9102      	str	r1, [sp, #8]
 8006cf6:	d10a      	bne.n	8006d0e <MemoryManager_InitializeMemoryManager$16437+0x3a>
 8006cf8:	e7ff      	b.n	8006cfa <MemoryManager_InitializeMemoryManager$16437+0x26>
            base.Activate( ); 
            
 8006cfa:	9803      	ldr	r0, [sp, #12]
 8006cfc:	f009 fdc8 	bl	8010890 <Memory_FreeMemoryPool$16356>
 8006d00:	4810      	ldr	r0, [pc, #64]	; (8006d44 <MemoryManager_InitializeMemoryManager$16437+0x70>)
 8006d02:	4911      	ldr	r1, [pc, #68]	; (8006d48 <MemoryManager_InitializeMemoryManager$16437+0x74>)
 8006d04:	4479      	add	r1, pc
 8006d06:	5840      	ldr	r0, [r0, r1]
            Drivers.SystemTimer.Instance.Initialize( );

 8006d08:	f7f9 fafc 	bl	8000304 <BugCheck_Raise$4648>
            //Drivers.GPIO.Instance.Initialize();
 8006d0c:	e000      	b.n	8006d10 <MemoryManager_InitializeMemoryManager$16437+0x3c>
        //
        // Helper Methods
        //
        
        public override void Activate()
        {
 8006d0e:	e7ff      	b.n	8006d10 <MemoryManager_InitializeMemoryManager$16437+0x3c>
            
            Drivers.SystemTimer.Instance.Initialize( );

            //Drivers.GPIO.Instance.Initialize();
            //Drivers.I2C.Instance.Initialize();
            //Drivers.SPI.Instance.Initialize();
 8006d10:	9802      	ldr	r0, [sp, #8]
 8006d12:	f7fc fc53 	bl	80035bc <UIntPtr_op_Explicit$2882>
 8006d16:	9904      	ldr	r1, [sp, #16]
 8006d18:	6148      	str	r0, [r1, #20]
 8006d1a:	9805      	ldr	r0, [sp, #20]
        }
 8006d1c:	9a02      	ldr	r2, [sp, #8]
 8006d1e:	4410      	add	r0, r2
 8006d20:	f7fc fc30 	bl	8003584 <UIntPtr_op_Explicit$2874>
 8006d24:	9904      	ldr	r1, [sp, #16]
 8006d26:	6188      	str	r0, [r1, #24]
 8006d28:	6949      	ldr	r1, [r1, #20]
 8006d2a:	4a08      	ldr	r2, [pc, #32]	; (8006d4c <MemoryManager_InitializeMemoryManager$16437+0x78>)
 8006d2c:	4b08      	ldr	r3, [pc, #32]	; (8006d50 <MemoryManager_InitializeMemoryManager$16437+0x7c>)
 8006d2e:	447b      	add	r3, pc
 8006d30:	58d3      	ldr	r3, [r2, r3]
        
        [RT.Inline]
        [RT.DisableNullChecks()]
        public override uint ReadPerformanceCounter()
        {
            return Drivers.SystemTimer.Instance.Counter;
 8006d32:	9a04      	ldr	r2, [sp, #16]
 8006d34:	9001      	str	r0, [sp, #4]
 8006d36:	4610      	mov	r0, r2
 8006d38:	9a01      	ldr	r2, [sp, #4]
 8006d3a:	f001 fac0 	bl	80082be <MemoryManager_AddLinearSection$4902>
 8006d3e:	b006      	add	sp, #24
 8006d40:	bd80      	pop	{r7, pc}
 8006d42:	46c0      	nop			; (mov r8, r8)
 8006d44:	e8025490 	.word	0xe8025490
 8006d48:	17ffaacc 	.word	0x17ffaacc
 8006d4c:	e802548c 	.word	0xe802548c
 8006d50:	17ffaaa2 	.word	0x17ffaaa2

08006d54 <LinearMemoryManager_InitializationComplete$4639>:
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
            }
        }

        public override void InitializationComplete()
        {
            if(MemoryManager.Configuration.TrashFreeMemory)
 8006d58:	9001      	str	r0, [sp, #4]
 8006d5a:	e7ff      	b.n	8006d5c <LinearMemoryManager_InitializationComplete$4639+0x8>
            {
                DirtyFreeMemory();
 8006d5c:	9801      	ldr	r0, [sp, #4]
 8006d5e:	f001 fb26 	bl	80083ae <MemoryManager_DirtyFreeMemory$4896>
            }
 8006d62:	e7ff      	b.n	8006d64 <LinearMemoryManager_InitializationComplete$4639+0x10>
 8006d64:	b002      	add	sp, #8
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <ThreadManager_InitializeBeforeStaticConstructors$16770>:
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	4601      	mov	r1, r0
        //////		__IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register       */
        //////		__IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register      */
        //////		__I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register        */
        //////	} SysTick_Type;
        //////	
        //////	...
 8006d6e:	9101      	str	r1, [sp, #4]
 8006d70:	f7fd fe18 	bl	80049a4 <ThreadManager_InitializeBeforeStaticConstructors$3155>
 8006d74:	b002      	add	sp, #8
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <TypeSystemManager_InitializeTypeSystemManager$4930>:
 8006d78:	b580      	push	{r7, lr}
            //RegisterThread( m_NMI        );
            //RegisterThread( m_MemManage  );
            //RegisterThread( m_BusFault   );
            //RegisterThread( m_UsageFault );
            //RegisterThread( m_SVCCall         );
            //RegisterThread( m_PendSV          );
 8006d7a:	f001 fee3 	bl	8008b44 <TypeSystemManager_InvokeStaticConstructors$4947>
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <ThreadManager_InitializeAfterStaticConstructors$16771>:
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	460a      	mov	r2, r1
 8006d86:	4603      	mov	r3, r0
            base.InitializeBeforeStaticConstructors();
        }

        public override void InitializeAfterStaticConstructors( uint[] systemStack )
        {
            base.InitializeAfterStaticConstructors( systemStack );
 8006d88:	9201      	str	r2, [sp, #4]
 8006d8a:	9300      	str	r3, [sp, #0]
 8006d8c:	f001 febb 	bl	8008b06 <ARMv7ThreadManager_InitializeAfterStaticConstructors$4923>
 8006d90:	b002      	add	sp, #8
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <Peripherals_Activate$16419>:
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	4601      	mov	r1, r0
 8006d9a:	9101      	str	r1, [sp, #4]
 8006d9c:	f009 fdbd 	bl	801091a <Peripherals_Activate$16670>
 8006da0:	f009 fdc2 	bl	8010928 <SystemTimer_Initialize$16493>
 8006da4:	b002      	add	sp, #8
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <ThreadManager_Activate$16481>:
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	4601      	mov	r1, r0
            byte *zeligHeap = MBED.Memory.RequestMemoryPool( &stackSize );

            if( zeligHeap == null || stackSize < Device.Instance.ManagedHeapSize / 2 )
            {
                MBED.Memory.FreeMemoryPool( zeligHeap );

 8006dae:	9003      	str	r0, [sp, #12]
 8006db0:	9102      	str	r1, [sp, #8]
 8006db2:	f009 fdf7 	bl	80109a4 <ThreadManager_Activate$16772>
                RT.BugCheck.Raise( RT.BugCheck.StopCode.FailedBootstrap );
            }
 8006db6:	480c      	ldr	r0, [pc, #48]	; (8006de8 <ThreadManager_Activate$16481+0x40>)
 8006db8:	490c      	ldr	r1, [pc, #48]	; (8006dec <ThreadManager_Activate$16481+0x44>)
 8006dba:	4479      	add	r1, pc
 8006dbc:	4408      	add	r0, r1
 8006dbe:	4a0c      	ldr	r2, [pc, #48]	; (8006df0 <ThreadManager_Activate$16481+0x48>)
 8006dc0:	440a      	add	r2, r1
 8006dc2:	9101      	str	r1, [sp, #4]
 8006dc4:	4611      	mov	r1, r2
 8006dc6:	f7f9 fcfb 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8006dca:	490a      	ldr	r1, [pc, #40]	; (8006df4 <ThreadManager_Activate$16481+0x4c>)
 8006dcc:	9a01      	ldr	r2, [sp, #4]
 8006dce:	440a      	add	r2, r1
 8006dd0:	9000      	str	r0, [sp, #0]
 8006dd2:	9903      	ldr	r1, [sp, #12]
 8006dd4:	f7fa fe72 	bl	8001abc <MulticastDelegate_.ctor$4629>
 8006dd8:	9800      	ldr	r0, [sp, #0]
 8006dda:	f009 fe61 	bl	8010aa0 <SystemTimer_CreateTimer$16494>
 8006dde:	9903      	ldr	r1, [sp, #12]
 8006de0:	6448      	str	r0, [r1, #68]	; 0x44
 8006de2:	b004      	add	sp, #16
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	46c0      	nop			; (mov r8, r8)
 8006de8:	ffffea38 	.word	0xffffea38
 8006dec:	17ffaa16 	.word	0x17ffaa16
 8006df0:	e80146fc 	.word	0xe80146fc
 8006df4:	e800f29d 	.word	0xe800f29d

08006df8 <HardwareProvider_TryReservePins$4269>:
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b092      	sub	sp, #72	; 0x48
 8006dfc:	2100      	movs	r1, #0
 8006dfe:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
        [NoInline]
        private static void HardwareInitialization()
        {
            Processor.Instance.InitializeProcessor();

            Memory.Instance.InitializeMemory();
 8006e02:	4a54      	ldr	r2, [pc, #336]	; (8006f54 <HardwareProvider_TryReservePins$4269+0x15c>)
 8006e04:	4b54      	ldr	r3, [pc, #336]	; (8006f58 <HardwareProvider_TryReservePins$4269+0x160>)
 8006e06:	447b      	add	r3, pc
 8006e08:	441a      	add	r2, r3
 8006e0a:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8006e0e:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
 8006e12:	ab11      	add	r3, sp, #68	; 0x44
 8006e14:	9010      	str	r0, [sp, #64]	; 0x40
 8006e16:	4610      	mov	r0, r2
 8006e18:	910f      	str	r1, [sp, #60]	; 0x3c
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	920e      	str	r2, [sp, #56]	; 0x38
 8006e1e:	f000 f8a7 	bl	8006f70 <Monitor_Enter$7710>
 8006e22:	980f      	ldr	r0, [sp, #60]	; 0x3c

            Peripherals.Instance.Initialize();
 8006e24:	900d      	str	r0, [sp, #52]	; 0x34
 8006e26:	e7ff      	b.n	8006e28 <HardwareProvider_TryReservePins$4269+0x30>
 8006e28:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006e2a:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006e2c:	688a      	ldr	r2, [r1, #8]
        {
            Processor.Instance.InitializeProcessor();

            Memory.Instance.InitializeMemory();

            Peripherals.Instance.Initialize();
 8006e2e:	4290      	cmp	r0, r2
 8006e30:	900c      	str	r0, [sp, #48]	; 0x30
 8006e32:	da09      	bge.n	8006e48 <HardwareProvider_TryReservePins$4269+0x50>
 8006e34:	e7ff      	b.n	8006e36 <HardwareProvider_TryReservePins$4269+0x3e>
        }

        [NoInline]
 8006e36:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006e38:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006e3a:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8006e3e:	68d2      	ldr	r2, [r2, #12]
 8006e40:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006e44:	d154      	bne.n	8006ef0 <HardwareProvider_TryReservePins$4269+0xf8>
 8006e46:	e072      	b.n	8006f2e <HardwareProvider_TryReservePins$4269+0x136>
 8006e48:	f04f 30ff 	mov.w	r0, #4294967295
 8006e4c:	900b      	str	r0, [sp, #44]	; 0x2c
 8006e4e:	e7ff      	b.n	8006e50 <HardwareProvider_TryReservePins$4269+0x58>
 8006e50:	980b      	ldr	r0, [sp, #44]	; 0x2c

            mm.InitializationComplete();
        }

        [NoInline]
        [CanAllocateOnReturn]
 8006e52:	2801      	cmp	r0, #1
 8006e54:	900a      	str	r0, [sp, #40]	; 0x28
 8006e56:	db03      	blt.n	8006e60 <HardwareProvider_TryReservePins$4269+0x68>
 8006e58:	e7ff      	b.n	8006e5a <HardwareProvider_TryReservePins$4269+0x62>
 8006e5a:	2000      	movs	r0, #0
        private static void SoftwareInitialization( uint[] systemStack )
        {
 8006e5c:	9009      	str	r0, [sp, #36]	; 0x24
 8006e5e:	e00f      	b.n	8006e80 <HardwareProvider_TryReservePins$4269+0x88>
 8006e60:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8006e64:	2101      	movs	r1, #1

            GarbageCollectionManager.Instance.InitializeGarbageCollectionManager();
        }

        [NoInline]
        private static void HardwareActivation()
 8006e66:	2800      	cmp	r0, #0
 8006e68:	9108      	str	r1, [sp, #32]
 8006e6a:	d006      	beq.n	8006e7a <HardwareProvider_TryReservePins$4269+0x82>
 8006e6c:	e7ff      	b.n	8006e6e <HardwareProvider_TryReservePins$4269+0x76>
 8006e6e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006e70:	f000 f8c4 	bl	8006ffc <Monitor_Exit$3926>
 8006e74:	2001      	movs	r0, #1
 8006e76:	9008      	str	r0, [sp, #32]
 8006e78:	e7ff      	b.n	8006e7a <HardwareProvider_TryReservePins$4269+0x82>
 8006e7a:	9808      	ldr	r0, [sp, #32]
 8006e7c:	b012      	add	sp, #72	; 0x48
 8006e7e:	bd80      	pop	{r7, pc}
 8006e80:	9809      	ldr	r0, [sp, #36]	; 0x24
        }

        [NoInline]
        [CanAllocateOnReturn]
        private static void SoftwareInitialization( uint[] systemStack )
        {
 8006e82:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006e84:	4288      	cmp	r0, r1
 8006e86:	9007      	str	r0, [sp, #28]
 8006e88:	da09      	bge.n	8006e9e <HardwareProvider_TryReservePins$4269+0xa6>
 8006e8a:	e7ff      	b.n	8006e8c <HardwareProvider_TryReservePins$4269+0x94>
            ThreadManager.Instance.InitializeBeforeStaticConstructors();

            TypeSystemManager.Instance.InitializeTypeSystemManager();
 8006e8c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006e8e:	9907      	ldr	r1, [sp, #28]
 8006e90:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8006e94:	68d2      	ldr	r2, [r2, #12]
 8006e96:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006e9a:	d10d      	bne.n	8006eb8 <HardwareProvider_TryReservePins$4269+0xc0>
 8006e9c:	e024      	b.n	8006ee8 <HardwareProvider_TryReservePins$4269+0xf0>
 8006e9e:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8006ea2:	2100      	movs	r1, #0

            GarbageCollectionManager.Instance.InitializeGarbageCollectionManager();
        }

        [NoInline]
        private static void HardwareActivation()
 8006ea4:	2800      	cmp	r0, #0
 8006ea6:	9108      	str	r1, [sp, #32]
 8006ea8:	d0e7      	beq.n	8006e7a <HardwareProvider_TryReservePins$4269+0x82>
 8006eaa:	e7ff      	b.n	8006eac <HardwareProvider_TryReservePins$4269+0xb4>
 8006eac:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006eae:	f000 f8a5 	bl	8006ffc <Monitor_Exit$3926>
 8006eb2:	2000      	movs	r0, #0
 8006eb4:	9008      	str	r0, [sp, #32]
 8006eb6:	e7e0      	b.n	8006e7a <HardwareProvider_TryReservePins$4269+0x82>
        {
            ThreadManager.Instance.InitializeBeforeStaticConstructors();

            TypeSystemManager.Instance.InitializeTypeSystemManager();
            
            ThreadManager.Instance.InitializeAfterStaticConstructors( systemStack );
 8006eb8:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006eba:	9907      	ldr	r1, [sp, #28]
 8006ebc:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8006ec0:	68d1      	ldr	r1, [r2, #12]
 8006ec2:	4a26      	ldr	r2, [pc, #152]	; (8006f5c <HardwareProvider_TryReservePins$4269+0x164>)
 8006ec4:	4b29      	ldr	r3, [pc, #164]	; (8006f6c <HardwareProvider_TryReservePins$4269+0x174>)
 8006ec6:	447b      	add	r3, pc
 8006ec8:	18d0      	adds	r0, r2, r3
 8006eca:	9306      	str	r3, [sp, #24]
 8006ecc:	f000 f8a0 	bl	8007010 <HardwareProvider_PinToIndex$16620>

 8006ed0:	4920      	ldr	r1, [pc, #128]	; (8006f54 <HardwareProvider_TryReservePins$4269+0x15c>)
 8006ed2:	9a06      	ldr	r2, [sp, #24]
 8006ed4:	4411      	add	r1, r2
 8006ed6:	f8d1 108c 	ldr.w	r1, [r1, #140]	; 0x8c
 8006eda:	2200      	movs	r2, #0
 8006edc:	9005      	str	r0, [sp, #20]
 8006ede:	4608      	mov	r0, r1
 8006ee0:	9905      	ldr	r1, [sp, #20]
 8006ee2:	f000 f8a7 	bl	8007034 <BitArray_set_Item$10212>
            GarbageCollectionManager.Instance.InitializeGarbageCollectionManager();
 8006ee6:	e7ff      	b.n	8006ee8 <HardwareProvider_TryReservePins$4269+0xf0>
        }

        [NoInline]
        [CanAllocateOnReturn]
        private static void SoftwareInitialization( uint[] systemStack )
        {
 8006ee8:	9807      	ldr	r0, [sp, #28]
 8006eea:	1c41      	adds	r1, r0, #1
 8006eec:	9109      	str	r1, [sp, #36]	; 0x24
 8006eee:	e7c7      	b.n	8006e80 <HardwareProvider_TryReservePins$4269+0x88>
            Peripherals.Instance.Initialize();
        }

        [NoInline]
        [CanAllocateOnReturn]
        private static void HeapInitialization()
 8006ef0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006ef2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006ef4:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8006ef8:	68d1      	ldr	r1, [r2, #12]
 8006efa:	4a18      	ldr	r2, [pc, #96]	; (8006f5c <HardwareProvider_TryReservePins$4269+0x164>)
 8006efc:	4b18      	ldr	r3, [pc, #96]	; (8006f60 <HardwareProvider_TryReservePins$4269+0x168>)
 8006efe:	447b      	add	r3, pc
 8006f00:	18d0      	adds	r0, r2, r3
 8006f02:	9304      	str	r3, [sp, #16]
 8006f04:	f000 f884 	bl	8007010 <HardwareProvider_PinToIndex$16620>
 8006f08:	4601      	mov	r1, r0
        {
 8006f0a:	4a12      	ldr	r2, [pc, #72]	; (8006f54 <HardwareProvider_TryReservePins$4269+0x15c>)
 8006f0c:	9b04      	ldr	r3, [sp, #16]
 8006f0e:	441a      	add	r2, r3
 8006f10:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8006f14:	9003      	str	r0, [sp, #12]
 8006f16:	4610      	mov	r0, r2
 8006f18:	9a03      	ldr	r2, [sp, #12]
 8006f1a:	9102      	str	r1, [sp, #8]
 8006f1c:	4611      	mov	r1, r2
 8006f1e:	f000 f897 	bl	8007050 <BitArray_get_Item$10211>
 8006f22:	f010 0fff 	tst.w	r0, #255	; 0xff
 8006f26:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006f28:	9001      	str	r0, [sp, #4]
 8006f2a:	d104      	bne.n	8006f36 <HardwareProvider_TryReservePins$4269+0x13e>
 8006f2c:	e006      	b.n	8006f3c <HardwareProvider_TryReservePins$4269+0x144>
        {
            Processor.Instance.InitializeProcessor();

            Memory.Instance.InitializeMemory();

            Peripherals.Instance.Initialize();
 8006f2e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006f30:	1c41      	adds	r1, r0, #1
 8006f32:	910d      	str	r1, [sp, #52]	; 0x34
 8006f34:	e778      	b.n	8006e28 <HardwareProvider_TryReservePins$4269+0x30>
 8006f36:	9801      	ldr	r0, [sp, #4]
        [CanAllocateOnReturn]
        private static void HeapInitialization()
        {
            MemoryManager mm = MemoryManager.Instance;
            
            mm.InitializeMemoryManager();
 8006f38:	900b      	str	r0, [sp, #44]	; 0x2c
 8006f3a:	e789      	b.n	8006e50 <HardwareProvider_TryReservePins$4269+0x58>

            mm.InitializationComplete();
 8006f3c:	4805      	ldr	r0, [pc, #20]	; (8006f54 <HardwareProvider_TryReservePins$4269+0x15c>)
 8006f3e:	4909      	ldr	r1, [pc, #36]	; (8006f64 <HardwareProvider_TryReservePins$4269+0x16c>)
 8006f40:	4479      	add	r1, pc
 8006f42:	4408      	add	r0, r1
 8006f44:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
 8006f48:	4a07      	ldr	r2, [pc, #28]	; (8006f68 <HardwareProvider_TryReservePins$4269+0x170>)
 8006f4a:	5c52      	ldrb	r2, [r2, r1]
 8006f4c:	9902      	ldr	r1, [sp, #8]
 8006f4e:	f000 f871 	bl	8007034 <BitArray_set_Item$10212>
        }
 8006f52:	e7ec      	b.n	8006f2e <HardwareProvider_TryReservePins$4269+0x136>
 8006f54:	fffffe3c 	.word	0xfffffe3c
 8006f58:	17ffa9ca 	.word	0x17ffa9ca
 8006f5c:	ffffe9fc 	.word	0xffffe9fc
 8006f60:	17ffa8d2 	.word	0x17ffa8d2
 8006f64:	17ffa890 	.word	0x17ffa890
 8006f68:	e80252b4 	.word	0xe80252b4
 8006f6c:	17ffa90a 	.word	0x17ffa90a

08006f70 <Monitor_Enter$7710>:
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b086      	sub	sp, #24
 8006f74:	4602      	mov	r2, r0
        [NoInline]
        private static void ObjPulse( Object obj )
        {
            throw new NotImplementedException();
        }

 8006f76:	2800      	cmp	r0, #0
 8006f78:	9205      	str	r2, [sp, #20]
 8006f7a:	9104      	str	r1, [sp, #16]
 8006f7c:	d112      	bne.n	8006fa4 <Monitor_Enter$7710+0x34>
 8006f7e:	e7ff      	b.n	8006f80 <Monitor_Enter$7710+0x10>
        [NoInline]
        private static void ObjPulseAll( Object obj )
 8006f80:	e7ff      	b.n	8006f82 <Monitor_Enter$7710+0x12>
 8006f82:	4819      	ldr	r0, [pc, #100]	; (8006fe8 <Monitor_Enter$7710+0x78>)
 8006f84:	491b      	ldr	r1, [pc, #108]	; (8006ff4 <Monitor_Enter$7710+0x84>)
 8006f86:	4479      	add	r1, pc
 8006f88:	4408      	add	r0, r1
 8006f8a:	4a1b      	ldr	r2, [pc, #108]	; (8006ff8 <Monitor_Enter$7710+0x88>)
 8006f8c:	4411      	add	r1, r2
 8006f8e:	9003      	str	r0, [sp, #12]
 8006f90:	f7f9 fc16 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8006f94:	9002      	str	r0, [sp, #8]
 8006f96:	f7f9 fc60 	bl	800085a <ArgumentNullException_.ctor$6069>
 8006f9a:	9803      	ldr	r0, [sp, #12]
 8006f9c:	9902      	ldr	r1, [sp, #8]
 8006f9e:	f7f9 fc65 	bl	800086c <TypeSystemManager_Throw$4954>
 8006fa2:	e7ee      	b.n	8006f82 <Monitor_Enter$7710+0x12>
        {
            throw new NotImplementedException();
        }
    }
 8006fa4:	9804      	ldr	r0, [sp, #16]
 8006fa6:	7801      	ldrb	r1, [r0, #0]
 8006fa8:	2900      	cmp	r1, #0
 8006faa:	d015      	beq.n	8006fd8 <Monitor_Enter$7710+0x68>
 8006fac:	e7ff      	b.n	8006fae <Monitor_Enter$7710+0x3e>
}
 8006fae:	e7ff      	b.n	8006fb0 <Monitor_Enter$7710+0x40>
 8006fb0:	2000      	movs	r0, #0
 8006fb2:	9904      	ldr	r1, [sp, #16]
 8006fb4:	7008      	strb	r0, [r1, #0]
 8006fb6:	480c      	ldr	r0, [pc, #48]	; (8006fe8 <Monitor_Enter$7710+0x78>)
 8006fb8:	4a0c      	ldr	r2, [pc, #48]	; (8006fec <Monitor_Enter$7710+0x7c>)
 8006fba:	447a      	add	r2, pc
 8006fbc:	4410      	add	r0, r2
 8006fbe:	4b0c      	ldr	r3, [pc, #48]	; (8006ff0 <Monitor_Enter$7710+0x80>)
 8006fc0:	1899      	adds	r1, r3, r2
 8006fc2:	9001      	str	r0, [sp, #4]
 8006fc4:	f7f9 fbfc 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8006fc8:	9000      	str	r0, [sp, #0]
 8006fca:	f004 f928 	bl	800b21e <ArgumentException_.ctor$6062>
 8006fce:	9801      	ldr	r0, [sp, #4]
 8006fd0:	9900      	ldr	r1, [sp, #0]
 8006fd2:	f7f9 fc4b 	bl	800086c <TypeSystemManager_Throw$4954>
 8006fd6:	e7eb      	b.n	8006fb0 <Monitor_Enter$7710+0x40>
 8006fd8:	9805      	ldr	r0, [sp, #20]
 8006fda:	f006 ffb7 	bl	800df4c <Monitor_Enter$3925>
 8006fde:	2001      	movs	r0, #1
 8006fe0:	9904      	ldr	r1, [sp, #16]
 8006fe2:	7008      	strb	r0, [r1, #0]
 8006fe4:	b006      	add	sp, #24
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	ffffea38 	.word	0xffffea38
 8006fec:	17ffa816 	.word	0x17ffa816
 8006ff0:	e801126c 	.word	0xe801126c
 8006ff4:	17ffa84a 	.word	0x17ffa84a
 8006ff8:	e801049c 	.word	0xe801049c

08006ffc <Monitor_Exit$3926>:
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	4601      	mov	r1, r0
    using System.Runtime.ConstrainedExecution;
////using System.Runtime.Versioning;

    [HostProtection( Synchronization = true, ExternalThreading = true )]
    public static class Monitor
    {
 8007002:	9101      	str	r1, [sp, #4]
 8007004:	f000 fc5e 	bl	80078c4 <SyncBlockTable_GetLock$4498>
 8007008:	f002 fb14 	bl	8009634 <CriticalSection_Release$4978>
 800700c:	b002      	add	sp, #8
 800700e:	bd80      	pop	{r7, pc}

08007010 <HardwareProvider_PinToIndex$16620>:
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	4608      	mov	r0, r1
{
    using System;
    using System.Runtime.InteropServices;
    using System.Runtime.CompilerServices;
    using System.Runtime.ConstrainedExecution;
////using System.Runtime.Versioning;
 8007016:	4a05      	ldr	r2, [pc, #20]	; (800702c <HardwareProvider_PinToIndex$16620+0x1c>)
 8007018:	4b05      	ldr	r3, [pc, #20]	; (8007030 <HardwareProvider_PinToIndex$16620+0x20>)
 800701a:	447b      	add	r3, pc
 800701c:	441a      	add	r2, r3
 800701e:	9001      	str	r0, [sp, #4]
 8007020:	4610      	mov	r0, r2
 8007022:	f009 ffe7 	bl	8010ff4 <Board_PinToIndex$16924>
 8007026:	b002      	add	sp, #8
 8007028:	bd80      	pop	{r7, pc}
 800702a:	46c0      	nop			; (mov r8, r8)
 800702c:	ffffea48 	.word	0xffffea48
 8007030:	17ffa7b6 	.word	0x17ffa7b6

08007034 <BitArray_set_Item$10212>:
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	4613      	mov	r3, r2
 800703a:	468c      	mov	ip, r1
 800703c:	4686      	mov	lr, r0
                return Get( index );
            }

            set
            {
                Set( index, value );
 800703e:	9303      	str	r3, [sp, #12]
 8007040:	f8cd c008 	str.w	ip, [sp, #8]
 8007044:	f8cd e004 	str.w	lr, [sp, #4]
 8007048:	f007 fe54 	bl	800ecf4 <BitArray_Set$10214>
 800704c:	b004      	add	sp, #16
 800704e:	bd80      	pop	{r7, pc}

08007050 <BitArray_get_Item$10211>:
 8007050:	b580      	push	{r7, lr}
 8007052:	b082      	sub	sp, #8
 8007054:	460a      	mov	r2, r1
 8007056:	4603      	mov	r3, r0

        public bool this[int index]
        {
            get
            {
                return Get( index );
 8007058:	9201      	str	r2, [sp, #4]
 800705a:	9300      	str	r3, [sp, #0]
 800705c:	f007 fe0e 	bl	800ec7c <BitArray_Get$10213>
 8007060:	b002      	add	sp, #8
 8007062:	bd80      	pop	{r7, pc}

08007064 <HardwareProvider_ReleasePins$4270>:
 8007064:	b580      	push	{r7, lr}
 8007066:	b08a      	sub	sp, #40	; 0x28
 8007068:	2100      	movs	r1, #0
 800706a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
            }
        }

        public void ReleasePins(params int[] pins)
        {
            lock (pinLock)
 800706e:	4a2c      	ldr	r2, [pc, #176]	; (8007120 <HardwareProvider_ReleasePins$4270+0xbc>)
 8007070:	4b2c      	ldr	r3, [pc, #176]	; (8007124 <HardwareProvider_ReleasePins$4270+0xc0>)
 8007072:	447b      	add	r3, pc
 8007074:	441a      	add	r2, r3
 8007076:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800707a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 800707e:	ab09      	add	r3, sp, #36	; 0x24
 8007080:	9008      	str	r0, [sp, #32]
 8007082:	4610      	mov	r0, r2
 8007084:	9107      	str	r1, [sp, #28]
 8007086:	4619      	mov	r1, r3
 8007088:	9206      	str	r2, [sp, #24]
 800708a:	f7ff ff71 	bl	8006f70 <Monitor_Enter$7710>
 800708e:	9807      	ldr	r0, [sp, #28]
            {
                foreach (int pin in pins)
 8007090:	9005      	str	r0, [sp, #20]
 8007092:	e7ff      	b.n	8007094 <HardwareProvider_ReleasePins$4270+0x30>
 8007094:	9805      	ldr	r0, [sp, #20]
 8007096:	9908      	ldr	r1, [sp, #32]
 8007098:	688a      	ldr	r2, [r1, #8]

        public void ReleasePins(params int[] pins)
        {
            lock (pinLock)
            {
                foreach (int pin in pins)
 800709a:	4290      	cmp	r0, r2
 800709c:	9004      	str	r0, [sp, #16]
 800709e:	da0a      	bge.n	80070b6 <HardwareProvider_ReleasePins$4270+0x52>
 80070a0:	e7ff      	b.n	80070a2 <HardwareProvider_ReleasePins$4270+0x3e>
 80070a2:	9808      	ldr	r0, [sp, #32]
 80070a4:	9904      	ldr	r1, [sp, #16]
 80070a6:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 80070aa:	68d2      	ldr	r2, [r2, #12]
                {
                    // Don't touch NC pins
                    if (InvalidPin != pin)
 80070ac:	f1b2 3fff 	cmp.w	r2, #4294967295
 80070b0:	9203      	str	r2, [sp, #12]
 80070b2:	d10b      	bne.n	80070cc <HardwareProvider_ReleasePins$4270+0x68>
 80070b4:	e024      	b.n	8007100 <HardwareProvider_ReleasePins$4270+0x9c>
 80070b6:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
                        {
                            m_reservedPins[index] = false;
                        }
                    }
                }
            }
 80070ba:	2800      	cmp	r0, #0
 80070bc:	d004      	beq.n	80070c8 <HardwareProvider_ReleasePins$4270+0x64>
 80070be:	e7ff      	b.n	80070c0 <HardwareProvider_ReleasePins$4270+0x5c>
 80070c0:	9806      	ldr	r0, [sp, #24]
 80070c2:	f7ff ff9b 	bl	8006ffc <Monitor_Exit$3926>
 80070c6:	e7ff      	b.n	80070c8 <HardwareProvider_ReleasePins$4270+0x64>
 80070c8:	b00a      	add	sp, #40	; 0x28
 80070ca:	bd80      	pop	{r7, pc}
                foreach (int pin in pins)
                {
                    // Don't touch NC pins
                    if (InvalidPin != pin)
                    {
                        int index = PinToIndex(pin);
 80070cc:	4816      	ldr	r0, [pc, #88]	; (8007128 <HardwareProvider_ReleasePins$4270+0xc4>)
 80070ce:	4917      	ldr	r1, [pc, #92]	; (800712c <HardwareProvider_ReleasePins$4270+0xc8>)
 80070d0:	4479      	add	r1, pc
 80070d2:	4408      	add	r0, r1
 80070d4:	9a03      	ldr	r2, [sp, #12]
 80070d6:	9102      	str	r1, [sp, #8]
 80070d8:	4611      	mov	r1, r2
 80070da:	f7ff ff99 	bl	8007010 <HardwareProvider_PinToIndex$16620>
 80070de:	4601      	mov	r1, r0

                        if (m_reservedPins[index] == true)
 80070e0:	4a0f      	ldr	r2, [pc, #60]	; (8007120 <HardwareProvider_ReleasePins$4270+0xbc>)
 80070e2:	9b02      	ldr	r3, [sp, #8]
 80070e4:	441a      	add	r2, r3
 80070e6:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80070ea:	9001      	str	r0, [sp, #4]
 80070ec:	4610      	mov	r0, r2
 80070ee:	9a01      	ldr	r2, [sp, #4]
 80070f0:	9100      	str	r1, [sp, #0]
 80070f2:	4611      	mov	r1, r2
 80070f4:	f7ff ffac 	bl	8007050 <BitArray_get_Item$10211>
 80070f8:	f010 0fff 	tst.w	r0, #255	; 0xff
 80070fc:	d104      	bne.n	8007108 <HardwareProvider_ReleasePins$4270+0xa4>
 80070fe:	e00e      	b.n	800711e <HardwareProvider_ReleasePins$4270+0xba>
                        {
                            m_reservedPins[index] = false;
                        }
                    }
                }
 8007100:	9804      	ldr	r0, [sp, #16]
 8007102:	1c41      	adds	r1, r0, #1
 8007104:	9105      	str	r1, [sp, #20]
 8007106:	e7c5      	b.n	8007094 <HardwareProvider_ReleasePins$4270+0x30>
                    {
                        int index = PinToIndex(pin);

                        if (m_reservedPins[index] == true)
                        {
                            m_reservedPins[index] = false;
 8007108:	4805      	ldr	r0, [pc, #20]	; (8007120 <HardwareProvider_ReleasePins$4270+0xbc>)
 800710a:	4909      	ldr	r1, [pc, #36]	; (8007130 <HardwareProvider_ReleasePins$4270+0xcc>)
 800710c:	4479      	add	r1, pc
 800710e:	4408      	add	r0, r1
 8007110:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
 8007114:	2200      	movs	r2, #0
 8007116:	9900      	ldr	r1, [sp, #0]
 8007118:	f7ff ff8c 	bl	8007034 <BitArray_set_Item$10212>
                        }
 800711c:	e7ff      	b.n	800711e <HardwareProvider_ReleasePins$4270+0xba>
                    }
 800711e:	e7ef      	b.n	8007100 <HardwareProvider_ReleasePins$4270+0x9c>
 8007120:	fffffe3c 	.word	0xfffffe3c
 8007124:	17ffa75e 	.word	0x17ffa75e
 8007128:	ffffe9fc 	.word	0xffffe9fc
 800712c:	17ffa700 	.word	0x17ffa700
 8007130:	17ffa6c4 	.word	0x17ffa6c4

08007134 <HardwareProvider_.cctor$4274>:

    [ImplicitInstance]
    [ForceDevirtualization]
    public abstract class HardwareProvider
    {
        private static object pinLock = new object();
 8007134:	b580      	push	{r7, lr}
 8007136:	b086      	sub	sp, #24
 8007138:	4813      	ldr	r0, [pc, #76]	; (8007188 <HardwareProvider_.cctor$4274+0x54>)
 800713a:	4914      	ldr	r1, [pc, #80]	; (800718c <HardwareProvider_.cctor$4274+0x58>)
 800713c:	4479      	add	r1, pc
 800713e:	4408      	add	r0, r1
 8007140:	4a13      	ldr	r2, [pc, #76]	; (8007190 <HardwareProvider_.cctor$4274+0x5c>)
 8007142:	440a      	add	r2, r1
 8007144:	9005      	str	r0, [sp, #20]
 8007146:	9104      	str	r1, [sp, #16]
 8007148:	4611      	mov	r1, r2
 800714a:	f7f9 fb39 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800714e:	4911      	ldr	r1, [pc, #68]	; (8007194 <HardwareProvider_.cctor$4274+0x60>)
 8007150:	9a04      	ldr	r2, [sp, #16]
 8007152:	4411      	add	r1, r2
 8007154:	f8c1 0090 	str.w	r0, [r1, #144]	; 0x90
        // See below in default ctor: the singleton factory currently does not yet support creating parameterized objects
        // we need to use a ceiling value until we invoke the defautl ctor that will ask the actual number of pins to the 
        // concrete HW Provider (e.g. mBed HW provider)
        // Consider that LPC1768 board has 32 exposed pins and K64F has 64 pins only
        //
        static BitArray m_reservedPins = new BitArray(256);
 8007158:	480f      	ldr	r0, [pc, #60]	; (8007198 <HardwareProvider_.cctor$4274+0x64>)
 800715a:	4410      	add	r0, r2
 800715c:	9b05      	ldr	r3, [sp, #20]
 800715e:	9003      	str	r0, [sp, #12]
 8007160:	4618      	mov	r0, r3
 8007162:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8007166:	9102      	str	r1, [sp, #8]
 8007168:	4661      	mov	r1, ip
 800716a:	f7f9 fb29 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800716e:	490b      	ldr	r1, [pc, #44]	; (800719c <HardwareProvider_.cctor$4274+0x68>)
 8007170:	9a04      	ldr	r2, [sp, #16]
 8007172:	5889      	ldr	r1, [r1, r2]
 8007174:	9001      	str	r0, [sp, #4]
 8007176:	f000 f813 	bl	80071a0 <BitArray_.ctor$10205>
 800717a:	9801      	ldr	r0, [sp, #4]
 800717c:	9902      	ldr	r1, [sp, #8]
 800717e:	f8c1 008c 	str.w	r0, [r1, #140]	; 0x8c
 8007182:	b006      	add	sp, #24
 8007184:	bd80      	pop	{r7, pc}
 8007186:	46c0      	nop			; (mov r8, r8)
 8007188:	ffffea38 	.word	0xffffea38
 800718c:	17ffa694 	.word	0x17ffa694
 8007190:	e8011ffc 	.word	0xe8011ffc
 8007194:	fffffe3c 	.word	0xfffffe3c
 8007198:	e801208c 	.word	0xe801208c
 800719c:	e80252b8 	.word	0xe80252b8

080071a0 <BitArray_.ctor$10205>:
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	460a      	mov	r2, r1
 80071a6:	4603      	mov	r3, r0
 80071a8:	9201      	str	r2, [sp, #4]
 80071aa:	9300      	str	r3, [sp, #0]
 80071ac:	f007 fd12 	bl	800ebd4 <BitArray_.ctor$10206>
 80071b0:	b002      	add	sp, #8
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <Tracker_Allocate$5417>:
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b088      	sub	sp, #32
 80071b8:	4601      	mov	r1, r0
 80071ba:	2200      	movs	r2, #0
 80071bc:	f88d 201c 	strb.w	r2, [sp, #28]
            // Helper Methods
            //

            internal static void Allocate( object obj )
            {
                var tracker = new Tracker( obj );
 80071c0:	4b1a      	ldr	r3, [pc, #104]	; (800722c <Tracker_Allocate$5417+0x78>)
 80071c2:	f8df c06c 	ldr.w	ip, [pc, #108]	; 8007230 <Tracker_Allocate$5417+0x7c>
 80071c6:	44fc      	add	ip, pc
 80071c8:	4463      	add	r3, ip
 80071ca:	f8df e068 	ldr.w	lr, [pc, #104]	; 8007234 <Tracker_Allocate$5417+0x80>
 80071ce:	44e6      	add	lr, ip
 80071d0:	9006      	str	r0, [sp, #24]
 80071d2:	4618      	mov	r0, r3
 80071d4:	9105      	str	r1, [sp, #20]
 80071d6:	4671      	mov	r1, lr
 80071d8:	f8cd c010 	str.w	ip, [sp, #16]
 80071dc:	9203      	str	r2, [sp, #12]
 80071de:	f000 fcf3 	bl	8007bc8 <DefaultTypeSystemManager_AllocateObjectWithExtensions$4961>
 80071e2:	9002      	str	r0, [sp, #8]
 80071e4:	9906      	ldr	r1, [sp, #24]
 80071e6:	f003 f9d7 	bl	800a598 <Tracker_.ctor$5416>

                lock(s_list)
 80071ea:	4813      	ldr	r0, [pc, #76]	; (8007238 <Tracker_Allocate$5417+0x84>)
 80071ec:	9904      	ldr	r1, [sp, #16]
 80071ee:	4408      	add	r0, r1
 80071f0:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
 80071f4:	9b03      	ldr	r3, [sp, #12]
 80071f6:	f88d 301c 	strb.w	r3, [sp, #28]
 80071fa:	a907      	add	r1, sp, #28
 80071fc:	9001      	str	r0, [sp, #4]
 80071fe:	4610      	mov	r0, r2
 8007200:	9200      	str	r2, [sp, #0]
 8007202:	f7ff feb5 	bl	8006f70 <Monitor_Enter$7710>
                {
                    s_list.InsertAtTail( tracker.m_node );
 8007206:	9801      	ldr	r0, [sp, #4]
 8007208:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 800720c:	9902      	ldr	r1, [sp, #8]
 800720e:	6889      	ldr	r1, [r1, #8]
 8007210:	f003 f9f0 	bl	800a5f4 <KernelList`1_InsertAtTail$17528>
 8007214:	f89d 001c 	ldrb.w	r0, [sp, #28]
                }
 8007218:	2800      	cmp	r0, #0
 800721a:	d004      	beq.n	8007226 <Tracker_Allocate$5417+0x72>
 800721c:	e7ff      	b.n	800721e <Tracker_Allocate$5417+0x6a>
 800721e:	9800      	ldr	r0, [sp, #0]
 8007220:	f7ff feec 	bl	8006ffc <Monitor_Exit$3926>
 8007224:	e7ff      	b.n	8007226 <Tracker_Allocate$5417+0x72>
 8007226:	b008      	add	sp, #32
 8007228:	bd80      	pop	{r7, pc}
 800722a:	46c0      	nop			; (mov r8, r8)
 800722c:	ffffea38 	.word	0xffffea38
 8007230:	17ffa60a 	.word	0x17ffa60a
 8007234:	e80129ac 	.word	0xe80129ac
 8007238:	fffffe3c 	.word	0xfffffe3c

0800723c <Tracker_SetFinalizationFlag$5418>:
 800723c:	b580      	push	{r7, lr}
 800723e:	b088      	sub	sp, #32
 8007240:	2200      	movs	r2, #0
 8007242:	f88d 201c 	strb.w	r2, [sp, #28]
            }

            internal static void SetFinalizationFlag( object obj ,
                                                      bool   val )
            {
                lock(s_list)
 8007246:	4b23      	ldr	r3, [pc, #140]	; (80072d4 <Tracker_SetFinalizationFlag$5418+0x98>)
 8007248:	f8df c08c 	ldr.w	ip, [pc, #140]	; 80072d8 <Tracker_SetFinalizationFlag$5418+0x9c>
 800724c:	44fc      	add	ip, pc
 800724e:	4463      	add	r3, ip
 8007250:	f8d3 c080 	ldr.w	ip, [r3, #128]	; 0x80
 8007254:	f88d 201c 	strb.w	r2, [sp, #28]
 8007258:	aa07      	add	r2, sp, #28
 800725a:	9006      	str	r0, [sp, #24]
 800725c:	4660      	mov	r0, ip
 800725e:	9105      	str	r1, [sp, #20]
 8007260:	4611      	mov	r1, r2
 8007262:	f8cd c010 	str.w	ip, [sp, #16]
 8007266:	9303      	str	r3, [sp, #12]
 8007268:	f7ff fe82 	bl	8006f70 <Monitor_Enter$7710>
                {
                    for(var node = s_list.StartOfForwardWalk; node.IsValidForForwardMove; node = node.Next)
 800726c:	9803      	ldr	r0, [sp, #12]
 800726e:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8007272:	f003 f9cd 	bl	800a610 <KernelList`1_get_StartOfForwardWalk$17534>
 8007276:	9002      	str	r0, [sp, #8]
 8007278:	e7ff      	b.n	800727a <Tracker_SetFinalizationFlag$5418+0x3e>
 800727a:	9802      	ldr	r0, [sp, #8]
 800727c:	9902      	ldr	r1, [sp, #8]
 800727e:	9101      	str	r1, [sp, #4]
 8007280:	f003 f9cd 	bl	800a61e <KernelNode`1_get_IsValidForForwardMove$17793>
 8007284:	f010 0fff 	tst.w	r0, #255	; 0xff
 8007288:	d008      	beq.n	800729c <Tracker_SetFinalizationFlag$5418+0x60>
 800728a:	e7ff      	b.n	800728c <Tracker_SetFinalizationFlag$5418+0x50>

            //
            // Constructor Methods
            //

            internal Tracker( object obj )
 800728c:	9801      	ldr	r0, [sp, #4]
 800728e:	6901      	ldr	r1, [r0, #16]
                {
                    for(var node = s_list.StartOfForwardWalk; node.IsValidForForwardMove; node = node.Next)
                    {
                        var ptr = node.Target;

                        if(ptr.m_target == obj)
 8007290:	68ca      	ldr	r2, [r1, #12]
 8007292:	9b06      	ldr	r3, [sp, #24]
 8007294:	429a      	cmp	r2, r3
 8007296:	9100      	str	r1, [sp, #0]
 8007298:	d00b      	beq.n	80072b2 <Tracker_SetFinalizationFlag$5418+0x76>
 800729a:	e012      	b.n	80072c2 <Tracker_SetFinalizationFlag$5418+0x86>
 800729c:	f89d 001c 	ldrb.w	r0, [sp, #28]
                        {
                            ptr.m_fFinalized = val;
                            return;
                        }
                    }
                }
 80072a0:	2800      	cmp	r0, #0
 80072a2:	d004      	beq.n	80072ae <Tracker_SetFinalizationFlag$5418+0x72>
 80072a4:	e7ff      	b.n	80072a6 <Tracker_SetFinalizationFlag$5418+0x6a>
 80072a6:	9804      	ldr	r0, [sp, #16]
 80072a8:	f7ff fea8 	bl	8006ffc <Monitor_Exit$3926>
 80072ac:	e7ff      	b.n	80072ae <Tracker_SetFinalizationFlag$5418+0x72>
 80072ae:	b008      	add	sp, #32
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	9800      	ldr	r0, [sp, #0]
 80072b4:	9905      	ldr	r1, [sp, #20]
 80072b6:	7401      	strb	r1, [r0, #16]
 80072b8:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80072bc:	2800      	cmp	r0, #0
 80072be:	d104      	bne.n	80072ca <Tracker_SetFinalizationFlag$5418+0x8e>
 80072c0:	e7f5      	b.n	80072ae <Tracker_SetFinalizationFlag$5418+0x72>
                            }

                            var ptr = node.Target;
                            var obj = (ObjectImpl)ptr.m_targetKeepAlive;

                            ptr.m_targetKeepAlive = null;
 80072c2:	9801      	ldr	r0, [sp, #4]
 80072c4:	6881      	ldr	r1, [r0, #8]

 80072c6:	9102      	str	r1, [sp, #8]
 80072c8:	e7d7      	b.n	800727a <Tracker_SetFinalizationFlag$5418+0x3e>
                        {
                            ptr.m_fFinalized = val;
                            return;
                        }
                    }
                }
 80072ca:	9804      	ldr	r0, [sp, #16]
 80072cc:	f7ff fe96 	bl	8006ffc <Monitor_Exit$3926>
 80072d0:	e7ed      	b.n	80072ae <Tracker_SetFinalizationFlag$5418+0x72>
 80072d2:	46c0      	nop			; (mov r8, r8)
 80072d4:	fffffe3c 	.word	0xfffffe3c
 80072d8:	17ffa584 	.word	0x17ffa584

080072dc <Finalizer_.cctor$4290>:

        //
        // State
        //

        static readonly KernelList< Tracker> s_list        = new KernelList< Tracker >();
 80072dc:	b580      	push	{r7, lr}
 80072de:	b086      	sub	sp, #24
 80072e0:	4819      	ldr	r0, [pc, #100]	; (8007348 <Finalizer_.cctor$4290+0x6c>)
 80072e2:	491a      	ldr	r1, [pc, #104]	; (800734c <Finalizer_.cctor$4290+0x70>)
 80072e4:	4479      	add	r1, pc
 80072e6:	4408      	add	r0, r1
 80072e8:	4a19      	ldr	r2, [pc, #100]	; (8007350 <Finalizer_.cctor$4290+0x74>)
 80072ea:	440a      	add	r2, r1
 80072ec:	9005      	str	r0, [sp, #20]
 80072ee:	9104      	str	r1, [sp, #16]
 80072f0:	4611      	mov	r1, r2
 80072f2:	f7f9 fa65 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 80072f6:	9003      	str	r0, [sp, #12]
 80072f8:	f000 f834 	bl	8007364 <KernelList`1_.ctor$17527>
 80072fc:	4815      	ldr	r0, [pc, #84]	; (8007354 <Finalizer_.cctor$4290+0x78>)
 80072fe:	9904      	ldr	r1, [sp, #16]
 8007300:	4408      	add	r0, r1
 8007302:	9a03      	ldr	r2, [sp, #12]
 8007304:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
        static readonly AutoResetEvent       s_notifyStart = new AutoResetEvent  ( false );
 8007308:	4b13      	ldr	r3, [pc, #76]	; (8007358 <Finalizer_.cctor$4290+0x7c>)
 800730a:	4419      	add	r1, r3
 800730c:	9b05      	ldr	r3, [sp, #20]
 800730e:	9002      	str	r0, [sp, #8]
 8007310:	4618      	mov	r0, r3
 8007312:	f7f9 fa55 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8007316:	9001      	str	r0, [sp, #4]
 8007318:	f7ff fb3f 	bl	800699a <AutoResetEvent_.ctor$7570>
 800731c:	9801      	ldr	r0, [sp, #4]
 800731e:	9902      	ldr	r1, [sp, #8]
 8007320:	f8c1 0084 	str.w	r0, [r1, #132]	; 0x84
        static readonly ManualResetEvent     s_notifyStop  = new ManualResetEvent( true  );
 8007324:	4a0d      	ldr	r2, [pc, #52]	; (800735c <Finalizer_.cctor$4290+0x80>)
 8007326:	9b04      	ldr	r3, [sp, #16]
 8007328:	18d1      	adds	r1, r2, r3
 800732a:	9805      	ldr	r0, [sp, #20]
 800732c:	f7f9 fa48 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8007330:	490b      	ldr	r1, [pc, #44]	; (8007360 <Finalizer_.cctor$4290+0x84>)
 8007332:	9a04      	ldr	r2, [sp, #16]
 8007334:	5c89      	ldrb	r1, [r1, r2]
 8007336:	9000      	str	r0, [sp, #0]
 8007338:	f000 f84a 	bl	80073d0 <ManualResetEvent_.ctor$7708>
 800733c:	9800      	ldr	r0, [sp, #0]
 800733e:	9902      	ldr	r1, [sp, #8]
 8007340:	f8c1 0088 	str.w	r0, [r1, #136]	; 0x88
 8007344:	b006      	add	sp, #24
 8007346:	bd80      	pop	{r7, pc}
 8007348:	ffffea38 	.word	0xffffea38
 800734c:	17ffa4ec 	.word	0x17ffa4ec
 8007350:	e801211c 	.word	0xe801211c
 8007354:	fffffe3c 	.word	0xfffffe3c
 8007358:	e8011e4c 	.word	0xe8011e4c
 800735c:	e80121ac 	.word	0xe80121ac
 8007360:	e80252bc 	.word	0xe80252bc

08007364 <KernelList`1_.ctor$17527>:
 8007364:	b580      	push	{r7, lr}
 8007366:	b088      	sub	sp, #32
 8007368:	4601      	mov	r1, r0
        //
        // Constructor Methods
        //

        public KernelNode( T target )
        {
 800736a:	4a16      	ldr	r2, [pc, #88]	; (80073c4 <KernelList`1_.ctor$17527+0x60>)
 800736c:	4b16      	ldr	r3, [pc, #88]	; (80073c8 <KernelList`1_.ctor$17527+0x64>)
 800736e:	447b      	add	r3, pc
 8007370:	441a      	add	r2, r3
 8007372:	f8df c058 	ldr.w	ip, [pc, #88]	; 80073cc <KernelList`1_.ctor$17527+0x68>
 8007376:	4463      	add	r3, ip
 8007378:	9007      	str	r0, [sp, #28]
 800737a:	4610      	mov	r0, r2
 800737c:	9106      	str	r1, [sp, #24]
 800737e:	4619      	mov	r1, r3
 8007380:	9305      	str	r3, [sp, #20]
 8007382:	9204      	str	r2, [sp, #16]
 8007384:	f7f9 fa1c 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8007388:	2100      	movs	r1, #0
 800738a:	9003      	str	r0, [sp, #12]
 800738c:	9102      	str	r1, [sp, #8]
 800738e:	f003 f929 	bl	800a5e4 <KernelNode`1_.ctor$17784>
 8007392:	9803      	ldr	r0, [sp, #12]
 8007394:	9907      	ldr	r1, [sp, #28]
 8007396:	6088      	str	r0, [r1, #8]
            m_target = target;
 8007398:	9804      	ldr	r0, [sp, #16]
 800739a:	9905      	ldr	r1, [sp, #20]
 800739c:	f7f9 fa10 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 80073a0:	9001      	str	r0, [sp, #4]
 80073a2:	9902      	ldr	r1, [sp, #8]
 80073a4:	f003 f91e 	bl	800a5e4 <KernelNode`1_.ctor$17784>
 80073a8:	9801      	ldr	r0, [sp, #4]
 80073aa:	9907      	ldr	r1, [sp, #28]
 80073ac:	60c8      	str	r0, [r1, #12]
        }

 80073ae:	6888      	ldr	r0, [r1, #8]
 80073b0:	9901      	ldr	r1, [sp, #4]
 80073b2:	f00a f97e 	bl	80116b2 <KernelNode`1_set_Next$17796>
        //
 80073b6:	9807      	ldr	r0, [sp, #28]
 80073b8:	6881      	ldr	r1, [r0, #8]
 80073ba:	68c0      	ldr	r0, [r0, #12]
 80073bc:	f00a f981 	bl	80116c2 <KernelNode`1_set_Previous$17798>
 80073c0:	b008      	add	sp, #32
 80073c2:	bd80      	pop	{r7, pc}
 80073c4:	ffffea38 	.word	0xffffea38
 80073c8:	17ffa462 	.word	0x17ffa462
 80073cc:	e801291c 	.word	0xe801291c

080073d0 <ManualResetEvent_.ctor$7708>:
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	460a      	mov	r2, r1
 80073d6:	4603      	mov	r3, r0
 80073d8:	f8df c018 	ldr.w	ip, [pc, #24]	; 80073f4 <ManualResetEvent_.ctor$7708+0x24>
 80073dc:	f8df e018 	ldr.w	lr, [pc, #24]	; 80073f8 <ManualResetEvent_.ctor$7708+0x28>
 80073e0:	44fe      	add	lr, pc
 80073e2:	f85c c00e 	ldr.w	ip, [ip, lr]

        public static int Increment( ref int location )
        {
            using(SmartHandles.InterruptState.DisableAll())
            {
                return ++location;
 80073e6:	9201      	str	r2, [sp, #4]
 80073e8:	4662      	mov	r2, ip
 80073ea:	9300      	str	r3, [sp, #0]
 80073ec:	f7fd fc32 	bl	8004c54 <EventWaitHandle_.ctor$3943>
 80073f0:	b002      	add	sp, #8
 80073f2:	bd80      	pop	{r7, pc}
 80073f4:	e802541c 	.word	0xe802541c
 80073f8:	17ffa3f0 	.word	0x17ffa3f0

080073fc <Device_ProcessBugCheck$4423>:
 80073fc:	b081      	sub	sp, #4
 80073fe:	4608      	mov	r0, r1
 8007400:	4a03      	ldr	r2, [pc, #12]	; (8007410 <Device_ProcessBugCheck$4423+0x14>)
 8007402:	4b04      	ldr	r3, [pc, #16]	; (8007414 <Device_ProcessBugCheck$4423+0x18>)
 8007404:	447b      	add	r3, pc
 8007406:	441a      	add	r2, r3
 8007408:	6791      	str	r1, [r2, #120]	; 0x78

                //
                // Helper Methods
                //

                public override void Initialize()
 800740a:	9000      	str	r0, [sp, #0]
 800740c:	e7ff      	b.n	800740e <Device_ProcessBugCheck$4423+0x12>
                {
                    m_workList = new KernelList< Tracker >();
 800740e:	e7fe      	b.n	800740e <Device_ProcessBugCheck$4423+0x12>
 8007410:	fffffe3c 	.word	0xfffffe3c
 8007414:	17ffa3cc 	.word	0x17ffa3cc

08007418 <Device_ProcessLog$4424>:
 8007418:	4770      	bx	lr

0800741a <Device_ProcessLog$4425>:
 800741a:	4770      	bx	lr

0800741c <Device_get_BootstrapStack$4431>:

        public virtual uint[] BootstrapStack
        {
            get
            {
                return s_bootstrapStack;
 800741c:	4802      	ldr	r0, [pc, #8]	; (8007428 <Device_get_BootstrapStack$4431+0xc>)
 800741e:	4903      	ldr	r1, [pc, #12]	; (800742c <Device_get_BootstrapStack$4431+0x10>)
 8007420:	4479      	add	r1, pc
 8007422:	4408      	add	r0, r1
 8007424:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8007426:	4770      	bx	lr
 8007428:	fffffe3c 	.word	0xfffffe3c
 800742c:	17ffa3b0 	.word	0x17ffa3b0

08007430 <Device_get_ManagedHeapSize$4433>:
 8007430:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007434:	4770      	bx	lr
 8007436:	46c0      	nop			; (mov r8, r8)

08007438 <SyncBlockTable_get_Lock$4506>:
                            }

                            if(idx >= 0)
                            {
                                break;
                            }
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	480a      	ldr	r0, [pc, #40]	; (8007468 <SyncBlockTable_get_Lock$4506+0x30>)
 800743e:	490b      	ldr	r1, [pc, #44]	; (800746c <SyncBlockTable_get_Lock$4506+0x34>)
 8007440:	4479      	add	r1, pc
 8007442:	4408      	add	r0, r1
 8007444:	6880      	ldr	r0, [r0, #8]
 8007446:	2800      	cmp	r0, #0
 8007448:	d104      	bne.n	8007454 <SyncBlockTable_get_Lock$4506+0x1c>
 800744a:	e7ff      	b.n	800744c <SyncBlockTable_get_Lock$4506+0x14>
                        }
                    }
 800744c:	f000 fc14 	bl	8007c78 <TypeSystemManager_AtomicAllocatorSlow$36990>
 8007450:	9001      	str	r0, [sp, #4]
 8007452:	e006      	b.n	8007462 <SyncBlockTable_get_Lock$4506+0x2a>
                }

                if(idx < 0)
 8007454:	4804      	ldr	r0, [pc, #16]	; (8007468 <SyncBlockTable_get_Lock$4506+0x30>)
 8007456:	4906      	ldr	r1, [pc, #24]	; (8007470 <SyncBlockTable_get_Lock$4506+0x38>)
 8007458:	4479      	add	r1, pc
 800745a:	4408      	add	r0, r1
 800745c:	6880      	ldr	r0, [r0, #8]
 800745e:	9001      	str	r0, [sp, #4]
 8007460:	e7ff      	b.n	8007462 <SyncBlockTable_get_Lock$4506+0x2a>
        public Synchronization.YieldLock Lock
        {
            get
            {
                return TypeSystemManager.AtomicAllocator( ref m_lock );
            }
 8007462:	9801      	ldr	r0, [sp, #4]
 8007464:	b002      	add	sp, #8
 8007466:	bd80      	pop	{r7, pc}
 8007468:	ffffeafc 	.word	0xffffeafc
 800746c:	17ffa390 	.word	0x17ffa390
 8007470:	17ffa378 	.word	0x17ffa378

08007474 <YieldLock_Acquire$4972>:
 8007474:	b580      	push	{r7, lr}
 8007476:	b086      	sub	sp, #24
 8007478:	460a      	mov	r2, r1
 800747a:	ab04      	add	r3, sp, #16
 800747c:	f04f 0c00 	mov.w	ip, #0
 8007480:	f8cd c010 	str.w	ip, [sp, #16]
        // Helper Methods
        //

        public void Acquire(ThreadImpl thisThread)
        {
            if(thisThread == null)
 8007484:	2900      	cmp	r1, #0
 8007486:	9303      	str	r3, [sp, #12]
 8007488:	9202      	str	r2, [sp, #8]
 800748a:	9001      	str	r0, [sp, #4]
 800748c:	d001      	beq.n	8007492 <YieldLock_Acquire$4972+0x1e>
 800748e:	e7ff      	b.n	8007490 <YieldLock_Acquire$4972+0x1c>
 8007490:	e000      	b.n	8007494 <YieldLock_Acquire$4972+0x20>
            {
                //
                // Special case for boot code path: all locks are transparent.
                //
                return;
 8007492:	e03e      	b.n	8007512 <YieldLock_Acquire$4972+0x9e>
 8007494:	2000      	movs	r0, #0
 8007496:	9005      	str	r0, [sp, #20]
                    if(m_ownerThread == thisThread)
                    {
                        m_nestingCount++;
                        return;
                    }

 8007498:	9000      	str	r0, [sp, #0]
 800749a:	f7fd f8b7 	bl	800460c <ProcessorARMv7M_DisableInterrupts$3259>
 800749e:	9900      	ldr	r1, [sp, #0]
 80074a0:	9105      	str	r1, [sp, #20]
 80074a2:	9005      	str	r0, [sp, #20]
 80074a4:	0e02      	lsrs	r2, r0, #24
 80074a6:	9b03      	ldr	r3, [sp, #12]
 80074a8:	70da      	strb	r2, [r3, #3]
 80074aa:	0c02      	lsrs	r2, r0, #16
 80074ac:	709a      	strb	r2, [r3, #2]
 80074ae:	0a02      	lsrs	r2, r0, #8
 80074b0:	705a      	strb	r2, [r3, #1]
 80074b2:	7018      	strb	r0, [r3, #0]

            while(true)
            {
                using(SmartHandles.InterruptState.Disable())
                {
                    if(m_ownerThread == null)
 80074b4:	9801      	ldr	r0, [sp, #4]
 80074b6:	6882      	ldr	r2, [r0, #8]
 80074b8:	2a00      	cmp	r2, #0
 80074ba:	d107      	bne.n	80074cc <YieldLock_Acquire$4972+0x58>
 80074bc:	e7ff      	b.n	80074be <YieldLock_Acquire$4972+0x4a>
 80074be:	9802      	ldr	r0, [sp, #8]
 80074c0:	9901      	ldr	r1, [sp, #4]
 80074c2:	6088      	str	r0, [r1, #8]
            if(thisThread == null)
            {
                //
                // Special case for boot code path: all locks are transparent.
                //
                return;
 80074c4:	9804      	ldr	r0, [sp, #16]
 80074c6:	f7fd f8c3 	bl	8004650 <ProcessorARMv7M_DisableInterruptsWithPriorityLevelHigherOrEqualTo$3266>
                    //bump priority to prevent priority inversion problems
                    if ((int)m_ownerThread.Priority < (int)thisThread.Priority)
                    {
                        m_ownerThread.Priority = thisThread.Priority;
                    }
                }
 80074ca:	e022      	b.n	8007512 <YieldLock_Acquire$4972+0x9e>
                    {
                        m_ownerThread = thisThread;
                        return;
                    }

                    if(m_ownerThread == thisThread)
 80074cc:	9801      	ldr	r0, [sp, #4]
 80074ce:	6881      	ldr	r1, [r0, #8]
 80074d0:	9a02      	ldr	r2, [sp, #8]
 80074d2:	4291      	cmp	r1, r2
 80074d4:	d108      	bne.n	80074e8 <YieldLock_Acquire$4972+0x74>
 80074d6:	e7ff      	b.n	80074d8 <YieldLock_Acquire$4972+0x64>
 80074d8:	9801      	ldr	r0, [sp, #4]
 80074da:	68c1      	ldr	r1, [r0, #12]
                    {
                        m_nestingCount++;
 80074dc:	3101      	adds	r1, #1
 80074de:	60c1      	str	r1, [r0, #12]
            if(thisThread == null)
            {
                //
                // Special case for boot code path: all locks are transparent.
                //
                return;
 80074e0:	9804      	ldr	r0, [sp, #16]
 80074e2:	f7fd f8b5 	bl	8004650 <ProcessorARMv7M_DisableInterruptsWithPriorityLevelHigherOrEqualTo$3266>
                    //bump priority to prevent priority inversion problems
                    if ((int)m_ownerThread.Priority < (int)thisThread.Priority)
                    {
                        m_ownerThread.Priority = thisThread.Priority;
                    }
                }
 80074e6:	e014      	b.n	8007512 <YieldLock_Acquire$4972+0x9e>
                        m_nestingCount++;
                        return;
                    }

                    //bump priority to prevent priority inversion problems
                    if ((int)m_ownerThread.Priority < (int)thisThread.Priority)
 80074e8:	9801      	ldr	r0, [sp, #4]
 80074ea:	6881      	ldr	r1, [r0, #8]
 80074ec:	6909      	ldr	r1, [r1, #16]
 80074ee:	9a02      	ldr	r2, [sp, #8]
 80074f0:	6913      	ldr	r3, [r2, #16]
 80074f2:	4299      	cmp	r1, r3
 80074f4:	da07      	bge.n	8007506 <YieldLock_Acquire$4972+0x92>
 80074f6:	e7ff      	b.n	80074f8 <YieldLock_Acquire$4972+0x84>
                    {
                        m_ownerThread.Priority = thisThread.Priority;
 80074f8:	9801      	ldr	r0, [sp, #4]
 80074fa:	6880      	ldr	r0, [r0, #8]
 80074fc:	9902      	ldr	r1, [sp, #8]
 80074fe:	6909      	ldr	r1, [r1, #16]
 8007500:	f7fc f9ea 	bl	80038d8 <Thread_set_Priority$4028>
                    }
 8007504:	e7ff      	b.n	8007506 <YieldLock_Acquire$4972+0x92>
            if(thisThread == null)
            {
                //
                // Special case for boot code path: all locks are transparent.
                //
                return;
 8007506:	9804      	ldr	r0, [sp, #16]
 8007508:	f7fd f8a2 	bl	8004650 <ProcessorARMv7M_DisableInterruptsWithPriorityLevelHigherOrEqualTo$3266>
                    {
                        m_ownerThread.Priority = thisThread.Priority;
                    }
                }

                thisThread.Yield();
 800750c:	f7fc fde8 	bl	80040e0 <Thread_Yield$4005>
            }
 8007510:	e7c0      	b.n	8007494 <YieldLock_Acquire$4972+0x20>
 8007512:	b006      	add	sp, #24
 8007514:	bd80      	pop	{r7, pc}
 8007516:	46c0      	nop			; (mov r8, r8)

08007518 <YieldLock_Release$4973>:
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	460a      	mov	r2, r1
        }

        public void Release(ThreadImpl thisThread)
        {
            if(thisThread == null)
 800751e:	2900      	cmp	r1, #0
 8007520:	9003      	str	r0, [sp, #12]
 8007522:	9202      	str	r2, [sp, #8]
 8007524:	d101      	bne.n	800752a <YieldLock_Release$4973+0x12>
 8007526:	e7ff      	b.n	8007528 <YieldLock_Release$4973+0x10>
            {
                //
                // Special case for boot code path: all locks are transparent.
                //
                return;
 8007528:	e025      	b.n	8007576 <YieldLock_Release$4973+0x5e>
            }

            if(m_ownerThread != thisThread)
 800752a:	9803      	ldr	r0, [sp, #12]
 800752c:	6881      	ldr	r1, [r0, #8]
 800752e:	9a02      	ldr	r2, [sp, #8]
 8007530:	4291      	cmp	r1, r2
 8007532:	d012      	beq.n	800755a <YieldLock_Release$4973+0x42>
 8007534:	e7ff      	b.n	8007536 <YieldLock_Release$4973+0x1e>
            {
#if EXCEPTION_STRINGS
                throw new Exception( "Releasing waitable object not owned by thread" );
#else
                throw new Exception();
 8007536:	e7ff      	b.n	8007538 <YieldLock_Release$4973+0x20>
 8007538:	4810      	ldr	r0, [pc, #64]	; (800757c <YieldLock_Release$4973+0x64>)
 800753a:	4911      	ldr	r1, [pc, #68]	; (8007580 <YieldLock_Release$4973+0x68>)
 800753c:	4479      	add	r1, pc
 800753e:	4408      	add	r0, r1
 8007540:	4a10      	ldr	r2, [pc, #64]	; (8007584 <YieldLock_Release$4973+0x6c>)
 8007542:	4411      	add	r1, r2
 8007544:	9001      	str	r0, [sp, #4]
 8007546:	f7f9 f93b 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800754a:	9000      	str	r0, [sp, #0]
 800754c:	f001 fefd 	bl	800934a <Exception_.ctor$7036>
 8007550:	9801      	ldr	r0, [sp, #4]
 8007552:	9900      	ldr	r1, [sp, #0]
 8007554:	f7f9 f98a 	bl	800086c <TypeSystemManager_Throw$4954>
 8007558:	e7ee      	b.n	8007538 <YieldLock_Release$4973+0x20>
 800755a:	9803      	ldr	r0, [sp, #12]
 800755c:	68c1      	ldr	r1, [r0, #12]
#endif
            }

            if(m_nestingCount > 0)
 800755e:	2901      	cmp	r1, #1
 8007560:	db05      	blt.n	800756e <YieldLock_Release$4973+0x56>
 8007562:	e7ff      	b.n	8007564 <YieldLock_Release$4973+0x4c>
 8007564:	9803      	ldr	r0, [sp, #12]
 8007566:	68c1      	ldr	r1, [r0, #12]
            {
                m_nestingCount--;
 8007568:	3901      	subs	r1, #1
 800756a:	60c1      	str	r1, [r0, #12]
                return;
 800756c:	e003      	b.n	8007576 <YieldLock_Release$4973+0x5e>
 800756e:	2000      	movs	r0, #0
 8007570:	9903      	ldr	r1, [sp, #12]
 8007572:	6088      	str	r0, [r1, #8]
            }

            m_ownerThread = null;
 8007574:	e7ff      	b.n	8007576 <YieldLock_Release$4973+0x5e>
 8007576:	b004      	add	sp, #16
 8007578:	bd80      	pop	{r7, pc}
 800757a:	46c0      	nop			; (mov r8, r8)
 800757c:	ffffea38 	.word	0xffffea38
 8007580:	17ffa294 	.word	0x17ffa294
 8007584:	e801252c 	.word	0xe801252c

08007588 <SyncBlockTable_AssignSyncBlockSlow$4500>:
 8007588:	b580      	push	{r7, lr}
 800758a:	b0a6      	sub	sp, #152	; 0x98
 800758c:	4601      	mov	r1, r0
 800758e:	2200      	movs	r2, #0
 8007590:	9221      	str	r2, [sp, #132]	; 0x84
 8007592:	9220      	str	r2, [sp, #128]	; 0x80
 8007594:	921f      	str	r2, [sp, #124]	; 0x7c
        }

        public static void Log(string format, int p1, int p2)
 8007596:	3008      	adds	r0, #8
 8007598:	9022      	str	r0, [sp, #136]	; 0x88
 800759a:	9223      	str	r2, [sp, #140]	; 0x8c
 800759c:	9822      	ldr	r0, [sp, #136]	; 0x88

        public static void Log(string format, int p1, int p2, int p3, int p4, int p5)
        {
            Device.Instance.ProcessLog(format, p1, p2, p3, p4, p5);
        }

 800759e:	3808      	subs	r0, #8
 80075a0:	9223      	str	r2, [sp, #140]	; 0x8c
 80075a2:	aa23      	add	r2, sp, #140	; 0x8c
 80075a4:	3a08      	subs	r2, #8
 80075a6:	901e      	str	r0, [sp, #120]	; 0x78
 80075a8:	4610      	mov	r0, r2
 80075aa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80075ac:	911d      	str	r1, [sp, #116]	; 0x74
 80075ae:	4611      	mov	r1, r2
 80075b0:	f7f9 f984 	bl	80008bc <UIntPtr_.ctor$2864>
        public static void Log(string format, int p1)
        {
            Device.Instance.ProcessLog(format, p1);
        }

        public static void Log(string format, int p1, int p2)
 80075b4:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80075b6:	a91f      	add	r1, sp, #124	; 0x7c
            Device.Instance.ProcessLog(format, p1, p2, p3, p4, p5);
        }

        //--//

        public static void AssertInterruptsOff()
 80075b8:	901c      	str	r0, [sp, #112]	; 0x70
 80075ba:	911b      	str	r1, [sp, #108]	; 0x6c
 80075bc:	f7ff ff3c 	bl	8007438 <SyncBlockTable_get_Lock$4506>
 80075c0:	4601      	mov	r1, r0
 80075c2:	901f      	str	r0, [sp, #124]	; 0x7c
 80075c4:	48a5      	ldr	r0, [pc, #660]	; (800785c <SyncBlockTable_AssignSyncBlockSlow$4500+0x2d4>)
 80075c6:	4aa6      	ldr	r2, [pc, #664]	; (8007860 <SyncBlockTable_AssignSyncBlockSlow$4500+0x2d8>)
 80075c8:	447a      	add	r2, pc
 80075ca:	4410      	add	r0, r2
 80075cc:	f8d0 00f8 	ldr.w	r0, [r0, #248]	; 0xf8
 80075d0:	9020      	str	r0, [sp, #128]	; 0x80

            NoMemory                ,
            NoMarkStack             ,
            NotAMemoryReference     ,
            HeapCorruptionDetected  ,
            
 80075d2:	2800      	cmp	r0, #0
 80075d4:	911a      	str	r1, [sp, #104]	; 0x68
 80075d6:	d007      	beq.n	80075e8 <SyncBlockTable_AssignSyncBlockSlow$4500+0x60>
 80075d8:	e7ff      	b.n	80075da <SyncBlockTable_AssignSyncBlockSlow$4500+0x52>
 80075da:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80075dc:	6841      	ldr	r1, [r0, #4]
 80075de:	6909      	ldr	r1, [r1, #16]
 80075e0:	aa24      	add	r2, sp, #144	; 0x90
 80075e2:	9124      	str	r1, [sp, #144]	; 0x90
 80075e4:	9219      	str	r2, [sp, #100]	; 0x64
 80075e6:	e004      	b.n	80075f2 <SyncBlockTable_AssignSyncBlockSlow$4500+0x6a>
 80075e8:	2002      	movs	r0, #2
 80075ea:	9024      	str	r0, [sp, #144]	; 0x90
 80075ec:	a824      	add	r0, sp, #144	; 0x90

            NoMemory                ,
            NoMarkStack             ,
            NotAMemoryReference     ,
            HeapCorruptionDetected  ,
            
 80075ee:	9019      	str	r0, [sp, #100]	; 0x64
 80075f0:	e7ff      	b.n	80075f2 <SyncBlockTable_AssignSyncBlockSlow$4500+0x6a>
 80075f2:	9819      	ldr	r0, [sp, #100]	; 0x64
 80075f4:	7801      	ldrb	r1, [r0, #0]
 80075f6:	7842      	ldrb	r2, [r0, #1]
 80075f8:	7883      	ldrb	r3, [r0, #2]
 80075fa:	78c0      	ldrb	r0, [r0, #3]
 80075fc:	ea43 2c00 	orr.w	ip, r3, r0, lsl #8
 8007600:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8007604:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8007608:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
 800760c:	f80c 1f08 	strb.w	r1, [ip, #8]!
 8007610:	f88c 0003 	strb.w	r0, [ip, #3]
 8007614:	f88c 3002 	strb.w	r3, [ip, #2]
 8007618:	f88c 2001 	strb.w	r2, [ip, #1]
            IllegalMode             ,
            IllegalConfiguration    ,
 800761c:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 8007620:	981a      	ldr	r0, [sp, #104]	; 0x68
 8007622:	f7ff ff27 	bl	8007474 <YieldLock_Acquire$4972>
 8007626:	981c      	ldr	r0, [sp, #112]	; 0x70
 8007628:	6801      	ldr	r1, [r0, #0]
 800762a:	f401 7140 	and.w	r1, r1, #768	; 0x300
 800762e:	2202      	movs	r2, #2
        public static void AssertInterruptsOff()
        {
            Assert( Processor.Instance.AreInterruptsDisabled() == true, BugCheck.StopCode.InterruptsNotDisabled );
        }

        public static void AssertInterruptsOn()
 8007630:	ebb2 2f11 	cmp.w	r2, r1, lsr #8
 8007634:	d111      	bne.n	800765a <SyncBlockTable_AssignSyncBlockSlow$4500+0xd2>
 8007636:	e7ff      	b.n	8007638 <SyncBlockTable_AssignSyncBlockSlow$4500+0xb0>
 8007638:	981c      	ldr	r0, [sp, #112]	; 0x70
 800763a:	6801      	ldr	r1, [r0, #0]
 800763c:	0a89      	lsrs	r1, r1, #10
 800763e:	aa25      	add	r2, sp, #148	; 0x94
 8007640:	9125      	str	r1, [sp, #148]	; 0x94
            CtxSwtchFailed          ,
            StackCorruptionDetected ,
            InvalidSupervisorCall   ,
            InvalidOperation        ,
            Impossible              ,
            Fault_Vectors           ,
 8007642:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8007644:	6808      	ldr	r0, [r1, #0]
 8007646:	6849      	ldr	r1, [r1, #4]
 8007648:	9218      	str	r2, [sp, #96]	; 0x60
 800764a:	f7ff ff65 	bl	8007518 <YieldLock_Release$4973>
            Fault_Unknown           ,
        }

        //
 800764e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8007650:	6841      	ldr	r1, [r0, #4]
 8007652:	2900      	cmp	r1, #0
 8007654:	f040 80f0 	bne.w	8007838 <SyncBlockTable_AssignSyncBlockSlow$4500+0x2b0>
 8007658:	e0f5      	b.n	8007846 <SyncBlockTable_AssignSyncBlockSlow$4500+0x2be>
 800765a:	981c      	ldr	r0, [sp, #112]	; 0x70
 800765c:	7801      	ldrb	r1, [r0, #0]
 800765e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8007662:	f04f 32ff 	mov.w	r2, #4294967295
            Assert( Processor.Instance.AreInterruptsDisabled() == false, BugCheck.StopCode.InterruptsNotEnabled );
        }

        //--//

        static readonly System.Text.StringBuilder s_sb = new System.Text.StringBuilder();
 8007666:	2904      	cmp	r1, #4
 8007668:	9217      	str	r2, [sp, #92]	; 0x5c
 800766a:	d10c      	bne.n	8007686 <SyncBlockTable_AssignSyncBlockSlow$4500+0xfe>
 800766c:	e7ff      	b.n	800766e <SyncBlockTable_AssignSyncBlockSlow$4500+0xe6>

        [NoInline]
 800766e:	487d      	ldr	r0, [pc, #500]	; (8007864 <SyncBlockTable_AssignSyncBlockSlow$4500+0x2dc>)
 8007670:	497d      	ldr	r1, [pc, #500]	; (8007868 <SyncBlockTable_AssignSyncBlockSlow$4500+0x2e0>)
 8007672:	4479      	add	r1, pc
 8007674:	4408      	add	r0, r1
 8007676:	68c0      	ldr	r0, [r0, #12]
 8007678:	f04f 31ff 	mov.w	r1, #4294967295
 800767c:	2800      	cmp	r0, #0
 800767e:	9116      	str	r1, [sp, #88]	; 0x58
 8007680:	f040 8085 	bne.w	800778e <SyncBlockTable_AssignSyncBlockSlow$4500+0x206>
 8007684:	e08f      	b.n	80077a6 <SyncBlockTable_AssignSyncBlockSlow$4500+0x21e>
 8007686:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007688:	f1b0 3fff 	cmp.w	r0, #4294967295
 800768c:	9015      	str	r0, [sp, #84]	; 0x54
 800768e:	dc01      	bgt.n	8007694 <SyncBlockTable_AssignSyncBlockSlow$4500+0x10c>
 8007690:	e7ff      	b.n	8007692 <SyncBlockTable_AssignSyncBlockSlow$4500+0x10a>
 8007692:	e062      	b.n	800775a <SyncBlockTable_AssignSyncBlockSlow$4500+0x1d2>
 8007694:	9815      	ldr	r0, [sp, #84]	; 0x54
 8007696:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007698:	680a      	ldr	r2, [r1, #0]
 800769a:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800769e:	0a13      	lsrs	r3, r2, #8
 80076a0:	f04f 0c00 	mov.w	ip, #0
 80076a4:	ebbc 2f12 	cmp.w	ip, r2, lsr #8
 80076a8:	9014      	str	r0, [sp, #80]	; 0x50
 80076aa:	9313      	str	r3, [sp, #76]	; 0x4c
 80076ac:	d008      	beq.n	80076c0 <SyncBlockTable_AssignSyncBlockSlow$4500+0x138>
 80076ae:	e7ff      	b.n	80076b0 <SyncBlockTable_AssignSyncBlockSlow$4500+0x128>
 80076b0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80076b2:	2801      	cmp	r0, #1
 80076b4:	d00f      	beq.n	80076d6 <SyncBlockTable_AssignSyncBlockSlow$4500+0x14e>
 80076b6:	e7ff      	b.n	80076b8 <SyncBlockTable_AssignSyncBlockSlow$4500+0x130>
 80076b8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80076ba:	2802      	cmp	r0, #2
 80076bc:	d012      	beq.n	80076e4 <SyncBlockTable_AssignSyncBlockSlow$4500+0x15c>
 80076be:	e018      	b.n	80076f2 <SyncBlockTable_AssignSyncBlockSlow$4500+0x16a>
 80076c0:	981c      	ldr	r0, [sp, #112]	; 0x70
 80076c2:	7801      	ldrb	r1, [r0, #0]
 80076c4:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 80076c8:	2200      	movs	r2, #0
 80076ca:	2904      	cmp	r1, #4
 80076cc:	bf08      	it	eq
 80076ce:	2201      	moveq	r2, #1
 80076d0:	2a00      	cmp	r2, #0
 80076d2:	d015      	beq.n	8007700 <SyncBlockTable_AssignSyncBlockSlow$4500+0x178>
 80076d4:	e01d      	b.n	8007712 <SyncBlockTable_AssignSyncBlockSlow$4500+0x18a>
 80076d6:	981c      	ldr	r0, [sp, #112]	; 0x70
 80076d8:	6801      	ldr	r1, [r0, #0]
 80076da:	0a89      	lsrs	r1, r1, #10
 80076dc:	9814      	ldr	r0, [sp, #80]	; 0x50
 80076de:	f000 f961 	bl	80079a4 <SyncBlockTable_SetHashCode$4502>
 80076e2:	e7ed      	b.n	80076c0 <SyncBlockTable_AssignSyncBlockSlow$4500+0x138>
 80076e4:	4863      	ldr	r0, [pc, #396]	; (8007874 <SyncBlockTable_AssignSyncBlockSlow$4500+0x2ec>)
 80076e6:	4964      	ldr	r1, [pc, #400]	; (8007878 <SyncBlockTable_AssignSyncBlockSlow$4500+0x2f0>)
 80076e8:	4479      	add	r1, pc
 80076ea:	5840      	ldr	r0, [r0, r1]
 80076ec:	f7f8 fe0a 	bl	8000304 <BugCheck_Raise$4648>
 80076f0:	e7e6      	b.n	80076c0 <SyncBlockTable_AssignSyncBlockSlow$4500+0x138>
 80076f2:	4862      	ldr	r0, [pc, #392]	; (800787c <SyncBlockTable_AssignSyncBlockSlow$4500+0x2f4>)
 80076f4:	4962      	ldr	r1, [pc, #392]	; (8007880 <SyncBlockTable_AssignSyncBlockSlow$4500+0x2f8>)
 80076f6:	4479      	add	r1, pc
 80076f8:	5840      	ldr	r0, [r0, r1]
 80076fa:	f7f8 fe03 	bl	8000304 <BugCheck_Raise$4648>
 80076fe:	e7df      	b.n	80076c0 <SyncBlockTable_AssignSyncBlockSlow$4500+0x138>
 8007700:	4860      	ldr	r0, [pc, #384]	; (8007884 <SyncBlockTable_AssignSyncBlockSlow$4500+0x2fc>)
 8007702:	4961      	ldr	r1, [pc, #388]	; (8007888 <SyncBlockTable_AssignSyncBlockSlow$4500+0x300>)
 8007704:	4479      	add	r1, pc
 8007706:	5841      	ldr	r1, [r0, r1]
 8007708:	981c      	ldr	r0, [sp, #112]	; 0x70
 800770a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800770c:	f7fd f8e6 	bl	80048dc <ObjectHeader_UpdateExtension$3131>
 8007710:	e7ff      	b.n	8007712 <SyncBlockTable_AssignSyncBlockSlow$4500+0x18a>
 8007712:	a825      	add	r0, sp, #148	; 0x94
 8007714:	9914      	ldr	r1, [sp, #80]	; 0x50
 8007716:	9125      	str	r1, [sp, #148]	; 0x94
            CtxSwtchFailed          ,
            StackCorruptionDetected ,
            InvalidSupervisorCall   ,
            InvalidOperation        ,
            Impossible              ,
            Fault_Vectors           ,
 8007718:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800771a:	6813      	ldr	r3, [r2, #0]
 800771c:	6851      	ldr	r1, [r2, #4]
 800771e:	9012      	str	r0, [sp, #72]	; 0x48
 8007720:	4618      	mov	r0, r3
 8007722:	f7ff fef9 	bl	8007518 <YieldLock_Release$4973>
            Fault_Unknown           ,
        }

        //
 8007726:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8007728:	6841      	ldr	r1, [r0, #4]
 800772a:	2900      	cmp	r1, #0
 800772c:	d007      	beq.n	800773e <SyncBlockTable_AssignSyncBlockSlow$4500+0x1b6>
 800772e:	e7ff      	b.n	8007730 <SyncBlockTable_AssignSyncBlockSlow$4500+0x1a8>
 8007730:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8007732:	6841      	ldr	r1, [r0, #4]
 8007734:	6882      	ldr	r2, [r0, #8]
 8007736:	6909      	ldr	r1, [r1, #16]
 8007738:	4291      	cmp	r1, r2
 800773a:	d107      	bne.n	800774c <SyncBlockTable_AssignSyncBlockSlow$4500+0x1c4>
 800773c:	e7ff      	b.n	800773e <SyncBlockTable_AssignSyncBlockSlow$4500+0x1b6>
 800773e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007740:	9011      	str	r0, [sp, #68]	; 0x44
 8007742:	e7ff      	b.n	8007744 <SyncBlockTable_AssignSyncBlockSlow$4500+0x1bc>
 8007744:	9811      	ldr	r0, [sp, #68]	; 0x44
 8007746:	6800      	ldr	r0, [r0, #0]
 8007748:	b026      	add	sp, #152	; 0x98
 800774a:	bd80      	pop	{r7, pc}
            Fault_Unknown           ,
        }

        //
        // Helper Methods
        //
 800774c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800774e:	6840      	ldr	r0, [r0, #4]
 8007750:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8007752:	6889      	ldr	r1, [r1, #8]
 8007754:	f7fc f8c0 	bl	80038d8 <Thread_set_Priority$4028>

 8007758:	e7f1      	b.n	800773e <SyncBlockTable_AssignSyncBlockSlow$4500+0x1b6>
 800775a:	f000 f943 	bl	80079e4 <SyncBlock_ExtractFromFreeList$4518>
 800775e:	4601      	mov	r1, r0
 8007760:	2800      	cmp	r0, #0
 8007762:	9110      	str	r1, [sp, #64]	; 0x40
 8007764:	d010      	beq.n	8007788 <SyncBlockTable_AssignSyncBlockSlow$4500+0x200>
 8007766:	e7ff      	b.n	8007768 <SyncBlockTable_AssignSyncBlockSlow$4500+0x1e0>
 8007768:	9810      	ldr	r0, [sp, #64]	; 0x40
 800776a:	493e      	ldr	r1, [pc, #248]	; (8007864 <SyncBlockTable_AssignSyncBlockSlow$4500+0x2dc>)
 800776c:	4a40      	ldr	r2, [pc, #256]	; (8007870 <SyncBlockTable_AssignSyncBlockSlow$4500+0x2e8>)
 800776e:	447a      	add	r2, pc
 8007770:	4411      	add	r1, r2
 8007772:	694a      	ldr	r2, [r1, #20]
 8007774:	1c53      	adds	r3, r2, #1
 8007776:	614b      	str	r3, [r1, #20]
 8007778:	900f      	str	r0, [sp, #60]	; 0x3c
 800777a:	991d      	ldr	r1, [sp, #116]	; 0x74
 800777c:	f000 f9d0 	bl	8007b20 <SyncBlock_Prepare$4516>
 8007780:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007782:	6901      	ldr	r1, [r0, #16]
 8007784:	9115      	str	r1, [sp, #84]	; 0x54
 8007786:	e785      	b.n	8007694 <SyncBlockTable_AssignSyncBlockSlow$4500+0x10c>
 8007788:	f000 f956 	bl	8007a38 <SyncBlockTable_ExpandClusters$4504>
 800778c:	e7e5      	b.n	800775a <SyncBlockTable_AssignSyncBlockSlow$4500+0x1d2>

        static readonly System.Text.StringBuilder s_sb = new System.Text.StringBuilder();

        [NoInline]
        [TS.WellKnownMethod( "BugCheck_WriteLine" )]
        public static void WriteLine( string text )
 800778e:	4835      	ldr	r0, [pc, #212]	; (8007864 <SyncBlockTable_AssignSyncBlockSlow$4500+0x2dc>)
 8007790:	4936      	ldr	r1, [pc, #216]	; (800786c <SyncBlockTable_AssignSyncBlockSlow$4500+0x2e4>)
 8007792:	4479      	add	r1, pc
 8007794:	4408      	add	r0, r1
 8007796:	68c0      	ldr	r0, [r0, #12]
 8007798:	f04f 31ff 	mov.w	r1, #4294967295
 800779c:	2200      	movs	r2, #0
 800779e:	900e      	str	r0, [sp, #56]	; 0x38
 80077a0:	920d      	str	r2, [sp, #52]	; 0x34
 80077a2:	910c      	str	r1, [sp, #48]	; 0x30
 80077a4:	e002      	b.n	80077ac <SyncBlockTable_AssignSyncBlockSlow$4500+0x224>
 80077a6:	9816      	ldr	r0, [sp, #88]	; 0x58
 80077a8:	9017      	str	r0, [sp, #92]	; 0x5c
 80077aa:	e76c      	b.n	8007686 <SyncBlockTable_AssignSyncBlockSlow$4500+0xfe>
 80077ac:	980c      	ldr	r0, [sp, #48]	; 0x30
 80077ae:	990d      	ldr	r1, [sp, #52]	; 0x34
 80077b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80077b2:	6893      	ldr	r3, [r2, #8]

        static readonly System.Text.StringBuilder s_sb = new System.Text.StringBuilder();

        [NoInline]
        [TS.WellKnownMethod( "BugCheck_WriteLine" )]
        public static void WriteLine( string text )
 80077b4:	4299      	cmp	r1, r3
 80077b6:	4603      	mov	r3, r0
 80077b8:	900b      	str	r0, [sp, #44]	; 0x2c
 80077ba:	910a      	str	r1, [sp, #40]	; 0x28
 80077bc:	9309      	str	r3, [sp, #36]	; 0x24
 80077be:	da09      	bge.n	80077d4 <SyncBlockTable_AssignSyncBlockSlow$4500+0x24c>
 80077c0:	e7ff      	b.n	80077c2 <SyncBlockTable_AssignSyncBlockSlow$4500+0x23a>
 80077c2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80077c4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80077c6:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 80077ca:	68d2      	ldr	r2, [r2, #12]
 80077cc:	2300      	movs	r3, #0
        {
            s_sb.Append( text );
 80077ce:	9208      	str	r2, [sp, #32]
 80077d0:	9307      	str	r3, [sp, #28]
 80077d2:	e005      	b.n	80077e0 <SyncBlockTable_AssignSyncBlockSlow$4500+0x258>
 80077d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077d6:	9006      	str	r0, [sp, #24]
 80077d8:	e7ff      	b.n	80077da <SyncBlockTable_AssignSyncBlockSlow$4500+0x252>
 80077da:	9806      	ldr	r0, [sp, #24]
 80077dc:	9016      	str	r0, [sp, #88]	; 0x58
 80077de:	e7e2      	b.n	80077a6 <SyncBlockTable_AssignSyncBlockSlow$4500+0x21e>
 80077e0:	9807      	ldr	r0, [sp, #28]

        [NoInline]
        [TS.WellKnownMethod( "BugCheck_WriteLine" )]
        public static void WriteLine( string text )
        {
            s_sb.Append( text );
 80077e2:	281f      	cmp	r0, #31
 80077e4:	9005      	str	r0, [sp, #20]
 80077e6:	dc0c      	bgt.n	8007802 <SyncBlockTable_AssignSyncBlockSlow$4500+0x27a>
 80077e8:	e7ff      	b.n	80077ea <SyncBlockTable_AssignSyncBlockSlow$4500+0x262>
            s_sb.AppendLine();
        }
 80077ea:	9808      	ldr	r0, [sp, #32]
 80077ec:	9905      	ldr	r1, [sp, #20]
 80077ee:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 80077f2:	68d2      	ldr	r2, [r2, #12]
 80077f4:	6893      	ldr	r3, [r2, #8]
        {
            s_sb.Append( text );
            s_sb.AppendLine();
        }

        public static void WriteLineFormat(        string   fmt   ,
 80077f6:	f8dd c074 	ldr.w	ip, [sp, #116]	; 0x74
 80077fa:	4563      	cmp	r3, ip
 80077fc:	9204      	str	r2, [sp, #16]
 80077fe:	d013      	beq.n	8007828 <SyncBlockTable_AssignSyncBlockSlow$4500+0x2a0>
 8007800:	e016      	b.n	8007830 <SyncBlockTable_AssignSyncBlockSlow$4500+0x2a8>
 8007802:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007804:	9003      	str	r0, [sp, #12]
 8007806:	e7ff      	b.n	8007808 <SyncBlockTable_AssignSyncBlockSlow$4500+0x280>
 8007808:	9803      	ldr	r0, [sp, #12]
        {
            WriteLine( string.Format( fmt, parms ) );
        }
    }
}
 800780a:	2800      	cmp	r0, #0
 800780c:	4601      	mov	r1, r0
 800780e:	9002      	str	r0, [sp, #8]
 8007810:	9101      	str	r1, [sp, #4]
 8007812:	db03      	blt.n	800781c <SyncBlockTable_AssignSyncBlockSlow$4500+0x294>
 8007814:	e7ff      	b.n	8007816 <SyncBlockTable_AssignSyncBlockSlow$4500+0x28e>
 8007816:	9801      	ldr	r0, [sp, #4]
 8007818:	9006      	str	r0, [sp, #24]
 800781a:	e7de      	b.n	80077da <SyncBlockTable_AssignSyncBlockSlow$4500+0x252>
 800781c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800781e:	1c41      	adds	r1, r0, #1
 8007820:	9a02      	ldr	r2, [sp, #8]
 8007822:	910d      	str	r1, [sp, #52]	; 0x34
 8007824:	920c      	str	r2, [sp, #48]	; 0x30
 8007826:	e7c1      	b.n	80077ac <SyncBlockTable_AssignSyncBlockSlow$4500+0x224>
 8007828:	9804      	ldr	r0, [sp, #16]
 800782a:	6900      	ldr	r0, [r0, #16]
        }

        public static void WriteLineFormat(        string   fmt   ,
                                            params object[] parms )
        {
            WriteLine( string.Format( fmt, parms ) );
 800782c:	9003      	str	r0, [sp, #12]
 800782e:	e7eb      	b.n	8007808 <SyncBlockTable_AssignSyncBlockSlow$4500+0x280>

        [NoInline]
        [TS.WellKnownMethod( "BugCheck_WriteLine" )]
        public static void WriteLine( string text )
        {
            s_sb.Append( text );
 8007830:	9805      	ldr	r0, [sp, #20]
 8007832:	1c41      	adds	r1, r0, #1
 8007834:	9107      	str	r1, [sp, #28]
 8007836:	e7d3      	b.n	80077e0 <SyncBlockTable_AssignSyncBlockSlow$4500+0x258>
            Impossible              ,
            Fault_Vectors           ,
            Fault_Unknown           ,
        }

        //
 8007838:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800783a:	6841      	ldr	r1, [r0, #4]
 800783c:	6882      	ldr	r2, [r0, #8]
 800783e:	6909      	ldr	r1, [r1, #16]
 8007840:	4291      	cmp	r1, r2
 8007842:	d103      	bne.n	800784c <SyncBlockTable_AssignSyncBlockSlow$4500+0x2c4>
 8007844:	e7ff      	b.n	8007846 <SyncBlockTable_AssignSyncBlockSlow$4500+0x2be>
 8007846:	9818      	ldr	r0, [sp, #96]	; 0x60
 8007848:	9011      	str	r0, [sp, #68]	; 0x44
 800784a:	e77b      	b.n	8007744 <SyncBlockTable_AssignSyncBlockSlow$4500+0x1bc>
            Fault_Unknown           ,
        }

        //
        // Helper Methods
        //
 800784c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800784e:	6840      	ldr	r0, [r0, #4]
 8007850:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8007852:	6889      	ldr	r1, [r1, #8]
 8007854:	f7fc f840 	bl	80038d8 <Thread_set_Priority$4028>

 8007858:	e7f5      	b.n	8007846 <SyncBlockTable_AssignSyncBlockSlow$4500+0x2be>
 800785a:	46c0      	nop			; (mov r8, r8)
 800785c:	fffffe3c 	.word	0xfffffe3c
 8007860:	17ffa208 	.word	0x17ffa208
 8007864:	ffffeafc 	.word	0xffffeafc
 8007868:	17ffa15e 	.word	0x17ffa15e
 800786c:	17ffa03e 	.word	0x17ffa03e
 8007870:	17ffa062 	.word	0x17ffa062
 8007874:	e80252d8 	.word	0xe80252d8
 8007878:	17ffa0e8 	.word	0x17ffa0e8
 800787c:	e80252d0 	.word	0xe80252d0
 8007880:	17ffa0da 	.word	0x17ffa0da
 8007884:	e80252d4 	.word	0xe80252d4
 8007888:	17ffa0cc 	.word	0x17ffa0cc

0800788c <SyncBlockTable_GetHashCode$4501>:
 800788c:	b081      	sub	sp, #4
 800788e:	4601      	mov	r1, r0
            catch
            {
            }

            m_state |= ThreadState.StopRequested;

 8007890:	1142      	asrs	r2, r0, #5
            ThreadManager.Instance.RemoveThread( this );
 8007892:	f000 001f 	and.w	r0, r0, #31
        }

 8007896:	4b08      	ldr	r3, [pc, #32]	; (80078b8 <SyncBlockTable_GetHashCode$4501+0x2c>)
 8007898:	f8df c020 	ldr.w	ip, [pc, #32]	; 80078bc <SyncBlockTable_GetHashCode$4501+0x30>
 800789c:	44fc      	add	ip, pc
 800789e:	4463      	add	r3, ip
 80078a0:	68db      	ldr	r3, [r3, #12]
 80078a2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80078a6:	68d2      	ldr	r2, [r2, #12]
 80078a8:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 80078ac:	68c0      	ldr	r0, [r0, #12]
 80078ae:	6940      	ldr	r0, [r0, #20]
 80078b0:	9100      	str	r1, [sp, #0]
 80078b2:	b001      	add	sp, #4
 80078b4:	4770      	bx	lr
 80078b6:	46c0      	nop			; (mov r8, r8)
 80078b8:	ffffeafc 	.word	0xffffeafc
 80078bc:	17ff9f34 	.word	0x17ff9f34

080078c0 <GC_KeepAlive$3788>:
 80078c0:	4770      	bx	lr
 80078c2:	46c0      	nop			; (mov r8, r8)

080078c4 <SyncBlockTable_GetLock$4498>:
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b086      	sub	sp, #24
 80078c8:	4601      	mov	r1, r0
 80078ca:	2800      	cmp	r0, #0
 80078cc:	bf18      	it	ne
 80078ce:	2001      	movne	r0, #1
                            }
                        }
                    }
                    break;
            }

 80078d0:	2800      	cmp	r0, #0
 80078d2:	9103      	str	r1, [sp, #12]
 80078d4:	d107      	bne.n	80078e6 <SyncBlockTable_GetLock$4498+0x22>
 80078d6:	e7ff      	b.n	80078d8 <SyncBlockTable_GetLock$4498+0x14>
 80078d8:	4820      	ldr	r0, [pc, #128]	; (800795c <SyncBlockTable_GetLock$4498+0x98>)
 80078da:	4921      	ldr	r1, [pc, #132]	; (8007960 <SyncBlockTable_GetLock$4498+0x9c>)
 80078dc:	4479      	add	r1, pc
 80078de:	5840      	ldr	r0, [r0, r1]
            //--//

 80078e0:	f7f8 fd10 	bl	8000304 <BugCheck_Raise$4648>
            int idx = AssignSyncBlock( target );
 80078e4:	e7ff      	b.n	80078e6 <SyncBlockTable_GetLock$4498+0x22>
 80078e6:	9803      	ldr	r0, [sp, #12]
 80078e8:	2800      	cmp	r0, #0
 80078ea:	bf18      	it	ne
 80078ec:	2001      	movne	r0, #1
                            }
                        }
                    }
                    break;
            }

 80078ee:	2800      	cmp	r0, #0
 80078f0:	d107      	bne.n	8007902 <SyncBlockTable_GetLock$4498+0x3e>
 80078f2:	e7ff      	b.n	80078f4 <SyncBlockTable_GetLock$4498+0x30>
 80078f4:	481b      	ldr	r0, [pc, #108]	; (8007964 <SyncBlockTable_GetLock$4498+0xa0>)
 80078f6:	491c      	ldr	r1, [pc, #112]	; (8007968 <SyncBlockTable_GetLock$4498+0xa4>)
 80078f8:	4479      	add	r1, pc
 80078fa:	5840      	ldr	r0, [r0, r1]
            //--//

 80078fc:	f7f8 fd02 	bl	8000304 <BugCheck_Raise$4648>
            int idx = AssignSyncBlock( target );
 8007900:	e7ff      	b.n	8007902 <SyncBlockTable_GetLock$4498+0x3e>

            GC.KeepAlive( target );

            return res;
        }

 8007902:	9803      	ldr	r0, [sp, #12]
 8007904:	f100 0108 	add.w	r1, r0, #8
 8007908:	9104      	str	r1, [sp, #16]
 800790a:	2100      	movs	r1, #0
 800790c:	9105      	str	r1, [sp, #20]
                        var sb = SyncBlock.ExtractFromFreeList();
                        if(sb != null)
                        {
                            sb.Prepare( obj, m_uniqueHashCode++ );

                            idx = sb.Index;
 800790e:	9a04      	ldr	r2, [sp, #16]

            return Instance.AssignSyncBlockSlow( obj );
        }

        private int AssignSyncBlockSlow( object obj )
        {
 8007910:	3a08      	subs	r2, #8
 8007912:	9105      	str	r1, [sp, #20]
 8007914:	a905      	add	r1, sp, #20
 8007916:	f1a1 0008 	sub.w	r0, r1, #8
 800791a:	4611      	mov	r1, r2
 800791c:	f7f8 ffce 	bl	80008bc <UIntPtr_.ctor$2864>

            GC.KeepAlive( target );

            return res;
        }

 8007920:	9805      	ldr	r0, [sp, #20]
        //

        public static extern SyncBlockTable Instance
        {
            [SingletonFactory()]
            [MethodImpl( MethodImplOptions.InternalCall )]
 8007922:	6801      	ldr	r1, [r0, #0]
 8007924:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8007928:	2202      	movs	r2, #2
        {
            BugCheck.Assert(null != obj, BugCheck.StopCode.SyncBlockCorruption);

            ObjectHeader oh = ObjectHeader.Unpack( obj );

            if(oh.ExtensionKind == ObjectHeader.ExtensionKinds.SyncBlock)
 800792a:	ebb2 2f11 	cmp.w	r2, r1, lsr #8
 800792e:	9002      	str	r0, [sp, #8]
 8007930:	d105      	bne.n	800793e <SyncBlockTable_GetLock$4498+0x7a>
 8007932:	e7ff      	b.n	8007934 <SyncBlockTable_GetLock$4498+0x70>
 8007934:	9802      	ldr	r0, [sp, #8]
 8007936:	6801      	ldr	r1, [r0, #0]
 8007938:	0a89      	lsrs	r1, r1, #10

            ObjectHeader oh = ObjectHeader.Unpack( obj );

            if(oh.ExtensionKind == ObjectHeader.ExtensionKinds.SyncBlock)
            {
                return oh.Payload;
 800793a:	9101      	str	r1, [sp, #4]
 800793c:	e004      	b.n	8007948 <SyncBlockTable_GetLock$4498+0x84>
            }

            return Instance.AssignSyncBlockSlow( obj );
 800793e:	9803      	ldr	r0, [sp, #12]
 8007940:	f7ff fe22 	bl	8007588 <SyncBlockTable_AssignSyncBlockSlow$4500>
 8007944:	9001      	str	r0, [sp, #4]
 8007946:	e7ff      	b.n	8007948 <SyncBlockTable_GetLock$4498+0x84>
 8007948:	9801      	ldr	r0, [sp, #4]
        {
            BugCheck.Assert(null != target, BugCheck.StopCode.SyncBlockCorruption );

            int idx = AssignSyncBlock( target );

            Synchronization.CriticalSection res = Instance.GetLock( idx );
 800794a:	f000 f80f 	bl	800796c <SyncBlockTable_GetLock$4503>

            GC.KeepAlive( target );
 800794e:	9000      	str	r0, [sp, #0]
 8007950:	f7ff ffb6 	bl	80078c0 <GC_KeepAlive$3788>
 8007954:	9800      	ldr	r0, [sp, #0]
 8007956:	b006      	add	sp, #24
 8007958:	bd80      	pop	{r7, pc}
 800795a:	46c0      	nop			; (mov r8, r8)
 800795c:	e80252cc 	.word	0xe80252cc
 8007960:	17ff9ef4 	.word	0x17ff9ef4
 8007964:	e80252c8 	.word	0xe80252c8
 8007968:	17ff9ed8 	.word	0x17ff9ed8

0800796c <SyncBlockTable_GetLock$4503>:
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	4601      	mov	r1, r0
            m_clusters[clusterIndex][blockIndex].HashCode = hashCode;
        }

        public Synchronization.CriticalSection GetLock( int idx )
        {
            int clusterIndex = idx / BlocksInACluster;
 8007972:	1142      	asrs	r2, r0, #5
            int blockIndex   = idx % BlocksInACluster;
 8007974:	f000 001f 	and.w	r0, r0, #31

            return m_clusters[clusterIndex][blockIndex].Lock;
 8007978:	4b08      	ldr	r3, [pc, #32]	; (800799c <SyncBlockTable_GetLock$4503+0x30>)
 800797a:	f8df c024 	ldr.w	ip, [pc, #36]	; 80079a0 <SyncBlockTable_GetLock$4503+0x34>
 800797e:	44fc      	add	ip, pc
 8007980:	4463      	add	r3, ip
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8007988:	68d2      	ldr	r2, [r2, #12]
 800798a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800798e:	68c0      	ldr	r0, [r0, #12]
 8007990:	9101      	str	r1, [sp, #4]
 8007992:	f000 f8db 	bl	8007b4c <SyncBlock_get_Lock$4519>
 8007996:	b002      	add	sp, #8
 8007998:	bd80      	pop	{r7, pc}
 800799a:	46c0      	nop			; (mov r8, r8)
 800799c:	ffffeafc 	.word	0xffffeafc
 80079a0:	17ff9e52 	.word	0x17ff9e52

080079a4 <SyncBlockTable_SetHashCode$4502>:
 80079a4:	b510      	push	{r4, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	460a      	mov	r2, r1
 80079aa:	4603      	mov	r3, r0
        }

        public void SetHashCode( int idx      ,
                                 int hashCode )
        {
            int clusterIndex = idx / BlocksInACluster;
 80079ac:	ea4f 1c60 	mov.w	ip, r0, asr #5
            int blockIndex   = idx % BlocksInACluster;
 80079b0:	f000 001f 	and.w	r0, r0, #31

            m_clusters[clusterIndex][blockIndex].HashCode = hashCode;
 80079b4:	f8df e024 	ldr.w	lr, [pc, #36]	; 80079dc <SyncBlockTable_SetHashCode$4502+0x38>
 80079b8:	4c09      	ldr	r4, [pc, #36]	; (80079e0 <SyncBlockTable_SetHashCode$4502+0x3c>)
 80079ba:	447c      	add	r4, pc
 80079bc:	44a6      	add	lr, r4
 80079be:	f8de e00c 	ldr.w	lr, [lr, #12]
 80079c2:	eb0e 0c8c 	add.w	ip, lr, ip, lsl #2
 80079c6:	f8dc c00c 	ldr.w	ip, [ip, #12]
 80079ca:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
 80079ce:	68c0      	ldr	r0, [r0, #12]
 80079d0:	9201      	str	r2, [sp, #4]
 80079d2:	9300      	str	r3, [sp, #0]
 80079d4:	f000 f8b2 	bl	8007b3c <SyncBlock_set_HashCode$4522>
 80079d8:	b002      	add	sp, #8
 80079da:	bd10      	pop	{r4, pc}
 80079dc:	ffffeafc 	.word	0xffffeafc
 80079e0:	17ff9e16 	.word	0x17ff9e16

080079e4 <SyncBlock_ExtractFromFreeList$4518>:
            }
        }

        internal static SyncBlock ExtractFromFreeList()
        {
            var table = SyncBlockTable.Instance;
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	e7ff      	b.n	80079ea <SyncBlock_ExtractFromFreeList$4518+0x6>

            while(true)
            {
                var first = table.m_freeList;
 80079ea:	4811      	ldr	r0, [pc, #68]	; (8007a30 <SyncBlock_ExtractFromFreeList$4518+0x4c>)
 80079ec:	4911      	ldr	r1, [pc, #68]	; (8007a34 <SyncBlock_ExtractFromFreeList$4518+0x50>)
 80079ee:	4479      	add	r1, pc
 80079f0:	4408      	add	r0, r1
 80079f2:	6900      	ldr	r0, [r0, #16]

                if(first == null)
 80079f4:	2800      	cmp	r0, #0
 80079f6:	9003      	str	r0, [sp, #12]
 80079f8:	d103      	bne.n	8007a02 <SyncBlock_ExtractFromFreeList$4518+0x1e>
 80079fa:	e7ff      	b.n	80079fc <SyncBlock_ExtractFromFreeList$4518+0x18>
 80079fc:	2000      	movs	r0, #0
                {
                    return null;
 80079fe:	9002      	str	r0, [sp, #8]
 8007a00:	e012      	b.n	8007a28 <SyncBlock_ExtractFromFreeList$4518+0x44>
                }

                var next = first.m_next;
 8007a02:	9803      	ldr	r0, [sp, #12]
 8007a04:	68c0      	ldr	r0, [r0, #12]

                if(System.Threading.Interlocked.CompareExchange( ref table.m_freeList, next, first ) == first)
 8007a06:	9903      	ldr	r1, [sp, #12]
 8007a08:	f000 f96c 	bl	8007ce4 <Interlocked_CompareExchange$50038>
 8007a0c:	9903      	ldr	r1, [sp, #12]
 8007a0e:	4288      	cmp	r0, r1
 8007a10:	9101      	str	r1, [sp, #4]
 8007a12:	d108      	bne.n	8007a26 <SyncBlock_ExtractFromFreeList$4518+0x42>
 8007a14:	e7ff      	b.n	8007a16 <SyncBlock_ExtractFromFreeList$4518+0x32>
 8007a16:	9801      	ldr	r0, [sp, #4]
 8007a18:	69c1      	ldr	r1, [r0, #28]
                {
                    first.m_counterUse++;
 8007a1a:	3101      	adds	r1, #1
 8007a1c:	61c1      	str	r1, [r0, #28]
 8007a1e:	2100      	movs	r1, #0
 8007a20:	60c1      	str	r1, [r0, #12]
                    first.m_next = null;
                    return first;
 8007a22:	9002      	str	r0, [sp, #8]
 8007a24:	e000      	b.n	8007a28 <SyncBlock_ExtractFromFreeList$4518+0x44>
                }
            }
 8007a26:	e7e0      	b.n	80079ea <SyncBlock_ExtractFromFreeList$4518+0x6>
        }
 8007a28:	9802      	ldr	r0, [sp, #8]
 8007a2a:	b004      	add	sp, #16
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	46c0      	nop			; (mov r8, r8)
 8007a30:	ffffeafc 	.word	0xffffeafc
 8007a34:	17ff9de2 	.word	0x17ff9de2

08007a38 <SyncBlockTable_ExpandClusters$4504>:

        //--//

        private void ExpandClusters()
        {
            int clusterIndex = (m_clusters == null) ? 0 : m_clusters.Length;
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b08c      	sub	sp, #48	; 0x30
 8007a3c:	482e      	ldr	r0, [pc, #184]	; (8007af8 <SyncBlockTable_ExpandClusters$4504+0xc0>)
 8007a3e:	492f      	ldr	r1, [pc, #188]	; (8007afc <SyncBlockTable_ExpandClusters$4504+0xc4>)
 8007a40:	4479      	add	r1, pc
 8007a42:	4408      	add	r0, r1
 8007a44:	68c0      	ldr	r0, [r0, #12]
 8007a46:	2800      	cmp	r0, #0
 8007a48:	d008      	beq.n	8007a5c <SyncBlockTable_ExpandClusters$4504+0x24>
 8007a4a:	e7ff      	b.n	8007a4c <SyncBlockTable_ExpandClusters$4504+0x14>
 8007a4c:	482a      	ldr	r0, [pc, #168]	; (8007af8 <SyncBlockTable_ExpandClusters$4504+0xc0>)
 8007a4e:	492c      	ldr	r1, [pc, #176]	; (8007b00 <SyncBlockTable_ExpandClusters$4504+0xc8>)
 8007a50:	4479      	add	r1, pc
 8007a52:	4408      	add	r0, r1
 8007a54:	68c0      	ldr	r0, [r0, #12]
        public Synchronization.YieldLock Lock
        {
            get
            {
                return TypeSystemManager.AtomicAllocator( ref m_lock );
            }
 8007a56:	6880      	ldr	r0, [r0, #8]

        //--//

        private void ExpandClusters()
        {
            int clusterIndex = (m_clusters == null) ? 0 : m_clusters.Length;
 8007a58:	900b      	str	r0, [sp, #44]	; 0x2c
 8007a5a:	e002      	b.n	8007a62 <SyncBlockTable_ExpandClusters$4504+0x2a>
 8007a5c:	2000      	movs	r0, #0
 8007a5e:	900b      	str	r0, [sp, #44]	; 0x2c
 8007a60:	e7ff      	b.n	8007a62 <SyncBlockTable_ExpandClusters$4504+0x2a>
 8007a62:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007a64:	4927      	ldr	r1, [pc, #156]	; (8007b04 <SyncBlockTable_ExpandClusters$4504+0xcc>)
 8007a66:	4a28      	ldr	r2, [pc, #160]	; (8007b08 <SyncBlockTable_ExpandClusters$4504+0xd0>)
 8007a68:	447a      	add	r2, pc
 8007a6a:	5889      	ldr	r1, [r1, r2]

            var blocks = new SyncBlock[BlocksInACluster];
 8007a6c:	4b27      	ldr	r3, [pc, #156]	; (8007b0c <SyncBlockTable_ExpandClusters$4504+0xd4>)
 8007a6e:	4413      	add	r3, r2
 8007a70:	f8df c09c 	ldr.w	ip, [pc, #156]	; 8007b10 <SyncBlockTable_ExpandClusters$4504+0xd8>
 8007a74:	4462      	add	r2, ip
 8007a76:	900a      	str	r0, [sp, #40]	; 0x28
 8007a78:	4618      	mov	r0, r3
 8007a7a:	9109      	str	r1, [sp, #36]	; 0x24
 8007a7c:	4611      	mov	r1, r2
 8007a7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a80:	f7fa fb8e 	bl	80021a0 <DefaultTypeSystemManager_AllocateArray$4962>

            //
            // Link each block to the next one, except for the last one.
            //
            int index = clusterIndex * BlocksInACluster;
 8007a84:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007a86:	014a      	lsls	r2, r1, #5
 8007a88:	2300      	movs	r3, #0

            for(int i = 0; i < BlocksInACluster; i++)
 8007a8a:	9008      	str	r0, [sp, #32]
 8007a8c:	9307      	str	r3, [sp, #28]
 8007a8e:	9206      	str	r2, [sp, #24]
 8007a90:	e7ff      	b.n	8007a92 <SyncBlockTable_ExpandClusters$4504+0x5a>
 8007a92:	9806      	ldr	r0, [sp, #24]
 8007a94:	9907      	ldr	r1, [sp, #28]
 8007a96:	291f      	cmp	r1, #31
 8007a98:	9005      	str	r0, [sp, #20]
 8007a9a:	9104      	str	r1, [sp, #16]
 8007a9c:	dc1d      	bgt.n	8007ada <SyncBlockTable_ExpandClusters$4504+0xa2>
 8007a9e:	e7ff      	b.n	8007aa0 <SyncBlockTable_ExpandClusters$4504+0x68>
            {
                blocks[i] = new SyncBlock( index++ );
 8007aa0:	9805      	ldr	r0, [sp, #20]
 8007aa2:	1c41      	adds	r1, r0, #1
 8007aa4:	4a19      	ldr	r2, [pc, #100]	; (8007b0c <SyncBlockTable_ExpandClusters$4504+0xd4>)
 8007aa6:	4b1c      	ldr	r3, [pc, #112]	; (8007b18 <SyncBlockTable_ExpandClusters$4504+0xe0>)
 8007aa8:	447b      	add	r3, pc
 8007aaa:	18d0      	adds	r0, r2, r3
 8007aac:	4a1b      	ldr	r2, [pc, #108]	; (8007b1c <SyncBlockTable_ExpandClusters$4504+0xe4>)
 8007aae:	441a      	add	r2, r3
 8007ab0:	9103      	str	r1, [sp, #12]
 8007ab2:	4611      	mov	r1, r2
 8007ab4:	f000 f888 	bl	8007bc8 <DefaultTypeSystemManager_AllocateObjectWithExtensions$4961>
 8007ab8:	9002      	str	r0, [sp, #8]
 8007aba:	9905      	ldr	r1, [sp, #20]
 8007abc:	f000 f8d1 	bl	8007c62 <SyncBlock_.ctor$4515>
 8007ac0:	9808      	ldr	r0, [sp, #32]
 8007ac2:	9904      	ldr	r1, [sp, #16]
 8007ac4:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8007ac8:	9b02      	ldr	r3, [sp, #8]
 8007aca:	60d3      	str	r3, [r2, #12]
            //
            // Link each block to the next one, except for the last one.
            //
            int index = clusterIndex * BlocksInACluster;

            for(int i = 0; i < BlocksInACluster; i++)
 8007acc:	1c4a      	adds	r2, r1, #1
 8007ace:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8007ad2:	9207      	str	r2, [sp, #28]
 8007ad4:	f8cd c018 	str.w	ip, [sp, #24]
 8007ad8:	e7db      	b.n	8007a92 <SyncBlockTable_ExpandClusters$4504+0x5a>
            {
                blocks[i] = new SyncBlock( index++ );
            }

            m_clusters = ArrayUtility.AppendToArray( m_clusters, blocks );
 8007ada:	4807      	ldr	r0, [pc, #28]	; (8007af8 <SyncBlockTable_ExpandClusters$4504+0xc0>)
 8007adc:	490d      	ldr	r1, [pc, #52]	; (8007b14 <SyncBlockTable_ExpandClusters$4504+0xdc>)
 8007ade:	4479      	add	r1, pc
 8007ae0:	4408      	add	r0, r1
 8007ae2:	68c1      	ldr	r1, [r0, #12]
 8007ae4:	9001      	str	r0, [sp, #4]
 8007ae6:	4608      	mov	r0, r1
 8007ae8:	9908      	ldr	r1, [sp, #32]
 8007aea:	f000 f845 	bl	8007b78 <ArrayUtility_AppendToArray$32221>
 8007aee:	9901      	ldr	r1, [sp, #4]
 8007af0:	60c8      	str	r0, [r1, #12]
 8007af2:	b00c      	add	sp, #48	; 0x30
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	46c0      	nop			; (mov r8, r8)
 8007af8:	ffffeafc 	.word	0xffffeafc
 8007afc:	17ff9d90 	.word	0x17ff9d90
 8007b00:	17ff9d80 	.word	0x17ff9d80
 8007b04:	e80252dc 	.word	0xe80252dc
 8007b08:	17ff9d68 	.word	0x17ff9d68
 8007b0c:	ffffea38 	.word	0xffffea38
 8007b10:	e801223c 	.word	0xe801223c
 8007b14:	17ff9cf2 	.word	0x17ff9cf2
 8007b18:	17ff9d28 	.word	0x17ff9d28
 8007b1c:	e80122cc 	.word	0xe80122cc

08007b20 <SyncBlock_Prepare$4516>:
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b083      	sub	sp, #12
 8007b24:	4613      	mov	r3, r2
 8007b26:	468c      	mov	ip, r1
 8007b28:	4686      	mov	lr, r0
 8007b2a:	6081      	str	r1, [r0, #8]
 8007b2c:	6142      	str	r2, [r0, #20]
 8007b2e:	f8cd c008 	str.w	ip, [sp, #8]
 8007b32:	f8cd e004 	str.w	lr, [sp, #4]
 8007b36:	9300      	str	r3, [sp, #0]
 8007b38:	b003      	add	sp, #12
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <SyncBlock_set_HashCode$4522>:
 8007b3c:	b082      	sub	sp, #8
 8007b3e:	460a      	mov	r2, r1
 8007b40:	4603      	mov	r3, r0
 8007b42:	6141      	str	r1, [r0, #20]
 8007b44:	9301      	str	r3, [sp, #4]
 8007b46:	9200      	str	r2, [sp, #0]
 8007b48:	b002      	add	sp, #8
 8007b4a:	4770      	bx	lr

08007b4c <SyncBlock_get_Lock$4519>:
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	4601      	mov	r1, r0
                }

                var next = first.m_next;

                if(System.Threading.Interlocked.CompareExchange( ref table.m_freeList, next, first ) == first)
                {
 8007b52:	f850 2f18 	ldr.w	r2, [r0, #24]!
 8007b56:	2a00      	cmp	r2, #0
 8007b58:	9103      	str	r1, [sp, #12]
 8007b5a:	9002      	str	r0, [sp, #8]
 8007b5c:	d105      	bne.n	8007b6a <SyncBlock_get_Lock$4519+0x1e>
 8007b5e:	e7ff      	b.n	8007b60 <SyncBlock_get_Lock$4519+0x14>
                    first.m_counterUse++;
                    first.m_next = null;
 8007b60:	9802      	ldr	r0, [sp, #8]
 8007b62:	f000 f8ed 	bl	8007d40 <TypeSystemManager_AtomicAllocatorSlow$36992>
 8007b66:	9001      	str	r0, [sp, #4]
 8007b68:	e003      	b.n	8007b72 <SyncBlock_get_Lock$4519+0x26>
                    return first;
                }
            }
 8007b6a:	9802      	ldr	r0, [sp, #8]
 8007b6c:	6801      	ldr	r1, [r0, #0]
 8007b6e:	9101      	str	r1, [sp, #4]
 8007b70:	e7ff      	b.n	8007b72 <SyncBlock_get_Lock$4519+0x26>
        internal Synchronization.CriticalSection Lock
        {
            get
            {
                return TypeSystemManager.AtomicAllocator( ref m_lock );
            }
 8007b72:	9801      	ldr	r0, [sp, #4]
 8007b74:	b004      	add	sp, #16
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <ArrayUtility_AppendToArray$32221>:
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	4602      	mov	r2, r0
            return (value + (sizeof(uint)-1)) & ~(uint)(sizeof(uint)-1);
        }

        public static uint AlignToBoundary( uint value     ,
                                            uint alignment )
        {
 8007b7e:	2800      	cmp	r0, #0
 8007b80:	9203      	str	r2, [sp, #12]
 8007b82:	9102      	str	r1, [sp, #8]
 8007b84:	d10f      	bne.n	8007ba6 <ArrayUtility_AppendToArray$32221+0x2e>
 8007b86:	e7ff      	b.n	8007b88 <ArrayUtility_AppendToArray$32221+0x10>
 8007b88:	480b      	ldr	r0, [pc, #44]	; (8007bb8 <ArrayUtility_AppendToArray$32221+0x40>)
 8007b8a:	490c      	ldr	r1, [pc, #48]	; (8007bbc <ArrayUtility_AppendToArray$32221+0x44>)
 8007b8c:	4479      	add	r1, pc
 8007b8e:	5842      	ldr	r2, [r0, r1]
            uint off = value % alignment;

 8007b90:	480b      	ldr	r0, [pc, #44]	; (8007bc0 <ArrayUtility_AppendToArray$32221+0x48>)
 8007b92:	4408      	add	r0, r1
 8007b94:	4b0b      	ldr	r3, [pc, #44]	; (8007bc4 <ArrayUtility_AppendToArray$32221+0x4c>)
 8007b96:	4419      	add	r1, r3
 8007b98:	f7fa fb02 	bl	80021a0 <DefaultTypeSystemManager_AllocateArray$4962>
 8007b9c:	4601      	mov	r1, r0
 8007b9e:	9a02      	ldr	r2, [sp, #8]
 8007ba0:	60c2      	str	r2, [r0, #12]
 8007ba2:	9101      	str	r1, [sp, #4]
 8007ba4:	e005      	b.n	8007bb2 <ArrayUtility_AppendToArray$32221+0x3a>
            return off != 0 ? value + alignment - off : value;
        }

        public static UIntPtr AlignToBoundary( UIntPtr value     ,
 8007ba6:	9803      	ldr	r0, [sp, #12]
 8007ba8:	9902      	ldr	r1, [sp, #8]
 8007baa:	f007 f92b 	bl	800ee04 <ArrayUtility_AppendToNotNullArray$36987>
 8007bae:	9001      	str	r0, [sp, #4]
 8007bb0:	e7ff      	b.n	8007bb2 <ArrayUtility_AppendToArray$32221+0x3a>
                                               uint    alignment )
        {
 8007bb2:	9801      	ldr	r0, [sp, #4]
 8007bb4:	b004      	add	sp, #16
 8007bb6:	bd80      	pop	{r7, pc}
 8007bb8:	e8025448 	.word	0xe8025448
 8007bbc:	17ff9c44 	.word	0x17ff9c44
 8007bc0:	ffffea38 	.word	0xffffea38
 8007bc4:	e801398c 	.word	0xe801398c

08007bc8 <DefaultTypeSystemManager_AllocateObjectWithExtensions$4961>:
 8007bc8:	b510      	push	{r4, lr}
 8007bca:	b08c      	sub	sp, #48	; 0x30
 8007bcc:	4608      	mov	r0, r1
 8007bce:	6889      	ldr	r1, [r1, #8]
        }

        [NoInline]
        public override Object AllocateObjectWithExtensions( TS.VTable vTable )
        {
            uint   size = ComputeObjectSize( vTable       );
 8007bd0:	9004      	str	r0, [sp, #16]
 8007bd2:	4608      	mov	r0, r1
 8007bd4:	f001 fb5a 	bl	800928c <DefaultTypeSystemManager_ComputeObjectSize$4965>
 8007bd8:	4601      	mov	r1, r0
            UIntPtr ptr = AllocateInner    ( vTable, size );
 8007bda:	9103      	str	r1, [sp, #12]
 8007bdc:	f001 fb5e 	bl	800929c <DefaultTypeSystemManager_AllocateInner$4967>
 8007be0:	9005      	str	r0, [sp, #20]

            if(MemoryManager.Configuration.TrashFreeMemory)
 8007be2:	e7ff      	b.n	8007be4 <DefaultTypeSystemManager_AllocateObjectWithExtensions$4961+0x1c>
 8007be4:	a805      	add	r0, sp, #20
 8007be6:	9905      	ldr	r1, [sp, #20]
 8007be8:	9108      	str	r1, [sp, #32]
 8007bea:	2100      	movs	r1, #0
 8007bec:	9109      	str	r1, [sp, #36]	; 0x24
 8007bee:	9a08      	ldr	r2, [sp, #32]
            //
            // Align to word boundary.
            //
            size = (size + (sizeof(uint)-1)) & ~(uint)(sizeof(uint)-1);

            return size;
 8007bf0:	9b03      	ldr	r3, [sp, #12]
 8007bf2:	441a      	add	r2, r3
 8007bf4:	9109      	str	r1, [sp, #36]	; 0x24
 8007bf6:	a909      	add	r1, sp, #36	; 0x24
 8007bf8:	3908      	subs	r1, #8
 8007bfa:	9002      	str	r0, [sp, #8]
 8007bfc:	4608      	mov	r0, r1
 8007bfe:	4611      	mov	r1, r2
 8007c00:	f7f8 fe5c 	bl	80008bc <UIntPtr_.ctor$2864>
 8007c04:	9805      	ldr	r0, [sp, #20]
 8007c06:	900a      	str	r0, [sp, #40]	; 0x28
 8007c08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c0a:	900b      	str	r0, [sp, #44]	; 0x2c
 8007c0c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007c0e:	1a40      	subs	r0, r0, r1
 8007c10:	9001      	str	r0, [sp, #4]
 8007c12:	4608      	mov	r0, r1
 8007c14:	9901      	ldr	r1, [sp, #4]
 8007c16:	f018 f91a 	bl	801fe4e <__aeabi_memclr>
            UIntPtr ptr = AllocateInner    ( vTable, size );

            if(MemoryManager.Configuration.TrashFreeMemory)
            {
                Memory.Zero( ptr, AddressMath.Increment( ptr, size ) ); 
            }
 8007c1a:	e7ff      	b.n	8007c1c <DefaultTypeSystemManager_AllocateObjectWithExtensions$4961+0x54>
            UIntPtr ptr  = AllocateInner   ( vTable,       size   );

            if(MemoryManager.Configuration.TrashFreeMemory)
            {
                Memory.Zero( ptr, AddressMath.Increment( ptr, size ) ); 
            }
 8007c1c:	9805      	ldr	r0, [sp, #20]
 8007c1e:	9904      	ldr	r1, [sp, #16]
 8007c20:	6041      	str	r1, [r0, #4]
 8007c22:	220a      	movs	r2, #10
 8007c24:	6002      	str	r2, [r0, #0]
 8007c26:	2000      	movs	r0, #0
 8007c28:	9006      	str	r0, [sp, #24]
 8007c2a:	9007      	str	r0, [sp, #28]
 8007c2c:	9a02      	ldr	r2, [sp, #8]
 8007c2e:	7813      	ldrb	r3, [r2, #0]
 8007c30:	f892 c001 	ldrb.w	ip, [r2, #1]
 8007c34:	f892 e002 	ldrb.w	lr, [r2, #2]
 8007c38:	78d4      	ldrb	r4, [r2, #3]
 8007c3a:	ea4e 2e04 	orr.w	lr, lr, r4, lsl #8
 8007c3e:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8007c42:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8007c46:	9306      	str	r3, [sp, #24]
 8007c48:	9007      	str	r0, [sp, #28]
 8007c4a:	9b06      	ldr	r3, [sp, #24]
            //
            // Align to word boundary.
            //
            size = (size + (sizeof(uint)-1)) & ~(uint)(sizeof(uint)-1);

            return size;
 8007c4c:	f103 0108 	add.w	r1, r3, #8
 8007c50:	9007      	str	r0, [sp, #28]
 8007c52:	a807      	add	r0, sp, #28
 8007c54:	3808      	subs	r0, #8
 8007c56:	f7f8 fe31 	bl	80008bc <UIntPtr_.ctor$2864>
            {
                Memory.Zero( ptr, AddressMath.Increment( ptr, size ) ); 
            }

            return InitializeObjectWithExtensions( ptr, vTable );
        }
 8007c5a:	9807      	ldr	r0, [sp, #28]
 8007c5c:	3808      	subs	r0, #8
 8007c5e:	b00c      	add	sp, #48	; 0x30
 8007c60:	bd10      	pop	{r4, pc}

08007c62 <SyncBlock_.ctor$4515>:
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b082      	sub	sp, #8
 8007c66:	460a      	mov	r2, r1
 8007c68:	4603      	mov	r3, r0
 8007c6a:	6101      	str	r1, [r0, #16]


        [Inline]
        public Array InitializeArray( UIntPtr   memory ,
                                      TS.VTable vTable ,
                                      uint      length )
 8007c6c:	9301      	str	r3, [sp, #4]
 8007c6e:	9200      	str	r2, [sp, #0]
 8007c70:	f000 f816 	bl	8007ca0 <SyncBlock_AddToFreeList$4517>
 8007c74:	b002      	add	sp, #8
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <TypeSystemManager_AtomicAllocatorSlow$36990>:
        }

        [NoInline]
        private static T AtomicAllocatorSlow<T>( ref T obj ) where T : class, new()
        {
            T newObj = new T();
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	f001 fa96 	bl	80091ac <Activator_CreateInstance$38390>

            System.Threading.Interlocked.CompareExchange( ref obj, newObj, default(T) );
 8007c80:	f001 faa4 	bl	80091cc <Interlocked_CompareExchange$50054>

            return obj;
 8007c84:	4904      	ldr	r1, [pc, #16]	; (8007c98 <TypeSystemManager_AtomicAllocatorSlow$36990+0x20>)
 8007c86:	4a05      	ldr	r2, [pc, #20]	; (8007c9c <TypeSystemManager_AtomicAllocatorSlow$36990+0x24>)
 8007c88:	447a      	add	r2, pc
 8007c8a:	4411      	add	r1, r2
 8007c8c:	6889      	ldr	r1, [r1, #8]
 8007c8e:	9001      	str	r0, [sp, #4]
 8007c90:	4608      	mov	r0, r1
 8007c92:	b002      	add	sp, #8
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	46c0      	nop			; (mov r8, r8)
 8007c98:	ffffeafc 	.word	0xffffeafc
 8007c9c:	17ff9b48 	.word	0x17ff9b48

08007ca0 <SyncBlock_AddToFreeList$4517>:
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b082      	sub	sp, #8
 8007ca4:	4601      	mov	r1, r0
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	6082      	str	r2, [r0, #8]
 8007caa:	6182      	str	r2, [r0, #24]
 8007cac:	6a02      	ldr	r2, [r0, #32]
            var table = SyncBlockTable.Instance;

            m_associatedObject = null;
            m_lock             = null;

            m_counterFree++;
 8007cae:	3201      	adds	r2, #1
 8007cb0:	6202      	str	r2, [r0, #32]
 8007cb2:	9101      	str	r1, [sp, #4]
 8007cb4:	e7ff      	b.n	8007cb6 <SyncBlock_AddToFreeList$4517+0x16>

            while(true)
            {
                var first = table.m_freeList;
 8007cb6:	4809      	ldr	r0, [pc, #36]	; (8007cdc <SyncBlock_AddToFreeList$4517+0x3c>)
 8007cb8:	4909      	ldr	r1, [pc, #36]	; (8007ce0 <SyncBlock_AddToFreeList$4517+0x40>)
 8007cba:	4479      	add	r1, pc
 8007cbc:	4408      	add	r0, r1
 8007cbe:	6900      	ldr	r0, [r0, #16]
 8007cc0:	9901      	ldr	r1, [sp, #4]
 8007cc2:	60c8      	str	r0, [r1, #12]

                m_next = first;

                if(System.Threading.Interlocked.CompareExchange( ref table.m_freeList, this, first ) == first)
 8007cc4:	9000      	str	r0, [sp, #0]
 8007cc6:	4608      	mov	r0, r1
 8007cc8:	9900      	ldr	r1, [sp, #0]
 8007cca:	f000 f80b 	bl	8007ce4 <Interlocked_CompareExchange$50038>
 8007cce:	9900      	ldr	r1, [sp, #0]
 8007cd0:	4288      	cmp	r0, r1
 8007cd2:	d102      	bne.n	8007cda <SyncBlock_AddToFreeList$4517+0x3a>
 8007cd4:	e7ff      	b.n	8007cd6 <SyncBlock_AddToFreeList$4517+0x36>
 8007cd6:	b002      	add	sp, #8
 8007cd8:	bd80      	pop	{r7, pc}
                {
                    break;
                }
            }
 8007cda:	e7ec      	b.n	8007cb6 <SyncBlock_AddToFreeList$4517+0x16>
 8007cdc:	ffffeafc 	.word	0xffffeafc
 8007ce0:	17ff9b16 	.word	0x17ff9b16

08007ce4 <Interlocked_CompareExchange$50038>:
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b088      	sub	sp, #32
 8007ce8:	460a      	mov	r2, r1
 8007cea:	2300      	movs	r3, #0
 8007cec:	9306      	str	r3, [sp, #24]
 8007cee:	9307      	str	r3, [sp, #28]

                location1 = value;

                return oldValue;
            }
        }
 8007cf0:	9105      	str	r1, [sp, #20]
 8007cf2:	9204      	str	r2, [sp, #16]
 8007cf4:	9003      	str	r0, [sp, #12]
 8007cf6:	9302      	str	r3, [sp, #8]
 8007cf8:	f7fc fc88 	bl	800460c <ProcessorARMv7M_DisableInterrupts$3259>
 8007cfc:	9902      	ldr	r1, [sp, #8]
 8007cfe:	9107      	str	r1, [sp, #28]
 8007d00:	9007      	str	r0, [sp, #28]
 8007d02:	9006      	str	r0, [sp, #24]
                                                T value     ,
                                                T comparand ) where T : class
        {
            using(SmartHandles.InterruptState.DisableAll())
            {
                T oldValue = location1;
 8007d04:	480b      	ldr	r0, [pc, #44]	; (8007d34 <Interlocked_CompareExchange$50038+0x50>)
 8007d06:	4a0c      	ldr	r2, [pc, #48]	; (8007d38 <Interlocked_CompareExchange$50038+0x54>)
 8007d08:	447a      	add	r2, pc
 8007d0a:	4410      	add	r0, r2
 8007d0c:	6900      	ldr	r0, [r0, #16]

                if(Object.ReferenceEquals( oldValue, comparand ))
 8007d0e:	9a05      	ldr	r2, [sp, #20]
 8007d10:	4290      	cmp	r0, r2
 8007d12:	9001      	str	r0, [sp, #4]
 8007d14:	d107      	bne.n	8007d26 <Interlocked_CompareExchange$50038+0x42>
 8007d16:	e7ff      	b.n	8007d18 <Interlocked_CompareExchange$50038+0x34>
 8007d18:	4806      	ldr	r0, [pc, #24]	; (8007d34 <Interlocked_CompareExchange$50038+0x50>)
 8007d1a:	4908      	ldr	r1, [pc, #32]	; (8007d3c <Interlocked_CompareExchange$50038+0x58>)
 8007d1c:	4479      	add	r1, pc
 8007d1e:	4408      	add	r0, r1
 8007d20:	9903      	ldr	r1, [sp, #12]
 8007d22:	6101      	str	r1, [r0, #16]
                {
                    location1 = value;
                }
 8007d24:	e7ff      	b.n	8007d26 <Interlocked_CompareExchange$50038+0x42>
        }

        public static int Decrement( ref int location )
        {
            using(SmartHandles.InterruptState.DisableAll())
            {
 8007d26:	9806      	ldr	r0, [sp, #24]
 8007d28:	f7fc fc92 	bl	8004650 <ProcessorARMv7M_DisableInterruptsWithPriorityLevelHigherOrEqualTo$3266>
 8007d2c:	9801      	ldr	r0, [sp, #4]
 8007d2e:	b008      	add	sp, #32
 8007d30:	bd80      	pop	{r7, pc}
 8007d32:	46c0      	nop			; (mov r8, r8)
 8007d34:	ffffeafc 	.word	0xffffeafc
 8007d38:	17ff9ac8 	.word	0x17ff9ac8
 8007d3c:	17ff9ab4 	.word	0x17ff9ab4

08007d40 <TypeSystemManager_AtomicAllocatorSlow$36992>:
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b084      	sub	sp, #16
 8007d44:	4601      	mov	r1, r0
        }

        [NoInline]
        private static T AtomicAllocatorSlow<T>( ref T obj ) where T : class, new()
        {
            T newObj = new T();
 8007d46:	9003      	str	r0, [sp, #12]
 8007d48:	9102      	str	r1, [sp, #8]
 8007d4a:	f001 fa69 	bl	8009220 <Activator_CreateInstance$38393>

            System.Threading.Interlocked.CompareExchange( ref obj, newObj, default(T) );
 8007d4e:	9903      	ldr	r1, [sp, #12]
 8007d50:	9001      	str	r0, [sp, #4]
 8007d52:	4608      	mov	r0, r1
 8007d54:	9901      	ldr	r1, [sp, #4]
 8007d56:	f001 fa79 	bl	800924c <Interlocked_CompareExchange$50056>

            return obj;
 8007d5a:	9903      	ldr	r1, [sp, #12]
 8007d5c:	680a      	ldr	r2, [r1, #0]
 8007d5e:	9000      	str	r0, [sp, #0]
 8007d60:	4610      	mov	r0, r2
 8007d62:	b004      	add	sp, #16
 8007d64:	bd80      	pop	{r7, pc}

08007d66 <MemoryFreeBlock_Unpack$4529>:
 8007d66:	b081      	sub	sp, #4
 8007d68:	4601      	mov	r1, r0

            byte[] externalRepresentation = (byte[])TypeSystemManager.Instance.InitializeArray( baseAddress, vTable, numOfElements );

            ObjectHeader oh = ObjectHeader.Unpack( externalRepresentation );

            oh.MultiUseWord = (int)(ObjectHeader.GarbageCollectorFlags.FreeBlock | ObjectHeader.GarbageCollectorFlags.Unmarked);
 8007d6a:	300c      	adds	r0, #12
 8007d6c:	9100      	str	r1, [sp, #0]
 8007d6e:	b001      	add	sp, #4
 8007d70:	4770      	bx	lr

08007d72 <MemoryFreeBlock_ZeroFreeMemory$4539>:
 8007d72:	b580      	push	{r7, lr}
 8007d74:	b08c      	sub	sp, #48	; 0x30
 8007d76:	4601      	mov	r1, r0
 8007d78:	2200      	movs	r2, #0
 8007d7a:	9205      	str	r2, [sp, #20]
 8007d7c:	9206      	str	r2, [sp, #24]
        //

        [Inline]
        public byte[] Pack()
        {
            fixed(MemoryFreeBlock* ptr = &this)
 8007d7e:	3008      	adds	r0, #8
 8007d80:	9207      	str	r2, [sp, #28]
 8007d82:	ab07      	add	r3, sp, #28
            {
                return CastAsArray( AddressMath.Decrement( new UIntPtr( ptr ), PointerOffset() ) );
 8007d84:	3b08      	subs	r3, #8
 8007d86:	9004      	str	r0, [sp, #16]
 8007d88:	4618      	mov	r0, r3
 8007d8a:	9b04      	ldr	r3, [sp, #16]
 8007d8c:	9103      	str	r1, [sp, #12]
 8007d8e:	4619      	mov	r1, r3
 8007d90:	9202      	str	r2, [sp, #8]
 8007d92:	f7f8 fd93 	bl	80008bc <UIntPtr_.ctor$2864>
 8007d96:	9807      	ldr	r0, [sp, #28]
 8007d98:	9008      	str	r0, [sp, #32]
 8007d9a:	9802      	ldr	r0, [sp, #8]
 8007d9c:	9009      	str	r0, [sp, #36]	; 0x24
        public static uint FixedSize()
        {
            int size;

            size  = System.Runtime.InteropServices.Marshal.SizeOf( typeof(ObjectHeader) );
            size += System.Runtime.InteropServices.Marshal.SizeOf( typeof(ArrayImpl   ) );
 8007d9e:	9908      	ldr	r1, [sp, #32]
            {
                uint left = availableSize - size;

                numElements -= size;

                if(left <= MinimumSpaceRequired())
 8007da0:	3904      	subs	r1, #4
 8007da2:	9009      	str	r0, [sp, #36]	; 0x24
 8007da4:	aa09      	add	r2, sp, #36	; 0x24
 8007da6:	f1a2 0008 	sub.w	r0, r2, #8
 8007daa:	f7f8 fd87 	bl	80008bc <UIntPtr_.ctor$2864>
        [Inline]
        public byte[] Pack()
        {
            fixed(MemoryFreeBlock* ptr = &this)
            {
                return CastAsArray( AddressMath.Decrement( new UIntPtr( ptr ), PointerOffset() ) );
 8007dae:	9809      	ldr	r0, [sp, #36]	; 0x24
        public void ZeroFreeMemory()
        {
            byte[] array = Pack();
            byte*  ptr   = (byte*)ArrayImpl.CastAsArray( array ).GetDataPointer();

            UIntPtr start = new UIntPtr( ptr + System.Runtime.InteropServices.Marshal.SizeOf( typeof(MemoryFreeBlock) ) );
 8007db0:	f100 010c 	add.w	r1, r0, #12
 8007db4:	aa05      	add	r2, sp, #20
 8007db6:	3a08      	subs	r2, #8
 8007db8:	9001      	str	r0, [sp, #4]
 8007dba:	4610      	mov	r0, r2
 8007dbc:	f7f8 fd7e 	bl	80008bc <UIntPtr_.ctor$2864>
 8007dc0:	9801      	ldr	r0, [sp, #4]
 8007dc2:	6801      	ldr	r1, [r0, #0]
        [Inline]
        public byte[] Pack()
        {
            fixed(MemoryFreeBlock* ptr = &this)
            {
                return CastAsArray( AddressMath.Decrement( new UIntPtr( ptr ), PointerOffset() ) );
 8007dc4:	4401      	add	r1, r0
        {
            byte[] array = Pack();
            byte*  ptr   = (byte*)ArrayImpl.CastAsArray( array ).GetDataPointer();

            UIntPtr start = new UIntPtr( ptr + System.Runtime.InteropServices.Marshal.SizeOf( typeof(MemoryFreeBlock) ) );
            UIntPtr end   = new UIntPtr( ptr + array.Length                                                             );
 8007dc6:	3104      	adds	r1, #4
 8007dc8:	aa06      	add	r2, sp, #24
 8007dca:	f1a2 0008 	sub.w	r0, r2, #8
 8007dce:	f7f8 fd75 	bl	80008bc <UIntPtr_.ctor$2864>
 8007dd2:	9805      	ldr	r0, [sp, #20]
 8007dd4:	900a      	str	r0, [sp, #40]	; 0x28
 8007dd6:	9806      	ldr	r0, [sp, #24]
 8007dd8:	900b      	str	r0, [sp, #44]	; 0x2c
        public static uint FixedSize()
        {
            int size;

            size  = System.Runtime.InteropServices.Marshal.SizeOf( typeof(ObjectHeader) );
            size += System.Runtime.InteropServices.Marshal.SizeOf( typeof(ArrayImpl   ) );
 8007dda:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007ddc:	1a40      	subs	r0, r0, r1
 8007dde:	9000      	str	r0, [sp, #0]
 8007de0:	4608      	mov	r0, r1
 8007de2:	9900      	ldr	r1, [sp, #0]
 8007de4:	f018 f833 	bl	801fe4e <__aeabi_memclr>
 8007de8:	b00c      	add	sp, #48	; 0x30
 8007dea:	bd80      	pop	{r7, pc}

08007dec <MemoryFreeBlock_DirtyFreeMemory$4541>:
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b08c      	sub	sp, #48	; 0x30
 8007df0:	4601      	mov	r1, r0
 8007df2:	2200      	movs	r2, #0
 8007df4:	9205      	str	r2, [sp, #20]
 8007df6:	9206      	str	r2, [sp, #24]
        //

        [Inline]
        public byte[] Pack()
        {
            fixed(MemoryFreeBlock* ptr = &this)
 8007df8:	3008      	adds	r0, #8
 8007dfa:	9207      	str	r2, [sp, #28]
 8007dfc:	ab07      	add	r3, sp, #28
            {
                return CastAsArray( AddressMath.Decrement( new UIntPtr( ptr ), PointerOffset() ) );
 8007dfe:	3b08      	subs	r3, #8
 8007e00:	9004      	str	r0, [sp, #16]
 8007e02:	4618      	mov	r0, r3
 8007e04:	9b04      	ldr	r3, [sp, #16]
 8007e06:	9103      	str	r1, [sp, #12]
 8007e08:	4619      	mov	r1, r3
 8007e0a:	9202      	str	r2, [sp, #8]
 8007e0c:	f7f8 fd56 	bl	80008bc <UIntPtr_.ctor$2864>
 8007e10:	9807      	ldr	r0, [sp, #28]
 8007e12:	9008      	str	r0, [sp, #32]
 8007e14:	9802      	ldr	r0, [sp, #8]
 8007e16:	9009      	str	r0, [sp, #36]	; 0x24
        public static uint FixedSize()
        {
            int size;

            size  = System.Runtime.InteropServices.Marshal.SizeOf( typeof(ObjectHeader) );
            size += System.Runtime.InteropServices.Marshal.SizeOf( typeof(ArrayImpl   ) );
 8007e18:	9908      	ldr	r1, [sp, #32]
            {
                uint left = availableSize - size;

                numElements -= size;

                if(left <= MinimumSpaceRequired())
 8007e1a:	3904      	subs	r1, #4
 8007e1c:	9009      	str	r0, [sp, #36]	; 0x24
 8007e1e:	aa09      	add	r2, sp, #36	; 0x24
 8007e20:	f1a2 0008 	sub.w	r0, r2, #8
 8007e24:	f7f8 fd4a 	bl	80008bc <UIntPtr_.ctor$2864>
        [Inline]
        public byte[] Pack()
        {
            fixed(MemoryFreeBlock* ptr = &this)
            {
                return CastAsArray( AddressMath.Decrement( new UIntPtr( ptr ), PointerOffset() ) );
 8007e28:	9809      	ldr	r0, [sp, #36]	; 0x24
        public void DirtyFreeMemory()
        {
            byte[] array = Pack();
            byte*  ptr   = (byte*)ArrayImpl.CastAsArray( array ).GetDataPointer();

            UIntPtr start = new UIntPtr( ptr + System.Runtime.InteropServices.Marshal.SizeOf( typeof(MemoryFreeBlock) ) );
 8007e2a:	f100 010c 	add.w	r1, r0, #12
 8007e2e:	aa05      	add	r2, sp, #20
 8007e30:	3a08      	subs	r2, #8
 8007e32:	9001      	str	r0, [sp, #4]
 8007e34:	4610      	mov	r0, r2
 8007e36:	f7f8 fd41 	bl	80008bc <UIntPtr_.ctor$2864>
 8007e3a:	9801      	ldr	r0, [sp, #4]
 8007e3c:	6801      	ldr	r1, [r0, #0]
        [Inline]
        public byte[] Pack()
        {
            fixed(MemoryFreeBlock* ptr = &this)
            {
                return CastAsArray( AddressMath.Decrement( new UIntPtr( ptr ), PointerOffset() ) );
 8007e3e:	4401      	add	r1, r0
        {
            byte[] array = Pack();
            byte*  ptr   = (byte*)ArrayImpl.CastAsArray( array ).GetDataPointer();

            UIntPtr start = new UIntPtr( ptr + System.Runtime.InteropServices.Marshal.SizeOf( typeof(MemoryFreeBlock) ) );
            UIntPtr end   = new UIntPtr( ptr + array.Length                                                             );
 8007e40:	3104      	adds	r1, #4
 8007e42:	aa06      	add	r2, sp, #24
 8007e44:	f1a2 0008 	sub.w	r0, r2, #8
 8007e48:	f7f8 fd38 	bl	80008bc <UIntPtr_.ctor$2864>
 8007e4c:	9805      	ldr	r0, [sp, #20]
 8007e4e:	900a      	str	r0, [sp, #40]	; 0x28
 8007e50:	9806      	ldr	r0, [sp, #24]
 8007e52:	900b      	str	r0, [sp, #44]	; 0x2c
        public static uint FixedSize()
        {
            int size;

            size  = System.Runtime.InteropServices.Marshal.SizeOf( typeof(ObjectHeader) );
            size += System.Runtime.InteropServices.Marshal.SizeOf( typeof(ArrayImpl   ) );
 8007e54:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007e56:	1a40      	subs	r0, r0, r1
 8007e58:	22dd      	movs	r2, #221	; 0xdd
 8007e5a:	9000      	str	r0, [sp, #0]
 8007e5c:	4608      	mov	r0, r1
 8007e5e:	9900      	ldr	r1, [sp, #0]
 8007e60:	f018 f817 	bl	801fe92 <__aeabi_memset>
 8007e64:	b00c      	add	sp, #48	; 0x30
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <MemoryFreeBlock_Allocate$4543>:
 8007e68:	b510      	push	{r4, lr}
 8007e6a:	b0a0      	sub	sp, #128	; 0x80
 8007e6c:	4613      	mov	r3, r2
 8007e6e:	4684      	mov	ip, r0
        //

        [Inline]
        public byte[] Pack()
        {
            fixed(MemoryFreeBlock* ptr = &this)
 8007e70:	3008      	adds	r0, #8
 8007e72:	f04f 0e00 	mov.w	lr, #0
 8007e76:	f8cd e050 	str.w	lr, [sp, #80]	; 0x50
 8007e7a:	ac14      	add	r4, sp, #80	; 0x50
            {
                return CastAsArray( AddressMath.Decrement( new UIntPtr( ptr ), PointerOffset() ) );
 8007e7c:	3c08      	subs	r4, #8
 8007e7e:	9013      	str	r0, [sp, #76]	; 0x4c
 8007e80:	4620      	mov	r0, r4
 8007e82:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8007e84:	9112      	str	r1, [sp, #72]	; 0x48
 8007e86:	4621      	mov	r1, r4
 8007e88:	9211      	str	r2, [sp, #68]	; 0x44
 8007e8a:	9310      	str	r3, [sp, #64]	; 0x40
 8007e8c:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8007e90:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8007e94:	f7f8 fd12 	bl	80008bc <UIntPtr_.ctor$2864>
 8007e98:	9814      	ldr	r0, [sp, #80]	; 0x50
 8007e9a:	9015      	str	r0, [sp, #84]	; 0x54
 8007e9c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007e9e:	9016      	str	r0, [sp, #88]	; 0x58
        public static uint FixedSize()
        {
            int size;

            size  = System.Runtime.InteropServices.Marshal.SizeOf( typeof(ObjectHeader) );
            size += System.Runtime.InteropServices.Marshal.SizeOf( typeof(ArrayImpl   ) );
 8007ea0:	9915      	ldr	r1, [sp, #84]	; 0x54
            {
                uint left = availableSize - size;

                numElements -= size;

                if(left <= MinimumSpaceRequired())
 8007ea2:	3904      	subs	r1, #4
 8007ea4:	9016      	str	r0, [sp, #88]	; 0x58
 8007ea6:	aa16      	add	r2, sp, #88	; 0x58
 8007ea8:	f1a2 0008 	sub.w	r0, r2, #8
 8007eac:	f7f8 fd06 	bl	80008bc <UIntPtr_.ctor$2864>
 8007eb0:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007eb2:	4601      	mov	r1, r0
 8007eb4:	f851 2908 	ldr.w	r2, [r1], #-8
                                     uint          size          )
        {
            ArrayImpl array         = ArrayImpl.CastAsArray( Pack() );
            uint      fixedSize     = FixedSize();
            uint      numElements   = (uint)array.Length;
            uint      availableSize = numElements + fixedSize;
 8007eb8:	f102 030c 	add.w	r3, r2, #12
 8007ebc:	469c      	mov	ip, r3

            if(size <= availableSize)
 8007ebe:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8007ec2:	459e      	cmp	lr, r3
 8007ec4:	900d      	str	r0, [sp, #52]	; 0x34
 8007ec6:	910c      	str	r1, [sp, #48]	; 0x30
 8007ec8:	920b      	str	r2, [sp, #44]	; 0x2c
 8007eca:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 8007ece:	d80e      	bhi.n	8007eee <MemoryFreeBlock_Allocate$4543+0x86>
 8007ed0:	e7ff      	b.n	8007ed2 <MemoryFreeBlock_Allocate$4543+0x6a>
            {
                uint left = availableSize - size;
 8007ed2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007ed4:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007ed6:	1a42      	subs	r2, r0, r1
 8007ed8:	4613      	mov	r3, r2

                numElements -= size;
 8007eda:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8007ede:	ebac 0e01 	sub.w	lr, ip, r1

                if(left <= MinimumSpaceRequired())
 8007ee2:	2a15      	cmp	r2, #21
 8007ee4:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 8007ee8:	9308      	str	r3, [sp, #32]
 8007eea:	d30e      	bcc.n	8007f0a <MemoryFreeBlock_Allocate$4543+0xa2>
 8007eec:	e02c      	b.n	8007f48 <MemoryFreeBlock_Allocate$4543+0xe0>
 8007eee:	a817      	add	r0, sp, #92	; 0x5c
 8007ef0:	4940      	ldr	r1, [pc, #256]	; (8007ff4 <MemoryFreeBlock_Allocate$4543+0x18c>)
 8007ef2:	4a41      	ldr	r2, [pc, #260]	; (8007ff8 <MemoryFreeBlock_Allocate$4543+0x190>)
 8007ef4:	447a      	add	r2, pc
 8007ef6:	4411      	add	r1, r2
 8007ef8:	f8d1 1104 	ldr.w	r1, [r1, #260]	; 0x104
 8007efc:	9117      	str	r1, [sp, #92]	; 0x5c
                }

                return new UIntPtr( (byte*)array.GetDataPointer() + numElements );
            }

            return UIntPtr.Zero;
 8007efe:	9007      	str	r0, [sp, #28]
 8007f00:	e7ff      	b.n	8007f02 <MemoryFreeBlock_Allocate$4543+0x9a>
 8007f02:	9807      	ldr	r0, [sp, #28]
 8007f04:	6800      	ldr	r0, [r0, #0]
 8007f06:	b020      	add	sp, #128	; 0x80
 8007f08:	bd10      	pop	{r4, pc}

                numElements -= size;

                if(left <= MinimumSpaceRequired())
                {
                    fixed(MemoryFreeBlock* ptr = &this)
 8007f0a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007f0c:	f100 0108 	add.w	r1, r0, #8
                    {
                        memorySegment.RemoveFreeBlock( ptr );
 8007f10:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007f12:	f1a2 0008 	sub.w	r0, r2, #8
 8007f16:	f000 f871 	bl	8007ffc <MemorySegment_RemoveFreeBlock$4581>
 8007f1a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007f1c:	9019      	str	r0, [sp, #100]	; 0x64
 8007f1e:	2100      	movs	r1, #0
 8007f20:	911a      	str	r1, [sp, #104]	; 0x68
        public static uint FixedSize()
        {
            int size;

            size  = System.Runtime.InteropServices.Marshal.SizeOf( typeof(ObjectHeader) );
            size += System.Runtime.InteropServices.Marshal.SizeOf( typeof(ArrayImpl   ) );
 8007f22:	9a19      	ldr	r2, [sp, #100]	; 0x64
            {
                uint left = availableSize - size;

                numElements -= size;

                if(left <= MinimumSpaceRequired())
 8007f24:	3a08      	subs	r2, #8
 8007f26:	911a      	str	r1, [sp, #104]	; 0x68
 8007f28:	a91a      	add	r1, sp, #104	; 0x68
 8007f2a:	f1a1 0008 	sub.w	r0, r1, #8
 8007f2e:	9106      	str	r1, [sp, #24]
 8007f30:	4611      	mov	r1, r2
 8007f32:	f7f8 fcc3 	bl	80008bc <UIntPtr_.ctor$2864>
 8007f36:	a81b      	add	r0, sp, #108	; 0x6c
 8007f38:	9906      	ldr	r1, [sp, #24]
 8007f3a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007f3c:	921b      	str	r2, [sp, #108]	; 0x6c
            byte[] array = Pack();
            byte*  ptr   = (byte*)ArrayImpl.CastAsArray( array ).GetDataPointer();

            UIntPtr start = new UIntPtr( ptr + System.Runtime.InteropServices.Marshal.SizeOf( typeof(MemoryFreeBlock) ) );
            UIntPtr end   = new UIntPtr( ptr + array.Length                                                             );

 8007f3e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
                        memorySegment.RemoveFreeBlock( ptr );
                    }

                    ObjectHeader oh = ObjectHeader.Unpack( array );

                    if(MemoryManager.Configuration.TrashFreeMemory)
 8007f40:	9005      	str	r0, [sp, #20]
 8007f42:	9104      	str	r1, [sp, #16]
 8007f44:	9203      	str	r2, [sp, #12]
 8007f46:	e015      	b.n	8007f74 <MemoryFreeBlock_Allocate$4543+0x10c>
                else
                {
                    //
                    // Resize the array, as a way of marking memory allocation.
                    //
                    array.SetLength( numElements );
 8007f48:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007f4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f4c:	f7f9 f86e 	bl	800102c <Array_SetLength$3711>
                }
 8007f50:	e7ff      	b.n	8007f52 <MemoryFreeBlock_Allocate$4543+0xea>
            TS.VTable vTable        = TS.VTable.GetFromType( typeof(byte[]) );
            uint      numOfElements = sizeInBytes - FixedSize();

            byte[] externalRepresentation = (byte[])TypeSystemManager.Instance.InitializeArray( baseAddress, vTable, numOfElements );

            ObjectHeader oh = ObjectHeader.Unpack( externalRepresentation );
 8007f52:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007f54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f56:	1842      	adds	r2, r0, r1
                    // Resize the array, as a way of marking memory allocation.
                    //
                    array.SetLength( numElements );
                }

                return new UIntPtr( (byte*)array.GetDataPointer() + numElements );
 8007f58:	f102 010c 	add.w	r1, r2, #12
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	9218      	str	r2, [sp, #96]	; 0x60
 8007f60:	aa18      	add	r2, sp, #96	; 0x60
 8007f62:	f1a2 0008 	sub.w	r0, r2, #8
 8007f66:	f7f8 fca9 	bl	80008bc <UIntPtr_.ctor$2864>
 8007f6a:	a817      	add	r0, sp, #92	; 0x5c
 8007f6c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007f6e:	9117      	str	r1, [sp, #92]	; 0x5c
 8007f70:	9007      	str	r0, [sp, #28]
 8007f72:	e7c6      	b.n	8007f02 <MemoryFreeBlock_Allocate$4543+0x9a>
 8007f74:	9804      	ldr	r0, [sp, #16]
 8007f76:	7801      	ldrb	r1, [r0, #0]
 8007f78:	7842      	ldrb	r2, [r0, #1]
 8007f7a:	7883      	ldrb	r3, [r0, #2]
 8007f7c:	f890 c003 	ldrb.w	ip, [r0, #3]
 8007f80:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8007f84:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8007f88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007f8c:	911c      	str	r1, [sp, #112]	; 0x70
 8007f8e:	2100      	movs	r1, #0
 8007f90:	911d      	str	r1, [sp, #116]	; 0x74
        public static uint FixedSize()
        {
            int size;

            size  = System.Runtime.InteropServices.Marshal.SizeOf( typeof(ObjectHeader) );
            size += System.Runtime.InteropServices.Marshal.SizeOf( typeof(ArrayImpl   ) );
 8007f92:	9a1c      	ldr	r2, [sp, #112]	; 0x70
        {
            ArrayImpl array         = ArrayImpl.CastAsArray( Pack() );
            uint      fixedSize     = FixedSize();
            uint      numElements   = (uint)array.Length;
            uint      availableSize = numElements + fixedSize;

 8007f94:	3214      	adds	r2, #20
 8007f96:	911d      	str	r1, [sp, #116]	; 0x74
 8007f98:	ab1d      	add	r3, sp, #116	; 0x74
 8007f9a:	f1a3 0008 	sub.w	r0, r3, #8
 8007f9e:	9102      	str	r1, [sp, #8]
 8007fa0:	4611      	mov	r1, r2
 8007fa2:	f7f8 fc8b 	bl	80008bc <UIntPtr_.ctor$2864>
 8007fa6:	9802      	ldr	r0, [sp, #8]
 8007fa8:	901e      	str	r0, [sp, #120]	; 0x78
 8007faa:	901f      	str	r0, [sp, #124]	; 0x7c
 8007fac:	9905      	ldr	r1, [sp, #20]
 8007fae:	780a      	ldrb	r2, [r1, #0]
 8007fb0:	784b      	ldrb	r3, [r1, #1]
 8007fb2:	f891 c002 	ldrb.w	ip, [r1, #2]
 8007fb6:	f891 e003 	ldrb.w	lr, [r1, #3]
 8007fba:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
 8007fbe:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8007fc2:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8007fc6:	921e      	str	r2, [sp, #120]	; 0x78
 8007fc8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007fca:	921f      	str	r2, [sp, #124]	; 0x7c
        public static uint FixedSize()
        {
            int size;

            size  = System.Runtime.InteropServices.Marshal.SizeOf( typeof(ObjectHeader) );
            size += System.Runtime.InteropServices.Marshal.SizeOf( typeof(ArrayImpl   ) );
 8007fcc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007fce:	1ad1      	subs	r1, r2, r3
 8007fd0:	22dd      	movs	r2, #221	; 0xdd
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f017 ff5d 	bl	801fe92 <__aeabi_memset>
 8007fd8:	9808      	ldr	r0, [sp, #32]
                    ObjectHeader oh = ObjectHeader.Unpack( array );

                    if(MemoryManager.Configuration.TrashFreeMemory)
                    {
                        DirtyHeader( oh.ToPointer() );
                    }
 8007fda:	9001      	str	r0, [sp, #4]
 8007fdc:	e7ff      	b.n	8007fde <MemoryFreeBlock_Allocate$4543+0x176>
                    else
                    {
                        ZeroHeader( oh.ToPointer() );
                    }

                    if(left > 0)
 8007fde:	9801      	ldr	r0, [sp, #4]
 8007fe0:	2800      	cmp	r0, #0
 8007fe2:	d005      	beq.n	8007ff0 <MemoryFreeBlock_Allocate$4543+0x188>
 8007fe4:	e7ff      	b.n	8007fe6 <MemoryFreeBlock_Allocate$4543+0x17e>
                    {
                        oh.InsertPlug( left );
 8007fe6:	9803      	ldr	r0, [sp, #12]
 8007fe8:	9908      	ldr	r1, [sp, #32]
 8007fea:	f7fc fc5b 	bl	80048a4 <ObjectHeader_InsertPlug$3130>
                    }
 8007fee:	e7ff      	b.n	8007ff0 <MemoryFreeBlock_Allocate$4543+0x188>
                }
 8007ff0:	e7af      	b.n	8007f52 <MemoryFreeBlock_Allocate$4543+0xea>
 8007ff2:	46c0      	nop			; (mov r8, r8)
 8007ff4:	fffffe3c 	.word	0xfffffe3c
 8007ff8:	17ff98dc 	.word	0x17ff98dc

08007ffc <MemorySegment_RemoveFreeBlock$4581>:
 8007ffc:	b085      	sub	sp, #20
 8007ffe:	460a      	mov	r2, r1
        }

        [TS.WellKnownMethod("DebugGC_MemorySegment_RemoveFreeBlock")]
        public void RemoveFreeBlock( MemoryFreeBlock* ptr )
        {
            MemoryFreeBlock* ptrNext = ptr->Next;
 8008000:	680b      	ldr	r3, [r1, #0]
            MemoryFreeBlock* ptrPrev = ptr->Previous;
 8008002:	6849      	ldr	r1, [r1, #4]

            if(ptrNext != null               ) ptrNext->Previous   = ptrPrev;
 8008004:	2b00      	cmp	r3, #0
            if(ptrPrev != null               ) ptrPrev->Next       = ptrNext;
 8008006:	468c      	mov	ip, r1
        public void RemoveFreeBlock( MemoryFreeBlock* ptr )
        {
            MemoryFreeBlock* ptrNext = ptr->Next;
            MemoryFreeBlock* ptrPrev = ptr->Previous;

            if(ptrNext != null               ) ptrNext->Previous   = ptrPrev;
 8008008:	9304      	str	r3, [sp, #16]
 800800a:	9203      	str	r2, [sp, #12]
 800800c:	9002      	str	r0, [sp, #8]
 800800e:	9101      	str	r1, [sp, #4]
 8008010:	f8cd c000 	str.w	ip, [sp]
 8008014:	d005      	beq.n	8008022 <MemorySegment_RemoveFreeBlock$4581+0x26>
 8008016:	e7ff      	b.n	8008018 <MemorySegment_RemoveFreeBlock$4581+0x1c>
 8008018:	9801      	ldr	r0, [sp, #4]
 800801a:	9904      	ldr	r1, [sp, #16]
 800801c:	6048      	str	r0, [r1, #4]
 800801e:	9000      	str	r0, [sp, #0]
 8008020:	e7ff      	b.n	8008022 <MemorySegment_RemoveFreeBlock$4581+0x26>
            if(ptrPrev != null               ) ptrPrev->Next       = ptrNext;
 8008022:	9800      	ldr	r0, [sp, #0]
 8008024:	2800      	cmp	r0, #0
 8008026:	d004      	beq.n	8008032 <MemorySegment_RemoveFreeBlock$4581+0x36>
 8008028:	e7ff      	b.n	800802a <MemorySegment_RemoveFreeBlock$4581+0x2e>
 800802a:	9804      	ldr	r0, [sp, #16]
 800802c:	9901      	ldr	r1, [sp, #4]
 800802e:	6008      	str	r0, [r1, #0]
 8008030:	e7ff      	b.n	8008032 <MemorySegment_RemoveFreeBlock$4581+0x36>
            if(ptr     == this.FirstFreeBlock) this.FirstFreeBlock = ptrNext;
 8008032:	9802      	ldr	r0, [sp, #8]
 8008034:	69c1      	ldr	r1, [r0, #28]
 8008036:	9a03      	ldr	r2, [sp, #12]
 8008038:	428a      	cmp	r2, r1
 800803a:	d104      	bne.n	8008046 <MemorySegment_RemoveFreeBlock$4581+0x4a>
 800803c:	e7ff      	b.n	800803e <MemorySegment_RemoveFreeBlock$4581+0x42>
 800803e:	9804      	ldr	r0, [sp, #16]
 8008040:	9902      	ldr	r1, [sp, #8]
 8008042:	61c8      	str	r0, [r1, #28]
 8008044:	e7ff      	b.n	8008046 <MemorySegment_RemoveFreeBlock$4581+0x4a>
            if(ptr     == this.LastFreeBlock ) this.LastFreeBlock  = ptrPrev;
 8008046:	9802      	ldr	r0, [sp, #8]
 8008048:	6a01      	ldr	r1, [r0, #32]
 800804a:	9a03      	ldr	r2, [sp, #12]
 800804c:	428a      	cmp	r2, r1
 800804e:	d104      	bne.n	800805a <MemorySegment_RemoveFreeBlock$4581+0x5e>
 8008050:	e7ff      	b.n	8008052 <MemorySegment_RemoveFreeBlock$4581+0x56>
 8008052:	9801      	ldr	r0, [sp, #4]
 8008054:	9902      	ldr	r1, [sp, #8]
 8008056:	6208      	str	r0, [r1, #32]
 8008058:	e7ff      	b.n	800805a <MemorySegment_RemoveFreeBlock$4581+0x5e>
 800805a:	b005      	add	sp, #20
 800805c:	4770      	bx	lr
 800805e:	46c0      	nop			; (mov r8, r8)

08008060 <MemoryFreeBlock_InitializeFromRawMemory$4552>:
 8008060:	b510      	push	{r4, lr}
 8008062:	b08c      	sub	sp, #48	; 0x30
 8008064:	460a      	mov	r2, r1
 8008066:	4603      	mov	r3, r0
 8008068:	f8df c080 	ldr.w	ip, [pc, #128]	; 80080ec <MemoryFreeBlock_InitializeFromRawMemory$4552+0x8c>
 800806c:	f8df e080 	ldr.w	lr, [pc, #128]	; 80080f0 <MemoryFreeBlock_InitializeFromRawMemory$4552+0x90>
 8008070:	44fe      	add	lr, pc
 8008072:	44f4      	add	ip, lr
 8008074:	f8cd c01c 	str.w	ip, [sp, #28]
        [TS.WellKnownMethod("DebugGC_MemoryFreeBlock_InitializeFromRawMemory")]
        public static MemoryFreeBlock* InitializeFromRawMemory( UIntPtr baseAddress ,
                                                                uint    sizeInBytes )
        {
            TS.VTable vTable        = TS.VTable.GetFromType( typeof(byte[]) );
            uint      numOfElements = sizeInBytes - FixedSize();
 8008078:	390c      	subs	r1, #12
 800807a:	f8c0 c004 	str.w	ip, [r0, #4]
 800807e:	f04f 0e08 	mov.w	lr, #8
 8008082:	f8c0 e000 	str.w	lr, [r0]
 8008086:	9008      	str	r0, [sp, #32]
 8008088:	2000      	movs	r0, #0
 800808a:	9009      	str	r0, [sp, #36]	; 0x24
        public static uint FixedSize()
        {
            int size;

            size  = System.Runtime.InteropServices.Marshal.SizeOf( typeof(ObjectHeader) );
            size += System.Runtime.InteropServices.Marshal.SizeOf( typeof(ArrayImpl   ) );
 800808c:	f8dd e020 	ldr.w	lr, [sp, #32]
        {
            ArrayImpl array         = ArrayImpl.CastAsArray( Pack() );
            uint      fixedSize     = FixedSize();
            uint      numElements   = (uint)array.Length;
            uint      availableSize = numElements + fixedSize;

 8008090:	f10e 0e08 	add.w	lr, lr, #8
 8008094:	9009      	str	r0, [sp, #36]	; 0x24
 8008096:	ac09      	add	r4, sp, #36	; 0x24
 8008098:	3c08      	subs	r4, #8
 800809a:	9006      	str	r0, [sp, #24]
 800809c:	4620      	mov	r0, r4
 800809e:	9105      	str	r1, [sp, #20]
 80080a0:	4671      	mov	r1, lr
 80080a2:	f8cd c010 	str.w	ip, [sp, #16]
 80080a6:	9303      	str	r3, [sp, #12]
 80080a8:	9202      	str	r2, [sp, #8]
 80080aa:	f7f8 fc07 	bl	80008bc <UIntPtr_.ctor$2864>
        public UIntPtr Allocate( ref MemorySegment memorySegment ,
                                     uint          size          )
        {
            ArrayImpl array         = ArrayImpl.CastAsArray( Pack() );
            uint      fixedSize     = FixedSize();
            uint      numElements   = (uint)array.Length;
 80080ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080b0:	9905      	ldr	r1, [sp, #20]
 80080b2:	f840 1908 	str.w	r1, [r0], #-8
                                                                uint    sizeInBytes )
        {
            TS.VTable vTable        = TS.VTable.GetFromType( typeof(byte[]) );
            uint      numOfElements = sizeInBytes - FixedSize();

            byte[] externalRepresentation = (byte[])TypeSystemManager.Instance.InitializeArray( baseAddress, vTable, numOfElements );
 80080b6:	9904      	ldr	r1, [sp, #16]
 80080b8:	f7fe f94e 	bl	8006358 <TypeSystemManager_CastToType$4948>
            byte[] array = Pack();
            byte*  ptr   = (byte*)ArrayImpl.CastAsArray( array ).GetDataPointer();

            UIntPtr start = new UIntPtr( ptr + System.Runtime.InteropServices.Marshal.SizeOf( typeof(MemoryFreeBlock) ) );
            UIntPtr end   = new UIntPtr( ptr + array.Length                                                             );

 80080bc:	f100 0108 	add.w	r1, r0, #8
 80080c0:	910a      	str	r1, [sp, #40]	; 0x28
 80080c2:	9906      	ldr	r1, [sp, #24]
 80080c4:	910b      	str	r1, [sp, #44]	; 0x2c
        public static uint FixedSize()
        {
            int size;

            size  = System.Runtime.InteropServices.Marshal.SizeOf( typeof(ObjectHeader) );
            size += System.Runtime.InteropServices.Marshal.SizeOf( typeof(ArrayImpl   ) );
 80080c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
            {
                uint left = availableSize - size;

                numElements -= size;

                if(left <= MinimumSpaceRequired())
 80080c8:	f1a2 0108 	sub.w	r1, r2, #8
 80080cc:	9a06      	ldr	r2, [sp, #24]
 80080ce:	920b      	str	r2, [sp, #44]	; 0x2c
 80080d0:	ab0b      	add	r3, sp, #44	; 0x2c
 80080d2:	3b08      	subs	r3, #8
 80080d4:	9001      	str	r0, [sp, #4]
 80080d6:	4618      	mov	r0, r3
 80080d8:	f7f8 fbf0 	bl	80008bc <UIntPtr_.ctor$2864>
            byte[] array = Pack();
            byte*  ptr   = (byte*)ArrayImpl.CastAsArray( array ).GetDataPointer();

            UIntPtr start = new UIntPtr( ptr + System.Runtime.InteropServices.Marshal.SizeOf( typeof(MemoryFreeBlock) ) );
            UIntPtr end   = new UIntPtr( ptr + array.Length                                                             );

 80080dc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80080de:	9906      	ldr	r1, [sp, #24]
 80080e0:	6001      	str	r1, [r0, #0]

            ObjectHeader oh = ObjectHeader.Unpack( externalRepresentation );

            oh.MultiUseWord = (int)(ObjectHeader.GarbageCollectorFlags.FreeBlock | ObjectHeader.GarbageCollectorFlags.Unmarked);

            return Unpack( externalRepresentation );
 80080e2:	9801      	ldr	r0, [sp, #4]
 80080e4:	f7ff fe3f 	bl	8007d66 <MemoryFreeBlock_Unpack$4529>
 80080e8:	b00c      	add	sp, #48	; 0x30
 80080ea:	bd10      	pop	{r4, pc}
 80080ec:	e8011dac 	.word	0xe8011dac
 80080f0:	17ff9760 	.word	0x17ff9760

080080f4 <MemorySegment_Initialize$4569>:
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b086      	sub	sp, #24
 80080f8:	4601      	mov	r1, r0
        }

        public static MemoryFreeBlock* Unpack( byte[] ptr )
        {
            ArrayImpl array = ArrayImpl.CastAsArray( ptr );

 80080fa:	f100 0224 	add.w	r2, r0, #36	; 0x24
        public static uint FixedSize()
        {
            int size;

            size  = System.Runtime.InteropServices.Marshal.SizeOf( typeof(ObjectHeader) );
            size += System.Runtime.InteropServices.Marshal.SizeOf( typeof(ArrayImpl   ) );
 80080fe:	6943      	ldr	r3, [r0, #20]

        public static MemoryFreeBlock* Unpack( byte[] ptr )
        {
            ArrayImpl array = ArrayImpl.CastAsArray( ptr );

            return (MemoryFreeBlock*)array.GetDataPointer();
 8008100:	1a9b      	subs	r3, r3, r2
 8008102:	f04f 0c00 	mov.w	ip, #0
 8008106:	f8cd c014 	str.w	ip, [sp, #20]
 800810a:	f10d 0e14 	add.w	lr, sp, #20
        }

 800810e:	f1ae 0e08 	sub.w	lr, lr, #8
 8008112:	9004      	str	r0, [sp, #16]
 8008114:	4670      	mov	r0, lr
 8008116:	9103      	str	r1, [sp, #12]
 8008118:	4611      	mov	r1, r2
 800811a:	f8cd c008 	str.w	ip, [sp, #8]
 800811e:	9301      	str	r3, [sp, #4]
 8008120:	f7f8 fbcc 	bl	80008bc <UIntPtr_.ctor$2864>
 8008124:	9805      	ldr	r0, [sp, #20]
 8008126:	9901      	ldr	r1, [sp, #4]
 8008128:	f7ff ff9a 	bl	8008060 <MemoryFreeBlock_InitializeFromRawMemory$4552>
 800812c:	9904      	ldr	r1, [sp, #16]
 800812e:	61c8      	str	r0, [r1, #28]
 8008130:	6208      	str	r0, [r1, #32]
 8008132:	9a02      	ldr	r2, [sp, #8]
 8008134:	6002      	str	r2, [r0, #0]
 8008136:	6042      	str	r2, [r0, #4]
 8008138:	b006      	add	sp, #24
 800813a:	bd80      	pop	{r7, pc}

0800813c <MemorySegment_ZeroFreeMemory$4571>:
 800813c:	b580      	push	{r7, lr}
 800813e:	b084      	sub	sp, #16
 8008140:	4601      	mov	r1, r0
            }
        }

        public void ZeroFreeMemory()
        {
            for(MemoryFreeBlock* ptr = this.FirstFreeBlock; ptr != null; ptr = ptr->Next)
 8008142:	69c0      	ldr	r0, [r0, #28]
 8008144:	9103      	str	r1, [sp, #12]
 8008146:	9002      	str	r0, [sp, #8]
 8008148:	e7ff      	b.n	800814a <MemorySegment_ZeroFreeMemory$4571+0xe>
 800814a:	9802      	ldr	r0, [sp, #8]
 800814c:	4601      	mov	r1, r0
 800814e:	2800      	cmp	r0, #0
 8008150:	9001      	str	r0, [sp, #4]
 8008152:	9100      	str	r1, [sp, #0]
 8008154:	d008      	beq.n	8008168 <MemorySegment_ZeroFreeMemory$4571+0x2c>
 8008156:	e7ff      	b.n	8008158 <MemorySegment_ZeroFreeMemory$4571+0x1c>
            {
                ptr->ZeroFreeMemory();
 8008158:	9800      	ldr	r0, [sp, #0]
 800815a:	3808      	subs	r0, #8
 800815c:	f7ff fe09 	bl	8007d72 <MemoryFreeBlock_ZeroFreeMemory$4539>
            }
        }

        public void ZeroFreeMemory()
        {
            for(MemoryFreeBlock* ptr = this.FirstFreeBlock; ptr != null; ptr = ptr->Next)
 8008160:	9801      	ldr	r0, [sp, #4]
 8008162:	6801      	ldr	r1, [r0, #0]
 8008164:	9102      	str	r1, [sp, #8]
 8008166:	e7f0      	b.n	800814a <MemorySegment_ZeroFreeMemory$4571+0xe>
 8008168:	b004      	add	sp, #16
 800816a:	bd80      	pop	{r7, pc}

0800816c <MemorySegment_DirtyFreeMemory$4573>:
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	4601      	mov	r1, r0
            }
        }

        public void DirtyFreeMemory()
        {
            for(MemoryFreeBlock* ptr = this.FirstFreeBlock; ptr != null; ptr = ptr->Next)
 8008172:	69c0      	ldr	r0, [r0, #28]
 8008174:	9103      	str	r1, [sp, #12]
 8008176:	9002      	str	r0, [sp, #8]
 8008178:	e7ff      	b.n	800817a <MemorySegment_DirtyFreeMemory$4573+0xe>
 800817a:	9802      	ldr	r0, [sp, #8]
 800817c:	4601      	mov	r1, r0
 800817e:	2800      	cmp	r0, #0
 8008180:	9001      	str	r0, [sp, #4]
 8008182:	9100      	str	r1, [sp, #0]
 8008184:	d008      	beq.n	8008198 <MemorySegment_DirtyFreeMemory$4573+0x2c>
 8008186:	e7ff      	b.n	8008188 <MemorySegment_DirtyFreeMemory$4573+0x1c>
            {
                ptr->DirtyFreeMemory();
 8008188:	9800      	ldr	r0, [sp, #0]
 800818a:	3808      	subs	r0, #8
 800818c:	f7ff fe2e 	bl	8007dec <MemoryFreeBlock_DirtyFreeMemory$4541>
            }
        }

        public void DirtyFreeMemory()
        {
            for(MemoryFreeBlock* ptr = this.FirstFreeBlock; ptr != null; ptr = ptr->Next)
 8008190:	9801      	ldr	r0, [sp, #4]
 8008192:	6801      	ldr	r1, [r0, #0]
 8008194:	9102      	str	r1, [sp, #8]
 8008196:	e7f0      	b.n	800817a <MemorySegment_DirtyFreeMemory$4573+0xe>
 8008198:	b004      	add	sp, #16
 800819a:	bd80      	pop	{r7, pc}

0800819c <MemorySegment_Allocate$4575>:
 800819c:	b580      	push	{r7, lr}
 800819e:	b08a      	sub	sp, #40	; 0x28
 80081a0:	4602      	mov	r2, r0
 80081a2:	ab08      	add	r3, sp, #32
 80081a4:	f04f 0c00 	mov.w	ip, #0
 80081a8:	f8cd c020 	str.w	ip, [sp, #32]
            }
        }

        public UIntPtr Allocate( uint size )
        {
            for(MemoryFreeBlock* ptr = this.FirstFreeBlock; ptr != null; ptr = ptr->Next)
 80081ac:	69c0      	ldr	r0, [r0, #28]
 80081ae:	9307      	str	r3, [sp, #28]
 80081b0:	9106      	str	r1, [sp, #24]
 80081b2:	9205      	str	r2, [sp, #20]
 80081b4:	9004      	str	r0, [sp, #16]
 80081b6:	e7ff      	b.n	80081b8 <MemorySegment_Allocate$4575+0x1c>
 80081b8:	9804      	ldr	r0, [sp, #16]
 80081ba:	9904      	ldr	r1, [sp, #16]
 80081bc:	2800      	cmp	r0, #0
 80081be:	9103      	str	r1, [sp, #12]
 80081c0:	d016      	beq.n	80081f0 <MemorySegment_Allocate$4575+0x54>
 80081c2:	e7ff      	b.n	80081c4 <MemorySegment_Allocate$4575+0x28>
            {
                UIntPtr res = ptr->Allocate( ref this, size );
 80081c4:	9803      	ldr	r0, [sp, #12]
 80081c6:	3808      	subs	r0, #8
 80081c8:	9905      	ldr	r1, [sp, #20]
 80081ca:	3108      	adds	r1, #8
 80081cc:	9a06      	ldr	r2, [sp, #24]
 80081ce:	f7ff fe4b 	bl	8007e68 <MemoryFreeBlock_Allocate$4543>
 80081d2:	9907      	ldr	r1, [sp, #28]
 80081d4:	6008      	str	r0, [r1, #0]
 80081d6:	4814      	ldr	r0, [pc, #80]	; (8008228 <MemorySegment_Allocate$4575+0x8c>)
 80081d8:	4a15      	ldr	r2, [pc, #84]	; (8008230 <MemorySegment_Allocate$4575+0x94>)
 80081da:	447a      	add	r2, pc
 80081dc:	4410      	add	r0, r2
 80081de:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
 80081e2:	9808      	ldr	r0, [sp, #32]

                if(res != UIntPtr.Zero)
 80081e4:	f7fb fa0c 	bl	8003600 <UIntPtr_op_Inequality$2888>
 80081e8:	f010 0fff 	tst.w	r0, #255	; 0xff
 80081ec:	d10e      	bne.n	800820c <MemorySegment_Allocate$4575+0x70>
 80081ee:	e017      	b.n	8008220 <MemorySegment_Allocate$4575+0x84>
 80081f0:	a809      	add	r0, sp, #36	; 0x24
 80081f2:	490d      	ldr	r1, [pc, #52]	; (8008228 <MemorySegment_Allocate$4575+0x8c>)
 80081f4:	4a0d      	ldr	r2, [pc, #52]	; (800822c <MemorySegment_Allocate$4575+0x90>)
 80081f6:	447a      	add	r2, pc
 80081f8:	4411      	add	r1, r2
 80081fa:	f8d1 1104 	ldr.w	r1, [r1, #260]	; 0x104
 80081fe:	9109      	str	r1, [sp, #36]	; 0x24

                    return res;
                }
            }

            return UIntPtr.Zero;
 8008200:	9002      	str	r0, [sp, #8]
 8008202:	e7ff      	b.n	8008204 <MemorySegment_Allocate$4575+0x68>
 8008204:	9802      	ldr	r0, [sp, #8]
 8008206:	6800      	ldr	r0, [r0, #0]
 8008208:	b00a      	add	sp, #40	; 0x28
 800820a:	bd80      	pop	{r7, pc}
 800820c:	a808      	add	r0, sp, #32
            {
                UIntPtr res = ptr->Allocate( ref this, size );

                if(res != UIntPtr.Zero)
                {
                    Log("Allocated %d bytes from free block 0x%x at 0x%x", (int)size, (int)ptr, (int)res.ToUInt32());
 800820e:	3808      	subs	r0, #8
 8008210:	f7fb f9b2 	bl	8003578 <UIntPtr_ToUInt32$2870>
 8008214:	a909      	add	r1, sp, #36	; 0x24
 8008216:	9a08      	ldr	r2, [sp, #32]
 8008218:	9209      	str	r2, [sp, #36]	; 0x24

                    return res;
 800821a:	9001      	str	r0, [sp, #4]
 800821c:	9102      	str	r1, [sp, #8]
 800821e:	e7f1      	b.n	8008204 <MemorySegment_Allocate$4575+0x68>
            }
        }

        public UIntPtr Allocate( uint size )
        {
            for(MemoryFreeBlock* ptr = this.FirstFreeBlock; ptr != null; ptr = ptr->Next)
 8008220:	9803      	ldr	r0, [sp, #12]
 8008222:	6801      	ldr	r1, [r0, #0]
 8008224:	9104      	str	r1, [sp, #16]
 8008226:	e7c7      	b.n	80081b8 <MemorySegment_Allocate$4575+0x1c>
 8008228:	fffffe3c 	.word	0xfffffe3c
 800822c:	17ff95da 	.word	0x17ff95da
 8008230:	17ff95f6 	.word	0x17ff95f6

08008234 <LinearMemoryManager_InitializeMemoryManager$4638>:
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	4601      	mov	r1, r0
        //

        public MemorySegment*   Next;
        public MemorySegment*   Previous;

        public UIntPtr          Beginning;
 800823a:	9103      	str	r1, [sp, #12]
 800823c:	f000 f836 	bl	80082ac <MemoryManager_InitializeMemoryManager$4893>
 8008240:	2000      	movs	r0, #0
        public UIntPtr          End;
        public MemoryAttributes Attributes;

        public MemoryFreeBlock* FirstFreeBlock;
 8008242:	9002      	str	r0, [sp, #8]
 8008244:	e7ff      	b.n	8008246 <LinearMemoryManager_InitializeMemoryManager$4638+0x12>
 8008246:	9802      	ldr	r0, [sp, #8]
            }

            if (!mergeWithNext)
            {
                // Unless next block was a free block, look for gap after the object to be deleted
                uint* target = (uint*)AddressMath.Increment(newFreeBlockBaseAddress, newFreeBlockSize).ToPointer();
 8008248:	4915      	ldr	r1, [pc, #84]	; (80082a0 <LinearMemoryManager_InitializeMemoryManager$4638+0x6c>)
 800824a:	4a16      	ldr	r2, [pc, #88]	; (80082a4 <LinearMemoryManager_InitializeMemoryManager$4638+0x70>)
 800824c:	447a      	add	r2, pc
 800824e:	4411      	add	r1, r2
 8008250:	6889      	ldr	r1, [r1, #8]

        public UIntPtr          Beginning;
        public UIntPtr          End;
        public MemoryAttributes Attributes;

        public MemoryFreeBlock* FirstFreeBlock;
 8008252:	4288      	cmp	r0, r1
 8008254:	9001      	str	r0, [sp, #4]
 8008256:	da0e      	bge.n	8008276 <LinearMemoryManager_InitializeMemoryManager$4638+0x42>
 8008258:	e7ff      	b.n	800825a <LinearMemoryManager_InitializeMemoryManager$4638+0x26>
 800825a:	4811      	ldr	r0, [pc, #68]	; (80082a0 <LinearMemoryManager_InitializeMemoryManager$4638+0x6c>)
 800825c:	4912      	ldr	r1, [pc, #72]	; (80082a8 <LinearMemoryManager_InitializeMemoryManager$4638+0x74>)
 800825e:	4479      	add	r1, pc
 8008260:	4408      	add	r0, r1
 8008262:	9901      	ldr	r1, [sp, #4]
 8008264:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8008268:	68c0      	ldr	r0, [r0, #12]
        public MemoryFreeBlock* LastFreeBlock;

 800826a:	7d42      	ldrb	r2, [r0, #21]
 800826c:	f012 0f04 	tst.w	r2, #4
 8008270:	9000      	str	r0, [sp, #0]
 8008272:	d102      	bne.n	800827a <LinearMemoryManager_InitializeMemoryManager$4638+0x46>
 8008274:	e007      	b.n	8008286 <LinearMemoryManager_InitializeMemoryManager$4638+0x52>
 8008276:	b004      	add	sp, #16
 8008278:	bd80      	pop	{r7, pc}
 800827a:	9800      	ldr	r0, [sp, #0]
 800827c:	7cc1      	ldrb	r1, [r0, #19]
 800827e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8008282:	d004      	beq.n	800828e <LinearMemoryManager_InitializeMemoryManager$4638+0x5a>
 8008284:	e7ff      	b.n	8008286 <LinearMemoryManager_InitializeMemoryManager$4638+0x52>
        //
        // Helper Methods
        //

        [TS.WellKnownMethod("DebugGC_MemorySegment_Initialize")]
 8008286:	9801      	ldr	r0, [sp, #4]
 8008288:	1c41      	adds	r1, r0, #1
 800828a:	9102      	str	r1, [sp, #8]
 800828c:	e7db      	b.n	8008246 <LinearMemoryManager_InitializeMemoryManager$4638+0x12>
 800828e:	9800      	ldr	r0, [sp, #0]
 8008290:	6881      	ldr	r1, [r0, #8]
 8008292:	68c2      	ldr	r2, [r0, #12]
        public MemoryFreeBlock* FirstFreeBlock;
        public MemoryFreeBlock* LastFreeBlock;

        //
        // Helper Methods
        //
 8008294:	6903      	ldr	r3, [r0, #16]
 8008296:	9803      	ldr	r0, [sp, #12]
 8008298:	f000 f811 	bl	80082be <MemoryManager_AddLinearSection$4902>

 800829c:	e7f3      	b.n	8008286 <LinearMemoryManager_InitializeMemoryManager$4638+0x52>
 800829e:	46c0      	nop			; (mov r8, r8)
 80082a0:	e8014fa0 	.word	0xe8014fa0
 80082a4:	17ff9584 	.word	0x17ff9584
 80082a8:	17ff9572 	.word	0x17ff9572

080082ac <MemoryManager_InitializeMemoryManager$4893>:
 80082ac:	b081      	sub	sp, #4
 80082ae:	4601      	mov	r1, r0
 80082b0:	2200      	movs	r2, #0
 80082b2:	6082      	str	r2, [r0, #8]
 80082b4:	60c2      	str	r2, [r0, #12]
 80082b6:	6102      	str	r2, [r0, #16]
 80082b8:	9100      	str	r1, [sp, #0]
 80082ba:	b001      	add	sp, #4
 80082bc:	4770      	bx	lr

080082be <MemoryManager_AddLinearSection$4902>:
 80082be:	b570      	push	{r4, r5, r6, lr}
 80082c0:	b08c      	sub	sp, #48	; 0x30
 80082c2:	4694      	mov	ip, r2
 80082c4:	468e      	mov	lr, r1
 80082c6:	9109      	str	r1, [sp, #36]	; 0x24
 80082c8:	4614      	mov	r4, r2
 80082ca:	ad09      	add	r5, sp, #36	; 0x24
 80082cc:	910a      	str	r1, [sp, #40]	; 0x28
 80082ce:	920b      	str	r2, [sp, #44]	; 0x2c
 80082d0:	a90b      	add	r1, sp, #44	; 0x2c

        public virtual void ZeroFreeMemory()
        {
            MemorySegment* ptr = m_heapHead;

            while(ptr != null)
 80082d2:	3908      	subs	r1, #8
 80082d4:	9008      	str	r0, [sp, #32]
 80082d6:	4608      	mov	r0, r1
 80082d8:	f8cd e01c 	str.w	lr, [sp, #28]
 80082dc:	9406      	str	r4, [sp, #24]
 80082de:	9505      	str	r5, [sp, #20]
 80082e0:	9304      	str	r3, [sp, #16]
 80082e2:	f8cd c00c 	str.w	ip, [sp, #12]
 80082e6:	f7fb f947 	bl	8003578 <UIntPtr_ToUInt32$2870>
 80082ea:	a90a      	add	r1, sp, #40	; 0x28
 80082ec:	3908      	subs	r1, #8
 80082ee:	9002      	str	r0, [sp, #8]
 80082f0:	4608      	mov	r0, r1
 80082f2:	f7fb f941 	bl	8003578 <UIntPtr_ToUInt32$2870>
 80082f6:	9902      	ldr	r1, [sp, #8]
 80082f8:	1a08      	subs	r0, r1, r0
                                         UIntPtr          end        ,
                                         MemoryAttributes attributes )
        {
            uint size = AddressMath.RangeSize( beginning, end );

            if(size >= MemorySegment.MinimumSpaceRequired())
 80082fa:	2830      	cmp	r0, #48	; 0x30
 80082fc:	d328      	bcc.n	8008350 <MemoryManager_AddLinearSection$4902+0x92>
 80082fe:	e7ff      	b.n	8008300 <MemoryManager_AddLinearSection$4902+0x42>
                {
                    m_heapTail->Next = seg;
                }

                m_heapTail = seg;

 8008300:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008302:	2100      	movs	r1, #0
 8008304:	6001      	str	r1, [r0, #0]
            if(size >= MemorySegment.MinimumSpaceRequired())
            {
                MemorySegment* seg = (MemorySegment*)beginning.ToPointer();

                seg->Next       = null;
                seg->Previous   = m_heapTail;
 8008306:	9908      	ldr	r1, [sp, #32]
 8008308:	68ca      	ldr	r2, [r1, #12]
 800830a:	6042      	str	r2, [r0, #4]
                seg->Beginning  = beginning;
 800830c:	f100 0208 	add.w	r2, r0, #8
 8008310:	9b05      	ldr	r3, [sp, #20]
 8008312:	f893 c000 	ldrb.w	ip, [r3]
 8008316:	f893 e001 	ldrb.w	lr, [r3, #1]
 800831a:	789c      	ldrb	r4, [r3, #2]
 800831c:	78dd      	ldrb	r5, [r3, #3]
 800831e:	f880 e009 	strb.w	lr, [r0, #9]
 8008322:	ea44 2605 	orr.w	r6, r4, r5, lsl #8
 8008326:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
 800832a:	ea4c 4c06 	orr.w	ip, ip, r6, lsl #16
 800832e:	f802 cb02 	strb.w	ip, [r2], #2
 8008332:	7055      	strb	r5, [r2, #1]
 8008334:	7014      	strb	r4, [r2, #0]
 8008336:	9a06      	ldr	r2, [sp, #24]
 8008338:	60c2      	str	r2, [r0, #12]
 800833a:	f8dd c010 	ldr.w	ip, [sp, #16]
 800833e:	f8c0 c010 	str.w	ip, [r0, #16]
                seg->End        = end;
                seg->Attributes = attributes;

                if(m_heapHead == null)
 8008342:	f8d1 e008 	ldr.w	lr, [r1, #8]
 8008346:	f1be 0f00 	cmp.w	lr, #0
 800834a:	9001      	str	r0, [sp, #4]
 800834c:	d002      	beq.n	8008354 <MemoryManager_AddLinearSection$4902+0x96>
 800834e:	e005      	b.n	800835c <MemoryManager_AddLinearSection$4902+0x9e>
 8008350:	b00c      	add	sp, #48	; 0x30
 8008352:	bd70      	pop	{r4, r5, r6, pc}
 8008354:	9801      	ldr	r0, [sp, #4]
 8008356:	9908      	ldr	r1, [sp, #32]
 8008358:	6088      	str	r0, [r1, #8]
                {
                    m_heapHead = seg;
                }
 800835a:	e7ff      	b.n	800835c <MemoryManager_AddLinearSection$4902+0x9e>

                if(m_heapTail != null)
 800835c:	9808      	ldr	r0, [sp, #32]
 800835e:	68c1      	ldr	r1, [r0, #12]
 8008360:	2900      	cmp	r1, #0
 8008362:	d005      	beq.n	8008370 <MemoryManager_AddLinearSection$4902+0xb2>
 8008364:	e7ff      	b.n	8008366 <MemoryManager_AddLinearSection$4902+0xa8>
                {
                    m_heapTail->Next = seg;
 8008366:	9808      	ldr	r0, [sp, #32]
 8008368:	68c1      	ldr	r1, [r0, #12]
 800836a:	9a01      	ldr	r2, [sp, #4]
 800836c:	600a      	str	r2, [r1, #0]
                }
 800836e:	e7ff      	b.n	8008370 <MemoryManager_AddLinearSection$4902+0xb2>
 8008370:	9801      	ldr	r0, [sp, #4]
 8008372:	9908      	ldr	r1, [sp, #32]
 8008374:	60c8      	str	r0, [r1, #12]

                m_heapTail = seg;

                seg->Initialize();
 8008376:	3808      	subs	r0, #8
 8008378:	f7ff febc 	bl	80080f4 <MemorySegment_Initialize$4569>
            }
 800837c:	e7e8      	b.n	8008350 <MemoryManager_AddLinearSection$4902+0x92>

0800837e <MemoryManager_ZeroFreeMemory$4895>:
 800837e:	b580      	push	{r7, lr}
 8008380:	b084      	sub	sp, #16
 8008382:	4601      	mov	r1, r0
        {
        }

        public virtual void ZeroFreeMemory()
        {
            MemorySegment* ptr = m_heapHead;
 8008384:	6880      	ldr	r0, [r0, #8]
 8008386:	9103      	str	r1, [sp, #12]
 8008388:	9002      	str	r0, [sp, #8]
 800838a:	e7ff      	b.n	800838c <MemoryManager_ZeroFreeMemory$4895+0xe>

            while(ptr != null)
            {
                ptr->ZeroFreeMemory();

                ptr = ptr->Next;
 800838c:	9802      	ldr	r0, [sp, #8]
 800838e:	4601      	mov	r1, r0

        public virtual void ZeroFreeMemory()
        {
            MemorySegment* ptr = m_heapHead;

            while(ptr != null)
 8008390:	2800      	cmp	r0, #0
 8008392:	9001      	str	r0, [sp, #4]
 8008394:	9100      	str	r1, [sp, #0]
 8008396:	d008      	beq.n	80083aa <MemoryManager_ZeroFreeMemory$4895+0x2c>
 8008398:	e7ff      	b.n	800839a <MemoryManager_ZeroFreeMemory$4895+0x1c>
            {
                ptr->ZeroFreeMemory();
 800839a:	9800      	ldr	r0, [sp, #0]
 800839c:	3808      	subs	r0, #8
 800839e:	f7ff fecd 	bl	800813c <MemorySegment_ZeroFreeMemory$4571>

                ptr = ptr->Next;
 80083a2:	9801      	ldr	r0, [sp, #4]
 80083a4:	6801      	ldr	r1, [r0, #0]
            }
 80083a6:	9102      	str	r1, [sp, #8]
 80083a8:	e7f0      	b.n	800838c <MemoryManager_ZeroFreeMemory$4895+0xe>
 80083aa:	b004      	add	sp, #16
 80083ac:	bd80      	pop	{r7, pc}

080083ae <MemoryManager_DirtyFreeMemory$4896>:
 80083ae:	b580      	push	{r7, lr}
 80083b0:	b084      	sub	sp, #16
 80083b2:	4601      	mov	r1, r0
        }

        public virtual void DirtyFreeMemory()
        {
            MemorySegment* ptr = m_heapHead;
 80083b4:	6880      	ldr	r0, [r0, #8]
 80083b6:	9103      	str	r1, [sp, #12]
 80083b8:	9002      	str	r0, [sp, #8]
 80083ba:	e7ff      	b.n	80083bc <MemoryManager_DirtyFreeMemory$4896+0xe>

            while(ptr != null)
            {
                ptr->DirtyFreeMemory();

                ptr = ptr->Next;
 80083bc:	9802      	ldr	r0, [sp, #8]
 80083be:	4601      	mov	r1, r0

        public virtual void DirtyFreeMemory()
        {
            MemorySegment* ptr = m_heapHead;

            while(ptr != null)
 80083c0:	2800      	cmp	r0, #0
 80083c2:	9001      	str	r0, [sp, #4]
 80083c4:	9100      	str	r1, [sp, #0]
 80083c6:	d008      	beq.n	80083da <MemoryManager_DirtyFreeMemory$4896+0x2c>
 80083c8:	e7ff      	b.n	80083ca <MemoryManager_DirtyFreeMemory$4896+0x1c>
            {
                ptr->DirtyFreeMemory();
 80083ca:	9800      	ldr	r0, [sp, #0]
 80083cc:	3808      	subs	r0, #8
 80083ce:	f7ff fecd 	bl	800816c <MemorySegment_DirtyFreeMemory$4573>

                ptr = ptr->Next;
 80083d2:	9801      	ldr	r0, [sp, #4]
 80083d4:	6801      	ldr	r1, [r0, #0]
            }
 80083d6:	9102      	str	r1, [sp, #8]
 80083d8:	e7f0      	b.n	80083bc <MemoryManager_DirtyFreeMemory$4896+0xe>
 80083da:	b004      	add	sp, #16
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	46c0      	nop			; (mov r8, r8)

080083e0 <LinearMemoryManager_Allocate$4640>:
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b096      	sub	sp, #88	; 0x58
 80083e4:	2200      	movs	r2, #0
 80083e6:	9213      	str	r2, [sp, #76]	; 0x4c
 80083e8:	9212      	str	r2, [sp, #72]	; 0x48
 80083ea:	9211      	str	r2, [sp, #68]	; 0x44
 80083ec:	aa11      	add	r2, sp, #68	; 0x44

        //--//

        public override unsafe UIntPtr Allocate( uint size )
        {
            using(SmartHandles.YieldLockHolder hnd = new SmartHandles.YieldLockHolder( MemoryManager.Lock ))
 80083ee:	4613      	mov	r3, r2
 80083f0:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 80085d8 <LinearMemoryManager_Allocate$4640+0x1f8>
 80083f4:	f8df e1e4 	ldr.w	lr, [pc, #484]	; 80085dc <LinearMemoryManager_Allocate$4640+0x1fc>
 80083f8:	44fe      	add	lr, pc
 80083fa:	44f4      	add	ip, lr
 80083fc:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
 8008400:	f8df c1dc 	ldr.w	ip, [pc, #476]	; 80085e0 <LinearMemoryManager_Allocate$4640+0x200>
 8008404:	44f4      	add	ip, lr
 8008406:	f8dc c0f8 	ldr.w	ip, [ip, #248]	; 0xf8
 800840a:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
                }
            }
        }

        public override void InitializationComplete()
        {
 800840e:	f1bc 0f00 	cmp.w	ip, #0
 8008412:	9110      	str	r1, [sp, #64]	; 0x40
 8008414:	900f      	str	r0, [sp, #60]	; 0x3c
 8008416:	930e      	str	r3, [sp, #56]	; 0x38
 8008418:	920d      	str	r2, [sp, #52]	; 0x34
 800841a:	d007      	beq.n	800842c <LinearMemoryManager_Allocate$4640+0x4c>
 800841c:	e7ff      	b.n	800841e <LinearMemoryManager_Allocate$4640+0x3e>
 800841e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008420:	6841      	ldr	r1, [r0, #4]
 8008422:	6909      	ldr	r1, [r1, #16]
 8008424:	aa14      	add	r2, sp, #80	; 0x50
 8008426:	9114      	str	r1, [sp, #80]	; 0x50
 8008428:	920c      	str	r2, [sp, #48]	; 0x30
 800842a:	e004      	b.n	8008436 <LinearMemoryManager_Allocate$4640+0x56>
 800842c:	2002      	movs	r0, #2
 800842e:	9014      	str	r0, [sp, #80]	; 0x50
 8008430:	a814      	add	r0, sp, #80	; 0x50
                }
            }
        }

        public override void InitializationComplete()
        {
 8008432:	900c      	str	r0, [sp, #48]	; 0x30
 8008434:	e7ff      	b.n	8008436 <LinearMemoryManager_Allocate$4640+0x56>
 8008436:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008438:	7801      	ldrb	r1, [r0, #0]
 800843a:	7842      	ldrb	r2, [r0, #1]
 800843c:	7883      	ldrb	r3, [r0, #2]
 800843e:	78c0      	ldrb	r0, [r0, #3]
 8008440:	ea43 2c00 	orr.w	ip, r3, r0, lsl #8
 8008444:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8008448:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800844c:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 8008450:	f80c 1f08 	strb.w	r1, [ip, #8]!
 8008454:	f88c 0003 	strb.w	r0, [ip, #3]
 8008458:	f88c 3002 	strb.w	r3, [ip, #2]
 800845c:	f88c 2001 	strb.w	r2, [ip, #1]
            if(MemoryManager.Configuration.TrashFreeMemory)
            {
 8008460:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 8008464:	485c      	ldr	r0, [pc, #368]	; (80085d8 <LinearMemoryManager_Allocate$4640+0x1f8>)
 8008466:	4a5f      	ldr	r2, [pc, #380]	; (80085e4 <LinearMemoryManager_Allocate$4640+0x204>)
 8008468:	447a      	add	r2, pc
 800846a:	4410      	add	r0, r2
 800846c:	f7ff f802 	bl	8007474 <YieldLock_Acquire$4972>

        public override unsafe UIntPtr Allocate( uint size )
        {
            using(SmartHandles.YieldLockHolder hnd = new SmartHandles.YieldLockHolder( MemoryManager.Lock ))
            {
                MemorySegment* ptr = m_active;
 8008470:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008472:	6901      	ldr	r1, [r0, #16]

                if(ptr != null)
 8008474:	2900      	cmp	r1, #0
 8008476:	910b      	str	r1, [sp, #44]	; 0x2c
 8008478:	d014      	beq.n	80084a4 <LinearMemoryManager_Allocate$4640+0xc4>
 800847a:	e7ff      	b.n	800847c <LinearMemoryManager_Allocate$4640+0x9c>
                {
                    UIntPtr res = ptr->Allocate( size );
 800847c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800847e:	3808      	subs	r0, #8
 8008480:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008482:	f7ff fe8b 	bl	800819c <MemorySegment_Allocate$4575>
 8008486:	4601      	mov	r1, r0
 8008488:	4a55      	ldr	r2, [pc, #340]	; (80085e0 <LinearMemoryManager_Allocate$4640+0x200>)
 800848a:	4b57      	ldr	r3, [pc, #348]	; (80085e8 <LinearMemoryManager_Allocate$4640+0x208>)
 800848c:	447b      	add	r3, pc
 800848e:	441a      	add	r2, r3
 8008490:	f8d2 2104 	ldr.w	r2, [r2, #260]	; 0x104

                    if(res != UIntPtr.Zero)
 8008494:	910a      	str	r1, [sp, #40]	; 0x28
 8008496:	4611      	mov	r1, r2
 8008498:	f7fb f8b2 	bl	8003600 <UIntPtr_op_Inequality$2888>
 800849c:	f010 0fff 	tst.w	r0, #255	; 0xff
 80084a0:	d176      	bne.n	8008590 <LinearMemoryManager_Allocate$4640+0x1b0>
 80084a2:	e087      	b.n	80085b4 <LinearMemoryManager_Allocate$4640+0x1d4>
                    {
                        return res;
                    }
                }

                ptr = m_heapHead;
 80084a4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80084a6:	6881      	ldr	r1, [r0, #8]
 80084a8:	9109      	str	r1, [sp, #36]	; 0x24
 80084aa:	e7ff      	b.n	80084ac <LinearMemoryManager_Allocate$4640+0xcc>
                while(ptr != null)
 80084ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80084b0:	2800      	cmp	r0, #0
 80084b2:	9108      	str	r1, [sp, #32]
 80084b4:	d018      	beq.n	80084e8 <LinearMemoryManager_Allocate$4640+0x108>
 80084b6:	e7ff      	b.n	80084b8 <LinearMemoryManager_Allocate$4640+0xd8>
                {
                    UIntPtr res = ptr->Allocate( size );
 80084b8:	9808      	ldr	r0, [sp, #32]
 80084ba:	3808      	subs	r0, #8
 80084bc:	9910      	ldr	r1, [sp, #64]	; 0x40
 80084be:	f7ff fe6d 	bl	800819c <MemorySegment_Allocate$4575>
 80084c2:	4601      	mov	r1, r0
 80084c4:	4a46      	ldr	r2, [pc, #280]	; (80085e0 <LinearMemoryManager_Allocate$4640+0x200>)
 80084c6:	4b4a      	ldr	r3, [pc, #296]	; (80085f0 <LinearMemoryManager_Allocate$4640+0x210>)
 80084c8:	447b      	add	r3, pc
 80084ca:	441a      	add	r2, r3
 80084cc:	f8d2 2104 	ldr.w	r2, [r2, #260]	; 0x104

                    if(res != UIntPtr.Zero)
 80084d0:	9107      	str	r1, [sp, #28]
 80084d2:	4611      	mov	r1, r2
 80084d4:	f7fb f894 	bl	8003600 <UIntPtr_op_Inequality$2888>
 80084d8:	f010 0fff 	tst.w	r0, #255	; 0xff
 80084dc:	9807      	ldr	r0, [sp, #28]
 80084de:	9908      	ldr	r1, [sp, #32]
 80084e0:	9006      	str	r0, [sp, #24]
 80084e2:	9105      	str	r1, [sp, #20]
 80084e4:	d12a      	bne.n	800853c <LinearMemoryManager_Allocate$4640+0x15c>
 80084e6:	e03e      	b.n	8008566 <LinearMemoryManager_Allocate$4640+0x186>
 80084e8:	a815      	add	r0, sp, #84	; 0x54
 80084ea:	493d      	ldr	r1, [pc, #244]	; (80085e0 <LinearMemoryManager_Allocate$4640+0x200>)
 80084ec:	4a3f      	ldr	r2, [pc, #252]	; (80085ec <LinearMemoryManager_Allocate$4640+0x20c>)
 80084ee:	447a      	add	r2, pc
 80084f0:	4411      	add	r1, r2
 80084f2:	f8d1 1104 	ldr.w	r1, [r1, #260]	; 0x104
 80084f6:	9115      	str	r1, [sp, #84]	; 0x54
                ZeroFreeMemory();
            }
        }

        //--//

 80084f8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80084fa:	680a      	ldr	r2, [r1, #0]
 80084fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084fe:	6859      	ldr	r1, [r3, #4]
 8008500:	9004      	str	r0, [sp, #16]
 8008502:	4610      	mov	r0, r2
 8008504:	f7ff f808 	bl	8007518 <YieldLock_Release$4973>
        public override unsafe UIntPtr Allocate( uint size )
        {
            using(SmartHandles.YieldLockHolder hnd = new SmartHandles.YieldLockHolder( MemoryManager.Lock ))
            {
 8008508:	980e      	ldr	r0, [sp, #56]	; 0x38
 800850a:	6841      	ldr	r1, [r0, #4]
 800850c:	2900      	cmp	r1, #0
 800850e:	d007      	beq.n	8008520 <LinearMemoryManager_Allocate$4640+0x140>
 8008510:	e7ff      	b.n	8008512 <LinearMemoryManager_Allocate$4640+0x132>
 8008512:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008514:	6841      	ldr	r1, [r0, #4]
 8008516:	6882      	ldr	r2, [r0, #8]
 8008518:	6909      	ldr	r1, [r1, #16]
 800851a:	4291      	cmp	r1, r2
 800851c:	d107      	bne.n	800852e <LinearMemoryManager_Allocate$4640+0x14e>
 800851e:	e7ff      	b.n	8008520 <LinearMemoryManager_Allocate$4640+0x140>
 8008520:	9804      	ldr	r0, [sp, #16]
                    }

                    ptr = ptr->Next;
                }
                
                return UIntPtr.Zero;
 8008522:	9003      	str	r0, [sp, #12]
 8008524:	e7ff      	b.n	8008526 <LinearMemoryManager_Allocate$4640+0x146>
 8008526:	9803      	ldr	r0, [sp, #12]
 8008528:	6800      	ldr	r0, [r0, #0]
 800852a:	b016      	add	sp, #88	; 0x58
 800852c:	bd80      	pop	{r7, pc}
        public override unsafe UIntPtr Allocate( uint size )
        {
            using(SmartHandles.YieldLockHolder hnd = new SmartHandles.YieldLockHolder( MemoryManager.Lock ))
            {
                MemorySegment* ptr = m_active;

 800852e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008530:	6840      	ldr	r0, [r0, #4]
 8008532:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008534:	6889      	ldr	r1, [r1, #8]
 8008536:	f7fb f9cf 	bl	80038d8 <Thread_set_Priority$4028>
                if(ptr != null)
 800853a:	e7f1      	b.n	8008520 <LinearMemoryManager_Allocate$4640+0x140>
 800853c:	9805      	ldr	r0, [sp, #20]
 800853e:	9906      	ldr	r1, [sp, #24]
 8008540:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008542:	6110      	str	r0, [r2, #16]
 8008544:	a815      	add	r0, sp, #84	; 0x54
 8008546:	9115      	str	r1, [sp, #84]	; 0x54
                ZeroFreeMemory();
            }
        }

        //--//

 8008548:	990d      	ldr	r1, [sp, #52]	; 0x34
 800854a:	680b      	ldr	r3, [r1, #0]
 800854c:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 8008550:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8008554:	9002      	str	r0, [sp, #8]
 8008556:	4618      	mov	r0, r3
 8008558:	f7fe ffde 	bl	8007518 <YieldLock_Release$4973>
        public override unsafe UIntPtr Allocate( uint size )
        {
            using(SmartHandles.YieldLockHolder hnd = new SmartHandles.YieldLockHolder( MemoryManager.Lock ))
            {
 800855c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800855e:	6841      	ldr	r1, [r0, #4]
 8008560:	2900      	cmp	r1, #0
 8008562:	d104      	bne.n	800856e <LinearMemoryManager_Allocate$4640+0x18e>
 8008564:	e00a      	b.n	800857c <LinearMemoryManager_Allocate$4640+0x19c>
                        m_active = ptr;

                        return res;
                    }

                    ptr = ptr->Next;
 8008566:	9808      	ldr	r0, [sp, #32]
 8008568:	6801      	ldr	r1, [r0, #0]
                }
 800856a:	9109      	str	r1, [sp, #36]	; 0x24
 800856c:	e79e      	b.n	80084ac <LinearMemoryManager_Allocate$4640+0xcc>
        //--//

        public override unsafe UIntPtr Allocate( uint size )
        {
            using(SmartHandles.YieldLockHolder hnd = new SmartHandles.YieldLockHolder( MemoryManager.Lock ))
            {
 800856e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008570:	6841      	ldr	r1, [r0, #4]
 8008572:	6882      	ldr	r2, [r0, #8]
 8008574:	6909      	ldr	r1, [r1, #16]
 8008576:	4291      	cmp	r1, r2
 8008578:	d103      	bne.n	8008582 <LinearMemoryManager_Allocate$4640+0x1a2>
 800857a:	e7ff      	b.n	800857c <LinearMemoryManager_Allocate$4640+0x19c>
 800857c:	9802      	ldr	r0, [sp, #8]
                    }

                    ptr = ptr->Next;
                }
                
                return UIntPtr.Zero;
 800857e:	9003      	str	r0, [sp, #12]
 8008580:	e7d1      	b.n	8008526 <LinearMemoryManager_Allocate$4640+0x146>
        public override unsafe UIntPtr Allocate( uint size )
        {
            using(SmartHandles.YieldLockHolder hnd = new SmartHandles.YieldLockHolder( MemoryManager.Lock ))
            {
                MemorySegment* ptr = m_active;

 8008582:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008584:	6840      	ldr	r0, [r0, #4]
 8008586:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008588:	6889      	ldr	r1, [r1, #8]
 800858a:	f7fb f9a5 	bl	80038d8 <Thread_set_Priority$4028>
                if(ptr != null)
 800858e:	e7f5      	b.n	800857c <LinearMemoryManager_Allocate$4640+0x19c>
 8008590:	a815      	add	r0, sp, #84	; 0x54
 8008592:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008594:	9115      	str	r1, [sp, #84]	; 0x54
                ZeroFreeMemory();
            }
        }

        //--//

 8008596:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008598:	6813      	ldr	r3, [r2, #0]
 800859a:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 800859e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80085a2:	9001      	str	r0, [sp, #4]
 80085a4:	4618      	mov	r0, r3
 80085a6:	f7fe ffb7 	bl	8007518 <YieldLock_Release$4973>
        public override unsafe UIntPtr Allocate( uint size )
        {
            using(SmartHandles.YieldLockHolder hnd = new SmartHandles.YieldLockHolder( MemoryManager.Lock ))
            {
 80085aa:	980e      	ldr	r0, [sp, #56]	; 0x38
 80085ac:	6841      	ldr	r1, [r0, #4]
 80085ae:	2900      	cmp	r1, #0
 80085b0:	d101      	bne.n	80085b6 <LinearMemoryManager_Allocate$4640+0x1d6>
 80085b2:	e007      	b.n	80085c4 <LinearMemoryManager_Allocate$4640+0x1e4>

                    if(res != UIntPtr.Zero)
                    {
                        return res;
                    }
                }
 80085b4:	e776      	b.n	80084a4 <LinearMemoryManager_Allocate$4640+0xc4>
        //--//

        public override unsafe UIntPtr Allocate( uint size )
        {
            using(SmartHandles.YieldLockHolder hnd = new SmartHandles.YieldLockHolder( MemoryManager.Lock ))
            {
 80085b6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80085b8:	6841      	ldr	r1, [r0, #4]
 80085ba:	6882      	ldr	r2, [r0, #8]
 80085bc:	6909      	ldr	r1, [r1, #16]
 80085be:	4291      	cmp	r1, r2
 80085c0:	d103      	bne.n	80085ca <LinearMemoryManager_Allocate$4640+0x1ea>
 80085c2:	e7ff      	b.n	80085c4 <LinearMemoryManager_Allocate$4640+0x1e4>
 80085c4:	9801      	ldr	r0, [sp, #4]
                    }

                    ptr = ptr->Next;
                }
                
                return UIntPtr.Zero;
 80085c6:	9003      	str	r0, [sp, #12]
 80085c8:	e7ad      	b.n	8008526 <LinearMemoryManager_Allocate$4640+0x146>
        public override unsafe UIntPtr Allocate( uint size )
        {
            using(SmartHandles.YieldLockHolder hnd = new SmartHandles.YieldLockHolder( MemoryManager.Lock ))
            {
                MemorySegment* ptr = m_active;

 80085ca:	980e      	ldr	r0, [sp, #56]	; 0x38
 80085cc:	6840      	ldr	r0, [r0, #4]
 80085ce:	990e      	ldr	r1, [sp, #56]	; 0x38
 80085d0:	6889      	ldr	r1, [r1, #8]
 80085d2:	f7fb f981 	bl	80038d8 <Thread_set_Priority$4028>
                if(ptr != null)
 80085d6:	e7f5      	b.n	80085c4 <LinearMemoryManager_Allocate$4640+0x1e4>
 80085d8:	ffffeb14 	.word	0xffffeb14
 80085dc:	17ff93d8 	.word	0x17ff93d8
 80085e0:	fffffe3c 	.word	0xfffffe3c
 80085e4:	17ff9368 	.word	0x17ff9368
 80085e8:	17ff9344 	.word	0x17ff9344
 80085ec:	17ff92e2 	.word	0x17ff92e2
 80085f0:	17ff9308 	.word	0x17ff9308

080085f4 <BugCheck_Log$4649>:
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b082      	sub	sp, #8
 80085f8:	4601      	mov	r1, r0
            Device.Instance.ProcessBugCheck( code );
        }

        public static void Log(string format)
        {
            Device.Instance.ProcessLog(format);
 80085fa:	4a06      	ldr	r2, [pc, #24]	; (8008614 <BugCheck_Log$4649+0x20>)
 80085fc:	4b06      	ldr	r3, [pc, #24]	; (8008618 <BugCheck_Log$4649+0x24>)
 80085fe:	447b      	add	r3, pc
 8008600:	441a      	add	r2, r3
 8008602:	9001      	str	r0, [sp, #4]
 8008604:	4610      	mov	r0, r2
 8008606:	9a01      	ldr	r2, [sp, #4]
 8008608:	9100      	str	r1, [sp, #0]
 800860a:	4611      	mov	r1, r2
 800860c:	f000 f806 	bl	800861c <Device_ProcessLog$16410>
 8008610:	b002      	add	sp, #8
 8008612:	bd80      	pop	{r7, pc}
 8008614:	e80101ec 	.word	0xe80101ec
 8008618:	17ff91d2 	.word	0x17ff91d2

0800861c <Device_ProcessLog$16410>:
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	4608      	mov	r0, r1
            RTOS.Utilities.Breakpoint( (uint)code ); 
        }

        public override unsafe void ProcessLog(string format)
        {
            fixed (char* pS = (string)(object)format)
 8008622:	f101 0208 	add.w	r2, r1, #8
 8008626:	2900      	cmp	r1, #0
 8008628:	4611      	mov	r1, r2
 800862a:	9203      	str	r2, [sp, #12]
 800862c:	9002      	str	r0, [sp, #8]
 800862e:	9101      	str	r1, [sp, #4]
 8008630:	d005      	beq.n	800863e <Device_ProcessLog$16410+0x22>
 8008632:	e7ff      	b.n	8008634 <Device_ProcessLog$16410+0x18>
 8008634:	9803      	ldr	r0, [sp, #12]
 8008636:	f100 0108 	add.w	r1, r0, #8
 800863a:	9101      	str	r1, [sp, #4]
 800863c:	e7ff      	b.n	800863e <Device_ProcessLog$16410+0x22>
 800863e:	9801      	ldr	r0, [sp, #4]
 8008640:	9902      	ldr	r1, [sp, #8]
 8008642:	68c9      	ldr	r1, [r1, #12]
            {
                uint length = (uint)format.Length;
                RTOS.Utilities.DebugLog0(pS, length);
 8008644:	f014 fcfe 	bl	801d044 <DebugLog0>
 8008648:	b004      	add	sp, #16
 800864a:	bd80      	pop	{r7, pc}

0800864c <Device_ProcessLog$16411>:
 800864c:	b580      	push	{r7, lr}
 800864e:	b084      	sub	sp, #16
 8008650:	4608      	mov	r0, r1
            }
        }

        public override unsafe void ProcessLog(string format, int p1)
        {
            fixed (char* pS = (string)(object)format)
 8008652:	f101 0308 	add.w	r3, r1, #8
 8008656:	2900      	cmp	r1, #0
 8008658:	4619      	mov	r1, r3
 800865a:	9303      	str	r3, [sp, #12]
 800865c:	9202      	str	r2, [sp, #8]
 800865e:	9001      	str	r0, [sp, #4]
 8008660:	9100      	str	r1, [sp, #0]
 8008662:	d005      	beq.n	8008670 <Device_ProcessLog$16411+0x24>
 8008664:	e7ff      	b.n	8008666 <Device_ProcessLog$16411+0x1a>
 8008666:	9803      	ldr	r0, [sp, #12]
 8008668:	f100 0108 	add.w	r1, r0, #8
 800866c:	9100      	str	r1, [sp, #0]
 800866e:	e7ff      	b.n	8008670 <Device_ProcessLog$16411+0x24>
 8008670:	9800      	ldr	r0, [sp, #0]
 8008672:	9901      	ldr	r1, [sp, #4]
 8008674:	68c9      	ldr	r1, [r1, #12]
            {
                uint length = (uint)format.Length;
                RTOS.Utilities.DebugLog1(pS, length, p1);
 8008676:	9a02      	ldr	r2, [sp, #8]
 8008678:	f014 fd0a 	bl	801d090 <DebugLog1>
 800867c:	b004      	add	sp, #16
 800867e:	bd80      	pop	{r7, pc}

08008680 <SchedulerTimeSpan_.ctor$4740>:
 8008680:	b580      	push	{r7, lr}
 8008682:	b083      	sub	sp, #12
 8008684:	4619      	mov	r1, r3
 8008686:	4694      	mov	ip, r2
 8008688:	4686      	mov	lr, r0
 800868a:	60c3      	str	r3, [r0, #12]
 800868c:	6082      	str	r2, [r0, #8]
 800868e:	f8cd e008 	str.w	lr, [sp, #8]
 8008692:	f8cd c004 	str.w	ip, [sp, #4]
 8008696:	9100      	str	r1, [sp, #0]
 8008698:	b003      	add	sp, #12
 800869a:	bd80      	pop	{r7, pc}

0800869c <SchedulerTimeSpan_FromMilliseconds$4760>:
 800869c:	b580      	push	{r7, lr}
 800869e:	b086      	sub	sp, #24
 80086a0:	460a      	mov	r2, r1
 80086a2:	4603      	mov	r3, r0
        public static readonly SchedulerTimeSpan MinValue = new SchedulerTimeSpan( long.MinValue );
        public static readonly SchedulerTimeSpan MaxValue = new SchedulerTimeSpan( long.MaxValue );

        private long m_deltaUnits;

        //
 80086a4:	9203      	str	r2, [sp, #12]
 80086a6:	9302      	str	r3, [sp, #8]
 80086a8:	f01c f876 	bl	8024798 <__aeabi_l2d>
 80086ac:	2200      	movs	r2, #0
 80086ae:	f244 0300 	movw	r3, #16384	; 0x4000
 80086b2:	f2c4 038f 	movt	r3, #16527	; 0x408f
 80086b6:	9201      	str	r2, [sp, #4]
 80086b8:	f01c f89c 	bl	80247f4 <__aeabi_dmul>
 80086bc:	f01c fece 	bl	802545c <__aeabi_d2ulz>
 80086c0:	9a01      	ldr	r2, [sp, #4]
 80086c2:	9205      	str	r2, [sp, #20]
 80086c4:	9204      	str	r2, [sp, #16]
 80086c6:	ab04      	add	r3, sp, #16

        //--//

        public static SchedulerTimeSpan FromMilliseconds( long milliSeconds )
        {
            return new SchedulerTimeSpan( ConvertFromMillisecondsToDeltaUnits( milliSeconds ) );
 80086c8:	3b08      	subs	r3, #8
 80086ca:	9000      	str	r0, [sp, #0]
 80086cc:	4618      	mov	r0, r3
 80086ce:	9a00      	ldr	r2, [sp, #0]
 80086d0:	460b      	mov	r3, r1
 80086d2:	f7ff ffd5 	bl	8008680 <SchedulerTimeSpan_.ctor$4740>
 80086d6:	9804      	ldr	r0, [sp, #16]
 80086d8:	9905      	ldr	r1, [sp, #20]
 80086da:	b006      	add	sp, #24
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	46c0      	nop			; (mov r8, r8)

080086e0 <SchedulerTimeSpan_.cctor$4796>:
    {
        //
        // State
        //

        public static readonly SchedulerTimeSpan MinValue = new SchedulerTimeSpan( long.MinValue );
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b088      	sub	sp, #32
 80086e4:	2000      	movs	r0, #0
 80086e6:	9005      	str	r0, [sp, #20]
 80086e8:	9004      	str	r0, [sp, #16]
 80086ea:	a904      	add	r1, sp, #16
 80086ec:	3908      	subs	r1, #8
 80086ee:	4a2e      	ldr	r2, [pc, #184]	; (80087a8 <SchedulerTimeSpan_.cctor$4796+0xc8>)
 80086f0:	4b2e      	ldr	r3, [pc, #184]	; (80087ac <SchedulerTimeSpan_.cctor$4796+0xcc>)
 80086f2:	447b      	add	r3, pc
 80086f4:	f852 c003 	ldr.w	ip, [r2, r3]
 80086f8:	441a      	add	r2, r3
 80086fa:	6852      	ldr	r2, [r2, #4]
 80086fc:	9003      	str	r0, [sp, #12]
 80086fe:	4608      	mov	r0, r1
 8008700:	9202      	str	r2, [sp, #8]
 8008702:	4662      	mov	r2, ip
 8008704:	9902      	ldr	r1, [sp, #8]
 8008706:	9301      	str	r3, [sp, #4]
 8008708:	460b      	mov	r3, r1
 800870a:	f7ff ffb9 	bl	8008680 <SchedulerTimeSpan_.ctor$4740>
 800870e:	4828      	ldr	r0, [pc, #160]	; (80087b0 <SchedulerTimeSpan_.cctor$4796+0xd0>)
 8008710:	9901      	ldr	r1, [sp, #4]
 8008712:	4408      	add	r0, r1
 8008714:	9a04      	ldr	r2, [sp, #16]
 8008716:	9b05      	ldr	r3, [sp, #20]
 8008718:	f800 2fac 	strb.w	r2, [r0, #172]!
 800871c:	f800 3f04 	strb.w	r3, [r0, #4]!
 8008720:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8008724:	f880 c003 	strb.w	ip, [r0, #3]
 8008728:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800872c:	f880 c002 	strb.w	ip, [r0, #2]
 8008730:	0a1b      	lsrs	r3, r3, #8
 8008732:	7043      	strb	r3, [r0, #1]
 8008734:	0e13      	lsrs	r3, r2, #24
 8008736:	f800 3c01 	strb.w	r3, [r0, #-1]
 800873a:	0c13      	lsrs	r3, r2, #16
 800873c:	f800 3c02 	strb.w	r3, [r0, #-2]
 8008740:	0a12      	lsrs	r2, r2, #8
 8008742:	f800 2c03 	strb.w	r2, [r0, #-3]
 8008746:	9a03      	ldr	r2, [sp, #12]
 8008748:	9207      	str	r2, [sp, #28]
 800874a:	9206      	str	r2, [sp, #24]
 800874c:	ab06      	add	r3, sp, #24
        public static readonly SchedulerTimeSpan MaxValue = new SchedulerTimeSpan( long.MaxValue );
 800874e:	3b08      	subs	r3, #8
 8008750:	f8df c060 	ldr.w	ip, [pc, #96]	; 80087b4 <SchedulerTimeSpan_.cctor$4796+0xd4>
 8008754:	f85c 2001 	ldr.w	r2, [ip, r1]
 8008758:	448c      	add	ip, r1
 800875a:	f8dc c004 	ldr.w	ip, [ip, #4]
 800875e:	9000      	str	r0, [sp, #0]
 8008760:	4618      	mov	r0, r3
 8008762:	4663      	mov	r3, ip
 8008764:	f7ff ff8c 	bl	8008680 <SchedulerTimeSpan_.ctor$4740>
 8008768:	9800      	ldr	r0, [sp, #0]
 800876a:	f1a0 0108 	sub.w	r1, r0, #8
 800876e:	9a06      	ldr	r2, [sp, #24]
 8008770:	9b07      	ldr	r3, [sp, #28]
 8008772:	f801 3b02 	strb.w	r3, [r1], #2
 8008776:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 800877a:	f881 c001 	strb.w	ip, [r1, #1]
 800877e:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8008782:	f881 c000 	strb.w	ip, [r1]
 8008786:	0a19      	lsrs	r1, r3, #8
 8008788:	f800 1c07 	strb.w	r1, [r0, #-7]
 800878c:	f1a0 010c 	sub.w	r1, r0, #12
 8008790:	f801 2b02 	strb.w	r2, [r1], #2
 8008794:	0e13      	lsrs	r3, r2, #24
 8008796:	704b      	strb	r3, [r1, #1]
 8008798:	0c13      	lsrs	r3, r2, #16
 800879a:	700b      	strb	r3, [r1, #0]
 800879c:	0a11      	lsrs	r1, r2, #8
 800879e:	f800 1c0b 	strb.w	r1, [r0, #-11]
 80087a2:	b008      	add	sp, #32
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	46c0      	nop			; (mov r8, r8)
 80087a8:	e80252e4 	.word	0xe80252e4
 80087ac:	17ff90de 	.word	0x17ff90de
 80087b0:	fffffe3c 	.word	0xfffffe3c
 80087b4:	e80252ec 	.word	0xe80252ec

080087b8 <SchedulerTime_.ctor$4803>:
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b083      	sub	sp, #12
 80087bc:	4619      	mov	r1, r3
 80087be:	4694      	mov	ip, r2
 80087c0:	4686      	mov	lr, r0
 80087c2:	60c3      	str	r3, [r0, #12]
 80087c4:	6082      	str	r2, [r0, #8]
 80087c6:	f8cd e008 	str.w	lr, [sp, #8]
 80087ca:	f8cd c004 	str.w	ip, [sp, #4]
 80087ce:	9100      	str	r1, [sp, #0]
 80087d0:	b003      	add	sp, #12
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <SchedulerTime_Add$4815>:
 80087d4:	b5b0      	push	{r4, r5, r7, lr}
 80087d6:	b094      	sub	sp, #80	; 0x50
 80087d8:	4619      	mov	r1, r3
 80087da:	4694      	mov	ip, r2
 80087dc:	9307      	str	r3, [sp, #28]
 80087de:	9206      	str	r2, [sp, #24]
 80087e0:	4a43      	ldr	r2, [pc, #268]	; (80088f0 <SchedulerTime_Add$4815+0x11c>)
 80087e2:	4b44      	ldr	r3, [pc, #272]	; (80088f4 <SchedulerTime_Add$4815+0x120>)
 80087e4:	447b      	add	r3, pc
 80087e6:	441a      	add	r2, r3
 80087e8:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 80087ec:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 80087f0:	f10d 0e18 	add.w	lr, sp, #24
 80087f4:	9c06      	ldr	r4, [sp, #24]
 80087f6:	9d07      	ldr	r5, [sp, #28]
 80087f8:	9509      	str	r5, [sp, #36]	; 0x24
 80087fa:	9408      	str	r4, [sp, #32]
 80087fc:	9c08      	ldr	r4, [sp, #32]
 80087fe:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008800:	920b      	str	r2, [sp, #44]	; 0x2c
 8008802:	930a      	str	r3, [sp, #40]	; 0x28
            return t1.m_units.CompareTo( t1.m_units );
        }

        public SchedulerTime Add( SchedulerTimeSpan value )
        {
            if(value == SchedulerTimeSpan.MaxValue)
 8008804:	406a      	eors	r2, r5
 8008806:	4063      	eors	r3, r4
 8008808:	431a      	orrs	r2, r3
 800880a:	2a00      	cmp	r2, #0
 800880c:	9005      	str	r0, [sp, #20]
 800880e:	9104      	str	r1, [sp, #16]
 8008810:	f8cd c00c 	str.w	ip, [sp, #12]
 8008814:	f8cd e008 	str.w	lr, [sp, #8]
 8008818:	d10d      	bne.n	8008836 <SchedulerTime_Add$4815+0x62>
 800881a:	e7ff      	b.n	800881c <SchedulerTime_Add$4815+0x48>
 800881c:	a812      	add	r0, sp, #72	; 0x48
 800881e:	4934      	ldr	r1, [pc, #208]	; (80088f0 <SchedulerTime_Add$4815+0x11c>)
 8008820:	4a37      	ldr	r2, [pc, #220]	; (8008900 <SchedulerTime_Add$4815+0x12c>)
 8008822:	447a      	add	r2, pc
 8008824:	4411      	add	r1, r2
 8008826:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 800882a:	f8d1 1098 	ldr.w	r1, [r1, #152]	; 0x98
 800882e:	9113      	str	r1, [sp, #76]	; 0x4c
 8008830:	9212      	str	r2, [sp, #72]	; 0x48
            {
                return MaxValue;
 8008832:	9001      	str	r0, [sp, #4]
 8008834:	e053      	b.n	80088de <SchedulerTime_Add$4815+0x10a>
 8008836:	482e      	ldr	r0, [pc, #184]	; (80088f0 <SchedulerTime_Add$4815+0x11c>)
 8008838:	492f      	ldr	r1, [pc, #188]	; (80088f8 <SchedulerTime_Add$4815+0x124>)
 800883a:	4479      	add	r1, pc
 800883c:	4408      	add	r0, r1
 800883e:	f8d0 10ac 	ldr.w	r1, [r0, #172]	; 0xac
 8008842:	f8d0 00b0 	ldr.w	r0, [r0, #176]	; 0xb0
 8008846:	9a02      	ldr	r2, [sp, #8]
 8008848:	7813      	ldrb	r3, [r2, #0]
 800884a:	f892 c001 	ldrb.w	ip, [r2, #1]
 800884e:	f892 e002 	ldrb.w	lr, [r2, #2]
 8008852:	78d4      	ldrb	r4, [r2, #3]
 8008854:	ea4e 2e04 	orr.w	lr, lr, r4, lsl #8
 8008858:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800885c:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8008860:	930c      	str	r3, [sp, #48]	; 0x30
 8008862:	7953      	ldrb	r3, [r2, #5]
 8008864:	f812 cf04 	ldrb.w	ip, [r2, #4]!
 8008868:	ea4c 2303 	orr.w	r3, ip, r3, lsl #8
 800886c:	f892 c002 	ldrb.w	ip, [r2, #2]
 8008870:	78d2      	ldrb	r2, [r2, #3]
 8008872:	ea4c 2202 	orr.w	r2, ip, r2, lsl #8
 8008876:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800887a:	920d      	str	r2, [sp, #52]	; 0x34
 800887c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800887e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008880:	900f      	str	r0, [sp, #60]	; 0x3c
 8008882:	910e      	str	r1, [sp, #56]	; 0x38
            }
            else if(value == SchedulerTimeSpan.MinValue)
 8008884:	4058      	eors	r0, r3
 8008886:	4051      	eors	r1, r2
 8008888:	4308      	orrs	r0, r1
 800888a:	2800      	cmp	r0, #0
 800888c:	d10d      	bne.n	80088aa <SchedulerTime_Add$4815+0xd6>
 800888e:	e7ff      	b.n	8008890 <SchedulerTime_Add$4815+0xbc>
 8008890:	a812      	add	r0, sp, #72	; 0x48
 8008892:	4917      	ldr	r1, [pc, #92]	; (80088f0 <SchedulerTime_Add$4815+0x11c>)
 8008894:	4a19      	ldr	r2, [pc, #100]	; (80088fc <SchedulerTime_Add$4815+0x128>)
 8008896:	447a      	add	r2, pc
 8008898:	4411      	add	r1, r2
 800889a:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 800889e:	f8d1 10a0 	ldr.w	r1, [r1, #160]	; 0xa0
 80088a2:	9113      	str	r1, [sp, #76]	; 0x4c
 80088a4:	9212      	str	r2, [sp, #72]	; 0x48
            {
                return MinValue;
 80088a6:	9001      	str	r0, [sp, #4]
 80088a8:	e019      	b.n	80088de <SchedulerTime_Add$4815+0x10a>
 80088aa:	9805      	ldr	r0, [sp, #20]
 80088ac:	6881      	ldr	r1, [r0, #8]
 80088ae:	68c2      	ldr	r2, [r0, #12]
 80088b0:	9b06      	ldr	r3, [sp, #24]
 80088b2:	f8dd c01c 	ldr.w	ip, [sp, #28]
            }

            return new SchedulerTime( m_units + (ulong)value.DeltaUnits );
 80088b6:	18c9      	adds	r1, r1, r3
 80088b8:	eb42 030c 	adc.w	r3, r2, ip
 80088bc:	f04f 0200 	mov.w	r2, #0
 80088c0:	9211      	str	r2, [sp, #68]	; 0x44
 80088c2:	9210      	str	r2, [sp, #64]	; 0x40
 80088c4:	aa10      	add	r2, sp, #64	; 0x40
 80088c6:	f1a2 0008 	sub.w	r0, r2, #8
 80088ca:	460a      	mov	r2, r1
 80088cc:	f7ff ff74 	bl	80087b8 <SchedulerTime_.ctor$4803>
 80088d0:	a812      	add	r0, sp, #72	; 0x48
 80088d2:	9910      	ldr	r1, [sp, #64]	; 0x40
 80088d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80088d6:	9213      	str	r2, [sp, #76]	; 0x4c
 80088d8:	9112      	str	r1, [sp, #72]	; 0x48
 80088da:	9001      	str	r0, [sp, #4]
 80088dc:	e7ff      	b.n	80088de <SchedulerTime_Add$4815+0x10a>
 80088de:	9801      	ldr	r0, [sp, #4]
 80088e0:	6801      	ldr	r1, [r0, #0]
 80088e2:	6840      	ldr	r0, [r0, #4]
 80088e4:	9000      	str	r0, [sp, #0]
 80088e6:	4608      	mov	r0, r1
 80088e8:	9900      	ldr	r1, [sp, #0]
 80088ea:	b014      	add	sp, #80	; 0x50
 80088ec:	bdb0      	pop	{r4, r5, r7, pc}
 80088ee:	46c0      	nop			; (mov r8, r8)
 80088f0:	fffffe3c 	.word	0xfffffe3c
 80088f4:	17ff8fec 	.word	0x17ff8fec
 80088f8:	17ff8f96 	.word	0x17ff8f96
 80088fc:	17ff8f3a 	.word	0x17ff8f3a
 8008900:	17ff8fae 	.word	0x17ff8fae

08008904 <SchedulerTime_ConvertFromMillisecondsToUnits$16440>:
 8008904:	b580      	push	{r7, lr}
 8008906:	b086      	sub	sp, #24
 8008908:	4601      	mov	r1, r0
        public static readonly SchedulerTime MinValue = new SchedulerTime( ulong.MinValue );
        public static readonly SchedulerTime MaxValue = new SchedulerTime( ulong.MaxValue );

        private ulong m_units;

        //
 800890a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800890e:	9105      	str	r1, [sp, #20]
 8008910:	dc06      	bgt.n	8008920 <SchedulerTime_ConvertFromMillisecondsToUnits$16440+0x1c>
 8008912:	e7ff      	b.n	8008914 <SchedulerTime_ConvertFromMillisecondsToUnits$16440+0x10>
 8008914:	f04f 30ff 	mov.w	r0, #4294967295
 8008918:	4601      	mov	r1, r0
        // Constructor Methods
        //
 800891a:	9004      	str	r0, [sp, #16]
 800891c:	9103      	str	r1, [sp, #12]
 800891e:	e00d      	b.n	800893c <SchedulerTime_ConvertFromMillisecondsToUnits$16440+0x38>
        }

        //
        // Equality Methods
        //

 8008920:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008924:	9905      	ldr	r1, [sp, #20]
 8008926:	4348      	muls	r0, r1
        public override bool Equals( Object obj )
        {
 8008928:	9002      	str	r0, [sp, #8]
 800892a:	f000 f83f 	bl	80089ac <SchedulerTime_GetCurrentTime$16448>
 800892e:	9a02      	ldr	r2, [sp, #8]
 8008930:	1880      	adds	r0, r0, r2
 8008932:	f141 0100 	adc.w	r1, r1, #0
 8008936:	9004      	str	r0, [sp, #16]
 8008938:	9103      	str	r1, [sp, #12]
 800893a:	e7ff      	b.n	800893c <SchedulerTime_ConvertFromMillisecondsToUnits$16440+0x38>
 800893c:	9803      	ldr	r0, [sp, #12]
 800893e:	9904      	ldr	r1, [sp, #16]
 8008940:	9001      	str	r0, [sp, #4]
 8008942:	4608      	mov	r0, r1
 8008944:	9901      	ldr	r1, [sp, #4]
 8008946:	b006      	add	sp, #24
 8008948:	bd80      	pop	{r7, pc}

0800894a <SchedulerTime_op_Addition$4831>:
 800894a:	b5b0      	push	{r4, r5, r7, lr}
 800894c:	b086      	sub	sp, #24
 800894e:	469c      	mov	ip, r3
 8008950:	4696      	mov	lr, r2
 8008952:	460c      	mov	r4, r1
 8008954:	4605      	mov	r5, r0
 8008956:	9105      	str	r1, [sp, #20]
 8008958:	9004      	str	r0, [sp, #16]
 800895a:	a804      	add	r0, sp, #16
        }

        public static SchedulerTime operator +( SchedulerTime     t  ,
                                                SchedulerTimeSpan ts )
        {
            return t.Add( ts );
 800895c:	3808      	subs	r0, #8
 800895e:	f8cd c00c 	str.w	ip, [sp, #12]
 8008962:	f8cd e008 	str.w	lr, [sp, #8]
 8008966:	9501      	str	r5, [sp, #4]
 8008968:	9400      	str	r4, [sp, #0]
 800896a:	f7ff ff33 	bl	80087d4 <SchedulerTime_Add$4815>
 800896e:	b006      	add	sp, #24
 8008970:	bdb0      	pop	{r4, r5, r7, pc}

08008972 <SchedulerTime_FromUnits$4853>:
 8008972:	b580      	push	{r7, lr}
 8008974:	b086      	sub	sp, #24
 8008976:	460a      	mov	r2, r1
 8008978:	4603      	mov	r3, r0
 800897a:	f04f 0c00 	mov.w	ip, #0
 800897e:	f8cd c014 	str.w	ip, [sp, #20]
 8008982:	f8cd c010 	str.w	ip, [sp, #16]
 8008986:	f10d 0c10 	add.w	ip, sp, #16

        //--//

        public static SchedulerTime FromUnits( ulong units )
        {
            return new SchedulerTime( units );
 800898a:	f1ac 0c08 	sub.w	ip, ip, #8
 800898e:	9003      	str	r0, [sp, #12]
 8008990:	4660      	mov	r0, ip
 8008992:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8008996:	9202      	str	r2, [sp, #8]
 8008998:	4662      	mov	r2, ip
 800899a:	9301      	str	r3, [sp, #4]
 800899c:	460b      	mov	r3, r1
 800899e:	f7ff ff0b 	bl	80087b8 <SchedulerTime_.ctor$4803>
 80089a2:	9804      	ldr	r0, [sp, #16]
 80089a4:	9905      	ldr	r1, [sp, #20]
 80089a6:	b006      	add	sp, #24
 80089a8:	bd80      	pop	{r7, pc}
 80089aa:	46c0      	nop			; (mov r8, r8)

080089ac <SchedulerTime_GetCurrentTime$16448>:
            return (long)((double)units * RatioFromUnitsToDateTimeTicks);
        }

        private static ulong GetCurrentTime()
        {
            return Drivers.SystemTimer.Instance.CurrentTime;
 80089ac:	b580      	push	{r7, lr}
 80089ae:	4803      	ldr	r0, [pc, #12]	; (80089bc <SchedulerTime_GetCurrentTime$16448+0x10>)
 80089b0:	4903      	ldr	r1, [pc, #12]	; (80089c0 <SchedulerTime_GetCurrentTime$16448+0x14>)
 80089b2:	4479      	add	r1, pc
 80089b4:	4408      	add	r0, r1
 80089b6:	f000 f805 	bl	80089c4 <SystemTimer_get_CurrentTime$16495>
 80089ba:	bd80      	pop	{r7, pc}
 80089bc:	ffffea8c 	.word	0xffffea8c
 80089c0:	17ff8e1e 	.word	0x17ff8e1e

080089c4 <SystemTimer_get_CurrentTime$16495>:
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b08a      	sub	sp, #40	; 0x28
 80089c8:	4601      	mov	r1, r0
 80089ca:	2200      	movs	r2, #0
 80089cc:	9208      	str	r2, [sp, #32]
 80089ce:	9209      	str	r2, [sp, #36]	; 0x24
            {
                m_owner.Deregister(this);
            }

            /// <summary>
            /// Call to the Timer handler
 80089d0:	9007      	str	r0, [sp, #28]
 80089d2:	9106      	str	r1, [sp, #24]
 80089d4:	9205      	str	r2, [sp, #20]
 80089d6:	f7fb fe19 	bl	800460c <ProcessorARMv7M_DisableInterrupts$3259>
 80089da:	9905      	ldr	r1, [sp, #20]
 80089dc:	9109      	str	r1, [sp, #36]	; 0x24
 80089de:	9009      	str	r0, [sp, #36]	; 0x24
 80089e0:	9008      	str	r0, [sp, #32]
 80089e2:	9807      	ldr	r0, [sp, #28]
 80089e4:	68c2      	ldr	r2, [r0, #12]
 80089e6:	6903      	ldr	r3, [r0, #16]
        public uint Counter
        {
            [RT.Inline]
            get
            {
                return tmp_sys_timer_read();
 80089e8:	9204      	str	r2, [sp, #16]
 80089ea:	9303      	str	r3, [sp, #12]
 80089ec:	f014 fcce 	bl	801d38c <tmp_sys_timer_read>
 80089f0:	9907      	ldr	r1, [sp, #28]
 80089f2:	694a      	ldr	r2, [r1, #20]
            get
            {
                using (RT.SmartHandles.InterruptState.Disable())
                {
                    // Current time is the accumulator + time since it was updated
                    return m_accumulator + TimeSinceAccumulatorUpdate( this.Counter ); 
 80089f4:	9002      	str	r0, [sp, #8]
 80089f6:	4610      	mov	r0, r2
 80089f8:	9902      	ldr	r1, [sp, #8]
 80089fa:	f008 f94b 	bl	8010c94 <SystemTimer_TimeSinceAccumulatorUpdate$16504>
 80089fe:	9904      	ldr	r1, [sp, #16]
 8008a00:	1840      	adds	r0, r0, r1
 8008a02:	9903      	ldr	r1, [sp, #12]
 8008a04:	f141 0100 	adc.w	r1, r1, #0
            

            //
            // Constructor Methods
            //

 8008a08:	9a08      	ldr	r2, [sp, #32]
 8008a0a:	9001      	str	r0, [sp, #4]
 8008a0c:	4610      	mov	r0, r2
 8008a0e:	9100      	str	r1, [sp, #0]
 8008a10:	f7fb fe1e 	bl	8004650 <ProcessorARMv7M_DisableInterruptsWithPriorityLevelHigherOrEqualTo$3266>
 8008a14:	9801      	ldr	r0, [sp, #4]
 8008a16:	9900      	ldr	r1, [sp, #0]
 8008a18:	b00a      	add	sp, #40	; 0x28
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <SchedulerTime_get_Now$4865>:

        public static SchedulerTime Now
        {
            get
            {
                return new SchedulerTime( GetCurrentTime() );
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b084      	sub	sp, #16
 8008a20:	f7ff ffc4 	bl	80089ac <SchedulerTime_GetCurrentTime$16448>
 8008a24:	2200      	movs	r2, #0
 8008a26:	9203      	str	r2, [sp, #12]
 8008a28:	9202      	str	r2, [sp, #8]
 8008a2a:	aa02      	add	r2, sp, #8
 8008a2c:	3a08      	subs	r2, #8
 8008a2e:	9001      	str	r0, [sp, #4]
 8008a30:	4610      	mov	r0, r2
 8008a32:	9a01      	ldr	r2, [sp, #4]
 8008a34:	460b      	mov	r3, r1
 8008a36:	f7ff febf 	bl	80087b8 <SchedulerTime_.ctor$4803>
 8008a3a:	9802      	ldr	r0, [sp, #8]
 8008a3c:	9903      	ldr	r1, [sp, #12]
 8008a3e:	b004      	add	sp, #16
 8008a40:	bd80      	pop	{r7, pc}
 8008a42:	46c0      	nop			; (mov r8, r8)

08008a44 <SchedulerTime_.cctor$4869>:
    {
        //
        // State
        //

        public static readonly SchedulerTime MinValue = new SchedulerTime( ulong.MinValue );
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b086      	sub	sp, #24
 8008a48:	2000      	movs	r0, #0
 8008a4a:	9003      	str	r0, [sp, #12]
 8008a4c:	9002      	str	r0, [sp, #8]
 8008a4e:	a902      	add	r1, sp, #8
 8008a50:	3908      	subs	r1, #8
 8008a52:	9001      	str	r0, [sp, #4]
 8008a54:	4608      	mov	r0, r1
 8008a56:	9a01      	ldr	r2, [sp, #4]
 8008a58:	9b01      	ldr	r3, [sp, #4]
 8008a5a:	f7ff fead 	bl	80087b8 <SchedulerTime_.ctor$4803>
 8008a5e:	4826      	ldr	r0, [pc, #152]	; (8008af8 <SchedulerTime_.cctor$4869+0xb4>)
 8008a60:	4926      	ldr	r1, [pc, #152]	; (8008afc <SchedulerTime_.cctor$4869+0xb8>)
 8008a62:	4479      	add	r1, pc
 8008a64:	4408      	add	r0, r1
 8008a66:	9a02      	ldr	r2, [sp, #8]
 8008a68:	9b03      	ldr	r3, [sp, #12]
 8008a6a:	f800 2f9c 	strb.w	r2, [r0, #156]!
 8008a6e:	f800 3f04 	strb.w	r3, [r0, #4]!
 8008a72:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8008a76:	f880 c003 	strb.w	ip, [r0, #3]
 8008a7a:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8008a7e:	f880 c002 	strb.w	ip, [r0, #2]
 8008a82:	0a1b      	lsrs	r3, r3, #8
 8008a84:	7043      	strb	r3, [r0, #1]
 8008a86:	0e13      	lsrs	r3, r2, #24
 8008a88:	f800 3c01 	strb.w	r3, [r0, #-1]
 8008a8c:	0c13      	lsrs	r3, r2, #16
 8008a8e:	f800 3c02 	strb.w	r3, [r0, #-2]
 8008a92:	0a12      	lsrs	r2, r2, #8
 8008a94:	f800 2c03 	strb.w	r2, [r0, #-3]
 8008a98:	9a01      	ldr	r2, [sp, #4]
 8008a9a:	9205      	str	r2, [sp, #20]
 8008a9c:	9204      	str	r2, [sp, #16]
 8008a9e:	ab04      	add	r3, sp, #16
        public static readonly SchedulerTime MaxValue = new SchedulerTime( ulong.MaxValue );
 8008aa0:	3b08      	subs	r3, #8
 8008aa2:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8008b00 <SchedulerTime_.cctor$4869+0xbc>
 8008aa6:	f85c 2001 	ldr.w	r2, [ip, r1]
 8008aaa:	4461      	add	r1, ip
 8008aac:	6849      	ldr	r1, [r1, #4]
 8008aae:	9000      	str	r0, [sp, #0]
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	460b      	mov	r3, r1
 8008ab4:	f7ff fe80 	bl	80087b8 <SchedulerTime_.ctor$4803>
 8008ab8:	9800      	ldr	r0, [sp, #0]
 8008aba:	f1a0 0108 	sub.w	r1, r0, #8
 8008abe:	9a04      	ldr	r2, [sp, #16]
 8008ac0:	9b05      	ldr	r3, [sp, #20]
 8008ac2:	f801 3b02 	strb.w	r3, [r1], #2
 8008ac6:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8008aca:	f881 c001 	strb.w	ip, [r1, #1]
 8008ace:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8008ad2:	f881 c000 	strb.w	ip, [r1]
 8008ad6:	0a19      	lsrs	r1, r3, #8
 8008ad8:	f800 1c07 	strb.w	r1, [r0, #-7]
 8008adc:	f1a0 010c 	sub.w	r1, r0, #12
 8008ae0:	f801 2b02 	strb.w	r2, [r1], #2
 8008ae4:	0e13      	lsrs	r3, r2, #24
 8008ae6:	704b      	strb	r3, [r1, #1]
 8008ae8:	0c13      	lsrs	r3, r2, #16
 8008aea:	700b      	strb	r3, [r1, #0]
 8008aec:	0a11      	lsrs	r1, r2, #8
 8008aee:	f800 1c0b 	strb.w	r1, [r0, #-11]
 8008af2:	b006      	add	sp, #24
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	46c0      	nop			; (mov r8, r8)
 8008af8:	fffffe3c 	.word	0xfffffe3c
 8008afc:	17ff8d6e 	.word	0x17ff8d6e
 8008b00:	e80252f4 	.word	0xe80252f4

08008b04 <MemoryManager_InitializationComplete$4894>:
 8008b04:	4770      	bx	lr

08008b06 <ARMv7ThreadManager_InitializeAfterStaticConstructors$4923>:
 8008b06:	b580      	push	{r7, lr}
 8008b08:	b082      	sub	sp, #8
 8008b0a:	460a      	mov	r2, r1
 8008b0c:	4603      	mov	r3, r0
            public override void InitializeMemoryManager()
            {
            }

            //--//

 8008b0e:	9201      	str	r2, [sp, #4]
 8008b10:	9300      	str	r3, [sp, #0]
 8008b12:	f7fb ff9f 	bl	8004a54 <ThreadManager_InitializeAfterStaticConstructors$3156>
 8008b16:	b002      	add	sp, #8
 8008b18:	bd80      	pop	{r7, pc}

08008b1a <ARMv7ThreadManager_get_InterruptThread$4926>:
 8008b1a:	b081      	sub	sp, #4
 8008b1c:	4601      	mov	r1, r0

        public override ThreadImpl InterruptThread
        {
            get
            {
                return m_interruptThread;
 8008b1e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8008b20:	9100      	str	r1, [sp, #0]
 8008b22:	b001      	add	sp, #4
 8008b24:	4770      	bx	lr
 8008b26:	46c0      	nop			; (mov r8, r8)

08008b28 <ARMv7ThreadManager_get_FastInterruptThread$4927>:
        }

        public override ThreadImpl FastInterruptThread
        {
            get
            {
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	4804      	ldr	r0, [pc, #16]	; (8008b3c <ARMv7ThreadManager_get_FastInterruptThread$4927+0x14>)
 8008b2c:	4904      	ldr	r1, [pc, #16]	; (8008b40 <ARMv7ThreadManager_get_FastInterruptThread$4927+0x18>)
 8008b2e:	4479      	add	r1, pc
 8008b30:	5840      	ldr	r0, [r0, r1]
            //RegisterThread( m_UsageFault );
            //RegisterThread( m_SVCCall         );
            //RegisterThread( m_PendSV          );
            //RegisterThread( m_SysTick         );
            //RegisterThread( m_interruptThread );

 8008b32:	f7f7 fbe7 	bl	8000304 <BugCheck_Raise$4648>
 8008b36:	2000      	movs	r0, #0
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	46c0      	nop			; (mov r8, r8)
 8008b3c:	e802530c 	.word	0xe802530c
 8008b40:	17ff8ca2 	.word	0x17ff8ca2

08008b44 <TypeSystemManager_InvokeStaticConstructors$4947>:
 8008b44:	b580      	push	{r7, lr}
 8008b46:	f7ff ff7d 	bl	8008a44 <SchedulerTime_.cctor$4869>
 8008b4a:	f7fd ffe9 	bl	8006b20 <Program_.cctor$3691>
 8008b4e:	f000 f815 	bl	8008b7c <<>c_.cctor$16333>
 8008b52:	f7fe faef 	bl	8007134 <HardwareProvider_.cctor$4274>
 8008b56:	f7ff fdc3 	bl	80086e0 <SchedulerTimeSpan_.cctor$4796>
 8008b5a:	f000 f82b 	bl	8008bb4 <WaitingRecord_.cctor$4999>
 8008b5e:	f7fe fbbd 	bl	80072dc <Finalizer_.cctor$4290>
 8008b62:	f000 f865 	bl	8008c30 <Number_.cctor$7284>
 8008b66:	f000 f8af 	bl	8008cc8 <CultureInfo_.cctor$9571>
 8008b6a:	f000 f8d7 	bl	8008d1c <GpioController_.cctor$16239>
 8008b6e:	f000 f8f1 	bl	8008d54 <Processor_.cctor$16389>
 8008b72:	f000 f8fd 	bl	8008d70 <Board_.cctor$16932>
 8008b76:	f7fa fc2f 	bl	80033d8 <String_.cctor$2629>
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <<>c_.cctor$16333>:
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b082      	sub	sp, #8
 8008b80:	4808      	ldr	r0, [pc, #32]	; (8008ba4 <<>c_.cctor$16333+0x28>)
 8008b82:	4909      	ldr	r1, [pc, #36]	; (8008ba8 <<>c_.cctor$16333+0x2c>)
 8008b84:	4479      	add	r1, pc
 8008b86:	4408      	add	r0, r1
 8008b88:	4a08      	ldr	r2, [pc, #32]	; (8008bac <<>c_.cctor$16333+0x30>)
 8008b8a:	440a      	add	r2, r1
 8008b8c:	9101      	str	r1, [sp, #4]
 8008b8e:	4611      	mov	r1, r2
 8008b90:	f7f7 fe16 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8008b94:	4906      	ldr	r1, [pc, #24]	; (8008bb0 <<>c_.cctor$16333+0x34>)
 8008b96:	9a01      	ldr	r2, [sp, #4]
 8008b98:	4411      	add	r1, r2
 8008b9a:	f8c1 00c8 	str.w	r0, [r1, #200]	; 0xc8
 8008b9e:	b002      	add	sp, #8
 8008ba0:	bd80      	pop	{r7, pc}
 8008ba2:	46c0      	nop			; (mov r8, r8)
 8008ba4:	ffffea38 	.word	0xffffea38
 8008ba8:	17ff8c4c 	.word	0x17ff8c4c
 8008bac:	e801466c 	.word	0xe801466c
 8008bb0:	fffffe3c 	.word	0xfffffe3c

08008bb4 <WaitingRecord_.cctor$4999>:
        // Constructor Methods
        //

        static WaitingRecord()
        {
            s_recycledList = new KernelList< WaitingRecord >();
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b084      	sub	sp, #16
 8008bb8:	4816      	ldr	r0, [pc, #88]	; (8008c14 <WaitingRecord_.cctor$4999+0x60>)
 8008bba:	4917      	ldr	r1, [pc, #92]	; (8008c18 <WaitingRecord_.cctor$4999+0x64>)
 8008bbc:	4479      	add	r1, pc
 8008bbe:	4408      	add	r0, r1
 8008bc0:	4a16      	ldr	r2, [pc, #88]	; (8008c1c <WaitingRecord_.cctor$4999+0x68>)
 8008bc2:	440a      	add	r2, r1
 8008bc4:	9103      	str	r1, [sp, #12]
 8008bc6:	4611      	mov	r1, r2
 8008bc8:	f7f7 fdfa 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8008bcc:	9002      	str	r0, [sp, #8]
 8008bce:	f7fb f98b 	bl	8003ee8 <KernelList`1_.ctor$17418>
 8008bd2:	4813      	ldr	r0, [pc, #76]	; (8008c20 <WaitingRecord_.cctor$4999+0x6c>)
 8008bd4:	9903      	ldr	r1, [sp, #12]
 8008bd6:	4408      	add	r0, r1
 8008bd8:	9a02      	ldr	r2, [sp, #8]
 8008bda:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
 8008bde:	e7ff      	b.n	8008be0 <WaitingRecord_.cctor$4999+0x2c>
 8008be0:	480f      	ldr	r0, [pc, #60]	; (8008c20 <WaitingRecord_.cctor$4999+0x6c>)
 8008be2:	4910      	ldr	r1, [pc, #64]	; (8008c24 <WaitingRecord_.cctor$4999+0x70>)
 8008be4:	4479      	add	r1, pc
 8008be6:	4408      	add	r0, r1
 8008be8:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4

            while(s_recycledCount < RecycleLimit)
 8008bec:	281f      	cmp	r0, #31
 8008bee:	dc0f      	bgt.n	8008c10 <WaitingRecord_.cctor$4999+0x5c>
 8008bf0:	e7ff      	b.n	8008bf2 <WaitingRecord_.cctor$4999+0x3e>
            {
                WaitingRecord wr = new WaitingRecord();
 8008bf2:	4808      	ldr	r0, [pc, #32]	; (8008c14 <WaitingRecord_.cctor$4999+0x60>)
 8008bf4:	490c      	ldr	r1, [pc, #48]	; (8008c28 <WaitingRecord_.cctor$4999+0x74>)
 8008bf6:	4479      	add	r1, pc
 8008bf8:	4408      	add	r0, r1
 8008bfa:	4a0c      	ldr	r2, [pc, #48]	; (8008c2c <WaitingRecord_.cctor$4999+0x78>)
 8008bfc:	4411      	add	r1, r2
 8008bfe:	f7f7 fddf 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8008c02:	9001      	str	r0, [sp, #4]
 8008c04:	f000 fde2 	bl	80097cc <WaitingRecord_.ctor$5000>

                wr.Recycle();
 8008c08:	9801      	ldr	r0, [sp, #4]
 8008c0a:	f000 fe0b 	bl	8009824 <WaitingRecord_Recycle$5004>
            }
 8008c0e:	e7e7      	b.n	8008be0 <WaitingRecord_.cctor$4999+0x2c>
 8008c10:	b004      	add	sp, #16
 8008c12:	bd80      	pop	{r7, pc}
 8008c14:	ffffea38 	.word	0xffffea38
 8008c18:	17ff8c14 	.word	0x17ff8c14
 8008c1c:	e8010f9c 	.word	0xe8010f9c
 8008c20:	fffffe3c 	.word	0xfffffe3c
 8008c24:	17ff8bec 	.word	0x17ff8bec
 8008c28:	17ff8bda 	.word	0x17ff8bda
 8008c2c:	e801264c 	.word	0xe801264c

08008c30 <Number_.cctor$7284>:
        private const int DOUBLE_PRECISION = 15;
        private const int MIN_BUFFER_SIZE = 105;
        private const int SCALE_NAN = unchecked( (int)0x80000000 );
        private const int SCALE_INF = 0x7FFFFFFF;

        private static String[] posPercentFormats = {
 8008c30:	4817      	ldr	r0, [pc, #92]	; (8008c90 <Number_.cctor$7284+0x60>)
 8008c32:	4918      	ldr	r1, [pc, #96]	; (8008c94 <Number_.cctor$7284+0x64>)
 8008c34:	4479      	add	r1, pc
 8008c36:	4408      	add	r0, r1
 8008c38:	f8d0 20f4 	ldr.w	r2, [r0, #244]	; 0xf4
 8008c3c:	4b16      	ldr	r3, [pc, #88]	; (8008c98 <Number_.cctor$7284+0x68>)
 8008c3e:	440b      	add	r3, r1
 8008c40:	60d3      	str	r3, [r2, #12]
 8008c42:	4b16      	ldr	r3, [pc, #88]	; (8008c9c <Number_.cctor$7284+0x6c>)
 8008c44:	440b      	add	r3, r1
 8008c46:	6113      	str	r3, [r2, #16]
 8008c48:	4b15      	ldr	r3, [pc, #84]	; (8008ca0 <Number_.cctor$7284+0x70>)
 8008c4a:	440b      	add	r3, r1
 8008c4c:	6153      	str	r3, [r2, #20]
            "# %", "#%", "%#"
        };

        // BUGBUG yslin: have to verify on the negative Percent
        // format for real format.
        private static String[] negPercentFormats = {
 8008c4e:	f8d0 20ec 	ldr.w	r2, [r0, #236]	; 0xec
 8008c52:	4b14      	ldr	r3, [pc, #80]	; (8008ca4 <Number_.cctor$7284+0x74>)
 8008c54:	440b      	add	r3, r1
 8008c56:	60d3      	str	r3, [r2, #12]
 8008c58:	4b13      	ldr	r3, [pc, #76]	; (8008ca8 <Number_.cctor$7284+0x78>)
 8008c5a:	440b      	add	r3, r1
 8008c5c:	6113      	str	r3, [r2, #16]
 8008c5e:	4b13      	ldr	r3, [pc, #76]	; (8008cac <Number_.cctor$7284+0x7c>)
 8008c60:	440b      	add	r3, r1
 8008c62:	6153      	str	r3, [r2, #20]
            "-# %", "-#%", "-%#"
        };
        private static String[] negNumberFormats = {
 8008c64:	f8d0 20e8 	ldr.w	r2, [r0, #232]	; 0xe8
 8008c68:	4b11      	ldr	r3, [pc, #68]	; (8008cb0 <Number_.cctor$7284+0x80>)
 8008c6a:	440b      	add	r3, r1
 8008c6c:	60d3      	str	r3, [r2, #12]
 8008c6e:	4b11      	ldr	r3, [pc, #68]	; (8008cb4 <Number_.cctor$7284+0x84>)
 8008c70:	440b      	add	r3, r1
 8008c72:	6113      	str	r3, [r2, #16]
 8008c74:	4b10      	ldr	r3, [pc, #64]	; (8008cb8 <Number_.cctor$7284+0x88>)
 8008c76:	440b      	add	r3, r1
 8008c78:	6153      	str	r3, [r2, #20]
 8008c7a:	4b10      	ldr	r3, [pc, #64]	; (8008cbc <Number_.cctor$7284+0x8c>)
 8008c7c:	440b      	add	r3, r1
 8008c7e:	6193      	str	r3, [r2, #24]
 8008c80:	4b0f      	ldr	r3, [pc, #60]	; (8008cc0 <Number_.cctor$7284+0x90>)
 8008c82:	440b      	add	r3, r1
 8008c84:	61d3      	str	r3, [r2, #28]
 8008c86:	4a0f      	ldr	r2, [pc, #60]	; (8008cc4 <Number_.cctor$7284+0x94>)
 8008c88:	4411      	add	r1, r2
 8008c8a:	f8c0 10f0 	str.w	r1, [r0, #240]	; 0xf0
 8008c8e:	4770      	bx	lr
 8008c90:	fffffe3c 	.word	0xfffffe3c
 8008c94:	17ff8b9c 	.word	0x17ff8b9c
 8008c98:	e8012f1c 	.word	0xe8012f1c
 8008c9c:	e8012f3c 	.word	0xe8012f3c
 8008ca0:	e8012f5c 	.word	0xe8012f5c
 8008ca4:	e8012f7c 	.word	0xe8012f7c
 8008ca8:	e8012f9c 	.word	0xe8012f9c
 8008cac:	e8012fbc 	.word	0xe8012fbc
 8008cb0:	e8012fdc 	.word	0xe8012fdc
 8008cb4:	e8012ffc 	.word	0xe8012ffc
 8008cb8:	e801301c 	.word	0xe801301c
 8008cbc:	e801303c 	.word	0xe801303c
 8008cc0:	e801305c 	.word	0xe801305c
 8008cc4:	e801307c 	.word	0xe801307c

08008cc8 <CultureInfo_.cctor$9571>:
        //
        // All of the following will be created on demand.
        //
    
        //The Invariant culture;
        private static CultureInfo  m_InvariantCultureInfo = null;
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	480e      	ldr	r0, [pc, #56]	; (8008d08 <CultureInfo_.cctor$9571+0x40>)
 8008cce:	490f      	ldr	r1, [pc, #60]	; (8008d0c <CultureInfo_.cctor$9571+0x44>)
 8008cd0:	4479      	add	r1, pc
 8008cd2:	4408      	add	r0, r1
 8008cd4:	2100      	movs	r1, #0
 8008cd6:	f8c0 10e4 	str.w	r1, [r0, #228]	; 0xe4
        //
        // The CultureTable instance that read data from culture.nlp in the mscorlib assembly.
        //
        static unsafe CultureInfo()
        {
            if(m_InvariantCultureInfo == null)
 8008cda:	e7ff      	b.n	8008cdc <CultureInfo_.cctor$9571+0x14>
            {
                CultureInfo temp = new CultureInfo( LOCALE_INVARIANT, false );
 8008cdc:	480c      	ldr	r0, [pc, #48]	; (8008d10 <CultureInfo_.cctor$9571+0x48>)
 8008cde:	490d      	ldr	r1, [pc, #52]	; (8008d14 <CultureInfo_.cctor$9571+0x4c>)
 8008ce0:	4479      	add	r1, pc
 8008ce2:	4408      	add	r0, r1
 8008ce4:	4a0c      	ldr	r2, [pc, #48]	; (8008d18 <CultureInfo_.cctor$9571+0x50>)
 8008ce6:	440a      	add	r2, r1
 8008ce8:	9101      	str	r1, [sp, #4]
 8008cea:	4611      	mov	r1, r2
 8008cec:	f7f7 fd68 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8008cf0:	9000      	str	r0, [sp, #0]
 8008cf2:	f005 fe61 	bl	800e9b8 <CultureInfo_.ctor$9575>
 8008cf6:	4804      	ldr	r0, [pc, #16]	; (8008d08 <CultureInfo_.cctor$9571+0x40>)
 8008cf8:	9901      	ldr	r1, [sp, #4]
 8008cfa:	4408      	add	r0, r1
 8008cfc:	9a00      	ldr	r2, [sp, #0]
 8008cfe:	f8c0 20e4 	str.w	r2, [r0, #228]	; 0xe4
    
////            temp.m_isReadOnly = true;
    
                m_InvariantCultureInfo = temp;
            }
 8008d02:	e7ff      	b.n	8008d04 <CultureInfo_.cctor$9571+0x3c>
 8008d04:	b002      	add	sp, #8
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	fffffe3c 	.word	0xfffffe3c
 8008d0c:	17ff8b00 	.word	0x17ff8b00
 8008d10:	ffffea38 	.word	0xffffea38
 8008d14:	17ff8af0 	.word	0x17ff8af0
 8008d18:	e80135cc 	.word	0xe80135cc

08008d1c <GpioController_.cctor$16239>:
    /// <summary>
    /// Represents the default general-purpose I/O (GPIO) controller for the system.
    /// </summary>
    public sealed class GpioController
    {
        private static readonly GpioController _instance = new GpioController();
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b082      	sub	sp, #8
 8008d20:	4808      	ldr	r0, [pc, #32]	; (8008d44 <GpioController_.cctor$16239+0x28>)
 8008d22:	4909      	ldr	r1, [pc, #36]	; (8008d48 <GpioController_.cctor$16239+0x2c>)
 8008d24:	4479      	add	r1, pc
 8008d26:	4408      	add	r0, r1
 8008d28:	4a08      	ldr	r2, [pc, #32]	; (8008d4c <GpioController_.cctor$16239+0x30>)
 8008d2a:	440a      	add	r2, r1
 8008d2c:	9101      	str	r1, [sp, #4]
 8008d2e:	4611      	mov	r1, r2
 8008d30:	f7f7 fd46 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8008d34:	4906      	ldr	r1, [pc, #24]	; (8008d50 <GpioController_.cctor$16239+0x34>)
 8008d36:	9a01      	ldr	r2, [sp, #4]
 8008d38:	4411      	add	r1, r2
 8008d3a:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
 8008d3e:	b002      	add	sp, #8
 8008d40:	bd80      	pop	{r7, pc}
 8008d42:	46c0      	nop			; (mov r8, r8)
 8008d44:	ffffea38 	.word	0xffffea38
 8008d48:	17ff8aac 	.word	0x17ff8aac
 8008d4c:	e801442c 	.word	0xe801442c
 8008d50:	fffffe3c 	.word	0xfffffe3c

08008d54 <Processor_.cctor$16389>:
 8008d54:	4804      	ldr	r0, [pc, #16]	; (8008d68 <Processor_.cctor$16389+0x14>)
 8008d56:	4905      	ldr	r1, [pc, #20]	; (8008d6c <Processor_.cctor$16389+0x18>)
 8008d58:	4479      	add	r1, pc
 8008d5a:	4408      	add	r0, r1
 8008d5c:	2100      	movs	r1, #0
 8008d5e:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
 8008d62:	6501      	str	r1, [r0, #80]	; 0x50
 8008d64:	4770      	bx	lr
 8008d66:	46c0      	nop			; (mov r8, r8)
 8008d68:	fffffe3c 	.word	0xfffffe3c
 8008d6c:	17ff8a78 	.word	0x17ff8a78

08008d70 <Board_.cctor$16932>:

        //
        // SPI Ports
        //

        private  static readonly string[] _spiDevices    = { "SPI0" };
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b088      	sub	sp, #32
 8008d74:	483a      	ldr	r0, [pc, #232]	; (8008e60 <Board_.cctor$16932+0xf0>)
 8008d76:	493b      	ldr	r1, [pc, #236]	; (8008e64 <Board_.cctor$16932+0xf4>)
 8008d78:	4479      	add	r1, pc
 8008d7a:	4408      	add	r0, r1
 8008d7c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8008d7e:	4b3a      	ldr	r3, [pc, #232]	; (8008e68 <Board_.cctor$16932+0xf8>)
 8008d80:	440b      	add	r3, r1
 8008d82:	60d3      	str	r3, [r2, #12]
        
        public static readonly ChipsetAbstration.Board.SpiChannelInfo SPI0 = new ChipsetAbstration.Board.SpiChannelInfo()
 8008d84:	4a39      	ldr	r2, [pc, #228]	; (8008e6c <Board_.cctor$16932+0xfc>)
 8008d86:	440a      	add	r2, r1
 8008d88:	4b39      	ldr	r3, [pc, #228]	; (8008e70 <Board_.cctor$16932+0x100>)
 8008d8a:	440b      	add	r3, r1
 8008d8c:	9007      	str	r0, [sp, #28]
 8008d8e:	4610      	mov	r0, r2
 8008d90:	9106      	str	r1, [sp, #24]
 8008d92:	4619      	mov	r1, r3
 8008d94:	9205      	str	r2, [sp, #20]
 8008d96:	f7f7 fd13 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8008d9a:	211f      	movs	r1, #31
 8008d9c:	6081      	str	r1, [r0, #8]
 8008d9e:	211e      	movs	r1, #30
 8008da0:	60c1      	str	r1, [r0, #12]
 8008da2:	2181      	movs	r1, #129	; 0x81
 8008da4:	6101      	str	r1, [r0, #16]
 8008da6:	f04f 31ff 	mov.w	r1, #4294967295
 8008daa:	6141      	str	r1, [r0, #20]
 8008dac:	2201      	movs	r2, #1
 8008dae:	6182      	str	r2, [r0, #24]
 8008db0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008db4:	6203      	str	r3, [r0, #32]
 8008db6:	f24c 3380 	movw	r3, #50048	; 0xc380
 8008dba:	f2c0 13c9 	movt	r3, #457	; 0x1c9
 8008dbe:	61c3      	str	r3, [r0, #28]
 8008dc0:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8008dc4:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
 8008dc8:	220a      	movs	r2, #10
 8008dca:	6282      	str	r2, [r0, #40]	; 0x28
 8008dcc:	62c2      	str	r2, [r0, #44]	; 0x2c
 8008dce:	9a07      	ldr	r2, [sp, #28]
 8008dd0:	6690      	str	r0, [r2, #104]	; 0x68
        };

        //
        // I2c Ports
        //
        private static readonly string[] _i2cDevices = { "I2C0" };
 8008dd2:	6d90      	ldr	r0, [r2, #88]	; 0x58
 8008dd4:	4b27      	ldr	r3, [pc, #156]	; (8008e74 <Board_.cctor$16932+0x104>)
 8008dd6:	f8dd c018 	ldr.w	ip, [sp, #24]
 8008dda:	4463      	add	r3, ip
 8008ddc:	60c3      	str	r3, [r0, #12]

        public static readonly ChipsetAbstration.Board.I2cChannelInfo I2C0 = new ChipsetAbstration.Board.I2cChannelInfo() {
 8008dde:	4826      	ldr	r0, [pc, #152]	; (8008e78 <Board_.cctor$16932+0x108>)
 8008de0:	4460      	add	r0, ip
 8008de2:	9b05      	ldr	r3, [sp, #20]
 8008de4:	9004      	str	r0, [sp, #16]
 8008de6:	4618      	mov	r0, r3
 8008de8:	f8dd e010 	ldr.w	lr, [sp, #16]
 8008dec:	9103      	str	r1, [sp, #12]
 8008dee:	4671      	mov	r1, lr
 8008df0:	f7f7 fce6 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8008df4:	2119      	movs	r1, #25
 8008df6:	6081      	str	r1, [r0, #8]
 8008df8:	2118      	movs	r1, #24
 8008dfa:	60c1      	str	r1, [r0, #12]
 8008dfc:	9907      	ldr	r1, [sp, #28]
 8008dfe:	6608      	str	r0, [r1, #96]	; 0x60
        };

        //
        // Serial Ports
        //
        private static readonly string[] m_serialPorts = { "UART0", "UART1" };
 8008e00:	6e48      	ldr	r0, [r1, #100]	; 0x64
 8008e02:	4a1e      	ldr	r2, [pc, #120]	; (8008e7c <Board_.cctor$16932+0x10c>)
 8008e04:	9b06      	ldr	r3, [sp, #24]
 8008e06:	441a      	add	r2, r3
 8008e08:	60c2      	str	r2, [r0, #12]
 8008e0a:	4a1d      	ldr	r2, [pc, #116]	; (8008e80 <Board_.cctor$16932+0x110>)
 8008e0c:	441a      	add	r2, r3
 8008e0e:	6102      	str	r2, [r0, #16]

        public static readonly ChipsetAbstration.Board.SerialPortInfo UART0 = new ChipsetAbstration.Board.SerialPortInfo() 
 8008e10:	481c      	ldr	r0, [pc, #112]	; (8008e84 <Board_.cctor$16932+0x114>)
 8008e12:	4418      	add	r0, r3
 8008e14:	9a05      	ldr	r2, [sp, #20]
 8008e16:	9002      	str	r0, [sp, #8]
 8008e18:	4610      	mov	r0, r2
 8008e1a:	9902      	ldr	r1, [sp, #8]
 8008e1c:	f7f7 fcd0 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8008e20:	2109      	movs	r1, #9
 8008e22:	60c1      	str	r1, [r0, #12]
 8008e24:	2217      	movs	r2, #23
 8008e26:	6082      	str	r2, [r0, #8]
 8008e28:	9b03      	ldr	r3, [sp, #12]
 8008e2a:	6103      	str	r3, [r0, #16]
 8008e2c:	6143      	str	r3, [r0, #20]
 8008e2e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8008e32:	f8cc 006c 	str.w	r0, [ip, #108]	; 0x6c
            RxPin = (int)PinName.SERIAL_RX,
            RtsPin = unchecked((int)PinName.NC),
            CtsPin = unchecked((int)PinName.NC)
        };

        public static readonly ChipsetAbstration.Board.SerialPortInfo UART1 = new ChipsetAbstration.Board.SerialPortInfo() 
 8008e36:	9805      	ldr	r0, [sp, #20]
 8008e38:	f8dd e008 	ldr.w	lr, [sp, #8]
 8008e3c:	9101      	str	r1, [sp, #4]
 8008e3e:	4671      	mov	r1, lr
 8008e40:	9200      	str	r2, [sp, #0]
 8008e42:	f7f7 fcbd 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8008e46:	9901      	ldr	r1, [sp, #4]
 8008e48:	60c1      	str	r1, [r0, #12]
 8008e4a:	9a00      	ldr	r2, [sp, #0]
 8008e4c:	6082      	str	r2, [r0, #8]
 8008e4e:	9b03      	ldr	r3, [sp, #12]
 8008e50:	6103      	str	r3, [r0, #16]
 8008e52:	6143      	str	r3, [r0, #20]
 8008e54:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8008e58:	f8cc 0070 	str.w	r0, [ip, #112]	; 0x70
 8008e5c:	b008      	add	sp, #32
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	fffffe3c 	.word	0xfffffe3c
 8008e64:	17ff8a58 	.word	0x17ff8a58
 8008e68:	e8011c9c 	.word	0xe8011c9c
 8008e6c:	ffffea38 	.word	0xffffea38
 8008e70:	e8014c7c 	.word	0xe8014c7c
 8008e74:	e8014cac 	.word	0xe8014cac
 8008e78:	e8014d2c 	.word	0xe8014d2c
 8008e7c:	e8014d5c 	.word	0xe8014d5c
 8008e80:	e8014d7c 	.word	0xe8014d7c
 8008e84:	e8014dfc 	.word	0xe8014dfc

08008e88 <InvalidCastException_.ctor$7120>:
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b082      	sub	sp, #8
 8008e8c:	4601      	mov	r1, r0
    public sealed class IndexOutOfRangeException : SystemException
    {
#if EXCEPTION_STRINGS
        public IndexOutOfRangeException() : base( Environment.GetResourceString( "Arg_IndexOutOfRangeException" ) )
#else
        public IndexOutOfRangeException()
 8008e8e:	9101      	str	r1, [sp, #4]
 8008e90:	f002 f9cd 	bl	800b22e <SystemException_.ctor$7365>
 8008e94:	b002      	add	sp, #8
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <TypeSystemManager_CastToInterface$4952>:
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b086      	sub	sp, #24
 8008e9c:	4601      	mov	r1, r0

        [TS.WellKnownMethod( "TypeSystemManager_CastToInterface" )]
        public static object CastToInterface( object    obj      ,
                                              TS.VTable expected )
        {
            if(obj != null)
 8008e9e:	2800      	cmp	r0, #0
 8008ea0:	9105      	str	r1, [sp, #20]
 8008ea2:	d103      	bne.n	8008eac <TypeSystemManager_CastToInterface$4952+0x14>
 8008ea4:	e7ff      	b.n	8008ea6 <TypeSystemManager_CastToInterface$4952+0xe>
                    throw new InvalidCastException();
                }
            }

            return obj;
        }
 8008ea6:	9805      	ldr	r0, [sp, #20]

        [TS.WellKnownMethod( "TypeSystemManager_CastToInterface" )]
        public static object CastToInterface( object    obj      ,
                                              TS.VTable expected )
        {
            if(obj != null)
 8008ea8:	9004      	str	r0, [sp, #16]
 8008eaa:	e008      	b.n	8008ebe <TypeSystemManager_CastToInterface$4952+0x26>
            {
                obj = CastToInterfaceNoThrow( obj, expected );
 8008eac:	9805      	ldr	r0, [sp, #20]
 8008eae:	f000 f823 	bl	8008ef8 <TypeSystemManager_CastToInterfaceNoThrow$4953>
 8008eb2:	4601      	mov	r1, r0
                if(obj == null)
 8008eb4:	2800      	cmp	r0, #0
 8008eb6:	9103      	str	r1, [sp, #12]
 8008eb8:	d115      	bne.n	8008ee6 <TypeSystemManager_CastToInterface$4952+0x4e>
 8008eba:	e7ff      	b.n	8008ebc <TypeSystemManager_CastToInterface$4952+0x24>
                {
                    throw new InvalidCastException();
 8008ebc:	e002      	b.n	8008ec4 <TypeSystemManager_CastToInterface$4952+0x2c>
                }
            }

            return obj;
        }
 8008ebe:	9804      	ldr	r0, [sp, #16]
 8008ec0:	b006      	add	sp, #24
 8008ec2:	bd80      	pop	{r7, pc}
            if(obj != null)
            {
                obj = CastToInterfaceNoThrow( obj, expected );
                if(obj == null)
                {
                    throw new InvalidCastException();
 8008ec4:	4809      	ldr	r0, [pc, #36]	; (8008eec <TypeSystemManager_CastToInterface$4952+0x54>)
 8008ec6:	490a      	ldr	r1, [pc, #40]	; (8008ef0 <TypeSystemManager_CastToInterface$4952+0x58>)
 8008ec8:	4479      	add	r1, pc
 8008eca:	4408      	add	r0, r1
 8008ecc:	4a09      	ldr	r2, [pc, #36]	; (8008ef4 <TypeSystemManager_CastToInterface$4952+0x5c>)
 8008ece:	4411      	add	r1, r2
 8008ed0:	9002      	str	r0, [sp, #8]
 8008ed2:	f7f7 fc75 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8008ed6:	9001      	str	r0, [sp, #4]
 8008ed8:	f7ff ffd6 	bl	8008e88 <InvalidCastException_.ctor$7120>
 8008edc:	9802      	ldr	r0, [sp, #8]
 8008ede:	9901      	ldr	r1, [sp, #4]
 8008ee0:	f7f7 fcc4 	bl	800086c <TypeSystemManager_Throw$4954>
 8008ee4:	e7ee      	b.n	8008ec4 <TypeSystemManager_CastToInterface$4952+0x2c>
                }
            }

            return obj;
        }
 8008ee6:	9803      	ldr	r0, [sp, #12]
                obj = CastToInterfaceNoThrow( obj, expected );
                if(obj == null)
                {
                    throw new InvalidCastException();
                }
            }
 8008ee8:	9004      	str	r0, [sp, #16]
 8008eea:	e7e8      	b.n	8008ebe <TypeSystemManager_CastToInterface$4952+0x26>
 8008eec:	ffffea38 	.word	0xffffea38
 8008ef0:	17ff8908 	.word	0x17ff8908
 8008ef4:	e801235c 	.word	0xe801235c

08008ef8 <TypeSystemManager_CastToInterfaceNoThrow$4953>:
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b084      	sub	sp, #16
 8008efc:	4601      	mov	r1, r0

        [TS.WellKnownMethod( "TypeSystemManager_CastToInterfaceNoThrow" )]
        public static object CastToInterfaceNoThrow( object    obj      ,
                                                     TS.VTable expected )
        {
            if(obj != null)
 8008efe:	2800      	cmp	r0, #0
 8008f00:	9101      	str	r1, [sp, #4]
 8008f02:	d01c      	beq.n	8008f3e <TypeSystemManager_CastToInterfaceNoThrow$4953+0x46>
 8008f04:	e7ff      	b.n	8008f06 <TypeSystemManager_CastToInterfaceNoThrow$4953+0xe>

            oh.VirtualTable = vTable;
            oh.MultiUseWord = (int)(ObjectHeader.GarbageCollectorFlags.SpecialHandlerObject | ObjectHeader.GarbageCollectorFlags.Unmarked);

            return oh.Pack();
        }
 8008f06:	9801      	ldr	r0, [sp, #4]
 8008f08:	f100 0108 	add.w	r1, r0, #8
 8008f0c:	9102      	str	r1, [sp, #8]
 8008f0e:	2100      	movs	r1, #0
 8008f10:	9103      	str	r1, [sp, #12]
        private static T AtomicAllocatorSlow<T>( ref T obj ) where T : class, new()
        {
            T newObj = new T();

            System.Threading.Interlocked.CompareExchange( ref obj, newObj, default(T) );

 8008f12:	9a02      	ldr	r2, [sp, #8]
            return array.CastThisAsArray();
        }

        [Inline]
        public String InitializeString( UIntPtr   memory ,
                                        TS.VTable vTable ,
 8008f14:	3a08      	subs	r2, #8
 8008f16:	9103      	str	r1, [sp, #12]
 8008f18:	a903      	add	r1, sp, #12
 8008f1a:	f1a1 0008 	sub.w	r0, r1, #8
 8008f1e:	4611      	mov	r1, r2
 8008f20:	f7f7 fccc 	bl	80008bc <UIntPtr_.ctor$2864>

            oh.VirtualTable = vTable;
            oh.MultiUseWord = (int)(ObjectHeader.GarbageCollectorFlags.SpecialHandlerObject | ObjectHeader.GarbageCollectorFlags.Unmarked);

            return oh.Pack();
        }
 8008f24:	9803      	ldr	r0, [sp, #12]
        //--//

        [NoReturn]
        [NoInline]
        [TS.WellKnownMethod( "TypeSystemManager_Throw" )]
        public virtual void Throw( Exception obj )
 8008f26:	6840      	ldr	r0, [r0, #4]
 8008f28:	6a00      	ldr	r0, [r0, #32]
        {
            if(obj != null)
            {
                TS.VTable got = TS.VTable.Get( obj );

                if(got.ImplementsInterface( expected ))
 8008f2a:	490a      	ldr	r1, [pc, #40]	; (8008f54 <TypeSystemManager_CastToInterfaceNoThrow$4953+0x5c>)
 8008f2c:	4a0a      	ldr	r2, [pc, #40]	; (8008f58 <TypeSystemManager_CastToInterfaceNoThrow$4953+0x60>)
 8008f2e:	447a      	add	r2, pc
 8008f30:	4411      	add	r1, r2
 8008f32:	f7fd fa45 	bl	80063c0 <VTable_ImplementsInterface$3678>
 8008f36:	f010 0fff 	tst.w	r0, #255	; 0xff
 8008f3a:	d106      	bne.n	8008f4a <TypeSystemManager_CastToInterfaceNoThrow$4953+0x52>
 8008f3c:	e008      	b.n	8008f50 <TypeSystemManager_CastToInterfaceNoThrow$4953+0x58>
 8008f3e:	2000      	movs	r0, #0
                {
                    return obj;
                }
            }

            return null;
 8008f40:	9000      	str	r0, [sp, #0]
 8008f42:	e7ff      	b.n	8008f44 <TypeSystemManager_CastToInterfaceNoThrow$4953+0x4c>
        }
 8008f44:	9800      	ldr	r0, [sp, #0]
 8008f46:	b004      	add	sp, #16
 8008f48:	bd80      	pop	{r7, pc}
            {
                TS.VTable got = TS.VTable.Get( obj );

                if(got.ImplementsInterface( expected ))
                {
                    return obj;
 8008f4a:	9801      	ldr	r0, [sp, #4]
 8008f4c:	9000      	str	r0, [sp, #0]
 8008f4e:	e7f9      	b.n	8008f44 <TypeSystemManager_CastToInterfaceNoThrow$4953+0x4c>
                }
            }
 8008f50:	e7f5      	b.n	8008f3e <TypeSystemManager_CastToInterfaceNoThrow$4953+0x46>
 8008f52:	46c0      	nop			; (mov r8, r8)
 8008f54:	e8012d1c 	.word	0xe8012d1c
 8008f58:	17ff88a2 	.word	0x17ff88a2

08008f5c <TypeSystemManager_DeliverException$4957>:
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b08e      	sub	sp, #56	; 0x38
 8008f60:	4601      	mov	r1, r0
 8008f62:	2200      	movs	r2, #0
 8008f64:	9208      	str	r2, [sp, #32]
 8008f66:	4a37      	ldr	r2, [pc, #220]	; (8009044 <TypeSystemManager_DeliverException$4957+0xe8>)
 8008f68:	4b37      	ldr	r3, [pc, #220]	; (8009048 <TypeSystemManager_DeliverException$4957+0xec>)
 8008f6a:	447b      	add	r3, pc
 8008f6c:	441a      	add	r2, r3
 8008f6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008f70:	f8d2 c020 	ldr.w	ip, [r2, #32]
            // TODO: LT72: Only RT.ThreadManager can implement this method correctly
            //
            ThreadImpl        thread = ThreadManager.Instance.CurrentThread;
            Processor.Context ctx    = thread.ThrowContext;

            thread.CurrentException = obj;
 8008f74:	9007      	str	r0, [sp, #28]
 8008f76:	4610      	mov	r0, r2
 8008f78:	9a07      	ldr	r2, [sp, #28]
 8008f7a:	9106      	str	r1, [sp, #24]
 8008f7c:	4611      	mov	r1, r2
 8008f7e:	f8cd c014 	str.w	ip, [sp, #20]
 8008f82:	9304      	str	r3, [sp, #16]
 8008f84:	f7fb fc86 	bl	8004894 <Thread_set_CurrentException$4038>
 8008f88:	4830      	ldr	r0, [pc, #192]	; (800904c <TypeSystemManager_DeliverException$4957+0xf0>)
 8008f8a:	9904      	ldr	r1, [sp, #16]
 8008f8c:	5840      	ldr	r0, [r0, r1]
 8008f8e:	f7f7 f9b9 	bl	8000304 <BugCheck_Raise$4648>
            ThreadImpl        thread = ThreadManager.Instance.CurrentThread;
            Processor.Context ctx    = thread.ThrowContext;

            thread.CurrentException = obj;

            ctx.Populate();
 8008f92:	e7ff      	b.n	8008f94 <TypeSystemManager_DeliverException$4957+0x38>
 8008f94:	f7fa fb07 	bl	80035a6 <UIntPtr_op_Explicit$2876>
 8008f98:	9009      	str	r0, [sp, #36]	; 0x24
 8008f9a:	2000      	movs	r0, #0
 8008f9c:	900a      	str	r0, [sp, #40]	; 0x28
        private static T AtomicAllocatorSlow<T>( ref T obj ) where T : class, new()
        {
            T newObj = new T();

            System.Threading.Interlocked.CompareExchange( ref obj, newObj, default(T) );

 8008f9e:	9909      	ldr	r1, [sp, #36]	; 0x24
            return array.CastThisAsArray();
        }

        [Inline]
        public String InitializeString( UIntPtr   memory ,
                                        TS.VTable vTable ,
 8008fa0:	3904      	subs	r1, #4
 8008fa2:	900a      	str	r0, [sp, #40]	; 0x28
 8008fa4:	a80a      	add	r0, sp, #40	; 0x28
 8008fa6:	3808      	subs	r0, #8
 8008fa8:	f7f7 fc88 	bl	80008bc <UIntPtr_.ctor$2864>
 8008fac:	980a      	ldr	r0, [sp, #40]	; 0x28
            {
                //
                // The PC points to the instruction AFTER the call, but the ExceptionMap could not cover it.
                //
                UIntPtr    pc = AddressMath.Decrement( ctx.ProgramCounter, sizeof(uint) );
                TS.CodeMap cm = TS.CodeMap.ResolveAddressToCodeMap( pc );
 8008fae:	f000 f853 	bl	8009058 <CodeMap_ResolveAddressToCodeMap$13578>

                if(cm != null && cm.ExceptionMap != null)
 8008fb2:	4601      	mov	r1, r0
 8008fb4:	2800      	cmp	r0, #0
 8008fb6:	9103      	str	r1, [sp, #12]
 8008fb8:	d005      	beq.n	8008fc6 <TypeSystemManager_DeliverException$4957+0x6a>
 8008fba:	e7ff      	b.n	8008fbc <TypeSystemManager_DeliverException$4957+0x60>
 8008fbc:	9803      	ldr	r0, [sp, #12]
 8008fbe:	6881      	ldr	r1, [r0, #8]
 8008fc0:	2900      	cmp	r1, #0
 8008fc2:	d10d      	bne.n	8008fe0 <TypeSystemManager_DeliverException$4957+0x84>
 8008fc4:	e7ff      	b.n	8008fc6 <TypeSystemManager_DeliverException$4957+0x6a>
                        ctx.ProgramCounter = new UIntPtr( (uint)cp.Target.ToInt32() );
                        ctx.SwitchTo();
                    }
                }

                if(ctx.Unwind() == false)
 8008fc6:	9805      	ldr	r0, [sp, #20]
 8008fc8:	f7fa ff0e 	bl	8003de8 <Context_Unwind$5657>
 8008fcc:	9002      	str	r0, [sp, #8]
 8008fce:	e7ff      	b.n	8008fd0 <TypeSystemManager_DeliverException$4957+0x74>
 8008fd0:	481f      	ldr	r0, [pc, #124]	; (8009050 <TypeSystemManager_DeliverException$4957+0xf4>)
 8008fd2:	4920      	ldr	r1, [pc, #128]	; (8009054 <TypeSystemManager_DeliverException$4957+0xf8>)
 8008fd4:	4479      	add	r1, pc
 8008fd6:	5840      	ldr	r0, [r0, r1]
                {
                    break;
                }
            }

            BugCheck.Raise( BugCheck.StopCode.UnwindFailure );
 8008fd8:	f7f7 f994 	bl	8000304 <BugCheck_Raise$4648>
 8008fdc:	b00e      	add	sp, #56	; 0x38
 8008fde:	bd80      	pop	{r7, pc}
                UIntPtr    pc = AddressMath.Decrement( ctx.ProgramCounter, sizeof(uint) );
                TS.CodeMap cm = TS.CodeMap.ResolveAddressToCodeMap( pc );

                if(cm != null && cm.ExceptionMap != null)
                {
                    TS.CodePointer cp = cm.ExceptionMap.ResolveAddressToHandler( pc, TS.VTable.Get( obj ) );
 8008fe0:	9803      	ldr	r0, [sp, #12]
 8008fe2:	6880      	ldr	r0, [r0, #8]

            oh.VirtualTable = vTable;
            oh.MultiUseWord = (int)(ObjectHeader.GarbageCollectorFlags.SpecialHandlerObject | ObjectHeader.GarbageCollectorFlags.Unmarked);

            return oh.Pack();
        }
 8008fe4:	9906      	ldr	r1, [sp, #24]
 8008fe6:	f101 0208 	add.w	r2, r1, #8
 8008fea:	920b      	str	r2, [sp, #44]	; 0x2c
 8008fec:	2200      	movs	r2, #0
 8008fee:	920c      	str	r2, [sp, #48]	; 0x30
        private static T AtomicAllocatorSlow<T>( ref T obj ) where T : class, new()
        {
            T newObj = new T();

            System.Threading.Interlocked.CompareExchange( ref obj, newObj, default(T) );

 8008ff0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            return array.CastThisAsArray();
        }

        [Inline]
        public String InitializeString( UIntPtr   memory ,
                                        TS.VTable vTable ,
 8008ff2:	f1a3 0108 	sub.w	r1, r3, #8
 8008ff6:	920c      	str	r2, [sp, #48]	; 0x30
 8008ff8:	aa0c      	add	r2, sp, #48	; 0x30
 8008ffa:	3a08      	subs	r2, #8
 8008ffc:	9001      	str	r0, [sp, #4]
 8008ffe:	4610      	mov	r0, r2
 8009000:	f7f7 fc5c 	bl	80008bc <UIntPtr_.ctor$2864>

            oh.VirtualTable = vTable;
            oh.MultiUseWord = (int)(ObjectHeader.GarbageCollectorFlags.SpecialHandlerObject | ObjectHeader.GarbageCollectorFlags.Unmarked);

            return oh.Pack();
        }
 8009004:	980c      	ldr	r0, [sp, #48]	; 0x30
        //--//

        [NoReturn]
        [NoInline]
        [TS.WellKnownMethod( "TypeSystemManager_Throw" )]
        public virtual void Throw( Exception obj )
 8009006:	6842      	ldr	r2, [r0, #4]
 8009008:	990a      	ldr	r1, [sp, #40]	; 0x28
                UIntPtr    pc = AddressMath.Decrement( ctx.ProgramCounter, sizeof(uint) );
                TS.CodeMap cm = TS.CodeMap.ResolveAddressToCodeMap( pc );

                if(cm != null && cm.ExceptionMap != null)
                {
                    TS.CodePointer cp = cm.ExceptionMap.ResolveAddressToHandler( pc, TS.VTable.Get( obj ) );
 800900a:	9801      	ldr	r0, [sp, #4]
 800900c:	f000 f838 	bl	8009080 <ExceptionMap_ResolveAddressToHandler$13717>
 8009010:	9008      	str	r0, [sp, #32]
 8009012:	a808      	add	r0, sp, #32

                    if(cp.IsValid)
 8009014:	4601      	mov	r1, r0
 8009016:	3808      	subs	r0, #8
 8009018:	9100      	str	r1, [sp, #0]
 800901a:	f7fc fe88 	bl	8005d2e <CodePointer_get_IsValid$3651>
 800901e:	f010 0fff 	tst.w	r0, #255	; 0xff
 8009022:	d00d      	beq.n	8009040 <TypeSystemManager_DeliverException$4957+0xe4>
 8009024:	e7ff      	b.n	8009026 <TypeSystemManager_DeliverException$4957+0xca>
            object obj = InitializeObject( memory, vTable );

            ArrayImpl array = ArrayImpl.CastAsArray( obj );

            array.m_numElements = length;

 8009026:	9800      	ldr	r0, [sp, #0]
 8009028:	6801      	ldr	r1, [r0, #0]
 800902a:	2200      	movs	r2, #0
 800902c:	920d      	str	r2, [sp, #52]	; 0x34
 800902e:	aa0d      	add	r2, sp, #52	; 0x34
                {
                    TS.CodePointer cp = cm.ExceptionMap.ResolveAddressToHandler( pc, TS.VTable.Get( obj ) );

                    if(cp.IsValid)
                    {
                        ctx.ProgramCounter = new UIntPtr( (uint)cp.Target.ToInt32() );
 8009030:	f1a2 0008 	sub.w	r0, r2, #8
 8009034:	f7fa fa91 	bl	800355a <UIntPtr_.ctor$2860>
                        ctx.SwitchTo();
 8009038:	9805      	ldr	r0, [sp, #20]
 800903a:	f7fa fef7 	bl	8003e2c <Context_SwitchTo$16958>
                    }
 800903e:	e7ff      	b.n	8009040 <TypeSystemManager_DeliverException$4957+0xe4>
                }
 8009040:	e7c1      	b.n	8008fc6 <TypeSystemManager_DeliverException$4957+0x6a>
 8009042:	46c0      	nop			; (mov r8, r8)
 8009044:	ffffeaac 	.word	0xffffeaac
 8009048:	17ff8866 	.word	0x17ff8866
 800904c:	e8025314 	.word	0xe8025314
 8009050:	e8025318 	.word	0xe8025318
 8009054:	17ff87fc 	.word	0x17ff87fc

08009058 <CodeMap_ResolveAddressToCodeMap$13578>:
 8009058:	b580      	push	{r7, lr}
 800905a:	b082      	sub	sp, #8
 800905c:	4601      	mov	r1, r0
                m_array    = array;
                m_index    = -1;
                m_endIndex = array.Length;
            }
    
            public bool MoveNext()
 800905e:	4a06      	ldr	r2, [pc, #24]	; (8009078 <CodeMap_ResolveAddressToCodeMap$13578+0x20>)
 8009060:	4b06      	ldr	r3, [pc, #24]	; (800907c <CodeMap_ResolveAddressToCodeMap$13578+0x24>)
 8009062:	447b      	add	r3, pc
 8009064:	441a      	add	r2, r3
 8009066:	f8d2 20bc 	ldr.w	r2, [r2, #188]	; 0xbc
 800906a:	9101      	str	r1, [sp, #4]
 800906c:	4611      	mov	r1, r2
 800906e:	f006 f863 	bl	800f138 <CodeMap_ResolveAddressToCodeMap$13579>
 8009072:	b002      	add	sp, #8
 8009074:	bd80      	pop	{r7, pc}
 8009076:	46c0      	nop			; (mov r8, r8)
 8009078:	fffffe3c 	.word	0xfffffe3c
 800907c:	17ff876e 	.word	0x17ff876e

08009080 <ExceptionMap_ResolveAddressToHandler$13717>:
 8009080:	b580      	push	{r7, lr}
 8009082:	b08a      	sub	sp, #40	; 0x28
 8009084:	4603      	mov	r3, r0
 8009086:	f04f 0c00 	mov.w	ip, #0
 800908a:	f8cd c020 	str.w	ip, [sp, #32]
                if(m_namedArgs[i] == name)
                {
                    return i;
                }
            }

 800908e:	6880      	ldr	r0, [r0, #8]
            return -1;
        }
 8009090:	2800      	cmp	r0, #0
 8009092:	9307      	str	r3, [sp, #28]
 8009094:	9206      	str	r2, [sp, #24]
 8009096:	9105      	str	r1, [sp, #20]
 8009098:	9004      	str	r0, [sp, #16]
 800909a:	d003      	beq.n	80090a4 <ExceptionMap_ResolveAddressToHandler$13717+0x24>
 800909c:	e7ff      	b.n	800909e <ExceptionMap_ResolveAddressToHandler$13717+0x1e>
 800909e:	2000      	movs	r0, #0

        //--//
 80090a0:	9003      	str	r0, [sp, #12]
 80090a2:	e008      	b.n	80090b6 <ExceptionMap_ResolveAddressToHandler$13717+0x36>
 80090a4:	a809      	add	r0, sp, #36	; 0x24
 80090a6:	2100      	movs	r1, #0
 80090a8:	9109      	str	r1, [sp, #36]	; 0x24
        public MethodRepresentation Constructor
        {
            get
            {
                return m_constructor;
            }
 80090aa:	9002      	str	r0, [sp, #8]
 80090ac:	e7ff      	b.n	80090ae <ExceptionMap_ResolveAddressToHandler$13717+0x2e>
 80090ae:	9802      	ldr	r0, [sp, #8]
 80090b0:	6800      	ldr	r0, [r0, #0]
 80090b2:	b00a      	add	sp, #40	; 0x28
 80090b4:	bd80      	pop	{r7, pc}
 80090b6:	9803      	ldr	r0, [sp, #12]
 80090b8:	9904      	ldr	r1, [sp, #16]
 80090ba:	688a      	ldr	r2, [r1, #8]
            }

            return -1;
        }

        //--//
 80090bc:	4290      	cmp	r0, r2
 80090be:	9001      	str	r0, [sp, #4]
 80090c0:	da14      	bge.n	80090ec <ExceptionMap_ResolveAddressToHandler$13717+0x6c>
 80090c2:	e7ff      	b.n	80090c4 <ExceptionMap_ResolveAddressToHandler$13717+0x44>

        //
 80090c4:	9801      	ldr	r0, [sp, #4]
 80090c6:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 80090ca:	9a04      	ldr	r2, [sp, #16]
 80090cc:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80090d0:	1d08      	adds	r0, r1, #4
 80090d2:	9905      	ldr	r1, [sp, #20]
 80090d4:	9a06      	ldr	r2, [sp, #24]
 80090d6:	f006 f89e 	bl	800f216 <Range_Match$14951>
 80090da:	9008      	str	r0, [sp, #32]
 80090dc:	a808      	add	r0, sp, #32
        // Access Methods
        //
 80090de:	3808      	subs	r0, #8
 80090e0:	f7fc fe25 	bl	8005d2e <CodePointer_get_IsValid$3651>
 80090e4:	f010 0fff 	tst.w	r0, #255	; 0xff
 80090e8:	d101      	bne.n	80090ee <ExceptionMap_ResolveAddressToHandler$13717+0x6e>
 80090ea:	e005      	b.n	80090f8 <ExceptionMap_ResolveAddressToHandler$13717+0x78>

        public MethodRepresentation Constructor
        {
            get
            {
 80090ec:	e7da      	b.n	80090a4 <ExceptionMap_ResolveAddressToHandler$13717+0x24>
 80090ee:	a809      	add	r0, sp, #36	; 0x24
 80090f0:	9908      	ldr	r1, [sp, #32]
 80090f2:	9109      	str	r1, [sp, #36]	; 0x24

        //
        // Access Methods
        //

        public MethodRepresentation Constructor
 80090f4:	9002      	str	r0, [sp, #8]
 80090f6:	e7da      	b.n	80090ae <ExceptionMap_ResolveAddressToHandler$13717+0x2e>
            }

            return -1;
        }

        //--//
 80090f8:	9801      	ldr	r0, [sp, #4]
 80090fa:	1c41      	adds	r1, r0, #1
 80090fc:	9103      	str	r1, [sp, #12]
 80090fe:	e7da      	b.n	80090b6 <ExceptionMap_ResolveAddressToHandler$13717+0x36>

08009100 <TypeSystemManager_AtomicAllocatorSlow$36985>:
        }

        [NoInline]
        private static T AtomicAllocatorSlow<T>( ref T obj ) where T : class, new()
        {
            T newObj = new T();
 8009100:	b580      	push	{r7, lr}
 8009102:	b082      	sub	sp, #8
 8009104:	f000 f810 	bl	8009128 <Activator_CreateInstance$38387>

            System.Threading.Interlocked.CompareExchange( ref obj, newObj, default(T) );
 8009108:	f000 f824 	bl	8009154 <Interlocked_CompareExchange$50052>

            return obj;
 800910c:	4904      	ldr	r1, [pc, #16]	; (8009120 <TypeSystemManager_AtomicAllocatorSlow$36985+0x20>)
 800910e:	4a05      	ldr	r2, [pc, #20]	; (8009124 <TypeSystemManager_AtomicAllocatorSlow$36985+0x24>)
 8009110:	447a      	add	r2, pc
 8009112:	4411      	add	r1, r2
 8009114:	f8d1 1100 	ldr.w	r1, [r1, #256]	; 0x100
 8009118:	9001      	str	r0, [sp, #4]
 800911a:	4608      	mov	r0, r1
 800911c:	b002      	add	sp, #8
 800911e:	bd80      	pop	{r7, pc}
 8009120:	fffffe3c 	.word	0xfffffe3c
 8009124:	17ff86c0 	.word	0x17ff86c0

08009128 <Activator_CreateInstance$38387>:
////        return rt.CreateInstanceImpl( !nonPublic, false, false );
////    }
    
        static public T CreateInstance<T>()
        {
            return (T)CreateInstanceInner( typeof(T) );
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	4806      	ldr	r0, [pc, #24]	; (8009148 <Activator_CreateInstance$38387+0x20>)
 800912e:	4907      	ldr	r1, [pc, #28]	; (800914c <Activator_CreateInstance$38387+0x24>)
 8009130:	4479      	add	r1, pc
 8009132:	4408      	add	r0, r1
 8009134:	4a06      	ldr	r2, [pc, #24]	; (8009150 <Activator_CreateInstance$38387+0x28>)
 8009136:	4411      	add	r1, r2
 8009138:	f7f7 fb42 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800913c:	9001      	str	r0, [sp, #4]
 800913e:	f000 fceb 	bl	8009b18 <TimerPool_.ctor$5352>
 8009142:	9801      	ldr	r0, [sp, #4]
 8009144:	b002      	add	sp, #8
 8009146:	bd80      	pop	{r7, pc}
 8009148:	ffffea38 	.word	0xffffea38
 800914c:	17ff86a0 	.word	0x17ff86a0
 8009150:	e8012b2c 	.word	0xe8012b2c

08009154 <Interlocked_CompareExchange$50052>:
 8009154:	b580      	push	{r7, lr}
 8009156:	b086      	sub	sp, #24
 8009158:	2100      	movs	r1, #0
 800915a:	9104      	str	r1, [sp, #16]
 800915c:	9105      	str	r1, [sp, #20]

                location1 = value;

                return oldValue;
            }
        }
 800915e:	9003      	str	r0, [sp, #12]
 8009160:	9102      	str	r1, [sp, #8]
 8009162:	f7fb fa53 	bl	800460c <ProcessorARMv7M_DisableInterrupts$3259>
 8009166:	9902      	ldr	r1, [sp, #8]
 8009168:	9105      	str	r1, [sp, #20]
 800916a:	9005      	str	r0, [sp, #20]
 800916c:	9004      	str	r0, [sp, #16]
                                                T value     ,
                                                T comparand ) where T : class
        {
            using(SmartHandles.InterruptState.DisableAll())
            {
                T oldValue = location1;
 800916e:	480c      	ldr	r0, [pc, #48]	; (80091a0 <Interlocked_CompareExchange$50052+0x4c>)
 8009170:	4a0c      	ldr	r2, [pc, #48]	; (80091a4 <Interlocked_CompareExchange$50052+0x50>)
 8009172:	447a      	add	r2, pc
 8009174:	4410      	add	r0, r2
 8009176:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100

                if(Object.ReferenceEquals( oldValue, comparand ))
 800917a:	2800      	cmp	r0, #0
 800917c:	9001      	str	r0, [sp, #4]
 800917e:	d108      	bne.n	8009192 <Interlocked_CompareExchange$50052+0x3e>
 8009180:	e7ff      	b.n	8009182 <Interlocked_CompareExchange$50052+0x2e>
 8009182:	4807      	ldr	r0, [pc, #28]	; (80091a0 <Interlocked_CompareExchange$50052+0x4c>)
 8009184:	4908      	ldr	r1, [pc, #32]	; (80091a8 <Interlocked_CompareExchange$50052+0x54>)
 8009186:	4479      	add	r1, pc
 8009188:	4408      	add	r0, r1
 800918a:	9903      	ldr	r1, [sp, #12]
 800918c:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
                {
                    location1 = value;
                }
 8009190:	e7ff      	b.n	8009192 <Interlocked_CompareExchange$50052+0x3e>
        }

        public static int Decrement( ref int location )
        {
            using(SmartHandles.InterruptState.DisableAll())
            {
 8009192:	9804      	ldr	r0, [sp, #16]
 8009194:	f7fb fa5c 	bl	8004650 <ProcessorARMv7M_DisableInterruptsWithPriorityLevelHigherOrEqualTo$3266>
 8009198:	9801      	ldr	r0, [sp, #4]
 800919a:	b006      	add	sp, #24
 800919c:	bd80      	pop	{r7, pc}
 800919e:	46c0      	nop			; (mov r8, r8)
 80091a0:	fffffe3c 	.word	0xfffffe3c
 80091a4:	17ff865e 	.word	0x17ff865e
 80091a8:	17ff864a 	.word	0x17ff864a

080091ac <Activator_CreateInstance$38390>:
 80091ac:	b580      	push	{r7, lr}
 80091ae:	4804      	ldr	r0, [pc, #16]	; (80091c0 <Activator_CreateInstance$38390+0x14>)
 80091b0:	4904      	ldr	r1, [pc, #16]	; (80091c4 <Activator_CreateInstance$38390+0x18>)
 80091b2:	4479      	add	r1, pc
 80091b4:	4408      	add	r0, r1
 80091b6:	4a04      	ldr	r2, [pc, #16]	; (80091c8 <Activator_CreateInstance$38390+0x1c>)
 80091b8:	4411      	add	r1, r2
 80091ba:	f7f7 fb01 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 80091be:	bd80      	pop	{r7, pc}
 80091c0:	ffffea38 	.word	0xffffea38
 80091c4:	17ff861e 	.word	0x17ff861e
 80091c8:	e8012bbc 	.word	0xe8012bbc

080091cc <Interlocked_CompareExchange$50054>:
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b086      	sub	sp, #24
 80091d0:	2100      	movs	r1, #0
 80091d2:	9104      	str	r1, [sp, #16]
 80091d4:	9105      	str	r1, [sp, #20]

                location1 = value;

                return oldValue;
            }
        }
 80091d6:	9003      	str	r0, [sp, #12]
 80091d8:	9102      	str	r1, [sp, #8]
 80091da:	f7fb fa17 	bl	800460c <ProcessorARMv7M_DisableInterrupts$3259>
 80091de:	9902      	ldr	r1, [sp, #8]
 80091e0:	9105      	str	r1, [sp, #20]
 80091e2:	9005      	str	r0, [sp, #20]
 80091e4:	9004      	str	r0, [sp, #16]
                                                T value     ,
                                                T comparand ) where T : class
        {
            using(SmartHandles.InterruptState.DisableAll())
            {
                T oldValue = location1;
 80091e6:	480b      	ldr	r0, [pc, #44]	; (8009214 <Interlocked_CompareExchange$50054+0x48>)
 80091e8:	4a0b      	ldr	r2, [pc, #44]	; (8009218 <Interlocked_CompareExchange$50054+0x4c>)
 80091ea:	447a      	add	r2, pc
 80091ec:	4410      	add	r0, r2
 80091ee:	6880      	ldr	r0, [r0, #8]

                if(Object.ReferenceEquals( oldValue, comparand ))
 80091f0:	2800      	cmp	r0, #0
 80091f2:	9001      	str	r0, [sp, #4]
 80091f4:	d107      	bne.n	8009206 <Interlocked_CompareExchange$50054+0x3a>
 80091f6:	e7ff      	b.n	80091f8 <Interlocked_CompareExchange$50054+0x2c>
 80091f8:	4806      	ldr	r0, [pc, #24]	; (8009214 <Interlocked_CompareExchange$50054+0x48>)
 80091fa:	4908      	ldr	r1, [pc, #32]	; (800921c <Interlocked_CompareExchange$50054+0x50>)
 80091fc:	4479      	add	r1, pc
 80091fe:	4408      	add	r0, r1
 8009200:	9903      	ldr	r1, [sp, #12]
 8009202:	6081      	str	r1, [r0, #8]
                {
                    location1 = value;
                }
 8009204:	e7ff      	b.n	8009206 <Interlocked_CompareExchange$50054+0x3a>
        }

        public static int Decrement( ref int location )
        {
            using(SmartHandles.InterruptState.DisableAll())
            {
 8009206:	9804      	ldr	r0, [sp, #16]
 8009208:	f7fb fa22 	bl	8004650 <ProcessorARMv7M_DisableInterruptsWithPriorityLevelHigherOrEqualTo$3266>
 800920c:	9801      	ldr	r0, [sp, #4]
 800920e:	b006      	add	sp, #24
 8009210:	bd80      	pop	{r7, pc}
 8009212:	46c0      	nop			; (mov r8, r8)
 8009214:	ffffeafc 	.word	0xffffeafc
 8009218:	17ff85e6 	.word	0x17ff85e6
 800921c:	17ff85d4 	.word	0x17ff85d4

08009220 <Activator_CreateInstance$38393>:
 8009220:	b580      	push	{r7, lr}
 8009222:	b082      	sub	sp, #8
 8009224:	4806      	ldr	r0, [pc, #24]	; (8009240 <Activator_CreateInstance$38393+0x20>)
 8009226:	4907      	ldr	r1, [pc, #28]	; (8009244 <Activator_CreateInstance$38393+0x24>)
 8009228:	4479      	add	r1, pc
 800922a:	4408      	add	r0, r1
 800922c:	4a06      	ldr	r2, [pc, #24]	; (8009248 <Activator_CreateInstance$38393+0x28>)
 800922e:	4411      	add	r1, r2
 8009230:	f7f7 fac6 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8009234:	9001      	str	r0, [sp, #4]
 8009236:	f000 f88f 	bl	8009358 <CriticalSection_.ctor$4976>
 800923a:	9801      	ldr	r0, [sp, #4]
 800923c:	b002      	add	sp, #8
 800923e:	bd80      	pop	{r7, pc}
 8009240:	ffffea38 	.word	0xffffea38
 8009244:	17ff85a8 	.word	0x17ff85a8
 8009248:	e8012c4c 	.word	0xe8012c4c

0800924c <Interlocked_CompareExchange$50056>:
 800924c:	b580      	push	{r7, lr}
 800924e:	b088      	sub	sp, #32
 8009250:	4602      	mov	r2, r0
 8009252:	2300      	movs	r3, #0
 8009254:	9306      	str	r3, [sp, #24]
 8009256:	9307      	str	r3, [sp, #28]

                location1 = value;

                return oldValue;
            }
        }
 8009258:	9005      	str	r0, [sp, #20]
 800925a:	9104      	str	r1, [sp, #16]
 800925c:	9203      	str	r2, [sp, #12]
 800925e:	9302      	str	r3, [sp, #8]
 8009260:	f7fb f9d4 	bl	800460c <ProcessorARMv7M_DisableInterrupts$3259>
 8009264:	9902      	ldr	r1, [sp, #8]
 8009266:	9107      	str	r1, [sp, #28]
 8009268:	9007      	str	r0, [sp, #28]
 800926a:	9006      	str	r0, [sp, #24]
                                                T value     ,
                                                T comparand ) where T : class
        {
            using(SmartHandles.InterruptState.DisableAll())
            {
                T oldValue = location1;
 800926c:	9805      	ldr	r0, [sp, #20]
 800926e:	6802      	ldr	r2, [r0, #0]

                if(Object.ReferenceEquals( oldValue, comparand ))
 8009270:	2a00      	cmp	r2, #0
 8009272:	9201      	str	r2, [sp, #4]
 8009274:	d104      	bne.n	8009280 <Interlocked_CompareExchange$50056+0x34>
 8009276:	e7ff      	b.n	8009278 <Interlocked_CompareExchange$50056+0x2c>
 8009278:	9804      	ldr	r0, [sp, #16]
 800927a:	9903      	ldr	r1, [sp, #12]
 800927c:	6008      	str	r0, [r1, #0]
                {
                    location1 = value;
                }
 800927e:	e7ff      	b.n	8009280 <Interlocked_CompareExchange$50056+0x34>
        }

        public static int Decrement( ref int location )
        {
            using(SmartHandles.InterruptState.DisableAll())
            {
 8009280:	9806      	ldr	r0, [sp, #24]
 8009282:	f7fb f9e5 	bl	8004650 <ProcessorARMv7M_DisableInterruptsWithPriorityLevelHigherOrEqualTo$3266>
 8009286:	9801      	ldr	r0, [sp, #4]
 8009288:	b008      	add	sp, #32
 800928a:	bd80      	pop	{r7, pc}

0800928c <DefaultTypeSystemManager_ComputeObjectSize$4965>:
 800928c:	b081      	sub	sp, #4
 800928e:	4601      	mov	r1, r0
            size += vTable.BaseSize;

            //
            // Align to word boundary.
            //
            size = (size + (sizeof(uint)-1)) & ~(uint)(sizeof(uint)-1);
 8009290:	300b      	adds	r0, #11
 8009292:	f020 0003 	bic.w	r0, r0, #3
 8009296:	9100      	str	r1, [sp, #0]
 8009298:	b001      	add	sp, #4
 800929a:	4770      	bx	lr

0800929c <DefaultTypeSystemManager_AllocateInner$4967>:
 800929c:	b580      	push	{r7, lr}
 800929e:	b088      	sub	sp, #32
 80092a0:	4601      	mov	r1, r0

        [TS.WellKnownMethod("DebugGC_DefaultTypeSystemManager_AllocateInner")]
        private UIntPtr AllocateInner( TS.VTable vTable ,
                                       uint      size   )
        {
            UIntPtr ptr = MemoryManager.Instance.Allocate( size );
 80092a2:	4a1d      	ldr	r2, [pc, #116]	; (8009318 <DefaultTypeSystemManager_AllocateInner$4967+0x7c>)
 80092a4:	4b1d      	ldr	r3, [pc, #116]	; (800931c <DefaultTypeSystemManager_AllocateInner$4967+0x80>)
 80092a6:	447b      	add	r3, pc
 80092a8:	441a      	add	r2, r3
 80092aa:	9007      	str	r0, [sp, #28]
 80092ac:	4610      	mov	r0, r2
 80092ae:	9a07      	ldr	r2, [sp, #28]
 80092b0:	9106      	str	r1, [sp, #24]
 80092b2:	4611      	mov	r1, r2
 80092b4:	9305      	str	r3, [sp, #20]
 80092b6:	f7ff f893 	bl	80083e0 <LinearMemoryManager_Allocate$4640>
 80092ba:	4601      	mov	r1, r0
 80092bc:	4a18      	ldr	r2, [pc, #96]	; (8009320 <DefaultTypeSystemManager_AllocateInner$4967+0x84>)
 80092be:	9b05      	ldr	r3, [sp, #20]
 80092c0:	441a      	add	r2, r3
 80092c2:	f8d2 2104 	ldr.w	r2, [r2, #260]	; 0x104

            if(ptr == UIntPtr.Zero)
 80092c6:	9104      	str	r1, [sp, #16]
 80092c8:	4611      	mov	r1, r2
 80092ca:	f7fa f988 	bl	80035de <UIntPtr_op_Equality$2886>
 80092ce:	f010 0fff 	tst.w	r0, #255	; 0xff
 80092d2:	9804      	ldr	r0, [sp, #16]
 80092d4:	9003      	str	r0, [sp, #12]
 80092d6:	d017      	beq.n	8009308 <DefaultTypeSystemManager_AllocateInner$4967+0x6c>
 80092d8:	e7ff      	b.n	80092da <DefaultTypeSystemManager_AllocateInner$4967+0x3e>
            {
                GarbageCollectionManager.Instance.Collect();

                ptr = MemoryManager.Instance.Allocate( size );
 80092da:	480f      	ldr	r0, [pc, #60]	; (8009318 <DefaultTypeSystemManager_AllocateInner$4967+0x7c>)
 80092dc:	4911      	ldr	r1, [pc, #68]	; (8009324 <DefaultTypeSystemManager_AllocateInner$4967+0x88>)
 80092de:	4479      	add	r1, pc
 80092e0:	4408      	add	r0, r1
 80092e2:	9a06      	ldr	r2, [sp, #24]
 80092e4:	9102      	str	r1, [sp, #8]
 80092e6:	4611      	mov	r1, r2
 80092e8:	f7ff f87a 	bl	80083e0 <LinearMemoryManager_Allocate$4640>
 80092ec:	4601      	mov	r1, r0
 80092ee:	4a0c      	ldr	r2, [pc, #48]	; (8009320 <DefaultTypeSystemManager_AllocateInner$4967+0x84>)
 80092f0:	9b02      	ldr	r3, [sp, #8]
 80092f2:	441a      	add	r2, r3
 80092f4:	f8d2 2104 	ldr.w	r2, [r2, #260]	; 0x104
                if(ptr == UIntPtr.Zero)
 80092f8:	9101      	str	r1, [sp, #4]
 80092fa:	4611      	mov	r1, r2
 80092fc:	f7fa f96f 	bl	80035de <UIntPtr_op_Equality$2886>
 8009300:	f010 0fff 	tst.w	r0, #255	; 0xff
 8009304:	d103      	bne.n	800930e <DefaultTypeSystemManager_AllocateInner$4967+0x72>
 8009306:	e003      	b.n	8009310 <DefaultTypeSystemManager_AllocateInner$4967+0x74>
 8009308:	9803      	ldr	r0, [sp, #12]
 800930a:	b008      	add	sp, #32
 800930c:	bd80      	pop	{r7, pc}
                {
                    GarbageCollectionManager.Instance.ThrowOutOfMemory( vTable );
                }
 800930e:	e7ff      	b.n	8009310 <DefaultTypeSystemManager_AllocateInner$4967+0x74>
 8009310:	9801      	ldr	r0, [sp, #4]
            }
 8009312:	9003      	str	r0, [sp, #12]
 8009314:	e7f8      	b.n	8009308 <DefaultTypeSystemManager_AllocateInner$4967+0x6c>
 8009316:	46c0      	nop			; (mov r8, r8)
 8009318:	ffffea0c 	.word	0xffffea0c
 800931c:	17ff852a 	.word	0x17ff852a
 8009320:	fffffe3c 	.word	0xfffffe3c
 8009324:	17ff84f2 	.word	0x17ff84f2

08009328 <DefaultTypeSystemManager_ComputeArraySize$4966>:
 8009328:	b580      	push	{r7, lr}
 800932a:	b083      	sub	sp, #12
 800932c:	4613      	mov	r3, r2
 800932e:	468c      	mov	ip, r1
 8009330:	4686      	mov	lr, r0
        public static uint ComputeArraySize( TS.VTable vTable ,
                                             uint      length )
        {
            uint size = (uint)System.Runtime.InteropServices.Marshal.SizeOf( typeof(ObjectHeader) );

            size += vTable.BaseSize;
 8009332:	fb01 0002 	mla	r0, r1, r2, r0

            return Microsoft.Zelig.AddressMath.AlignToWordBoundary( size );
        }

        //--//

 8009336:	300b      	adds	r0, #11
 8009338:	f020 0003 	bic.w	r0, r0, #3
 800933c:	f8cd c008 	str.w	ip, [sp, #8]
 8009340:	f8cd e004 	str.w	lr, [sp, #4]
 8009344:	9300      	str	r3, [sp, #0]
 8009346:	b003      	add	sp, #12
 8009348:	bd80      	pop	{r7, pc}

0800934a <Exception_.ctor$7036>:
 800934a:	b081      	sub	sp, #4
 800934c:	4601      	mov	r1, r0
 800934e:	2200      	movs	r2, #0
 8009350:	6082      	str	r2, [r0, #8]
 8009352:	9100      	str	r1, [sp, #0]
 8009354:	b001      	add	sp, #4
 8009356:	4770      	bx	lr

08009358 <CriticalSection_.ctor$4976>:
 8009358:	b580      	push	{r7, lr}
 800935a:	b082      	sub	sp, #8
 800935c:	4601      	mov	r1, r0
            }

            while(true)
            {
                using(SmartHandles.InterruptState.Disable())
                {
 800935e:	9101      	str	r1, [sp, #4]
 8009360:	f000 f802 	bl	8009368 <WaitableObject_.ctor$4982>
 8009364:	b002      	add	sp, #8
 8009366:	bd80      	pop	{r7, pc}

08009368 <WaitableObject_.ctor$4982>:
 8009368:	b580      	push	{r7, lr}
 800936a:	b086      	sub	sp, #24
 800936c:	4601      	mov	r1, r0
                }
            }

            public static bool AvoidPriorityInversionOnRelease
            {
                [ConfigurationOption("CriticalSection__AvoidPriorityInversionOnRelease")]
 800936e:	4a12      	ldr	r2, [pc, #72]	; (80093b8 <WaitableObject_.ctor$4982+0x50>)
 8009370:	4b12      	ldr	r3, [pc, #72]	; (80093bc <WaitableObject_.ctor$4982+0x54>)
 8009372:	447b      	add	r3, pc
 8009374:	441a      	add	r2, r3
 8009376:	f8df c048 	ldr.w	ip, [pc, #72]	; 80093c0 <WaitableObject_.ctor$4982+0x58>
 800937a:	449c      	add	ip, r3
 800937c:	9005      	str	r0, [sp, #20]
 800937e:	4610      	mov	r0, r2
 8009380:	9104      	str	r1, [sp, #16]
 8009382:	4661      	mov	r1, ip
 8009384:	9203      	str	r2, [sp, #12]
 8009386:	9302      	str	r3, [sp, #8]
 8009388:	f7f7 fa1a 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800938c:	9001      	str	r0, [sp, #4]
 800938e:	9905      	ldr	r1, [sp, #20]
 8009390:	f000 f9c8 	bl	8009724 <KernelNode`1_.ctor$17680>
 8009394:	9801      	ldr	r0, [sp, #4]
 8009396:	9905      	ldr	r1, [sp, #20]
 8009398:	6088      	str	r0, [r1, #8]
                get
 800939a:	4a0a      	ldr	r2, [pc, #40]	; (80093c4 <WaitableObject_.ctor$4982+0x5c>)
 800939c:	9b02      	ldr	r3, [sp, #8]
 800939e:	18d1      	adds	r1, r2, r3
 80093a0:	9803      	ldr	r0, [sp, #12]
 80093a2:	f7f7 fa0d 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 80093a6:	9000      	str	r0, [sp, #0]
 80093a8:	f7fa fd9e 	bl	8003ee8 <KernelList`1_.ctor$17418>
 80093ac:	9800      	ldr	r0, [sp, #0]
 80093ae:	9905      	ldr	r1, [sp, #20]
 80093b0:	60c8      	str	r0, [r1, #12]
 80093b2:	b006      	add	sp, #24
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	46c0      	nop			; (mov r8, r8)
 80093b8:	ffffea38 	.word	0xffffea38
 80093bc:	17ff845e 	.word	0x17ff845e
 80093c0:	e80125bc 	.word	0xe80125bc
 80093c4:	e8010f9c 	.word	0xe8010f9c

080093c8 <CriticalSection_Acquire$4977>:
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b094      	sub	sp, #80	; 0x50
 80093cc:	a912      	add	r1, sp, #72	; 0x48
 80093ce:	f04f 0c00 	mov.w	ip, #0
 80093d2:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 80093d6:	f8df c164 	ldr.w	ip, [pc, #356]	; 800953c <CriticalSection_Acquire$4977+0x174>
 80093da:	f8df e164 	ldr.w	lr, [pc, #356]	; 8009540 <CriticalSection_Acquire$4977+0x178>
 80093de:	44fe      	add	lr, pc
 80093e0:	44f4      	add	ip, lr
 80093e2:	f8dc c0f8 	ldr.w	ip, [ip, #248]	; 0xf8

        public override bool Acquire( SchedulerTime timeout )
        {
            ThreadImpl thisThread = ThreadImpl.CurrentThread;

            if(thisThread == null)
 80093e6:	f1bc 0f00 	cmp.w	ip, #0
 80093ea:	9211      	str	r2, [sp, #68]	; 0x44
 80093ec:	9310      	str	r3, [sp, #64]	; 0x40
 80093ee:	900f      	str	r0, [sp, #60]	; 0x3c
 80093f0:	910e      	str	r1, [sp, #56]	; 0x38
 80093f2:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 80093f6:	d103      	bne.n	8009400 <CriticalSection_Acquire$4977+0x38>
 80093f8:	e7ff      	b.n	80093fa <CriticalSection_Acquire$4977+0x32>
 80093fa:	2001      	movs	r0, #1
            {
                //
                // Special case for boot code path: all locks are transparent.
                //
                return true;
 80093fc:	900c      	str	r0, [sp, #48]	; 0x30
 80093fe:	e072      	b.n	80094e6 <CriticalSection_Acquire$4977+0x11e>
            }

            //
            // Fast shortcut for non-contended case.
            //
            if(m_ownerThread == null)
 8009400:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009402:	6901      	ldr	r1, [r0, #16]
 8009404:	2900      	cmp	r1, #0
 8009406:	d101      	bne.n	800940c <CriticalSection_Acquire$4977+0x44>
 8009408:	e7ff      	b.n	800940a <CriticalSection_Acquire$4977+0x42>
                {
                    thisThread.AcquiredWaitableObject( this );
                    return true;
                }
#endif // ENABLE_GENERICS_BUG
            }
 800940a:	e7ff      	b.n	800940c <CriticalSection_Acquire$4977+0x44>

            //
            // Fast shortcut for nested calls.
            //
            if(m_ownerThread == thisThread)
 800940c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800940e:	6901      	ldr	r1, [r0, #16]
 8009410:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009412:	4291      	cmp	r1, r2
 8009414:	d107      	bne.n	8009426 <CriticalSection_Acquire$4977+0x5e>
 8009416:	e7ff      	b.n	8009418 <CriticalSection_Acquire$4977+0x50>
 8009418:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800941a:	6941      	ldr	r1, [r0, #20]
            {
                m_nestingCount++;
 800941c:	3101      	adds	r1, #1
 800941e:	6141      	str	r1, [r0, #20]
 8009420:	2101      	movs	r1, #1
                return true;
 8009422:	910c      	str	r1, [sp, #48]	; 0x30
 8009424:	e05f      	b.n	80094e6 <CriticalSection_Acquire$4977+0x11e>
            }

            using(Synchronization.WaitingRecord.Holder holder = WaitingRecord.Holder.Get( thisThread, this, timeout ))
 8009426:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009428:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800942a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800942c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800942e:	f000 f889 	bl	8009544 <Holder_Get$5587>
            {
 8009432:	900b      	str	r0, [sp, #44]	; 0x2c
 8009434:	e7ff      	b.n	8009436 <CriticalSection_Acquire$4977+0x6e>
 8009436:	2000      	movs	r0, #0
 8009438:	9013      	str	r0, [sp, #76]	; 0x4c

        public override bool Acquire( SchedulerTime timeout )
        {
            ThreadImpl thisThread = ThreadImpl.CurrentThread;

            if(thisThread == null)
 800943a:	900a      	str	r0, [sp, #40]	; 0x28
 800943c:	f7fb f8e6 	bl	800460c <ProcessorARMv7M_DisableInterrupts$3259>
 8009440:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009442:	9113      	str	r1, [sp, #76]	; 0x4c
 8009444:	9013      	str	r0, [sp, #76]	; 0x4c
 8009446:	0e02      	lsrs	r2, r0, #24
 8009448:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800944a:	70da      	strb	r2, [r3, #3]
 800944c:	0c02      	lsrs	r2, r0, #16
 800944e:	709a      	strb	r2, [r3, #2]
 8009450:	0a02      	lsrs	r2, r0, #8
 8009452:	705a      	strb	r2, [r3, #1]
 8009454:	7018      	strb	r0, [r3, #0]
                    bool fNotify = false;
                    bool fResult = false;

                    using(SmartHandles.InterruptState.Disable())
                    {
                        if(holder.ShouldTryToAcquire)
 8009456:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009458:	f000 f88a 	bl	8009570 <Holder_get_ShouldTryToAcquire$5588>
 800945c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800945e:	f010 0fff 	tst.w	r0, #255	; 0xff
 8009462:	4608      	mov	r0, r1
 8009464:	9009      	str	r0, [sp, #36]	; 0x24
 8009466:	9108      	str	r1, [sp, #32]
 8009468:	d005      	beq.n	8009476 <CriticalSection_Acquire$4977+0xae>
 800946a:	e7ff      	b.n	800946c <CriticalSection_Acquire$4977+0xa4>
                        {
                            if(m_ownerThread == null)
 800946c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800946e:	6901      	ldr	r1, [r0, #16]
 8009470:	2900      	cmp	r1, #0
 8009472:	d041      	beq.n	80094f8 <CriticalSection_Acquire$4977+0x130>
 8009474:	e048      	b.n	8009508 <CriticalSection_Acquire$4977+0x140>
 8009476:	9808      	ldr	r0, [sp, #32]
 8009478:	9909      	ldr	r1, [sp, #36]	; 0x24
        //
        // State
        //

        volatile ThreadImpl m_ownerThread;
        volatile int        m_nestingCount;
 800947a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800947c:	9007      	str	r0, [sp, #28]
 800947e:	4610      	mov	r0, r2
 8009480:	9106      	str	r1, [sp, #24]
 8009482:	f7fb f8e5 	bl	8004650 <ProcessorARMv7M_DisableInterruptsWithPriorityLevelHigherOrEqualTo$3266>
                                }
                            }
                        }
                    }

                    if(fNotify)
 8009486:	9807      	ldr	r0, [sp, #28]
 8009488:	f010 0fff 	tst.w	r0, #255	; 0xff
 800948c:	d005      	beq.n	800949a <CriticalSection_Acquire$4977+0xd2>
 800948e:	e7ff      	b.n	8009490 <CriticalSection_Acquire$4977+0xc8>
                    {
                        thisThread.AcquiredWaitableObject( this );
 8009490:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009492:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009494:	f7fb f898 	bl	80045c8 <Thread_AcquiredWaitableObject$4012>
                    }
 8009498:	e7ff      	b.n	800949a <CriticalSection_Acquire$4977+0xd2>

                    if(fResult)
 800949a:	9806      	ldr	r0, [sp, #24]
 800949c:	f010 0fff 	tst.w	r0, #255	; 0xff
 80094a0:	9005      	str	r0, [sp, #20]
 80094a2:	d008      	beq.n	80094b6 <CriticalSection_Acquire$4977+0xee>
 80094a4:	e7ff      	b.n	80094a6 <CriticalSection_Acquire$4977+0xde>
 80094a6:	9805      	ldr	r0, [sp, #20]
                return true;
            }

            using(Synchronization.WaitingRecord.Holder holder = WaitingRecord.Holder.Get( thisThread, this, timeout ))
            {
                while(true)
 80094a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80094aa:	2900      	cmp	r1, #0
 80094ac:	4602      	mov	r2, r0
 80094ae:	9004      	str	r0, [sp, #16]
 80094b0:	920c      	str	r2, [sp, #48]	; 0x30
 80094b2:	d11b      	bne.n	80094ec <CriticalSection_Acquire$4977+0x124>
 80094b4:	e017      	b.n	80094e6 <CriticalSection_Acquire$4977+0x11e>
                    if(fResult)
                    {
                        return fResult;
                    }

                    if(holder.RequestProcessed)
 80094b6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80094b8:	f000 f873 	bl	80095a2 <Holder_get_RequestProcessed$5589>
 80094bc:	f010 0fff 	tst.w	r0, #255	; 0xff
 80094c0:	d00a      	beq.n	80094d8 <CriticalSection_Acquire$4977+0x110>
 80094c2:	e7ff      	b.n	80094c4 <CriticalSection_Acquire$4977+0xfc>
                    {
                        return holder.RequestFulfilled;
 80094c4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80094c6:	f000 f8ab 	bl	8009620 <Holder_get_RequestFulfilled$5590>
                return true;
            }

            using(Synchronization.WaitingRecord.Holder holder = WaitingRecord.Holder.Get( thisThread, this, timeout ))
            {
                while(true)
 80094ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80094cc:	2900      	cmp	r1, #0
 80094ce:	4602      	mov	r2, r0
 80094d0:	9003      	str	r0, [sp, #12]
 80094d2:	920c      	str	r2, [sp, #48]	; 0x30
 80094d4:	d101      	bne.n	80094da <CriticalSection_Acquire$4977+0x112>
 80094d6:	e006      	b.n	80094e6 <CriticalSection_Acquire$4977+0x11e>

                    if(holder.RequestProcessed)
                    {
                        return holder.RequestFulfilled;
                    }
                }
 80094d8:	e7ad      	b.n	8009436 <CriticalSection_Acquire$4977+0x6e>
                return true;
            }

            using(Synchronization.WaitingRecord.Holder holder = WaitingRecord.Holder.Get( thisThread, this, timeout ))
            {
                while(true)
 80094da:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80094dc:	f7fa fa44 	bl	8003968 <Holder_Dispose$5586>
 80094e0:	9803      	ldr	r0, [sp, #12]
 80094e2:	900c      	str	r0, [sp, #48]	; 0x30
 80094e4:	e7ff      	b.n	80094e6 <CriticalSection_Acquire$4977+0x11e>
 80094e6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80094e8:	b014      	add	sp, #80	; 0x50
 80094ea:	bd80      	pop	{r7, pc}
 80094ec:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80094ee:	f7fa fa3b 	bl	8003968 <Holder_Dispose$5586>
 80094f2:	9804      	ldr	r0, [sp, #16]
 80094f4:	900c      	str	r0, [sp, #48]	; 0x30
 80094f6:	e7f6      	b.n	80094e6 <CriticalSection_Acquire$4977+0x11e>
 80094f8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80094fa:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80094fc:	6108      	str	r0, [r1, #16]
 80094fe:	2201      	movs	r2, #1
 8009500:	4613      	mov	r3, r2
                            {
                                m_ownerThread = thisThread;

                                fNotify = true;
                                fResult = true;
                            }
 8009502:	9302      	str	r3, [sp, #8]
 8009504:	9201      	str	r2, [sp, #4]
 8009506:	e013      	b.n	8009530 <CriticalSection_Acquire$4977+0x168>
                            else
                            {
                                if(m_ownerThread == thisThread)
 8009508:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800950a:	6901      	ldr	r1, [r0, #16]
 800950c:	2200      	movs	r2, #0
 800950e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009510:	4299      	cmp	r1, r3
 8009512:	9200      	str	r2, [sp, #0]
 8009514:	d107      	bne.n	8009526 <CriticalSection_Acquire$4977+0x15e>
 8009516:	e7ff      	b.n	8009518 <CriticalSection_Acquire$4977+0x150>
 8009518:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800951a:	6941      	ldr	r1, [r0, #20]
                                {
                                    m_nestingCount++;
 800951c:	3101      	adds	r1, #1
 800951e:	6141      	str	r1, [r0, #20]
 8009520:	2101      	movs	r1, #1

                                    fResult = true;
                                }
 8009522:	9100      	str	r1, [sp, #0]
 8009524:	e7ff      	b.n	8009526 <CriticalSection_Acquire$4977+0x15e>
 8009526:	9800      	ldr	r0, [sp, #0]
 8009528:	2100      	movs	r1, #0
                            }
 800952a:	9002      	str	r0, [sp, #8]
 800952c:	9101      	str	r1, [sp, #4]
 800952e:	e7ff      	b.n	8009530 <CriticalSection_Acquire$4977+0x168>
 8009530:	9801      	ldr	r0, [sp, #4]
 8009532:	9902      	ldr	r1, [sp, #8]
                        }
 8009534:	9109      	str	r1, [sp, #36]	; 0x24
 8009536:	9008      	str	r0, [sp, #32]
 8009538:	e79d      	b.n	8009476 <CriticalSection_Acquire$4977+0xae>
 800953a:	46c0      	nop			; (mov r8, r8)
 800953c:	fffffe3c 	.word	0xfffffe3c
 8009540:	17ff83f2 	.word	0x17ff83f2

08009544 <Holder_Get$5587>:
 8009544:	b570      	push	{r4, r5, r6, lr}
 8009546:	b084      	sub	sp, #16
 8009548:	469c      	mov	ip, r3
 800954a:	4696      	mov	lr, r2
 800954c:	460c      	mov	r4, r1
 800954e:	4605      	mov	r5, r0
            //
            public static Holder Get( ThreadImpl                     thread         ,
                                      Synchronization.WaitableObject waitableObject ,
                                      SchedulerTime                  timeout        )
            {
                Holder hld = thread.m_holder;
 8009550:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
 8009552:	60b0      	str	r0, [r6, #8]
 8009554:	60f1      	str	r1, [r6, #12]
 8009556:	6173      	str	r3, [r6, #20]
 8009558:	6132      	str	r2, [r6, #16]
 800955a:	2000      	movs	r0, #0
 800955c:	61b0      	str	r0, [r6, #24]
 800955e:	4630      	mov	r0, r6
 8009560:	9403      	str	r4, [sp, #12]
 8009562:	f8cd e008 	str.w	lr, [sp, #8]
 8009566:	9501      	str	r5, [sp, #4]
 8009568:	f8cd c000 	str.w	ip, [sp]
 800956c:	b004      	add	sp, #16
 800956e:	bd70      	pop	{r4, r5, r6, pc}

08009570 <Holder_get_ShouldTryToAcquire$5588>:
 8009570:	b580      	push	{r7, lr}
 8009572:	b082      	sub	sp, #8
 8009574:	4601      	mov	r1, r0

            public bool ShouldTryToAcquire
            {
                get
                {
                    return m_wr == null || m_wr.Processed == false;
 8009576:	6980      	ldr	r0, [r0, #24]
 8009578:	2800      	cmp	r0, #0
 800957a:	9101      	str	r1, [sp, #4]
 800957c:	d00b      	beq.n	8009596 <Holder_get_ShouldTryToAcquire$5588+0x26>
 800957e:	e7ff      	b.n	8009580 <Holder_get_ShouldTryToAcquire$5588+0x10>
 8009580:	9801      	ldr	r0, [sp, #4]
 8009582:	6980      	ldr	r0, [r0, #24]
 8009584:	f7fb fd62 	bl	800504c <WaitingRecord_get_Processed$5009>
 8009588:	2100      	movs	r1, #0
 800958a:	f010 0fff 	tst.w	r0, #255	; 0xff
 800958e:	bf08      	it	eq
 8009590:	2101      	moveq	r1, #1
 8009592:	9100      	str	r1, [sp, #0]
 8009594:	e002      	b.n	800959c <Holder_get_ShouldTryToAcquire$5588+0x2c>
 8009596:	2001      	movs	r0, #1
 8009598:	9000      	str	r0, [sp, #0]
 800959a:	e7ff      	b.n	800959c <Holder_get_ShouldTryToAcquire$5588+0x2c>
 800959c:	9800      	ldr	r0, [sp, #0]
 800959e:	b002      	add	sp, #8
 80095a0:	bd80      	pop	{r7, pc}

080095a2 <Holder_get_RequestProcessed$5589>:
 80095a2:	b580      	push	{r7, lr}
 80095a4:	b086      	sub	sp, #24
 80095a6:	4601      	mov	r1, r0
 80095a8:	aa04      	add	r2, sp, #16
 80095aa:	2300      	movs	r3, #0
 80095ac:	9304      	str	r3, [sp, #16]
                    // On the first pass, we don't allocate a WaitingRecord, we just try to acquire the resource.
                    // If that fails, we allocate a WaitingRecord, connect it and 
                    //
                    // On the second pass, we retry to acquire the resource and if that fails, we simply wait.
                    //
                    if(m_wr == null)
 80095ae:	6980      	ldr	r0, [r0, #24]
 80095b0:	2800      	cmp	r0, #0
 80095b2:	9203      	str	r2, [sp, #12]
 80095b4:	9102      	str	r1, [sp, #8]
 80095b6:	d126      	bne.n	8009606 <Holder_get_RequestProcessed$5589+0x64>
 80095b8:	e7ff      	b.n	80095ba <Holder_get_RequestProcessed$5589+0x18>
                    {
                        m_wr = WaitingRecord.GetInstance( m_thread, m_waitableObject, m_timeout );
 80095ba:	9802      	ldr	r0, [sp, #8]
 80095bc:	6880      	ldr	r0, [r0, #8]
 80095be:	9902      	ldr	r1, [sp, #8]
 80095c0:	68c9      	ldr	r1, [r1, #12]
 80095c2:	9a02      	ldr	r2, [sp, #8]
 80095c4:	6912      	ldr	r2, [r2, #16]
 80095c6:	9b02      	ldr	r3, [sp, #8]
 80095c8:	695b      	ldr	r3, [r3, #20]
 80095ca:	f000 f961 	bl	8009890 <WaitingRecord_GetInstance$5001>
 80095ce:	9902      	ldr	r1, [sp, #8]
 80095d0:	6188      	str	r0, [r1, #24]
 80095d2:	2000      	movs	r0, #0
 80095d4:	9005      	str	r0, [sp, #20]
                if(m_wr != null)
                {
                    using(SmartHandles.InterruptState.Disable())
                    {
                        m_wr.Recycle();

 80095d6:	9001      	str	r0, [sp, #4]
 80095d8:	f7fb f818 	bl	800460c <ProcessorARMv7M_DisableInterrupts$3259>
 80095dc:	9901      	ldr	r1, [sp, #4]
 80095de:	9105      	str	r1, [sp, #20]
 80095e0:	9005      	str	r0, [sp, #20]
 80095e2:	0e02      	lsrs	r2, r0, #24
 80095e4:	9b03      	ldr	r3, [sp, #12]
 80095e6:	70da      	strb	r2, [r3, #3]
 80095e8:	0c02      	lsrs	r2, r0, #16
 80095ea:	709a      	strb	r2, [r3, #2]
 80095ec:	0a02      	lsrs	r2, r0, #8
 80095ee:	705a      	strb	r2, [r3, #1]
 80095f0:	7018      	strb	r0, [r3, #0]
                    {
                        m_wr = WaitingRecord.GetInstance( m_thread, m_waitableObject, m_timeout );

                        using(SmartHandles.InterruptState.Disable())
                        {
                            m_wr.Connect();
 80095f2:	9802      	ldr	r0, [sp, #8]
 80095f4:	6980      	ldr	r0, [r0, #24]
 80095f6:	f000 f9ea 	bl	80099ce <WaitingRecord_Connect$5002>
            }

////        public Holder( ThreadImpl                     thread         ,
////                       Synchronization.WaitableObject waitableObject ,
////                       SchedulerTime                  timeout        )
////        {
 80095fa:	9804      	ldr	r0, [sp, #16]
 80095fc:	f7fb f828 	bl	8004650 <ProcessorARMv7M_DisableInterruptsWithPriorityLevelHigherOrEqualTo$3266>
 8009600:	9801      	ldr	r0, [sp, #4]
                        using(SmartHandles.InterruptState.Disable())
                        {
                            m_wr.Connect();
                        }

                        return false;
 8009602:	9000      	str	r0, [sp, #0]
 8009604:	e009      	b.n	800961a <Holder_get_RequestProcessed$5589+0x78>
                    }
                    else
                    {
                        m_wr.Wait();
 8009606:	9802      	ldr	r0, [sp, #8]
 8009608:	6980      	ldr	r0, [r0, #24]
 800960a:	f000 f9f3 	bl	80099f4 <WaitingRecord_Wait$5003>

                        return m_wr.Processed;
 800960e:	9802      	ldr	r0, [sp, #8]
 8009610:	6980      	ldr	r0, [r0, #24]
 8009612:	f7fb fd1b 	bl	800504c <WaitingRecord_get_Processed$5009>
 8009616:	9000      	str	r0, [sp, #0]
 8009618:	e7ff      	b.n	800961a <Holder_get_RequestProcessed$5589+0x78>
 800961a:	9800      	ldr	r0, [sp, #0]
 800961c:	b006      	add	sp, #24
 800961e:	bd80      	pop	{r7, pc}

08009620 <Holder_get_RequestFulfilled$5590>:
 8009620:	b580      	push	{r7, lr}
 8009622:	b082      	sub	sp, #8
 8009624:	4601      	mov	r1, r0

            public bool RequestFulfilled
            {
                get
                {
                    return m_wr.RequestFulfilled;
 8009626:	6980      	ldr	r0, [r0, #24]
 8009628:	9101      	str	r1, [sp, #4]
 800962a:	f000 fa27 	bl	8009a7c <WaitingRecord_get_RequestFulfilled$5010>
 800962e:	b002      	add	sp, #8
 8009630:	bd80      	pop	{r7, pc}
 8009632:	46c0      	nop			; (mov r8, r8)

08009634 <CriticalSection_Release$4978>:
 8009634:	b580      	push	{r7, lr}
 8009636:	b08c      	sub	sp, #48	; 0x30
 8009638:	a90a      	add	r1, sp, #40	; 0x28
 800963a:	2200      	movs	r2, #0
 800963c:	920a      	str	r2, [sp, #40]	; 0x28
 800963e:	4a34      	ldr	r2, [pc, #208]	; (8009710 <CriticalSection_Release$4978+0xdc>)
 8009640:	4b34      	ldr	r3, [pc, #208]	; (8009714 <CriticalSection_Release$4978+0xe0>)
 8009642:	447b      	add	r3, pc
 8009644:	441a      	add	r2, r3
 8009646:	f8d2 20f8 	ldr.w	r2, [r2, #248]	; 0xf8

        public override void Release()
        {
            ThreadImpl thisThread = ThreadImpl.CurrentThread;

            if(thisThread == null)
 800964a:	2a00      	cmp	r2, #0
 800964c:	9009      	str	r0, [sp, #36]	; 0x24
 800964e:	9108      	str	r1, [sp, #32]
 8009650:	9207      	str	r2, [sp, #28]
 8009652:	d101      	bne.n	8009658 <CriticalSection_Release$4978+0x24>
 8009654:	e7ff      	b.n	8009656 <CriticalSection_Release$4978+0x22>
            {
                //
                // Special case for boot code path: all locks are transparent.
                //
                return;
 8009656:	e055      	b.n	8009704 <CriticalSection_Release$4978+0xd0>
            }

            if(m_ownerThread != thisThread)
 8009658:	9809      	ldr	r0, [sp, #36]	; 0x24
 800965a:	6901      	ldr	r1, [r0, #16]
 800965c:	9a07      	ldr	r2, [sp, #28]
 800965e:	4291      	cmp	r1, r2
 8009660:	d012      	beq.n	8009688 <CriticalSection_Release$4978+0x54>
 8009662:	e7ff      	b.n	8009664 <CriticalSection_Release$4978+0x30>
            {
#if EXCEPTION_STRINGS
                throw new Exception( "Releasing waitable object not owned by thread" );
#else
                throw new Exception();
 8009664:	e7ff      	b.n	8009666 <CriticalSection_Release$4978+0x32>
 8009666:	482c      	ldr	r0, [pc, #176]	; (8009718 <CriticalSection_Release$4978+0xe4>)
 8009668:	492c      	ldr	r1, [pc, #176]	; (800971c <CriticalSection_Release$4978+0xe8>)
 800966a:	4479      	add	r1, pc
 800966c:	4408      	add	r0, r1
 800966e:	4a2c      	ldr	r2, [pc, #176]	; (8009720 <CriticalSection_Release$4978+0xec>)
 8009670:	4411      	add	r1, r2
 8009672:	9006      	str	r0, [sp, #24]
 8009674:	f7f7 f8a4 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8009678:	9005      	str	r0, [sp, #20]
 800967a:	f7ff fe66 	bl	800934a <Exception_.ctor$7036>
 800967e:	9806      	ldr	r0, [sp, #24]
 8009680:	9905      	ldr	r1, [sp, #20]
 8009682:	f7f7 f8f3 	bl	800086c <TypeSystemManager_Throw$4954>
 8009686:	e7ee      	b.n	8009666 <CriticalSection_Release$4978+0x32>
 8009688:	9809      	ldr	r0, [sp, #36]	; 0x24
 800968a:	6941      	ldr	r1, [r0, #20]
#endif
            }

            if(m_nestingCount > 0)
 800968c:	2901      	cmp	r1, #1
 800968e:	db05      	blt.n	800969c <CriticalSection_Release$4978+0x68>
 8009690:	e7ff      	b.n	8009692 <CriticalSection_Release$4978+0x5e>
 8009692:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009694:	6941      	ldr	r1, [r0, #20]
            {
                m_nestingCount--;
 8009696:	3901      	subs	r1, #1
 8009698:	6141      	str	r1, [r0, #20]
                return;
 800969a:	e033      	b.n	8009704 <CriticalSection_Release$4978+0xd0>
            }

            thisThread.ReleasedWaitableObject( this );
 800969c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800969e:	f7fa ffe5 	bl	800466c <Thread_ReleasedWaitableObject$4013>
 80096a2:	2000      	movs	r0, #0
 80096a4:	900b      	str	r0, [sp, #44]	; 0x2c

        public override bool Acquire( SchedulerTime timeout )
        {
            ThreadImpl thisThread = ThreadImpl.CurrentThread;

            if(thisThread == null)
 80096a6:	9004      	str	r0, [sp, #16]
 80096a8:	f7fa ffb0 	bl	800460c <ProcessorARMv7M_DisableInterrupts$3259>
 80096ac:	9904      	ldr	r1, [sp, #16]
 80096ae:	910b      	str	r1, [sp, #44]	; 0x2c
 80096b0:	900b      	str	r0, [sp, #44]	; 0x2c
 80096b2:	0e02      	lsrs	r2, r0, #24
 80096b4:	9b08      	ldr	r3, [sp, #32]
 80096b6:	70da      	strb	r2, [r3, #3]
 80096b8:	0c02      	lsrs	r2, r0, #16
 80096ba:	709a      	strb	r2, [r3, #2]
 80096bc:	0a02      	lsrs	r2, r0, #8
 80096be:	705a      	strb	r2, [r3, #1]
 80096c0:	7018      	strb	r0, [r3, #0]
            ThreadImpl ownerThread  = null;
            ThreadImpl wakeupThread = null;

            using(SmartHandles.InterruptState.Disable())
            {
                WaitingRecord wr = m_listWaiting.FirstTarget();
 80096c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096c4:	68c0      	ldr	r0, [r0, #12]
 80096c6:	f7fa fea7 	bl	8004418 <KernelList`1_FirstTarget$17421>
 80096ca:	4601      	mov	r1, r0
 80096cc:	9a04      	ldr	r2, [sp, #16]

                if(wr != null)
 80096ce:	2800      	cmp	r0, #0
 80096d0:	9103      	str	r1, [sp, #12]
 80096d2:	9202      	str	r2, [sp, #8]
 80096d4:	d004      	beq.n	80096e0 <CriticalSection_Release$4978+0xac>
 80096d6:	e7ff      	b.n	80096d8 <CriticalSection_Release$4978+0xa4>
 80096d8:	9803      	ldr	r0, [sp, #12]
 80096da:	6901      	ldr	r1, [r0, #16]

                if(wr != null)
                {
                    wakeupThread = wr.Source;

                    if( Configuration.ImmediatelyTransferOwnership                                                    ||
 80096dc:	9101      	str	r1, [sp, #4]
 80096de:	e013      	b.n	8009708 <CriticalSection_Release$4978+0xd4>
 80096e0:	9802      	ldr	r0, [sp, #8]
 80096e2:	2100      	movs	r1, #0
 80096e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096e6:	6111      	str	r1, [r2, #16]
        //
        // State
        //

        volatile ThreadImpl m_ownerThread;
        volatile int        m_nestingCount;
 80096e8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80096ea:	9000      	str	r0, [sp, #0]
 80096ec:	4608      	mov	r0, r1
 80096ee:	f7fa ffaf 	bl	8004650 <ProcessorARMv7M_DisableInterruptsWithPriorityLevelHigherOrEqualTo$3266>
                }

                m_ownerThread = ownerThread;
            }

            if(ownerThread != null)
 80096f2:	e7ff      	b.n	80096f4 <CriticalSection_Release$4978+0xc0>
            {
                ownerThread.AcquiredWaitableObject( this );
            }

            if(wakeupThread != null)
 80096f4:	9800      	ldr	r0, [sp, #0]
 80096f6:	2800      	cmp	r0, #0
 80096f8:	d004      	beq.n	8009704 <CriticalSection_Release$4978+0xd0>
 80096fa:	e7ff      	b.n	80096fc <CriticalSection_Release$4978+0xc8>
            {
                wakeupThread.Wakeup();
 80096fc:	9800      	ldr	r0, [sp, #0]
 80096fe:	f7fa ff01 	bl	8004504 <Thread_Wakeup$4011>
            }
 8009702:	e7ff      	b.n	8009704 <CriticalSection_Release$4978+0xd0>
 8009704:	b00c      	add	sp, #48	; 0x30
 8009706:	bd80      	pop	{r7, pc}

                if(wr != null)
                {
                    wakeupThread = wr.Source;

                    if( Configuration.ImmediatelyTransferOwnership                                                    ||
 8009708:	e7ff      	b.n	800970a <CriticalSection_Release$4978+0xd6>
 800970a:	9801      	ldr	r0, [sp, #4]
                    {
                        ownerThread = wakeupThread;

                        wr.RequestFulfilled = true;
                    }
                }
 800970c:	9002      	str	r0, [sp, #8]
 800970e:	e7e7      	b.n	80096e0 <CriticalSection_Release$4978+0xac>
 8009710:	fffffe3c 	.word	0xfffffe3c
 8009714:	17ff818e 	.word	0x17ff818e
 8009718:	ffffea38 	.word	0xffffea38
 800971c:	17ff8166 	.word	0x17ff8166
 8009720:	e801252c 	.word	0xe801252c

08009724 <KernelNode`1_.ctor$17680>:
 8009724:	b082      	sub	sp, #8
 8009726:	460a      	mov	r2, r1
 8009728:	4603      	mov	r3, r0
 800972a:	6101      	str	r1, [r0, #16]
 800972c:	9301      	str	r3, [sp, #4]
 800972e:	9200      	str	r2, [sp, #0]
 8009730:	b002      	add	sp, #8
 8009732:	4770      	bx	lr

08009734 <WaitableObject_Acquire$4985>:
 8009734:	b580      	push	{r7, lr}
 8009736:	b088      	sub	sp, #32
 8009738:	4601      	mov	r1, r0
 800973a:	4a18      	ldr	r2, [pc, #96]	; (800979c <WaitableObject_Acquire$4985+0x68>)
 800973c:	4b18      	ldr	r3, [pc, #96]	; (80097a0 <WaitableObject_Acquire$4985+0x6c>)
 800973e:	447b      	add	r3, pc
 8009740:	441a      	add	r2, r3
 8009742:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8009746:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
            }
        }
    }
}
 800974a:	f100 0c08 	add.w	ip, r0, #8
 800974e:	f8cd c018 	str.w	ip, [sp, #24]
 8009752:	f04f 0c00 	mov.w	ip, #0
 8009756:	f8cd c01c 	str.w	ip, [sp, #28]
 800975a:	f8dd e018 	ldr.w	lr, [sp, #24]
 800975e:	f1ae 0e08 	sub.w	lr, lr, #8
 8009762:	f8cd c01c 	str.w	ip, [sp, #28]
 8009766:	f10d 0c1c 	add.w	ip, sp, #28
 800976a:	f1ac 0c08 	sub.w	ip, ip, #8
 800976e:	9005      	str	r0, [sp, #20]
 8009770:	4660      	mov	r0, ip
 8009772:	9104      	str	r1, [sp, #16]
 8009774:	4671      	mov	r1, lr
 8009776:	9203      	str	r2, [sp, #12]
 8009778:	9302      	str	r3, [sp, #8]
 800977a:	f7f7 f89f 	bl	80008bc <UIntPtr_.ctor$2864>
            }
        }
    }
}
 800977e:	9807      	ldr	r0, [sp, #28]
 8009780:	6840      	ldr	r0, [r0, #4]

        //--//

        public bool Acquire()
        {
            return Acquire( SchedulerTime.MaxValue );
 8009782:	69c0      	ldr	r0, [r0, #28]
 8009784:	6980      	ldr	r0, [r0, #24]
 8009786:	9905      	ldr	r1, [sp, #20]
 8009788:	9001      	str	r0, [sp, #4]
 800978a:	4608      	mov	r0, r1
 800978c:	9a02      	ldr	r2, [sp, #8]
 800978e:	9b03      	ldr	r3, [sp, #12]
 8009790:	f8dd c004 	ldr.w	ip, [sp, #4]
 8009794:	47e0      	blx	ip
 8009796:	b008      	add	sp, #32
 8009798:	bd80      	pop	{r7, pc}
 800979a:	46c0      	nop			; (mov r8, r8)
 800979c:	fffffe3c 	.word	0xfffffe3c
 80097a0:	17ff8092 	.word	0x17ff8092

080097a4 <WaitableObject_RegisterWait$4987>:
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b082      	sub	sp, #8
 80097a8:	460a      	mov	r2, r1
 80097aa:	4603      	mov	r3, r0

        //--//

        public void RegisterWait( KernelNode< WaitingRecord > node )
        {
            m_listWaiting.InsertAtTail( node );
 80097ac:	68c0      	ldr	r0, [r0, #12]
 80097ae:	9201      	str	r2, [sp, #4]
 80097b0:	9300      	str	r3, [sp, #0]
 80097b2:	f7fa fda9 	bl	8004308 <KernelList`1_InsertAtTail$17419>
 80097b6:	b002      	add	sp, #8
 80097b8:	bd80      	pop	{r7, pc}

080097ba <WaitableObject_UnregisterWait$4988>:
 80097ba:	b580      	push	{r7, lr}
 80097bc:	b082      	sub	sp, #8
 80097be:	4601      	mov	r1, r0
        }

        public void UnregisterWait( KernelNode< WaitingRecord > node )
        {
            node.RemoveFromList();
 80097c0:	9101      	str	r1, [sp, #4]
 80097c2:	f7fa fde3 	bl	800438c <KernelNode`1_RemoveFromList$17433>
 80097c6:	b002      	add	sp, #8
 80097c8:	bd80      	pop	{r7, pc}
 80097ca:	46c0      	nop			; (mov r8, r8)

080097cc <WaitingRecord_.ctor$5000>:
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b086      	sub	sp, #24
 80097d0:	4601      	mov	r1, r0
            }
        }

        private WaitingRecord()
        {
            m_linkTowardSource = new KernelNode< WaitingRecord >( this );
 80097d2:	4a11      	ldr	r2, [pc, #68]	; (8009818 <WaitingRecord_.ctor$5000+0x4c>)
 80097d4:	4b11      	ldr	r3, [pc, #68]	; (800981c <WaitingRecord_.ctor$5000+0x50>)
 80097d6:	447b      	add	r3, pc
 80097d8:	441a      	add	r2, r3
 80097da:	f8df c044 	ldr.w	ip, [pc, #68]	; 8009820 <WaitingRecord_.ctor$5000+0x54>
 80097de:	4463      	add	r3, ip
 80097e0:	9005      	str	r0, [sp, #20]
 80097e2:	4610      	mov	r0, r2
 80097e4:	9104      	str	r1, [sp, #16]
 80097e6:	4619      	mov	r1, r3
 80097e8:	9303      	str	r3, [sp, #12]
 80097ea:	9202      	str	r2, [sp, #8]
 80097ec:	f7f6 ffe8 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 80097f0:	9001      	str	r0, [sp, #4]
 80097f2:	9905      	ldr	r1, [sp, #20]
 80097f4:	f000 f844 	bl	8009880 <KernelNode`1_.ctor$17431>
 80097f8:	9801      	ldr	r0, [sp, #4]
 80097fa:	9905      	ldr	r1, [sp, #20]
 80097fc:	6088      	str	r0, [r1, #8]
            m_linkTowardTarget = new KernelNode< WaitingRecord >( this );
 80097fe:	9802      	ldr	r0, [sp, #8]
 8009800:	9903      	ldr	r1, [sp, #12]
 8009802:	f7f6 ffdd 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8009806:	9000      	str	r0, [sp, #0]
 8009808:	9905      	ldr	r1, [sp, #20]
 800980a:	f000 f839 	bl	8009880 <KernelNode`1_.ctor$17431>
 800980e:	9800      	ldr	r0, [sp, #0]
 8009810:	9905      	ldr	r1, [sp, #20]
 8009812:	60c8      	str	r0, [r1, #12]
 8009814:	b006      	add	sp, #24
 8009816:	bd80      	pop	{r7, pc}
 8009818:	ffffea38 	.word	0xffffea38
 800981c:	17ff7ffa 	.word	0x17ff7ffa
 8009820:	e80126dc 	.word	0xe80126dc

08009824 <WaitingRecord_Recycle$5004>:
 8009824:	b580      	push	{r7, lr}
 8009826:	b082      	sub	sp, #8
 8009828:	4601      	mov	r1, r0
            ThreadManager.Instance.SwitchToWait( this );
        }

        void Recycle()
        {
            BugCheck.AssertInterruptsOff();
 800982a:	9001      	str	r0, [sp, #4]
 800982c:	9100      	str	r1, [sp, #0]
 800982e:	f7fa fd1d 	bl	800426c <BugCheck_AssertInterruptsOff$4655>

            Disconnect();
 8009832:	9801      	ldr	r0, [sp, #4]
 8009834:	f000 f8f2 	bl	8009a1c <WaitingRecord_Disconnect$5005>
 8009838:	480e      	ldr	r0, [pc, #56]	; (8009874 <WaitingRecord_Recycle$5004+0x50>)
 800983a:	490f      	ldr	r1, [pc, #60]	; (8009878 <WaitingRecord_Recycle$5004+0x54>)
 800983c:	4479      	add	r1, pc
 800983e:	4408      	add	r0, r1
 8009840:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4

            if(s_recycledCount < RecycleLimit)
 8009844:	281f      	cmp	r0, #31
 8009846:	dc13      	bgt.n	8009870 <WaitingRecord_Recycle$5004+0x4c>
 8009848:	e7ff      	b.n	800984a <WaitingRecord_Recycle$5004+0x26>
 800984a:	2000      	movs	r0, #0
 800984c:	9900      	ldr	r1, [sp, #0]
 800984e:	f881 0020 	strb.w	r0, [r1, #32]
 8009852:	4808      	ldr	r0, [pc, #32]	; (8009874 <WaitingRecord_Recycle$5004+0x50>)
 8009854:	4a09      	ldr	r2, [pc, #36]	; (800987c <WaitingRecord_Recycle$5004+0x58>)
 8009856:	447a      	add	r2, pc
 8009858:	4410      	add	r0, r2
 800985a:	f8d0 20b4 	ldr.w	r2, [r0, #180]	; 0xb4
            {
                m_processed = false;

                s_recycledCount++;
 800985e:	3201      	adds	r2, #1
 8009860:	f8c0 20b4 	str.w	r2, [r0, #180]	; 0xb4
                s_recycledList.InsertAtTail( m_linkTowardTarget );
 8009864:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 8009868:	68c9      	ldr	r1, [r1, #12]
 800986a:	f7fa fd4d 	bl	8004308 <KernelList`1_InsertAtTail$17419>
            }
 800986e:	e7ff      	b.n	8009870 <WaitingRecord_Recycle$5004+0x4c>
 8009870:	b002      	add	sp, #8
 8009872:	bd80      	pop	{r7, pc}
 8009874:	fffffe3c 	.word	0xfffffe3c
 8009878:	17ff7f94 	.word	0x17ff7f94
 800987c:	17ff7f7a 	.word	0x17ff7f7a

08009880 <KernelNode`1_.ctor$17431>:
 8009880:	b082      	sub	sp, #8
 8009882:	460a      	mov	r2, r1
 8009884:	4603      	mov	r3, r0
 8009886:	6101      	str	r1, [r0, #16]
 8009888:	9301      	str	r3, [sp, #4]
 800988a:	9200      	str	r2, [sp, #0]
 800988c:	b002      	add	sp, #8
 800988e:	4770      	bx	lr

08009890 <WaitingRecord_GetInstance$5001>:
 8009890:	b5b0      	push	{r4, r5, r7, lr}
 8009892:	b092      	sub	sp, #72	; 0x48
 8009894:	469c      	mov	ip, r3
 8009896:	4696      	mov	lr, r2
 8009898:	ac10      	add	r4, sp, #64	; 0x40
 800989a:	2500      	movs	r5, #0
 800989c:	9510      	str	r5, [sp, #64]	; 0x40

        static WaitingRecord GetInstance( ThreadImpl     source  ,
                                          WaitableObject target  ,
                                          SchedulerTime  timeout )
        {
            BugCheck.AssertInterruptsOn();
 800989e:	900f      	str	r0, [sp, #60]	; 0x3c
 80098a0:	930e      	str	r3, [sp, #56]	; 0x38
 80098a2:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 80098a6:	910c      	str	r1, [sp, #48]	; 0x30
 80098a8:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 80098ac:	920a      	str	r2, [sp, #40]	; 0x28
 80098ae:	9409      	str	r4, [sp, #36]	; 0x24
 80098b0:	9508      	str	r5, [sp, #32]
 80098b2:	f7fb fb51 	bl	8004f58 <BugCheck_AssertInterruptsOn$4656>
 80098b6:	4833      	ldr	r0, [pc, #204]	; (8009984 <WaitingRecord_GetInstance$5001+0xf4>)
 80098b8:	4933      	ldr	r1, [pc, #204]	; (8009988 <WaitingRecord_GetInstance$5001+0xf8>)
 80098ba:	4479      	add	r1, pc
 80098bc:	4408      	add	r0, r1
 80098be:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
 80098c2:	9908      	ldr	r1, [sp, #32]

            WaitingRecord wr = null;
            
            if(s_recycledCount > 0)
 80098c4:	2801      	cmp	r0, #1
 80098c6:	9107      	str	r1, [sp, #28]
 80098c8:	db1f      	blt.n	800990a <WaitingRecord_GetInstance$5001+0x7a>
 80098ca:	e7ff      	b.n	80098cc <WaitingRecord_GetInstance$5001+0x3c>
 80098cc:	2000      	movs	r0, #0
 80098ce:	9011      	str	r0, [sp, #68]	; 0x44
                if(m_wr != null)
                {
                    using(SmartHandles.InterruptState.Disable())
                    {
                        m_wr.Recycle();

 80098d0:	9006      	str	r0, [sp, #24]
 80098d2:	f7fa fe9b 	bl	800460c <ProcessorARMv7M_DisableInterrupts$3259>
 80098d6:	9906      	ldr	r1, [sp, #24]
 80098d8:	9111      	str	r1, [sp, #68]	; 0x44
 80098da:	9011      	str	r0, [sp, #68]	; 0x44
 80098dc:	0e02      	lsrs	r2, r0, #24
 80098de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098e0:	70da      	strb	r2, [r3, #3]
 80098e2:	0c02      	lsrs	r2, r0, #16
 80098e4:	709a      	strb	r2, [r3, #2]
 80098e6:	0a02      	lsrs	r2, r0, #8
 80098e8:	705a      	strb	r2, [r3, #1]
 80098ea:	7018      	strb	r0, [r3, #0]
            
            if(s_recycledCount > 0)
            {
                using(SmartHandles.InterruptState.Disable())
                {
                    KernelNode< WaitingRecord > node = s_recycledList.ExtractFirstNode();
 80098ec:	4825      	ldr	r0, [pc, #148]	; (8009984 <WaitingRecord_GetInstance$5001+0xf4>)
 80098ee:	4a27      	ldr	r2, [pc, #156]	; (800998c <WaitingRecord_GetInstance$5001+0xfc>)
 80098f0:	447a      	add	r2, pc
 80098f2:	4410      	add	r0, r2
 80098f4:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 80098f8:	f000 f852 	bl	80099a0 <KernelList`1_ExtractFirstNode$17424>
 80098fc:	4601      	mov	r1, r0
 80098fe:	9a06      	ldr	r2, [sp, #24]
                    if(node != null)
 8009900:	2800      	cmp	r0, #0
 8009902:	9105      	str	r1, [sp, #20]
 8009904:	9204      	str	r2, [sp, #16]
 8009906:	d126      	bne.n	8009956 <WaitingRecord_GetInstance$5001+0xc6>
 8009908:	e032      	b.n	8009970 <WaitingRecord_GetInstance$5001+0xe0>
 800990a:	9807      	ldr	r0, [sp, #28]
                        s_recycledCount--;
                    }
                }
            }

            if(wr == null)
 800990c:	2800      	cmp	r0, #0
 800990e:	9003      	str	r0, [sp, #12]
 8009910:	d003      	beq.n	800991a <WaitingRecord_GetInstance$5001+0x8a>
 8009912:	e7ff      	b.n	8009914 <WaitingRecord_GetInstance$5001+0x84>
 8009914:	9803      	ldr	r0, [sp, #12]
 8009916:	9002      	str	r0, [sp, #8]
 8009918:	e00e      	b.n	8009938 <WaitingRecord_GetInstance$5001+0xa8>
            {
                wr = new WaitingRecord();
 800991a:	481e      	ldr	r0, [pc, #120]	; (8009994 <WaitingRecord_GetInstance$5001+0x104>)
 800991c:	491e      	ldr	r1, [pc, #120]	; (8009998 <WaitingRecord_GetInstance$5001+0x108>)
 800991e:	4479      	add	r1, pc
 8009920:	4408      	add	r0, r1
 8009922:	4a1e      	ldr	r2, [pc, #120]	; (800999c <WaitingRecord_GetInstance$5001+0x10c>)
 8009924:	4411      	add	r1, r2
 8009926:	f7f6 ff4b 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800992a:	4601      	mov	r1, r0
 800992c:	9101      	str	r1, [sp, #4]
 800992e:	f7ff ff4d 	bl	80097cc <WaitingRecord_.ctor$5000>
 8009932:	9801      	ldr	r0, [sp, #4]
            }
 8009934:	9002      	str	r0, [sp, #8]
 8009936:	e7ff      	b.n	8009938 <WaitingRecord_GetInstance$5001+0xa8>

            wr.m_source  = source;
 8009938:	9802      	ldr	r0, [sp, #8]
 800993a:	9902      	ldr	r1, [sp, #8]
 800993c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800993e:	6102      	str	r2, [r0, #16]
 8009940:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009942:	6148      	str	r0, [r1, #20]
 8009944:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009946:	61cb      	str	r3, [r1, #28]
 8009948:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 800994c:	f8c1 c018 	str.w	ip, [r1, #24]
 8009950:	4608      	mov	r0, r1
 8009952:	b012      	add	sp, #72	; 0x48
 8009954:	bdb0      	pop	{r4, r5, r7, pc}

            while(s_recycledCount < RecycleLimit)
            {
                WaitingRecord wr = new WaitingRecord();

                wr.Recycle();
 8009956:	9805      	ldr	r0, [sp, #20]
 8009958:	6901      	ldr	r1, [r0, #16]
 800995a:	4a0a      	ldr	r2, [pc, #40]	; (8009984 <WaitingRecord_GetInstance$5001+0xf4>)
 800995c:	4b0c      	ldr	r3, [pc, #48]	; (8009990 <WaitingRecord_GetInstance$5001+0x100>)
 800995e:	447b      	add	r3, pc
 8009960:	441a      	add	r2, r3
 8009962:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
                    KernelNode< WaitingRecord > node = s_recycledList.ExtractFirstNode();
                    if(node != null)
                    {
                        wr = node.Target;

                        s_recycledCount--;
 8009966:	3b01      	subs	r3, #1
 8009968:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
                    }
 800996c:	9104      	str	r1, [sp, #16]
 800996e:	e7ff      	b.n	8009970 <WaitingRecord_GetInstance$5001+0xe0>
 8009970:	9804      	ldr	r0, [sp, #16]
            }

////        public Holder( ThreadImpl                     thread         ,
////                       Synchronization.WaitableObject waitableObject ,
////                       SchedulerTime                  timeout        )
////        {
 8009972:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009974:	9000      	str	r0, [sp, #0]
 8009976:	4608      	mov	r0, r1
 8009978:	f7fa fe6a 	bl	8004650 <ProcessorARMv7M_DisableInterruptsWithPriorityLevelHigherOrEqualTo$3266>
 800997c:	9800      	ldr	r0, [sp, #0]
                        wr = node.Target;

                        s_recycledCount--;
                    }
                }
            }
 800997e:	9007      	str	r0, [sp, #28]
 8009980:	e7c3      	b.n	800990a <WaitingRecord_GetInstance$5001+0x7a>
 8009982:	46c0      	nop			; (mov r8, r8)
 8009984:	fffffe3c 	.word	0xfffffe3c
 8009988:	17ff7f16 	.word	0x17ff7f16
 800998c:	17ff7ee0 	.word	0x17ff7ee0
 8009990:	17ff7e72 	.word	0x17ff7e72
 8009994:	ffffea38 	.word	0xffffea38
 8009998:	17ff7eb2 	.word	0x17ff7eb2
 800999c:	e801264c 	.word	0xe801264c

080099a0 <KernelList`1_ExtractFirstNode$17424>:
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b084      	sub	sp, #16
 80099a4:	4601      	mov	r1, r0

        //--//

        public KernelNode< T > ExtractFirstNode()
        {
            KernelNode< T > node = m_head.Next;
 80099a6:	6882      	ldr	r2, [r0, #8]

            if(node != m_tail)
 80099a8:	68c0      	ldr	r0, [r0, #12]
 80099aa:	6892      	ldr	r2, [r2, #8]

        public KernelNode< T > ExtractFirstNode()
        {
            KernelNode< T > node = m_head.Next;

            if(node != m_tail)
 80099ac:	4282      	cmp	r2, r0
 80099ae:	9203      	str	r2, [sp, #12]
 80099b0:	9102      	str	r1, [sp, #8]
 80099b2:	d006      	beq.n	80099c2 <KernelList`1_ExtractFirstNode$17424+0x22>
 80099b4:	e7ff      	b.n	80099b6 <KernelList`1_ExtractFirstNode$17424+0x16>
            {
                node.RemoveFromList();
 80099b6:	9803      	ldr	r0, [sp, #12]
 80099b8:	f7fa fce8 	bl	800438c <KernelNode`1_RemoveFromList$17433>

                return node;
 80099bc:	9803      	ldr	r0, [sp, #12]
 80099be:	9001      	str	r0, [sp, #4]
 80099c0:	e002      	b.n	80099c8 <KernelList`1_ExtractFirstNode$17424+0x28>
 80099c2:	2000      	movs	r0, #0
            }

            return null;
 80099c4:	9001      	str	r0, [sp, #4]
 80099c6:	e7ff      	b.n	80099c8 <KernelList`1_ExtractFirstNode$17424+0x28>
        }
 80099c8:	9801      	ldr	r0, [sp, #4]
 80099ca:	b004      	add	sp, #16
 80099cc:	bd80      	pop	{r7, pc}

080099ce <WaitingRecord_Connect$5002>:
 80099ce:	b580      	push	{r7, lr}
 80099d0:	b082      	sub	sp, #8
 80099d2:	4601      	mov	r1, r0
            return wr;
        }

        void Connect()
        {
            BugCheck.AssertInterruptsOff();
 80099d4:	9001      	str	r0, [sp, #4]
 80099d6:	9100      	str	r1, [sp, #0]
 80099d8:	f7fa fc48 	bl	800426c <BugCheck_AssertInterruptsOff$4655>

            m_target.RegisterWait( m_linkTowardTarget );
 80099dc:	9801      	ldr	r0, [sp, #4]
 80099de:	68c1      	ldr	r1, [r0, #12]
 80099e0:	6940      	ldr	r0, [r0, #20]
 80099e2:	f7ff fedf 	bl	80097a4 <WaitableObject_RegisterWait$4987>
            m_source.RegisterWait( m_linkTowardSource );
 80099e6:	9801      	ldr	r0, [sp, #4]
 80099e8:	6881      	ldr	r1, [r0, #8]
 80099ea:	6900      	ldr	r0, [r0, #16]
 80099ec:	f7fa fbb0 	bl	8004150 <Thread_RegisterWait$4006>
 80099f0:	b002      	add	sp, #8
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <WaitingRecord_Wait$5003>:
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b082      	sub	sp, #8
 80099f8:	4601      	mov	r1, r0
        }

        void Wait()
        {
            ThreadManager.Instance.SwitchToWait( this );
 80099fa:	4a06      	ldr	r2, [pc, #24]	; (8009a14 <WaitingRecord_Wait$5003+0x20>)
 80099fc:	4b06      	ldr	r3, [pc, #24]	; (8009a18 <WaitingRecord_Wait$5003+0x24>)
 80099fe:	447b      	add	r3, pc
 8009a00:	441a      	add	r2, r3
 8009a02:	9001      	str	r0, [sp, #4]
 8009a04:	4610      	mov	r0, r2
 8009a06:	9a01      	ldr	r2, [sp, #4]
 8009a08:	9100      	str	r1, [sp, #0]
 8009a0a:	4611      	mov	r1, r2
 8009a0c:	f7fb fac4 	bl	8004f98 <ThreadManager_SwitchToWait$3166>
 8009a10:	b002      	add	sp, #8
 8009a12:	bd80      	pop	{r7, pc}
 8009a14:	ffffeaac 	.word	0xffffeaac
 8009a18:	17ff7dd2 	.word	0x17ff7dd2

08009a1c <WaitingRecord_Disconnect$5005>:
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b082      	sub	sp, #8
 8009a20:	4601      	mov	r1, r0
            }
        }

        void Disconnect()
        {
            BugCheck.AssertInterruptsOff();
 8009a22:	9001      	str	r0, [sp, #4]
 8009a24:	9100      	str	r1, [sp, #0]
 8009a26:	f7fa fc21 	bl	800426c <BugCheck_AssertInterruptsOff$4655>

            if(m_linkTowardSource.IsLinked)
 8009a2a:	9801      	ldr	r0, [sp, #4]
 8009a2c:	6880      	ldr	r0, [r0, #8]
 8009a2e:	f000 f81c 	bl	8009a6a <KernelNode`1_get_IsLinked$17439>
 8009a32:	f010 0fff 	tst.w	r0, #255	; 0xff
 8009a36:	d005      	beq.n	8009a44 <WaitingRecord_Disconnect$5005+0x28>
 8009a38:	e7ff      	b.n	8009a3a <WaitingRecord_Disconnect$5005+0x1e>
            {
                m_source.UnregisterWait( m_linkTowardSource );
 8009a3a:	9800      	ldr	r0, [sp, #0]
 8009a3c:	6880      	ldr	r0, [r0, #8]
 8009a3e:	f7fa fc71 	bl	8004324 <Thread_UnregisterWait$4008>
            }
 8009a42:	e7ff      	b.n	8009a44 <WaitingRecord_Disconnect$5005+0x28>

            if(m_linkTowardTarget.IsLinked)
 8009a44:	9800      	ldr	r0, [sp, #0]
 8009a46:	68c0      	ldr	r0, [r0, #12]
 8009a48:	f000 f80f 	bl	8009a6a <KernelNode`1_get_IsLinked$17439>
 8009a4c:	f010 0fff 	tst.w	r0, #255	; 0xff
 8009a50:	d005      	beq.n	8009a5e <WaitingRecord_Disconnect$5005+0x42>
 8009a52:	e7ff      	b.n	8009a54 <WaitingRecord_Disconnect$5005+0x38>
            {
                m_target.UnregisterWait( m_linkTowardTarget );
 8009a54:	9800      	ldr	r0, [sp, #0]
 8009a56:	68c0      	ldr	r0, [r0, #12]
 8009a58:	f7ff feaf 	bl	80097ba <WaitableObject_UnregisterWait$4988>
            }
 8009a5c:	e7ff      	b.n	8009a5e <WaitingRecord_Disconnect$5005+0x42>
 8009a5e:	2000      	movs	r0, #0
 8009a60:	9900      	ldr	r1, [sp, #0]
 8009a62:	6148      	str	r0, [r1, #20]
 8009a64:	6108      	str	r0, [r1, #16]
 8009a66:	b002      	add	sp, #8
 8009a68:	bd80      	pop	{r7, pc}

08009a6a <KernelNode`1_get_IsLinked$17439>:
 8009a6a:	b081      	sub	sp, #4
 8009a6c:	4601      	mov	r1, r0

        public bool IsLinked
        {
            get
            {
                return m_next != null;
 8009a6e:	6880      	ldr	r0, [r0, #8]
 8009a70:	2800      	cmp	r0, #0
 8009a72:	bf18      	it	ne
 8009a74:	2001      	movne	r0, #1
 8009a76:	9100      	str	r1, [sp, #0]
 8009a78:	b001      	add	sp, #4
 8009a7a:	4770      	bx	lr

08009a7c <WaitingRecord_get_RequestFulfilled$5010>:
 8009a7c:	b081      	sub	sp, #4
 8009a7e:	4601      	mov	r1, r0
 8009a80:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
 8009a84:	9100      	str	r1, [sp, #0]
 8009a86:	b001      	add	sp, #4
 8009a88:	4770      	bx	lr

08009a8a <InterruptState_GetMode$5303>:

        //--//

        private ProcessorARMv7M.ISR_NUMBER GetMode( )
        {
            return (ProcessorARMv7M.ISR_NUMBER)(ProcessorARMv7M.CMSIS_STUB_SCB__get_IPSR( ) & 0x1FF);
 8009a8a:	b580      	push	{r7, lr}
 8009a8c:	f013 f9ba 	bl	801ce04 <CMSIS_STUB_SCB__get_IPSR>
 8009a90:	f36f 205f 	bfc	r0, #9, #23
 8009a94:	bd80      	pop	{r7, pc}
 8009a96:	46c0      	nop			; (mov r8, r8)

08009a98 <SwapCurrentThreadUnderInterrupt_Dispose$5056>:
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b082      	sub	sp, #8
        // Helper Methods
        //

        public void Dispose()
        {
            BugCheck.AssertInterruptsOff();
 8009a9c:	9001      	str	r0, [sp, #4]
 8009a9e:	f7fa fbe5 	bl	800426c <BugCheck_AssertInterruptsOff$4655>
 8009aa2:	4811      	ldr	r0, [pc, #68]	; (8009ae8 <SwapCurrentThreadUnderInterrupt_Dispose$5056+0x50>)
 8009aa4:	4911      	ldr	r1, [pc, #68]	; (8009aec <SwapCurrentThreadUnderInterrupt_Dispose$5056+0x54>)
 8009aa6:	4479      	add	r1, pc
 8009aa8:	4408      	add	r0, r1
 8009aaa:	f8d0 00f8 	ldr.w	r0, [r0, #248]	; 0xf8
        {
            BugCheck.AssertInterruptsOff();

            ThreadImpl newThread = ThreadImpl.CurrentThread;

            if(newThread != null)
 8009aae:	2800      	cmp	r0, #0
 8009ab0:	9000      	str	r0, [sp, #0]
 8009ab2:	d004      	beq.n	8009abe <SwapCurrentThreadUnderInterrupt_Dispose$5056+0x26>
 8009ab4:	e7ff      	b.n	8009ab6 <SwapCurrentThreadUnderInterrupt_Dispose$5056+0x1e>
            {
                newThread.ReleasedProcessor();
 8009ab6:	9800      	ldr	r0, [sp, #0]
 8009ab8:	f7fa faaa 	bl	8004010 <Thread_ReleasedProcessor$4003>
            }
 8009abc:	e7ff      	b.n	8009abe <SwapCurrentThreadUnderInterrupt_Dispose$5056+0x26>

            if(m_previousThread != null)
 8009abe:	9801      	ldr	r0, [sp, #4]
 8009ac0:	6881      	ldr	r1, [r0, #8]
 8009ac2:	2900      	cmp	r1, #0
 8009ac4:	d005      	beq.n	8009ad2 <SwapCurrentThreadUnderInterrupt_Dispose$5056+0x3a>
 8009ac6:	e7ff      	b.n	8009ac8 <SwapCurrentThreadUnderInterrupt_Dispose$5056+0x30>
            {
                m_previousThread.AcquiredProcessor();
 8009ac8:	9801      	ldr	r0, [sp, #4]
 8009aca:	6880      	ldr	r0, [r0, #8]
 8009acc:	f7fa faf4 	bl	80040b8 <Thread_AcquiredProcessor$4004>
            }
 8009ad0:	e7ff      	b.n	8009ad2 <SwapCurrentThreadUnderInterrupt_Dispose$5056+0x3a>

            ThreadImpl.CurrentThread = m_previousThread;
 8009ad2:	9801      	ldr	r0, [sp, #4]
 8009ad4:	6881      	ldr	r1, [r0, #8]
 8009ad6:	4a04      	ldr	r2, [pc, #16]	; (8009ae8 <SwapCurrentThreadUnderInterrupt_Dispose$5056+0x50>)
 8009ad8:	4b05      	ldr	r3, [pc, #20]	; (8009af0 <SwapCurrentThreadUnderInterrupt_Dispose$5056+0x58>)
 8009ada:	447b      	add	r3, pc
 8009adc:	441a      	add	r2, r3
 8009ade:	f8c2 10f8 	str.w	r1, [r2, #248]	; 0xf8
 8009ae2:	b002      	add	sp, #8
 8009ae4:	bd80      	pop	{r7, pc}
 8009ae6:	46c0      	nop			; (mov r8, r8)
 8009ae8:	fffffe3c 	.word	0xfffffe3c
 8009aec:	17ff7d2a 	.word	0x17ff7d2a
 8009af0:	17ff7cf6 	.word	0x17ff7cf6

08009af4 <ProcessorARMv7M_VFP_InitializeProcessor$5271>:
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b082      	sub	sp, #8
 8009af8:	4601      	mov	r1, r0
        }

        [TS.WellKnownMethod( "Helpers_BinaryOperations_IntRem" )]
        internal static int IntRem( int left  ,
                                    int right )
        {
 8009afa:	9101      	str	r1, [sp, #4]
 8009afc:	f7fb ff32 	bl	8005964 <ProcessorARMv7M_InitializeProcessor$3238>
            return left - (left / right) * right;
        }
 8009b00:	f000 f802 	bl	8009b08 <ProcessorARMv7M_VFP_DisableLazyStacking$5276>
 8009b04:	b002      	add	sp, #8
 8009b06:	bd80      	pop	{r7, pc}

08009b08 <ProcessorARMv7M_VFP_DisableLazyStacking$5276>:
            CUSTOM_STUB_SCB__set_FPCCR( value ); 
        }

        protected void DisableLazyStacking()
        {
            uint value = CUSTOM_STUB_SCB__get_FPCCR( );
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	f013 f9b9 	bl	801ce80 <CUSTOM_STUB_SCB__get_FPCCR>

            value &= ~c_FPCCR__LSPEN_ENABLED;
 8009b0e:	f020 4080 	bic.w	r0, r0, #1073741824	; 0x40000000

            CUSTOM_STUB_SCB__set_FPCCR( value ); 
 8009b12:	f013 f9bb 	bl	801ce8c <CUSTOM_STUB_SCB__set_FPCCR>
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <TimerPool_.ctor$5352>:
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b08a      	sub	sp, #40	; 0x28
 8009b1c:	4601      	mov	r1, r0
        }

        protected bool IsFPContextActiveOnCurrentMode()
        {
            return ( ( CMSIS_STUB_SCB__get_CONTROL( ) & c_CONTROL__FPCA_ACTIVE ) == c_CONTROL__FPCA_ACTIVE ); 
        }
 8009b1e:	4a27      	ldr	r2, [pc, #156]	; (8009bbc <TimerPool_.ctor$5352+0xa4>)
 8009b20:	4b27      	ldr	r3, [pc, #156]	; (8009bc0 <TimerPool_.ctor$5352+0xa8>)
 8009b22:	447b      	add	r3, pc
 8009b24:	441a      	add	r2, r3
 8009b26:	f8df c09c 	ldr.w	ip, [pc, #156]	; 8009bc4 <TimerPool_.ctor$5352+0xac>
 8009b2a:	449c      	add	ip, r3
 8009b2c:	9009      	str	r0, [sp, #36]	; 0x24
 8009b2e:	4610      	mov	r0, r2
 8009b30:	9108      	str	r1, [sp, #32]
 8009b32:	4661      	mov	r1, ip
 8009b34:	9207      	str	r2, [sp, #28]
 8009b36:	9306      	str	r3, [sp, #24]
 8009b38:	f7f6 fe42 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8009b3c:	9005      	str	r0, [sp, #20]
 8009b3e:	f000 f84d 	bl	8009bdc <KernelList`1_.ctor$17735>
 8009b42:	9805      	ldr	r0, [sp, #20]
 8009b44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009b46:	6088      	str	r0, [r1, #8]

 8009b48:	4a1f      	ldr	r2, [pc, #124]	; (8009bc8 <TimerPool_.ctor$5352+0xb0>)
 8009b4a:	9b06      	ldr	r3, [sp, #24]
 8009b4c:	18d1      	adds	r1, r2, r3
 8009b4e:	9807      	ldr	r0, [sp, #28]
 8009b50:	f7f6 fe36 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8009b54:	2100      	movs	r1, #0
 8009b56:	9004      	str	r0, [sp, #16]
 8009b58:	9103      	str	r1, [sp, #12]
 8009b5a:	9a03      	ldr	r2, [sp, #12]
 8009b5c:	f7fb f87a 	bl	8004c54 <EventWaitHandle_.ctor$3943>
 8009b60:	9804      	ldr	r0, [sp, #16]
 8009b62:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009b64:	6108      	str	r0, [r1, #16]
        //--//
 8009b66:	4a19      	ldr	r2, [pc, #100]	; (8009bcc <TimerPool_.ctor$5352+0xb4>)
 8009b68:	9b06      	ldr	r3, [sp, #24]
 8009b6a:	18d1      	adds	r1, r2, r3
 8009b6c:	9807      	ldr	r0, [sp, #28]
 8009b6e:	f7f6 fe27 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8009b72:	4917      	ldr	r1, [pc, #92]	; (8009bd0 <TimerPool_.ctor$5352+0xb8>)
 8009b74:	9a06      	ldr	r2, [sp, #24]
 8009b76:	440a      	add	r2, r1
 8009b78:	9002      	str	r0, [sp, #8]
 8009b7a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009b7c:	f7f7 ff9e 	bl	8001abc <MulticastDelegate_.ctor$4629>
 8009b80:	4814      	ldr	r0, [pc, #80]	; (8009bd4 <TimerPool_.ctor$5352+0xbc>)
 8009b82:	9906      	ldr	r1, [sp, #24]
 8009b84:	4401      	add	r1, r0
 8009b86:	9807      	ldr	r0, [sp, #28]
 8009b88:	f7f6 fe1a 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8009b8c:	9001      	str	r0, [sp, #4]
 8009b8e:	9902      	ldr	r1, [sp, #8]
 8009b90:	f7f9 fd48 	bl	8003624 <Thread_.ctor$3991>
 8009b94:	9801      	ldr	r0, [sp, #4]
 8009b96:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009b98:	60c8      	str	r0, [r1, #12]
        
 8009b9a:	4a0f      	ldr	r2, [pc, #60]	; (8009bd8 <TimerPool_.ctor$5352+0xc0>)
 8009b9c:	9b06      	ldr	r3, [sp, #24]
 8009b9e:	18d1      	adds	r1, r2, r3
 8009ba0:	9807      	ldr	r0, [sp, #28]
 8009ba2:	f7f6 fe0d 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8009ba6:	9000      	str	r0, [sp, #0]
 8009ba8:	f000 f8fa 	bl	8009da0 <Queue`1_.ctor$17755>
 8009bac:	9800      	ldr	r0, [sp, #0]
 8009bae:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009bb0:	6148      	str	r0, [r1, #20]

        [DllImport( "C" )]
 8009bb2:	68c8      	ldr	r0, [r1, #12]
 8009bb4:	f7f9 fe06 	bl	80037c4 <Thread_Start$3993>
 8009bb8:	b00a      	add	sp, #40	; 0x28
 8009bba:	bd80      	pop	{r7, pc}
 8009bbc:	ffffea38 	.word	0xffffea38
 8009bc0:	17ff7cae 	.word	0x17ff7cae
 8009bc4:	e801276c 	.word	0xe801276c
 8009bc8:	e80111dc 	.word	0xe80111dc
 8009bcc:	e801102c 	.word	0xe801102c
 8009bd0:	e8008475 	.word	0xe8008475
 8009bd4:	e80110bc 	.word	0xe80110bc
 8009bd8:	e80127fc 	.word	0xe80127fc

08009bdc <KernelList`1_.ctor$17735>:
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b088      	sub	sp, #32
 8009be0:	4601      	mov	r1, r0
        //
        // Constructor Methods
        //

        public KernelNode( T target )
        {
 8009be2:	4a16      	ldr	r2, [pc, #88]	; (8009c3c <KernelList`1_.ctor$17735+0x60>)
 8009be4:	4b16      	ldr	r3, [pc, #88]	; (8009c40 <KernelList`1_.ctor$17735+0x64>)
 8009be6:	447b      	add	r3, pc
 8009be8:	441a      	add	r2, r3
 8009bea:	f8df c058 	ldr.w	ip, [pc, #88]	; 8009c44 <KernelList`1_.ctor$17735+0x68>
 8009bee:	4463      	add	r3, ip
 8009bf0:	9007      	str	r0, [sp, #28]
 8009bf2:	4610      	mov	r0, r2
 8009bf4:	9106      	str	r1, [sp, #24]
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	9305      	str	r3, [sp, #20]
 8009bfa:	9204      	str	r2, [sp, #16]
 8009bfc:	f7f6 fde0 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8009c00:	2100      	movs	r1, #0
 8009c02:	9003      	str	r0, [sp, #12]
 8009c04:	9102      	str	r1, [sp, #8]
 8009c06:	f004 fa91 	bl	800e12c <KernelNode`1_.ctor$17370>
 8009c0a:	9803      	ldr	r0, [sp, #12]
 8009c0c:	9907      	ldr	r1, [sp, #28]
 8009c0e:	6088      	str	r0, [r1, #8]
            m_target = target;
 8009c10:	9804      	ldr	r0, [sp, #16]
 8009c12:	9905      	ldr	r1, [sp, #20]
 8009c14:	f7f6 fdd4 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8009c18:	9001      	str	r0, [sp, #4]
 8009c1a:	9902      	ldr	r1, [sp, #8]
 8009c1c:	f004 fa86 	bl	800e12c <KernelNode`1_.ctor$17370>
 8009c20:	9801      	ldr	r0, [sp, #4]
 8009c22:	9907      	ldr	r1, [sp, #28]
 8009c24:	60c8      	str	r0, [r1, #12]
        }

 8009c26:	6888      	ldr	r0, [r1, #8]
 8009c28:	9901      	ldr	r1, [sp, #4]
 8009c2a:	f007 fcfb 	bl	8011624 <KernelNode`1_set_Next$17382>
        //
 8009c2e:	9807      	ldr	r0, [sp, #28]
 8009c30:	6881      	ldr	r1, [r0, #8]
 8009c32:	68c0      	ldr	r0, [r0, #12]
 8009c34:	f007 fcfe 	bl	8011634 <KernelNode`1_set_Previous$17384>
 8009c38:	b008      	add	sp, #32
 8009c3a:	bd80      	pop	{r7, pc}
 8009c3c:	ffffea38 	.word	0xffffea38
 8009c40:	17ff7bea 	.word	0x17ff7bea
 8009c44:	e801329c 	.word	0xe801329c

08009c48 <TimerPool_ControllerMethod$5356>:
 8009c48:	b510      	push	{r4, lr}
 8009c4a:	b09e      	sub	sp, #120	; 0x78
 8009c4c:	a919      	add	r1, sp, #100	; 0x64
 8009c4e:	2200      	movs	r2, #0
 8009c50:	f88d 2064 	strb.w	r2, [sp, #100]	; 0x64
            }

            //--//

            private void ControllerMethod()
            {
 8009c54:	9018      	str	r0, [sp, #96]	; 0x60
 8009c56:	9117      	str	r1, [sp, #92]	; 0x5c
 8009c58:	e7ff      	b.n	8009c5a <TimerPool_ControllerMethod$5356+0x12>
 8009c5a:	484c      	ldr	r0, [pc, #304]	; (8009d8c <TimerPool_ControllerMethod$5356+0x144>)
 8009c5c:	494c      	ldr	r1, [pc, #304]	; (8009d90 <TimerPool_ControllerMethod$5356+0x148>)
 8009c5e:	4479      	add	r1, pc
 8009c60:	4408      	add	r0, r1
 8009c62:	f8d0 1094 	ldr.w	r1, [r0, #148]	; 0x94
 8009c66:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
                while(true)
                {
                    SchedulerTime waitFor = SchedulerTime.MaxValue;
                    SchedulerTime now     = SchedulerTime.Now;
 8009c6a:	9116      	str	r1, [sp, #88]	; 0x58
 8009c6c:	9015      	str	r0, [sp, #84]	; 0x54
 8009c6e:	f7fe fed5 	bl	8008a1c <SchedulerTime_get_Now$4865>
 8009c72:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009c74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c76:	9114      	str	r1, [sp, #80]	; 0x50
 8009c78:	9013      	str	r0, [sp, #76]	; 0x4c
 8009c7a:	9212      	str	r2, [sp, #72]	; 0x48
 8009c7c:	9311      	str	r3, [sp, #68]	; 0x44
 8009c7e:	e7ff      	b.n	8009c80 <TimerPool_ControllerMethod$5356+0x38>
 8009c80:	9811      	ldr	r0, [sp, #68]	; 0x44
 8009c82:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009c84:	2200      	movs	r2, #0
 8009c86:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c88:	701a      	strb	r2, [r3, #0]
 8009c8a:	aa19      	add	r2, sp, #100	; 0x64

                    while(true)
                    {
                        KernelNode< TimerImpl > node;

                        lock(this)
 8009c8c:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8009c90:	9010      	str	r0, [sp, #64]	; 0x40
 8009c92:	4660      	mov	r0, ip
 8009c94:	910f      	str	r1, [sp, #60]	; 0x3c
 8009c96:	4611      	mov	r1, r2
 8009c98:	f7fd f96a 	bl	8006f70 <Monitor_Enter$7710>
                        {
                            node = m_timers.FirstNode();
 8009c9c:	9818      	ldr	r0, [sp, #96]	; 0x60
 8009c9e:	6880      	ldr	r0, [r0, #8]
 8009ca0:	f000 fa5a 	bl	800a158 <KernelList`1_FirstNode$17737>
 8009ca4:	4601      	mov	r1, r0
                            if(node != null)
 8009ca6:	2800      	cmp	r0, #0
 8009ca8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009caa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009cac:	460b      	mov	r3, r1
 8009cae:	910e      	str	r1, [sp, #56]	; 0x38
 8009cb0:	900d      	str	r0, [sp, #52]	; 0x34
 8009cb2:	920c      	str	r2, [sp, #48]	; 0x30
 8009cb4:	930b      	str	r3, [sp, #44]	; 0x2c
 8009cb6:	d01d      	beq.n	8009cf4 <TimerPool_ControllerMethod$5356+0xac>
 8009cb8:	e7ff      	b.n	8009cba <TimerPool_ControllerMethod$5356+0x72>
                    // At most the controller will wake up early for the next timer, not late.
                    //
                    node.RemoveFromList();
                }
            }

 8009cba:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009cbc:	6901      	ldr	r1, [r0, #16]
 8009cbe:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8009cc0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8009cc2:	931b      	str	r3, [sp, #108]	; 0x6c
 8009cc4:	921a      	str	r2, [sp, #104]	; 0x68
 8009cc6:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8009cca:	f8cd c074 	str.w	ip, [sp, #116]	; 0x74
 8009cce:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 8009cd2:	f8cd e070 	str.w	lr, [sp, #112]	; 0x70
 8009cd6:	2400      	movs	r4, #0
 8009cd8:	4572      	cmp	r2, lr
 8009cda:	4622      	mov	r2, r4
 8009cdc:	bf98      	it	ls
 8009cde:	2201      	movls	r2, #1
 8009ce0:	4563      	cmp	r3, ip
 8009ce2:	bf98      	it	ls
 8009ce4:	2401      	movls	r4, #1
 8009ce6:	4563      	cmp	r3, ip
 8009ce8:	bf08      	it	eq
 8009cea:	4614      	moveq	r4, r2
                            node = m_timers.FirstNode();
                            if(node != null)
                            {
                                TimerImpl timer = node.Target;

                                if(timer.m_nextTrigger <= now)
 8009cec:	2c00      	cmp	r4, #0
 8009cee:	910a      	str	r1, [sp, #40]	; 0x28
 8009cf0:	d12f      	bne.n	8009d52 <TimerPool_ControllerMethod$5356+0x10a>
 8009cf2:	e03b      	b.n	8009d6c <TimerPool_ControllerMethod$5356+0x124>
 8009cf4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009cf6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009cf8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009cfa:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
                                    waitFor = timer.m_nextTrigger;

                                    node = null;
                                }
                            }
                        }
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	9009      	str	r0, [sp, #36]	; 0x24
 8009d02:	9108      	str	r1, [sp, #32]
 8009d04:	9207      	str	r2, [sp, #28]
 8009d06:	d004      	beq.n	8009d12 <TimerPool_ControllerMethod$5356+0xca>
 8009d08:	e7ff      	b.n	8009d0a <TimerPool_ControllerMethod$5356+0xc2>
 8009d0a:	9818      	ldr	r0, [sp, #96]	; 0x60
 8009d0c:	f7fd f976 	bl	8006ffc <Monitor_Exit$3926>
 8009d10:	e7ff      	b.n	8009d12 <TimerPool_ControllerMethod$5356+0xca>

                        if(node == null)
 8009d12:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d14:	2800      	cmp	r0, #0
 8009d16:	9907      	ldr	r1, [sp, #28]
 8009d18:	9a08      	ldr	r2, [sp, #32]
 8009d1a:	9106      	str	r1, [sp, #24]
 8009d1c:	9205      	str	r2, [sp, #20]
 8009d1e:	d10d      	bne.n	8009d3c <TimerPool_ControllerMethod$5356+0xf4>
 8009d20:	e7ff      	b.n	8009d22 <TimerPool_ControllerMethod$5356+0xda>
 8009d22:	9805      	ldr	r0, [sp, #20]
 8009d24:	9906      	ldr	r1, [sp, #24]
                        CallbackHandler worker = FetchIdleWorker();

                        worker.Process( node );
                    }

                    m_controllerWakeup.WaitOne( waitFor, false );
 8009d26:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009d28:	6913      	ldr	r3, [r2, #16]
 8009d2a:	689b      	ldr	r3, [r3, #8]
 8009d2c:	9004      	str	r0, [sp, #16]
 8009d2e:	4618      	mov	r0, r3
 8009d30:	460a      	mov	r2, r1
 8009d32:	9b04      	ldr	r3, [sp, #16]
 8009d34:	f7fb fb3c 	bl	80053b0 <WaitHandle_WaitOne$3940>
                }
 8009d38:	9003      	str	r0, [sp, #12]
 8009d3a:	e78e      	b.n	8009c5a <TimerPool_ControllerMethod$5356+0x12>
                        if(node == null)
                        {
                            break;
                        }

                        CallbackHandler worker = FetchIdleWorker();
 8009d3c:	9818      	ldr	r0, [sp, #96]	; 0x60
 8009d3e:	f000 fa1f 	bl	800a180 <TimerPool_FetchIdleWorker$5357>

                        worker.Process( node );
 8009d42:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d44:	f000 fa62 	bl	800a20c <CallbackHandler_Process$5701>
 8009d48:	9807      	ldr	r0, [sp, #28]
 8009d4a:	9908      	ldr	r1, [sp, #32]
                    }
 8009d4c:	9012      	str	r0, [sp, #72]	; 0x48
 8009d4e:	9111      	str	r1, [sp, #68]	; 0x44
 8009d50:	e796      	b.n	8009c80 <TimerPool_ControllerMethod$5356+0x38>
                            {
                                TimerImpl timer = node.Target;

                                if(timer.m_nextTrigger <= now)
                                {
                                    node.RemoveFromList();
 8009d52:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009d54:	f000 f8b7 	bl	8009ec6 <KernelNode`1_RemoveFromList$17372>

                                    timer.PrepareForExecution();
 8009d58:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009d5a:	f000 fa63 	bl	800a224 <Timer_PrepareForExecution$3921>
 8009d5e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009d60:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009d62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
                                }
 8009d64:	9002      	str	r0, [sp, #8]
 8009d66:	9101      	str	r1, [sp, #4]
 8009d68:	9200      	str	r2, [sp, #0]
 8009d6a:	e007      	b.n	8009d7c <TimerPool_ControllerMethod$5356+0x134>
 8009d6c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009d6e:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8009d70:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8009d72:	2300      	movs	r3, #0
                                else
                                {
                                    waitFor = timer.m_nextTrigger;

                                    node = null;
                                }
 8009d74:	9201      	str	r2, [sp, #4]
 8009d76:	9102      	str	r1, [sp, #8]
 8009d78:	9300      	str	r3, [sp, #0]
 8009d7a:	e7ff      	b.n	8009d7c <TimerPool_ControllerMethod$5356+0x134>
 8009d7c:	9800      	ldr	r0, [sp, #0]
 8009d7e:	9901      	ldr	r1, [sp, #4]
 8009d80:	9a02      	ldr	r2, [sp, #8]
                            }
 8009d82:	910c      	str	r1, [sp, #48]	; 0x30
 8009d84:	920d      	str	r2, [sp, #52]	; 0x34
 8009d86:	900b      	str	r0, [sp, #44]	; 0x2c
 8009d88:	e7b4      	b.n	8009cf4 <TimerPool_ControllerMethod$5356+0xac>
 8009d8a:	46c0      	nop			; (mov r8, r8)
 8009d8c:	fffffe3c 	.word	0xfffffe3c
 8009d90:	17ff7b72 	.word	0x17ff7b72

08009d94 <Queue`1_get_Count$17758>:
 8009d94:	b081      	sub	sp, #4
 8009d96:	4601      	mov	r1, r0
 8009d98:	6940      	ldr	r0, [r0, #20]
 8009d9a:	9100      	str	r1, [sp, #0]
 8009d9c:	b001      	add	sp, #4
 8009d9e:	4770      	bx	lr

08009da0 <Queue`1_.ctor$17755>:
 8009da0:	b081      	sub	sp, #4
 8009da2:	4601      	mov	r1, r0
        public KernelNode< T > FirstNode()
        {
            KernelNode< T > node = m_head.Next;

            if(node != m_tail)
            {
 8009da4:	4a04      	ldr	r2, [pc, #16]	; (8009db8 <Queue`1_.ctor$17755+0x18>)
 8009da6:	4b05      	ldr	r3, [pc, #20]	; (8009dbc <Queue`1_.ctor$17755+0x1c>)
 8009da8:	447b      	add	r3, pc
 8009daa:	441a      	add	r2, r3
 8009dac:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
 8009db0:	6082      	str	r2, [r0, #8]
 8009db2:	9100      	str	r1, [sp, #0]
 8009db4:	b001      	add	sp, #4
 8009db6:	4770      	bx	lr
 8009db8:	fffffe3c 	.word	0xfffffe3c
 8009dbc:	17ff7a28 	.word	0x17ff7a28

08009dc0 <TimerPool_Activate$5353>:
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b096      	sub	sp, #88	; 0x58
 8009dc4:	460a      	mov	r2, r1
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	f04f 0c00 	mov.w	ip, #0
 8009dcc:	f88d c044 	strb.w	ip, [sp, #68]	; 0x44
 8009dd0:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
            // Helper Methods
            //

            internal void Activate( KernelNode< TimerImpl > node )
            {
                lock(this)
 8009dd4:	9110      	str	r1, [sp, #64]	; 0x40
 8009dd6:	4661      	mov	r1, ip
 8009dd8:	920f      	str	r2, [sp, #60]	; 0x3c
 8009dda:	930e      	str	r3, [sp, #56]	; 0x38
 8009ddc:	f7fd f8c8 	bl	8006f70 <Monitor_Enter$7710>
                    // At most the controller will wake up early for the next timer, not late.
                    //
                    node.RemoveFromList();
                }
            }

 8009de0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009de2:	6901      	ldr	r1, [r0, #16]
            {
                lock(this)
                {
                    TimerImpl timer = node.Target;

                    if(timer.m_fExecuting == false)
 8009de4:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
 8009de8:	2a00      	cmp	r2, #0
 8009dea:	910d      	str	r1, [sp, #52]	; 0x34
 8009dec:	d110      	bne.n	8009e10 <TimerPool_Activate$5353+0x50>
 8009dee:	e7ff      	b.n	8009df0 <TimerPool_Activate$5353+0x30>
                    {
                        node.RemoveFromList();
 8009df0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009df2:	f000 f868 	bl	8009ec6 <KernelNode`1_RemoveFromList$17372>
 8009df6:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009df8:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8009dfa:	6a82      	ldr	r2, [r0, #40]	; 0x28

                        //
                        // Insert in order.
                        //
                        SchedulerTime           nextTrigger       = timer.m_nextTrigger;
                        KernelNode< TimerImpl > node2             = m_timers.StartOfForwardWalk;
 8009dfc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009dfe:	6898      	ldr	r0, [r3, #8]
 8009e00:	910c      	str	r1, [sp, #48]	; 0x30
 8009e02:	920b      	str	r2, [sp, #44]	; 0x2c
 8009e04:	f000 f872 	bl	8009eec <KernelList`1_get_StartOfForwardWalk$17742>
 8009e08:	2101      	movs	r1, #1
                        bool                    fSignalController = true;
 8009e0a:	910a      	str	r1, [sp, #40]	; 0x28
 8009e0c:	9009      	str	r0, [sp, #36]	; 0x24
 8009e0e:	e00a      	b.n	8009e26 <TimerPool_Activate$5353+0x66>
 8009e10:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
                        if(fSignalController)
                        {
                            m_controllerWakeup.Set();
                        }
                    }
                }
 8009e14:	2800      	cmp	r0, #0
 8009e16:	d004      	beq.n	8009e22 <TimerPool_Activate$5353+0x62>
 8009e18:	e7ff      	b.n	8009e1a <TimerPool_Activate$5353+0x5a>
 8009e1a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009e1c:	f7fd f8ee 	bl	8006ffc <Monitor_Exit$3926>
 8009e20:	e7ff      	b.n	8009e22 <TimerPool_Activate$5353+0x62>
 8009e22:	b016      	add	sp, #88	; 0x58
 8009e24:	bd80      	pop	{r7, pc}
 8009e26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e28:	990a      	ldr	r1, [sp, #40]	; 0x28
                        //
                        SchedulerTime           nextTrigger       = timer.m_nextTrigger;
                        KernelNode< TimerImpl > node2             = m_timers.StartOfForwardWalk;
                        bool                    fSignalController = true;

                        while(node2.IsValidForForwardMove)
 8009e2a:	9008      	str	r0, [sp, #32]
 8009e2c:	9107      	str	r1, [sp, #28]
 8009e2e:	f000 f864 	bl	8009efa <KernelNode`1_get_IsValidForForwardMove$17379>
 8009e32:	f010 0fff 	tst.w	r0, #255	; 0xff
 8009e36:	9808      	ldr	r0, [sp, #32]
 8009e38:	9907      	ldr	r1, [sp, #28]
 8009e3a:	9006      	str	r0, [sp, #24]
 8009e3c:	9105      	str	r1, [sp, #20]
 8009e3e:	d020      	beq.n	8009e82 <TimerPool_Activate$5353+0xc2>
 8009e40:	e7ff      	b.n	8009e42 <TimerPool_Activate$5353+0x82>
                    // At most the controller will wake up early for the next timer, not late.
                    //
                    node.RemoveFromList();
                }
            }

 8009e42:	9808      	ldr	r0, [sp, #32]
 8009e44:	6901      	ldr	r1, [r0, #16]
 8009e46:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8009e48:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8009e4a:	9113      	str	r1, [sp, #76]	; 0x4c
 8009e4c:	9212      	str	r2, [sp, #72]	; 0x48
 8009e4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e50:	9315      	str	r3, [sp, #84]	; 0x54
 8009e52:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
 8009e56:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 8009e5a:	f04f 0e00 	mov.w	lr, #0
 8009e5e:	4562      	cmp	r2, ip
 8009e60:	4672      	mov	r2, lr
 8009e62:	bf88      	it	hi
 8009e64:	2201      	movhi	r2, #1
 8009e66:	4299      	cmp	r1, r3
 8009e68:	bf88      	it	hi
 8009e6a:	f04f 0e01 	movhi.w	lr, #1
 8009e6e:	4299      	cmp	r1, r3
 8009e70:	bf08      	it	eq
 8009e72:	4696      	moveq	lr, r2
                        KernelNode< TimerImpl > node2             = m_timers.StartOfForwardWalk;
                        bool                    fSignalController = true;

                        while(node2.IsValidForForwardMove)
                        {
                            if(node2.Target.m_nextTrigger > nextTrigger)
 8009e74:	f1be 0f00 	cmp.w	lr, #0
 8009e78:	9907      	ldr	r1, [sp, #28]
 8009e7a:	9004      	str	r0, [sp, #16]
 8009e7c:	9103      	str	r1, [sp, #12]
 8009e7e:	d117      	bne.n	8009eb0 <TimerPool_Activate$5353+0xf0>
 8009e80:	e01b      	b.n	8009eba <TimerPool_Activate$5353+0xfa>
 8009e82:	9805      	ldr	r0, [sp, #20]
 8009e84:	9906      	ldr	r1, [sp, #24]

                            node2             = node2.Next;
                            fSignalController = false;
                        }

                        node.InsertBefore( node2 );
 8009e86:	9102      	str	r1, [sp, #8]
 8009e88:	9001      	str	r0, [sp, #4]
 8009e8a:	e7ff      	b.n	8009e8c <TimerPool_Activate$5353+0xcc>
 8009e8c:	9801      	ldr	r0, [sp, #4]
 8009e8e:	9902      	ldr	r1, [sp, #8]
 8009e90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009e92:	9000      	str	r0, [sp, #0]
 8009e94:	4610      	mov	r0, r2
 8009e96:	f000 f839 	bl	8009f0c <KernelNode`1_InsertBefore$17371>

                        if(fSignalController)
 8009e9a:	9800      	ldr	r0, [sp, #0]
 8009e9c:	f010 0fff 	tst.w	r0, #255	; 0xff
 8009ea0:	d005      	beq.n	8009eae <TimerPool_Activate$5353+0xee>
 8009ea2:	e7ff      	b.n	8009ea4 <TimerPool_Activate$5353+0xe4>
                        {
                            m_controllerWakeup.Set();
 8009ea4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009ea6:	6900      	ldr	r0, [r0, #16]
 8009ea8:	f7fa fc21 	bl	80046ee <EventWaitHandle_Set$3945>
                        }
 8009eac:	e7ff      	b.n	8009eae <TimerPool_Activate$5353+0xee>
                    }
 8009eae:	e7af      	b.n	8009e10 <TimerPool_Activate$5353+0x50>
 8009eb0:	9803      	ldr	r0, [sp, #12]
 8009eb2:	9904      	ldr	r1, [sp, #16]

                        while(node2.IsValidForForwardMove)
                        {
                            if(node2.Target.m_nextTrigger > nextTrigger)
                            {
                                break;
 8009eb4:	9102      	str	r1, [sp, #8]
 8009eb6:	9001      	str	r0, [sp, #4]
 8009eb8:	e7e8      	b.n	8009e8c <TimerPool_Activate$5353+0xcc>
                            }

                            node2             = node2.Next;
                            fSignalController = false;
 8009eba:	9808      	ldr	r0, [sp, #32]
 8009ebc:	6881      	ldr	r1, [r0, #8]
 8009ebe:	2200      	movs	r2, #0
                        }
 8009ec0:	920a      	str	r2, [sp, #40]	; 0x28
 8009ec2:	9109      	str	r1, [sp, #36]	; 0x24
 8009ec4:	e7af      	b.n	8009e26 <TimerPool_Activate$5353+0x66>

08009ec6 <KernelNode`1_RemoveFromList$17372>:
 8009ec6:	b081      	sub	sp, #4
 8009ec8:	4601      	mov	r1, r0
            this.ConnectToNext( place );
        }

        public void RemoveFromList()
        {
            if(m_next != null)
 8009eca:	6880      	ldr	r0, [r0, #8]
 8009ecc:	2800      	cmp	r0, #0
 8009ece:	9100      	str	r1, [sp, #0]
 8009ed0:	d006      	beq.n	8009ee0 <KernelNode`1_RemoveFromList$17372+0x1a>
 8009ed2:	e7ff      	b.n	8009ed4 <KernelNode`1_RemoveFromList$17372+0xe>
        //--//

        [Inline]
        private void RemoveFromList_NoClear()
        {
            KernelNode< T > next = m_next;
 8009ed4:	9800      	ldr	r0, [sp, #0]
 8009ed6:	6881      	ldr	r1, [r0, #8]
            KernelNode< T > prev = m_previous;
 8009ed8:	68c2      	ldr	r2, [r0, #12]
 8009eda:	60ca      	str	r2, [r1, #12]
 8009edc:	6091      	str	r1, [r2, #8]
        public void RemoveFromList()
        {
            if(m_next != null)
            {
                RemoveFromList_NoClear();
            }
 8009ede:	e7ff      	b.n	8009ee0 <KernelNode`1_RemoveFromList$17372+0x1a>
 8009ee0:	2000      	movs	r0, #0
 8009ee2:	9900      	ldr	r1, [sp, #0]
 8009ee4:	6088      	str	r0, [r1, #8]
 8009ee6:	60c8      	str	r0, [r1, #12]
 8009ee8:	b001      	add	sp, #4
 8009eea:	4770      	bx	lr

08009eec <KernelList`1_get_StartOfForwardWalk$17742>:
 8009eec:	b081      	sub	sp, #4
 8009eee:	4601      	mov	r1, r0

        public KernelNode< T > StartOfForwardWalk
        {
            get
            {
                return m_head.Next;
 8009ef0:	6880      	ldr	r0, [r0, #8]
 8009ef2:	6880      	ldr	r0, [r0, #8]
 8009ef4:	9100      	str	r1, [sp, #0]
 8009ef6:	b001      	add	sp, #4
 8009ef8:	4770      	bx	lr

08009efa <KernelNode`1_get_IsValidForForwardMove$17379>:
 8009efa:	b081      	sub	sp, #4
 8009efc:	4601      	mov	r1, r0

        public bool IsValidForForwardMove
        {
            get
            {
                return m_next != null;
 8009efe:	6880      	ldr	r0, [r0, #8]
 8009f00:	2800      	cmp	r0, #0
 8009f02:	bf18      	it	ne
 8009f04:	2001      	movne	r0, #1
 8009f06:	9100      	str	r1, [sp, #0]
 8009f08:	b001      	add	sp, #4
 8009f0a:	4770      	bx	lr

08009f0c <KernelNode`1_InsertBefore$17371>:
 8009f0c:	b082      	sub	sp, #8
 8009f0e:	4602      	mov	r2, r0
        // Helper Methods
        //

        public void InsertBefore( KernelNode< T > place )
        {
            if(m_next != null)
 8009f10:	6880      	ldr	r0, [r0, #8]
 8009f12:	2800      	cmp	r0, #0
 8009f14:	9201      	str	r2, [sp, #4]
 8009f16:	9100      	str	r1, [sp, #0]
 8009f18:	d006      	beq.n	8009f28 <KernelNode`1_InsertBefore$17371+0x1c>
 8009f1a:	e7ff      	b.n	8009f1c <KernelNode`1_InsertBefore$17371+0x10>
        //--//

        [Inline]
        private void RemoveFromList_NoClear()
        {
            KernelNode< T > next = m_next;
 8009f1c:	9801      	ldr	r0, [sp, #4]
 8009f1e:	6881      	ldr	r1, [r0, #8]
            KernelNode< T > prev = m_previous;
 8009f20:	68c2      	ldr	r2, [r0, #12]
 8009f22:	60ca      	str	r2, [r1, #12]
 8009f24:	6091      	str	r1, [r2, #8]
        public void InsertBefore( KernelNode< T > place )
        {
            if(m_next != null)
            {
                RemoveFromList_NoClear();
            }
 8009f26:	e7ff      	b.n	8009f28 <KernelNode`1_InsertBefore$17371+0x1c>

            KernelNode< T > prev = place.m_previous;
 8009f28:	9800      	ldr	r0, [sp, #0]
 8009f2a:	68c1      	ldr	r1, [r0, #12]
 8009f2c:	9a01      	ldr	r2, [sp, #4]
 8009f2e:	608a      	str	r2, [r1, #8]
 8009f30:	60d1      	str	r1, [r2, #12]
 8009f32:	6090      	str	r0, [r2, #8]
 8009f34:	60c2      	str	r2, [r0, #12]
 8009f36:	b002      	add	sp, #8
 8009f38:	4770      	bx	lr
 8009f3a:	46c0      	nop			; (mov r8, r8)

08009f3c <TimerPool_Deactivate$5354>:
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b084      	sub	sp, #16
 8009f40:	460a      	mov	r2, r1
 8009f42:	4603      	mov	r3, r0
 8009f44:	f04f 0c00 	mov.w	ip, #0
 8009f48:	f88d c00c 	strb.w	ip, [sp, #12]
 8009f4c:	f10d 0c0c 	add.w	ip, sp, #12
                }
            }

            internal void Deactivate( KernelNode< TimerImpl > node )
            {
                lock(this)
 8009f50:	9102      	str	r1, [sp, #8]
 8009f52:	4661      	mov	r1, ip
 8009f54:	9201      	str	r2, [sp, #4]
 8009f56:	9300      	str	r3, [sp, #0]
 8009f58:	f7fd f80a 	bl	8006f70 <Monitor_Enter$7710>
                    // At most the controller will wake up early for the next timer, not late.
                    //
                    node.RemoveFromList();
                }
            }

 8009f5c:	9802      	ldr	r0, [sp, #8]
 8009f5e:	6901      	ldr	r1, [r0, #16]
 8009f60:	4a0b      	ldr	r2, [pc, #44]	; (8009f90 <TimerPool_Deactivate$5354+0x54>)
 8009f62:	4b0c      	ldr	r3, [pc, #48]	; (8009f94 <TimerPool_Deactivate$5354+0x58>)
 8009f64:	447b      	add	r3, pc
 8009f66:	441a      	add	r2, r3
 8009f68:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8009f6c:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 8009f70:	628a      	str	r2, [r1, #40]	; 0x28
 8009f72:	624b      	str	r3, [r1, #36]	; 0x24

                    //
                    // No need to wake up the controller, even if this is the first timer on the list.
                    // At most the controller will wake up early for the next timer, not late.
                    //
                    node.RemoveFromList();
 8009f74:	f7ff ffa7 	bl	8009ec6 <KernelNode`1_RemoveFromList$17372>
 8009f78:	f89d 000c 	ldrb.w	r0, [sp, #12]
                }
 8009f7c:	2800      	cmp	r0, #0
 8009f7e:	d004      	beq.n	8009f8a <TimerPool_Deactivate$5354+0x4e>
 8009f80:	e7ff      	b.n	8009f82 <TimerPool_Deactivate$5354+0x46>
 8009f82:	9800      	ldr	r0, [sp, #0]
 8009f84:	f7fd f83a 	bl	8006ffc <Monitor_Exit$3926>
 8009f88:	e7ff      	b.n	8009f8a <TimerPool_Deactivate$5354+0x4e>
 8009f8a:	b004      	add	sp, #16
 8009f8c:	bd80      	pop	{r7, pc}
 8009f8e:	46c0      	nop			; (mov r8, r8)
 8009f90:	fffffe3c 	.word	0xfffffe3c
 8009f94:	17ff786c 	.word	0x17ff786c

08009f98 <TimerPool_Done$5355>:
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b08c      	sub	sp, #48	; 0x30
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	f04f 0c00 	mov.w	ip, #0
 8009fa2:	f88d c01c 	strb.w	ip, [sp, #28]
 8009fa6:	f10d 0c1c 	add.w	ip, sp, #28
            }

            internal void Done( CallbackHandler         worker ,
                                KernelNode< TimerImpl > node   )
            {
                lock(this)
 8009faa:	9006      	str	r0, [sp, #24]
 8009fac:	9105      	str	r1, [sp, #20]
 8009fae:	4661      	mov	r1, ip
 8009fb0:	9304      	str	r3, [sp, #16]
 8009fb2:	9203      	str	r2, [sp, #12]
 8009fb4:	f7fc ffdc 	bl	8006f70 <Monitor_Enter$7710>
                {
                    if(m_idleHandlers.Count < c_MaxIdleHandlers)
 8009fb8:	9806      	ldr	r0, [sp, #24]
 8009fba:	6941      	ldr	r1, [r0, #20]
 8009fbc:	6949      	ldr	r1, [r1, #20]
 8009fbe:	2901      	cmp	r1, #1
 8009fc0:	9905      	ldr	r1, [sp, #20]
 8009fc2:	9102      	str	r1, [sp, #8]
 8009fc4:	dc08      	bgt.n	8009fd8 <TimerPool_Done$5355+0x40>
 8009fc6:	e7ff      	b.n	8009fc8 <TimerPool_Done$5355+0x30>
                    {
                        m_idleHandlers.Enqueue( worker );
 8009fc8:	9804      	ldr	r0, [sp, #16]
 8009fca:	6940      	ldr	r0, [r0, #20]
 8009fcc:	9905      	ldr	r1, [sp, #20]
 8009fce:	f000 f85b 	bl	800a088 <Queue`1_Enqueue$17764>
 8009fd2:	2000      	movs	r0, #0
                        worker = null;
                    }
 8009fd4:	9002      	str	r0, [sp, #8]
 8009fd6:	e7ff      	b.n	8009fd8 <TimerPool_Done$5355+0x40>
 8009fd8:	9802      	ldr	r0, [sp, #8]
                    // At most the controller will wake up early for the next timer, not late.
                    //
                    node.RemoveFromList();
                }
            }

 8009fda:	9903      	ldr	r1, [sp, #12]
 8009fdc:	690a      	ldr	r2, [r1, #16]

                    //--//

                    TimerImpl timer = node.Target;

                    if(timer.IsDisposed == false)
 8009fde:	9001      	str	r0, [sp, #4]
 8009fe0:	4610      	mov	r0, r2
 8009fe2:	9200      	str	r2, [sp, #0]
 8009fe4:	f000 f83a 	bl	800a05c <Timer_get_IsDisposed$3923>
 8009fe8:	f010 0fff 	tst.w	r0, #255	; 0xff
 8009fec:	d118      	bne.n	800a020 <TimerPool_Done$5355+0x88>
 8009fee:	e7ff      	b.n	8009ff0 <TimerPool_Done$5355+0x58>
 8009ff0:	9800      	ldr	r0, [sp, #0]
 8009ff2:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8009ff4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8009ff6:	4b17      	ldr	r3, [pc, #92]	; (800a054 <TimerPool_Done$5355+0xbc>)
 8009ff8:	f8df c05c 	ldr.w	ip, [pc, #92]	; 800a058 <TimerPool_Done$5355+0xc0>
 8009ffc:	44fc      	add	ip, pc
 8009ffe:	4463      	add	r3, ip
 800a000:	f8d3 c094 	ldr.w	ip, [r3, #148]	; 0x94
 800a004:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a008:	9209      	str	r2, [sp, #36]	; 0x24
 800a00a:	9108      	str	r1, [sp, #32]
 800a00c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a00e:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800a012:	405a      	eors	r2, r3
 800a014:	ea81 010c 	eor.w	r1, r1, ip
 800a018:	4311      	orrs	r1, r2
                    {
                        if(timer.m_nextTrigger != SchedulerTime.MaxValue)
 800a01a:	2900      	cmp	r1, #0
 800a01c:	d113      	bne.n	800a046 <TimerPool_Done$5355+0xae>
 800a01e:	e017      	b.n	800a050 <TimerPool_Done$5355+0xb8>
 800a020:	f89d 001c 	ldrb.w	r0, [sp, #28]
                        {
                            Activate( node );
                        }
                    }
                }
 800a024:	2800      	cmp	r0, #0
 800a026:	d004      	beq.n	800a032 <TimerPool_Done$5355+0x9a>
 800a028:	e7ff      	b.n	800a02a <TimerPool_Done$5355+0x92>
 800a02a:	9804      	ldr	r0, [sp, #16]
 800a02c:	f7fc ffe6 	bl	8006ffc <Monitor_Exit$3926>
 800a030:	e7ff      	b.n	800a032 <TimerPool_Done$5355+0x9a>

                if(worker != null)
 800a032:	9801      	ldr	r0, [sp, #4]
 800a034:	2800      	cmp	r0, #0
 800a036:	d004      	beq.n	800a042 <TimerPool_Done$5355+0xaa>
 800a038:	e7ff      	b.n	800a03a <TimerPool_Done$5355+0xa2>
                {
                    worker.Shutdown();
 800a03a:	9801      	ldr	r0, [sp, #4]
 800a03c:	f000 f819 	bl	800a072 <CallbackHandler_Shutdown$5702>
                }
 800a040:	e7ff      	b.n	800a042 <TimerPool_Done$5355+0xaa>
 800a042:	b00c      	add	sp, #48	; 0x30
 800a044:	bd80      	pop	{r7, pc}

                    if(timer.IsDisposed == false)
                    {
                        if(timer.m_nextTrigger != SchedulerTime.MaxValue)
                        {
                            Activate( node );
 800a046:	9804      	ldr	r0, [sp, #16]
 800a048:	9903      	ldr	r1, [sp, #12]
 800a04a:	f7ff feb9 	bl	8009dc0 <TimerPool_Activate$5353>
                        }
 800a04e:	e7ff      	b.n	800a050 <TimerPool_Done$5355+0xb8>
                    }
 800a050:	e7e6      	b.n	800a020 <TimerPool_Done$5355+0x88>
 800a052:	46c0      	nop			; (mov r8, r8)
 800a054:	fffffe3c 	.word	0xfffffe3c
 800a058:	17ff77d4 	.word	0x17ff77d4

0800a05c <Timer_get_IsDisposed$3923>:
 800a05c:	b081      	sub	sp, #4
 800a05e:	4601      	mov	r1, r0

        private bool IsDisposed
        {
            get
            {
                return m_callback == null;
 800a060:	6880      	ldr	r0, [r0, #8]
 800a062:	2200      	movs	r2, #0
 800a064:	2800      	cmp	r0, #0
 800a066:	bf08      	it	eq
 800a068:	2201      	moveq	r2, #1
 800a06a:	4610      	mov	r0, r2
 800a06c:	9100      	str	r1, [sp, #0]
 800a06e:	b001      	add	sp, #4
 800a070:	4770      	bx	lr

0800a072 <CallbackHandler_Shutdown$5702>:
 800a072:	b580      	push	{r7, lr}
 800a074:	b082      	sub	sp, #8
 800a076:	4601      	mov	r1, r0
 800a078:	2200      	movs	r2, #0
 800a07a:	6142      	str	r2, [r0, #20]
                }

                internal void Shutdown()
                {
                    m_node = null;
                    m_event.Set();
 800a07c:	6900      	ldr	r0, [r0, #16]
 800a07e:	9101      	str	r1, [sp, #4]
 800a080:	f7fa fb35 	bl	80046ee <EventWaitHandle_Set$3945>
 800a084:	b002      	add	sp, #8
 800a086:	bd80      	pop	{r7, pc}

0800a088 <Queue`1_Enqueue$17764>:
 800a088:	b580      	push	{r7, lr}
 800a08a:	b088      	sub	sp, #32
 800a08c:	4602      	mov	r2, r0
        // Adds item to the tail of the queue.
        //
        /// <include file='doc\Queue.uex' path='docs/doc[@for="Queue.Enqueue"]/*' />
        public void Enqueue( T item )
        {
            if(_size == _array.Length)
 800a08e:	6883      	ldr	r3, [r0, #8]
 800a090:	6940      	ldr	r0, [r0, #20]
            return new Enumerator( this );
        }

        // Removes the object at the head of the queue and returns it. If the queue
        // is empty, this method simply returns null.
        /// <include file='doc\Queue.uex' path='docs/doc[@for="Queue.Dequeue"]/*' />
 800a092:	689b      	ldr	r3, [r3, #8]
        // Adds item to the tail of the queue.
        //
        /// <include file='doc\Queue.uex' path='docs/doc[@for="Queue.Enqueue"]/*' />
        public void Enqueue( T item )
        {
            if(_size == _array.Length)
 800a094:	4298      	cmp	r0, r3
 800a096:	9206      	str	r2, [sp, #24]
 800a098:	9105      	str	r1, [sp, #20]
 800a09a:	d113      	bne.n	800a0c4 <Queue`1_Enqueue$17764+0x3c>
 800a09c:	e7ff      	b.n	800a09e <Queue`1_Enqueue$17764+0x16>
            {
                int newcapacity = (int)((long)_array.Length * (long)_GrowFactor / 100);
 800a09e:	9806      	ldr	r0, [sp, #24]
 800a0a0:	6881      	ldr	r1, [r0, #8]
            return new Enumerator( this );
        }

        // Removes the object at the head of the queue and returns it. If the queue
        // is empty, this method simply returns null.
        /// <include file='doc\Queue.uex' path='docs/doc[@for="Queue.Dequeue"]/*' />
 800a0a2:	6889      	ldr	r1, [r1, #8]
        /// <include file='doc\Queue.uex' path='docs/doc[@for="Queue.Enqueue"]/*' />
        public void Enqueue( T item )
        {
            if(_size == _array.Length)
            {
                int newcapacity = (int)((long)_array.Length * (long)_GrowFactor / 100);
 800a0a4:	22c8      	movs	r2, #200	; 0xc8
 800a0a6:	fb01 f002 	mul.w	r0, r1, r2
 800a0aa:	2264      	movs	r2, #100	; 0x64
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	9104      	str	r1, [sp, #16]
 800a0b0:	4619      	mov	r1, r3
 800a0b2:	f01b f9bb 	bl	802542c <__aeabi_uldivmod>
 800a0b6:	4601      	mov	r1, r0
                if(newcapacity < _array.Length + _MinimumGrow)
 800a0b8:	9a04      	ldr	r2, [sp, #16]
 800a0ba:	1d13      	adds	r3, r2, #4
 800a0bc:	4298      	cmp	r0, r3
 800a0be:	9103      	str	r1, [sp, #12]
 800a0c0:	db3c      	blt.n	800a13c <Queue`1_Enqueue$17764+0xb4>
 800a0c2:	e041      	b.n	800a148 <Queue`1_Enqueue$17764+0xc0>
                    newcapacity = _array.Length + _MinimumGrow;
                }
                SetCapacity( newcapacity );
            }

            _array[_tail] = item;
 800a0c4:	9806      	ldr	r0, [sp, #24]
 800a0c6:	6881      	ldr	r1, [r0, #8]
 800a0c8:	6902      	ldr	r2, [r0, #16]
 800a0ca:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a0ce:	9a05      	ldr	r2, [sp, #20]
 800a0d0:	60ca      	str	r2, [r1, #12]
////        _tail = (_tail + 1) % _array.Length;
            int tailNext = _tail + 1;
            _tail = (tailNext == _array.Length) ? 0 : tailNext;
 800a0d2:	6881      	ldr	r1, [r0, #8]
 800a0d4:	6903      	ldr	r3, [r0, #16]
                SetCapacity( newcapacity );
            }

            _array[_tail] = item;
////        _tail = (_tail + 1) % _array.Length;
            int tailNext = _tail + 1;
 800a0d6:	3301      	adds	r3, #1
 800a0d8:	469c      	mov	ip, r3
            return new Enumerator( this );
        }

        // Removes the object at the head of the queue and returns it. If the queue
        // is empty, this method simply returns null.
        /// <include file='doc\Queue.uex' path='docs/doc[@for="Queue.Dequeue"]/*' />
 800a0da:	6889      	ldr	r1, [r1, #8]
            }

            _array[_tail] = item;
////        _tail = (_tail + 1) % _array.Length;
            int tailNext = _tail + 1;
            _tail = (tailNext == _array.Length) ? 0 : tailNext;
 800a0dc:	428b      	cmp	r3, r1
 800a0de:	f8cd c008 	str.w	ip, [sp, #8]
 800a0e2:	d105      	bne.n	800a0f0 <Queue`1_Enqueue$17764+0x68>
 800a0e4:	e7ff      	b.n	800a0e6 <Queue`1_Enqueue$17764+0x5e>
 800a0e6:	2000      	movs	r0, #0
 800a0e8:	9007      	str	r0, [sp, #28]
 800a0ea:	a807      	add	r0, sp, #28
 800a0ec:	9001      	str	r0, [sp, #4]
 800a0ee:	e004      	b.n	800a0fa <Queue`1_Enqueue$17764+0x72>
 800a0f0:	a807      	add	r0, sp, #28
 800a0f2:	9902      	ldr	r1, [sp, #8]
 800a0f4:	9107      	str	r1, [sp, #28]
 800a0f6:	9001      	str	r0, [sp, #4]
 800a0f8:	e7ff      	b.n	800a0fa <Queue`1_Enqueue$17764+0x72>
 800a0fa:	9801      	ldr	r0, [sp, #4]
 800a0fc:	7801      	ldrb	r1, [r0, #0]
 800a0fe:	7842      	ldrb	r2, [r0, #1]
 800a100:	7883      	ldrb	r3, [r0, #2]
 800a102:	78c0      	ldrb	r0, [r0, #3]
 800a104:	ea43 2c00 	orr.w	ip, r3, r0, lsl #8
 800a108:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 800a10c:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800a110:	f8dd c018 	ldr.w	ip, [sp, #24]
 800a114:	f80c 1f10 	strb.w	r1, [ip, #16]!
 800a118:	f88c 0003 	strb.w	r0, [ip, #3]
 800a11c:	f88c 3002 	strb.w	r3, [ip, #2]
 800a120:	f88c 2001 	strb.w	r2, [ip, #1]
 800a124:	f8dc 0004 	ldr.w	r0, [ip, #4]
            _size++;
 800a128:	3001      	adds	r0, #1
 800a12a:	f8cc 0004 	str.w	r0, [ip, #4]
 800a12e:	f8dc 0008 	ldr.w	r0, [ip, #8]
            _version++;
 800a132:	3001      	adds	r0, #1
 800a134:	f8cc 0008 	str.w	r0, [ip, #8]
 800a138:	b008      	add	sp, #32
 800a13a:	bd80      	pop	{r7, pc}
            if(_size == _array.Length)
            {
                int newcapacity = (int)((long)_array.Length * (long)_GrowFactor / 100);
                if(newcapacity < _array.Length + _MinimumGrow)
                {
                    newcapacity = _array.Length + _MinimumGrow;
 800a13c:	9806      	ldr	r0, [sp, #24]
 800a13e:	6881      	ldr	r1, [r0, #8]
            return new Enumerator( this );
        }

        // Removes the object at the head of the queue and returns it. If the queue
        // is empty, this method simply returns null.
        /// <include file='doc\Queue.uex' path='docs/doc[@for="Queue.Dequeue"]/*' />
 800a140:	6889      	ldr	r1, [r1, #8]
            if(_size == _array.Length)
            {
                int newcapacity = (int)((long)_array.Length * (long)_GrowFactor / 100);
                if(newcapacity < _array.Length + _MinimumGrow)
                {
                    newcapacity = _array.Length + _MinimumGrow;
 800a142:	3104      	adds	r1, #4
                }
 800a144:	9103      	str	r1, [sp, #12]
 800a146:	e7ff      	b.n	800a148 <Queue`1_Enqueue$17764+0xc0>
 800a148:	9803      	ldr	r0, [sp, #12]
                SetCapacity( newcapacity );
 800a14a:	9906      	ldr	r1, [sp, #24]
 800a14c:	9000      	str	r0, [sp, #0]
 800a14e:	4608      	mov	r0, r1
 800a150:	9900      	ldr	r1, [sp, #0]
 800a152:	f007 fad5 	bl	8011700 <Queue`1_SetCapacity$17775>
            }
 800a156:	e7b5      	b.n	800a0c4 <Queue`1_Enqueue$17764+0x3c>

0800a158 <KernelList`1_FirstNode$17737>:
 800a158:	b083      	sub	sp, #12
 800a15a:	4601      	mov	r1, r0
            node.InsertBefore( m_tail );
        }

        public KernelNode< T > FirstNode()
        {
            KernelNode< T > node = m_head.Next;
 800a15c:	6882      	ldr	r2, [r0, #8]

            if(node != m_tail)
 800a15e:	68c0      	ldr	r0, [r0, #12]
 800a160:	6892      	ldr	r2, [r2, #8]

        public KernelNode< T > FirstNode()
        {
            KernelNode< T > node = m_head.Next;

            if(node != m_tail)
 800a162:	4282      	cmp	r2, r0
 800a164:	9202      	str	r2, [sp, #8]
 800a166:	9101      	str	r1, [sp, #4]
 800a168:	d003      	beq.n	800a172 <KernelList`1_FirstNode$17737+0x1a>
 800a16a:	e7ff      	b.n	800a16c <KernelList`1_FirstNode$17737+0x14>
            {
                return node;
 800a16c:	9802      	ldr	r0, [sp, #8]
 800a16e:	9000      	str	r0, [sp, #0]
 800a170:	e002      	b.n	800a178 <KernelList`1_FirstNode$17737+0x20>
 800a172:	2000      	movs	r0, #0
            }

            return null;
 800a174:	9000      	str	r0, [sp, #0]
 800a176:	e7ff      	b.n	800a178 <KernelList`1_FirstNode$17737+0x20>
        }
 800a178:	9800      	ldr	r0, [sp, #0]
 800a17a:	b003      	add	sp, #12
 800a17c:	4770      	bx	lr
 800a17e:	46c0      	nop			; (mov r8, r8)

0800a180 <TimerPool_FetchIdleWorker$5357>:
 800a180:	b580      	push	{r7, lr}
 800a182:	b088      	sub	sp, #32
 800a184:	4601      	mov	r1, r0
 800a186:	2200      	movs	r2, #0
 800a188:	f88d 201c 	strb.w	r2, [sp, #28]
 800a18c:	aa07      	add	r2, sp, #28

            private CallbackHandler FetchIdleWorker()
            {
                CallbackHandler worker;

                lock(this)
 800a18e:	9006      	str	r0, [sp, #24]
 800a190:	9105      	str	r1, [sp, #20]
 800a192:	4611      	mov	r1, r2
 800a194:	f7fc feec 	bl	8006f70 <Monitor_Enter$7710>
                {
                    if(m_idleHandlers.Count > 0)
 800a198:	9806      	ldr	r0, [sp, #24]
 800a19a:	6941      	ldr	r1, [r0, #20]
 800a19c:	6949      	ldr	r1, [r1, #20]
 800a19e:	2901      	cmp	r1, #1
 800a1a0:	db06      	blt.n	800a1b0 <TimerPool_FetchIdleWorker$5357+0x30>
 800a1a2:	e7ff      	b.n	800a1a4 <TimerPool_FetchIdleWorker$5357+0x24>
                    {
                        worker = m_idleHandlers.Dequeue();
 800a1a4:	9805      	ldr	r0, [sp, #20]
 800a1a6:	6940      	ldr	r0, [r0, #20]
 800a1a8:	f000 f88c 	bl	800a2c4 <Queue`1_Dequeue$17770>
                    }
 800a1ac:	9004      	str	r0, [sp, #16]
 800a1ae:	e002      	b.n	800a1b6 <TimerPool_FetchIdleWorker$5357+0x36>
 800a1b0:	2000      	movs	r0, #0
                    else
                    {
                        worker = null;
                    }
 800a1b2:	9004      	str	r0, [sp, #16]
 800a1b4:	e7ff      	b.n	800a1b6 <TimerPool_FetchIdleWorker$5357+0x36>
                }

                if(worker == null)
 800a1b6:	9804      	ldr	r0, [sp, #16]
 800a1b8:	f89d 101c 	ldrb.w	r1, [sp, #28]
                    }
                    else
                    {
                        worker = null;
                    }
                }
 800a1bc:	2900      	cmp	r1, #0
 800a1be:	9003      	str	r0, [sp, #12]
 800a1c0:	d004      	beq.n	800a1cc <TimerPool_FetchIdleWorker$5357+0x4c>
 800a1c2:	e7ff      	b.n	800a1c4 <TimerPool_FetchIdleWorker$5357+0x44>
 800a1c4:	9805      	ldr	r0, [sp, #20]
 800a1c6:	f7fc ff19 	bl	8006ffc <Monitor_Exit$3926>
 800a1ca:	e7ff      	b.n	800a1cc <TimerPool_FetchIdleWorker$5357+0x4c>

                if(worker == null)
 800a1cc:	9803      	ldr	r0, [sp, #12]
 800a1ce:	2800      	cmp	r0, #0
 800a1d0:	9002      	str	r0, [sp, #8]
 800a1d2:	d111      	bne.n	800a1f8 <TimerPool_FetchIdleWorker$5357+0x78>
 800a1d4:	e7ff      	b.n	800a1d6 <TimerPool_FetchIdleWorker$5357+0x56>
                {
                    worker = new CallbackHandler( this );
 800a1d6:	480a      	ldr	r0, [pc, #40]	; (800a200 <TimerPool_FetchIdleWorker$5357+0x80>)
 800a1d8:	490a      	ldr	r1, [pc, #40]	; (800a204 <TimerPool_FetchIdleWorker$5357+0x84>)
 800a1da:	4479      	add	r1, pc
 800a1dc:	4408      	add	r0, r1
 800a1de:	4a0a      	ldr	r2, [pc, #40]	; (800a208 <TimerPool_FetchIdleWorker$5357+0x88>)
 800a1e0:	4411      	add	r1, r2
 800a1e2:	f7f6 faed 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800a1e6:	4601      	mov	r1, r0
 800a1e8:	9a05      	ldr	r2, [sp, #20]
 800a1ea:	9101      	str	r1, [sp, #4]
 800a1ec:	4611      	mov	r1, r2
 800a1ee:	f000 f821 	bl	800a234 <CallbackHandler_.ctor$5700>
                }

                return worker;
            }
 800a1f2:	9801      	ldr	r0, [sp, #4]
                }

                if(worker == null)
                {
                    worker = new CallbackHandler( this );
                }
 800a1f4:	9002      	str	r0, [sp, #8]
 800a1f6:	e7ff      	b.n	800a1f8 <TimerPool_FetchIdleWorker$5357+0x78>

                return worker;
            }
 800a1f8:	9802      	ldr	r0, [sp, #8]
 800a1fa:	b008      	add	sp, #32
 800a1fc:	bd80      	pop	{r7, pc}
 800a1fe:	46c0      	nop			; (mov r8, r8)
 800a200:	ffffea38 	.word	0xffffea38
 800a204:	17ff75f6 	.word	0x17ff75f6
 800a208:	e801288c 	.word	0xe801288c

0800a20c <CallbackHandler_Process$5701>:
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b082      	sub	sp, #8
 800a210:	460a      	mov	r2, r1
 800a212:	4603      	mov	r3, r0
 800a214:	6141      	str	r1, [r0, #20]
                //

                internal void Process( KernelNode< TimerImpl > node )
                {
                    m_node = node;
                    m_event.Set();
 800a216:	6900      	ldr	r0, [r0, #16]
 800a218:	9301      	str	r3, [sp, #4]
 800a21a:	9200      	str	r2, [sp, #0]
 800a21c:	f7fa fa67 	bl	80046ee <EventWaitHandle_Set$3945>
 800a220:	b002      	add	sp, #8
 800a222:	bd80      	pop	{r7, pc}

0800a224 <Timer_PrepareForExecution$3921>:
 800a224:	b081      	sub	sp, #4
 800a226:	4601      	mov	r1, r0
 800a228:	2201      	movs	r2, #1
 800a22a:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 800a22e:	9100      	str	r1, [sp, #0]
 800a230:	b001      	add	sp, #4
 800a232:	4770      	bx	lr

0800a234 <CallbackHandler_.ctor$5700>:
 800a234:	b580      	push	{r7, lr}
 800a236:	b088      	sub	sp, #32
 800a238:	460a      	mov	r2, r1
 800a23a:	4603      	mov	r3, r0
 800a23c:	6081      	str	r1, [r0, #8]
    //

    //This class contains no data and does not need to be serializable
////[Serializable]
    [Microsoft.Zelig.Internals.WellKnownType( "System_Object" )]
    public class Object
 800a23e:	491b      	ldr	r1, [pc, #108]	; (800a2ac <CallbackHandler_.ctor$5700+0x78>)
 800a240:	f8df c06c 	ldr.w	ip, [pc, #108]	; 800a2b0 <CallbackHandler_.ctor$5700+0x7c>
 800a244:	44fc      	add	ip, pc
 800a246:	4461      	add	r1, ip
 800a248:	f8df e068 	ldr.w	lr, [pc, #104]	; 800a2b4 <CallbackHandler_.ctor$5700+0x80>
 800a24c:	44e6      	add	lr, ip
 800a24e:	9007      	str	r0, [sp, #28]
 800a250:	4608      	mov	r0, r1
 800a252:	9106      	str	r1, [sp, #24]
 800a254:	4671      	mov	r1, lr
 800a256:	9305      	str	r3, [sp, #20]
 800a258:	f8cd c010 	str.w	ip, [sp, #16]
 800a25c:	9203      	str	r2, [sp, #12]
 800a25e:	f7f6 faaf 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800a262:	4915      	ldr	r1, [pc, #84]	; (800a2b8 <CallbackHandler_.ctor$5700+0x84>)
 800a264:	9a04      	ldr	r2, [sp, #16]
 800a266:	440a      	add	r2, r1
 800a268:	9002      	str	r0, [sp, #8]
 800a26a:	9907      	ldr	r1, [sp, #28]
 800a26c:	f7f7 fc26 	bl	8001abc <MulticastDelegate_.ctor$4629>
 800a270:	4812      	ldr	r0, [pc, #72]	; (800a2bc <CallbackHandler_.ctor$5700+0x88>)
 800a272:	9904      	ldr	r1, [sp, #16]
 800a274:	4401      	add	r1, r0
 800a276:	9806      	ldr	r0, [sp, #24]
 800a278:	f7f6 faa2 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800a27c:	9001      	str	r0, [sp, #4]
 800a27e:	9902      	ldr	r1, [sp, #8]
 800a280:	f7f9 f9d0 	bl	8003624 <Thread_.ctor$3991>
 800a284:	9801      	ldr	r0, [sp, #4]
 800a286:	9907      	ldr	r1, [sp, #28]
 800a288:	60c8      	str	r0, [r1, #12]
    {
 800a28a:	4a0d      	ldr	r2, [pc, #52]	; (800a2c0 <CallbackHandler_.ctor$5700+0x8c>)
 800a28c:	9b04      	ldr	r3, [sp, #16]
 800a28e:	18d1      	adds	r1, r2, r3
 800a290:	9806      	ldr	r0, [sp, #24]
 800a292:	f7f6 fa95 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800a296:	9000      	str	r0, [sp, #0]
 800a298:	f7fc fb7f 	bl	800699a <AutoResetEvent_.ctor$7570>
 800a29c:	9800      	ldr	r0, [sp, #0]
 800a29e:	9907      	ldr	r1, [sp, #28]
 800a2a0:	6108      	str	r0, [r1, #16]
        // Creates a new instance of an Object.
////    [ReliabilityContract( Consistency.WillNotCorruptState, Cer.MayFail )]
 800a2a2:	68c8      	ldr	r0, [r1, #12]
 800a2a4:	f7f9 fa8e 	bl	80037c4 <Thread_Start$3993>
 800a2a8:	b008      	add	sp, #32
 800a2aa:	bd80      	pop	{r7, pc}
 800a2ac:	ffffea38 	.word	0xffffea38
 800a2b0:	17ff758c 	.word	0x17ff758c
 800a2b4:	e801102c 	.word	0xe801102c
 800a2b8:	e80099a9 	.word	0xe80099a9
 800a2bc:	e80110bc 	.word	0xe80110bc
 800a2c0:	e8011e4c 	.word	0xe8011e4c

0800a2c4 <Queue`1_Dequeue$17770>:
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b086      	sub	sp, #24
 800a2c8:	4601      	mov	r1, r0
 800a2ca:	6940      	ldr	r0, [r0, #20]
        // Removes the object at the head of the queue and returns it. If the queue
        // is empty, this method simply returns null.
        /// <include file='doc\Queue.uex' path='docs/doc[@for="Queue.Dequeue"]/*' />
        public T Dequeue()
        {
            if(_size == 0)
 800a2cc:	2800      	cmp	r0, #0
 800a2ce:	9104      	str	r1, [sp, #16]
 800a2d0:	d103      	bne.n	800a2da <Queue`1_Dequeue$17770+0x16>
 800a2d2:	e7ff      	b.n	800a2d4 <Queue`1_Dequeue$17770+0x10>
                ThrowHelper.ThrowInvalidOperationException( ExceptionResource.InvalidOperation_EmptyQueue );
 800a2d4:	f003 fd82 	bl	800dddc <ThrowHelper_ThrowInvalidOperationException$7378>
 800a2d8:	e7ff      	b.n	800a2da <Queue`1_Dequeue$17770+0x16>

            T removed = _array[_head];
 800a2da:	9804      	ldr	r0, [sp, #16]
 800a2dc:	6881      	ldr	r1, [r0, #8]
 800a2de:	68c2      	ldr	r2, [r0, #12]
 800a2e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a2e4:	68c8      	ldr	r0, [r1, #12]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	60ca      	str	r2, [r1, #12]
            _array[_head] = default( T );
////        _head = (_head + 1) % _array.Length;
            int headNext = _head + 1;
            _head = (headNext == _array.Length) ? 0 : headNext;
 800a2ea:	9904      	ldr	r1, [sp, #16]
 800a2ec:	688a      	ldr	r2, [r1, #8]
 800a2ee:	68cb      	ldr	r3, [r1, #12]
                ThrowHelper.ThrowInvalidOperationException( ExceptionResource.InvalidOperation_EmptyQueue );

            T removed = _array[_head];
            _array[_head] = default( T );
////        _head = (_head + 1) % _array.Length;
            int headNext = _head + 1;
 800a2f0:	3301      	adds	r3, #1
 800a2f2:	469c      	mov	ip, r3
            return new Enumerator( this );
        }

        // Removes the object at the head of the queue and returns it. If the queue
        // is empty, this method simply returns null.
        /// <include file='doc\Queue.uex' path='docs/doc[@for="Queue.Dequeue"]/*' />
 800a2f4:	6892      	ldr	r2, [r2, #8]

            T removed = _array[_head];
            _array[_head] = default( T );
////        _head = (_head + 1) % _array.Length;
            int headNext = _head + 1;
            _head = (headNext == _array.Length) ? 0 : headNext;
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	9003      	str	r0, [sp, #12]
 800a2fa:	f8cd c008 	str.w	ip, [sp, #8]
 800a2fe:	d105      	bne.n	800a30c <Queue`1_Dequeue$17770+0x48>
 800a300:	e7ff      	b.n	800a302 <Queue`1_Dequeue$17770+0x3e>
 800a302:	2000      	movs	r0, #0
 800a304:	9005      	str	r0, [sp, #20]
 800a306:	a805      	add	r0, sp, #20
 800a308:	9001      	str	r0, [sp, #4]
 800a30a:	e004      	b.n	800a316 <Queue`1_Dequeue$17770+0x52>
 800a30c:	a805      	add	r0, sp, #20
 800a30e:	9902      	ldr	r1, [sp, #8]
 800a310:	9105      	str	r1, [sp, #20]
 800a312:	9001      	str	r0, [sp, #4]
 800a314:	e7ff      	b.n	800a316 <Queue`1_Dequeue$17770+0x52>
 800a316:	9801      	ldr	r0, [sp, #4]
 800a318:	7801      	ldrb	r1, [r0, #0]
 800a31a:	7842      	ldrb	r2, [r0, #1]
 800a31c:	7883      	ldrb	r3, [r0, #2]
 800a31e:	78c0      	ldrb	r0, [r0, #3]
 800a320:	ea43 2c00 	orr.w	ip, r3, r0, lsl #8
 800a324:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 800a328:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800a32c:	f8dd c010 	ldr.w	ip, [sp, #16]
 800a330:	f80c 1f0c 	strb.w	r1, [ip, #12]!
 800a334:	f88c 0003 	strb.w	r0, [ip, #3]
 800a338:	f88c 3002 	strb.w	r3, [ip, #2]
 800a33c:	f88c 2001 	strb.w	r2, [ip, #1]
 800a340:	f8dc 0008 	ldr.w	r0, [ip, #8]
            _size--;
 800a344:	3801      	subs	r0, #1
 800a346:	f8cc 0008 	str.w	r0, [ip, #8]
 800a34a:	f8dc 000c 	ldr.w	r0, [ip, #12]
            _version++;
 800a34e:	3001      	adds	r0, #1
 800a350:	f8cc 000c 	str.w	r0, [ip, #12]
 800a354:	9803      	ldr	r0, [sp, #12]
 800a356:	b006      	add	sp, #24
 800a358:	bd80      	pop	{r7, pc}

0800a35a <EventWaitableObject_.ctor$5359>:
 800a35a:	b580      	push	{r7, lr}
 800a35c:	b084      	sub	sp, #16
 800a35e:	460a      	mov	r2, r1
 800a360:	4603      	mov	r3, r0
                // State
                //

                TimerPool               m_owner;
                Thread                  m_thread;
                AutoResetEvent          m_event;
 800a362:	9003      	str	r0, [sp, #12]
 800a364:	9102      	str	r1, [sp, #8]
 800a366:	9301      	str	r3, [sp, #4]
 800a368:	9200      	str	r2, [sp, #0]
 800a36a:	f7fe fffd 	bl	8009368 <WaitableObject_.ctor$4982>
 800a36e:	9802      	ldr	r0, [sp, #8]
 800a370:	9903      	ldr	r1, [sp, #12]
 800a372:	6108      	str	r0, [r1, #16]
 800a374:	b004      	add	sp, #16
 800a376:	bd80      	pop	{r7, pc}

0800a378 <EventWaitableObject_Acquire$5360>:
 800a378:	b510      	push	{r4, lr}
 800a37a:	b090      	sub	sp, #64	; 0x40
 800a37c:	a90c      	add	r1, sp, #48	; 0x30
 800a37e:	f04f 0c00 	mov.w	ip, #0
 800a382:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 800a386:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
 800a38a:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 800a38e:	f8df c154 	ldr.w	ip, [pc, #340]	; 800a4e4 <EventWaitableObject_Acquire$5360+0x16c>
 800a392:	4c55      	ldr	r4, [pc, #340]	; (800a4e8 <EventWaitableObject_Acquire$5360+0x170>)
 800a394:	447c      	add	r4, pc
 800a396:	44a4      	add	ip, r4
 800a398:	f8dc c0f8 	ldr.w	ip, [ip, #248]	; 0xf8
 800a39c:	f1bc 0f00 	cmp.w	ip, #0
 800a3a0:	4664      	mov	r4, ip
 800a3a2:	bf18      	it	ne
 800a3a4:	2401      	movne	r4, #1
                            }

                            return true;
                        }
                    }
                }
 800a3a6:	2c00      	cmp	r4, #0
 800a3a8:	920b      	str	r2, [sp, #44]	; 0x2c
 800a3aa:	930a      	str	r3, [sp, #40]	; 0x28
 800a3ac:	9009      	str	r0, [sp, #36]	; 0x24
 800a3ae:	9108      	str	r1, [sp, #32]
 800a3b0:	f8cd e01c 	str.w	lr, [sp, #28]
 800a3b4:	f8cd c018 	str.w	ip, [sp, #24]
 800a3b8:	d107      	bne.n	800a3ca <EventWaitableObject_Acquire$5360+0x52>
 800a3ba:	e7ff      	b.n	800a3bc <EventWaitableObject_Acquire$5360+0x44>
 800a3bc:	484b      	ldr	r0, [pc, #300]	; (800a4ec <EventWaitableObject_Acquire$5360+0x174>)
 800a3be:	494c      	ldr	r1, [pc, #304]	; (800a4f0 <EventWaitableObject_Acquire$5360+0x178>)
 800a3c0:	4479      	add	r1, pc
 800a3c2:	5840      	ldr	r0, [r0, r1]

                using(Synchronization.WaitingRecord.Holder holder = Synchronization.WaitingRecord.Holder.Get( thisThread, this, timeout ))
 800a3c4:	f7f5 ff9e 	bl	8000304 <BugCheck_Raise$4648>
                {
 800a3c8:	e7ff      	b.n	800a3ca <EventWaitableObject_Acquire$5360+0x52>
                BugCheck.Assert( thisThread != null, BugCheck.StopCode.NoCurrentThread );

                //
                // Let's try to shortcut the acquisition of the event.
                //
                if(m_owner.m_state)
 800a3ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a3cc:	6901      	ldr	r1, [r0, #16]
 800a3ce:	7b09      	ldrb	r1, [r1, #12]
 800a3d0:	2900      	cmp	r1, #0
 800a3d2:	d016      	beq.n	800a402 <EventWaitableObject_Acquire$5360+0x8a>
 800a3d4:	e7ff      	b.n	800a3d6 <EventWaitableObject_Acquire$5360+0x5e>
 800a3d6:	2000      	movs	r0, #0
 800a3d8:	900f      	str	r0, [sp, #60]	; 0x3c
                            if(m_owner.m_mode == System.Threading.EventResetMode.AutoReset)
                            {
                                m_owner.m_state = false;
                            }

                            return true;
 800a3da:	9005      	str	r0, [sp, #20]
 800a3dc:	f7fa f916 	bl	800460c <ProcessorARMv7M_DisableInterrupts$3259>
 800a3e0:	9905      	ldr	r1, [sp, #20]
 800a3e2:	910f      	str	r1, [sp, #60]	; 0x3c
 800a3e4:	900f      	str	r0, [sp, #60]	; 0x3c
 800a3e6:	0e02      	lsrs	r2, r0, #24
 800a3e8:	9b08      	ldr	r3, [sp, #32]
 800a3ea:	70da      	strb	r2, [r3, #3]
 800a3ec:	0c02      	lsrs	r2, r0, #16
 800a3ee:	709a      	strb	r2, [r3, #2]
 800a3f0:	0a02      	lsrs	r2, r0, #8
 800a3f2:	705a      	strb	r2, [r3, #1]
 800a3f4:	7018      	strb	r0, [r3, #0]
                //
                if(m_owner.m_state)
                {
                    using(SmartHandles.InterruptState.Disable())
                    {
                        if(m_owner.m_state)
 800a3f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a3f8:	6902      	ldr	r2, [r0, #16]
 800a3fa:	7b12      	ldrb	r2, [r2, #12]
 800a3fc:	2a00      	cmp	r2, #0
 800a3fe:	d15b      	bne.n	800a4b8 <EventWaitableObject_Acquire$5360+0x140>
 800a400:	e060      	b.n	800a4c4 <EventWaitableObject_Acquire$5360+0x14c>
                            return true;
                        }
                    }
                }

                using(Synchronization.WaitingRecord.Holder holder = Synchronization.WaitingRecord.Holder.Get( thisThread, this, timeout ))
 800a402:	9806      	ldr	r0, [sp, #24]
 800a404:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a406:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a408:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a40a:	f7ff f89b 	bl	8009544 <Holder_Get$5587>
                {
 800a40e:	9004      	str	r0, [sp, #16]
 800a410:	e7ff      	b.n	800a412 <EventWaitableObject_Acquire$5360+0x9a>
 800a412:	2000      	movs	r0, #0
 800a414:	900e      	str	r0, [sp, #56]	; 0x38
                            if(m_owner.m_mode == System.Threading.EventResetMode.AutoReset)
                            {
                                m_owner.m_state = false;
                            }

                            return true;
 800a416:	9003      	str	r0, [sp, #12]
 800a418:	f7fa f8f8 	bl	800460c <ProcessorARMv7M_DisableInterrupts$3259>
 800a41c:	9903      	ldr	r1, [sp, #12]
 800a41e:	910e      	str	r1, [sp, #56]	; 0x38
 800a420:	900e      	str	r0, [sp, #56]	; 0x38
 800a422:	0e02      	lsrs	r2, r0, #24
 800a424:	9b07      	ldr	r3, [sp, #28]
 800a426:	70da      	strb	r2, [r3, #3]
 800a428:	0c02      	lsrs	r2, r0, #16
 800a42a:	709a      	strb	r2, [r3, #2]
 800a42c:	0a02      	lsrs	r2, r0, #8
 800a42e:	705a      	strb	r2, [r3, #1]
 800a430:	7018      	strb	r0, [r3, #0]
                {
                    while(true)
                    {
                        using(SmartHandles.InterruptState.Disable())
                        {
                            if(holder.ShouldTryToAcquire)
 800a432:	9804      	ldr	r0, [sp, #16]
 800a434:	f7ff f89c 	bl	8009570 <Holder_get_ShouldTryToAcquire$5588>
 800a438:	f010 0fff 	tst.w	r0, #255	; 0xff
 800a43c:	d006      	beq.n	800a44c <EventWaitableObject_Acquire$5360+0xd4>
 800a43e:	e7ff      	b.n	800a440 <EventWaitableObject_Acquire$5360+0xc8>
                            {
                                if(m_owner.m_state)
 800a440:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a442:	6901      	ldr	r1, [r0, #16]
 800a444:	7b09      	ldrb	r1, [r1, #12]
 800a446:	2900      	cmp	r1, #0
 800a448:	d11e      	bne.n	800a488 <EventWaitableObject_Acquire$5360+0x110>
 800a44a:	e023      	b.n	800a494 <EventWaitableObject_Acquire$5360+0x11c>
            // Helper Methods
            //

            public override bool Acquire( SchedulerTime timeout )
            {
                ThreadImpl thisThread = ThreadImpl.CurrentThread;
 800a44c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a44e:	f7fa f8ff 	bl	8004650 <ProcessorARMv7M_DisableInterruptsWithPriorityLevelHigherOrEqualTo$3266>
                                    return true;
                                }
                            }
                        }

                        if(holder.RequestProcessed)
 800a452:	9804      	ldr	r0, [sp, #16]
 800a454:	f7ff f8a5 	bl	80095a2 <Holder_get_RequestProcessed$5589>
 800a458:	f010 0fff 	tst.w	r0, #255	; 0xff
 800a45c:	d00a      	beq.n	800a474 <EventWaitableObject_Acquire$5360+0xfc>
 800a45e:	e7ff      	b.n	800a460 <EventWaitableObject_Acquire$5360+0xe8>
                        {
                            return holder.RequestFulfilled;
 800a460:	9804      	ldr	r0, [sp, #16]
 800a462:	f7ff f8dd 	bl	8009620 <Holder_get_RequestFulfilled$5590>
                    }
                }

                using(Synchronization.WaitingRecord.Holder holder = Synchronization.WaitingRecord.Holder.Get( thisThread, this, timeout ))
                {
                    while(true)
 800a466:	9904      	ldr	r1, [sp, #16]
 800a468:	2900      	cmp	r1, #0
 800a46a:	4602      	mov	r2, r0
 800a46c:	9002      	str	r0, [sp, #8]
 800a46e:	9201      	str	r2, [sp, #4]
 800a470:	d101      	bne.n	800a476 <EventWaitableObject_Acquire$5360+0xfe>
 800a472:	e006      	b.n	800a482 <EventWaitableObject_Acquire$5360+0x10a>

                        if(holder.RequestProcessed)
                        {
                            return holder.RequestFulfilled;
                        }
                    }
 800a474:	e7cd      	b.n	800a412 <EventWaitableObject_Acquire$5360+0x9a>
                    }
                }

                using(Synchronization.WaitingRecord.Holder holder = Synchronization.WaitingRecord.Holder.Get( thisThread, this, timeout ))
                {
                    while(true)
 800a476:	9804      	ldr	r0, [sp, #16]
 800a478:	f7f9 fa76 	bl	8003968 <Holder_Dispose$5586>
 800a47c:	9802      	ldr	r0, [sp, #8]
 800a47e:	9001      	str	r0, [sp, #4]
 800a480:	e7ff      	b.n	800a482 <EventWaitableObject_Acquire$5360+0x10a>
 800a482:	9801      	ldr	r0, [sp, #4]
 800a484:	b010      	add	sp, #64	; 0x40
 800a486:	bd10      	pop	{r4, pc}
                        {
                            if(holder.ShouldTryToAcquire)
                            {
                                if(m_owner.m_state)
                                {
                                    if(m_owner.m_mode == System.Threading.EventResetMode.AutoReset)
 800a488:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a48a:	6901      	ldr	r1, [r0, #16]
 800a48c:	6909      	ldr	r1, [r1, #16]
 800a48e:	2900      	cmp	r1, #0
 800a490:	d001      	beq.n	800a496 <EventWaitableObject_Acquire$5360+0x11e>
 800a492:	e005      	b.n	800a4a0 <EventWaitableObject_Acquire$5360+0x128>
                                        m_owner.m_state = false;
                                    }

                                    return true;
                                }
                            }
 800a494:	e7da      	b.n	800a44c <EventWaitableObject_Acquire$5360+0xd4>
                            {
                                if(m_owner.m_state)
                                {
                                    if(m_owner.m_mode == System.Threading.EventResetMode.AutoReset)
                                    {
                                        m_owner.m_state = false;
 800a496:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a498:	6901      	ldr	r1, [r0, #16]
 800a49a:	2200      	movs	r2, #0
 800a49c:	730a      	strb	r2, [r1, #12]
                                    }
 800a49e:	e7ff      	b.n	800a4a0 <EventWaitableObject_Acquire$5360+0x128>
 800a4a0:	2001      	movs	r0, #1
                    }
                }

                using(Synchronization.WaitingRecord.Holder holder = Synchronization.WaitingRecord.Holder.Get( thisThread, this, timeout ))
                {
                    while(true)
 800a4a2:	9904      	ldr	r1, [sp, #16]
 800a4a4:	2900      	cmp	r1, #0
 800a4a6:	9001      	str	r0, [sp, #4]
 800a4a8:	d0eb      	beq.n	800a482 <EventWaitableObject_Acquire$5360+0x10a>
 800a4aa:	e7ff      	b.n	800a4ac <EventWaitableObject_Acquire$5360+0x134>
 800a4ac:	9804      	ldr	r0, [sp, #16]
 800a4ae:	f7f9 fa5b 	bl	8003968 <Holder_Dispose$5586>
 800a4b2:	2001      	movs	r0, #1
 800a4b4:	9001      	str	r0, [sp, #4]
 800a4b6:	e7e4      	b.n	800a482 <EventWaitableObject_Acquire$5360+0x10a>
                {
                    using(SmartHandles.InterruptState.Disable())
                    {
                        if(m_owner.m_state)
                        {
                            if(m_owner.m_mode == System.Threading.EventResetMode.AutoReset)
 800a4b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a4ba:	6901      	ldr	r1, [r0, #16]
 800a4bc:	6909      	ldr	r1, [r1, #16]
 800a4be:	2900      	cmp	r1, #0
 800a4c0:	d004      	beq.n	800a4cc <EventWaitableObject_Acquire$5360+0x154>
 800a4c2:	e008      	b.n	800a4d6 <EventWaitableObject_Acquire$5360+0x15e>
            // Helper Methods
            //

            public override bool Acquire( SchedulerTime timeout )
            {
                ThreadImpl thisThread = ThreadImpl.CurrentThread;
 800a4c4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a4c6:	f7fa f8c3 	bl	8004650 <ProcessorARMv7M_DisableInterruptsWithPriorityLevelHigherOrEqualTo$3266>
                            }

                            return true;
                        }
                    }
                }
 800a4ca:	e79a      	b.n	800a402 <EventWaitableObject_Acquire$5360+0x8a>
                    {
                        if(m_owner.m_state)
                        {
                            if(m_owner.m_mode == System.Threading.EventResetMode.AutoReset)
                            {
                                m_owner.m_state = false;
 800a4cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a4ce:	6901      	ldr	r1, [r0, #16]
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	730a      	strb	r2, [r1, #12]
                            }
 800a4d4:	e7ff      	b.n	800a4d6 <EventWaitableObject_Acquire$5360+0x15e>
            // Helper Methods
            //

            public override bool Acquire( SchedulerTime timeout )
            {
                ThreadImpl thisThread = ThreadImpl.CurrentThread;
 800a4d6:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a4d8:	f7fa f8ba 	bl	8004650 <ProcessorARMv7M_DisableInterruptsWithPriorityLevelHigherOrEqualTo$3266>
 800a4dc:	2001      	movs	r0, #1
                                m_owner.m_state = false;
                            }

                            return true;
                        }
                    }
 800a4de:	9001      	str	r0, [sp, #4]
 800a4e0:	e7cf      	b.n	800a482 <EventWaitableObject_Acquire$5360+0x10a>
 800a4e2:	46c0      	nop			; (mov r8, r8)
 800a4e4:	fffffe3c 	.word	0xfffffe3c
 800a4e8:	17ff743c 	.word	0x17ff743c
 800a4ec:	e8025320 	.word	0xe8025320
 800a4f0:	17ff7410 	.word	0x17ff7410

0800a4f4 <EventWaitableObject_Release$5361>:
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b088      	sub	sp, #32
 800a4f8:	a906      	add	r1, sp, #24
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	9206      	str	r2, [sp, #24]
            Device.Instance.ProcessLog(format, p1, p2);
        }

        public static void Log(string format, int p1, int p2, int p3)
        {
            Device.Instance.ProcessLog(format, p1, p2, p3);
 800a4fe:	9005      	str	r0, [sp, #20]
 800a500:	9104      	str	r1, [sp, #16]
 800a502:	e7ff      	b.n	800a504 <EventWaitableObject_Release$5361+0x10>
 800a504:	2000      	movs	r0, #0
 800a506:	9007      	str	r0, [sp, #28]
        //
        // Helper Methods
        //

        [Inline]
        public static void Assert( bool     condition ,
 800a508:	9003      	str	r0, [sp, #12]
 800a50a:	f7fa f87f 	bl	800460c <ProcessorARMv7M_DisableInterrupts$3259>
 800a50e:	9903      	ldr	r1, [sp, #12]
 800a510:	9107      	str	r1, [sp, #28]
 800a512:	9007      	str	r0, [sp, #28]
 800a514:	0e02      	lsrs	r2, r0, #24
 800a516:	9b04      	ldr	r3, [sp, #16]
 800a518:	70da      	strb	r2, [r3, #3]
 800a51a:	0c02      	lsrs	r2, r0, #16
 800a51c:	709a      	strb	r2, [r3, #2]
 800a51e:	0a02      	lsrs	r2, r0, #8
 800a520:	705a      	strb	r2, [r3, #1]
 800a522:	7018      	strb	r0, [r3, #0]

        public static void Log(string format, int p1, int p2, int p3, int p4)
        {
            Device.Instance.ProcessLog(format, p1, p2, p3, p4);
        }

 800a524:	9805      	ldr	r0, [sp, #20]
 800a526:	6902      	ldr	r2, [r0, #16]
 800a528:	7b12      	ldrb	r2, [r2, #12]
 800a52a:	2a00      	cmp	r2, #0
 800a52c:	d104      	bne.n	800a538 <EventWaitableObject_Release$5361+0x44>
 800a52e:	e7ff      	b.n	800a530 <EventWaitableObject_Release$5361+0x3c>
            NotAMemoryReference     ,
            HeapCorruptionDetected  ,
            
            IllegalMode             ,
            IllegalConfiguration    ,
            FailedBootstrap         ,
 800a530:	9806      	ldr	r0, [sp, #24]
 800a532:	f7fa f88d 	bl	8004650 <ProcessorARMv7M_DisableInterruptsWithPriorityLevelHigherOrEqualTo$3266>
        {
            Assert( Processor.Instance.AreInterruptsDisabled() == false, BugCheck.StopCode.InterruptsNotEnabled );
        }

        //--//

 800a536:	e029      	b.n	800a58c <EventWaitableObject_Release$5361+0x98>

        public static void Log(string format, int p1, int p2, int p3, int p4, int p5)
        {
            Device.Instance.ProcessLog(format, p1, p2, p3, p4, p5);
        }

 800a538:	9805      	ldr	r0, [sp, #20]
 800a53a:	68c0      	ldr	r0, [r0, #12]
 800a53c:	f7f9 ff6c 	bl	8004418 <KernelList`1_FirstTarget$17421>
 800a540:	4601      	mov	r1, r0
        //--//
 800a542:	2800      	cmp	r0, #0
 800a544:	9102      	str	r1, [sp, #8]
 800a546:	d104      	bne.n	800a552 <EventWaitableObject_Release$5361+0x5e>
 800a548:	e7ff      	b.n	800a54a <EventWaitableObject_Release$5361+0x56>
            NotAMemoryReference     ,
            HeapCorruptionDetected  ,
            
            IllegalMode             ,
            IllegalConfiguration    ,
            FailedBootstrap         ,
 800a54a:	9806      	ldr	r0, [sp, #24]
 800a54c:	f7fa f880 	bl	8004650 <ProcessorARMv7M_DisableInterruptsWithPriorityLevelHigherOrEqualTo$3266>
        {
            Assert( Processor.Instance.AreInterruptsDisabled() == false, BugCheck.StopCode.InterruptsNotEnabled );
        }

        //--//

 800a550:	e01c      	b.n	800a58c <EventWaitableObject_Release$5361+0x98>
 800a552:	9802      	ldr	r0, [sp, #8]
 800a554:	6900      	ldr	r0, [r0, #16]
 800a556:	490e      	ldr	r1, [pc, #56]	; (800a590 <EventWaitableObject_Release$5361+0x9c>)
 800a558:	4a0e      	ldr	r2, [pc, #56]	; (800a594 <EventWaitableObject_Release$5361+0xa0>)
 800a55a:	447a      	add	r2, pc
        public static void AssertInterruptsOff()
        {
            Assert( Processor.Instance.AreInterruptsDisabled() == true, BugCheck.StopCode.InterruptsNotDisabled );
        }

        public static void AssertInterruptsOn()
 800a55c:	5c89      	ldrb	r1, [r1, r2]
 800a55e:	9a02      	ldr	r2, [sp, #8]
 800a560:	9001      	str	r0, [sp, #4]
 800a562:	4610      	mov	r0, r2
 800a564:	f7f9 ffe2 	bl	800452c <WaitingRecord_set_RequestFulfilled$5011>
        {
            Assert( Processor.Instance.AreInterruptsDisabled() == false, BugCheck.StopCode.InterruptsNotEnabled );
 800a568:	9805      	ldr	r0, [sp, #20]
 800a56a:	6901      	ldr	r1, [r0, #16]
 800a56c:	6909      	ldr	r1, [r1, #16]
 800a56e:	2900      	cmp	r1, #0
 800a570:	d105      	bne.n	800a57e <EventWaitableObject_Release$5361+0x8a>
 800a572:	e7ff      	b.n	800a574 <EventWaitableObject_Release$5361+0x80>
        }

 800a574:	9805      	ldr	r0, [sp, #20]
 800a576:	6901      	ldr	r1, [r0, #16]
 800a578:	2200      	movs	r2, #0
 800a57a:	730a      	strb	r2, [r1, #12]
        //--//
 800a57c:	e7ff      	b.n	800a57e <EventWaitableObject_Release$5361+0x8a>
            NotAMemoryReference     ,
            HeapCorruptionDetected  ,
            
            IllegalMode             ,
            IllegalConfiguration    ,
            FailedBootstrap         ,
 800a57e:	9806      	ldr	r0, [sp, #24]
 800a580:	f7fa f866 	bl	8004650 <ProcessorARMv7M_DisableInterruptsWithPriorityLevelHigherOrEqualTo$3266>
        }

        //--//

        static readonly System.Text.StringBuilder s_sb = new System.Text.StringBuilder();

 800a584:	9801      	ldr	r0, [sp, #4]
 800a586:	f7f9 ffbd 	bl	8004504 <Thread_Wakeup$4011>
        [NoInline]
 800a58a:	e7bb      	b.n	800a504 <EventWaitableObject_Release$5361+0x10>
 800a58c:	b008      	add	sp, #32
 800a58e:	bd80      	pop	{r7, pc}
 800a590:	e8025324 	.word	0xe8025324
 800a594:	17ff7276 	.word	0x17ff7276

0800a598 <Tracker_.ctor$5416>:
 800a598:	b510      	push	{r4, lr}
 800a59a:	b086      	sub	sp, #24
 800a59c:	460a      	mov	r2, r1
 800a59e:	4603      	mov	r3, r0
        }

        public bool Set()
        {
            m_state = true;

 800a5a0:	f8df c034 	ldr.w	ip, [pc, #52]	; 800a5d8 <Tracker_.ctor$5416+0x40>
 800a5a4:	f8df e034 	ldr.w	lr, [pc, #52]	; 800a5dc <Tracker_.ctor$5416+0x44>
 800a5a8:	44fe      	add	lr, pc
 800a5aa:	44f4      	add	ip, lr
 800a5ac:	4c0c      	ldr	r4, [pc, #48]	; (800a5e0 <Tracker_.ctor$5416+0x48>)
 800a5ae:	44a6      	add	lr, r4
 800a5b0:	9005      	str	r0, [sp, #20]
 800a5b2:	4660      	mov	r0, ip
 800a5b4:	9104      	str	r1, [sp, #16]
 800a5b6:	4671      	mov	r1, lr
 800a5b8:	9203      	str	r2, [sp, #12]
 800a5ba:	9302      	str	r3, [sp, #8]
 800a5bc:	f7f6 f900 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800a5c0:	9001      	str	r0, [sp, #4]
 800a5c2:	9905      	ldr	r1, [sp, #20]
 800a5c4:	f000 f80e 	bl	800a5e4 <KernelNode`1_.ctor$17784>
 800a5c8:	9801      	ldr	r0, [sp, #4]
 800a5ca:	9905      	ldr	r1, [sp, #20]
 800a5cc:	6088      	str	r0, [r1, #8]
 800a5ce:	9a04      	ldr	r2, [sp, #16]
 800a5d0:	60ca      	str	r2, [r1, #12]
 800a5d2:	b006      	add	sp, #24
 800a5d4:	bd10      	pop	{r4, pc}
 800a5d6:	46c0      	nop			; (mov r8, r8)
 800a5d8:	ffffea38 	.word	0xffffea38
 800a5dc:	17ff7228 	.word	0x17ff7228
 800a5e0:	e801291c 	.word	0xe801291c

0800a5e4 <KernelNode`1_.ctor$17784>:
 800a5e4:	b082      	sub	sp, #8
 800a5e6:	460a      	mov	r2, r1
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	6101      	str	r1, [r0, #16]
 800a5ec:	9301      	str	r3, [sp, #4]
 800a5ee:	9200      	str	r2, [sp, #0]
 800a5f0:	b002      	add	sp, #8
 800a5f2:	4770      	bx	lr

0800a5f4 <KernelList`1_InsertAtTail$17528>:
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b084      	sub	sp, #16
 800a5f8:	460a      	mov	r2, r1
 800a5fa:	4603      	mov	r3, r0
        // Helper Methods
        //

        public void InsertAtTail( KernelNode< T > node )
        {
            node.InsertBefore( m_tail );
 800a5fc:	68c0      	ldr	r0, [r0, #12]
 800a5fe:	9003      	str	r0, [sp, #12]
 800a600:	4608      	mov	r0, r1
 800a602:	9903      	ldr	r1, [sp, #12]
 800a604:	9202      	str	r2, [sp, #8]
 800a606:	9301      	str	r3, [sp, #4]
 800a608:	f007 f863 	bl	80116d2 <KernelNode`1_InsertBefore$17785>
 800a60c:	b004      	add	sp, #16
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <KernelList`1_get_StartOfForwardWalk$17534>:
 800a610:	b081      	sub	sp, #4
 800a612:	4601      	mov	r1, r0

        public KernelNode< T > StartOfForwardWalk
        {
            get
            {
                return m_head.Next;
 800a614:	6880      	ldr	r0, [r0, #8]
 800a616:	6880      	ldr	r0, [r0, #8]
 800a618:	9100      	str	r1, [sp, #0]
 800a61a:	b001      	add	sp, #4
 800a61c:	4770      	bx	lr

0800a61e <KernelNode`1_get_IsValidForForwardMove$17793>:
 800a61e:	b081      	sub	sp, #4
 800a620:	4601      	mov	r1, r0

        public bool IsValidForForwardMove
        {
            get
            {
                return m_next != null;
 800a622:	6880      	ldr	r0, [r0, #8]
 800a624:	2800      	cmp	r0, #0
 800a626:	bf18      	it	ne
 800a628:	2001      	movne	r0, #1
 800a62a:	9100      	str	r1, [sp, #0]
 800a62c:	b001      	add	sp, #4
 800a62e:	4770      	bx	lr

0800a630 <EmptyManager_InitializeGarbageCollectionManager$5545>:
 800a630:	4770      	bx	lr

0800a632 <EmptyManager_NotifyNewObject$5546>:
 800a632:	4770      	bx	lr

0800a634 <EmptyManager_Collect$5548>:
 800a634:	2000      	movs	r0, #0
 800a636:	4770      	bx	lr

0800a638 <EmptyManager_ThrowOutOfMemory$5550>:
 800a638:	4770      	bx	lr
 800a63a:	46c0      	nop			; (mov r8, r8)

0800a63c <Context_SwitchTo$5616>:
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b086      	sub	sp, #24
 800a640:	4601      	mov	r1, r0
 800a642:	4a16      	ldr	r2, [pc, #88]	; (800a69c <Context_SwitchTo$5616+0x60>)
 800a644:	4b16      	ldr	r3, [pc, #88]	; (800a6a0 <Context_SwitchTo$5616+0x64>)
 800a646:	447b      	add	r3, pc
 800a648:	58d2      	ldr	r2, [r2, r3]
                    if(node != null)
                    {
                        wr = node.Target;

                        s_recycledCount--;
                    }
 800a64a:	9002      	str	r0, [sp, #8]
 800a64c:	4610      	mov	r0, r2
 800a64e:	9301      	str	r3, [sp, #4]
 800a650:	9100      	str	r1, [sp, #0]
 800a652:	f7fb fa9d 	bl	8005b90 <ProcessorARMv7M_SetExcReturn$3279>
 800a656:	9802      	ldr	r0, [sp, #8]
 800a658:	6881      	ldr	r1, [r0, #8]
 800a65a:	9103      	str	r1, [sp, #12]
 800a65c:	2100      	movs	r1, #0
 800a65e:	9104      	str	r1, [sp, #16]
        WaitableObject                     m_target;
        SchedulerTime                      m_timeout;
        bool                               m_processed;
        bool                               m_fulfilled;

        //
 800a660:	9a03      	ldr	r2, [sp, #12]
                }
            }

            public bool RequestProcessed
            {
                get
 800a662:	3228      	adds	r2, #40	; 0x28
 800a664:	9104      	str	r1, [sp, #16]
 800a666:	a904      	add	r1, sp, #16
 800a668:	f1a1 0008 	sub.w	r0, r1, #8
 800a66c:	4611      	mov	r1, r2
 800a66e:	f7f6 f925 	bl	80008bc <UIntPtr_.ctor$2864>
 800a672:	9804      	ldr	r0, [sp, #16]
 800a674:	9005      	str	r0, [sp, #20]
 800a676:	a805      	add	r0, sp, #20
                    }
                }
            }

            if(wr == null)
            {
 800a678:	3808      	subs	r0, #8
 800a67a:	f7f8 ff7d 	bl	8003578 <UIntPtr_ToUInt32$2870>
 800a67e:	f012 fbd5 	bl	801ce2c <CMSIS_STUB_SCB__set_PSP>
 800a682:	4808      	ldr	r0, [pc, #32]	; (800a6a4 <Context_SwitchTo$5616+0x68>)
                wr = new WaitingRecord();
            }

            wr.m_source  = source;
 800a684:	9901      	ldr	r1, [sp, #4]
 800a686:	5c40      	ldrb	r0, [r0, r1]
 800a688:	f7fb fa12 	bl	8005ab0 <ProcessorARMv7M_RaiseSupervisorCall$3241>
 800a68c:	4806      	ldr	r0, [pc, #24]	; (800a6a8 <Context_SwitchTo$5616+0x6c>)
 800a68e:	9901      	ldr	r1, [sp, #4]
 800a690:	5840      	ldr	r0, [r0, r1]

                        m_thread         = null;
                        m_waitableObject = null;
                        m_wr             = null;
                    }
                }
 800a692:	f7f5 fe37 	bl	8000304 <BugCheck_Raise$4648>
 800a696:	b006      	add	sp, #24
 800a698:	bd80      	pop	{r7, pc}
 800a69a:	46c0      	nop			; (mov r8, r8)
 800a69c:	e8025328 	.word	0xe8025328
 800a6a0:	17ff718a 	.word	0x17ff718a
 800a6a4:	e802532c 	.word	0xe802532c
 800a6a8:	e8025330 	.word	0xe8025330

0800a6ac <Context_Populate$5617>:

                RT.BugCheck.Assert( false, BugCheck.StopCode.IllegalMode );
            }
            
            public override void Populate( )
            {
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	4803      	ldr	r0, [pc, #12]	; (800a6bc <Context_Populate$5617+0x10>)
 800a6b0:	4903      	ldr	r1, [pc, #12]	; (800a6c0 <Context_Populate$5617+0x14>)
 800a6b2:	4479      	add	r1, pc
 800a6b4:	5840      	ldr	r0, [r0, r1]
                BugCheck.Raise( BugCheck.StopCode.InvalidOperation );
 800a6b6:	f7f5 fe25 	bl	8000304 <BugCheck_Raise$4648>
 800a6ba:	bd80      	pop	{r7, pc}
 800a6bc:	e8025334 	.word	0xe8025334
 800a6c0:	17ff711e 	.word	0x17ff711e

0800a6c4 <Context_PopulateFromDelegate$5619>:
 800a6c4:	b510      	push	{r4, lr}
 800a6c6:	f5ad 7d6c 	sub.w	sp, sp, #944	; 0x3b0
 800a6ca:	460b      	mov	r3, r1
 800a6cc:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
 800a6d0:	46e6      	mov	lr, ip
 800a6d2:	2448      	movs	r4, #72	; 0x48
 800a6d4:	901b      	str	r0, [sp, #108]	; 0x6c
 800a6d6:	4660      	mov	r0, ip
 800a6d8:	911a      	str	r1, [sp, #104]	; 0x68
 800a6da:	4621      	mov	r1, r4
 800a6dc:	9319      	str	r3, [sp, #100]	; 0x64
 800a6de:	f8cd e060 	str.w	lr, [sp, #96]	; 0x60
 800a6e2:	9217      	str	r2, [sp, #92]	; 0x5c
 800a6e4:	9416      	str	r4, [sp, #88]	; 0x58
 800a6e6:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 800a6ea:	f015 fbb0 	bl	801fe4e <__aeabi_memclr>
 800a6ee:	2000      	movs	r0, #0
 800a6f0:	902e      	str	r0, [sp, #184]	; 0xb8
                        case 9: fixed (UIntPtr* ptr = &this.R9) { return ptr; };
                        case 10: fixed (UIntPtr* ptr = &this.R10) { return ptr; };
                        case 11: fixed (UIntPtr* ptr = &this.R11) { return ptr; };
                        // HW stack frame
                        case 0: fixed (UIntPtr* ptr = &this.R0) { return ptr; };
                        case 1: fixed (UIntPtr* ptr = &this.R1) { return ptr; };
 800a6f2:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a6f4:	f101 0208 	add.w	r2, r1, #8
 800a6f8:	922f      	str	r2, [sp, #188]	; 0xbc
 800a6fa:	9030      	str	r0, [sp, #192]	; 0xc0
                //--//

                //public unsafe UIntPtr StackFrame
                //{
                //    [RT.Inline]
                //    get
 800a6fc:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
                    // SW frame
                    this.EXC_RETURN = other.EXC_RETURN;
                    this.CONTROL    = other.CONTROL;
                    this.R4         = other.R4;
                    this.R5         = other.R5;
                    this.R6         = other.R6;
 800a6fe:	f1a2 0108 	sub.w	r1, r2, #8
 800a702:	9030      	str	r0, [sp, #192]	; 0xc0
 800a704:	aa30      	add	r2, sp, #192	; 0xc0
 800a706:	3a08      	subs	r2, #8
 800a708:	9014      	str	r0, [sp, #80]	; 0x50
 800a70a:	4610      	mov	r0, r2
 800a70c:	f7f6 f8d6 	bl	80008bc <UIntPtr_.ctor$2864>
                        case 9: fixed (UIntPtr* ptr = &this.R9) { return ptr; };
                        case 10: fixed (UIntPtr* ptr = &this.R10) { return ptr; };
                        case 11: fixed (UIntPtr* ptr = &this.R11) { return ptr; };
                        // HW stack frame
                        case 0: fixed (UIntPtr* ptr = &this.R0) { return ptr; };
                        case 1: fixed (UIntPtr* ptr = &this.R1) { return ptr; };
 800a710:	9830      	ldr	r0, [sp, #192]	; 0xc0
                    (int)( (int)stackImpl.GetEndDataPointer( ) - this.SP.ToUInt32( ) )
                    );
#endif

                //
                // Initial offset from start of stack storage must be at least as large as a frame
 800a712:	6840      	ldr	r0, [r0, #4]
            public override void SetupForExceptionHandling( uint mode )
            {
                //
                // Stop any exception from happening
                //
                using(Runtime.SmartHandles.InterruptState.DisableAll())
 800a714:	69c0      	ldr	r0, [r0, #28]
 800a716:	6980      	ldr	r0, [r0, #24]
 800a718:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a71a:	9013      	str	r0, [sp, #76]	; 0x4c
 800a71c:	4608      	mov	r0, r1
 800a71e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a720:	4790      	blx	r2
 800a722:	4601      	mov	r1, r0
 800a724:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a726:	9012      	str	r0, [sp, #72]	; 0x48
 800a728:	4610      	mov	r0, r2
 800a72a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a72c:	9111      	str	r1, [sp, #68]	; 0x44
 800a72e:	4619      	mov	r1, r3
 800a730:	f015 fb8d 	bl	801fe4e <__aeabi_memclr>

                //
                // build the first stack frame
                //
                RegistersOnStack registers = new RegistersOnStack();
                registers.PC            = new UIntPtr( dlgImpl.InnerGetCodePointer( ).Target.ToPointer( ) );
 800a734:	9815      	ldr	r0, [sp, #84]	; 0x54
 800a736:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a738:	68ca      	ldr	r2, [r1, #12]
 800a73a:	922e      	str	r2, [sp, #184]	; 0xb8
 800a73c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a73e:	9331      	str	r3, [sp, #196]	; 0xc4
 800a740:	f10d 0cc4 	add.w	ip, sp, #196	; 0xc4
 800a744:	f1ac 0c08 	sub.w	ip, ip, #8
 800a748:	9010      	str	r0, [sp, #64]	; 0x40
 800a74a:	4660      	mov	r0, ip
 800a74c:	4611      	mov	r1, r2
 800a74e:	f7f6 f8b5 	bl	80008bc <UIntPtr_.ctor$2864>
 800a752:	9815      	ldr	r0, [sp, #84]	; 0x54
 800a754:	f100 0140 	add.w	r1, r0, #64	; 0x40
 800a758:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 800a75a:	f801 2b02 	strb.w	r2, [r1], #2
 800a75e:	0e13      	lsrs	r3, r2, #24
 800a760:	704b      	strb	r3, [r1, #1]
 800a762:	0c13      	lsrs	r3, r2, #16
 800a764:	700b      	strb	r3, [r1, #0]
 800a766:	0a11      	lsrs	r1, r2, #8
 800a768:	f88d 10b1 	strb.w	r1, [sp, #177]	; 0xb1
 800a76c:	9914      	ldr	r1, [sp, #80]	; 0x50
 800a76e:	9132      	str	r1, [sp, #200]	; 0xc8
 800a770:	aa32      	add	r2, sp, #200	; 0xc8
                registers.PSR           = new UIntPtr( c_psr_InitialValue );
 800a772:	f1a2 0008 	sub.w	r0, r2, #8
 800a776:	4abf      	ldr	r2, [pc, #764]	; (800aa74 <Context_PopulateFromDelegate$5619+0x3b0>)
 800a778:	4bbf      	ldr	r3, [pc, #764]	; (800aa78 <Context_PopulateFromDelegate$5619+0x3b4>)
 800a77a:	447b      	add	r3, pc
 800a77c:	58d1      	ldr	r1, [r2, r3]
 800a77e:	f7f8 feec 	bl	800355a <UIntPtr_.ctor$2860>
 800a782:	9815      	ldr	r0, [sp, #84]	; 0x54
 800a784:	f100 0144 	add.w	r1, r0, #68	; 0x44
 800a788:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800a78a:	f801 2b02 	strb.w	r2, [r1], #2
 800a78e:	0e13      	lsrs	r3, r2, #24
 800a790:	704b      	strb	r3, [r1, #1]
 800a792:	0c13      	lsrs	r3, r2, #16
 800a794:	700b      	strb	r3, [r1, #0]
 800a796:	0a11      	lsrs	r1, r2, #8
 800a798:	f88d 10b5 	strb.w	r1, [sp, #181]	; 0xb5
 800a79c:	f06f 0102 	mvn.w	r1, #2
 800a7a0:	911c      	str	r1, [sp, #112]	; 0x70
 800a7a2:	2102      	movs	r1, #2
 800a7a4:	911d      	str	r1, [sp, #116]	; 0x74
                registers.EXC_RETURN    = c_MODE_RETURN__THREAD_PSP;
                registers.CONTROL       = c_CONTROL__MODE__THRD_PRIV;
                
                if(objImpl != null)
 800a7a6:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a7a8:	2900      	cmp	r1, #0
 800a7aa:	900f      	str	r0, [sp, #60]	; 0x3c
 800a7ac:	d022      	beq.n	800a7f4 <Context_PopulateFromDelegate$5619+0x130>
 800a7ae:	e7ff      	b.n	800a7b0 <Context_PopulateFromDelegate$5619+0xec>
                {
                    registers.R0 = AddressMath.Decrement( new UIntPtr( objImpl.Unpack( ) ), 8 );
 800a7b0:	9811      	ldr	r0, [sp, #68]	; 0x44
 800a7b2:	f100 0108 	add.w	r1, r0, #8
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	92e9      	str	r2, [sp, #932]	; 0x3a4
 800a7ba:	abe9      	add	r3, sp, #932	; 0x3a4
 800a7bc:	f1a3 0008 	sub.w	r0, r3, #8
 800a7c0:	920e      	str	r2, [sp, #56]	; 0x38
 800a7c2:	f7f6 f87b 	bl	80008bc <UIntPtr_.ctor$2864>
 800a7c6:	98e9      	ldr	r0, [sp, #932]	; 0x3a4
 800a7c8:	90ea      	str	r0, [sp, #936]	; 0x3a8
 800a7ca:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a7cc:	90eb      	str	r0, [sp, #940]	; 0x3ac
                //--//

                //public unsafe UIntPtr StackFrame
                //{
                //    [RT.Inline]
                //    get
 800a7ce:	99ea      	ldr	r1, [sp, #936]	; 0x3a8
                    // SW frame
                    this.EXC_RETURN = other.EXC_RETURN;
                    this.CONTROL    = other.CONTROL;
                    this.R4         = other.R4;
                    this.R5         = other.R5;
                    this.R6         = other.R6;
 800a7d0:	3908      	subs	r1, #8
 800a7d2:	90eb      	str	r0, [sp, #940]	; 0x3ac
 800a7d4:	aaeb      	add	r2, sp, #940	; 0x3ac
 800a7d6:	f1a2 0008 	sub.w	r0, r2, #8
 800a7da:	f7f6 f86f 	bl	80008bc <UIntPtr_.ctor$2864>
 800a7de:	98eb      	ldr	r0, [sp, #940]	; 0x3ac
 800a7e0:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a7e2:	f801 0f28 	strb.w	r0, [r1, #40]!
 800a7e6:	0e02      	lsrs	r2, r0, #24
 800a7e8:	70ca      	strb	r2, [r1, #3]
 800a7ea:	0c02      	lsrs	r2, r0, #16
 800a7ec:	708a      	strb	r2, [r1, #2]
 800a7ee:	0a00      	lsrs	r0, r0, #8
 800a7f0:	7048      	strb	r0, [r1, #1]
                registers.CONTROL       = c_CONTROL__MODE__THRD_PRIV;
                
                if(objImpl != null)
                {
                    registers.R0 = AddressMath.Decrement( new UIntPtr( objImpl.Unpack( ) ), 8 );
                }
 800a7f2:	e013      	b.n	800a81c <Context_PopulateFromDelegate$5619+0x158>
 800a7f4:	2000      	movs	r0, #0
 800a7f6:	9033      	str	r0, [sp, #204]	; 0xcc
 800a7f8:	a933      	add	r1, sp, #204	; 0xcc
                else
                {
                    registers.R0 = new UIntPtr( 0 );
 800a7fa:	3908      	subs	r1, #8
 800a7fc:	900d      	str	r0, [sp, #52]	; 0x34
 800a7fe:	4608      	mov	r0, r1
 800a800:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a802:	f7f8 feaa 	bl	800355a <UIntPtr_.ctor$2860>
 800a806:	9833      	ldr	r0, [sp, #204]	; 0xcc
 800a808:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a80a:	f801 0f28 	strb.w	r0, [r1, #40]!
 800a80e:	0e02      	lsrs	r2, r0, #24
 800a810:	70ca      	strb	r2, [r1, #3]
 800a812:	0c02      	lsrs	r2, r0, #16
 800a814:	708a      	strb	r2, [r1, #2]
 800a816:	0a00      	lsrs	r0, r0, #8
 800a818:	7048      	strb	r0, [r1, #1]
                }
 800a81a:	e7ff      	b.n	800a81c <Context_PopulateFromDelegate$5619+0x158>
                //
                // Save the initial stack pointer
                // In the general case the SP will be at teh top of the current frame we are building
                // When we do a LongJump thoug, or we start the thread first, we will have to use the base stack pointer
                //
                this.SP         = GetFirstStackPointerFromPhysicalStack( stackImpl );
 800a81c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a81e:	f000 f959 	bl	800aad4 <Context_GetFirstStackPointerFromPhysicalStack$5631>
 800a822:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800a824:	6088      	str	r0, [r1, #8]
 800a826:	f06f 0002 	mvn.w	r0, #2
 800a82a:	60c8      	str	r0, [r1, #12]
#endif

                //
                // Initial offset from start of stack storage must be at least as large as a frame
                //
                RT.BugCheck.Assert( (((int)stackImpl.GetEndDataPointer( ) - this.SP.ToUInt32( )) >= RegistersOnStack.TotalFrameSize), 
 800a82c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a82e:	f7f6 fbf3 	bl	8001018 <Array_GetEndDataPointer$3710>
 800a832:	17c1      	asrs	r1, r0, #31
 800a834:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a836:	900c      	str	r0, [sp, #48]	; 0x30
 800a838:	4610      	mov	r0, r2
 800a83a:	910b      	str	r1, [sp, #44]	; 0x2c
 800a83c:	f7f8 fe9c 	bl	8003578 <UIntPtr_ToUInt32$2870>
 800a840:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a842:	1a08      	subs	r0, r1, r0
 800a844:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a846:	f162 0200 	sbc.w	r2, r2, #0
 800a84a:	f04f 0300 	mov.w	r3, #0
 800a84e:	2847      	cmp	r0, #71	; 0x47
 800a850:	4618      	mov	r0, r3
 800a852:	bf88      	it	hi
 800a854:	2001      	movhi	r0, #1
 800a856:	2a00      	cmp	r2, #0
 800a858:	bfc8      	it	gt
 800a85a:	2301      	movgt	r3, #1
 800a85c:	2a00      	cmp	r2, #0
 800a85e:	bf08      	it	eq
 800a860:	4603      	moveq	r3, r0
                // HW stack frame: pushed upon entering PendSV_Handler
                [TS.AssumeReferenced] public UIntPtr R0;
                [TS.AssumeReferenced] public UIntPtr R1;
                [TS.AssumeReferenced] public UIntPtr R2;
                [TS.AssumeReferenced] public UIntPtr R3;
                [TS.AssumeReferenced] public UIntPtr R12;
 800a862:	2b00      	cmp	r3, #0
 800a864:	d107      	bne.n	800a876 <Context_PopulateFromDelegate$5619+0x1b2>
 800a866:	e7ff      	b.n	800a868 <Context_PopulateFromDelegate$5619+0x1a4>
 800a868:	4884      	ldr	r0, [pc, #528]	; (800aa7c <Context_PopulateFromDelegate$5619+0x3b8>)
 800a86a:	4985      	ldr	r1, [pc, #532]	; (800aa80 <Context_PopulateFromDelegate$5619+0x3bc>)
 800a86c:	4479      	add	r1, pc
 800a86e:	5840      	ldr	r0, [r0, r1]
                [TS.AssumeReferenced] public UIntPtr LR;
                [TS.AssumeReferenced] public UIntPtr PC;
 800a870:	f7f5 fd48 	bl	8000304 <BugCheck_Raise$4648>
                [TS.AssumeReferenced] public UIntPtr PSR;
 800a874:	e7ff      	b.n	800a876 <Context_PopulateFromDelegate$5619+0x1b2>
 800a876:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800a878:	6881      	ldr	r1, [r0, #8]
 800a87a:	9134      	str	r1, [sp, #208]	; 0xd0
                // now we need to push manually
                //

                RegistersOnStack* firstFrame = PointerToFrame( this.SP );

                firstFrame->Assign( ref registers );
 800a87c:	f1a1 0008 	sub.w	r0, r1, #8
 800a880:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a882:	910a      	str	r1, [sp, #40]	; 0x28
 800a884:	4611      	mov	r1, r2
 800a886:	f000 f954 	bl	800ab32 <RegistersOnStack_Assign$5739>
 800a88a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a88c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800a88e:	a935      	add	r1, sp, #212	; 0xd4
 800a890:	2248      	movs	r2, #72	; 0x48
 800a892:	9009      	str	r0, [sp, #36]	; 0x24
 800a894:	4608      	mov	r0, r1
 800a896:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a898:	f015 fadc 	bl	801fe54 <__aeabi_memcpy>
 800a89c:	993f      	ldr	r1, [sp, #252]	; 0xfc

                //--//
                
                RT.BugCheck.Assert( firstFrame->R0          == registers.R0        , BugCheck.StopCode.StackCorruptionDetected );
 800a89e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8a0:	f7f8 fe9d 	bl	80035de <UIntPtr_op_Equality$2886>
                // HW stack frame: pushed upon entering PendSV_Handler
                [TS.AssumeReferenced] public UIntPtr R0;
                [TS.AssumeReferenced] public UIntPtr R1;
                [TS.AssumeReferenced] public UIntPtr R2;
                [TS.AssumeReferenced] public UIntPtr R3;
                [TS.AssumeReferenced] public UIntPtr R12;
 800a8a4:	f010 0fff 	tst.w	r0, #255	; 0xff
 800a8a8:	d107      	bne.n	800a8ba <Context_PopulateFromDelegate$5619+0x1f6>
 800a8aa:	e7ff      	b.n	800a8ac <Context_PopulateFromDelegate$5619+0x1e8>
 800a8ac:	4875      	ldr	r0, [pc, #468]	; (800aa84 <Context_PopulateFromDelegate$5619+0x3c0>)
 800a8ae:	4976      	ldr	r1, [pc, #472]	; (800aa88 <Context_PopulateFromDelegate$5619+0x3c4>)
 800a8b0:	4479      	add	r1, pc
 800a8b2:	5840      	ldr	r0, [r0, r1]
                [TS.AssumeReferenced] public UIntPtr LR;
                [TS.AssumeReferenced] public UIntPtr PC;
 800a8b4:	f7f5 fd26 	bl	8000304 <BugCheck_Raise$4648>
                [TS.AssumeReferenced] public UIntPtr PSR;
 800a8b8:	e7ff      	b.n	800a8ba <Context_PopulateFromDelegate$5619+0x1f6>
 800a8ba:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a8bc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800a8be:	a947      	add	r1, sp, #284	; 0x11c
 800a8c0:	2248      	movs	r2, #72	; 0x48
 800a8c2:	9008      	str	r0, [sp, #32]
 800a8c4:	4608      	mov	r0, r1
 800a8c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a8c8:	f015 fac4 	bl	801fe54 <__aeabi_memcpy>
 800a8cc:	9952      	ldr	r1, [sp, #328]	; 0x148
                firstFrame->Assign( ref registers );

                //--//
                
                RT.BugCheck.Assert( firstFrame->R0          == registers.R0        , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->R1          == registers.R1        , BugCheck.StopCode.StackCorruptionDetected );
 800a8ce:	9808      	ldr	r0, [sp, #32]
 800a8d0:	f7f8 fe85 	bl	80035de <UIntPtr_op_Equality$2886>
                // HW stack frame: pushed upon entering PendSV_Handler
                [TS.AssumeReferenced] public UIntPtr R0;
                [TS.AssumeReferenced] public UIntPtr R1;
                [TS.AssumeReferenced] public UIntPtr R2;
                [TS.AssumeReferenced] public UIntPtr R3;
                [TS.AssumeReferenced] public UIntPtr R12;
 800a8d4:	f010 0fff 	tst.w	r0, #255	; 0xff
 800a8d8:	d107      	bne.n	800a8ea <Context_PopulateFromDelegate$5619+0x226>
 800a8da:	e7ff      	b.n	800a8dc <Context_PopulateFromDelegate$5619+0x218>
 800a8dc:	486b      	ldr	r0, [pc, #428]	; (800aa8c <Context_PopulateFromDelegate$5619+0x3c8>)
 800a8de:	496c      	ldr	r1, [pc, #432]	; (800aa90 <Context_PopulateFromDelegate$5619+0x3cc>)
 800a8e0:	4479      	add	r1, pc
 800a8e2:	5840      	ldr	r0, [r0, r1]
                [TS.AssumeReferenced] public UIntPtr LR;
                [TS.AssumeReferenced] public UIntPtr PC;
 800a8e4:	f7f5 fd0e 	bl	8000304 <BugCheck_Raise$4648>
                [TS.AssumeReferenced] public UIntPtr PSR;
 800a8e8:	e7ff      	b.n	800a8ea <Context_PopulateFromDelegate$5619+0x226>
 800a8ea:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a8ec:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800a8ee:	a959      	add	r1, sp, #356	; 0x164
 800a8f0:	2248      	movs	r2, #72	; 0x48
 800a8f2:	9007      	str	r0, [sp, #28]
 800a8f4:	4608      	mov	r0, r1
 800a8f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a8f8:	f015 faac 	bl	801fe54 <__aeabi_memcpy>
 800a8fc:	9965      	ldr	r1, [sp, #404]	; 0x194

                //--//
                
                RT.BugCheck.Assert( firstFrame->R0          == registers.R0        , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->R1          == registers.R1        , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->R2          == registers.R2        , BugCheck.StopCode.StackCorruptionDetected );
 800a8fe:	9807      	ldr	r0, [sp, #28]
 800a900:	f7f8 fe6d 	bl	80035de <UIntPtr_op_Equality$2886>
                // HW stack frame: pushed upon entering PendSV_Handler
                [TS.AssumeReferenced] public UIntPtr R0;
                [TS.AssumeReferenced] public UIntPtr R1;
                [TS.AssumeReferenced] public UIntPtr R2;
                [TS.AssumeReferenced] public UIntPtr R3;
                [TS.AssumeReferenced] public UIntPtr R12;
 800a904:	f010 0fff 	tst.w	r0, #255	; 0xff
 800a908:	d107      	bne.n	800a91a <Context_PopulateFromDelegate$5619+0x256>
 800a90a:	e7ff      	b.n	800a90c <Context_PopulateFromDelegate$5619+0x248>
 800a90c:	4861      	ldr	r0, [pc, #388]	; (800aa94 <Context_PopulateFromDelegate$5619+0x3d0>)
 800a90e:	4962      	ldr	r1, [pc, #392]	; (800aa98 <Context_PopulateFromDelegate$5619+0x3d4>)
 800a910:	4479      	add	r1, pc
 800a912:	5840      	ldr	r0, [r0, r1]
                [TS.AssumeReferenced] public UIntPtr LR;
                [TS.AssumeReferenced] public UIntPtr PC;
 800a914:	f7f5 fcf6 	bl	8000304 <BugCheck_Raise$4648>
                [TS.AssumeReferenced] public UIntPtr PSR;
 800a918:	e7ff      	b.n	800a91a <Context_PopulateFromDelegate$5619+0x256>
 800a91a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a91c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800a91e:	a96b      	add	r1, sp, #428	; 0x1ac
 800a920:	2248      	movs	r2, #72	; 0x48
 800a922:	9006      	str	r0, [sp, #24]
 800a924:	4608      	mov	r0, r1
 800a926:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a928:	f015 fa94 	bl	801fe54 <__aeabi_memcpy>
 800a92c:	9978      	ldr	r1, [sp, #480]	; 0x1e0
                //--//
                
                RT.BugCheck.Assert( firstFrame->R0          == registers.R0        , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->R1          == registers.R1        , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->R2          == registers.R2        , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->R3          == registers.R3        , BugCheck.StopCode.StackCorruptionDetected );
 800a92e:	9806      	ldr	r0, [sp, #24]
 800a930:	f7f8 fe55 	bl	80035de <UIntPtr_op_Equality$2886>
                // HW stack frame: pushed upon entering PendSV_Handler
                [TS.AssumeReferenced] public UIntPtr R0;
                [TS.AssumeReferenced] public UIntPtr R1;
                [TS.AssumeReferenced] public UIntPtr R2;
                [TS.AssumeReferenced] public UIntPtr R3;
                [TS.AssumeReferenced] public UIntPtr R12;
 800a934:	f010 0fff 	tst.w	r0, #255	; 0xff
 800a938:	d107      	bne.n	800a94a <Context_PopulateFromDelegate$5619+0x286>
 800a93a:	e7ff      	b.n	800a93c <Context_PopulateFromDelegate$5619+0x278>
 800a93c:	4857      	ldr	r0, [pc, #348]	; (800aa9c <Context_PopulateFromDelegate$5619+0x3d8>)
 800a93e:	4958      	ldr	r1, [pc, #352]	; (800aaa0 <Context_PopulateFromDelegate$5619+0x3dc>)
 800a940:	4479      	add	r1, pc
 800a942:	5840      	ldr	r0, [r0, r1]
                [TS.AssumeReferenced] public UIntPtr LR;
                [TS.AssumeReferenced] public UIntPtr PC;
 800a944:	f7f5 fcde 	bl	8000304 <BugCheck_Raise$4648>
                [TS.AssumeReferenced] public UIntPtr PSR;
 800a948:	e7ff      	b.n	800a94a <Context_PopulateFromDelegate$5619+0x286>
 800a94a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a94c:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800a94e:	a97d      	add	r1, sp, #500	; 0x1f4
 800a950:	2248      	movs	r2, #72	; 0x48
 800a952:	9005      	str	r0, [sp, #20]
 800a954:	4608      	mov	r0, r1
 800a956:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a958:	f015 fa7c 	bl	801fe54 <__aeabi_memcpy>
 800a95c:	998b      	ldr	r1, [sp, #556]	; 0x22c
                
                RT.BugCheck.Assert( firstFrame->R0          == registers.R0        , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->R1          == registers.R1        , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->R2          == registers.R2        , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->R3          == registers.R3        , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->R12         == registers.R12       , BugCheck.StopCode.StackCorruptionDetected );
 800a95e:	9805      	ldr	r0, [sp, #20]
 800a960:	f7f8 fe3d 	bl	80035de <UIntPtr_op_Equality$2886>
                // HW stack frame: pushed upon entering PendSV_Handler
                [TS.AssumeReferenced] public UIntPtr R0;
                [TS.AssumeReferenced] public UIntPtr R1;
                [TS.AssumeReferenced] public UIntPtr R2;
                [TS.AssumeReferenced] public UIntPtr R3;
                [TS.AssumeReferenced] public UIntPtr R12;
 800a964:	f010 0fff 	tst.w	r0, #255	; 0xff
 800a968:	d107      	bne.n	800a97a <Context_PopulateFromDelegate$5619+0x2b6>
 800a96a:	e7ff      	b.n	800a96c <Context_PopulateFromDelegate$5619+0x2a8>
 800a96c:	484d      	ldr	r0, [pc, #308]	; (800aaa4 <Context_PopulateFromDelegate$5619+0x3e0>)
 800a96e:	494e      	ldr	r1, [pc, #312]	; (800aaa8 <Context_PopulateFromDelegate$5619+0x3e4>)
 800a970:	4479      	add	r1, pc
 800a972:	5840      	ldr	r0, [r0, r1]
                [TS.AssumeReferenced] public UIntPtr LR;
                [TS.AssumeReferenced] public UIntPtr PC;
 800a974:	f7f5 fcc6 	bl	8000304 <BugCheck_Raise$4648>
                [TS.AssumeReferenced] public UIntPtr PSR;
 800a978:	e7ff      	b.n	800a97a <Context_PopulateFromDelegate$5619+0x2b6>
 800a97a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a97c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800a97e:	a98f      	add	r1, sp, #572	; 0x23c
 800a980:	2248      	movs	r2, #72	; 0x48
 800a982:	9004      	str	r0, [sp, #16]
 800a984:	4608      	mov	r0, r1
 800a986:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a988:	f015 fa64 	bl	801fe54 <__aeabi_memcpy>
 800a98c:	999e      	ldr	r1, [sp, #632]	; 0x278
                RT.BugCheck.Assert( firstFrame->R0          == registers.R0        , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->R1          == registers.R1        , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->R2          == registers.R2        , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->R3          == registers.R3        , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->R12         == registers.R12       , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->LR          == registers.LR        , BugCheck.StopCode.StackCorruptionDetected );
 800a98e:	9804      	ldr	r0, [sp, #16]
 800a990:	f7f8 fe25 	bl	80035de <UIntPtr_op_Equality$2886>
                // HW stack frame: pushed upon entering PendSV_Handler
                [TS.AssumeReferenced] public UIntPtr R0;
                [TS.AssumeReferenced] public UIntPtr R1;
                [TS.AssumeReferenced] public UIntPtr R2;
                [TS.AssumeReferenced] public UIntPtr R3;
                [TS.AssumeReferenced] public UIntPtr R12;
 800a994:	f010 0fff 	tst.w	r0, #255	; 0xff
 800a998:	d107      	bne.n	800a9aa <Context_PopulateFromDelegate$5619+0x2e6>
 800a99a:	e7ff      	b.n	800a99c <Context_PopulateFromDelegate$5619+0x2d8>
 800a99c:	4843      	ldr	r0, [pc, #268]	; (800aaac <Context_PopulateFromDelegate$5619+0x3e8>)
 800a99e:	4944      	ldr	r1, [pc, #272]	; (800aab0 <Context_PopulateFromDelegate$5619+0x3ec>)
 800a9a0:	4479      	add	r1, pc
 800a9a2:	5840      	ldr	r0, [r0, r1]
                [TS.AssumeReferenced] public UIntPtr LR;
                [TS.AssumeReferenced] public UIntPtr PC;
 800a9a4:	f7f5 fcae 	bl	8000304 <BugCheck_Raise$4648>
                [TS.AssumeReferenced] public UIntPtr PSR;
 800a9a8:	e7ff      	b.n	800a9aa <Context_PopulateFromDelegate$5619+0x2e6>
 800a9aa:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a9ac:	6c00      	ldr	r0, [r0, #64]	; 0x40
 800a9ae:	a9a1      	add	r1, sp, #644	; 0x284
 800a9b0:	2248      	movs	r2, #72	; 0x48
 800a9b2:	9003      	str	r0, [sp, #12]
 800a9b4:	4608      	mov	r0, r1
 800a9b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a9b8:	f015 fa4c 	bl	801fe54 <__aeabi_memcpy>
 800a9bc:	99b1      	ldr	r1, [sp, #708]	; 0x2c4
                RT.BugCheck.Assert( firstFrame->R1          == registers.R1        , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->R2          == registers.R2        , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->R3          == registers.R3        , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->R12         == registers.R12       , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->LR          == registers.LR        , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->PC          == registers.PC        , BugCheck.StopCode.StackCorruptionDetected );
 800a9be:	9803      	ldr	r0, [sp, #12]
 800a9c0:	f7f8 fe0d 	bl	80035de <UIntPtr_op_Equality$2886>
                // HW stack frame: pushed upon entering PendSV_Handler
                [TS.AssumeReferenced] public UIntPtr R0;
                [TS.AssumeReferenced] public UIntPtr R1;
                [TS.AssumeReferenced] public UIntPtr R2;
                [TS.AssumeReferenced] public UIntPtr R3;
                [TS.AssumeReferenced] public UIntPtr R12;
 800a9c4:	f010 0fff 	tst.w	r0, #255	; 0xff
 800a9c8:	d107      	bne.n	800a9da <Context_PopulateFromDelegate$5619+0x316>
 800a9ca:	e7ff      	b.n	800a9cc <Context_PopulateFromDelegate$5619+0x308>
 800a9cc:	4839      	ldr	r0, [pc, #228]	; (800aab4 <Context_PopulateFromDelegate$5619+0x3f0>)
 800a9ce:	493a      	ldr	r1, [pc, #232]	; (800aab8 <Context_PopulateFromDelegate$5619+0x3f4>)
 800a9d0:	4479      	add	r1, pc
 800a9d2:	5840      	ldr	r0, [r0, r1]
                [TS.AssumeReferenced] public UIntPtr LR;
                [TS.AssumeReferenced] public UIntPtr PC;
 800a9d4:	f7f5 fc96 	bl	8000304 <BugCheck_Raise$4648>
                [TS.AssumeReferenced] public UIntPtr PSR;
 800a9d8:	e7ff      	b.n	800a9da <Context_PopulateFromDelegate$5619+0x316>
 800a9da:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a9dc:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800a9de:	a9b3      	add	r1, sp, #716	; 0x2cc
 800a9e0:	2248      	movs	r2, #72	; 0x48
 800a9e2:	9002      	str	r0, [sp, #8]
 800a9e4:	4608      	mov	r0, r1
 800a9e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a9e8:	f015 fa34 	bl	801fe54 <__aeabi_memcpy>
 800a9ec:	99c4      	ldr	r1, [sp, #784]	; 0x310
                RT.BugCheck.Assert( firstFrame->R2          == registers.R2        , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->R3          == registers.R3        , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->R12         == registers.R12       , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->LR          == registers.LR        , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->PC          == registers.PC        , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->PSR         == registers.PSR       , BugCheck.StopCode.StackCorruptionDetected );
 800a9ee:	9802      	ldr	r0, [sp, #8]
 800a9f0:	f7f8 fdf5 	bl	80035de <UIntPtr_op_Equality$2886>
                // HW stack frame: pushed upon entering PendSV_Handler
                [TS.AssumeReferenced] public UIntPtr R0;
                [TS.AssumeReferenced] public UIntPtr R1;
                [TS.AssumeReferenced] public UIntPtr R2;
                [TS.AssumeReferenced] public UIntPtr R3;
                [TS.AssumeReferenced] public UIntPtr R12;
 800a9f4:	f010 0fff 	tst.w	r0, #255	; 0xff
 800a9f8:	d107      	bne.n	800aa0a <Context_PopulateFromDelegate$5619+0x346>
 800a9fa:	e7ff      	b.n	800a9fc <Context_PopulateFromDelegate$5619+0x338>
 800a9fc:	482f      	ldr	r0, [pc, #188]	; (800aabc <Context_PopulateFromDelegate$5619+0x3f8>)
 800a9fe:	4930      	ldr	r1, [pc, #192]	; (800aac0 <Context_PopulateFromDelegate$5619+0x3fc>)
 800aa00:	4479      	add	r1, pc
 800aa02:	5840      	ldr	r0, [r0, r1]
                [TS.AssumeReferenced] public UIntPtr LR;
                [TS.AssumeReferenced] public UIntPtr PC;
 800aa04:	f7f5 fc7e 	bl	8000304 <BugCheck_Raise$4648>
                [TS.AssumeReferenced] public UIntPtr PSR;
 800aa08:	e7ff      	b.n	800aa0a <Context_PopulateFromDelegate$5619+0x346>
                RT.BugCheck.Assert( firstFrame->R3          == registers.R3        , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->R12         == registers.R12       , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->LR          == registers.LR        , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->PC          == registers.PC        , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->PSR         == registers.PSR       , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->EXC_RETURN  == registers.EXC_RETURN, BugCheck.StopCode.StackCorruptionDetected );
 800aa0a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aa0c:	6801      	ldr	r1, [r0, #0]
 800aa0e:	a8c5      	add	r0, sp, #788	; 0x314
 800aa10:	2248      	movs	r2, #72	; 0x48
 800aa12:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800aa14:	9101      	str	r1, [sp, #4]
 800aa16:	4619      	mov	r1, r3
 800aa18:	f015 fa1c 	bl	801fe54 <__aeabi_memcpy>
 800aa1c:	98c5      	ldr	r0, [sp, #788]	; 0x314
 800aa1e:	2100      	movs	r1, #0
 800aa20:	9a01      	ldr	r2, [sp, #4]
 800aa22:	4282      	cmp	r2, r0
 800aa24:	bf08      	it	eq
 800aa26:	2101      	moveq	r1, #1
                // HW stack frame: pushed upon entering PendSV_Handler
                [TS.AssumeReferenced] public UIntPtr R0;
                [TS.AssumeReferenced] public UIntPtr R1;
                [TS.AssumeReferenced] public UIntPtr R2;
                [TS.AssumeReferenced] public UIntPtr R3;
                [TS.AssumeReferenced] public UIntPtr R12;
 800aa28:	2900      	cmp	r1, #0
 800aa2a:	d107      	bne.n	800aa3c <Context_PopulateFromDelegate$5619+0x378>
 800aa2c:	e7ff      	b.n	800aa2e <Context_PopulateFromDelegate$5619+0x36a>
 800aa2e:	4825      	ldr	r0, [pc, #148]	; (800aac4 <Context_PopulateFromDelegate$5619+0x400>)
 800aa30:	4925      	ldr	r1, [pc, #148]	; (800aac8 <Context_PopulateFromDelegate$5619+0x404>)
 800aa32:	4479      	add	r1, pc
 800aa34:	5840      	ldr	r0, [r0, r1]
                [TS.AssumeReferenced] public UIntPtr LR;
                [TS.AssumeReferenced] public UIntPtr PC;
 800aa36:	f7f5 fc65 	bl	8000304 <BugCheck_Raise$4648>
                [TS.AssumeReferenced] public UIntPtr PSR;
 800aa3a:	e7ff      	b.n	800aa3c <Context_PopulateFromDelegate$5619+0x378>
                RT.BugCheck.Assert( firstFrame->R12         == registers.R12       , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->LR          == registers.LR        , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->PC          == registers.PC        , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->PSR         == registers.PSR       , BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->EXC_RETURN  == registers.EXC_RETURN, BugCheck.StopCode.StackCorruptionDetected );
                RT.BugCheck.Assert( firstFrame->CONTROL     == registers.CONTROL   , BugCheck.StopCode.StackCorruptionDetected );
 800aa3c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aa3e:	6841      	ldr	r1, [r0, #4]
 800aa40:	a8d7      	add	r0, sp, #860	; 0x35c
 800aa42:	2248      	movs	r2, #72	; 0x48
 800aa44:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800aa46:	9100      	str	r1, [sp, #0]
 800aa48:	4619      	mov	r1, r3
 800aa4a:	f015 fa03 	bl	801fe54 <__aeabi_memcpy>
 800aa4e:	98d8      	ldr	r0, [sp, #864]	; 0x360
 800aa50:	2100      	movs	r1, #0
 800aa52:	9a00      	ldr	r2, [sp, #0]
 800aa54:	4282      	cmp	r2, r0
 800aa56:	bf08      	it	eq
 800aa58:	2101      	moveq	r1, #1
                // HW stack frame: pushed upon entering PendSV_Handler
                [TS.AssumeReferenced] public UIntPtr R0;
                [TS.AssumeReferenced] public UIntPtr R1;
                [TS.AssumeReferenced] public UIntPtr R2;
                [TS.AssumeReferenced] public UIntPtr R3;
                [TS.AssumeReferenced] public UIntPtr R12;
 800aa5a:	2900      	cmp	r1, #0
 800aa5c:	d107      	bne.n	800aa6e <Context_PopulateFromDelegate$5619+0x3aa>
 800aa5e:	e7ff      	b.n	800aa60 <Context_PopulateFromDelegate$5619+0x39c>
 800aa60:	481a      	ldr	r0, [pc, #104]	; (800aacc <Context_PopulateFromDelegate$5619+0x408>)
 800aa62:	491b      	ldr	r1, [pc, #108]	; (800aad0 <Context_PopulateFromDelegate$5619+0x40c>)
 800aa64:	4479      	add	r1, pc
 800aa66:	5840      	ldr	r0, [r0, r1]
                [TS.AssumeReferenced] public UIntPtr LR;
                [TS.AssumeReferenced] public UIntPtr PC;
 800aa68:	f7f5 fc4c 	bl	8000304 <BugCheck_Raise$4648>
                [TS.AssumeReferenced] public UIntPtr PSR;
 800aa6c:	e7ff      	b.n	800aa6e <Context_PopulateFromDelegate$5619+0x3aa>
 800aa6e:	f50d 7d6c 	add.w	sp, sp, #944	; 0x3b0
 800aa72:	bd10      	pop	{r4, pc}
 800aa74:	e8025338 	.word	0xe8025338
 800aa78:	17ff7056 	.word	0x17ff7056
 800aa7c:	e8025364 	.word	0xe8025364
 800aa80:	17ff6f64 	.word	0x17ff6f64
 800aa84:	e8025360 	.word	0xe8025360
 800aa88:	17ff6f20 	.word	0x17ff6f20
 800aa8c:	e802535c 	.word	0xe802535c
 800aa90:	17ff6ef0 	.word	0x17ff6ef0
 800aa94:	e8025358 	.word	0xe8025358
 800aa98:	17ff6ec0 	.word	0x17ff6ec0
 800aa9c:	e8025354 	.word	0xe8025354
 800aaa0:	17ff6e90 	.word	0x17ff6e90
 800aaa4:	e8025350 	.word	0xe8025350
 800aaa8:	17ff6e60 	.word	0x17ff6e60
 800aaac:	e802534c 	.word	0xe802534c
 800aab0:	17ff6e30 	.word	0x17ff6e30
 800aab4:	e8025348 	.word	0xe8025348
 800aab8:	17ff6e00 	.word	0x17ff6e00
 800aabc:	e8025344 	.word	0xe8025344
 800aac0:	17ff6dd0 	.word	0x17ff6dd0
 800aac4:	e8025340 	.word	0xe8025340
 800aac8:	17ff6d9e 	.word	0x17ff6d9e
 800aacc:	e802533c 	.word	0xe802533c
 800aad0:	17ff6d6c 	.word	0x17ff6d6c

0800aad4 <Context_GetFirstStackPointerFromPhysicalStack$5631>:
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b088      	sub	sp, #32
 800aad8:	4601      	mov	r1, r0
                LongJump( ); 
            }
            
            private unsafe UIntPtr GetFirstStackPointerFromPhysicalStack( ArrayImpl stackImpl )
            {
                return AddressMath.AlignToLowerBoundary(
 800aada:	9102      	str	r1, [sp, #8]
 800aadc:	f7f6 fa9c 	bl	8001018 <Array_GetEndDataPointer$3710>
 800aae0:	2100      	movs	r1, #0
 800aae2:	9103      	str	r1, [sp, #12]
 800aae4:	aa03      	add	r2, sp, #12
 800aae6:	3a08      	subs	r2, #8
 800aae8:	9001      	str	r0, [sp, #4]
 800aaea:	4610      	mov	r0, r2
 800aaec:	9a01      	ldr	r2, [sp, #4]
 800aaee:	9100      	str	r1, [sp, #0]
 800aaf0:	4611      	mov	r1, r2
 800aaf2:	f7f5 fee3 	bl	80008bc <UIntPtr_.ctor$2864>
 800aaf6:	9803      	ldr	r0, [sp, #12]
 800aaf8:	9004      	str	r0, [sp, #16]
 800aafa:	9800      	ldr	r0, [sp, #0]
 800aafc:	9005      	str	r0, [sp, #20]
                //--//

                //public unsafe UIntPtr StackFrame
                //{
                //    [RT.Inline]
                //    get
 800aafe:	9904      	ldr	r1, [sp, #16]
                    // SW frame
                    this.EXC_RETURN = other.EXC_RETURN;
                    this.CONTROL    = other.CONTROL;
                    this.R4         = other.R4;
                    this.R5         = other.R5;
                    this.R6         = other.R6;
 800ab00:	3948      	subs	r1, #72	; 0x48
 800ab02:	9005      	str	r0, [sp, #20]
 800ab04:	aa05      	add	r2, sp, #20
 800ab06:	f1a2 0008 	sub.w	r0, r2, #8
 800ab0a:	f7f5 fed7 	bl	80008bc <UIntPtr_.ctor$2864>
 800ab0e:	9805      	ldr	r0, [sp, #20]
 800ab10:	9006      	str	r0, [sp, #24]
 800ab12:	a806      	add	r0, sp, #24
                }

                public static unsafe uint SwitcherFrameSize
                {
                    [RT.Inline]
                    get
 800ab14:	3808      	subs	r0, #8
 800ab16:	f7f8 fd2f 	bl	8003578 <UIntPtr_ToUInt32$2870>
 800ab1a:	f020 0107 	bic.w	r1, r0, #7
 800ab1e:	9800      	ldr	r0, [sp, #0]
 800ab20:	9007      	str	r0, [sp, #28]
 800ab22:	aa07      	add	r2, sp, #28
 800ab24:	f1a2 0008 	sub.w	r0, r2, #8
 800ab28:	f7f8 fd17 	bl	800355a <UIntPtr_.ctor$2860>
 800ab2c:	9807      	ldr	r0, [sp, #28]
 800ab2e:	b008      	add	sp, #32
 800ab30:	bd80      	pop	{r7, pc}

0800ab32 <RegistersOnStack_Assign$5739>:
 800ab32:	b082      	sub	sp, #8
 800ab34:	460a      	mov	r2, r1
 800ab36:	4603      	mov	r3, r0
            //
            // Constructor Methods
            //

            public TimerPool()
            {
 800ab38:	f8d1 c000 	ldr.w	ip, [r1]
 800ab3c:	f8c0 c008 	str.w	ip, [r0, #8]
                m_timers           = new KernelList< TimerImpl >();
 800ab40:	f8d1 c004 	ldr.w	ip, [r1, #4]
 800ab44:	f8c0 c00c 	str.w	ip, [r0, #12]
 800ab48:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800ab4c:	f8c0 c010 	str.w	ip, [r0, #16]
 800ab50:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 800ab54:	f8c0 c014 	str.w	ip, [r0, #20]
 800ab58:	f8d1 c010 	ldr.w	ip, [r1, #16]
 800ab5c:	f8c0 c018 	str.w	ip, [r0, #24]
 800ab60:	f8d1 c014 	ldr.w	ip, [r1, #20]
 800ab64:	f8c0 c01c 	str.w	ip, [r0, #28]
 800ab68:	f8d1 c018 	ldr.w	ip, [r1, #24]
 800ab6c:	f8c0 c020 	str.w	ip, [r0, #32]
 800ab70:	f8d1 c01c 	ldr.w	ip, [r1, #28]
 800ab74:	f8c0 c024 	str.w	ip, [r0, #36]	; 0x24
 800ab78:	f8d1 c020 	ldr.w	ip, [r1, #32]
 800ab7c:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
 800ab80:	f8d1 c024 	ldr.w	ip, [r1, #36]	; 0x24
 800ab84:	f8c0 c02c 	str.w	ip, [r0, #44]	; 0x2c
 800ab88:	f8d1 c028 	ldr.w	ip, [r1, #40]	; 0x28
 800ab8c:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
 800ab90:	f8d1 c02c 	ldr.w	ip, [r1, #44]	; 0x2c
 800ab94:	f8c0 c034 	str.w	ip, [r0, #52]	; 0x34
 800ab98:	f8d1 c030 	ldr.w	ip, [r1, #48]	; 0x30
 800ab9c:	f8c0 c038 	str.w	ip, [r0, #56]	; 0x38
 800aba0:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
 800aba4:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
 800aba8:	f8d1 c038 	ldr.w	ip, [r1, #56]	; 0x38
 800abac:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
 800abb0:	f8d1 c03c 	ldr.w	ip, [r1, #60]	; 0x3c
 800abb4:	f8c0 c044 	str.w	ip, [r0, #68]	; 0x44
 800abb8:	f8d1 c040 	ldr.w	ip, [r1, #64]	; 0x40
 800abbc:	f8c0 c048 	str.w	ip, [r0, #72]	; 0x48
 800abc0:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800abc2:	64c1      	str	r1, [r0, #76]	; 0x4c
 800abc4:	9301      	str	r3, [sp, #4]
 800abc6:	9200      	str	r2, [sp, #0]
 800abc8:	b002      	add	sp, #8
 800abca:	4770      	bx	lr

0800abcc <Context_Unwind$5621>:
            }
            
#region Tracking Collector and Exceptions  

            public override bool Unwind( )
            {
 800abcc:	b580      	push	{r7, lr}
 800abce:	b084      	sub	sp, #16
 800abd0:	e7ff      	b.n	800abd2 <Context_Unwind$5621+0x6>
                throw new Exception( "Unwind not implemented" );
 800abd2:	480b      	ldr	r0, [pc, #44]	; (800ac00 <Context_Unwind$5621+0x34>)
 800abd4:	490b      	ldr	r1, [pc, #44]	; (800ac04 <Context_Unwind$5621+0x38>)
 800abd6:	4479      	add	r1, pc
 800abd8:	4408      	add	r0, r1
 800abda:	4a0b      	ldr	r2, [pc, #44]	; (800ac08 <Context_Unwind$5621+0x3c>)
 800abdc:	440a      	add	r2, r1
 800abde:	9003      	str	r0, [sp, #12]
 800abe0:	9102      	str	r1, [sp, #8]
 800abe2:	4611      	mov	r1, r2
 800abe4:	f7f5 fdec 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800abe8:	4908      	ldr	r1, [pc, #32]	; (800ac0c <Context_Unwind$5621+0x40>)
 800abea:	9a02      	ldr	r2, [sp, #8]
 800abec:	4411      	add	r1, r2
 800abee:	9001      	str	r0, [sp, #4]
 800abf0:	f000 f80e 	bl	800ac10 <Exception_.ctor$7037>
 800abf4:	9803      	ldr	r0, [sp, #12]
 800abf6:	9901      	ldr	r1, [sp, #4]
 800abf8:	f7f5 fe38 	bl	800086c <TypeSystemManager_Throw$4954>
 800abfc:	e7e9      	b.n	800abd2 <Context_Unwind$5621+0x6>
 800abfe:	46c0      	nop			; (mov r8, r8)
 800ac00:	ffffea38 	.word	0xffffea38
 800ac04:	17ff6bfa 	.word	0x17ff6bfa
 800ac08:	e801252c 	.word	0xe801252c
 800ac0c:	e80129dc 	.word	0xe80129dc

0800ac10 <Exception_.ctor$7037>:
 800ac10:	b082      	sub	sp, #8
 800ac12:	460a      	mov	r2, r1
 800ac14:	4603      	mov	r3, r0
 800ac16:	6081      	str	r1, [r0, #8]
 800ac18:	9301      	str	r3, [sp, #4]
 800ac1a:	9200      	str	r2, [sp, #0]
 800ac1c:	b002      	add	sp, #8
 800ac1e:	4770      	bx	lr

0800ac20 <Context_ContextSwitch$5624>:
                Peripherals.Instance.ProcessInterrupt( );
            }

            [Inline]
            public static void FastInterruptHandlerWithoutContextSwitch( )
            {
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b08c      	sub	sp, #48	; 0x30
 800ac24:	492b      	ldr	r1, [pc, #172]	; (800acd4 <Context_ContextSwitch$5624+0xb4>)
 800ac26:	4a2c      	ldr	r2, [pc, #176]	; (800acd8 <Context_ContextSwitch$5624+0xb8>)
 800ac28:	447a      	add	r2, pc
 800ac2a:	4411      	add	r1, r2
 800ac2c:	6a4a      	ldr	r2, [r1, #36]	; 0x24
                // TODO: 

                //
                // Switch back to the exception handling mode.
                //

 800ac2e:	6a89      	ldr	r1, [r1, #40]	; 0x28
            {
                ThreadImpl currentThread = tm.CurrentThread;
                ThreadImpl nextThread    = tm.NextThread;
                Context    ctx;

                if(currentThread != null)
 800ac30:	2a00      	cmp	r2, #0
 800ac32:	9007      	str	r0, [sp, #28]
 800ac34:	9206      	str	r2, [sp, #24]
 800ac36:	9105      	str	r1, [sp, #20]
 800ac38:	d02a      	beq.n	800ac90 <Context_ContextSwitch$5624+0x70>
 800ac3a:	e7ff      	b.n	800ac3c <Context_ContextSwitch$5624+0x1c>
            private static unsafe void PrepareStackForException( uint mode,
                                                                 Context.RegistersOnStack* ptr )
            {

                //
                // EXC_RETURN to go back to previous mode.
 800ac3c:	9806      	ldr	r0, [sp, #24]
 800ac3e:	69c0      	ldr	r0, [r0, #28]
                ThreadImpl nextThread    = tm.NextThread;
                Context    ctx;

                if(currentThread != null)
                {
                    ctx = (Context)currentThread.SwappedOutContext;
 800ac40:	4926      	ldr	r1, [pc, #152]	; (800acdc <Context_ContextSwitch$5624+0xbc>)
 800ac42:	4a27      	ldr	r2, [pc, #156]	; (800ace0 <Context_ContextSwitch$5624+0xc0>)
 800ac44:	447a      	add	r2, pc
 800ac46:	4411      	add	r1, r2
 800ac48:	f7fb fb86 	bl	8006358 <TypeSystemManager_CastToType$4948>
                    //ctx.Registers.Assign( ref registers );

                    //
                    // update SP as well as the EXC_RETURN address
                    //
                    ctx.EXC_RETURN   = registers.EXC_RETURN;    
 800ac4c:	9907      	ldr	r1, [sp, #28]
 800ac4e:	680a      	ldr	r2, [r1, #0]
 800ac50:	60c2      	str	r2, [r0, #12]
                    ctx.StackPointer = AddressMath.Decrement( GetProcessStackPointer( ), RegistersOnStack.SwitcherFrameSize );                    
 800ac52:	9004      	str	r0, [sp, #16]
 800ac54:	f012 f8e0 	bl	801ce18 <CMSIS_STUB_SCB__get_PSP>
 800ac58:	2100      	movs	r1, #0
 800ac5a:	9109      	str	r1, [sp, #36]	; 0x24
 800ac5c:	aa09      	add	r2, sp, #36	; 0x24
 800ac5e:	3a08      	subs	r2, #8
 800ac60:	9003      	str	r0, [sp, #12]
 800ac62:	4610      	mov	r0, r2
 800ac64:	9a03      	ldr	r2, [sp, #12]
 800ac66:	9102      	str	r1, [sp, #8]
 800ac68:	4611      	mov	r1, r2
 800ac6a:	f7f8 fc76 	bl	800355a <UIntPtr_.ctor$2860>
 800ac6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac70:	900a      	str	r0, [sp, #40]	; 0x28
 800ac72:	9802      	ldr	r0, [sp, #8]
 800ac74:	900b      	str	r0, [sp, #44]	; 0x2c
                //--//

                //public unsafe UIntPtr StackFrame
                //{
                //    [RT.Inline]
                //    get
 800ac76:	990a      	ldr	r1, [sp, #40]	; 0x28
                    // SW frame
                    this.EXC_RETURN = other.EXC_RETURN;
                    this.CONTROL    = other.CONTROL;
                    this.R4         = other.R4;
                    this.R5         = other.R5;
                    this.R6         = other.R6;
 800ac78:	3928      	subs	r1, #40	; 0x28
 800ac7a:	900b      	str	r0, [sp, #44]	; 0x2c
 800ac7c:	aa0b      	add	r2, sp, #44	; 0x2c
 800ac7e:	f1a2 0008 	sub.w	r0, r2, #8
 800ac82:	f7f5 fe1b 	bl	80008bc <UIntPtr_.ctor$2864>
 800ac86:	990b      	ldr	r1, [sp, #44]	; 0x2c

                    //
                    // update SP as well as the EXC_RETURN address
                    //
                    ctx.EXC_RETURN   = registers.EXC_RETURN;    
                    ctx.StackPointer = AddressMath.Decrement( GetProcessStackPointer( ), RegistersOnStack.SwitcherFrameSize );                    
 800ac88:	9804      	ldr	r0, [sp, #16]
 800ac8a:	f7f9 f8dd 	bl	8003e48 <Context_set_StackPointer$5671>
                }
 800ac8e:	e7ff      	b.n	800ac90 <Context_ContextSwitch$5624+0x70>
            private static unsafe void PrepareStackForException( uint mode,
                                                                 Context.RegistersOnStack* ptr )
            {

                //
                // EXC_RETURN to go back to previous mode.
 800ac90:	9805      	ldr	r0, [sp, #20]
 800ac92:	69c0      	ldr	r0, [r0, #28]
                    //
                    ctx.EXC_RETURN   = registers.EXC_RETURN;    
                    ctx.StackPointer = AddressMath.Decrement( GetProcessStackPointer( ), RegistersOnStack.SwitcherFrameSize );                    
                }

                ctx = (Context)nextThread.SwappedOutContext;
 800ac94:	4911      	ldr	r1, [pc, #68]	; (800acdc <Context_ContextSwitch$5624+0xbc>)
 800ac96:	4a13      	ldr	r2, [pc, #76]	; (800ace4 <Context_ContextSwitch$5624+0xc4>)
 800ac98:	447a      	add	r2, pc
 800ac9a:	4411      	add	r1, r2
 800ac9c:	9201      	str	r2, [sp, #4]
 800ac9e:	f7fb fb5b 	bl	8006358 <TypeSystemManager_CastToType$4948>
 800aca2:	6881      	ldr	r1, [r0, #8]
 800aca4:	9108      	str	r1, [sp, #32]
 800aca6:	a908      	add	r1, sp, #32

                //
                // Pass PSP and EXC_RETURN down to the native portion of the 
                // PendSV handler we need to offset to the beginning of the frame
                //
                SetProcessStackPointer( ctx.StackPointer );
 800aca8:	3908      	subs	r1, #8
 800acaa:	9000      	str	r0, [sp, #0]
 800acac:	4608      	mov	r0, r1
 800acae:	f7f8 fc63 	bl	8003578 <UIntPtr_ToUInt32$2870>
 800acb2:	f012 f8bb 	bl	801ce2c <CMSIS_STUB_SCB__set_PSP>
                SetExcReturn          ( ctx.EXC_RETURN ); 
 800acb6:	9800      	ldr	r0, [sp, #0]
 800acb8:	68c0      	ldr	r0, [r0, #12]
 800acba:	f7fa ff69 	bl	8005b90 <ProcessorARMv7M_SetExcReturn$3279>
                    
                //
                // Update thread manager state and Thread.CurrentThread static field
                //
                tm.CurrentThread = nextThread;
 800acbe:	9805      	ldr	r0, [sp, #20]
 800acc0:	f7fa fe2a 	bl	8005918 <ThreadManager_set_CurrentThread$3192>
 800acc4:	4808      	ldr	r0, [pc, #32]	; (800ace8 <Context_ContextSwitch$5624+0xc8>)
 800acc6:	9901      	ldr	r1, [sp, #4]
 800acc8:	4408      	add	r0, r1
 800acca:	9a05      	ldr	r2, [sp, #20]
 800accc:	f8c0 20f8 	str.w	r2, [r0, #248]	; 0xf8
 800acd0:	b00c      	add	sp, #48	; 0x30
 800acd2:	bd80      	pop	{r7, pc}
 800acd4:	ffffeaac 	.word	0xffffeaac
 800acd8:	17ff6ba8 	.word	0x17ff6ba8
 800acdc:	e8012a9c 	.word	0xe8012a9c
 800ace0:	17ff6b8c 	.word	0x17ff6b8c
 800ace4:	17ff6b38 	.word	0x17ff6b38
 800ace8:	fffffe3c 	.word	0xfffffe3c

0800acec <Context_get_StackPointer$5632>:
 800acec:	b081      	sub	sp, #4
 800acee:	4601      	mov	r1, r0
 800acf0:	6880      	ldr	r0, [r0, #8]
 800acf2:	9100      	str	r1, [sp, #0]
 800acf4:	b001      	add	sp, #4
 800acf6:	4770      	bx	lr

0800acf8 <Context_set_StackPointer$5633>:
 800acf8:	b082      	sub	sp, #8
 800acfa:	460a      	mov	r2, r1
 800acfc:	4603      	mov	r3, r0
 800acfe:	6081      	str	r1, [r0, #8]
 800ad00:	9301      	str	r3, [sp, #4]
 800ad02:	9200      	str	r2, [sp, #0]
 800ad04:	b002      	add	sp, #8
 800ad06:	4770      	bx	lr

0800ad08 <Context_get_ProgramCounter$5634>:
            public override UIntPtr ProgramCounter
            {
                get
                {
                    //return Registers.PC;
                    return (UIntPtr)0;
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	f7f8 fc4c 	bl	80035a6 <UIntPtr_op_Explicit$2876>
 800ad0e:	bd80      	pop	{r7, pc}

0800ad10 <Context_set_ProgramCounter$5635>:
 800ad10:	4770      	bx	lr

0800ad12 <Context_ContextSwitch$5626>:
 800ad12:	b580      	push	{r7, lr}
 800ad14:	b082      	sub	sp, #8
 800ad16:	4601      	mov	r1, r0
 800ad18:	9001      	str	r0, [sp, #4]

                //
                //  Precondition?
                //

                ContextSwitch( ThreadManager.Instance, ref *PointerToFrame( currentStackPointer ) );
 800ad1a:	9100      	str	r1, [sp, #0]
 800ad1c:	f7ff ff80 	bl	800ac20 <Context_ContextSwitch$5624>
 800ad20:	b002      	add	sp, #8
 800ad22:	bd80      	pop	{r7, pc}

0800ad24 <Context_LongJump$5629>:
                Peripherals.Instance.ProcessInterrupt( );
            }

            [Inline]
            public static void FastInterruptHandlerWithoutContextSwitch( )
            {
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b084      	sub	sp, #16
 800ad28:	4812      	ldr	r0, [pc, #72]	; (800ad74 <Context_LongJump$5629+0x50>)
 800ad2a:	4913      	ldr	r1, [pc, #76]	; (800ad78 <Context_LongJump$5629+0x54>)
 800ad2c:	4479      	add	r1, pc
 800ad2e:	4408      	add	r0, r1
 800ad30:	6a40      	ldr	r0, [r0, #36]	; 0x24
            private static unsafe void PrepareStackForException( uint mode,
                                                                 Context.RegistersOnStack* ptr )
            {

                //
                // EXC_RETURN to go back to previous mode.
 800ad32:	69c0      	ldr	r0, [r0, #28]
            private static unsafe void LongJump( )
            {
                //
                // Retrieve next context from ThreadManager
                //
                Context currentThreadCtx = (ProcessorARMv7M.Context)ThreadManager.Instance.CurrentThread.SwappedOutContext;
 800ad34:	4a11      	ldr	r2, [pc, #68]	; (800ad7c <Context_LongJump$5629+0x58>)
 800ad36:	4411      	add	r1, r2
 800ad38:	f7fb fb0e 	bl	8006358 <TypeSystemManager_CastToType$4948>
 800ad3c:	6881      	ldr	r1, [r0, #8]
 800ad3e:	9101      	str	r1, [sp, #4]
 800ad40:	2100      	movs	r1, #0
 800ad42:	9102      	str	r1, [sp, #8]
                //--//

                //public unsafe UIntPtr StackFrame
                //{
                //    [RT.Inline]
                //    get
 800ad44:	9a01      	ldr	r2, [sp, #4]
                    }

                    return null;
                }

                public void Assign( ref RegistersOnStack other )
 800ad46:	3228      	adds	r2, #40	; 0x28
 800ad48:	9102      	str	r1, [sp, #8]
 800ad4a:	a902      	add	r1, sp, #8
 800ad4c:	3908      	subs	r1, #8
 800ad4e:	9000      	str	r0, [sp, #0]
 800ad50:	4608      	mov	r0, r1
 800ad52:	4611      	mov	r1, r2
 800ad54:	f7f5 fdb2 	bl	80008bc <UIntPtr_.ctor$2864>
 800ad58:	9802      	ldr	r0, [sp, #8]
 800ad5a:	9003      	str	r0, [sp, #12]
 800ad5c:	a803      	add	r0, sp, #12
                Context currentThreadCtx = (ProcessorARMv7M.Context)ThreadManager.Instance.CurrentThread.SwappedOutContext;
                                
                //
                // Set the PSP at R0 so that returning from the SVC handler will complete the work
                //
                SetProcessStackPointer(
 800ad5e:	3808      	subs	r0, #8
 800ad60:	f7f8 fc0a 	bl	8003578 <UIntPtr_ToUInt32$2870>
 800ad64:	f012 f862 	bl	801ce2c <CMSIS_STUB_SCB__set_PSP>
                    AddressMath.Increment( currentThreadCtx.StackPointer, ProcessorARMv7M.Context.RegistersOnStack.SwitcherFrameSize )
                    );

                SetExcReturn( currentThreadCtx.EXC_RETURN ); 
 800ad68:	9800      	ldr	r0, [sp, #0]
 800ad6a:	68c0      	ldr	r0, [r0, #12]
 800ad6c:	f7fa ff10 	bl	8005b90 <ProcessorARMv7M_SetExcReturn$3279>
 800ad70:	b004      	add	sp, #16
 800ad72:	bd80      	pop	{r7, pc}
 800ad74:	ffffeaac 	.word	0xffffeaac
 800ad78:	17ff6aa4 	.word	0x17ff6aa4
 800ad7c:	e8012a9c 	.word	0xe8012a9c

0800ad80 <SVC_Handler_Zelig>:
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b082      	sub	sp, #8
 800ad84:	4601      	mov	r1, r0
            //[RT.HardwareExceptionHandler( RT.HardwareException.Service )] // TODO: use LongJump instead of Service?
            [ExportedMethod]
            //[TS.WellKnownMethod( "Hardware_InvokeSVCHandler" )]
            private static unsafe void SVC_Handler_Zelig( uint* args )
            {
                SVC_Code svc_number = (SVC_Code)((byte*)args[6])[-2]; // svc number is at stacked PC offset - 2 bytes
 800ad86:	6980      	ldr	r0, [r0, #24]

                switch(svc_number)
 800ad88:	f810 0c02 	ldrb.w	r0, [r0, #-2]
 800ad8c:	3811      	subs	r0, #17
 800ad8e:	4602      	mov	r2, r0
 800ad90:	2800      	cmp	r0, #0
 800ad92:	9101      	str	r1, [sp, #4]
 800ad94:	9200      	str	r2, [sp, #0]
 800ad96:	d008      	beq.n	800adaa <SVC_Handler_Zelig+0x2a>
 800ad98:	e7ff      	b.n	800ad9a <SVC_Handler_Zelig+0x1a>
 800ad9a:	9800      	ldr	r0, [sp, #0]
 800ad9c:	2801      	cmp	r0, #1
 800ad9e:	d007      	beq.n	800adb0 <SVC_Handler_Zelig+0x30>
 800ada0:	e7ff      	b.n	800ada2 <SVC_Handler_Zelig+0x22>
 800ada2:	9800      	ldr	r0, [sp, #0]
 800ada4:	2802      	cmp	r0, #2
 800ada6:	d006      	beq.n	800adb6 <SVC_Handler_Zelig+0x36>
 800ada8:	e008      	b.n	800adbc <SVC_Handler_Zelig+0x3c>
                {
                    case SVC_Code.SupervisorCall__LongJump:
                        LongJump( );
 800adaa:	f7ff ffbb 	bl	800ad24 <Context_LongJump$5629>
                        break;
 800adae:	e00c      	b.n	800adca <SVC_Handler_Zelig+0x4a>
            //--//
            //--//
                       
            private static unsafe void FirstLongJump( )
            {
                LongJump( ); 
 800adb0:	f7ff ffb8 	bl	800ad24 <Context_LongJump$5629>
                    case SVC_Code.SupervisorCall__LongJump:
                        LongJump( );
                        break;
                    case SVC_Code.SupervisorCall__StartThreads:
                        FirstLongJump( );
                        break;
 800adb4:	e009      	b.n	800adca <SVC_Handler_Zelig+0x4a>
                //ProcessorARMv7M.SwitchToUnprivilegedMode( ); 
            }

            private static unsafe void LongJumpForRetireThread( )
            {
                LongJump( ); 
 800adb6:	f7ff ffb5 	bl	800ad24 <Context_LongJump$5629>
                    case SVC_Code.SupervisorCall__StartThreads:
                        FirstLongJump( );
                        break;
                    case SVC_Code.SupervisorCall__RetireThread:
                        LongJumpForRetireThread( );
                        break;
 800adba:	e006      	b.n	800adca <SVC_Handler_Zelig+0x4a>
 800adbc:	4804      	ldr	r0, [pc, #16]	; (800add0 <SVC_Handler_Zelig+0x50>)
 800adbe:	4905      	ldr	r1, [pc, #20]	; (800add4 <SVC_Handler_Zelig+0x54>)
 800adc0:	4479      	add	r1, pc
 800adc2:	5840      	ldr	r0, [r0, r1]
                [TS.AssumeReferenced] public UIntPtr R1;
                [TS.AssumeReferenced] public UIntPtr R2;
                [TS.AssumeReferenced] public UIntPtr R3;
                [TS.AssumeReferenced] public UIntPtr R12;
                [TS.AssumeReferenced] public UIntPtr LR;
                [TS.AssumeReferenced] public UIntPtr PC;
 800adc4:	f7f5 fa9e 	bl	8000304 <BugCheck_Raise$4648>
                    case SVC_Code.SupervisorCall__RetireThread:
                        LongJumpForRetireThread( );
                        break;
                    default:
                        BugCheck.Assert( false, BugCheck.StopCode.Impossible );
                        break;
 800adc8:	e7ff      	b.n	800adca <SVC_Handler_Zelig+0x4a>
 800adca:	b002      	add	sp, #8
 800adcc:	bd80      	pop	{r7, pc}
 800adce:	46c0      	nop			; (mov r8, r8)
 800add0:	e8025368 	.word	0xe8025368
 800add4:	17ff6a10 	.word	0x17ff6a10

0800add8 <PendSV_Handler_Zelig>:
 800add8:	b580      	push	{r7, lr}
 800adda:	b086      	sub	sp, #24
 800addc:	2000      	movs	r0, #0
 800adde:	9003      	str	r0, [sp, #12]
 800ade0:	9004      	str	r0, [sp, #16]
                [TS.AssumeReferenced] public UIntPtr R9;
                [TS.AssumeReferenced] public UIntPtr R10;
                [TS.AssumeReferenced] public UIntPtr R11;
                // HW stack frame: pushed upon entering PendSV_Handler
                [TS.AssumeReferenced] public UIntPtr R0;
                [TS.AssumeReferenced] public UIntPtr R1;
 800ade2:	9002      	str	r0, [sp, #8]
 800ade4:	f7f9 fc12 	bl	800460c <ProcessorARMv7M_DisableInterrupts$3259>
 800ade8:	9902      	ldr	r1, [sp, #8]
 800adea:	9104      	str	r1, [sp, #16]
 800adec:	9004      	str	r0, [sp, #16]
 800adee:	9003      	str	r0, [sp, #12]
                //BugCheck.Assert( ThreadManager.Instance.CurrentThread.SwappedOutContext.StackPointer == GetProcessStackPointer( ), BugCheck.StopCode.ContextSwitchFailed );
            }

            private static unsafe void ContextSwitch( )
            {
                ContextSwitch( GetProcessStackPointer() );
 800adf0:	f012 f812 	bl	801ce18 <CMSIS_STUB_SCB__get_PSP>
 800adf4:	9902      	ldr	r1, [sp, #8]
 800adf6:	9105      	str	r1, [sp, #20]
 800adf8:	aa05      	add	r2, sp, #20
 800adfa:	3a08      	subs	r2, #8
 800adfc:	9001      	str	r0, [sp, #4]
 800adfe:	4610      	mov	r0, r2
 800ae00:	9901      	ldr	r1, [sp, #4]
 800ae02:	f7f8 fbaa 	bl	800355a <UIntPtr_.ctor$2860>
 800ae06:	9805      	ldr	r0, [sp, #20]
 800ae08:	f7ff ff83 	bl	800ad12 <Context_ContextSwitch$5626>
            public struct RegistersOnStack
            {
                public const uint StackRegister          = EncDef.c_register_sp;
                public const uint LinkRegister           = EncDef.c_register_lr;
                public const uint ProgramCounterRegister = EncDef.c_register_pc;

 800ae0c:	9803      	ldr	r0, [sp, #12]
 800ae0e:	f7f9 fc1f 	bl	8004650 <ProcessorARMv7M_DisableInterruptsWithPriorityLevelHigherOrEqualTo$3266>
 800ae12:	b006      	add	sp, #24
 800ae14:	bd80      	pop	{r7, pc}
 800ae16:	46c0      	nop			; (mov r8, r8)

0800ae18 <Context_SwitchTo$5652>:
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b086      	sub	sp, #24
 800ae1c:	4601      	mov	r1, r0
 800ae1e:	4a16      	ldr	r2, [pc, #88]	; (800ae78 <Context_SwitchTo$5652+0x60>)
 800ae20:	4b16      	ldr	r3, [pc, #88]	; (800ae7c <Context_SwitchTo$5652+0x64>)
 800ae22:	447b      	add	r3, pc
 800ae24:	58d2      	ldr	r2, [r2, r3]
                //

                //
                //  Precondition?
                //

 800ae26:	9002      	str	r0, [sp, #8]
 800ae28:	4610      	mov	r0, r2
 800ae2a:	9301      	str	r3, [sp, #4]
 800ae2c:	9100      	str	r1, [sp, #0]
 800ae2e:	f7fa feaf 	bl	8005b90 <ProcessorARMv7M_SetExcReturn$3279>
 800ae32:	9802      	ldr	r0, [sp, #8]
 800ae34:	6881      	ldr	r1, [r0, #8]
 800ae36:	9103      	str	r1, [sp, #12]
 800ae38:	2100      	movs	r1, #0
 800ae3a:	9104      	str	r1, [sp, #16]
                //--//

                //public unsafe UIntPtr StackFrame
                //{
                //    [RT.Inline]
                //    get
 800ae3c:	9a03      	ldr	r2, [sp, #12]
                    }

                    return null;
                }

                public void Assign( ref RegistersOnStack other )
 800ae3e:	3268      	adds	r2, #104	; 0x68
 800ae40:	9104      	str	r1, [sp, #16]
 800ae42:	a904      	add	r1, sp, #16
 800ae44:	f1a1 0008 	sub.w	r0, r1, #8
 800ae48:	4611      	mov	r1, r2
 800ae4a:	f7f5 fd37 	bl	80008bc <UIntPtr_.ctor$2864>
 800ae4e:	9804      	ldr	r0, [sp, #16]
 800ae50:	9005      	str	r0, [sp, #20]
 800ae52:	a805      	add	r0, sp, #20

                ContextSwitch( ThreadManager.Instance, ref *PointerToFrame( currentStackPointer ) );

                //RT.BugCheck.Log( "[ContextSwitch] PSP=0x%08x", (int)GetProcessStackPointer( ) );

                //BugCheck.Assert( ThreadManager.Instance.CurrentThread.SwappedOutContext.StackPointer == GetProcessStackPointer( ), BugCheck.StopCode.ContextSwitchFailed );
 800ae54:	3808      	subs	r0, #8
 800ae56:	f7f8 fb8f 	bl	8003578 <UIntPtr_ToUInt32$2870>
 800ae5a:	f011 ffe7 	bl	801ce2c <CMSIS_STUB_SCB__set_PSP>
 800ae5e:	4808      	ldr	r0, [pc, #32]	; (800ae80 <Context_SwitchTo$5652+0x68>)
            }

            private static unsafe void ContextSwitch( )
            {
 800ae60:	9901      	ldr	r1, [sp, #4]
 800ae62:	5c40      	ldrb	r0, [r0, r1]
 800ae64:	f7fa fe24 	bl	8005ab0 <ProcessorARMv7M_RaiseSupervisorCall$3241>
 800ae68:	4806      	ldr	r0, [pc, #24]	; (800ae84 <Context_SwitchTo$5652+0x6c>)
 800ae6a:	9901      	ldr	r1, [sp, #4]
 800ae6c:	5840      	ldr	r0, [r0, r1]
                [TS.AssumeReferenced] public UIntPtr R1;
                [TS.AssumeReferenced] public UIntPtr R2;
                [TS.AssumeReferenced] public UIntPtr R3;
                [TS.AssumeReferenced] public UIntPtr R12;
                [TS.AssumeReferenced] public UIntPtr LR;
                [TS.AssumeReferenced] public UIntPtr PC;
 800ae6e:	f7f5 fa49 	bl	8000304 <BugCheck_Raise$4648>
 800ae72:	b006      	add	sp, #24
 800ae74:	bd80      	pop	{r7, pc}
 800ae76:	46c0      	nop			; (mov r8, r8)
 800ae78:	e802536c 	.word	0xe802536c
 800ae7c:	17ff69ae 	.word	0x17ff69ae
 800ae80:	e8025370 	.word	0xe8025370
 800ae84:	e8025374 	.word	0xe8025374

0800ae88 <Context_GetFirstStackPointerFromPhysicalStack$5669>:
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b088      	sub	sp, #32
 800ae8c:	4601      	mov	r1, r0
                LongJump( ); 
            }
            
            private unsafe UIntPtr GetFirstStackPointerFromPhysicalStack( ArrayImpl stackImpl )
            {
                return AddressMath.AlignToLowerBoundary(
 800ae8e:	9102      	str	r1, [sp, #8]
 800ae90:	f7f6 f8c2 	bl	8001018 <Array_GetEndDataPointer$3710>
 800ae94:	2100      	movs	r1, #0
 800ae96:	9103      	str	r1, [sp, #12]
 800ae98:	aa03      	add	r2, sp, #12
 800ae9a:	3a08      	subs	r2, #8
 800ae9c:	9001      	str	r0, [sp, #4]
 800ae9e:	4610      	mov	r0, r2
 800aea0:	9a01      	ldr	r2, [sp, #4]
 800aea2:	9100      	str	r1, [sp, #0]
 800aea4:	4611      	mov	r1, r2
 800aea6:	f7f5 fd09 	bl	80008bc <UIntPtr_.ctor$2864>
 800aeaa:	9803      	ldr	r0, [sp, #12]
 800aeac:	9004      	str	r0, [sp, #16]
 800aeae:	9800      	ldr	r0, [sp, #0]
 800aeb0:	9005      	str	r0, [sp, #20]
                    this.S11        = other.S11;
                    this.S12        = other.S12;
                    this.S13        = other.S13;
                    this.S14        = other.S14;
                    this.S15        = other.S15;
                    this.S16        = other.S16;
 800aeb2:	9904      	ldr	r1, [sp, #16]
                [TS.AssumeReferenced] public float   S15;
                [TS.AssumeReferenced] public UIntPtr FPSCR_1;
                [TS.AssumeReferenced] public UIntPtr FPSCR_2;

                //
                // Helper Methods
 800aeb4:	3948      	subs	r1, #72	; 0x48
 800aeb6:	9005      	str	r0, [sp, #20]
 800aeb8:	aa05      	add	r2, sp, #20
 800aeba:	f1a2 0008 	sub.w	r0, r2, #8
 800aebe:	f7f5 fcfd 	bl	80008bc <UIntPtr_.ctor$2864>
 800aec2:	9805      	ldr	r0, [sp, #20]
 800aec4:	9006      	str	r0, [sp, #24]
 800aec6:	a806      	add	r0, sp, #24
                    this.S0         = other.S0;
                    this.S1         = other.S1;
                    this.S2         = other.S2;
                    this.S3         = other.S3;
                    this.S4         = other.S4;
                    this.S5         = other.S5;
 800aec8:	3808      	subs	r0, #8
 800aeca:	f7f8 fb55 	bl	8003578 <UIntPtr_ToUInt32$2870>
 800aece:	f020 0107 	bic.w	r1, r0, #7
 800aed2:	9800      	ldr	r0, [sp, #0]
 800aed4:	9007      	str	r0, [sp, #28]
 800aed6:	aa07      	add	r2, sp, #28
 800aed8:	f1a2 0008 	sub.w	r0, r2, #8
 800aedc:	f7f8 fb3d 	bl	800355a <UIntPtr_.ctor$2860>
 800aee0:	9807      	ldr	r0, [sp, #28]
 800aee2:	b008      	add	sp, #32
 800aee4:	bd80      	pop	{r7, pc}

0800aee6 <RegistersOnStackNoFPContext_Assign$5831>:
 800aee6:	b082      	sub	sp, #8
 800aee8:	460a      	mov	r2, r1
 800aeea:	4603      	mov	r3, r0
                }

                public void Assign( ref RegistersOnStackNoFPContext other )
                {
                    // SW frame
                    this.EXC_RETURN = other.EXC_RETURN;
 800aeec:	f8d1 c000 	ldr.w	ip, [r1]
 800aef0:	f8c0 c008 	str.w	ip, [r0, #8]
                    this.CONTROL    = other.CONTROL;
 800aef4:	f8d1 c004 	ldr.w	ip, [r1, #4]
 800aef8:	f8c0 c00c 	str.w	ip, [r0, #12]
 800aefc:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800af00:	f8c0 c010 	str.w	ip, [r0, #16]
 800af04:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 800af08:	f8c0 c014 	str.w	ip, [r0, #20]
 800af0c:	f8d1 c010 	ldr.w	ip, [r1, #16]
 800af10:	f8c0 c018 	str.w	ip, [r0, #24]
 800af14:	f8d1 c014 	ldr.w	ip, [r1, #20]
 800af18:	f8c0 c01c 	str.w	ip, [r0, #28]
 800af1c:	f8d1 c018 	ldr.w	ip, [r1, #24]
 800af20:	f8c0 c020 	str.w	ip, [r0, #32]
 800af24:	f8d1 c01c 	ldr.w	ip, [r1, #28]
 800af28:	f8c0 c024 	str.w	ip, [r0, #36]	; 0x24
 800af2c:	f8d1 c020 	ldr.w	ip, [r1, #32]
 800af30:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
 800af34:	f8d1 c024 	ldr.w	ip, [r1, #36]	; 0x24
 800af38:	f8c0 c02c 	str.w	ip, [r0, #44]	; 0x2c
 800af3c:	f8d1 c028 	ldr.w	ip, [r1, #40]	; 0x28
 800af40:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
 800af44:	f8d1 c02c 	ldr.w	ip, [r1, #44]	; 0x2c
 800af48:	f8c0 c034 	str.w	ip, [r0, #52]	; 0x34
 800af4c:	f8d1 c030 	ldr.w	ip, [r1, #48]	; 0x30
 800af50:	f8c0 c038 	str.w	ip, [r0, #56]	; 0x38
 800af54:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
 800af58:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
 800af5c:	f8d1 c038 	ldr.w	ip, [r1, #56]	; 0x38
 800af60:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
 800af64:	f8d1 c03c 	ldr.w	ip, [r1, #60]	; 0x3c
 800af68:	f8c0 c044 	str.w	ip, [r0, #68]	; 0x44
 800af6c:	f8d1 c040 	ldr.w	ip, [r1, #64]	; 0x40
 800af70:	f8c0 c048 	str.w	ip, [r0, #72]	; 0x48
 800af74:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800af76:	64c1      	str	r1, [r0, #76]	; 0x4c
 800af78:	9301      	str	r3, [sp, #4]
 800af7a:	9200      	str	r2, [sp, #0]
 800af7c:	b002      	add	sp, #8
 800af7e:	4770      	bx	lr

0800af80 <Context_ContextSwitch$5662>:
            }

            public override void SetupForExceptionHandling( uint mode )
            {
                //
                // Stop any exception from happening
 800af80:	b580      	push	{r7, lr}
 800af82:	b08c      	sub	sp, #48	; 0x30
 800af84:	4925      	ldr	r1, [pc, #148]	; (800b01c <Context_ContextSwitch$5662+0x9c>)
 800af86:	4a26      	ldr	r2, [pc, #152]	; (800b020 <Context_ContextSwitch$5662+0xa0>)
 800af88:	447a      	add	r2, pc
 800af8a:	4411      	add	r1, r2
 800af8c:	6a4a      	ldr	r2, [r1, #36]	; 0x24
#region Tracking Collector and Exceptions  

            public override bool Unwind( )
            {
                throw new Exception( "Unwind not implemented" );
            }
 800af8e:	6a89      	ldr	r1, [r1, #40]	; 0x28
            {
                ThreadImpl currentThread = tm.CurrentThread;
                ThreadImpl nextThread    = tm.NextThread;
                Context    ctx;

                if(currentThread != null)
 800af90:	2a00      	cmp	r2, #0
 800af92:	9007      	str	r0, [sp, #28]
 800af94:	9206      	str	r2, [sp, #24]
 800af96:	9105      	str	r1, [sp, #20]
 800af98:	d024      	beq.n	800afe4 <Context_ContextSwitch$5662+0x64>
 800af9a:	e7ff      	b.n	800af9c <Context_ContextSwitch$5662+0x1c>
                    //SwitchToHandlerPrivilegedMode( );

                    //
                    // Set the stack pointer in the context to be teh current MSP
                    //
                    this.StackPointer = stack;
 800af9c:	9806      	ldr	r0, [sp, #24]
 800af9e:	69c1      	ldr	r1, [r0, #28]
                    //ctx.Registers.Assign( ref registers );

                    //
                    // update SP as well as the EXC_RETURN address
                    //     
                    ctx.EXC_RETURN   = registers.EXC_RETURN;                    
 800afa0:	9a07      	ldr	r2, [sp, #28]
 800afa2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800afa4:	60cb      	str	r3, [r1, #12]
                    ctx.StackPointer = AddressMath.Decrement( GetProcessStackPointer( ), RegistersOnStackFullFPContext.SwitcherFrameSize );
 800afa6:	9104      	str	r1, [sp, #16]
 800afa8:	f011 ff36 	bl	801ce18 <CMSIS_STUB_SCB__get_PSP>
 800afac:	2100      	movs	r1, #0
 800afae:	9109      	str	r1, [sp, #36]	; 0x24
 800afb0:	aa09      	add	r2, sp, #36	; 0x24
 800afb2:	3a08      	subs	r2, #8
 800afb4:	9003      	str	r0, [sp, #12]
 800afb6:	4610      	mov	r0, r2
 800afb8:	9a03      	ldr	r2, [sp, #12]
 800afba:	9102      	str	r1, [sp, #8]
 800afbc:	4611      	mov	r1, r2
 800afbe:	f7f8 facc 	bl	800355a <UIntPtr_.ctor$2860>
 800afc2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800afc4:	900a      	str	r0, [sp, #40]	; 0x28
 800afc6:	9802      	ldr	r0, [sp, #8]
 800afc8:	900b      	str	r0, [sp, #44]	; 0x2c
                    this.S11        = other.S11;
                    this.S12        = other.S12;
                    this.S13        = other.S13;
                    this.S14        = other.S14;
                    this.S15        = other.S15;
                    this.S16        = other.S16;
 800afca:	990a      	ldr	r1, [sp, #40]	; 0x28
                [TS.AssumeReferenced] public float   S15;
                [TS.AssumeReferenced] public UIntPtr FPSCR_1;
                [TS.AssumeReferenced] public UIntPtr FPSCR_2;

                //
                // Helper Methods
 800afcc:	3968      	subs	r1, #104	; 0x68
 800afce:	900b      	str	r0, [sp, #44]	; 0x2c
 800afd0:	aa0b      	add	r2, sp, #44	; 0x2c
 800afd2:	f1a2 0008 	sub.w	r0, r2, #8
 800afd6:	f7f5 fc71 	bl	80008bc <UIntPtr_.ctor$2864>
 800afda:	990b      	ldr	r1, [sp, #44]	; 0x2c

                    //
                    // update SP as well as the EXC_RETURN address
                    //     
                    ctx.EXC_RETURN   = registers.EXC_RETURN;                    
                    ctx.StackPointer = AddressMath.Decrement( GetProcessStackPointer( ), RegistersOnStackFullFPContext.SwitcherFrameSize );
 800afdc:	9804      	ldr	r0, [sp, #16]
 800afde:	f7f8 ff33 	bl	8003e48 <Context_set_StackPointer$5671>
                }
 800afe2:	e7ff      	b.n	800afe4 <Context_ContextSwitch$5662+0x64>
                    //SwitchToHandlerPrivilegedMode( );

                    //
                    // Set the stack pointer in the context to be teh current MSP
                    //
                    this.StackPointer = stack;
 800afe4:	9805      	ldr	r0, [sp, #20]
 800afe6:	69c1      	ldr	r1, [r0, #28]
 800afe8:	688a      	ldr	r2, [r1, #8]
 800afea:	9208      	str	r2, [sp, #32]
 800afec:	aa08      	add	r2, sp, #32

                //
                // Pass PSP and EXC_RETURN down to the native portion of the 
                // PendSV handler we need to offset to the beginning of the frame
                //
                SetProcessStackPointer( ctx.StackPointer );
 800afee:	f1a2 0008 	sub.w	r0, r2, #8
 800aff2:	9101      	str	r1, [sp, #4]
 800aff4:	f7f8 fac0 	bl	8003578 <UIntPtr_ToUInt32$2870>
 800aff8:	f011 ff18 	bl	801ce2c <CMSIS_STUB_SCB__set_PSP>
                SetExcReturn          ( ctx.EXC_RETURN ); 
 800affc:	9801      	ldr	r0, [sp, #4]
 800affe:	68c0      	ldr	r0, [r0, #12]
 800b000:	f7fa fdc6 	bl	8005b90 <ProcessorARMv7M_SetExcReturn$3279>
                    
                //
                // Update thread manager state and Thread.CurrentThread static field
                //
                tm.CurrentThread = nextThread;
 800b004:	9805      	ldr	r0, [sp, #20]
 800b006:	f7fa fc87 	bl	8005918 <ThreadManager_set_CurrentThread$3192>
 800b00a:	4806      	ldr	r0, [pc, #24]	; (800b024 <Context_ContextSwitch$5662+0xa4>)
 800b00c:	4906      	ldr	r1, [pc, #24]	; (800b028 <Context_ContextSwitch$5662+0xa8>)
 800b00e:	4479      	add	r1, pc
 800b010:	4408      	add	r0, r1
 800b012:	9905      	ldr	r1, [sp, #20]
 800b014:	f8c0 10f8 	str.w	r1, [r0, #248]	; 0xf8
 800b018:	b00c      	add	sp, #48	; 0x30
 800b01a:	bd80      	pop	{r7, pc}
 800b01c:	ffffeaac 	.word	0xffffeaac
 800b020:	17ff6848 	.word	0x17ff6848
 800b024:	fffffe3c 	.word	0xfffffe3c
 800b028:	17ff67c2 	.word	0x17ff67c2

0800b02c <Context_LongJump$5667>:
            }

            public override void SetupForExceptionHandling( uint mode )
            {
                //
                // Stop any exception from happening
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b084      	sub	sp, #16
 800b030:	4818      	ldr	r0, [pc, #96]	; (800b094 <Context_LongJump$5667+0x68>)
 800b032:	4919      	ldr	r1, [pc, #100]	; (800b098 <Context_LongJump$5667+0x6c>)
 800b034:	4479      	add	r1, pc
 800b036:	4408      	add	r0, r1
 800b038:	6a40      	ldr	r0, [r0, #36]	; 0x24
                    //SwitchToHandlerPrivilegedMode( );

                    //
                    // Set the stack pointer in the context to be teh current MSP
                    //
                    this.StackPointer = stack;
 800b03a:	69c0      	ldr	r0, [r0, #28]
 800b03c:	6881      	ldr	r1, [r0, #8]
 800b03e:	9101      	str	r1, [sp, #4]
 800b040:	2100      	movs	r1, #0
 800b042:	9102      	str	r1, [sp, #8]
                    this.S11        = other.S11;
                    this.S12        = other.S12;
                    this.S13        = other.S13;
                    this.S14        = other.S14;
                    this.S15        = other.S15;
                    this.S16        = other.S16;
 800b044:	9a01      	ldr	r2, [sp, #4]
                [TS.AssumeReferenced] public float   S8;
                [TS.AssumeReferenced] public float   S9;
                [TS.AssumeReferenced] public float   S10;
                [TS.AssumeReferenced] public float   S11;
                [TS.AssumeReferenced] public float   S12;
                [TS.AssumeReferenced] public float   S13;
 800b046:	3228      	adds	r2, #40	; 0x28
 800b048:	9102      	str	r1, [sp, #8]
 800b04a:	a902      	add	r1, sp, #8
 800b04c:	3908      	subs	r1, #8
 800b04e:	9000      	str	r0, [sp, #0]
 800b050:	4608      	mov	r0, r1
 800b052:	4611      	mov	r1, r2
 800b054:	f7f5 fc32 	bl	80008bc <UIntPtr_.ctor$2864>
 800b058:	9802      	ldr	r0, [sp, #8]
 800b05a:	9003      	str	r0, [sp, #12]
 800b05c:	a803      	add	r0, sp, #12
                Context currentThreadCtx = (ProcessorARMv7M_VFP.Context)ThreadManager.Instance.CurrentThread.SwappedOutContext;
                                
                //
                // Set the PSP at R0 so that returning from the SVC handler will complete the work
                //
                SetProcessStackPointer(
 800b05e:	3808      	subs	r0, #8
 800b060:	f7f8 fa8a 	bl	8003578 <UIntPtr_ToUInt32$2870>
 800b064:	f011 fee2 	bl	801ce2c <CMSIS_STUB_SCB__set_PSP>
                    AddressMath.Increment( currentThreadCtx.StackPointer, ProcessorARMv7M_VFP.Context.RegistersOnStackNoFPContext.SwitcherFrameSize )
                    );

                SetExcReturn( currentThreadCtx.EXC_RETURN );
 800b068:	9800      	ldr	r0, [sp, #0]
 800b06a:	68c0      	ldr	r0, [r0, #12]
 800b06c:	f7fa fd90 	bl	8005b90 <ProcessorARMv7M_SetExcReturn$3279>
            internal bool FloatingPointContextActive
            {
                [RT.Inline]
                get
                {
                    return CUSTOM_STUB_GetFPContextFlag( ) != 0u;
 800b070:	f011 ffa8 	bl	801cfc4 <CUSTOM_STUB_GetFPContextFlag>
 800b074:	2800      	cmp	r0, #0
 800b076:	bf18      	it	ne
 800b078:	2001      	movne	r0, #1
                [TS.AssumeReferenced] public float   S25;
                [TS.AssumeReferenced] public float   S26;
                [TS.AssumeReferenced] public float   S27;
                [TS.AssumeReferenced] public float   S28;
                [TS.AssumeReferenced] public float   S29;
                [TS.AssumeReferenced] public float   S30;
 800b07a:	2800      	cmp	r0, #0
 800b07c:	d007      	beq.n	800b08e <Context_LongJump$5667+0x62>
 800b07e:	e7ff      	b.n	800b080 <Context_LongJump$5667+0x54>
 800b080:	4806      	ldr	r0, [pc, #24]	; (800b09c <Context_LongJump$5667+0x70>)
 800b082:	4907      	ldr	r1, [pc, #28]	; (800b0a0 <Context_LongJump$5667+0x74>)
 800b084:	4479      	add	r1, pc
 800b086:	5840      	ldr	r0, [r0, r1]
                [TS.AssumeReferenced] public float   S31;
                // SW stack frame 
 800b088:	f7f5 f93c 	bl	8000304 <BugCheck_Raise$4648>
                [TS.AssumeReferenced] public uint    EXC_RETURN;
 800b08c:	e7ff      	b.n	800b08e <Context_LongJump$5667+0x62>
 800b08e:	b004      	add	sp, #16
 800b090:	bd80      	pop	{r7, pc}
 800b092:	46c0      	nop			; (mov r8, r8)
 800b094:	ffffeaac 	.word	0xffffeaac
 800b098:	17ff679c 	.word	0x17ff679c
 800b09c:	e80253ac 	.word	0xe80253ac
 800b0a0:	17ff674c 	.word	0x17ff674c

0800b0a4 <SVC_Handler_Zelig_VFP_NoFPContext>:
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b082      	sub	sp, #8
 800b0a8:	4601      	mov	r1, r0
            //[RT.HardwareExceptionHandler( RT.HardwareException.Service )] // TODO: use LongJump instead of Service?
            [ExportedMethod]
            //[TS.WellKnownMethod( "Hardware_InvokeSVCHandler" )]
            private static unsafe void SVC_Handler_Zelig_VFP_NoFPContext( uint* args )
            {
                SVC_Code svc_number = (SVC_Code)((byte*)args[6])[-2]; // svc number is at stacked PC offset - 2 bytes
 800b0aa:	6980      	ldr	r0, [r0, #24]

                switch(svc_number)
 800b0ac:	f810 0c02 	ldrb.w	r0, [r0, #-2]
 800b0b0:	3811      	subs	r0, #17
 800b0b2:	4602      	mov	r2, r0
 800b0b4:	2800      	cmp	r0, #0
 800b0b6:	9101      	str	r1, [sp, #4]
 800b0b8:	9200      	str	r2, [sp, #0]
 800b0ba:	d008      	beq.n	800b0ce <SVC_Handler_Zelig_VFP_NoFPContext+0x2a>
 800b0bc:	e7ff      	b.n	800b0be <SVC_Handler_Zelig_VFP_NoFPContext+0x1a>
 800b0be:	9800      	ldr	r0, [sp, #0]
 800b0c0:	2801      	cmp	r0, #1
 800b0c2:	d007      	beq.n	800b0d4 <SVC_Handler_Zelig_VFP_NoFPContext+0x30>
 800b0c4:	e7ff      	b.n	800b0c6 <SVC_Handler_Zelig_VFP_NoFPContext+0x22>
 800b0c6:	9800      	ldr	r0, [sp, #0]
 800b0c8:	2802      	cmp	r0, #2
 800b0ca:	d006      	beq.n	800b0da <SVC_Handler_Zelig_VFP_NoFPContext+0x36>
 800b0cc:	e008      	b.n	800b0e0 <SVC_Handler_Zelig_VFP_NoFPContext+0x3c>
                {
                    case SVC_Code.SupervisorCall__LongJump:
                        LongJump( ); 
 800b0ce:	f7ff ffad 	bl	800b02c <Context_LongJump$5667>
                        break;
 800b0d2:	e00c      	b.n	800b0ee <SVC_Handler_Zelig_VFP_NoFPContext+0x4a>
            //--//
            //--//
            
            private static unsafe void FirstLongJump( )
            {
                LongJump( ); 
 800b0d4:	f7ff ffaa 	bl	800b02c <Context_LongJump$5667>
                    case SVC_Code.SupervisorCall__LongJump:
                        LongJump( ); 
                        break;
                    case SVC_Code.SupervisorCall__StartThreads:
                        FirstLongJump( );
                        break;
 800b0d8:	e009      	b.n	800b0ee <SVC_Handler_Zelig_VFP_NoFPContext+0x4a>
                //ProcessorARMv7M.SwitchToUnprivilegedMode( ); 
            }

            private static unsafe void LongJumpForRetireThread( )
            {
                LongJump( ); 
 800b0da:	f7ff ffa7 	bl	800b02c <Context_LongJump$5667>
                    case SVC_Code.SupervisorCall__StartThreads:
                        FirstLongJump( );
                        break;
                    case SVC_Code.SupervisorCall__RetireThread:
                        LongJumpForRetireThread( );
                        break;
 800b0de:	e006      	b.n	800b0ee <SVC_Handler_Zelig_VFP_NoFPContext+0x4a>
 800b0e0:	4804      	ldr	r0, [pc, #16]	; (800b0f4 <SVC_Handler_Zelig_VFP_NoFPContext+0x50>)
 800b0e2:	4905      	ldr	r1, [pc, #20]	; (800b0f8 <SVC_Handler_Zelig_VFP_NoFPContext+0x54>)
 800b0e4:	4479      	add	r1, pc
 800b0e6:	5840      	ldr	r0, [r0, r1]
                [TS.AssumeReferenced] public float   S27;
                [TS.AssumeReferenced] public float   S28;
                [TS.AssumeReferenced] public float   S29;
                [TS.AssumeReferenced] public float   S30;
                [TS.AssumeReferenced] public float   S31;
                // SW stack frame 
 800b0e8:	f7f5 f90c 	bl	8000304 <BugCheck_Raise$4648>
                    case SVC_Code.SupervisorCall__RetireThread:
                        LongJumpForRetireThread( );
                        break;
                    default:
                        BugCheck.Assert( false, BugCheck.StopCode.Impossible );
                        break;
 800b0ec:	e7ff      	b.n	800b0ee <SVC_Handler_Zelig_VFP_NoFPContext+0x4a>
 800b0ee:	b002      	add	sp, #8
 800b0f0:	bd80      	pop	{r7, pc}
 800b0f2:	46c0      	nop			; (mov r8, r8)
 800b0f4:	e80253b0 	.word	0xe80253b0
 800b0f8:	17ff66ec 	.word	0x17ff66ec

0800b0fc <PendSV_Handler_Zelig_VFP_FullFPContext>:
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b086      	sub	sp, #24
 800b100:	2000      	movs	r0, #0
 800b102:	9002      	str	r0, [sp, #8]
 800b104:	9003      	str	r0, [sp, #12]
                [TS.AssumeReferenced] public float   S22;
                [TS.AssumeReferenced] public float   S23;
                [TS.AssumeReferenced] public float   S24;
                [TS.AssumeReferenced] public float   S25;
                [TS.AssumeReferenced] public float   S26;
                [TS.AssumeReferenced] public float   S27;
 800b106:	9001      	str	r0, [sp, #4]
 800b108:	f7f9 fa80 	bl	800460c <ProcessorARMv7M_DisableInterrupts$3259>
 800b10c:	9901      	ldr	r1, [sp, #4]
 800b10e:	9103      	str	r1, [sp, #12]
 800b110:	9003      	str	r0, [sp, #12]
 800b112:	9002      	str	r0, [sp, #8]
                ThreadImpl.CurrentThread = nextThread;
            }
                        
            private static unsafe void ContextSwitchFull( )
            {
                ContextSwitch( ThreadManager.Instance, ref *PointerToFullFrame( GetProcessStackPointer( ) ) ); 
 800b114:	f011 fe80 	bl	801ce18 <CMSIS_STUB_SCB__get_PSP>
 800b118:	9901      	ldr	r1, [sp, #4]
 800b11a:	9104      	str	r1, [sp, #16]
 800b11c:	aa04      	add	r2, sp, #16
 800b11e:	3a08      	subs	r2, #8
 800b120:	9000      	str	r0, [sp, #0]
 800b122:	4610      	mov	r0, r2
 800b124:	9900      	ldr	r1, [sp, #0]
 800b126:	f7f8 fa18 	bl	800355a <UIntPtr_.ctor$2860>
 800b12a:	9804      	ldr	r0, [sp, #16]
 800b12c:	9005      	str	r0, [sp, #20]
 800b12e:	f7ff ff27 	bl	800af80 <Context_ContextSwitch$5662>
            public struct RegistersOnStackFullFPContext 
            {
                public const uint StackRegister          = EncDef.c_register_sp;
                public const uint LinkRegister           = EncDef.c_register_lr;
                public const uint ProgramCounterRegister = EncDef.c_register_pc;

 800b132:	9802      	ldr	r0, [sp, #8]
 800b134:	f7f9 fa8c 	bl	8004650 <ProcessorARMv7M_DisableInterruptsWithPriorityLevelHigherOrEqualTo$3266>
 800b138:	b006      	add	sp, #24
 800b13a:	bd80      	pop	{r7, pc}

0800b13c <PendSV_Handler_Zelig_VFP_NoFPContext>:
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b086      	sub	sp, #24
 800b140:	2000      	movs	r0, #0
 800b142:	9002      	str	r0, [sp, #8]
 800b144:	9003      	str	r0, [sp, #12]
                [TS.AssumeReferenced] public float   S22;
                [TS.AssumeReferenced] public float   S23;
                [TS.AssumeReferenced] public float   S24;
                [TS.AssumeReferenced] public float   S25;
                [TS.AssumeReferenced] public float   S26;
                [TS.AssumeReferenced] public float   S27;
 800b146:	9001      	str	r0, [sp, #4]
 800b148:	f7f9 fa60 	bl	800460c <ProcessorARMv7M_DisableInterrupts$3259>
 800b14c:	9901      	ldr	r1, [sp, #4]
 800b14e:	9103      	str	r1, [sp, #12]
 800b150:	9003      	str	r0, [sp, #12]
 800b152:	9002      	str	r0, [sp, #8]
                ContextSwitch( ThreadManager.Instance, ref *PointerToFullFrame( GetProcessStackPointer( ) ) ); 
            }

            private static unsafe void ContextSwitch( )
            {
                ContextSwitch( ThreadManager.Instance, ref *PointerToSimpleFrame( GetProcessStackPointer( ) ) ); 
 800b154:	f011 fe60 	bl	801ce18 <CMSIS_STUB_SCB__get_PSP>
 800b158:	9901      	ldr	r1, [sp, #4]
 800b15a:	9104      	str	r1, [sp, #16]
 800b15c:	aa04      	add	r2, sp, #16
 800b15e:	3a08      	subs	r2, #8
 800b160:	9000      	str	r0, [sp, #0]
 800b162:	4610      	mov	r0, r2
 800b164:	9900      	ldr	r1, [sp, #0]
 800b166:	f7f8 f9f8 	bl	800355a <UIntPtr_.ctor$2860>
 800b16a:	9804      	ldr	r0, [sp, #16]
 800b16c:	9005      	str	r0, [sp, #20]
 800b16e:	f7f5 f917 	bl	80003a0 <Context_ContextSwitch$5660>
            public struct RegistersOnStackFullFPContext 
            {
                public const uint StackRegister          = EncDef.c_register_sp;
                public const uint LinkRegister           = EncDef.c_register_lr;
                public const uint ProgramCounterRegister = EncDef.c_register_pc;

 800b172:	9802      	ldr	r0, [sp, #8]
 800b174:	f7f9 fa6c 	bl	8004650 <ProcessorARMv7M_DisableInterruptsWithPriorityLevelHigherOrEqualTo$3266>
 800b178:	b006      	add	sp, #24
 800b17a:	bd80      	pop	{r7, pc}

0800b17c <CallbackHandler_Worker$5703>:
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b084      	sub	sp, #16
                    m_node = null;
                    m_event.Set();
                }

                private void Worker()
                {
 800b180:	9003      	str	r0, [sp, #12]
 800b182:	e7ff      	b.n	800b184 <CallbackHandler_Worker$5703+0x8>
                    while(true)
                    {
                        m_event.WaitOne();
 800b184:	9803      	ldr	r0, [sp, #12]
 800b186:	6900      	ldr	r0, [r0, #16]
 800b188:	f7f9 fd3a 	bl	8004c00 <WaitHandle_WaitOne$7790>

                        KernelNode< TimerImpl > node = m_node;
 800b18c:	9903      	ldr	r1, [sp, #12]
 800b18e:	694a      	ldr	r2, [r1, #20]
                        if(node == null)
 800b190:	2a00      	cmp	r2, #0
 800b192:	9002      	str	r0, [sp, #8]
 800b194:	9201      	str	r2, [sp, #4]
 800b196:	d102      	bne.n	800b19e <CallbackHandler_Worker$5703+0x22>
 800b198:	e7ff      	b.n	800b19a <CallbackHandler_Worker$5703+0x1e>
 800b19a:	b004      	add	sp, #16
 800b19c:	bd80      	pop	{r7, pc}
                    // At most the controller will wake up early for the next timer, not late.
                    //
                    node.RemoveFromList();
                }
            }

 800b19e:	9801      	ldr	r0, [sp, #4]
 800b1a0:	6900      	ldr	r0, [r0, #16]
                            break;
                        }

                        TimerImpl target = node.Target;

                        node.Target.Execute();
 800b1a2:	f000 f807 	bl	800b1b4 <Timer_Execute$3922>

                        m_owner.Done( this, node );
 800b1a6:	9803      	ldr	r0, [sp, #12]
 800b1a8:	6880      	ldr	r0, [r0, #8]
 800b1aa:	9903      	ldr	r1, [sp, #12]
 800b1ac:	9a01      	ldr	r2, [sp, #4]
 800b1ae:	f7fe fef3 	bl	8009f98 <TimerPool_Done$5355>
                    }
 800b1b2:	e7e7      	b.n	800b184 <CallbackHandler_Worker$5703+0x8>

0800b1b4 <Timer_Execute$3922>:
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b086      	sub	sp, #24
 800b1b8:	4601      	mov	r1, r0
        void Execute()
        {
            TimerCallback callback;
            object        state;

            lock(this.Pool)
 800b1ba:	9004      	str	r0, [sp, #16]
 800b1bc:	9103      	str	r1, [sp, #12]
 800b1be:	f002 fff9 	bl	800e1b4 <Timer_get_Pool$3924>
 800b1c2:	4601      	mov	r1, r0
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	f88d 2014 	strb.w	r2, [sp, #20]
 800b1ca:	aa05      	add	r2, sp, #20
 800b1cc:	9102      	str	r1, [sp, #8]
 800b1ce:	4611      	mov	r1, r2
 800b1d0:	f7fb fece 	bl	8006f70 <Monitor_Enter$7710>
            {
                callback = m_callback;
 800b1d4:	9804      	ldr	r0, [sp, #16]
 800b1d6:	6881      	ldr	r1, [r0, #8]
                state    = m_state;
 800b1d8:	68c2      	ldr	r2, [r0, #12]

                if(callback != null)
 800b1da:	2900      	cmp	r1, #0
 800b1dc:	9101      	str	r1, [sp, #4]
 800b1de:	9200      	str	r2, [sp, #0]
 800b1e0:	d004      	beq.n	800b1ec <Timer_Execute$3922+0x38>
 800b1e2:	e7ff      	b.n	800b1e4 <Timer_Execute$3922+0x30>
                {
                    SetNextTrigger();
 800b1e4:	9803      	ldr	r0, [sp, #12]
 800b1e6:	f002 ffa9 	bl	800e13c <Timer_SetNextTrigger$3918>
                }
 800b1ea:	e7ff      	b.n	800b1ec <Timer_Execute$3922+0x38>
 800b1ec:	f89d 0014 	ldrb.w	r0, [sp, #20]
            }
 800b1f0:	2800      	cmp	r0, #0
 800b1f2:	d004      	beq.n	800b1fe <Timer_Execute$3922+0x4a>
 800b1f4:	e7ff      	b.n	800b1f6 <Timer_Execute$3922+0x42>
 800b1f6:	9802      	ldr	r0, [sp, #8]
 800b1f8:	f7fb ff00 	bl	8006ffc <Monitor_Exit$3926>
 800b1fc:	e7ff      	b.n	800b1fe <Timer_Execute$3922+0x4a>

            try
            {
                if(callback != null)
 800b1fe:	9801      	ldr	r0, [sp, #4]
 800b200:	2800      	cmp	r0, #0
 800b202:	d005      	beq.n	800b210 <Timer_Execute$3922+0x5c>
 800b204:	e7ff      	b.n	800b206 <Timer_Execute$3922+0x52>
                {
                    callback( state );
 800b206:	9801      	ldr	r0, [sp, #4]
 800b208:	9900      	ldr	r1, [sp, #0]
 800b20a:	f7fb fbf1 	bl	80069f0 <TimerCallback_Invoke$7778>
                }
 800b20e:	e7ff      	b.n	800b210 <Timer_Execute$3922+0x5c>
            }
 800b210:	e7ff      	b.n	800b212 <Timer_Execute$3922+0x5e>
 800b212:	2000      	movs	r0, #0
 800b214:	9903      	ldr	r1, [sp, #12]
 800b216:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
 800b21a:	b006      	add	sp, #24
 800b21c:	bd80      	pop	{r7, pc}

0800b21e <ArgumentException_.ctor$6062>:
 800b21e:	b580      	push	{r7, lr}
 800b220:	b082      	sub	sp, #8
 800b222:	4601      	mov	r1, r0
////[ComDefaultInterface( typeof( _Activator ) )]
    public sealed class Activator //: _Activator
    {
////    internal const int LookupMask = 0x000000FF;
////    internal const BindingFlags ConLookup = (BindingFlags)(BindingFlags.Instance | BindingFlags.Public);
////    internal const BindingFlags ConstructorDefault = BindingFlags.Instance | BindingFlags.Public | BindingFlags.CreateInstance;
 800b224:	9101      	str	r1, [sp, #4]
 800b226:	f000 f802 	bl	800b22e <SystemException_.ctor$7365>
 800b22a:	b002      	add	sp, #8
 800b22c:	bd80      	pop	{r7, pc}

0800b22e <SystemException_.ctor$7365>:
 800b22e:	b580      	push	{r7, lr}
 800b230:	b082      	sub	sp, #8
 800b232:	4601      	mov	r1, r0
**
**
=============================================================================*/

namespace System
{
 800b234:	9101      	str	r1, [sp, #4]
 800b236:	f7fe f888 	bl	800934a <Exception_.ctor$7036>
 800b23a:	b002      	add	sp, #8
 800b23c:	bd80      	pop	{r7, pc}

0800b23e <SystemException_.ctor$7366>:
 800b23e:	b580      	push	{r7, lr}
 800b240:	b082      	sub	sp, #8
 800b242:	460a      	mov	r2, r1
 800b244:	4603      	mov	r3, r0
        public SystemException()
#endif
        {
        }

        public SystemException( String message ) : base( message )
 800b246:	9201      	str	r2, [sp, #4]
 800b248:	9300      	str	r3, [sp, #0]
 800b24a:	f7ff fce1 	bl	800ac10 <Exception_.ctor$7037>
 800b24e:	b002      	add	sp, #8
 800b250:	bd80      	pop	{r7, pc}
 800b252:	46c0      	nop			; (mov r8, r8)

0800b254 <Exception_GetMessageFromNativeResources$7044>:
 800b254:	b580      	push	{r7, lr}
 800b256:	b082      	sub	sp, #8
 800b258:	4601      	mov	r1, r0
        internal static String GetMessageFromNativeResources( ExceptionMessageKind kind )
        {
            //
            // BUGBUG: This needs to be implemented as an internal call.
            // 
            return kind.ToString();
 800b25a:	4a09      	ldr	r2, [pc, #36]	; (800b280 <Exception_GetMessageFromNativeResources$7044+0x2c>)
 800b25c:	4b09      	ldr	r3, [pc, #36]	; (800b284 <Exception_GetMessageFromNativeResources$7044+0x30>)
 800b25e:	447b      	add	r3, pc
 800b260:	441a      	add	r2, r3
 800b262:	f8df c024 	ldr.w	ip, [pc, #36]	; 800b288 <Exception_GetMessageFromNativeResources$7044+0x34>
 800b266:	4463      	add	r3, ip
 800b268:	9001      	str	r0, [sp, #4]
 800b26a:	4610      	mov	r0, r2
 800b26c:	9100      	str	r1, [sp, #0]
 800b26e:	4619      	mov	r1, r3
 800b270:	f7f5 faa6 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800b274:	9901      	ldr	r1, [sp, #4]
 800b276:	6081      	str	r1, [r0, #8]
 800b278:	f7f5 ff10 	bl	800109c <Object_ToString$2229>
 800b27c:	b002      	add	sp, #8
 800b27e:	bd80      	pop	{r7, pc}
 800b280:	ffffea38 	.word	0xffffea38
 800b284:	17ff6572 	.word	0x17ff6572
 800b288:	e8012d7c 	.word	0xe8012d7c

0800b28c <FormatException_.ctor$7045>:
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b082      	sub	sp, #8
 800b290:	4601      	mov	r1, r0
    using System.Runtime.Serialization;
////using System.Runtime.Versioning;
////using System.Diagnostics;
////using System.Security.Permissions;
////using System.Security;
////using System.IO;
 800b292:	9101      	str	r1, [sp, #4]
 800b294:	f7ff ffcb 	bl	800b22e <SystemException_.ctor$7365>
 800b298:	b002      	add	sp, #8
 800b29a:	bd80      	pop	{r7, pc}

0800b29c <InvalidOperationException_.ctor$7124>:
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b082      	sub	sp, #8
 800b2a0:	4601      	mov	r1, r0
    public class InvalidCastException : SystemException
    {
#if EXCEPTION_STRINGS
        public InvalidCastException() : base( Environment.GetResourceString( "Arg_InvalidCastException" ) )
#else
        public InvalidCastException()
 800b2a2:	9101      	str	r1, [sp, #4]
 800b2a4:	f7ff ffc3 	bl	800b22e <SystemException_.ctor$7365>
 800b2a8:	b002      	add	sp, #8
 800b2aa:	bd80      	pop	{r7, pc}

0800b2ac <InvalidOperationException_.ctor$7125>:
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b082      	sub	sp, #8
 800b2b0:	4601      	mov	r1, r0
        public InvalidOperationException()
#endif
        {
        }

        public InvalidOperationException( String message ) : base( message )
 800b2b2:	4a05      	ldr	r2, [pc, #20]	; (800b2c8 <InvalidOperationException_.ctor$7125+0x1c>)
 800b2b4:	4b05      	ldr	r3, [pc, #20]	; (800b2cc <InvalidOperationException_.ctor$7125+0x20>)
 800b2b6:	447b      	add	r3, pc
 800b2b8:	441a      	add	r2, r3
 800b2ba:	9101      	str	r1, [sp, #4]
 800b2bc:	4611      	mov	r1, r2
 800b2be:	f7ff ffbe 	bl	800b23e <SystemException_.ctor$7366>
 800b2c2:	b002      	add	sp, #8
 800b2c4:	bd80      	pop	{r7, pc}
 800b2c6:	46c0      	nop			; (mov r8, r8)
 800b2c8:	e801309c 	.word	0xe801309c
 800b2cc:	17ff651a 	.word	0x17ff651a

0800b2d0 <Math_Min$7167>:
 800b2d0:	b083      	sub	sp, #12
 800b2d2:	460a      	mov	r2, r1
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	4288      	cmp	r0, r1
 800b2d8:	9202      	str	r2, [sp, #8]
 800b2da:	9301      	str	r3, [sp, #4]
 800b2dc:	d803      	bhi.n	800b2e6 <Math_Min$7167+0x16>
 800b2de:	e7ff      	b.n	800b2e0 <Math_Min$7167+0x10>
 800b2e0:	9801      	ldr	r0, [sp, #4]
 800b2e2:	9000      	str	r0, [sp, #0]
 800b2e4:	e002      	b.n	800b2ec <Math_Min$7167+0x1c>
 800b2e6:	9802      	ldr	r0, [sp, #8]
 800b2e8:	9000      	str	r0, [sp, #0]
 800b2ea:	e7ff      	b.n	800b2ec <Math_Min$7167+0x1c>
 800b2ec:	9800      	ldr	r0, [sp, #0]
 800b2ee:	b003      	add	sp, #12
 800b2f0:	4770      	bx	lr
 800b2f2:	46c0      	nop			; (mov r8, r8)

0800b2f4 <Number_.ctor$7233>:
 800b2f4:	b570      	push	{r4, r5, r6, lr}
 800b2f6:	b090      	sub	sp, #64	; 0x40
 800b2f8:	460a      	mov	r2, r1
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	468c      	mov	ip, r1
 800b2fe:	f8df e0dc 	ldr.w	lr, [pc, #220]	; 800b3dc <Number_.ctor$7233+0xe8>
 800b302:	4c37      	ldr	r4, [pc, #220]	; (800b3e0 <Number_.ctor$7233+0xec>)
 800b304:	447c      	add	r4, pc
 800b306:	f85e e004 	ldr.w	lr, [lr, r4]
 800b30a:	4d36      	ldr	r5, [pc, #216]	; (800b3e4 <Number_.ctor$7233+0xf0>)
 800b30c:	4425      	add	r5, r4
 800b30e:	4e36      	ldr	r6, [pc, #216]	; (800b3e8 <Number_.ctor$7233+0xf4>)
 800b310:	4434      	add	r4, r6
 800b312:	900f      	str	r0, [sp, #60]	; 0x3c
 800b314:	4628      	mov	r0, r5
 800b316:	910e      	str	r1, [sp, #56]	; 0x38
 800b318:	4621      	mov	r1, r4
 800b31a:	920d      	str	r2, [sp, #52]	; 0x34
 800b31c:	4672      	mov	r2, lr
 800b31e:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 800b322:	930b      	str	r3, [sp, #44]	; 0x2c
 800b324:	f7f6 ff3c 	bl	80021a0 <DefaultTypeSystemManager_AllocateArray$4962>
 800b328:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b32a:	6148      	str	r0, [r1, #20]
 800b32c:	200a      	movs	r0, #10
 800b32e:	6088      	str	r0, [r1, #8]
 800b330:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b332:	2800      	cmp	r0, #0
 800b334:	db06      	blt.n	800b344 <Number_.ctor$7233+0x50>
 800b336:	e7ff      	b.n	800b338 <Number_.ctor$7233+0x44>
 800b338:	2000      	movs	r0, #0
 800b33a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b33c:	7408      	strb	r0, [r1, #16]
 800b33e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b340:	900a      	str	r0, [sp, #40]	; 0x28
 800b342:	e006      	b.n	800b352 <Number_.ctor$7233+0x5e>
 800b344:	2001      	movs	r0, #1
 800b346:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b348:	7408      	strb	r0, [r1, #16]
 800b34a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b34c:	4242      	negs	r2, r0
 800b34e:	920a      	str	r2, [sp, #40]	; 0x28
 800b350:	e7ff      	b.n	800b352 <Number_.ctor$7233+0x5e>
 800b352:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b354:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b356:	694a      	ldr	r2, [r1, #20]
 800b358:	4b24      	ldr	r3, [pc, #144]	; (800b3ec <Number_.ctor$7233+0xf8>)
 800b35a:	f8df c094 	ldr.w	ip, [pc, #148]	; 800b3f0 <Number_.ctor$7233+0xfc>
 800b35e:	44fc      	add	ip, pc
 800b360:	f853 100c 	ldr.w	r1, [r3, ip]
 800b364:	2300      	movs	r3, #0
 800b366:	9009      	str	r0, [sp, #36]	; 0x24
 800b368:	4610      	mov	r0, r2
 800b36a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b36c:	9308      	str	r3, [sp, #32]
 800b36e:	f000 f841 	bl	800b3f4 <Number_Int32ToDecChars$7271>
 800b372:	4601      	mov	r1, r0
 800b374:	f1c0 000a 	rsb	r0, r0, #10
 800b378:	4602      	mov	r2, r0
 800b37a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b37c:	60d8      	str	r0, [r3, #12]
 800b37e:	9808      	ldr	r0, [sp, #32]
 800b380:	9207      	str	r2, [sp, #28]
 800b382:	9106      	str	r1, [sp, #24]
 800b384:	9005      	str	r0, [sp, #20]
 800b386:	e7ff      	b.n	800b388 <Number_.ctor$7233+0x94>
 800b388:	9805      	ldr	r0, [sp, #20]
 800b38a:	9907      	ldr	r1, [sp, #28]
 800b38c:	9a06      	ldr	r2, [sp, #24]
 800b38e:	2901      	cmp	r1, #1
 800b390:	4603      	mov	r3, r0
 800b392:	9004      	str	r0, [sp, #16]
 800b394:	9103      	str	r1, [sp, #12]
 800b396:	9202      	str	r2, [sp, #8]
 800b398:	9301      	str	r3, [sp, #4]
 800b39a:	db15      	blt.n	800b3c8 <Number_.ctor$7233+0xd4>
 800b39c:	e7ff      	b.n	800b39e <Number_.ctor$7233+0xaa>
 800b39e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b3a0:	6941      	ldr	r1, [r0, #20]
 800b3a2:	310c      	adds	r1, #12
 800b3a4:	9a02      	ldr	r2, [sp, #8]
 800b3a6:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 800b3aa:	f8dd c010 	ldr.w	ip, [sp, #16]
 800b3ae:	f821 301c 	strh.w	r3, [r1, ip, lsl #1]
 800b3b2:	f10c 0101 	add.w	r1, ip, #1
 800b3b6:	1c53      	adds	r3, r2, #1
 800b3b8:	f8dd e00c 	ldr.w	lr, [sp, #12]
 800b3bc:	f1ae 0401 	sub.w	r4, lr, #1
 800b3c0:	9407      	str	r4, [sp, #28]
 800b3c2:	9306      	str	r3, [sp, #24]
 800b3c4:	9105      	str	r1, [sp, #20]
 800b3c6:	e7df      	b.n	800b388 <Number_.ctor$7233+0x94>
 800b3c8:	9801      	ldr	r0, [sp, #4]
 800b3ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b3cc:	694a      	ldr	r2, [r1, #20]
 800b3ce:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	8182      	strh	r2, [r0, #12]
 800b3d6:	b010      	add	sp, #64	; 0x40
 800b3d8:	bd70      	pop	{r4, r5, r6, pc}
 800b3da:	46c0      	nop			; (mov r8, r8)
 800b3dc:	e80253b8 	.word	0xe80253b8
 800b3e0:	17ff64cc 	.word	0x17ff64cc
 800b3e4:	ffffea38 	.word	0xffffea38
 800b3e8:	e801031c 	.word	0xe801031c
 800b3ec:	e80253bc 	.word	0xe80253bc
 800b3f0:	17ff6472 	.word	0x17ff6472

0800b3f4 <Number_Int32ToDecChars$7271>:
 800b3f4:	b5b0      	push	{r4, r5, r7, lr}
 800b3f6:	b08c      	sub	sp, #48	; 0x30
 800b3f8:	469c      	mov	ip, r3
 800b3fa:	4696      	mov	lr, r2
 800b3fc:	460c      	mov	r4, r1
        // There's a x86 asm version there too.
        private static int Int32ToDecChars( char[] buffer      ,
                                            int    bufferIndex ,
                                            uint   value       ,
                                            int    digits      )
        {
 800b3fe:	930b      	str	r3, [sp, #44]	; 0x2c
 800b400:	920a      	str	r2, [sp, #40]	; 0x28
 800b402:	9009      	str	r0, [sp, #36]	; 0x24
 800b404:	9408      	str	r4, [sp, #32]
 800b406:	f8cd c01c 	str.w	ip, [sp, #28]
 800b40a:	f8cd e018 	str.w	lr, [sp, #24]
 800b40e:	9105      	str	r1, [sp, #20]
 800b410:	e7ff      	b.n	800b412 <Number_Int32ToDecChars$7271+0x1e>
 800b412:	9805      	ldr	r0, [sp, #20]
 800b414:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b416:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
            while(--digits >= 0 || value != 0)
 800b418:	3a01      	subs	r2, #1
 800b41a:	4613      	mov	r3, r2
 800b41c:	2a00      	cmp	r2, #0
 800b41e:	9004      	str	r0, [sp, #16]
 800b420:	9103      	str	r1, [sp, #12]
 800b422:	9302      	str	r3, [sp, #8]
 800b424:	db1e      	blt.n	800b464 <Number_Int32ToDecChars$7271+0x70>
 800b426:	e7ff      	b.n	800b428 <Number_Int32ToDecChars$7271+0x34>
            {
                buffer[--bufferIndex] = (char)(value % 10 + '0');
 800b428:	9804      	ldr	r0, [sp, #16]
 800b42a:	1e41      	subs	r1, r0, #1
 800b42c:	460a      	mov	r2, r1
 800b42e:	f64c 43cd 	movw	r3, #52429	; 0xcccd
 800b432:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
                value /= 10;
 800b436:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800b43a:	fbac 3e03 	umull	r3, lr, ip, r3
 800b43e:	ea4f 0ede 	mov.w	lr, lr, lsr #3
                                            uint   value       ,
                                            int    digits      )
        {
            while(--digits >= 0 || value != 0)
            {
                buffer[--bufferIndex] = (char)(value % 10 + '0');
 800b442:	eb0e 048e 	add.w	r4, lr, lr, lsl #2
 800b446:	ebac 0444 	sub.w	r4, ip, r4, lsl #1
 800b44a:	f044 0430 	orr.w	r4, r4, #48	; 0x30
 800b44e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b450:	eb05 0141 	add.w	r1, r5, r1, lsl #1
 800b454:	818c      	strh	r4, [r1, #12]
 800b456:	9902      	ldr	r1, [sp, #8]
                value /= 10;
            }
 800b458:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 800b45c:	9301      	str	r3, [sp, #4]
 800b45e:	910b      	str	r1, [sp, #44]	; 0x2c
 800b460:	9205      	str	r2, [sp, #20]
 800b462:	e7d6      	b.n	800b412 <Number_Int32ToDecChars$7271+0x1e>
        private static int Int32ToDecChars( char[] buffer      ,
                                            int    bufferIndex ,
                                            uint   value       ,
                                            int    digits      )
        {
            while(--digits >= 0 || value != 0)
 800b464:	9803      	ldr	r0, [sp, #12]
 800b466:	2800      	cmp	r0, #0
 800b468:	9904      	ldr	r1, [sp, #16]
 800b46a:	9100      	str	r1, [sp, #0]
 800b46c:	d1dc      	bne.n	800b428 <Number_Int32ToDecChars$7271+0x34>
 800b46e:	e7ff      	b.n	800b470 <Number_Int32ToDecChars$7271+0x7c>
 800b470:	9800      	ldr	r0, [sp, #0]
 800b472:	b00c      	add	sp, #48	; 0x30
 800b474:	bdb0      	pop	{r4, r5, r7, pc}
 800b476:	46c0      	nop			; (mov r8, r8)

0800b478 <Number_.ctor$7234>:
 800b478:	b5b0      	push	{r4, r5, r7, lr}
 800b47a:	b08e      	sub	sp, #56	; 0x38
 800b47c:	460a      	mov	r2, r1
 800b47e:	4603      	mov	r3, r0
 800b480:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800b538 <Number_.ctor$7234+0xc0>
 800b484:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 800b53c <Number_.ctor$7234+0xc4>
 800b488:	44fe      	add	lr, pc
 800b48a:	f85c c00e 	ldr.w	ip, [ip, lr]
    internal class Number
    {
        private int precision;
        private int scale;
        private bool negative;
        private char[] digits = new char[NumberMaxDigits + 1];
 800b48e:	4c2c      	ldr	r4, [pc, #176]	; (800b540 <Number_.ctor$7234+0xc8>)
 800b490:	4474      	add	r4, lr
 800b492:	4d2c      	ldr	r5, [pc, #176]	; (800b544 <Number_.ctor$7234+0xcc>)
 800b494:	4475      	add	r5, lr
 800b496:	900d      	str	r0, [sp, #52]	; 0x34
 800b498:	4620      	mov	r0, r4
 800b49a:	910c      	str	r1, [sp, #48]	; 0x30
 800b49c:	4629      	mov	r1, r5
 800b49e:	920b      	str	r2, [sp, #44]	; 0x2c
 800b4a0:	4662      	mov	r2, ip
 800b4a2:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 800b4a6:	9309      	str	r3, [sp, #36]	; 0x24
 800b4a8:	f7f6 fe7a 	bl	80021a0 <DefaultTypeSystemManager_AllocateArray$4962>
 800b4ac:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b4ae:	6148      	str	r0, [r1, #20]
 800b4b0:	200a      	movs	r0, #10
 800b4b2:	6088      	str	r0, [r1, #8]
 800b4b4:	2000      	movs	r0, #0
 800b4b6:	7408      	strb	r0, [r1, #16]

        private Number( uint value )
        {
            this.precision = Int32Precision;
            this.negative = false;
            int index = Int32ToDecChars( this.digits, Int32Precision, value, 0 );
 800b4b8:	694a      	ldr	r2, [r1, #20]
 800b4ba:	4b23      	ldr	r3, [pc, #140]	; (800b548 <Number_.ctor$7234+0xd0>)
 800b4bc:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 800b4c0:	f853 100c 	ldr.w	r1, [r3, ip]
 800b4c4:	9008      	str	r0, [sp, #32]
 800b4c6:	4610      	mov	r0, r2
 800b4c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b4ca:	9b08      	ldr	r3, [sp, #32]
 800b4cc:	f7ff ff92 	bl	800b3f4 <Number_Int32ToDecChars$7271>
 800b4d0:	4601      	mov	r1, r0
            int digitCount = Int32Precision - index;
 800b4d2:	f1c0 000a 	rsb	r0, r0, #10
 800b4d6:	4602      	mov	r2, r0
 800b4d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b4da:	60d8      	str	r0, [r3, #12]
 800b4dc:	9808      	ldr	r0, [sp, #32]
            int destIndex = 0;
            this.scale = digitCount;
 800b4de:	9007      	str	r0, [sp, #28]
 800b4e0:	9206      	str	r2, [sp, #24]
 800b4e2:	9105      	str	r1, [sp, #20]
 800b4e4:	e7ff      	b.n	800b4e6 <Number_.ctor$7234+0x6e>
 800b4e6:	9805      	ldr	r0, [sp, #20]
 800b4e8:	9907      	ldr	r1, [sp, #28]
 800b4ea:	9a06      	ldr	r2, [sp, #24]
            while(digitCount > 0)
 800b4ec:	2a01      	cmp	r2, #1
 800b4ee:	460b      	mov	r3, r1
 800b4f0:	9004      	str	r0, [sp, #16]
 800b4f2:	9103      	str	r1, [sp, #12]
 800b4f4:	9202      	str	r2, [sp, #8]
 800b4f6:	9301      	str	r3, [sp, #4]
 800b4f8:	db15      	blt.n	800b526 <Number_.ctor$7234+0xae>
 800b4fa:	e7ff      	b.n	800b4fc <Number_.ctor$7234+0x84>
            {
                this.digits[destIndex] = this.digits[index];
 800b4fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b4fe:	6941      	ldr	r1, [r0, #20]
 800b500:	310c      	adds	r1, #12
 800b502:	9a04      	ldr	r2, [sp, #16]
 800b504:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 800b508:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800b50c:	f821 301c 	strh.w	r3, [r1, ip, lsl #1]
                destIndex++;
 800b510:	f10c 0101 	add.w	r1, ip, #1
                index++;
 800b514:	1c53      	adds	r3, r2, #1
                digitCount--;
 800b516:	f8dd e008 	ldr.w	lr, [sp, #8]
 800b51a:	f1ae 0401 	sub.w	r4, lr, #1
            }
 800b51e:	9406      	str	r4, [sp, #24]
 800b520:	9107      	str	r1, [sp, #28]
 800b522:	9305      	str	r3, [sp, #20]
 800b524:	e7df      	b.n	800b4e6 <Number_.ctor$7234+0x6e>
 800b526:	9801      	ldr	r0, [sp, #4]
            this.digits[destIndex] = '\0';
 800b528:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b52a:	694a      	ldr	r2, [r1, #20]
 800b52c:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 800b530:	2200      	movs	r2, #0
 800b532:	8182      	strh	r2, [r0, #12]
 800b534:	b00e      	add	sp, #56	; 0x38
 800b536:	bdb0      	pop	{r4, r5, r7, pc}
 800b538:	e80253c0 	.word	0xe80253c0
 800b53c:	17ff6348 	.word	0x17ff6348
 800b540:	ffffea38 	.word	0xffffea38
 800b544:	e801031c 	.word	0xe801031c
 800b548:	e80253c4 	.word	0xe80253c4

0800b54c <Number_Get$7239>:
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b084      	sub	sp, #16
 800b550:	460a      	mov	r2, r1
 800b552:	4603      	mov	r3, r0
 800b554:	68c0      	ldr	r0, [r0, #12]
        private static String posNumberFormat = "#";

        // code below depends on seeing the null terminator...
        private static char Get( String str, int i )
        {
            return i < str.Length ? str[i] : '\0';
 800b556:	4281      	cmp	r1, r0
 800b558:	9203      	str	r2, [sp, #12]
 800b55a:	9302      	str	r3, [sp, #8]
 800b55c:	da07      	bge.n	800b56e <Number_Get$7239+0x22>
 800b55e:	e7ff      	b.n	800b560 <Number_Get$7239+0x14>
 800b560:	9802      	ldr	r0, [sp, #8]
 800b562:	9903      	ldr	r1, [sp, #12]
 800b564:	f7f6 f87e 	bl	8001664 <String_get_Chars$3893>
 800b568:	b280      	uxth	r0, r0
 800b56a:	9001      	str	r0, [sp, #4]
 800b56c:	e002      	b.n	800b574 <Number_Get$7239+0x28>
 800b56e:	2000      	movs	r0, #0
 800b570:	9001      	str	r0, [sp, #4]
 800b572:	e7ff      	b.n	800b574 <Number_Get$7239+0x28>
 800b574:	9801      	ldr	r0, [sp, #4]
 800b576:	b004      	add	sp, #16
 800b578:	bd80      	pop	{r7, pc}
 800b57a:	46c0      	nop			; (mov r8, r8)

0800b57c <Number_ParseFormatSpecifier$7258>:
 800b57c:	b510      	push	{r4, lr}
 800b57e:	b096      	sub	sp, #88	; 0x58
 800b580:	4602      	mov	r2, r0
////        return false;
////    }
    
        private static char ParseFormatSpecifier( string format, out int digits )
        {
            if(format != null)
 800b582:	2800      	cmp	r0, #0
                    }
                    digits = -1;
                    return '\0';
                }
            }
            digits = -1;
 800b584:	4608      	mov	r0, r1
////        return false;
////    }
    
        private static char ParseFormatSpecifier( string format, out int digits )
        {
            if(format != null)
 800b586:	9215      	str	r2, [sp, #84]	; 0x54
 800b588:	9114      	str	r1, [sp, #80]	; 0x50
 800b58a:	9013      	str	r0, [sp, #76]	; 0x4c
 800b58c:	d00b      	beq.n	800b5a6 <Number_ParseFormatSpecifier$7258+0x2a>
 800b58e:	e7ff      	b.n	800b590 <Number_ParseFormatSpecifier$7258+0x14>
 800b590:	2100      	movs	r1, #0
            {
                int index = 0;
                char c = Get( format, index );
 800b592:	9815      	ldr	r0, [sp, #84]	; 0x54
 800b594:	f7ff ffda 	bl	800b54c <Number_Get$7239>
 800b598:	4601      	mov	r1, r0
 800b59a:	f64f 72ff 	movw	r2, #65535	; 0xffff
                if(c != 0)
 800b59e:	4210      	tst	r0, r2
 800b5a0:	9112      	str	r1, [sp, #72]	; 0x48
 800b5a2:	d10a      	bne.n	800b5ba <Number_ParseFormatSpecifier$7258+0x3e>
 800b5a4:	e00e      	b.n	800b5c4 <Number_ParseFormatSpecifier$7258+0x48>
                    }
                    digits = -1;
                    return '\0';
                }
            }
            digits = -1;
 800b5a6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800b5a8:	f04f 31ff 	mov.w	r1, #4294967295
 800b5ac:	6001      	str	r1, [r0, #0]
 800b5ae:	2047      	movs	r0, #71	; 0x47
            return 'G';
 800b5b0:	9011      	str	r0, [sp, #68]	; 0x44
 800b5b2:	e7ff      	b.n	800b5b4 <Number_ParseFormatSpecifier$7258+0x38>
 800b5b4:	9811      	ldr	r0, [sp, #68]	; 0x44
 800b5b6:	b016      	add	sp, #88	; 0x58
 800b5b8:	bd10      	pop	{r4, pc}
            {
                int index = 0;
                char c = Get( format, index );
                if(c != 0)
                {
                    if(c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')
 800b5ba:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b5bc:	b281      	uxth	r1, r0
 800b5be:	2941      	cmp	r1, #65	; 0x41
 800b5c0:	db03      	blt.n	800b5ca <Number_ParseFormatSpecifier$7258+0x4e>
 800b5c2:	e007      	b.n	800b5d4 <Number_ParseFormatSpecifier$7258+0x58>
                    }
                    digits = -1;
                    return '\0';
                }
            }
            digits = -1;
 800b5c4:	9814      	ldr	r0, [sp, #80]	; 0x50
                        }
                    }
                    digits = -1;
                    return '\0';
                }
            }
 800b5c6:	9013      	str	r0, [sp, #76]	; 0x4c
 800b5c8:	e7ed      	b.n	800b5a6 <Number_ParseFormatSpecifier$7258+0x2a>
            {
                int index = 0;
                char c = Get( format, index );
                if(c != 0)
                {
                    if(c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')
 800b5ca:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b5cc:	b281      	uxth	r1, r0
 800b5ce:	2961      	cmp	r1, #97	; 0x61
 800b5d0:	db17      	blt.n	800b602 <Number_ParseFormatSpecifier$7258+0x86>
 800b5d2:	e01d      	b.n	800b610 <Number_ParseFormatSpecifier$7258+0x94>
 800b5d4:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b5d6:	b281      	uxth	r1, r0
 800b5d8:	295a      	cmp	r1, #90	; 0x5a
 800b5da:	dcf6      	bgt.n	800b5ca <Number_ParseFormatSpecifier$7258+0x4e>
 800b5dc:	e7ff      	b.n	800b5de <Number_ParseFormatSpecifier$7258+0x62>
 800b5de:	4846      	ldr	r0, [pc, #280]	; (800b6f8 <Number_ParseFormatSpecifier$7258+0x17c>)
 800b5e0:	4946      	ldr	r1, [pc, #280]	; (800b6fc <Number_ParseFormatSpecifier$7258+0x180>)
 800b5e2:	4479      	add	r1, pc
 800b5e4:	5841      	ldr	r1, [r0, r1]
                    {
                        index++;
                        int n = -1;
                        c = Get( format, index );
 800b5e6:	9815      	ldr	r0, [sp, #84]	; 0x54
 800b5e8:	f7ff ffb0 	bl	800b54c <Number_Get$7239>
 800b5ec:	4601      	mov	r1, r0
                        if(c >= '0' && c <= '9')
 800b5ee:	b280      	uxth	r0, r0
 800b5f0:	f04f 32ff 	mov.w	r2, #4294967295
 800b5f4:	2830      	cmp	r0, #48	; 0x30
 800b5f6:	4608      	mov	r0, r1
 800b5f8:	9110      	str	r1, [sp, #64]	; 0x40
 800b5fa:	920f      	str	r2, [sp, #60]	; 0x3c
 800b5fc:	900e      	str	r0, [sp, #56]	; 0x38
 800b5fe:	db0c      	blt.n	800b61a <Number_ParseFormatSpecifier$7258+0x9e>
 800b600:	e013      	b.n	800b62a <Number_ParseFormatSpecifier$7258+0xae>
 800b602:	f04f 30ff 	mov.w	r0, #4294967295
 800b606:	9914      	ldr	r1, [sp, #80]	; 0x50
 800b608:	6008      	str	r0, [r1, #0]
 800b60a:	2000      	movs	r0, #0
                            digits = n;
                            return Get( format, 0 );
                        }
                    }
                    digits = -1;
                    return '\0';
 800b60c:	9011      	str	r0, [sp, #68]	; 0x44
 800b60e:	e7d1      	b.n	800b5b4 <Number_ParseFormatSpecifier$7258+0x38>
            {
                int index = 0;
                char c = Get( format, index );
                if(c != 0)
                {
                    if(c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')
 800b610:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b612:	b281      	uxth	r1, r0
 800b614:	297b      	cmp	r1, #123	; 0x7b
 800b616:	dbe2      	blt.n	800b5de <Number_ParseFormatSpecifier$7258+0x62>
 800b618:	e7f3      	b.n	800b602 <Number_ParseFormatSpecifier$7258+0x86>
 800b61a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b61c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b61e:	f64f 72ff 	movw	r2, #65535	; 0xffff
                                index++;
                                c = Get( format, index );
                                if(n >= 10) break;
                            }
                        }
                        if(c == 0)
 800b622:	4210      	tst	r0, r2
 800b624:	910d      	str	r1, [sp, #52]	; 0x34
 800b626:	d01b      	beq.n	800b660 <Number_ParseFormatSpecifier$7258+0xe4>
 800b628:	e023      	b.n	800b672 <Number_ParseFormatSpecifier$7258+0xf6>
                    if(c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')
                    {
                        index++;
                        int n = -1;
                        c = Get( format, index );
                        if(c >= '0' && c <= '9')
 800b62a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b62c:	b281      	uxth	r1, r0
 800b62e:	f04f 32ff 	mov.w	r2, #4294967295
 800b632:	2939      	cmp	r1, #57	; 0x39
 800b634:	900e      	str	r0, [sp, #56]	; 0x38
 800b636:	920f      	str	r2, [sp, #60]	; 0x3c
 800b638:	dcef      	bgt.n	800b61a <Number_ParseFormatSpecifier$7258+0x9e>
 800b63a:	e7ff      	b.n	800b63c <Number_ParseFormatSpecifier$7258+0xc0>
                        {
                            n = (c - '0');
 800b63c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b63e:	b281      	uxth	r1, r0
 800b640:	3930      	subs	r1, #48	; 0x30
 800b642:	4a2f      	ldr	r2, [pc, #188]	; (800b700 <Number_ParseFormatSpecifier$7258+0x184>)
 800b644:	4b2f      	ldr	r3, [pc, #188]	; (800b704 <Number_ParseFormatSpecifier$7258+0x188>)
 800b646:	447b      	add	r3, pc
 800b648:	58d2      	ldr	r2, [r2, r3]
                            index++;
                            c = Get( format, index );
 800b64a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800b64c:	910c      	str	r1, [sp, #48]	; 0x30
 800b64e:	4611      	mov	r1, r2
 800b650:	f7ff ff7c 	bl	800b54c <Number_Get$7239>
 800b654:	2102      	movs	r1, #2
 800b656:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b658:	900b      	str	r0, [sp, #44]	; 0x2c
 800b65a:	920a      	str	r2, [sp, #40]	; 0x28
 800b65c:	9109      	str	r1, [sp, #36]	; 0x24
 800b65e:	e009      	b.n	800b674 <Number_ParseFormatSpecifier$7258+0xf8>
 800b660:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b662:	9914      	ldr	r1, [sp, #80]	; 0x50
 800b664:	6008      	str	r0, [r1, #0]
 800b666:	2100      	movs	r1, #0
                            }
                        }
                        if(c == 0)
                        {
                            digits = n;
                            return Get( format, 0 );
 800b668:	9815      	ldr	r0, [sp, #84]	; 0x54
 800b66a:	f7ff ff6f 	bl	800b54c <Number_Get$7239>
 800b66e:	9011      	str	r0, [sp, #68]	; 0x44
 800b670:	e7a0      	b.n	800b5b4 <Number_ParseFormatSpecifier$7258+0x38>
                        }
                    }
 800b672:	e7c6      	b.n	800b602 <Number_ParseFormatSpecifier$7258+0x86>
 800b674:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b676:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b678:	9a0a      	ldr	r2, [sp, #40]	; 0x28
                        if(c >= '0' && c <= '9')
                        {
                            n = (c - '0');
                            index++;
                            c = Get( format, index );
                            while(c >= '0' && c <= '9')
 800b67a:	b28b      	uxth	r3, r1
 800b67c:	2b2f      	cmp	r3, #47	; 0x2f
 800b67e:	4613      	mov	r3, r2
 800b680:	468c      	mov	ip, r1
 800b682:	9008      	str	r0, [sp, #32]
 800b684:	9107      	str	r1, [sp, #28]
 800b686:	9206      	str	r2, [sp, #24]
 800b688:	9305      	str	r3, [sp, #20]
 800b68a:	f8cd c010 	str.w	ip, [sp, #16]
 800b68e:	dc05      	bgt.n	800b69c <Number_ParseFormatSpecifier$7258+0x120>
 800b690:	e7ff      	b.n	800b692 <Number_ParseFormatSpecifier$7258+0x116>
 800b692:	9804      	ldr	r0, [sp, #16]
 800b694:	9905      	ldr	r1, [sp, #20]
                                n = n * 10 + (c - '0');
                                index++;
                                c = Get( format, index );
                                if(n >= 10) break;
                            }
                        }
 800b696:	910f      	str	r1, [sp, #60]	; 0x3c
 800b698:	900e      	str	r0, [sp, #56]	; 0x38
 800b69a:	e7be      	b.n	800b61a <Number_ParseFormatSpecifier$7258+0x9e>
                        if(c >= '0' && c <= '9')
                        {
                            n = (c - '0');
                            index++;
                            c = Get( format, index );
                            while(c >= '0' && c <= '9')
 800b69c:	9807      	ldr	r0, [sp, #28]
 800b69e:	b281      	uxth	r1, r0
 800b6a0:	2939      	cmp	r1, #57	; 0x39
 800b6a2:	9906      	ldr	r1, [sp, #24]
 800b6a4:	9004      	str	r0, [sp, #16]
 800b6a6:	9105      	str	r1, [sp, #20]
 800b6a8:	dcf3      	bgt.n	800b692 <Number_ParseFormatSpecifier$7258+0x116>
 800b6aa:	e7ff      	b.n	800b6ac <Number_ParseFormatSpecifier$7258+0x130>
                            {
                                n = n * 10 + (c - '0');
 800b6ac:	9806      	ldr	r0, [sp, #24]
 800b6ae:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 800b6b2:	9a07      	ldr	r2, [sp, #28]
 800b6b4:	b293      	uxth	r3, r2
 800b6b6:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 800b6ba:	3930      	subs	r1, #48	; 0x30
 800b6bc:	460b      	mov	r3, r1
                                index++;
 800b6be:	f8dd c020 	ldr.w	ip, [sp, #32]
 800b6c2:	f10c 0e01 	add.w	lr, ip, #1
 800b6c6:	4674      	mov	r4, lr
                                c = Get( format, index );
 800b6c8:	9815      	ldr	r0, [sp, #84]	; 0x54
 800b6ca:	9103      	str	r1, [sp, #12]
 800b6cc:	4671      	mov	r1, lr
 800b6ce:	9402      	str	r4, [sp, #8]
 800b6d0:	9301      	str	r3, [sp, #4]
 800b6d2:	f7ff ff3b 	bl	800b54c <Number_Get$7239>
                                if(n >= 10) break;
 800b6d6:	9903      	ldr	r1, [sp, #12]
 800b6d8:	2909      	cmp	r1, #9
 800b6da:	9a01      	ldr	r2, [sp, #4]
 800b6dc:	4603      	mov	r3, r0
 800b6de:	9000      	str	r0, [sp, #0]
 800b6e0:	9205      	str	r2, [sp, #20]
 800b6e2:	9304      	str	r3, [sp, #16]
 800b6e4:	dcd5      	bgt.n	800b692 <Number_ParseFormatSpecifier$7258+0x116>
 800b6e6:	e7ff      	b.n	800b6e8 <Number_ParseFormatSpecifier$7258+0x16c>
 800b6e8:	9801      	ldr	r0, [sp, #4]
 800b6ea:	9900      	ldr	r1, [sp, #0]
 800b6ec:	9a02      	ldr	r2, [sp, #8]
                            }
 800b6ee:	900a      	str	r0, [sp, #40]	; 0x28
 800b6f0:	910b      	str	r1, [sp, #44]	; 0x2c
 800b6f2:	9209      	str	r2, [sp, #36]	; 0x24
 800b6f4:	e7be      	b.n	800b674 <Number_ParseFormatSpecifier$7258+0xf8>
 800b6f6:	46c0      	nop			; (mov r8, r8)
 800b6f8:	e80253d4 	.word	0xe80253d4
 800b6fc:	17ff61ee 	.word	0x17ff61ee
 800b700:	e80253d8 	.word	0xe80253d8
 800b704:	17ff618a 	.word	0x17ff618a

0800b708 <Number_ToString$7257>:
 800b708:	b510      	push	{r4, lr}
 800b70a:	b0a0      	sub	sp, #128	; 0x80
 800b70c:	4694      	mov	ip, r2
 800b70e:	468e      	mov	lr, r1
 800b710:	921f      	str	r2, [sp, #124]	; 0x7c
                                 NumberFormatInfo info   )
        {
            long                      newBufferLen = MIN_BUFFER_SIZE;
            System.Text.StringBuilder sb           = null;
            int                       digCount     = 0;
            char                      ftype        = (char)(format & 0xFFDF);
 800b712:	f64f 72df 	movw	r2, #65503	; 0xffdf
 800b716:	4011      	ands	r1, r2

            switch(ftype)
 800b718:	460a      	mov	r2, r1
 800b71a:	3945      	subs	r1, #69	; 0x45
 800b71c:	460c      	mov	r4, r1
 800b71e:	2900      	cmp	r1, #0
 800b720:	f8cd e078 	str.w	lr, [sp, #120]	; 0x78
 800b724:	901d      	str	r0, [sp, #116]	; 0x74
 800b726:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
 800b72a:	931b      	str	r3, [sp, #108]	; 0x6c
 800b72c:	921a      	str	r2, [sp, #104]	; 0x68
 800b72e:	9419      	str	r4, [sp, #100]	; 0x64
 800b730:	d008      	beq.n	800b744 <Number_ToString$7257+0x3c>
 800b732:	e7ff      	b.n	800b734 <Number_ToString$7257+0x2c>
 800b734:	9819      	ldr	r0, [sp, #100]	; 0x64
 800b736:	2801      	cmp	r0, #1
 800b738:	d00c      	beq.n	800b754 <Number_ToString$7257+0x4c>
 800b73a:	e7ff      	b.n	800b73c <Number_ToString$7257+0x34>
 800b73c:	9819      	ldr	r0, [sp, #100]	; 0x64
 800b73e:	2802      	cmp	r0, #2
 800b740:	d00d      	beq.n	800b75e <Number_ToString$7257+0x56>
 800b742:	e011      	b.n	800b768 <Number_ToString$7257+0x60>
 800b744:	981f      	ldr	r0, [sp, #124]	; 0x7c
                    RoundNumber( this.scale + digits );
                    FormatNumber( sb, digits, info );
                    break;

                case 'E':
                    if(digits < 0) digits = 6;
 800b746:	2800      	cmp	r0, #0
 800b748:	f2c0 80c4 	blt.w	800b8d4 <Number_ToString$7257+0x1cc>
 800b74c:	e7ff      	b.n	800b74e <Number_ToString$7257+0x46>
 800b74e:	a81f      	add	r0, sp, #124	; 0x7c
 800b750:	9018      	str	r0, [sp, #96]	; 0x60
 800b752:	e0c4      	b.n	800b8de <Number_ToString$7257+0x1d6>
 800b754:	981f      	ldr	r0, [sp, #124]	; 0x7c
            char                      ftype        = (char)(format & 0xFFDF);

            switch(ftype)
            {
                case 'F':
                    if(digits < 0) digits = info.numberDecimalDigits;
 800b756:	2800      	cmp	r0, #0
 800b758:	f2c0 8101 	blt.w	800b95e <Number_ToString$7257+0x256>
 800b75c:	e103      	b.n	800b966 <Number_ToString$7257+0x25e>
 800b75e:	981f      	ldr	r0, [sp, #124]	; 0x7c

                    FormatScientific( sb, digits, format, info );
                    break;

                case 'G':
                    if(digits < 1) digits = this.precision;
 800b760:	2801      	cmp	r0, #1
 800b762:	f2c0 814c 	blt.w	800b9fe <Number_ToString$7257+0x2f6>
 800b766:	e14e      	b.n	800ba06 <Number_ToString$7257+0x2fe>
 800b768:	981a      	ldr	r0, [sp, #104]	; 0x68
 800b76a:	b281      	uxth	r1, r0
            long                      newBufferLen = MIN_BUFFER_SIZE;
            System.Text.StringBuilder sb           = null;
            int                       digCount     = 0;
            char                      ftype        = (char)(format & 0xFFDF);

            switch(ftype)
 800b76c:	294e      	cmp	r1, #78	; 0x4e
 800b76e:	d104      	bne.n	800b77a <Number_ToString$7257+0x72>
 800b770:	e7ff      	b.n	800b772 <Number_ToString$7257+0x6a>
 800b772:	981f      	ldr	r0, [sp, #124]	; 0x7c
                    FormatFixed( sb, digits, null, info.numberDecimalSeparator, null, info );
                    break;

                case 'N':
                    // Since we are using digits in our calculation
                    if(digits < 0) digits = info.numberDecimalDigits;
 800b774:	2800      	cmp	r0, #0
 800b776:	db6a      	blt.n	800b84e <Number_ToString$7257+0x146>
 800b778:	e06d      	b.n	800b856 <Number_ToString$7257+0x14e>
 800b77a:	981a      	ldr	r0, [sp, #104]	; 0x68
 800b77c:	b281      	uxth	r1, r0
            long                      newBufferLen = MIN_BUFFER_SIZE;
            System.Text.StringBuilder sb           = null;
            int                       digCount     = 0;
            char                      ftype        = (char)(format & 0xFFDF);

            switch(ftype)
 800b77e:	2950      	cmp	r1, #80	; 0x50
 800b780:	d001      	beq.n	800b786 <Number_ToString$7257+0x7e>
 800b782:	e7ff      	b.n	800b784 <Number_ToString$7257+0x7c>

                default:
#if EXCEPTION_STRINGS
                    throw new FormatException( "Format_BadFormatSpecifier" );
#else
                    throw new FormatException();
 800b784:	e003      	b.n	800b78e <Number_ToString$7257+0x86>
 800b786:	981f      	ldr	r0, [sp, #124]	; 0x7c

                    FormatGeneral( sb, digits, (char)(format - ('G' - 'E')), info );
                    break;

                case 'P':
                    if(digits < 0) digits = info.percentDecimalDigits;
 800b788:	2800      	cmp	r0, #0
 800b78a:	db11      	blt.n	800b7b0 <Number_ToString$7257+0xa8>
 800b78c:	e014      	b.n	800b7b8 <Number_ToString$7257+0xb0>

                default:
#if EXCEPTION_STRINGS
                    throw new FormatException( "Format_BadFormatSpecifier" );
#else
                    throw new FormatException();
 800b78e:	48be      	ldr	r0, [pc, #760]	; (800ba88 <Number_ToString$7257+0x380>)
 800b790:	49c2      	ldr	r1, [pc, #776]	; (800ba9c <Number_ToString$7257+0x394>)
 800b792:	4479      	add	r1, pc
 800b794:	4408      	add	r0, r1
 800b796:	4ac2      	ldr	r2, [pc, #776]	; (800baa0 <Number_ToString$7257+0x398>)
 800b798:	4411      	add	r1, r2
 800b79a:	9017      	str	r0, [sp, #92]	; 0x5c
 800b79c:	f7f5 f810 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800b7a0:	9016      	str	r0, [sp, #88]	; 0x58
 800b7a2:	f7ff fd73 	bl	800b28c <FormatException_.ctor$7045>
 800b7a6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800b7a8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b7aa:	f7f5 f85f 	bl	800086c <TypeSystemManager_Throw$4954>
 800b7ae:	e7ee      	b.n	800b78e <Number_ToString$7257+0x86>
 800b7b0:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800b7b2:	6f41      	ldr	r1, [r0, #116]	; 0x74
 800b7b4:	911f      	str	r1, [sp, #124]	; 0x7c

                    FormatGeneral( sb, digits, (char)(format - ('G' - 'E')), info );
                    break;

                case 'P':
                    if(digits < 0) digits = info.percentDecimalDigits;
 800b7b6:	e7ff      	b.n	800b7b8 <Number_ToString$7257+0xb0>
 800b7b8:	981d      	ldr	r0, [sp, #116]	; 0x74
 800b7ba:	68c1      	ldr	r1, [r0, #12]
                    this.scale += 2;
 800b7bc:	3102      	adds	r1, #2
 800b7be:	60c1      	str	r1, [r0, #12]

                    if(this.scale < 0)
 800b7c0:	f1b1 3fff 	cmp.w	r1, #4294967295
 800b7c4:	dc03      	bgt.n	800b7ce <Number_ToString$7257+0xc6>
 800b7c6:	e7ff      	b.n	800b7c8 <Number_ToString$7257+0xc0>
 800b7c8:	2000      	movs	r0, #0
                        digCount = 0;
 800b7ca:	9015      	str	r0, [sp, #84]	; 0x54
 800b7cc:	e005      	b.n	800b7da <Number_ToString$7257+0xd2>
 800b7ce:	981d      	ldr	r0, [sp, #116]	; 0x74
 800b7d0:	68c1      	ldr	r1, [r0, #12]
 800b7d2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
                    else
                        digCount = this.scale + digits;
 800b7d4:	4411      	add	r1, r2
 800b7d6:	9115      	str	r1, [sp, #84]	; 0x54
 800b7d8:	e7ff      	b.n	800b7da <Number_ToString$7257+0xd2>
 800b7da:	9815      	ldr	r0, [sp, #84]	; 0x54

                    newBufferLen += digCount;

                    // For number and exponent
                    newBufferLen += info.negativeSign.Length;
 800b7dc:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800b7de:	698a      	ldr	r2, [r1, #24]

                    // For all the grouping sizes
                    newBufferLen += info.percentGroupSeparator.Length * digCount;
                    newBufferLen += info.percentDecimalSeparator.Length;
 800b7e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40

                    // For number and exponent
                    newBufferLen += info.negativeSign.Length;

                    // For all the grouping sizes
                    newBufferLen += info.percentGroupSeparator.Length * digCount;
 800b7e2:	f8d1 c044 	ldr.w	ip, [r1, #68]	; 0x44
                    newBufferLen += info.percentDecimalSeparator.Length;
                    newBufferLen += info.percentSymbol.Length;
 800b7e6:	f8d1 e048 	ldr.w	lr, [r1, #72]	; 0x48
                        digCount = this.scale + digits;

                    newBufferLen += digCount;

                    // For number and exponent
                    newBufferLen += info.negativeSign.Length;
 800b7ea:	68d2      	ldr	r2, [r2, #12]
                    if(this.scale < 0)
                        digCount = 0;
                    else
                        digCount = this.scale + digits;

                    newBufferLen += digCount;
 800b7ec:	4402      	add	r2, r0
 800b7ee:	f8dc c00c 	ldr.w	ip, [ip, #12]

                    // For number and exponent
                    newBufferLen += info.negativeSign.Length;
 800b7f2:	fb0c 2000 	mla	r0, ip, r0, r2

                    // For all the grouping sizes
                    newBufferLen += info.percentGroupSeparator.Length * digCount;
                    newBufferLen += info.percentDecimalSeparator.Length;
 800b7f6:	68da      	ldr	r2, [r3, #12]

                    // For number and exponent
                    newBufferLen += info.negativeSign.Length;

                    // For all the grouping sizes
                    newBufferLen += info.percentGroupSeparator.Length * digCount;
 800b7f8:	4410      	add	r0, r2
                    newBufferLen += info.percentDecimalSeparator.Length;
                    newBufferLen += info.percentSymbol.Length;
 800b7fa:	f8de 200c 	ldr.w	r2, [lr, #12]
                    // For number and exponent
                    newBufferLen += info.negativeSign.Length;

                    // For all the grouping sizes
                    newBufferLen += info.percentGroupSeparator.Length * digCount;
                    newBufferLen += info.percentDecimalSeparator.Length;
 800b7fe:	4410      	add	r0, r2
                    newBufferLen += info.percentSymbol.Length;
 800b800:	f100 0169 	add.w	r1, r0, #105	; 0x69

                    sb = new System.Text.StringBuilder( (int)newBufferLen );
 800b804:	48a0      	ldr	r0, [pc, #640]	; (800ba88 <Number_ToString$7257+0x380>)
 800b806:	4aa7      	ldr	r2, [pc, #668]	; (800baa4 <Number_ToString$7257+0x39c>)
 800b808:	447a      	add	r2, pc
 800b80a:	4410      	add	r0, r2
 800b80c:	4ba0      	ldr	r3, [pc, #640]	; (800ba90 <Number_ToString$7257+0x388>)
 800b80e:	441a      	add	r2, r3
 800b810:	9114      	str	r1, [sp, #80]	; 0x50
 800b812:	4611      	mov	r1, r2
 800b814:	f7f4 ffd4 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800b818:	4601      	mov	r1, r0
 800b81a:	9013      	str	r0, [sp, #76]	; 0x4c
 800b81c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b81e:	9112      	str	r1, [sp, #72]	; 0x48
 800b820:	4611      	mov	r1, r2
 800b822:	f7f7 f861 	bl	80028e8 <StringBuilder_.ctor$8488>
 800b826:	981d      	ldr	r0, [sp, #116]	; 0x74
 800b828:	68c1      	ldr	r1, [r0, #12]
 800b82a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c

                    RoundNumber( this.scale + digits );
 800b82c:	4411      	add	r1, r2
 800b82e:	f001 f8d9 	bl	800c9e4 <Number_RoundNumber$7273>
                    FormatPercent( sb, digits, info );
 800b832:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b834:	981d      	ldr	r0, [sp, #116]	; 0x74
 800b836:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b838:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b83a:	f001 f96b 	bl	800cb14 <Number_FormatPercent$7280>
 800b83e:	9812      	ldr	r0, [sp, #72]	; 0x48
                    break;
 800b840:	9011      	str	r0, [sp, #68]	; 0x44
 800b842:	e7ff      	b.n	800b844 <Number_ToString$7257+0x13c>
 800b844:	9811      	ldr	r0, [sp, #68]	; 0x44
                    throw new FormatException();
#endif
                // COMPlusThrow(kFormatException,L"Format_BadFormatSpecifier");
            }

            return sb.ToString();
 800b846:	f7f7 f81d 	bl	8002884 <StringBuilder_ToString$8499>
 800b84a:	b020      	add	sp, #128	; 0x80
 800b84c:	bd10      	pop	{r4, pc}
 800b84e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800b850:	6d81      	ldr	r1, [r0, #88]	; 0x58
 800b852:	911f      	str	r1, [sp, #124]	; 0x7c
                    FormatFixed( sb, digits, null, info.numberDecimalSeparator, null, info );
                    break;

                case 'N':
                    // Since we are using digits in our calculation
                    if(digits < 0) digits = info.numberDecimalDigits;
 800b854:	e7ff      	b.n	800b856 <Number_ToString$7257+0x14e>
 800b856:	981d      	ldr	r0, [sp, #116]	; 0x74
 800b858:	68c1      	ldr	r1, [r0, #12]

                    if(this.scale < 0)
 800b85a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800b85e:	dc03      	bgt.n	800b868 <Number_ToString$7257+0x160>
 800b860:	e7ff      	b.n	800b862 <Number_ToString$7257+0x15a>
 800b862:	2000      	movs	r0, #0
                        digCount = 0;
 800b864:	9010      	str	r0, [sp, #64]	; 0x40
 800b866:	e005      	b.n	800b874 <Number_ToString$7257+0x16c>
 800b868:	981d      	ldr	r0, [sp, #116]	; 0x74
 800b86a:	68c1      	ldr	r1, [r0, #12]
 800b86c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
                    else
                        digCount = this.scale + digits;
 800b86e:	4411      	add	r1, r2
 800b870:	9110      	str	r1, [sp, #64]	; 0x40
 800b872:	e7ff      	b.n	800b874 <Number_ToString$7257+0x16c>
 800b874:	9810      	ldr	r0, [sp, #64]	; 0x40

                    newBufferLen += digCount;

                    // For number and exponent
                    newBufferLen += info.negativeSign.Length;
 800b876:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800b878:	698a      	ldr	r2, [r1, #24]

                    // For all the grouping sizes
                    newBufferLen += info.numberGroupSeparator.Length * digCount;
                    newBufferLen += info.numberDecimalSeparator.Length;
 800b87a:	69cb      	ldr	r3, [r1, #28]

                    // For number and exponent
                    newBufferLen += info.negativeSign.Length;

                    // For all the grouping sizes
                    newBufferLen += info.numberGroupSeparator.Length * digCount;
 800b87c:	f8d1 c020 	ldr.w	ip, [r1, #32]
                        digCount = this.scale + digits;

                    newBufferLen += digCount;

                    // For number and exponent
                    newBufferLen += info.negativeSign.Length;
 800b880:	68d2      	ldr	r2, [r2, #12]
                    if(this.scale < 0)
                        digCount = 0;
                    else
                        digCount = this.scale + digits;

                    newBufferLen += digCount;
 800b882:	4402      	add	r2, r0
 800b884:	f8dc c00c 	ldr.w	ip, [ip, #12]

                    // For number and exponent
                    newBufferLen += info.negativeSign.Length;
 800b888:	fb0c 2000 	mla	r0, ip, r0, r2

                    // For all the grouping sizes
                    newBufferLen += info.numberGroupSeparator.Length * digCount;
                    newBufferLen += info.numberDecimalSeparator.Length;
 800b88c:	68da      	ldr	r2, [r3, #12]

                    // For number and exponent
                    newBufferLen += info.negativeSign.Length;

                    // For all the grouping sizes
                    newBufferLen += info.numberGroupSeparator.Length * digCount;
 800b88e:	4410      	add	r0, r2
                    newBufferLen += info.numberDecimalSeparator.Length;
 800b890:	f100 0169 	add.w	r1, r0, #105	; 0x69

                    sb = new System.Text.StringBuilder( (int)newBufferLen );
 800b894:	487c      	ldr	r0, [pc, #496]	; (800ba88 <Number_ToString$7257+0x380>)
 800b896:	4a84      	ldr	r2, [pc, #528]	; (800baa8 <Number_ToString$7257+0x3a0>)
 800b898:	447a      	add	r2, pc
 800b89a:	4410      	add	r0, r2
 800b89c:	4b7c      	ldr	r3, [pc, #496]	; (800ba90 <Number_ToString$7257+0x388>)
 800b89e:	441a      	add	r2, r3
 800b8a0:	910f      	str	r1, [sp, #60]	; 0x3c
 800b8a2:	4611      	mov	r1, r2
 800b8a4:	f7f4 ff8c 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800b8a8:	4601      	mov	r1, r0
 800b8aa:	900e      	str	r0, [sp, #56]	; 0x38
 800b8ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b8ae:	910d      	str	r1, [sp, #52]	; 0x34
 800b8b0:	4611      	mov	r1, r2
 800b8b2:	f7f7 f819 	bl	80028e8 <StringBuilder_.ctor$8488>
 800b8b6:	981d      	ldr	r0, [sp, #116]	; 0x74
 800b8b8:	68c1      	ldr	r1, [r0, #12]
 800b8ba:	9a1f      	ldr	r2, [sp, #124]	; 0x7c

                    RoundNumber( this.scale + digits );
 800b8bc:	4411      	add	r1, r2
 800b8be:	f001 f891 	bl	800c9e4 <Number_RoundNumber$7273>
                    FormatNumber( sb, digits, info );
 800b8c2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b8c4:	981d      	ldr	r0, [sp, #116]	; 0x74
 800b8c6:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b8c8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b8ca:	f001 f99d 	bl	800cc08 <Number_FormatNumber$7279>
 800b8ce:	980d      	ldr	r0, [sp, #52]	; 0x34
                    break;
 800b8d0:	9011      	str	r0, [sp, #68]	; 0x44
 800b8d2:	e7b7      	b.n	800b844 <Number_ToString$7257+0x13c>
 800b8d4:	2006      	movs	r0, #6
 800b8d6:	901f      	str	r0, [sp, #124]	; 0x7c
 800b8d8:	a81f      	add	r0, sp, #124	; 0x7c

                case 'E':
                    if(digits < 0) digits = 6;
 800b8da:	9018      	str	r0, [sp, #96]	; 0x60
 800b8dc:	e7ff      	b.n	800b8de <Number_ToString$7257+0x1d6>
 800b8de:	9818      	ldr	r0, [sp, #96]	; 0x60
 800b8e0:	991f      	ldr	r1, [sp, #124]	; 0x7c
                    digits++;
 800b8e2:	3101      	adds	r1, #1
 800b8e4:	6001      	str	r1, [r0, #0]

                    newBufferLen += digits;
 800b8e6:	981f      	ldr	r0, [sp, #124]	; 0x7c

                    // For number and exponent
                    newBufferLen += (info.negativeSign.Length +
 800b8e8:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800b8ea:	694a      	ldr	r2, [r1, #20]
 800b8ec:	698b      	ldr	r3, [r1, #24]
                                     info.positiveSign.Length) * 2;
                    newBufferLen += info.numberDecimalSeparator.Length;
 800b8ee:	f8d1 c01c 	ldr.w	ip, [r1, #28]
 800b8f2:	68db      	ldr	r3, [r3, #12]
 800b8f4:	68d2      	ldr	r2, [r2, #12]
                    digits++;

                    newBufferLen += digits;

                    // For number and exponent
                    newBufferLen += (info.negativeSign.Length +
 800b8f6:	441a      	add	r2, r3

                case 'E':
                    if(digits < 0) digits = 6;
                    digits++;

                    newBufferLen += digits;
 800b8f8:	eb00 0042 	add.w	r0, r0, r2, lsl #1

                    // For number and exponent
                    newBufferLen += (info.negativeSign.Length +
                                     info.positiveSign.Length) * 2;
                    newBufferLen += info.numberDecimalSeparator.Length;
 800b8fc:	f8dc 200c 	ldr.w	r2, [ip, #12]
                    digits++;

                    newBufferLen += digits;

                    // For number and exponent
                    newBufferLen += (info.negativeSign.Length +
 800b900:	4410      	add	r0, r2
                                     info.positiveSign.Length) * 2;
                    newBufferLen += info.numberDecimalSeparator.Length;
 800b902:	f100 0169 	add.w	r1, r0, #105	; 0x69

                    sb = new System.Text.StringBuilder( (int)newBufferLen );
 800b906:	4860      	ldr	r0, [pc, #384]	; (800ba88 <Number_ToString$7257+0x380>)
 800b908:	4a63      	ldr	r2, [pc, #396]	; (800ba98 <Number_ToString$7257+0x390>)
 800b90a:	447a      	add	r2, pc
 800b90c:	4410      	add	r0, r2
 800b90e:	4b60      	ldr	r3, [pc, #384]	; (800ba90 <Number_ToString$7257+0x388>)
 800b910:	441a      	add	r2, r3
 800b912:	910c      	str	r1, [sp, #48]	; 0x30
 800b914:	4611      	mov	r1, r2
 800b916:	f7f4 ff53 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800b91a:	4601      	mov	r1, r0
 800b91c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b91e:	910b      	str	r1, [sp, #44]	; 0x2c
 800b920:	4611      	mov	r1, r2
 800b922:	f7f6 ffe1 	bl	80028e8 <StringBuilder_.ctor$8488>

                    RoundNumber( digits );
 800b926:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800b928:	981d      	ldr	r0, [sp, #116]	; 0x74
 800b92a:	f001 f85b 	bl	800c9e4 <Number_RoundNumber$7273>
 800b92e:	981d      	ldr	r0, [sp, #116]	; 0x74
 800b930:	7c01      	ldrb	r1, [r0, #16]
                    if(this.negative)
 800b932:	2900      	cmp	r1, #0
 800b934:	d007      	beq.n	800b946 <Number_ToString$7257+0x23e>
 800b936:	e7ff      	b.n	800b938 <Number_ToString$7257+0x230>
                    {
                        sb.Append( info.negativeSign );
 800b938:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800b93a:	6981      	ldr	r1, [r0, #24]
 800b93c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b93e:	f001 fa5d 	bl	800cdfc <StringBuilder_Append$8507>
                    }
 800b942:	900a      	str	r0, [sp, #40]	; 0x28
 800b944:	e7ff      	b.n	800b946 <Number_ToString$7257+0x23e>

                    FormatScientific( sb, digits, format, info );
 800b946:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b948:	4668      	mov	r0, sp
 800b94a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800b94c:	6001      	str	r1, [r0, #0]
 800b94e:	981d      	ldr	r0, [sp, #116]	; 0x74
 800b950:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b952:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b954:	f001 f9be 	bl	800ccd4 <Number_FormatScientific$7276>
 800b958:	980b      	ldr	r0, [sp, #44]	; 0x2c
                    break;
 800b95a:	9011      	str	r0, [sp, #68]	; 0x44
 800b95c:	e772      	b.n	800b844 <Number_ToString$7257+0x13c>
 800b95e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800b960:	6d81      	ldr	r1, [r0, #88]	; 0x58
 800b962:	911f      	str	r1, [sp, #124]	; 0x7c
            char                      ftype        = (char)(format & 0xFFDF);

            switch(ftype)
            {
                case 'F':
                    if(digits < 0) digits = info.numberDecimalDigits;
 800b964:	e7ff      	b.n	800b966 <Number_ToString$7257+0x25e>
 800b966:	981d      	ldr	r0, [sp, #116]	; 0x74
 800b968:	68c1      	ldr	r1, [r0, #12]

                    if(this.scale < 0)
 800b96a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800b96e:	dc03      	bgt.n	800b978 <Number_ToString$7257+0x270>
 800b970:	e7ff      	b.n	800b972 <Number_ToString$7257+0x26a>
 800b972:	2000      	movs	r0, #0
                        digCount = 0;
 800b974:	9009      	str	r0, [sp, #36]	; 0x24
 800b976:	e005      	b.n	800b984 <Number_ToString$7257+0x27c>
 800b978:	981d      	ldr	r0, [sp, #116]	; 0x74
 800b97a:	68c1      	ldr	r1, [r0, #12]
 800b97c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
                    else
                        digCount = this.scale + digits;
 800b97e:	4411      	add	r1, r2
 800b980:	9109      	str	r1, [sp, #36]	; 0x24
 800b982:	e7ff      	b.n	800b984 <Number_ToString$7257+0x27c>
 800b984:	9809      	ldr	r0, [sp, #36]	; 0x24

                    newBufferLen += digCount;

                    // For number and exponent
                    newBufferLen += info.negativeSign.Length;
 800b986:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800b988:	698a      	ldr	r2, [r1, #24]

                    newBufferLen += info.numberDecimalSeparator.Length;
 800b98a:	69cb      	ldr	r3, [r1, #28]
                        digCount = this.scale + digits;

                    newBufferLen += digCount;

                    // For number and exponent
                    newBufferLen += info.negativeSign.Length;
 800b98c:	68d2      	ldr	r2, [r2, #12]
                    if(this.scale < 0)
                        digCount = 0;
                    else
                        digCount = this.scale + digits;

                    newBufferLen += digCount;
 800b98e:	4410      	add	r0, r2

                    // For number and exponent
                    newBufferLen += info.negativeSign.Length;

                    newBufferLen += info.numberDecimalSeparator.Length;
 800b990:	68da      	ldr	r2, [r3, #12]
                        digCount = this.scale + digits;

                    newBufferLen += digCount;

                    // For number and exponent
                    newBufferLen += info.negativeSign.Length;
 800b992:	4410      	add	r0, r2

                    newBufferLen += info.numberDecimalSeparator.Length;
 800b994:	f100 0169 	add.w	r1, r0, #105	; 0x69

                    sb = new System.Text.StringBuilder( (int)newBufferLen );
 800b998:	483b      	ldr	r0, [pc, #236]	; (800ba88 <Number_ToString$7257+0x380>)
 800b99a:	4a3e      	ldr	r2, [pc, #248]	; (800ba94 <Number_ToString$7257+0x38c>)
 800b99c:	447a      	add	r2, pc
 800b99e:	4410      	add	r0, r2
 800b9a0:	4b3b      	ldr	r3, [pc, #236]	; (800ba90 <Number_ToString$7257+0x388>)
 800b9a2:	441a      	add	r2, r3
 800b9a4:	9108      	str	r1, [sp, #32]
 800b9a6:	4611      	mov	r1, r2
 800b9a8:	f7f4 ff0a 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800b9ac:	4601      	mov	r1, r0
 800b9ae:	9a08      	ldr	r2, [sp, #32]
 800b9b0:	9107      	str	r1, [sp, #28]
 800b9b2:	4611      	mov	r1, r2
 800b9b4:	f7f6 ff98 	bl	80028e8 <StringBuilder_.ctor$8488>
 800b9b8:	981d      	ldr	r0, [sp, #116]	; 0x74
 800b9ba:	68c1      	ldr	r1, [r0, #12]
 800b9bc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c

                    RoundNumber( this.scale + digits );
 800b9be:	4411      	add	r1, r2
 800b9c0:	f001 f810 	bl	800c9e4 <Number_RoundNumber$7273>
 800b9c4:	981d      	ldr	r0, [sp, #116]	; 0x74
 800b9c6:	7c01      	ldrb	r1, [r0, #16]
                    if(this.negative)
 800b9c8:	2900      	cmp	r1, #0
 800b9ca:	d007      	beq.n	800b9dc <Number_ToString$7257+0x2d4>
 800b9cc:	e7ff      	b.n	800b9ce <Number_ToString$7257+0x2c6>
                    {
                        sb.Append( info.negativeSign );
 800b9ce:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800b9d0:	6981      	ldr	r1, [r0, #24]
 800b9d2:	9807      	ldr	r0, [sp, #28]
 800b9d4:	f001 fa12 	bl	800cdfc <StringBuilder_Append$8507>
                    }
 800b9d8:	9006      	str	r0, [sp, #24]
 800b9da:	e7ff      	b.n	800b9dc <Number_ToString$7257+0x2d4>
                    FormatFixed( sb, digits, null, info.numberDecimalSeparator, null, info );
 800b9dc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800b9de:	69c1      	ldr	r1, [r0, #28]
 800b9e0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b9e2:	466b      	mov	r3, sp
 800b9e4:	f04f 0c00 	mov.w	ip, #0
 800b9e8:	f8c3 c004 	str.w	ip, [r3, #4]
 800b9ec:	6019      	str	r1, [r3, #0]
 800b9ee:	981d      	ldr	r0, [sp, #116]	; 0x74
 800b9f0:	9907      	ldr	r1, [sp, #28]
 800b9f2:	4663      	mov	r3, ip
 800b9f4:	f001 fa46 	bl	800ce84 <Number_FormatFixed$7278>
 800b9f8:	9807      	ldr	r0, [sp, #28]
                    break;
 800b9fa:	9011      	str	r0, [sp, #68]	; 0x44
 800b9fc:	e722      	b.n	800b844 <Number_ToString$7257+0x13c>
 800b9fe:	981d      	ldr	r0, [sp, #116]	; 0x74
 800ba00:	6881      	ldr	r1, [r0, #8]
 800ba02:	911f      	str	r1, [sp, #124]	; 0x7c

                    FormatScientific( sb, digits, format, info );
                    break;

                case 'G':
                    if(digits < 1) digits = this.precision;
 800ba04:	e7ff      	b.n	800ba06 <Number_ToString$7257+0x2fe>
                    newBufferLen += digits;
 800ba06:	981f      	ldr	r0, [sp, #124]	; 0x7c

                    // For number and exponent
                    newBufferLen += (info.negativeSign.Length +
 800ba08:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800ba0a:	694a      	ldr	r2, [r1, #20]
 800ba0c:	698b      	ldr	r3, [r1, #24]
                                     info.positiveSign.Length) * 2;
                    newBufferLen += info.numberDecimalSeparator.Length;
 800ba0e:	f8d1 c01c 	ldr.w	ip, [r1, #28]
 800ba12:	68db      	ldr	r3, [r3, #12]
 800ba14:	68d2      	ldr	r2, [r2, #12]
                case 'G':
                    if(digits < 1) digits = this.precision;
                    newBufferLen += digits;

                    // For number and exponent
                    newBufferLen += (info.negativeSign.Length +
 800ba16:	441a      	add	r2, r3
                    FormatScientific( sb, digits, format, info );
                    break;

                case 'G':
                    if(digits < 1) digits = this.precision;
                    newBufferLen += digits;
 800ba18:	eb00 0042 	add.w	r0, r0, r2, lsl #1

                    // For number and exponent
                    newBufferLen += (info.negativeSign.Length +
                                     info.positiveSign.Length) * 2;
                    newBufferLen += info.numberDecimalSeparator.Length;
 800ba1c:	f8dc 200c 	ldr.w	r2, [ip, #12]
                case 'G':
                    if(digits < 1) digits = this.precision;
                    newBufferLen += digits;

                    // For number and exponent
                    newBufferLen += (info.negativeSign.Length +
 800ba20:	4410      	add	r0, r2
                                     info.positiveSign.Length) * 2;
                    newBufferLen += info.numberDecimalSeparator.Length;
 800ba22:	f100 0169 	add.w	r1, r0, #105	; 0x69

                    sb = new System.Text.StringBuilder( (int)newBufferLen );
 800ba26:	4818      	ldr	r0, [pc, #96]	; (800ba88 <Number_ToString$7257+0x380>)
 800ba28:	4a18      	ldr	r2, [pc, #96]	; (800ba8c <Number_ToString$7257+0x384>)
 800ba2a:	447a      	add	r2, pc
 800ba2c:	4410      	add	r0, r2
 800ba2e:	4b18      	ldr	r3, [pc, #96]	; (800ba90 <Number_ToString$7257+0x388>)
 800ba30:	441a      	add	r2, r3
 800ba32:	9105      	str	r1, [sp, #20]
 800ba34:	4611      	mov	r1, r2
 800ba36:	f7f4 fec3 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800ba3a:	4601      	mov	r1, r0
 800ba3c:	9a05      	ldr	r2, [sp, #20]
 800ba3e:	9104      	str	r1, [sp, #16]
 800ba40:	4611      	mov	r1, r2
 800ba42:	f7f6 ff51 	bl	80028e8 <StringBuilder_.ctor$8488>

                    RoundNumber( digits );
 800ba46:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800ba48:	981d      	ldr	r0, [sp, #116]	; 0x74
 800ba4a:	f000 ffcb 	bl	800c9e4 <Number_RoundNumber$7273>
 800ba4e:	981d      	ldr	r0, [sp, #116]	; 0x74
 800ba50:	7c01      	ldrb	r1, [r0, #16]
                    if(this.negative)
 800ba52:	2900      	cmp	r1, #0
 800ba54:	d007      	beq.n	800ba66 <Number_ToString$7257+0x35e>
 800ba56:	e7ff      	b.n	800ba58 <Number_ToString$7257+0x350>
                    {
                        sb.Append( info.negativeSign );
 800ba58:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800ba5a:	6981      	ldr	r1, [r0, #24]
 800ba5c:	9804      	ldr	r0, [sp, #16]
 800ba5e:	f001 f9cd 	bl	800cdfc <StringBuilder_Append$8507>
                    }
 800ba62:	9003      	str	r0, [sp, #12]
 800ba64:	e7ff      	b.n	800ba66 <Number_ToString$7257+0x35e>

                    FormatGeneral( sb, digits, (char)(format - ('G' - 'E')), info );
 800ba66:	981e      	ldr	r0, [sp, #120]	; 0x78
 800ba68:	b281      	uxth	r1, r0
 800ba6a:	1e8b      	subs	r3, r1, #2
 800ba6c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800ba6e:	4669      	mov	r1, sp
 800ba70:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
 800ba74:	f8c1 c000 	str.w	ip, [r1]
 800ba78:	981d      	ldr	r0, [sp, #116]	; 0x74
 800ba7a:	9904      	ldr	r1, [sp, #16]
 800ba7c:	f001 fc82 	bl	800d384 <Number_FormatGeneral$7275>
 800ba80:	9804      	ldr	r0, [sp, #16]
                    break;
 800ba82:	9011      	str	r0, [sp, #68]	; 0x44
 800ba84:	e6de      	b.n	800b844 <Number_ToString$7257+0x13c>
 800ba86:	46c0      	nop			; (mov r8, r8)
 800ba88:	ffffea38 	.word	0xffffea38
 800ba8c:	17ff5da6 	.word	0x17ff5da6
 800ba90:	e8010b3c 	.word	0xe8010b3c
 800ba94:	17ff5e34 	.word	0x17ff5e34
 800ba98:	17ff5ec6 	.word	0x17ff5ec6
 800ba9c:	17ff603e 	.word	0x17ff603e
 800baa0:	e8012eec 	.word	0xe8012eec
 800baa4:	17ff5fc8 	.word	0x17ff5fc8
 800baa8:	17ff5f38 	.word	0x17ff5f38

0800baac <Number_ToStringFormat$7259>:
 800baac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bab0:	f5ad 6d37 	sub.w	sp, sp, #2928	; 0xb70
 800bab4:	460b      	mov	r3, r1
 800bab6:	4684      	mov	ip, r0
 800bab8:	f50d 7e3f 	add.w	lr, sp, #764	; 0x2fc
 800babc:	4674      	mov	r4, lr
 800babe:	253c      	movs	r5, #60	; 0x3c
 800bac0:	90be      	str	r0, [sp, #760]	; 0x2f8
 800bac2:	4670      	mov	r0, lr
 800bac4:	91bd      	str	r1, [sp, #756]	; 0x2f4
 800bac6:	4629      	mov	r1, r5
 800bac8:	94bc      	str	r4, [sp, #752]	; 0x2f0
 800baca:	f8cd e2ec 	str.w	lr, [sp, #748]	; 0x2ec
 800bace:	92ba      	str	r2, [sp, #744]	; 0x2e8
 800bad0:	93b9      	str	r3, [sp, #740]	; 0x2e4
 800bad2:	f8cd c2e0 	str.w	ip, [sp, #736]	; 0x2e0
 800bad6:	f014 f9ba 	bl	801fe4e <__aeabi_memclr>
        private String ToStringFormat( String           format ,
                                       NumberFormatInfo info   )
        {
            ToStringFormatState state = new ToStringFormatState();

            state.format        = format;
 800bada:	98bb      	ldr	r0, [sp, #748]	; 0x2ec
 800badc:	99bb      	ldr	r1, [sp, #748]	; 0x2ec
 800bade:	9abd      	ldr	r2, [sp, #756]	; 0x2f4
 800bae0:	92cc      	str	r2, [sp, #816]	; 0x330
            state.section       = (this.digits[0] == 0 ? 2 : (this.negative ? 1 : 0));
 800bae2:	9bbe      	ldr	r3, [sp, #760]	; 0x2f8
 800bae4:	f8d3 c014 	ldr.w	ip, [r3, #20]
 800bae8:	f8bc c00c 	ldrh.w	ip, [ip, #12]
 800baec:	f1bc 0f00 	cmp.w	ip, #0
 800baf0:	90b7      	str	r0, [sp, #732]	; 0x2dc
 800baf2:	91b6      	str	r1, [sp, #728]	; 0x2d8
 800baf4:	d007      	beq.n	800bb06 <Number_ToStringFormat$7259+0x5a>
 800baf6:	e7ff      	b.n	800baf8 <Number_ToStringFormat$7259+0x4c>
 800baf8:	98b8      	ldr	r0, [sp, #736]	; 0x2e0
 800bafa:	7c01      	ldrb	r1, [r0, #16]
 800bafc:	2900      	cmp	r1, #0
 800bafe:	f040 8626 	bne.w	800c74e <Number_ToStringFormat$7259+0xca2>
 800bb02:	f000 be28 	b.w	800c756 <Number_ToStringFormat$7259+0xcaa>
 800bb06:	2002      	movs	r0, #2
 800bb08:	90b5      	str	r0, [sp, #724]	; 0x2d4
 800bb0a:	e7ff      	b.n	800bb0c <Number_ToStringFormat$7259+0x60>
 800bb0c:	98b5      	ldr	r0, [sp, #724]	; 0x2d4
 800bb0e:	99b7      	ldr	r1, [sp, #732]	; 0x2dc
 800bb10:	6008      	str	r0, [r1, #0]
 800bb12:	a8ce      	add	r0, sp, #824	; 0x338
 800bb14:	223c      	movs	r2, #60	; 0x3c
 800bb16:	99bc      	ldr	r1, [sp, #752]	; 0x2f0
 800bb18:	92b4      	str	r2, [sp, #720]	; 0x2d0
 800bb1a:	f014 f99b 	bl	801fe54 <__aeabi_memcpy>
            state.sectionOffset = FindSection( state.format, state.section );
 800bb1e:	98db      	ldr	r0, [sp, #876]	; 0x36c
 800bb20:	a9dd      	add	r1, sp, #884	; 0x374
 800bb22:	90b3      	str	r0, [sp, #716]	; 0x2cc
 800bb24:	4608      	mov	r0, r1
 800bb26:	99bc      	ldr	r1, [sp, #752]	; 0x2f0
 800bb28:	9ab4      	ldr	r2, [sp, #720]	; 0x2d0
 800bb2a:	f014 f993 	bl	801fe54 <__aeabi_memcpy>
 800bb2e:	99dd      	ldr	r1, [sp, #884]	; 0x374
 800bb30:	98b3      	ldr	r0, [sp, #716]	; 0x2cc
 800bb32:	f001 fd13 	bl	800d55c <Number_FindSection$7260>
 800bb36:	99b7      	ldr	r1, [sp, #732]	; 0x2dc
 800bb38:	6048      	str	r0, [r1, #4]
 800bb3a:	e7ff      	b.n	800bb3c <Number_ToStringFormat$7259+0x90>

            while(true)
            {
                state.Reset();
 800bb3c:	98b6      	ldr	r0, [sp, #728]	; 0x2d8
 800bb3e:	f1a0 0108 	sub.w	r1, r0, #8
 800bb42:	460a      	mov	r2, r1
 800bb44:	4608      	mov	r0, r1
 800bb46:	92b2      	str	r2, [sp, #712]	; 0x2c8
 800bb48:	91b1      	str	r1, [sp, #708]	; 0x2c4
 800bb4a:	f001 fdbd 	bl	800d6c8 <ToStringFormatState_Reset$10850>

                char ch = state.DecodeFormat( state.Get() );
 800bb4e:	98b1      	ldr	r0, [sp, #708]	; 0x2c4
 800bb50:	f001 fdce 	bl	800d6f0 <ToStringFormatState_Get$10854>
 800bb54:	99b7      	ldr	r1, [sp, #732]	; 0x2dc
 800bb56:	f1a1 0208 	sub.w	r2, r1, #8
 800bb5a:	90b0      	str	r0, [sp, #704]	; 0x2c0
 800bb5c:	4610      	mov	r0, r2
 800bb5e:	99b0      	ldr	r1, [sp, #704]	; 0x2c0
 800bb60:	f001 fde2 	bl	800d728 <ToStringFormatState_DecodeFormat$10852>

                if(this.digits[0] != 0)
 800bb64:	98b8      	ldr	r0, [sp, #736]	; 0x2e0
 800bb66:	6941      	ldr	r1, [r0, #20]
 800bb68:	8989      	ldrh	r1, [r1, #12]
 800bb6a:	2900      	cmp	r1, #0
 800bb6c:	99b2      	ldr	r1, [sp, #712]	; 0x2c8
 800bb6e:	91af      	str	r1, [sp, #700]	; 0x2bc
 800bb70:	d01e      	beq.n	800bbb0 <Number_ToStringFormat$7259+0x104>
 800bb72:	e7ff      	b.n	800bb74 <Number_ToStringFormat$7259+0xc8>
 800bb74:	98b8      	ldr	r0, [sp, #736]	; 0x2e0
 800bb76:	68c1      	ldr	r1, [r0, #12]
 800bb78:	f60d 1054 	addw	r0, sp, #2388	; 0x954
 800bb7c:	223c      	movs	r2, #60	; 0x3c
 800bb7e:	9bbc      	ldr	r3, [sp, #752]	; 0x2f0
 800bb80:	91ae      	str	r1, [sp, #696]	; 0x2b8
 800bb82:	4619      	mov	r1, r3
 800bb84:	92ad      	str	r2, [sp, #692]	; 0x2b4
 800bb86:	f014 f965 	bl	801fe54 <__aeabi_memcpy>
 800bb8a:	f8dd 0968 	ldr.w	r0, [sp, #2408]	; 0x968
                {
                    this.scale += state.scaleAdjust;
 800bb8e:	99ae      	ldr	r1, [sp, #696]	; 0x2b8
 800bb90:	4408      	add	r0, r1
 800bb92:	99b8      	ldr	r1, [sp, #736]	; 0x2e0
 800bb94:	60c8      	str	r0, [r1, #12]
 800bb96:	f50d 6019 	add.w	r0, sp, #2448	; 0x990
 800bb9a:	99bc      	ldr	r1, [sp, #752]	; 0x2f0
 800bb9c:	9aad      	ldr	r2, [sp, #692]	; 0x2b4
 800bb9e:	f014 f959 	bl	801fe54 <__aeabi_memcpy>

                    int pos = (state.scientific ?
 800bba2:	f89d 09a8 	ldrb.w	r0, [sp, #2472]	; 0x9a8
 800bba6:	2800      	cmp	r0, #0
 800bba8:	f040 855a 	bne.w	800c660 <Number_ToStringFormat$7259+0xbb4>
 800bbac:	f000 bd62 	b.w	800c674 <Number_ToStringFormat$7259+0xbc8>
 800bbb0:	98af      	ldr	r0, [sp, #700]	; 0x2bc
 800bbb2:	2100      	movs	r1, #0
 800bbb4:	9ab8      	ldr	r2, [sp, #736]	; 0x2e0
 800bbb6:	7411      	strb	r1, [r2, #16]
                    }
                }
                else
                {
                    this.negative = false;
                }
 800bbb8:	90ac      	str	r0, [sp, #688]	; 0x2b0
 800bbba:	e7ff      	b.n	800bbbc <Number_ToStringFormat$7259+0x110>
 800bbbc:	98ac      	ldr	r0, [sp, #688]	; 0x2b0
 800bbbe:	a9ec      	add	r1, sp, #944	; 0x3b0
 800bbc0:	223c      	movs	r2, #60	; 0x3c
 800bbc2:	90ab      	str	r0, [sp, #684]	; 0x2ac
 800bbc4:	4608      	mov	r0, r1
 800bbc6:	99bc      	ldr	r1, [sp, #752]	; 0x2f0
 800bbc8:	92aa      	str	r2, [sp, #680]	; 0x2a8
 800bbca:	f014 f943 	bl	801fe54 <__aeabi_memcpy>
 800bbce:	98ee      	ldr	r0, [sp, #952]	; 0x3b8
 800bbd0:	a9fb      	add	r1, sp, #1004	; 0x3ec
 800bbd2:	90a9      	str	r0, [sp, #676]	; 0x2a4
 800bbd4:	4608      	mov	r0, r1
 800bbd6:	99bc      	ldr	r1, [sp, #752]	; 0x2f0
 800bbd8:	9aaa      	ldr	r2, [sp, #680]	; 0x2a8
 800bbda:	f014 f93b 	bl	801fe54 <__aeabi_memcpy>
 800bbde:	f8dd 0408 	ldr.w	r0, [sp, #1032]	; 0x408
                break;
            }

            state.firstDigit = (state.firstDigit < state.decimalPos) ? state.decimalPos - state.firstDigit : 0;
 800bbe2:	99a9      	ldr	r1, [sp, #676]	; 0x2a4
 800bbe4:	4281      	cmp	r1, r0
 800bbe6:	da19      	bge.n	800bc1c <Number_ToStringFormat$7259+0x170>
 800bbe8:	e7ff      	b.n	800bbea <Number_ToStringFormat$7259+0x13e>
 800bbea:	f60d 00dc 	addw	r0, sp, #2268	; 0x8dc
 800bbee:	213c      	movs	r1, #60	; 0x3c
 800bbf0:	9abc      	ldr	r2, [sp, #752]	; 0x2f0
 800bbf2:	91a8      	str	r1, [sp, #672]	; 0x2a0
 800bbf4:	4611      	mov	r1, r2
 800bbf6:	9aa8      	ldr	r2, [sp, #672]	; 0x2a0
 800bbf8:	f014 f92c 	bl	801fe54 <__aeabi_memcpy>
 800bbfc:	f8dd 08f8 	ldr.w	r0, [sp, #2296]	; 0x8f8
 800bc00:	f60d 1118 	addw	r1, sp, #2328	; 0x918
 800bc04:	90a7      	str	r0, [sp, #668]	; 0x29c
 800bc06:	4608      	mov	r0, r1
 800bc08:	99bc      	ldr	r1, [sp, #752]	; 0x2f0
 800bc0a:	9aa8      	ldr	r2, [sp, #672]	; 0x2a0
 800bc0c:	f014 f922 	bl	801fe54 <__aeabi_memcpy>
 800bc10:	f8dd 0920 	ldr.w	r0, [sp, #2336]	; 0x920
 800bc14:	99a7      	ldr	r1, [sp, #668]	; 0x29c
 800bc16:	1a08      	subs	r0, r1, r0
 800bc18:	90a6      	str	r0, [sp, #664]	; 0x298
 800bc1a:	e002      	b.n	800bc22 <Number_ToStringFormat$7259+0x176>
 800bc1c:	2000      	movs	r0, #0
 800bc1e:	90a6      	str	r0, [sp, #664]	; 0x298
 800bc20:	e7ff      	b.n	800bc22 <Number_ToStringFormat$7259+0x176>
 800bc22:	98a6      	ldr	r0, [sp, #664]	; 0x298
 800bc24:	99b7      	ldr	r1, [sp, #732]	; 0x2dc
 800bc26:	6088      	str	r0, [r1, #8]
 800bc28:	f50d 6085 	add.w	r0, sp, #1064	; 0x428
 800bc2c:	223c      	movs	r2, #60	; 0x3c
 800bc2e:	99bc      	ldr	r1, [sp, #752]	; 0x2f0
 800bc30:	92a5      	str	r2, [sp, #660]	; 0x294
 800bc32:	f014 f90f 	bl	801fe54 <__aeabi_memcpy>
 800bc36:	f8dd 0434 	ldr.w	r0, [sp, #1076]	; 0x434
 800bc3a:	f20d 4164 	addw	r1, sp, #1124	; 0x464
 800bc3e:	90a4      	str	r0, [sp, #656]	; 0x290
 800bc40:	4608      	mov	r0, r1
 800bc42:	99bc      	ldr	r1, [sp, #752]	; 0x2f0
 800bc44:	9aa5      	ldr	r2, [sp, #660]	; 0x294
 800bc46:	f014 f905 	bl	801fe54 <__aeabi_memcpy>
 800bc4a:	f8dd 0480 	ldr.w	r0, [sp, #1152]	; 0x480
            state.lastDigit  = (state.lastDigit  > state.decimalPos) ? state.decimalPos - state. lastDigit : 0;
 800bc4e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800bc50:	4281      	cmp	r1, r0
 800bc52:	dd19      	ble.n	800bc88 <Number_ToStringFormat$7259+0x1dc>
 800bc54:	e7ff      	b.n	800bc56 <Number_ToStringFormat$7259+0x1aa>
 800bc56:	f60d 0064 	addw	r0, sp, #2148	; 0x864
 800bc5a:	213c      	movs	r1, #60	; 0x3c
 800bc5c:	9abc      	ldr	r2, [sp, #752]	; 0x2f0
 800bc5e:	91a3      	str	r1, [sp, #652]	; 0x28c
 800bc60:	4611      	mov	r1, r2
 800bc62:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
 800bc64:	f014 f8f6 	bl	801fe54 <__aeabi_memcpy>
 800bc68:	f8dd 0880 	ldr.w	r0, [sp, #2176]	; 0x880
 800bc6c:	f50d 610a 	add.w	r1, sp, #2208	; 0x8a0
 800bc70:	90a2      	str	r0, [sp, #648]	; 0x288
 800bc72:	4608      	mov	r0, r1
 800bc74:	99bc      	ldr	r1, [sp, #752]	; 0x2f0
 800bc76:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
 800bc78:	f014 f8ec 	bl	801fe54 <__aeabi_memcpy>
 800bc7c:	f8dd 08ac 	ldr.w	r0, [sp, #2220]	; 0x8ac
 800bc80:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800bc82:	1a08      	subs	r0, r1, r0
 800bc84:	90a1      	str	r0, [sp, #644]	; 0x284
 800bc86:	e002      	b.n	800bc8e <Number_ToStringFormat$7259+0x1e2>
 800bc88:	2000      	movs	r0, #0
 800bc8a:	90a1      	str	r0, [sp, #644]	; 0x284
 800bc8c:	e7ff      	b.n	800bc8e <Number_ToStringFormat$7259+0x1e2>
 800bc8e:	98a1      	ldr	r0, [sp, #644]	; 0x284
 800bc90:	99b7      	ldr	r1, [sp, #732]	; 0x2dc
 800bc92:	60c8      	str	r0, [r1, #12]
 800bc94:	f50d 6094 	add.w	r0, sp, #1184	; 0x4a0
 800bc98:	223c      	movs	r2, #60	; 0x3c
 800bc9a:	99bc      	ldr	r1, [sp, #752]	; 0x2f0
 800bc9c:	f014 f8da 	bl	801fe54 <__aeabi_memcpy>
 800bca0:	f89d 04b8 	ldrb.w	r0, [sp, #1208]	; 0x4b8

            int digPos;
            int adjust;

            if(state.scientific)
 800bca4:	2800      	cmp	r0, #0
 800bca6:	d00c      	beq.n	800bcc2 <Number_ToStringFormat$7259+0x216>
 800bca8:	e7ff      	b.n	800bcaa <Number_ToStringFormat$7259+0x1fe>
 800bcaa:	f60d 0028 	addw	r0, sp, #2088	; 0x828
 800bcae:	223c      	movs	r2, #60	; 0x3c
 800bcb0:	99bc      	ldr	r1, [sp, #752]	; 0x2f0
 800bcb2:	f014 f8cf 	bl	801fe54 <__aeabi_memcpy>
 800bcb6:	2000      	movs	r0, #0
 800bcb8:	f8dd 1844 	ldr.w	r1, [sp, #2116]	; 0x844
            {
                digPos = state.decimalPos;
                adjust = 0;
            }
 800bcbc:	90a0      	str	r0, [sp, #640]	; 0x280
 800bcbe:	919f      	str	r1, [sp, #636]	; 0x27c
 800bcc0:	e03c      	b.n	800bd3c <Number_ToStringFormat$7259+0x290>
 800bcc2:	98b8      	ldr	r0, [sp, #736]	; 0x2e0
 800bcc4:	68c1      	ldr	r1, [r0, #12]
 800bcc6:	f20d 40dc 	addw	r0, sp, #1244	; 0x4dc
 800bcca:	223c      	movs	r2, #60	; 0x3c
 800bccc:	9bbc      	ldr	r3, [sp, #752]	; 0x2f0
 800bcce:	919e      	str	r1, [sp, #632]	; 0x278
 800bcd0:	4619      	mov	r1, r3
 800bcd2:	f014 f8bf 	bl	801fe54 <__aeabi_memcpy>
 800bcd6:	f8dd 04f8 	ldr.w	r0, [sp, #1272]	; 0x4f8
            else
            {
                digPos = (this.scale > state.decimalPos) ? this.scale : state.decimalPos;
 800bcda:	999e      	ldr	r1, [sp, #632]	; 0x278
 800bcdc:	4281      	cmp	r1, r0
 800bcde:	dd08      	ble.n	800bcf2 <Number_ToStringFormat$7259+0x246>
 800bce0:	e7ff      	b.n	800bce2 <Number_ToStringFormat$7259+0x236>
 800bce2:	f20d 5054 	addw	r0, sp, #1364	; 0x554
 800bce6:	99b8      	ldr	r1, [sp, #736]	; 0x2e0
 800bce8:	68ca      	ldr	r2, [r1, #12]
 800bcea:	f8cd 2554 	str.w	r2, [sp, #1364]	; 0x554
 800bcee:	909d      	str	r0, [sp, #628]	; 0x274
 800bcf0:	e00d      	b.n	800bd0e <Number_ToStringFormat$7259+0x262>
 800bcf2:	f50d 60a3 	add.w	r0, sp, #1304	; 0x518
 800bcf6:	223c      	movs	r2, #60	; 0x3c
 800bcf8:	99bc      	ldr	r1, [sp, #752]	; 0x2f0
 800bcfa:	f014 f8ab 	bl	801fe54 <__aeabi_memcpy>
 800bcfe:	f20d 5054 	addw	r0, sp, #1364	; 0x554
 800bd02:	f8dd 1534 	ldr.w	r1, [sp, #1332]	; 0x534
 800bd06:	f8cd 1554 	str.w	r1, [sp, #1364]	; 0x554
 800bd0a:	909d      	str	r0, [sp, #628]	; 0x274
 800bd0c:	e7ff      	b.n	800bd0e <Number_ToStringFormat$7259+0x262>
 800bd0e:	989d      	ldr	r0, [sp, #628]	; 0x274
 800bd10:	6800      	ldr	r0, [r0, #0]
 800bd12:	99b8      	ldr	r1, [sp, #736]	; 0x2e0
 800bd14:	68ca      	ldr	r2, [r1, #12]
 800bd16:	f50d 63ab 	add.w	r3, sp, #1368	; 0x558
 800bd1a:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 800bd1e:	909c      	str	r0, [sp, #624]	; 0x270
 800bd20:	4618      	mov	r0, r3
 800bd22:	99bc      	ldr	r1, [sp, #752]	; 0x2f0
 800bd24:	929b      	str	r2, [sp, #620]	; 0x26c
 800bd26:	4662      	mov	r2, ip
 800bd28:	f014 f894 	bl	801fe54 <__aeabi_memcpy>
 800bd2c:	f8dd 0574 	ldr.w	r0, [sp, #1396]	; 0x574
                adjust = this.scale - state.decimalPos;
 800bd30:	999b      	ldr	r1, [sp, #620]	; 0x26c
 800bd32:	1a08      	subs	r0, r1, r0
 800bd34:	999c      	ldr	r1, [sp, #624]	; 0x270
            }
 800bd36:	90a0      	str	r0, [sp, #640]	; 0x280
 800bd38:	919f      	str	r1, [sp, #636]	; 0x27c
 800bd3a:	e7ff      	b.n	800bd3c <Number_ToStringFormat$7259+0x290>
 800bd3c:	989f      	ldr	r0, [sp, #636]	; 0x27c
 800bd3e:	99a0      	ldr	r1, [sp, #640]	; 0x280
 800bd40:	f20d 5294 	addw	r2, sp, #1428	; 0x594
 800bd44:	233c      	movs	r3, #60	; 0x3c
 800bd46:	909a      	str	r0, [sp, #616]	; 0x268
 800bd48:	4610      	mov	r0, r2
 800bd4a:	9abc      	ldr	r2, [sp, #752]	; 0x2f0
 800bd4c:	9199      	str	r1, [sp, #612]	; 0x264
 800bd4e:	4611      	mov	r1, r2
 800bd50:	461a      	mov	r2, r3
 800bd52:	f014 f87f 	bl	801fe54 <__aeabi_memcpy>
 800bd56:	f8dd 0598 	ldr.w	r0, [sp, #1432]	; 0x598
 800bd5a:	99b7      	ldr	r1, [sp, #732]	; 0x2dc
 800bd5c:	6388      	str	r0, [r1, #56]	; 0x38

            state.src = state.sectionOffset;

            ulong adjustLength   = (adjust > 0) ? (uint)adjust : 0U;
 800bd5e:	9899      	ldr	r0, [sp, #612]	; 0x264
 800bd60:	2801      	cmp	r0, #1
 800bd62:	db01      	blt.n	800bd68 <Number_ToStringFormat$7259+0x2bc>
 800bd64:	e7ff      	b.n	800bd66 <Number_ToStringFormat$7259+0x2ba>
 800bd66:	e000      	b.n	800bd6a <Number_ToStringFormat$7259+0x2be>
 800bd68:	e7ff      	b.n	800bd6a <Number_ToStringFormat$7259+0x2be>
 800bd6a:	f50d 60ba 	add.w	r0, sp, #1488	; 0x5d0
 800bd6e:	223c      	movs	r2, #60	; 0x3c
 800bd70:	99bc      	ldr	r1, [sp, #752]	; 0x2f0
 800bd72:	f014 f86f 	bl	801fe54 <__aeabi_memcpy>
 800bd76:	f8dd 05f8 	ldr.w	r0, [sp, #1528]	; 0x5f8
 800bd7a:	2100      	movs	r1, #0
 800bd7c:	f04f 32ff 	mov.w	r2, #4294967295
            int   bufferLength   = 125;
            int[] thousandSepPos = null;
            int   thousandSepCtr = -1;

            if(state.thousandSeps != 0)
 800bd80:	2800      	cmp	r0, #0
 800bd82:	9298      	str	r2, [sp, #608]	; 0x260
 800bd84:	9197      	str	r1, [sp, #604]	; 0x25c
 800bd86:	d008      	beq.n	800bd9a <Number_ToStringFormat$7259+0x2ee>
 800bd88:	e7ff      	b.n	800bd8a <Number_ToStringFormat$7259+0x2de>
            {
                int groupSizeLen = info.numberGroupSizes.Length;
 800bd8a:	98ba      	ldr	r0, [sp, #744]	; 0x2e8
 800bd8c:	6881      	ldr	r1, [r0, #8]
    // a Number) or a positive or negative infinity, then regardless of the format
    // string, the resulting string is given by the NaNSymbol,
    // PositiveInfinitySymbol, or NegativeInfinitySymbol property of
    // the NumberFormatInfo used to format the number.
    //
    // Parsing
 800bd8e:	6889      	ldr	r1, [r1, #8]
            int   thousandSepCtr = -1;

            if(state.thousandSeps != 0)
            {
                int groupSizeLen = info.numberGroupSizes.Length;
                if(groupSizeLen == 0)
 800bd90:	2900      	cmp	r1, #0
 800bd92:	9196      	str	r1, [sp, #600]	; 0x258
 800bd94:	f000 833f 	beq.w	800c416 <Number_ToStringFormat$7259+0x96a>
 800bd98:	e345      	b.n	800c426 <Number_ToStringFormat$7259+0x97a>
 800bd9a:	9897      	ldr	r0, [sp, #604]	; 0x25c
 800bd9c:	9998      	ldr	r1, [sp, #608]	; 0x260

                    adjustLength += (ulong)((thousandSepCtr + 1) * info.numberGroupSeparator.Length);
                }
            }

            System.Text.StringBuilder sb = new System.Text.StringBuilder( 128 );
 800bd9e:	f8df 29d0 	ldr.w	r2, [pc, #2512]	; 800c770 <Number_ToStringFormat$7259+0xcc4>
 800bda2:	f8df 39d8 	ldr.w	r3, [pc, #2520]	; 800c77c <Number_ToStringFormat$7259+0xcd0>
 800bda6:	447b      	add	r3, pc
 800bda8:	441a      	add	r2, r3
 800bdaa:	f8df c9d4 	ldr.w	ip, [pc, #2516]	; 800c780 <Number_ToStringFormat$7259+0xcd4>
 800bdae:	449c      	add	ip, r3
 800bdb0:	9095      	str	r0, [sp, #596]	; 0x254
 800bdb2:	4610      	mov	r0, r2
 800bdb4:	9194      	str	r1, [sp, #592]	; 0x250
 800bdb6:	4661      	mov	r1, ip
 800bdb8:	9393      	str	r3, [sp, #588]	; 0x24c
 800bdba:	f7f4 fd01 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800bdbe:	4601      	mov	r1, r0
 800bdc0:	f8df 29c0 	ldr.w	r2, [pc, #2496]	; 800c784 <Number_ToStringFormat$7259+0xcd8>
 800bdc4:	9b93      	ldr	r3, [sp, #588]	; 0x24c
 800bdc6:	58d2      	ldr	r2, [r2, r3]
 800bdc8:	9192      	str	r1, [sp, #584]	; 0x248
 800bdca:	4611      	mov	r1, r2
 800bdcc:	f7f6 fd8c 	bl	80028e8 <StringBuilder_.ctor$8488>

            if(this.negative && state.sectionOffset == 0)
 800bdd0:	98b8      	ldr	r0, [sp, #736]	; 0x2e0
 800bdd2:	7c01      	ldrb	r1, [r0, #16]
 800bdd4:	2900      	cmp	r1, #0
 800bdd6:	d00c      	beq.n	800bdf2 <Number_ToStringFormat$7259+0x346>
 800bdd8:	e7ff      	b.n	800bdda <Number_ToStringFormat$7259+0x32e>
 800bdda:	f20d 7074 	addw	r0, sp, #1908	; 0x774
 800bdde:	223c      	movs	r2, #60	; 0x3c
 800bde0:	99bc      	ldr	r1, [sp, #752]	; 0x2f0
 800bde2:	f014 f837 	bl	801fe54 <__aeabi_memcpy>
 800bde6:	f8dd 0778 	ldr.w	r0, [sp, #1912]	; 0x778
 800bdea:	2800      	cmp	r0, #0
 800bdec:	f000 830c 	beq.w	800c408 <Number_ToStringFormat$7259+0x95c>
 800bdf0:	e7ff      	b.n	800bdf2 <Number_ToStringFormat$7259+0x346>
            {
                sb.Append( info.negativeSign );
            }

            {
                char ch          = state.Get();
 800bdf2:	98ab      	ldr	r0, [sp, #684]	; 0x2ac
 800bdf4:	f001 fc7c 	bl	800d6f0 <ToStringFormatState_Get$10854>
 800bdf8:	2100      	movs	r1, #0
 800bdfa:	9a94      	ldr	r2, [sp, #592]	; 0x250
 800bdfc:	9b99      	ldr	r3, [sp, #612]	; 0x264
 800bdfe:	f8dd c268 	ldr.w	ip, [sp, #616]	; 0x268
                int  digitOffset = 0;
 800be02:	9191      	str	r1, [sp, #580]	; 0x244
 800be04:	9090      	str	r0, [sp, #576]	; 0x240
 800be06:	928f      	str	r2, [sp, #572]	; 0x23c
 800be08:	938e      	str	r3, [sp, #568]	; 0x238
 800be0a:	f8cd c234 	str.w	ip, [sp, #564]	; 0x234
 800be0e:	e7ff      	b.n	800be10 <Number_ToStringFormat$7259+0x364>
 800be10:	988d      	ldr	r0, [sp, #564]	; 0x234
 800be12:	998e      	ldr	r1, [sp, #568]	; 0x238
 800be14:	9a8f      	ldr	r2, [sp, #572]	; 0x23c
 800be16:	9b90      	ldr	r3, [sp, #576]	; 0x240
 800be18:	f8dd c244 	ldr.w	ip, [sp, #580]	; 0x244
 800be1c:	f64f 7eff 	movw	lr, #65535	; 0xffff

                while(ch != 0 && ch != ';')
 800be20:	ea13 0f0e 	tst.w	r3, lr
 800be24:	908c      	str	r0, [sp, #560]	; 0x230
 800be26:	918b      	str	r1, [sp, #556]	; 0x22c
 800be28:	928a      	str	r2, [sp, #552]	; 0x228
 800be2a:	9389      	str	r3, [sp, #548]	; 0x224
 800be2c:	f8cd c220 	str.w	ip, [sp, #544]	; 0x220
 800be30:	d005      	beq.n	800be3e <Number_ToStringFormat$7259+0x392>
 800be32:	e7ff      	b.n	800be34 <Number_ToStringFormat$7259+0x388>
 800be34:	9889      	ldr	r0, [sp, #548]	; 0x224
 800be36:	b281      	uxth	r1, r0
 800be38:	293b      	cmp	r1, #59	; 0x3b
 800be3a:	d107      	bne.n	800be4c <Number_ToStringFormat$7259+0x3a0>
 800be3c:	e7ff      	b.n	800be3e <Number_ToStringFormat$7259+0x392>

                    ch = state.Get();
                }
            }

            return sb.ToString();
 800be3e:	9892      	ldr	r0, [sp, #584]	; 0x248
 800be40:	f7f6 fd20 	bl	8002884 <StringBuilder_ToString$8499>
 800be44:	f50d 6d37 	add.w	sp, sp, #2928	; 0xb70
 800be48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be4c:	9889      	ldr	r0, [sp, #548]	; 0x224
 800be4e:	b281      	uxth	r1, r0
                char ch          = state.Get();
                int  digitOffset = 0;

                while(ch != 0 && ch != ';')
                {
                    switch(ch)
 800be50:	2946      	cmp	r1, #70	; 0x46
 800be52:	9087      	str	r0, [sp, #540]	; 0x21c
 800be54:	d306      	bcc.n	800be64 <Number_ToStringFormat$7259+0x3b8>
 800be56:	e7ff      	b.n	800be58 <Number_ToStringFormat$7259+0x3ac>
 800be58:	9887      	ldr	r0, [sp, #540]	; 0x21c
 800be5a:	b281      	uxth	r1, r0
 800be5c:	295c      	cmp	r1, #92	; 0x5c
 800be5e:	f000 829b 	beq.w	800c398 <Number_ToStringFormat$7259+0x8ec>
 800be62:	e2a3      	b.n	800c3ac <Number_ToStringFormat$7259+0x900>
 800be64:	9887      	ldr	r0, [sp, #540]	; 0x21c
 800be66:	b281      	uxth	r1, r0
 800be68:	3922      	subs	r1, #34	; 0x22
 800be6a:	460a      	mov	r2, r1
 800be6c:	2905      	cmp	r1, #5
 800be6e:	9286      	str	r2, [sp, #536]	; 0x218
 800be70:	d822      	bhi.n	800beb8 <Number_ToStringFormat$7259+0x40c>
 800be72:	9986      	ldr	r1, [sp, #536]	; 0x218
 800be74:	e8df f001 	tbb	[pc, r1]
 800be78:	0f423903 	.word	0x0f423903
 800be7c:	0342      	.short	0x0342
 800be7e:	e7ff      	b.n	800be80 <Number_ToStringFormat$7259+0x3d4>

                        case '\'':
                        case '"':
                            while(true)
                            {
                                char ch2 = state.Get();
 800be80:	98ab      	ldr	r0, [sp, #684]	; 0x2ac
 800be82:	f001 fc35 	bl	800d6f0 <ToStringFormatState_Get$10854>
 800be86:	4601      	mov	r1, r0
 800be88:	f64f 72ff 	movw	r2, #65535	; 0xffff

                                if(ch2 == 0 || ch2 == ch)
 800be8c:	4210      	tst	r0, r2
 800be8e:	9185      	str	r1, [sp, #532]	; 0x214
 800be90:	f040 826c 	bne.w	800c36c <Number_ToStringFormat$7259+0x8c0>
 800be94:	e271      	b.n	800c37a <Number_ToStringFormat$7259+0x8ce>
                        case '\u2030':
                            sb.Append( info.perMilleSymbol );
                            break;

                        case '%':
                            sb.Append( info.percentSymbol );
 800be96:	98ba      	ldr	r0, [sp, #744]	; 0x2e8
 800be98:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800be9a:	9892      	ldr	r0, [sp, #584]	; 0x248
 800be9c:	f000 ffae 	bl	800cdfc <StringBuilder_Append$8507>
 800bea0:	9988      	ldr	r1, [sp, #544]	; 0x220
 800bea2:	9a8a      	ldr	r2, [sp, #552]	; 0x228
 800bea4:	9b8b      	ldr	r3, [sp, #556]	; 0x22c
 800bea6:	f8dd c230 	ldr.w	ip, [sp, #560]	; 0x230
                            break;
 800beaa:	907b      	str	r0, [sp, #492]	; 0x1ec
 800beac:	917f      	str	r1, [sp, #508]	; 0x1fc
 800beae:	927e      	str	r2, [sp, #504]	; 0x1f8
 800beb0:	937d      	str	r3, [sp, #500]	; 0x1f4
 800beb2:	f8cd c1f0 	str.w	ip, [sp, #496]	; 0x1f0
 800beb6:	e030      	b.n	800bf1a <Number_ToStringFormat$7259+0x46e>
                char ch          = state.Get();
                int  digitOffset = 0;

                while(ch != 0 && ch != ';')
                {
                    switch(ch)
 800beb8:	9887      	ldr	r0, [sp, #540]	; 0x21c
 800beba:	b281      	uxth	r1, r0
 800bebc:	392c      	subs	r1, #44	; 0x2c
 800bebe:	460a      	mov	r2, r1
 800bec0:	2904      	cmp	r1, #4
 800bec2:	927a      	str	r2, [sp, #488]	; 0x1e8
 800bec4:	d842      	bhi.n	800bf4c <Number_ToStringFormat$7259+0x4a0>
 800bec6:	997a      	ldr	r1, [sp, #488]	; 0x1e8
 800bec8:	9a88      	ldr	r2, [sp, #544]	; 0x220
 800beca:	9b8a      	ldr	r3, [sp, #552]	; 0x228
 800becc:	f8dd c22c 	ldr.w	ip, [sp, #556]	; 0x22c
 800bed0:	f8dd e230 	ldr.w	lr, [sp, #560]	; 0x230
 800bed4:	f8cd e1f0 	str.w	lr, [sp, #496]	; 0x1f0
 800bed8:	927f      	str	r2, [sp, #508]	; 0x1fc
 800beda:	937e      	str	r3, [sp, #504]	; 0x1f8
 800bedc:	f8cd c1f4 	str.w	ip, [sp, #500]	; 0x1f4
 800bee0:	e8df f001 	tbb	[pc, r1]
 800bee4:	0c1b0c1b 	.word	0x0c1b0c1b
 800bee8:	0003      	.short	0x0003
 800beea:	9888      	ldr	r0, [sp, #544]	; 0x220
 800beec:	998a      	ldr	r1, [sp, #552]	; 0x228
 800beee:	9a8b      	ldr	r2, [sp, #556]	; 0x22c
 800bef0:	9b8c      	ldr	r3, [sp, #560]	; 0x230
                    {
                        case '#':
                        case '0':
                            {
 800bef2:	9084      	str	r0, [sp, #528]	; 0x210
 800bef4:	9183      	str	r1, [sp, #524]	; 0x20c
 800bef6:	9282      	str	r2, [sp, #520]	; 0x208
 800bef8:	9381      	str	r3, [sp, #516]	; 0x204
 800befa:	e106      	b.n	800c10a <Number_ToStringFormat$7259+0x65e>
                                }
                                break;
                            }

                        default:
                            sb.Append( ch );
 800befc:	9892      	ldr	r0, [sp, #584]	; 0x248
 800befe:	9989      	ldr	r1, [sp, #548]	; 0x224
 800bf00:	f001 fd38 	bl	800d974 <StringBuilder_Append$8521>
 800bf04:	9988      	ldr	r1, [sp, #544]	; 0x220
 800bf06:	9a8a      	ldr	r2, [sp, #552]	; 0x228
 800bf08:	9b8b      	ldr	r3, [sp, #556]	; 0x22c
 800bf0a:	f8dd c230 	ldr.w	ip, [sp, #560]	; 0x230
                            break;
 800bf0e:	9080      	str	r0, [sp, #512]	; 0x200
 800bf10:	917f      	str	r1, [sp, #508]	; 0x1fc
 800bf12:	927e      	str	r2, [sp, #504]	; 0x1f8
 800bf14:	937d      	str	r3, [sp, #500]	; 0x1f4
 800bf16:	f8cd c1f0 	str.w	ip, [sp, #496]	; 0x1f0
 800bf1a:	987c      	ldr	r0, [sp, #496]	; 0x1f0
 800bf1c:	997d      	ldr	r1, [sp, #500]	; 0x1f4
 800bf1e:	9a7e      	ldr	r2, [sp, #504]	; 0x1f8
 800bf20:	9b7f      	ldr	r3, [sp, #508]	; 0x1fc
                    }

                    ch = state.Get();
 800bf22:	f8dd c2ac 	ldr.w	ip, [sp, #684]	; 0x2ac
 800bf26:	9079      	str	r0, [sp, #484]	; 0x1e4
 800bf28:	4660      	mov	r0, ip
 800bf2a:	9178      	str	r1, [sp, #480]	; 0x1e0
 800bf2c:	9277      	str	r2, [sp, #476]	; 0x1dc
 800bf2e:	9376      	str	r3, [sp, #472]	; 0x1d8
 800bf30:	f001 fbde 	bl	800d6f0 <ToStringFormatState_Get$10854>
 800bf34:	9976      	ldr	r1, [sp, #472]	; 0x1d8
 800bf36:	9a77      	ldr	r2, [sp, #476]	; 0x1dc
 800bf38:	9b78      	ldr	r3, [sp, #480]	; 0x1e0
 800bf3a:	f8dd c1e4 	ldr.w	ip, [sp, #484]	; 0x1e4
                }
 800bf3e:	9191      	str	r1, [sp, #580]	; 0x244
 800bf40:	9090      	str	r0, [sp, #576]	; 0x240
 800bf42:	928f      	str	r2, [sp, #572]	; 0x23c
 800bf44:	938e      	str	r3, [sp, #568]	; 0x238
 800bf46:	f8cd c234 	str.w	ip, [sp, #564]	; 0x234
 800bf4a:	e761      	b.n	800be10 <Number_ToStringFormat$7259+0x364>
 800bf4c:	9887      	ldr	r0, [sp, #540]	; 0x21c
 800bf4e:	b281      	uxth	r1, r0
                char ch          = state.Get();
                int  digitOffset = 0;

                while(ch != 0 && ch != ';')
                {
                    switch(ch)
 800bf50:	2945      	cmp	r1, #69	; 0x45
 800bf52:	d1d3      	bne.n	800befc <Number_ToStringFormat$7259+0x450>
 800bf54:	e7ff      	b.n	800bf56 <Number_ToStringFormat$7259+0x4aa>
 800bf56:	f20d 600c 	addw	r0, sp, #1548	; 0x60c
 800bf5a:	223c      	movs	r2, #60	; 0x3c
 800bf5c:	99bc      	ldr	r1, [sp, #752]	; 0x2f0
 800bf5e:	f013 ff79 	bl	801fe54 <__aeabi_memcpy>
 800bf62:	f89d 0624 	ldrb.w	r0, [sp, #1572]	; 0x624
                        case 'e':
                            {
                                String sign = null;
                                int    i    = 0;

                                if(state.scientific)
 800bf66:	2800      	cmp	r0, #0
 800bf68:	d017      	beq.n	800bf9a <Number_ToStringFormat$7259+0x4ee>
 800bf6a:	e7ff      	b.n	800bf6c <Number_ToStringFormat$7259+0x4c0>
 800bf6c:	2100      	movs	r1, #0
                                {
                                    char ch2 = state.PeekAt( 0 );
 800bf6e:	98ab      	ldr	r0, [sp, #684]	; 0x2ac
 800bf70:	f001 fd3a 	bl	800d9e8 <ToStringFormatState_PeekAt$10856>
 800bf74:	b281      	uxth	r1, r0
 800bf76:	f8df 2810 	ldr.w	r2, [pc, #2064]	; 800c788 <Number_ToStringFormat$7259+0xcdc>
 800bf7a:	f8df 3810 	ldr.w	r3, [pc, #2064]	; 800c78c <Number_ToStringFormat$7259+0xce0>
 800bf7e:	447b      	add	r3, pc
 800bf80:	58d2      	ldr	r2, [r2, r3]
                                    char ch3 = state.PeekAt( 1 );
 800bf82:	9bab      	ldr	r3, [sp, #684]	; 0x2ac
 800bf84:	9075      	str	r0, [sp, #468]	; 0x1d4
 800bf86:	4618      	mov	r0, r3
 800bf88:	9174      	str	r1, [sp, #464]	; 0x1d0
 800bf8a:	4611      	mov	r1, r2
 800bf8c:	f001 fd2c 	bl	800d9e8 <ToStringFormatState_PeekAt$10856>

                                    if(ch2 == '0')
 800bf90:	9974      	ldr	r1, [sp, #464]	; 0x1d0
 800bf92:	2930      	cmp	r1, #48	; 0x30
 800bf94:	9073      	str	r0, [sp, #460]	; 0x1cc
 800bf96:	d023      	beq.n	800bfe0 <Number_ToStringFormat$7259+0x534>
 800bf98:	e027      	b.n	800bfea <Number_ToStringFormat$7259+0x53e>
                                    FormatExponent( sb, exp, ch, sign, info.negativeSign, i );
                                    state.scientific = false;
                                }
                                else
                                {
                                    sb.Append( ch );
 800bf9a:	9892      	ldr	r0, [sp, #584]	; 0x248
 800bf9c:	9989      	ldr	r1, [sp, #548]	; 0x224
 800bf9e:	f001 fce9 	bl	800d974 <StringBuilder_Append$8521>
 800bfa2:	9072      	str	r0, [sp, #456]	; 0x1c8
 800bfa4:	e7ff      	b.n	800bfa6 <Number_ToStringFormat$7259+0x4fa>
 800bfa6:	2100      	movs	r1, #0

                                    while(state.PeekAt( 0 ) != 0)
 800bfa8:	98ab      	ldr	r0, [sp, #684]	; 0x2ac
 800bfaa:	f001 fd1d 	bl	800d9e8 <ToStringFormatState_PeekAt$10856>
 800bfae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800bfb2:	4208      	tst	r0, r1
 800bfb4:	d00b      	beq.n	800bfce <Number_ToStringFormat$7259+0x522>
 800bfb6:	e7ff      	b.n	800bfb8 <Number_ToStringFormat$7259+0x50c>
                                    {
                                        sb.Append( state.Get() );
 800bfb8:	98ab      	ldr	r0, [sp, #684]	; 0x2ac
 800bfba:	f001 fb99 	bl	800d6f0 <ToStringFormatState_Get$10854>
 800bfbe:	9992      	ldr	r1, [sp, #584]	; 0x248
 800bfc0:	9071      	str	r0, [sp, #452]	; 0x1c4
 800bfc2:	4608      	mov	r0, r1
 800bfc4:	9971      	ldr	r1, [sp, #452]	; 0x1c4
 800bfc6:	f001 fcd5 	bl	800d974 <StringBuilder_Append$8521>
                                    }
 800bfca:	9070      	str	r0, [sp, #448]	; 0x1c0
 800bfcc:	e7eb      	b.n	800bfa6 <Number_ToStringFormat$7259+0x4fa>
 800bfce:	9888      	ldr	r0, [sp, #544]	; 0x220
 800bfd0:	998a      	ldr	r1, [sp, #552]	; 0x228
 800bfd2:	9a8b      	ldr	r2, [sp, #556]	; 0x22c
 800bfd4:	9b8c      	ldr	r3, [sp, #560]	; 0x230
                                }
 800bfd6:	907f      	str	r0, [sp, #508]	; 0x1fc
 800bfd8:	917e      	str	r1, [sp, #504]	; 0x1f8
 800bfda:	927d      	str	r2, [sp, #500]	; 0x1f4
 800bfdc:	937c      	str	r3, [sp, #496]	; 0x1f0
 800bfde:	e79c      	b.n	800bf1a <Number_ToStringFormat$7259+0x46e>
 800bfe0:	2000      	movs	r0, #0
 800bfe2:	2101      	movs	r1, #1
                                    char ch3 = state.PeekAt( 1 );

                                    if(ch2 == '0')
                                    {
                                        i++;
                                    }
 800bfe4:	916f      	str	r1, [sp, #444]	; 0x1bc
 800bfe6:	906e      	str	r0, [sp, #440]	; 0x1b8
 800bfe8:	e02e      	b.n	800c048 <Number_ToStringFormat$7259+0x59c>
 800bfea:	9875      	ldr	r0, [sp, #468]	; 0x1d4
 800bfec:	b281      	uxth	r1, r0
                                    else if(ch2 == '+' &&
 800bfee:	292b      	cmp	r1, #43	; 0x2b
 800bff0:	d005      	beq.n	800bffe <Number_ToStringFormat$7259+0x552>
 800bff2:	e7ff      	b.n	800bff4 <Number_ToStringFormat$7259+0x548>
 800bff4:	9875      	ldr	r0, [sp, #468]	; 0x1d4
 800bff6:	b281      	uxth	r1, r0
                                            ch3 == '0')
                                    {
                                        sign = info.positiveSign;
                                    }
                                    else if(ch2 == '-' &&
 800bff8:	292d      	cmp	r1, #45	; 0x2d
 800bffa:	d10b      	bne.n	800c014 <Number_ToStringFormat$7259+0x568>
 800bffc:	e01a      	b.n	800c034 <Number_ToStringFormat$7259+0x588>
 800bffe:	9873      	ldr	r0, [sp, #460]	; 0x1cc
 800c000:	b281      	uxth	r1, r0

                                    if(ch2 == '0')
                                    {
                                        i++;
                                    }
                                    else if(ch2 == '+' &&
 800c002:	2930      	cmp	r1, #48	; 0x30
 800c004:	d1f6      	bne.n	800bff4 <Number_ToStringFormat$7259+0x548>
 800c006:	e7ff      	b.n	800c008 <Number_ToStringFormat$7259+0x55c>
                                            ch3 == '0')
                                    {
                                        sign = info.positiveSign;
 800c008:	98ba      	ldr	r0, [sp, #744]	; 0x2e8
 800c00a:	6941      	ldr	r1, [r0, #20]
 800c00c:	2200      	movs	r2, #0
                                    }
 800c00e:	926f      	str	r2, [sp, #444]	; 0x1bc
 800c010:	916e      	str	r1, [sp, #440]	; 0x1b8
 800c012:	e019      	b.n	800c048 <Number_ToStringFormat$7259+0x59c>
                                    {
                                        // Do nothing
                                    }
                                    else
                                    {
                                        sb.Append( ch );
 800c014:	9892      	ldr	r0, [sp, #584]	; 0x248
 800c016:	9989      	ldr	r1, [sp, #548]	; 0x224
 800c018:	f001 fcac 	bl	800d974 <StringBuilder_Append$8521>
 800c01c:	9988      	ldr	r1, [sp, #544]	; 0x220
 800c01e:	9a8a      	ldr	r2, [sp, #552]	; 0x228
 800c020:	9b8b      	ldr	r3, [sp, #556]	; 0x22c
 800c022:	f8dd c230 	ldr.w	ip, [sp, #560]	; 0x230
                                        break;
 800c026:	906d      	str	r0, [sp, #436]	; 0x1b4
 800c028:	917f      	str	r1, [sp, #508]	; 0x1fc
 800c02a:	927e      	str	r2, [sp, #504]	; 0x1f8
 800c02c:	937d      	str	r3, [sp, #500]	; 0x1f4
 800c02e:	f8cd c1f0 	str.w	ip, [sp, #496]	; 0x1f0
 800c032:	e772      	b.n	800bf1a <Number_ToStringFormat$7259+0x46e>
 800c034:	9873      	ldr	r0, [sp, #460]	; 0x1cc
 800c036:	b281      	uxth	r1, r0
                                    else if(ch2 == '+' &&
                                            ch3 == '0')
                                    {
                                        sign = info.positiveSign;
                                    }
                                    else if(ch2 == '-' &&
 800c038:	2930      	cmp	r1, #48	; 0x30
 800c03a:	d1eb      	bne.n	800c014 <Number_ToStringFormat$7259+0x568>
 800c03c:	e7ff      	b.n	800c03e <Number_ToStringFormat$7259+0x592>
 800c03e:	2000      	movs	r0, #0
 800c040:	4601      	mov	r1, r0
                                            ch3 == '0')
                                    {
                                        // Do nothing
                                    }
 800c042:	906f      	str	r0, [sp, #444]	; 0x1bc
 800c044:	916e      	str	r1, [sp, #440]	; 0x1b8
 800c046:	e7ff      	b.n	800c048 <Number_ToStringFormat$7259+0x59c>
 800c048:	986e      	ldr	r0, [sp, #440]	; 0x1b8
 800c04a:	996f      	ldr	r1, [sp, #444]	; 0x1bc
                                    {
                                        sb.Append( ch );
                                        break;
                                    }

                                    state.Advance();
 800c04c:	9aab      	ldr	r2, [sp, #684]	; 0x2ac
 800c04e:	906c      	str	r0, [sp, #432]	; 0x1b0
 800c050:	4610      	mov	r0, r2
 800c052:	916b      	str	r1, [sp, #428]	; 0x1ac
 800c054:	f001 fce7 	bl	800da26 <ToStringFormatState_Advance$10858>
 800c058:	986b      	ldr	r0, [sp, #428]	; 0x1ac
 800c05a:	906a      	str	r0, [sp, #424]	; 0x1a8
 800c05c:	e7ff      	b.n	800c05e <Number_ToStringFormat$7259+0x5b2>
 800c05e:	986a      	ldr	r0, [sp, #424]	; 0x1a8

                                    while(state.PeekAt( 0 ) == '0')
 800c060:	2100      	movs	r1, #0
 800c062:	9aab      	ldr	r2, [sp, #684]	; 0x2ac
 800c064:	9069      	str	r0, [sp, #420]	; 0x1a4
 800c066:	4610      	mov	r0, r2
 800c068:	f001 fcbe 	bl	800d9e8 <ToStringFormatState_PeekAt$10856>
 800c06c:	b280      	uxth	r0, r0
 800c06e:	2830      	cmp	r0, #48	; 0x30
 800c070:	9869      	ldr	r0, [sp, #420]	; 0x1a4
 800c072:	9068      	str	r0, [sp, #416]	; 0x1a0
 800c074:	d107      	bne.n	800c086 <Number_ToStringFormat$7259+0x5da>
 800c076:	e7ff      	b.n	800c078 <Number_ToStringFormat$7259+0x5cc>
                                    {
                                        state.Advance();
 800c078:	98ab      	ldr	r0, [sp, #684]	; 0x2ac
 800c07a:	f001 fcd4 	bl	800da26 <ToStringFormatState_Advance$10858>
                                        i++;
 800c07e:	9869      	ldr	r0, [sp, #420]	; 0x1a4
 800c080:	1c41      	adds	r1, r0, #1
                                    }
 800c082:	916a      	str	r1, [sp, #424]	; 0x1a8
 800c084:	e7eb      	b.n	800c05e <Number_ToStringFormat$7259+0x5b2>
 800c086:	9868      	ldr	r0, [sp, #416]	; 0x1a0

                                    if(i > 10)
 800c088:	280b      	cmp	r0, #11
 800c08a:	9067      	str	r0, [sp, #412]	; 0x19c
 800c08c:	db03      	blt.n	800c096 <Number_ToStringFormat$7259+0x5ea>
 800c08e:	e7ff      	b.n	800c090 <Number_ToStringFormat$7259+0x5e4>
 800c090:	200a      	movs	r0, #10
                                    {
                                        i = 10;
                                    }
 800c092:	9067      	str	r0, [sp, #412]	; 0x19c
 800c094:	e7ff      	b.n	800c096 <Number_ToStringFormat$7259+0x5ea>
 800c096:	9867      	ldr	r0, [sp, #412]	; 0x19c

                                    int exp = ((this.digits[0] == 0) ? 0 : (this.scale - state.decimalPos));
 800c098:	99b8      	ldr	r1, [sp, #736]	; 0x2e0
 800c09a:	694a      	ldr	r2, [r1, #20]
 800c09c:	8992      	ldrh	r2, [r2, #12]
 800c09e:	2a00      	cmp	r2, #0
 800c0a0:	9066      	str	r0, [sp, #408]	; 0x198
 800c0a2:	d010      	beq.n	800c0c6 <Number_ToStringFormat$7259+0x61a>
 800c0a4:	e7ff      	b.n	800c0a6 <Number_ToStringFormat$7259+0x5fa>
 800c0a6:	98b8      	ldr	r0, [sp, #736]	; 0x2e0
 800c0a8:	68c1      	ldr	r1, [r0, #12]
 800c0aa:	f50d 60c9 	add.w	r0, sp, #1608	; 0x648
 800c0ae:	223c      	movs	r2, #60	; 0x3c
 800c0b0:	9bbc      	ldr	r3, [sp, #752]	; 0x2f0
 800c0b2:	9165      	str	r1, [sp, #404]	; 0x194
 800c0b4:	4619      	mov	r1, r3
 800c0b6:	f013 fecd 	bl	801fe54 <__aeabi_memcpy>
 800c0ba:	f8dd 0664 	ldr.w	r0, [sp, #1636]	; 0x664
 800c0be:	9965      	ldr	r1, [sp, #404]	; 0x194
 800c0c0:	1a08      	subs	r0, r1, r0
 800c0c2:	9064      	str	r0, [sp, #400]	; 0x190
 800c0c4:	e002      	b.n	800c0cc <Number_ToStringFormat$7259+0x620>
 800c0c6:	2000      	movs	r0, #0
 800c0c8:	9064      	str	r0, [sp, #400]	; 0x190
 800c0ca:	e7ff      	b.n	800c0cc <Number_ToStringFormat$7259+0x620>
 800c0cc:	9864      	ldr	r0, [sp, #400]	; 0x190

                                    FormatExponent( sb, exp, ch, sign, info.negativeSign, i );
 800c0ce:	99ba      	ldr	r1, [sp, #744]	; 0x2e8
 800c0d0:	698a      	ldr	r2, [r1, #24]
 800c0d2:	466b      	mov	r3, sp
 800c0d4:	f8dd c198 	ldr.w	ip, [sp, #408]	; 0x198
 800c0d8:	f8c3 c004 	str.w	ip, [r3, #4]
 800c0dc:	601a      	str	r2, [r3, #0]
 800c0de:	9a92      	ldr	r2, [sp, #584]	; 0x248
 800c0e0:	9063      	str	r0, [sp, #396]	; 0x18c
 800c0e2:	4610      	mov	r0, r2
 800c0e4:	9963      	ldr	r1, [sp, #396]	; 0x18c
 800c0e6:	9a89      	ldr	r2, [sp, #548]	; 0x224
 800c0e8:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
 800c0ea:	f001 fca5 	bl	800da38 <Number_FormatExponent$7274>
 800c0ee:	2000      	movs	r0, #0
 800c0f0:	99b6      	ldr	r1, [sp, #728]	; 0x2d8
 800c0f2:	7608      	strb	r0, [r1, #24]
 800c0f4:	9888      	ldr	r0, [sp, #544]	; 0x220
 800c0f6:	9a8a      	ldr	r2, [sp, #552]	; 0x228
 800c0f8:	9b8b      	ldr	r3, [sp, #556]	; 0x22c
 800c0fa:	f8dd c230 	ldr.w	ip, [sp, #560]	; 0x230
                                    state.scientific = false;
                                }
 800c0fe:	907f      	str	r0, [sp, #508]	; 0x1fc
 800c100:	927e      	str	r2, [sp, #504]	; 0x1f8
 800c102:	937d      	str	r3, [sp, #500]	; 0x1f4
 800c104:	f8cd c1f0 	str.w	ip, [sp, #496]	; 0x1f0
 800c108:	e707      	b.n	800bf1a <Number_ToStringFormat$7259+0x46e>
 800c10a:	9881      	ldr	r0, [sp, #516]	; 0x204
 800c10c:	9982      	ldr	r1, [sp, #520]	; 0x208
 800c10e:	9a83      	ldr	r2, [sp, #524]	; 0x20c
 800c110:	9b84      	ldr	r3, [sp, #528]	; 0x210
                    switch(ch)
                    {
                        case '#':
                        case '0':
                            {
                                while(adjust > 0)
 800c112:	2901      	cmp	r1, #1
 800c114:	4684      	mov	ip, r0
 800c116:	468e      	mov	lr, r1
 800c118:	4614      	mov	r4, r2
 800c11a:	461d      	mov	r5, r3
 800c11c:	9062      	str	r0, [sp, #392]	; 0x188
 800c11e:	9161      	str	r1, [sp, #388]	; 0x184
 800c120:	9260      	str	r2, [sp, #384]	; 0x180
 800c122:	935f      	str	r3, [sp, #380]	; 0x17c
 800c124:	f8cd c178 	str.w	ip, [sp, #376]	; 0x178
 800c128:	f8cd e174 	str.w	lr, [sp, #372]	; 0x174
 800c12c:	945c      	str	r4, [sp, #368]	; 0x170
 800c12e:	955b      	str	r5, [sp, #364]	; 0x16c
 800c130:	db0a      	blt.n	800c148 <Number_ToStringFormat$7259+0x69c>
 800c132:	e7ff      	b.n	800c134 <Number_ToStringFormat$7259+0x688>
                                {
                                    sb.Append( this.digits[digitOffset] != 0 ? this.digits[digitOffset++] : '0' );
 800c134:	98b8      	ldr	r0, [sp, #736]	; 0x2e0
 800c136:	6941      	ldr	r1, [r0, #20]
 800c138:	9a5f      	ldr	r2, [sp, #380]	; 0x17c
 800c13a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800c13e:	8989      	ldrh	r1, [r1, #12]
 800c140:	2900      	cmp	r1, #0
 800c142:	f040 80bc 	bne.w	800c2be <Number_ToStringFormat$7259+0x812>
 800c146:	e0c4      	b.n	800c2d2 <Number_ToStringFormat$7259+0x826>
 800c148:	985b      	ldr	r0, [sp, #364]	; 0x16c
 800c14a:	995c      	ldr	r1, [sp, #368]	; 0x170
 800c14c:	9a5d      	ldr	r2, [sp, #372]	; 0x174
 800c14e:	9b5e      	ldr	r3, [sp, #376]	; 0x178

                                    digPos--;
                                    adjust--;
                                }

                                if(adjust < 0)
 800c150:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c154:	905a      	str	r0, [sp, #360]	; 0x168
 800c156:	9159      	str	r1, [sp, #356]	; 0x164
 800c158:	9258      	str	r2, [sp, #352]	; 0x160
 800c15a:	9357      	str	r3, [sp, #348]	; 0x15c
 800c15c:	dc11      	bgt.n	800c182 <Number_ToStringFormat$7259+0x6d6>
 800c15e:	e7ff      	b.n	800c160 <Number_ToStringFormat$7259+0x6b4>
                                {
                                    adjust++;
 800c160:	9858      	ldr	r0, [sp, #352]	; 0x160
 800c162:	1c41      	adds	r1, r0, #1
 800c164:	f20d 60fc 	addw	r0, sp, #1788	; 0x6fc
 800c168:	223c      	movs	r2, #60	; 0x3c
 800c16a:	9bbc      	ldr	r3, [sp, #752]	; 0x2f0
 800c16c:	9156      	str	r1, [sp, #344]	; 0x158
 800c16e:	4619      	mov	r1, r3
 800c170:	f013 fe70 	bl	801fe54 <__aeabi_memcpy>
 800c174:	f8dd 0704 	ldr.w	r0, [sp, #1796]	; 0x704
                                    ch = (digPos <= state.firstDigit) ? '0' : '\0';
 800c178:	9957      	ldr	r1, [sp, #348]	; 0x15c
 800c17a:	4281      	cmp	r1, r0
 800c17c:	f340 8092 	ble.w	800c2a4 <Number_ToStringFormat$7259+0x7f8>
 800c180:	e093      	b.n	800c2aa <Number_ToStringFormat$7259+0x7fe>
                                }
                                else
                                {
                                    ch = ((this.digits[digitOffset] != 0) ? this.digits[digitOffset++] : ((digPos > state.lastDigit) ? '0' : '\0'));
 800c182:	98b8      	ldr	r0, [sp, #736]	; 0x2e0
 800c184:	6941      	ldr	r1, [r0, #20]
 800c186:	9a5a      	ldr	r2, [sp, #360]	; 0x168
 800c188:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800c18c:	8989      	ldrh	r1, [r1, #12]
 800c18e:	2900      	cmp	r1, #0
 800c190:	d00a      	beq.n	800c1a8 <Number_ToStringFormat$7259+0x6fc>
 800c192:	e7ff      	b.n	800c194 <Number_ToStringFormat$7259+0x6e8>
 800c194:	98b8      	ldr	r0, [sp, #736]	; 0x2e0
 800c196:	6941      	ldr	r1, [r0, #20]
 800c198:	9a5a      	ldr	r2, [sp, #360]	; 0x168
 800c19a:	1c53      	adds	r3, r2, #1
 800c19c:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800c1a0:	8989      	ldrh	r1, [r1, #12]
 800c1a2:	9155      	str	r1, [sp, #340]	; 0x154
 800c1a4:	9354      	str	r3, [sp, #336]	; 0x150
 800c1a6:	e015      	b.n	800c1d4 <Number_ToStringFormat$7259+0x728>
 800c1a8:	f20d 6084 	addw	r0, sp, #1668	; 0x684
 800c1ac:	223c      	movs	r2, #60	; 0x3c
 800c1ae:	99bc      	ldr	r1, [sp, #752]	; 0x2f0
 800c1b0:	f013 fe50 	bl	801fe54 <__aeabi_memcpy>
 800c1b4:	f8dd 0690 	ldr.w	r0, [sp, #1680]	; 0x690
 800c1b8:	9957      	ldr	r1, [sp, #348]	; 0x15c
 800c1ba:	4281      	cmp	r1, r0
 800c1bc:	dd05      	ble.n	800c1ca <Number_ToStringFormat$7259+0x71e>
 800c1be:	e7ff      	b.n	800c1c0 <Number_ToStringFormat$7259+0x714>
 800c1c0:	2030      	movs	r0, #48	; 0x30
 800c1c2:	995a      	ldr	r1, [sp, #360]	; 0x168
 800c1c4:	9055      	str	r0, [sp, #340]	; 0x154
 800c1c6:	9154      	str	r1, [sp, #336]	; 0x150
 800c1c8:	e004      	b.n	800c1d4 <Number_ToStringFormat$7259+0x728>
 800c1ca:	2000      	movs	r0, #0
 800c1cc:	995a      	ldr	r1, [sp, #360]	; 0x168
 800c1ce:	9055      	str	r0, [sp, #340]	; 0x154
 800c1d0:	9154      	str	r1, [sp, #336]	; 0x150
 800c1d2:	e7ff      	b.n	800c1d4 <Number_ToStringFormat$7259+0x728>
 800c1d4:	9854      	ldr	r0, [sp, #336]	; 0x150
 800c1d6:	9955      	ldr	r1, [sp, #340]	; 0x154
 800c1d8:	9a58      	ldr	r2, [sp, #352]	; 0x160
                                }
 800c1da:	9053      	str	r0, [sp, #332]	; 0x14c
 800c1dc:	9152      	str	r1, [sp, #328]	; 0x148
 800c1de:	9251      	str	r2, [sp, #324]	; 0x144
 800c1e0:	e7ff      	b.n	800c1e2 <Number_ToStringFormat$7259+0x736>
 800c1e2:	9851      	ldr	r0, [sp, #324]	; 0x144
 800c1e4:	9952      	ldr	r1, [sp, #328]	; 0x148
 800c1e6:	9a53      	ldr	r2, [sp, #332]	; 0x14c
 800c1e8:	f64f 73ff 	movw	r3, #65535	; 0xffff

                                if(ch != 0)
 800c1ec:	4219      	tst	r1, r3
 800c1ee:	9b57      	ldr	r3, [sp, #348]	; 0x15c
 800c1f0:	f8dd c164 	ldr.w	ip, [sp, #356]	; 0x164
 800c1f4:	9050      	str	r0, [sp, #320]	; 0x140
 800c1f6:	914f      	str	r1, [sp, #316]	; 0x13c
 800c1f8:	924e      	str	r2, [sp, #312]	; 0x138
 800c1fa:	934d      	str	r3, [sp, #308]	; 0x134
 800c1fc:	f8cd c130 	str.w	ip, [sp, #304]	; 0x130
 800c200:	d004      	beq.n	800c20c <Number_ToStringFormat$7259+0x760>
 800c202:	e7ff      	b.n	800c204 <Number_ToStringFormat$7259+0x758>
                                {
                                    if(digPos == 0)
 800c204:	9857      	ldr	r0, [sp, #348]	; 0x15c
 800c206:	2800      	cmp	r0, #0
 800c208:	d00a      	beq.n	800c220 <Number_ToStringFormat$7259+0x774>
 800c20a:	e010      	b.n	800c22e <Number_ToStringFormat$7259+0x782>
 800c20c:	984c      	ldr	r0, [sp, #304]	; 0x130
 800c20e:	994d      	ldr	r1, [sp, #308]	; 0x134
                                            thousandSepCtr--;
                                        }
                                    }
                                }

                                digPos--;
 800c210:	3901      	subs	r1, #1
 800c212:	9a4e      	ldr	r2, [sp, #312]	; 0x138
 800c214:	9b50      	ldr	r3, [sp, #320]	; 0x140
                                break;
 800c216:	927f      	str	r2, [sp, #508]	; 0x1fc
 800c218:	937d      	str	r3, [sp, #500]	; 0x1f4
 800c21a:	907e      	str	r0, [sp, #504]	; 0x1f8
 800c21c:	917c      	str	r1, [sp, #496]	; 0x1f0
 800c21e:	e67c      	b.n	800bf1a <Number_ToStringFormat$7259+0x46e>

                                if(ch != 0)
                                {
                                    if(digPos == 0)
                                    {
                                        sb.Append( info.numberDecimalSeparator );
 800c220:	98ba      	ldr	r0, [sp, #744]	; 0x2e8
 800c222:	69c1      	ldr	r1, [r0, #28]
 800c224:	9892      	ldr	r0, [sp, #584]	; 0x248
 800c226:	f000 fde9 	bl	800cdfc <StringBuilder_Append$8507>
                                    }
 800c22a:	904b      	str	r0, [sp, #300]	; 0x12c
 800c22c:	e7ff      	b.n	800c22e <Number_ToStringFormat$7259+0x782>

                                    sb.Append( ch );
 800c22e:	9892      	ldr	r0, [sp, #584]	; 0x248
 800c230:	994f      	ldr	r1, [sp, #316]	; 0x13c
 800c232:	f001 fb9f 	bl	800d974 <StringBuilder_Append$8521>
 800c236:	f50d 61d8 	add.w	r1, sp, #1728	; 0x6c0
 800c23a:	223c      	movs	r2, #60	; 0x3c
 800c23c:	904a      	str	r0, [sp, #296]	; 0x128
 800c23e:	4608      	mov	r0, r1
 800c240:	99bc      	ldr	r1, [sp, #752]	; 0x2f0
 800c242:	f013 fe07 	bl	801fe54 <__aeabi_memcpy>
 800c246:	f8dd 06e8 	ldr.w	r0, [sp, #1768]	; 0x6e8

                                    if(state.thousandSeps != 0 &&
 800c24a:	2800      	cmp	r0, #0
 800c24c:	9859      	ldr	r0, [sp, #356]	; 0x164
 800c24e:	9049      	str	r0, [sp, #292]	; 0x124
 800c250:	d006      	beq.n	800c260 <Number_ToStringFormat$7259+0x7b4>
 800c252:	e7ff      	b.n	800c254 <Number_ToStringFormat$7259+0x7a8>
 800c254:	9857      	ldr	r0, [sp, #348]	; 0x15c
 800c256:	2801      	cmp	r0, #1
 800c258:	9959      	ldr	r1, [sp, #356]	; 0x164
 800c25a:	9149      	str	r1, [sp, #292]	; 0x124
 800c25c:	dc05      	bgt.n	800c26a <Number_ToStringFormat$7259+0x7be>
 800c25e:	e7ff      	b.n	800c260 <Number_ToStringFormat$7259+0x7b4>
 800c260:	9849      	ldr	r0, [sp, #292]	; 0x124
 800c262:	9957      	ldr	r1, [sp, #348]	; 0x15c
                                        {
                                            sb.Append( info.numberGroupSeparator );
                                            thousandSepCtr--;
                                        }
                                    }
                                }
 800c264:	914d      	str	r1, [sp, #308]	; 0x134
 800c266:	904c      	str	r0, [sp, #304]	; 0x130
 800c268:	e7d0      	b.n	800c20c <Number_ToStringFormat$7259+0x760>
                                        sb.Append( info.numberDecimalSeparator );
                                    }

                                    sb.Append( ch );

                                    if(state.thousandSeps != 0 &&
 800c26a:	9859      	ldr	r0, [sp, #356]	; 0x164
 800c26c:	2800      	cmp	r0, #0
 800c26e:	9049      	str	r0, [sp, #292]	; 0x124
 800c270:	dbf6      	blt.n	800c260 <Number_ToStringFormat$7259+0x7b4>
 800c272:	e7ff      	b.n	800c274 <Number_ToStringFormat$7259+0x7c8>
                                       digPos             >  1 &&
                                       thousandSepCtr     >= 0  )
                                    {
                                        if(digPos == thousandSepPos[thousandSepCtr] + 1)
 800c274:	9895      	ldr	r0, [sp, #596]	; 0x254
 800c276:	9959      	ldr	r1, [sp, #356]	; 0x164
 800c278:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 800c27c:	68d2      	ldr	r2, [r2, #12]
 800c27e:	3201      	adds	r2, #1
 800c280:	9b57      	ldr	r3, [sp, #348]	; 0x15c
 800c282:	4293      	cmp	r3, r2
 800c284:	9148      	str	r1, [sp, #288]	; 0x120
 800c286:	d10a      	bne.n	800c29e <Number_ToStringFormat$7259+0x7f2>
 800c288:	e7ff      	b.n	800c28a <Number_ToStringFormat$7259+0x7de>
                                        {
                                            sb.Append( info.numberGroupSeparator );
 800c28a:	98ba      	ldr	r0, [sp, #744]	; 0x2e8
 800c28c:	6a01      	ldr	r1, [r0, #32]
 800c28e:	9892      	ldr	r0, [sp, #584]	; 0x248
 800c290:	f000 fdb4 	bl	800cdfc <StringBuilder_Append$8507>
                                            thousandSepCtr--;
 800c294:	9959      	ldr	r1, [sp, #356]	; 0x164
 800c296:	1e4a      	subs	r2, r1, #1
                                        }
 800c298:	9047      	str	r0, [sp, #284]	; 0x11c
 800c29a:	9248      	str	r2, [sp, #288]	; 0x120
 800c29c:	e7ff      	b.n	800c29e <Number_ToStringFormat$7259+0x7f2>
 800c29e:	9848      	ldr	r0, [sp, #288]	; 0x120
                                    }
 800c2a0:	9049      	str	r0, [sp, #292]	; 0x124
 800c2a2:	e7dd      	b.n	800c260 <Number_ToStringFormat$7259+0x7b4>
 800c2a4:	2030      	movs	r0, #48	; 0x30
 800c2a6:	9046      	str	r0, [sp, #280]	; 0x118
 800c2a8:	e002      	b.n	800c2b0 <Number_ToStringFormat$7259+0x804>
 800c2aa:	2000      	movs	r0, #0
                                }

                                if(adjust < 0)
                                {
                                    adjust++;
                                    ch = (digPos <= state.firstDigit) ? '0' : '\0';
 800c2ac:	9046      	str	r0, [sp, #280]	; 0x118
 800c2ae:	e7ff      	b.n	800c2b0 <Number_ToStringFormat$7259+0x804>
 800c2b0:	9846      	ldr	r0, [sp, #280]	; 0x118
 800c2b2:	995a      	ldr	r1, [sp, #360]	; 0x168
 800c2b4:	9a56      	ldr	r2, [sp, #344]	; 0x158
                                }
 800c2b6:	9153      	str	r1, [sp, #332]	; 0x14c
 800c2b8:	9052      	str	r0, [sp, #328]	; 0x148
 800c2ba:	9251      	str	r2, [sp, #324]	; 0x144
 800c2bc:	e791      	b.n	800c1e2 <Number_ToStringFormat$7259+0x736>
                        case '#':
                        case '0':
                            {
                                while(adjust > 0)
                                {
                                    sb.Append( this.digits[digitOffset] != 0 ? this.digits[digitOffset++] : '0' );
 800c2be:	98b8      	ldr	r0, [sp, #736]	; 0x2e0
 800c2c0:	6941      	ldr	r1, [r0, #20]
 800c2c2:	9a5f      	ldr	r2, [sp, #380]	; 0x17c
 800c2c4:	1c53      	adds	r3, r2, #1
 800c2c6:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800c2ca:	8989      	ldrh	r1, [r1, #12]
 800c2cc:	9145      	str	r1, [sp, #276]	; 0x114
 800c2ce:	9344      	str	r3, [sp, #272]	; 0x110
 800c2d0:	e004      	b.n	800c2dc <Number_ToStringFormat$7259+0x830>
 800c2d2:	2030      	movs	r0, #48	; 0x30
 800c2d4:	995f      	ldr	r1, [sp, #380]	; 0x17c
 800c2d6:	9045      	str	r0, [sp, #276]	; 0x114
 800c2d8:	9144      	str	r1, [sp, #272]	; 0x110
 800c2da:	e7ff      	b.n	800c2dc <Number_ToStringFormat$7259+0x830>
 800c2dc:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c2de:	9945      	ldr	r1, [sp, #276]	; 0x114
 800c2e0:	9a92      	ldr	r2, [sp, #584]	; 0x248
 800c2e2:	9043      	str	r0, [sp, #268]	; 0x10c
 800c2e4:	4610      	mov	r0, r2
 800c2e6:	f001 fb45 	bl	800d974 <StringBuilder_Append$8521>
 800c2ea:	f50d 61e7 	add.w	r1, sp, #1848	; 0x738
 800c2ee:	223c      	movs	r2, #60	; 0x3c
 800c2f0:	9042      	str	r0, [sp, #264]	; 0x108
 800c2f2:	4608      	mov	r0, r1
 800c2f4:	99bc      	ldr	r1, [sp, #752]	; 0x2f0
 800c2f6:	f013 fdad 	bl	801fe54 <__aeabi_memcpy>
 800c2fa:	f8dd 0760 	ldr.w	r0, [sp, #1888]	; 0x760

                                    if(state.thousandSeps != 0 &&
 800c2fe:	2800      	cmp	r0, #0
 800c300:	9860      	ldr	r0, [sp, #384]	; 0x180
 800c302:	9041      	str	r0, [sp, #260]	; 0x104
 800c304:	d006      	beq.n	800c314 <Number_ToStringFormat$7259+0x868>
 800c306:	e7ff      	b.n	800c308 <Number_ToStringFormat$7259+0x85c>
 800c308:	9862      	ldr	r0, [sp, #392]	; 0x188
 800c30a:	2801      	cmp	r0, #1
 800c30c:	9960      	ldr	r1, [sp, #384]	; 0x180
 800c30e:	9141      	str	r1, [sp, #260]	; 0x104
 800c310:	dc0f      	bgt.n	800c332 <Number_ToStringFormat$7259+0x886>
 800c312:	e7ff      	b.n	800c314 <Number_ToStringFormat$7259+0x868>
 800c314:	9841      	ldr	r0, [sp, #260]	; 0x104
                                            sb.Append( info.numberGroupSeparator );
                                            thousandSepCtr--;
                                        }
                                    }

                                    digPos--;
 800c316:	9962      	ldr	r1, [sp, #392]	; 0x188
 800c318:	1e4a      	subs	r2, r1, #1
                                    adjust--;
 800c31a:	9b61      	ldr	r3, [sp, #388]	; 0x184
 800c31c:	f1a3 0c01 	sub.w	ip, r3, #1
 800c320:	f8dd e10c 	ldr.w	lr, [sp, #268]	; 0x10c
                                }
 800c324:	f8cd e210 	str.w	lr, [sp, #528]	; 0x210
 800c328:	f8cd c208 	str.w	ip, [sp, #520]	; 0x208
 800c32c:	9083      	str	r0, [sp, #524]	; 0x20c
 800c32e:	9281      	str	r2, [sp, #516]	; 0x204
 800c330:	e6eb      	b.n	800c10a <Number_ToStringFormat$7259+0x65e>
                            {
                                while(adjust > 0)
                                {
                                    sb.Append( this.digits[digitOffset] != 0 ? this.digits[digitOffset++] : '0' );

                                    if(state.thousandSeps != 0 &&
 800c332:	9860      	ldr	r0, [sp, #384]	; 0x180
 800c334:	2800      	cmp	r0, #0
 800c336:	9041      	str	r0, [sp, #260]	; 0x104
 800c338:	dbec      	blt.n	800c314 <Number_ToStringFormat$7259+0x868>
 800c33a:	e7ff      	b.n	800c33c <Number_ToStringFormat$7259+0x890>
                                       digPos             >  1 &&
                                       thousandSepCtr     >= 0  )
                                    {
                                        if(digPos == thousandSepPos[thousandSepCtr] + 1)
 800c33c:	9895      	ldr	r0, [sp, #596]	; 0x254
 800c33e:	9960      	ldr	r1, [sp, #384]	; 0x180
 800c340:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 800c344:	68d2      	ldr	r2, [r2, #12]
 800c346:	3201      	adds	r2, #1
 800c348:	9b62      	ldr	r3, [sp, #392]	; 0x188
 800c34a:	4293      	cmp	r3, r2
 800c34c:	9140      	str	r1, [sp, #256]	; 0x100
 800c34e:	d10a      	bne.n	800c366 <Number_ToStringFormat$7259+0x8ba>
 800c350:	e7ff      	b.n	800c352 <Number_ToStringFormat$7259+0x8a6>
                                        {
                                            sb.Append( info.numberGroupSeparator );
 800c352:	98ba      	ldr	r0, [sp, #744]	; 0x2e8
 800c354:	6a01      	ldr	r1, [r0, #32]
 800c356:	9892      	ldr	r0, [sp, #584]	; 0x248
 800c358:	f000 fd50 	bl	800cdfc <StringBuilder_Append$8507>
                                            thousandSepCtr--;
 800c35c:	9960      	ldr	r1, [sp, #384]	; 0x180
 800c35e:	1e4a      	subs	r2, r1, #1
                                        }
 800c360:	903f      	str	r0, [sp, #252]	; 0xfc
 800c362:	9240      	str	r2, [sp, #256]	; 0x100
 800c364:	e7ff      	b.n	800c366 <Number_ToStringFormat$7259+0x8ba>
 800c366:	9840      	ldr	r0, [sp, #256]	; 0x100
                                    }
 800c368:	9041      	str	r0, [sp, #260]	; 0x104
 800c36a:	e7d3      	b.n	800c314 <Number_ToStringFormat$7259+0x868>
                        case '"':
                            while(true)
                            {
                                char ch2 = state.Get();

                                if(ch2 == 0 || ch2 == ch)
 800c36c:	9885      	ldr	r0, [sp, #532]	; 0x214
 800c36e:	b281      	uxth	r1, r0
 800c370:	9a89      	ldr	r2, [sp, #548]	; 0x224
 800c372:	b293      	uxth	r3, r2
 800c374:	4299      	cmp	r1, r3
 800c376:	d109      	bne.n	800c38c <Number_ToStringFormat$7259+0x8e0>
 800c378:	e7ff      	b.n	800c37a <Number_ToStringFormat$7259+0x8ce>
 800c37a:	9888      	ldr	r0, [sp, #544]	; 0x220
 800c37c:	998a      	ldr	r1, [sp, #552]	; 0x228
 800c37e:	9a8b      	ldr	r2, [sp, #556]	; 0x22c
 800c380:	9b8c      	ldr	r3, [sp, #560]	; 0x230
                                    break;
                                }

                                sb.Append( ch2 );
                            }
                            break;
 800c382:	907f      	str	r0, [sp, #508]	; 0x1fc
 800c384:	917e      	str	r1, [sp, #504]	; 0x1f8
 800c386:	927d      	str	r2, [sp, #500]	; 0x1f4
 800c388:	937c      	str	r3, [sp, #496]	; 0x1f0
 800c38a:	e5c6      	b.n	800bf1a <Number_ToStringFormat$7259+0x46e>
                                if(ch2 == 0 || ch2 == ch)
                                {
                                    break;
                                }

                                sb.Append( ch2 );
 800c38c:	9892      	ldr	r0, [sp, #584]	; 0x248
 800c38e:	9985      	ldr	r1, [sp, #532]	; 0x214
 800c390:	f001 faf0 	bl	800d974 <StringBuilder_Append$8521>
                            }
 800c394:	903e      	str	r0, [sp, #248]	; 0xf8
 800c396:	e573      	b.n	800be80 <Number_ToStringFormat$7259+0x3d4>
                            break;

                        case '\\':
                            {
                                char ch2 = state.Get();
 800c398:	98ab      	ldr	r0, [sp, #684]	; 0x2ac
 800c39a:	f001 f9a9 	bl	800d6f0 <ToStringFormatState_Get$10854>
 800c39e:	4601      	mov	r1, r0
 800c3a0:	f64f 72ff 	movw	r2, #65535	; 0xffff

                                if(ch2 != 0)
 800c3a4:	4210      	tst	r0, r2
 800c3a6:	913d      	str	r1, [sp, #244]	; 0xf4
 800c3a8:	d11f      	bne.n	800c3ea <Number_ToStringFormat$7259+0x93e>
 800c3aa:	e024      	b.n	800c3f6 <Number_ToStringFormat$7259+0x94a>
 800c3ac:	9887      	ldr	r0, [sp, #540]	; 0x21c
 800c3ae:	b281      	uxth	r1, r0
                char ch          = state.Get();
                int  digitOffset = 0;

                while(ch != 0 && ch != ';')
                {
                    switch(ch)
 800c3b0:	2965      	cmp	r1, #101	; 0x65
 800c3b2:	f43f add0 	beq.w	800bf56 <Number_ToStringFormat$7259+0x4aa>
 800c3b6:	e7ff      	b.n	800c3b8 <Number_ToStringFormat$7259+0x90c>
 800c3b8:	9887      	ldr	r0, [sp, #540]	; 0x21c
 800c3ba:	b281      	uxth	r1, r0
 800c3bc:	f242 0230 	movw	r2, #8240	; 0x2030
 800c3c0:	4291      	cmp	r1, r2
 800c3c2:	f47f ad9b 	bne.w	800befc <Number_ToStringFormat$7259+0x450>
 800c3c6:	e7ff      	b.n	800c3c8 <Number_ToStringFormat$7259+0x91c>

                        case '.':
                            break;

                        case '\u2030':
                            sb.Append( info.perMilleSymbol );
 800c3c8:	98ba      	ldr	r0, [sp, #744]	; 0x2e8
 800c3ca:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800c3cc:	9892      	ldr	r0, [sp, #584]	; 0x248
 800c3ce:	f000 fd15 	bl	800cdfc <StringBuilder_Append$8507>
 800c3d2:	9988      	ldr	r1, [sp, #544]	; 0x220
 800c3d4:	9a8a      	ldr	r2, [sp, #552]	; 0x228
 800c3d6:	9b8b      	ldr	r3, [sp, #556]	; 0x22c
 800c3d8:	f8dd c230 	ldr.w	ip, [sp, #560]	; 0x230
                            break;
 800c3dc:	903c      	str	r0, [sp, #240]	; 0xf0
 800c3de:	917f      	str	r1, [sp, #508]	; 0x1fc
 800c3e0:	927e      	str	r2, [sp, #504]	; 0x1f8
 800c3e2:	937d      	str	r3, [sp, #500]	; 0x1f4
 800c3e4:	f8cd c1f0 	str.w	ip, [sp, #496]	; 0x1f0
 800c3e8:	e597      	b.n	800bf1a <Number_ToStringFormat$7259+0x46e>
                            {
                                char ch2 = state.Get();

                                if(ch2 != 0)
                                {
                                    sb.Append( ch2 );
 800c3ea:	9892      	ldr	r0, [sp, #584]	; 0x248
 800c3ec:	993d      	ldr	r1, [sp, #244]	; 0xf4
 800c3ee:	f001 fac1 	bl	800d974 <StringBuilder_Append$8521>
                                }
 800c3f2:	903b      	str	r0, [sp, #236]	; 0xec
 800c3f4:	e7ff      	b.n	800c3f6 <Number_ToStringFormat$7259+0x94a>
 800c3f6:	9888      	ldr	r0, [sp, #544]	; 0x220
 800c3f8:	998a      	ldr	r1, [sp, #552]	; 0x228
 800c3fa:	9a8b      	ldr	r2, [sp, #556]	; 0x22c
 800c3fc:	9b8c      	ldr	r3, [sp, #560]	; 0x230
                            }
                            break;
 800c3fe:	907f      	str	r0, [sp, #508]	; 0x1fc
 800c400:	917e      	str	r1, [sp, #504]	; 0x1f8
 800c402:	927d      	str	r2, [sp, #500]	; 0x1f4
 800c404:	937c      	str	r3, [sp, #496]	; 0x1f0
 800c406:	e588      	b.n	800bf1a <Number_ToStringFormat$7259+0x46e>

            System.Text.StringBuilder sb = new System.Text.StringBuilder( 128 );

            if(this.negative && state.sectionOffset == 0)
            {
                sb.Append( info.negativeSign );
 800c408:	98ba      	ldr	r0, [sp, #744]	; 0x2e8
 800c40a:	6981      	ldr	r1, [r0, #24]
 800c40c:	9892      	ldr	r0, [sp, #584]	; 0x248
 800c40e:	f000 fcf5 	bl	800cdfc <StringBuilder_Append$8507>
            }
 800c412:	903a      	str	r0, [sp, #232]	; 0xe8
 800c414:	e4ed      	b.n	800bdf2 <Number_ToStringFormat$7259+0x346>
 800c416:	2000      	movs	r0, #0
 800c418:	99b6      	ldr	r1, [sp, #728]	; 0x2d8
 800c41a:	6288      	str	r0, [r1, #40]	; 0x28
 800c41c:	f04f 32ff 	mov.w	r2, #4294967295
            {
                int groupSizeLen = info.numberGroupSizes.Length;
                if(groupSizeLen == 0)
                {
                    state.thousandSeps = 0;
                }
 800c420:	9239      	str	r2, [sp, #228]	; 0xe4
 800c422:	9038      	str	r0, [sp, #224]	; 0xe0
 800c424:	e091      	b.n	800c54a <Number_ToStringFormat$7259+0xa9e>
 800c426:	48d0      	ldr	r0, [pc, #832]	; (800c768 <Number_ToStringFormat$7259+0xcbc>)
 800c428:	49d0      	ldr	r1, [pc, #832]	; (800c76c <Number_ToStringFormat$7259+0xcc0>)
 800c42a:	4479      	add	r1, pc
 800c42c:	5842      	ldr	r2, [r0, r1]
                else
                {
                    thousandSepPos = new int[bufferLength];
 800c42e:	48d0      	ldr	r0, [pc, #832]	; (800c770 <Number_ToStringFormat$7259+0xcc4>)
 800c430:	4408      	add	r0, r1
 800c432:	4bd0      	ldr	r3, [pc, #832]	; (800c774 <Number_ToStringFormat$7259+0xcc8>)
 800c434:	4419      	add	r1, r3
 800c436:	f7f5 feb3 	bl	80021a0 <DefaultTypeSystemManager_AllocateArray$4962>

                    long groupTotalSizeCount = info.numberGroupSizes[0];
 800c43a:	99ba      	ldr	r1, [sp, #744]	; 0x2e8
 800c43c:	688a      	ldr	r2, [r1, #8]
 800c43e:	68d2      	ldr	r2, [r2, #12]
 800c440:	17d3      	asrs	r3, r2, #31
                    int  groupSizeIndex      = 0;
                    int  groupSize           = (int)groupTotalSizeCount;
 800c442:	4694      	mov	ip, r2
                    int  totalDigits         = digPos + ((adjust < 0) ? adjust : 0);
 800c444:	f8dd e264 	ldr.w	lr, [sp, #612]	; 0x264
 800c448:	f1be 3fff 	cmp.w	lr, #4294967295
 800c44c:	9037      	str	r0, [sp, #220]	; 0xdc
 800c44e:	9236      	str	r2, [sp, #216]	; 0xd8
 800c450:	9335      	str	r3, [sp, #212]	; 0xd4
 800c452:	f8cd c0d0 	str.w	ip, [sp, #208]	; 0xd0
 800c456:	dc03      	bgt.n	800c460 <Number_ToStringFormat$7259+0x9b4>
 800c458:	e7ff      	b.n	800c45a <Number_ToStringFormat$7259+0x9ae>
 800c45a:	9899      	ldr	r0, [sp, #612]	; 0x264
 800c45c:	9033      	str	r0, [sp, #204]	; 0xcc
 800c45e:	e002      	b.n	800c466 <Number_ToStringFormat$7259+0x9ba>
 800c460:	2000      	movs	r0, #0
 800c462:	9033      	str	r0, [sp, #204]	; 0xcc
 800c464:	e7ff      	b.n	800c466 <Number_ToStringFormat$7259+0x9ba>
 800c466:	9833      	ldr	r0, [sp, #204]	; 0xcc
 800c468:	999a      	ldr	r1, [sp, #616]	; 0x268
 800c46a:	4408      	add	r0, r1
 800c46c:	4602      	mov	r2, r0
 800c46e:	f50d 63f6 	add.w	r3, sp, #1968	; 0x7b0
 800c472:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 800c476:	9032      	str	r0, [sp, #200]	; 0xc8
 800c478:	4618      	mov	r0, r3
 800c47a:	99bc      	ldr	r1, [sp, #752]	; 0x2f0
 800c47c:	9231      	str	r2, [sp, #196]	; 0xc4
 800c47e:	4662      	mov	r2, ip
 800c480:	f013 fce8 	bl	801fe54 <__aeabi_memcpy>
 800c484:	f8dd 07b8 	ldr.w	r0, [sp, #1976]	; 0x7b8
                    int  numDigits           = (state.firstDigit > totalDigits) ? state.firstDigit : totalDigits;
 800c488:	9932      	ldr	r1, [sp, #200]	; 0xc8
 800c48a:	4288      	cmp	r0, r1
 800c48c:	dd0a      	ble.n	800c4a4 <Number_ToStringFormat$7259+0x9f8>
 800c48e:	e7ff      	b.n	800c490 <Number_ToStringFormat$7259+0x9e4>
 800c490:	f20d 70ec 	addw	r0, sp, #2028	; 0x7ec
 800c494:	223c      	movs	r2, #60	; 0x3c
 800c496:	99bc      	ldr	r1, [sp, #752]	; 0x2f0
 800c498:	f013 fcdc 	bl	801fe54 <__aeabi_memcpy>
 800c49c:	f8dd 07f4 	ldr.w	r0, [sp, #2036]	; 0x7f4
 800c4a0:	9030      	str	r0, [sp, #192]	; 0xc0
 800c4a2:	e002      	b.n	800c4aa <Number_ToStringFormat$7259+0x9fe>
 800c4a4:	9831      	ldr	r0, [sp, #196]	; 0xc4
 800c4a6:	9030      	str	r0, [sp, #192]	; 0xc0
 800c4a8:	e7ff      	b.n	800c4aa <Number_ToStringFormat$7259+0x9fe>
 800c4aa:	9830      	ldr	r0, [sp, #192]	; 0xc0
 800c4ac:	217d      	movs	r1, #125	; 0x7d
 800c4ae:	f04f 32ff 	mov.w	r2, #4294967295
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	f8dd c0d0 	ldr.w	ip, [sp, #208]	; 0xd0
 800c4b8:	f8dd e0d8 	ldr.w	lr, [sp, #216]	; 0xd8
 800c4bc:	9c35      	ldr	r4, [sp, #212]	; 0xd4
 800c4be:	9d37      	ldr	r5, [sp, #220]	; 0xdc
 800c4c0:	902f      	str	r0, [sp, #188]	; 0xbc
 800c4c2:	922e      	str	r2, [sp, #184]	; 0xb8
 800c4c4:	942d      	str	r4, [sp, #180]	; 0xb4
 800c4c6:	f8cd c0b0 	str.w	ip, [sp, #176]	; 0xb0
 800c4ca:	932b      	str	r3, [sp, #172]	; 0xac
 800c4cc:	f8cd e0a8 	str.w	lr, [sp, #168]	; 0xa8
 800c4d0:	9129      	str	r1, [sp, #164]	; 0xa4
 800c4d2:	9528      	str	r5, [sp, #160]	; 0xa0
 800c4d4:	e7ff      	b.n	800c4d6 <Number_ToStringFormat$7259+0xa2a>
 800c4d6:	9828      	ldr	r0, [sp, #160]	; 0xa0
 800c4d8:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800c4da:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800c4dc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c4de:	f8dd c0a8 	ldr.w	ip, [sp, #168]	; 0xa8
 800c4e2:	f8dd e0ac 	ldr.w	lr, [sp, #172]	; 0xac
 800c4e6:	9c2c      	ldr	r4, [sp, #176]	; 0xb0

                    while(numDigits > groupTotalSizeCount)
 800c4e8:	9d2f      	ldr	r5, [sp, #188]	; 0xbc
 800c4ea:	17ee      	asrs	r6, r5, #31
 800c4ec:	2700      	movs	r7, #0
 800c4ee:	4565      	cmp	r5, ip
 800c4f0:	46b8      	mov	r8, r7
 800c4f2:	bf98      	it	ls
 800c4f4:	f04f 0801 	movls.w	r8, #1
 800c4f8:	429e      	cmp	r6, r3
 800c4fa:	bfd8      	it	le
 800c4fc:	2701      	movle	r7, #1
 800c4fe:	ebb3 7fe5 	cmp.w	r3, r5, asr #31
 800c502:	bf08      	it	eq
 800c504:	4647      	moveq	r7, r8
 800c506:	2f00      	cmp	r7, #0
 800c508:	4606      	mov	r6, r0
 800c50a:	4617      	mov	r7, r2
 800c50c:	9027      	str	r0, [sp, #156]	; 0x9c
 800c50e:	9126      	str	r1, [sp, #152]	; 0x98
 800c510:	9225      	str	r2, [sp, #148]	; 0x94
 800c512:	9324      	str	r3, [sp, #144]	; 0x90
 800c514:	f8cd c08c 	str.w	ip, [sp, #140]	; 0x8c
 800c518:	f8cd e088 	str.w	lr, [sp, #136]	; 0x88
 800c51c:	9421      	str	r4, [sp, #132]	; 0x84
 800c51e:	9620      	str	r6, [sp, #128]	; 0x80
 800c520:	971f      	str	r7, [sp, #124]	; 0x7c
 800c522:	d108      	bne.n	800c536 <Number_ToStringFormat$7259+0xa8a>
 800c524:	e7ff      	b.n	800c526 <Number_ToStringFormat$7259+0xa7a>
                    {
                        if(groupSize == 0)
 800c526:	9821      	ldr	r0, [sp, #132]	; 0x84
 800c528:	2800      	cmp	r0, #0
 800c52a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800c52c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800c52e:	911e      	str	r1, [sp, #120]	; 0x78
 800c530:	921d      	str	r2, [sp, #116]	; 0x74
 800c532:	d010      	beq.n	800c556 <Number_ToStringFormat$7259+0xaaa>
 800c534:	e014      	b.n	800c560 <Number_ToStringFormat$7259+0xab4>
 800c536:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800c538:	9920      	ldr	r1, [sp, #128]	; 0x80
 800c53a:	911c      	str	r1, [sp, #112]	; 0x70
 800c53c:	901b      	str	r0, [sp, #108]	; 0x6c
 800c53e:	e7ff      	b.n	800c540 <Number_ToStringFormat$7259+0xa94>
 800c540:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800c542:	991c      	ldr	r1, [sp, #112]	; 0x70
                            }
                        }
                    }

                    adjustLength += (ulong)((thousandSepCtr + 1) * info.numberGroupSeparator.Length);
                }
 800c544:	9039      	str	r0, [sp, #228]	; 0xe4
 800c546:	9138      	str	r1, [sp, #224]	; 0xe0
 800c548:	e7ff      	b.n	800c54a <Number_ToStringFormat$7259+0xa9e>
 800c54a:	9838      	ldr	r0, [sp, #224]	; 0xe0
 800c54c:	9939      	ldr	r1, [sp, #228]	; 0xe4
            }
 800c54e:	9198      	str	r1, [sp, #608]	; 0x260
 800c550:	9097      	str	r0, [sp, #604]	; 0x25c
 800c552:	f7ff bc22 	b.w	800bd9a <Number_ToStringFormat$7259+0x2ee>
 800c556:	981d      	ldr	r0, [sp, #116]	; 0x74
 800c558:	991e      	ldr	r1, [sp, #120]	; 0x78

                    while(numDigits > groupTotalSizeCount)
                    {
                        if(groupSize == 0)
                        {
                            break;
 800c55a:	911c      	str	r1, [sp, #112]	; 0x70
 800c55c:	901b      	str	r0, [sp, #108]	; 0x6c
 800c55e:	e7ef      	b.n	800c540 <Number_ToStringFormat$7259+0xa94>
                        }

                        thousandSepCtr++;
 800c560:	9825      	ldr	r0, [sp, #148]	; 0x94
 800c562:	1c41      	adds	r1, r0, #1
 800c564:	460a      	mov	r2, r1
                        thousandSepPos[thousandSepCtr] = (int)groupTotalSizeCount;
 800c566:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800c568:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800c56c:	f8dd c08c 	ldr.w	ip, [sp, #140]	; 0x8c
 800c570:	f8c1 c00c 	str.w	ip, [r1, #12]

                        if(groupSizeIndex < groupSizeLen - 1)
 800c574:	9996      	ldr	r1, [sp, #600]	; 0x258
 800c576:	f1a1 0e01 	sub.w	lr, r1, #1
 800c57a:	9c22      	ldr	r4, [sp, #136]	; 0x88
 800c57c:	4574      	cmp	r4, lr
 800c57e:	f8dd e084 	ldr.w	lr, [sp, #132]	; 0x84
 800c582:	921a      	str	r2, [sp, #104]	; 0x68
 800c584:	9419      	str	r4, [sp, #100]	; 0x64
 800c586:	f8cd e060 	str.w	lr, [sp, #96]	; 0x60
 800c58a:	da0c      	bge.n	800c5a6 <Number_ToStringFormat$7259+0xafa>
 800c58c:	e7ff      	b.n	800c58e <Number_ToStringFormat$7259+0xae2>
                        {
                            groupSizeIndex++;
 800c58e:	9822      	ldr	r0, [sp, #136]	; 0x88
 800c590:	1c41      	adds	r1, r0, #1
 800c592:	460a      	mov	r2, r1
                            groupSize = info.numberGroupSizes[groupSizeIndex];
 800c594:	9bba      	ldr	r3, [sp, #744]	; 0x2e8
 800c596:	f8d3 c008 	ldr.w	ip, [r3, #8]
 800c59a:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
 800c59e:	68c9      	ldr	r1, [r1, #12]
                        }
 800c5a0:	9118      	str	r1, [sp, #96]	; 0x60
 800c5a2:	9219      	str	r2, [sp, #100]	; 0x64
 800c5a4:	e7ff      	b.n	800c5a6 <Number_ToStringFormat$7259+0xafa>
 800c5a6:	9819      	ldr	r0, [sp, #100]	; 0x64
 800c5a8:	9918      	ldr	r1, [sp, #96]	; 0x60

                        groupTotalSizeCount += groupSize;
 800c5aa:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800c5ac:	1853      	adds	r3, r2, r1
 800c5ae:	f8dd c090 	ldr.w	ip, [sp, #144]	; 0x90
 800c5b2:	eb4c 7ee1 	adc.w	lr, ip, r1, asr #31
                        if(bufferLength - thousandSepCtr < 10)
 800c5b6:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800c5b8:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800c5ba:	eba4 0605 	sub.w	r6, r4, r5
 800c5be:	2e09      	cmp	r6, #9
 800c5c0:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 800c5c2:	9017      	str	r0, [sp, #92]	; 0x5c
 800c5c4:	9116      	str	r1, [sp, #88]	; 0x58
 800c5c6:	9315      	str	r3, [sp, #84]	; 0x54
 800c5c8:	f8cd e050 	str.w	lr, [sp, #80]	; 0x50
 800c5cc:	9413      	str	r4, [sp, #76]	; 0x4c
 800c5ce:	9612      	str	r6, [sp, #72]	; 0x48
 800c5d0:	dc1b      	bgt.n	800c60a <Number_ToStringFormat$7259+0xb5e>
 800c5d2:	e7ff      	b.n	800c5d4 <Number_ToStringFormat$7259+0xb28>
                        {
                            bufferLength *= 2;
 800c5d4:	9826      	ldr	r0, [sp, #152]	; 0x98
 800c5d6:	0041      	lsls	r1, r0, #1
 800c5d8:	460a      	mov	r2, r1
                            int[] oldThousandSepPos = thousandSepPos;
 800c5da:	9b27      	ldr	r3, [sp, #156]	; 0x9c
                            thousandSepPos = new int[bufferLength];
 800c5dc:	f8df c190 	ldr.w	ip, [pc, #400]	; 800c770 <Number_ToStringFormat$7259+0xcc4>
 800c5e0:	f8df e194 	ldr.w	lr, [pc, #404]	; 800c778 <Number_ToStringFormat$7259+0xccc>
 800c5e4:	44fe      	add	lr, pc
 800c5e6:	eb0c 000e 	add.w	r0, ip, lr
 800c5ea:	f8df c188 	ldr.w	ip, [pc, #392]	; 800c774 <Number_ToStringFormat$7259+0xcc8>
 800c5ee:	44f4      	add	ip, lr
 800c5f0:	9111      	str	r1, [sp, #68]	; 0x44
 800c5f2:	4661      	mov	r1, ip
 800c5f4:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 800c5f8:	9210      	str	r2, [sp, #64]	; 0x40
 800c5fa:	4662      	mov	r2, ip
 800c5fc:	930f      	str	r3, [sp, #60]	; 0x3c
 800c5fe:	f7f5 fdcf 	bl	80021a0 <DefaultTypeSystemManager_AllocateArray$4962>
 800c602:	2100      	movs	r1, #0
                            for(int i = 0; i < thousandSepCtr; i++)
 800c604:	900e      	str	r0, [sp, #56]	; 0x38
 800c606:	910d      	str	r1, [sp, #52]	; 0x34
 800c608:	e012      	b.n	800c630 <Number_ToStringFormat$7259+0xb84>
 800c60a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c60c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c60e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c610:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c612:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
 800c616:	f8dd e050 	ldr.w	lr, [sp, #80]	; 0x50
 800c61a:	9c1a      	ldr	r4, [sp, #104]	; 0x68
                            {
                                thousandSepPos[i] = oldThousandSepPos[i];
                            }
                        }
                    }
 800c61c:	9129      	str	r1, [sp, #164]	; 0xa4
 800c61e:	942e      	str	r4, [sp, #184]	; 0xb8
 800c620:	922c      	str	r2, [sp, #176]	; 0xb0
 800c622:	932b      	str	r3, [sp, #172]	; 0xac
 800c624:	f8cd c0a8 	str.w	ip, [sp, #168]	; 0xa8
 800c628:	f8cd e0b4 	str.w	lr, [sp, #180]	; 0xb4
 800c62c:	9028      	str	r0, [sp, #160]	; 0xa0
 800c62e:	e752      	b.n	800c4d6 <Number_ToStringFormat$7259+0xa2a>
 800c630:	980d      	ldr	r0, [sp, #52]	; 0x34
                        if(bufferLength - thousandSepCtr < 10)
                        {
                            bufferLength *= 2;
                            int[] oldThousandSepPos = thousandSepPos;
                            thousandSepPos = new int[bufferLength];
                            for(int i = 0; i < thousandSepCtr; i++)
 800c632:	991a      	ldr	r1, [sp, #104]	; 0x68
 800c634:	4288      	cmp	r0, r1
 800c636:	900c      	str	r0, [sp, #48]	; 0x30
 800c638:	da0d      	bge.n	800c656 <Number_ToStringFormat$7259+0xbaa>
 800c63a:	e7ff      	b.n	800c63c <Number_ToStringFormat$7259+0xb90>
                            {
                                thousandSepPos[i] = oldThousandSepPos[i];
 800c63c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800c63e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c640:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 800c644:	68d2      	ldr	r2, [r2, #12]
 800c646:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c648:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
 800c64c:	f8cc 200c 	str.w	r2, [ip, #12]
                        if(bufferLength - thousandSepCtr < 10)
                        {
                            bufferLength *= 2;
                            int[] oldThousandSepPos = thousandSepPos;
                            thousandSepPos = new int[bufferLength];
                            for(int i = 0; i < thousandSepCtr; i++)
 800c650:	1c4a      	adds	r2, r1, #1
 800c652:	920d      	str	r2, [sp, #52]	; 0x34
 800c654:	e7ec      	b.n	800c630 <Number_ToStringFormat$7259+0xb84>
 800c656:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c658:	990e      	ldr	r1, [sp, #56]	; 0x38
                            {
                                thousandSepPos[i] = oldThousandSepPos[i];
                            }
                        }
 800c65a:	9013      	str	r0, [sp, #76]	; 0x4c
 800c65c:	9112      	str	r1, [sp, #72]	; 0x48
 800c65e:	e7d4      	b.n	800c60a <Number_ToStringFormat$7259+0xb5e>
 800c660:	f60d 3034 	addw	r0, sp, #2868	; 0xb34
 800c664:	223c      	movs	r2, #60	; 0x3c
 800c666:	99bc      	ldr	r1, [sp, #752]	; 0x2f0
 800c668:	f013 fbf4 	bl	801fe54 <__aeabi_memcpy>
 800c66c:	f8dd 0b44 	ldr.w	r0, [sp, #2884]	; 0xb44

                if(this.digits[0] != 0)
                {
                    this.scale += state.scaleAdjust;

                    int pos = (state.scientific ?
 800c670:	900b      	str	r0, [sp, #44]	; 0x2c
 800c672:	e01c      	b.n	800c6ae <Number_ToStringFormat$7259+0xc02>
 800c674:	98b8      	ldr	r0, [sp, #736]	; 0x2e0
 800c676:	68c1      	ldr	r1, [r0, #12]
 800c678:	f60d 10cc 	addw	r0, sp, #2508	; 0x9cc
 800c67c:	223c      	movs	r2, #60	; 0x3c
 800c67e:	9bbc      	ldr	r3, [sp, #752]	; 0x2f0
 800c680:	910a      	str	r1, [sp, #40]	; 0x28
 800c682:	4619      	mov	r1, r3
 800c684:	9209      	str	r2, [sp, #36]	; 0x24
 800c686:	f013 fbe5 	bl	801fe54 <__aeabi_memcpy>
 800c68a:	f8dd 09dc 	ldr.w	r0, [sp, #2524]	; 0x9dc
 800c68e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c690:	4408      	add	r0, r1
 800c692:	f60d 2108 	addw	r1, sp, #2568	; 0xa08
 800c696:	9008      	str	r0, [sp, #32]
 800c698:	4608      	mov	r0, r1
 800c69a:	99bc      	ldr	r1, [sp, #752]	; 0x2f0
 800c69c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c69e:	f013 fbd9 	bl	801fe54 <__aeabi_memcpy>
 800c6a2:	f8dd 0a24 	ldr.w	r0, [sp, #2596]	; 0xa24
 800c6a6:	9908      	ldr	r1, [sp, #32]
 800c6a8:	1a08      	subs	r0, r1, r0
 800c6aa:	900b      	str	r0, [sp, #44]	; 0x2c
 800c6ac:	e7ff      	b.n	800c6ae <Number_ToStringFormat$7259+0xc02>
 800c6ae:	980b      	ldr	r0, [sp, #44]	; 0x2c
                               state.digitCount :
                               (this.scale + state.digitCount - state.decimalPos));

                    this.RoundNumber( pos );
 800c6b0:	99b8      	ldr	r1, [sp, #736]	; 0x2e0
 800c6b2:	9007      	str	r0, [sp, #28]
 800c6b4:	4608      	mov	r0, r1
 800c6b6:	9907      	ldr	r1, [sp, #28]
 800c6b8:	f000 f994 	bl	800c9e4 <Number_RoundNumber$7273>

                    if(this.digits[0] == 0)
 800c6bc:	98b8      	ldr	r0, [sp, #736]	; 0x2e0
 800c6be:	6941      	ldr	r1, [r0, #20]
 800c6c0:	8989      	ldrh	r1, [r1, #12]
 800c6c2:	2900      	cmp	r1, #0
 800c6c4:	99b2      	ldr	r1, [sp, #712]	; 0x2c8
 800c6c6:	9106      	str	r1, [sp, #24]
 800c6c8:	d12b      	bne.n	800c722 <Number_ToStringFormat$7259+0xc76>
 800c6ca:	e7ff      	b.n	800c6cc <Number_ToStringFormat$7259+0xc20>
 800c6cc:	f60d 2044 	addw	r0, sp, #2628	; 0xa44
 800c6d0:	213c      	movs	r1, #60	; 0x3c
 800c6d2:	9abc      	ldr	r2, [sp, #752]	; 0x2f0
 800c6d4:	9105      	str	r1, [sp, #20]
 800c6d6:	4611      	mov	r1, r2
 800c6d8:	9a05      	ldr	r2, [sp, #20]
 800c6da:	f013 fbbb 	bl	801fe54 <__aeabi_memcpy>
                    {
                        state.src = FindSection( state.format, 2 );
 800c6de:	f8dd 0a78 	ldr.w	r0, [sp, #2680]	; 0xa78
 800c6e2:	491f      	ldr	r1, [pc, #124]	; (800c760 <Number_ToStringFormat$7259+0xcb4>)
 800c6e4:	4a1f      	ldr	r2, [pc, #124]	; (800c764 <Number_ToStringFormat$7259+0xcb8>)
 800c6e6:	447a      	add	r2, pc
 800c6e8:	5889      	ldr	r1, [r1, r2]
 800c6ea:	f000 ff37 	bl	800d55c <Number_FindSection$7260>
 800c6ee:	99b7      	ldr	r1, [sp, #732]	; 0x2dc
 800c6f0:	6388      	str	r0, [r1, #56]	; 0x38
 800c6f2:	f50d 6028 	add.w	r0, sp, #2688	; 0xa80
 800c6f6:	99bc      	ldr	r1, [sp, #752]	; 0x2f0
 800c6f8:	9a05      	ldr	r2, [sp, #20]
 800c6fa:	f013 fbab 	bl	801fe54 <__aeabi_memcpy>
 800c6fe:	f8dd 0ab8 	ldr.w	r0, [sp, #2744]	; 0xab8
 800c702:	f60d 21bc 	addw	r1, sp, #2748	; 0xabc
 800c706:	9004      	str	r0, [sp, #16]
 800c708:	4608      	mov	r0, r1
 800c70a:	99bc      	ldr	r1, [sp, #752]	; 0x2f0
 800c70c:	9a05      	ldr	r2, [sp, #20]
 800c70e:	f013 fba1 	bl	801fe54 <__aeabi_memcpy>
 800c712:	f8dd 0ac0 	ldr.w	r0, [sp, #2752]	; 0xac0
                        if(state.src != state.sectionOffset)
 800c716:	9904      	ldr	r1, [sp, #16]
 800c718:	4281      	cmp	r1, r0
 800c71a:	98b2      	ldr	r0, [sp, #712]	; 0x2c8
 800c71c:	9003      	str	r0, [sp, #12]
 800c71e:	d107      	bne.n	800c730 <Number_ToStringFormat$7259+0xc84>
 800c720:	e012      	b.n	800c748 <Number_ToStringFormat$7259+0xc9c>
 800c722:	9806      	ldr	r0, [sp, #24]
                        {
                            state.sectionOffset = state.src;
                            continue;
                        }
                    }
                }
 800c724:	9002      	str	r0, [sp, #8]
 800c726:	e7ff      	b.n	800c728 <Number_ToStringFormat$7259+0xc7c>
 800c728:	9802      	ldr	r0, [sp, #8]
 800c72a:	90ac      	str	r0, [sp, #688]	; 0x2b0
 800c72c:	f7ff ba46 	b.w	800bbbc <Number_ToStringFormat$7259+0x110>
 800c730:	f60d 20f8 	addw	r0, sp, #2808	; 0xaf8
 800c734:	223c      	movs	r2, #60	; 0x3c
 800c736:	99bc      	ldr	r1, [sp, #752]	; 0x2f0
 800c738:	f013 fb8c 	bl	801fe54 <__aeabi_memcpy>
 800c73c:	f8dd 0b30 	ldr.w	r0, [sp, #2864]	; 0xb30
 800c740:	99b7      	ldr	r1, [sp, #732]	; 0x2dc
 800c742:	6048      	str	r0, [r1, #4]
                    {
                        state.src = FindSection( state.format, 2 );
                        if(state.src != state.sectionOffset)
                        {
                            state.sectionOffset = state.src;
                            continue;
 800c744:	f7ff b9fa 	b.w	800bb3c <Number_ToStringFormat$7259+0x90>
 800c748:	9803      	ldr	r0, [sp, #12]
                        }
                    }
 800c74a:	9002      	str	r0, [sp, #8]
 800c74c:	e7ec      	b.n	800c728 <Number_ToStringFormat$7259+0xc7c>
 800c74e:	2001      	movs	r0, #1
 800c750:	90b5      	str	r0, [sp, #724]	; 0x2d4
 800c752:	f7ff b9db 	b.w	800bb0c <Number_ToStringFormat$7259+0x60>
 800c756:	2000      	movs	r0, #0
                                       NumberFormatInfo info   )
        {
            ToStringFormatState state = new ToStringFormatState();

            state.format        = format;
            state.section       = (this.digits[0] == 0 ? 2 : (this.negative ? 1 : 0));
 800c758:	90b5      	str	r0, [sp, #724]	; 0x2d4
 800c75a:	f7ff b9d7 	b.w	800bb0c <Number_ToStringFormat$7259+0x60>
 800c75e:	46c0      	nop			; (mov r8, r8)
 800c760:	e80253e8 	.word	0xe80253e8
 800c764:	17ff50ea 	.word	0x17ff50ea
 800c768:	e80253e4 	.word	0xe80253e4
 800c76c:	17ff53a6 	.word	0x17ff53a6
 800c770:	ffffea38 	.word	0xffffea38
 800c774:	e80102ec 	.word	0xe80102ec
 800c778:	17ff51ec 	.word	0x17ff51ec
 800c77c:	17ff5a2a 	.word	0x17ff5a2a
 800c780:	e8010b3c 	.word	0xe8010b3c
 800c784:	e80253dc 	.word	0xe80253dc
 800c788:	e80253e0 	.word	0xe80253e0
 800c78c:	17ff5852 	.word	0x17ff5852

0800c790 <Number_Int32ToHexString$7262>:
 800c790:	b570      	push	{r4, r5, r6, lr}
 800c792:	b08c      	sub	sp, #48	; 0x30
 800c794:	4613      	mov	r3, r2
 800c796:	4694      	mov	ip, r2
 800c798:	f8df e074 	ldr.w	lr, [pc, #116]	; 800c810 <Number_Int32ToHexString$7262+0x80>
 800c79c:	4c1d      	ldr	r4, [pc, #116]	; (800c814 <Number_Int32ToHexString$7262+0x84>)
 800c79e:	447c      	add	r4, pc
 800c7a0:	f85e e004 	ldr.w	lr, [lr, r4]

        private static String Int32ToHexString( uint value,
                                               char hexBase,
                                               int digits )
        {
            char[] buffer = new char[100];
 800c7a4:	4d1c      	ldr	r5, [pc, #112]	; (800c818 <Number_Int32ToHexString$7262+0x88>)
 800c7a6:	4425      	add	r5, r4
 800c7a8:	4e1c      	ldr	r6, [pc, #112]	; (800c81c <Number_Int32ToHexString$7262+0x8c>)
 800c7aa:	4434      	add	r4, r6
 800c7ac:	900b      	str	r0, [sp, #44]	; 0x2c
 800c7ae:	4628      	mov	r0, r5
 800c7b0:	910a      	str	r1, [sp, #40]	; 0x28
 800c7b2:	4621      	mov	r1, r4
 800c7b4:	9209      	str	r2, [sp, #36]	; 0x24
 800c7b6:	4672      	mov	r2, lr
 800c7b8:	f8cd c020 	str.w	ip, [sp, #32]
 800c7bc:	9307      	str	r3, [sp, #28]
 800c7be:	f7f5 fcef 	bl	80021a0 <DefaultTypeSystemManager_AllocateArray$4962>
            if(digits < 1)
 800c7c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c7c4:	2900      	cmp	r1, #0
 800c7c6:	9a08      	ldr	r2, [sp, #32]
 800c7c8:	9006      	str	r0, [sp, #24]
 800c7ca:	9205      	str	r2, [sp, #20]
 800c7cc:	dc03      	bgt.n	800c7d6 <Number_Int32ToHexString$7262+0x46>
 800c7ce:	e7ff      	b.n	800c7d0 <Number_Int32ToHexString$7262+0x40>
 800c7d0:	2001      	movs	r0, #1
            {
                digits = 1;
            }
 800c7d2:	9005      	str	r0, [sp, #20]
 800c7d4:	e7ff      	b.n	800c7d6 <Number_Int32ToHexString$7262+0x46>
 800c7d6:	9805      	ldr	r0, [sp, #20]
 800c7d8:	4911      	ldr	r1, [pc, #68]	; (800c820 <Number_Int32ToHexString$7262+0x90>)
 800c7da:	4a12      	ldr	r2, [pc, #72]	; (800c824 <Number_Int32ToHexString$7262+0x94>)
 800c7dc:	447a      	add	r2, pc
 800c7de:	5889      	ldr	r1, [r1, r2]
            int start = Int32ToHexChars( buffer, 100, value, hexBase, digits );
 800c7e0:	466a      	mov	r2, sp
 800c7e2:	6010      	str	r0, [r2, #0]
 800c7e4:	9806      	ldr	r0, [sp, #24]
 800c7e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c7e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7ea:	f001 f9ab 	bl	800db44 <Number_Int32ToHexChars$7263>
            return new string( buffer, start, 100 - start );
 800c7ee:	f1c0 0164 	rsb	r1, r0, #100	; 0x64
 800c7f2:	9004      	str	r0, [sp, #16]
 800c7f4:	4608      	mov	r0, r1
 800c7f6:	9103      	str	r1, [sp, #12]
 800c7f8:	f7f4 fdcc 	bl	8001394 <String_FastAllocateString$3886>
 800c7fc:	9002      	str	r0, [sp, #8]
 800c7fe:	9906      	ldr	r1, [sp, #24]
 800c800:	9a04      	ldr	r2, [sp, #16]
 800c802:	9b03      	ldr	r3, [sp, #12]
 800c804:	f7f5 ff2e 	bl	8002664 <String_.ctor$3883>
 800c808:	9802      	ldr	r0, [sp, #8]
 800c80a:	b00c      	add	sp, #48	; 0x30
 800c80c:	bd70      	pop	{r4, r5, r6, pc}
 800c80e:	46c0      	nop			; (mov r8, r8)
 800c810:	e80253ec 	.word	0xe80253ec
 800c814:	17ff5032 	.word	0x17ff5032
 800c818:	ffffea38 	.word	0xffffea38
 800c81c:	e801031c 	.word	0xe801031c
 800c820:	e80253f0 	.word	0xe80253f0
 800c824:	17ff4ff4 	.word	0x17ff4ff4

0800c828 <Number_Int32ToDecString$7261>:
 800c828:	b580      	push	{r7, lr}
 800c82a:	b09c      	sub	sp, #112	; 0x70
 800c82c:	460b      	mov	r3, r1
 800c82e:	4684      	mov	ip, r0
 800c830:	468e      	mov	lr, r1
            //CQuickBytes buf;

            int bufferLength = 100; // was UINT
            int negLength = 0;
            // wchar* src = NULL;
            if(digits < 1) digits = 1;
 800c832:	2900      	cmp	r1, #0
 800c834:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
 800c838:	901a      	str	r0, [sp, #104]	; 0x68
 800c83a:	9219      	str	r2, [sp, #100]	; 0x64
 800c83c:	9318      	str	r3, [sp, #96]	; 0x60
 800c83e:	f8cd e05c 	str.w	lr, [sp, #92]	; 0x5c
 800c842:	dc03      	bgt.n	800c84c <Number_Int32ToDecString$7261+0x24>
 800c844:	e7ff      	b.n	800c846 <Number_Int32ToDecString$7261+0x1e>
 800c846:	2001      	movs	r0, #1
 800c848:	9017      	str	r0, [sp, #92]	; 0x5c
 800c84a:	e7ff      	b.n	800c84c <Number_Int32ToDecString$7261+0x24>
 800c84c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c84e:	2164      	movs	r1, #100	; 0x64
 800c850:	2200      	movs	r2, #0

            if(value < 0)
 800c852:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c854:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c858:	9016      	str	r0, [sp, #88]	; 0x58
 800c85a:	9215      	str	r2, [sp, #84]	; 0x54
 800c85c:	9114      	str	r1, [sp, #80]	; 0x50
 800c85e:	dc08      	bgt.n	800c872 <Number_Int32ToDecString$7261+0x4a>
 800c860:	e7ff      	b.n	800c862 <Number_Int32ToDecString$7261+0x3a>
 800c862:	9819      	ldr	r0, [sp, #100]	; 0x64
 800c864:	68c1      	ldr	r1, [r0, #12]
 800c866:	2264      	movs	r2, #100	; 0x64
            {
                //src = sNegative->GetBuffer();
                negLength = sign.Length;
                if(negLength > 85)
 800c868:	2955      	cmp	r1, #85	; 0x55
 800c86a:	9113      	str	r1, [sp, #76]	; 0x4c
 800c86c:	9212      	str	r2, [sp, #72]	; 0x48
 800c86e:	dc67      	bgt.n	800c940 <Number_Int32ToDecString$7261+0x118>
 800c870:	e06b      	b.n	800c94a <Number_Int32ToDecString$7261+0x122>
 800c872:	9814      	ldr	r0, [sp, #80]	; 0x50
 800c874:	9915      	ldr	r1, [sp, #84]	; 0x54
                {
                    bufferLength = negLength + 15; //was implicit C++ cast
                }
            }

            char[] buffer = new char[bufferLength];
 800c876:	4a37      	ldr	r2, [pc, #220]	; (800c954 <Number_Int32ToDecString$7261+0x12c>)
 800c878:	4b37      	ldr	r3, [pc, #220]	; (800c958 <Number_Int32ToDecString$7261+0x130>)
 800c87a:	447b      	add	r3, pc
 800c87c:	441a      	add	r2, r3
 800c87e:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800c95c <Number_Int32ToDecString$7261+0x134>
 800c882:	4463      	add	r3, ip
 800c884:	9011      	str	r0, [sp, #68]	; 0x44
 800c886:	4610      	mov	r0, r2
 800c888:	9110      	str	r1, [sp, #64]	; 0x40
 800c88a:	4619      	mov	r1, r3
 800c88c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c88e:	f7f5 fc87 	bl	80021a0 <DefaultTypeSystemManager_AllocateArray$4962>
            //if (!buffer)
            //    COMPlusThrowOM();

            int p = Int32ToDecChars( buffer, bufferLength, (uint)(value >= 0 ? value : -value), digits );
 800c892:	991a      	ldr	r1, [sp, #104]	; 0x68
 800c894:	2900      	cmp	r1, #0
 800c896:	900f      	str	r0, [sp, #60]	; 0x3c
 800c898:	db03      	blt.n	800c8a2 <Number_Int32ToDecString$7261+0x7a>
 800c89a:	e7ff      	b.n	800c89c <Number_Int32ToDecString$7261+0x74>
 800c89c:	981a      	ldr	r0, [sp, #104]	; 0x68
 800c89e:	900e      	str	r0, [sp, #56]	; 0x38
 800c8a0:	e003      	b.n	800c8aa <Number_Int32ToDecString$7261+0x82>
 800c8a2:	981a      	ldr	r0, [sp, #104]	; 0x68
 800c8a4:	4241      	negs	r1, r0
 800c8a6:	910e      	str	r1, [sp, #56]	; 0x38
 800c8a8:	e7ff      	b.n	800c8aa <Number_Int32ToDecString$7261+0x82>
 800c8aa:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c8ac:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c8ae:	900d      	str	r0, [sp, #52]	; 0x34
 800c8b0:	4608      	mov	r0, r1
 800c8b2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c8b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c8b6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c8b8:	f7fe fd9c 	bl	800b3f4 <Number_Int32ToDecChars$7271>
            if(value < 0)
 800c8bc:	991a      	ldr	r1, [sp, #104]	; 0x68
 800c8be:	f1b1 3fff 	cmp.w	r1, #4294967295
 800c8c2:	4602      	mov	r2, r0
 800c8c4:	900c      	str	r0, [sp, #48]	; 0x30
 800c8c6:	920b      	str	r2, [sp, #44]	; 0x2c
 800c8c8:	dc06      	bgt.n	800c8d8 <Number_Int32ToDecString$7261+0xb0>
 800c8ca:	e7ff      	b.n	800c8cc <Number_Int32ToDecString$7261+0xa4>
            {
                for(int i = negLength - 1; i >= 0; i--)
 800c8cc:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c8ce:	1e41      	subs	r1, r0, #1
 800c8d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c8d2:	920a      	str	r2, [sp, #40]	; 0x28
 800c8d4:	9109      	str	r1, [sp, #36]	; 0x24
 800c8d6:	e010      	b.n	800c8fa <Number_Int32ToDecString$7261+0xd2>
 800c8d8:	980b      	ldr	r0, [sp, #44]	; 0x2c
                    // *(--p) = *(src+i);
                }
            }

            // _ASSERTE( buffer + bufferLength - p >=0 && buffer <= p);
            return new string( buffer, p, bufferLength - p );
 800c8da:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c8dc:	1a0a      	subs	r2, r1, r0
 800c8de:	9008      	str	r0, [sp, #32]
 800c8e0:	4610      	mov	r0, r2
 800c8e2:	9207      	str	r2, [sp, #28]
 800c8e4:	f7f4 fd56 	bl	8001394 <String_FastAllocateString$3886>
 800c8e8:	9006      	str	r0, [sp, #24]
 800c8ea:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c8ec:	9a08      	ldr	r2, [sp, #32]
 800c8ee:	9b07      	ldr	r3, [sp, #28]
 800c8f0:	f7f5 feb8 	bl	8002664 <String_.ctor$3883>
 800c8f4:	9806      	ldr	r0, [sp, #24]
 800c8f6:	b01c      	add	sp, #112	; 0x70
 800c8f8:	bd80      	pop	{r7, pc}
 800c8fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c8fc:	990a      	ldr	r1, [sp, #40]	; 0x28
            //    COMPlusThrowOM();

            int p = Int32ToDecChars( buffer, bufferLength, (uint)(value >= 0 ? value : -value), digits );
            if(value < 0)
            {
                for(int i = negLength - 1; i >= 0; i--)
 800c8fe:	2800      	cmp	r0, #0
 800c900:	460a      	mov	r2, r1
 800c902:	9005      	str	r0, [sp, #20]
 800c904:	9104      	str	r1, [sp, #16]
 800c906:	9203      	str	r2, [sp, #12]
 800c908:	db17      	blt.n	800c93a <Number_Int32ToDecString$7261+0x112>
 800c90a:	e7ff      	b.n	800c90c <Number_Int32ToDecString$7261+0xe4>
                {
                    buffer[--p] = sign[i];
 800c90c:	9804      	ldr	r0, [sp, #16]
 800c90e:	1e41      	subs	r1, r0, #1
 800c910:	460a      	mov	r2, r1
 800c912:	9819      	ldr	r0, [sp, #100]	; 0x64
 800c914:	9b05      	ldr	r3, [sp, #20]
 800c916:	9102      	str	r1, [sp, #8]
 800c918:	4619      	mov	r1, r3
 800c91a:	9201      	str	r2, [sp, #4]
 800c91c:	f7f4 fea2 	bl	8001664 <String_get_Chars$3893>
 800c920:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c922:	9a02      	ldr	r2, [sp, #8]
 800c924:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 800c928:	8198      	strh	r0, [r3, #12]
            //    COMPlusThrowOM();

            int p = Int32ToDecChars( buffer, bufferLength, (uint)(value >= 0 ? value : -value), digits );
            if(value < 0)
            {
                for(int i = negLength - 1; i >= 0; i--)
 800c92a:	9805      	ldr	r0, [sp, #20]
 800c92c:	1e43      	subs	r3, r0, #1
 800c92e:	f8dd c004 	ldr.w	ip, [sp, #4]
 800c932:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800c936:	9309      	str	r3, [sp, #36]	; 0x24
 800c938:	e7df      	b.n	800c8fa <Number_Int32ToDecString$7261+0xd2>
 800c93a:	9803      	ldr	r0, [sp, #12]
                {
                    buffer[--p] = sign[i];
                    // *(--p) = *(src+i);
                }
            }
 800c93c:	900b      	str	r0, [sp, #44]	; 0x2c
 800c93e:	e7cb      	b.n	800c8d8 <Number_Int32ToDecString$7261+0xb0>
            {
                //src = sNegative->GetBuffer();
                negLength = sign.Length;
                if(negLength > 85)
                {
                    bufferLength = negLength + 15; //was implicit C++ cast
 800c940:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800c942:	f100 010f 	add.w	r1, r0, #15
                }
 800c946:	9112      	str	r1, [sp, #72]	; 0x48
 800c948:	e7ff      	b.n	800c94a <Number_Int32ToDecString$7261+0x122>
 800c94a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c94c:	9913      	ldr	r1, [sp, #76]	; 0x4c
            }
 800c94e:	9115      	str	r1, [sp, #84]	; 0x54
 800c950:	9014      	str	r0, [sp, #80]	; 0x50
 800c952:	e78e      	b.n	800c872 <Number_Int32ToDecString$7261+0x4a>
 800c954:	ffffea38 	.word	0xffffea38
 800c958:	17ff4f56 	.word	0x17ff4f56
 800c95c:	e801031c 	.word	0xe801031c

0800c960 <Number_UInt32ToDecString$7264>:
 800c960:	b580      	push	{r7, lr}
 800c962:	b08a      	sub	sp, #40	; 0x28
 800c964:	460a      	mov	r2, r1
 800c966:	460b      	mov	r3, r1
        }

        private static String UInt32ToDecString( uint value, int digits )
        {
            int bufferLength = 100;
            if(digits < 1) digits = 1;
 800c968:	2900      	cmp	r1, #0
 800c96a:	9009      	str	r0, [sp, #36]	; 0x24
 800c96c:	9208      	str	r2, [sp, #32]
 800c96e:	9307      	str	r3, [sp, #28]
 800c970:	dc03      	bgt.n	800c97a <Number_UInt32ToDecString$7264+0x1a>
 800c972:	e7ff      	b.n	800c974 <Number_UInt32ToDecString$7264+0x14>
 800c974:	2001      	movs	r0, #1
 800c976:	9007      	str	r0, [sp, #28]
 800c978:	e7ff      	b.n	800c97a <Number_UInt32ToDecString$7264+0x1a>
 800c97a:	9807      	ldr	r0, [sp, #28]
 800c97c:	4914      	ldr	r1, [pc, #80]	; (800c9d0 <Number_UInt32ToDecString$7264+0x70>)
 800c97e:	4a15      	ldr	r2, [pc, #84]	; (800c9d4 <Number_UInt32ToDecString$7264+0x74>)
 800c980:	447a      	add	r2, pc
 800c982:	5889      	ldr	r1, [r1, r2]
            char[] buffer = new char[bufferLength];
 800c984:	4b14      	ldr	r3, [pc, #80]	; (800c9d8 <Number_UInt32ToDecString$7264+0x78>)
 800c986:	4413      	add	r3, r2
 800c988:	f8df c050 	ldr.w	ip, [pc, #80]	; 800c9dc <Number_UInt32ToDecString$7264+0x7c>
 800c98c:	4494      	add	ip, r2
 800c98e:	9006      	str	r0, [sp, #24]
 800c990:	4618      	mov	r0, r3
 800c992:	9105      	str	r1, [sp, #20]
 800c994:	4661      	mov	r1, ip
 800c996:	9b05      	ldr	r3, [sp, #20]
 800c998:	9204      	str	r2, [sp, #16]
 800c99a:	461a      	mov	r2, r3
 800c99c:	f7f5 fc00 	bl	80021a0 <DefaultTypeSystemManager_AllocateArray$4962>
 800c9a0:	490f      	ldr	r1, [pc, #60]	; (800c9e0 <Number_UInt32ToDecString$7264+0x80>)
 800c9a2:	9a04      	ldr	r2, [sp, #16]
 800c9a4:	5889      	ldr	r1, [r1, r2]
            int p = Int32ToDecChars( buffer, bufferLength, value, digits );
 800c9a6:	9003      	str	r0, [sp, #12]
 800c9a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c9aa:	9b06      	ldr	r3, [sp, #24]
 800c9ac:	f7fe fd22 	bl	800b3f4 <Number_Int32ToDecChars$7271>
            return new string( buffer, p, bufferLength - p );
 800c9b0:	f1c0 0164 	rsb	r1, r0, #100	; 0x64
 800c9b4:	9002      	str	r0, [sp, #8]
 800c9b6:	4608      	mov	r0, r1
 800c9b8:	9101      	str	r1, [sp, #4]
 800c9ba:	f7f4 fceb 	bl	8001394 <String_FastAllocateString$3886>
 800c9be:	9000      	str	r0, [sp, #0]
 800c9c0:	9903      	ldr	r1, [sp, #12]
 800c9c2:	9a02      	ldr	r2, [sp, #8]
 800c9c4:	9b01      	ldr	r3, [sp, #4]
 800c9c6:	f7f5 fe4d 	bl	8002664 <String_.ctor$3883>
 800c9ca:	9800      	ldr	r0, [sp, #0]
 800c9cc:	b00a      	add	sp, #40	; 0x28
 800c9ce:	bd80      	pop	{r7, pc}
 800c9d0:	e80253f4 	.word	0xe80253f4
 800c9d4:	17ff4e50 	.word	0x17ff4e50
 800c9d8:	ffffea38 	.word	0xffffea38
 800c9dc:	e801031c 	.word	0xe801031c
 800c9e0:	e80253f8 	.word	0xe80253f8

0800c9e4 <Number_RoundNumber$7273>:
 800c9e4:	b093      	sub	sp, #76	; 0x4c
 800c9e6:	4602      	mov	r2, r0
        // markples: see also Lightning\Src\VM\COMNumber.cpp::
        // void RoundNumber(NUMBER* number, int pos)
        private void RoundNumber( int pos )
        {
            int i = 0;
            while(i < pos && this.digits[i] != 0) i++;
 800c9e8:	3014      	adds	r0, #20
 800c9ea:	2300      	movs	r3, #0

        // markples: see also Lightning\Src\VM\COMNumber.cpp::
        // void RoundNumber(NUMBER* number, int pos)
        private void RoundNumber( int pos )
        {
            int i = 0;
 800c9ec:	9212      	str	r2, [sp, #72]	; 0x48
 800c9ee:	9111      	str	r1, [sp, #68]	; 0x44
 800c9f0:	9010      	str	r0, [sp, #64]	; 0x40
 800c9f2:	930f      	str	r3, [sp, #60]	; 0x3c
 800c9f4:	e7ff      	b.n	800c9f6 <Number_RoundNumber$7273+0x12>
 800c9f6:	980f      	ldr	r0, [sp, #60]	; 0x3c
            while(i < pos && this.digits[i] != 0) i++;
 800c9f8:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c9fa:	4288      	cmp	r0, r1
 800c9fc:	4602      	mov	r2, r0
 800c9fe:	900e      	str	r0, [sp, #56]	; 0x38
 800ca00:	920d      	str	r2, [sp, #52]	; 0x34
 800ca02:	db06      	blt.n	800ca12 <Number_RoundNumber$7273+0x2e>
 800ca04:	e7ff      	b.n	800ca06 <Number_RoundNumber$7273+0x22>
 800ca06:	980d      	ldr	r0, [sp, #52]	; 0x34
            if(i == pos && this.digits[i] >= '5')
 800ca08:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ca0a:	4288      	cmp	r0, r1
 800ca0c:	900c      	str	r0, [sp, #48]	; 0x30
 800ca0e:	d10e      	bne.n	800ca2e <Number_RoundNumber$7273+0x4a>
 800ca10:	e014      	b.n	800ca3c <Number_RoundNumber$7273+0x58>
        // markples: see also Lightning\Src\VM\COMNumber.cpp::
        // void RoundNumber(NUMBER* number, int pos)
        private void RoundNumber( int pos )
        {
            int i = 0;
            while(i < pos && this.digits[i] != 0) i++;
 800ca12:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ca14:	6801      	ldr	r1, [r0, #0]
 800ca16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ca18:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800ca1c:	8989      	ldrh	r1, [r1, #12]
 800ca1e:	2900      	cmp	r1, #0
 800ca20:	920d      	str	r2, [sp, #52]	; 0x34
 800ca22:	d0f0      	beq.n	800ca06 <Number_RoundNumber$7273+0x22>
 800ca24:	e7ff      	b.n	800ca26 <Number_RoundNumber$7273+0x42>
 800ca26:	980e      	ldr	r0, [sp, #56]	; 0x38
 800ca28:	1c41      	adds	r1, r0, #1
 800ca2a:	910f      	str	r1, [sp, #60]	; 0x3c
 800ca2c:	e7e3      	b.n	800c9f6 <Number_RoundNumber$7273+0x12>
                    i = 1;
                }
            }
            else
            {
                while(i > 0 && this.digits[i - 1] == '0') i--;
 800ca2e:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ca30:	f100 0114 	add.w	r1, r0, #20
 800ca34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
                    this.digits[0] = '1';
                    i = 1;
                }
            }
            else
            {
 800ca36:	910b      	str	r1, [sp, #44]	; 0x2c
 800ca38:	920a      	str	r2, [sp, #40]	; 0x28
 800ca3a:	e00f      	b.n	800ca5c <Number_RoundNumber$7273+0x78>
        // void RoundNumber(NUMBER* number, int pos)
        private void RoundNumber( int pos )
        {
            int i = 0;
            while(i < pos && this.digits[i] != 0) i++;
            if(i == pos && this.digits[i] >= '5')
 800ca3c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ca3e:	6941      	ldr	r1, [r0, #20]
 800ca40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ca42:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800ca46:	8989      	ldrh	r1, [r1, #12]
 800ca48:	2935      	cmp	r1, #53	; 0x35
 800ca4a:	dbf0      	blt.n	800ca2e <Number_RoundNumber$7273+0x4a>
 800ca4c:	e7ff      	b.n	800ca4e <Number_RoundNumber$7273+0x6a>
            {
                while(i > 0 && this.digits[i - 1] == '9') i--;
 800ca4e:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ca50:	f100 0114 	add.w	r1, r0, #20
 800ca54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        private void RoundNumber( int pos )
        {
            int i = 0;
            while(i < pos && this.digits[i] != 0) i++;
            if(i == pos && this.digits[i] >= '5')
            {
 800ca56:	9109      	str	r1, [sp, #36]	; 0x24
 800ca58:	9208      	str	r2, [sp, #32]
 800ca5a:	e02a      	b.n	800cab2 <Number_RoundNumber$7273+0xce>
 800ca5c:	980a      	ldr	r0, [sp, #40]	; 0x28
                    i = 1;
                }
            }
            else
            {
                while(i > 0 && this.digits[i - 1] == '0') i--;
 800ca5e:	2800      	cmp	r0, #0
 800ca60:	4601      	mov	r1, r0
 800ca62:	9007      	str	r0, [sp, #28]
 800ca64:	9106      	str	r1, [sp, #24]
 800ca66:	dc03      	bgt.n	800ca70 <Number_RoundNumber$7273+0x8c>
 800ca68:	e7ff      	b.n	800ca6a <Number_RoundNumber$7273+0x86>
 800ca6a:	9806      	ldr	r0, [sp, #24]
            }
 800ca6c:	9005      	str	r0, [sp, #20]
 800ca6e:	e00d      	b.n	800ca8c <Number_RoundNumber$7273+0xa8>
                    i = 1;
                }
            }
            else
            {
                while(i > 0 && this.digits[i - 1] == '0') i--;
 800ca70:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ca72:	6801      	ldr	r1, [r0, #0]
 800ca74:	9a07      	ldr	r2, [sp, #28]
 800ca76:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800ca7a:	8949      	ldrh	r1, [r1, #10]
 800ca7c:	2930      	cmp	r1, #48	; 0x30
 800ca7e:	9206      	str	r2, [sp, #24]
 800ca80:	d1f3      	bne.n	800ca6a <Number_RoundNumber$7273+0x86>
 800ca82:	e7ff      	b.n	800ca84 <Number_RoundNumber$7273+0xa0>
 800ca84:	9807      	ldr	r0, [sp, #28]
 800ca86:	1e41      	subs	r1, r0, #1
 800ca88:	910a      	str	r1, [sp, #40]	; 0x28
 800ca8a:	e7e7      	b.n	800ca5c <Number_RoundNumber$7273+0x78>
 800ca8c:	9805      	ldr	r0, [sp, #20]
            }
            if(i == 0)
 800ca8e:	2800      	cmp	r0, #0
 800ca90:	9004      	str	r0, [sp, #16]
 800ca92:	d105      	bne.n	800caa0 <Number_RoundNumber$7273+0xbc>
 800ca94:	e7ff      	b.n	800ca96 <Number_RoundNumber$7273+0xb2>
 800ca96:	2000      	movs	r0, #0
 800ca98:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ca9a:	60c8      	str	r0, [r1, #12]
 800ca9c:	7408      	strb	r0, [r1, #16]
            {
                this.scale = 0;
                this.negative = false;
            }
 800ca9e:	e7ff      	b.n	800caa0 <Number_RoundNumber$7273+0xbc>
            this.digits[i] = '\0';
 800caa0:	9812      	ldr	r0, [sp, #72]	; 0x48
 800caa2:	6941      	ldr	r1, [r0, #20]
 800caa4:	9a04      	ldr	r2, [sp, #16]
 800caa6:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800caaa:	2300      	movs	r3, #0
 800caac:	818b      	strh	r3, [r1, #12]
 800caae:	b013      	add	sp, #76	; 0x4c
 800cab0:	4770      	bx	lr
 800cab2:	9808      	ldr	r0, [sp, #32]
        {
            int i = 0;
            while(i < pos && this.digits[i] != 0) i++;
            if(i == pos && this.digits[i] >= '5')
            {
                while(i > 0 && this.digits[i - 1] == '9') i--;
 800cab4:	2800      	cmp	r0, #0
 800cab6:	4601      	mov	r1, r0
 800cab8:	9003      	str	r0, [sp, #12]
 800caba:	9102      	str	r1, [sp, #8]
 800cabc:	dc05      	bgt.n	800caca <Number_RoundNumber$7273+0xe6>
 800cabe:	e7ff      	b.n	800cac0 <Number_RoundNumber$7273+0xdc>
 800cac0:	9802      	ldr	r0, [sp, #8]
                if(i > 0)
 800cac2:	2800      	cmp	r0, #0
 800cac4:	9001      	str	r0, [sp, #4]
 800cac6:	dc0e      	bgt.n	800cae6 <Number_RoundNumber$7273+0x102>
 800cac8:	e017      	b.n	800cafa <Number_RoundNumber$7273+0x116>
        {
            int i = 0;
            while(i < pos && this.digits[i] != 0) i++;
            if(i == pos && this.digits[i] >= '5')
            {
                while(i > 0 && this.digits[i - 1] == '9') i--;
 800caca:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cacc:	6801      	ldr	r1, [r0, #0]
 800cace:	9a03      	ldr	r2, [sp, #12]
 800cad0:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800cad4:	8949      	ldrh	r1, [r1, #10]
 800cad6:	2939      	cmp	r1, #57	; 0x39
 800cad8:	9202      	str	r2, [sp, #8]
 800cada:	d1f1      	bne.n	800cac0 <Number_RoundNumber$7273+0xdc>
 800cadc:	e7ff      	b.n	800cade <Number_RoundNumber$7273+0xfa>
 800cade:	9803      	ldr	r0, [sp, #12]
 800cae0:	1e41      	subs	r1, r0, #1
 800cae2:	9108      	str	r1, [sp, #32]
 800cae4:	e7e5      	b.n	800cab2 <Number_RoundNumber$7273+0xce>
                if(i > 0)
                {
                    this.digits[i - 1]++;
 800cae6:	9812      	ldr	r0, [sp, #72]	; 0x48
 800cae8:	6941      	ldr	r1, [r0, #20]
 800caea:	9a01      	ldr	r2, [sp, #4]
 800caec:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800caf0:	894b      	ldrh	r3, [r1, #10]
 800caf2:	3301      	adds	r3, #1
 800caf4:	814b      	strh	r3, [r1, #10]
                }
 800caf6:	9200      	str	r2, [sp, #0]
 800caf8:	e009      	b.n	800cb0e <Number_RoundNumber$7273+0x12a>
 800cafa:	9812      	ldr	r0, [sp, #72]	; 0x48
 800cafc:	68c1      	ldr	r1, [r0, #12]
                else
                {
                    this.scale++;
 800cafe:	3101      	adds	r1, #1
 800cb00:	60c1      	str	r1, [r0, #12]
                    this.digits[0] = '1';
 800cb02:	6941      	ldr	r1, [r0, #20]
 800cb04:	2231      	movs	r2, #49	; 0x31
 800cb06:	818a      	strh	r2, [r1, #12]
 800cb08:	2101      	movs	r1, #1
                    i = 1;
                }
 800cb0a:	9100      	str	r1, [sp, #0]
 800cb0c:	e7ff      	b.n	800cb0e <Number_RoundNumber$7273+0x12a>
 800cb0e:	9800      	ldr	r0, [sp, #0]
            }
 800cb10:	9005      	str	r0, [sp, #20]
 800cb12:	e7bb      	b.n	800ca8c <Number_RoundNumber$7273+0xa8>

0800cb14 <Number_FormatPercent$7280>:
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b090      	sub	sp, #64	; 0x40
 800cb18:	4684      	mov	ip, r0

        private void FormatPercent( System.Text.StringBuilder sb     ,
                                    int                       digits ,
                                    NumberFormatInfo          info   )
        {
            String fmt      = this.negative ? negPercentFormats[info.percentNegativePattern] :
 800cb1a:	7c00      	ldrb	r0, [r0, #16]
 800cb1c:	2800      	cmp	r0, #0
 800cb1e:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800cb22:	930e      	str	r3, [sp, #56]	; 0x38
 800cb24:	920d      	str	r2, [sp, #52]	; 0x34
 800cb26:	910c      	str	r1, [sp, #48]	; 0x30
 800cb28:	d00d      	beq.n	800cb46 <Number_FormatPercent$7280+0x32>
 800cb2a:	e7ff      	b.n	800cb2c <Number_FormatPercent$7280+0x18>
 800cb2c:	4833      	ldr	r0, [pc, #204]	; (800cbfc <Number_FormatPercent$7280+0xe8>)
 800cb2e:	4935      	ldr	r1, [pc, #212]	; (800cc04 <Number_FormatPercent$7280+0xf0>)
 800cb30:	4479      	add	r1, pc
 800cb32:	4408      	add	r0, r1
 800cb34:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800cb38:	990e      	ldr	r1, [sp, #56]	; 0x38
 800cb3a:	6f0a      	ldr	r2, [r1, #112]	; 0x70
 800cb3c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800cb40:	68c0      	ldr	r0, [r0, #12]
 800cb42:	900b      	str	r0, [sp, #44]	; 0x2c
 800cb44:	e00c      	b.n	800cb60 <Number_FormatPercent$7280+0x4c>
 800cb46:	482d      	ldr	r0, [pc, #180]	; (800cbfc <Number_FormatPercent$7280+0xe8>)
 800cb48:	492d      	ldr	r1, [pc, #180]	; (800cc00 <Number_FormatPercent$7280+0xec>)
 800cb4a:	4479      	add	r1, pc
 800cb4c:	4408      	add	r0, r1
 800cb4e:	f8d0 00f4 	ldr.w	r0, [r0, #244]	; 0xf4
 800cb52:	990e      	ldr	r1, [sp, #56]	; 0x38
 800cb54:	6eca      	ldr	r2, [r1, #108]	; 0x6c
 800cb56:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800cb5a:	68c0      	ldr	r0, [r0, #12]
 800cb5c:	900b      	str	r0, [sp, #44]	; 0x2c
 800cb5e:	e7ff      	b.n	800cb60 <Number_FormatPercent$7280+0x4c>
 800cb60:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800cb62:	2100      	movs	r1, #0
                                              posPercentFormats[info.percentPositivePattern];
            int    fmtIndex = 0;
 800cb64:	900a      	str	r0, [sp, #40]	; 0x28
 800cb66:	9109      	str	r1, [sp, #36]	; 0x24
 800cb68:	e7ff      	b.n	800cb6a <Number_FormatPercent$7280+0x56>
 800cb6a:	9809      	ldr	r0, [sp, #36]	; 0x24
            char   ch;

            while((ch = fmt[fmtIndex++]) != 0)
 800cb6c:	1c41      	adds	r1, r0, #1
 800cb6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb70:	9008      	str	r0, [sp, #32]
 800cb72:	4610      	mov	r0, r2
 800cb74:	9b08      	ldr	r3, [sp, #32]
 800cb76:	9107      	str	r1, [sp, #28]
 800cb78:	4619      	mov	r1, r3
 800cb7a:	f7f4 fd73 	bl	8001664 <String_get_Chars$3893>
 800cb7e:	4601      	mov	r1, r0
 800cb80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cb84:	4210      	tst	r0, r2
 800cb86:	9106      	str	r1, [sp, #24]
 800cb88:	d006      	beq.n	800cb98 <Number_FormatPercent$7280+0x84>
 800cb8a:	e7ff      	b.n	800cb8c <Number_FormatPercent$7280+0x78>
 800cb8c:	9806      	ldr	r0, [sp, #24]
 800cb8e:	b281      	uxth	r1, r0
            {
                switch(ch)
 800cb90:	2923      	cmp	r1, #35	; 0x23
 800cb92:	9005      	str	r0, [sp, #20]
 800cb94:	d002      	beq.n	800cb9c <Number_FormatPercent$7280+0x88>
 800cb96:	e010      	b.n	800cbba <Number_FormatPercent$7280+0xa6>
 800cb98:	b010      	add	sp, #64	; 0x40
 800cb9a:	bd80      	pop	{r7, pc}
                {
                    case '#':
                        FormatFixed( sb, digits,
 800cb9c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800cb9e:	6903      	ldr	r3, [r0, #16]
 800cba0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800cba2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cba4:	46ec      	mov	ip, sp
 800cba6:	f8cc 2004 	str.w	r2, [ip, #4]
 800cbaa:	f8cc 1000 	str.w	r1, [ip]
 800cbae:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800cbb0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cbb2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cbb4:	f000 f966 	bl	800ce84 <Number_FormatFixed$7278>
                                     info.percentGroupSizes,
                                     info.percentDecimalSeparator,
                                     info.percentGroupSeparator, info );
                        break;
 800cbb8:	e01d      	b.n	800cbf6 <Number_FormatPercent$7280+0xe2>
 800cbba:	9805      	ldr	r0, [sp, #20]
 800cbbc:	b281      	uxth	r1, r0
            int    fmtIndex = 0;
            char   ch;

            while((ch = fmt[fmtIndex++]) != 0)
            {
                switch(ch)
 800cbbe:	2925      	cmp	r1, #37	; 0x25
 800cbc0:	d107      	bne.n	800cbd2 <Number_FormatPercent$7280+0xbe>
 800cbc2:	e7ff      	b.n	800cbc4 <Number_FormatPercent$7280+0xb0>
                    case '-':
                        sb.Append( info.negativeSign );
                        break;

                    case '%':
                        sb.Append( info.percentSymbol );
 800cbc4:	980e      	ldr	r0, [sp, #56]	; 0x38
 800cbc6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800cbc8:	980c      	ldr	r0, [sp, #48]	; 0x30
 800cbca:	f000 f917 	bl	800cdfc <StringBuilder_Append$8507>
                        break;
 800cbce:	9004      	str	r0, [sp, #16]
 800cbd0:	e011      	b.n	800cbf6 <Number_FormatPercent$7280+0xe2>
 800cbd2:	9805      	ldr	r0, [sp, #20]
 800cbd4:	b281      	uxth	r1, r0
            int    fmtIndex = 0;
            char   ch;

            while((ch = fmt[fmtIndex++]) != 0)
            {
                switch(ch)
 800cbd6:	292d      	cmp	r1, #45	; 0x2d
 800cbd8:	d107      	bne.n	800cbea <Number_FormatPercent$7280+0xd6>
 800cbda:	e7ff      	b.n	800cbdc <Number_FormatPercent$7280+0xc8>
                                     info.percentDecimalSeparator,
                                     info.percentGroupSeparator, info );
                        break;

                    case '-':
                        sb.Append( info.negativeSign );
 800cbdc:	980e      	ldr	r0, [sp, #56]	; 0x38
 800cbde:	6981      	ldr	r1, [r0, #24]
 800cbe0:	980c      	ldr	r0, [sp, #48]	; 0x30
 800cbe2:	f000 f90b 	bl	800cdfc <StringBuilder_Append$8507>
                        break;
 800cbe6:	9003      	str	r0, [sp, #12]
 800cbe8:	e005      	b.n	800cbf6 <Number_FormatPercent$7280+0xe2>
                    case '%':
                        sb.Append( info.percentSymbol );
                        break;

                    default:
                        sb.Append( ch );
 800cbea:	980c      	ldr	r0, [sp, #48]	; 0x30
 800cbec:	9906      	ldr	r1, [sp, #24]
 800cbee:	f000 fec1 	bl	800d974 <StringBuilder_Append$8521>
                        break;
 800cbf2:	9002      	str	r0, [sp, #8]
 800cbf4:	e7ff      	b.n	800cbf6 <Number_FormatPercent$7280+0xe2>
 800cbf6:	9807      	ldr	r0, [sp, #28]
                }
            }
 800cbf8:	9009      	str	r0, [sp, #36]	; 0x24
 800cbfa:	e7b6      	b.n	800cb6a <Number_FormatPercent$7280+0x56>
 800cbfc:	fffffe3c 	.word	0xfffffe3c
 800cc00:	17ff4c86 	.word	0x17ff4c86
 800cc04:	17ff4ca0 	.word	0x17ff4ca0

0800cc08 <Number_FormatNumber$7279>:
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b08e      	sub	sp, #56	; 0x38
 800cc0c:	4684      	mov	ip, r0

        private void FormatNumber( System.Text.StringBuilder sb     ,
                                   int                       digits ,
                                   NumberFormatInfo          info   )
        {
            String fmt      = this.negative ? negNumberFormats[info.numberNegativePattern] : posNumberFormat;
 800cc0e:	7c00      	ldrb	r0, [r0, #16]
 800cc10:	2800      	cmp	r0, #0
 800cc12:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 800cc16:	930c      	str	r3, [sp, #48]	; 0x30
 800cc18:	920b      	str	r2, [sp, #44]	; 0x2c
 800cc1a:	910a      	str	r1, [sp, #40]	; 0x28
 800cc1c:	d00d      	beq.n	800cc3a <Number_FormatNumber$7279+0x32>
 800cc1e:	e7ff      	b.n	800cc20 <Number_FormatNumber$7279+0x18>
 800cc20:	4829      	ldr	r0, [pc, #164]	; (800ccc8 <Number_FormatNumber$7279+0xc0>)
 800cc22:	492b      	ldr	r1, [pc, #172]	; (800ccd0 <Number_FormatNumber$7279+0xc8>)
 800cc24:	4479      	add	r1, pc
 800cc26:	4408      	add	r0, r1
 800cc28:	f8d0 00e8 	ldr.w	r0, [r0, #232]	; 0xe8
 800cc2c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cc2e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
 800cc30:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800cc34:	68c0      	ldr	r0, [r0, #12]
 800cc36:	9009      	str	r0, [sp, #36]	; 0x24
 800cc38:	e007      	b.n	800cc4a <Number_FormatNumber$7279+0x42>
 800cc3a:	4823      	ldr	r0, [pc, #140]	; (800ccc8 <Number_FormatNumber$7279+0xc0>)
 800cc3c:	4923      	ldr	r1, [pc, #140]	; (800cccc <Number_FormatNumber$7279+0xc4>)
 800cc3e:	4479      	add	r1, pc
 800cc40:	4408      	add	r0, r1
 800cc42:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
 800cc46:	9009      	str	r0, [sp, #36]	; 0x24
 800cc48:	e7ff      	b.n	800cc4a <Number_FormatNumber$7279+0x42>
 800cc4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc4c:	2100      	movs	r1, #0
            int    fmtIndex = 0;
 800cc4e:	9008      	str	r0, [sp, #32]
 800cc50:	9107      	str	r1, [sp, #28]
 800cc52:	e7ff      	b.n	800cc54 <Number_FormatNumber$7279+0x4c>
 800cc54:	9807      	ldr	r0, [sp, #28]
 800cc56:	9908      	ldr	r1, [sp, #32]
 800cc58:	68ca      	ldr	r2, [r1, #12]

            for(; fmtIndex < fmt.Length; fmtIndex++)
 800cc5a:	4290      	cmp	r0, r2
 800cc5c:	9006      	str	r0, [sp, #24]
 800cc5e:	da0b      	bge.n	800cc78 <Number_FormatNumber$7279+0x70>
 800cc60:	e7ff      	b.n	800cc62 <Number_FormatNumber$7279+0x5a>
            {
                char ch = fmt[fmtIndex];
 800cc62:	9808      	ldr	r0, [sp, #32]
 800cc64:	9906      	ldr	r1, [sp, #24]
 800cc66:	f7f4 fcfd 	bl	8001664 <String_get_Chars$3893>
 800cc6a:	b281      	uxth	r1, r0
 800cc6c:	4602      	mov	r2, r0

                switch(ch)
 800cc6e:	2923      	cmp	r1, #35	; 0x23
 800cc70:	9205      	str	r2, [sp, #20]
 800cc72:	9004      	str	r0, [sp, #16]
 800cc74:	d002      	beq.n	800cc7c <Number_FormatNumber$7279+0x74>
 800cc76:	e010      	b.n	800cc9a <Number_FormatNumber$7279+0x92>
 800cc78:	b00e      	add	sp, #56	; 0x38
 800cc7a:	bd80      	pop	{r7, pc}
                {
                    case '#':
                        FormatFixed( sb, digits,
 800cc7c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800cc7e:	6883      	ldr	r3, [r0, #8]
 800cc80:	69c1      	ldr	r1, [r0, #28]
 800cc82:	6a02      	ldr	r2, [r0, #32]
 800cc84:	46ec      	mov	ip, sp
 800cc86:	f8cc 2004 	str.w	r2, [ip, #4]
 800cc8a:	f8cc 1000 	str.w	r1, [ip]
 800cc8e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800cc90:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cc92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cc94:	f000 f8f6 	bl	800ce84 <Number_FormatFixed$7278>
                                     info.numberGroupSizes,
                                     info.numberDecimalSeparator,
                                     info.numberGroupSeparator, info );
                        break;
 800cc98:	e011      	b.n	800ccbe <Number_FormatNumber$7279+0xb6>
 800cc9a:	9804      	ldr	r0, [sp, #16]
 800cc9c:	b281      	uxth	r1, r0

            for(; fmtIndex < fmt.Length; fmtIndex++)
            {
                char ch = fmt[fmtIndex];

                switch(ch)
 800cc9e:	292d      	cmp	r1, #45	; 0x2d
 800cca0:	d107      	bne.n	800ccb2 <Number_FormatNumber$7279+0xaa>
 800cca2:	e7ff      	b.n	800cca4 <Number_FormatNumber$7279+0x9c>
                                     info.numberDecimalSeparator,
                                     info.numberGroupSeparator, info );
                        break;

                    case '-':
                        sb.Append( info.negativeSign );
 800cca4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800cca6:	6981      	ldr	r1, [r0, #24]
 800cca8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ccaa:	f000 f8a7 	bl	800cdfc <StringBuilder_Append$8507>
                        break;
 800ccae:	9003      	str	r0, [sp, #12]
 800ccb0:	e005      	b.n	800ccbe <Number_FormatNumber$7279+0xb6>

                    default:
                        sb.Append( ch );
 800ccb2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ccb4:	9905      	ldr	r1, [sp, #20]
 800ccb6:	f000 fe5d 	bl	800d974 <StringBuilder_Append$8521>
                        break;
 800ccba:	9002      	str	r0, [sp, #8]
 800ccbc:	e7ff      	b.n	800ccbe <Number_FormatNumber$7279+0xb6>
                                   NumberFormatInfo          info   )
        {
            String fmt      = this.negative ? negNumberFormats[info.numberNegativePattern] : posNumberFormat;
            int    fmtIndex = 0;

            for(; fmtIndex < fmt.Length; fmtIndex++)
 800ccbe:	9806      	ldr	r0, [sp, #24]
 800ccc0:	1c41      	adds	r1, r0, #1
 800ccc2:	9107      	str	r1, [sp, #28]
 800ccc4:	e7c6      	b.n	800cc54 <Number_FormatNumber$7279+0x4c>
 800ccc6:	46c0      	nop			; (mov r8, r8)
 800ccc8:	fffffe3c 	.word	0xfffffe3c
 800cccc:	17ff4b92 	.word	0x17ff4b92
 800ccd0:	17ff4bac 	.word	0x17ff4bac

0800ccd4 <Number_FormatScientific$7276>:
 800ccd4:	b510      	push	{r4, lr}
 800ccd6:	b098      	sub	sp, #96	; 0x60
 800ccd8:	f8dd c068 	ldr.w	ip, [sp, #104]	; 0x68
 800ccdc:	4696      	mov	lr, r2
 800ccde:	4604      	mov	r4, r0
                                       char                      expChar ,
                                       NumberFormatInfo          info    )
        {
            int dig = 0;  // number->digits;

            sb.Append( this.digits[dig] != 0 ? this.digits[dig++] : '0' );
 800cce0:	6940      	ldr	r0, [r0, #20]
 800cce2:	8980      	ldrh	r0, [r0, #12]
 800cce4:	2800      	cmp	r0, #0
 800cce6:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 800ccea:	9416      	str	r4, [sp, #88]	; 0x58
 800ccec:	f8cd e054 	str.w	lr, [sp, #84]	; 0x54
 800ccf0:	9214      	str	r2, [sp, #80]	; 0x50
 800ccf2:	9313      	str	r3, [sp, #76]	; 0x4c
 800ccf4:	9112      	str	r1, [sp, #72]	; 0x48
 800ccf6:	d007      	beq.n	800cd08 <Number_FormatScientific$7276+0x34>
 800ccf8:	e7ff      	b.n	800ccfa <Number_FormatScientific$7276+0x26>
 800ccfa:	9816      	ldr	r0, [sp, #88]	; 0x58
 800ccfc:	6941      	ldr	r1, [r0, #20]
 800ccfe:	8989      	ldrh	r1, [r1, #12]
 800cd00:	2201      	movs	r2, #1
 800cd02:	9111      	str	r1, [sp, #68]	; 0x44
 800cd04:	9210      	str	r2, [sp, #64]	; 0x40
 800cd06:	e004      	b.n	800cd12 <Number_FormatScientific$7276+0x3e>
 800cd08:	2000      	movs	r0, #0
 800cd0a:	2130      	movs	r1, #48	; 0x30
 800cd0c:	9111      	str	r1, [sp, #68]	; 0x44
 800cd0e:	9010      	str	r0, [sp, #64]	; 0x40
 800cd10:	e7ff      	b.n	800cd12 <Number_FormatScientific$7276+0x3e>
 800cd12:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cd14:	9911      	ldr	r1, [sp, #68]	; 0x44
 800cd16:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cd18:	900f      	str	r0, [sp, #60]	; 0x3c
 800cd1a:	4610      	mov	r0, r2
 800cd1c:	f000 fe2a 	bl	800d974 <StringBuilder_Append$8521>

            if(digits != 1)
 800cd20:	9914      	ldr	r1, [sp, #80]	; 0x50
 800cd22:	2901      	cmp	r1, #1
 800cd24:	900e      	str	r0, [sp, #56]	; 0x38
 800cd26:	d007      	beq.n	800cd38 <Number_FormatScientific$7276+0x64>
 800cd28:	e7ff      	b.n	800cd2a <Number_FormatScientific$7276+0x56>
            {
                // For E0 we would like to suppress the decimal point
                sb.Append( info.numberDecimalSeparator );
 800cd2a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800cd2c:	69c1      	ldr	r1, [r0, #28]
 800cd2e:	9812      	ldr	r0, [sp, #72]	; 0x48
 800cd30:	f000 f864 	bl	800cdfc <StringBuilder_Append$8507>
            }
 800cd34:	900d      	str	r0, [sp, #52]	; 0x34
 800cd36:	e7ff      	b.n	800cd38 <Number_FormatScientific$7276+0x64>
 800cd38:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800cd3a:	9914      	ldr	r1, [sp, #80]	; 0x50
 800cd3c:	900c      	str	r0, [sp, #48]	; 0x30
 800cd3e:	910b      	str	r1, [sp, #44]	; 0x2c
 800cd40:	e7ff      	b.n	800cd42 <Number_FormatScientific$7276+0x6e>
 800cd42:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800cd44:	990c      	ldr	r1, [sp, #48]	; 0x30

            while(--digits > 0)
 800cd46:	3801      	subs	r0, #1
 800cd48:	4602      	mov	r2, r0
 800cd4a:	2801      	cmp	r0, #1
 800cd4c:	910a      	str	r1, [sp, #40]	; 0x28
 800cd4e:	9209      	str	r2, [sp, #36]	; 0x24
 800cd50:	db09      	blt.n	800cd66 <Number_FormatScientific$7276+0x92>
 800cd52:	e7ff      	b.n	800cd54 <Number_FormatScientific$7276+0x80>
            {
                sb.Append( this.digits[dig] != 0 ? this.digits[dig++] : '0' );
 800cd54:	9816      	ldr	r0, [sp, #88]	; 0x58
 800cd56:	6941      	ldr	r1, [r0, #20]
 800cd58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd5a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800cd5e:	8989      	ldrh	r1, [r1, #12]
 800cd60:	2900      	cmp	r1, #0
 800cd62:	d127      	bne.n	800cdb4 <Number_FormatScientific$7276+0xe0>
 800cd64:	e030      	b.n	800cdc8 <Number_FormatScientific$7276+0xf4>
            }

            int e = this.digits[0] == 0 ? 0 : this.scale - 1;
 800cd66:	9816      	ldr	r0, [sp, #88]	; 0x58
 800cd68:	6941      	ldr	r1, [r0, #20]
 800cd6a:	8989      	ldrh	r1, [r1, #12]
 800cd6c:	2900      	cmp	r1, #0
 800cd6e:	d005      	beq.n	800cd7c <Number_FormatScientific$7276+0xa8>
 800cd70:	e7ff      	b.n	800cd72 <Number_FormatScientific$7276+0x9e>
 800cd72:	9816      	ldr	r0, [sp, #88]	; 0x58
 800cd74:	68c1      	ldr	r1, [r0, #12]
 800cd76:	3901      	subs	r1, #1
 800cd78:	9108      	str	r1, [sp, #32]
 800cd7a:	e002      	b.n	800cd82 <Number_FormatScientific$7276+0xae>
 800cd7c:	2000      	movs	r0, #0
 800cd7e:	9008      	str	r0, [sp, #32]
 800cd80:	e7ff      	b.n	800cd82 <Number_FormatScientific$7276+0xae>
 800cd82:	9808      	ldr	r0, [sp, #32]

            FormatExponent( sb, e, expChar, info.positiveSign, info.negativeSign, 3 );
 800cd84:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800cd86:	694b      	ldr	r3, [r1, #20]
 800cd88:	698a      	ldr	r2, [r1, #24]
 800cd8a:	f8df c068 	ldr.w	ip, [pc, #104]	; 800cdf4 <Number_FormatScientific$7276+0x120>
 800cd8e:	f8df e068 	ldr.w	lr, [pc, #104]	; 800cdf8 <Number_FormatScientific$7276+0x124>
 800cd92:	44fe      	add	lr, pc
 800cd94:	f85c c00e 	ldr.w	ip, [ip, lr]
 800cd98:	46ee      	mov	lr, sp
 800cd9a:	f8ce c004 	str.w	ip, [lr, #4]
 800cd9e:	f8ce 2000 	str.w	r2, [lr]
 800cda2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cda4:	9007      	str	r0, [sp, #28]
 800cda6:	4610      	mov	r0, r2
 800cda8:	9907      	ldr	r1, [sp, #28]
 800cdaa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800cdac:	f000 fe44 	bl	800da38 <Number_FormatExponent$7274>
 800cdb0:	b018      	add	sp, #96	; 0x60
 800cdb2:	bd10      	pop	{r4, pc}
                sb.Append( info.numberDecimalSeparator );
            }

            while(--digits > 0)
            {
                sb.Append( this.digits[dig] != 0 ? this.digits[dig++] : '0' );
 800cdb4:	9816      	ldr	r0, [sp, #88]	; 0x58
 800cdb6:	6941      	ldr	r1, [r0, #20]
 800cdb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cdba:	1c53      	adds	r3, r2, #1
 800cdbc:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800cdc0:	8989      	ldrh	r1, [r1, #12]
 800cdc2:	9306      	str	r3, [sp, #24]
 800cdc4:	9105      	str	r1, [sp, #20]
 800cdc6:	e004      	b.n	800cdd2 <Number_FormatScientific$7276+0xfe>
 800cdc8:	2030      	movs	r0, #48	; 0x30
 800cdca:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cdcc:	9106      	str	r1, [sp, #24]
 800cdce:	9005      	str	r0, [sp, #20]
 800cdd0:	e7ff      	b.n	800cdd2 <Number_FormatScientific$7276+0xfe>
 800cdd2:	9805      	ldr	r0, [sp, #20]
 800cdd4:	9906      	ldr	r1, [sp, #24]
 800cdd6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cdd8:	9004      	str	r0, [sp, #16]
 800cdda:	4610      	mov	r0, r2
 800cddc:	9b04      	ldr	r3, [sp, #16]
 800cdde:	9103      	str	r1, [sp, #12]
 800cde0:	4619      	mov	r1, r3
 800cde2:	f000 fdc7 	bl	800d974 <StringBuilder_Append$8521>
 800cde6:	9903      	ldr	r1, [sp, #12]
 800cde8:	9a09      	ldr	r2, [sp, #36]	; 0x24
            }
 800cdea:	9002      	str	r0, [sp, #8]
 800cdec:	910c      	str	r1, [sp, #48]	; 0x30
 800cdee:	920b      	str	r2, [sp, #44]	; 0x2c
 800cdf0:	e7a7      	b.n	800cd42 <Number_FormatScientific$7276+0x6e>
 800cdf2:	46c0      	nop			; (mov r8, r8)
 800cdf4:	e8025410 	.word	0xe8025410
 800cdf8:	17ff4a3e 	.word	0x17ff4a3e

0800cdfc <StringBuilder_Append$8507>:
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b088      	sub	sp, #32
 800ce00:	460a      	mov	r2, r1
 800ce02:	2300      	movs	r3, #0
 800ce04:	9307      	str	r3, [sp, #28]
        // Appends a copy of this string at the end of this string builder.
        public StringBuilder Append( String value )
        {
            //If the value being added is null, eat the null
            //and return.
            if(value == null)
 800ce06:	2900      	cmp	r1, #0
 800ce08:	9006      	str	r0, [sp, #24]
 800ce0a:	9205      	str	r2, [sp, #20]
 800ce0c:	d103      	bne.n	800ce16 <StringBuilder_Append$8507+0x1a>
 800ce0e:	e7ff      	b.n	800ce10 <StringBuilder_Append$8507+0x14>
            {
                return this;
 800ce10:	9806      	ldr	r0, [sp, #24]
 800ce12:	9004      	str	r0, [sp, #16]
 800ce14:	e033      	b.n	800ce7e <StringBuilder_Append$8507+0x82>
 800ce16:	a907      	add	r1, sp, #28
            }

            Thread th;
            String currentString = GetThreadSafeString( out th );
 800ce18:	9806      	ldr	r0, [sp, #24]
 800ce1a:	f001 facf 	bl	800e3bc <StringBuilder_GetThreadSafeString$8493>
 800ce1e:	4601      	mov	r1, r0
 800ce20:	68c2      	ldr	r2, [r0, #12]
 800ce22:	9b05      	ldr	r3, [sp, #20]
 800ce24:	f8d3 c00c 	ldr.w	ip, [r3, #12]

            int currentLength = currentString.Length;

            int requiredLength = currentLength + value.Length;
 800ce28:	4494      	add	ip, r2
 800ce2a:	46e6      	mov	lr, ip

            if(NeedsAllocation( currentString, requiredLength ))
 800ce2c:	9103      	str	r1, [sp, #12]
 800ce2e:	4661      	mov	r1, ip
 800ce30:	f8cd e008 	str.w	lr, [sp, #8]
 800ce34:	9201      	str	r2, [sp, #4]
 800ce36:	f001 fb6d 	bl	800e514 <StringBuilder_NeedsAllocation$8509>
 800ce3a:	f010 0fff 	tst.w	r0, #255	; 0xff
 800ce3e:	d010      	beq.n	800ce62 <StringBuilder_Append$8507+0x66>
 800ce40:	e7ff      	b.n	800ce42 <StringBuilder_Append$8507+0x46>
            {
                String newString = GetNewString( currentString, requiredLength );
 800ce42:	9806      	ldr	r0, [sp, #24]
 800ce44:	9903      	ldr	r1, [sp, #12]
 800ce46:	9a02      	ldr	r2, [sp, #8]
 800ce48:	f001 fb74 	bl	800e534 <StringBuilder_GetNewString$8510>
                newString.AppendInPlace( value, currentLength );
 800ce4c:	9000      	str	r0, [sp, #0]
 800ce4e:	9905      	ldr	r1, [sp, #20]
 800ce50:	9a01      	ldr	r2, [sp, #4]
 800ce52:	f7f6 fa0c 	bl	800326e <String_AppendInPlace$2614>
                ReplaceString( th, newString );
 800ce56:	9907      	ldr	r1, [sp, #28]
 800ce58:	9806      	ldr	r0, [sp, #24]
 800ce5a:	9a00      	ldr	r2, [sp, #0]
 800ce5c:	f001 fbe4 	bl	800e628 <StringBuilder_ReplaceString$8511>
            }
 800ce60:	e00a      	b.n	800ce78 <StringBuilder_Append$8507+0x7c>
            else
            {
                currentString.AppendInPlace( value, currentLength );
 800ce62:	9803      	ldr	r0, [sp, #12]
 800ce64:	9905      	ldr	r1, [sp, #20]
 800ce66:	9a01      	ldr	r2, [sp, #4]
 800ce68:	f7f6 fa01 	bl	800326e <String_AppendInPlace$2614>
                ReplaceString( th, currentString );
 800ce6c:	9907      	ldr	r1, [sp, #28]
 800ce6e:	9806      	ldr	r0, [sp, #24]
 800ce70:	9a03      	ldr	r2, [sp, #12]
 800ce72:	f001 fbd9 	bl	800e628 <StringBuilder_ReplaceString$8511>
            }
 800ce76:	e7ff      	b.n	800ce78 <StringBuilder_Append$8507+0x7c>

            return this;
 800ce78:	9806      	ldr	r0, [sp, #24]
 800ce7a:	9004      	str	r0, [sp, #16]
 800ce7c:	e7ff      	b.n	800ce7e <StringBuilder_Append$8507+0x82>
        }
 800ce7e:	9804      	ldr	r0, [sp, #16]
 800ce80:	b008      	add	sp, #32
 800ce82:	bd80      	pop	{r7, pc}

0800ce84 <Number_FormatFixed$7278>:
 800ce84:	b5b0      	push	{r4, r5, r7, lr}
 800ce86:	b0ec      	sub	sp, #432	; 0x1b0
 800ce88:	f8dd c1c4 	ldr.w	ip, [sp, #452]	; 0x1c4
 800ce8c:	f8dd e1c0 	ldr.w	lr, [sp, #448]	; 0x1c0
 800ce90:	4614      	mov	r4, r2
 800ce92:	4605      	mov	r5, r0
 800ce94:	68c0      	ldr	r0, [r0, #12]
        {
            //          int bufferSize = 0;   // the length of the result buffer string.
            int digPos = this.scale;
            int dig = 0; // = number->digits;

            if(digPos > 0)
 800ce96:	2801      	cmp	r0, #1
 800ce98:	f8cd e1a8 	str.w	lr, [sp, #424]	; 0x1a8
 800ce9c:	9569      	str	r5, [sp, #420]	; 0x1a4
 800ce9e:	9468      	str	r4, [sp, #416]	; 0x1a0
 800cea0:	9267      	str	r2, [sp, #412]	; 0x19c
 800cea2:	f8cd c198 	str.w	ip, [sp, #408]	; 0x198
 800cea6:	9365      	str	r3, [sp, #404]	; 0x194
 800cea8:	9164      	str	r1, [sp, #400]	; 0x190
 800ceaa:	9063      	str	r0, [sp, #396]	; 0x18c
 800ceac:	db05      	blt.n	800ceba <Number_FormatFixed$7278+0x36>
 800ceae:	e7ff      	b.n	800ceb0 <Number_FormatFixed$7278+0x2c>
            {
                if(groupDigits != null)
 800ceb0:	9865      	ldr	r0, [sp, #404]	; 0x194
 800ceb2:	2800      	cmp	r0, #0
 800ceb4:	f040 8083 	bne.w	800cfbe <Number_FormatFixed$7278+0x13a>
 800ceb8:	e094      	b.n	800cfe4 <Number_FormatFixed$7278+0x160>
 800ceba:	f8df 04a4 	ldr.w	r0, [pc, #1188]	; 800d360 <Number_FormatFixed$7278+0x4dc>
 800cebe:	f8df 14a4 	ldr.w	r1, [pc, #1188]	; 800d364 <Number_FormatFixed$7278+0x4e0>
 800cec2:	4479      	add	r1, pc
                    } while(--digPos > 0);
                }
            }
            else
            {
                sb.Append( '0' );
 800cec4:	5a41      	ldrh	r1, [r0, r1]
 800cec6:	9864      	ldr	r0, [sp, #400]	; 0x190
 800cec8:	f000 fd54 	bl	800d974 <StringBuilder_Append$8521>
 800cecc:	2100      	movs	r1, #0
 800cece:	9a63      	ldr	r2, [sp, #396]	; 0x18c
            }
 800ced0:	9062      	str	r0, [sp, #392]	; 0x188
 800ced2:	9161      	str	r1, [sp, #388]	; 0x184
 800ced4:	9260      	str	r2, [sp, #384]	; 0x180
 800ced6:	e7ff      	b.n	800ced8 <Number_FormatFixed$7278+0x54>
 800ced8:	9860      	ldr	r0, [sp, #384]	; 0x180
 800ceda:	9961      	ldr	r1, [sp, #388]	; 0x184

            if(digits > 0)
 800cedc:	9a67      	ldr	r2, [sp, #412]	; 0x19c
 800cede:	2a01      	cmp	r2, #1
 800cee0:	905f      	str	r0, [sp, #380]	; 0x17c
 800cee2:	915e      	str	r1, [sp, #376]	; 0x178
 800cee4:	db0a      	blt.n	800cefc <Number_FormatFixed$7278+0x78>
 800cee6:	e7ff      	b.n	800cee8 <Number_FormatFixed$7278+0x64>
            {
                sb.Append( sDecimal );
 800cee8:	9864      	ldr	r0, [sp, #400]	; 0x190
 800ceea:	996a      	ldr	r1, [sp, #424]	; 0x1a8
 800ceec:	f7ff ff86 	bl	800cdfc <StringBuilder_Append$8507>
 800cef0:	995f      	ldr	r1, [sp, #380]	; 0x17c
 800cef2:	9a67      	ldr	r2, [sp, #412]	; 0x19c
 800cef4:	905d      	str	r0, [sp, #372]	; 0x174
 800cef6:	915c      	str	r1, [sp, #368]	; 0x170
 800cef8:	925b      	str	r2, [sp, #364]	; 0x16c
 800cefa:	e001      	b.n	800cf00 <Number_FormatFixed$7278+0x7c>
 800cefc:	b06c      	add	sp, #432	; 0x1b0
 800cefe:	bdb0      	pop	{r4, r5, r7, pc}
 800cf00:	985b      	ldr	r0, [sp, #364]	; 0x16c
 800cf02:	995c      	ldr	r1, [sp, #368]	; 0x170

                while(digPos < 0 && digits > 0)
 800cf04:	2900      	cmp	r1, #0
 800cf06:	4602      	mov	r2, r0
 800cf08:	905a      	str	r0, [sp, #360]	; 0x168
 800cf0a:	9159      	str	r1, [sp, #356]	; 0x164
 800cf0c:	9258      	str	r2, [sp, #352]	; 0x160
 800cf0e:	db0c      	blt.n	800cf2a <Number_FormatFixed$7278+0xa6>
 800cf10:	e7ff      	b.n	800cf12 <Number_FormatFixed$7278+0x8e>
 800cf12:	9858      	ldr	r0, [sp, #352]	; 0x160
 800cf14:	995e      	ldr	r1, [sp, #376]	; 0x178
 800cf16:	9157      	str	r1, [sp, #348]	; 0x15c
 800cf18:	9056      	str	r0, [sp, #344]	; 0x158
 800cf1a:	e7ff      	b.n	800cf1c <Number_FormatFixed$7278+0x98>
 800cf1c:	9856      	ldr	r0, [sp, #344]	; 0x158
 800cf1e:	9957      	ldr	r1, [sp, #348]	; 0x15c

                    digPos++;
                    digits--;
                }

                while(digits > 0)
 800cf20:	2800      	cmp	r0, #0
 800cf22:	9055      	str	r0, [sp, #340]	; 0x154
 800cf24:	9154      	str	r1, [sp, #336]	; 0x150
 800cf26:	dc19      	bgt.n	800cf5c <Number_FormatFixed$7278+0xd8>
 800cf28:	e023      	b.n	800cf72 <Number_FormatFixed$7278+0xee>

            if(digits > 0)
            {
                sb.Append( sDecimal );

                while(digPos < 0 && digits > 0)
 800cf2a:	985a      	ldr	r0, [sp, #360]	; 0x168
 800cf2c:	2801      	cmp	r0, #1
 800cf2e:	9058      	str	r0, [sp, #352]	; 0x160
 800cf30:	dbef      	blt.n	800cf12 <Number_FormatFixed$7278+0x8e>
 800cf32:	e7ff      	b.n	800cf34 <Number_FormatFixed$7278+0xb0>
 800cf34:	f8df 0444 	ldr.w	r0, [pc, #1092]	; 800d37c <Number_FormatFixed$7278+0x4f8>
 800cf38:	f8df 1444 	ldr.w	r1, [pc, #1092]	; 800d380 <Number_FormatFixed$7278+0x4fc>
 800cf3c:	4479      	add	r1, pc
                {
                    sb.Append( '0' );
 800cf3e:	5a41      	ldrh	r1, [r0, r1]
 800cf40:	9864      	ldr	r0, [sp, #400]	; 0x190
 800cf42:	f000 fd17 	bl	800d974 <StringBuilder_Append$8521>

                    digPos++;
 800cf46:	9959      	ldr	r1, [sp, #356]	; 0x164
 800cf48:	1c4a      	adds	r2, r1, #1
 800cf4a:	9b5a      	ldr	r3, [sp, #360]	; 0x168
 800cf4c:	936b      	str	r3, [sp, #428]	; 0x1ac
                    digits--;
 800cf4e:	f1a3 0c01 	sub.w	ip, r3, #1
                }
 800cf52:	9053      	str	r0, [sp, #332]	; 0x14c
 800cf54:	925c      	str	r2, [sp, #368]	; 0x170
 800cf56:	f8cd c16c 	str.w	ip, [sp, #364]	; 0x16c
 800cf5a:	e7d1      	b.n	800cf00 <Number_FormatFixed$7278+0x7c>

                while(digits > 0)
                {
                    char ch = this.digits[dig];
 800cf5c:	9869      	ldr	r0, [sp, #420]	; 0x1a4
 800cf5e:	6941      	ldr	r1, [r0, #20]
 800cf60:	9a54      	ldr	r2, [sp, #336]	; 0x150
 800cf62:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800cf66:	8989      	ldrh	r1, [r1, #12]
 800cf68:	460b      	mov	r3, r1

                    if(ch == 0)
 800cf6a:	2900      	cmp	r1, #0
 800cf6c:	9352      	str	r3, [sp, #328]	; 0x148
 800cf6e:	d001      	beq.n	800cf74 <Number_FormatFixed$7278+0xf0>
 800cf70:	e007      	b.n	800cf82 <Number_FormatFixed$7278+0xfe>

                    sb.Append( ch );

                    digits--;
                }
            }
 800cf72:	e7c3      	b.n	800cefc <Number_FormatFixed$7278+0x78>
 800cf74:	2030      	movs	r0, #48	; 0x30
 800cf76:	a96b      	add	r1, sp, #428	; 0x1ac
 800cf78:	9a54      	ldr	r2, [sp, #336]	; 0x150
                    char ch = this.digits[dig];

                    if(ch == 0)
                    {
                        ch = '0';
                    }
 800cf7a:	9251      	str	r2, [sp, #324]	; 0x144
 800cf7c:	9050      	str	r0, [sp, #320]	; 0x140
 800cf7e:	914f      	str	r1, [sp, #316]	; 0x13c
 800cf80:	e008      	b.n	800cf94 <Number_FormatFixed$7278+0x110>
 800cf82:	a86b      	add	r0, sp, #428	; 0x1ac
 800cf84:	9954      	ldr	r1, [sp, #336]	; 0x150
 800cf86:	916b      	str	r1, [sp, #428]	; 0x1ac
                    else
                    {
                        dig++;
 800cf88:	1c4a      	adds	r2, r1, #1
 800cf8a:	9b52      	ldr	r3, [sp, #328]	; 0x148
                    }
 800cf8c:	9251      	str	r2, [sp, #324]	; 0x144
 800cf8e:	9350      	str	r3, [sp, #320]	; 0x140
 800cf90:	904f      	str	r0, [sp, #316]	; 0x13c
 800cf92:	e7ff      	b.n	800cf94 <Number_FormatFixed$7278+0x110>
 800cf94:	984f      	ldr	r0, [sp, #316]	; 0x13c
 800cf96:	9951      	ldr	r1, [sp, #324]	; 0x144
 800cf98:	9a50      	ldr	r2, [sp, #320]	; 0x140

                    sb.Append( ch );
 800cf9a:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800cf9c:	904e      	str	r0, [sp, #312]	; 0x138
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	914d      	str	r1, [sp, #308]	; 0x134
 800cfa2:	4611      	mov	r1, r2
 800cfa4:	f000 fce6 	bl	800d974 <StringBuilder_Append$8521>
 800cfa8:	9955      	ldr	r1, [sp, #340]	; 0x154
 800cfaa:	9a4e      	ldr	r2, [sp, #312]	; 0x138
 800cfac:	6011      	str	r1, [r2, #0]

                    digits--;
 800cfae:	1e4b      	subs	r3, r1, #1
 800cfb0:	f8dd c134 	ldr.w	ip, [sp, #308]	; 0x134
                }
 800cfb4:	904c      	str	r0, [sp, #304]	; 0x130
 800cfb6:	f8cd c15c 	str.w	ip, [sp, #348]	; 0x15c
 800cfba:	9356      	str	r3, [sp, #344]	; 0x158
 800cfbc:	e7ae      	b.n	800cf1c <Number_FormatFixed$7278+0x98>
    // a Number) or a positive or negative infinity, then regardless of the format
    // string, the resulting string is given by the NaNSymbol,
    // PositiveInfinitySymbol, or NegativeInfinitySymbol property of
    // the NumberFormatInfo used to format the number.
    //
    // Parsing
 800cfbe:	9865      	ldr	r0, [sp, #404]	; 0x194
 800cfc0:	6881      	ldr	r1, [r0, #8]
 800cfc2:	68c2      	ldr	r2, [r0, #12]
 800cfc4:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800cfc6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800cfca:	f04f 0e00 	mov.w	lr, #0
                    int groupSize = 0;

                    //
                    // Find out the size of the string buffer for the result.
                    //
                    if(groupSizeLen != 0) // You can pass in 0 length arrays
 800cfce:	2900      	cmp	r1, #0
 800cfd0:	9c63      	ldr	r4, [sp, #396]	; 0x18c
 800cfd2:	914b      	str	r1, [sp, #300]	; 0x12c
 800cfd4:	924a      	str	r2, [sp, #296]	; 0x128
 800cfd6:	f8cd c124 	str.w	ip, [sp, #292]	; 0x124
 800cfda:	9448      	str	r4, [sp, #288]	; 0x120
 800cfdc:	f8cd e11c 	str.w	lr, [sp, #284]	; 0x11c
 800cfe0:	d14e      	bne.n	800d080 <Number_FormatFixed$7278+0x1fc>
 800cfe2:	e054      	b.n	800d08e <Number_FormatFixed$7278+0x20a>
 800cfe4:	2000      	movs	r0, #0
 800cfe6:	9963      	ldr	r1, [sp, #396]	; 0x18c
                    sb.Append( buffer );

                    dig += digStart;
                }
                else
                {
 800cfe8:	9046      	str	r0, [sp, #280]	; 0x118
 800cfea:	9145      	str	r1, [sp, #276]	; 0x114
 800cfec:	e7ff      	b.n	800cfee <Number_FormatFixed$7278+0x16a>
 800cfee:	9845      	ldr	r0, [sp, #276]	; 0x114
 800cff0:	9946      	ldr	r1, [sp, #280]	; 0x118
                    do
                    {
                        sb.Append( this.digits[dig] != 0 ? this.digits[dig++] : '0' );
 800cff2:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 800cff4:	6953      	ldr	r3, [r2, #20]
 800cff6:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800cffa:	899b      	ldrh	r3, [r3, #12]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	9044      	str	r0, [sp, #272]	; 0x110
 800d000:	9143      	str	r1, [sp, #268]	; 0x10c
 800d002:	d00f      	beq.n	800d024 <Number_FormatFixed$7278+0x1a0>
 800d004:	e7ff      	b.n	800d006 <Number_FormatFixed$7278+0x182>
 800d006:	9869      	ldr	r0, [sp, #420]	; 0x1a4
 800d008:	6941      	ldr	r1, [r0, #20]
 800d00a:	aa6b      	add	r2, sp, #428	; 0x1ac
 800d00c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800d00e:	936b      	str	r3, [sp, #428]	; 0x1ac
 800d010:	f103 0c01 	add.w	ip, r3, #1
 800d014:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 800d018:	8989      	ldrh	r1, [r1, #12]
 800d01a:	9142      	str	r1, [sp, #264]	; 0x108
 800d01c:	f8cd c104 	str.w	ip, [sp, #260]	; 0x104
 800d020:	9240      	str	r2, [sp, #256]	; 0x100
 800d022:	e006      	b.n	800d032 <Number_FormatFixed$7278+0x1ae>
 800d024:	2030      	movs	r0, #48	; 0x30
 800d026:	a96b      	add	r1, sp, #428	; 0x1ac
 800d028:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800d02a:	9241      	str	r2, [sp, #260]	; 0x104
 800d02c:	9042      	str	r0, [sp, #264]	; 0x108
 800d02e:	9140      	str	r1, [sp, #256]	; 0x100
 800d030:	e7ff      	b.n	800d032 <Number_FormatFixed$7278+0x1ae>
 800d032:	9840      	ldr	r0, [sp, #256]	; 0x100
 800d034:	9941      	ldr	r1, [sp, #260]	; 0x104
 800d036:	9a42      	ldr	r2, [sp, #264]	; 0x108
 800d038:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800d03a:	903f      	str	r0, [sp, #252]	; 0xfc
 800d03c:	4618      	mov	r0, r3
 800d03e:	913e      	str	r1, [sp, #248]	; 0xf8
 800d040:	4611      	mov	r1, r2
 800d042:	f000 fc97 	bl	800d974 <StringBuilder_Append$8521>
                    } while(--digPos > 0);
 800d046:	9944      	ldr	r1, [sp, #272]	; 0x110
 800d048:	1e4a      	subs	r2, r1, #1
 800d04a:	926b      	str	r2, [sp, #428]	; 0x1ac
 800d04c:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 800d04e:	f8d3 c000 	ldr.w	ip, [r3]
 800d052:	2a00      	cmp	r2, #0
 800d054:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 800d056:	46e6      	mov	lr, ip
 800d058:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 800d05a:	903d      	str	r0, [sp, #244]	; 0xf4
 800d05c:	f8cd e114 	str.w	lr, [sp, #276]	; 0x114
 800d060:	9246      	str	r2, [sp, #280]	; 0x118
 800d062:	f8cd c0f0 	str.w	ip, [sp, #240]	; 0xf0
 800d066:	943b      	str	r4, [sp, #236]	; 0xec
 800d068:	dcc1      	bgt.n	800cfee <Number_FormatFixed$7278+0x16a>
 800d06a:	e7ff      	b.n	800d06c <Number_FormatFixed$7278+0x1e8>
 800d06c:	983b      	ldr	r0, [sp, #236]	; 0xec
 800d06e:	993c      	ldr	r1, [sp, #240]	; 0xf0
                }
 800d070:	903a      	str	r0, [sp, #232]	; 0xe8
 800d072:	9139      	str	r1, [sp, #228]	; 0xe4
 800d074:	e7ff      	b.n	800d076 <Number_FormatFixed$7278+0x1f2>
 800d076:	9839      	ldr	r0, [sp, #228]	; 0xe4
 800d078:	993a      	ldr	r1, [sp, #232]	; 0xe8
            }
 800d07a:	9161      	str	r1, [sp, #388]	; 0x184
 800d07c:	9060      	str	r0, [sp, #384]	; 0x180
 800d07e:	e72b      	b.n	800ced8 <Number_FormatFixed$7278+0x54>
 800d080:	2000      	movs	r0, #0
 800d082:	994a      	ldr	r1, [sp, #296]	; 0x128
 800d084:	9a63      	ldr	r2, [sp, #396]	; 0x18c

                    //
                    // Find out the size of the string buffer for the result.
                    //
                    if(groupSizeLen != 0) // You can pass in 0 length arrays
                    {
 800d086:	9038      	str	r0, [sp, #224]	; 0xe0
 800d088:	9137      	str	r1, [sp, #220]	; 0xdc
 800d08a:	9236      	str	r2, [sp, #216]	; 0xd8
 800d08c:	e0f1      	b.n	800d272 <Number_FormatFixed$7278+0x3ee>
 800d08e:	9847      	ldr	r0, [sp, #284]	; 0x11c
 800d090:	9948      	ldr	r1, [sp, #288]	; 0x120
                    }

                    groupSizeIndex = 0;

                    int digitCount = 0;
                    int digLength  = (int)wcslen( this.digits, dig );
 800d092:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 800d094:	6953      	ldr	r3, [r2, #20]
 800d096:	9035      	str	r0, [sp, #212]	; 0xd4
 800d098:	4618      	mov	r0, r3
 800d09a:	9134      	str	r1, [sp, #208]	; 0xd0
 800d09c:	f000 fda2 	bl	800dbe4 <Number_wcslen$7277>
 800d0a0:	4601      	mov	r1, r0
                    int digStart   = (digPos < digLength) ? digPos : digLength;
 800d0a2:	9a63      	ldr	r2, [sp, #396]	; 0x18c
 800d0a4:	4282      	cmp	r2, r0
 800d0a6:	9133      	str	r1, [sp, #204]	; 0xcc
 800d0a8:	da03      	bge.n	800d0b2 <Number_FormatFixed$7278+0x22e>
 800d0aa:	e7ff      	b.n	800d0ac <Number_FormatFixed$7278+0x228>
 800d0ac:	9863      	ldr	r0, [sp, #396]	; 0x18c
 800d0ae:	9032      	str	r0, [sp, #200]	; 0xc8
 800d0b0:	e002      	b.n	800d0b8 <Number_FormatFixed$7278+0x234>
 800d0b2:	9833      	ldr	r0, [sp, #204]	; 0xcc
 800d0b4:	9032      	str	r0, [sp, #200]	; 0xc8
 800d0b6:	e7ff      	b.n	800d0b8 <Number_FormatFixed$7278+0x234>
 800d0b8:	9832      	ldr	r0, [sp, #200]	; 0xc8

                    char[] buffer = new char[bufferSize];
 800d0ba:	49ab      	ldr	r1, [pc, #684]	; (800d368 <Number_FormatFixed$7278+0x4e4>)
 800d0bc:	4aad      	ldr	r2, [pc, #692]	; (800d374 <Number_FormatFixed$7278+0x4f0>)
 800d0be:	447a      	add	r2, pc
 800d0c0:	4411      	add	r1, r2
 800d0c2:	4bad      	ldr	r3, [pc, #692]	; (800d378 <Number_FormatFixed$7278+0x4f4>)
 800d0c4:	441a      	add	r2, r3
 800d0c6:	9031      	str	r0, [sp, #196]	; 0xc4
 800d0c8:	4608      	mov	r0, r1
 800d0ca:	4611      	mov	r1, r2
 800d0cc:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 800d0ce:	f7f5 f867 	bl	80021a0 <DefaultTypeSystemManager_AllocateArray$4962>
                    int    p      = bufferSize - 1;
 800d0d2:	9934      	ldr	r1, [sp, #208]	; 0xd0
 800d0d4:	1e4a      	subs	r2, r1, #1

                    for(int i = digPos - 1; i >= 0; i--)
 800d0d6:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 800d0d8:	f1a3 0c01 	sub.w	ip, r3, #1
 800d0dc:	f04f 0e00 	mov.w	lr, #0
 800d0e0:	4674      	mov	r4, lr
 800d0e2:	9d35      	ldr	r5, [sp, #212]	; 0xd4
 800d0e4:	9030      	str	r0, [sp, #192]	; 0xc0
 800d0e6:	f8cd e0bc 	str.w	lr, [sp, #188]	; 0xbc
 800d0ea:	952e      	str	r5, [sp, #184]	; 0xb8
 800d0ec:	922d      	str	r2, [sp, #180]	; 0xb4
 800d0ee:	942c      	str	r4, [sp, #176]	; 0xb0
 800d0f0:	f8cd c0ac 	str.w	ip, [sp, #172]	; 0xac
 800d0f4:	e7ff      	b.n	800d0f6 <Number_FormatFixed$7278+0x272>
 800d0f6:	982b      	ldr	r0, [sp, #172]	; 0xac
 800d0f8:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800d0fa:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800d0fc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d0fe:	f8dd c0b0 	ldr.w	ip, [sp, #176]	; 0xb0
 800d102:	2800      	cmp	r0, #0
 800d104:	902a      	str	r0, [sp, #168]	; 0xa8
 800d106:	9129      	str	r1, [sp, #164]	; 0xa4
 800d108:	9228      	str	r2, [sp, #160]	; 0xa0
 800d10a:	9327      	str	r3, [sp, #156]	; 0x9c
 800d10c:	f8cd c098 	str.w	ip, [sp, #152]	; 0x98
 800d110:	db09      	blt.n	800d126 <Number_FormatFixed$7278+0x2a2>
 800d112:	e7ff      	b.n	800d114 <Number_FormatFixed$7278+0x290>
 800d114:	9829      	ldr	r0, [sp, #164]	; 0xa4
 800d116:	906b      	str	r0, [sp, #428]	; 0x1ac
                    {
                        buffer[p--] = (i < digStart) ? this.digits[dig + i] : '0';
 800d118:	1e41      	subs	r1, r0, #1
 800d11a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800d11c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800d11e:	429a      	cmp	r2, r3
 800d120:	9125      	str	r1, [sp, #148]	; 0x94
 800d122:	db0a      	blt.n	800d13a <Number_FormatFixed$7278+0x2b6>
 800d124:	e011      	b.n	800d14a <Number_FormatFixed$7278+0x2c6>
                                digitCount = 0;
                            }
                        }
                    }

                    sb.Append( buffer );
 800d126:	9864      	ldr	r0, [sp, #400]	; 0x190
 800d128:	9930      	ldr	r1, [sp, #192]	; 0xc0
 800d12a:	f000 fd7b 	bl	800dc24 <StringBuilder_Append$8532>
 800d12e:	9931      	ldr	r1, [sp, #196]	; 0xc4
 800d130:	9a63      	ldr	r2, [sp, #396]	; 0x18c

                    dig += digStart;
                }
 800d132:	9024      	str	r0, [sp, #144]	; 0x90
 800d134:	913a      	str	r1, [sp, #232]	; 0xe8
 800d136:	9239      	str	r2, [sp, #228]	; 0xe4
 800d138:	e79d      	b.n	800d076 <Number_FormatFixed$7278+0x1f2>
                    char[] buffer = new char[bufferSize];
                    int    p      = bufferSize - 1;

                    for(int i = digPos - 1; i >= 0; i--)
                    {
                        buffer[p--] = (i < digStart) ? this.digits[dig + i] : '0';
 800d13a:	9869      	ldr	r0, [sp, #420]	; 0x1a4
 800d13c:	6941      	ldr	r1, [r0, #20]
 800d13e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800d140:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800d144:	8989      	ldrh	r1, [r1, #12]
 800d146:	9123      	str	r1, [sp, #140]	; 0x8c
 800d148:	e002      	b.n	800d150 <Number_FormatFixed$7278+0x2cc>
 800d14a:	2030      	movs	r0, #48	; 0x30
 800d14c:	9023      	str	r0, [sp, #140]	; 0x8c
 800d14e:	e7ff      	b.n	800d150 <Number_FormatFixed$7278+0x2cc>
 800d150:	9823      	ldr	r0, [sp, #140]	; 0x8c
 800d152:	996b      	ldr	r1, [sp, #428]	; 0x1ac
 800d154:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800d156:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800d15a:	8188      	strh	r0, [r1, #12]

                        if(groupSize > 0)
 800d15c:	9827      	ldr	r0, [sp, #156]	; 0x9c
 800d15e:	2801      	cmp	r0, #1
 800d160:	9926      	ldr	r1, [sp, #152]	; 0x98
 800d162:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800d164:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
 800d168:	9022      	str	r0, [sp, #136]	; 0x88
 800d16a:	9121      	str	r1, [sp, #132]	; 0x84
 800d16c:	9320      	str	r3, [sp, #128]	; 0x80
 800d16e:	f8cd c07c 	str.w	ip, [sp, #124]	; 0x7c
 800d172:	db13      	blt.n	800d19c <Number_FormatFixed$7278+0x318>
 800d174:	e7ff      	b.n	800d176 <Number_FormatFixed$7278+0x2f2>
 800d176:	9828      	ldr	r0, [sp, #160]	; 0xa0
 800d178:	906b      	str	r0, [sp, #428]	; 0x1ac
                        {
                            digitCount++;
 800d17a:	1c41      	adds	r1, r0, #1
 800d17c:	460a      	mov	r2, r1
                            if(digitCount == groupSize && i != 0)
 800d17e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800d180:	4299      	cmp	r1, r3
 800d182:	9926      	ldr	r1, [sp, #152]	; 0x98
 800d184:	4694      	mov	ip, r2
 800d186:	f8dd e094 	ldr.w	lr, [sp, #148]	; 0x94
 800d18a:	921e      	str	r2, [sp, #120]	; 0x78
 800d18c:	931d      	str	r3, [sp, #116]	; 0x74
 800d18e:	911c      	str	r1, [sp, #112]	; 0x70
 800d190:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
 800d194:	f8cd e068 	str.w	lr, [sp, #104]	; 0x68
 800d198:	d111      	bne.n	800d1be <Number_FormatFixed$7278+0x33a>
 800d19a:	e019      	b.n	800d1d0 <Number_FormatFixed$7278+0x34c>
 800d19c:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800d19e:	9920      	ldr	r1, [sp, #128]	; 0x80
 800d1a0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800d1a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d1a4:	f8dd c0a8 	ldr.w	ip, [sp, #168]	; 0xa8
 800d1a8:	f8cd c1ac 	str.w	ip, [sp, #428]	; 0x1ac
                    int digStart   = (digPos < digLength) ? digPos : digLength;

                    char[] buffer = new char[bufferSize];
                    int    p      = bufferSize - 1;

                    for(int i = digPos - 1; i >= 0; i--)
 800d1ac:	f1ac 0e01 	sub.w	lr, ip, #1
 800d1b0:	912f      	str	r1, [sp, #188]	; 0xbc
 800d1b2:	922e      	str	r2, [sp, #184]	; 0xb8
 800d1b4:	932c      	str	r3, [sp, #176]	; 0xb0
 800d1b6:	902d      	str	r0, [sp, #180]	; 0xb4
 800d1b8:	f8cd e0ac 	str.w	lr, [sp, #172]	; 0xac
 800d1bc:	e79b      	b.n	800d0f6 <Number_FormatFixed$7278+0x272>
 800d1be:	981a      	ldr	r0, [sp, #104]	; 0x68
 800d1c0:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800d1c2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d1c4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
                                    groupSizeIndex++;
                                    groupSize = groupDigits[groupSizeIndex];
                                }
                                digitCount = 0;
                            }
                        }
 800d1c6:	9120      	str	r1, [sp, #128]	; 0x80
 800d1c8:	9222      	str	r2, [sp, #136]	; 0x88
 800d1ca:	9321      	str	r3, [sp, #132]	; 0x84
 800d1cc:	901f      	str	r0, [sp, #124]	; 0x7c
 800d1ce:	e7e5      	b.n	800d19c <Number_FormatFixed$7278+0x318>
                        buffer[p--] = (i < digStart) ? this.digits[dig + i] : '0';

                        if(groupSize > 0)
                        {
                            digitCount++;
                            if(digitCount == groupSize && i != 0)
 800d1d0:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800d1d2:	2800      	cmp	r0, #0
 800d1d4:	9926      	ldr	r1, [sp, #152]	; 0x98
 800d1d6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800d1d8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d1da:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
 800d1de:	911c      	str	r1, [sp, #112]	; 0x70
 800d1e0:	921d      	str	r2, [sp, #116]	; 0x74
 800d1e2:	931b      	str	r3, [sp, #108]	; 0x6c
 800d1e4:	f8cd c068 	str.w	ip, [sp, #104]	; 0x68
 800d1e8:	d0e9      	beq.n	800d1be <Number_FormatFixed$7278+0x33a>
 800d1ea:	e7ff      	b.n	800d1ec <Number_FormatFixed$7278+0x368>
                            {
                                for(int j = groupSeparatorLen - 1; j >= 0; j--)
 800d1ec:	9849      	ldr	r0, [sp, #292]	; 0x124
 800d1ee:	1e41      	subs	r1, r0, #1
 800d1f0:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800d1f2:	9219      	str	r2, [sp, #100]	; 0x64
 800d1f4:	9118      	str	r1, [sp, #96]	; 0x60
 800d1f6:	e7ff      	b.n	800d1f8 <Number_FormatFixed$7278+0x374>
 800d1f8:	9818      	ldr	r0, [sp, #96]	; 0x60
 800d1fa:	9919      	ldr	r1, [sp, #100]	; 0x64
 800d1fc:	2800      	cmp	r0, #0
 800d1fe:	460a      	mov	r2, r1
 800d200:	9017      	str	r0, [sp, #92]	; 0x5c
 800d202:	9116      	str	r1, [sp, #88]	; 0x58
 800d204:	9215      	str	r2, [sp, #84]	; 0x54
 800d206:	db15      	blt.n	800d234 <Number_FormatFixed$7278+0x3b0>
 800d208:	e7ff      	b.n	800d20a <Number_FormatFixed$7278+0x386>
 800d20a:	9816      	ldr	r0, [sp, #88]	; 0x58
 800d20c:	906b      	str	r0, [sp, #428]	; 0x1ac
                                {
                                    buffer[p--] = sGroup[j];
 800d20e:	1e41      	subs	r1, r0, #1
 800d210:	9866      	ldr	r0, [sp, #408]	; 0x198
 800d212:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d214:	9114      	str	r1, [sp, #80]	; 0x50
 800d216:	4611      	mov	r1, r2
 800d218:	f7f4 fa24 	bl	8001664 <String_get_Chars$3893>
 800d21c:	996b      	ldr	r1, [sp, #428]	; 0x1ac
 800d21e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800d220:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800d224:	8188      	strh	r0, [r1, #12]
 800d226:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d228:	906b      	str	r0, [sp, #428]	; 0x1ac
                        if(groupSize > 0)
                        {
                            digitCount++;
                            if(digitCount == groupSize && i != 0)
                            {
                                for(int j = groupSeparatorLen - 1; j >= 0; j--)
 800d22a:	1e41      	subs	r1, r0, #1
 800d22c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d22e:	9319      	str	r3, [sp, #100]	; 0x64
 800d230:	9118      	str	r1, [sp, #96]	; 0x60
 800d232:	e7e1      	b.n	800d1f8 <Number_FormatFixed$7278+0x374>
 800d234:	9815      	ldr	r0, [sp, #84]	; 0x54
                                {
                                    buffer[p--] = sGroup[j];
                                }

                                if(groupSizeIndex < groupSizeLen - 1)
 800d236:	994b      	ldr	r1, [sp, #300]	; 0x12c
 800d238:	1e4a      	subs	r2, r1, #1
 800d23a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d23c:	4293      	cmp	r3, r2
 800d23e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800d240:	9013      	str	r0, [sp, #76]	; 0x4c
 800d242:	9312      	str	r3, [sp, #72]	; 0x48
 800d244:	9211      	str	r2, [sp, #68]	; 0x44
 800d246:	da0b      	bge.n	800d260 <Number_FormatFixed$7278+0x3dc>
 800d248:	e7ff      	b.n	800d24a <Number_FormatFixed$7278+0x3c6>
 800d24a:	9826      	ldr	r0, [sp, #152]	; 0x98
 800d24c:	906b      	str	r0, [sp, #428]	; 0x1ac
                                {
                                    groupSizeIndex++;
 800d24e:	1c41      	adds	r1, r0, #1
 800d250:	460a      	mov	r2, r1
                                    groupSize = groupDigits[groupSizeIndex];
 800d252:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800d254:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800d258:	68c9      	ldr	r1, [r1, #12]
                                }
 800d25a:	9212      	str	r2, [sp, #72]	; 0x48
 800d25c:	9111      	str	r1, [sp, #68]	; 0x44
 800d25e:	e7ff      	b.n	800d260 <Number_FormatFixed$7278+0x3dc>
 800d260:	9811      	ldr	r0, [sp, #68]	; 0x44
 800d262:	9912      	ldr	r1, [sp, #72]	; 0x48
 800d264:	2200      	movs	r2, #0
 800d266:	9b13      	ldr	r3, [sp, #76]	; 0x4c
                                digitCount = 0;
                            }
 800d268:	911c      	str	r1, [sp, #112]	; 0x70
 800d26a:	901d      	str	r0, [sp, #116]	; 0x74
 800d26c:	921b      	str	r2, [sp, #108]	; 0x6c
 800d26e:	931a      	str	r3, [sp, #104]	; 0x68
 800d270:	e7a5      	b.n	800d1be <Number_FormatFixed$7278+0x33a>
 800d272:	9836      	ldr	r0, [sp, #216]	; 0xd8
 800d274:	9937      	ldr	r1, [sp, #220]	; 0xdc
 800d276:	9a38      	ldr	r2, [sp, #224]	; 0xe0
                    //
                    // Find out the size of the string buffer for the result.
                    //
                    if(groupSizeLen != 0) // You can pass in 0 length arrays
                    {
                        while(digPos > groupSizeCount)
 800d278:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 800d27a:	428b      	cmp	r3, r1
 800d27c:	4684      	mov	ip, r0
 800d27e:	468e      	mov	lr, r1
 800d280:	9010      	str	r0, [sp, #64]	; 0x40
 800d282:	910f      	str	r1, [sp, #60]	; 0x3c
 800d284:	920e      	str	r2, [sp, #56]	; 0x38
 800d286:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 800d28a:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
 800d28e:	dd0c      	ble.n	800d2aa <Number_FormatFixed$7278+0x426>
 800d290:	e7ff      	b.n	800d292 <Number_FormatFixed$7278+0x40e>
                        {
                            groupSize = groupDigits[groupSizeIndex];
 800d292:	9865      	ldr	r0, [sp, #404]	; 0x194
 800d294:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d296:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 800d29a:	68d2      	ldr	r2, [r2, #12]
                            if(groupSize == 0)
 800d29c:	2a00      	cmp	r2, #0
 800d29e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d2a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d2a2:	920b      	str	r2, [sp, #44]	; 0x2c
 800d2a4:	930a      	str	r3, [sp, #40]	; 0x28
 800d2a6:	d017      	beq.n	800d2d8 <Number_FormatFixed$7278+0x454>
 800d2a8:	e01b      	b.n	800d2e2 <Number_FormatFixed$7278+0x45e>
 800d2aa:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d2ac:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d2ae:	9109      	str	r1, [sp, #36]	; 0x24
 800d2b0:	9008      	str	r0, [sp, #32]
 800d2b2:	e7ff      	b.n	800d2b4 <Number_FormatFixed$7278+0x430>
 800d2b4:	9808      	ldr	r0, [sp, #32]
 800d2b6:	9909      	ldr	r1, [sp, #36]	; 0x24
                                //COMPlusThrow(kArgumentOutOfRangeException);
                            }
                        }
                        // If you passed in an array with one
                        // entry as 0, groupSizeCount == 0
                        if(groupSizeCount == 0)
 800d2b8:	2800      	cmp	r0, #0
 800d2ba:	9107      	str	r1, [sp, #28]
 800d2bc:	d103      	bne.n	800d2c6 <Number_FormatFixed$7278+0x442>
 800d2be:	e7ff      	b.n	800d2c0 <Number_FormatFixed$7278+0x43c>
 800d2c0:	2000      	movs	r0, #0
                            groupSize = 0;
 800d2c2:	9006      	str	r0, [sp, #24]
 800d2c4:	e003      	b.n	800d2ce <Number_FormatFixed$7278+0x44a>
 800d2c6:	9865      	ldr	r0, [sp, #404]	; 0x194
 800d2c8:	68c1      	ldr	r1, [r0, #12]
                        else
                            groupSize = groupDigits[0];
 800d2ca:	9106      	str	r1, [sp, #24]
 800d2cc:	e7ff      	b.n	800d2ce <Number_FormatFixed$7278+0x44a>
 800d2ce:	9806      	ldr	r0, [sp, #24]
 800d2d0:	9907      	ldr	r1, [sp, #28]
                    }
 800d2d2:	9148      	str	r1, [sp, #288]	; 0x120
 800d2d4:	9047      	str	r0, [sp, #284]	; 0x11c
 800d2d6:	e6da      	b.n	800d08e <Number_FormatFixed$7278+0x20a>
 800d2d8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d2da:	990b      	ldr	r1, [sp, #44]	; 0x2c
                        while(digPos > groupSizeCount)
                        {
                            groupSize = groupDigits[groupSizeIndex];
                            if(groupSize == 0)
                            {
                                break;
 800d2dc:	9109      	str	r1, [sp, #36]	; 0x24
 800d2de:	9008      	str	r0, [sp, #32]
 800d2e0:	e7e8      	b.n	800d2b4 <Number_FormatFixed$7278+0x430>
                            }

                            bufferSize += groupSeparatorLen;
 800d2e2:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d2e4:	9949      	ldr	r1, [sp, #292]	; 0x124
 800d2e6:	1842      	adds	r2, r0, r1
                            if(groupSizeIndex < groupSizeLen - 1)
 800d2e8:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 800d2ea:	f1a3 0c01 	sub.w	ip, r3, #1
 800d2ee:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 800d2f2:	45e6      	cmp	lr, ip
 800d2f4:	9205      	str	r2, [sp, #20]
 800d2f6:	f8cd e010 	str.w	lr, [sp, #16]
 800d2fa:	da05      	bge.n	800d308 <Number_FormatFixed$7278+0x484>
 800d2fc:	e7ff      	b.n	800d2fe <Number_FormatFixed$7278+0x47a>
 800d2fe:	980e      	ldr	r0, [sp, #56]	; 0x38
 800d300:	906b      	str	r0, [sp, #428]	; 0x1ac
                            {
                                groupSizeIndex++;
 800d302:	1c41      	adds	r1, r0, #1
                            }
 800d304:	9104      	str	r1, [sp, #16]
 800d306:	e7ff      	b.n	800d308 <Number_FormatFixed$7278+0x484>
 800d308:	9804      	ldr	r0, [sp, #16]
                            groupSizeCount += groupDigits[groupSizeIndex];
 800d30a:	9965      	ldr	r1, [sp, #404]	; 0x194
 800d30c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 800d310:	68d2      	ldr	r2, [r2, #12]
 800d312:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d314:	441a      	add	r2, r3
 800d316:	4694      	mov	ip, r2
                            if(groupSizeCount < 0 || bufferSize < 0)
 800d318:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d31c:	9003      	str	r0, [sp, #12]
 800d31e:	f8cd c008 	str.w	ip, [sp, #8]
 800d322:	dc12      	bgt.n	800d34a <Number_FormatFixed$7278+0x4c6>
 800d324:	e7ff      	b.n	800d326 <Number_FormatFixed$7278+0x4a2>
                            {
                                throw new ArgumentOutOfRangeException();
 800d326:	e7ff      	b.n	800d328 <Number_FormatFixed$7278+0x4a4>
 800d328:	480f      	ldr	r0, [pc, #60]	; (800d368 <Number_FormatFixed$7278+0x4e4>)
 800d32a:	4910      	ldr	r1, [pc, #64]	; (800d36c <Number_FormatFixed$7278+0x4e8>)
 800d32c:	4479      	add	r1, pc
 800d32e:	4408      	add	r0, r1
 800d330:	4a0f      	ldr	r2, [pc, #60]	; (800d370 <Number_FormatFixed$7278+0x4ec>)
 800d332:	4411      	add	r1, r2
 800d334:	9001      	str	r0, [sp, #4]
 800d336:	f7f3 fa43 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800d33a:	9000      	str	r0, [sp, #0]
 800d33c:	f7f5 f887 	bl	800244e <ArgumentOutOfRangeException_.ctor$6074>
 800d340:	9801      	ldr	r0, [sp, #4]
 800d342:	9900      	ldr	r1, [sp, #0]
 800d344:	f7f3 fa92 	bl	800086c <TypeSystemManager_Throw$4954>
 800d348:	e7ee      	b.n	800d328 <Number_FormatFixed$7278+0x4a4>
                            if(groupSizeIndex < groupSizeLen - 1)
                            {
                                groupSizeIndex++;
                            }
                            groupSizeCount += groupDigits[groupSizeIndex];
                            if(groupSizeCount < 0 || bufferSize < 0)
 800d34a:	9805      	ldr	r0, [sp, #20]
 800d34c:	2800      	cmp	r0, #0
 800d34e:	dbea      	blt.n	800d326 <Number_FormatFixed$7278+0x4a2>
 800d350:	e7ff      	b.n	800d352 <Number_FormatFixed$7278+0x4ce>
 800d352:	9803      	ldr	r0, [sp, #12]
 800d354:	9902      	ldr	r1, [sp, #8]
 800d356:	9a05      	ldr	r2, [sp, #20]
                            {
                                throw new ArgumentOutOfRangeException();
                                // if we overflow
                                //COMPlusThrow(kArgumentOutOfRangeException);
                            }
                        }
 800d358:	9038      	str	r0, [sp, #224]	; 0xe0
 800d35a:	9137      	str	r1, [sp, #220]	; 0xdc
 800d35c:	9236      	str	r2, [sp, #216]	; 0xd8
 800d35e:	e788      	b.n	800d272 <Number_FormatFixed$7278+0x3ee>
 800d360:	e8025414 	.word	0xe8025414
 800d364:	17ff490e 	.word	0x17ff490e
 800d368:	ffffea38 	.word	0xffffea38
 800d36c:	17ff44a4 	.word	0x17ff44a4
 800d370:	e8010a7c 	.word	0xe8010a7c
 800d374:	17ff4712 	.word	0x17ff4712
 800d378:	e801031c 	.word	0xe801031c
 800d37c:	e8025416 	.word	0xe8025416
 800d380:	17ff4894 	.word	0x17ff4894

0800d384 <Number_FormatGeneral$7275>:
 800d384:	b510      	push	{r4, lr}
 800d386:	b0a6      	sub	sp, #152	; 0x98
 800d388:	f8dd c0a0 	ldr.w	ip, [sp, #160]	; 0xa0
 800d38c:	4696      	mov	lr, r2
 800d38e:	4604      	mov	r4, r0
 800d390:	68c0      	ldr	r0, [r0, #12]
                                    NumberFormatInfo          info    )
        {
            int  digPos     = this.scale;
            bool scientific = false;

            if(digPos > digits || digPos < -3)
 800d392:	4290      	cmp	r0, r2
 800d394:	f8cd c090 	str.w	ip, [sp, #144]	; 0x90
 800d398:	9023      	str	r0, [sp, #140]	; 0x8c
 800d39a:	f8cd e088 	str.w	lr, [sp, #136]	; 0x88
 800d39e:	9421      	str	r4, [sp, #132]	; 0x84
 800d3a0:	9320      	str	r3, [sp, #128]	; 0x80
 800d3a2:	911f      	str	r1, [sp, #124]	; 0x7c
 800d3a4:	dd05      	ble.n	800d3b2 <Number_FormatGeneral$7275+0x2e>
 800d3a6:	e7ff      	b.n	800d3a8 <Number_FormatGeneral$7275+0x24>
 800d3a8:	2001      	movs	r0, #1
 800d3aa:	4601      	mov	r1, r0
            {
                digPos = 1;
                scientific = true;
            }
 800d3ac:	901e      	str	r0, [sp, #120]	; 0x78
 800d3ae:	911d      	str	r1, [sp, #116]	; 0x74
 800d3b0:	e007      	b.n	800d3c2 <Number_FormatGeneral$7275+0x3e>
 800d3b2:	2000      	movs	r0, #0
                                    NumberFormatInfo          info    )
        {
            int  digPos     = this.scale;
            bool scientific = false;

            if(digPos > digits || digPos < -3)
 800d3b4:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800d3b6:	f111 0f03 	cmn.w	r1, #3
 800d3ba:	911d      	str	r1, [sp, #116]	; 0x74
 800d3bc:	901e      	str	r0, [sp, #120]	; 0x78
 800d3be:	dbf3      	blt.n	800d3a8 <Number_FormatGeneral$7275+0x24>
 800d3c0:	e7ff      	b.n	800d3c2 <Number_FormatGeneral$7275+0x3e>
 800d3c2:	981d      	ldr	r0, [sp, #116]	; 0x74
 800d3c4:	991e      	ldr	r1, [sp, #120]	; 0x78
                digPos = 1;
                scientific = true;
            }

            int dig = 0; // number->digits;
            if(digPos > 0)
 800d3c6:	2801      	cmp	r0, #1
 800d3c8:	901c      	str	r0, [sp, #112]	; 0x70
 800d3ca:	911b      	str	r1, [sp, #108]	; 0x6c
 800d3cc:	db05      	blt.n	800d3da <Number_FormatGeneral$7275+0x56>
 800d3ce:	e7ff      	b.n	800d3d0 <Number_FormatGeneral$7275+0x4c>
 800d3d0:	2000      	movs	r0, #0
 800d3d2:	991c      	ldr	r1, [sp, #112]	; 0x70
            {
 800d3d4:	901a      	str	r0, [sp, #104]	; 0x68
 800d3d6:	9119      	str	r1, [sp, #100]	; 0x64
 800d3d8:	e070      	b.n	800d4bc <Number_FormatGeneral$7275+0x138>
 800d3da:	485a      	ldr	r0, [pc, #360]	; (800d544 <Number_FormatGeneral$7275+0x1c0>)
 800d3dc:	495a      	ldr	r1, [pc, #360]	; (800d548 <Number_FormatGeneral$7275+0x1c4>)
 800d3de:	4479      	add	r1, pc
                    sb.Append( this.digits[dig] != 0 ? this.digits[dig++] : '0' );
                } while(--digPos > 0);
            }
            else
            {
                sb.Append( '0' );
 800d3e0:	5a41      	ldrh	r1, [r0, r1]
 800d3e2:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800d3e4:	f000 fac6 	bl	800d974 <StringBuilder_Append$8521>
 800d3e8:	2100      	movs	r1, #0
 800d3ea:	9a1c      	ldr	r2, [sp, #112]	; 0x70
            }
 800d3ec:	9018      	str	r0, [sp, #96]	; 0x60
 800d3ee:	9117      	str	r1, [sp, #92]	; 0x5c
 800d3f0:	9216      	str	r2, [sp, #88]	; 0x58
 800d3f2:	e7ff      	b.n	800d3f4 <Number_FormatGeneral$7275+0x70>
 800d3f4:	9816      	ldr	r0, [sp, #88]	; 0x58
 800d3f6:	9917      	ldr	r1, [sp, #92]	; 0x5c

            if(this.digits[dig] != 0)
 800d3f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d3fa:	6953      	ldr	r3, [r2, #20]
 800d3fc:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800d400:	899b      	ldrh	r3, [r3, #12]
 800d402:	2b00      	cmp	r3, #0
 800d404:	9015      	str	r0, [sp, #84]	; 0x54
 800d406:	9114      	str	r1, [sp, #80]	; 0x50
 800d408:	d009      	beq.n	800d41e <Number_FormatGeneral$7275+0x9a>
 800d40a:	e7ff      	b.n	800d40c <Number_FormatGeneral$7275+0x88>
            {
                sb.Append( info.numberDecimalSeparator );
 800d40c:	9824      	ldr	r0, [sp, #144]	; 0x90
 800d40e:	69c1      	ldr	r1, [r0, #28]
 800d410:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800d412:	f7ff fcf3 	bl	800cdfc <StringBuilder_Append$8507>
 800d416:	9915      	ldr	r1, [sp, #84]	; 0x54
 800d418:	9013      	str	r0, [sp, #76]	; 0x4c
 800d41a:	9112      	str	r1, [sp, #72]	; 0x48
 800d41c:	e01d      	b.n	800d45a <Number_FormatGeneral$7275+0xd6>
                {
                    sb.Append( this.digits[dig++] );
                } while(this.digits[dig] != 0);
            }

            if(scientific)
 800d41e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800d420:	f010 0fff 	tst.w	r0, #255	; 0xff
 800d424:	d017      	beq.n	800d456 <Number_FormatGeneral$7275+0xd2>
 800d426:	e7ff      	b.n	800d428 <Number_FormatGeneral$7275+0xa4>
 800d428:	9821      	ldr	r0, [sp, #132]	; 0x84
 800d42a:	68c1      	ldr	r1, [r0, #12]
            {
                FormatExponent( sb, this.scale - 1, expChar, info.positiveSign, info.negativeSign, 2 );
 800d42c:	3901      	subs	r1, #1
 800d42e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d430:	6953      	ldr	r3, [r2, #20]
 800d432:	f8d2 c018 	ldr.w	ip, [r2, #24]
 800d436:	f8df e114 	ldr.w	lr, [pc, #276]	; 800d54c <Number_FormatGeneral$7275+0x1c8>
 800d43a:	4c45      	ldr	r4, [pc, #276]	; (800d550 <Number_FormatGeneral$7275+0x1cc>)
 800d43c:	447c      	add	r4, pc
 800d43e:	f85e e004 	ldr.w	lr, [lr, r4]
 800d442:	466c      	mov	r4, sp
 800d444:	f8c4 e004 	str.w	lr, [r4, #4]
 800d448:	f8c4 c000 	str.w	ip, [r4]
 800d44c:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800d44e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d450:	f000 faf2 	bl	800da38 <Number_FormatExponent$7274>
            }
 800d454:	e7ff      	b.n	800d456 <Number_FormatGeneral$7275+0xd2>
 800d456:	b026      	add	sp, #152	; 0x98
 800d458:	bd10      	pop	{r4, pc}
 800d45a:	9812      	ldr	r0, [sp, #72]	; 0x48

            if(this.digits[dig] != 0)
            {
                sb.Append( info.numberDecimalSeparator );

                while(digPos < 0)
 800d45c:	2800      	cmp	r0, #0
 800d45e:	9011      	str	r0, [sp, #68]	; 0x44
 800d460:	db03      	blt.n	800d46a <Number_FormatGeneral$7275+0xe6>
 800d462:	e7ff      	b.n	800d464 <Number_FormatGeneral$7275+0xe0>
 800d464:	9814      	ldr	r0, [sp, #80]	; 0x50
                    digPos++;
                }

                do
                {
                    sb.Append( this.digits[dig++] );
 800d466:	9010      	str	r0, [sp, #64]	; 0x40
 800d468:	e00c      	b.n	800d484 <Number_FormatGeneral$7275+0x100>
 800d46a:	483a      	ldr	r0, [pc, #232]	; (800d554 <Number_FormatGeneral$7275+0x1d0>)
 800d46c:	493a      	ldr	r1, [pc, #232]	; (800d558 <Number_FormatGeneral$7275+0x1d4>)
 800d46e:	4479      	add	r1, pc
            {
                sb.Append( info.numberDecimalSeparator );

                while(digPos < 0)
                {
                    sb.Append( '0' );
 800d470:	5a41      	ldrh	r1, [r0, r1]
 800d472:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800d474:	f000 fa7e 	bl	800d974 <StringBuilder_Append$8521>
 800d478:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d47a:	9125      	str	r1, [sp, #148]	; 0x94
                    digPos++;
 800d47c:	1c4a      	adds	r2, r1, #1
                }
 800d47e:	900f      	str	r0, [sp, #60]	; 0x3c
 800d480:	9212      	str	r2, [sp, #72]	; 0x48
 800d482:	e7ea      	b.n	800d45a <Number_FormatGeneral$7275+0xd6>
 800d484:	9810      	ldr	r0, [sp, #64]	; 0x40

                do
                {
                    sb.Append( this.digits[dig++] );
 800d486:	9921      	ldr	r1, [sp, #132]	; 0x84
 800d488:	694a      	ldr	r2, [r1, #20]
 800d48a:	9025      	str	r0, [sp, #148]	; 0x94
 800d48c:	1c43      	adds	r3, r0, #1
 800d48e:	469c      	mov	ip, r3
 800d490:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 800d494:	8981      	ldrh	r1, [r0, #12]
 800d496:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800d498:	930e      	str	r3, [sp, #56]	; 0x38
 800d49a:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 800d49e:	f000 fa69 	bl	800d974 <StringBuilder_Append$8521>
                } while(this.digits[dig] != 0);
 800d4a2:	9921      	ldr	r1, [sp, #132]	; 0x84
 800d4a4:	694a      	ldr	r2, [r1, #20]
 800d4a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d4a8:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800d4ac:	8992      	ldrh	r2, [r2, #12]
 800d4ae:	2a00      	cmp	r2, #0
 800d4b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d4b2:	900c      	str	r0, [sp, #48]	; 0x30
 800d4b4:	9210      	str	r2, [sp, #64]	; 0x40
 800d4b6:	d1e5      	bne.n	800d484 <Number_FormatGeneral$7275+0x100>
 800d4b8:	e7ff      	b.n	800d4ba <Number_FormatGeneral$7275+0x136>
            }
 800d4ba:	e7b0      	b.n	800d41e <Number_FormatGeneral$7275+0x9a>
 800d4bc:	9819      	ldr	r0, [sp, #100]	; 0x64
 800d4be:	991a      	ldr	r1, [sp, #104]	; 0x68
            int dig = 0; // number->digits;
            if(digPos > 0)
            {
                do
                {
                    sb.Append( this.digits[dig] != 0 ? this.digits[dig++] : '0' );
 800d4c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d4c2:	6953      	ldr	r3, [r2, #20]
 800d4c4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800d4c8:	899b      	ldrh	r3, [r3, #12]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	900b      	str	r0, [sp, #44]	; 0x2c
 800d4ce:	910a      	str	r1, [sp, #40]	; 0x28
 800d4d0:	d00f      	beq.n	800d4f2 <Number_FormatGeneral$7275+0x16e>
 800d4d2:	e7ff      	b.n	800d4d4 <Number_FormatGeneral$7275+0x150>
 800d4d4:	9821      	ldr	r0, [sp, #132]	; 0x84
 800d4d6:	6941      	ldr	r1, [r0, #20]
 800d4d8:	aa25      	add	r2, sp, #148	; 0x94
 800d4da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4dc:	9325      	str	r3, [sp, #148]	; 0x94
 800d4de:	f103 0c01 	add.w	ip, r3, #1
 800d4e2:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 800d4e6:	8989      	ldrh	r1, [r1, #12]
 800d4e8:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800d4ec:	9108      	str	r1, [sp, #32]
 800d4ee:	9207      	str	r2, [sp, #28]
 800d4f0:	e006      	b.n	800d500 <Number_FormatGeneral$7275+0x17c>
 800d4f2:	2030      	movs	r0, #48	; 0x30
 800d4f4:	a925      	add	r1, sp, #148	; 0x94
 800d4f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d4f8:	9209      	str	r2, [sp, #36]	; 0x24
 800d4fa:	9008      	str	r0, [sp, #32]
 800d4fc:	9107      	str	r1, [sp, #28]
 800d4fe:	e7ff      	b.n	800d500 <Number_FormatGeneral$7275+0x17c>
 800d500:	9807      	ldr	r0, [sp, #28]
 800d502:	9908      	ldr	r1, [sp, #32]
 800d504:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d506:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d508:	9006      	str	r0, [sp, #24]
 800d50a:	4618      	mov	r0, r3
 800d50c:	9205      	str	r2, [sp, #20]
 800d50e:	f000 fa31 	bl	800d974 <StringBuilder_Append$8521>
                } while(--digPos > 0);
 800d512:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d514:	1e4a      	subs	r2, r1, #1
 800d516:	9225      	str	r2, [sp, #148]	; 0x94
 800d518:	9b06      	ldr	r3, [sp, #24]
 800d51a:	f8d3 c000 	ldr.w	ip, [r3]
 800d51e:	2a00      	cmp	r2, #0
 800d520:	9a05      	ldr	r2, [sp, #20]
 800d522:	46e6      	mov	lr, ip
 800d524:	9c05      	ldr	r4, [sp, #20]
 800d526:	9004      	str	r0, [sp, #16]
 800d528:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64
 800d52c:	921a      	str	r2, [sp, #104]	; 0x68
 800d52e:	f8cd c00c 	str.w	ip, [sp, #12]
 800d532:	9402      	str	r4, [sp, #8]
 800d534:	dcc2      	bgt.n	800d4bc <Number_FormatGeneral$7275+0x138>
 800d536:	e7ff      	b.n	800d538 <Number_FormatGeneral$7275+0x1b4>
 800d538:	9802      	ldr	r0, [sp, #8]
 800d53a:	9903      	ldr	r1, [sp, #12]
            }
 800d53c:	9017      	str	r0, [sp, #92]	; 0x5c
 800d53e:	9116      	str	r1, [sp, #88]	; 0x58
 800d540:	e758      	b.n	800d3f4 <Number_FormatGeneral$7275+0x70>
 800d542:	46c0      	nop			; (mov r8, r8)
 800d544:	e8025404 	.word	0xe8025404
 800d548:	17ff43f2 	.word	0x17ff43f2
 800d54c:	e8025408 	.word	0xe8025408
 800d550:	17ff4394 	.word	0x17ff4394
 800d554:	e802540c 	.word	0xe802540c
 800d558:	17ff4362 	.word	0x17ff4362

0800d55c <Number_FindSection$7260>:
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b094      	sub	sp, #80	; 0x50
 800d560:	460a      	mov	r2, r1
 800d562:	460b      	mov	r3, r1
            return sb.ToString();
        }

        private static int FindSection( String format, int section )
        {
            if(section == 0)
 800d564:	2900      	cmp	r1, #0
 800d566:	9313      	str	r3, [sp, #76]	; 0x4c
 800d568:	9212      	str	r2, [sp, #72]	; 0x48
 800d56a:	9011      	str	r0, [sp, #68]	; 0x44
 800d56c:	d103      	bne.n	800d576 <Number_FindSection$7260+0x1a>
 800d56e:	e7ff      	b.n	800d570 <Number_FindSection$7260+0x14>
 800d570:	2000      	movs	r0, #0
            {
                return 0;
 800d572:	9010      	str	r0, [sp, #64]	; 0x40
 800d574:	e034      	b.n	800d5e0 <Number_FindSection$7260+0x84>
 800d576:	2000      	movs	r0, #0
 800d578:	9913      	ldr	r1, [sp, #76]	; 0x4c
            }

            int src = 0;
 800d57a:	900f      	str	r0, [sp, #60]	; 0x3c
 800d57c:	910e      	str	r1, [sp, #56]	; 0x38
 800d57e:	e7ff      	b.n	800d580 <Number_FindSection$7260+0x24>
 800d580:	980e      	ldr	r0, [sp, #56]	; 0x38
 800d582:	990f      	ldr	r1, [sp, #60]	; 0x3c
            while(true)
            {
                char ch = Get( format, src );
 800d584:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d586:	900d      	str	r0, [sp, #52]	; 0x34
 800d588:	4610      	mov	r0, r2
 800d58a:	910c      	str	r1, [sp, #48]	; 0x30
 800d58c:	f7fd ffde 	bl	800b54c <Number_Get$7239>
 800d590:	b281      	uxth	r1, r0
 800d592:	4602      	mov	r2, r0
                src++;
 800d594:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d596:	f103 0c01 	add.w	ip, r3, #1
                switch(ch)
 800d59a:	2923      	cmp	r1, #35	; 0x23
 800d59c:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 800d5a0:	900a      	str	r0, [sp, #40]	; 0x28
 800d5a2:	9209      	str	r2, [sp, #36]	; 0x24
 800d5a4:	d305      	bcc.n	800d5b2 <Number_FindSection$7260+0x56>
 800d5a6:	e7ff      	b.n	800d5a8 <Number_FindSection$7260+0x4c>
 800d5a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d5aa:	b281      	uxth	r1, r0
 800d5ac:	2927      	cmp	r1, #39	; 0x27
 800d5ae:	d00f      	beq.n	800d5d0 <Number_FindSection$7260+0x74>
 800d5b0:	e041      	b.n	800d636 <Number_FindSection$7260+0xda>
 800d5b2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800d5b6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d5b8:	4201      	tst	r1, r0
 800d5ba:	d00e      	beq.n	800d5da <Number_FindSection$7260+0x7e>
 800d5bc:	e7ff      	b.n	800d5be <Number_FindSection$7260+0x62>
 800d5be:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d5c0:	b281      	uxth	r1, r0
 800d5c2:	2922      	cmp	r1, #34	; 0x22
 800d5c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d5c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d5c8:	9108      	str	r1, [sp, #32]
 800d5ca:	9207      	str	r2, [sp, #28]
 800d5cc:	d11e      	bne.n	800d60c <Number_FindSection$7260+0xb0>
 800d5ce:	e7ff      	b.n	800d5d0 <Number_FindSection$7260+0x74>
                {
                    case '\'':
                    case '"':
                        while(Get( format, src ) != '\0' && Get( format, src ) != ch)
 800d5d0:	9811      	ldr	r0, [sp, #68]	; 0x44
 800d5d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d5d4:	9006      	str	r0, [sp, #24]
 800d5d6:	9105      	str	r1, [sp, #20]
 800d5d8:	e005      	b.n	800d5e6 <Number_FindSection$7260+0x8a>
 800d5da:	2000      	movs	r0, #0
                        {
                            return src;
                        }
                        return 0;
                    case '\0':
                        return 0;
 800d5dc:	9010      	str	r0, [sp, #64]	; 0x40
 800d5de:	e7ff      	b.n	800d5e0 <Number_FindSection$7260+0x84>
 800d5e0:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d5e2:	b014      	add	sp, #80	; 0x50
 800d5e4:	bd80      	pop	{r7, pc}
 800d5e6:	9805      	ldr	r0, [sp, #20]
                src++;
                switch(ch)
                {
                    case '\'':
                    case '"':
                        while(Get( format, src ) != '\0' && Get( format, src ) != ch)
 800d5e8:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d5ea:	9004      	str	r0, [sp, #16]
 800d5ec:	4608      	mov	r0, r1
 800d5ee:	9904      	ldr	r1, [sp, #16]
 800d5f0:	f7fd ffac 	bl	800b54c <Number_Get$7239>
 800d5f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d5f8:	4208      	tst	r0, r1
 800d5fa:	9804      	ldr	r0, [sp, #16]
 800d5fc:	9003      	str	r0, [sp, #12]
 800d5fe:	d10a      	bne.n	800d616 <Number_FindSection$7260+0xba>
 800d600:	e7ff      	b.n	800d602 <Number_FindSection$7260+0xa6>
 800d602:	9803      	ldr	r0, [sp, #12]
 800d604:	990d      	ldr	r1, [sp, #52]	; 0x34
                        }
                        return 0;
                    case '\0':
                        return 0;
                }
            }
 800d606:	9008      	str	r0, [sp, #32]
 800d608:	9107      	str	r1, [sp, #28]
 800d60a:	e7ff      	b.n	800d60c <Number_FindSection$7260+0xb0>
 800d60c:	9807      	ldr	r0, [sp, #28]
 800d60e:	9908      	ldr	r1, [sp, #32]
 800d610:	910f      	str	r1, [sp, #60]	; 0x3c
 800d612:	900e      	str	r0, [sp, #56]	; 0x38
 800d614:	e7b4      	b.n	800d580 <Number_FindSection$7260+0x24>
                src++;
                switch(ch)
                {
                    case '\'':
                    case '"':
                        while(Get( format, src ) != '\0' && Get( format, src ) != ch)
 800d616:	9806      	ldr	r0, [sp, #24]
 800d618:	9904      	ldr	r1, [sp, #16]
 800d61a:	f7fd ff97 	bl	800b54c <Number_Get$7239>
 800d61e:	b280      	uxth	r0, r0
 800d620:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d622:	b28a      	uxth	r2, r1
 800d624:	4290      	cmp	r0, r2
 800d626:	9804      	ldr	r0, [sp, #16]
 800d628:	9003      	str	r0, [sp, #12]
 800d62a:	d0ea      	beq.n	800d602 <Number_FindSection$7260+0xa6>
 800d62c:	e7ff      	b.n	800d62e <Number_FindSection$7260+0xd2>
                        {
                            src++;
 800d62e:	9804      	ldr	r0, [sp, #16]
 800d630:	1c41      	adds	r1, r0, #1
                        }
 800d632:	9105      	str	r1, [sp, #20]
 800d634:	e7d7      	b.n	800d5e6 <Number_FindSection$7260+0x8a>
 800d636:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d638:	b281      	uxth	r1, r0
            int src = 0;
            while(true)
            {
                char ch = Get( format, src );
                src++;
                switch(ch)
 800d63a:	293b      	cmp	r1, #59	; 0x3b
 800d63c:	d109      	bne.n	800d652 <Number_FindSection$7260+0xf6>
 800d63e:	e7ff      	b.n	800d640 <Number_FindSection$7260+0xe4>
                        {
                            src++;
                        }
                        break;
                    case ';':
                        section--;
 800d640:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d642:	1e41      	subs	r1, r0, #1
 800d644:	460a      	mov	r2, r1
                        if(section != 0)
 800d646:	2900      	cmp	r1, #0
 800d648:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d64a:	9202      	str	r2, [sp, #8]
 800d64c:	9101      	str	r1, [sp, #4]
 800d64e:	d11c      	bne.n	800d68a <Number_FindSection$7260+0x12e>
 800d650:	e020      	b.n	800d694 <Number_FindSection$7260+0x138>
 800d652:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d654:	b281      	uxth	r1, r0
            int src = 0;
            while(true)
            {
                char ch = Get( format, src );
                src++;
                switch(ch)
 800d656:	295c      	cmp	r1, #92	; 0x5c
 800d658:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d65a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d65c:	9108      	str	r1, [sp, #32]
 800d65e:	9207      	str	r2, [sp, #28]
 800d660:	d1d4      	bne.n	800d60c <Number_FindSection$7260+0xb0>
 800d662:	e7ff      	b.n	800d664 <Number_FindSection$7260+0x108>
                        {
                            src++;
                        }
                        break;
                    case '\\':
                        if(Get( format, src ) != 0)
 800d664:	9811      	ldr	r0, [sp, #68]	; 0x44
 800d666:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d668:	f7fd ff70 	bl	800b54c <Number_Get$7239>
 800d66c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d670:	4208      	tst	r0, r1
 800d672:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d674:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d676:	9008      	str	r0, [sp, #32]
 800d678:	9107      	str	r1, [sp, #28]
 800d67a:	d0c7      	beq.n	800d60c <Number_FindSection$7260+0xb0>
 800d67c:	e7ff      	b.n	800d67e <Number_FindSection$7260+0x122>
                        {
                            src++;
 800d67e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d680:	1c41      	adds	r1, r0, #1
 800d682:	9a0d      	ldr	r2, [sp, #52]	; 0x34
                        }
 800d684:	9108      	str	r1, [sp, #32]
 800d686:	9207      	str	r2, [sp, #28]
 800d688:	e7c0      	b.n	800d60c <Number_FindSection$7260+0xb0>
 800d68a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d68c:	9902      	ldr	r1, [sp, #8]
                        break;
                    case ';':
                        section--;
                        if(section != 0)
                        {
                            break;
 800d68e:	9008      	str	r0, [sp, #32]
 800d690:	9107      	str	r1, [sp, #28]
 800d692:	e7bb      	b.n	800d60c <Number_FindSection$7260+0xb0>
 800d694:	9801      	ldr	r0, [sp, #4]
                        }
                        if(Get( format, src ) != 0 && Get( format, src ) != ';')
 800d696:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d698:	9000      	str	r0, [sp, #0]
 800d69a:	4608      	mov	r0, r1
 800d69c:	9900      	ldr	r1, [sp, #0]
 800d69e:	f7fd ff55 	bl	800b54c <Number_Get$7239>
 800d6a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d6a6:	4208      	tst	r0, r1
 800d6a8:	d008      	beq.n	800d6bc <Number_FindSection$7260+0x160>
 800d6aa:	e7ff      	b.n	800d6ac <Number_FindSection$7260+0x150>
 800d6ac:	9811      	ldr	r0, [sp, #68]	; 0x44
 800d6ae:	9900      	ldr	r1, [sp, #0]
 800d6b0:	f7fd ff4c 	bl	800b54c <Number_Get$7239>
 800d6b4:	b280      	uxth	r0, r0
 800d6b6:	283b      	cmp	r0, #59	; 0x3b
 800d6b8:	d103      	bne.n	800d6c2 <Number_FindSection$7260+0x166>
 800d6ba:	e7ff      	b.n	800d6bc <Number_FindSection$7260+0x160>
 800d6bc:	2000      	movs	r0, #0
                        {
                            return src;
                        }
                        return 0;
 800d6be:	9010      	str	r0, [sp, #64]	; 0x40
 800d6c0:	e78e      	b.n	800d5e0 <Number_FindSection$7260+0x84>
 800d6c2:	9800      	ldr	r0, [sp, #0]
                        {
                            break;
                        }
                        if(Get( format, src ) != 0 && Get( format, src ) != ';')
                        {
                            return src;
 800d6c4:	9010      	str	r0, [sp, #64]	; 0x40
 800d6c6:	e78b      	b.n	800d5e0 <Number_FindSection$7260+0x84>

0800d6c8 <ToStringFormatState_Reset$10850>:
 800d6c8:	b081      	sub	sp, #4
 800d6ca:	4601      	mov	r1, r0
 800d6cc:	f04f 32ff 	mov.w	r2, #4294967295
 800d6d0:	6242      	str	r2, [r0, #36]	; 0x24
 800d6d2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800d6d6:	6102      	str	r2, [r0, #16]
 800d6d8:	2200      	movs	r2, #0
 800d6da:	6142      	str	r2, [r0, #20]
 800d6dc:	f880 2020 	strb.w	r2, [r0, #32]
 800d6e0:	6282      	str	r2, [r0, #40]	; 0x28
 800d6e2:	62c2      	str	r2, [r0, #44]	; 0x2c
 800d6e4:	6302      	str	r2, [r0, #48]	; 0x30
 800d6e6:	68c2      	ldr	r2, [r0, #12]
 800d6e8:	6402      	str	r2, [r0, #64]	; 0x40
 800d6ea:	9100      	str	r1, [sp, #0]
 800d6ec:	b001      	add	sp, #4
 800d6ee:	4770      	bx	lr

0800d6f0 <ToStringFormatState_Get$10854>:
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b082      	sub	sp, #8
 800d6f4:	4601      	mov	r1, r0
                return ch;
            }

            internal char Get()
            {
                if(src < format.Length)
 800d6f6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d6f8:	6c00      	ldr	r0, [r0, #64]	; 0x40
 800d6fa:	68d2      	ldr	r2, [r2, #12]
 800d6fc:	4290      	cmp	r0, r2
 800d6fe:	9101      	str	r1, [sp, #4]
 800d700:	da0b      	bge.n	800d71a <ToStringFormatState_Get$10854+0x2a>
 800d702:	e7ff      	b.n	800d704 <ToStringFormatState_Get$10854+0x14>
                {
                    return format[src++];
 800d704:	9801      	ldr	r0, [sp, #4]
 800d706:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800d708:	9901      	ldr	r1, [sp, #4]
 800d70a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800d70c:	1c53      	adds	r3, r2, #1
 800d70e:	640b      	str	r3, [r1, #64]	; 0x40
 800d710:	4611      	mov	r1, r2
 800d712:	f7f3 ffa7 	bl	8001664 <String_get_Chars$3893>
 800d716:	9000      	str	r0, [sp, #0]
 800d718:	e002      	b.n	800d720 <ToStringFormatState_Get$10854+0x30>
 800d71a:	2000      	movs	r0, #0
                }
                
                return '\0';
 800d71c:	9000      	str	r0, [sp, #0]
 800d71e:	e7ff      	b.n	800d720 <ToStringFormatState_Get$10854+0x30>
 800d720:	9800      	ldr	r0, [sp, #0]
 800d722:	b002      	add	sp, #8
 800d724:	bd80      	pop	{r7, pc}
 800d726:	46c0      	nop			; (mov r8, r8)

0800d728 <ToStringFormatState_DecodeFormat$10852>:
 800d728:	b580      	push	{r7, lr}
 800d72a:	b08c      	sub	sp, #48	; 0x30
 800d72c:	460a      	mov	r2, r1
 800d72e:	4603      	mov	r3, r0
 800d730:	f04f 0c00 	mov.w	ip, #0
 800d734:	f8c0 c018 	str.w	ip, [r0, #24]
 800d738:	f04f 3eff 	mov.w	lr, #4294967295
 800d73c:	f8c0 e038 	str.w	lr, [r0, #56]	; 0x38
 800d740:	f8c0 c01c 	str.w	ip, [r0, #28]

            internal char DecodeFormat( char ch )
            {
                digitCount  = 0;
                thousandPos = -1;
                scaleAdjust = 0;
 800d744:	930b      	str	r3, [sp, #44]	; 0x2c
 800d746:	920a      	str	r2, [sp, #40]	; 0x28
 800d748:	9109      	str	r1, [sp, #36]	; 0x24
 800d74a:	e7ff      	b.n	800d74c <ToStringFormatState_DecodeFormat$10852+0x24>
 800d74c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d74e:	f64f 71ff 	movw	r1, #65535	; 0xffff

                while(ch != '\0' && ch != ';')
 800d752:	4208      	tst	r0, r1
 800d754:	9008      	str	r0, [sp, #32]
 800d756:	d005      	beq.n	800d764 <ToStringFormatState_DecodeFormat$10852+0x3c>
 800d758:	e7ff      	b.n	800d75a <ToStringFormatState_DecodeFormat$10852+0x32>
 800d75a:	9808      	ldr	r0, [sp, #32]
 800d75c:	b281      	uxth	r1, r0
 800d75e:	293b      	cmp	r1, #59	; 0x3b
 800d760:	d124      	bne.n	800d7ac <ToStringFormatState_DecodeFormat$10852+0x84>
 800d762:	e7ff      	b.n	800d764 <ToStringFormatState_DecodeFormat$10852+0x3c>
 800d764:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d766:	6a41      	ldr	r1, [r0, #36]	; 0x24
                    }

                    ch = Get();
                }

                if(decimalPos < 0)
 800d768:	f1b1 3fff 	cmp.w	r1, #4294967295
 800d76c:	dc04      	bgt.n	800d778 <ToStringFormatState_DecodeFormat$10852+0x50>
 800d76e:	e7ff      	b.n	800d770 <ToStringFormatState_DecodeFormat$10852+0x48>
 800d770:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d772:	6981      	ldr	r1, [r0, #24]
 800d774:	6241      	str	r1, [r0, #36]	; 0x24
                {
                    decimalPos = digitCount;
                }
 800d776:	e7ff      	b.n	800d778 <ToStringFormatState_DecodeFormat$10852+0x50>
 800d778:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d77a:	6b81      	ldr	r1, [r0, #56]	; 0x38

                if(thousandPos >= 0)
 800d77c:	2900      	cmp	r1, #0
 800d77e:	db06      	blt.n	800d78e <ToStringFormatState_DecodeFormat$10852+0x66>
 800d780:	e7ff      	b.n	800d782 <ToStringFormatState_DecodeFormat$10852+0x5a>
 800d782:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d784:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800d786:	6b82      	ldr	r2, [r0, #56]	; 0x38
                {
                    if(thousandPos == decimalPos)
 800d788:	428a      	cmp	r2, r1
 800d78a:	d002      	beq.n	800d792 <ToStringFormatState_DecodeFormat$10852+0x6a>
 800d78c:	e009      	b.n	800d7a2 <ToStringFormatState_DecodeFormat$10852+0x7a>
 800d78e:	b00c      	add	sp, #48	; 0x30
 800d790:	bd80      	pop	{r7, pc}
 800d792:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d794:	69c1      	ldr	r1, [r0, #28]
 800d796:	6b42      	ldr	r2, [r0, #52]	; 0x34
                    {
                        scaleAdjust -= thousandCount * 3;
 800d798:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d79c:	1a89      	subs	r1, r1, r2
 800d79e:	61c1      	str	r1, [r0, #28]
                    }
 800d7a0:	e003      	b.n	800d7aa <ToStringFormatState_DecodeFormat$10852+0x82>
 800d7a2:	2001      	movs	r0, #1
 800d7a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d7a6:	6308      	str	r0, [r1, #48]	; 0x30
                    else
                    {
                        thousandSeps = 1;
                    }
 800d7a8:	e7ff      	b.n	800d7aa <ToStringFormatState_DecodeFormat$10852+0x82>
                }
 800d7aa:	e7f0      	b.n	800d78e <ToStringFormatState_DecodeFormat$10852+0x66>
 800d7ac:	9808      	ldr	r0, [sp, #32]
 800d7ae:	b281      	uxth	r1, r0
                thousandPos = -1;
                scaleAdjust = 0;

                while(ch != '\0' && ch != ';')
                {
                    switch(ch)
 800d7b0:	2931      	cmp	r1, #49	; 0x31
 800d7b2:	9007      	str	r0, [sp, #28]
 800d7b4:	d306      	bcc.n	800d7c4 <ToStringFormatState_DecodeFormat$10852+0x9c>
 800d7b6:	e7ff      	b.n	800d7b8 <ToStringFormatState_DecodeFormat$10852+0x90>
 800d7b8:	9807      	ldr	r0, [sp, #28]
 800d7ba:	b281      	uxth	r1, r0
 800d7bc:	2945      	cmp	r1, #69	; 0x45
 800d7be:	f000 8085 	beq.w	800d8cc <ToStringFormatState_DecodeFormat$10852+0x1a4>
 800d7c2:	e098      	b.n	800d8f6 <ToStringFormatState_DecodeFormat$10852+0x1ce>
 800d7c4:	9807      	ldr	r0, [sp, #28]
 800d7c6:	b281      	uxth	r1, r0
 800d7c8:	3922      	subs	r1, #34	; 0x22
 800d7ca:	460a      	mov	r2, r1
 800d7cc:	2905      	cmp	r1, #5
 800d7ce:	9206      	str	r2, [sp, #24]
 800d7d0:	d81e      	bhi.n	800d810 <ToStringFormatState_DecodeFormat$10852+0xe8>
 800d7d2:	9906      	ldr	r1, [sp, #24]
 800d7d4:	e8df f001 	tbb	[pc, r1]
 800d7d8:	14290f03 	.word	0x14290f03
 800d7dc:	0329      	.short	0x0329

                        case '\'':
                        case '"':
                            while(true)
                            {
                                char ch2 = PeekAt( 0 );
 800d7de:	e7ff      	b.n	800d7e0 <ToStringFormatState_DecodeFormat$10852+0xb8>
 800d7e0:	2100      	movs	r1, #0
 800d7e2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d7e4:	f000 f900 	bl	800d9e8 <ToStringFormatState_PeekAt$10856>
 800d7e8:	4601      	mov	r1, r0
 800d7ea:	f64f 72ff 	movw	r2, #65535	; 0xffff

                                if(ch2 == 0  ||
 800d7ee:	4210      	tst	r0, r2
 800d7f0:	9105      	str	r1, [sp, #20]
 800d7f2:	d15e      	bne.n	800d8b2 <ToStringFormatState_DecodeFormat$10852+0x18a>
 800d7f4:	e064      	b.n	800d8c0 <ToStringFormatState_DecodeFormat$10852+0x198>
 800d7f6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d7f8:	6981      	ldr	r1, [r0, #24]
                while(ch != '\0' && ch != ';')
                {
                    switch(ch)
                    {
                        case '#':
                            digitCount++;
 800d7fa:	3101      	adds	r1, #1
 800d7fc:	6181      	str	r1, [r0, #24]
                            break;
 800d7fe:	e014      	b.n	800d82a <ToStringFormatState_DecodeFormat$10852+0x102>
 800d800:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d802:	6a81      	ldr	r1, [r0, #40]	; 0x28
                                thousandCount = 1;
                            }
                            break;

                        case '%':
                            percent++;
 800d804:	3101      	adds	r1, #1
 800d806:	6281      	str	r1, [r0, #40]	; 0x28
 800d808:	69c1      	ldr	r1, [r0, #28]
                            scaleAdjust += 2;
 800d80a:	3102      	adds	r1, #2
 800d80c:	61c1      	str	r1, [r0, #28]
                            break;
 800d80e:	e00c      	b.n	800d82a <ToStringFormatState_DecodeFormat$10852+0x102>
                thousandPos = -1;
                scaleAdjust = 0;

                while(ch != '\0' && ch != ';')
                {
                    switch(ch)
 800d810:	9807      	ldr	r0, [sp, #28]
 800d812:	b281      	uxth	r1, r0
 800d814:	392c      	subs	r1, #44	; 0x2c
 800d816:	460a      	mov	r2, r1
 800d818:	2904      	cmp	r1, #4
 800d81a:	9204      	str	r2, [sp, #16]
 800d81c:	d805      	bhi.n	800d82a <ToStringFormatState_DecodeFormat$10852+0x102>
 800d81e:	9904      	ldr	r1, [sp, #16]
 800d820:	e8df f001 	tbb	[pc, r1]
 800d824:	030d0308 	.word	0x030d0308
 800d828:	0012      	.short	0x0012
                                }
                            }
                            break;
                    }

                    ch = Get();
 800d82a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d82c:	f7ff ff60 	bl	800d6f0 <ToStringFormatState_Get$10854>
                }
 800d830:	9009      	str	r0, [sp, #36]	; 0x24
 800d832:	e78b      	b.n	800d74c <ToStringFormatState_DecodeFormat$10852+0x24>
 800d834:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d836:	6981      	ldr	r1, [r0, #24]
                                decimalPos = digitCount;
                            }
                            break;

                        case ',':
                            if(digitCount > 0 && decimalPos < 0)
 800d838:	2901      	cmp	r1, #1
 800d83a:	dbf6      	blt.n	800d82a <ToStringFormatState_DecodeFormat$10852+0x102>
 800d83c:	e00b      	b.n	800d856 <ToStringFormatState_DecodeFormat$10852+0x12e>
 800d83e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d840:	6a41      	ldr	r1, [r0, #36]	; 0x24
                            digitCount++;
                            lastDigit = digitCount;
                            break;

                        case '.':
                            if(decimalPos < 0)
 800d842:	2900      	cmp	r1, #0
 800d844:	db27      	blt.n	800d896 <ToStringFormatState_DecodeFormat$10852+0x16e>
 800d846:	e7f0      	b.n	800d82a <ToStringFormatState_DecodeFormat$10852+0x102>
 800d848:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d84a:	6901      	ldr	r1, [r0, #16]
 800d84c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
                        case '#':
                            digitCount++;
                            break;

                        case '0':
                            if(firstDigit == 0x7FFFFFFF)
 800d850:	4291      	cmp	r1, r2
 800d852:	d024      	beq.n	800d89e <ToStringFormatState_DecodeFormat$10852+0x176>
 800d854:	e027      	b.n	800d8a6 <ToStringFormatState_DecodeFormat$10852+0x17e>
 800d856:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d858:	6a41      	ldr	r1, [r0, #36]	; 0x24
                                decimalPos = digitCount;
                            }
                            break;

                        case ',':
                            if(digitCount > 0 && decimalPos < 0)
 800d85a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800d85e:	dce4      	bgt.n	800d82a <ToStringFormatState_DecodeFormat$10852+0x102>
 800d860:	e7ff      	b.n	800d862 <ToStringFormatState_DecodeFormat$10852+0x13a>
 800d862:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d864:	6b81      	ldr	r1, [r0, #56]	; 0x38
                            {
                                if(thousandPos >= 0)
 800d866:	2900      	cmp	r1, #0
 800d868:	db06      	blt.n	800d878 <ToStringFormatState_DecodeFormat$10852+0x150>
 800d86a:	e7ff      	b.n	800d86c <ToStringFormatState_DecodeFormat$10852+0x144>
 800d86c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d86e:	6981      	ldr	r1, [r0, #24]
 800d870:	6b82      	ldr	r2, [r0, #56]	; 0x38
                                {
                                    if(thousandPos == digitCount)
 800d872:	428a      	cmp	r2, r1
 800d874:	d006      	beq.n	800d884 <ToStringFormatState_DecodeFormat$10852+0x15c>
 800d876:	e00a      	b.n	800d88e <ToStringFormatState_DecodeFormat$10852+0x166>
 800d878:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d87a:	6981      	ldr	r1, [r0, #24]
 800d87c:	6381      	str	r1, [r0, #56]	; 0x38
 800d87e:	2101      	movs	r1, #1
 800d880:	6341      	str	r1, [r0, #52]	; 0x34
                                    thousandSeps = 1;
                                }

                                thousandPos   = digitCount;
                                thousandCount = 1;
                            }
 800d882:	e7d2      	b.n	800d82a <ToStringFormatState_DecodeFormat$10852+0x102>
 800d884:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d886:	6b41      	ldr	r1, [r0, #52]	; 0x34
                            {
                                if(thousandPos >= 0)
                                {
                                    if(thousandPos == digitCount)
                                    {
                                        thousandCount++;
 800d888:	3101      	adds	r1, #1
 800d88a:	6341      	str	r1, [r0, #52]	; 0x34
                                        break;
 800d88c:	e7cd      	b.n	800d82a <ToStringFormatState_DecodeFormat$10852+0x102>
 800d88e:	2001      	movs	r0, #1
 800d890:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d892:	6308      	str	r0, [r1, #48]	; 0x30
                                    }

                                    thousandSeps = 1;
                                }
 800d894:	e7f0      	b.n	800d878 <ToStringFormatState_DecodeFormat$10852+0x150>
 800d896:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d898:	6981      	ldr	r1, [r0, #24]
 800d89a:	6241      	str	r1, [r0, #36]	; 0x24

                        case '.':
                            if(decimalPos < 0)
                            {
                                decimalPos = digitCount;
                            }
 800d89c:	e7c5      	b.n	800d82a <ToStringFormatState_DecodeFormat$10852+0x102>
 800d89e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d8a0:	6981      	ldr	r1, [r0, #24]
 800d8a2:	6101      	str	r1, [r0, #16]

                        case '0':
                            if(firstDigit == 0x7FFFFFFF)
                            {
                                firstDigit = digitCount;
                            }
 800d8a4:	e7ff      	b.n	800d8a6 <ToStringFormatState_DecodeFormat$10852+0x17e>
 800d8a6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d8a8:	6981      	ldr	r1, [r0, #24]
                            digitCount++;
 800d8aa:	3101      	adds	r1, #1
 800d8ac:	6181      	str	r1, [r0, #24]
 800d8ae:	6141      	str	r1, [r0, #20]
                            lastDigit = digitCount;
                            break;
 800d8b0:	e7bb      	b.n	800d82a <ToStringFormatState_DecodeFormat$10852+0x102>
                        case '"':
                            while(true)
                            {
                                char ch2 = PeekAt( 0 );

                                if(ch2 == 0  ||
 800d8b2:	9805      	ldr	r0, [sp, #20]
 800d8b4:	b281      	uxth	r1, r0
 800d8b6:	9a08      	ldr	r2, [sp, #32]
 800d8b8:	b293      	uxth	r3, r2
 800d8ba:	4299      	cmp	r1, r3
 800d8bc:	d101      	bne.n	800d8c2 <ToStringFormatState_DecodeFormat$10852+0x19a>
 800d8be:	e7ff      	b.n	800d8c0 <ToStringFormatState_DecodeFormat$10852+0x198>
                                    break;
                                }

                                src++;
                            }
                            break;
 800d8c0:	e7b3      	b.n	800d82a <ToStringFormatState_DecodeFormat$10852+0x102>
 800d8c2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d8c4:	6c01      	ldr	r1, [r0, #64]	; 0x40
                                   ch2 == ch  )
                                {
                                    break;
                                }

                                src++;
 800d8c6:	3101      	adds	r1, #1
 800d8c8:	6401      	str	r1, [r0, #64]	; 0x40
                            }
 800d8ca:	e789      	b.n	800d7e0 <ToStringFormatState_DecodeFormat$10852+0xb8>
 800d8cc:	2100      	movs	r1, #0
                            }
                            break;

                        case 'E':
                            {
                                char ch2 = PeekAt( 0 );
 800d8ce:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d8d0:	f000 f88a 	bl	800d9e8 <ToStringFormatState_PeekAt$10856>
 800d8d4:	b281      	uxth	r1, r0
 800d8d6:	4a25      	ldr	r2, [pc, #148]	; (800d96c <ToStringFormatState_DecodeFormat$10852+0x244>)
 800d8d8:	4b25      	ldr	r3, [pc, #148]	; (800d970 <ToStringFormatState_DecodeFormat$10852+0x248>)
 800d8da:	447b      	add	r3, pc
 800d8dc:	58d2      	ldr	r2, [r2, r3]
                                char ch3 = PeekAt( 1 );
 800d8de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d8e0:	9003      	str	r0, [sp, #12]
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	9102      	str	r1, [sp, #8]
 800d8e6:	4611      	mov	r1, r2
 800d8e8:	f000 f87e 	bl	800d9e8 <ToStringFormatState_PeekAt$10856>

                                if(                                 ch2 == '0'  ||
 800d8ec:	9902      	ldr	r1, [sp, #8]
 800d8ee:	2930      	cmp	r1, #48	; 0x30
 800d8f0:	9001      	str	r0, [sp, #4]
 800d8f2:	d023      	beq.n	800d93c <ToStringFormatState_DecodeFormat$10852+0x214>
 800d8f4:	e02a      	b.n	800d94c <ToStringFormatState_DecodeFormat$10852+0x224>
 800d8f6:	9807      	ldr	r0, [sp, #28]
 800d8f8:	b281      	uxth	r1, r0
                thousandPos = -1;
                scaleAdjust = 0;

                while(ch != '\0' && ch != ';')
                {
                    switch(ch)
 800d8fa:	295c      	cmp	r1, #92	; 0x5c
 800d8fc:	d109      	bne.n	800d912 <ToStringFormatState_DecodeFormat$10852+0x1ea>
 800d8fe:	e7ff      	b.n	800d900 <ToStringFormatState_DecodeFormat$10852+0x1d8>
 800d900:	2100      	movs	r1, #0
                                src++;
                            }
                            break;

                        case '\\':
                            if(PeekAt( 0 ) != 0)
 800d902:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d904:	f000 f870 	bl	800d9e8 <ToStringFormatState_PeekAt$10856>
 800d908:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d90c:	4208      	tst	r0, r1
 800d90e:	d110      	bne.n	800d932 <ToStringFormatState_DecodeFormat$10852+0x20a>
 800d910:	e78b      	b.n	800d82a <ToStringFormatState_DecodeFormat$10852+0x102>
 800d912:	9807      	ldr	r0, [sp, #28]
 800d914:	b281      	uxth	r1, r0
                thousandPos = -1;
                scaleAdjust = 0;

                while(ch != '\0' && ch != ';')
                {
                    switch(ch)
 800d916:	f242 0230 	movw	r2, #8240	; 0x2030
 800d91a:	4291      	cmp	r1, r2
 800d91c:	f47f af85 	bne.w	800d82a <ToStringFormatState_DecodeFormat$10852+0x102>
 800d920:	e7ff      	b.n	800d922 <ToStringFormatState_DecodeFormat$10852+0x1fa>
 800d922:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d924:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
                            percent++;
                            scaleAdjust += 2;
                            break;

                        case '\u2030':
                            permille++;
 800d926:	3101      	adds	r1, #1
 800d928:	62c1      	str	r1, [r0, #44]	; 0x2c
 800d92a:	69c1      	ldr	r1, [r0, #28]
                            scaleAdjust += 3;
 800d92c:	3103      	adds	r1, #3
 800d92e:	61c1      	str	r1, [r0, #28]
                            break;
 800d930:	e77b      	b.n	800d82a <ToStringFormatState_DecodeFormat$10852+0x102>
 800d932:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d934:	6c01      	ldr	r1, [r0, #64]	; 0x40
                            break;

                        case '\\':
                            if(PeekAt( 0 ) != 0)
                            {
                                src++;
 800d936:	3101      	adds	r1, #1
 800d938:	6401      	str	r1, [r0, #64]	; 0x40
                            }
 800d93a:	e776      	b.n	800d82a <ToStringFormatState_DecodeFormat$10852+0x102>
                                char ch3 = PeekAt( 1 );

                                if(                                 ch2 == '0'  ||
                                   ((ch2 == '+' || ch2 == '-'  ) && ch3 == '0')  )
                                {
                                    MoveToEnd();
 800d93c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d93e:	f001 fa2f 	bl	800eda0 <ToStringFormatState_MoveToEnd$10860>
 800d942:	2001      	movs	r0, #1
 800d944:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d946:	f881 0020 	strb.w	r0, [r1, #32]
                                    scientific = true;
                                }
 800d94a:	e00e      	b.n	800d96a <ToStringFormatState_DecodeFormat$10852+0x242>
 800d94c:	9803      	ldr	r0, [sp, #12]
 800d94e:	b281      	uxth	r1, r0
                        case 'E':
                            {
                                char ch2 = PeekAt( 0 );
                                char ch3 = PeekAt( 1 );

                                if(                                 ch2 == '0'  ||
 800d950:	292b      	cmp	r1, #43	; 0x2b
 800d952:	d105      	bne.n	800d960 <ToStringFormatState_DecodeFormat$10852+0x238>
 800d954:	e7ff      	b.n	800d956 <ToStringFormatState_DecodeFormat$10852+0x22e>
 800d956:	9801      	ldr	r0, [sp, #4]
 800d958:	b281      	uxth	r1, r0
 800d95a:	2930      	cmp	r1, #48	; 0x30
 800d95c:	d0ee      	beq.n	800d93c <ToStringFormatState_DecodeFormat$10852+0x214>
 800d95e:	e004      	b.n	800d96a <ToStringFormatState_DecodeFormat$10852+0x242>
 800d960:	9803      	ldr	r0, [sp, #12]
 800d962:	b281      	uxth	r1, r0
 800d964:	292d      	cmp	r1, #45	; 0x2d
 800d966:	d0f6      	beq.n	800d956 <ToStringFormatState_DecodeFormat$10852+0x22e>
 800d968:	e7ff      	b.n	800d96a <ToStringFormatState_DecodeFormat$10852+0x242>
                                {
                                    MoveToEnd();
                                    scientific = true;
                                }
                            }
                            break;
 800d96a:	e75e      	b.n	800d82a <ToStringFormatState_DecodeFormat$10852+0x102>
 800d96c:	e8025444 	.word	0xe8025444
 800d970:	17ff3ef6 	.word	0x17ff3ef6

0800d974 <StringBuilder_Append$8521>:
 800d974:	b580      	push	{r7, lr}
 800d976:	b088      	sub	sp, #32
 800d978:	4602      	mov	r2, r0
 800d97a:	2300      	movs	r3, #0
 800d97c:	9307      	str	r3, [sp, #28]
 800d97e:	ab07      	add	r3, sp, #28

        // Appends a character at the end of this string builder. The capacity is adjusted as needed.
        public StringBuilder Append( char value )
        {
            Thread th;
            String currentString = GetThreadSafeString( out th );
 800d980:	9106      	str	r1, [sp, #24]
 800d982:	4619      	mov	r1, r3
 800d984:	9205      	str	r2, [sp, #20]
 800d986:	f000 fd19 	bl	800e3bc <StringBuilder_GetThreadSafeString$8493>
 800d98a:	4601      	mov	r1, r0
 800d98c:	68c2      	ldr	r2, [r0, #12]

            int currentLength = currentString.Length;
            if(!NeedsAllocation( currentString, currentLength + 1 ))
 800d98e:	1c53      	adds	r3, r2, #1
 800d990:	9104      	str	r1, [sp, #16]
 800d992:	4619      	mov	r1, r3
 800d994:	9203      	str	r2, [sp, #12]
 800d996:	f000 fdbd 	bl	800e514 <StringBuilder_NeedsAllocation$8509>
 800d99a:	f010 0fff 	tst.w	r0, #255	; 0xff
 800d99e:	d10d      	bne.n	800d9bc <StringBuilder_Append$8521+0x48>
 800d9a0:	e7ff      	b.n	800d9a2 <StringBuilder_Append$8521+0x2e>
            {
                currentString.AppendInPlace( value, currentLength );
 800d9a2:	9804      	ldr	r0, [sp, #16]
 800d9a4:	9906      	ldr	r1, [sp, #24]
 800d9a6:	9a03      	ldr	r2, [sp, #12]
 800d9a8:	f7f5 fc20 	bl	80031ec <String_AppendInPlace$2612>
                ReplaceString( th, currentString );
 800d9ac:	9907      	ldr	r1, [sp, #28]
 800d9ae:	9805      	ldr	r0, [sp, #20]
 800d9b0:	9a04      	ldr	r2, [sp, #16]
 800d9b2:	f000 fe39 	bl	800e628 <StringBuilder_ReplaceString$8511>
                return this;
 800d9b6:	9805      	ldr	r0, [sp, #20]
 800d9b8:	9002      	str	r0, [sp, #8]
 800d9ba:	e012      	b.n	800d9e2 <StringBuilder_Append$8521+0x6e>
            }

            String newString = GetNewString( currentString, currentLength + 1 );
 800d9bc:	9803      	ldr	r0, [sp, #12]
 800d9be:	1c42      	adds	r2, r0, #1
 800d9c0:	9805      	ldr	r0, [sp, #20]
 800d9c2:	9904      	ldr	r1, [sp, #16]
 800d9c4:	f000 fdb6 	bl	800e534 <StringBuilder_GetNewString$8510>
            newString.AppendInPlace( value, currentLength );
 800d9c8:	9001      	str	r0, [sp, #4]
 800d9ca:	9906      	ldr	r1, [sp, #24]
 800d9cc:	9a03      	ldr	r2, [sp, #12]
 800d9ce:	f7f5 fc0d 	bl	80031ec <String_AppendInPlace$2612>
            ReplaceString( th, newString );
 800d9d2:	9907      	ldr	r1, [sp, #28]
 800d9d4:	9805      	ldr	r0, [sp, #20]
 800d9d6:	9a01      	ldr	r2, [sp, #4]
 800d9d8:	f000 fe26 	bl	800e628 <StringBuilder_ReplaceString$8511>
            return this;
 800d9dc:	9805      	ldr	r0, [sp, #20]
 800d9de:	9002      	str	r0, [sp, #8]
 800d9e0:	e7ff      	b.n	800d9e2 <StringBuilder_Append$8521+0x6e>
        }
 800d9e2:	9802      	ldr	r0, [sp, #8]
 800d9e4:	b008      	add	sp, #32
 800d9e6:	bd80      	pop	{r7, pc}

0800d9e8 <ToStringFormatState_PeekAt$10856>:
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b084      	sub	sp, #16
 800d9ec:	460a      	mov	r2, r1
 800d9ee:	4603      	mov	r3, r0
                return '\0';
            }

            internal char PeekAt( int offset )
            {
                if(src + offset < format.Length)
 800d9f0:	f8d0 c03c 	ldr.w	ip, [r0, #60]	; 0x3c
 800d9f4:	6c00      	ldr	r0, [r0, #64]	; 0x40
 800d9f6:	4408      	add	r0, r1
 800d9f8:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800d9fc:	4288      	cmp	r0, r1
 800d9fe:	9303      	str	r3, [sp, #12]
 800da00:	9202      	str	r2, [sp, #8]
 800da02:	da0a      	bge.n	800da1a <ToStringFormatState_PeekAt$10856+0x32>
 800da04:	e7ff      	b.n	800da06 <ToStringFormatState_PeekAt$10856+0x1e>
                {
                    return format[src+offset];
 800da06:	9803      	ldr	r0, [sp, #12]
 800da08:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800da0a:	9903      	ldr	r1, [sp, #12]
 800da0c:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800da0e:	9b02      	ldr	r3, [sp, #8]
 800da10:	18d1      	adds	r1, r2, r3
 800da12:	f7f3 fe27 	bl	8001664 <String_get_Chars$3893>
 800da16:	9001      	str	r0, [sp, #4]
 800da18:	e002      	b.n	800da20 <ToStringFormatState_PeekAt$10856+0x38>
 800da1a:	2000      	movs	r0, #0
                }
                
                return '\0';
 800da1c:	9001      	str	r0, [sp, #4]
 800da1e:	e7ff      	b.n	800da20 <ToStringFormatState_PeekAt$10856+0x38>
 800da20:	9801      	ldr	r0, [sp, #4]
 800da22:	b004      	add	sp, #16
 800da24:	bd80      	pop	{r7, pc}

0800da26 <ToStringFormatState_Advance$10858>:
 800da26:	b081      	sub	sp, #4
 800da28:	4601      	mov	r1, r0
 800da2a:	6c02      	ldr	r2, [r0, #64]	; 0x40
            }

            internal void Advance()
            {
                src++;
 800da2c:	3201      	adds	r2, #1
 800da2e:	6402      	str	r2, [r0, #64]	; 0x40
 800da30:	9100      	str	r1, [sp, #0]
 800da32:	b001      	add	sp, #4
 800da34:	4770      	bx	lr
 800da36:	46c0      	nop			; (mov r8, r8)

0800da38 <Number_FormatExponent$7274>:
 800da38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da3c:	b097      	sub	sp, #92	; 0x5c
 800da3e:	f8dd c084 	ldr.w	ip, [sp, #132]	; 0x84
 800da42:	f8dd e080 	ldr.w	lr, [sp, #128]	; 0x80
 800da46:	4614      	mov	r4, r2
 800da48:	460d      	mov	r5, r1
 800da4a:	4606      	mov	r6, r0
 800da4c:	460f      	mov	r7, r1
 800da4e:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 800db2c <Number_FormatExponent$7274+0xf4>
 800da52:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 800db30 <Number_FormatExponent$7274+0xf8>
 800da56:	44f9      	add	r9, pc
 800da58:	f858 8009 	ldr.w	r8, [r8, r9]
                                     char                      expChar    ,
                                     String                    posSignStr ,
                                     String                    negSignStr ,
                                     int                       minDigits  )
        {
            char[] digits = new char[11];
 800da5c:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800db34 <Number_FormatExponent$7274+0xfc>
 800da60:	44ca      	add	sl, r9
 800da62:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 800db38 <Number_FormatExponent$7274+0x100>
 800da66:	44d9      	add	r9, fp
 800da68:	9016      	str	r0, [sp, #88]	; 0x58
 800da6a:	4650      	mov	r0, sl
 800da6c:	9115      	str	r1, [sp, #84]	; 0x54
 800da6e:	4649      	mov	r1, r9
 800da70:	9214      	str	r2, [sp, #80]	; 0x50
 800da72:	4642      	mov	r2, r8
 800da74:	f8cd e04c 	str.w	lr, [sp, #76]	; 0x4c
 800da78:	9512      	str	r5, [sp, #72]	; 0x48
 800da7a:	9711      	str	r7, [sp, #68]	; 0x44
 800da7c:	9610      	str	r6, [sp, #64]	; 0x40
 800da7e:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800da82:	930e      	str	r3, [sp, #56]	; 0x38
 800da84:	940d      	str	r4, [sp, #52]	; 0x34
 800da86:	f7f4 fb8b 	bl	80021a0 <DefaultTypeSystemManager_AllocateArray$4962>

            sb.Append( expChar );
 800da8a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800da8c:	900c      	str	r0, [sp, #48]	; 0x30
 800da8e:	4608      	mov	r0, r1
 800da90:	9914      	ldr	r1, [sp, #80]	; 0x50
 800da92:	f7ff ff6f 	bl	800d974 <StringBuilder_Append$8521>

            if(value < 0)
 800da96:	9915      	ldr	r1, [sp, #84]	; 0x54
 800da98:	f1b1 3fff 	cmp.w	r1, #4294967295
 800da9c:	900b      	str	r0, [sp, #44]	; 0x2c
 800da9e:	dc09      	bgt.n	800dab4 <Number_FormatExponent$7274+0x7c>
 800daa0:	e7ff      	b.n	800daa2 <Number_FormatExponent$7274+0x6a>
            {
                sb.Append( negSignStr );
 800daa2:	9810      	ldr	r0, [sp, #64]	; 0x40
 800daa4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800daa6:	f7ff f9a9 	bl	800cdfc <StringBuilder_Append$8507>
                value = -value;
 800daaa:	9911      	ldr	r1, [sp, #68]	; 0x44
 800daac:	424a      	negs	r2, r1
            }
 800daae:	900a      	str	r0, [sp, #40]	; 0x28
 800dab0:	9209      	str	r2, [sp, #36]	; 0x24
 800dab2:	e00c      	b.n	800dace <Number_FormatExponent$7274+0x96>
            else
            {
                if(posSignStr != null)
 800dab4:	980e      	ldr	r0, [sp, #56]	; 0x38
 800dab6:	2800      	cmp	r0, #0
 800dab8:	d006      	beq.n	800dac8 <Number_FormatExponent$7274+0x90>
 800daba:	e7ff      	b.n	800dabc <Number_FormatExponent$7274+0x84>
                {
                    sb.Append( posSignStr );
 800dabc:	9810      	ldr	r0, [sp, #64]	; 0x40
 800dabe:	990e      	ldr	r1, [sp, #56]	; 0x38
 800dac0:	f7ff f99c 	bl	800cdfc <StringBuilder_Append$8507>
                }
 800dac4:	9008      	str	r0, [sp, #32]
 800dac6:	e7ff      	b.n	800dac8 <Number_FormatExponent$7274+0x90>
 800dac8:	9811      	ldr	r0, [sp, #68]	; 0x44
            }
 800daca:	9009      	str	r0, [sp, #36]	; 0x24
 800dacc:	e7ff      	b.n	800dace <Number_FormatExponent$7274+0x96>
 800dace:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dad0:	491a      	ldr	r1, [pc, #104]	; (800db3c <Number_FormatExponent$7274+0x104>)
 800dad2:	4a1b      	ldr	r2, [pc, #108]	; (800db40 <Number_FormatExponent$7274+0x108>)
 800dad4:	447a      	add	r2, pc
 800dad6:	5889      	ldr	r1, [r1, r2]

            // REVIEW: (int) was implicit in C++ code
            int p = Int32ToDecChars( digits, 10, checked( (uint)value ), minDigits );
 800dad8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dada:	9007      	str	r0, [sp, #28]
 800dadc:	4610      	mov	r0, r2
 800dade:	9a07      	ldr	r2, [sp, #28]
 800dae0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dae2:	f7fd fc87 	bl	800b3f4 <Number_Int32ToDecChars$7271>
 800dae6:	4601      	mov	r1, r0

            int i = 10 - p;
 800dae8:	f1c0 000a 	rsb	r0, r0, #10
 800daec:	9006      	str	r0, [sp, #24]
 800daee:	9105      	str	r1, [sp, #20]
 800daf0:	e7ff      	b.n	800daf2 <Number_FormatExponent$7274+0xba>
 800daf2:	9805      	ldr	r0, [sp, #20]
 800daf4:	9906      	ldr	r1, [sp, #24]
            while(--i >= 0)
 800daf6:	3901      	subs	r1, #1
 800daf8:	460a      	mov	r2, r1
 800dafa:	2900      	cmp	r1, #0
 800dafc:	9004      	str	r0, [sp, #16]
 800dafe:	9203      	str	r2, [sp, #12]
 800db00:	db11      	blt.n	800db26 <Number_FormatExponent$7274+0xee>
 800db02:	e7ff      	b.n	800db04 <Number_FormatExponent$7274+0xcc>
            {
                sb.Append( digits[p++] );
 800db04:	9804      	ldr	r0, [sp, #16]
 800db06:	1c41      	adds	r1, r0, #1
 800db08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800db0a:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 800db0e:	899b      	ldrh	r3, [r3, #12]
 800db10:	9810      	ldr	r0, [sp, #64]	; 0x40
 800db12:	9102      	str	r1, [sp, #8]
 800db14:	4619      	mov	r1, r3
 800db16:	f7ff ff2d 	bl	800d974 <StringBuilder_Append$8521>
 800db1a:	9903      	ldr	r1, [sp, #12]
 800db1c:	9a02      	ldr	r2, [sp, #8]
            }
 800db1e:	9001      	str	r0, [sp, #4]
 800db20:	9106      	str	r1, [sp, #24]
 800db22:	9205      	str	r2, [sp, #20]
 800db24:	e7e5      	b.n	800daf2 <Number_FormatExponent$7274+0xba>
 800db26:	b017      	add	sp, #92	; 0x5c
 800db28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db2c:	e80253fc 	.word	0xe80253fc
 800db30:	17ff3d7a 	.word	0x17ff3d7a
 800db34:	ffffea38 	.word	0xffffea38
 800db38:	e801031c 	.word	0xe801031c
 800db3c:	e8025400 	.word	0xe8025400
 800db40:	17ff3cfc 	.word	0x17ff3cfc

0800db44 <Number_Int32ToHexChars$7263>:
 800db44:	b5b0      	push	{r4, r5, r7, lr}
 800db46:	b090      	sub	sp, #64	; 0x40
 800db48:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 800db4c:	46e6      	mov	lr, ip
 800db4e:	4614      	mov	r4, r2
 800db50:	460d      	mov	r5, r1
            return new string( buffer, start, 100 - start );
        }

        private static int Int32ToHexChars( char[] buffer, int offset, uint value,
                                           char hexBase, int digits )
        {
 800db52:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
 800db56:	920e      	str	r2, [sp, #56]	; 0x38
 800db58:	900d      	str	r0, [sp, #52]	; 0x34
 800db5a:	950c      	str	r5, [sp, #48]	; 0x30
 800db5c:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 800db60:	930a      	str	r3, [sp, #40]	; 0x28
 800db62:	9409      	str	r4, [sp, #36]	; 0x24
 800db64:	9108      	str	r1, [sp, #32]
 800db66:	e7ff      	b.n	800db68 <Number_Int32ToHexChars$7263+0x24>
 800db68:	9808      	ldr	r0, [sp, #32]
 800db6a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800db6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
            while(digits > 0 || value != 0)
 800db6e:	2a01      	cmp	r2, #1
 800db70:	9007      	str	r0, [sp, #28]
 800db72:	9106      	str	r1, [sp, #24]
 800db74:	9205      	str	r2, [sp, #20]
 800db76:	db11      	blt.n	800db9c <Number_Int32ToHexChars$7263+0x58>
 800db78:	e7ff      	b.n	800db7a <Number_Int32ToHexChars$7263+0x36>
            {
                digits--;
 800db7a:	9805      	ldr	r0, [sp, #20]
 800db7c:	1e41      	subs	r1, r0, #1
                uint digit = value & 0xf;
 800db7e:	9a06      	ldr	r2, [sp, #24]
 800db80:	f002 030f 	and.w	r3, r2, #15
                offset--;
 800db84:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800db88:	f1ac 0e01 	sub.w	lr, ip, #1
                buffer[offset] = (char)(digit + (digit < 10 ? '0' : hexBase));
 800db8c:	461c      	mov	r4, r3
 800db8e:	2b0a      	cmp	r3, #10
 800db90:	9104      	str	r1, [sp, #16]
 800db92:	9403      	str	r4, [sp, #12]
 800db94:	f8cd e008 	str.w	lr, [sp, #8]
 800db98:	d309      	bcc.n	800dbae <Number_Int32ToHexChars$7263+0x6a>
 800db9a:	e00b      	b.n	800dbb4 <Number_Int32ToHexChars$7263+0x70>
        }

        private static int Int32ToHexChars( char[] buffer, int offset, uint value,
                                           char hexBase, int digits )
        {
            while(digits > 0 || value != 0)
 800db9c:	9806      	ldr	r0, [sp, #24]
 800db9e:	2800      	cmp	r0, #0
 800dba0:	9907      	ldr	r1, [sp, #28]
 800dba2:	9101      	str	r1, [sp, #4]
 800dba4:	d1e9      	bne.n	800db7a <Number_Int32ToHexChars$7263+0x36>
 800dba6:	e7ff      	b.n	800dba8 <Number_Int32ToHexChars$7263+0x64>
 800dba8:	9801      	ldr	r0, [sp, #4]
 800dbaa:	b010      	add	sp, #64	; 0x40
 800dbac:	bdb0      	pop	{r4, r5, r7, pc}
 800dbae:	2030      	movs	r0, #48	; 0x30
 800dbb0:	9000      	str	r0, [sp, #0]
 800dbb2:	e003      	b.n	800dbbc <Number_Int32ToHexChars$7263+0x78>
            {
                digits--;
                uint digit = value & 0xf;
                offset--;
                buffer[offset] = (char)(digit + (digit < 10 ? '0' : hexBase));
 800dbb4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dbb6:	b281      	uxth	r1, r0
 800dbb8:	9100      	str	r1, [sp, #0]
 800dbba:	e7ff      	b.n	800dbbc <Number_Int32ToHexChars$7263+0x78>
 800dbbc:	9800      	ldr	r0, [sp, #0]
 800dbbe:	9903      	ldr	r1, [sp, #12]
 800dbc0:	4408      	add	r0, r1
 800dbc2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dbc4:	9b02      	ldr	r3, [sp, #8]
 800dbc6:	eb02 0c43 	add.w	ip, r2, r3, lsl #1
 800dbca:	f8ac 000c 	strh.w	r0, [ip, #12]
                value >>= 4;
 800dbce:	9806      	ldr	r0, [sp, #24]
 800dbd0:	ea4f 1c10 	mov.w	ip, r0, lsr #4
 800dbd4:	f8dd e010 	ldr.w	lr, [sp, #16]
            }
 800dbd8:	9308      	str	r3, [sp, #32]
 800dbda:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 800dbde:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
 800dbe2:	e7c1      	b.n	800db68 <Number_Int32ToHexChars$7263+0x24>

0800dbe4 <Number_wcslen$7277>:
 800dbe4:	b085      	sub	sp, #20
 800dbe6:	4601      	mov	r1, r0
        private static int wcslen( char[] c, int i )
        {
            int j;
            for(j = i; j < c.Length; ++j)
            {
                if(c[j] == '\0') break;
 800dbe8:	300c      	adds	r0, #12
 800dbea:	2200      	movs	r2, #0

        // REVIEW: call the real wcslen?
        private static int wcslen( char[] c, int i )
        {
            int j;
            for(j = i; j < c.Length; ++j)
 800dbec:	9104      	str	r1, [sp, #16]
 800dbee:	9003      	str	r0, [sp, #12]
 800dbf0:	9202      	str	r2, [sp, #8]
 800dbf2:	e7ff      	b.n	800dbf4 <Number_wcslen$7277+0x10>
 800dbf4:	9802      	ldr	r0, [sp, #8]
    // a Number) or a positive or negative infinity, then regardless of the format
    // string, the resulting string is given by the NaNSymbol,
    // PositiveInfinitySymbol, or NegativeInfinitySymbol property of
    // the NumberFormatInfo used to format the number.
    //
    // Parsing
 800dbf6:	9904      	ldr	r1, [sp, #16]
 800dbf8:	688a      	ldr	r2, [r1, #8]

        // REVIEW: call the real wcslen?
        private static int wcslen( char[] c, int i )
        {
            int j;
            for(j = i; j < c.Length; ++j)
 800dbfa:	4290      	cmp	r0, r2
 800dbfc:	4602      	mov	r2, r0
 800dbfe:	9001      	str	r0, [sp, #4]
 800dc00:	9200      	str	r2, [sp, #0]
 800dc02:	da08      	bge.n	800dc16 <Number_wcslen$7277+0x32>
 800dc04:	e7ff      	b.n	800dc06 <Number_wcslen$7277+0x22>
            {
                if(c[j] == '\0') break;
 800dc06:	9803      	ldr	r0, [sp, #12]
 800dc08:	9901      	ldr	r1, [sp, #4]
 800dc0a:	f830 2011 	ldrh.w	r2, [r0, r1, lsl #1]
 800dc0e:	2a00      	cmp	r2, #0
 800dc10:	9100      	str	r1, [sp, #0]
 800dc12:	d103      	bne.n	800dc1c <Number_wcslen$7277+0x38>
 800dc14:	e7ff      	b.n	800dc16 <Number_wcslen$7277+0x32>
 800dc16:	9800      	ldr	r0, [sp, #0]
 800dc18:	b005      	add	sp, #20
 800dc1a:	4770      	bx	lr

        // REVIEW: call the real wcslen?
        private static int wcslen( char[] c, int i )
        {
            int j;
            for(j = i; j < c.Length; ++j)
 800dc1c:	9801      	ldr	r0, [sp, #4]
 800dc1e:	1c41      	adds	r1, r0, #1
 800dc20:	9102      	str	r1, [sp, #8]
 800dc22:	e7e7      	b.n	800dbf4 <Number_wcslen$7277+0x10>

0800dc24 <StringBuilder_Append$8532>:
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b08a      	sub	sp, #40	; 0x28
 800dc28:	460a      	mov	r2, r1
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	9309      	str	r3, [sp, #36]	; 0x24
        }

        // Appends all of the characters in value to the current instance.
        public StringBuilder Append( char[] value )
        {
            if(null == value)
 800dc2e:	2900      	cmp	r1, #0
 800dc30:	9008      	str	r0, [sp, #32]
 800dc32:	9207      	str	r2, [sp, #28]
 800dc34:	d103      	bne.n	800dc3e <StringBuilder_Append$8532+0x1a>
 800dc36:	e7ff      	b.n	800dc38 <StringBuilder_Append$8532+0x14>
            {
                return this;
 800dc38:	9808      	ldr	r0, [sp, #32]
 800dc3a:	9006      	str	r0, [sp, #24]
 800dc3c:	e03f      	b.n	800dcbe <StringBuilder_Append$8532+0x9a>
////            }
////
////        }
////
////        // Check values and set defaults
////        if(persistedString == null)
 800dc3e:	9807      	ldr	r0, [sp, #28]
 800dc40:	6881      	ldr	r1, [r0, #8]
 800dc42:	aa09      	add	r2, sp, #36	; 0x24
            }

            int valueLength = value.Length;

            Thread th;
            String currentString = GetThreadSafeString( out th );
 800dc44:	9808      	ldr	r0, [sp, #32]
 800dc46:	9105      	str	r1, [sp, #20]
 800dc48:	4611      	mov	r1, r2
 800dc4a:	f000 fbb7 	bl	800e3bc <StringBuilder_GetThreadSafeString$8493>
 800dc4e:	4601      	mov	r1, r0
 800dc50:	68c2      	ldr	r2, [r0, #12]
////            }
////
////        }
////
////        // Check values and set defaults
////        if(persistedString == null)
 800dc52:	9b07      	ldr	r3, [sp, #28]
 800dc54:	f8d3 c008 	ldr.w	ip, [r3, #8]

            Thread th;
            String currentString = GetThreadSafeString( out th );

            int currentLength = currentString.Length;
            int requiredLength = currentLength + value.Length;
 800dc58:	4494      	add	ip, r2
 800dc5a:	46e6      	mov	lr, ip
            if(NeedsAllocation( currentString, requiredLength ))
 800dc5c:	9104      	str	r1, [sp, #16]
 800dc5e:	4661      	mov	r1, ip
 800dc60:	f8cd e00c 	str.w	lr, [sp, #12]
 800dc64:	9202      	str	r2, [sp, #8]
 800dc66:	f000 fc55 	bl	800e514 <StringBuilder_NeedsAllocation$8509>
 800dc6a:	f010 0fff 	tst.w	r0, #255	; 0xff
 800dc6e:	d014      	beq.n	800dc9a <StringBuilder_Append$8532+0x76>
 800dc70:	e7ff      	b.n	800dc72 <StringBuilder_Append$8532+0x4e>
            {
                String newString = GetNewString( currentString, requiredLength );
 800dc72:	9808      	ldr	r0, [sp, #32]
 800dc74:	9904      	ldr	r1, [sp, #16]
 800dc76:	9a03      	ldr	r2, [sp, #12]
 800dc78:	f000 fc5c 	bl	800e534 <StringBuilder_GetNewString$8510>
                newString.AppendInPlace( value, 0, valueLength, currentLength );
 800dc7c:	4669      	mov	r1, sp
 800dc7e:	9a02      	ldr	r2, [sp, #8]
 800dc80:	600a      	str	r2, [r1, #0]
 800dc82:	2200      	movs	r2, #0
 800dc84:	9001      	str	r0, [sp, #4]
 800dc86:	9907      	ldr	r1, [sp, #28]
 800dc88:	9b05      	ldr	r3, [sp, #20]
 800dc8a:	f7f5 fb11 	bl	80032b0 <String_AppendInPlace$2617>
                ReplaceString( th, newString );
 800dc8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dc90:	9808      	ldr	r0, [sp, #32]
 800dc92:	9a01      	ldr	r2, [sp, #4]
 800dc94:	f000 fcc8 	bl	800e628 <StringBuilder_ReplaceString$8511>
            }
 800dc98:	e00e      	b.n	800dcb8 <StringBuilder_Append$8532+0x94>
            else
            {
                currentString.AppendInPlace( value, 0, valueLength, currentLength );
 800dc9a:	4668      	mov	r0, sp
 800dc9c:	9902      	ldr	r1, [sp, #8]
 800dc9e:	6001      	str	r1, [r0, #0]
 800dca0:	2200      	movs	r2, #0
 800dca2:	9804      	ldr	r0, [sp, #16]
 800dca4:	9907      	ldr	r1, [sp, #28]
 800dca6:	9b05      	ldr	r3, [sp, #20]
 800dca8:	f7f5 fb02 	bl	80032b0 <String_AppendInPlace$2617>
                ReplaceString( th, currentString );
 800dcac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dcae:	9808      	ldr	r0, [sp, #32]
 800dcb0:	9a04      	ldr	r2, [sp, #16]
 800dcb2:	f000 fcb9 	bl	800e628 <StringBuilder_ReplaceString$8511>
            }
 800dcb6:	e7ff      	b.n	800dcb8 <StringBuilder_Append$8532+0x94>
            return this;
 800dcb8:	9808      	ldr	r0, [sp, #32]
 800dcba:	9006      	str	r0, [sp, #24]
 800dcbc:	e7ff      	b.n	800dcbe <StringBuilder_Append$8532+0x9a>
        }
 800dcbe:	9806      	ldr	r0, [sp, #24]
 800dcc0:	b00a      	add	sp, #40	; 0x28
 800dcc2:	bd80      	pop	{r7, pc}

0800dcc4 <ObjectDisposedException_.ctor$7287>:
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b082      	sub	sp, #8
 800dcc8:	460a      	mov	r2, r1
 800dcca:	4603      	mov	r3, r0
    // Formatting
    //
    // The Format methods provided by the numeric classes are all of the
    // form
    //
    //  public static String Format(XXX value, String format);
 800dccc:	9201      	str	r2, [sp, #4]
 800dcce:	9300      	str	r3, [sp, #0]
 800dcd0:	f000 f802 	bl	800dcd8 <ObjectDisposedException_.ctor$7288>
 800dcd4:	b002      	add	sp, #8
 800dcd6:	bd80      	pop	{r7, pc}

0800dcd8 <ObjectDisposedException_.ctor$7288>:
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b084      	sub	sp, #16
 800dcdc:	460a      	mov	r2, r1
 800dcde:	4603      	mov	r3, r0

        public ObjectDisposedException( String objectName ) : this( objectName, Environment.GetResourceString( "ObjectDisposed_Generic" ) )
        {
        }

        public ObjectDisposedException( String objectName, String message ) : base( message )
 800dce0:	9003      	str	r0, [sp, #12]
 800dce2:	9102      	str	r1, [sp, #8]
 800dce4:	9301      	str	r3, [sp, #4]
 800dce6:	9200      	str	r2, [sp, #0]
 800dce8:	f7fd fae0 	bl	800b2ac <InvalidOperationException_.ctor$7125>
 800dcec:	9802      	ldr	r0, [sp, #8]
 800dcee:	9903      	ldr	r1, [sp, #12]
 800dcf0:	60c8      	str	r0, [r1, #12]
 800dcf2:	b004      	add	sp, #16
 800dcf4:	bd80      	pop	{r7, pc}
 800dcf6:	46c0      	nop			; (mov r8, r8)

0800dcf8 <ObjectDisposedException_get_Message$7290>:
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b084      	sub	sp, #16
 800dcfc:	4601      	mov	r1, r0
        /// </devdoc>
        public override String Message
        {
            get
            {
                String name = ObjectName;
 800dcfe:	9103      	str	r1, [sp, #12]
 800dd00:	f000 f820 	bl	800dd44 <ObjectDisposedException_get_ObjectName$7291>
 800dd04:	4601      	mov	r1, r0
                if(name == null || name.Length == 0)
 800dd06:	2800      	cmp	r0, #0
 800dd08:	9102      	str	r1, [sp, #8]
 800dd0a:	d005      	beq.n	800dd18 <ObjectDisposedException_get_Message$7290+0x20>
 800dd0c:	e7ff      	b.n	800dd0e <ObjectDisposedException_get_Message$7290+0x16>
 800dd0e:	9802      	ldr	r0, [sp, #8]
 800dd10:	68c1      	ldr	r1, [r0, #12]
 800dd12:	2900      	cmp	r1, #0
 800dd14:	d107      	bne.n	800dd26 <ObjectDisposedException_get_Message$7290+0x2e>
 800dd16:	e7ff      	b.n	800dd18 <ObjectDisposedException_get_Message$7290+0x20>
 800dd18:	9803      	ldr	r0, [sp, #12]
 800dd1a:	6881      	ldr	r1, [r0, #8]
            get
            {
                String name = ObjectName;
                if(name == null || name.Length == 0)
                {
                    return base.Message;
 800dd1c:	9101      	str	r1, [sp, #4]
 800dd1e:	e7ff      	b.n	800dd20 <ObjectDisposedException_get_Message$7290+0x28>
#if EXCEPTION_STRINGS
                return base.Message + Environment.NewLine + String.Format( CultureInfo.CurrentCulture, Environment.GetResourceString( "ObjectDisposed_ObjectName_Name" ), name );
#else
                return base.Message + Environment.NewLine + name;
#endif
            }
 800dd20:	9801      	ldr	r0, [sp, #4]
 800dd22:	b004      	add	sp, #16
 800dd24:	bd80      	pop	{r7, pc}
 800dd26:	9803      	ldr	r0, [sp, #12]
 800dd28:	6880      	ldr	r0, [r0, #8]
                }

#if EXCEPTION_STRINGS
                return base.Message + Environment.NewLine + String.Format( CultureInfo.CurrentCulture, Environment.GetResourceString( "ObjectDisposed_ObjectName_Name" ), name );
#else
                return base.Message + Environment.NewLine + name;
 800dd2a:	4904      	ldr	r1, [pc, #16]	; (800dd3c <ObjectDisposedException_get_Message$7290+0x44>)
 800dd2c:	4a04      	ldr	r2, [pc, #16]	; (800dd40 <ObjectDisposedException_get_Message$7290+0x48>)
 800dd2e:	447a      	add	r2, pc
 800dd30:	4411      	add	r1, r2
 800dd32:	9a02      	ldr	r2, [sp, #8]
 800dd34:	f7f5 f9e4 	bl	8003100 <String_Concat$2588>
 800dd38:	9001      	str	r0, [sp, #4]
 800dd3a:	e7f1      	b.n	800dd20 <ObjectDisposedException_get_Message$7290+0x28>
 800dd3c:	e8012c9c 	.word	0xe8012c9c
 800dd40:	17ff3aa2 	.word	0x17ff3aa2

0800dd44 <ObjectDisposedException_get_ObjectName$7291>:
 800dd44:	b082      	sub	sp, #8
 800dd46:	4601      	mov	r1, r0

        public String ObjectName
        {
            get
            {
                if(objectName == null)
 800dd48:	68c0      	ldr	r0, [r0, #12]
 800dd4a:	2800      	cmp	r0, #0
 800dd4c:	9101      	str	r1, [sp, #4]
 800dd4e:	d108      	bne.n	800dd62 <ObjectDisposedException_get_ObjectName$7291+0x1e>
 800dd50:	e7ff      	b.n	800dd52 <ObjectDisposedException_get_ObjectName$7291+0xe>
                {
                    return String.Empty;
 800dd52:	4807      	ldr	r0, [pc, #28]	; (800dd70 <ObjectDisposedException_get_ObjectName$7291+0x2c>)
 800dd54:	4907      	ldr	r1, [pc, #28]	; (800dd74 <ObjectDisposedException_get_ObjectName$7291+0x30>)
 800dd56:	4479      	add	r1, pc
 800dd58:	4408      	add	r0, r1
 800dd5a:	f8d0 00d4 	ldr.w	r0, [r0, #212]	; 0xd4
 800dd5e:	9000      	str	r0, [sp, #0]
 800dd60:	e003      	b.n	800dd6a <ObjectDisposedException_get_ObjectName$7291+0x26>
                }

                return objectName;
 800dd62:	9801      	ldr	r0, [sp, #4]
 800dd64:	68c1      	ldr	r1, [r0, #12]
 800dd66:	9100      	str	r1, [sp, #0]
 800dd68:	e7ff      	b.n	800dd6a <ObjectDisposedException_get_ObjectName$7291+0x26>
            }
 800dd6a:	9800      	ldr	r0, [sp, #0]
 800dd6c:	b002      	add	sp, #8
 800dd6e:	4770      	bx	lr
 800dd70:	fffffe3c 	.word	0xfffffe3c
 800dd74:	17ff3a7a 	.word	0x17ff3a7a

0800dd78 <OutOfMemoryException_.ctor$7308>:
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b084      	sub	sp, #16
 800dd7c:	4601      	mov	r1, r0
 800dd7e:	4a08      	ldr	r2, [pc, #32]	; (800dda0 <OutOfMemoryException_.ctor$7308+0x28>)
 800dd80:	4b08      	ldr	r3, [pc, #32]	; (800dda4 <OutOfMemoryException_.ctor$7308+0x2c>)
 800dd82:	447b      	add	r3, pc
 800dd84:	58d2      	ldr	r2, [r2, r3]
    {
        private String objectName;

        // This constructor should only be called by the EE (COMPlusThrow)
        private ObjectDisposedException() : this( null, Environment.GetResourceString( "ObjectDisposed_Generic" ) )
        {
 800dd86:	9003      	str	r0, [sp, #12]
 800dd88:	4610      	mov	r0, r2
 800dd8a:	9102      	str	r1, [sp, #8]
 800dd8c:	f7fd fa62 	bl	800b254 <Exception_GetMessageFromNativeResources$7044>
 800dd90:	9903      	ldr	r1, [sp, #12]
 800dd92:	9001      	str	r0, [sp, #4]
 800dd94:	4608      	mov	r0, r1
 800dd96:	9901      	ldr	r1, [sp, #4]
 800dd98:	f7fd fa51 	bl	800b23e <SystemException_.ctor$7366>
 800dd9c:	b004      	add	sp, #16
 800dd9e:	bd80      	pop	{r7, pc}
 800dda0:	e8025418 	.word	0xe8025418
 800dda4:	17ff3a4e 	.word	0x17ff3a4e

0800dda8 <ThrowHelper_ThrowArgumentOutOfRangeException$7377>:
            throw new ArgumentOutOfRangeException();
#endif
        }

        internal static void ThrowArgumentOutOfRangeException( ExceptionArgument argument, ExceptionResource resource )
        {
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b082      	sub	sp, #8
 800ddac:	e7ff      	b.n	800ddae <ThrowHelper_ThrowArgumentOutOfRangeException$7377+0x6>
#if EXCEPTION_STRINGS
            throw new ArgumentOutOfRangeException( GetArgumentName( argument ), Environment.GetResourceString( GetResourceName( resource ) ) );
#else
            throw new ArgumentOutOfRangeException();
 800ddae:	4808      	ldr	r0, [pc, #32]	; (800ddd0 <ThrowHelper_ThrowArgumentOutOfRangeException$7377+0x28>)
 800ddb0:	4908      	ldr	r1, [pc, #32]	; (800ddd4 <ThrowHelper_ThrowArgumentOutOfRangeException$7377+0x2c>)
 800ddb2:	4479      	add	r1, pc
 800ddb4:	4408      	add	r0, r1
 800ddb6:	4a08      	ldr	r2, [pc, #32]	; (800ddd8 <ThrowHelper_ThrowArgumentOutOfRangeException$7377+0x30>)
 800ddb8:	4411      	add	r1, r2
 800ddba:	9001      	str	r0, [sp, #4]
 800ddbc:	f7f2 fd00 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800ddc0:	9000      	str	r0, [sp, #0]
 800ddc2:	f7f4 fb44 	bl	800244e <ArgumentOutOfRangeException_.ctor$6074>
 800ddc6:	9801      	ldr	r0, [sp, #4]
 800ddc8:	9900      	ldr	r1, [sp, #0]
 800ddca:	f7f2 fd4f 	bl	800086c <TypeSystemManager_Throw$4954>
 800ddce:	e7ee      	b.n	800ddae <ThrowHelper_ThrowArgumentOutOfRangeException$7377+0x6>
 800ddd0:	ffffea38 	.word	0xffffea38
 800ddd4:	17ff3a1e 	.word	0x17ff3a1e
 800ddd8:	e8010a7c 	.word	0xe8010a7c

0800dddc <ThrowHelper_ThrowInvalidOperationException$7378>:
#endif
        }

        internal static void ThrowInvalidOperationException( ExceptionResource resource )
        {
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b082      	sub	sp, #8
 800dde0:	e7ff      	b.n	800dde2 <ThrowHelper_ThrowInvalidOperationException$7378+0x6>
#if EXCEPTION_STRINGS
            throw new InvalidOperationException( Environment.GetResourceString( GetResourceName( resource ) ) );
#else
            throw new InvalidOperationException();
 800dde2:	4808      	ldr	r0, [pc, #32]	; (800de04 <ThrowHelper_ThrowInvalidOperationException$7378+0x28>)
 800dde4:	4908      	ldr	r1, [pc, #32]	; (800de08 <ThrowHelper_ThrowInvalidOperationException$7378+0x2c>)
 800dde6:	4479      	add	r1, pc
 800dde8:	4408      	add	r0, r1
 800ddea:	4a08      	ldr	r2, [pc, #32]	; (800de0c <ThrowHelper_ThrowInvalidOperationException$7378+0x30>)
 800ddec:	4411      	add	r1, r2
 800ddee:	9001      	str	r0, [sp, #4]
 800ddf0:	f7f2 fce6 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800ddf4:	9000      	str	r0, [sp, #0]
 800ddf6:	f7fd fa51 	bl	800b29c <InvalidOperationException_.ctor$7124>
 800ddfa:	9801      	ldr	r0, [sp, #4]
 800ddfc:	9900      	ldr	r1, [sp, #0]
 800ddfe:	f7f2 fd35 	bl	800086c <TypeSystemManager_Throw$4954>
 800de02:	e7ee      	b.n	800dde2 <ThrowHelper_ThrowInvalidOperationException$7378+0x6>
 800de04:	ffffea38 	.word	0xffffea38
 800de08:	17ff39ea 	.word	0x17ff39ea
 800de0c:	e801313c 	.word	0xe801313c

0800de10 <Type_Equals$7548>:
 800de10:	b580      	push	{r7, lr}
 800de12:	b084      	sub	sp, #16
 800de14:	460a      	mov	r2, r1
 800de16:	4b11      	ldr	r3, [pc, #68]	; (800de5c <Type_Equals$7548+0x4c>)
 800de18:	f8df c044 	ldr.w	ip, [pc, #68]	; 800de60 <Type_Equals$7548+0x50>
 800de1c:	44fc      	add	ip, pc
 800de1e:	4463      	add	r3, ip
 800de20:	9003      	str	r0, [sp, #12]
 800de22:	4608      	mov	r0, r1
 800de24:	4619      	mov	r1, r3
 800de26:	9202      	str	r2, [sp, #8]
 800de28:	f7f2 ff18 	bl	8000c5c <TypeSystemManager_CastToSealedTypeNoThrow$4951>
 800de2c:	2800      	cmp	r0, #0
 800de2e:	d103      	bne.n	800de38 <Type_Equals$7548+0x28>
 800de30:	e7ff      	b.n	800de32 <Type_Equals$7548+0x22>
 800de32:	2000      	movs	r0, #0
 800de34:	9001      	str	r0, [sp, #4]
 800de36:	e00e      	b.n	800de56 <Type_Equals$7548+0x46>
 800de38:	4808      	ldr	r0, [pc, #32]	; (800de5c <Type_Equals$7548+0x4c>)
 800de3a:	490a      	ldr	r1, [pc, #40]	; (800de64 <Type_Equals$7548+0x54>)
 800de3c:	4479      	add	r1, pc
 800de3e:	4401      	add	r1, r0
 800de40:	9802      	ldr	r0, [sp, #8]
 800de42:	f7f3 f8b7 	bl	8000fb4 <TypeSystemManager_CastToSealedType$4950>
 800de46:	9903      	ldr	r1, [sp, #12]
 800de48:	9000      	str	r0, [sp, #0]
 800de4a:	4608      	mov	r0, r1
 800de4c:	9900      	ldr	r1, [sp, #0]
 800de4e:	f000 f80b 	bl	800de68 <Type_Equals$7549>
 800de52:	9001      	str	r0, [sp, #4]
 800de54:	e7ff      	b.n	800de56 <Type_Equals$7548+0x46>
 800de56:	9801      	ldr	r0, [sp, #4]
 800de58:	b004      	add	sp, #16
 800de5a:	bd80      	pop	{r7, pc}
 800de5c:	e8010aac 	.word	0xe8010aac
 800de60:	17ff39b4 	.word	0x17ff39b4
 800de64:	17ff3994 	.word	0x17ff3994

0800de68 <Type_Equals$7549>:
 800de68:	b580      	push	{r7, lr}
 800de6a:	b084      	sub	sp, #16
 800de6c:	460a      	mov	r2, r1
            return Equals( (Type)o );
        }

        public bool Equals( Type o )
        {
            if(o == null)
 800de6e:	2300      	movs	r3, #0
 800de70:	9003      	str	r0, [sp, #12]
 800de72:	4608      	mov	r0, r1
 800de74:	4619      	mov	r1, r3
 800de76:	9202      	str	r2, [sp, #8]
 800de78:	f000 f812 	bl	800dea0 <Type_op_Equality$7551>
 800de7c:	f010 0fff 	tst.w	r0, #255	; 0xff
 800de80:	d003      	beq.n	800de8a <Type_Equals$7549+0x22>
 800de82:	e7ff      	b.n	800de84 <Type_Equals$7549+0x1c>
 800de84:	2000      	movs	r0, #0
            {
                return false;
 800de86:	9001      	str	r0, [sp, #4]
 800de88:	e007      	b.n	800de9a <Type_Equals$7549+0x32>
 800de8a:	2000      	movs	r0, #0
 800de8c:	9903      	ldr	r1, [sp, #12]
 800de8e:	9a02      	ldr	r2, [sp, #8]
 800de90:	4291      	cmp	r1, r2
 800de92:	bf08      	it	eq
 800de94:	2001      	moveq	r0, #1
            }

            //Miguel: switched to pointer comparison to avoid circular ref
            //return (this.UnderlyingSystemType == o.UnderlyingSystemType);
            return ( object )this == ( object )o;
 800de96:	9001      	str	r0, [sp, #4]
 800de98:	e7ff      	b.n	800de9a <Type_Equals$7549+0x32>
 800de9a:	9801      	ldr	r0, [sp, #4]
 800de9c:	b004      	add	sp, #16
 800de9e:	bd80      	pop	{r7, pc}

0800dea0 <Type_op_Equality$7551>:
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b084      	sub	sp, #16
 800dea4:	4602      	mov	r2, r0
        }

        public static bool operator ==( Type left,
                                        Type right )
        {
            if ((object)left == null)
 800dea6:	2800      	cmp	r0, #0
 800dea8:	9203      	str	r2, [sp, #12]
 800deaa:	9102      	str	r1, [sp, #8]
 800deac:	d107      	bne.n	800debe <Type_op_Equality$7551+0x1e>
 800deae:	e7ff      	b.n	800deb0 <Type_op_Equality$7551+0x10>
 800deb0:	2000      	movs	r0, #0
 800deb2:	9902      	ldr	r1, [sp, #8]
 800deb4:	2900      	cmp	r1, #0
 800deb6:	bf08      	it	eq
 800deb8:	2001      	moveq	r0, #1
            {
                return (object)right == null;
 800deba:	9001      	str	r0, [sp, #4]
 800debc:	e00e      	b.n	800dedc <Type_op_Equality$7551+0x3c>
 800debe:	9802      	ldr	r0, [sp, #8]
            }

            if ((object)right == null)
 800dec0:	9902      	ldr	r1, [sp, #8]
 800dec2:	2900      	cmp	r1, #0
 800dec4:	9000      	str	r0, [sp, #0]
 800dec6:	d103      	bne.n	800ded0 <Type_op_Equality$7551+0x30>
 800dec8:	e7ff      	b.n	800deca <Type_op_Equality$7551+0x2a>
 800deca:	2000      	movs	r0, #0
            {
                return false;
 800decc:	9001      	str	r0, [sp, #4]
 800dece:	e005      	b.n	800dedc <Type_op_Equality$7551+0x3c>
            }

            return left.Equals( right );
 800ded0:	9803      	ldr	r0, [sp, #12]
 800ded2:	9900      	ldr	r1, [sp, #0]
 800ded4:	f7ff ffc8 	bl	800de68 <Type_Equals$7549>
 800ded8:	9001      	str	r0, [sp, #4]
 800deda:	e7ff      	b.n	800dedc <Type_op_Equality$7551+0x3c>
 800dedc:	9801      	ldr	r0, [sp, #4]
 800dede:	b004      	add	sp, #16
 800dee0:	bd80      	pop	{r7, pc}

0800dee2 <Type_GetHashCode$7550>:
 800dee2:	b580      	push	{r7, lr}
 800dee4:	b084      	sub	sp, #16
 800dee6:	4601      	mov	r1, r0
        }

        public override int GetHashCode()
        {
            Type SystemType = UnderlyingSystemType;
            if(SystemType != this)
 800dee8:	9003      	str	r0, [sp, #12]
 800deea:	9a03      	ldr	r2, [sp, #12]
 800deec:	9102      	str	r1, [sp, #8]
 800deee:	4611      	mov	r1, r2
 800def0:	f000 f812 	bl	800df18 <Type_op_Inequality$7552>
 800def4:	f010 0fff 	tst.w	r0, #255	; 0xff
 800def8:	d005      	beq.n	800df06 <Type_GetHashCode$7550+0x24>
 800defa:	e7ff      	b.n	800defc <Type_GetHashCode$7550+0x1a>
            {
                return SystemType.GetHashCode();
 800defc:	9802      	ldr	r0, [sp, #8]
 800defe:	f7ff fff0 	bl	800dee2 <Type_GetHashCode$7550>
 800df02:	9001      	str	r0, [sp, #4]
 800df04:	e005      	b.n	800df12 <Type_GetHashCode$7550+0x30>
            }

            return base.GetHashCode();
 800df06:	9802      	ldr	r0, [sp, #8]
 800df08:	f000 f816 	bl	800df38 <MemberInfo_GetHashCode$8809>
 800df0c:	9000      	str	r0, [sp, #0]
 800df0e:	9101      	str	r1, [sp, #4]
 800df10:	e7ff      	b.n	800df12 <Type_GetHashCode$7550+0x30>
 800df12:	9801      	ldr	r0, [sp, #4]
 800df14:	b004      	add	sp, #16
 800df16:	bd80      	pop	{r7, pc}

0800df18 <Type_op_Inequality$7552>:
 800df18:	b580      	push	{r7, lr}
 800df1a:	b082      	sub	sp, #8
 800df1c:	460a      	mov	r2, r1
 800df1e:	4603      	mov	r3, r0
        }

        public static bool operator !=( Type left,
                                        Type right )
        {
            return !(left == right);
 800df20:	9201      	str	r2, [sp, #4]
 800df22:	9300      	str	r3, [sp, #0]
 800df24:	f7ff ffbc 	bl	800dea0 <Type_op_Equality$7551>
 800df28:	2100      	movs	r1, #0
 800df2a:	f010 0fff 	tst.w	r0, #255	; 0xff
 800df2e:	bf08      	it	eq
 800df30:	2101      	moveq	r1, #1
 800df32:	4608      	mov	r0, r1
 800df34:	b002      	add	sp, #8
 800df36:	bd80      	pop	{r7, pc}

0800df38 <MemberInfo_GetHashCode$8809>:
 800df38:	b580      	push	{r7, lr}
 800df3a:	b082      	sub	sp, #8
 800df3c:	4601      	mov	r1, r0
            return this.GetHashCode() == obj.GetHashCode();
        }

        public override int GetHashCode()
        {
            return MetadataTokenInternal;
 800df3e:	9101      	str	r1, [sp, #4]
 800df40:	f000 fce4 	bl	800e90c <MemberInfo_get_MetadataTokenInternal$8817>
 800df44:	9000      	str	r0, [sp, #0]
 800df46:	4608      	mov	r0, r1
 800df48:	b002      	add	sp, #8
 800df4a:	bd80      	pop	{r7, pc}

0800df4c <Monitor_Enter$3925>:
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b082      	sub	sp, #8
 800df50:	4601      	mov	r1, r0
    using System.Runtime.InteropServices;

    [HostProtection( Synchronization = true, ExternalThreading = true )]
    public sealed class ManualResetEvent : EventWaitHandle
    {
        public ManualResetEvent( bool initialState ) : base( initialState, EventResetMode.ManualReset )
 800df52:	9101      	str	r1, [sp, #4]
 800df54:	f7f9 fcb6 	bl	80078c4 <SyncBlockTable_GetLock$4498>
 800df58:	f7fb fbec 	bl	8009734 <WaitableObject_Acquire$4985>
 800df5c:	9000      	str	r0, [sp, #0]
 800df5e:	b002      	add	sp, #8
 800df60:	bd80      	pop	{r7, pc}
 800df62:	46c0      	nop			; (mov r8, r8)

0800df64 <Timer_.ctor$3909>:
 800df64:	b580      	push	{r7, lr}
 800df66:	b084      	sub	sp, #16
 800df68:	4601      	mov	r1, r0
        //

        [DiscardTargetImplementation]
        private TimerImpl()
        {
            m_node        = new KernelNode< TimerImpl >( this );
 800df6a:	4a10      	ldr	r2, [pc, #64]	; (800dfac <Timer_.ctor$3909+0x48>)
 800df6c:	4b10      	ldr	r3, [pc, #64]	; (800dfb0 <Timer_.ctor$3909+0x4c>)
 800df6e:	447b      	add	r3, pc
 800df70:	441a      	add	r2, r3
 800df72:	f8df c040 	ldr.w	ip, [pc, #64]	; 800dfb4 <Timer_.ctor$3909+0x50>
 800df76:	449c      	add	ip, r3
 800df78:	9003      	str	r0, [sp, #12]
 800df7a:	4610      	mov	r0, r2
 800df7c:	9102      	str	r1, [sp, #8]
 800df7e:	4661      	mov	r1, ip
 800df80:	9301      	str	r3, [sp, #4]
 800df82:	f7f2 fc1d 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800df86:	9000      	str	r0, [sp, #0]
 800df88:	9903      	ldr	r1, [sp, #12]
 800df8a:	f000 f8cf 	bl	800e12c <KernelNode`1_.ctor$17370>
 800df8e:	9800      	ldr	r0, [sp, #0]
 800df90:	9903      	ldr	r1, [sp, #12]
 800df92:	6208      	str	r0, [r1, #32]
 800df94:	4a08      	ldr	r2, [pc, #32]	; (800dfb8 <Timer_.ctor$3909+0x54>)
 800df96:	9b01      	ldr	r3, [sp, #4]
 800df98:	441a      	add	r2, r3
 800df9a:	f8d2 c094 	ldr.w	ip, [r2, #148]	; 0x94
 800df9e:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 800dfa2:	628a      	str	r2, [r1, #40]	; 0x28
 800dfa4:	f8c1 c024 	str.w	ip, [r1, #36]	; 0x24
 800dfa8:	b004      	add	sp, #16
 800dfaa:	bd80      	pop	{r7, pc}
 800dfac:	ffffea38 	.word	0xffffea38
 800dfb0:	17ff3862 	.word	0x17ff3862
 800dfb4:	e801329c 	.word	0xe801329c
 800dfb8:	fffffe3c 	.word	0xfffffe3c

0800dfbc <Timer_Change$3913>:
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b088      	sub	sp, #32
 800dfc0:	4603      	mov	r3, r0
        //

        public bool Change( int dueTime ,
                            int period  )
        {
            if(this.IsDisposed)
 800dfc2:	9307      	str	r3, [sp, #28]
 800dfc4:	9206      	str	r2, [sp, #24]
 800dfc6:	9105      	str	r1, [sp, #20]
 800dfc8:	f7fc f848 	bl	800a05c <Timer_get_IsDisposed$3923>
 800dfcc:	f010 0fff 	tst.w	r0, #255	; 0xff
 800dfd0:	d003      	beq.n	800dfda <Timer_Change$3913+0x1e>
 800dfd2:	e7ff      	b.n	800dfd4 <Timer_Change$3913+0x18>
 800dfd4:	2000      	movs	r0, #0
            {
                return false;
 800dfd6:	9004      	str	r0, [sp, #16]
 800dfd8:	e031      	b.n	800e03e <Timer_Change$3913+0x82>
            }

            Deactivate();
 800dfda:	9807      	ldr	r0, [sp, #28]
 800dfdc:	f000 f87a 	bl	800e0d4 <Timer_Deactivate$3920>

            if(period < 0)
 800dfe0:	9806      	ldr	r0, [sp, #24]
 800dfe2:	f1b0 3fff 	cmp.w	r0, #4294967295
 800dfe6:	dc06      	bgt.n	800dff6 <Timer_Change$3913+0x3a>
 800dfe8:	e7ff      	b.n	800dfea <Timer_Change$3913+0x2e>
            {
                if(period < Timeout.Infinite)
 800dfea:	9806      	ldr	r0, [sp, #24]
 800dfec:	f1b0 3fff 	cmp.w	r0, #4294967295
 800dff0:	da56      	bge.n	800e0a0 <Timer_Change$3913+0xe4>
 800dff2:	e7ff      	b.n	800dff4 <Timer_Change$3913+0x38>
                {
#if EXCEPTION_STRINGS
                    throw new ArgumentOutOfRangeException( "period" );
#else
                    throw new ArgumentOutOfRangeException();
 800dff4:	e043      	b.n	800e07e <Timer_Change$3913+0xc2>

                m_period = SchedulerTimeSpan.MaxValue;
            }
            else
            {
                m_period = SchedulerTimeSpan.FromMilliseconds( period );
 800dff6:	9806      	ldr	r0, [sp, #24]
 800dff8:	17c1      	asrs	r1, r0, #31
 800dffa:	f7fa fb4f 	bl	800869c <SchedulerTimeSpan_FromMilliseconds$4760>
 800dffe:	9a07      	ldr	r2, [sp, #28]
 800e000:	61d1      	str	r1, [r2, #28]
 800e002:	6190      	str	r0, [r2, #24]
            }
 800e004:	e7ff      	b.n	800e006 <Timer_Change$3913+0x4a>

            if(dueTime < 0)
 800e006:	9805      	ldr	r0, [sp, #20]
 800e008:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e00c:	dc06      	bgt.n	800e01c <Timer_Change$3913+0x60>
 800e00e:	e7ff      	b.n	800e010 <Timer_Change$3913+0x54>
            {
                if(dueTime < Timeout.Infinite)
 800e010:	9805      	ldr	r0, [sp, #20]
 800e012:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e016:	da26      	bge.n	800e066 <Timer_Change$3913+0xaa>
 800e018:	e7ff      	b.n	800e01a <Timer_Change$3913+0x5e>
                {
#if EXCEPTION_STRINGS
                    throw new ArgumentOutOfRangeException( "dueTime" );
#else
                    throw new ArgumentOutOfRangeException();
 800e01a:	e013      	b.n	800e044 <Timer_Change$3913+0x88>

                m_dueTime = SchedulerTimeSpan.MaxValue;
            }
            else
            {
                m_dueTime = SchedulerTimeSpan.FromMilliseconds( dueTime );
 800e01c:	9805      	ldr	r0, [sp, #20]
 800e01e:	17c1      	asrs	r1, r0, #31
 800e020:	f7fa fb3c 	bl	800869c <SchedulerTimeSpan_FromMilliseconds$4760>
 800e024:	9a07      	ldr	r2, [sp, #28]
 800e026:	6151      	str	r1, [r2, #20]
 800e028:	6110      	str	r0, [r2, #16]

                SetInitialTrigger();
 800e02a:	4610      	mov	r0, r2
 800e02c:	f000 f85f 	bl	800e0ee <Timer_SetInitialTrigger$3917>

                Activate();
 800e030:	9807      	ldr	r0, [sp, #28]
 800e032:	f000 f86e 	bl	800e112 <Timer_Activate$3919>
            }
 800e036:	e7ff      	b.n	800e038 <Timer_Change$3913+0x7c>
 800e038:	2001      	movs	r0, #1
    
            return true;
 800e03a:	9004      	str	r0, [sp, #16]
 800e03c:	e7ff      	b.n	800e03e <Timer_Change$3913+0x82>
 800e03e:	9804      	ldr	r0, [sp, #16]
 800e040:	b008      	add	sp, #32
 800e042:	bd80      	pop	{r7, pc}
                if(dueTime < Timeout.Infinite)
                {
#if EXCEPTION_STRINGS
                    throw new ArgumentOutOfRangeException( "dueTime" );
#else
                    throw new ArgumentOutOfRangeException();
 800e044:	481f      	ldr	r0, [pc, #124]	; (800e0c4 <Timer_Change$3913+0x108>)
 800e046:	4920      	ldr	r1, [pc, #128]	; (800e0c8 <Timer_Change$3913+0x10c>)
 800e048:	4479      	add	r1, pc
 800e04a:	4408      	add	r0, r1
 800e04c:	4a1f      	ldr	r2, [pc, #124]	; (800e0cc <Timer_Change$3913+0x110>)
 800e04e:	4411      	add	r1, r2
 800e050:	9003      	str	r0, [sp, #12]
 800e052:	f7f2 fbb5 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800e056:	9002      	str	r0, [sp, #8]
 800e058:	f7f4 f9f9 	bl	800244e <ArgumentOutOfRangeException_.ctor$6074>
 800e05c:	9803      	ldr	r0, [sp, #12]
 800e05e:	9902      	ldr	r1, [sp, #8]
 800e060:	f7f2 fc04 	bl	800086c <TypeSystemManager_Throw$4954>
 800e064:	e7ee      	b.n	800e044 <Timer_Change$3913+0x88>
 800e066:	4814      	ldr	r0, [pc, #80]	; (800e0b8 <Timer_Change$3913+0xfc>)
 800e068:	4915      	ldr	r1, [pc, #84]	; (800e0c0 <Timer_Change$3913+0x104>)
 800e06a:	4479      	add	r1, pc
 800e06c:	4408      	add	r0, r1
 800e06e:	f8d0 10a4 	ldr.w	r1, [r0, #164]	; 0xa4
 800e072:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
 800e076:	9a07      	ldr	r2, [sp, #28]
 800e078:	6150      	str	r0, [r2, #20]
 800e07a:	6111      	str	r1, [r2, #16]
#endif
                }

                m_dueTime = SchedulerTimeSpan.MaxValue;
            }
 800e07c:	e7dc      	b.n	800e038 <Timer_Change$3913+0x7c>
                if(period < Timeout.Infinite)
                {
#if EXCEPTION_STRINGS
                    throw new ArgumentOutOfRangeException( "period" );
#else
                    throw new ArgumentOutOfRangeException();
 800e07e:	4811      	ldr	r0, [pc, #68]	; (800e0c4 <Timer_Change$3913+0x108>)
 800e080:	4913      	ldr	r1, [pc, #76]	; (800e0d0 <Timer_Change$3913+0x114>)
 800e082:	4479      	add	r1, pc
 800e084:	4408      	add	r0, r1
 800e086:	4a11      	ldr	r2, [pc, #68]	; (800e0cc <Timer_Change$3913+0x110>)
 800e088:	4411      	add	r1, r2
 800e08a:	9001      	str	r0, [sp, #4]
 800e08c:	f7f2 fb98 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800e090:	9000      	str	r0, [sp, #0]
 800e092:	f7f4 f9dc 	bl	800244e <ArgumentOutOfRangeException_.ctor$6074>
 800e096:	9801      	ldr	r0, [sp, #4]
 800e098:	9900      	ldr	r1, [sp, #0]
 800e09a:	f7f2 fbe7 	bl	800086c <TypeSystemManager_Throw$4954>
 800e09e:	e7ee      	b.n	800e07e <Timer_Change$3913+0xc2>
 800e0a0:	4805      	ldr	r0, [pc, #20]	; (800e0b8 <Timer_Change$3913+0xfc>)
 800e0a2:	4906      	ldr	r1, [pc, #24]	; (800e0bc <Timer_Change$3913+0x100>)
 800e0a4:	4479      	add	r1, pc
 800e0a6:	4408      	add	r0, r1
 800e0a8:	f8d0 10a4 	ldr.w	r1, [r0, #164]	; 0xa4
 800e0ac:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
 800e0b0:	9a07      	ldr	r2, [sp, #28]
 800e0b2:	61d0      	str	r0, [r2, #28]
 800e0b4:	6191      	str	r1, [r2, #24]
#endif
                }

                m_period = SchedulerTimeSpan.MaxValue;
            }
 800e0b6:	e7a6      	b.n	800e006 <Timer_Change$3913+0x4a>
 800e0b8:	fffffe3c 	.word	0xfffffe3c
 800e0bc:	17ff372c 	.word	0x17ff372c
 800e0c0:	17ff3766 	.word	0x17ff3766
 800e0c4:	ffffea38 	.word	0xffffea38
 800e0c8:	17ff3788 	.word	0x17ff3788
 800e0cc:	e8010a7c 	.word	0xe8010a7c
 800e0d0:	17ff374e 	.word	0x17ff374e

0800e0d4 <Timer_Deactivate$3920>:
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b082      	sub	sp, #8
 800e0d8:	4601      	mov	r1, r0
            this.Pool.Activate( m_node );
        }

        private void Deactivate()
        {
            this.Pool.Deactivate( m_node );
 800e0da:	9001      	str	r0, [sp, #4]
 800e0dc:	9100      	str	r1, [sp, #0]
 800e0de:	f000 f869 	bl	800e1b4 <Timer_get_Pool$3924>
 800e0e2:	9901      	ldr	r1, [sp, #4]
 800e0e4:	6a09      	ldr	r1, [r1, #32]
 800e0e6:	f7fb ff29 	bl	8009f3c <TimerPool_Deactivate$5354>
 800e0ea:	b002      	add	sp, #8
 800e0ec:	bd80      	pop	{r7, pc}

0800e0ee <Timer_SetInitialTrigger$3917>:
 800e0ee:	b580      	push	{r7, lr}
 800e0f0:	b082      	sub	sp, #8
 800e0f2:	4601      	mov	r1, r0

        //--//

        private void SetInitialTrigger()
        {
            m_nextTrigger = SchedulerTime.Now + m_dueTime;
 800e0f4:	9001      	str	r0, [sp, #4]
 800e0f6:	9100      	str	r1, [sp, #0]
 800e0f8:	f7fa fc90 	bl	8008a1c <SchedulerTime_get_Now$4865>
 800e0fc:	9a01      	ldr	r2, [sp, #4]
 800e0fe:	6912      	ldr	r2, [r2, #16]
 800e100:	9b01      	ldr	r3, [sp, #4]
 800e102:	695b      	ldr	r3, [r3, #20]
 800e104:	f7fa fc21 	bl	800894a <SchedulerTime_op_Addition$4831>
 800e108:	9a01      	ldr	r2, [sp, #4]
 800e10a:	6291      	str	r1, [r2, #40]	; 0x28
 800e10c:	6250      	str	r0, [r2, #36]	; 0x24
 800e10e:	b002      	add	sp, #8
 800e110:	bd80      	pop	{r7, pc}

0800e112 <Timer_Activate$3919>:
 800e112:	b580      	push	{r7, lr}
 800e114:	b082      	sub	sp, #8
 800e116:	4601      	mov	r1, r0
            }
        }

        private void Activate()
        {
            this.Pool.Activate( m_node );
 800e118:	9001      	str	r0, [sp, #4]
 800e11a:	9100      	str	r1, [sp, #0]
 800e11c:	f000 f84a 	bl	800e1b4 <Timer_get_Pool$3924>
 800e120:	9901      	ldr	r1, [sp, #4]
 800e122:	6a09      	ldr	r1, [r1, #32]
 800e124:	f7fb fe4c 	bl	8009dc0 <TimerPool_Activate$5353>
 800e128:	b002      	add	sp, #8
 800e12a:	bd80      	pop	{r7, pc}

0800e12c <KernelNode`1_.ctor$17370>:
 800e12c:	b082      	sub	sp, #8
 800e12e:	460a      	mov	r2, r1
 800e130:	4603      	mov	r3, r0
 800e132:	6101      	str	r1, [r0, #16]
 800e134:	9301      	str	r3, [sp, #4]
 800e136:	9200      	str	r2, [sp, #0]
 800e138:	b002      	add	sp, #8
 800e13a:	4770      	bx	lr

0800e13c <Timer_SetNextTrigger$3918>:
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b086      	sub	sp, #24
 800e140:	4601      	mov	r1, r0
 800e142:	6982      	ldr	r2, [r0, #24]
 800e144:	69c0      	ldr	r0, [r0, #28]
 800e146:	4b18      	ldr	r3, [pc, #96]	; (800e1a8 <Timer_SetNextTrigger$3918+0x6c>)
 800e148:	f8df c060 	ldr.w	ip, [pc, #96]	; 800e1ac <Timer_SetNextTrigger$3918+0x70>
 800e14c:	44fc      	add	ip, pc
 800e14e:	4463      	add	r3, ip
 800e150:	f8d3 c0a4 	ldr.w	ip, [r3, #164]	; 0xa4
 800e154:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e158:	9003      	str	r0, [sp, #12]
 800e15a:	9202      	str	r2, [sp, #8]
 800e15c:	9305      	str	r3, [sp, #20]
 800e15e:	f8cd c010 	str.w	ip, [sp, #16]
            m_nextTrigger = SchedulerTime.Now + m_dueTime;
        }

        private void SetNextTrigger()
        {
            if(m_period != SchedulerTimeSpan.MaxValue)
 800e162:	4058      	eors	r0, r3
 800e164:	ea82 020c 	eor.w	r2, r2, ip
 800e168:	4310      	orrs	r0, r2
 800e16a:	2800      	cmp	r0, #0
 800e16c:	9101      	str	r1, [sp, #4]
 800e16e:	d00c      	beq.n	800e18a <Timer_SetNextTrigger$3918+0x4e>
 800e170:	e7ff      	b.n	800e172 <Timer_SetNextTrigger$3918+0x36>
 800e172:	9801      	ldr	r0, [sp, #4]
 800e174:	6982      	ldr	r2, [r0, #24]
 800e176:	69c3      	ldr	r3, [r0, #28]
 800e178:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800e17a:	9901      	ldr	r1, [sp, #4]
 800e17c:	6a89      	ldr	r1, [r1, #40]	; 0x28
            {
                m_nextTrigger += m_period;
 800e17e:	f7fa fbe4 	bl	800894a <SchedulerTime_op_Addition$4831>
 800e182:	9a01      	ldr	r2, [sp, #4]
 800e184:	6291      	str	r1, [r2, #40]	; 0x28
 800e186:	6250      	str	r0, [r2, #36]	; 0x24
            }
 800e188:	e00b      	b.n	800e1a2 <Timer_SetNextTrigger$3918+0x66>
 800e18a:	4807      	ldr	r0, [pc, #28]	; (800e1a8 <Timer_SetNextTrigger$3918+0x6c>)
 800e18c:	4908      	ldr	r1, [pc, #32]	; (800e1b0 <Timer_SetNextTrigger$3918+0x74>)
 800e18e:	4479      	add	r1, pc
 800e190:	4408      	add	r0, r1
 800e192:	f8d0 1094 	ldr.w	r1, [r0, #148]	; 0x94
 800e196:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
 800e19a:	9a01      	ldr	r2, [sp, #4]
 800e19c:	6290      	str	r0, [r2, #40]	; 0x28
 800e19e:	6251      	str	r1, [r2, #36]	; 0x24
            else
            {
                m_nextTrigger = SchedulerTime.MaxValue;
            }
 800e1a0:	e7ff      	b.n	800e1a2 <Timer_SetNextTrigger$3918+0x66>
 800e1a2:	b006      	add	sp, #24
 800e1a4:	bd80      	pop	{r7, pc}
 800e1a6:	46c0      	nop			; (mov r8, r8)
 800e1a8:	fffffe3c 	.word	0xfffffe3c
 800e1ac:	17ff3684 	.word	0x17ff3684
 800e1b0:	17ff3642 	.word	0x17ff3642

0800e1b4 <Timer_get_Pool$3924>:
                            {
                                break;
                            }

                            node2             = node2.Next;
                            fSignalController = false;
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b082      	sub	sp, #8
 800e1b8:	480b      	ldr	r0, [pc, #44]	; (800e1e8 <Timer_get_Pool$3924+0x34>)
 800e1ba:	490c      	ldr	r1, [pc, #48]	; (800e1ec <Timer_get_Pool$3924+0x38>)
 800e1bc:	4479      	add	r1, pc
 800e1be:	4408      	add	r0, r1
 800e1c0:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
 800e1c4:	2800      	cmp	r0, #0
 800e1c6:	d104      	bne.n	800e1d2 <Timer_get_Pool$3924+0x1e>
 800e1c8:	e7ff      	b.n	800e1ca <Timer_get_Pool$3924+0x16>
                        }

 800e1ca:	f7fa ff99 	bl	8009100 <TypeSystemManager_AtomicAllocatorSlow$36985>
 800e1ce:	9001      	str	r0, [sp, #4]
 800e1d0:	e007      	b.n	800e1e2 <Timer_get_Pool$3924+0x2e>
                        node.InsertBefore( node2 );

                        if(fSignalController)
 800e1d2:	4805      	ldr	r0, [pc, #20]	; (800e1e8 <Timer_get_Pool$3924+0x34>)
 800e1d4:	4906      	ldr	r1, [pc, #24]	; (800e1f0 <Timer_get_Pool$3924+0x3c>)
 800e1d6:	4479      	add	r1, pc
 800e1d8:	4408      	add	r0, r1
 800e1da:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
 800e1de:	9001      	str	r0, [sp, #4]
 800e1e0:	e7ff      	b.n	800e1e2 <Timer_get_Pool$3924+0x2e>
        private TimerPool Pool
        {
            get
            {
                return TypeSystemManager.AtomicAllocator( ref s_pool );
            }
 800e1e2:	9801      	ldr	r0, [sp, #4]
 800e1e4:	b002      	add	sp, #8
 800e1e6:	bd80      	pop	{r7, pc}
 800e1e8:	fffffe3c 	.word	0xfffffe3c
 800e1ec:	17ff3614 	.word	0x17ff3614
 800e1f0:	17ff35fa 	.word	0x17ff35fa

0800e1f4 <StringBuilder_.ctor$8490>:
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b086      	sub	sp, #24
 800e1f8:	460b      	mov	r3, r1
        // String.NullString) then the new string builder will also be null 
        // (i.e., it will also represent String.NullString).
        // The maximum number of characters this string may contain is set by capacity.
        // 
        public StringBuilder( String value, int capacity )
            : this( value, 0, ((value != null) ? value.Length : 0), capacity )
 800e1fa:	2900      	cmp	r1, #0
 800e1fc:	9305      	str	r3, [sp, #20]
 800e1fe:	9004      	str	r0, [sp, #16]
 800e200:	9203      	str	r2, [sp, #12]
 800e202:	d004      	beq.n	800e20e <StringBuilder_.ctor$8490+0x1a>
 800e204:	e7ff      	b.n	800e206 <StringBuilder_.ctor$8490+0x12>
 800e206:	9805      	ldr	r0, [sp, #20]
 800e208:	68c1      	ldr	r1, [r0, #12]

            return this;
        }

        // Appends a copy of this string at the end of this string builder.
        public StringBuilder Append( String value )
 800e20a:	9102      	str	r1, [sp, #8]
 800e20c:	e002      	b.n	800e214 <StringBuilder_.ctor$8490+0x20>
 800e20e:	2000      	movs	r0, #0
        // String.NullString) then the new string builder will also be null 
        // (i.e., it will also represent String.NullString).
        // The maximum number of characters this string may contain is set by capacity.
        // 
        public StringBuilder( String value, int capacity )
            : this( value, 0, ((value != null) ? value.Length : 0), capacity )
 800e210:	9002      	str	r0, [sp, #8]
 800e212:	e7ff      	b.n	800e214 <StringBuilder_.ctor$8490+0x20>
 800e214:	9802      	ldr	r0, [sp, #8]
 800e216:	9904      	ldr	r1, [sp, #16]
 800e218:	9001      	str	r0, [sp, #4]
 800e21a:	4608      	mov	r0, r1
 800e21c:	9905      	ldr	r1, [sp, #20]
 800e21e:	9a01      	ldr	r2, [sp, #4]
 800e220:	9b03      	ldr	r3, [sp, #12]
 800e222:	f000 f819 	bl	800e258 <StringBuilder_.ctor$8491>
 800e226:	b006      	add	sp, #24
 800e228:	bd80      	pop	{r7, pc}
 800e22a:	46c0      	nop			; (mov r8, r8)

0800e22c <StringBuilder_.ctor$8489>:
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b082      	sub	sp, #8
 800e230:	460a      	mov	r2, r1
 800e232:	4603      	mov	r3, r0
 800e234:	f8df c018 	ldr.w	ip, [pc, #24]	; 800e250 <StringBuilder_.ctor$8489+0x24>
 800e238:	f8df e018 	ldr.w	lr, [pc, #24]	; 800e254 <StringBuilder_.ctor$8489+0x28>
 800e23c:	44fe      	add	lr, pc
 800e23e:	f85c c00e 	ldr.w	ip, [ip, lr]
        // is a null String (i.e., if it represents String.NullString)
        // then the new string builder will also be null (i.e., it will also represent
        //  String.NullString).
        // 
        public StringBuilder( String value )
            : this( value, DefaultCapacity )
 800e242:	9201      	str	r2, [sp, #4]
 800e244:	4662      	mov	r2, ip
 800e246:	9300      	str	r3, [sp, #0]
 800e248:	f7ff ffd4 	bl	800e1f4 <StringBuilder_.ctor$8490>
 800e24c:	b002      	add	sp, #8
 800e24e:	bd80      	pop	{r7, pc}
 800e250:	e8025428 	.word	0xe8025428
 800e254:	17ff3594 	.word	0x17ff3594

0800e258 <StringBuilder_.ctor$8491>:
 800e258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e25a:	b095      	sub	sp, #84	; 0x54
 800e25c:	469c      	mov	ip, r3
 800e25e:	4696      	mov	lr, r2
 800e260:	4604      	mov	r4, r0
 800e262:	461d      	mov	r5, r3

////#if DEBUG
////                    // We want to ensure we can change our hash function daily.
////                    // This is perfectly fine as long as you don't persist the
////                    // value from GetHashCode to disk or count on String A
////                    // hashing before string B.  Those are bugs in your code.
 800e264:	4e4d      	ldr	r6, [pc, #308]	; (800e39c <StringBuilder_.ctor$8491+0x144>)
 800e266:	4f4e      	ldr	r7, [pc, #312]	; (800e3a0 <StringBuilder_.ctor$8491+0x148>)
 800e268:	447f      	add	r7, pc
 800e26a:	443e      	add	r6, r7
 800e26c:	f8d6 60f8 	ldr.w	r6, [r6, #248]	; 0xf8
 800e270:	6086      	str	r6, [r0, #8]
 800e272:	2600      	movs	r6, #0
 800e274:	60c6      	str	r6, [r0, #12]
 800e276:	6106      	str	r6, [r0, #16]
////            throw new ArgumentNullException( "value" );
////        }
////
////        if(startIndex < 0)
////        {
////            throw new ArgumentOutOfRangeException( "startIndex", Environment.GetResourceString( "ArgumentOutOfRange_StartIndex" ) );
 800e278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e27c:	9214      	str	r2, [sp, #80]	; 0x50
 800e27e:	9413      	str	r4, [sp, #76]	; 0x4c
 800e280:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
 800e284:	9511      	str	r5, [sp, #68]	; 0x44
 800e286:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 800e28a:	910f      	str	r1, [sp, #60]	; 0x3c
 800e28c:	dc12      	bgt.n	800e2b4 <StringBuilder_.ctor$8491+0x5c>
 800e28e:	e7ff      	b.n	800e290 <StringBuilder_.ctor$8491+0x38>
////        }
////        if(count < 0)
////        {
////            throw new ArgumentOutOfRangeException( "count", Environment.GetResourceString( "ArgumentOutOfRange_NegativeCount" ) );
////        }
////
 800e290:	e7ff      	b.n	800e292 <StringBuilder_.ctor$8491+0x3a>
 800e292:	4845      	ldr	r0, [pc, #276]	; (800e3a8 <StringBuilder_.ctor$8491+0x150>)
 800e294:	4948      	ldr	r1, [pc, #288]	; (800e3b8 <StringBuilder_.ctor$8491+0x160>)
 800e296:	4479      	add	r1, pc
 800e298:	4408      	add	r0, r1
 800e29a:	4a45      	ldr	r2, [pc, #276]	; (800e3b0 <StringBuilder_.ctor$8491+0x158>)
 800e29c:	4411      	add	r1, r2
 800e29e:	900e      	str	r0, [sp, #56]	; 0x38
 800e2a0:	f7f2 fa8e 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800e2a4:	900d      	str	r0, [sp, #52]	; 0x34
 800e2a6:	f7f4 f8d2 	bl	800244e <ArgumentOutOfRangeException_.ctor$6074>
 800e2aa:	980e      	ldr	r0, [sp, #56]	; 0x38
 800e2ac:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e2ae:	f7f2 fadd 	bl	800086c <TypeSystemManager_Throw$4954>
 800e2b2:	e7ee      	b.n	800e292 <StringBuilder_.ctor$8491+0x3a>
////        if(startIndex > value.Length - count)
////        {
////            throw new ArgumentOutOfRangeException( "startIndex", Environment.GetResourceString( "ArgumentOutOfRange_IndexCountBuffer" ) );
 800e2b4:	9814      	ldr	r0, [sp, #80]	; 0x50
 800e2b6:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e2ba:	dc12      	bgt.n	800e2e2 <StringBuilder_.ctor$8491+0x8a>
 800e2bc:	e7ff      	b.n	800e2be <StringBuilder_.ctor$8491+0x66>
////        }
////
////        //If count is 0, that skews a whole bunch of the calculations below, so just special case that.
////        if(count == 0)
////        {
////            return String.Empty;
 800e2be:	e7ff      	b.n	800e2c0 <StringBuilder_.ctor$8491+0x68>
 800e2c0:	4839      	ldr	r0, [pc, #228]	; (800e3a8 <StringBuilder_.ctor$8491+0x150>)
 800e2c2:	493c      	ldr	r1, [pc, #240]	; (800e3b4 <StringBuilder_.ctor$8491+0x15c>)
 800e2c4:	4479      	add	r1, pc
 800e2c6:	4408      	add	r0, r1
 800e2c8:	4a39      	ldr	r2, [pc, #228]	; (800e3b0 <StringBuilder_.ctor$8491+0x158>)
 800e2ca:	4411      	add	r1, r2
 800e2cc:	900c      	str	r0, [sp, #48]	; 0x30
 800e2ce:	f7f2 fa77 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800e2d2:	900b      	str	r0, [sp, #44]	; 0x2c
 800e2d4:	f7f4 f8bb 	bl	800244e <ArgumentOutOfRangeException_.ctor$6074>
 800e2d8:	980c      	ldr	r0, [sp, #48]	; 0x30
 800e2da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e2dc:	f7f2 fac6 	bl	800086c <TypeSystemManager_Throw$4954>
 800e2e0:	e7ee      	b.n	800e2c0 <StringBuilder_.ctor$8491+0x68>
////        }
////
////        //Figure out the total length of the strings in value
////        int jointLength = 0;
 800e2e2:	e7ff      	b.n	800e2e4 <StringBuilder_.ctor$8491+0x8c>
////            if(value[stringToJoinIndex] != null)
////            {
////                jointLength += value[stringToJoinIndex].Length;
////            }
////        }
////
 800e2e4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800e2e6:	2800      	cmp	r0, #0
 800e2e8:	900a      	str	r0, [sp, #40]	; 0x28
 800e2ea:	d108      	bne.n	800e2fe <StringBuilder_.ctor$8491+0xa6>
 800e2ec:	e7ff      	b.n	800e2ee <StringBuilder_.ctor$8491+0x96>
////        //Add enough room for the separator.
////        jointLength += (count - 1) * separator.Length;
 800e2ee:	482b      	ldr	r0, [pc, #172]	; (800e39c <StringBuilder_.ctor$8491+0x144>)
 800e2f0:	492c      	ldr	r1, [pc, #176]	; (800e3a4 <StringBuilder_.ctor$8491+0x14c>)
 800e2f2:	4479      	add	r1, pc
 800e2f4:	4408      	add	r0, r1
 800e2f6:	f8d0 00d4 	ldr.w	r0, [r0, #212]	; 0xd4
////
 800e2fa:	900a      	str	r0, [sp, #40]	; 0x28
 800e2fc:	e7ff      	b.n	800e2fe <StringBuilder_.ctor$8491+0xa6>
 800e2fe:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e300:	68c1      	ldr	r1, [r0, #12]
////        // Note that we may not catch all overflows with this check (since we could have wrapped around the 4gb range any number of times
////        // and landed back in the positive range.) The input array might be modifed from other threads,
 800e302:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e304:	1a89      	subs	r1, r1, r2
 800e306:	f1b1 3fff 	cmp.w	r1, #4294967295
 800e30a:	9009      	str	r0, [sp, #36]	; 0x24
 800e30c:	dc12      	bgt.n	800e334 <StringBuilder_.ctor$8491+0xdc>
 800e30e:	e7ff      	b.n	800e310 <StringBuilder_.ctor$8491+0xb8>
////        // so we have to do an overflow check before each append below anyway. Those overflows will get caught down there.
////        if((jointLength < 0) || ((jointLength + 1) < 0))
////        {
////            throw new OutOfMemoryException();
////        }
 800e310:	e7ff      	b.n	800e312 <StringBuilder_.ctor$8491+0xba>
 800e312:	4825      	ldr	r0, [pc, #148]	; (800e3a8 <StringBuilder_.ctor$8491+0x150>)
 800e314:	4925      	ldr	r1, [pc, #148]	; (800e3ac <StringBuilder_.ctor$8491+0x154>)
 800e316:	4479      	add	r1, pc
 800e318:	4408      	add	r0, r1
 800e31a:	4a25      	ldr	r2, [pc, #148]	; (800e3b0 <StringBuilder_.ctor$8491+0x158>)
 800e31c:	4411      	add	r1, r2
 800e31e:	9008      	str	r0, [sp, #32]
 800e320:	f7f2 fa4e 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800e324:	9007      	str	r0, [sp, #28]
 800e326:	f7f4 f892 	bl	800244e <ArgumentOutOfRangeException_.ctor$6074>
 800e32a:	9808      	ldr	r0, [sp, #32]
 800e32c:	9907      	ldr	r1, [sp, #28]
 800e32e:	f7f2 fa9d 	bl	800086c <TypeSystemManager_Throw$4954>
 800e332:	e7ee      	b.n	800e312 <StringBuilder_.ctor$8491+0xba>
 800e334:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800e338:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800e33a:	60c8      	str	r0, [r1, #12]
////
////        //If this is an empty string, just return.
////        if(jointLength == 0)
////        {
////            return String.Empty;
////        }
 800e33c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800e33e:	2800      	cmp	r0, #0
 800e340:	9006      	str	r0, [sp, #24]
 800e342:	d103      	bne.n	800e34c <StringBuilder_.ctor$8491+0xf4>
 800e344:	e7ff      	b.n	800e346 <StringBuilder_.ctor$8491+0xee>
 800e346:	2010      	movs	r0, #16
////
////        string jointString = FastAllocateString( jointLength );
////
 800e348:	9006      	str	r0, [sp, #24]
 800e34a:	e7ff      	b.n	800e34c <StringBuilder_.ctor$8491+0xf4>
 800e34c:	9806      	ldr	r0, [sp, #24]
 800e34e:	9005      	str	r0, [sp, #20]
 800e350:	e7ff      	b.n	800e352 <StringBuilder_.ctor$8491+0xfa>
 800e352:	9805      	ldr	r0, [sp, #20]
////        fixed(char* pointerToJointString = &jointString.m_firstChar)
////        {
 800e354:	9914      	ldr	r1, [sp, #80]	; 0x50
 800e356:	4288      	cmp	r0, r1
 800e358:	4602      	mov	r2, r0
 800e35a:	9004      	str	r0, [sp, #16]
 800e35c:	9203      	str	r2, [sp, #12]
 800e35e:	da07      	bge.n	800e370 <StringBuilder_.ctor$8491+0x118>
 800e360:	e7ff      	b.n	800e362 <StringBuilder_.ctor$8491+0x10a>
////            UnSafeCharBuffer charBuffer = new UnSafeCharBuffer( pointerToJointString, jointLength );
////
 800e362:	9804      	ldr	r0, [sp, #16]
 800e364:	0041      	lsls	r1, r0, #1
 800e366:	460a      	mov	r2, r1
////            // Append the first string first and then append each following string prefixed by the separator.
////            charBuffer.AppendString( value[startIndex] );
////            for(int stringToJoinIndex = startIndex + 1; stringToJoinIndex <= endIndex; stringToJoinIndex++)
////            {
 800e368:	2900      	cmp	r1, #0
 800e36a:	9202      	str	r2, [sp, #8]
 800e36c:	db0f      	blt.n	800e38e <StringBuilder_.ctor$8491+0x136>
 800e36e:	e011      	b.n	800e394 <StringBuilder_.ctor$8491+0x13c>
 800e370:	9803      	ldr	r0, [sp, #12]
////                charBuffer.AppendString( value[stringToJoinIndex] );
////            }
////            BCLDebug.Assert( *(pointerToJointString + charBuffer.Length) == '\0', "String must be null-terminated!" );
////        }
////
////        return jointString;
 800e372:	9001      	str	r0, [sp, #4]
 800e374:	e7ff      	b.n	800e376 <StringBuilder_.ctor$8491+0x11e>
 800e376:	9801      	ldr	r0, [sp, #4]
 800e378:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e37a:	9000      	str	r0, [sp, #0]
 800e37c:	4608      	mov	r0, r1
 800e37e:	9914      	ldr	r1, [sp, #80]	; 0x50
 800e380:	9a00      	ldr	r2, [sp, #0]
 800e382:	f7f4 ffe3 	bl	800334c <String_GetStringForStringBuilder$2620>
 800e386:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800e388:	6108      	str	r0, [r1, #16]
 800e38a:	b015      	add	sp, #84	; 0x54
 800e38c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e38e:	9814      	ldr	r0, [sp, #80]	; 0x50
////            charBuffer.AppendString( value[startIndex] );
////            for(int stringToJoinIndex = startIndex + 1; stringToJoinIndex <= endIndex; stringToJoinIndex++)
////            {
////                charBuffer.AppendString( separator );
////                charBuffer.AppendString( value[stringToJoinIndex] );
////            }
 800e390:	9001      	str	r0, [sp, #4]
 800e392:	e7f0      	b.n	800e376 <StringBuilder_.ctor$8491+0x11e>
 800e394:	9802      	ldr	r0, [sp, #8]
////            BCLDebug.Assert( *(pointerToJointString + charBuffer.Length) == '\0', "String must be null-terminated!" );
////        }
 800e396:	9005      	str	r0, [sp, #20]
 800e398:	e7db      	b.n	800e352 <StringBuilder_.ctor$8491+0xfa>
 800e39a:	46c0      	nop			; (mov r8, r8)
 800e39c:	fffffe3c 	.word	0xfffffe3c
 800e3a0:	17ff3568 	.word	0x17ff3568
 800e3a4:	17ff34de 	.word	0x17ff34de
 800e3a8:	ffffea38 	.word	0xffffea38
 800e3ac:	17ff34ba 	.word	0x17ff34ba
 800e3b0:	e8010a7c 	.word	0xe8010a7c
 800e3b4:	17ff350c 	.word	0x17ff350c
 800e3b8:	17ff353a 	.word	0x17ff353a

0800e3bc <StringBuilder_GetThreadSafeString$8493>:
 800e3bc:	b510      	push	{r4, lr}
 800e3be:	b086      	sub	sp, #24
 800e3c0:	460a      	mov	r2, r1
 800e3c2:	4603      	mov	r3, r0
        {
            // Following two reads (m_StringValue, m_currentThread) needs to happen in order.
            // This is guaranteed by making the fields volatile.     
            // See ReplaceString method for details.

            String temp = m_StringValue;
 800e3c4:	f8d0 c010 	ldr.w	ip, [r0, #16]
            int currentLength = currentString.Length;
            requiredLength = currentLength + charCount;
            if(NeedsAllocation( currentString, requiredLength ))
            {
                String newString = GetNewString( currentString, requiredLength );
                newString.AppendInPlace( value, startIndex, charCount, currentLength );
 800e3c8:	f8df e040 	ldr.w	lr, [pc, #64]	; 800e40c <StringBuilder_GetThreadSafeString$8493+0x50>
 800e3cc:	4c10      	ldr	r4, [pc, #64]	; (800e410 <StringBuilder_GetThreadSafeString$8493+0x54>)
 800e3ce:	447c      	add	r4, pc
 800e3d0:	44a6      	add	lr, r4
 800e3d2:	f8de e0f8 	ldr.w	lr, [lr, #248]	; 0xf8
 800e3d6:	f8c1 e000 	str.w	lr, [r1]
            // This is guaranteed by making the fields volatile.     
            // See ReplaceString method for details.

            String temp = m_StringValue;
            th = Thread.CurrentThread;
            if(m_currentThread == th)
 800e3da:	6880      	ldr	r0, [r0, #8]
 800e3dc:	4570      	cmp	r0, lr
 800e3de:	9305      	str	r3, [sp, #20]
 800e3e0:	f8cd c010 	str.w	ip, [sp, #16]
 800e3e4:	9203      	str	r2, [sp, #12]
 800e3e6:	d103      	bne.n	800e3f0 <StringBuilder_GetThreadSafeString$8493+0x34>
 800e3e8:	e7ff      	b.n	800e3ea <StringBuilder_GetThreadSafeString$8493+0x2e>
                return temp;
 800e3ea:	9804      	ldr	r0, [sp, #16]
 800e3ec:	9002      	str	r0, [sp, #8]
 800e3ee:	e00a      	b.n	800e406 <StringBuilder_GetThreadSafeString$8493+0x4a>
            return String.GetStringForStringBuilder( temp, temp.Capacity );
 800e3f0:	9804      	ldr	r0, [sp, #16]
 800e3f2:	f7f4 f8a3 	bl	800253c <String_get_Capacity$2504>
 800e3f6:	9904      	ldr	r1, [sp, #16]
 800e3f8:	9001      	str	r0, [sp, #4]
 800e3fa:	4608      	mov	r0, r1
 800e3fc:	9901      	ldr	r1, [sp, #4]
 800e3fe:	f7f4 ff94 	bl	800332a <String_GetStringForStringBuilder$2619>
 800e402:	9002      	str	r0, [sp, #8]
 800e404:	e7ff      	b.n	800e406 <StringBuilder_GetThreadSafeString$8493+0x4a>
        }
 800e406:	9802      	ldr	r0, [sp, #8]
 800e408:	b006      	add	sp, #24
 800e40a:	bd10      	pop	{r4, pc}
 800e40c:	fffffe3c 	.word	0xfffffe3c
 800e410:	17ff3402 	.word	0x17ff3402

0800e414 <StringBuilder_Append$8505>:
 800e414:	b580      	push	{r7, lr}
 800e416:	b08e      	sub	sp, #56	; 0x38
 800e418:	4613      	mov	r3, r2
 800e41a:	f04f 0c00 	mov.w	ip, #0
 800e41e:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
        }

        // Appends a character at the end of this string builder. The capacity is adjusted as needed.
        public StringBuilder Append( char value, int repeatCount )
        {
            if(repeatCount == 0)
 800e422:	2a00      	cmp	r2, #0
 800e424:	900c      	str	r0, [sp, #48]	; 0x30
 800e426:	930b      	str	r3, [sp, #44]	; 0x2c
 800e428:	910a      	str	r1, [sp, #40]	; 0x28
 800e42a:	d103      	bne.n	800e434 <StringBuilder_Append$8505+0x20>
 800e42c:	e7ff      	b.n	800e42e <StringBuilder_Append$8505+0x1a>
            {
                return this;
 800e42e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800e430:	9009      	str	r0, [sp, #36]	; 0x24
 800e432:	e062      	b.n	800e4fa <StringBuilder_Append$8505+0xe6>
            }
            if(repeatCount < 0)
 800e434:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800e436:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e43a:	dc12      	bgt.n	800e462 <StringBuilder_Append$8505+0x4e>
 800e43c:	e7ff      	b.n	800e43e <StringBuilder_Append$8505+0x2a>
            {
#if EXCEPTION_STRINGS
                throw new ArgumentOutOfRangeException( "repeatCount", Environment.GetResourceString( "ArgumentOutOfRange_NegativeCount" ) );
#else
                throw new ArgumentOutOfRangeException();
 800e43e:	e7ff      	b.n	800e440 <StringBuilder_Append$8505+0x2c>
 800e440:	482f      	ldr	r0, [pc, #188]	; (800e500 <StringBuilder_Append$8505+0xec>)
 800e442:	4932      	ldr	r1, [pc, #200]	; (800e50c <StringBuilder_Append$8505+0xf8>)
 800e444:	4479      	add	r1, pc
 800e446:	4408      	add	r0, r1
 800e448:	4a31      	ldr	r2, [pc, #196]	; (800e510 <StringBuilder_Append$8505+0xfc>)
 800e44a:	4411      	add	r1, r2
 800e44c:	9008      	str	r0, [sp, #32]
 800e44e:	f7f2 f9b7 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800e452:	9007      	str	r0, [sp, #28]
 800e454:	f7f3 fffb 	bl	800244e <ArgumentOutOfRangeException_.ctor$6074>
 800e458:	9808      	ldr	r0, [sp, #32]
 800e45a:	9907      	ldr	r1, [sp, #28]
 800e45c:	f7f2 fa06 	bl	800086c <TypeSystemManager_Throw$4954>
 800e460:	e7ee      	b.n	800e440 <StringBuilder_Append$8505+0x2c>
 800e462:	a90d      	add	r1, sp, #52	; 0x34
#endif
            }


            Thread th;
            String currentString = GetThreadSafeString( out th );
 800e464:	980c      	ldr	r0, [sp, #48]	; 0x30
 800e466:	f7ff ffa9 	bl	800e3bc <StringBuilder_GetThreadSafeString$8493>
 800e46a:	4601      	mov	r1, r0
 800e46c:	68c0      	ldr	r0, [r0, #12]

            int currentLength = currentString.Length;
            int requiredLength = currentLength + repeatCount;
 800e46e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e470:	1883      	adds	r3, r0, r2
 800e472:	469c      	mov	ip, r3

            if(requiredLength < 0)
 800e474:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e478:	9106      	str	r1, [sp, #24]
 800e47a:	9005      	str	r0, [sp, #20]
 800e47c:	f8cd c010 	str.w	ip, [sp, #16]
 800e480:	dc12      	bgt.n	800e4a8 <StringBuilder_Append$8505+0x94>
 800e482:	e7ff      	b.n	800e484 <StringBuilder_Append$8505+0x70>
                throw new OutOfMemoryException();
 800e484:	e7ff      	b.n	800e486 <StringBuilder_Append$8505+0x72>
 800e486:	481e      	ldr	r0, [pc, #120]	; (800e500 <StringBuilder_Append$8505+0xec>)
 800e488:	491e      	ldr	r1, [pc, #120]	; (800e504 <StringBuilder_Append$8505+0xf0>)
 800e48a:	4479      	add	r1, pc
 800e48c:	4408      	add	r0, r1
 800e48e:	4a1e      	ldr	r2, [pc, #120]	; (800e508 <StringBuilder_Append$8505+0xf4>)
 800e490:	4411      	add	r1, r2
 800e492:	9003      	str	r0, [sp, #12]
 800e494:	f7f2 f994 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800e498:	9002      	str	r0, [sp, #8]
 800e49a:	f7ff fc6d 	bl	800dd78 <OutOfMemoryException_.ctor$7308>
 800e49e:	9803      	ldr	r0, [sp, #12]
 800e4a0:	9902      	ldr	r1, [sp, #8]
 800e4a2:	f7f2 f9e3 	bl	800086c <TypeSystemManager_Throw$4954>
 800e4a6:	e7ee      	b.n	800e486 <StringBuilder_Append$8505+0x72>

            if(!NeedsAllocation( currentString, requiredLength ))
 800e4a8:	9806      	ldr	r0, [sp, #24]
 800e4aa:	9904      	ldr	r1, [sp, #16]
 800e4ac:	f000 f832 	bl	800e514 <StringBuilder_NeedsAllocation$8509>
 800e4b0:	f010 0fff 	tst.w	r0, #255	; 0xff
 800e4b4:	d10e      	bne.n	800e4d4 <StringBuilder_Append$8505+0xc0>
 800e4b6:	e7ff      	b.n	800e4b8 <StringBuilder_Append$8505+0xa4>
            {
                currentString.AppendInPlace( value, repeatCount, currentLength );
 800e4b8:	9806      	ldr	r0, [sp, #24]
 800e4ba:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e4bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e4be:	9b05      	ldr	r3, [sp, #20]
 800e4c0:	f7f4 fea9 	bl	8003216 <String_AppendInPlace$2613>
                ReplaceString( th, currentString );
 800e4c4:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e4c6:	980c      	ldr	r0, [sp, #48]	; 0x30
 800e4c8:	9a06      	ldr	r2, [sp, #24]
 800e4ca:	f000 f8ad 	bl	800e628 <StringBuilder_ReplaceString$8511>
                return this;
 800e4ce:	980c      	ldr	r0, [sp, #48]	; 0x30
 800e4d0:	9009      	str	r0, [sp, #36]	; 0x24
 800e4d2:	e012      	b.n	800e4fa <StringBuilder_Append$8505+0xe6>
            }

            String newString = GetNewString( currentString, requiredLength );
 800e4d4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800e4d6:	9906      	ldr	r1, [sp, #24]
 800e4d8:	9a04      	ldr	r2, [sp, #16]
 800e4da:	f000 f82b 	bl	800e534 <StringBuilder_GetNewString$8510>
            newString.AppendInPlace( value, repeatCount, currentLength );
 800e4de:	9001      	str	r0, [sp, #4]
 800e4e0:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e4e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e4e4:	9b05      	ldr	r3, [sp, #20]
 800e4e6:	f7f4 fe96 	bl	8003216 <String_AppendInPlace$2613>
            ReplaceString( th, newString );
 800e4ea:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e4ec:	980c      	ldr	r0, [sp, #48]	; 0x30
 800e4ee:	9a01      	ldr	r2, [sp, #4]
 800e4f0:	f000 f89a 	bl	800e628 <StringBuilder_ReplaceString$8511>
            return this;
 800e4f4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800e4f6:	9009      	str	r0, [sp, #36]	; 0x24
 800e4f8:	e7ff      	b.n	800e4fa <StringBuilder_Append$8505+0xe6>
        }
 800e4fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e4fc:	b00e      	add	sp, #56	; 0x38
 800e4fe:	bd80      	pop	{r7, pc}
 800e500:	ffffea38 	.word	0xffffea38
 800e504:	17ff3346 	.word	0x17ff3346
 800e508:	e801332c 	.word	0xe801332c
 800e50c:	17ff338c 	.word	0x17ff338c
 800e510:	e8010a7c 	.word	0xe8010a7c

0800e514 <StringBuilder_NeedsAllocation$8509>:
 800e514:	b082      	sub	sp, #8
 800e516:	460a      	mov	r2, r1
 800e518:	4603      	mov	r3, r0
 800e51a:	6880      	ldr	r0, [r0, #8]
 800e51c:	f04f 0c00 	mov.w	ip, #0
 800e520:	4288      	cmp	r0, r1
 800e522:	bfd8      	it	le
 800e524:	f04f 0c01 	movle.w	ip, #1
 800e528:	4660      	mov	r0, ip
 800e52a:	9201      	str	r2, [sp, #4]
 800e52c:	9300      	str	r3, [sp, #0]
 800e52e:	b002      	add	sp, #8
 800e530:	4770      	bx	lr
 800e532:	46c0      	nop			; (mov r8, r8)

0800e534 <StringBuilder_GetNewString$8510>:
 800e534:	b580      	push	{r7, lr}
 800e536:	b08e      	sub	sp, #56	; 0x38
 800e538:	4613      	mov	r3, r2
 800e53a:	4684      	mov	ip, r0
 800e53c:	4696      	mov	lr, r2
 800e53e:	68c0      	ldr	r0, [r0, #12]
        private String GetNewString( String currentString, int requiredLength )
        {
            int newCapacity;
            int maxCapacity = m_MaxCapacity;

            if(requiredLength < 0)
 800e540:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e544:	900d      	str	r0, [sp, #52]	; 0x34
 800e546:	930c      	str	r3, [sp, #48]	; 0x30
 800e548:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 800e54c:	910a      	str	r1, [sp, #40]	; 0x28
 800e54e:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800e552:	dc12      	bgt.n	800e57a <StringBuilder_GetNewString$8510+0x46>
 800e554:	e7ff      	b.n	800e556 <StringBuilder_GetNewString$8510+0x22>
            {
                throw new OutOfMemoryException();
 800e556:	e7ff      	b.n	800e558 <StringBuilder_GetNewString$8510+0x24>
 800e558:	482d      	ldr	r0, [pc, #180]	; (800e610 <StringBuilder_GetNewString$8510+0xdc>)
 800e55a:	4931      	ldr	r1, [pc, #196]	; (800e620 <StringBuilder_GetNewString$8510+0xec>)
 800e55c:	4479      	add	r1, pc
 800e55e:	4408      	add	r0, r1
 800e560:	4a30      	ldr	r2, [pc, #192]	; (800e624 <StringBuilder_GetNewString$8510+0xf0>)
 800e562:	4411      	add	r1, r2
 800e564:	9008      	str	r0, [sp, #32]
 800e566:	f7f2 f92b 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800e56a:	9007      	str	r0, [sp, #28]
 800e56c:	f7ff fc04 	bl	800dd78 <OutOfMemoryException_.ctor$7308>
 800e570:	9808      	ldr	r0, [sp, #32]
 800e572:	9907      	ldr	r1, [sp, #28]
 800e574:	f7f2 f97a 	bl	800086c <TypeSystemManager_Throw$4954>
 800e578:	e7ee      	b.n	800e558 <StringBuilder_GetNewString$8510+0x24>
            }

            if(requiredLength > maxCapacity)
 800e57a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800e57c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e57e:	4288      	cmp	r0, r1
 800e580:	dd12      	ble.n	800e5a8 <StringBuilder_GetNewString$8510+0x74>
 800e582:	e7ff      	b.n	800e584 <StringBuilder_GetNewString$8510+0x50>
            {
#if EXCEPTION_STRINGS
                throw new ArgumentOutOfRangeException( "requiredLength", Environment.GetResourceString( "ArgumentOutOfRange_SmallCapacity" ) );
#else
                throw new ArgumentOutOfRangeException();
 800e584:	e7ff      	b.n	800e586 <StringBuilder_GetNewString$8510+0x52>
 800e586:	4822      	ldr	r0, [pc, #136]	; (800e610 <StringBuilder_GetNewString$8510+0xdc>)
 800e588:	4924      	ldr	r1, [pc, #144]	; (800e61c <StringBuilder_GetNewString$8510+0xe8>)
 800e58a:	4479      	add	r1, pc
 800e58c:	4408      	add	r0, r1
 800e58e:	4a22      	ldr	r2, [pc, #136]	; (800e618 <StringBuilder_GetNewString$8510+0xe4>)
 800e590:	4411      	add	r1, r2
 800e592:	9006      	str	r0, [sp, #24]
 800e594:	f7f2 f914 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800e598:	9005      	str	r0, [sp, #20]
 800e59a:	f7f3 ff58 	bl	800244e <ArgumentOutOfRangeException_.ctor$6074>
 800e59e:	9806      	ldr	r0, [sp, #24]
 800e5a0:	9905      	ldr	r1, [sp, #20]
 800e5a2:	f7f2 f963 	bl	800086c <TypeSystemManager_Throw$4954>
 800e5a6:	e7ee      	b.n	800e586 <StringBuilder_GetNewString$8510+0x52>
#endif
            }

            newCapacity = (currentString.Capacity) * 2; // To force a predicatable growth of 160,320 etc. for testing purposes
 800e5a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e5aa:	f7f3 ffc7 	bl	800253c <String_get_Capacity$2504>
 800e5ae:	0040      	lsls	r0, r0, #1
 800e5b0:	4601      	mov	r1, r0

            if(newCapacity < requiredLength)
 800e5b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e5b4:	4290      	cmp	r0, r2
 800e5b6:	9104      	str	r1, [sp, #16]
 800e5b8:	da03      	bge.n	800e5c2 <StringBuilder_GetNewString$8510+0x8e>
 800e5ba:	e7ff      	b.n	800e5bc <StringBuilder_GetNewString$8510+0x88>
 800e5bc:	980b      	ldr	r0, [sp, #44]	; 0x2c
            {
                newCapacity = requiredLength;
            }
 800e5be:	9004      	str	r0, [sp, #16]
 800e5c0:	e7ff      	b.n	800e5c2 <StringBuilder_GetNewString$8510+0x8e>
 800e5c2:	9804      	ldr	r0, [sp, #16]

            if(newCapacity > maxCapacity)
 800e5c4:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e5c6:	4288      	cmp	r0, r1
 800e5c8:	9003      	str	r0, [sp, #12]
 800e5ca:	dd03      	ble.n	800e5d4 <StringBuilder_GetNewString$8510+0xa0>
 800e5cc:	e7ff      	b.n	800e5ce <StringBuilder_GetNewString$8510+0x9a>
 800e5ce:	980d      	ldr	r0, [sp, #52]	; 0x34
            {
                newCapacity = maxCapacity;
            }
 800e5d0:	9003      	str	r0, [sp, #12]
 800e5d2:	e7ff      	b.n	800e5d4 <StringBuilder_GetNewString$8510+0xa0>
 800e5d4:	9803      	ldr	r0, [sp, #12]

            if(newCapacity <= 0)
 800e5d6:	2800      	cmp	r0, #0
 800e5d8:	9002      	str	r0, [sp, #8]
 800e5da:	dc12      	bgt.n	800e602 <StringBuilder_GetNewString$8510+0xce>
 800e5dc:	e7ff      	b.n	800e5de <StringBuilder_GetNewString$8510+0xaa>
            {
#if EXCEPTION_STRINGS
                throw new ArgumentOutOfRangeException( "newCapacity", Environment.GetResourceString( "ArgumentOutOfRange_NegativeCapacity" ) );
#else
                throw new ArgumentOutOfRangeException();
 800e5de:	e7ff      	b.n	800e5e0 <StringBuilder_GetNewString$8510+0xac>
 800e5e0:	480b      	ldr	r0, [pc, #44]	; (800e610 <StringBuilder_GetNewString$8510+0xdc>)
 800e5e2:	490c      	ldr	r1, [pc, #48]	; (800e614 <StringBuilder_GetNewString$8510+0xe0>)
 800e5e4:	4479      	add	r1, pc
 800e5e6:	4408      	add	r0, r1
 800e5e8:	4a0b      	ldr	r2, [pc, #44]	; (800e618 <StringBuilder_GetNewString$8510+0xe4>)
 800e5ea:	4411      	add	r1, r2
 800e5ec:	9001      	str	r0, [sp, #4]
 800e5ee:	f7f2 f8e7 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800e5f2:	9000      	str	r0, [sp, #0]
 800e5f4:	f7f3 ff2b 	bl	800244e <ArgumentOutOfRangeException_.ctor$6074>
 800e5f8:	9801      	ldr	r0, [sp, #4]
 800e5fa:	9900      	ldr	r1, [sp, #0]
 800e5fc:	f7f2 f936 	bl	800086c <TypeSystemManager_Throw$4954>
 800e600:	e7ee      	b.n	800e5e0 <StringBuilder_GetNewString$8510+0xac>
#endif
            }

            return String.GetStringForStringBuilder( currentString, newCapacity );
 800e602:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e604:	9902      	ldr	r1, [sp, #8]
 800e606:	f7f4 fe90 	bl	800332a <String_GetStringForStringBuilder$2619>
 800e60a:	b00e      	add	sp, #56	; 0x38
 800e60c:	bd80      	pop	{r7, pc}
 800e60e:	46c0      	nop			; (mov r8, r8)
 800e610:	ffffea38 	.word	0xffffea38
 800e614:	17ff31ec 	.word	0x17ff31ec
 800e618:	e8010a7c 	.word	0xe8010a7c
 800e61c:	17ff3246 	.word	0x17ff3246
 800e620:	17ff3274 	.word	0x17ff3274
 800e624:	e801332c 	.word	0xe801332c

0800e628 <StringBuilder_ReplaceString$8511>:
 800e628:	b580      	push	{r7, lr}
 800e62a:	b083      	sub	sp, #12
 800e62c:	4613      	mov	r3, r2
 800e62e:	468c      	mov	ip, r1
 800e630:	4686      	mov	lr, r0
 800e632:	6081      	str	r1, [r0, #8]
 800e634:	6102      	str	r2, [r0, #16]
 800e636:	f8cd c008 	str.w	ip, [sp, #8]
 800e63a:	f8cd e004 	str.w	lr, [sp, #4]
 800e63e:	9300      	str	r3, [sp, #0]
 800e640:	b003      	add	sp, #12
 800e642:	bd80      	pop	{r7, pc}

0800e644 <StringBuilder_Append$8506>:
 800e644:	b580      	push	{r7, lr}
 800e646:	b094      	sub	sp, #80	; 0x50
 800e648:	468c      	mov	ip, r1
 800e64a:	f04f 0e00 	mov.w	lr, #0
 800e64e:	f8cd e04c 	str.w	lr, [sp, #76]	; 0x4c
        // Appends an array of characters at the end of this string builder. The capacity is adjusted as needed. 
        public StringBuilder Append( char[] value, int startIndex, int charCount )
        {
            int requiredLength;

            if(value == null)
 800e652:	2900      	cmp	r1, #0
 800e654:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 800e658:	9311      	str	r3, [sp, #68]	; 0x44
 800e65a:	9010      	str	r0, [sp, #64]	; 0x40
 800e65c:	920f      	str	r2, [sp, #60]	; 0x3c
 800e65e:	d105      	bne.n	800e66c <StringBuilder_Append$8506+0x28>
 800e660:	e7ff      	b.n	800e662 <StringBuilder_Append$8506+0x1e>
            {
                if(startIndex == 0 && charCount == 0)
 800e662:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800e664:	2800      	cmp	r0, #0
 800e666:	f040 80a3 	bne.w	800e7b0 <StringBuilder_Append$8506+0x16c>
 800e66a:	e09d      	b.n	800e7a8 <StringBuilder_Append$8506+0x164>
#else
                throw new ArgumentNullException();
#endif
            }

            if(charCount == 0)
 800e66c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800e66e:	2800      	cmp	r0, #0
 800e670:	d103      	bne.n	800e67a <StringBuilder_Append$8506+0x36>
 800e672:	e7ff      	b.n	800e674 <StringBuilder_Append$8506+0x30>
            {
                return this;
 800e674:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e676:	900e      	str	r0, [sp, #56]	; 0x38
 800e678:	e082      	b.n	800e780 <StringBuilder_Append$8506+0x13c>
            }

            if(startIndex < 0)
 800e67a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800e67c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e680:	dc12      	bgt.n	800e6a8 <StringBuilder_Append$8506+0x64>
 800e682:	e7ff      	b.n	800e684 <StringBuilder_Append$8506+0x40>
            {
#if EXCEPTION_STRINGS
                throw new ArgumentOutOfRangeException( "startIndex", Environment.GetResourceString( "ArgumentOutOfRange_GenericPositive" ) );
#else
                throw new ArgumentOutOfRangeException();
 800e684:	e7ff      	b.n	800e686 <StringBuilder_Append$8506+0x42>
 800e686:	484c      	ldr	r0, [pc, #304]	; (800e7b8 <StringBuilder_Append$8506+0x174>)
 800e688:	494f      	ldr	r1, [pc, #316]	; (800e7c8 <StringBuilder_Append$8506+0x184>)
 800e68a:	4479      	add	r1, pc
 800e68c:	4408      	add	r0, r1
 800e68e:	4a4c      	ldr	r2, [pc, #304]	; (800e7c0 <StringBuilder_Append$8506+0x17c>)
 800e690:	4411      	add	r1, r2
 800e692:	900d      	str	r0, [sp, #52]	; 0x34
 800e694:	f7f2 f894 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800e698:	900c      	str	r0, [sp, #48]	; 0x30
 800e69a:	f7f3 fed8 	bl	800244e <ArgumentOutOfRangeException_.ctor$6074>
 800e69e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e6a0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e6a2:	f7f2 f8e3 	bl	800086c <TypeSystemManager_Throw$4954>
 800e6a6:	e7ee      	b.n	800e686 <StringBuilder_Append$8506+0x42>
#endif
            }
            if(charCount < 0)
 800e6a8:	9811      	ldr	r0, [sp, #68]	; 0x44
 800e6aa:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e6ae:	dc12      	bgt.n	800e6d6 <StringBuilder_Append$8506+0x92>
 800e6b0:	e7ff      	b.n	800e6b2 <StringBuilder_Append$8506+0x6e>
            {
#if EXCEPTION_STRINGS
                throw new ArgumentOutOfRangeException( "count", Environment.GetResourceString( "ArgumentOutOfRange_GenericPositive" ) );
#else
                throw new ArgumentOutOfRangeException();
 800e6b2:	e7ff      	b.n	800e6b4 <StringBuilder_Append$8506+0x70>
 800e6b4:	4840      	ldr	r0, [pc, #256]	; (800e7b8 <StringBuilder_Append$8506+0x174>)
 800e6b6:	4943      	ldr	r1, [pc, #268]	; (800e7c4 <StringBuilder_Append$8506+0x180>)
 800e6b8:	4479      	add	r1, pc
 800e6ba:	4408      	add	r0, r1
 800e6bc:	4a40      	ldr	r2, [pc, #256]	; (800e7c0 <StringBuilder_Append$8506+0x17c>)
 800e6be:	4411      	add	r1, r2
 800e6c0:	900b      	str	r0, [sp, #44]	; 0x2c
 800e6c2:	f7f2 f87d 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800e6c6:	900a      	str	r0, [sp, #40]	; 0x28
 800e6c8:	f7f3 fec1 	bl	800244e <ArgumentOutOfRangeException_.ctor$6074>
 800e6cc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800e6ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e6d0:	f7f2 f8cc 	bl	800086c <TypeSystemManager_Throw$4954>
 800e6d4:	e7ee      	b.n	800e6b4 <StringBuilder_Append$8506+0x70>
////            }
////
////        }
////
////        // Check values and set defaults
////        if(persistedString == null)
 800e6d6:	9812      	ldr	r0, [sp, #72]	; 0x48
 800e6d8:	6881      	ldr	r1, [r0, #8]
                throw new ArgumentOutOfRangeException( "count", Environment.GetResourceString( "ArgumentOutOfRange_GenericPositive" ) );
#else
                throw new ArgumentOutOfRangeException();
#endif
            }
            if(charCount > value.Length - startIndex)
 800e6da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e6dc:	1a89      	subs	r1, r1, r2
 800e6de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e6e0:	428b      	cmp	r3, r1
 800e6e2:	dd12      	ble.n	800e70a <StringBuilder_Append$8506+0xc6>
 800e6e4:	e7ff      	b.n	800e6e6 <StringBuilder_Append$8506+0xa2>
            {
#if EXCEPTION_STRINGS
                throw new ArgumentOutOfRangeException( "count", Environment.GetResourceString( "ArgumentOutOfRange_Index" ) );
#else
                throw new ArgumentOutOfRangeException();
 800e6e6:	e7ff      	b.n	800e6e8 <StringBuilder_Append$8506+0xa4>
 800e6e8:	4833      	ldr	r0, [pc, #204]	; (800e7b8 <StringBuilder_Append$8506+0x174>)
 800e6ea:	4934      	ldr	r1, [pc, #208]	; (800e7bc <StringBuilder_Append$8506+0x178>)
 800e6ec:	4479      	add	r1, pc
 800e6ee:	4408      	add	r0, r1
 800e6f0:	4a33      	ldr	r2, [pc, #204]	; (800e7c0 <StringBuilder_Append$8506+0x17c>)
 800e6f2:	4411      	add	r1, r2
 800e6f4:	9009      	str	r0, [sp, #36]	; 0x24
 800e6f6:	f7f2 f863 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800e6fa:	9008      	str	r0, [sp, #32]
 800e6fc:	f7f3 fea7 	bl	800244e <ArgumentOutOfRangeException_.ctor$6074>
 800e700:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e702:	9908      	ldr	r1, [sp, #32]
 800e704:	f7f2 f8b2 	bl	800086c <TypeSystemManager_Throw$4954>
 800e708:	e7ee      	b.n	800e6e8 <StringBuilder_Append$8506+0xa4>
 800e70a:	a913      	add	r1, sp, #76	; 0x4c
#endif
            }

            Thread th;
            String currentString = GetThreadSafeString( out th );
 800e70c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e70e:	f7ff fe55 	bl	800e3bc <StringBuilder_GetThreadSafeString$8493>
 800e712:	4601      	mov	r1, r0
 800e714:	68c2      	ldr	r2, [r0, #12]

            int currentLength = currentString.Length;
            requiredLength = currentLength + charCount;
 800e716:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e718:	eb02 0c03 	add.w	ip, r2, r3
 800e71c:	46e6      	mov	lr, ip
            if(NeedsAllocation( currentString, requiredLength ))
 800e71e:	9107      	str	r1, [sp, #28]
 800e720:	4661      	mov	r1, ip
 800e722:	f8cd e018 	str.w	lr, [sp, #24]
 800e726:	9205      	str	r2, [sp, #20]
 800e728:	f7ff fef4 	bl	800e514 <StringBuilder_NeedsAllocation$8509>
 800e72c:	f010 0fff 	tst.w	r0, #255	; 0xff
 800e730:	d014      	beq.n	800e75c <StringBuilder_Append$8506+0x118>
 800e732:	e7ff      	b.n	800e734 <StringBuilder_Append$8506+0xf0>
            {
                String newString = GetNewString( currentString, requiredLength );
 800e734:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e736:	9907      	ldr	r1, [sp, #28]
 800e738:	9a06      	ldr	r2, [sp, #24]
 800e73a:	f7ff fefb 	bl	800e534 <StringBuilder_GetNewString$8510>
                newString.AppendInPlace( value, startIndex, charCount, currentLength );
 800e73e:	4669      	mov	r1, sp
 800e740:	9a05      	ldr	r2, [sp, #20]
 800e742:	600a      	str	r2, [r1, #0]
 800e744:	9004      	str	r0, [sp, #16]
 800e746:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e748:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e74a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e74c:	f7f4 fdb0 	bl	80032b0 <String_AppendInPlace$2617>
                ReplaceString( th, newString );
 800e750:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800e752:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e754:	9a04      	ldr	r2, [sp, #16]
 800e756:	f7ff ff67 	bl	800e628 <StringBuilder_ReplaceString$8511>
            }
 800e75a:	e00e      	b.n	800e77a <StringBuilder_Append$8506+0x136>
            else
            {
                currentString.AppendInPlace( value, startIndex, charCount, currentLength );
 800e75c:	4668      	mov	r0, sp
 800e75e:	9905      	ldr	r1, [sp, #20]
 800e760:	6001      	str	r1, [r0, #0]
 800e762:	9807      	ldr	r0, [sp, #28]
 800e764:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e766:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e768:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e76a:	f7f4 fda1 	bl	80032b0 <String_AppendInPlace$2617>
                ReplaceString( th, currentString );
 800e76e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800e770:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e772:	9a07      	ldr	r2, [sp, #28]
 800e774:	f7ff ff58 	bl	800e628 <StringBuilder_ReplaceString$8511>
            }
 800e778:	e7ff      	b.n	800e77a <StringBuilder_Append$8506+0x136>

            return this;
 800e77a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e77c:	900e      	str	r0, [sp, #56]	; 0x38
 800e77e:	e7ff      	b.n	800e780 <StringBuilder_Append$8506+0x13c>
        }
 800e780:	980e      	ldr	r0, [sp, #56]	; 0x38
 800e782:	b014      	add	sp, #80	; 0x50
 800e784:	bd80      	pop	{r7, pc}
                    return this;
                }
#if EXCEPTION_STRINGS
                throw new ArgumentNullException( "value" );
#else
                throw new ArgumentNullException();
 800e786:	480c      	ldr	r0, [pc, #48]	; (800e7b8 <StringBuilder_Append$8506+0x174>)
 800e788:	4910      	ldr	r1, [pc, #64]	; (800e7cc <StringBuilder_Append$8506+0x188>)
 800e78a:	4479      	add	r1, pc
 800e78c:	4408      	add	r0, r1
 800e78e:	4a10      	ldr	r2, [pc, #64]	; (800e7d0 <StringBuilder_Append$8506+0x18c>)
 800e790:	4411      	add	r1, r2
 800e792:	9003      	str	r0, [sp, #12]
 800e794:	f7f2 f814 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800e798:	9002      	str	r0, [sp, #8]
 800e79a:	f7f2 f85e 	bl	800085a <ArgumentNullException_.ctor$6069>
 800e79e:	9803      	ldr	r0, [sp, #12]
 800e7a0:	9902      	ldr	r1, [sp, #8]
 800e7a2:	f7f2 f863 	bl	800086c <TypeSystemManager_Throw$4954>
 800e7a6:	e7ee      	b.n	800e786 <StringBuilder_Append$8506+0x142>
        {
            int requiredLength;

            if(value == null)
            {
                if(startIndex == 0 && charCount == 0)
 800e7a8:	9811      	ldr	r0, [sp, #68]	; 0x44
 800e7aa:	2800      	cmp	r0, #0
 800e7ac:	d001      	beq.n	800e7b2 <StringBuilder_Append$8506+0x16e>
 800e7ae:	e7ff      	b.n	800e7b0 <StringBuilder_Append$8506+0x16c>
                    return this;
                }
#if EXCEPTION_STRINGS
                throw new ArgumentNullException( "value" );
#else
                throw new ArgumentNullException();
 800e7b0:	e7e9      	b.n	800e786 <StringBuilder_Append$8506+0x142>

            if(value == null)
            {
                if(startIndex == 0 && charCount == 0)
                {
                    return this;
 800e7b2:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e7b4:	900e      	str	r0, [sp, #56]	; 0x38
 800e7b6:	e7e3      	b.n	800e780 <StringBuilder_Append$8506+0x13c>
 800e7b8:	ffffea38 	.word	0xffffea38
 800e7bc:	17ff30e4 	.word	0x17ff30e4
 800e7c0:	e8010a7c 	.word	0xe8010a7c
 800e7c4:	17ff3118 	.word	0x17ff3118
 800e7c8:	17ff3146 	.word	0x17ff3146
 800e7cc:	17ff3046 	.word	0x17ff3046
 800e7d0:	e801049c 	.word	0xe801049c

0800e7d4 <StringBuilder_Append$8529>:
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b086      	sub	sp, #24
 800e7d8:	460a      	mov	r2, r1
 800e7da:	4603      	mov	r3, r0
 800e7dc:	9105      	str	r1, [sp, #20]
        public void CopyTo( int sourceIndex, char[] destination, int destinationIndex, int count )
        {
            if(destination == null)
            {
#if EXCEPTION_STRINGS
                throw new ArgumentNullException( "destination" );
 800e7de:	490c      	ldr	r1, [pc, #48]	; (800e810 <StringBuilder_Append$8529+0x3c>)
 800e7e0:	f8df c030 	ldr.w	ip, [pc, #48]	; 800e814 <StringBuilder_Append$8529+0x40>
 800e7e4:	44fc      	add	ip, pc
 800e7e6:	4461      	add	r1, ip
 800e7e8:	f8d1 10e4 	ldr.w	r1, [r1, #228]	; 0xe4
 800e7ec:	f10d 0c14 	add.w	ip, sp, #20
        // Appends an uint to this string builder. 
        // The capacity is adjusted as needed. 
        [CLSCompliant( false )]
        public StringBuilder Append( uint value )
        {
            return Append( value.ToString( CultureInfo.CurrentCulture ) );
 800e7f0:	f1ac 0c08 	sub.w	ip, ip, #8
 800e7f4:	9004      	str	r0, [sp, #16]
 800e7f6:	4660      	mov	r0, ip
 800e7f8:	9303      	str	r3, [sp, #12]
 800e7fa:	9202      	str	r2, [sp, #8]
 800e7fc:	f7f4 fe89 	bl	8003512 <UInt32_ToString$2739>
 800e800:	9904      	ldr	r1, [sp, #16]
 800e802:	9001      	str	r0, [sp, #4]
 800e804:	4608      	mov	r0, r1
 800e806:	9901      	ldr	r1, [sp, #4]
 800e808:	f7fe faf8 	bl	800cdfc <StringBuilder_Append$8507>
 800e80c:	b006      	add	sp, #24
 800e80e:	bd80      	pop	{r7, pc}
 800e810:	fffffe3c 	.word	0xfffffe3c
 800e814:	17ff2fec 	.word	0x17ff2fec

0800e818 <StringBuilder_FormatError$8554>:
        {
            return AppendFormat( null, format, args );
        }

        private static void FormatError()
        {
 800e818:	b580      	push	{r7, lr}
 800e81a:	b082      	sub	sp, #8
 800e81c:	e7ff      	b.n	800e81e <StringBuilder_FormatError$8554+0x6>
#if EXCEPTION_STRINGS
            throw new FormatException( Environment.GetResourceString( "Format_InvalidString" ) );
#else
            throw new FormatException();
 800e81e:	4808      	ldr	r0, [pc, #32]	; (800e840 <StringBuilder_FormatError$8554+0x28>)
 800e820:	4908      	ldr	r1, [pc, #32]	; (800e844 <StringBuilder_FormatError$8554+0x2c>)
 800e822:	4479      	add	r1, pc
 800e824:	4408      	add	r0, r1
 800e826:	4a08      	ldr	r2, [pc, #32]	; (800e848 <StringBuilder_FormatError$8554+0x30>)
 800e828:	4411      	add	r1, r2
 800e82a:	9001      	str	r0, [sp, #4]
 800e82c:	f7f1 ffc8 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800e830:	9000      	str	r0, [sp, #0]
 800e832:	f7fc fd2b 	bl	800b28c <FormatException_.ctor$7045>
 800e836:	9801      	ldr	r0, [sp, #4]
 800e838:	9900      	ldr	r1, [sp, #0]
 800e83a:	f7f2 f817 	bl	800086c <TypeSystemManager_Throw$4954>
 800e83e:	e7ee      	b.n	800e81e <StringBuilder_FormatError$8554+0x6>
 800e840:	ffffea38 	.word	0xffffea38
 800e844:	17ff2fae 	.word	0x17ff2fae
 800e848:	e8012eec 	.word	0xe8012eec

0800e84c <MemberInfo_Equals$8808>:
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b08a      	sub	sp, #40	; 0x28
 800e850:	460a      	mov	r2, r1
        // 
        public StringBuilder( String value )
            : this( value, DefaultCapacity )
        {
        }

 800e852:	460b      	mov	r3, r1
 800e854:	2900      	cmp	r1, #0
 800e856:	9307      	str	r3, [sp, #28]
 800e858:	9206      	str	r2, [sp, #24]
 800e85a:	9005      	str	r0, [sp, #20]
 800e85c:	d103      	bne.n	800e866 <MemberInfo_Equals$8808+0x1a>
 800e85e:	e7ff      	b.n	800e860 <MemberInfo_Equals$8808+0x14>
 800e860:	2000      	movs	r0, #0
        // Creates a new string builder from the specified string with the specified 
        // capacity.  If value is a null String (i.e., if it represents 
 800e862:	9004      	str	r0, [sp, #16]
 800e864:	e030      	b.n	800e8c8 <MemberInfo_Equals$8808+0x7c>
        // String.NullString) then the new string builder will also be null 
        // (i.e., it will also represent String.NullString).
 800e866:	481a      	ldr	r0, [pc, #104]	; (800e8d0 <MemberInfo_Equals$8808+0x84>)
 800e868:	491a      	ldr	r1, [pc, #104]	; (800e8d4 <MemberInfo_Equals$8808+0x88>)
 800e86a:	4479      	add	r1, pc
 800e86c:	4401      	add	r1, r0
 800e86e:	9807      	ldr	r0, [sp, #28]
 800e870:	f7f2 fe63 	bl	800153a <TypeSystemManager_CastToTypeNoThrow$4949>
 800e874:	2800      	cmp	r0, #0
 800e876:	d103      	bne.n	800e880 <MemberInfo_Equals$8808+0x34>
 800e878:	e7ff      	b.n	800e87a <MemberInfo_Equals$8808+0x2e>
 800e87a:	2000      	movs	r0, #0
        // The maximum number of characters this string may contain is set by capacity.
        // 
 800e87c:	9004      	str	r0, [sp, #16]
 800e87e:	e023      	b.n	800e8c8 <MemberInfo_Equals$8808+0x7c>
        public StringBuilder( String value, int capacity )
            : this( value, 0, ((value != null) ? value.Length : 0), capacity )
 800e880:	9805      	ldr	r0, [sp, #20]
 800e882:	f7ff fb2e 	bl	800dee2 <Type_GetHashCode$7550>
        public StringBuilder()
            : this( DefaultCapacity )
        {
        }

        // Create a new empty string builder (i.e., it represents String.Empty)
 800e886:	9906      	ldr	r1, [sp, #24]
 800e888:	f101 0208 	add.w	r2, r1, #8
 800e88c:	9208      	str	r2, [sp, #32]
 800e88e:	2200      	movs	r2, #0
 800e890:	9209      	str	r2, [sp, #36]	; 0x24
            if(value == null)
            {
                value = String.Empty;
            }

            if(startIndex > value.Length - length)
 800e892:	9b08      	ldr	r3, [sp, #32]
            : this( value, DefaultCapacity )
        {
        }

        // Creates a new string builder from the specified string with the specified 
        // capacity.  If value is a null String (i.e., if it represents 
 800e894:	f1a3 0108 	sub.w	r1, r3, #8
 800e898:	9209      	str	r2, [sp, #36]	; 0x24
 800e89a:	ab09      	add	r3, sp, #36	; 0x24
 800e89c:	3b08      	subs	r3, #8
 800e89e:	9003      	str	r0, [sp, #12]
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	9202      	str	r2, [sp, #8]
 800e8a4:	f7f2 f80a 	bl	80008bc <UIntPtr_.ctor$2864>
        public StringBuilder()
            : this( DefaultCapacity )
        {
        }

        // Create a new empty string builder (i.e., it represents String.Empty)
 800e8a8:	9809      	ldr	r0, [sp, #36]	; 0x24
////
////        // Assign
////        m_MaxCapacity = persistedMaxCapacity;
////        m_StringValue = String.GetStringForStringBuilder( persistedString, 0, persistedString.Length, persistedCapacity );
////        VerifyClassInvariant();
////    }
 800e8aa:	6840      	ldr	r0, [r0, #4]
        // String.NullString) then the new string builder will also be null 
        // (i.e., it will also represent String.NullString).
        // The maximum number of characters this string may contain is set by capacity.
        // 
        public StringBuilder( String value, int capacity )
            : this( value, 0, ((value != null) ? value.Length : 0), capacity )
 800e8ac:	69c0      	ldr	r0, [r0, #28]
 800e8ae:	6940      	ldr	r0, [r0, #20]
 800e8b0:	9906      	ldr	r1, [sp, #24]
 800e8b2:	9001      	str	r0, [sp, #4]
 800e8b4:	4608      	mov	r0, r1
 800e8b6:	9a01      	ldr	r2, [sp, #4]
 800e8b8:	4790      	blx	r2
 800e8ba:	9903      	ldr	r1, [sp, #12]
 800e8bc:	4281      	cmp	r1, r0
 800e8be:	9802      	ldr	r0, [sp, #8]
 800e8c0:	bf08      	it	eq
 800e8c2:	2001      	moveq	r0, #1
 800e8c4:	9004      	str	r0, [sp, #16]
 800e8c6:	e7ff      	b.n	800e8c8 <MemberInfo_Equals$8808+0x7c>
 800e8c8:	9804      	ldr	r0, [sp, #16]
 800e8ca:	b00a      	add	sp, #40	; 0x28
 800e8cc:	bd80      	pop	{r7, pc}
 800e8ce:	46c0      	nop			; (mov r8, r8)
 800e8d0:	e801350c 	.word	0xe801350c
 800e8d4:	17ff2f66 	.word	0x17ff2f66

0800e8d8 <MemberInfo_get_MetadataToken$8816>:
        #endregion

        public virtual int MetadataToken
        {
            get
            {
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b082      	sub	sp, #8
 800e8dc:	e7ff      	b.n	800e8de <MemberInfo_get_MetadataToken$8816+0x6>
                throw new InvalidOperationException();
 800e8de:	4808      	ldr	r0, [pc, #32]	; (800e900 <MemberInfo_get_MetadataToken$8816+0x28>)
 800e8e0:	4908      	ldr	r1, [pc, #32]	; (800e904 <MemberInfo_get_MetadataToken$8816+0x2c>)
 800e8e2:	4479      	add	r1, pc
 800e8e4:	4408      	add	r0, r1
 800e8e6:	4a08      	ldr	r2, [pc, #32]	; (800e908 <MemberInfo_get_MetadataToken$8816+0x30>)
 800e8e8:	4411      	add	r1, r2
 800e8ea:	9001      	str	r0, [sp, #4]
 800e8ec:	f7f1 ff68 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800e8f0:	9000      	str	r0, [sp, #0]
 800e8f2:	f7fc fcd3 	bl	800b29c <InvalidOperationException_.ctor$7124>
 800e8f6:	9801      	ldr	r0, [sp, #4]
 800e8f8:	9900      	ldr	r1, [sp, #0]
 800e8fa:	f7f1 ffb7 	bl	800086c <TypeSystemManager_Throw$4954>
 800e8fe:	e7ee      	b.n	800e8de <MemberInfo_get_MetadataToken$8816+0x6>
 800e900:	ffffea38 	.word	0xffffea38
 800e904:	17ff2eee 	.word	0x17ff2eee
 800e908:	e801313c 	.word	0xe801313c

0800e90c <MemberInfo_get_MetadataTokenInternal$8817>:
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b082      	sub	sp, #8
 800e910:	4601      	mov	r1, r0

        internal virtual int MetadataTokenInternal
        {
            get
            {
                return MetadataToken;
 800e912:	9101      	str	r1, [sp, #4]
 800e914:	f7ff ffe0 	bl	800e8d8 <MemberInfo_get_MetadataToken$8816>
 800e918:	9000      	str	r0, [sp, #0]
 800e91a:	4608      	mov	r0, r1
 800e91c:	b002      	add	sp, #8
 800e91e:	bd80      	pop	{r7, pc}

0800e920 <CultureInfo_GetFormat$9581>:
 800e920:	b580      	push	{r7, lr}
 800e922:	b084      	sub	sp, #16
 800e924:	460a      	mov	r2, r1
////    }


        public virtual Object GetFormat( Type formatType )
        {
            if(formatType == typeof( NumberFormatInfo ))
 800e926:	4b0d      	ldr	r3, [pc, #52]	; (800e95c <CultureInfo_GetFormat$9581+0x3c>)
 800e928:	f8df c034 	ldr.w	ip, [pc, #52]	; 800e960 <CultureInfo_GetFormat$9581+0x40>
 800e92c:	44fc      	add	ip, pc
 800e92e:	4463      	add	r3, ip
 800e930:	9003      	str	r0, [sp, #12]
 800e932:	4608      	mov	r0, r1
 800e934:	4619      	mov	r1, r3
 800e936:	9202      	str	r2, [sp, #8]
 800e938:	f7ff fab2 	bl	800dea0 <Type_op_Equality$7551>
 800e93c:	f010 0fff 	tst.w	r0, #255	; 0xff
 800e940:	d005      	beq.n	800e94e <CultureInfo_GetFormat$9581+0x2e>
 800e942:	e7ff      	b.n	800e944 <CultureInfo_GetFormat$9581+0x24>
            {
                return NumberFormat;
 800e944:	9803      	ldr	r0, [sp, #12]
 800e946:	f000 f80d 	bl	800e964 <CultureInfo_get_NumberFormat$9582>
 800e94a:	9001      	str	r0, [sp, #4]
 800e94c:	e002      	b.n	800e954 <CultureInfo_GetFormat$9581+0x34>
 800e94e:	2000      	movs	r0, #0
////        if(formatType == typeof( DateTimeFormatInfo ))
////        {
////            return DateTimeFormat;
////        }

            return null;
 800e950:	9001      	str	r0, [sp, #4]
 800e952:	e7ff      	b.n	800e954 <CultureInfo_GetFormat$9581+0x34>
        }
 800e954:	9801      	ldr	r0, [sp, #4]
 800e956:	b004      	add	sp, #16
 800e958:	bd80      	pop	{r7, pc}
 800e95a:	46c0      	nop			; (mov r8, r8)
 800e95c:	e8013620 	.word	0xe8013620
 800e960:	17ff2ea4 	.word	0x17ff2ea4

0800e964 <CultureInfo_get_NumberFormat$9582>:
 800e964:	b580      	push	{r7, lr}
 800e966:	b084      	sub	sp, #16
 800e968:	4601      	mov	r1, r0
        public virtual NumberFormatInfo NumberFormat
        {
            get
            {
////            CultureInfo.CheckNeutral( this );
                if(numInfo == null)
 800e96a:	6900      	ldr	r0, [r0, #16]
 800e96c:	2800      	cmp	r0, #0
 800e96e:	9103      	str	r1, [sp, #12]
 800e970:	d117      	bne.n	800e9a2 <CultureInfo_get_NumberFormat$9582+0x3e>
 800e972:	e7ff      	b.n	800e974 <CultureInfo_get_NumberFormat$9582+0x10>
                {
                    NumberFormatInfo temp = new NumberFormatInfo( this.m_cultureTableRecord );
 800e974:	9803      	ldr	r0, [sp, #12]
 800e976:	6981      	ldr	r1, [r0, #24]
 800e978:	4a0c      	ldr	r2, [pc, #48]	; (800e9ac <CultureInfo_get_NumberFormat$9582+0x48>)
 800e97a:	4b0d      	ldr	r3, [pc, #52]	; (800e9b0 <CultureInfo_get_NumberFormat$9582+0x4c>)
 800e97c:	447b      	add	r3, pc
 800e97e:	18d0      	adds	r0, r2, r3
 800e980:	4a0c      	ldr	r2, [pc, #48]	; (800e9b4 <CultureInfo_get_NumberFormat$9582+0x50>)
 800e982:	441a      	add	r2, r3
 800e984:	9102      	str	r1, [sp, #8]
 800e986:	4611      	mov	r1, r2
 800e988:	f7f1 ff1a 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800e98c:	9001      	str	r0, [sp, #4]
 800e98e:	9902      	ldr	r1, [sp, #8]
 800e990:	f000 f81c 	bl	800e9cc <NumberFormatInfo_.ctor$9714>
    
                    temp.isReadOnly = m_isReadOnly;
 800e994:	9803      	ldr	r0, [sp, #12]
 800e996:	7a01      	ldrb	r1, [r0, #8]
 800e998:	9a01      	ldr	r2, [sp, #4]
 800e99a:	f882 107c 	strb.w	r1, [r2, #124]	; 0x7c
 800e99e:	6102      	str	r2, [r0, #16]
    
                    numInfo = temp;
                }
 800e9a0:	e7ff      	b.n	800e9a2 <CultureInfo_get_NumberFormat$9582+0x3e>
                return (numInfo);
 800e9a2:	9803      	ldr	r0, [sp, #12]
 800e9a4:	6900      	ldr	r0, [r0, #16]
 800e9a6:	b004      	add	sp, #16
 800e9a8:	bd80      	pop	{r7, pc}
 800e9aa:	46c0      	nop			; (mov r8, r8)
 800e9ac:	ffffea38 	.word	0xffffea38
 800e9b0:	17ff2e54 	.word	0x17ff2e54
 800e9b4:	e80135fc 	.word	0xe80135fc

0800e9b8 <CultureInfo_.ctor$9575>:
 800e9b8:	b081      	sub	sp, #4
 800e9ba:	4601      	mov	r1, r0
 800e9bc:	2200      	movs	r2, #0
 800e9be:	7202      	strb	r2, [r0, #8]
 800e9c0:	60c2      	str	r2, [r0, #12]
 800e9c2:	6102      	str	r2, [r0, #16]
 800e9c4:	6142      	str	r2, [r0, #20]
 800e9c6:	9100      	str	r1, [sp, #0]
 800e9c8:	b001      	add	sp, #4
 800e9ca:	4770      	bx	lr

0800e9cc <NumberFormatInfo_.ctor$9714>:
 800e9cc:	b5b0      	push	{r4, r5, r7, lr}
 800e9ce:	b08a      	sub	sp, #40	; 0x28
 800e9d0:	460a      	mov	r2, r1
 800e9d2:	4603      	mov	r3, r0
 800e9d4:	f8df c14c 	ldr.w	ip, [pc, #332]	; 800eb24 <NumberFormatInfo_.ctor$9714+0x158>
 800e9d8:	f8df e14c 	ldr.w	lr, [pc, #332]	; 800eb28 <NumberFormatInfo_.ctor$9714+0x15c>
 800e9dc:	44fe      	add	lr, pc
 800e9de:	f85c c00e 	ldr.w	ip, [ip, lr]
////    //
////    internal const int zh_CHT_CultureID     = 0x7c04;
////    // Serbian Neutral culture ID.
////    internal const int sr_CultureID         = 0x7c1a;
////    internal const int sr_SP_Latn_CultureID = 0x081a;
////
 800e9e2:	4c52      	ldr	r4, [pc, #328]	; (800eb2c <NumberFormatInfo_.ctor$9714+0x160>)
 800e9e4:	4474      	add	r4, lr
 800e9e6:	4d52      	ldr	r5, [pc, #328]	; (800eb30 <NumberFormatInfo_.ctor$9714+0x164>)
 800e9e8:	4475      	add	r5, lr
 800e9ea:	9009      	str	r0, [sp, #36]	; 0x24
 800e9ec:	4620      	mov	r0, r4
 800e9ee:	9108      	str	r1, [sp, #32]
 800e9f0:	4629      	mov	r1, r5
 800e9f2:	9207      	str	r2, [sp, #28]
 800e9f4:	4662      	mov	r2, ip
 800e9f6:	9406      	str	r4, [sp, #24]
 800e9f8:	9505      	str	r5, [sp, #20]
 800e9fa:	f8cd e010 	str.w	lr, [sp, #16]
 800e9fe:	9303      	str	r3, [sp, #12]
 800ea00:	f7f3 fbce 	bl	80021a0 <DefaultTypeSystemManager_AllocateArray$4962>
 800ea04:	2103      	movs	r1, #3
 800ea06:	60c1      	str	r1, [r0, #12]
 800ea08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ea0a:	6090      	str	r0, [r2, #8]
 800ea0c:	4849      	ldr	r0, [pc, #292]	; (800eb34 <NumberFormatInfo_.ctor$9714+0x168>)
 800ea0e:	9b04      	ldr	r3, [sp, #16]
 800ea10:	58c2      	ldr	r2, [r0, r3]
////    // Ietf name registry location
 800ea12:	9806      	ldr	r0, [sp, #24]
 800ea14:	f8dd c014 	ldr.w	ip, [sp, #20]
 800ea18:	9102      	str	r1, [sp, #8]
 800ea1a:	4661      	mov	r1, ip
 800ea1c:	f7f3 fbc0 	bl	80021a0 <DefaultTypeSystemManager_AllocateArray$4962>
 800ea20:	9902      	ldr	r1, [sp, #8]
 800ea22:	60c1      	str	r1, [r0, #12]
 800ea24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ea26:	60d0      	str	r0, [r2, #12]
 800ea28:	4843      	ldr	r0, [pc, #268]	; (800eb38 <NumberFormatInfo_.ctor$9714+0x16c>)
 800ea2a:	9b04      	ldr	r3, [sp, #16]
 800ea2c:	58c2      	ldr	r2, [r0, r3]
////    internal const string ietfRegistryKey = "SYSTEM\\CurrentControlSet\\Control\\Nls\\IetfLanguage";
 800ea2e:	9806      	ldr	r0, [sp, #24]
 800ea30:	9905      	ldr	r1, [sp, #20]
 800ea32:	f7f3 fbb5 	bl	80021a0 <DefaultTypeSystemManager_AllocateArray$4962>
 800ea36:	9902      	ldr	r1, [sp, #8]
 800ea38:	60c1      	str	r1, [r0, #12]
 800ea3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ea3c:	6110      	str	r0, [r2, #16]
 800ea3e:	483f      	ldr	r0, [pc, #252]	; (800eb3c <NumberFormatInfo_.ctor$9714+0x170>)
 800ea40:	9b04      	ldr	r3, [sp, #16]
 800ea42:	4418      	add	r0, r3
 800ea44:	6150      	str	r0, [r2, #20]
 800ea46:	483e      	ldr	r0, [pc, #248]	; (800eb40 <NumberFormatInfo_.ctor$9714+0x174>)
 800ea48:	4418      	add	r0, r3
 800ea4a:	6190      	str	r0, [r2, #24]
 800ea4c:	483d      	ldr	r0, [pc, #244]	; (800eb44 <NumberFormatInfo_.ctor$9714+0x178>)
 800ea4e:	4418      	add	r0, r3
 800ea50:	61d0      	str	r0, [r2, #28]
 800ea52:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 800eb48 <NumberFormatInfo_.ctor$9714+0x17c>
 800ea56:	449c      	add	ip, r3
 800ea58:	f8c2 c020 	str.w	ip, [r2, #32]
 800ea5c:	f8c2 c024 	str.w	ip, [r2, #36]	; 0x24
 800ea60:	6290      	str	r0, [r2, #40]	; 0x28
 800ea62:	f8df e0e8 	ldr.w	lr, [pc, #232]	; 800eb4c <NumberFormatInfo_.ctor$9714+0x180>
 800ea66:	449e      	add	lr, r3
 800ea68:	f8c2 e02c 	str.w	lr, [r2, #44]	; 0x2c
 800ea6c:	f04f 0e00 	mov.w	lr, #0
 800ea70:	f8c2 e030 	str.w	lr, [r2, #48]	; 0x30
 800ea74:	4c36      	ldr	r4, [pc, #216]	; (800eb50 <NumberFormatInfo_.ctor$9714+0x184>)
 800ea76:	441c      	add	r4, r3
 800ea78:	6354      	str	r4, [r2, #52]	; 0x34
 800ea7a:	4c36      	ldr	r4, [pc, #216]	; (800eb54 <NumberFormatInfo_.ctor$9714+0x188>)
 800ea7c:	441c      	add	r4, r3
 800ea7e:	6394      	str	r4, [r2, #56]	; 0x38
 800ea80:	4c35      	ldr	r4, [pc, #212]	; (800eb58 <NumberFormatInfo_.ctor$9714+0x18c>)
 800ea82:	441c      	add	r4, r3
 800ea84:	63d4      	str	r4, [r2, #60]	; 0x3c
 800ea86:	6410      	str	r0, [r2, #64]	; 0x40
 800ea88:	f8c2 c044 	str.w	ip, [r2, #68]	; 0x44
 800ea8c:	4833      	ldr	r0, [pc, #204]	; (800eb5c <NumberFormatInfo_.ctor$9714+0x190>)
 800ea8e:	4418      	add	r0, r3
 800ea90:	6490      	str	r0, [r2, #72]	; 0x48
 800ea92:	4833      	ldr	r0, [pc, #204]	; (800eb60 <NumberFormatInfo_.ctor$9714+0x194>)
 800ea94:	4418      	add	r0, r3
 800ea96:	64d0      	str	r0, [r2, #76]	; 0x4c
 800ea98:	4832      	ldr	r0, [pc, #200]	; (800eb64 <NumberFormatInfo_.ctor$9714+0x198>)
 800ea9a:	58c2      	ldr	r2, [r0, r3]
        //
        // All of the following will be created on demand.
        //
    
        //The Invariant culture;
        private static CultureInfo  m_InvariantCultureInfo = null;
 800ea9c:	4832      	ldr	r0, [pc, #200]	; (800eb68 <NumberFormatInfo_.ctor$9714+0x19c>)
 800ea9e:	18c1      	adds	r1, r0, r3
 800eaa0:	9806      	ldr	r0, [sp, #24]
 800eaa2:	f8cd e004 	str.w	lr, [sp, #4]
 800eaa6:	f7f3 fb7b 	bl	80021a0 <DefaultTypeSystemManager_AllocateArray$4962>
 800eaaa:	4930      	ldr	r1, [pc, #192]	; (800eb6c <NumberFormatInfo_.ctor$9714+0x1a0>)
 800eaac:	9a04      	ldr	r2, [sp, #16]
 800eaae:	4411      	add	r1, r2
 800eab0:	60c1      	str	r1, [r0, #12]
 800eab2:	492f      	ldr	r1, [pc, #188]	; (800eb70 <NumberFormatInfo_.ctor$9714+0x1a4>)
 800eab4:	4411      	add	r1, r2
 800eab6:	6101      	str	r1, [r0, #16]
 800eab8:	492e      	ldr	r1, [pc, #184]	; (800eb74 <NumberFormatInfo_.ctor$9714+0x1a8>)
 800eaba:	4411      	add	r1, r2
 800eabc:	6141      	str	r1, [r0, #20]
 800eabe:	492e      	ldr	r1, [pc, #184]	; (800eb78 <NumberFormatInfo_.ctor$9714+0x1ac>)
 800eac0:	4411      	add	r1, r2
 800eac2:	6181      	str	r1, [r0, #24]
 800eac4:	492d      	ldr	r1, [pc, #180]	; (800eb7c <NumberFormatInfo_.ctor$9714+0x1b0>)
 800eac6:	4411      	add	r1, r2
 800eac8:	61c1      	str	r1, [r0, #28]
 800eaca:	492d      	ldr	r1, [pc, #180]	; (800eb80 <NumberFormatInfo_.ctor$9714+0x1b4>)
 800eacc:	4411      	add	r1, r2
 800eace:	6201      	str	r1, [r0, #32]
 800ead0:	492c      	ldr	r1, [pc, #176]	; (800eb84 <NumberFormatInfo_.ctor$9714+0x1b8>)
 800ead2:	4411      	add	r1, r2
 800ead4:	6241      	str	r1, [r0, #36]	; 0x24
 800ead6:	492c      	ldr	r1, [pc, #176]	; (800eb88 <NumberFormatInfo_.ctor$9714+0x1bc>)
 800ead8:	4411      	add	r1, r2
 800eada:	6281      	str	r1, [r0, #40]	; 0x28
 800eadc:	492b      	ldr	r1, [pc, #172]	; (800eb8c <NumberFormatInfo_.ctor$9714+0x1c0>)
 800eade:	4411      	add	r1, r2
 800eae0:	62c1      	str	r1, [r0, #44]	; 0x2c
 800eae2:	492b      	ldr	r1, [pc, #172]	; (800eb90 <NumberFormatInfo_.ctor$9714+0x1c4>)
 800eae4:	4411      	add	r1, r2
 800eae6:	6301      	str	r1, [r0, #48]	; 0x30
 800eae8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eaea:	6508      	str	r0, [r1, #80]	; 0x50
 800eaec:	9801      	ldr	r0, [sp, #4]
 800eaee:	6548      	str	r0, [r1, #84]	; 0x54
 800eaf0:	2302      	movs	r3, #2
 800eaf2:	658b      	str	r3, [r1, #88]	; 0x58
 800eaf4:	65cb      	str	r3, [r1, #92]	; 0x5c
 800eaf6:	6608      	str	r0, [r1, #96]	; 0x60
 800eaf8:	6648      	str	r0, [r1, #100]	; 0x64
 800eafa:	f04f 0c01 	mov.w	ip, #1
 800eafe:	f8c1 c068 	str.w	ip, [r1, #104]	; 0x68
 800eb02:	66c8      	str	r0, [r1, #108]	; 0x6c
 800eb04:	6708      	str	r0, [r1, #112]	; 0x70
 800eb06:	674b      	str	r3, [r1, #116]	; 0x74
 800eb08:	f8c1 c078 	str.w	ip, [r1, #120]	; 0x78
 800eb0c:	f881 007c 	strb.w	r0, [r1, #124]	; 0x7c
 800eb10:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
////    internal static extern string nativeGetWindowsDirectory();
////
////    //
////    // Check if the specified fileName exists in the file system or not.
////    //
////    [ResourceExposure( ResourceScope.Machine )]
 800eb14:	9b08      	ldr	r3, [sp, #32]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d001      	beq.n	800eb1e <NumberFormatInfo_.ctor$9714+0x152>
 800eb1a:	e7ff      	b.n	800eb1c <NumberFormatInfo_.ctor$9714+0x150>
////
////        int length;
////
////        fixed(char* src = source)
////        {
////            length = Win32Native.LCMapStringW( lcid, flags | Win32Native.LCMAP_SORTKEY, src, cchSrc, null, 0 );
 800eb1c:	e7ff      	b.n	800eb1e <NumberFormatInfo_.ctor$9714+0x152>
 800eb1e:	b00a      	add	sp, #40	; 0x28
 800eb20:	bdb0      	pop	{r4, r5, r7, pc}
 800eb22:	46c0      	nop			; (mov r8, r8)
 800eb24:	e8025434 	.word	0xe8025434
 800eb28:	17ff2df4 	.word	0x17ff2df4
 800eb2c:	ffffea38 	.word	0xffffea38
 800eb30:	e80102ec 	.word	0xe80102ec
 800eb34:	e8025438 	.word	0xe8025438
 800eb38:	e802543c 	.word	0xe802543c
 800eb3c:	e801362c 	.word	0xe801362c
 800eb40:	e801364c 	.word	0xe801364c
 800eb44:	e801366c 	.word	0xe801366c
 800eb48:	e801368c 	.word	0xe801368c
 800eb4c:	e80136ac 	.word	0xe80136ac
 800eb50:	e80136cc 	.word	0xe80136cc
 800eb54:	e80136ec 	.word	0xe80136ec
 800eb58:	e801370c 	.word	0xe801370c
 800eb5c:	e801373c 	.word	0xe801373c
 800eb60:	e801375c 	.word	0xe801375c
 800eb64:	e8025440 	.word	0xe8025440
 800eb68:	e801020c 	.word	0xe801020c
 800eb6c:	e801377c 	.word	0xe801377c
 800eb70:	e801026c 	.word	0xe801026c
 800eb74:	e801379c 	.word	0xe801379c
 800eb78:	e80137bc 	.word	0xe80137bc
 800eb7c:	e80137dc 	.word	0xe80137dc
 800eb80:	e80137fc 	.word	0xe80137fc
 800eb84:	e801381c 	.word	0xe801381c
 800eb88:	e801383c 	.word	0xe801383c
 800eb8c:	e801385c 	.word	0xe801385c
 800eb90:	e801387c 	.word	0xe801387c

0800eb94 <NumberFormatInfo_GetFormat$9727>:
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b084      	sub	sp, #16
 800eb98:	460a      	mov	r2, r1
////    }


        public Object GetFormat( Type formatType )
        {
            return formatType == typeof( NumberFormatInfo ) ? this : null;
 800eb9a:	4b0c      	ldr	r3, [pc, #48]	; (800ebcc <NumberFormatInfo_GetFormat$9727+0x38>)
 800eb9c:	f8df c030 	ldr.w	ip, [pc, #48]	; 800ebd0 <NumberFormatInfo_GetFormat$9727+0x3c>
 800eba0:	44fc      	add	ip, pc
 800eba2:	4463      	add	r3, ip
 800eba4:	9003      	str	r0, [sp, #12]
 800eba6:	4608      	mov	r0, r1
 800eba8:	4619      	mov	r1, r3
 800ebaa:	9202      	str	r2, [sp, #8]
 800ebac:	f7ff f978 	bl	800dea0 <Type_op_Equality$7551>
 800ebb0:	f010 0fff 	tst.w	r0, #255	; 0xff
 800ebb4:	d003      	beq.n	800ebbe <NumberFormatInfo_GetFormat$9727+0x2a>
 800ebb6:	e7ff      	b.n	800ebb8 <NumberFormatInfo_GetFormat$9727+0x24>
 800ebb8:	9803      	ldr	r0, [sp, #12]
 800ebba:	9001      	str	r0, [sp, #4]
 800ebbc:	e002      	b.n	800ebc4 <NumberFormatInfo_GetFormat$9727+0x30>
 800ebbe:	2000      	movs	r0, #0
 800ebc0:	9001      	str	r0, [sp, #4]
 800ebc2:	e7ff      	b.n	800ebc4 <NumberFormatInfo_GetFormat$9727+0x30>
        }
 800ebc4:	9801      	ldr	r0, [sp, #4]
 800ebc6:	b004      	add	sp, #16
 800ebc8:	bd80      	pop	{r7, pc}
 800ebca:	46c0      	nop			; (mov r8, r8)
 800ebcc:	e8013620 	.word	0xe8013620
 800ebd0:	17ff2c30 	.word	0x17ff2c30

0800ebd4 <BitArray_.ctor$10206>:
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b088      	sub	sp, #32
 800ebd8:	460a      	mov	r2, r1
 800ebda:	460b      	mov	r3, r1
        **
        ** Exceptions: ArgumentOutOfRangeException if length < 0.
        =========================================================================*/
        public BitArray( int length, bool defaultValue )
        {
            if(length < 0)
 800ebdc:	f1b1 3fff 	cmp.w	r1, #4294967295
 800ebe0:	9307      	str	r3, [sp, #28]
 800ebe2:	9206      	str	r2, [sp, #24]
 800ebe4:	9005      	str	r0, [sp, #20]
 800ebe6:	dc12      	bgt.n	800ec0e <BitArray_.ctor$10206+0x3a>
 800ebe8:	e7ff      	b.n	800ebea <BitArray_.ctor$10206+0x16>
            {
#if EXCEPTION_STRINGS
                throw new ArgumentOutOfRangeException( "length", Environment.GetResourceString( "ArgumentOutOfRange_NeedNonNegNum" ) );
#else
                throw new ArgumentOutOfRangeException();
 800ebea:	e7ff      	b.n	800ebec <BitArray_.ctor$10206+0x18>
 800ebec:	481e      	ldr	r0, [pc, #120]	; (800ec68 <BitArray_.ctor$10206+0x94>)
 800ebee:	4921      	ldr	r1, [pc, #132]	; (800ec74 <BitArray_.ctor$10206+0xa0>)
 800ebf0:	4479      	add	r1, pc
 800ebf2:	4408      	add	r0, r1
 800ebf4:	4a20      	ldr	r2, [pc, #128]	; (800ec78 <BitArray_.ctor$10206+0xa4>)
 800ebf6:	4411      	add	r1, r2
 800ebf8:	9004      	str	r0, [sp, #16]
 800ebfa:	f7f1 fde1 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800ebfe:	9003      	str	r0, [sp, #12]
 800ec00:	f7f3 fc25 	bl	800244e <ArgumentOutOfRangeException_.ctor$6074>
 800ec04:	9804      	ldr	r0, [sp, #16]
 800ec06:	9903      	ldr	r1, [sp, #12]
 800ec08:	f7f1 fe30 	bl	800086c <TypeSystemManager_Throw$4954>
 800ec0c:	e7ee      	b.n	800ebec <BitArray_.ctor$10206+0x18>
#endif
            }

            m_array  = new int[(length + 31) / 32];
 800ec0e:	9807      	ldr	r0, [sp, #28]
 800ec10:	f100 011f 	add.w	r1, r0, #31
 800ec14:	114a      	asrs	r2, r1, #5
 800ec16:	4914      	ldr	r1, [pc, #80]	; (800ec68 <BitArray_.ctor$10206+0x94>)
 800ec18:	4b14      	ldr	r3, [pc, #80]	; (800ec6c <BitArray_.ctor$10206+0x98>)
 800ec1a:	447b      	add	r3, pc
 800ec1c:	18c8      	adds	r0, r1, r3
 800ec1e:	4914      	ldr	r1, [pc, #80]	; (800ec70 <BitArray_.ctor$10206+0x9c>)
 800ec20:	4419      	add	r1, r3
 800ec22:	f7f3 fabd 	bl	80021a0 <DefaultTypeSystemManager_AllocateArray$4962>
 800ec26:	9905      	ldr	r1, [sp, #20]
 800ec28:	6088      	str	r0, [r1, #8]
 800ec2a:	9807      	ldr	r0, [sp, #28]
 800ec2c:	60c8      	str	r0, [r1, #12]
            m_length =          length;

            int fillValue = defaultValue ? unchecked( ((int)0xffffffff) ) : 0;
 800ec2e:	e7ff      	b.n	800ec30 <BitArray_.ctor$10206+0x5c>
 800ec30:	e7ff      	b.n	800ec32 <BitArray_.ctor$10206+0x5e>
 800ec32:	2000      	movs	r0, #0
            for(int i = 0; i < m_array.Length; i++)
 800ec34:	9002      	str	r0, [sp, #8]
 800ec36:	e7ff      	b.n	800ec38 <BitArray_.ctor$10206+0x64>
 800ec38:	9802      	ldr	r0, [sp, #8]
 800ec3a:	9905      	ldr	r1, [sp, #20]
 800ec3c:	688a      	ldr	r2, [r1, #8]
                throw new ArgumentOutOfRangeException( "index", Environment.GetResourceString( "ArgumentOutOfRange_Index" ) );
#else
                throw new ArgumentOutOfRangeException();
#endif
            }

 800ec3e:	6892      	ldr	r2, [r2, #8]

            m_array  = new int[(length + 31) / 32];
            m_length =          length;

            int fillValue = defaultValue ? unchecked( ((int)0xffffffff) ) : 0;
            for(int i = 0; i < m_array.Length; i++)
 800ec40:	4290      	cmp	r0, r2
 800ec42:	9001      	str	r0, [sp, #4]
 800ec44:	da0a      	bge.n	800ec5c <BitArray_.ctor$10206+0x88>
 800ec46:	e7ff      	b.n	800ec48 <BitArray_.ctor$10206+0x74>
            {
                m_array[i] = fillValue;
 800ec48:	9805      	ldr	r0, [sp, #20]
 800ec4a:	6881      	ldr	r1, [r0, #8]
 800ec4c:	9a01      	ldr	r2, [sp, #4]
 800ec4e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ec52:	2300      	movs	r3, #0
 800ec54:	60cb      	str	r3, [r1, #12]

            m_array  = new int[(length + 31) / 32];
            m_length =          length;

            int fillValue = defaultValue ? unchecked( ((int)0xffffffff) ) : 0;
            for(int i = 0; i < m_array.Length; i++)
 800ec56:	1c51      	adds	r1, r2, #1
 800ec58:	9102      	str	r1, [sp, #8]
 800ec5a:	e7ed      	b.n	800ec38 <BitArray_.ctor$10206+0x64>
 800ec5c:	2000      	movs	r0, #0
 800ec5e:	9905      	ldr	r1, [sp, #20]
 800ec60:	6108      	str	r0, [r1, #16]
 800ec62:	b008      	add	sp, #32
 800ec64:	bd80      	pop	{r7, pc}
 800ec66:	46c0      	nop			; (mov r8, r8)
 800ec68:	ffffea38 	.word	0xffffea38
 800ec6c:	17ff2bb6 	.word	0x17ff2bb6
 800ec70:	e80102ec 	.word	0xe80102ec
 800ec74:	17ff2be0 	.word	0x17ff2be0
 800ec78:	e8010a7c 	.word	0xe8010a7c

0800ec7c <BitArray_Get$10213>:
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b084      	sub	sp, #16
 800ec80:	460a      	mov	r2, r1
        ** Exceptions: ArgumentOutOfRangeException if index < 0 or
        **             index >= GetLength().
        =========================================================================*/
        public bool Get( int index )
        {
            if(index < 0 || index >= m_length)
 800ec82:	f1b1 3fff 	cmp.w	r1, #4294967295
 800ec86:	9003      	str	r0, [sp, #12]
 800ec88:	9202      	str	r2, [sp, #8]
 800ec8a:	dc12      	bgt.n	800ecb2 <BitArray_Get$10213+0x36>
 800ec8c:	e7ff      	b.n	800ec8e <BitArray_Get$10213+0x12>
            {
#if EXCEPTION_STRINGS
                throw new ArgumentOutOfRangeException( "index", Environment.GetResourceString( "ArgumentOutOfRange_Index" ) );
#else
                throw new ArgumentOutOfRangeException();
 800ec8e:	e7ff      	b.n	800ec90 <BitArray_Get$10213+0x14>
 800ec90:	4815      	ldr	r0, [pc, #84]	; (800ece8 <BitArray_Get$10213+0x6c>)
 800ec92:	4916      	ldr	r1, [pc, #88]	; (800ecec <BitArray_Get$10213+0x70>)
 800ec94:	4479      	add	r1, pc
 800ec96:	4408      	add	r0, r1
 800ec98:	4a15      	ldr	r2, [pc, #84]	; (800ecf0 <BitArray_Get$10213+0x74>)
 800ec9a:	4411      	add	r1, r2
 800ec9c:	9001      	str	r0, [sp, #4]
 800ec9e:	f7f1 fd8f 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800eca2:	9000      	str	r0, [sp, #0]
 800eca4:	f7f3 fbd3 	bl	800244e <ArgumentOutOfRangeException_.ctor$6074>
 800eca8:	9801      	ldr	r0, [sp, #4]
 800ecaa:	9900      	ldr	r1, [sp, #0]
 800ecac:	f7f1 fdde 	bl	800086c <TypeSystemManager_Throw$4954>
 800ecb0:	e7ee      	b.n	800ec90 <BitArray_Get$10213+0x14>
 800ecb2:	9803      	ldr	r0, [sp, #12]
 800ecb4:	68c1      	ldr	r1, [r0, #12]
        ** Exceptions: ArgumentOutOfRangeException if index < 0 or
        **             index >= GetLength().
        =========================================================================*/
        public bool Get( int index )
        {
            if(index < 0 || index >= m_length)
 800ecb6:	9a02      	ldr	r2, [sp, #8]
 800ecb8:	428a      	cmp	r2, r1
 800ecba:	dae8      	bge.n	800ec8e <BitArray_Get$10213+0x12>
 800ecbc:	e7ff      	b.n	800ecbe <BitArray_Get$10213+0x42>
#else
                throw new ArgumentOutOfRangeException();
#endif
            }

            return (m_array[index / 32] & (1 << (index % 32))) != 0;
 800ecbe:	9803      	ldr	r0, [sp, #12]
 800ecc0:	6881      	ldr	r1, [r0, #8]
 800ecc2:	9a02      	ldr	r2, [sp, #8]
 800ecc4:	1153      	asrs	r3, r2, #5
 800ecc6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800ecca:	68c9      	ldr	r1, [r1, #12]
 800eccc:	f002 031f 	and.w	r3, r2, #31
 800ecd0:	f04f 0c01 	mov.w	ip, #1
 800ecd4:	fa0c f303 	lsl.w	r3, ip, r3
 800ecd8:	4019      	ands	r1, r3
 800ecda:	2900      	cmp	r1, #0
 800ecdc:	bf18      	it	ne
 800ecde:	2101      	movne	r1, #1
 800ece0:	4608      	mov	r0, r1
 800ece2:	b004      	add	sp, #16
 800ece4:	bd80      	pop	{r7, pc}
 800ece6:	46c0      	nop			; (mov r8, r8)
 800ece8:	ffffea38 	.word	0xffffea38
 800ecec:	17ff2b3c 	.word	0x17ff2b3c
 800ecf0:	e8010a7c 	.word	0xe8010a7c

0800ecf4 <BitArray_Set$10214>:
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b086      	sub	sp, #24
 800ecf8:	460b      	mov	r3, r1
        ** Exceptions: ArgumentOutOfRangeException if index < 0 or
        **             index >= GetLength().
        =========================================================================*/
        public void Set( int index, bool value )
        {
            if(index < 0 || index >= m_length)
 800ecfa:	f1b1 3fff 	cmp.w	r1, #4294967295
 800ecfe:	9305      	str	r3, [sp, #20]
 800ed00:	9004      	str	r0, [sp, #16]
 800ed02:	9203      	str	r2, [sp, #12]
 800ed04:	dc12      	bgt.n	800ed2c <BitArray_Set$10214+0x38>
 800ed06:	e7ff      	b.n	800ed08 <BitArray_Set$10214+0x14>
            {
#if EXCEPTION_STRINGS
                throw new ArgumentOutOfRangeException( "index", Environment.GetResourceString( "ArgumentOutOfRange_Index" ) );
#else
                throw new ArgumentOutOfRangeException();
 800ed08:	e7ff      	b.n	800ed0a <BitArray_Set$10214+0x16>
 800ed0a:	4822      	ldr	r0, [pc, #136]	; (800ed94 <BitArray_Set$10214+0xa0>)
 800ed0c:	4922      	ldr	r1, [pc, #136]	; (800ed98 <BitArray_Set$10214+0xa4>)
 800ed0e:	4479      	add	r1, pc
 800ed10:	4408      	add	r0, r1
 800ed12:	4a22      	ldr	r2, [pc, #136]	; (800ed9c <BitArray_Set$10214+0xa8>)
 800ed14:	4411      	add	r1, r2
 800ed16:	9002      	str	r0, [sp, #8]
 800ed18:	f7f1 fd52 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800ed1c:	9001      	str	r0, [sp, #4]
 800ed1e:	f7f3 fb96 	bl	800244e <ArgumentOutOfRangeException_.ctor$6074>
 800ed22:	9802      	ldr	r0, [sp, #8]
 800ed24:	9901      	ldr	r1, [sp, #4]
 800ed26:	f7f1 fda1 	bl	800086c <TypeSystemManager_Throw$4954>
 800ed2a:	e7ee      	b.n	800ed0a <BitArray_Set$10214+0x16>
 800ed2c:	9804      	ldr	r0, [sp, #16]
 800ed2e:	68c1      	ldr	r1, [r0, #12]
        ** Exceptions: ArgumentOutOfRangeException if index < 0 or
        **             index >= GetLength().
        =========================================================================*/
        public void Set( int index, bool value )
        {
            if(index < 0 || index >= m_length)
 800ed30:	9a05      	ldr	r2, [sp, #20]
 800ed32:	428a      	cmp	r2, r1
 800ed34:	dae8      	bge.n	800ed08 <BitArray_Set$10214+0x14>
 800ed36:	e7ff      	b.n	800ed38 <BitArray_Set$10214+0x44>
#else
                throw new ArgumentOutOfRangeException();
#endif
            }

            if(value)
 800ed38:	9803      	ldr	r0, [sp, #12]
 800ed3a:	f010 0fff 	tst.w	r0, #255	; 0xff
 800ed3e:	d011      	beq.n	800ed64 <BitArray_Set$10214+0x70>
 800ed40:	e7ff      	b.n	800ed42 <BitArray_Set$10214+0x4e>
            {
                m_array[index / 32] |= (1 << (index % 32));
 800ed42:	9804      	ldr	r0, [sp, #16]
 800ed44:	6881      	ldr	r1, [r0, #8]
 800ed46:	9a05      	ldr	r2, [sp, #20]
 800ed48:	1153      	asrs	r3, r2, #5
 800ed4a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800ed4e:	68cb      	ldr	r3, [r1, #12]
 800ed50:	f002 0c1f 	and.w	ip, r2, #31
 800ed54:	f04f 0e01 	mov.w	lr, #1
 800ed58:	fa0e fc0c 	lsl.w	ip, lr, ip
 800ed5c:	ea43 030c 	orr.w	r3, r3, ip
 800ed60:	60cb      	str	r3, [r1, #12]
            }
 800ed62:	e010      	b.n	800ed86 <BitArray_Set$10214+0x92>
            else
            {
                m_array[index / 32] &= ~(1 << (index % 32));
 800ed64:	9804      	ldr	r0, [sp, #16]
 800ed66:	6881      	ldr	r1, [r0, #8]
 800ed68:	9a05      	ldr	r2, [sp, #20]
 800ed6a:	1153      	asrs	r3, r2, #5
 800ed6c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800ed70:	68cb      	ldr	r3, [r1, #12]
 800ed72:	f002 0c1f 	and.w	ip, r2, #31
 800ed76:	f04f 0e01 	mov.w	lr, #1
 800ed7a:	fa0e fc0c 	lsl.w	ip, lr, ip
 800ed7e:	ea23 030c 	bic.w	r3, r3, ip
 800ed82:	60cb      	str	r3, [r1, #12]
            }
 800ed84:	e7ff      	b.n	800ed86 <BitArray_Set$10214+0x92>
 800ed86:	9804      	ldr	r0, [sp, #16]
 800ed88:	6901      	ldr	r1, [r0, #16]

            m_version++;
 800ed8a:	3101      	adds	r1, #1
 800ed8c:	6101      	str	r1, [r0, #16]
 800ed8e:	b006      	add	sp, #24
 800ed90:	bd80      	pop	{r7, pc}
 800ed92:	46c0      	nop			; (mov r8, r8)
 800ed94:	ffffea38 	.word	0xffffea38
 800ed98:	17ff2ac2 	.word	0x17ff2ac2
 800ed9c:	e8010a7c 	.word	0xe8010a7c

0800eda0 <ToStringFormatState_MoveToEnd$10860>:
 800eda0:	b081      	sub	sp, #4
 800eda2:	4601      	mov	r1, r0
                src++;
            }

            private void MoveToEnd()
            {
                src = format.Length;
 800eda4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800eda6:	68d2      	ldr	r2, [r2, #12]
 800eda8:	6402      	str	r2, [r0, #64]	; 0x40
 800edaa:	9100      	str	r1, [sp, #0]
 800edac:	b001      	add	sp, #4
 800edae:	4770      	bx	lr

0800edb0 <AssertionViolationException_.ctor$11625>:
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b082      	sub	sp, #8
 800edb4:	460a      	mov	r2, r1
 800edb6:	4603      	mov	r3, r0
    using System.Globalization;
    using System.Runtime.CompilerServices;
    ////using System.Runtime.Versioning;

    // The Number class implements methods for formatting and parsing
    // numeric values. To format and parse numeric values, applications should
 800edb8:	9201      	str	r2, [sp, #4]
 800edba:	9300      	str	r3, [sp, #0]
 800edbc:	f7fb ff28 	bl	800ac10 <Exception_.ctor$7037>
 800edc0:	b002      	add	sp, #8
 800edc2:	bd80      	pop	{r7, pc}

0800edc4 <AssertionViolationException_Create$11626>:
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b084      	sub	sp, #16
 800edc8:	460a      	mov	r2, r1
 800edca:	4603      	mov	r3, r0
 800edcc:	9203      	str	r2, [sp, #12]
 800edce:	9302      	str	r3, [sp, #8]
 800edd0:	f7f3 fd0e 	bl	80027f0 <String_Format$2580>
        }

        public static AssertionViolationException Create(        string   format ,
                                                          params object[] args   )
        {
            return new AssertionViolationException( String.Format( format, args ) );
 800edd4:	4908      	ldr	r1, [pc, #32]	; (800edf8 <AssertionViolationException_Create$11626+0x34>)
 800edd6:	4a09      	ldr	r2, [pc, #36]	; (800edfc <AssertionViolationException_Create$11626+0x38>)
 800edd8:	447a      	add	r2, pc
 800edda:	4411      	add	r1, r2
 800eddc:	4b08      	ldr	r3, [pc, #32]	; (800ee00 <AssertionViolationException_Create$11626+0x3c>)
 800edde:	441a      	add	r2, r3
 800ede0:	9001      	str	r0, [sp, #4]
 800ede2:	4608      	mov	r0, r1
 800ede4:	4611      	mov	r1, r2
 800ede6:	f7f1 fceb 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800edea:	9000      	str	r0, [sp, #0]
 800edec:	9901      	ldr	r1, [sp, #4]
 800edee:	f7ff ffdf 	bl	800edb0 <AssertionViolationException_.ctor$11625>
 800edf2:	9800      	ldr	r0, [sp, #0]
 800edf4:	b004      	add	sp, #16
 800edf6:	bd80      	pop	{r7, pc}
 800edf8:	ffffea38 	.word	0xffffea38
 800edfc:	17ff29f8 	.word	0x17ff29f8
 800ee00:	e80138fc 	.word	0xe80138fc

0800ee04 <ArrayUtility_AppendToNotNullArray$36987>:
 800ee04:	b510      	push	{r4, lr}
 800ee06:	b084      	sub	sp, #16
 800ee08:	4602      	mov	r2, r0
        {
            [Inline]
            [TS.WellKnownMethod( "ArrayImpl_get_Length" )]
            get
            {
                return (int)m_numElements;
 800ee0a:	6880      	ldr	r0, [r0, #8]
               destinationIndex < 0 ||
               length           < 0  )
            {
                throw new IndexOutOfRangeException();
            }

 800ee0c:	1c43      	adds	r3, r0, #1
 800ee0e:	f8df c044 	ldr.w	ip, [pc, #68]	; 800ee54 <ArrayUtility_AppendToNotNullArray$36987+0x50>
 800ee12:	f8df e044 	ldr.w	lr, [pc, #68]	; 800ee58 <ArrayUtility_AppendToNotNullArray$36987+0x54>
 800ee16:	44fe      	add	lr, pc
 800ee18:	44f4      	add	ip, lr
 800ee1a:	4c10      	ldr	r4, [pc, #64]	; (800ee5c <ArrayUtility_AppendToNotNullArray$36987+0x58>)
 800ee1c:	44a6      	add	lr, r4
 800ee1e:	9003      	str	r0, [sp, #12]
 800ee20:	4660      	mov	r0, ip
 800ee22:	9102      	str	r1, [sp, #8]
 800ee24:	4671      	mov	r1, lr
 800ee26:	9201      	str	r2, [sp, #4]
 800ee28:	461a      	mov	r2, r3
 800ee2a:	f7f3 f9b9 	bl	80021a0 <DefaultTypeSystemManager_AllocateArray$4962>
            int sourceIndexEnd = sourceIndex + length;
            if(sourceIndexEnd > sourceArray.Length)
 800ee2e:	9903      	ldr	r1, [sp, #12]
 800ee30:	2901      	cmp	r1, #1
 800ee32:	9000      	str	r0, [sp, #0]
 800ee34:	db06      	blt.n	800ee44 <ArrayUtility_AppendToNotNullArray$36987+0x40>
 800ee36:	e7ff      	b.n	800ee38 <ArrayUtility_AppendToNotNullArray$36987+0x34>
            {
                throw new IndexOutOfRangeException();
 800ee38:	9801      	ldr	r0, [sp, #4]
 800ee3a:	9900      	ldr	r1, [sp, #0]
 800ee3c:	9a03      	ldr	r2, [sp, #12]
 800ee3e:	f7f1 fb25 	bl	800048c <Array_Copy$1371>
            }
 800ee42:	e7ff      	b.n	800ee44 <ArrayUtility_AppendToNotNullArray$36987+0x40>

            int destinationIndexEnd = destinationIndex + length;
 800ee44:	9800      	ldr	r0, [sp, #0]
 800ee46:	9903      	ldr	r1, [sp, #12]
 800ee48:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 800ee4c:	9b02      	ldr	r3, [sp, #8]
 800ee4e:	60d3      	str	r3, [r2, #12]
 800ee50:	b004      	add	sp, #16
 800ee52:	bd10      	pop	{r4, pc}
 800ee54:	ffffea38 	.word	0xffffea38
 800ee58:	17ff29ba 	.word	0x17ff29ba
 800ee5c:	e801398c 	.word	0xe801398c

0800ee60 <ArrayUtility_ArrayEquals$33352>:
 800ee60:	b510      	push	{r4, lr}
 800ee62:	b090      	sub	sp, #64	; 0x40
 800ee64:	4602      	mov	r2, r0
    
            internal SZGenericArrayEnumerator( T[] array )
            {
////            BCLDebug.Assert( array.Rank == 1 && array.GetLowerBound( 0 ) == 0, "SZArrayEnumerator<T> only works on single dimension arrays w/ a lower bound of zero." );
    
                m_array    = array;
 800ee66:	2800      	cmp	r0, #0
 800ee68:	920f      	str	r2, [sp, #60]	; 0x3c
 800ee6a:	910e      	str	r1, [sp, #56]	; 0x38
 800ee6c:	d004      	beq.n	800ee78 <ArrayUtility_ArrayEquals$33352+0x18>
 800ee6e:	e7ff      	b.n	800ee70 <ArrayUtility_ArrayEquals$33352+0x10>
        {
            [Inline]
            [TS.WellKnownMethod( "ArrayImpl_get_Length" )]
            get
            {
                return (int)m_numElements;
 800ee70:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800ee72:	6881      	ldr	r1, [r0, #8]
            }
 800ee74:	910d      	str	r1, [sp, #52]	; 0x34
 800ee76:	e002      	b.n	800ee7e <ArrayUtility_ArrayEquals$33352+0x1e>
 800ee78:	2000      	movs	r0, #0
    
            internal SZGenericArrayEnumerator( T[] array )
            {
////            BCLDebug.Assert( array.Rank == 1 && array.GetLowerBound( 0 ) == 0, "SZArrayEnumerator<T> only works on single dimension arrays w/ a lower bound of zero." );
    
                m_array    = array;
 800ee7a:	900d      	str	r0, [sp, #52]	; 0x34
 800ee7c:	e7ff      	b.n	800ee7e <ArrayUtility_ArrayEquals$33352+0x1e>
 800ee7e:	980d      	ldr	r0, [sp, #52]	; 0x34
                m_index    = -1;
 800ee80:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ee82:	2900      	cmp	r1, #0
 800ee84:	900c      	str	r0, [sp, #48]	; 0x30
 800ee86:	d004      	beq.n	800ee92 <ArrayUtility_ArrayEquals$33352+0x32>
 800ee88:	e7ff      	b.n	800ee8a <ArrayUtility_ArrayEquals$33352+0x2a>
        {
            [Inline]
            [TS.WellKnownMethod( "ArrayImpl_get_Length" )]
            get
            {
                return (int)m_numElements;
 800ee8a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800ee8c:	6881      	ldr	r1, [r0, #8]
            }
 800ee8e:	910b      	str	r1, [sp, #44]	; 0x2c
 800ee90:	e002      	b.n	800ee98 <ArrayUtility_ArrayEquals$33352+0x38>
 800ee92:	2000      	movs	r0, #0
            internal SZGenericArrayEnumerator( T[] array )
            {
////            BCLDebug.Assert( array.Rank == 1 && array.GetLowerBound( 0 ) == 0, "SZArrayEnumerator<T> only works on single dimension arrays w/ a lower bound of zero." );
    
                m_array    = array;
                m_index    = -1;
 800ee94:	900b      	str	r0, [sp, #44]	; 0x2c
 800ee96:	e7ff      	b.n	800ee98 <ArrayUtility_ArrayEquals$33352+0x38>
 800ee98:	980b      	ldr	r0, [sp, #44]	; 0x2c
                m_endIndex = array.Length;
            }
 800ee9a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ee9c:	4281      	cmp	r1, r0
 800ee9e:	d103      	bne.n	800eea8 <ArrayUtility_ArrayEquals$33352+0x48>
 800eea0:	e7ff      	b.n	800eea2 <ArrayUtility_ArrayEquals$33352+0x42>
 800eea2:	2000      	movs	r0, #0
    
            public bool MoveNext()
 800eea4:	900a      	str	r0, [sp, #40]	; 0x28
 800eea6:	e005      	b.n	800eeb4 <ArrayUtility_ArrayEquals$33352+0x54>
 800eea8:	2000      	movs	r0, #0
                    return (m_index < m_endIndex);
                }
                return false;
            }
    
            public T Current
 800eeaa:	9009      	str	r0, [sp, #36]	; 0x24
 800eeac:	e7ff      	b.n	800eeae <ArrayUtility_ArrayEquals$33352+0x4e>
 800eeae:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eeb0:	b010      	add	sp, #64	; 0x40
 800eeb2:	bd10      	pop	{r4, pc}
 800eeb4:	980a      	ldr	r0, [sp, #40]	; 0x28
                m_array    = array;
                m_index    = -1;
                m_endIndex = array.Length;
            }
    
            public bool MoveNext()
 800eeb6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800eeb8:	4288      	cmp	r0, r1
 800eeba:	9008      	str	r0, [sp, #32]
 800eebc:	da3b      	bge.n	800ef36 <ArrayUtility_ArrayEquals$33352+0xd6>
 800eebe:	e7ff      	b.n	800eec0 <ArrayUtility_ArrayEquals$33352+0x60>
            {
                if(m_index < m_endIndex)
 800eec0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800eec2:	9908      	ldr	r1, [sp, #32]
 800eec4:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 800eec8:	68d3      	ldr	r3, [r2, #12]
 800eeca:	6912      	ldr	r2, [r2, #16]
 800eecc:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ef4c <ArrayUtility_ArrayEquals$33352+0xec>
 800eed0:	f8df e07c 	ldr.w	lr, [pc, #124]	; 800ef50 <ArrayUtility_ArrayEquals$33352+0xf0>
 800eed4:	44fe      	add	lr, pc
 800eed6:	44f4      	add	ip, lr
 800eed8:	4c1e      	ldr	r4, [pc, #120]	; (800ef54 <ArrayUtility_ArrayEquals$33352+0xf4>)
 800eeda:	44a6      	add	lr, r4
 800eedc:	4660      	mov	r0, ip
 800eede:	4671      	mov	r1, lr
 800eee0:	f8cd e01c 	str.w	lr, [sp, #28]
 800eee4:	f8cd c018 	str.w	ip, [sp, #24]
 800eee8:	9305      	str	r3, [sp, #20]
 800eeea:	9204      	str	r2, [sp, #16]
 800eeec:	f7f1 fc68 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800eef0:	9905      	ldr	r1, [sp, #20]
 800eef2:	6081      	str	r1, [r0, #8]
 800eef4:	9904      	ldr	r1, [sp, #16]
 800eef6:	60c1      	str	r1, [r0, #12]
 800eef8:	990e      	ldr	r1, [sp, #56]	; 0x38
 800eefa:	9a08      	ldr	r2, [sp, #32]
 800eefc:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 800ef00:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800ef04:	691b      	ldr	r3, [r3, #16]
 800ef06:	f8dd e018 	ldr.w	lr, [sp, #24]
 800ef0a:	9003      	str	r0, [sp, #12]
 800ef0c:	4670      	mov	r0, lr
 800ef0e:	9907      	ldr	r1, [sp, #28]
 800ef10:	9302      	str	r3, [sp, #8]
 800ef12:	f8cd c004 	str.w	ip, [sp, #4]
 800ef16:	f7f1 fc53 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800ef1a:	9901      	ldr	r1, [sp, #4]
 800ef1c:	6081      	str	r1, [r0, #8]
 800ef1e:	9902      	ldr	r1, [sp, #8]
 800ef20:	60c1      	str	r1, [r0, #12]
 800ef22:	9903      	ldr	r1, [sp, #12]
 800ef24:	9000      	str	r0, [sp, #0]
 800ef26:	4608      	mov	r0, r1
 800ef28:	9900      	ldr	r1, [sp, #0]
 800ef2a:	f7f2 fdf2 	bl	8001b12 <Object_Equals$2231>
 800ef2e:	f010 0fff 	tst.w	r0, #255	; 0xff
 800ef32:	d003      	beq.n	800ef3c <ArrayUtility_ArrayEquals$33352+0xdc>
 800ef34:	e005      	b.n	800ef42 <ArrayUtility_ArrayEquals$33352+0xe2>
 800ef36:	2001      	movs	r0, #1
                {
                    m_index++;
    
                    return (m_index < m_endIndex);
                }
                return false;
 800ef38:	9009      	str	r0, [sp, #36]	; 0x24
 800ef3a:	e7b8      	b.n	800eeae <ArrayUtility_ArrayEquals$33352+0x4e>
 800ef3c:	2000      	movs	r0, #0
    
            public bool MoveNext()
            {
                if(m_index < m_endIndex)
                {
                    m_index++;
 800ef3e:	9009      	str	r0, [sp, #36]	; 0x24
 800ef40:	e7b5      	b.n	800eeae <ArrayUtility_ArrayEquals$33352+0x4e>
                m_array    = array;
                m_index    = -1;
                m_endIndex = array.Length;
            }
    
            public bool MoveNext()
 800ef42:	9808      	ldr	r0, [sp, #32]
 800ef44:	1c41      	adds	r1, r0, #1
 800ef46:	910a      	str	r1, [sp, #40]	; 0x28
 800ef48:	e7b4      	b.n	800eeb4 <ArrayUtility_ArrayEquals$33352+0x54>
 800ef4a:	46c0      	nop			; (mov r8, r8)
 800ef4c:	ffffea38 	.word	0xffffea38
 800ef50:	17ff28fc 	.word	0x17ff28fc
 800ef54:	e8013a1c 	.word	0xe8013a1c

0800ef58 <Dimension_Equals$50137>:
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b084      	sub	sp, #16
 800ef5c:	460a      	mov	r2, r1
 800ef5e:	4b13      	ldr	r3, [pc, #76]	; (800efac <Dimension_Equals$50137+0x54>)
 800ef60:	f8df c04c 	ldr.w	ip, [pc, #76]	; 800efb0 <Dimension_Equals$50137+0x58>
 800ef64:	44fc      	add	ip, pc
 800ef66:	4463      	add	r3, ip
 800ef68:	9003      	str	r0, [sp, #12]
 800ef6a:	4608      	mov	r0, r1
 800ef6c:	4619      	mov	r1, r3
 800ef6e:	9202      	str	r2, [sp, #8]
 800ef70:	f7f1 fe74 	bl	8000c5c <TypeSystemManager_CastToSealedTypeNoThrow$4951>
 800ef74:	4601      	mov	r1, r0
 800ef76:	2800      	cmp	r0, #0
 800ef78:	9101      	str	r1, [sp, #4]
 800ef7a:	d007      	beq.n	800ef8c <Dimension_Equals$50137+0x34>
 800ef7c:	e7ff      	b.n	800ef7e <Dimension_Equals$50137+0x26>
 800ef7e:	9803      	ldr	r0, [sp, #12]
 800ef80:	6881      	ldr	r1, [r0, #8]
 800ef82:	9a01      	ldr	r2, [sp, #4]
 800ef84:	6893      	ldr	r3, [r2, #8]
 800ef86:	4299      	cmp	r1, r3
 800ef88:	d006      	beq.n	800ef98 <Dimension_Equals$50137+0x40>
 800ef8a:	e7ff      	b.n	800ef8c <Dimension_Equals$50137+0x34>
 800ef8c:	2000      	movs	r0, #0
 800ef8e:	9000      	str	r0, [sp, #0]
 800ef90:	e7ff      	b.n	800ef92 <Dimension_Equals$50137+0x3a>
 800ef92:	9800      	ldr	r0, [sp, #0]
 800ef94:	b004      	add	sp, #16
 800ef96:	bd80      	pop	{r7, pc}
 800ef98:	9803      	ldr	r0, [sp, #12]
 800ef9a:	68c1      	ldr	r1, [r0, #12]
 800ef9c:	9a01      	ldr	r2, [sp, #4]
 800ef9e:	68d3      	ldr	r3, [r2, #12]
 800efa0:	4299      	cmp	r1, r3
 800efa2:	d1f3      	bne.n	800ef8c <Dimension_Equals$50137+0x34>
 800efa4:	e7ff      	b.n	800efa6 <Dimension_Equals$50137+0x4e>
 800efa6:	2001      	movs	r0, #1
 800efa8:	9000      	str	r0, [sp, #0]
 800efaa:	e7f2      	b.n	800ef92 <Dimension_Equals$50137+0x3a>
 800efac:	e801427c 	.word	0xe801427c
 800efb0:	17ff286c 	.word	0x17ff286c

0800efb4 <BaseRepresentation_EqualsThroughEquivalence$13542>:
 800efb4:	b580      	push	{r7, lr}
 800efb6:	b088      	sub	sp, #32
 800efb8:	460b      	mov	r3, r1
 800efba:	4684      	mov	ip, r0
            if(res == false)
            {
                throw AssertionViolationException.Create( text, arg1, arg2 );
            }
        }

 800efbc:	4288      	cmp	r0, r1
 800efbe:	f8cd c014 	str.w	ip, [sp, #20]
 800efc2:	9304      	str	r3, [sp, #16]
 800efc4:	9203      	str	r2, [sp, #12]
 800efc6:	d103      	bne.n	800efd0 <BaseRepresentation_EqualsThroughEquivalence$13542+0x1c>
 800efc8:	e7ff      	b.n	800efca <BaseRepresentation_EqualsThroughEquivalence$13542+0x16>
 800efca:	2001      	movs	r0, #1
        [System.Diagnostics.Conditional( "DEBUG"         )]
        [System.Diagnostics.Conditional( "CHECKS_ASSERT" )]
 800efcc:	9002      	str	r0, [sp, #8]
 800efce:	e00a      	b.n	800efe6 <BaseRepresentation_EqualsThroughEquivalence$13542+0x32>
        public static void ASSERT( bool   res  ,
                                   string text ,
                                   object arg1 ,
 800efd0:	9805      	ldr	r0, [sp, #20]
 800efd2:	2800      	cmp	r0, #0
 800efd4:	d004      	beq.n	800efe0 <BaseRepresentation_EqualsThroughEquivalence$13542+0x2c>
 800efd6:	e7ff      	b.n	800efd8 <BaseRepresentation_EqualsThroughEquivalence$13542+0x24>
 800efd8:	9804      	ldr	r0, [sp, #16]
 800efda:	2800      	cmp	r0, #0
 800efdc:	d106      	bne.n	800efec <BaseRepresentation_EqualsThroughEquivalence$13542+0x38>
 800efde:	e7ff      	b.n	800efe0 <BaseRepresentation_EqualsThroughEquivalence$13542+0x2c>
 800efe0:	2000      	movs	r0, #0
                                   object arg2 ,
                                   object arg3 )
        {
            if(res == false)
            {
 800efe2:	9002      	str	r0, [sp, #8]
 800efe4:	e7ff      	b.n	800efe6 <BaseRepresentation_EqualsThroughEquivalence$13542+0x32>
 800efe6:	9802      	ldr	r0, [sp, #8]
 800efe8:	b008      	add	sp, #32
 800efea:	bd80      	pop	{r7, pc}
            if(res == false)
            {
                throw AssertionViolationException.Create( text, args );
            }
        }
    }
 800efec:	9805      	ldr	r0, [sp, #20]
 800efee:	f100 0108 	add.w	r1, r0, #8
 800eff2:	9106      	str	r1, [sp, #24]
 800eff4:	2100      	movs	r1, #0
 800eff6:	9107      	str	r1, [sp, #28]
 800eff8:	9a06      	ldr	r2, [sp, #24]
 800effa:	3a08      	subs	r2, #8
 800effc:	9107      	str	r1, [sp, #28]
 800effe:	a907      	add	r1, sp, #28
 800f000:	f1a1 0008 	sub.w	r0, r1, #8
 800f004:	4611      	mov	r1, r2
 800f006:	f7f1 fc59 	bl	80008bc <UIntPtr_.ctor$2864>
            if(res == false)
            {
                throw AssertionViolationException.Create( text, args );
            }
        }
    }
 800f00a:	9807      	ldr	r0, [sp, #28]
 800f00c:	6840      	ldr	r0, [r0, #4]
        [System.Diagnostics.Conditional( "CHECKS_ASSERT" )]
        public static void ASSERT( bool   res  ,
                                   string text ,
                                   object arg1 ,
                                   object arg2 ,
                                   object arg3 )
 800f00e:	69c0      	ldr	r0, [r0, #28]
 800f010:	6980      	ldr	r0, [r0, #24]
 800f012:	9905      	ldr	r1, [sp, #20]
 800f014:	9001      	str	r0, [sp, #4]
 800f016:	4608      	mov	r0, r1
 800f018:	9904      	ldr	r1, [sp, #16]
 800f01a:	9a03      	ldr	r2, [sp, #12]
 800f01c:	9b01      	ldr	r3, [sp, #4]
 800f01e:	4798      	blx	r3
 800f020:	9002      	str	r0, [sp, #8]
 800f022:	e7e0      	b.n	800efe6 <BaseRepresentation_EqualsThroughEquivalence$13542+0x32>

0800f024 <BaseRepresentation_ArrayEqualsThroughEquivalence$33224>:
 800f024:	b5b0      	push	{r4, r5, r7, lr}
 800f026:	b084      	sub	sp, #16
 800f028:	4613      	mov	r3, r2
 800f02a:	468c      	mov	ip, r1
 800f02c:	4686      	mov	lr, r0
 800f02e:	4c08      	ldr	r4, [pc, #32]	; (800f050 <BaseRepresentation_ArrayEqualsThroughEquivalence$33224+0x2c>)
 800f030:	4d08      	ldr	r5, [pc, #32]	; (800f054 <BaseRepresentation_ArrayEqualsThroughEquivalence$33224+0x30>)
 800f032:	447d      	add	r5, pc
 800f034:	5964      	ldr	r4, [r4, r5]

        public static bool ArrayEqualsThroughEquivalence<T>( T[]            s   ,
                                                             T[]            d   ,
                                                             EquivalenceSet set ) where T : BaseRepresentation
        {
            return ArrayEqualsThroughEquivalence( s, d, 0, -1, set );
 800f036:	9203      	str	r2, [sp, #12]
 800f038:	4622      	mov	r2, r4
 800f03a:	9c03      	ldr	r4, [sp, #12]
 800f03c:	9302      	str	r3, [sp, #8]
 800f03e:	4623      	mov	r3, r4
 800f040:	f8cd e004 	str.w	lr, [sp, #4]
 800f044:	f8cd c000 	str.w	ip, [sp]
 800f048:	f000 f806 	bl	800f058 <BaseRepresentation_ArrayEqualsThroughEquivalence$33232>
 800f04c:	b004      	add	sp, #16
 800f04e:	bdb0      	pop	{r4, r5, r7, pc}
 800f050:	e802544c 	.word	0xe802544c
 800f054:	17ff279e 	.word	0x17ff279e

0800f058 <BaseRepresentation_ArrayEqualsThroughEquivalence$33232>:
 800f058:	b580      	push	{r7, lr}
 800f05a:	b090      	sub	sp, #64	; 0x40
 800f05c:	4694      	mov	ip, r2
 800f05e:	4686      	mov	lr, r0
                                                             T[]            d      ,
                                                             int            offset ,
                                                             int            count  ,
                                                             EquivalenceSet set    ) where T : BaseRepresentation
        {
            int sLen = s != null ? s.Length : 0;
 800f060:	2800      	cmp	r0, #0
 800f062:	920f      	str	r2, [sp, #60]	; 0x3c
 800f064:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 800f068:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 800f06c:	930c      	str	r3, [sp, #48]	; 0x30
 800f06e:	910b      	str	r1, [sp, #44]	; 0x2c
 800f070:	d004      	beq.n	800f07c <BaseRepresentation_ArrayEqualsThroughEquivalence$33232+0x24>
 800f072:	e7ff      	b.n	800f074 <BaseRepresentation_ArrayEqualsThroughEquivalence$33232+0x1c>
                    CHECKS.ASSERT( reachability.Contains( caa                 ) == false, "{0} cannot belong to both the Reachability and the Prohibition set", caa                 );
                    CHECKS.ASSERT( reachability.Contains( caa.CustomAttribute ) == false, "{0} cannot belong to both the Reachability and the Prohibition set", caa.CustomAttribute );

                    reachability.ExpandProhibition( caa                 );
                    reachability.ExpandProhibition( caa.CustomAttribute );

 800f074:	980e      	ldr	r0, [sp, #56]	; 0x38
 800f076:	6881      	ldr	r1, [r0, #8]
                    if(fApply)
 800f078:	910a      	str	r1, [sp, #40]	; 0x28
 800f07a:	e002      	b.n	800f082 <BaseRepresentation_ArrayEqualsThroughEquivalence$33232+0x2a>
 800f07c:	2000      	movs	r0, #0
                                                             T[]            d      ,
                                                             int            offset ,
                                                             int            count  ,
                                                             EquivalenceSet set    ) where T : BaseRepresentation
        {
            int sLen = s != null ? s.Length : 0;
 800f07e:	900a      	str	r0, [sp, #40]	; 0x28
 800f080:	e7ff      	b.n	800f082 <BaseRepresentation_ArrayEqualsThroughEquivalence$33232+0x2a>
 800f082:	980a      	ldr	r0, [sp, #40]	; 0x28
            int dLen = d != null ? d.Length : 0;
 800f084:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f086:	2900      	cmp	r1, #0
 800f088:	9009      	str	r0, [sp, #36]	; 0x24
 800f08a:	d004      	beq.n	800f096 <BaseRepresentation_ArrayEqualsThroughEquivalence$33232+0x3e>
 800f08c:	e7ff      	b.n	800f08e <BaseRepresentation_ArrayEqualsThroughEquivalence$33232+0x36>
                    CHECKS.ASSERT( reachability.Contains( caa                 ) == false, "{0} cannot belong to both the Reachability and the Prohibition set", caa                 );
                    CHECKS.ASSERT( reachability.Contains( caa.CustomAttribute ) == false, "{0} cannot belong to both the Reachability and the Prohibition set", caa.CustomAttribute );

                    reachability.ExpandProhibition( caa                 );
                    reachability.ExpandProhibition( caa.CustomAttribute );

 800f08e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f090:	6881      	ldr	r1, [r0, #8]
                    if(fApply)
 800f092:	9108      	str	r1, [sp, #32]
 800f094:	e002      	b.n	800f09c <BaseRepresentation_ArrayEqualsThroughEquivalence$33232+0x44>
 800f096:	2000      	movs	r0, #0
                                                             int            offset ,
                                                             int            count  ,
                                                             EquivalenceSet set    ) where T : BaseRepresentation
        {
            int sLen = s != null ? s.Length : 0;
            int dLen = d != null ? d.Length : 0;
 800f098:	9008      	str	r0, [sp, #32]
 800f09a:	e7ff      	b.n	800f09c <BaseRepresentation_ArrayEqualsThroughEquivalence$33232+0x44>
 800f09c:	9808      	ldr	r0, [sp, #32]

            if(count < 0)
 800f09e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f0a0:	f1b1 3fff 	cmp.w	r1, #4294967295
 800f0a4:	9007      	str	r0, [sp, #28]
 800f0a6:	dc05      	bgt.n	800f0b4 <BaseRepresentation_ArrayEqualsThroughEquivalence$33232+0x5c>
 800f0a8:	e7ff      	b.n	800f0aa <BaseRepresentation_ArrayEqualsThroughEquivalence$33232+0x52>
            {
                if(sLen != dLen)
 800f0aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f0ac:	9907      	ldr	r1, [sp, #28]
 800f0ae:	4288      	cmp	r0, r1
 800f0b0:	d13c      	bne.n	800f12c <BaseRepresentation_ArrayEqualsThroughEquivalence$33232+0xd4>
 800f0b2:	e03e      	b.n	800f132 <BaseRepresentation_ArrayEqualsThroughEquivalence$33232+0xda>

                count = sLen - offset;
            }
            else
            {
                if(sLen < count + offset ||
 800f0b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f0b6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f0b8:	4288      	cmp	r0, r1
 800f0ba:	da03      	bge.n	800f0c4 <BaseRepresentation_ArrayEqualsThroughEquivalence$33232+0x6c>
 800f0bc:	e7ff      	b.n	800f0be <BaseRepresentation_ArrayEqualsThroughEquivalence$33232+0x66>
 800f0be:	2000      	movs	r0, #0
                   dLen < count + offset  )
                {
                    return false;
 800f0c0:	9006      	str	r0, [sp, #24]
 800f0c2:	e026      	b.n	800f112 <BaseRepresentation_ArrayEqualsThroughEquivalence$33232+0xba>

                count = sLen - offset;
            }
            else
            {
                if(sLen < count + offset ||
 800f0c4:	9807      	ldr	r0, [sp, #28]
 800f0c6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f0c8:	4288      	cmp	r0, r1
 800f0ca:	dbf8      	blt.n	800f0be <BaseRepresentation_ArrayEqualsThroughEquivalence$33232+0x66>
 800f0cc:	e7ff      	b.n	800f0ce <BaseRepresentation_ArrayEqualsThroughEquivalence$33232+0x76>
 800f0ce:	980f      	ldr	r0, [sp, #60]	; 0x3c
                   dLen < count + offset  )
                {
                    return false;
                }
            }
 800f0d0:	9005      	str	r0, [sp, #20]
 800f0d2:	e7ff      	b.n	800f0d4 <BaseRepresentation_ArrayEqualsThroughEquivalence$33232+0x7c>
 800f0d4:	9805      	ldr	r0, [sp, #20]
 800f0d6:	2100      	movs	r1, #0
 800f0d8:	9004      	str	r0, [sp, #16]
 800f0da:	9103      	str	r1, [sp, #12]
 800f0dc:	e7ff      	b.n	800f0de <BaseRepresentation_ArrayEqualsThroughEquivalence$33232+0x86>
 800f0de:	9803      	ldr	r0, [sp, #12]
 800f0e0:	9904      	ldr	r1, [sp, #16]

            while(count > 0)
 800f0e2:	2901      	cmp	r1, #1
 800f0e4:	9002      	str	r0, [sp, #8]
 800f0e6:	9101      	str	r1, [sp, #4]
 800f0e8:	db10      	blt.n	800f10c <BaseRepresentation_ArrayEqualsThroughEquivalence$33232+0xb4>
 800f0ea:	e7ff      	b.n	800f0ec <BaseRepresentation_ArrayEqualsThroughEquivalence$33232+0x94>
            {
                if(EqualsThroughEquivalence( s[offset], d[offset], set ) == false)
 800f0ec:	980e      	ldr	r0, [sp, #56]	; 0x38
 800f0ee:	9902      	ldr	r1, [sp, #8]
 800f0f0:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 800f0f4:	68d0      	ldr	r0, [r2, #12]
 800f0f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f0f8:	eb02 0381 	add.w	r3, r2, r1, lsl #2
 800f0fc:	68d9      	ldr	r1, [r3, #12]
 800f0fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f100:	f7ff ff58 	bl	800efb4 <BaseRepresentation_EqualsThroughEquivalence$13542>
 800f104:	f010 0fff 	tst.w	r0, #255	; 0xff
 800f108:	d006      	beq.n	800f118 <BaseRepresentation_ArrayEqualsThroughEquivalence$33232+0xc0>
 800f10a:	e008      	b.n	800f11e <BaseRepresentation_ArrayEqualsThroughEquivalence$33232+0xc6>
 800f10c:	2001      	movs	r0, #1

                offset++;
                count--;
            }

            return true;
 800f10e:	9006      	str	r0, [sp, #24]
 800f110:	e7ff      	b.n	800f112 <BaseRepresentation_ArrayEqualsThroughEquivalence$33232+0xba>
 800f112:	9806      	ldr	r0, [sp, #24]
 800f114:	b010      	add	sp, #64	; 0x40
 800f116:	bd80      	pop	{r7, pc}
 800f118:	2000      	movs	r0, #0

            while(count > 0)
            {
                if(EqualsThroughEquivalence( s[offset], d[offset], set ) == false)
                {
                    return false;
 800f11a:	9006      	str	r0, [sp, #24]
 800f11c:	e7f9      	b.n	800f112 <BaseRepresentation_ArrayEqualsThroughEquivalence$33232+0xba>
                }

                offset++;
 800f11e:	9802      	ldr	r0, [sp, #8]
 800f120:	1c41      	adds	r1, r0, #1
                count--;
 800f122:	9a01      	ldr	r2, [sp, #4]
 800f124:	1e53      	subs	r3, r2, #1
            }
 800f126:	9304      	str	r3, [sp, #16]
 800f128:	9103      	str	r1, [sp, #12]
 800f12a:	e7d8      	b.n	800f0de <BaseRepresentation_ArrayEqualsThroughEquivalence$33232+0x86>
 800f12c:	2000      	movs	r0, #0

            if(count < 0)
            {
                if(sLen != dLen)
                {
                    return false;
 800f12e:	9006      	str	r0, [sp, #24]
 800f130:	e7ef      	b.n	800f112 <BaseRepresentation_ArrayEqualsThroughEquivalence$33232+0xba>
                }

                count = sLen - offset;
 800f132:	9809      	ldr	r0, [sp, #36]	; 0x24
            }
 800f134:	9005      	str	r0, [sp, #20]
 800f136:	e7cd      	b.n	800f0d4 <BaseRepresentation_ArrayEqualsThroughEquivalence$33232+0x7c>

0800f138 <CodeMap_ResolveAddressToCodeMap$13579>:
 800f138:	b580      	push	{r7, lr}
 800f13a:	b092      	sub	sp, #72	; 0x48
 800f13c:	460a      	mov	r2, r1
 800f13e:	4603      	mov	r3, r0
        [NoInline]
        [DisableBoundsChecks]
        public static CodeMap ResolveAddressToCodeMap( UIntPtr                address ,
                                                       CodeMap.ReverseIndex[] table   )
        {
            if(table != null)
 800f140:	2900      	cmp	r1, #0
 800f142:	900d      	str	r0, [sp, #52]	; 0x34
 800f144:	930c      	str	r3, [sp, #48]	; 0x30
 800f146:	920b      	str	r2, [sp, #44]	; 0x2c
 800f148:	d007      	beq.n	800f15a <CodeMap_ResolveAddressToCodeMap$13579+0x22>
 800f14a:	e7ff      	b.n	800f14c <CodeMap_ResolveAddressToCodeMap$13579+0x14>

                                        case (uint)EncodedStackWalk.StackOffset16BitExtender:
                                            offset  = (uint)this.StackWalk[pos++]; 
                                            offset |= (uint)this.StackWalk[pos++] << 8;
                                            break;
                                    }
 800f14c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f14e:	6881      	ldr	r1, [r0, #8]
                                                       CodeMap.ReverseIndex[] table   )
        {
            if(table != null)
            {
                int low  = 0;
                int high = table.Length - 2; // The last item is sentinel, so we don't need to check "mid+1 < length".
 800f150:	3902      	subs	r1, #2
 800f152:	2200      	movs	r2, #0
 800f154:	910a      	str	r1, [sp, #40]	; 0x28
 800f156:	9209      	str	r2, [sp, #36]	; 0x24
 800f158:	e005      	b.n	800f166 <CodeMap_ResolveAddressToCodeMap$13579+0x2e>
 800f15a:	2000      	movs	r0, #0
                        return table[mid].Code;
                    }
                }
            }

            return null;
 800f15c:	9008      	str	r0, [sp, #32]
 800f15e:	e7ff      	b.n	800f160 <CodeMap_ResolveAddressToCodeMap$13579+0x28>
        }
 800f160:	9808      	ldr	r0, [sp, #32]
 800f162:	b012      	add	sp, #72	; 0x48
 800f164:	bd80      	pop	{r7, pc}
 800f166:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f168:	990a      	ldr	r1, [sp, #40]	; 0x28
            if(table != null)
            {
                int low  = 0;
                int high = table.Length - 2; // The last item is sentinel, so we don't need to check "mid+1 < length".

                while(low <= high)
 800f16a:	4288      	cmp	r0, r1
 800f16c:	9007      	str	r0, [sp, #28]
 800f16e:	9106      	str	r1, [sp, #24]
 800f170:	dc1f      	bgt.n	800f1b2 <CodeMap_ResolveAddressToCodeMap$13579+0x7a>
 800f172:	e7ff      	b.n	800f174 <CodeMap_ResolveAddressToCodeMap$13579+0x3c>
                {
                    int mid = (high + low) / 2;
 800f174:	9806      	ldr	r0, [sp, #24]
 800f176:	9907      	ldr	r1, [sp, #28]
 800f178:	1842      	adds	r2, r0, r1
 800f17a:	1052      	asrs	r2, r2, #1
 800f17c:	4613      	mov	r3, r2

                    if(AddressMath.IsLessThan( address, table[mid].Address ))
 800f17e:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 800f182:	eb0c 02c2 	add.w	r2, ip, r2, lsl #3
 800f186:	68d2      	ldr	r2, [r2, #12]
 800f188:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 800f18c:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 800f190:	920f      	str	r2, [sp, #60]	; 0x3c
 800f192:	aa0e      	add	r2, sp, #56	; 0x38
            NormalCode              = 0x00000001,
            EntryPoint              = 0x00000002,
            ExceptionHandler        = 0x00000004,
            InterruptHandler        = 0x00000008,
                               
            ColdSection             = 0x00000010,
 800f194:	f1a2 0008 	sub.w	r0, r2, #8
 800f198:	9305      	str	r3, [sp, #20]
 800f19a:	f7f4 f9ed 	bl	8003578 <UIntPtr_ToUInt32$2870>
 800f19e:	a90f      	add	r1, sp, #60	; 0x3c
 800f1a0:	3908      	subs	r1, #8
 800f1a2:	9004      	str	r0, [sp, #16]
 800f1a4:	4608      	mov	r0, r1
 800f1a6:	f7f4 f9e7 	bl	8003578 <UIntPtr_ToUInt32$2870>

                while(low <= high)
                {
                    int mid = (high + low) / 2;

                    if(AddressMath.IsLessThan( address, table[mid].Address ))
 800f1aa:	9904      	ldr	r1, [sp, #16]
 800f1ac:	4281      	cmp	r1, r0
 800f1ae:	d301      	bcc.n	800f1b4 <CodeMap_ResolveAddressToCodeMap$13579+0x7c>
 800f1b0:	e006      	b.n	800f1c0 <CodeMap_ResolveAddressToCodeMap$13579+0x88>
                    else
                    {
                        return table[mid].Code;
                    }
                }
            }
 800f1b2:	e7d2      	b.n	800f15a <CodeMap_ResolveAddressToCodeMap$13579+0x22>
                {
                    int mid = (high + low) / 2;

                    if(AddressMath.IsLessThan( address, table[mid].Address ))
                    {
                        high = mid - 1;
 800f1b4:	9805      	ldr	r0, [sp, #20]
 800f1b6:	1e41      	subs	r1, r0, #1
 800f1b8:	9a07      	ldr	r2, [sp, #28]
                    }
 800f1ba:	9103      	str	r1, [sp, #12]
 800f1bc:	9202      	str	r2, [sp, #8]
 800f1be:	e025      	b.n	800f20c <CodeMap_ResolveAddressToCodeMap$13579+0xd4>
                    else if(AddressMath.IsGreaterThanOrEqual( address, table[mid+1].Address ))
 800f1c0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f1c2:	9905      	ldr	r1, [sp, #20]
 800f1c4:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 800f1c8:	6952      	ldr	r2, [r2, #20]
 800f1ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f1cc:	9310      	str	r3, [sp, #64]	; 0x40
 800f1ce:	9211      	str	r2, [sp, #68]	; 0x44
 800f1d0:	aa10      	add	r2, sp, #64	; 0x40
                                    
            StackOffsetMask           = 0x1F, // Offset in WORDs.
            StackOffsetMax            = 0x1D, // Offset in WORDs.
            StackOffset8BitExtender   = 0x1E, // Next Pointer Tracking is a full 8bit stack offset.
            StackOffset16BitExtender  = 0x1F, // Next Pointer Tracking is a full 16bit stack offset.
                                    
 800f1d2:	f1a2 0008 	sub.w	r0, r2, #8
 800f1d6:	f7f4 f9cf 	bl	8003578 <UIntPtr_ToUInt32$2870>
 800f1da:	a911      	add	r1, sp, #68	; 0x44
 800f1dc:	3908      	subs	r1, #8
 800f1de:	9001      	str	r0, [sp, #4]
 800f1e0:	4608      	mov	r0, r1
 800f1e2:	f7f4 f9c9 	bl	8003578 <UIntPtr_ToUInt32$2870>

                    if(AddressMath.IsLessThan( address, table[mid].Address ))
                    {
                        high = mid - 1;
                    }
                    else if(AddressMath.IsGreaterThanOrEqual( address, table[mid+1].Address ))
 800f1e6:	9901      	ldr	r1, [sp, #4]
 800f1e8:	4281      	cmp	r1, r0
 800f1ea:	9805      	ldr	r0, [sp, #20]
 800f1ec:	9000      	str	r0, [sp, #0]
 800f1ee:	d306      	bcc.n	800f1fe <CodeMap_ResolveAddressToCodeMap$13579+0xc6>
 800f1f0:	e7ff      	b.n	800f1f2 <CodeMap_ResolveAddressToCodeMap$13579+0xba>
                    {
                        low = mid + 1;
 800f1f2:	9805      	ldr	r0, [sp, #20]
 800f1f4:	1c41      	adds	r1, r0, #1
 800f1f6:	9a06      	ldr	r2, [sp, #24]
                    }
 800f1f8:	9203      	str	r2, [sp, #12]
 800f1fa:	9102      	str	r1, [sp, #8]
 800f1fc:	e006      	b.n	800f20c <CodeMap_ResolveAddressToCodeMap$13579+0xd4>
 800f1fe:	9800      	ldr	r0, [sp, #0]
                    else
                    {
                        return table[mid].Code;
 800f200:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f202:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800f206:	6900      	ldr	r0, [r0, #16]
 800f208:	9008      	str	r0, [sp, #32]
 800f20a:	e7a9      	b.n	800f160 <CodeMap_ResolveAddressToCodeMap$13579+0x28>
 800f20c:	9802      	ldr	r0, [sp, #8]
 800f20e:	9903      	ldr	r1, [sp, #12]
                    }
                }
 800f210:	910a      	str	r1, [sp, #40]	; 0x28
 800f212:	9009      	str	r0, [sp, #36]	; 0x24
 800f214:	e7a7      	b.n	800f166 <CodeMap_ResolveAddressToCodeMap$13579+0x2e>

0800f216 <Range_Match$14951>:
 800f216:	b580      	push	{r7, lr}
 800f218:	b08c      	sub	sp, #48	; 0x30
 800f21a:	460b      	mov	r3, r1
 800f21c:	4684      	mov	ip, r0
            }

            public CodePointer Match( UIntPtr address   ,
                                      VTable  exception )
            {
                if(Contains( address ))
 800f21e:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800f222:	9309      	str	r3, [sp, #36]	; 0x24
 800f224:	9208      	str	r2, [sp, #32]
 800f226:	f000 fd67 	bl	800fcf8 <Range_Contains$14949>
 800f22a:	f010 0fff 	tst.w	r0, #255	; 0xff
 800f22e:	d006      	beq.n	800f23e <Range_Match$14951+0x28>
 800f230:	e7ff      	b.n	800f232 <Range_Match$14951+0x1c>
                {
                    Handler[] handlers = this.Handlers;
 800f232:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f234:	6901      	ldr	r1, [r0, #16]
 800f236:	2200      	movs	r2, #0

                    for(int i = 0; i < handlers.Length; i++)
 800f238:	9107      	str	r1, [sp, #28]
 800f23a:	9206      	str	r2, [sp, #24]
 800f23c:	e008      	b.n	800f250 <Range_Match$14951+0x3a>
 800f23e:	a80b      	add	r0, sp, #44	; 0x2c
 800f240:	2100      	movs	r1, #0
 800f242:	910b      	str	r1, [sp, #44]	; 0x2c
                            return handlers[i].HandlerCode;
                        }
                    }
                }

                return new CodePointer();
 800f244:	9005      	str	r0, [sp, #20]
 800f246:	e7ff      	b.n	800f248 <Range_Match$14951+0x32>
 800f248:	9805      	ldr	r0, [sp, #20]
 800f24a:	6800      	ldr	r0, [r0, #0]
 800f24c:	b00c      	add	sp, #48	; 0x30
 800f24e:	bd80      	pop	{r7, pc}
 800f250:	9806      	ldr	r0, [sp, #24]
 800f252:	9907      	ldr	r1, [sp, #28]
 800f254:	688a      	ldr	r2, [r1, #8]
            {
                if(Contains( address ))
                {
                    Handler[] handlers = this.Handlers;

                    for(int i = 0; i < handlers.Length; i++)
 800f256:	4290      	cmp	r0, r2
 800f258:	9004      	str	r0, [sp, #16]
 800f25a:	da0a      	bge.n	800f272 <Range_Match$14951+0x5c>
 800f25c:	e7ff      	b.n	800f25e <Range_Match$14951+0x48>
                    {
                        VTable filter = handlers[i].Filter;
 800f25e:	9807      	ldr	r0, [sp, #28]
 800f260:	9904      	ldr	r1, [sp, #16]
 800f262:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 800f266:	68d2      	ldr	r2, [r2, #12]

                        if(filter == null || filter.CanBeAssignedFrom( exception ))
 800f268:	2a00      	cmp	r2, #0
 800f26a:	9103      	str	r1, [sp, #12]
 800f26c:	9202      	str	r2, [sp, #8]
 800f26e:	d101      	bne.n	800f274 <Range_Match$14951+0x5e>
 800f270:	e005      	b.n	800f27e <Range_Match$14951+0x68>
                        {
                            return handlers[i].HandlerCode;
                        }
                    }
                }
 800f272:	e7e4      	b.n	800f23e <Range_Match$14951+0x28>
                        return false;
                    }
                }

                return true;
            }
 800f274:	9802      	ldr	r0, [sp, #8]
 800f276:	9908      	ldr	r1, [sp, #32]
 800f278:	4288      	cmp	r0, r1
 800f27a:	d009      	beq.n	800f290 <Range_Match$14951+0x7a>
 800f27c:	e00b      	b.n	800f296 <Range_Match$14951+0x80>
 800f27e:	9803      	ldr	r0, [sp, #12]
                    {
                        VTable filter = handlers[i].Filter;

                        if(filter == null || filter.CanBeAssignedFrom( exception ))
                        {
                            return handlers[i].HandlerCode;
 800f280:	9907      	ldr	r1, [sp, #28]
 800f282:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800f286:	aa0b      	add	r2, sp, #44	; 0x2c
 800f288:	6900      	ldr	r0, [r0, #16]
 800f28a:	900b      	str	r0, [sp, #44]	; 0x2c
 800f28c:	9205      	str	r2, [sp, #20]
 800f28e:	e7db      	b.n	800f248 <Range_Match$14951+0x32>
 800f290:	2001      	movs	r0, #1
                }

                return true;
            }

            return false;
 800f292:	9001      	str	r0, [sp, #4]
 800f294:	e005      	b.n	800f2a2 <Range_Match$14951+0x8c>
        }

        [NoInline]
 800f296:	9802      	ldr	r0, [sp, #8]
 800f298:	9908      	ldr	r1, [sp, #32]
 800f29a:	f7f6 fd95 	bl	8005dc8 <VTable_CanBeAssignedFrom_Slow$3676>
 800f29e:	9001      	str	r0, [sp, #4]
 800f2a0:	e7ff      	b.n	800f2a2 <Range_Match$14951+0x8c>
 800f2a2:	9801      	ldr	r0, [sp, #4]

                    for(int i = 0; i < handlers.Length; i++)
                    {
                        VTable filter = handlers[i].Filter;

                        if(filter == null || filter.CanBeAssignedFrom( exception ))
 800f2a4:	f010 0fff 	tst.w	r0, #255	; 0xff
 800f2a8:	9804      	ldr	r0, [sp, #16]
 800f2aa:	9003      	str	r0, [sp, #12]
 800f2ac:	d1e7      	bne.n	800f27e <Range_Match$14951+0x68>
 800f2ae:	e7ff      	b.n	800f2b0 <Range_Match$14951+0x9a>
            {
                if(Contains( address ))
                {
                    Handler[] handlers = this.Handlers;

                    for(int i = 0; i < handlers.Length; i++)
 800f2b0:	9804      	ldr	r0, [sp, #16]
 800f2b2:	1c41      	adds	r1, r0, #1
 800f2b4:	9106      	str	r1, [sp, #24]
 800f2b6:	e7cb      	b.n	800f250 <Range_Match$14951+0x3a>

0800f2b8 <AbstractReferenceTypeRepresentation_ToString$14388>:
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b08a      	sub	sp, #40	; 0x28
 800f2bc:	4601      	mov	r1, r0
            UnmanagedExport = 0x0008, // Managed method exported via thunk to unmanaged code.

            // Reserved flags for runtime use only.
            ReservedMask = 0xD000,
            RTSpecialName = 0x1000, // Runtime should check name encoding.
            HasSecurity = 0x4000, // Method has security associate with it.
 800f2be:	4a20      	ldr	r2, [pc, #128]	; (800f340 <AbstractReferenceTypeRepresentation_ToString$14388+0x88>)
 800f2c0:	4b20      	ldr	r3, [pc, #128]	; (800f344 <AbstractReferenceTypeRepresentation_ToString$14388+0x8c>)
 800f2c2:	447b      	add	r3, pc
 800f2c4:	441a      	add	r2, r3
 800f2c6:	f8df c080 	ldr.w	ip, [pc, #128]	; 800f348 <AbstractReferenceTypeRepresentation_ToString$14388+0x90>
 800f2ca:	449c      	add	ip, r3
 800f2cc:	9007      	str	r0, [sp, #28]
 800f2ce:	4610      	mov	r0, r2
 800f2d0:	9106      	str	r1, [sp, #24]
 800f2d2:	4661      	mov	r1, ip
 800f2d4:	9305      	str	r3, [sp, #20]
 800f2d6:	f7f1 fa73 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800f2da:	491c      	ldr	r1, [pc, #112]	; (800f34c <AbstractReferenceTypeRepresentation_ToString$14388+0x94>)
 800f2dc:	9a05      	ldr	r2, [sp, #20]
 800f2de:	4411      	add	r1, r2
 800f2e0:	9004      	str	r0, [sp, #16]
 800f2e2:	f7fe ffa3 	bl	800e22c <StringBuilder_.ctor$8489>
            EnableNullChecks = 0x00100000,
            DisableNullChecks = 0x00200000,
            DisableDeepNullChecks = 0x00400000,

            //LON: 2/16/09
            Exported = 0x01000000,
 800f2e6:	9807      	ldr	r0, [sp, #28]
 800f2e8:	f100 0108 	add.w	r1, r0, #8
 800f2ec:	9108      	str	r1, [sp, #32]
 800f2ee:	2100      	movs	r1, #0
 800f2f0:	9109      	str	r1, [sp, #36]	; 0x24
            }

            //--//

            //
            // Access Methods
 800f2f2:	9a08      	ldr	r2, [sp, #32]
            //
            // Constructor Methods
            //

            public GenericContext( MethodRepresentation template,
                                   TypeRepresentation[] parameters )
 800f2f4:	3a08      	subs	r2, #8
 800f2f6:	9109      	str	r1, [sp, #36]	; 0x24
 800f2f8:	ab09      	add	r3, sp, #36	; 0x24
 800f2fa:	f1a3 0008 	sub.w	r0, r3, #8
 800f2fe:	9103      	str	r1, [sp, #12]
 800f300:	4611      	mov	r1, r2
 800f302:	f7f1 fadb 	bl	80008bc <UIntPtr_.ctor$2864>
            EnableNullChecks = 0x00100000,
            DisableNullChecks = 0x00200000,
            DisableDeepNullChecks = 0x00400000,

            //LON: 2/16/09
            Exported = 0x01000000,
 800f306:	9809      	ldr	r0, [sp, #36]	; 0x24
            return Object.Equals( left, right );
        }

        public static bool operator !=( MethodRepresentation left,
                                        MethodRepresentation right )
        {
 800f308:	6840      	ldr	r0, [r0, #4]
            // Reserved flags for runtime use only.
            ReservedMask = 0xD000,
            RTSpecialName = 0x1000, // Runtime should check name encoding.
            HasSecurity = 0x4000, // Method has security associate with it.
            RequireSecObject = 0x8000  // Method calls another method containing security code.
        }
 800f30a:	69c0      	ldr	r0, [r0, #28]
 800f30c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800f30e:	4910      	ldr	r1, [pc, #64]	; (800f350 <AbstractReferenceTypeRepresentation_ToString$14388+0x98>)
 800f310:	9a05      	ldr	r2, [sp, #20]
 800f312:	5c8a      	ldrb	r2, [r1, r2]
 800f314:	9907      	ldr	r1, [sp, #28]
 800f316:	9002      	str	r0, [sp, #8]
 800f318:	4608      	mov	r0, r1
 800f31a:	9904      	ldr	r1, [sp, #16]
 800f31c:	9b03      	ldr	r3, [sp, #12]
 800f31e:	f8dd c008 	ldr.w	ip, [sp, #8]
 800f322:	47e0      	blx	ip

        [Flags]
 800f324:	480b      	ldr	r0, [pc, #44]	; (800f354 <AbstractReferenceTypeRepresentation_ToString$14388+0x9c>)
 800f326:	9905      	ldr	r1, [sp, #20]
 800f328:	4401      	add	r1, r0
 800f32a:	9804      	ldr	r0, [sp, #16]
 800f32c:	f7fd fd66 	bl	800cdfc <StringBuilder_Append$8507>
        public enum BuildTimeAttributes : uint
        {
 800f330:	9904      	ldr	r1, [sp, #16]
 800f332:	9001      	str	r0, [sp, #4]
 800f334:	4608      	mov	r0, r1
 800f336:	f7f3 faa5 	bl	8002884 <StringBuilder_ToString$8499>
 800f33a:	b00a      	add	sp, #40	; 0x28
 800f33c:	bd80      	pop	{r7, pc}
 800f33e:	46c0      	nop			; (mov r8, r8)
 800f340:	ffffea38 	.word	0xffffea38
 800f344:	17ff250e 	.word	0x17ff250e
 800f348:	e8010b3c 	.word	0xe8010b3c
 800f34c:	e8013acc 	.word	0xe8013acc
 800f350:	e8025450 	.word	0xe8025450
 800f354:	e8013a4c 	.word	0xe8013a4c

0800f358 <TypeRepresentation_get_IsOpenType$14670>:
 800f358:	b580      	push	{r7, lr}
 800f35a:	b082      	sub	sp, #8
 800f35c:	4601      	mov	r1, r0

        public virtual bool IsOpenType
        {
            get
            {
                if(m_genericContext != null)
 800f35e:	6a00      	ldr	r0, [r0, #32]
 800f360:	2800      	cmp	r0, #0
 800f362:	9101      	str	r1, [sp, #4]
 800f364:	d006      	beq.n	800f374 <TypeRepresentation_get_IsOpenType$14670+0x1c>
 800f366:	e7ff      	b.n	800f368 <TypeRepresentation_get_IsOpenType$14670+0x10>
                {
                    return m_genericContext.IsOpenType;
 800f368:	9801      	ldr	r0, [sp, #4]
 800f36a:	6a00      	ldr	r0, [r0, #32]
 800f36c:	f000 fb14 	bl	800f998 <GenericContext_get_IsOpenType$15201>
 800f370:	9000      	str	r0, [sp, #0]
 800f372:	e002      	b.n	800f37a <TypeRepresentation_get_IsOpenType$14670+0x22>
 800f374:	2000      	movs	r0, #0
                }

                return false;
 800f376:	9000      	str	r0, [sp, #0]
 800f378:	e7ff      	b.n	800f37a <TypeRepresentation_get_IsOpenType$14670+0x22>
 800f37a:	9800      	ldr	r0, [sp, #0]
 800f37c:	b002      	add	sp, #8
 800f37e:	bd80      	pop	{r7, pc}

0800f380 <TypeRepresentation_get_IsDelayedType$14671>:
 800f380:	b580      	push	{r7, lr}
 800f382:	b082      	sub	sp, #8
 800f384:	4601      	mov	r1, r0

        public virtual bool IsDelayedType
        {
            get
            {
                if(m_genericContext != null)
 800f386:	6a00      	ldr	r0, [r0, #32]
 800f388:	2800      	cmp	r0, #0
 800f38a:	9101      	str	r1, [sp, #4]
 800f38c:	d006      	beq.n	800f39c <TypeRepresentation_get_IsDelayedType$14671+0x1c>
 800f38e:	e7ff      	b.n	800f390 <TypeRepresentation_get_IsDelayedType$14671+0x10>
                {
                    return m_genericContext.IsDelayedType;
 800f390:	9801      	ldr	r0, [sp, #4]
 800f392:	6a00      	ldr	r0, [r0, #32]
 800f394:	f000 fb4e 	bl	800fa34 <GenericContext_get_IsDelayedType$15202>
 800f398:	9000      	str	r0, [sp, #0]
 800f39a:	e002      	b.n	800f3a2 <TypeRepresentation_get_IsDelayedType$14671+0x22>
 800f39c:	2000      	movs	r0, #0
                }

                return false;
 800f39e:	9000      	str	r0, [sp, #0]
 800f3a0:	e7ff      	b.n	800f3a2 <TypeRepresentation_get_IsDelayedType$14671+0x22>
 800f3a2:	9800      	ldr	r0, [sp, #0]
 800f3a4:	b002      	add	sp, #8
 800f3a6:	bd80      	pop	{r7, pc}

0800f3a8 <BoxedValueTypeRepresentation_EqualsThroughEquivalence$14403>:
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b084      	sub	sp, #16
 800f3ac:	460b      	mov	r3, r1

        //
        // MetaDataEquality Methods
        //

        public override bool EqualsThroughEquivalence( object         obj ,
 800f3ae:	f8df c04c 	ldr.w	ip, [pc, #76]	; 800f3fc <BoxedValueTypeRepresentation_EqualsThroughEquivalence$14403+0x54>
 800f3b2:	f8df e04c 	ldr.w	lr, [pc, #76]	; 800f400 <BoxedValueTypeRepresentation_EqualsThroughEquivalence$14403+0x58>
 800f3b6:	44fe      	add	lr, pc
 800f3b8:	44f4      	add	ip, lr
 800f3ba:	9003      	str	r0, [sp, #12]
 800f3bc:	4608      	mov	r0, r1
 800f3be:	4661      	mov	r1, ip
 800f3c0:	9302      	str	r3, [sp, #8]
 800f3c2:	9201      	str	r2, [sp, #4]
 800f3c4:	f7f1 fc4a 	bl	8000c5c <TypeSystemManager_CastToSealedTypeNoThrow$4951>
 800f3c8:	2800      	cmp	r0, #0
 800f3ca:	d010      	beq.n	800f3ee <BoxedValueTypeRepresentation_EqualsThroughEquivalence$14403+0x46>
 800f3cc:	e7ff      	b.n	800f3ce <BoxedValueTypeRepresentation_EqualsThroughEquivalence$14403+0x26>
                                                       EquivalenceSet set )
        {
 800f3ce:	480b      	ldr	r0, [pc, #44]	; (800f3fc <BoxedValueTypeRepresentation_EqualsThroughEquivalence$14403+0x54>)
 800f3d0:	490c      	ldr	r1, [pc, #48]	; (800f404 <BoxedValueTypeRepresentation_EqualsThroughEquivalence$14403+0x5c>)
 800f3d2:	4479      	add	r1, pc
 800f3d4:	4401      	add	r1, r0
 800f3d6:	9802      	ldr	r0, [sp, #8]
 800f3d8:	f7f1 fdec 	bl	8000fb4 <TypeSystemManager_CastToSealedType$4950>
            if(obj is ArrayReferenceTypeRepresentation)
            {
 800f3dc:	9903      	ldr	r1, [sp, #12]
 800f3de:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800f3e0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800f3e2:	4610      	mov	r0, r2
 800f3e4:	9a01      	ldr	r2, [sp, #4]
 800f3e6:	f7ff fde5 	bl	800efb4 <BaseRepresentation_EqualsThroughEquivalence$13542>
 800f3ea:	9000      	str	r0, [sp, #0]
 800f3ec:	e002      	b.n	800f3f4 <BoxedValueTypeRepresentation_EqualsThroughEquivalence$14403+0x4c>
 800f3ee:	2000      	movs	r0, #0
                ArrayReferenceTypeRepresentation other = (ArrayReferenceTypeRepresentation)obj;

                return EqualsThroughEquivalence( m_elementType, other.m_elementType, set );
 800f3f0:	9000      	str	r0, [sp, #0]
 800f3f2:	e7ff      	b.n	800f3f4 <BoxedValueTypeRepresentation_EqualsThroughEquivalence$14403+0x4c>
 800f3f4:	9800      	ldr	r0, [sp, #0]
 800f3f6:	b004      	add	sp, #16
 800f3f8:	bd80      	pop	{r7, pc}
 800f3fa:	46c0      	nop			; (mov r8, r8)
 800f3fc:	e8013b9c 	.word	0xe8013b9c
 800f400:	17ff241a 	.word	0x17ff241a
 800f404:	17ff23fe 	.word	0x17ff23fe

0800f408 <BoxedValueTypeRepresentation_ToString$14416>:
 800f408:	b580      	push	{r7, lr}
 800f40a:	b086      	sub	sp, #24
 800f40c:	4601      	mov	r1, r0
        // Debug Methods
        //

        public override String ToString()
        {
            System.Text.StringBuilder sb = new System.Text.StringBuilder( "BoxedValueTypeRepresentation(" );
 800f40e:	4a14      	ldr	r2, [pc, #80]	; (800f460 <BoxedValueTypeRepresentation_ToString$14416+0x58>)
 800f410:	4b14      	ldr	r3, [pc, #80]	; (800f464 <BoxedValueTypeRepresentation_ToString$14416+0x5c>)
 800f412:	447b      	add	r3, pc
 800f414:	441a      	add	r2, r3
 800f416:	f8df c050 	ldr.w	ip, [pc, #80]	; 800f468 <BoxedValueTypeRepresentation_ToString$14416+0x60>
 800f41a:	449c      	add	ip, r3
 800f41c:	9005      	str	r0, [sp, #20]
 800f41e:	4610      	mov	r0, r2
 800f420:	9104      	str	r1, [sp, #16]
 800f422:	4661      	mov	r1, ip
 800f424:	9303      	str	r3, [sp, #12]
 800f426:	f7f1 f9cb 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800f42a:	4910      	ldr	r1, [pc, #64]	; (800f46c <BoxedValueTypeRepresentation_ToString$14416+0x64>)
 800f42c:	9a03      	ldr	r2, [sp, #12]
 800f42e:	4411      	add	r1, r2
 800f430:	9002      	str	r0, [sp, #8]
 800f432:	f7fe fefb 	bl	800e22c <StringBuilder_.ctor$8489>
 800f436:	480e      	ldr	r0, [pc, #56]	; (800f470 <BoxedValueTypeRepresentation_ToString$14416+0x68>)

            PrettyToString( sb, true, false );
 800f438:	9903      	ldr	r1, [sp, #12]
 800f43a:	5c42      	ldrb	r2, [r0, r1]
 800f43c:	2300      	movs	r3, #0
 800f43e:	9805      	ldr	r0, [sp, #20]
 800f440:	9902      	ldr	r1, [sp, #8]
 800f442:	f000 f88f 	bl	800f564 <BoxedValueTypeRepresentation_PrettyToString$14417>

            sb.Append( ")" );
 800f446:	480b      	ldr	r0, [pc, #44]	; (800f474 <BoxedValueTypeRepresentation_ToString$14416+0x6c>)
 800f448:	9903      	ldr	r1, [sp, #12]
 800f44a:	4401      	add	r1, r0
 800f44c:	9802      	ldr	r0, [sp, #8]
 800f44e:	f7fd fcd5 	bl	800cdfc <StringBuilder_Append$8507>

            return sb.ToString();
 800f452:	9902      	ldr	r1, [sp, #8]
 800f454:	9001      	str	r0, [sp, #4]
 800f456:	4608      	mov	r0, r1
 800f458:	f7f3 fa14 	bl	8002884 <StringBuilder_ToString$8499>
 800f45c:	b006      	add	sp, #24
 800f45e:	bd80      	pop	{r7, pc}
 800f460:	ffffea38 	.word	0xffffea38
 800f464:	17ff23be 	.word	0x17ff23be
 800f468:	e8010b3c 	.word	0xe8010b3c
 800f46c:	e8013bcc 	.word	0xe8013bcc
 800f470:	e8025451 	.word	0xe8025451
 800f474:	e8013a4c 	.word	0xe8013a4c

0800f478 <BoxedValueTypeRepresentation_Equals$14404>:
 800f478:	b580      	push	{r7, lr}
 800f47a:	b082      	sub	sp, #8
 800f47c:	460a      	mov	r2, r1
 800f47e:	4603      	mov	r3, r0
            return false;
        }

        public override bool Equals( object obj )
        {
            return this.EqualsThroughEquivalence( obj, null );
 800f480:	f04f 0c00 	mov.w	ip, #0
 800f484:	9201      	str	r2, [sp, #4]
 800f486:	4662      	mov	r2, ip
 800f488:	9300      	str	r3, [sp, #0]
 800f48a:	f7ff ff8d 	bl	800f3a8 <BoxedValueTypeRepresentation_EqualsThroughEquivalence$14403>
 800f48e:	b002      	add	sp, #8
 800f490:	bd80      	pop	{r7, pc}

0800f492 <BoxedValueTypeRepresentation_GetHashCode$14405>:
 800f492:	b580      	push	{r7, lr}
 800f494:	b086      	sub	sp, #24
 800f496:	4601      	mov	r1, r0
        }

        public override int GetHashCode()
        {
            return m_valueType.GetHashCode();
 800f498:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

            context.Pop();
        }

        //--//

 800f49a:	f100 0208 	add.w	r2, r0, #8
 800f49e:	9204      	str	r2, [sp, #16]
 800f4a0:	2200      	movs	r2, #0
 800f4a2:	9205      	str	r2, [sp, #20]
            }
        }

        public override StackEquivalentType StackEquivalentType
        {
            get
 800f4a4:	9b04      	ldr	r3, [sp, #16]

                return tdRes;
            }
            else
            {
                return valueType;
 800f4a6:	3b08      	subs	r3, #8
 800f4a8:	9205      	str	r2, [sp, #20]
 800f4aa:	aa05      	add	r2, sp, #20
 800f4ac:	3a08      	subs	r2, #8
 800f4ae:	9003      	str	r0, [sp, #12]
 800f4b0:	4610      	mov	r0, r2
 800f4b2:	9102      	str	r1, [sp, #8]
 800f4b4:	4619      	mov	r1, r3
 800f4b6:	f7f1 fa01 	bl	80008bc <UIntPtr_.ctor$2864>

            context.Pop();
        }

        //--//

 800f4ba:	9805      	ldr	r0, [sp, #20]
 800f4bc:	6840      	ldr	r0, [r0, #4]
            return this.EqualsThroughEquivalence( obj, null );
        }

        public override int GetHashCode()
        {
            return m_valueType.GetHashCode();
 800f4be:	69c0      	ldr	r0, [r0, #28]
 800f4c0:	6940      	ldr	r0, [r0, #20]
 800f4c2:	9903      	ldr	r1, [sp, #12]
 800f4c4:	9001      	str	r0, [sp, #4]
 800f4c6:	4608      	mov	r0, r1
 800f4c8:	9a01      	ldr	r2, [sp, #4]
 800f4ca:	4790      	blx	r2
 800f4cc:	b006      	add	sp, #24
 800f4ce:	bd80      	pop	{r7, pc}

0800f4d0 <BoxedValueTypeRepresentation_get_ContainedType$14410>:
 800f4d0:	b081      	sub	sp, #4
 800f4d2:	4601      	mov	r1, r0

        public override TypeRepresentation ContainedType
        {
            get
            {
                return m_valueType;
 800f4d4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800f4d6:	9100      	str	r1, [sp, #0]
 800f4d8:	b001      	add	sp, #4
 800f4da:	4770      	bx	lr

0800f4dc <BoxedValueTypeRepresentation_get_UnderlyingType$14411>:
 800f4dc:	b081      	sub	sp, #4
 800f4de:	4601      	mov	r1, r0

        public override TypeRepresentation UnderlyingType
        {
            get
            {
                return m_valueType;
 800f4e0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800f4e2:	9100      	str	r1, [sp, #0]
 800f4e4:	b001      	add	sp, #4
 800f4e6:	4770      	bx	lr

0800f4e8 <BoxedValueTypeRepresentation_get_IsOpenType$14412>:
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	b086      	sub	sp, #24
 800f4ec:	4601      	mov	r1, r0

        public override bool IsOpenType
        {
            get
            {
                return m_valueType.IsOpenType;
 800f4ee:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

            context.Pop();
        }

        //--//

 800f4f0:	f100 0208 	add.w	r2, r0, #8
 800f4f4:	9204      	str	r2, [sp, #16]
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	9205      	str	r2, [sp, #20]
            }
        }

        public override StackEquivalentType StackEquivalentType
        {
            get
 800f4fa:	9b04      	ldr	r3, [sp, #16]

                return tdRes;
            }
            else
            {
                return valueType;
 800f4fc:	3b08      	subs	r3, #8
 800f4fe:	9205      	str	r2, [sp, #20]
 800f500:	aa05      	add	r2, sp, #20
 800f502:	3a08      	subs	r2, #8
 800f504:	9003      	str	r0, [sp, #12]
 800f506:	4610      	mov	r0, r2
 800f508:	9102      	str	r1, [sp, #8]
 800f50a:	4619      	mov	r1, r3
 800f50c:	f7f1 f9d6 	bl	80008bc <UIntPtr_.ctor$2864>

            context.Pop();
        }

        //--//

 800f510:	9805      	ldr	r0, [sp, #20]
 800f512:	6840      	ldr	r0, [r0, #4]

        public override bool IsOpenType
        {
            get
            {
                return m_valueType.IsOpenType;
 800f514:	69c0      	ldr	r0, [r0, #28]
 800f516:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800f518:	9903      	ldr	r1, [sp, #12]
 800f51a:	9001      	str	r0, [sp, #4]
 800f51c:	4608      	mov	r0, r1
 800f51e:	9a01      	ldr	r2, [sp, #4]
 800f520:	4790      	blx	r2
 800f522:	b006      	add	sp, #24
 800f524:	bd80      	pop	{r7, pc}

0800f526 <BoxedValueTypeRepresentation_get_IsDelayedType$14413>:
 800f526:	b580      	push	{r7, lr}
 800f528:	b086      	sub	sp, #24
 800f52a:	4601      	mov	r1, r0

        public override bool IsDelayedType
        {
            get
            {
                return m_valueType.IsDelayedType;
 800f52c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

            context.Pop();
        }

        //--//

 800f52e:	f100 0208 	add.w	r2, r0, #8
 800f532:	9204      	str	r2, [sp, #16]
 800f534:	2200      	movs	r2, #0
 800f536:	9205      	str	r2, [sp, #20]
            }
        }

        public override StackEquivalentType StackEquivalentType
        {
            get
 800f538:	9b04      	ldr	r3, [sp, #16]

                return tdRes;
            }
            else
            {
                return valueType;
 800f53a:	3b08      	subs	r3, #8
 800f53c:	9205      	str	r2, [sp, #20]
 800f53e:	aa05      	add	r2, sp, #20
 800f540:	3a08      	subs	r2, #8
 800f542:	9003      	str	r0, [sp, #12]
 800f544:	4610      	mov	r0, r2
 800f546:	9102      	str	r1, [sp, #8]
 800f548:	4619      	mov	r1, r3
 800f54a:	f7f1 f9b7 	bl	80008bc <UIntPtr_.ctor$2864>

            context.Pop();
        }

        //--//

 800f54e:	9805      	ldr	r0, [sp, #20]
 800f550:	6840      	ldr	r0, [r0, #4]

        public override bool IsDelayedType
        {
            get
            {
                return m_valueType.IsDelayedType;
 800f552:	69c0      	ldr	r0, [r0, #28]
 800f554:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800f556:	9903      	ldr	r1, [sp, #12]
 800f558:	9001      	str	r0, [sp, #4]
 800f55a:	4608      	mov	r0, r1
 800f55c:	9a01      	ldr	r2, [sp, #4]
 800f55e:	4790      	blx	r2
 800f560:	b006      	add	sp, #24
 800f562:	bd80      	pop	{r7, pc}

0800f564 <BoxedValueTypeRepresentation_PrettyToString$14417>:
 800f564:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f566:	b08d      	sub	sp, #52	; 0x34
 800f568:	469c      	mov	ip, r3
 800f56a:	4696      	mov	lr, r2
 800f56c:	460c      	mov	r4, r1
 800f56e:	4605      	mov	r5, r0

        internal override void PrettyToString( System.Text.StringBuilder sb                 ,
                                               bool                      fPrefix            ,
                                               bool                      fWithAbbreviations )
        {
            sb.Append( "boxed " );
 800f570:	4e19      	ldr	r6, [pc, #100]	; (800f5d8 <BoxedValueTypeRepresentation_PrettyToString$14417+0x74>)
 800f572:	4f1a      	ldr	r7, [pc, #104]	; (800f5dc <BoxedValueTypeRepresentation_PrettyToString$14417+0x78>)
 800f574:	447f      	add	r7, pc
 800f576:	443e      	add	r6, r7
 800f578:	900a      	str	r0, [sp, #40]	; 0x28
 800f57a:	4608      	mov	r0, r1
 800f57c:	9109      	str	r1, [sp, #36]	; 0x24
 800f57e:	4631      	mov	r1, r6
 800f580:	9308      	str	r3, [sp, #32]
 800f582:	9207      	str	r2, [sp, #28]
 800f584:	9406      	str	r4, [sp, #24]
 800f586:	9505      	str	r5, [sp, #20]
 800f588:	f8cd c010 	str.w	ip, [sp, #16]
 800f58c:	f8cd e00c 	str.w	lr, [sp, #12]
 800f590:	f7fd fc34 	bl	800cdfc <StringBuilder_Append$8507>

            m_valueType.PrettyToString( sb, fPrefix, fWithAbbreviations );
 800f594:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f596:	6aca      	ldr	r2, [r1, #44]	; 0x2c

            context.Pop();
        }

        //--//

 800f598:	f102 0308 	add.w	r3, r2, #8
 800f59c:	930b      	str	r3, [sp, #44]	; 0x2c
 800f59e:	2300      	movs	r3, #0
 800f5a0:	930c      	str	r3, [sp, #48]	; 0x30
            }
        }

        public override StackEquivalentType StackEquivalentType
        {
            get
 800f5a2:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c

                return tdRes;
            }
            else
            {
                return valueType;
 800f5a6:	f1ac 0108 	sub.w	r1, ip, #8
 800f5aa:	930c      	str	r3, [sp, #48]	; 0x30
 800f5ac:	ab0c      	add	r3, sp, #48	; 0x30
 800f5ae:	3b08      	subs	r3, #8
 800f5b0:	9002      	str	r0, [sp, #8]
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	9201      	str	r2, [sp, #4]
 800f5b6:	f7f1 f981 	bl	80008bc <UIntPtr_.ctor$2864>

            context.Pop();
        }

        //--//

 800f5ba:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f5bc:	6840      	ldr	r0, [r0, #4]
                                               bool                      fPrefix            ,
                                               bool                      fWithAbbreviations )
        {
            sb.Append( "boxed " );

            m_valueType.PrettyToString( sb, fPrefix, fWithAbbreviations );
 800f5be:	69c0      	ldr	r0, [r0, #28]
 800f5c0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800f5c2:	9901      	ldr	r1, [sp, #4]
 800f5c4:	9000      	str	r0, [sp, #0]
 800f5c6:	4608      	mov	r0, r1
 800f5c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f5ca:	9a07      	ldr	r2, [sp, #28]
 800f5cc:	9b08      	ldr	r3, [sp, #32]
 800f5ce:	f8dd c000 	ldr.w	ip, [sp]
 800f5d2:	47e0      	blx	ip
 800f5d4:	b00d      	add	sp, #52	; 0x34
 800f5d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f5d8:	e8013c1c 	.word	0xe8013c1c
 800f5dc:	17ff225c 	.word	0x17ff225c

0800f5e0 <ConcreteReferenceTypeRepresentation_ToString$14420>:
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b086      	sub	sp, #24
 800f5e4:	4601      	mov	r1, r0
        }

        public override int GetHashCode()
        {
            return m_valueType.GetHashCode();
        }
 800f5e6:	4a14      	ldr	r2, [pc, #80]	; (800f638 <ConcreteReferenceTypeRepresentation_ToString$14420+0x58>)
 800f5e8:	4b14      	ldr	r3, [pc, #80]	; (800f63c <ConcreteReferenceTypeRepresentation_ToString$14420+0x5c>)
 800f5ea:	447b      	add	r3, pc
 800f5ec:	441a      	add	r2, r3
 800f5ee:	f8df c050 	ldr.w	ip, [pc, #80]	; 800f640 <ConcreteReferenceTypeRepresentation_ToString$14420+0x60>
 800f5f2:	449c      	add	ip, r3
 800f5f4:	9005      	str	r0, [sp, #20]
 800f5f6:	4610      	mov	r0, r2
 800f5f8:	9104      	str	r1, [sp, #16]
 800f5fa:	4661      	mov	r1, ip
 800f5fc:	9303      	str	r3, [sp, #12]
 800f5fe:	f7f1 f8df 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800f602:	4910      	ldr	r1, [pc, #64]	; (800f644 <ConcreteReferenceTypeRepresentation_ToString$14420+0x64>)
 800f604:	9a03      	ldr	r2, [sp, #12]
 800f606:	4411      	add	r1, r2
 800f608:	9002      	str	r0, [sp, #8]
 800f60a:	f7fe fe0f 	bl	800e22c <StringBuilder_.ctor$8489>
 800f60e:	480e      	ldr	r0, [pc, #56]	; (800f648 <ConcreteReferenceTypeRepresentation_ToString$14420+0x68>)

        //--//
 800f610:	9903      	ldr	r1, [sp, #12]
 800f612:	5c42      	ldrb	r2, [r0, r1]
 800f614:	2300      	movs	r3, #0
 800f616:	9805      	ldr	r0, [sp, #20]
 800f618:	9902      	ldr	r1, [sp, #8]
 800f61a:	f7f6 fd31 	bl	8006080 <TypeRepresentation_PrettyToString$14686>

        //
 800f61e:	480b      	ldr	r0, [pc, #44]	; (800f64c <ConcreteReferenceTypeRepresentation_ToString$14420+0x6c>)
 800f620:	9903      	ldr	r1, [sp, #12]
 800f622:	4401      	add	r1, r0
 800f624:	9802      	ldr	r0, [sp, #8]
 800f626:	f7fd fbe9 	bl	800cdfc <StringBuilder_Append$8507>
        // Helper Methods
        //
 800f62a:	9902      	ldr	r1, [sp, #8]
 800f62c:	9001      	str	r0, [sp, #4]
 800f62e:	4608      	mov	r0, r1
 800f630:	f7f3 f928 	bl	8002884 <StringBuilder_ToString$8499>
 800f634:	b006      	add	sp, #24
 800f636:	bd80      	pop	{r7, pc}
 800f638:	ffffea38 	.word	0xffffea38
 800f63c:	17ff21e6 	.word	0x17ff21e6
 800f640:	e8010b3c 	.word	0xe8010b3c
 800f644:	e8013c3c 	.word	0xe8013c3c
 800f648:	e8025452 	.word	0xe8025452
 800f64c:	e8013a4c 	.word	0xe8013a4c

0800f650 <EnumerationTypeRepresentation_get_UnderlyingType$14470>:
 800f650:	b081      	sub	sp, #4
 800f652:	4601      	mov	r1, r0
            return m_extends.GetInstantiationFlavor( typeSystem );
        }

        //
        // Access Methods
        //
 800f654:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800f656:	9100      	str	r1, [sp, #0]
 800f658:	b001      	add	sp, #4
 800f65a:	4770      	bx	lr

0800f65c <EnumerationTypeRepresentation_ToString$14474>:
 800f65c:	b580      	push	{r7, lr}
 800f65e:	b086      	sub	sp, #24
 800f660:	4601      	mov	r1, r0
        // Debug Methods
        //

        public override String ToString()
        {
            System.Text.StringBuilder sb = new System.Text.StringBuilder( "EnumerationTypeRepresentation(" );
 800f662:	4a14      	ldr	r2, [pc, #80]	; (800f6b4 <EnumerationTypeRepresentation_ToString$14474+0x58>)
 800f664:	4b14      	ldr	r3, [pc, #80]	; (800f6b8 <EnumerationTypeRepresentation_ToString$14474+0x5c>)
 800f666:	447b      	add	r3, pc
 800f668:	441a      	add	r2, r3
 800f66a:	f8df c050 	ldr.w	ip, [pc, #80]	; 800f6bc <EnumerationTypeRepresentation_ToString$14474+0x60>
 800f66e:	449c      	add	ip, r3
 800f670:	9005      	str	r0, [sp, #20]
 800f672:	4610      	mov	r0, r2
 800f674:	9104      	str	r1, [sp, #16]
 800f676:	4661      	mov	r1, ip
 800f678:	9303      	str	r3, [sp, #12]
 800f67a:	f7f1 f8a1 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800f67e:	4910      	ldr	r1, [pc, #64]	; (800f6c0 <EnumerationTypeRepresentation_ToString$14474+0x64>)
 800f680:	9a03      	ldr	r2, [sp, #12]
 800f682:	4411      	add	r1, r2
 800f684:	9002      	str	r0, [sp, #8]
 800f686:	f7fe fdd1 	bl	800e22c <StringBuilder_.ctor$8489>
 800f68a:	480e      	ldr	r0, [pc, #56]	; (800f6c4 <EnumerationTypeRepresentation_ToString$14474+0x68>)

            PrettyToString( sb, true, false );
 800f68c:	9903      	ldr	r1, [sp, #12]
 800f68e:	5c42      	ldrb	r2, [r0, r1]
 800f690:	2300      	movs	r3, #0
 800f692:	9805      	ldr	r0, [sp, #20]
 800f694:	9902      	ldr	r1, [sp, #8]
 800f696:	f7f6 fcf3 	bl	8006080 <TypeRepresentation_PrettyToString$14686>

            sb.Append( ")" );
 800f69a:	480b      	ldr	r0, [pc, #44]	; (800f6c8 <EnumerationTypeRepresentation_ToString$14474+0x6c>)
 800f69c:	9903      	ldr	r1, [sp, #12]
 800f69e:	4401      	add	r1, r0
 800f6a0:	9802      	ldr	r0, [sp, #8]
 800f6a2:	f7fd fbab 	bl	800cdfc <StringBuilder_Append$8507>

            return sb.ToString();
 800f6a6:	9902      	ldr	r1, [sp, #8]
 800f6a8:	9001      	str	r0, [sp, #4]
 800f6aa:	4608      	mov	r0, r1
 800f6ac:	f7f3 f8ea 	bl	8002884 <StringBuilder_ToString$8499>
 800f6b0:	b006      	add	sp, #24
 800f6b2:	bd80      	pop	{r7, pc}
 800f6b4:	ffffea38 	.word	0xffffea38
 800f6b8:	17ff216a 	.word	0x17ff216a
 800f6bc:	e8010b3c 	.word	0xe8010b3c
 800f6c0:	e8013c9c 	.word	0xe8013c9c
 800f6c4:	e8025453 	.word	0xe8025453
 800f6c8:	e8013a4c 	.word	0xe8013a4c

0800f6cc <InterfaceTypeRepresentation_ToString$14480>:
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b086      	sub	sp, #24
 800f6d0:	4601      	mov	r1, r0
                pos--;
            }

            m_literalsName  = ArrayUtility.InsertAtPositionOfArray( m_literalsName , pos, name   );
            m_literalsValue = ArrayUtility.InsertAtPositionOfArray( m_literalsValue, pos, intVal );
        }
 800f6d2:	4a14      	ldr	r2, [pc, #80]	; (800f724 <InterfaceTypeRepresentation_ToString$14480+0x58>)
 800f6d4:	4b14      	ldr	r3, [pc, #80]	; (800f728 <InterfaceTypeRepresentation_ToString$14480+0x5c>)
 800f6d6:	447b      	add	r3, pc
 800f6d8:	441a      	add	r2, r3
 800f6da:	f8df c050 	ldr.w	ip, [pc, #80]	; 800f72c <InterfaceTypeRepresentation_ToString$14480+0x60>
 800f6de:	449c      	add	ip, r3
 800f6e0:	9005      	str	r0, [sp, #20]
 800f6e2:	4610      	mov	r0, r2
 800f6e4:	9104      	str	r1, [sp, #16]
 800f6e6:	4661      	mov	r1, ip
 800f6e8:	9303      	str	r3, [sp, #12]
 800f6ea:	f7f1 f869 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800f6ee:	4910      	ldr	r1, [pc, #64]	; (800f730 <InterfaceTypeRepresentation_ToString$14480+0x64>)
 800f6f0:	9a03      	ldr	r2, [sp, #12]
 800f6f2:	4411      	add	r1, r2
 800f6f4:	9002      	str	r0, [sp, #8]
 800f6f6:	f7fe fd99 	bl	800e22c <StringBuilder_.ctor$8489>
 800f6fa:	480e      	ldr	r0, [pc, #56]	; (800f734 <InterfaceTypeRepresentation_ToString$14480+0x68>)

        public string FormatValue( object val )
 800f6fc:	9903      	ldr	r1, [sp, #12]
 800f6fe:	5c42      	ldrb	r2, [r0, r1]
 800f700:	2300      	movs	r3, #0
 800f702:	9805      	ldr	r0, [sp, #20]
 800f704:	9902      	ldr	r1, [sp, #8]
 800f706:	f7f6 fcbb 	bl	8006080 <TypeRepresentation_PrettyToString$14686>
        {
            ulong intVal;
 800f70a:	480b      	ldr	r0, [pc, #44]	; (800f738 <InterfaceTypeRepresentation_ToString$14480+0x6c>)
 800f70c:	9903      	ldr	r1, [sp, #12]
 800f70e:	4401      	add	r1, r0
 800f710:	9802      	ldr	r0, [sp, #8]
 800f712:	f7fd fb73 	bl	800cdfc <StringBuilder_Append$8507>
            
            if(DataConversion.GetAsRawUlong( val, out intVal ))
 800f716:	9902      	ldr	r1, [sp, #8]
 800f718:	9001      	str	r0, [sp, #4]
 800f71a:	4608      	mov	r0, r1
 800f71c:	f7f3 f8b2 	bl	8002884 <StringBuilder_ToString$8499>
 800f720:	b006      	add	sp, #24
 800f722:	bd80      	pop	{r7, pc}
 800f724:	ffffea38 	.word	0xffffea38
 800f728:	17ff20fa 	.word	0x17ff20fa
 800f72c:	e8010b3c 	.word	0xe8010b3c
 800f730:	e8013cec 	.word	0xe8013cec
 800f734:	e8025454 	.word	0xe8025454
 800f738:	e8013a4c 	.word	0xe8013a4c

0800f73c <ScalarTypeRepresentation_ToString$14542>:
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b08a      	sub	sp, #40	; 0x28
 800f740:	4601      	mov	r1, r0
            }
        }

        public override bool CanPointToMemory
        {
            get
 800f742:	4a20      	ldr	r2, [pc, #128]	; (800f7c4 <ScalarTypeRepresentation_ToString$14542+0x88>)
 800f744:	4b20      	ldr	r3, [pc, #128]	; (800f7c8 <ScalarTypeRepresentation_ToString$14542+0x8c>)
 800f746:	447b      	add	r3, pc
 800f748:	441a      	add	r2, r3
 800f74a:	f8df c080 	ldr.w	ip, [pc, #128]	; 800f7cc <ScalarTypeRepresentation_ToString$14542+0x90>
 800f74e:	449c      	add	ip, r3
 800f750:	9007      	str	r0, [sp, #28]
 800f752:	4610      	mov	r0, r2
 800f754:	9106      	str	r1, [sp, #24]
 800f756:	4661      	mov	r1, ip
 800f758:	9305      	str	r3, [sp, #20]
 800f75a:	f7f1 f831 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800f75e:	491c      	ldr	r1, [pc, #112]	; (800f7d0 <ScalarTypeRepresentation_ToString$14542+0x94>)
 800f760:	9a05      	ldr	r2, [sp, #20]
 800f762:	4411      	add	r1, r2
 800f764:	9004      	str	r0, [sp, #16]
 800f766:	f7fe fd61 	bl	800e22c <StringBuilder_.ctor$8489>
        public override void ApplyTransformation( TransformationContext context )
        {
            context.Push( this );

            //
            // Load before calling the base method, because we might get a call to GetHashCode().
 800f76a:	9807      	ldr	r0, [sp, #28]
 800f76c:	f100 0108 	add.w	r1, r0, #8
 800f770:	9108      	str	r1, [sp, #32]
 800f772:	2100      	movs	r1, #0
 800f774:	9109      	str	r1, [sp, #36]	; 0x24
            {
                return m_pointerType.IsDelayedType;
            }
        }

        //--//
 800f776:	9a08      	ldr	r2, [sp, #32]
        }

        //--//

        public override GCInfo.Kind ClassifyAsPointer()
        {
 800f778:	3a08      	subs	r2, #8
 800f77a:	9109      	str	r1, [sp, #36]	; 0x24
 800f77c:	ab09      	add	r3, sp, #36	; 0x24
 800f77e:	f1a3 0008 	sub.w	r0, r3, #8
 800f782:	9103      	str	r1, [sp, #12]
 800f784:	4611      	mov	r1, r2
 800f786:	f7f1 f899 	bl	80008bc <UIntPtr_.ctor$2864>
        public override void ApplyTransformation( TransformationContext context )
        {
            context.Push( this );

            //
            // Load before calling the base method, because we might get a call to GetHashCode().
 800f78a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f78c:	6840      	ldr	r0, [r0, #4]

        public override bool CanPointToMemory
        {
            get
            {
                return true;
 800f78e:	69c0      	ldr	r0, [r0, #28]
 800f790:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800f792:	4910      	ldr	r1, [pc, #64]	; (800f7d4 <ScalarTypeRepresentation_ToString$14542+0x98>)
 800f794:	9a05      	ldr	r2, [sp, #20]
 800f796:	5c8a      	ldrb	r2, [r1, r2]
 800f798:	9907      	ldr	r1, [sp, #28]
 800f79a:	9002      	str	r0, [sp, #8]
 800f79c:	4608      	mov	r0, r1
 800f79e:	9904      	ldr	r1, [sp, #16]
 800f7a0:	9b03      	ldr	r3, [sp, #12]
 800f7a2:	f8dd c008 	ldr.w	ip, [sp, #8]
 800f7a6:	47e0      	blx	ip
            }
        }
 800f7a8:	480b      	ldr	r0, [pc, #44]	; (800f7d8 <ScalarTypeRepresentation_ToString$14542+0x9c>)
 800f7aa:	9905      	ldr	r1, [sp, #20]
 800f7ac:	4401      	add	r1, r0
 800f7ae:	9804      	ldr	r0, [sp, #16]
 800f7b0:	f7fd fb24 	bl	800cdfc <StringBuilder_Append$8507>

        //--//
 800f7b4:	9904      	ldr	r1, [sp, #16]
 800f7b6:	9001      	str	r0, [sp, #4]
 800f7b8:	4608      	mov	r0, r1
 800f7ba:	f7f3 f863 	bl	8002884 <StringBuilder_ToString$8499>
 800f7be:	b00a      	add	sp, #40	; 0x28
 800f7c0:	bd80      	pop	{r7, pc}
 800f7c2:	46c0      	nop			; (mov r8, r8)
 800f7c4:	ffffea38 	.word	0xffffea38
 800f7c8:	17ff208a 	.word	0x17ff208a
 800f7cc:	e8010b3c 	.word	0xe8010b3c
 800f7d0:	e8013dfc 	.word	0xe8013dfc
 800f7d4:	e8025456 	.word	0xe8025456
 800f7d8:	e8013a4c 	.word	0xe8013a4c

0800f7dc <TypeRepresentation_EqualsThroughEquivalence$14570>:
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b08a      	sub	sp, #40	; 0x28
 800f7e0:	460b      	mov	r3, r1
 800f7e2:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 800f8dc <TypeRepresentation_EqualsThroughEquivalence$14570+0x100>
 800f7e6:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 800f8e0 <TypeRepresentation_EqualsThroughEquivalence$14570+0x104>
 800f7ea:	44fe      	add	lr, pc
 800f7ec:	44f4      	add	ip, lr
 800f7ee:	9009      	str	r0, [sp, #36]	; 0x24
 800f7f0:	4608      	mov	r0, r1
 800f7f2:	4661      	mov	r1, ip
 800f7f4:	9308      	str	r3, [sp, #32]
 800f7f6:	9207      	str	r2, [sp, #28]
 800f7f8:	f7f1 fe9f 	bl	800153a <TypeSystemManager_CastToTypeNoThrow$4949>
 800f7fc:	2800      	cmp	r0, #0
 800f7fe:	d00f      	beq.n	800f820 <TypeRepresentation_EqualsThroughEquivalence$14570+0x44>
 800f800:	e7ff      	b.n	800f802 <TypeRepresentation_EqualsThroughEquivalence$14570+0x26>
 800f802:	4836      	ldr	r0, [pc, #216]	; (800f8dc <TypeRepresentation_EqualsThroughEquivalence$14570+0x100>)
 800f804:	4937      	ldr	r1, [pc, #220]	; (800f8e4 <TypeRepresentation_EqualsThroughEquivalence$14570+0x108>)
 800f806:	4479      	add	r1, pc
 800f808:	4401      	add	r1, r0
 800f80a:	9808      	ldr	r0, [sp, #32]
 800f80c:	f7f6 fda4 	bl	8006358 <TypeSystemManager_CastToType$4948>
 800f810:	4601      	mov	r1, r0
 800f812:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f814:	7a13      	ldrb	r3, [r2, #8]
 800f816:	7a00      	ldrb	r0, [r0, #8]
 800f818:	4283      	cmp	r3, r0
 800f81a:	9106      	str	r1, [sp, #24]
 800f81c:	d106      	bne.n	800f82c <TypeRepresentation_EqualsThroughEquivalence$14570+0x50>
 800f81e:	e006      	b.n	800f82e <TypeRepresentation_EqualsThroughEquivalence$14570+0x52>
 800f820:	2000      	movs	r0, #0
 800f822:	9005      	str	r0, [sp, #20]
 800f824:	e7ff      	b.n	800f826 <TypeRepresentation_EqualsThroughEquivalence$14570+0x4a>
 800f826:	9805      	ldr	r0, [sp, #20]
 800f828:	b00a      	add	sp, #40	; 0x28
 800f82a:	bd80      	pop	{r7, pc}
 800f82c:	e7f8      	b.n	800f820 <TypeRepresentation_EqualsThroughEquivalence$14570+0x44>
 800f82e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f830:	68c1      	ldr	r1, [r0, #12]
 800f832:	9a06      	ldr	r2, [sp, #24]
 800f834:	68d3      	ldr	r3, [r2, #12]
 800f836:	4299      	cmp	r1, r3
 800f838:	d1f8      	bne.n	800f82c <TypeRepresentation_EqualsThroughEquivalence$14570+0x50>
 800f83a:	e7ff      	b.n	800f83c <TypeRepresentation_EqualsThroughEquivalence$14570+0x60>
 800f83c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f83e:	6901      	ldr	r1, [r0, #16]
 800f840:	9a06      	ldr	r2, [sp, #24]
 800f842:	6913      	ldr	r3, [r2, #16]
 800f844:	4299      	cmp	r1, r3
 800f846:	d1f1      	bne.n	800f82c <TypeRepresentation_EqualsThroughEquivalence$14570+0x50>
 800f848:	e7ff      	b.n	800f84a <TypeRepresentation_EqualsThroughEquivalence$14570+0x6e>
 800f84a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f84c:	6940      	ldr	r0, [r0, #20]
 800f84e:	9906      	ldr	r1, [sp, #24]
 800f850:	6949      	ldr	r1, [r1, #20]
 800f852:	f7f2 fc1e 	bl	8002092 <String_op_Equality$2494>
 800f856:	f010 0fff 	tst.w	r0, #255	; 0xff
 800f85a:	d0e7      	beq.n	800f82c <TypeRepresentation_EqualsThroughEquivalence$14570+0x50>
 800f85c:	e7ff      	b.n	800f85e <TypeRepresentation_EqualsThroughEquivalence$14570+0x82>
 800f85e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f860:	6980      	ldr	r0, [r0, #24]
 800f862:	9906      	ldr	r1, [sp, #24]
 800f864:	6989      	ldr	r1, [r1, #24]
 800f866:	f7f2 fc14 	bl	8002092 <String_op_Equality$2494>
 800f86a:	f010 0fff 	tst.w	r0, #255	; 0xff
 800f86e:	d0dd      	beq.n	800f82c <TypeRepresentation_EqualsThroughEquivalence$14570+0x50>
 800f870:	e7ff      	b.n	800f872 <TypeRepresentation_EqualsThroughEquivalence$14570+0x96>
 800f872:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f874:	69c0      	ldr	r0, [r0, #28]
 800f876:	9906      	ldr	r1, [sp, #24]
 800f878:	69c9      	ldr	r1, [r1, #28]
 800f87a:	9a07      	ldr	r2, [sp, #28]
 800f87c:	f7ff fb9a 	bl	800efb4 <BaseRepresentation_EqualsThroughEquivalence$13542>
 800f880:	f010 0fff 	tst.w	r0, #255	; 0xff
 800f884:	d0d2      	beq.n	800f82c <TypeRepresentation_EqualsThroughEquivalence$14570+0x50>
 800f886:	e7ff      	b.n	800f888 <TypeRepresentation_EqualsThroughEquivalence$14570+0xac>
 800f888:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f88a:	f000 f869 	bl	800f960 <TypeRepresentation_get_GenericParameters$14655>
 800f88e:	9906      	ldr	r1, [sp, #24]
 800f890:	9004      	str	r0, [sp, #16]
 800f892:	4608      	mov	r0, r1
 800f894:	f000 f864 	bl	800f960 <TypeRepresentation_get_GenericParameters$14655>
 800f898:	9904      	ldr	r1, [sp, #16]
 800f89a:	9003      	str	r0, [sp, #12]
 800f89c:	4608      	mov	r0, r1
 800f89e:	9903      	ldr	r1, [sp, #12]
 800f8a0:	9a07      	ldr	r2, [sp, #28]
 800f8a2:	f7ff fbbf 	bl	800f024 <BaseRepresentation_ArrayEqualsThroughEquivalence$33224>
 800f8a6:	f010 0fff 	tst.w	r0, #255	; 0xff
 800f8aa:	d0bf      	beq.n	800f82c <TypeRepresentation_EqualsThroughEquivalence$14570+0x50>
 800f8ac:	e7ff      	b.n	800f8ae <TypeRepresentation_EqualsThroughEquivalence$14570+0xd2>
 800f8ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f8b0:	f7f2 f912 	bl	8001ad8 <Object_GetType$3817>
 800f8b4:	9906      	ldr	r1, [sp, #24]
 800f8b6:	9002      	str	r0, [sp, #8]
 800f8b8:	4608      	mov	r0, r1
 800f8ba:	f7f2 f90d 	bl	8001ad8 <Object_GetType$3817>
 800f8be:	9902      	ldr	r1, [sp, #8]
 800f8c0:	9001      	str	r0, [sp, #4]
 800f8c2:	4608      	mov	r0, r1
 800f8c4:	9901      	ldr	r1, [sp, #4]
 800f8c6:	f7fe faeb 	bl	800dea0 <Type_op_Equality$7551>
 800f8ca:	4907      	ldr	r1, [pc, #28]	; (800f8e8 <TypeRepresentation_EqualsThroughEquivalence$14570+0x10c>)
 800f8cc:	4a07      	ldr	r2, [pc, #28]	; (800f8ec <TypeRepresentation_EqualsThroughEquivalence$14570+0x110>)
 800f8ce:	447a      	add	r2, pc
 800f8d0:	4411      	add	r1, r2
 800f8d2:	f7f6 fbab 	bl	800602c <CHECKS_ASSERT$11839>
 800f8d6:	2001      	movs	r0, #1
 800f8d8:	9005      	str	r0, [sp, #20]
 800f8da:	e7a4      	b.n	800f826 <TypeRepresentation_EqualsThroughEquivalence$14570+0x4a>
 800f8dc:	e8013f3c 	.word	0xe8013f3c
 800f8e0:	17ff1fe6 	.word	0x17ff1fe6
 800f8e4:	17ff1fca 	.word	0x17ff1fca
 800f8e8:	e8013f6c 	.word	0xe8013f6c
 800f8ec:	17ff1f02 	.word	0x17ff1f02

0800f8f0 <TypeRepresentation_Equals$14571>:
 800f8f0:	b510      	push	{r4, lr}
 800f8f2:	b088      	sub	sp, #32
 800f8f4:	460a      	mov	r2, r1
 800f8f6:	4603      	mov	r3, r0
            VOID        = 0x01,
            BOOLEAN     = 0x02,
            CHAR        = 0x03,
            I1          = 0x04,
            U1          = 0x05,
            I2          = 0x06,
 800f8f8:	f100 0c08 	add.w	ip, r0, #8
 800f8fc:	f8cd c018 	str.w	ip, [sp, #24]
 800f900:	f04f 0c00 	mov.w	ip, #0
 800f904:	f8cd c01c 	str.w	ip, [sp, #28]
            private TypeRepresentation[]         m_parameters;
            private GenericParameterDefinition[] m_parametersDefinition;

            //
            // Constructor Methods
            //
 800f908:	f8dd e018 	ldr.w	lr, [sp, #24]
            CLASS       = 0x12,    // CLASS <class Token>
            VAR         = 0x13,    // a class type variable VAR <U1>
            ARRAY       = 0x14,    // MDARRAY <type> <rank> <bcount> <bound1> ... <lbcount> <lb1> ...
            GENERICINST = 0x15,    // instantiated type
            TYPEDBYREF  = 0x16,    // This is a simple type.
            I           = 0x18,    // native integer size
 800f90c:	f1ae 0e08 	sub.w	lr, lr, #8
 800f910:	f8cd c01c 	str.w	ip, [sp, #28]
 800f914:	ac07      	add	r4, sp, #28
 800f916:	3c08      	subs	r4, #8
 800f918:	9005      	str	r0, [sp, #20]
 800f91a:	4620      	mov	r0, r4
 800f91c:	9104      	str	r1, [sp, #16]
 800f91e:	4671      	mov	r1, lr
 800f920:	9303      	str	r3, [sp, #12]
 800f922:	f8cd c008 	str.w	ip, [sp, #8]
 800f926:	9201      	str	r2, [sp, #4]
 800f928:	f7f0 ffc8 	bl	80008bc <UIntPtr_.ctor$2864>
            VOID        = 0x01,
            BOOLEAN     = 0x02,
            CHAR        = 0x03,
            I1          = 0x04,
            U1          = 0x05,
            I2          = 0x06,
 800f92c:	9807      	ldr	r0, [sp, #28]

        public struct InterfaceMap
        {
            public static readonly InterfaceMap[] SharedEmptyArray = new InterfaceMap[0];

            //
 800f92e:	6840      	ldr	r0, [r0, #4]
            return false;
        }

        public override bool Equals( object obj )
        {
            return this.EqualsThroughEquivalence( obj, null );
 800f930:	69c0      	ldr	r0, [r0, #28]
 800f932:	6980      	ldr	r0, [r0, #24]
 800f934:	9905      	ldr	r1, [sp, #20]
 800f936:	9000      	str	r0, [sp, #0]
 800f938:	4608      	mov	r0, r1
 800f93a:	9904      	ldr	r1, [sp, #16]
 800f93c:	9a02      	ldr	r2, [sp, #8]
 800f93e:	9b00      	ldr	r3, [sp, #0]
 800f940:	4798      	blx	r3
 800f942:	b008      	add	sp, #32
 800f944:	bd10      	pop	{r4, pc}

0800f946 <TypeRepresentation_GetHashCode$14572>:
 800f946:	b580      	push	{r7, lr}
 800f948:	b082      	sub	sp, #8
 800f94a:	4601      	mov	r1, r0
        }

        public override int GetHashCode()
        {
            return (int)m_builtinType ^
 800f94c:	7a02      	ldrb	r2, [r0, #8]
 800f94e:	6940      	ldr	r0, [r0, #20]
 800f950:	9201      	str	r2, [sp, #4]
 800f952:	9100      	str	r1, [sp, #0]
 800f954:	f7f2 fd85 	bl	8002462 <String_GetHashCode$2501>
 800f958:	9901      	ldr	r1, [sp, #4]
 800f95a:	4048      	eors	r0, r1
 800f95c:	b002      	add	sp, #8
 800f95e:	bd80      	pop	{r7, pc}

0800f960 <TypeRepresentation_get_GenericParameters$14655>:
 800f960:	b082      	sub	sp, #8
 800f962:	4601      	mov	r1, r0

        public TypeRepresentation[] GenericParameters
        {
            get
            {
                if(m_genericContext != null)
 800f964:	6a00      	ldr	r0, [r0, #32]
 800f966:	2800      	cmp	r0, #0
 800f968:	9101      	str	r1, [sp, #4]
 800f96a:	d005      	beq.n	800f978 <TypeRepresentation_get_GenericParameters$14655+0x18>
 800f96c:	e7ff      	b.n	800f96e <TypeRepresentation_get_GenericParameters$14655+0xe>
                {
                    return m_genericContext.Parameters;
 800f96e:	9801      	ldr	r0, [sp, #4]
 800f970:	6a01      	ldr	r1, [r0, #32]

            public TypeRepresentation[] Parameters
            {
                get
                {
                    return m_parameters;
 800f972:	6889      	ldr	r1, [r1, #8]
        {
            get
            {
                if(m_genericContext != null)
                {
                    return m_genericContext.Parameters;
 800f974:	9100      	str	r1, [sp, #0]
 800f976:	e007      	b.n	800f988 <TypeRepresentation_get_GenericParameters$14655+0x28>
                }

                return TypeRepresentation.SharedEmptyArray;
 800f978:	4805      	ldr	r0, [pc, #20]	; (800f990 <TypeRepresentation_get_GenericParameters$14655+0x30>)
 800f97a:	4906      	ldr	r1, [pc, #24]	; (800f994 <TypeRepresentation_get_GenericParameters$14655+0x34>)
 800f97c:	4479      	add	r1, pc
 800f97e:	4408      	add	r0, r1
 800f980:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 800f984:	9000      	str	r0, [sp, #0]
 800f986:	e7ff      	b.n	800f988 <TypeRepresentation_get_GenericParameters$14655+0x28>
            }
 800f988:	9800      	ldr	r0, [sp, #0]
 800f98a:	b002      	add	sp, #8
 800f98c:	4770      	bx	lr
 800f98e:	46c0      	nop			; (mov r8, r8)
 800f990:	fffffe3c 	.word	0xfffffe3c
 800f994:	17ff1e54 	.word	0x17ff1e54

0800f998 <GenericContext_get_IsOpenType$15201>:
 800f998:	b580      	push	{r7, lr}
 800f99a:	b08a      	sub	sp, #40	; 0x28
 800f99c:	4601      	mov	r1, r0

            public bool IsOpenType
            {
                get
                {
                    if(m_parametersDefinition != null)
 800f99e:	68c0      	ldr	r0, [r0, #12]
 800f9a0:	2800      	cmp	r0, #0
 800f9a2:	9107      	str	r1, [sp, #28]
 800f9a4:	d006      	beq.n	800f9b4 <GenericContext_get_IsOpenType$15201+0x1c>
 800f9a6:	e7ff      	b.n	800f9a8 <GenericContext_get_IsOpenType$15201+0x10>
                    {
                        if(m_parameters.Length == 0)
 800f9a8:	9807      	ldr	r0, [sp, #28]
 800f9aa:	6881      	ldr	r1, [r0, #8]
                            {
                                return true;
                            }
                        }
                    }

 800f9ac:	6889      	ldr	r1, [r1, #8]
            {
                get
                {
                    if(m_parametersDefinition != null)
                    {
                        if(m_parameters.Length == 0)
 800f9ae:	2900      	cmp	r1, #0
 800f9b0:	d006      	beq.n	800f9c0 <GenericContext_get_IsOpenType$15201+0x28>
 800f9b2:	e008      	b.n	800f9c6 <GenericContext_get_IsOpenType$15201+0x2e>
 800f9b4:	2000      	movs	r0, #0
                                return true;
                            }
                        }
                    }

                    return false;
 800f9b6:	9006      	str	r0, [sp, #24]
 800f9b8:	e7ff      	b.n	800f9ba <GenericContext_get_IsOpenType$15201+0x22>
 800f9ba:	9806      	ldr	r0, [sp, #24]
 800f9bc:	b00a      	add	sp, #40	; 0x28
 800f9be:	bd80      	pop	{r7, pc}
 800f9c0:	2001      	movs	r0, #1
                {
                    if(m_parametersDefinition != null)
                    {
                        if(m_parameters.Length == 0)
                        {
                            return true;
 800f9c2:	9006      	str	r0, [sp, #24]
 800f9c4:	e7f9      	b.n	800f9ba <GenericContext_get_IsOpenType$15201+0x22>
                        }

                        foreach(TypeRepresentation td in m_parameters)
 800f9c6:	9807      	ldr	r0, [sp, #28]
 800f9c8:	6881      	ldr	r1, [r0, #8]
 800f9ca:	2200      	movs	r2, #0
 800f9cc:	9105      	str	r1, [sp, #20]
 800f9ce:	9204      	str	r2, [sp, #16]
 800f9d0:	e7ff      	b.n	800f9d2 <GenericContext_get_IsOpenType$15201+0x3a>
 800f9d2:	9804      	ldr	r0, [sp, #16]
                            {
                                return true;
                            }
                        }
                    }

 800f9d4:	9905      	ldr	r1, [sp, #20]
 800f9d6:	688a      	ldr	r2, [r1, #8]
                        if(m_parameters.Length == 0)
                        {
                            return true;
                        }

                        foreach(TypeRepresentation td in m_parameters)
 800f9d8:	4290      	cmp	r0, r2
 800f9da:	9003      	str	r0, [sp, #12]
 800f9dc:	da22      	bge.n	800fa24 <GenericContext_get_IsOpenType$15201+0x8c>
 800f9de:	e7ff      	b.n	800f9e0 <GenericContext_get_IsOpenType$15201+0x48>
 800f9e0:	9805      	ldr	r0, [sp, #20]
 800f9e2:	9903      	ldr	r1, [sp, #12]
 800f9e4:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 800f9e8:	68d2      	ldr	r2, [r2, #12]
            VOID        = 0x01,
            BOOLEAN     = 0x02,
            CHAR        = 0x03,
            I1          = 0x04,
            U1          = 0x05,
            I2          = 0x06,
 800f9ea:	f102 0308 	add.w	r3, r2, #8
 800f9ee:	9308      	str	r3, [sp, #32]
 800f9f0:	2300      	movs	r3, #0
 800f9f2:	9309      	str	r3, [sp, #36]	; 0x24
            private TypeRepresentation[]         m_parameters;
            private GenericParameterDefinition[] m_parametersDefinition;

            //
            // Constructor Methods
            //
 800f9f4:	f8dd c020 	ldr.w	ip, [sp, #32]
            CLASS       = 0x12,    // CLASS <class Token>
            VAR         = 0x13,    // a class type variable VAR <U1>
            ARRAY       = 0x14,    // MDARRAY <type> <rank> <bcount> <bound1> ... <lbcount> <lb1> ...
            GENERICINST = 0x15,    // instantiated type
            TYPEDBYREF  = 0x16,    // This is a simple type.
            I           = 0x18,    // native integer size
 800f9f8:	f1ac 0108 	sub.w	r1, ip, #8
 800f9fc:	9309      	str	r3, [sp, #36]	; 0x24
 800f9fe:	ab09      	add	r3, sp, #36	; 0x24
 800fa00:	f1a3 0008 	sub.w	r0, r3, #8
 800fa04:	9202      	str	r2, [sp, #8]
 800fa06:	f7f0 ff59 	bl	80008bc <UIntPtr_.ctor$2864>
            VOID        = 0x01,
            BOOLEAN     = 0x02,
            CHAR        = 0x03,
            I1          = 0x04,
            U1          = 0x05,
            I2          = 0x06,
 800fa0a:	9809      	ldr	r0, [sp, #36]	; 0x24

        public struct InterfaceMap
        {
            public static readonly InterfaceMap[] SharedEmptyArray = new InterfaceMap[0];

            //
 800fa0c:	6840      	ldr	r0, [r0, #4]
                            return true;
                        }

                        foreach(TypeRepresentation td in m_parameters)
                        {
                            if(td.IsOpenType)
 800fa0e:	69c0      	ldr	r0, [r0, #28]
 800fa10:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800fa12:	9902      	ldr	r1, [sp, #8]
 800fa14:	9001      	str	r0, [sp, #4]
 800fa16:	4608      	mov	r0, r1
 800fa18:	9a01      	ldr	r2, [sp, #4]
 800fa1a:	4790      	blx	r2
 800fa1c:	f010 0fff 	tst.w	r0, #255	; 0xff
 800fa20:	d101      	bne.n	800fa26 <GenericContext_get_IsOpenType$15201+0x8e>
 800fa22:	e003      	b.n	800fa2c <GenericContext_get_IsOpenType$15201+0x94>
                            {
                                return true;
                            }
                        }
                    }
 800fa24:	e7c6      	b.n	800f9b4 <GenericContext_get_IsOpenType$15201+0x1c>
 800fa26:	2001      	movs	r0, #1

                        foreach(TypeRepresentation td in m_parameters)
                        {
                            if(td.IsOpenType)
                            {
                                return true;
 800fa28:	9006      	str	r0, [sp, #24]
 800fa2a:	e7c6      	b.n	800f9ba <GenericContext_get_IsOpenType$15201+0x22>
                            }
                        }
 800fa2c:	9803      	ldr	r0, [sp, #12]
 800fa2e:	1c41      	adds	r1, r0, #1
 800fa30:	9104      	str	r1, [sp, #16]
 800fa32:	e7ce      	b.n	800f9d2 <GenericContext_get_IsOpenType$15201+0x3a>

0800fa34 <GenericContext_get_IsDelayedType$15202>:
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b08a      	sub	sp, #40	; 0x28
 800fa38:	4601      	mov	r1, r0

            public bool IsDelayedType
            {
                get
                {
                    if(m_parameters.Length == 0)
 800fa3a:	6880      	ldr	r0, [r0, #8]
                            {
                                return true;
                            }
                        }
                    }

 800fa3c:	6880      	ldr	r0, [r0, #8]

            public bool IsDelayedType
            {
                get
                {
                    if(m_parameters.Length == 0)
 800fa3e:	2800      	cmp	r0, #0
 800fa40:	9107      	str	r1, [sp, #28]
 800fa42:	d103      	bne.n	800fa4c <GenericContext_get_IsDelayedType$15202+0x18>
 800fa44:	e7ff      	b.n	800fa46 <GenericContext_get_IsDelayedType$15202+0x12>
 800fa46:	2000      	movs	r0, #0
                    {
                        return false;
 800fa48:	9006      	str	r0, [sp, #24]
 800fa4a:	e031      	b.n	800fab0 <GenericContext_get_IsDelayedType$15202+0x7c>
                    }

                    foreach(TypeRepresentation td in m_parameters)
 800fa4c:	9807      	ldr	r0, [sp, #28]
 800fa4e:	6881      	ldr	r1, [r0, #8]
 800fa50:	2200      	movs	r2, #0
 800fa52:	9105      	str	r1, [sp, #20]
 800fa54:	9204      	str	r2, [sp, #16]
 800fa56:	e7ff      	b.n	800fa58 <GenericContext_get_IsDelayedType$15202+0x24>
 800fa58:	9804      	ldr	r0, [sp, #16]
                            {
                                return true;
                            }
                        }
                    }

 800fa5a:	9905      	ldr	r1, [sp, #20]
 800fa5c:	688a      	ldr	r2, [r1, #8]
                    if(m_parameters.Length == 0)
                    {
                        return false;
                    }

                    foreach(TypeRepresentation td in m_parameters)
 800fa5e:	4290      	cmp	r0, r2
 800fa60:	9003      	str	r0, [sp, #12]
 800fa62:	da22      	bge.n	800faaa <GenericContext_get_IsDelayedType$15202+0x76>
 800fa64:	e7ff      	b.n	800fa66 <GenericContext_get_IsDelayedType$15202+0x32>
 800fa66:	9805      	ldr	r0, [sp, #20]
 800fa68:	9903      	ldr	r1, [sp, #12]
 800fa6a:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 800fa6e:	68d2      	ldr	r2, [r2, #12]
            VOID        = 0x01,
            BOOLEAN     = 0x02,
            CHAR        = 0x03,
            I1          = 0x04,
            U1          = 0x05,
            I2          = 0x06,
 800fa70:	f102 0308 	add.w	r3, r2, #8
 800fa74:	9308      	str	r3, [sp, #32]
 800fa76:	2300      	movs	r3, #0
 800fa78:	9309      	str	r3, [sp, #36]	; 0x24
            private TypeRepresentation[]         m_parameters;
            private GenericParameterDefinition[] m_parametersDefinition;

            //
            // Constructor Methods
            //
 800fa7a:	f8dd c020 	ldr.w	ip, [sp, #32]
            CLASS       = 0x12,    // CLASS <class Token>
            VAR         = 0x13,    // a class type variable VAR <U1>
            ARRAY       = 0x14,    // MDARRAY <type> <rank> <bcount> <bound1> ... <lbcount> <lb1> ...
            GENERICINST = 0x15,    // instantiated type
            TYPEDBYREF  = 0x16,    // This is a simple type.
            I           = 0x18,    // native integer size
 800fa7e:	f1ac 0108 	sub.w	r1, ip, #8
 800fa82:	9309      	str	r3, [sp, #36]	; 0x24
 800fa84:	ab09      	add	r3, sp, #36	; 0x24
 800fa86:	f1a3 0008 	sub.w	r0, r3, #8
 800fa8a:	9202      	str	r2, [sp, #8]
 800fa8c:	f7f0 ff16 	bl	80008bc <UIntPtr_.ctor$2864>
            VOID        = 0x01,
            BOOLEAN     = 0x02,
            CHAR        = 0x03,
            I1          = 0x04,
            U1          = 0x05,
            I2          = 0x06,
 800fa90:	9809      	ldr	r0, [sp, #36]	; 0x24

        public struct InterfaceMap
        {
            public static readonly InterfaceMap[] SharedEmptyArray = new InterfaceMap[0];

            //
 800fa92:	6840      	ldr	r0, [r0, #4]
                        return false;
                    }

                    foreach(TypeRepresentation td in m_parameters)
                    {
                        if(td.IsDelayedType)
 800fa94:	69c0      	ldr	r0, [r0, #28]
 800fa96:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800fa98:	9902      	ldr	r1, [sp, #8]
 800fa9a:	9001      	str	r0, [sp, #4]
 800fa9c:	4608      	mov	r0, r1
 800fa9e:	9a01      	ldr	r2, [sp, #4]
 800faa0:	4790      	blx	r2
 800faa2:	f010 0fff 	tst.w	r0, #255	; 0xff
 800faa6:	d106      	bne.n	800fab6 <GenericContext_get_IsDelayedType$15202+0x82>
 800faa8:	e008      	b.n	800fabc <GenericContext_get_IsDelayedType$15202+0x88>
 800faaa:	2000      	movs	r0, #0
                        {
                            return true;
                        }
                    }

                    return false;
 800faac:	9006      	str	r0, [sp, #24]
 800faae:	e7ff      	b.n	800fab0 <GenericContext_get_IsDelayedType$15202+0x7c>
 800fab0:	9806      	ldr	r0, [sp, #24]
 800fab2:	b00a      	add	sp, #40	; 0x28
 800fab4:	bd80      	pop	{r7, pc}
 800fab6:	2001      	movs	r0, #1

                    foreach(TypeRepresentation td in m_parameters)
                    {
                        if(td.IsDelayedType)
                        {
                            return true;
 800fab8:	9006      	str	r0, [sp, #24]
 800faba:	e7f9      	b.n	800fab0 <GenericContext_get_IsDelayedType$15202+0x7c>
                        }
                    }
 800fabc:	9803      	ldr	r0, [sp, #12]
 800fabe:	1c41      	adds	r1, r0, #1
 800fac0:	9104      	str	r1, [sp, #16]
 800fac2:	e7c9      	b.n	800fa58 <GenericContext_get_IsDelayedType$15202+0x24>

0800fac4 <TypeRepresentation_get_IsNestedType$14672>:
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b082      	sub	sp, #8
 800fac8:	4601      	mov	r1, r0

        public bool IsNestedType
        {
            get
            {
                return m_enclosingClass != null;
 800faca:	69c0      	ldr	r0, [r0, #28]
 800facc:	2200      	movs	r2, #0

        [Inline]
        public static bool operator ==( TypeRepresentation left  ,
                                        TypeRepresentation right )
        {
            return Object.Equals( left, right );
 800face:	9101      	str	r1, [sp, #4]
 800fad0:	4611      	mov	r1, r2
 800fad2:	9200      	str	r2, [sp, #0]
 800fad4:	f7f2 f81d 	bl	8001b12 <Object_Equals$2231>
 800fad8:	f010 0fff 	tst.w	r0, #255	; 0xff
 800fadc:	9800      	ldr	r0, [sp, #0]
 800fade:	bf08      	it	eq
 800fae0:	2001      	moveq	r0, #1
 800fae2:	b002      	add	sp, #8
 800fae4:	bd80      	pop	{r7, pc}
 800fae6:	46c0      	nop			; (mov r8, r8)

0800fae8 <TypeRepresentation_GetAbbreviation$14685>:
 800fae8:	b083      	sub	sp, #12
 800faea:	4601      	mov	r1, r0
        // Debug Methods
        //

        private string GetAbbreviation()
        {
            switch(m_builtinType)
 800faec:	7a00      	ldrb	r0, [r0, #8]
 800faee:	3801      	subs	r0, #1
 800faf0:	4602      	mov	r2, r0
 800faf2:	281b      	cmp	r0, #27
 800faf4:	9102      	str	r1, [sp, #8]
 800faf6:	9201      	str	r2, [sp, #4]
 800faf8:	f200 8065 	bhi.w	800fbc6 <TypeRepresentation_GetAbbreviation$14685+0xde>
 800fafc:	9901      	ldr	r1, [sp, #4]
 800fafe:	e8df f001 	tbb	[pc, r1]
 800fb02:	140e      	.short	0x140e
 800fb04:	2c26201a 	.word	0x2c26201a
 800fb08:	443e3832 	.word	0x443e3832
 800fb0c:	5c56504a 	.word	0x5c56504a
 800fb10:	62626262 	.word	0x62626262
 800fb14:	62626262 	.word	0x62626262
 800fb18:	62626262 	.word	0x62626262
 800fb1c:	6562      	.short	0x6562
 800fb1e:	484c      	ldr	r0, [pc, #304]	; (800fc50 <TypeRepresentation_GetAbbreviation$14685+0x168>)
 800fb20:	494c      	ldr	r1, [pc, #304]	; (800fc54 <TypeRepresentation_GetAbbreviation$14685+0x16c>)
 800fb22:	4479      	add	r1, pc
 800fb24:	4408      	add	r0, r1
            {
                case BuiltInTypes.VOID   : return "void"   ;
 800fb26:	9000      	str	r0, [sp, #0]
 800fb28:	e056      	b.n	800fbd8 <TypeRepresentation_GetAbbreviation$14685+0xf0>
 800fb2a:	4847      	ldr	r0, [pc, #284]	; (800fc48 <TypeRepresentation_GetAbbreviation$14685+0x160>)
 800fb2c:	4947      	ldr	r1, [pc, #284]	; (800fc4c <TypeRepresentation_GetAbbreviation$14685+0x164>)
 800fb2e:	4479      	add	r1, pc
 800fb30:	4408      	add	r0, r1
                case BuiltInTypes.BOOLEAN: return "bool"   ;
 800fb32:	9000      	str	r0, [sp, #0]
 800fb34:	e050      	b.n	800fbd8 <TypeRepresentation_GetAbbreviation$14685+0xf0>
 800fb36:	4842      	ldr	r0, [pc, #264]	; (800fc40 <TypeRepresentation_GetAbbreviation$14685+0x158>)
 800fb38:	4942      	ldr	r1, [pc, #264]	; (800fc44 <TypeRepresentation_GetAbbreviation$14685+0x15c>)
 800fb3a:	4479      	add	r1, pc
 800fb3c:	4408      	add	r0, r1
                case BuiltInTypes.CHAR   : return "char"   ;
 800fb3e:	9000      	str	r0, [sp, #0]
 800fb40:	e04a      	b.n	800fbd8 <TypeRepresentation_GetAbbreviation$14685+0xf0>
 800fb42:	483d      	ldr	r0, [pc, #244]	; (800fc38 <TypeRepresentation_GetAbbreviation$14685+0x150>)
 800fb44:	493d      	ldr	r1, [pc, #244]	; (800fc3c <TypeRepresentation_GetAbbreviation$14685+0x154>)
 800fb46:	4479      	add	r1, pc
 800fb48:	4408      	add	r0, r1
                case BuiltInTypes.I1     : return "sbyte"  ;
 800fb4a:	9000      	str	r0, [sp, #0]
 800fb4c:	e044      	b.n	800fbd8 <TypeRepresentation_GetAbbreviation$14685+0xf0>
 800fb4e:	4838      	ldr	r0, [pc, #224]	; (800fc30 <TypeRepresentation_GetAbbreviation$14685+0x148>)
 800fb50:	4938      	ldr	r1, [pc, #224]	; (800fc34 <TypeRepresentation_GetAbbreviation$14685+0x14c>)
 800fb52:	4479      	add	r1, pc
 800fb54:	4408      	add	r0, r1
                case BuiltInTypes.U1     : return "byte"   ;
 800fb56:	9000      	str	r0, [sp, #0]
 800fb58:	e03e      	b.n	800fbd8 <TypeRepresentation_GetAbbreviation$14685+0xf0>
 800fb5a:	4833      	ldr	r0, [pc, #204]	; (800fc28 <TypeRepresentation_GetAbbreviation$14685+0x140>)
 800fb5c:	4933      	ldr	r1, [pc, #204]	; (800fc2c <TypeRepresentation_GetAbbreviation$14685+0x144>)
 800fb5e:	4479      	add	r1, pc
 800fb60:	4408      	add	r0, r1
                case BuiltInTypes.I2     : return "short"  ;
 800fb62:	9000      	str	r0, [sp, #0]
 800fb64:	e038      	b.n	800fbd8 <TypeRepresentation_GetAbbreviation$14685+0xf0>
 800fb66:	482e      	ldr	r0, [pc, #184]	; (800fc20 <TypeRepresentation_GetAbbreviation$14685+0x138>)
 800fb68:	492e      	ldr	r1, [pc, #184]	; (800fc24 <TypeRepresentation_GetAbbreviation$14685+0x13c>)
 800fb6a:	4479      	add	r1, pc
 800fb6c:	4408      	add	r0, r1
                case BuiltInTypes.U2     : return "ushort" ;
 800fb6e:	9000      	str	r0, [sp, #0]
 800fb70:	e032      	b.n	800fbd8 <TypeRepresentation_GetAbbreviation$14685+0xf0>
 800fb72:	4829      	ldr	r0, [pc, #164]	; (800fc18 <TypeRepresentation_GetAbbreviation$14685+0x130>)
 800fb74:	4929      	ldr	r1, [pc, #164]	; (800fc1c <TypeRepresentation_GetAbbreviation$14685+0x134>)
 800fb76:	4479      	add	r1, pc
 800fb78:	4408      	add	r0, r1
                case BuiltInTypes.I4     : return "int"    ;
 800fb7a:	9000      	str	r0, [sp, #0]
 800fb7c:	e02c      	b.n	800fbd8 <TypeRepresentation_GetAbbreviation$14685+0xf0>
 800fb7e:	4824      	ldr	r0, [pc, #144]	; (800fc10 <TypeRepresentation_GetAbbreviation$14685+0x128>)
 800fb80:	4924      	ldr	r1, [pc, #144]	; (800fc14 <TypeRepresentation_GetAbbreviation$14685+0x12c>)
 800fb82:	4479      	add	r1, pc
 800fb84:	4408      	add	r0, r1
                case BuiltInTypes.U4     : return "uint"   ;
 800fb86:	9000      	str	r0, [sp, #0]
 800fb88:	e026      	b.n	800fbd8 <TypeRepresentation_GetAbbreviation$14685+0xf0>
 800fb8a:	481f      	ldr	r0, [pc, #124]	; (800fc08 <TypeRepresentation_GetAbbreviation$14685+0x120>)
 800fb8c:	491f      	ldr	r1, [pc, #124]	; (800fc0c <TypeRepresentation_GetAbbreviation$14685+0x124>)
 800fb8e:	4479      	add	r1, pc
 800fb90:	4408      	add	r0, r1
                case BuiltInTypes.I8     : return "long"   ;
 800fb92:	9000      	str	r0, [sp, #0]
 800fb94:	e020      	b.n	800fbd8 <TypeRepresentation_GetAbbreviation$14685+0xf0>
 800fb96:	481a      	ldr	r0, [pc, #104]	; (800fc00 <TypeRepresentation_GetAbbreviation$14685+0x118>)
 800fb98:	491a      	ldr	r1, [pc, #104]	; (800fc04 <TypeRepresentation_GetAbbreviation$14685+0x11c>)
 800fb9a:	4479      	add	r1, pc
 800fb9c:	4408      	add	r0, r1
                case BuiltInTypes.U8     : return "ulong"  ;
 800fb9e:	9000      	str	r0, [sp, #0]
 800fba0:	e01a      	b.n	800fbd8 <TypeRepresentation_GetAbbreviation$14685+0xf0>
 800fba2:	4815      	ldr	r0, [pc, #84]	; (800fbf8 <TypeRepresentation_GetAbbreviation$14685+0x110>)
 800fba4:	4915      	ldr	r1, [pc, #84]	; (800fbfc <TypeRepresentation_GetAbbreviation$14685+0x114>)
 800fba6:	4479      	add	r1, pc
 800fba8:	4408      	add	r0, r1
                case BuiltInTypes.R4     : return "float"  ;
 800fbaa:	9000      	str	r0, [sp, #0]
 800fbac:	e014      	b.n	800fbd8 <TypeRepresentation_GetAbbreviation$14685+0xf0>
 800fbae:	4810      	ldr	r0, [pc, #64]	; (800fbf0 <TypeRepresentation_GetAbbreviation$14685+0x108>)
 800fbb0:	4910      	ldr	r1, [pc, #64]	; (800fbf4 <TypeRepresentation_GetAbbreviation$14685+0x10c>)
 800fbb2:	4479      	add	r1, pc
 800fbb4:	4408      	add	r0, r1
                case BuiltInTypes.R8     : return "double" ;
 800fbb6:	9000      	str	r0, [sp, #0]
 800fbb8:	e00e      	b.n	800fbd8 <TypeRepresentation_GetAbbreviation$14685+0xf0>
 800fbba:	480b      	ldr	r0, [pc, #44]	; (800fbe8 <TypeRepresentation_GetAbbreviation$14685+0x100>)
 800fbbc:	490b      	ldr	r1, [pc, #44]	; (800fbec <TypeRepresentation_GetAbbreviation$14685+0x104>)
 800fbbe:	4479      	add	r1, pc
 800fbc0:	4408      	add	r0, r1
                case BuiltInTypes.STRING : return "string" ;
 800fbc2:	9000      	str	r0, [sp, #0]
 800fbc4:	e008      	b.n	800fbd8 <TypeRepresentation_GetAbbreviation$14685+0xf0>
 800fbc6:	2000      	movs	r0, #0
                case BuiltInTypes.OBJECT : return "object" ;
                default                  : return null;
 800fbc8:	9000      	str	r0, [sp, #0]
 800fbca:	e005      	b.n	800fbd8 <TypeRepresentation_GetAbbreviation$14685+0xf0>
 800fbcc:	4804      	ldr	r0, [pc, #16]	; (800fbe0 <TypeRepresentation_GetAbbreviation$14685+0xf8>)
 800fbce:	4905      	ldr	r1, [pc, #20]	; (800fbe4 <TypeRepresentation_GetAbbreviation$14685+0xfc>)
 800fbd0:	4479      	add	r1, pc
 800fbd2:	4408      	add	r0, r1
                case BuiltInTypes.I8     : return "long"   ;
                case BuiltInTypes.U8     : return "ulong"  ;
                case BuiltInTypes.R4     : return "float"  ;
                case BuiltInTypes.R8     : return "double" ;
                case BuiltInTypes.STRING : return "string" ;
                case BuiltInTypes.OBJECT : return "object" ;
 800fbd4:	9000      	str	r0, [sp, #0]
 800fbd6:	e7ff      	b.n	800fbd8 <TypeRepresentation_GetAbbreviation$14685+0xf0>
                default                  : return null;
            }
        }
 800fbd8:	9800      	ldr	r0, [sp, #0]
 800fbda:	b003      	add	sp, #12
 800fbdc:	4770      	bx	lr
 800fbde:	46c0      	nop			; (mov r8, r8)
 800fbe0:	e801419c 	.word	0xe801419c
 800fbe4:	17ff1c00 	.word	0x17ff1c00
 800fbe8:	e801417c 	.word	0xe801417c
 800fbec:	17ff1c12 	.word	0x17ff1c12
 800fbf0:	e801415c 	.word	0xe801415c
 800fbf4:	17ff1c1e 	.word	0x17ff1c1e
 800fbf8:	e801413c 	.word	0xe801413c
 800fbfc:	17ff1c2a 	.word	0x17ff1c2a
 800fc00:	e801411c 	.word	0xe801411c
 800fc04:	17ff1c36 	.word	0x17ff1c36
 800fc08:	e80140fc 	.word	0xe80140fc
 800fc0c:	17ff1c42 	.word	0x17ff1c42
 800fc10:	e80140dc 	.word	0xe80140dc
 800fc14:	17ff1c4e 	.word	0x17ff1c4e
 800fc18:	e80140bc 	.word	0xe80140bc
 800fc1c:	17ff1c5a 	.word	0x17ff1c5a
 800fc20:	e801409c 	.word	0xe801409c
 800fc24:	17ff1c66 	.word	0x17ff1c66
 800fc28:	e801407c 	.word	0xe801407c
 800fc2c:	17ff1c72 	.word	0x17ff1c72
 800fc30:	e801405c 	.word	0xe801405c
 800fc34:	17ff1c7e 	.word	0x17ff1c7e
 800fc38:	e801403c 	.word	0xe801403c
 800fc3c:	17ff1c8a 	.word	0x17ff1c8a
 800fc40:	e801401c 	.word	0xe801401c
 800fc44:	17ff1c96 	.word	0x17ff1c96
 800fc48:	e8013ffc 	.word	0xe8013ffc
 800fc4c:	17ff1ca2 	.word	0x17ff1ca2
 800fc50:	e8013fdc 	.word	0xe8013fdc
 800fc54:	17ff1cae 	.word	0x17ff1cae

0800fc58 <ValueTypeRepresentation_ToString$14702>:
 800fc58:	b580      	push	{r7, lr}
 800fc5a:	b08a      	sub	sp, #40	; 0x28
 800fc5c:	4601      	mov	r1, r0
 800fc5e:	4a20      	ldr	r2, [pc, #128]	; (800fce0 <ValueTypeRepresentation_ToString$14702+0x88>)
 800fc60:	4b20      	ldr	r3, [pc, #128]	; (800fce4 <ValueTypeRepresentation_ToString$14702+0x8c>)
 800fc62:	447b      	add	r3, pc
 800fc64:	441a      	add	r2, r3
 800fc66:	f8df c080 	ldr.w	ip, [pc, #128]	; 800fce8 <ValueTypeRepresentation_ToString$14702+0x90>
 800fc6a:	449c      	add	ip, r3
 800fc6c:	9007      	str	r0, [sp, #28]
 800fc6e:	4610      	mov	r0, r2
 800fc70:	9106      	str	r1, [sp, #24]
 800fc72:	4661      	mov	r1, ip
 800fc74:	9305      	str	r3, [sp, #20]
 800fc76:	f7f0 fda3 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 800fc7a:	491c      	ldr	r1, [pc, #112]	; (800fcec <ValueTypeRepresentation_ToString$14702+0x94>)
 800fc7c:	9a05      	ldr	r2, [sp, #20]
 800fc7e:	4411      	add	r1, r2
 800fc80:	9004      	str	r0, [sp, #16]
 800fc82:	f7fe fad3 	bl	800e22c <StringBuilder_.ctor$8489>
            return sb.ToString();
        }

        internal override void PrettyToString( System.Text.StringBuilder sb                 ,
                                               bool                      fPrefix            ,
                                               bool                      fWithAbbreviations )
 800fc86:	9807      	ldr	r0, [sp, #28]
 800fc88:	f100 0108 	add.w	r1, r0, #8
 800fc8c:	9108      	str	r1, [sp, #32]
 800fc8e:	2100      	movs	r1, #0
 800fc90:	9109      	str	r1, [sp, #36]	; 0x24
 800fc92:	9a08      	ldr	r2, [sp, #32]
 800fc94:	3a08      	subs	r2, #8
 800fc96:	9109      	str	r1, [sp, #36]	; 0x24
 800fc98:	ab09      	add	r3, sp, #36	; 0x24
 800fc9a:	f1a3 0008 	sub.w	r0, r3, #8
 800fc9e:	9103      	str	r1, [sp, #12]
 800fca0:	4611      	mov	r1, r2
 800fca2:	f7f0 fe0b 	bl	80008bc <UIntPtr_.ctor$2864>
            return sb.ToString();
        }

        internal override void PrettyToString( System.Text.StringBuilder sb                 ,
                                               bool                      fPrefix            ,
                                               bool                      fWithAbbreviations )
 800fca6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fca8:	6840      	ldr	r0, [r0, #4]
 800fcaa:	69c0      	ldr	r0, [r0, #28]
 800fcac:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800fcae:	4910      	ldr	r1, [pc, #64]	; (800fcf0 <ValueTypeRepresentation_ToString$14702+0x98>)
 800fcb0:	9a05      	ldr	r2, [sp, #20]
 800fcb2:	5c8a      	ldrb	r2, [r1, r2]
 800fcb4:	9907      	ldr	r1, [sp, #28]
 800fcb6:	9002      	str	r0, [sp, #8]
 800fcb8:	4608      	mov	r0, r1
 800fcba:	9904      	ldr	r1, [sp, #16]
 800fcbc:	9b03      	ldr	r3, [sp, #12]
 800fcbe:	f8dd c008 	ldr.w	ip, [sp, #8]
 800fcc2:	47e0      	blx	ip
 800fcc4:	480b      	ldr	r0, [pc, #44]	; (800fcf4 <ValueTypeRepresentation_ToString$14702+0x9c>)
 800fcc6:	9905      	ldr	r1, [sp, #20]
 800fcc8:	4401      	add	r1, r0
 800fcca:	9804      	ldr	r0, [sp, #16]
 800fccc:	f7fd f896 	bl	800cdfc <StringBuilder_Append$8507>
 800fcd0:	9904      	ldr	r1, [sp, #16]
 800fcd2:	9001      	str	r0, [sp, #4]
 800fcd4:	4608      	mov	r0, r1
 800fcd6:	f7f2 fdd5 	bl	8002884 <StringBuilder_ToString$8499>
 800fcda:	b00a      	add	sp, #40	; 0x28
 800fcdc:	bd80      	pop	{r7, pc}
 800fcde:	46c0      	nop			; (mov r8, r8)
 800fce0:	ffffea38 	.word	0xffffea38
 800fce4:	17ff1b6e 	.word	0x17ff1b6e
 800fce8:	e8010b3c 	.word	0xe8010b3c
 800fcec:	e80141dc 	.word	0xe80141dc
 800fcf0:	e8025458 	.word	0xe8025458
 800fcf4:	e8013a4c 	.word	0xe8013a4c

0800fcf8 <Range_Contains$14949>:
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b08a      	sub	sp, #40	; 0x28
 800fcfc:	460a      	mov	r2, r1
 800fcfe:	4603      	mov	r3, r0
 800fd00:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800fd04:	68c0      	ldr	r0, [r0, #12]
 800fd06:	9107      	str	r1, [sp, #28]
 800fd08:	f8cd c020 	str.w	ip, [sp, #32]
 800fd0c:	9009      	str	r0, [sp, #36]	; 0x24
 800fd0e:	a808      	add	r0, sp, #32

            TS.MultiArrayReferenceTypeRepresentation ts2 = (TS.MultiArrayReferenceTypeRepresentation)ts;

            return (int)ts2.Dimensions[dimension].m_upperBound;
        }

 800fd10:	3808      	subs	r0, #8
 800fd12:	9206      	str	r2, [sp, #24]
 800fd14:	9305      	str	r3, [sp, #20]
 800fd16:	f7f3 fc2f 	bl	8003578 <UIntPtr_ToUInt32$2870>
 800fd1a:	a907      	add	r1, sp, #28
 800fd1c:	3908      	subs	r1, #8
 800fd1e:	460a      	mov	r2, r1
 800fd20:	9004      	str	r0, [sp, #16]
 800fd22:	4608      	mov	r0, r1
 800fd24:	9203      	str	r2, [sp, #12]
 800fd26:	f7f3 fc27 	bl	8003578 <UIntPtr_ToUInt32$2870>
 800fd2a:	9904      	ldr	r1, [sp, #16]
 800fd2c:	4281      	cmp	r1, r0
 800fd2e:	d903      	bls.n	800fd38 <Range_Contains$14949+0x40>
 800fd30:	e7ff      	b.n	800fd32 <Range_Contains$14949+0x3a>
 800fd32:	2000      	movs	r0, #0
 800fd34:	9002      	str	r0, [sp, #8]
 800fd36:	e00f      	b.n	800fd58 <Range_Contains$14949+0x60>
 800fd38:	9803      	ldr	r0, [sp, #12]
 800fd3a:	f7f3 fc1d 	bl	8003578 <UIntPtr_ToUInt32$2870>
 800fd3e:	a909      	add	r1, sp, #36	; 0x24
 800fd40:	3908      	subs	r1, #8
 800fd42:	9001      	str	r0, [sp, #4]
 800fd44:	4608      	mov	r0, r1
 800fd46:	f7f3 fc17 	bl	8003578 <UIntPtr_ToUInt32$2870>
 800fd4a:	2100      	movs	r1, #0
 800fd4c:	9a01      	ldr	r2, [sp, #4]
 800fd4e:	4282      	cmp	r2, r0
 800fd50:	bf38      	it	cc
 800fd52:	2101      	movcc	r1, #1
 800fd54:	9102      	str	r1, [sp, #8]
 800fd56:	e7ff      	b.n	800fd58 <Range_Contains$14949+0x60>
 800fd58:	9802      	ldr	r0, [sp, #8]
 800fd5a:	b00a      	add	sp, #40	; 0x28
 800fd5c:	bd80      	pop	{r7, pc}

0800fd5e <SpiConnectionSettings_set_ChipSelectLine$16127>:
 800fd5e:	b082      	sub	sp, #8
 800fd60:	460a      	mov	r2, r1
 800fd62:	4603      	mov	r3, r0
 800fd64:	6081      	str	r1, [r0, #8]
 800fd66:	9301      	str	r3, [sp, #4]
 800fd68:	9200      	str	r2, [sp, #0]
 800fd6a:	b002      	add	sp, #8
 800fd6c:	4770      	bx	lr

0800fd6e <SpiConnectionSettings_set_DataBitLength$16131>:
 800fd6e:	b082      	sub	sp, #8
 800fd70:	460a      	mov	r2, r1
 800fd72:	4603      	mov	r3, r0
 800fd74:	6101      	str	r1, [r0, #16]
 800fd76:	9301      	str	r3, [sp, #4]
 800fd78:	9200      	str	r2, [sp, #0]
 800fd7a:	b002      	add	sp, #8
 800fd7c:	4770      	bx	lr

0800fd7e <SpiConnectionSettings_set_SharingMode$16135>:
 800fd7e:	b081      	sub	sp, #4
 800fd80:	4601      	mov	r1, r0
 800fd82:	2200      	movs	r2, #0
 800fd84:	6182      	str	r2, [r0, #24]
 800fd86:	9100      	str	r1, [sp, #0]
 800fd88:	b001      	add	sp, #4
 800fd8a:	4770      	bx	lr

0800fd8c <SpiDevice_.ctor$16140>:
 800fd8c:	b5b0      	push	{r4, r5, r7, lr}
 800fd8e:	b084      	sub	sp, #16
 800fd90:	469c      	mov	ip, r3
 800fd92:	4696      	mov	lr, r2
 800fd94:	460c      	mov	r4, r1
 800fd96:	4605      	mov	r5, r0
 800fd98:	6101      	str	r1, [r0, #16]
 800fd9a:	60c2      	str	r2, [r0, #12]
 800fd9c:	6083      	str	r3, [r0, #8]
 800fd9e:	f8cd e00c 	str.w	lr, [sp, #12]
 800fda2:	9402      	str	r4, [sp, #8]
 800fda4:	9501      	str	r5, [sp, #4]
 800fda6:	f8cd c000 	str.w	ip, [sp]
 800fdaa:	b004      	add	sp, #16
 800fdac:	bdb0      	pop	{r4, r5, r7, pc}
 800fdae:	46c0      	nop			; (mov r8, r8)

0800fdb0 <SpiDevice_AcquireSpiChannel$4189>:
 800fdb0:	b5b0      	push	{r4, r5, r7, lr}
 800fdb2:	b098      	sub	sp, #96	; 0x60
 800fdb4:	4602      	mov	r2, r0
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	9311      	str	r3, [sp, #68]	; 0x44
 800fdba:	9312      	str	r3, [sp, #72]	; 0x48
 800fdbc:	9313      	str	r3, [sp, #76]	; 0x4c
 800fdbe:	9314      	str	r3, [sp, #80]	; 0x50
 800fdc0:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800fdc4:	9316      	str	r3, [sp, #88]	; 0x58
 800fdc6:	9317      	str	r3, [sp, #92]	; 0x5c

        /// <summary>
        /// Private SpiDevice constructor
        /// </summary>
        internal SpiDevice(string busId, SpiConnectionSettings settings, SpiChannel channel)
        {
 800fdc8:	4b81      	ldr	r3, [pc, #516]	; (800ffd0 <SpiDevice_AcquireSpiChannel$4189+0x220>)
 800fdca:	f8df c208 	ldr.w	ip, [pc, #520]	; 800ffd4 <SpiDevice_AcquireSpiChannel$4189+0x224>
 800fdce:	44fc      	add	ip, pc
 800fdd0:	4463      	add	r3, ip
 800fdd2:	9010      	str	r0, [sp, #64]	; 0x40
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 800fdda:	910f      	str	r1, [sp, #60]	; 0x3c
 800fddc:	4661      	mov	r1, ip
 800fdde:	930e      	str	r3, [sp, #56]	; 0x38
 800fde0:	920d      	str	r2, [sp, #52]	; 0x34
 800fde2:	f000 f919 	bl	8010018 <HardwareProvider_GetSpiChannelIndexFromString$16623>
 800fde6:	4601      	mov	r1, r0
            m_deviceId = busId;
            m_connectionSettings = settings;
 800fde8:	466a      	mov	r2, sp
 800fdea:	ab14      	add	r3, sp, #80	; 0x50
 800fdec:	6053      	str	r3, [r2, #4]
 800fdee:	ab13      	add	r3, sp, #76	; 0x4c
 800fdf0:	6013      	str	r3, [r2, #0]
 800fdf2:	aa11      	add	r2, sp, #68	; 0x44
 800fdf4:	ab12      	add	r3, sp, #72	; 0x48
 800fdf6:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 800fdfa:	900c      	str	r0, [sp, #48]	; 0x30
 800fdfc:	4660      	mov	r0, ip
 800fdfe:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 800fe02:	910b      	str	r1, [sp, #44]	; 0x2c
 800fe04:	4671      	mov	r1, lr
 800fe06:	f000 f919 	bl	801003c <HardwareProvider_GetSpiPinsFromBusId$16624>
 800fe0a:	f010 0fff 	tst.w	r0, #255	; 0xff
 800fe0e:	d00b      	beq.n	800fe28 <SpiDevice_AcquireSpiChannel$4189+0x78>
 800fe10:	e7ff      	b.n	800fe12 <SpiDevice_AcquireSpiChannel$4189+0x62>
 800fe12:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800fe14:	6881      	ldr	r1, [r0, #8]
 800fe16:	9a14      	ldr	r2, [sp, #80]	; 0x50
            m_channel = channel;
        }

        ~SpiDevice()
 800fe18:	428a      	cmp	r2, r1
 800fe1a:	d10b      	bne.n	800fe34 <SpiDevice_AcquireSpiChannel$4189+0x84>
 800fe1c:	e7ff      	b.n	800fe1e <SpiDevice_AcquireSpiChannel$4189+0x6e>
 800fe1e:	2000      	movs	r0, #0
 800fe20:	a914      	add	r1, sp, #80	; 0x50
 800fe22:	900a      	str	r0, [sp, #40]	; 0x28
 800fe24:	9109      	str	r1, [sp, #36]	; 0x24
 800fe26:	e018      	b.n	800fe5a <SpiDevice_AcquireSpiChannel$4189+0xaa>
 800fe28:	2000      	movs	r0, #0
        /// Opens a device with the connection settings provided.
        /// </summary>
        /// <param name="busId">The id of the bus.</param>
        /// <param name="settings">The connection settings.</param>
        /// <returns>The SPI device requested.</returns>
        /// [RemoteAsync]
 800fe2a:	9008      	str	r0, [sp, #32]
 800fe2c:	e7ff      	b.n	800fe2e <SpiDevice_AcquireSpiChannel$4189+0x7e>
        public static SpiDevice FromIdAsync( string busId, SpiConnectionSettings settings)
 800fe2e:	9808      	ldr	r0, [sp, #32]
 800fe30:	b018      	add	sp, #96	; 0x60
 800fe32:	bdb0      	pop	{r4, r5, r7, pc}
 800fe34:	a814      	add	r0, sp, #80	; 0x50
 800fe36:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800fe38:	f811 2f08 	ldrb.w	r2, [r1, #8]!
 800fe3c:	784b      	ldrb	r3, [r1, #1]
 800fe3e:	f891 c002 	ldrb.w	ip, [r1, #2]
 800fe42:	78c9      	ldrb	r1, [r1, #3]
 800fe44:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800fe48:	ea4c 2101 	orr.w	r1, ip, r1, lsl #8
 800fe4c:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 800fe50:	9114      	str	r1, [sp, #80]	; 0x50
 800fe52:	2101      	movs	r1, #1

        ~SpiDevice()
        {
            Dispose(false);
        }

 800fe54:	910a      	str	r1, [sp, #40]	; 0x28
 800fe56:	9009      	str	r0, [sp, #36]	; 0x24
 800fe58:	e7ff      	b.n	800fe5a <SpiDevice_AcquireSpiChannel$4189+0xaa>
 800fe5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fe5c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800fe5e:	4a5e      	ldr	r2, [pc, #376]	; (800ffd8 <SpiDevice_AcquireSpiChannel$4189+0x228>)
 800fe60:	4b5e      	ldr	r3, [pc, #376]	; (800ffdc <SpiDevice_AcquireSpiChannel$4189+0x22c>)
 800fe62:	447b      	add	r3, pc
 800fe64:	58d2      	ldr	r2, [r2, r3]
        /// <summary>
        /// Closes resources associated with this SPI device
        /// </summary>
 800fe66:	f8df c178 	ldr.w	ip, [pc, #376]	; 800ffe0 <SpiDevice_AcquireSpiChannel$4189+0x230>
 800fe6a:	449c      	add	ip, r3
 800fe6c:	f8df e174 	ldr.w	lr, [pc, #372]	; 800ffe4 <SpiDevice_AcquireSpiChannel$4189+0x234>
 800fe70:	4473      	add	r3, lr
 800fe72:	9007      	str	r0, [sp, #28]
 800fe74:	4660      	mov	r0, ip
 800fe76:	9106      	str	r1, [sp, #24]
 800fe78:	4619      	mov	r1, r3
 800fe7a:	f7f2 f991 	bl	80021a0 <DefaultTypeSystemManager_AllocateArray$4962>
 800fe7e:	f100 010c 	add.w	r1, r0, #12
 800fe82:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800fe84:	f801 2b02 	strb.w	r2, [r1], #2
 800fe88:	0e13      	lsrs	r3, r2, #24
 800fe8a:	704b      	strb	r3, [r1, #1]
 800fe8c:	0c13      	lsrs	r3, r2, #16
 800fe8e:	700b      	strb	r3, [r1, #0]
 800fe90:	0a11      	lsrs	r1, r2, #8
 800fe92:	7341      	strb	r1, [r0, #13]
 800fe94:	f100 0110 	add.w	r1, r0, #16
 800fe98:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fe9a:	f801 2b02 	strb.w	r2, [r1], #2
 800fe9e:	0e13      	lsrs	r3, r2, #24
 800fea0:	704b      	strb	r3, [r1, #1]
 800fea2:	0c13      	lsrs	r3, r2, #16
 800fea4:	700b      	strb	r3, [r1, #0]
 800fea6:	0a11      	lsrs	r1, r2, #8
 800fea8:	7441      	strb	r1, [r0, #17]
 800feaa:	f100 0114 	add.w	r1, r0, #20
 800feae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800feb0:	f801 2b02 	strb.w	r2, [r1], #2
 800feb4:	0e13      	lsrs	r3, r2, #24
 800feb6:	704b      	strb	r3, [r1, #1]
 800feb8:	0c13      	lsrs	r3, r2, #16
 800feba:	700b      	strb	r3, [r1, #0]
 800febc:	0a11      	lsrs	r1, r2, #8
 800febe:	7541      	strb	r1, [r0, #21]
 800fec0:	f100 0118 	add.w	r1, r0, #24
 800fec4:	9a07      	ldr	r2, [sp, #28]
 800fec6:	7813      	ldrb	r3, [r2, #0]
 800fec8:	f892 c001 	ldrb.w	ip, [r2, #1]
 800fecc:	f892 e002 	ldrb.w	lr, [r2, #2]
 800fed0:	78d4      	ldrb	r4, [r2, #3]
 800fed2:	f880 c019 	strb.w	ip, [r0, #25]
 800fed6:	ea4e 2504 	orr.w	r5, lr, r4, lsl #8
 800feda:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800fede:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 800fee2:	f801 3b02 	strb.w	r3, [r1], #2
 800fee6:	704c      	strb	r4, [r1, #1]
 800fee8:	f881 e000 	strb.w	lr, [r1]
 800feec:	f7f6 ff84 	bl	8006df8 <HardwareProvider_TryReservePins$4269>
 800fef0:	f010 0fff 	tst.w	r0, #255	; 0xff
 800fef4:	d012      	beq.n	800ff1c <SpiDevice_AcquireSpiChannel$4189+0x16c>
 800fef6:	e7ff      	b.n	800fef8 <SpiDevice_AcquireSpiChannel$4189+0x148>
        public void Dispose()
        {
 800fef8:	4835      	ldr	r0, [pc, #212]	; (800ffd0 <SpiDevice_AcquireSpiChannel$4189+0x220>)
 800fefa:	493b      	ldr	r1, [pc, #236]	; (800ffe8 <SpiDevice_AcquireSpiChannel$4189+0x238>)
 800fefc:	4479      	add	r1, pc
 800fefe:	4408      	add	r0, r1
 800ff00:	9005      	str	r0, [sp, #20]
 800ff02:	f000 f8e7 	bl	80100d4 <HardwareProvider_CreateSpiChannel$16628>
 800ff06:	aa15      	add	r2, sp, #84	; 0x54
            if (!m_disposed)
            {
                Dispose(true);
 800ff08:	9905      	ldr	r1, [sp, #20]
 800ff0a:	9004      	str	r0, [sp, #16]
 800ff0c:	4608      	mov	r0, r1
 800ff0e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ff10:	f000 f8f6 	bl	8010100 <HardwareProvider_GetSpiChannelActiveLow$16626>
 800ff14:	f010 0fff 	tst.w	r0, #255	; 0xff
 800ff18:	d101      	bne.n	800ff1e <SpiDevice_AcquireSpiChannel$4189+0x16e>
 800ff1a:	e013      	b.n	800ff44 <SpiDevice_AcquireSpiChannel$4189+0x194>
        
        /// <summary>
        /// Opens a device with the connection settings provided.
        /// </summary>
        /// <param name="busId">The id of the bus.</param>
        /// <param name="settings">The connection settings.</param>
 800ff1c:	e784      	b.n	800fe28 <SpiDevice_AcquireSpiChannel$4189+0x78>
 800ff1e:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
        {
            if (!m_disposed)
            {
                Dispose(true);
                GC.SuppressFinalize(this);
                m_disposed = true;
 800ff22:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ff24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ff26:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ff28:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 800ff2c:	46ee      	mov	lr, sp
 800ff2e:	f8ce 0008 	str.w	r0, [lr, #8]
 800ff32:	9806      	ldr	r0, [sp, #24]
 800ff34:	f8ce 0004 	str.w	r0, [lr, #4]
 800ff38:	f8ce c000 	str.w	ip, [lr]
 800ff3c:	9804      	ldr	r0, [sp, #16]
 800ff3e:	f000 f90b 	bl	8010158 <SpiChannel_SetupPins$16571>
            }
 800ff42:	e017      	b.n	800ff74 <SpiDevice_AcquireSpiChannel$4189+0x1c4>
        }

        /// <summary>
 800ff44:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ff46:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ff48:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ff4a:	9814      	ldr	r0, [sp, #80]	; 0x50
 800ff4c:	f8df c09c 	ldr.w	ip, [pc, #156]	; 800ffec <SpiDevice_AcquireSpiChannel$4189+0x23c>
 800ff50:	f8df e09c 	ldr.w	lr, [pc, #156]	; 800fff0 <SpiDevice_AcquireSpiChannel$4189+0x240>
 800ff54:	44fe      	add	lr, pc
 800ff56:	f81c c00e 	ldrb.w	ip, [ip, lr]
 800ff5a:	46ee      	mov	lr, sp
 800ff5c:	f8ce c008 	str.w	ip, [lr, #8]
 800ff60:	f8dd c018 	ldr.w	ip, [sp, #24]
 800ff64:	f8ce c004 	str.w	ip, [lr, #4]
 800ff68:	f8ce 0000 	str.w	r0, [lr]
 800ff6c:	9804      	ldr	r0, [sp, #16]
 800ff6e:	f000 f8f3 	bl	8010158 <SpiChannel_SetupPins$16571>
        /// Disposes of all resources associated with this SPI device
 800ff72:	e7ff      	b.n	800ff74 <SpiDevice_AcquireSpiChannel$4189+0x1c4>
 800ff74:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800ff76:	6901      	ldr	r1, [r0, #16]
 800ff78:	6942      	ldr	r2, [r0, #20]
 800ff7a:	2300      	movs	r3, #0
        /// </summary>
        /// <param name="disposing">True if called from Dispose, false if called from the finalizer.</param>
 800ff7c:	9804      	ldr	r0, [sp, #16]
 800ff7e:	f000 f95d 	bl	801023c <SpiChannel_SetupChannel$16569>
        private void Dispose(bool disposing)
        {
            if (disposing)
 800ff82:	4813      	ldr	r0, [pc, #76]	; (800ffd0 <SpiDevice_AcquireSpiChannel$4189+0x220>)
 800ff84:	491b      	ldr	r1, [pc, #108]	; (800fff4 <SpiDevice_AcquireSpiChannel$4189+0x244>)
 800ff86:	4479      	add	r1, pc
 800ff88:	4408      	add	r0, r1
 800ff8a:	aa16      	add	r2, sp, #88	; 0x58
 800ff8c:	ab17      	add	r3, sp, #92	; 0x5c
 800ff8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ff90:	f000 f97e 	bl	8010290 <HardwareProvider_GetSpiChannelTimingInfo$16629>
 800ff94:	f010 0fff 	tst.w	r0, #255	; 0xff
 800ff98:	d008      	beq.n	800ffac <SpiDevice_AcquireSpiChannel$4189+0x1fc>
 800ff9a:	e7ff      	b.n	800ff9c <SpiDevice_AcquireSpiChannel$4189+0x1ec>
 800ff9c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800ff9e:	68c1      	ldr	r1, [r0, #12]
            {
                ReleaseSpiBus(m_deviceId);
 800ffa0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ffa2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ffa4:	9804      	ldr	r0, [sp, #16]
 800ffa6:	f000 f9a7 	bl	80102f8 <SpiChannel_SetupTiming$16570>
                m_channel.Dispose( );
 800ffaa:	e00d      	b.n	800ffc8 <SpiDevice_AcquireSpiChannel$4189+0x218>
 800ffac:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800ffae:	68c1      	ldr	r1, [r0, #12]
 800ffb0:	4a11      	ldr	r2, [pc, #68]	; (800fff8 <SpiDevice_AcquireSpiChannel$4189+0x248>)
 800ffb2:	4b12      	ldr	r3, [pc, #72]	; (800fffc <SpiDevice_AcquireSpiChannel$4189+0x24c>)
 800ffb4:	447b      	add	r3, pc
 800ffb6:	58d2      	ldr	r2, [r2, r3]
 800ffb8:	f8df c044 	ldr.w	ip, [pc, #68]	; 8010000 <SpiDevice_AcquireSpiChannel$4189+0x250>
 800ffbc:	f85c 3003 	ldr.w	r3, [ip, r3]
            }
        }
        
 800ffc0:	9804      	ldr	r0, [sp, #16]
 800ffc2:	f000 f999 	bl	80102f8 <SpiChannel_SetupTiming$16570>
        /// <summary>
 800ffc6:	e7ff      	b.n	800ffc8 <SpiDevice_AcquireSpiChannel$4189+0x218>
        /// Opens a device with the connection settings provided.
        /// </summary>
 800ffc8:	9804      	ldr	r0, [sp, #16]
 800ffca:	9008      	str	r0, [sp, #32]
 800ffcc:	e72f      	b.n	800fe2e <SpiDevice_AcquireSpiChannel$4189+0x7e>
 800ffce:	46c0      	nop			; (mov r8, r8)
 800ffd0:	ffffe9fc 	.word	0xffffe9fc
 800ffd4:	17ff1a02 	.word	0x17ff1a02
 800ffd8:	e8025464 	.word	0xe8025464
 800ffdc:	17ff196e 	.word	0x17ff196e
 800ffe0:	ffffea38 	.word	0xffffea38
 800ffe4:	e80102ec 	.word	0xe80102ec
 800ffe8:	17ff18d4 	.word	0x17ff18d4
 800ffec:	e8025468 	.word	0xe8025468
 800fff0:	17ff187c 	.word	0x17ff187c
 800fff4:	17ff184a 	.word	0x17ff184a
 800fff8:	e802546c 	.word	0xe802546c
 800fffc:	17ff181c 	.word	0x17ff181c
 8010000:	e8025470 	.word	0xe8025470

08010004 <SpiDevice_GetSpiChannels$4191>:
        }

        /// <summary>
        /// Returns SPI channel characteristics that are defined in each Board provider
        /// </summary>
        /// <param name="id">SPI bus index</param>
 8010004:	4802      	ldr	r0, [pc, #8]	; (8010010 <SpiDevice_GetSpiChannels$4191+0xc>)
 8010006:	4903      	ldr	r1, [pc, #12]	; (8010014 <SpiDevice_GetSpiChannels$4191+0x10>)
 8010008:	4479      	add	r1, pc
 801000a:	4408      	add	r0, r1
 801000c:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801000e:	4770      	bx	lr
 8010010:	fffffe3c 	.word	0xfffffe3c
 8010014:	17ff17c8 	.word	0x17ff17c8

08010018 <HardwareProvider_GetSpiChannelIndexFromString$16623>:
 8010018:	b580      	push	{r7, lr}
 801001a:	b082      	sub	sp, #8
 801001c:	4608      	mov	r0, r1
        // Spi
        //

        public override int GetSpiChannelIndexFromString(string busId)
        {
            return Board.Instance.GetSpiChannelIndexFromString(busId);
 801001e:	4a05      	ldr	r2, [pc, #20]	; (8010034 <HardwareProvider_GetSpiChannelIndexFromString$16623+0x1c>)
 8010020:	4b05      	ldr	r3, [pc, #20]	; (8010038 <HardwareProvider_GetSpiChannelIndexFromString$16623+0x20>)
 8010022:	447b      	add	r3, pc
 8010024:	441a      	add	r2, r3
 8010026:	9001      	str	r0, [sp, #4]
 8010028:	4610      	mov	r0, r2
 801002a:	f000 fff1 	bl	8011010 <Board_GetSpiChannelIndexFromString$16919>
 801002e:	b002      	add	sp, #8
 8010030:	bd80      	pop	{r7, pc}
 8010032:	46c0      	nop			; (mov r8, r8)
 8010034:	ffffea48 	.word	0xffffea48
 8010038:	17ff17ae 	.word	0x17ff17ae

0801003c <HardwareProvider_GetSpiPinsFromBusId$16624>:
 801003c:	b510      	push	{r4, lr}
 801003e:	b089      	sub	sp, #36	; 0x24
 8010040:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010042:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8010046:	468e      	mov	lr, r1
            supports16 = channelInfo.Supports16;

            return true;
        }

        public override bool GetSpiChannelActiveLow(int id, out bool activeLow)
 8010048:	2900      	cmp	r1, #0
 801004a:	f8cd c020 	str.w	ip, [sp, #32]
 801004e:	9307      	str	r3, [sp, #28]
 8010050:	f8cd e018 	str.w	lr, [sp, #24]
 8010054:	9005      	str	r0, [sp, #20]
 8010056:	9204      	str	r2, [sp, #16]
 8010058:	d003      	beq.n	8010062 <HardwareProvider_GetSpiPinsFromBusId$16624+0x26>
 801005a:	e7ff      	b.n	801005c <HardwareProvider_GetSpiPinsFromBusId$16624+0x20>
 801005c:	2000      	movs	r0, #0
        {
            ChipsetAbstration.Board.SpiChannelInfo channelInfo = Board.Instance.GetSpiChannelInfo(id);
            if (channelInfo == null)
            {
                activeLow = true;
 801005e:	9003      	str	r0, [sp, #12]
 8010060:	e006      	b.n	8010070 <HardwareProvider_GetSpiPinsFromBusId$16624+0x34>
        }

        public override bool GetSpiChannelActiveLow(int id, out bool activeLow)
        {
            ChipsetAbstration.Board.SpiChannelInfo channelInfo = Board.Instance.GetSpiChannelInfo(id);
            if (channelInfo == null)
 8010062:	481a      	ldr	r0, [pc, #104]	; (80100cc <HardwareProvider_GetSpiPinsFromBusId$16624+0x90>)
 8010064:	491a      	ldr	r1, [pc, #104]	; (80100d0 <HardwareProvider_GetSpiPinsFromBusId$16624+0x94>)
 8010066:	4479      	add	r1, pc
 8010068:	4408      	add	r0, r1
 801006a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801006c:	9003      	str	r0, [sp, #12]
 801006e:	e7ff      	b.n	8010070 <HardwareProvider_GetSpiPinsFromBusId$16624+0x34>
                chipSelect = invalidPin;

                return false;
            }

            mosi = channelInfo.Mosi;
 8010070:	9803      	ldr	r0, [sp, #12]
 8010072:	9903      	ldr	r1, [sp, #12]
        }

        public override bool GetSpiPinsFromBusId(int id, out int mosi, out int miso, out int sclk, out int chipSelect)
        {
            ChipsetAbstration.Board.SpiChannelInfo channelInfo = Board.Instance.GetSpiChannelInfo(id);
            if (channelInfo == null)
 8010074:	2800      	cmp	r0, #0
 8010076:	9002      	str	r0, [sp, #8]
 8010078:	9101      	str	r1, [sp, #4]
 801007a:	d10f      	bne.n	801009c <HardwareProvider_GetSpiPinsFromBusId$16624+0x60>
 801007c:	e7ff      	b.n	801007e <HardwareProvider_GetSpiPinsFromBusId$16624+0x42>
 801007e:	f04f 30ff 	mov.w	r0, #4294967295
 8010082:	9904      	ldr	r1, [sp, #16]
 8010084:	6008      	str	r0, [r1, #0]
 8010086:	9a07      	ldr	r2, [sp, #28]
 8010088:	6010      	str	r0, [r2, #0]
 801008a:	9b08      	ldr	r3, [sp, #32]
 801008c:	6018      	str	r0, [r3, #0]
 801008e:	f8dd c014 	ldr.w	ip, [sp, #20]
 8010092:	f8cc 0000 	str.w	r0, [ip]
 8010096:	2000      	movs	r0, #0
                mosi = invalidPin;
                miso = invalidPin;
                sclk = invalidPin;
                chipSelect = invalidPin;

                return false;
 8010098:	9000      	str	r0, [sp, #0]
 801009a:	e014      	b.n	80100c6 <HardwareProvider_GetSpiPinsFromBusId$16624+0x8a>
 801009c:	9802      	ldr	r0, [sp, #8]
 801009e:	6881      	ldr	r1, [r0, #8]
 80100a0:	9a04      	ldr	r2, [sp, #16]
 80100a2:	6011      	str	r1, [r2, #0]
 80100a4:	9901      	ldr	r1, [sp, #4]
 80100a6:	68cb      	ldr	r3, [r1, #12]
 80100a8:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80100ac:	f8cc 3000 	str.w	r3, [ip]
 80100b0:	690b      	ldr	r3, [r1, #16]
 80100b2:	f8dd e020 	ldr.w	lr, [sp, #32]
 80100b6:	f8ce 3000 	str.w	r3, [lr]
 80100ba:	694b      	ldr	r3, [r1, #20]
 80100bc:	9c05      	ldr	r4, [sp, #20]
 80100be:	6023      	str	r3, [r4, #0]
 80100c0:	2301      	movs	r3, #1
            mosi = channelInfo.Mosi;
            miso = channelInfo.Miso;
            sclk = channelInfo.Sclk;
            chipSelect = channelInfo.ChipSelect;

            return true;
 80100c2:	9300      	str	r3, [sp, #0]
 80100c4:	e7ff      	b.n	80100c6 <HardwareProvider_GetSpiPinsFromBusId$16624+0x8a>
 80100c6:	9800      	ldr	r0, [sp, #0]
 80100c8:	b009      	add	sp, #36	; 0x24
 80100ca:	bd10      	pop	{r4, pc}
 80100cc:	fffffe3c 	.word	0xfffffe3c
 80100d0:	17ff176a 	.word	0x17ff176a

080100d4 <HardwareProvider_CreateSpiChannel$16628>:
            return Board.Instance.GetSpiChannels();
        }

        public override SPI_FRAMEWORK.SpiChannel CreateSpiChannel()
        {
            return new SpiChannel();
 80100d4:	b580      	push	{r7, lr}
 80100d6:	b082      	sub	sp, #8
 80100d8:	4806      	ldr	r0, [pc, #24]	; (80100f4 <HardwareProvider_CreateSpiChannel$16628+0x20>)
 80100da:	4907      	ldr	r1, [pc, #28]	; (80100f8 <HardwareProvider_CreateSpiChannel$16628+0x24>)
 80100dc:	4479      	add	r1, pc
 80100de:	4408      	add	r0, r1
 80100e0:	4a06      	ldr	r2, [pc, #24]	; (80100fc <HardwareProvider_CreateSpiChannel$16628+0x28>)
 80100e2:	4411      	add	r1, r2
 80100e4:	f7f0 fb6c 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 80100e8:	9001      	str	r0, [sp, #4]
 80100ea:	f7f7 f863 	bl	80071b4 <Tracker_Allocate$5417>
 80100ee:	9801      	ldr	r0, [sp, #4]
 80100f0:	b002      	add	sp, #8
 80100f2:	bd80      	pop	{r7, pc}
 80100f4:	ffffea38 	.word	0xffffea38
 80100f8:	17ff16f4 	.word	0x17ff16f4
 80100fc:	e801495c 	.word	0xe801495c

08010100 <HardwareProvider_GetSpiChannelActiveLow$16626>:
 8010100:	b085      	sub	sp, #20
 8010102:	4608      	mov	r0, r1
        }

        // The cases should match the device selector strings
        public override ChipsetAbstration.Board.SpiChannelInfo GetSpiChannelInfo( int id )
        {
            switch(id)
 8010104:	2900      	cmp	r1, #0
 8010106:	9004      	str	r0, [sp, #16]
 8010108:	9203      	str	r2, [sp, #12]
 801010a:	d003      	beq.n	8010114 <HardwareProvider_GetSpiChannelActiveLow$16626+0x14>
 801010c:	e7ff      	b.n	801010e <HardwareProvider_GetSpiChannelActiveLow$16626+0xe>
 801010e:	2000      	movs	r0, #0
            {
                case 0:
                    return SPI0;
                default:
                    return null;
 8010110:	9002      	str	r0, [sp, #8]
 8010112:	e006      	b.n	8010122 <HardwareProvider_GetSpiChannelActiveLow$16626+0x22>
        public override ChipsetAbstration.Board.SpiChannelInfo GetSpiChannelInfo( int id )
        {
            switch(id)
            {
                case 0:
                    return SPI0;
 8010114:	480e      	ldr	r0, [pc, #56]	; (8010150 <HardwareProvider_GetSpiChannelActiveLow$16626+0x50>)
 8010116:	490f      	ldr	r1, [pc, #60]	; (8010154 <HardwareProvider_GetSpiChannelActiveLow$16626+0x54>)
 8010118:	4479      	add	r1, pc
 801011a:	4408      	add	r0, r1
 801011c:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801011e:	9002      	str	r0, [sp, #8]
 8010120:	e7ff      	b.n	8010122 <HardwareProvider_GetSpiChannelActiveLow$16626+0x22>
                default:
                    return null;
            }
        }

        //
 8010122:	9802      	ldr	r0, [sp, #8]
        public override ChipsetAbstration.Board.SpiChannelInfo GetSpiChannelInfo( int id )
        {
            switch(id)
            {
                case 0:
                    return SPI0;
 8010124:	2800      	cmp	r0, #0
 8010126:	9001      	str	r0, [sp, #4]
 8010128:	d106      	bne.n	8010138 <HardwareProvider_GetSpiChannelActiveLow$16626+0x38>
 801012a:	e7ff      	b.n	801012c <HardwareProvider_GetSpiChannelActiveLow$16626+0x2c>
 801012c:	2001      	movs	r0, #1
 801012e:	9903      	ldr	r1, [sp, #12]
 8010130:	7008      	strb	r0, [r1, #0]
 8010132:	2000      	movs	r0, #0
                default:
                    return null;
            }
 8010134:	9000      	str	r0, [sp, #0]
 8010136:	e007      	b.n	8010148 <HardwareProvider_GetSpiChannelActiveLow$16626+0x48>
        }

        //
 8010138:	9801      	ldr	r0, [sp, #4]
 801013a:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 801013e:	9a03      	ldr	r2, [sp, #12]
 8010140:	7011      	strb	r1, [r2, #0]
 8010142:	2101      	movs	r1, #1
        // Gpio discovery
 8010144:	9100      	str	r1, [sp, #0]
 8010146:	e7ff      	b.n	8010148 <HardwareProvider_GetSpiChannelActiveLow$16626+0x48>
 8010148:	9800      	ldr	r0, [sp, #0]
 801014a:	b005      	add	sp, #20
 801014c:	4770      	bx	lr
 801014e:	46c0      	nop			; (mov r8, r8)
 8010150:	fffffe3c 	.word	0xfffffe3c
 8010154:	17ff16b8 	.word	0x17ff16b8

08010158 <SpiChannel_SetupPins$16571>:
 8010158:	b5f0      	push	{r4, r5, r6, r7, lr}
 801015a:	b091      	sub	sp, #68	; 0x44
 801015c:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8010160:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 8010164:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8010166:	4625      	mov	r5, r4
 8010168:	4606      	mov	r6, r0
        /// <param name="csPin"></param>
        /// <param name="useAlternateCsPin">True if the chip select pin is not the default one</param>
        /// <returns></returns>
        public unsafe override void SetupPins( int mosiPin, int misoPin, int sclPin, int csPin, bool useAlternateCsPin, bool activeLowCS )
        {
            fixed (SpiImpl** spi_ptr = &m_spi)
 801016a:	f100 0708 	add.w	r7, r0, #8
            {
                tmp_spi_alloc(spi_ptr);
 801016e:	9010      	str	r0, [sp, #64]	; 0x40
 8010170:	4638      	mov	r0, r7
 8010172:	950f      	str	r5, [sp, #60]	; 0x3c
 8010174:	930e      	str	r3, [sp, #56]	; 0x38
 8010176:	920d      	str	r2, [sp, #52]	; 0x34
 8010178:	960c      	str	r6, [sp, #48]	; 0x30
 801017a:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 801017e:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 8010182:	9409      	str	r4, [sp, #36]	; 0x24
 8010184:	9108      	str	r1, [sp, #32]
 8010186:	f00d f8cb 	bl	801d320 <tmp_spi_alloc>
            }

            // Mbed specific SPI initialization
            tmp_spi_init(m_spi, mosiPin, misoPin, sclPin, useAlternateCsPin ? Board.Instance.NCPin : csPin);
 801018a:	9810      	ldr	r0, [sp, #64]	; 0x40
 801018c:	6880      	ldr	r0, [r0, #8]
 801018e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010190:	f011 0fff 	tst.w	r1, #255	; 0xff
 8010194:	9007      	str	r0, [sp, #28]
 8010196:	d004      	beq.n	80101a2 <SpiChannel_SetupPins$16571+0x4a>
 8010198:	e7ff      	b.n	801019a <SpiChannel_SetupPins$16571+0x42>
 801019a:	f04f 30ff 	mov.w	r0, #4294967295
                    if ( isRead && i >= startReadOffset )
                    {
                        readBuffer[ i     ] = (byte)(result & 0x000000FF);
                        readBuffer[ i + 1 ] = (byte)((result & 0x0000FF00) >> 8);
                    }

 801019e:	9006      	str	r0, [sp, #24]
 80101a0:	e002      	b.n	80101a8 <SpiChannel_SetupPins$16571+0x50>
 80101a2:	9809      	ldr	r0, [sp, #36]	; 0x24
            {
                tmp_spi_alloc(spi_ptr);
            }

            // Mbed specific SPI initialization
            tmp_spi_init(m_spi, mosiPin, misoPin, sclPin, useAlternateCsPin ? Board.Instance.NCPin : csPin);
 80101a4:	9006      	str	r0, [sp, #24]
 80101a6:	e7ff      	b.n	80101a8 <SpiChannel_SetupPins$16571+0x50>
 80101a8:	9806      	ldr	r0, [sp, #24]
 80101aa:	4669      	mov	r1, sp
 80101ac:	6008      	str	r0, [r1, #0]
 80101ae:	9807      	ldr	r0, [sp, #28]
 80101b0:	9908      	ldr	r1, [sp, #32]
 80101b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80101b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80101b6:	f00d f8c1 	bl	801d33c <tmp_spi_init>
            

            // Set up alternate pin for manual toggling
            if (useAlternateCsPin)
 80101ba:	980a      	ldr	r0, [sp, #40]	; 0x28
 80101bc:	f010 0fff 	tst.w	r0, #255	; 0xff
 80101c0:	d023      	beq.n	801020a <SpiChannel_SetupPins$16571+0xb2>
 80101c2:	e7ff      	b.n	80101c4 <SpiChannel_SetupPins$16571+0x6c>
 80101c4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80101c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80101c8:	7708      	strb	r0, [r1, #28]
            {
                // Mbed assumes active low, so we only set up active low/high when using the alternate CS pin
                m_activeLow = activeLowCS;
                
                // Set up the pin. It has already been reserved
                m_altCsPin = new GpioPinMbed();
 80101ca:	4a18      	ldr	r2, [pc, #96]	; (801022c <SpiChannel_SetupPins$16571+0xd4>)
 80101cc:	4b18      	ldr	r3, [pc, #96]	; (8010230 <SpiChannel_SetupPins$16571+0xd8>)
 80101ce:	447b      	add	r3, pc
 80101d0:	18d0      	adds	r0, r2, r3
 80101d2:	4a18      	ldr	r2, [pc, #96]	; (8010234 <SpiChannel_SetupPins$16571+0xdc>)
 80101d4:	18d1      	adds	r1, r2, r3
 80101d6:	9305      	str	r3, [sp, #20]
 80101d8:	f7f0 faf2 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>

        [DllImport("C")]
        private static unsafe extern void tmp_spi_alloc(SpiImpl** obj);

        [DllImport("C")]
        private static unsafe extern void tmp_spi_free(SpiImpl* obj);
 80101dc:	9004      	str	r0, [sp, #16]
 80101de:	f7f6 ffe9 	bl	80071b4 <Tracker_Allocate$5417>
 80101e2:	9804      	ldr	r0, [sp, #16]
 80101e4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80101e6:	60c8      	str	r0, [r1, #12]
                // Mbed assumes active low, so we only set up active low/high when using the alternate CS pin
                m_activeLow = activeLowCS;
                
                // Set up the pin. It has already been reserved
                m_altCsPin = new GpioPinMbed();
                m_altCsPin.InitializePin(csPin);
 80101e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80101ea:	f000 f9b7 	bl	801055c <GpioPinMbed_InitializePin$16518>
                m_altCsPin.SetPinDriveMode(GPIO.GpioDriveMode.Output);
 80101ee:	980c      	ldr	r0, [sp, #48]	; 0x30
 80101f0:	68c0      	ldr	r0, [r0, #12]
 80101f2:	4911      	ldr	r1, [pc, #68]	; (8010238 <SpiChannel_SetupPins$16571+0xe0>)
 80101f4:	9a05      	ldr	r2, [sp, #20]
 80101f6:	5889      	ldr	r1, [r1, r2]
 80101f8:	f000 f9ea 	bl	80105d0 <GpioPinMbed_SetPinDriveMode$16520>

                // Set to high for the lifetime of the SpiChannel (except on transfers)
                m_altCsPin.Write(m_activeLow ? 1 : 0);
 80101fc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80101fe:	68c1      	ldr	r1, [r0, #12]
 8010200:	7f02      	ldrb	r2, [r0, #28]
 8010202:	2a00      	cmp	r2, #0
 8010204:	9103      	str	r1, [sp, #12]
 8010206:	d102      	bne.n	801020e <SpiChannel_SetupPins$16571+0xb6>
 8010208:	e004      	b.n	8010214 <SpiChannel_SetupPins$16571+0xbc>
 801020a:	b011      	add	sp, #68	; 0x44
 801020c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801020e:	2001      	movs	r0, #1
 8010210:	9002      	str	r0, [sp, #8]
 8010212:	e002      	b.n	801021a <SpiChannel_SetupPins$16571+0xc2>
 8010214:	2000      	movs	r0, #0
 8010216:	9002      	str	r0, [sp, #8]
 8010218:	e7ff      	b.n	801021a <SpiChannel_SetupPins$16571+0xc2>
 801021a:	9802      	ldr	r0, [sp, #8]
                    int result = tmp_spi_master_write( m_spi, writeVal );
                    
                    if ( isRead && i >= startReadOffset )
                    {
                        readBuffer[ i ] = (byte)result;
                    }
 801021c:	9903      	ldr	r1, [sp, #12]
 801021e:	688a      	ldr	r2, [r1, #8]
 8010220:	9001      	str	r0, [sp, #4]
 8010222:	4610      	mov	r0, r2
 8010224:	9901      	ldr	r1, [sp, #4]
 8010226:	f00c ffaf 	bl	801d188 <tmp_gpio_write>
                m_altCsPin.InitializePin(csPin);
                m_altCsPin.SetPinDriveMode(GPIO.GpioDriveMode.Output);

                // Set to high for the lifetime of the SpiChannel (except on transfers)
                m_altCsPin.Write(m_activeLow ? 1 : 0);
            }
 801022a:	e7ee      	b.n	801020a <SpiChannel_SetupPins$16571+0xb2>
 801022c:	ffffea38 	.word	0xffffea38
 8010230:	17ff1602 	.word	0x17ff1602
 8010234:	e80148bc 	.word	0xe80148bc
 8010238:	e80254b0 	.word	0xe80254b0

0801023c <SpiChannel_SetupChannel$16569>:
 801023c:	b580      	push	{r7, lr}
 801023e:	b086      	sub	sp, #24
 8010240:	469c      	mov	ip, r3
////        if(fldInfo.IsInitOnly)
////            throw new FieldAccessException( Environment.GetResourceString( "FieldAccess_InitOnly" ) );
////
////        // Make sure that the value is compatible with the type
////        // of field
////        System.Runtime.Remoting.Messaging.Message.CoerceArg( val, fldInfo.FieldType );
 8010242:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010246:	9005      	str	r0, [sp, #20]
 8010248:	f8cd c010 	str.w	ip, [sp, #16]
 801024c:	9203      	str	r2, [sp, #12]
 801024e:	9102      	str	r1, [sp, #8]
 8010250:	d003      	beq.n	801025a <SpiChannel_SetupChannel$16569+0x1e>
 8010252:	e7ff      	b.n	8010254 <SpiChannel_SetupChannel$16569+0x18>
 8010254:	2001      	movs	r0, #1
 8010256:	9001      	str	r0, [sp, #4]
 8010258:	e002      	b.n	8010260 <SpiChannel_SetupChannel$16569+0x24>
 801025a:	2000      	movs	r0, #0
 801025c:	9001      	str	r0, [sp, #4]
 801025e:	e7ff      	b.n	8010260 <SpiChannel_SetupChannel$16569+0x24>
 8010260:	9801      	ldr	r0, [sp, #4]
////
////        // Set the value
////        fldInfo.SetValue( this, val );
 8010262:	9902      	ldr	r1, [sp, #8]
 8010264:	2909      	cmp	r1, #9
 8010266:	9000      	str	r0, [sp, #0]
 8010268:	db04      	blt.n	8010274 <SpiChannel_SetupChannel$16569+0x38>
 801026a:	e7ff      	b.n	801026c <SpiChannel_SetupChannel$16569+0x30>
 801026c:	2010      	movs	r0, #16
 801026e:	9905      	ldr	r1, [sp, #20]
 8010270:	8208      	strh	r0, [r1, #16]
////    }
////
////    // Gets the value specified in the variant on the field
 8010272:	e003      	b.n	801027c <SpiChannel_SetupChannel$16569+0x40>
 8010274:	2008      	movs	r0, #8
 8010276:	9905      	ldr	r1, [sp, #20]
 8010278:	8208      	strh	r0, [r1, #16]
////    //
////    private void FieldGetter( String typeName, String fieldName, ref Object val )
////    {
////        // Extract the field info object
 801027a:	e7ff      	b.n	801027c <SpiChannel_SetupChannel$16569+0x40>
////        FieldInfo fldInfo = GetFieldInfo( typeName, fieldName );
////
 801027c:	9805      	ldr	r0, [sp, #20]
 801027e:	6880      	ldr	r0, [r0, #8]
 8010280:	9905      	ldr	r1, [sp, #20]
 8010282:	8a09      	ldrh	r1, [r1, #16]
 8010284:	9a03      	ldr	r2, [sp, #12]
 8010286:	9b00      	ldr	r3, [sp, #0]
 8010288:	f00d f82e 	bl	801d2e8 <tmp_spi_format>
 801028c:	b006      	add	sp, #24
 801028e:	bd80      	pop	{r7, pc}

08010290 <HardwareProvider_GetSpiChannelTimingInfo$16629>:
 8010290:	b087      	sub	sp, #28
 8010292:	4608      	mov	r0, r1
            supports16 = channelInfo.Supports16;

            return true;
        }

        public override bool GetSpiChannelActiveLow(int id, out bool activeLow)
 8010294:	2900      	cmp	r1, #0
 8010296:	9006      	str	r0, [sp, #24]
 8010298:	9305      	str	r3, [sp, #20]
 801029a:	9204      	str	r2, [sp, #16]
 801029c:	d003      	beq.n	80102a6 <HardwareProvider_GetSpiChannelTimingInfo$16629+0x16>
 801029e:	e7ff      	b.n	80102a0 <HardwareProvider_GetSpiChannelTimingInfo$16629+0x10>
 80102a0:	2000      	movs	r0, #0
        {
            ChipsetAbstration.Board.SpiChannelInfo channelInfo = Board.Instance.GetSpiChannelInfo(id);
            if (channelInfo == null)
            {
                activeLow = true;
 80102a2:	9003      	str	r0, [sp, #12]
 80102a4:	e006      	b.n	80102b4 <HardwareProvider_GetSpiChannelTimingInfo$16629+0x24>
        }

        public override bool GetSpiChannelActiveLow(int id, out bool activeLow)
        {
            ChipsetAbstration.Board.SpiChannelInfo channelInfo = Board.Instance.GetSpiChannelInfo(id);
            if (channelInfo == null)
 80102a6:	4812      	ldr	r0, [pc, #72]	; (80102f0 <HardwareProvider_GetSpiChannelTimingInfo$16629+0x60>)
 80102a8:	4912      	ldr	r1, [pc, #72]	; (80102f4 <HardwareProvider_GetSpiChannelTimingInfo$16629+0x64>)
 80102aa:	4479      	add	r1, pc
 80102ac:	4408      	add	r0, r1
 80102ae:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80102b0:	9003      	str	r0, [sp, #12]
 80102b2:	e7ff      	b.n	80102b4 <HardwareProvider_GetSpiChannelTimingInfo$16629+0x24>
                setupTime = 0;
                holdTime = 0;
                return false;
            }

            setupTime = channelInfo.SetupTime;
 80102b4:	9803      	ldr	r0, [sp, #12]
 80102b6:	9903      	ldr	r1, [sp, #12]
        }

        public override bool GetSpiChannelTimingInfo(int id, out int setupTime, out int holdTime)
        {
            ChipsetAbstration.Board.SpiChannelInfo channelInfo = Board.Instance.GetSpiChannelInfo(id);
            if (channelInfo == null)
 80102b8:	2800      	cmp	r0, #0
 80102ba:	9002      	str	r0, [sp, #8]
 80102bc:	9101      	str	r1, [sp, #4]
 80102be:	d107      	bne.n	80102d0 <HardwareProvider_GetSpiChannelTimingInfo$16629+0x40>
 80102c0:	e7ff      	b.n	80102c2 <HardwareProvider_GetSpiChannelTimingInfo$16629+0x32>
 80102c2:	2000      	movs	r0, #0
 80102c4:	9904      	ldr	r1, [sp, #16]
 80102c6:	6008      	str	r0, [r1, #0]
 80102c8:	9a05      	ldr	r2, [sp, #20]
 80102ca:	6010      	str	r0, [r2, #0]
            {
                // Fail. Returning 0 because time should not be negative
                setupTime = 0;
                holdTime = 0;
                return false;
 80102cc:	9000      	str	r0, [sp, #0]
 80102ce:	e00c      	b.n	80102ea <HardwareProvider_GetSpiChannelTimingInfo$16629+0x5a>
 80102d0:	9802      	ldr	r0, [sp, #8]
 80102d2:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80102d4:	9a04      	ldr	r2, [sp, #16]
 80102d6:	6011      	str	r1, [r2, #0]
 80102d8:	9901      	ldr	r1, [sp, #4]
 80102da:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80102dc:	f8dd c014 	ldr.w	ip, [sp, #20]
 80102e0:	f8cc 3000 	str.w	r3, [ip]
 80102e4:	2301      	movs	r3, #1
            }

            setupTime = channelInfo.SetupTime;
            holdTime = channelInfo.HoldTime;
            return true;
 80102e6:	9300      	str	r3, [sp, #0]
 80102e8:	e7ff      	b.n	80102ea <HardwareProvider_GetSpiChannelTimingInfo$16629+0x5a>
 80102ea:	9800      	ldr	r0, [sp, #0]
 80102ec:	b007      	add	sp, #28
 80102ee:	4770      	bx	lr
 80102f0:	fffffe3c 	.word	0xfffffe3c
 80102f4:	17ff1526 	.word	0x17ff1526

080102f8 <SpiChannel_SetupTiming$16570>:
 80102f8:	b510      	push	{r4, lr}
 80102fa:	b084      	sub	sp, #16
 80102fc:	469c      	mov	ip, r3
 80102fe:	4696      	mov	lr, r2
 8010300:	4604      	mov	r4, r0
 8010302:	6142      	str	r2, [r0, #20]
 8010304:	6183      	str	r3, [r0, #24]
 8010306:	6940      	ldr	r0, [r0, #20]
        public unsafe override void SetupTiming(int frequencyInHz, int setupTime, int holdTime)
        {
            m_setupTimeInCycles = setupTime;
            m_holdTimeInCycles  = holdTime;

            if (m_setupTimeInCycles < 0)
 8010308:	f1b0 3fff 	cmp.w	r0, #4294967295
 801030c:	9103      	str	r1, [sp, #12]
 801030e:	9402      	str	r4, [sp, #8]
 8010310:	f8cd e004 	str.w	lr, [sp, #4]
 8010314:	f8cd c000 	str.w	ip, [sp]
 8010318:	dc04      	bgt.n	8010324 <SpiChannel_SetupTiming$16570+0x2c>
 801031a:	e7ff      	b.n	801031c <SpiChannel_SetupTiming$16570+0x24>
 801031c:	2064      	movs	r0, #100	; 0x64
 801031e:	9902      	ldr	r1, [sp, #8]
 8010320:	6148      	str	r0, [r1, #20]
            {
                m_setupTimeInCycles = 100;
            }
 8010322:	e7ff      	b.n	8010324 <SpiChannel_SetupTiming$16570+0x2c>
 8010324:	9802      	ldr	r0, [sp, #8]
 8010326:	6981      	ldr	r1, [r0, #24]
            
            if (m_holdTimeInCycles < 0)
 8010328:	f1b1 3fff 	cmp.w	r1, #4294967295
 801032c:	dc04      	bgt.n	8010338 <SpiChannel_SetupTiming$16570+0x40>
 801032e:	e7ff      	b.n	8010330 <SpiChannel_SetupTiming$16570+0x38>
 8010330:	2064      	movs	r0, #100	; 0x64
 8010332:	9902      	ldr	r1, [sp, #8]
 8010334:	6188      	str	r0, [r1, #24]
            {
                m_holdTimeInCycles = 100;
            }
 8010336:	e7ff      	b.n	8010338 <SpiChannel_SetupTiming$16570+0x40>
            
            tmp_spi_frequency (m_spi, frequencyInHz);
 8010338:	9802      	ldr	r0, [sp, #8]
 801033a:	6880      	ldr	r0, [r0, #8]
 801033c:	9903      	ldr	r1, [sp, #12]
 801033e:	f00c ffe3 	bl	801d308 <tmp_spi_frequency>
 8010342:	b004      	add	sp, #16
 8010344:	bd10      	pop	{r4, pc}
 8010346:	46c0      	nop			; (mov r8, r8)

08010348 <GpioController_OpenPin$16232>:
 8010348:	b580      	push	{r7, lr}
 801034a:	b086      	sub	sp, #24
 801034c:	4601      	mov	r1, r0
 801034e:	2200      	movs	r2, #0
 8010350:	9204      	str	r2, [sp, #16]
 8010352:	2201      	movs	r2, #1
 8010354:	9205      	str	r2, [sp, #20]
 8010356:	aa04      	add	r2, sp, #16
 8010358:	ab05      	add	r3, sp, #20
        public GpioPin OpenPin(int pinNumber, GpioSharingMode sharingMode)
        {
            GpioPin pin = null;
            GpioOpenStatus status = GpioOpenStatus.PinUnavailable;

            if(!TryOpenPin(pinNumber, sharingMode, out pin, out status))
 801035a:	9103      	str	r1, [sp, #12]
 801035c:	4611      	mov	r1, r2
 801035e:	461a      	mov	r2, r3
 8010360:	f000 f820 	bl	80103a4 <GpioController_TryOpenPin$16233>
 8010364:	f010 0fff 	tst.w	r0, #255	; 0xff
 8010368:	d112      	bne.n	8010390 <GpioController_OpenPin$16232+0x48>
 801036a:	e7ff      	b.n	801036c <GpioController_OpenPin$16232+0x24>
            {
                throw new InvalidOperationException();
 801036c:	e7ff      	b.n	801036e <GpioController_OpenPin$16232+0x26>
 801036e:	480a      	ldr	r0, [pc, #40]	; (8010398 <GpioController_OpenPin$16232+0x50>)
 8010370:	490a      	ldr	r1, [pc, #40]	; (801039c <GpioController_OpenPin$16232+0x54>)
 8010372:	4479      	add	r1, pc
 8010374:	4408      	add	r0, r1
 8010376:	4a0a      	ldr	r2, [pc, #40]	; (80103a0 <GpioController_OpenPin$16232+0x58>)
 8010378:	4411      	add	r1, r2
 801037a:	9002      	str	r0, [sp, #8]
 801037c:	f7f0 fa20 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8010380:	9001      	str	r0, [sp, #4]
 8010382:	f7fa ff8b 	bl	800b29c <InvalidOperationException_.ctor$7124>
 8010386:	9802      	ldr	r0, [sp, #8]
 8010388:	9901      	ldr	r1, [sp, #4]
 801038a:	f7f0 fa6f 	bl	800086c <TypeSystemManager_Throw$4954>
 801038e:	e7ee      	b.n	801036e <GpioController_OpenPin$16232+0x26>
            }
            
            return pin;
        }
 8010390:	9804      	ldr	r0, [sp, #16]
 8010392:	b006      	add	sp, #24
 8010394:	bd80      	pop	{r7, pc}
 8010396:	46c0      	nop			; (mov r8, r8)
 8010398:	ffffea38 	.word	0xffffea38
 801039c:	17ff145e 	.word	0x17ff145e
 80103a0:	e801313c 	.word	0xe801313c

080103a4 <GpioController_TryOpenPin$16233>:
 80103a4:	b5b0      	push	{r4, r5, r7, lr}
 80103a6:	b088      	sub	sp, #32
 80103a8:	460b      	mov	r3, r1
 80103aa:	4684      	mov	ip, r0
        /// <returns>True if the pin could be opened; otherwise false.</returns>
        public bool TryOpenPin(int pinNumber, GpioSharingMode sharingMode, out GpioPin pin, out GpioOpenStatus status)
        {
            // Following a builder-like pattern to avoid try-catch on new operator, and having 
            // to call ReleasePin in the catch case
            pin = new GpioPin(pinNumber);
 80103ac:	f8df e078 	ldr.w	lr, [pc, #120]	; 8010428 <GpioController_TryOpenPin$16233+0x84>
 80103b0:	4c1e      	ldr	r4, [pc, #120]	; (801042c <GpioController_TryOpenPin$16233+0x88>)
 80103b2:	447c      	add	r4, pc
 80103b4:	44a6      	add	lr, r4
 80103b6:	4d1e      	ldr	r5, [pc, #120]	; (8010430 <GpioController_TryOpenPin$16233+0x8c>)
 80103b8:	442c      	add	r4, r5
 80103ba:	9007      	str	r0, [sp, #28]
 80103bc:	4670      	mov	r0, lr
 80103be:	9106      	str	r1, [sp, #24]
 80103c0:	4621      	mov	r1, r4
 80103c2:	f8cd c014 	str.w	ip, [sp, #20]
 80103c6:	9304      	str	r3, [sp, #16]
 80103c8:	9203      	str	r2, [sp, #12]
 80103ca:	f7f0 f9f9 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 80103ce:	9002      	str	r0, [sp, #8]
 80103d0:	f7f6 fef0 	bl	80071b4 <Tracker_Allocate$5417>
        /// <returns>True if the pin could be opened; otherwise false.</returns>
        public bool TryOpenPin(int pinNumber, GpioSharingMode sharingMode, out GpioPin pin, out GpioOpenStatus status)
        {
            // Following a builder-like pattern to avoid try-catch on new operator, and having 
            // to call ReleasePin in the catch case
            pin = new GpioPin(pinNumber);
 80103d4:	9802      	ldr	r0, [sp, #8]
 80103d6:	9907      	ldr	r1, [sp, #28]
 80103d8:	f000 f852 	bl	8010480 <GpioPin_.ctor$16260>
 80103dc:	9802      	ldr	r0, [sp, #8]
 80103de:	9906      	ldr	r1, [sp, #24]
 80103e0:	6008      	str	r0, [r1, #0]

            // Call to the kernel and get the object that implements the pin functions
            GpioPinProvider provider = AcquireGpioPin(pinNumber);
 80103e2:	9807      	ldr	r0, [sp, #28]
 80103e4:	f000 f85e 	bl	80104a4 <GpioController_AcquireGpioPin$4180>
 80103e8:	4601      	mov	r1, r0

            if(provider == null)
 80103ea:	2800      	cmp	r0, #0
 80103ec:	9101      	str	r1, [sp, #4]
 80103ee:	d10c      	bne.n	801040a <GpioController_TryOpenPin$16233+0x66>
 80103f0:	e7ff      	b.n	80103f2 <GpioController_TryOpenPin$16233+0x4e>
            {
                pin.Dispose();
 80103f2:	9804      	ldr	r0, [sp, #16]
 80103f4:	6800      	ldr	r0, [r0, #0]
 80103f6:	f000 f81d 	bl	8010434 <GpioPin_Dispose$16274>
 80103fa:	2000      	movs	r0, #0
 80103fc:	9904      	ldr	r1, [sp, #16]
 80103fe:	6008      	str	r0, [r1, #0]
 8010400:	2201      	movs	r2, #1
 8010402:	9b03      	ldr	r3, [sp, #12]
 8010404:	601a      	str	r2, [r3, #0]
                pin = null;
                status = GpioOpenStatus.PinUnavailable;
                return false;
 8010406:	9000      	str	r0, [sp, #0]
 8010408:	e00a      	b.n	8010420 <GpioController_TryOpenPin$16233+0x7c>
            }

            // We were able to get a pin provider. Set it here
            pin.PinProvider = provider;
 801040a:	9804      	ldr	r0, [sp, #16]
 801040c:	6800      	ldr	r0, [r0, #0]
 801040e:	9901      	ldr	r1, [sp, #4]
 8010410:	f000 f886 	bl	8010520 <GpioPin_set_PinProvider$16261>
 8010414:	2000      	movs	r0, #0
 8010416:	9903      	ldr	r1, [sp, #12]
 8010418:	6008      	str	r0, [r1, #0]
 801041a:	2001      	movs	r0, #1
            status = GpioOpenStatus.PinOpened;

            return true;
 801041c:	9000      	str	r0, [sp, #0]
 801041e:	e7ff      	b.n	8010420 <GpioController_TryOpenPin$16233+0x7c>
 8010420:	9800      	ldr	r0, [sp, #0]
 8010422:	b008      	add	sp, #32
 8010424:	bdb0      	pop	{r4, r5, r7, pc}
 8010426:	46c0      	nop			; (mov r8, r8)
 8010428:	ffffea38 	.word	0xffffea38
 801042c:	17ff141e 	.word	0x17ff141e
 8010430:	e801439c 	.word	0xe801439c

08010434 <GpioPin_Dispose$16274>:
 8010434:	b580      	push	{r7, lr}
 8010436:	b084      	sub	sp, #16
 8010438:	4601      	mov	r1, r0
        /// <summary>
        /// Closes the general-purpose I/O (GPIO) pin and releases the resources associated with it.
        /// </summary>
        public void Dispose()
        {
            if (!_disposed)
 801043a:	7c00      	ldrb	r0, [r0, #16]
 801043c:	2800      	cmp	r0, #0
 801043e:	9103      	str	r1, [sp, #12]
 8010440:	d116      	bne.n	8010470 <GpioPin_Dispose$16274+0x3c>
 8010442:	e7ff      	b.n	8010444 <GpioPin_Dispose$16274+0x10>
 8010444:	480b      	ldr	r0, [pc, #44]	; (8010474 <GpioPin_Dispose$16274+0x40>)
 8010446:	490c      	ldr	r1, [pc, #48]	; (8010478 <GpioPin_Dispose$16274+0x44>)
 8010448:	4479      	add	r1, pc
            {
                Dispose(true);
 801044a:	5c40      	ldrb	r0, [r0, r1]
 801044c:	9a03      	ldr	r2, [sp, #12]
 801044e:	9002      	str	r0, [sp, #8]
 8010450:	4610      	mov	r0, r2
 8010452:	9b02      	ldr	r3, [sp, #8]
 8010454:	9101      	str	r1, [sp, #4]
 8010456:	4619      	mov	r1, r3
 8010458:	f000 f92a 	bl	80106b0 <GpioPin_Dispose$16276>
 801045c:	4807      	ldr	r0, [pc, #28]	; (801047c <GpioPin_Dispose$16274+0x48>)
        {
            if (_disposed)
            {
                throw new ObjectDisposedException(this.GetType().FullName);
            }

 801045e:	9901      	ldr	r1, [sp, #4]
 8010460:	5c41      	ldrb	r1, [r0, r1]
 8010462:	9803      	ldr	r0, [sp, #12]
 8010464:	f7f6 feea 	bl	800723c <Tracker_SetFinalizationFlag$5418>
 8010468:	2001      	movs	r0, #1
 801046a:	9903      	ldr	r1, [sp, #12]
 801046c:	7408      	strb	r0, [r1, #16]
            if (!_disposed)
            {
                Dispose(true);
                GC.SuppressFinalize(this);
                _disposed = true;
            }
 801046e:	e7ff      	b.n	8010470 <GpioPin_Dispose$16274+0x3c>
 8010470:	b004      	add	sp, #16
 8010472:	bd80      	pop	{r7, pc}
 8010474:	e802547c 	.word	0xe802547c
 8010478:	17ff1388 	.word	0x17ff1388
 801047c:	e802547d 	.word	0xe802547d

08010480 <GpioPin_.ctor$16260>:
 8010480:	b082      	sub	sp, #8
 8010482:	460a      	mov	r2, r1
 8010484:	4603      	mov	r3, r0
 8010486:	f04f 0c00 	mov.w	ip, #0
 801048a:	f880 c010 	strb.w	ip, [r0, #16]
 801048e:	f8c0 c014 	str.w	ip, [r0, #20]
 8010492:	f8c0 c018 	str.w	ip, [r0, #24]
 8010496:	f8c0 c01c 	str.w	ip, [r0, #28]
 801049a:	60c1      	str	r1, [r0, #12]
 801049c:	9301      	str	r3, [sp, #4]
 801049e:	9200      	str	r2, [sp, #0]
 80104a0:	b002      	add	sp, #8
 80104a2:	4770      	bx	lr

080104a4 <GpioController_AcquireGpioPin$4180>:
 80104a4:	b510      	push	{r4, lr}
 80104a6:	b086      	sub	sp, #24
 80104a8:	4601      	mov	r1, r0
 80104aa:	4602      	mov	r2, r0
 80104ac:	4b16      	ldr	r3, [pc, #88]	; (8010508 <GpioController_AcquireGpioPin$4180+0x64>)
 80104ae:	f8df c05c 	ldr.w	ip, [pc, #92]	; 801050c <GpioController_AcquireGpioPin$4180+0x68>
 80104b2:	44fc      	add	ip, pc
 80104b4:	f853 300c 	ldr.w	r3, [r3, ip]
    public sealed class GpioController
    {
        private static readonly GpioController _instance = new GpioController();

        internal GpioController()
        {
 80104b8:	f8df e054 	ldr.w	lr, [pc, #84]	; 8010510 <GpioController_AcquireGpioPin$4180+0x6c>
 80104bc:	44e6      	add	lr, ip
 80104be:	4c15      	ldr	r4, [pc, #84]	; (8010514 <GpioController_AcquireGpioPin$4180+0x70>)
 80104c0:	44a4      	add	ip, r4
 80104c2:	9005      	str	r0, [sp, #20]
 80104c4:	4670      	mov	r0, lr
 80104c6:	9104      	str	r1, [sp, #16]
 80104c8:	4661      	mov	r1, ip
 80104ca:	9203      	str	r2, [sp, #12]
 80104cc:	461a      	mov	r2, r3
 80104ce:	f7f1 fe67 	bl	80021a0 <DefaultTypeSystemManager_AllocateArray$4962>
 80104d2:	9905      	ldr	r1, [sp, #20]
 80104d4:	60c1      	str	r1, [r0, #12]
 80104d6:	f7f6 fc8f 	bl	8006df8 <HardwareProvider_TryReservePins$4269>
 80104da:	f010 0fff 	tst.w	r0, #255	; 0xff
 80104de:	d103      	bne.n	80104e8 <GpioController_AcquireGpioPin$4180+0x44>
 80104e0:	e7ff      	b.n	80104e2 <GpioController_AcquireGpioPin$4180+0x3e>
 80104e2:	2000      	movs	r0, #0
        }

 80104e4:	9002      	str	r0, [sp, #8]
 80104e6:	e00c      	b.n	8010502 <GpioController_AcquireGpioPin$4180+0x5e>
        /// Gets the number of pins on the general-purpose I/O (GPIO) controller.
        /// </summary>
        /// <value>The number of pins on the GPIO controller. Some pins may not be available in user mode. For
        ///     information about how the pin numbers correspond to physical pins, see the documentation for your
        ///     circuit board.</value>
        public int PinCount => GetBoardPinCount();
 80104e8:	480b      	ldr	r0, [pc, #44]	; (8010518 <GpioController_AcquireGpioPin$4180+0x74>)
 80104ea:	490c      	ldr	r1, [pc, #48]	; (801051c <GpioController_AcquireGpioPin$4180+0x78>)
 80104ec:	4479      	add	r1, pc
 80104ee:	4408      	add	r0, r1
 80104f0:	f000 f81e 	bl	8010530 <HardwareProvider_CreateGpioPin$16621>

        /// <summary>
 80104f4:	9001      	str	r0, [sp, #4]
 80104f6:	9903      	ldr	r1, [sp, #12]
 80104f8:	f000 f830 	bl	801055c <GpioPinMbed_InitializePin$16518>
        public static GpioController GetDefault()
        {
            return _instance;
        }

        /// <summary>
 80104fc:	9801      	ldr	r0, [sp, #4]
 80104fe:	9002      	str	r0, [sp, #8]
 8010500:	e7ff      	b.n	8010502 <GpioController_AcquireGpioPin$4180+0x5e>
        /// Opens a connection to the specified general-purpose I/O (GPIO) pin in exclusive mode.
 8010502:	9802      	ldr	r0, [sp, #8]
 8010504:	b006      	add	sp, #24
 8010506:	bd10      	pop	{r4, pc}
 8010508:	e8025474 	.word	0xe8025474
 801050c:	17ff131e 	.word	0x17ff131e
 8010510:	ffffea38 	.word	0xffffea38
 8010514:	e80102ec 	.word	0xe80102ec
 8010518:	ffffe9fc 	.word	0xffffe9fc
 801051c:	17ff12e4 	.word	0x17ff12e4

08010520 <GpioPin_set_PinProvider$16261>:
 8010520:	b082      	sub	sp, #8
 8010522:	460a      	mov	r2, r1
 8010524:	4603      	mov	r3, r0
 8010526:	6081      	str	r1, [r0, #8]
 8010528:	9301      	str	r3, [sp, #4]
 801052a:	9200      	str	r2, [sp, #0]
 801052c:	b002      	add	sp, #8
 801052e:	4770      	bx	lr

08010530 <HardwareProvider_CreateGpioPin$16621>:
            return Board.Instance.PinToIndex(pin);
        }

        public override GPIO_FRAMEWORK.GpioPinProvider CreateGpioPin()
        {
            return new GpioPinMbed();
 8010530:	b580      	push	{r7, lr}
 8010532:	b082      	sub	sp, #8
 8010534:	4806      	ldr	r0, [pc, #24]	; (8010550 <HardwareProvider_CreateGpioPin$16621+0x20>)
 8010536:	4907      	ldr	r1, [pc, #28]	; (8010554 <HardwareProvider_CreateGpioPin$16621+0x24>)
 8010538:	4479      	add	r1, pc
 801053a:	4408      	add	r0, r1
 801053c:	4a06      	ldr	r2, [pc, #24]	; (8010558 <HardwareProvider_CreateGpioPin$16621+0x28>)
 801053e:	4411      	add	r1, r2
 8010540:	f7f0 f93e 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8010544:	9001      	str	r0, [sp, #4]
 8010546:	f7f6 fe35 	bl	80071b4 <Tracker_Allocate$5417>
 801054a:	9801      	ldr	r0, [sp, #4]
 801054c:	b002      	add	sp, #8
 801054e:	bd80      	pop	{r7, pc}
 8010550:	ffffea38 	.word	0xffffea38
 8010554:	17ff1298 	.word	0x17ff1298
 8010558:	e80148bc 	.word	0xe80148bc

0801055c <GpioPinMbed_InitializePin$16518>:
 801055c:	b580      	push	{r7, lr}
 801055e:	b086      	sub	sp, #24
 8010560:	460a      	mov	r2, r1
 8010562:	4603      	mov	r3, r0

        public override void InitializePin(int pinNumber)
        {
            unsafe
            {
                fixed (GPIOimpl** gpio_ptr = &_gpio)
 8010564:	f100 0c08 	add.w	ip, r0, #8
                {
                    tmp_gpio_alloc(gpio_ptr);
 8010568:	9005      	str	r0, [sp, #20]
 801056a:	4660      	mov	r0, ip
 801056c:	9104      	str	r1, [sp, #16]
 801056e:	9303      	str	r3, [sp, #12]
 8010570:	9202      	str	r2, [sp, #8]
 8010572:	f00c fe15 	bl	801d1a0 <tmp_gpio_alloc>
                }

                tmp_gpio_init(_gpio, pinNumber);
 8010576:	9905      	ldr	r1, [sp, #20]
 8010578:	688a      	ldr	r2, [r1, #8]
 801057a:	9001      	str	r0, [sp, #4]
 801057c:	4610      	mov	r0, r2
 801057e:	9904      	ldr	r1, [sp, #16]
 8010580:	f00c fe1c 	bl	801d1bc <tmp_gpio_init>
 8010584:	9000      	str	r0, [sp, #0]
 8010586:	b006      	add	sp, #24
 8010588:	bd80      	pop	{r7, pc}
 801058a:	46c0      	nop			; (mov r8, r8)

0801058c <GpioController_ReleaseGpioPin$4182>:
 801058c:	b580      	push	{r7, lr}
 801058e:	b082      	sub	sp, #8
 8010590:	4601      	mov	r1, r0
 8010592:	4a0b      	ldr	r2, [pc, #44]	; (80105c0 <GpioController_ReleaseGpioPin$4182+0x34>)
 8010594:	4b0b      	ldr	r3, [pc, #44]	; (80105c4 <GpioController_ReleaseGpioPin$4182+0x38>)
 8010596:	447b      	add	r3, pc
 8010598:	58d2      	ldr	r2, [r2, r3]
        }

        public static void ReleaseGpioPin(int pinNumber)
        {
            HardwareProvider provider = HardwareProvider.Instance;
            provider.ReleasePins(pinNumber);
 801059a:	f8df c02c 	ldr.w	ip, [pc, #44]	; 80105c8 <GpioController_ReleaseGpioPin$4182+0x3c>
 801059e:	449c      	add	ip, r3
 80105a0:	f8df e028 	ldr.w	lr, [pc, #40]	; 80105cc <GpioController_ReleaseGpioPin$4182+0x40>
 80105a4:	4473      	add	r3, lr
 80105a6:	9001      	str	r0, [sp, #4]
 80105a8:	4660      	mov	r0, ip
 80105aa:	9100      	str	r1, [sp, #0]
 80105ac:	4619      	mov	r1, r3
 80105ae:	f7f1 fdf7 	bl	80021a0 <DefaultTypeSystemManager_AllocateArray$4962>
 80105b2:	9901      	ldr	r1, [sp, #4]
 80105b4:	60c1      	str	r1, [r0, #12]
 80105b6:	f7f6 fd55 	bl	8007064 <HardwareProvider_ReleasePins$4270>
 80105ba:	b002      	add	sp, #8
 80105bc:	bd80      	pop	{r7, pc}
 80105be:	46c0      	nop			; (mov r8, r8)
 80105c0:	e8025478 	.word	0xe8025478
 80105c4:	17ff123a 	.word	0x17ff123a
 80105c8:	ffffea38 	.word	0xffffea38
 80105cc:	e80102ec 	.word	0xe80102ec

080105d0 <GpioPinMbed_SetPinDriveMode$16520>:
 80105d0:	b580      	push	{r7, lr}
 80105d2:	b088      	sub	sp, #32
 80105d4:	460a      	mov	r2, r1
        
        public override void SetPinDriveMode(GpioDriveMode driveMode)
        {
            unsafe
            {
                switch (driveMode)
 80105d6:	460b      	mov	r3, r1
 80105d8:	2903      	cmp	r1, #3
 80105da:	9307      	str	r3, [sp, #28]
 80105dc:	9206      	str	r2, [sp, #24]
 80105de:	9005      	str	r0, [sp, #20]
 80105e0:	d804      	bhi.n	80105ec <GpioPinMbed_SetPinDriveMode$16520+0x1c>
 80105e2:	9907      	ldr	r1, [sp, #28]
 80105e4:	e8df f001 	tbb	[pc, r1]
 80105e8:	2e221103 	.word	0x2e221103
                    case GpioDriveMode.InputPullDown:
                        tmp_gpio_mode(_gpio, PinMode.PullDown);
                        tmp_gpio_dir(_gpio, PinDirection.PIN_INPUT);
                        break;
                    default:
                        throw new NotSupportedException();
 80105ec:	e038      	b.n	8010660 <GpioPinMbed_SetPinDriveMode$16520+0x90>
            unsafe
            {
                switch (driveMode)
                {
                    case GpioDriveMode.Input:
                        tmp_gpio_mode(_gpio, PinMode.PullDefault);
 80105ee:	9805      	ldr	r0, [sp, #20]
 80105f0:	6880      	ldr	r0, [r0, #8]
 80105f2:	492a      	ldr	r1, [pc, #168]	; (801069c <GpioPinMbed_SetPinDriveMode$16520+0xcc>)
 80105f4:	4a2a      	ldr	r2, [pc, #168]	; (80106a0 <GpioPinMbed_SetPinDriveMode$16520+0xd0>)
 80105f6:	447a      	add	r2, pc
 80105f8:	5889      	ldr	r1, [r1, r2]
 80105fa:	f00c fe05 	bl	801d208 <tmp_gpio_mode>
                        tmp_gpio_dir(_gpio, PinDirection.PIN_INPUT);
 80105fe:	9805      	ldr	r0, [sp, #20]
 8010600:	6880      	ldr	r0, [r0, #8]
 8010602:	2100      	movs	r1, #0
 8010604:	f00c fdf2 	bl	801d1ec <tmp_gpio_dir>
                        break;
 8010608:	e03b      	b.n	8010682 <GpioPinMbed_SetPinDriveMode$16520+0xb2>

                    case GpioDriveMode.Output:
                        tmp_gpio_mode(_gpio, PinMode.PullDefault);
 801060a:	9805      	ldr	r0, [sp, #20]
 801060c:	6880      	ldr	r0, [r0, #8]
 801060e:	4920      	ldr	r1, [pc, #128]	; (8010690 <GpioPinMbed_SetPinDriveMode$16520+0xc0>)
 8010610:	4a20      	ldr	r2, [pc, #128]	; (8010694 <GpioPinMbed_SetPinDriveMode$16520+0xc4>)
 8010612:	447a      	add	r2, pc
 8010614:	5889      	ldr	r1, [r1, r2]
 8010616:	9204      	str	r2, [sp, #16]
 8010618:	f00c fdf6 	bl	801d208 <tmp_gpio_mode>
                        tmp_gpio_dir(_gpio, PinDirection.PIN_OUTPUT);
 801061c:	9805      	ldr	r0, [sp, #20]
 801061e:	6880      	ldr	r0, [r0, #8]
 8010620:	491d      	ldr	r1, [pc, #116]	; (8010698 <GpioPinMbed_SetPinDriveMode$16520+0xc8>)
 8010622:	9a04      	ldr	r2, [sp, #16]
 8010624:	5889      	ldr	r1, [r1, r2]
 8010626:	f00c fde1 	bl	801d1ec <tmp_gpio_dir>
                        break;
 801062a:	e02a      	b.n	8010682 <GpioPinMbed_SetPinDriveMode$16520+0xb2>

                    case GpioDriveMode.InputPullUp:
                        tmp_gpio_mode(_gpio, PinMode.PullUp);
 801062c:	9805      	ldr	r0, [sp, #20]
 801062e:	6880      	ldr	r0, [r0, #8]
 8010630:	2100      	movs	r1, #0
 8010632:	9103      	str	r1, [sp, #12]
 8010634:	f00c fde8 	bl	801d208 <tmp_gpio_mode>
                        tmp_gpio_dir(_gpio, PinDirection.PIN_INPUT);
 8010638:	9805      	ldr	r0, [sp, #20]
 801063a:	6880      	ldr	r0, [r0, #8]
 801063c:	9903      	ldr	r1, [sp, #12]
 801063e:	f00c fdd5 	bl	801d1ec <tmp_gpio_dir>
                        break;
 8010642:	e01e      	b.n	8010682 <GpioPinMbed_SetPinDriveMode$16520+0xb2>

                    case GpioDriveMode.InputPullDown:
                        tmp_gpio_mode(_gpio, PinMode.PullDown);
 8010644:	9805      	ldr	r0, [sp, #20]
 8010646:	6880      	ldr	r0, [r0, #8]
 8010648:	490f      	ldr	r1, [pc, #60]	; (8010688 <GpioPinMbed_SetPinDriveMode$16520+0xb8>)
 801064a:	4a10      	ldr	r2, [pc, #64]	; (801068c <GpioPinMbed_SetPinDriveMode$16520+0xbc>)
 801064c:	447a      	add	r2, pc
 801064e:	5889      	ldr	r1, [r1, r2]
 8010650:	f00c fdda 	bl	801d208 <tmp_gpio_mode>
                        tmp_gpio_dir(_gpio, PinDirection.PIN_INPUT);
 8010654:	9805      	ldr	r0, [sp, #20]
 8010656:	6880      	ldr	r0, [r0, #8]
 8010658:	2100      	movs	r1, #0
 801065a:	f00c fdc7 	bl	801d1ec <tmp_gpio_dir>
                        break;
 801065e:	e010      	b.n	8010682 <GpioPinMbed_SetPinDriveMode$16520+0xb2>
                    default:
                        throw new NotSupportedException();
 8010660:	4810      	ldr	r0, [pc, #64]	; (80106a4 <GpioPinMbed_SetPinDriveMode$16520+0xd4>)
 8010662:	4911      	ldr	r1, [pc, #68]	; (80106a8 <GpioPinMbed_SetPinDriveMode$16520+0xd8>)
 8010664:	4479      	add	r1, pc
 8010666:	4408      	add	r0, r1
 8010668:	4a10      	ldr	r2, [pc, #64]	; (80106ac <GpioPinMbed_SetPinDriveMode$16520+0xdc>)
 801066a:	4411      	add	r1, r2
 801066c:	9002      	str	r0, [sp, #8]
 801066e:	f7f0 f8a7 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8010672:	9001      	str	r0, [sp, #4]
 8010674:	f7f0 f98c 	bl	8000990 <NotSupportedException_.ctor$7194>
 8010678:	9802      	ldr	r0, [sp, #8]
 801067a:	9901      	ldr	r1, [sp, #4]
 801067c:	f7f0 f8f6 	bl	800086c <TypeSystemManager_Throw$4954>
 8010680:	e7ee      	b.n	8010660 <GpioPinMbed_SetPinDriveMode$16520+0x90>
 8010682:	b008      	add	sp, #32
 8010684:	bd80      	pop	{r7, pc}
 8010686:	46c0      	nop			; (mov r8, r8)
 8010688:	e80254ac 	.word	0xe80254ac
 801068c:	17ff1184 	.word	0x17ff1184
 8010690:	e80254a4 	.word	0xe80254a4
 8010694:	17ff11be 	.word	0x17ff11be
 8010698:	e80254a8 	.word	0xe80254a8
 801069c:	e80254a0 	.word	0xe80254a0
 80106a0:	17ff11da 	.word	0x17ff11da
 80106a4:	ffffea38 	.word	0xffffea38
 80106a8:	17ff116c 	.word	0x17ff116c
 80106ac:	e801052c 	.word	0xe801052c

080106b0 <GpioPin_Dispose$16276>:
 80106b0:	b580      	push	{r7, lr}
 80106b2:	b082      	sub	sp, #8
 80106b4:	460a      	mov	r2, r1
        /// Releases internal resources held by the GPIO pin.
        /// </summary>
        /// <param name="disposing">True if called from Dispose, false if called from the finalizer.</param>
        private void Dispose(bool disposing)
        {
            if (disposing)
 80106b6:	f011 0fff 	tst.w	r1, #255	; 0xff
 80106ba:	9001      	str	r0, [sp, #4]
 80106bc:	9200      	str	r2, [sp, #0]
 80106be:	d006      	beq.n	80106ce <GpioPin_Dispose$16276+0x1e>
 80106c0:	e7ff      	b.n	80106c2 <GpioPin_Dispose$16276+0x12>
 80106c2:	9801      	ldr	r0, [sp, #4]
 80106c4:	68c1      	ldr	r1, [r0, #12]
            {
                if (_pinNumber != -1)
 80106c6:	f1b1 3fff 	cmp.w	r1, #4294967295
 80106ca:	d102      	bne.n	80106d2 <GpioPin_Dispose$16276+0x22>
 80106cc:	e00a      	b.n	80106e4 <GpioPin_Dispose$16276+0x34>
 80106ce:	b002      	add	sp, #8
 80106d0:	bd80      	pop	{r7, pc}
                {
                    _provider.Dispose();
 80106d2:	9801      	ldr	r0, [sp, #4]
 80106d4:	6880      	ldr	r0, [r0, #8]
 80106d6:	f000 f807 	bl	80106e8 <GpioPinMbed_Dispose$16516>
 80106da:	9801      	ldr	r0, [sp, #4]
 80106dc:	68c0      	ldr	r0, [r0, #12]

                    // Mark the pin as available in the hardware provider
                    GpioController.ReleaseGpioPin(_pinNumber);
 80106de:	f7ff ff55 	bl	801058c <GpioController_ReleaseGpioPin$4182>
                }
 80106e2:	e7ff      	b.n	80106e4 <GpioPin_Dispose$16276+0x34>
            }
 80106e4:	e7f3      	b.n	80106ce <GpioPin_Dispose$16276+0x1e>
 80106e6:	46c0      	nop			; (mov r8, r8)

080106e8 <GpioPinMbed_Dispose$16516>:
 80106e8:	b580      	push	{r7, lr}
 80106ea:	b084      	sub	sp, #16
 80106ec:	4601      	mov	r1, r0
    /// </summary>
    public abstract class SystemTimer
    {
        public delegate void Callback(Timer timer, ulong currentTime);

        public class Timer
 80106ee:	7b00      	ldrb	r0, [r0, #12]
 80106f0:	2800      	cmp	r0, #0
 80106f2:	9103      	str	r1, [sp, #12]
 80106f4:	d116      	bne.n	8010724 <GpioPinMbed_Dispose$16516+0x3c>
 80106f6:	e7ff      	b.n	80106f8 <GpioPinMbed_Dispose$16516+0x10>
 80106f8:	480b      	ldr	r0, [pc, #44]	; (8010728 <GpioPinMbed_Dispose$16516+0x40>)
 80106fa:	490c      	ldr	r1, [pc, #48]	; (801072c <GpioPinMbed_Dispose$16516+0x44>)
 80106fc:	4479      	add	r1, pc
        {
            //
 80106fe:	5c40      	ldrb	r0, [r0, r1]
 8010700:	9a03      	ldr	r2, [sp, #12]
 8010702:	9002      	str	r0, [sp, #8]
 8010704:	4610      	mov	r0, r2
 8010706:	9b02      	ldr	r3, [sp, #8]
 8010708:	9101      	str	r1, [sp, #4]
 801070a:	4619      	mov	r1, r3
 801070c:	f000 fc54 	bl	8010fb8 <GpioPinMbed_Dispose$16517>
 8010710:	4807      	ldr	r0, [pc, #28]	; (8010730 <GpioPinMbed_Dispose$16516+0x48>)
            // Ensure that lastAccumulatorUpdate is always updated with the accumulator!
            uint counter = this.Counter;

            //
            // BUGBUG: this logic does not cover the case of multiple wrapaorunds
            //
 8010712:	9901      	ldr	r1, [sp, #4]
 8010714:	5c41      	ldrb	r1, [r0, r1]
 8010716:	9803      	ldr	r0, [sp, #12]
 8010718:	f7f6 fd90 	bl	800723c <Tracker_SetFinalizationFlag$5418>
 801071c:	2001      	movs	r0, #1
 801071e:	9903      	ldr	r1, [sp, #12]
 8010720:	7308      	strb	r0, [r1, #12]
        public class Timer
        {
            //
            // State
            //

 8010722:	e7ff      	b.n	8010724 <GpioPinMbed_Dispose$16516+0x3c>
 8010724:	b004      	add	sp, #16
 8010726:	bd80      	pop	{r7, pc}
 8010728:	e802549c 	.word	0xe802549c
 801072c:	17ff10d4 	.word	0x17ff10d4
 8010730:	e802549d 	.word	0xe802549d

08010734 <DeviceInformation_.ctor$16292>:
 8010734:	b580      	push	{r7, lr}
 8010736:	b083      	sub	sp, #12
 8010738:	4613      	mov	r3, r2
 801073a:	468c      	mov	ip, r1
 801073c:	4686      	mov	lr, r0
 801073e:	6081      	str	r1, [r0, #8]
 8010740:	60c2      	str	r2, [r0, #12]
 8010742:	f8cd c008 	str.w	ip, [sp, #8]
 8010746:	f8cd e004 	str.w	lr, [sp, #4]
 801074a:	9300      	str	r3, [sp, #0]
 801074c:	b003      	add	sp, #12
 801074e:	bd80      	pop	{r7, pc}

08010750 <List`1_Add$22653>:
 8010750:	b580      	push	{r7, lr}
 8010752:	b082      	sub	sp, #8
 8010754:	4602      	mov	r2, r0
        // increased by one. If required, the capacity of the list is doubled
        // before adding the new element.
        //
        public void Add( T item )
        {
            if(m_size == m_items.Length)
 8010756:	6883      	ldr	r3, [r0, #8]
 8010758:	68c0      	ldr	r0, [r0, #12]
            {
                EnsureCapacity( m_size + 1 );
 801075a:	689b      	ldr	r3, [r3, #8]
        // increased by one. If required, the capacity of the list is doubled
        // before adding the new element.
        //
        public void Add( T item )
        {
            if(m_size == m_items.Length)
 801075c:	4298      	cmp	r0, r3
 801075e:	9201      	str	r2, [sp, #4]
 8010760:	9100      	str	r1, [sp, #0]
 8010762:	d106      	bne.n	8010772 <List`1_Add$22653+0x22>
 8010764:	e7ff      	b.n	8010766 <List`1_Add$22653+0x16>
 8010766:	9801      	ldr	r0, [sp, #4]
 8010768:	68c1      	ldr	r1, [r0, #12]
            {
                EnsureCapacity( m_size + 1 );
 801076a:	3101      	adds	r1, #1
 801076c:	f001 f8b6 	bl	80118dc <List`1_EnsureCapacity$22673>
            }
 8010770:	e7ff      	b.n	8010772 <List`1_Add$22653+0x22>

            m_items[m_size++] = item;
 8010772:	9801      	ldr	r0, [sp, #4]
 8010774:	6881      	ldr	r1, [r0, #8]
 8010776:	68c2      	ldr	r2, [r0, #12]
 8010778:	1c53      	adds	r3, r2, #1
 801077a:	60c3      	str	r3, [r0, #12]
 801077c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010780:	9a00      	ldr	r2, [sp, #0]
 8010782:	60ca      	str	r2, [r1, #12]
 8010784:	6901      	ldr	r1, [r0, #16]
            m_version++;
 8010786:	3101      	adds	r1, #1
 8010788:	6101      	str	r1, [r0, #16]
 801078a:	b002      	add	sp, #8
 801078c:	bd80      	pop	{r7, pc}

0801078e <DeviceInformationCollection_.ctor$16306>:
 801078e:	b580      	push	{r7, lr}
 8010790:	b082      	sub	sp, #8
 8010792:	4601      	mov	r1, r0
 8010794:	9101      	str	r1, [sp, #4]
 8010796:	f000 f803 	bl	80107a0 <List`1_.ctor$22637>
 801079a:	b002      	add	sp, #8
 801079c:	bd80      	pop	{r7, pc}
 801079e:	46c0      	nop			; (mov r8, r8)

080107a0 <List`1_.ctor$22637>:
 80107a0:	b081      	sub	sp, #4
 80107a2:	4601      	mov	r1, r0
        // Helper Methods
        //

        public void Clear()
        {
            m_buckets          = null;
 80107a4:	4a04      	ldr	r2, [pc, #16]	; (80107b8 <List`1_.ctor$22637+0x18>)
 80107a6:	4b05      	ldr	r3, [pc, #20]	; (80107bc <List`1_.ctor$22637+0x1c>)
 80107a8:	447b      	add	r3, pc
 80107aa:	441a      	add	r2, r3
 80107ac:	f8d2 20dc 	ldr.w	r2, [r2, #220]	; 0xdc
 80107b0:	6082      	str	r2, [r0, #8]
 80107b2:	9100      	str	r1, [sp, #0]
 80107b4:	b001      	add	sp, #4
 80107b6:	4770      	bx	lr
 80107b8:	fffffe3c 	.word	0xfffffe3c
 80107bc:	17ff1028 	.word	0x17ff1028

080107c0 <LedToggler_.ctor$16315>:
 80107c0:	b082      	sub	sp, #8
 80107c2:	460a      	mov	r2, r1
 80107c4:	4603      	mov	r3, r0
 80107c6:	6081      	str	r1, [r0, #8]
 80107c8:	9301      	str	r3, [sp, #4]
 80107ca:	9200      	str	r2, [sp, #0]
 80107cc:	b002      	add	sp, #8
 80107ce:	4770      	bx	lr

080107d0 <LedToggler_get_PinCount$16317>:
 80107d0:	b081      	sub	sp, #4
 80107d2:	4601      	mov	r1, r0

        public int PinCount
        {
            get
            {
                return _pins.Length;
 80107d4:	6880      	ldr	r0, [r0, #8]
            solitary.Write( (GpioPinValue)pinState );
            pinState = 0;

#if (USE_THREADING)
            var ev = new AutoResetEvent( false );
            var solitaryBlinker = new Thread( delegate()
 80107d6:	6880      	ldr	r0, [r0, #8]
 80107d8:	9100      	str	r1, [sp, #0]
 80107da:	b001      	add	sp, #4
 80107dc:	4770      	bx	lr

080107de <LedToggler_set_Item$16319>:
 80107de:	b580      	push	{r7, lr}
 80107e0:	b084      	sub	sp, #16
 80107e2:	4613      	mov	r3, r2
 80107e4:	468c      	mov	ip, r1
 80107e6:	4686      	mov	lr, r0
            {
                return _pins[key].Read();
            }
            set
            {
                _pins[key].Write(value);
 80107e8:	6880      	ldr	r0, [r0, #8]
 80107ea:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80107ee:	68c0      	ldr	r0, [r0, #12]
 80107f0:	4611      	mov	r1, r2
 80107f2:	9303      	str	r3, [sp, #12]
 80107f4:	f8cd c008 	str.w	ip, [sp, #8]
 80107f8:	f8cd e004 	str.w	lr, [sp, #4]
 80107fc:	f7f6 f878 	bl	80068f0 <GpioPin_Write$16270>
 8010800:	b004      	add	sp, #16
 8010802:	bd80      	pop	{r7, pc}

08010804 <Memory_RequestMemoryPool$16355>:
 8010804:	b580      	push	{r7, lr}
 8010806:	b08a      	sub	sp, #40	; 0x28
 8010808:	4601      	mov	r1, r0
    using System;
    using System.Collections.Generic;

#if (USE_THREADING)
    using System.Threading;
#endif
 801080a:	6800      	ldr	r0, [r0, #0]
 801080c:	4a1e      	ldr	r2, [pc, #120]	; (8010888 <Memory_RequestMemoryPool$16355+0x84>)
 801080e:	4b1f      	ldr	r3, [pc, #124]	; (801088c <Memory_RequestMemoryPool$16355+0x88>)
 8010810:	447b      	add	r3, pc
 8010812:	58d2      	ldr	r2, [r2, r3]
 8010814:	9109      	str	r1, [sp, #36]	; 0x24
 8010816:	4611      	mov	r1, r2
 8010818:	f7fa fd5a 	bl	800b2d0 <Math_Min$7167>
 801081c:	9008      	str	r0, [sp, #32]
 801081e:	e7ff      	b.n	8010820 <Memory_RequestMemoryPool$16355+0x1c>
 8010820:	9808      	ldr	r0, [sp, #32]
    using Windows.Devices.Gpio;
    using Windows.Devices.Spi;
    using Windows.Devices.I2c;
 8010822:	9007      	str	r0, [sp, #28]
 8010824:	f00f fd54 	bl	80202d0 <malloc>
 8010828:	4601      	mov	r1, r0
    using Windows.Devices.Enumeration;

 801082a:	2800      	cmp	r0, #0
 801082c:	9807      	ldr	r0, [sp, #28]
    using ZeligSupport = Microsoft.Zelig.Support.mbed;

#if (LPC1768)
    using LPC1768 = Zelig.LPC1768;
 801082e:	460a      	mov	r2, r1
#endif
    using Windows.Devices.Gpio;
    using Windows.Devices.Spi;
    using Windows.Devices.I2c;
    using Windows.Devices.Enumeration;

 8010830:	9106      	str	r1, [sp, #24]
 8010832:	9005      	str	r0, [sp, #20]
 8010834:	9204      	str	r2, [sp, #16]
 8010836:	d10e      	bne.n	8010856 <Memory_RequestMemoryPool$16355+0x52>
 8010838:	e7ff      	b.n	801083a <Memory_RequestMemoryPool$16355+0x36>
    using ZeligSupport = Microsoft.Zelig.Support.mbed;

 801083a:	f64c 40cd 	movw	r0, #52429	; 0xcccd
 801083e:	f6cc 40cc 	movt	r0, #52428	; 0xcccc
 8010842:	9907      	ldr	r1, [sp, #28]
 8010844:	fba1 0200 	umull	r0, r2, r1, r0
 8010848:	eba1 02d2 	sub.w	r2, r1, r2, lsr #3
#if (LPC1768)
    using LPC1768 = Zelig.LPC1768;
 801084c:	9b06      	ldr	r3, [sp, #24]
    using Windows.Devices.I2c;
    using Windows.Devices.Enumeration;

    using ZeligSupport = Microsoft.Zelig.Support.mbed;

#if (LPC1768)
 801084e:	9003      	str	r0, [sp, #12]
 8010850:	9205      	str	r2, [sp, #20]
 8010852:	9304      	str	r3, [sp, #16]
 8010854:	e7ff      	b.n	8010856 <Memory_RequestMemoryPool$16355+0x52>
    using LPC1768 = Zelig.LPC1768;
 8010856:	9804      	ldr	r0, [sp, #16]
 8010858:	9905      	ldr	r1, [sp, #20]
 801085a:	2800      	cmp	r0, #0
 801085c:	4608      	mov	r0, r1
 801085e:	9a06      	ldr	r2, [sp, #24]
 8010860:	9102      	str	r1, [sp, #8]
 8010862:	9001      	str	r0, [sp, #4]
 8010864:	9200      	str	r2, [sp, #0]
 8010866:	d006      	beq.n	8010876 <Memory_RequestMemoryPool$16355+0x72>
 8010868:	e7ff      	b.n	801086a <Memory_RequestMemoryPool$16355+0x66>
 801086a:	9800      	ldr	r0, [sp, #0]
 801086c:	9901      	ldr	r1, [sp, #4]
 801086e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010870:	6011      	str	r1, [r2, #0]
 8010872:	b00a      	add	sp, #40	; 0x28
 8010874:	bd80      	pop	{r7, pc}
 8010876:	9802      	ldr	r0, [sp, #8]
 8010878:	2800      	cmp	r0, #0
 801087a:	9902      	ldr	r1, [sp, #8]
 801087c:	9a06      	ldr	r2, [sp, #24]
 801087e:	9008      	str	r0, [sp, #32]
 8010880:	9101      	str	r1, [sp, #4]
 8010882:	9200      	str	r2, [sp, #0]
 8010884:	dccc      	bgt.n	8010820 <Memory_RequestMemoryPool$16355+0x1c>
 8010886:	e7f0      	b.n	801086a <Memory_RequestMemoryPool$16355+0x66>
 8010888:	e8025488 	.word	0xe8025488
 801088c:	17ff0fc0 	.word	0x17ff0fc0

08010890 <Memory_FreeMemoryPool$16356>:
 8010890:	b580      	push	{r7, lr}
 8010892:	b084      	sub	sp, #16
 8010894:	4601      	mov	r1, r0
        }

        
        public static unsafe void FreeMemoryPool( byte* mem )
        {
            if(mem != null)
 8010896:	4602      	mov	r2, r0
 8010898:	2800      	cmp	r0, #0
 801089a:	9203      	str	r2, [sp, #12]
 801089c:	9102      	str	r1, [sp, #8]
 801089e:	d005      	beq.n	80108ac <Memory_FreeMemoryPool$16356+0x1c>
 80108a0:	e7ff      	b.n	80108a2 <Memory_FreeMemoryPool$16356+0x12>
            {
                free( mem );
 80108a2:	9803      	ldr	r0, [sp, #12]
 80108a4:	f00f fd1c 	bl	80202e0 <free>
            }
 80108a8:	9001      	str	r0, [sp, #4]
 80108aa:	e7ff      	b.n	80108ac <Memory_FreeMemoryPool$16356+0x1c>
 80108ac:	b004      	add	sp, #16
 80108ae:	bd80      	pop	{r7, pc}

080108b0 <Timer_read_us$16370>:
 80108b0:	b580      	push	{r7, lr}
 80108b2:	b082      	sub	sp, #8
 80108b4:	4601      	mov	r1, r0
 80108b6:	6902      	ldr	r2, [r0, #16]
        /** Get the time passed in micro-seconds
         */

        public int read_us()
        {
            return _time + slicetime();
 80108b8:	9201      	str	r2, [sp, #4]
 80108ba:	9100      	str	r1, [sp, #0]
 80108bc:	f000 f804 	bl	80108c8 <Timer_slicetime$16371>
 80108c0:	9901      	ldr	r1, [sp, #4]
 80108c2:	4408      	add	r0, r1
 80108c4:	b002      	add	sp, #8
 80108c6:	bd80      	pop	{r7, pc}

080108c8 <Timer_slicetime$16371>:
 80108c8:	b580      	push	{r7, lr}
 80108ca:	b082      	sub	sp, #8
 80108cc:	4601      	mov	r1, r0
 80108ce:	7a00      	ldrb	r0, [r0, #8]
        }

        private int slicetime()
        {
            if (_running)
 80108d0:	2800      	cmp	r0, #0
 80108d2:	9101      	str	r1, [sp, #4]
 80108d4:	d007      	beq.n	80108e6 <Timer_slicetime$16371+0x1e>
 80108d6:	e7ff      	b.n	80108d8 <Timer_slicetime$16371+0x10>
            {
                return (int)(UsTicker.us_ticker_read() - _start);
 80108d8:	f00f f882 	bl	801f9e0 <us_ticker_read>
 80108dc:	9901      	ldr	r1, [sp, #4]
 80108de:	68ca      	ldr	r2, [r1, #12]
 80108e0:	1a80      	subs	r0, r0, r2
 80108e2:	9000      	str	r0, [sp, #0]
 80108e4:	e002      	b.n	80108ec <Timer_slicetime$16371+0x24>
 80108e6:	2000      	movs	r0, #0
            }
            else
            {
                return 0;
 80108e8:	9000      	str	r0, [sp, #0]
 80108ea:	e7ff      	b.n	80108ec <Timer_slicetime$16371+0x24>
 80108ec:	9800      	ldr	r0, [sp, #0]
 80108ee:	b002      	add	sp, #8
 80108f0:	bd80      	pop	{r7, pc}

080108f2 <Context_.ctor$16405>:
 80108f2:	4770      	bx	lr

080108f4 <Device_ProcessBugCheck$16409>:
 80108f4:	b580      	push	{r7, lr}
 80108f6:	b082      	sub	sp, #8
 80108f8:	4608      	mov	r0, r1
 80108fa:	4a05      	ldr	r2, [pc, #20]	; (8010910 <Device_ProcessBugCheck$16409+0x1c>)
 80108fc:	4b05      	ldr	r3, [pc, #20]	; (8010914 <Device_ProcessBugCheck$16409+0x20>)
 80108fe:	447b      	add	r3, pc
 8010900:	441a      	add	r2, r3
 8010902:	6791      	str	r1, [r2, #120]	; 0x78
////using CultureInfo       = System.Globalization.CultureInfo;
////using FieldInfo         = System.Reflection.FieldInfo;
////using BindingFlags      = System.Reflection.BindingFlags;
////using RemotingException = System.Runtime.Remoting.RemotingException;

    // The Object is the root class for all object in the CLR System. Object
 8010904:	9001      	str	r0, [sp, #4]
 8010906:	4608      	mov	r0, r1
 8010908:	f00c fb64 	bl	801cfd4 <Breakpoint>
 801090c:	b002      	add	sp, #8
 801090e:	bd80      	pop	{r7, pc}
 8010910:	fffffe3c 	.word	0xfffffe3c
 8010914:	17ff0ed2 	.word	0x17ff0ed2

08010918 <Memory_InitializeMemory$16417>:
 8010918:	4770      	bx	lr

0801091a <Peripherals_Activate$16670>:
            CMSIS.NVIC.SetPriority( ProcessorARMv7M.IRQn_Type.PendSV_IRQn , ProcessorARMv7M.c_Priority__PendSV ); 
        }
        
        public override void Activate()
        {
            CMSIS.Drivers.InterruptController.Instance.Initialize();
 801091a:	b580      	push	{r7, lr}
 801091c:	f000 fbd4 	bl	80110c8 <InterruptController_Initialize$16787>
            CMSIS.Drivers.ContextSwitchTimer.Instance.Initialize();
 8010920:	f000 fbf0 	bl	8011104 <ContextSwitchTimer_Initialize$16806>
 8010924:	bd80      	pop	{r7, pc}
 8010926:	46c0      	nop			; (mov r8, r8)

08010928 <SystemTimer_Initialize$16493>:
 8010928:	b580      	push	{r7, lr}
 801092a:	b084      	sub	sp, #16
 801092c:	4815      	ldr	r0, [pc, #84]	; (8010984 <SystemTimer_Initialize$16493+0x5c>)
 801092e:	4916      	ldr	r1, [pc, #88]	; (8010988 <SystemTimer_Initialize$16493+0x60>)
 8010930:	4479      	add	r1, pc
 8010932:	4408      	add	r0, r1
 8010934:	4a15      	ldr	r2, [pc, #84]	; (801098c <SystemTimer_Initialize$16493+0x64>)
 8010936:	440a      	add	r2, r1
 8010938:	9103      	str	r1, [sp, #12]
 801093a:	4611      	mov	r1, r2
 801093c:	f7ef ff40 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8010940:	9002      	str	r0, [sp, #8]
 8010942:	f000 f8ed 	bl	8010b20 <KernelList`1_.ctor$22757>
 8010946:	4812      	ldr	r0, [pc, #72]	; (8010990 <SystemTimer_Initialize$16493+0x68>)
 8010948:	9903      	ldr	r1, [sp, #12]
 801094a:	4408      	add	r0, r1
 801094c:	9a02      	ldr	r2, [sp, #8]
 801094e:	6082      	str	r2, [r0, #8]
 8010950:	2300      	movs	r3, #0
 8010952:	6103      	str	r3, [r0, #16]
 8010954:	60c3      	str	r3, [r0, #12]
 8010956:	9001      	str	r0, [sp, #4]
 8010958:	f00c fd28 	bl	801d3ac <tmp_sys_timer_init>
 801095c:	f00c fd16 	bl	801d38c <tmp_sys_timer_read>
 8010960:	9901      	ldr	r1, [sp, #4]
 8010962:	6148      	str	r0, [r1, #20]
 8010964:	f101 0018 	add.w	r0, r1, #24
 8010968:	f00c fd02 	bl	801d370 <tmp_timer_event_alloc>
 801096c:	4809      	ldr	r0, [pc, #36]	; (8010994 <SystemTimer_Initialize$16493+0x6c>)
 801096e:	9903      	ldr	r1, [sp, #12]
 8010970:	5840      	ldr	r0, [r0, r1]
 8010972:	4a09      	ldr	r2, [pc, #36]	; (8010998 <SystemTimer_Initialize$16493+0x70>)
 8010974:	5851      	ldr	r1, [r2, r1]
 8010976:	f00c fca5 	bl	801d2c4 <CMSIS_STUB_NVIC_SetPriority>
 801097a:	9801      	ldr	r0, [sp, #4]
 801097c:	f000 f906 	bl	8010b8c <SystemTimer_Refresh$16500>
 8010980:	b004      	add	sp, #16
 8010982:	bd80      	pop	{r7, pc}
 8010984:	ffffea38 	.word	0xffffea38
 8010988:	17ff0ea0 	.word	0x17ff0ea0
 801098c:	e801478c 	.word	0xe801478c
 8010990:	ffffea8c 	.word	0xffffea8c
 8010994:	e8025494 	.word	0xe8025494
 8010998:	e8025498 	.word	0xe8025498

0801099c <Peripherals_ReadPerformanceCounter$16420>:
 801099c:	b580      	push	{r7, lr}
 801099e:	f00c fcf5 	bl	801d38c <tmp_sys_timer_read>
 80109a2:	bd80      	pop	{r7, pc}

080109a4 <ThreadManager_Activate$16772>:
 80109a4:	b580      	push	{r7, lr}
 80109a6:	b084      	sub	sp, #16
 80109a8:	4601      	mov	r1, r0
        {
            //
            // Activate the quantum timer, when the Idle Thread will run will enable execptions, 
            // thus letting the context switching to start 
            //
            RT.BugCheck.AssertInterruptsOff( );
 80109aa:	9003      	str	r0, [sp, #12]
 80109ac:	9102      	str	r1, [sp, #8]
 80109ae:	f7f3 fc5d 	bl	800426c <BugCheck_AssertInterruptsOff$4655>

            m_SysTickTimer = Drivers.ContextSwitchTimer.Instance.CreateTimer( TimeQuantumExpired );
 80109b2:	480d      	ldr	r0, [pc, #52]	; (80109e8 <ThreadManager_Activate$16772+0x44>)
 80109b4:	490d      	ldr	r1, [pc, #52]	; (80109ec <ThreadManager_Activate$16772+0x48>)
 80109b6:	4479      	add	r1, pc
 80109b8:	4408      	add	r0, r1
 80109ba:	4a0d      	ldr	r2, [pc, #52]	; (80109f0 <ThreadManager_Activate$16772+0x4c>)
 80109bc:	440a      	add	r2, r1
 80109be:	9101      	str	r1, [sp, #4]
 80109c0:	4611      	mov	r1, r2
 80109c2:	f7ef fefd 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 80109c6:	490b      	ldr	r1, [pc, #44]	; (80109f4 <ThreadManager_Activate$16772+0x50>)
 80109c8:	9a01      	ldr	r2, [sp, #4]
 80109ca:	440a      	add	r2, r1
 80109cc:	9000      	str	r0, [sp, #0]
 80109ce:	9903      	ldr	r1, [sp, #12]
 80109d0:	f7f1 f874 	bl	8001abc <MulticastDelegate_.ctor$4629>
 80109d4:	9800      	ldr	r0, [sp, #0]
 80109d6:	f000 fc49 	bl	801126c <ContextSwitchTimer_CreateTimer$16808>
 80109da:	9903      	ldr	r1, [sp, #12]
 80109dc:	6408      	str	r0, [r1, #64]	; 0x40
            m_SysTickTimer.Schedule();
 80109de:	f000 fc5d 	bl	801129c <SysTickTimer_Schedule$16884>
 80109e2:	b004      	add	sp, #16
 80109e4:	bd80      	pop	{r7, pc}
 80109e6:	46c0      	nop			; (mov r8, r8)
 80109e8:	ffffea38 	.word	0xffffea38
 80109ec:	17ff0e1a 	.word	0x17ff0e1a
 80109f0:	e8014a7c 	.word	0xe8014a7c
 80109f4:	e800fa87 	.word	0xe800fa87

080109f8 <Callback_Invoke$16648>:
 80109f8:	b580      	push	{r7, lr}
 80109fa:	b08a      	sub	sp, #40	; 0x28
 80109fc:	4684      	mov	ip, r0
 80109fe:	6900      	ldr	r0, [r0, #16]
 8010a00:	2800      	cmp	r0, #0
 8010a02:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8010a06:	9308      	str	r3, [sp, #32]
 8010a08:	9207      	str	r2, [sp, #28]
 8010a0a:	9106      	str	r1, [sp, #24]
 8010a0c:	9005      	str	r0, [sp, #20]
 8010a0e:	d006      	beq.n	8010a1e <Callback_Invoke$16648+0x26>
 8010a10:	e7ff      	b.n	8010a12 <Callback_Invoke$16648+0x1a>
 8010a12:	9805      	ldr	r0, [sp, #20]
 8010a14:	6881      	ldr	r1, [r0, #8]
 8010a16:	2200      	movs	r2, #0
 8010a18:	9104      	str	r1, [sp, #16]
 8010a1a:	9203      	str	r2, [sp, #12]
 8010a1c:	e00f      	b.n	8010a3e <Callback_Invoke$16648+0x46>
 8010a1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010a20:	6880      	ldr	r0, [r0, #8]
 8010a22:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010a24:	68ca      	ldr	r2, [r1, #12]
 8010a26:	9906      	ldr	r1, [sp, #24]
 8010a28:	9b07      	ldr	r3, [sp, #28]
 8010a2a:	9202      	str	r2, [sp, #8]
 8010a2c:	461a      	mov	r2, r3
 8010a2e:	9b08      	ldr	r3, [sp, #32]
 8010a30:	f8dd c008 	ldr.w	ip, [sp, #8]
 8010a34:	47e0      	blx	ip
 8010a36:	e000      	b.n	8010a3a <Callback_Invoke$16648+0x42>
 8010a38:	e7ff      	b.n	8010a3a <Callback_Invoke$16648+0x42>
 8010a3a:	b00a      	add	sp, #40	; 0x28
 8010a3c:	bd80      	pop	{r7, pc}
 8010a3e:	9803      	ldr	r0, [sp, #12]
 8010a40:	9904      	ldr	r1, [sp, #16]
 8010a42:	4288      	cmp	r0, r1
 8010a44:	9001      	str	r0, [sp, #4]
 8010a46:	daf7      	bge.n	8010a38 <Callback_Invoke$16648+0x40>
 8010a48:	e7ff      	b.n	8010a4a <Callback_Invoke$16648+0x52>
 8010a4a:	9805      	ldr	r0, [sp, #20]
 8010a4c:	9901      	ldr	r1, [sp, #4]
 8010a4e:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8010a52:	68d2      	ldr	r2, [r2, #12]
 8010a54:	6890      	ldr	r0, [r2, #8]
 8010a56:	68d2      	ldr	r2, [r2, #12]
 8010a58:	9906      	ldr	r1, [sp, #24]
 8010a5a:	9b07      	ldr	r3, [sp, #28]
 8010a5c:	9200      	str	r2, [sp, #0]
 8010a5e:	461a      	mov	r2, r3
 8010a60:	9b08      	ldr	r3, [sp, #32]
 8010a62:	f8dd c000 	ldr.w	ip, [sp]
 8010a66:	47e0      	blx	ip
 8010a68:	9801      	ldr	r0, [sp, #4]
 8010a6a:	1c41      	adds	r1, r0, #1
 8010a6c:	9103      	str	r1, [sp, #12]
 8010a6e:	e7e6      	b.n	8010a3e <Callback_Invoke$16648+0x46>

08010a70 <ThreadManager_WaitExpired$16483>:
 8010a70:	b580      	push	{r7, lr}
 8010a72:	b086      	sub	sp, #24
 8010a74:	4619      	mov	r1, r3
 8010a76:	4694      	mov	ip, r2
 8010a78:	4686      	mov	lr, r0

        //--//

        private void WaitExpired( Drivers.SystemTimer.Timer sysTickTimer, ulong currentTime )
        {
            WaitExpired( RT.SchedulerTime.FromUnits( currentTime ) );
 8010a7a:	9005      	str	r0, [sp, #20]
 8010a7c:	4610      	mov	r0, r2
 8010a7e:	9104      	str	r1, [sp, #16]
 8010a80:	4619      	mov	r1, r3
 8010a82:	f8cd c00c 	str.w	ip, [sp, #12]
 8010a86:	f8cd e008 	str.w	lr, [sp, #8]
 8010a8a:	f7f7 ff72 	bl	8008972 <SchedulerTime_FromUnits$4853>
 8010a8e:	9a05      	ldr	r2, [sp, #20]
 8010a90:	9001      	str	r0, [sp, #4]
 8010a92:	4610      	mov	r0, r2
 8010a94:	9a01      	ldr	r2, [sp, #4]
 8010a96:	460b      	mov	r3, r1
 8010a98:	f7f4 fc18 	bl	80052cc <ThreadManager_WaitExpired$3181>
 8010a9c:	b006      	add	sp, #24
 8010a9e:	bd80      	pop	{r7, pc}

08010aa0 <SystemTimer_CreateTimer$16494>:
 8010aa0:	b580      	push	{r7, lr}
 8010aa2:	b084      	sub	sp, #16
 8010aa4:	4601      	mov	r1, r0
        /// </summary>
        /// <param name="callback">Handler to run on timer expiration</param>
        /// <returns>New Timer instance</returns>
        public Timer CreateTimer(Callback callback)
        {
            return new Timer(this, callback);
 8010aa6:	4a0a      	ldr	r2, [pc, #40]	; (8010ad0 <SystemTimer_CreateTimer$16494+0x30>)
 8010aa8:	4b0a      	ldr	r3, [pc, #40]	; (8010ad4 <SystemTimer_CreateTimer$16494+0x34>)
 8010aaa:	447b      	add	r3, pc
 8010aac:	441a      	add	r2, r3
 8010aae:	f8df c028 	ldr.w	ip, [pc, #40]	; 8010ad8 <SystemTimer_CreateTimer$16494+0x38>
 8010ab2:	4463      	add	r3, ip
 8010ab4:	9003      	str	r0, [sp, #12]
 8010ab6:	4610      	mov	r0, r2
 8010ab8:	9102      	str	r1, [sp, #8]
 8010aba:	4619      	mov	r1, r3
 8010abc:	f7ef fe80 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8010ac0:	9001      	str	r0, [sp, #4]
 8010ac2:	9903      	ldr	r1, [sp, #12]
 8010ac4:	f000 f8ba 	bl	8010c3c <Timer_.ctor$16656>
 8010ac8:	9801      	ldr	r0, [sp, #4]
 8010aca:	b004      	add	sp, #16
 8010acc:	bd80      	pop	{r7, pc}
 8010ace:	46c0      	nop			; (mov r8, r8)
 8010ad0:	ffffea38 	.word	0xffffea38
 8010ad4:	17ff0d26 	.word	0x17ff0d26
 8010ad8:	e801481c 	.word	0xe801481c

08010adc <Timer_Cancel$16657>:
 8010adc:	b580      	push	{r7, lr}
 8010ade:	b082      	sub	sp, #8
 8010ae0:	4601      	mov	r1, r0
            // Helper Methods
            //

            public void Cancel()
            {
                m_owner.Deregister(this);
 8010ae2:	6902      	ldr	r2, [r0, #16]
 8010ae4:	9001      	str	r0, [sp, #4]
 8010ae6:	4610      	mov	r0, r2
 8010ae8:	9a01      	ldr	r2, [sp, #4]
 8010aea:	9100      	str	r1, [sp, #0]
 8010aec:	4611      	mov	r1, r2
 8010aee:	f000 fa30 	bl	8010f52 <SystemTimer_Deregister$16503>
 8010af2:	b002      	add	sp, #8
 8010af4:	bd80      	pop	{r7, pc}

08010af6 <Timer_set_Timeout$16661>:
 8010af6:	b580      	push	{r7, lr}
 8010af8:	b084      	sub	sp, #16
 8010afa:	4619      	mov	r1, r3
 8010afc:	4694      	mov	ip, r2
 8010afe:	4686      	mov	lr, r0
 8010b00:	6183      	str	r3, [r0, #24]
 8010b02:	6142      	str	r2, [r0, #20]
                    return m_timeout;
                }
                set
                {
                    m_timeout = value;
                    m_owner.Register(this);
 8010b04:	6902      	ldr	r2, [r0, #16]
 8010b06:	9003      	str	r0, [sp, #12]
 8010b08:	4610      	mov	r0, r2
 8010b0a:	9a03      	ldr	r2, [sp, #12]
 8010b0c:	9102      	str	r1, [sp, #8]
 8010b0e:	4611      	mov	r1, r2
 8010b10:	f8cd e004 	str.w	lr, [sp, #4]
 8010b14:	f8cd c000 	str.w	ip, [sp]
 8010b18:	f000 f9b2 	bl	8010e80 <SystemTimer_Register$16502>
 8010b1c:	b004      	add	sp, #16
 8010b1e:	bd80      	pop	{r7, pc}

08010b20 <KernelList`1_.ctor$22757>:
 8010b20:	b580      	push	{r7, lr}
 8010b22:	b088      	sub	sp, #32
 8010b24:	4601      	mov	r1, r0

    // Implements a variable-size List that uses an array of objects to store the
    // elements. A List has a capacity, which is the allocated length
    // of the internal array. As elements are added to a List, the capacity
    // of the List is automatically increased as required by reallocating the
    // internal array.
 8010b26:	4a16      	ldr	r2, [pc, #88]	; (8010b80 <KernelList`1_.ctor$22757+0x60>)
 8010b28:	4b16      	ldr	r3, [pc, #88]	; (8010b84 <KernelList`1_.ctor$22757+0x64>)
 8010b2a:	447b      	add	r3, pc
 8010b2c:	441a      	add	r2, r3
 8010b2e:	f8df c058 	ldr.w	ip, [pc, #88]	; 8010b88 <KernelList`1_.ctor$22757+0x68>
 8010b32:	4463      	add	r3, ip
 8010b34:	9007      	str	r0, [sp, #28]
 8010b36:	4610      	mov	r0, r2
 8010b38:	9106      	str	r1, [sp, #24]
 8010b3a:	4619      	mov	r1, r3
 8010b3c:	9305      	str	r3, [sp, #20]
 8010b3e:	9204      	str	r2, [sp, #16]
 8010b40:	f7ef fe3e 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8010b44:	2100      	movs	r1, #0
 8010b46:	9003      	str	r0, [sp, #12]
 8010b48:	9102      	str	r1, [sp, #8]
 8010b4a:	f000 fa89 	bl	8011060 <KernelNode`1_.ctor$22770>
 8010b4e:	9803      	ldr	r0, [sp, #12]
 8010b50:	9907      	ldr	r1, [sp, #28]
 8010b52:	6088      	str	r0, [r1, #8]
    //
 8010b54:	9804      	ldr	r0, [sp, #16]
 8010b56:	9905      	ldr	r1, [sp, #20]
 8010b58:	f7ef fe32 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8010b5c:	9001      	str	r0, [sp, #4]
 8010b5e:	9902      	ldr	r1, [sp, #8]
 8010b60:	f000 fa7e 	bl	8011060 <KernelNode`1_.ctor$22770>
 8010b64:	9801      	ldr	r0, [sp, #4]
 8010b66:	9907      	ldr	r1, [sp, #28]
 8010b68:	60c8      	str	r0, [r1, #12]
////[DebuggerTypeProxy( typeof( Mscorlib_CollectionDebugView<> ) )]
////[DebuggerDisplay( "Count = {Count}" )]
 8010b6a:	6888      	ldr	r0, [r1, #8]
 8010b6c:	9901      	ldr	r1, [sp, #4]
 8010b6e:	f000 fee5 	bl	801193c <KernelNode`1_set_Next$22782>
    [Serializable]
 8010b72:	9807      	ldr	r0, [sp, #28]
 8010b74:	6881      	ldr	r1, [r0, #8]
 8010b76:	68c0      	ldr	r0, [r0, #12]
 8010b78:	f000 fee8 	bl	801194c <KernelNode`1_set_Previous$22784>
 8010b7c:	b008      	add	sp, #32
 8010b7e:	bd80      	pop	{r7, pc}
 8010b80:	ffffea38 	.word	0xffffea38
 8010b84:	17ff0ca6 	.word	0x17ff0ca6
 8010b88:	e80149ec 	.word	0xe80149ec

08010b8c <SystemTimer_Refresh$16500>:
 8010b8c:	b580      	push	{r7, lr}
 8010b8e:	b08e      	sub	sp, #56	; 0x38
 8010b90:	4601      	mov	r1, r0
        /// </summary>
        private void Refresh()
        {
            ulong absTimeout;

            Timer target = m_timers.FirstTarget();
 8010b92:	6882      	ldr	r2, [r0, #8]
 8010b94:	900d      	str	r0, [sp, #52]	; 0x34
 8010b96:	4610      	mov	r0, r2
 8010b98:	910c      	str	r1, [sp, #48]	; 0x30
 8010b9a:	f000 f92d 	bl	8010df8 <KernelList`1_FirstTarget$22760>
 8010b9e:	4601      	mov	r1, r0
                
            ulong now = this.CurrentTime;
 8010ba0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010ba2:	900b      	str	r0, [sp, #44]	; 0x2c
 8010ba4:	4610      	mov	r0, r2
 8010ba6:	910a      	str	r1, [sp, #40]	; 0x28
 8010ba8:	f7f7 ff0c 	bl	80089c4 <SystemTimer_get_CurrentTime$16495>

            if(target != null)
 8010bac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010bae:	2a00      	cmp	r2, #0
 8010bb0:	9109      	str	r1, [sp, #36]	; 0x24
 8010bb2:	9008      	str	r0, [sp, #32]
 8010bb4:	d006      	beq.n	8010bc4 <SystemTimer_Refresh$16500+0x38>
 8010bb6:	e7ff      	b.n	8010bb8 <SystemTimer_Refresh$16500+0x2c>
 8010bb8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010bba:	6941      	ldr	r1, [r0, #20]
 8010bbc:	6982      	ldr	r2, [r0, #24]
            {
                absTimeout = target.Timeout;
            }
 8010bbe:	9107      	str	r1, [sp, #28]
 8010bc0:	9206      	str	r2, [sp, #24]
 8010bc2:	e009      	b.n	8010bd8 <SystemTimer_Refresh$16500+0x4c>
            else
            {
                absTimeout = c_QuarterCycle + now;
 8010bc4:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 8010bc8:	9908      	ldr	r1, [sp, #32]
 8010bca:	1840      	adds	r0, r0, r1
 8010bcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010bce:	f142 0300 	adc.w	r3, r2, #0
            }
 8010bd2:	9007      	str	r0, [sp, #28]
 8010bd4:	9306      	str	r3, [sp, #24]
 8010bd6:	e7ff      	b.n	8010bd8 <SystemTimer_Refresh$16500+0x4c>
 8010bd8:	9806      	ldr	r0, [sp, #24]
 8010bda:	9907      	ldr	r1, [sp, #28]
            // 
            // Timeout in the past? Trigger the match immediately by loading 1 
            // Timeout too far in the future? Generate match for 
            // a fraction of largest counter value, so we have time to handle wrap-arounds 
            // 
            Reload((now > absTimeout) ? 1 : (absTimeout - now));
 8010bdc:	2200      	movs	r2, #0
 8010bde:	9b08      	ldr	r3, [sp, #32]
 8010be0:	428b      	cmp	r3, r1
 8010be2:	4694      	mov	ip, r2
 8010be4:	bf98      	it	ls
 8010be6:	f04f 0c01 	movls.w	ip, #1
 8010bea:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8010bee:	4586      	cmp	lr, r0
 8010bf0:	bf98      	it	ls
 8010bf2:	2201      	movls	r2, #1
 8010bf4:	4586      	cmp	lr, r0
 8010bf6:	bf08      	it	eq
 8010bf8:	4662      	moveq	r2, ip
 8010bfa:	2a00      	cmp	r2, #0
 8010bfc:	9005      	str	r0, [sp, #20]
 8010bfe:	9104      	str	r1, [sp, #16]
 8010c00:	d105      	bne.n	8010c0e <SystemTimer_Refresh$16500+0x82>
 8010c02:	e7ff      	b.n	8010c04 <SystemTimer_Refresh$16500+0x78>
 8010c04:	2000      	movs	r0, #0
 8010c06:	2101      	movs	r1, #1
 8010c08:	9103      	str	r1, [sp, #12]
 8010c0a:	9002      	str	r0, [sp, #8]
 8010c0c:	e00b      	b.n	8010c26 <SystemTimer_Refresh$16500+0x9a>
 8010c0e:	9804      	ldr	r0, [sp, #16]
 8010c10:	9908      	ldr	r1, [sp, #32]
 8010c12:	1a42      	subs	r2, r0, r1
 8010c14:	9b05      	ldr	r3, [sp, #20]
 8010c16:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8010c1a:	eb63 0e0c 	sbc.w	lr, r3, ip
 8010c1e:	9203      	str	r2, [sp, #12]
 8010c20:	f8cd e008 	str.w	lr, [sp, #8]
 8010c24:	e7ff      	b.n	8010c26 <SystemTimer_Refresh$16500+0x9a>
 8010c26:	9802      	ldr	r0, [sp, #8]
 8010c28:	9903      	ldr	r1, [sp, #12]
 8010c2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010c2c:	9001      	str	r0, [sp, #4]
 8010c2e:	4610      	mov	r0, r2
 8010c30:	460a      	mov	r2, r1
 8010c32:	9b01      	ldr	r3, [sp, #4]
 8010c34:	f000 f8f4 	bl	8010e20 <SystemTimer_Reload$16501>
 8010c38:	b00e      	add	sp, #56	; 0x38
 8010c3a:	bd80      	pop	{r7, pc}

08010c3c <Timer_.ctor$16656>:
 8010c3c:	b510      	push	{r4, lr}
 8010c3e:	b086      	sub	sp, #24
 8010c40:	460a      	mov	r2, r1
 8010c42:	4603      	mov	r3, r0
 8010c44:	f8df c03c 	ldr.w	ip, [pc, #60]	; 8010c84 <Timer_.ctor$16656+0x48>
 8010c48:	f8df e03c 	ldr.w	lr, [pc, #60]	; 8010c88 <Timer_.ctor$16656+0x4c>
 8010c4c:	44fe      	add	lr, pc
 8010c4e:	44f4      	add	ip, lr
 8010c50:	f8c0 c010 	str.w	ip, [r0, #16]

        public int GetUpperBound( int dimension )
        {
            TS.VTable vTable = TS.VTable.Get( this );

            TS.TypeRepresentation ts = vTable.TypeInfo;
 8010c54:	f8df c034 	ldr.w	ip, [pc, #52]	; 8010c8c <Timer_.ctor$16656+0x50>
 8010c58:	44f4      	add	ip, lr
 8010c5a:	4c0d      	ldr	r4, [pc, #52]	; (8010c90 <Timer_.ctor$16656+0x54>)
 8010c5c:	44a6      	add	lr, r4
 8010c5e:	9005      	str	r0, [sp, #20]
 8010c60:	4660      	mov	r0, ip
 8010c62:	9104      	str	r1, [sp, #16]
 8010c64:	4671      	mov	r1, lr
 8010c66:	9203      	str	r2, [sp, #12]
 8010c68:	9302      	str	r3, [sp, #8]
 8010c6a:	f7ef fda9 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8010c6e:	9001      	str	r0, [sp, #4]
 8010c70:	9905      	ldr	r1, [sp, #20]
 8010c72:	f000 f9f5 	bl	8011060 <KernelNode`1_.ctor$22770>
 8010c76:	9801      	ldr	r0, [sp, #4]
 8010c78:	9905      	ldr	r1, [sp, #20]
 8010c7a:	60c8      	str	r0, [r1, #12]
 8010c7c:	9a04      	ldr	r2, [sp, #16]
 8010c7e:	608a      	str	r2, [r1, #8]
 8010c80:	b006      	add	sp, #24
 8010c82:	bd10      	pop	{r4, pc}
 8010c84:	ffffea8c 	.word	0xffffea8c
 8010c88:	17ff0b84 	.word	0x17ff0b84
 8010c8c:	ffffea38 	.word	0xffffea38
 8010c90:	e80149ec 	.word	0xe80149ec

08010c94 <SystemTimer_TimeSinceAccumulatorUpdate$16504>:
 8010c94:	b083      	sub	sp, #12
 8010c96:	460a      	mov	r2, r1
 8010c98:	4603      	mov	r3, r0
        private uint TimeSinceAccumulatorUpdate( uint current )
        {
            // If the current timer value is greater than last accumulator update,
            // the counter is still going up. Otherwise, the timer hit its max value
            // and started counting from 0
            return (current >= m_lastAccumulatorUpdate) ?
 8010c9a:	4281      	cmp	r1, r0
 8010c9c:	9302      	str	r3, [sp, #8]
 8010c9e:	9201      	str	r2, [sp, #4]
 8010ca0:	d305      	bcc.n	8010cae <SystemTimer_TimeSinceAccumulatorUpdate$16504+0x1a>
 8010ca2:	e7ff      	b.n	8010ca4 <SystemTimer_TimeSinceAccumulatorUpdate$16504+0x10>
 8010ca4:	9801      	ldr	r0, [sp, #4]
 8010ca6:	9902      	ldr	r1, [sp, #8]
 8010ca8:	1a42      	subs	r2, r0, r1
 8010caa:	9200      	str	r2, [sp, #0]
 8010cac:	e005      	b.n	8010cba <SystemTimer_TimeSinceAccumulatorUpdate$16504+0x26>
 8010cae:	9802      	ldr	r0, [sp, #8]
 8010cb0:	43c1      	mvns	r1, r0
 8010cb2:	9a01      	ldr	r2, [sp, #4]
 8010cb4:	4411      	add	r1, r2
 8010cb6:	9100      	str	r1, [sp, #0]
 8010cb8:	e7ff      	b.n	8010cba <SystemTimer_TimeSinceAccumulatorUpdate$16504+0x26>
 8010cba:	9800      	ldr	r0, [sp, #0]
 8010cbc:	b003      	add	sp, #12
 8010cbe:	4770      	bx	lr

08010cc0 <SystemTimer_ProcessTimeout$16499>:
        public uint Counter
        {
            [RT.Inline]
            get
            {
                return tmp_sys_timer_read();
 8010cc0:	b580      	push	{r7, lr}
 8010cc2:	b088      	sub	sp, #32
 8010cc4:	f00c fb62 	bl	801d38c <tmp_sys_timer_read>
 8010cc8:	492c      	ldr	r1, [pc, #176]	; (8010d7c <SystemTimer_ProcessTimeout$16499+0xbc>)
 8010cca:	4a2d      	ldr	r2, [pc, #180]	; (8010d80 <SystemTimer_ProcessTimeout$16499+0xc0>)
 8010ccc:	447a      	add	r2, pc
 8010cce:	4411      	add	r1, r2
 8010cd0:	68ca      	ldr	r2, [r1, #12]
 8010cd2:	690b      	ldr	r3, [r1, #16]
 8010cd4:	f8d1 c014 	ldr.w	ip, [r1, #20]
            uint counter = this.Counter;

            //
            // BUGBUG: this logic does not cover the case of multiple wrapaorunds
            //
            m_accumulator           += TimeSinceAccumulatorUpdate(counter);
 8010cd8:	9007      	str	r0, [sp, #28]
 8010cda:	4660      	mov	r0, ip
 8010cdc:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8010ce0:	9106      	str	r1, [sp, #24]
 8010ce2:	4661      	mov	r1, ip
 8010ce4:	9305      	str	r3, [sp, #20]
 8010ce6:	9204      	str	r2, [sp, #16]
 8010ce8:	f7ff ffd4 	bl	8010c94 <SystemTimer_TimeSinceAccumulatorUpdate$16504>
 8010cec:	9904      	ldr	r1, [sp, #16]
 8010cee:	1840      	adds	r0, r0, r1
 8010cf0:	9905      	ldr	r1, [sp, #20]
 8010cf2:	f141 0100 	adc.w	r1, r1, #0
 8010cf6:	9a06      	ldr	r2, [sp, #24]
 8010cf8:	60d0      	str	r0, [r2, #12]
 8010cfa:	6111      	str	r1, [r2, #16]
 8010cfc:	9807      	ldr	r0, [sp, #28]
 8010cfe:	6150      	str	r0, [r2, #20]
 8010d00:	68d1      	ldr	r1, [r2, #12]
 8010d02:	6913      	ldr	r3, [r2, #16]
            m_lastAccumulatorUpdate =  counter;

            // we just updated this above, so it will be precise
            ulong now = m_accumulator;
 8010d04:	9103      	str	r1, [sp, #12]
 8010d06:	9302      	str	r3, [sp, #8]
 8010d08:	e7ff      	b.n	8010d0a <SystemTimer_ProcessTimeout$16499+0x4a>

            while (true)
            {
                RT.KernelNode<Timer> node = m_timers.StartOfForwardWalk;
 8010d0a:	481c      	ldr	r0, [pc, #112]	; (8010d7c <SystemTimer_ProcessTimeout$16499+0xbc>)
 8010d0c:	491d      	ldr	r1, [pc, #116]	; (8010d84 <SystemTimer_ProcessTimeout$16499+0xc4>)
 8010d0e:	4479      	add	r1, pc
 8010d10:	4408      	add	r0, r1
 8010d12:	6880      	ldr	r0, [r0, #8]
 8010d14:	f000 f83a 	bl	8010d8c <KernelList`1_get_StartOfForwardWalk$22764>
 8010d18:	4601      	mov	r1, r0

                // If the next node is null, break and call Refresh
                if (node.IsValidForForwardMove == false)
 8010d1a:	9101      	str	r1, [sp, #4]
 8010d1c:	f000 f83d 	bl	8010d9a <KernelNode`1_get_IsValidForForwardMove$22779>
 8010d20:	f010 0fff 	tst.w	r0, #255	; 0xff
 8010d24:	d101      	bne.n	8010d2a <SystemTimer_ProcessTimeout$16499+0x6a>
 8010d26:	e7ff      	b.n	8010d28 <SystemTimer_ProcessTimeout$16499+0x68>
                {
                    break;
 8010d28:	e020      	b.n	8010d6c <SystemTimer_ProcessTimeout$16499+0xac>
            //s_guard.RelativeTimeout = QuarterCycle; 

            // no need to Refresh because guard cuases a refresh already
            Refresh();
        }
        
 8010d2a:	9801      	ldr	r0, [sp, #4]
 8010d2c:	6901      	ldr	r1, [r0, #16]
 8010d2e:	694a      	ldr	r2, [r1, #20]
 8010d30:	6989      	ldr	r1, [r1, #24]
                    break;
                }

                ulong timeout = node.Target.Timeout;

                if (timeout > now)
 8010d32:	2300      	movs	r3, #0
 8010d34:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8010d38:	4562      	cmp	r2, ip
 8010d3a:	461a      	mov	r2, r3
 8010d3c:	bf98      	it	ls
 8010d3e:	2201      	movls	r2, #1
 8010d40:	f8dd e008 	ldr.w	lr, [sp, #8]
 8010d44:	4571      	cmp	r1, lr
 8010d46:	bf98      	it	ls
 8010d48:	2301      	movls	r3, #1
 8010d4a:	4571      	cmp	r1, lr
 8010d4c:	bf08      	it	eq
 8010d4e:	4613      	moveq	r3, r2
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d101      	bne.n	8010d58 <SystemTimer_ProcessTimeout$16499+0x98>
 8010d54:	e7ff      	b.n	8010d56 <SystemTimer_ProcessTimeout$16499+0x96>
                {
                    // If we get here, there are no timers that need to be cleared/invoked
                    break;
 8010d56:	e009      	b.n	8010d6c <SystemTimer_ProcessTimeout$16499+0xac>
                }

                // The current timeout is for the current node (Timer). Remove from List
                // so we do not try to Reload its time.
                node.RemoveFromList();
 8010d58:	9801      	ldr	r0, [sp, #4]
 8010d5a:	f000 f827 	bl	8010dac <KernelNode`1_RemoveFromList$22772>
            //s_guard.RelativeTimeout = QuarterCycle; 

            // no need to Refresh because guard cuases a refresh already
            Refresh();
        }
        
 8010d5e:	9801      	ldr	r0, [sp, #4]
 8010d60:	6900      	ldr	r0, [r0, #16]
                // The current timeout is for the current node (Timer). Remove from List
                // so we do not try to Reload its time.
                node.RemoveFromList();

                // Invoke the handler for the expired timer
                node.Target.Invoke(now);
 8010d62:	9a03      	ldr	r2, [sp, #12]
 8010d64:	9b02      	ldr	r3, [sp, #8]
 8010d66:	f000 f834 	bl	8010dd2 <Timer_Invoke$16658>
            }
 8010d6a:	e7ce      	b.n	8010d0a <SystemTimer_ProcessTimeout$16499+0x4a>

            Refresh();
 8010d6c:	4803      	ldr	r0, [pc, #12]	; (8010d7c <SystemTimer_ProcessTimeout$16499+0xbc>)
 8010d6e:	4906      	ldr	r1, [pc, #24]	; (8010d88 <SystemTimer_ProcessTimeout$16499+0xc8>)
 8010d70:	4479      	add	r1, pc
 8010d72:	4408      	add	r0, r1
 8010d74:	f7ff ff0a 	bl	8010b8c <SystemTimer_Refresh$16500>
 8010d78:	b008      	add	sp, #32
 8010d7a:	bd80      	pop	{r7, pc}
 8010d7c:	ffffea8c 	.word	0xffffea8c
 8010d80:	17ff0b04 	.word	0x17ff0b04
 8010d84:	17ff0ac2 	.word	0x17ff0ac2
 8010d88:	17ff0a60 	.word	0x17ff0a60

08010d8c <KernelList`1_get_StartOfForwardWalk$22764>:
 8010d8c:	b081      	sub	sp, #4
 8010d8e:	4601      	mov	r1, r0

        public KernelNode< T > StartOfForwardWalk
        {
            get
            {
                return m_head.Next;
 8010d90:	6880      	ldr	r0, [r0, #8]
 8010d92:	6880      	ldr	r0, [r0, #8]
 8010d94:	9100      	str	r1, [sp, #0]
 8010d96:	b001      	add	sp, #4
 8010d98:	4770      	bx	lr

08010d9a <KernelNode`1_get_IsValidForForwardMove$22779>:
 8010d9a:	b081      	sub	sp, #4
 8010d9c:	4601      	mov	r1, r0
 8010d9e:	6880      	ldr	r0, [r0, #8]
 8010da0:	2800      	cmp	r0, #0
 8010da2:	bf18      	it	ne
 8010da4:	2001      	movne	r0, #1
 8010da6:	9100      	str	r1, [sp, #0]
 8010da8:	b001      	add	sp, #4
 8010daa:	4770      	bx	lr

08010dac <KernelNode`1_RemoveFromList$22772>:
 8010dac:	b081      	sub	sp, #4
 8010dae:	4601      	mov	r1, r0
            this.ConnectToNext( place );
        }

        public void RemoveFromList()
        {
            if(m_next != null)
 8010db0:	6880      	ldr	r0, [r0, #8]
 8010db2:	2800      	cmp	r0, #0
 8010db4:	9100      	str	r1, [sp, #0]
 8010db6:	d006      	beq.n	8010dc6 <KernelNode`1_RemoveFromList$22772+0x1a>
 8010db8:	e7ff      	b.n	8010dba <KernelNode`1_RemoveFromList$22772+0xe>
        //--//

        [Inline]
        private void RemoveFromList_NoClear()
        {
            KernelNode< T > next = m_next;
 8010dba:	9800      	ldr	r0, [sp, #0]
 8010dbc:	6881      	ldr	r1, [r0, #8]
            KernelNode< T > prev = m_previous;
 8010dbe:	68c2      	ldr	r2, [r0, #12]
 8010dc0:	60ca      	str	r2, [r1, #12]
 8010dc2:	6091      	str	r1, [r2, #8]
        public void RemoveFromList()
        {
            if(m_next != null)
            {
                RemoveFromList_NoClear();
            }
 8010dc4:	e7ff      	b.n	8010dc6 <KernelNode`1_RemoveFromList$22772+0x1a>
 8010dc6:	2000      	movs	r0, #0
 8010dc8:	9900      	ldr	r1, [sp, #0]
 8010dca:	6088      	str	r0, [r1, #8]
 8010dcc:	60c8      	str	r0, [r1, #12]
 8010dce:	b001      	add	sp, #4
 8010dd0:	4770      	bx	lr

08010dd2 <Timer_Invoke$16658>:
 8010dd2:	b510      	push	{r4, lr}
 8010dd4:	b084      	sub	sp, #16
 8010dd6:	4619      	mov	r1, r3
 8010dd8:	4694      	mov	ip, r2
 8010dda:	4686      	mov	lr, r0
            /// Call to the Timer handler
            /// </summary>
            /// <param name="currentTime">Time in ticks</param>
            internal void Invoke(ulong currentTime)
            {
                m_callback(this, currentTime);
 8010ddc:	6884      	ldr	r4, [r0, #8]
 8010dde:	9003      	str	r0, [sp, #12]
 8010de0:	4620      	mov	r0, r4
 8010de2:	9c03      	ldr	r4, [sp, #12]
 8010de4:	9102      	str	r1, [sp, #8]
 8010de6:	4621      	mov	r1, r4
 8010de8:	f8cd c004 	str.w	ip, [sp, #4]
 8010dec:	f8cd e000 	str.w	lr, [sp]
 8010df0:	f7ff fe02 	bl	80109f8 <Callback_Invoke$16648>
 8010df4:	b004      	add	sp, #16
 8010df6:	bd10      	pop	{r4, pc}

08010df8 <KernelList`1_FirstTarget$22760>:
 8010df8:	b083      	sub	sp, #12
 8010dfa:	4601      	mov	r1, r0
            return null;
        }

        public T FirstTarget()
        {
            KernelNode< T > node = m_head.Next;
 8010dfc:	6882      	ldr	r2, [r0, #8]

            if(node != m_tail)
 8010dfe:	68c0      	ldr	r0, [r0, #12]
 8010e00:	6892      	ldr	r2, [r2, #8]

        public T FirstTarget()
        {
            KernelNode< T > node = m_head.Next;

            if(node != m_tail)
 8010e02:	4282      	cmp	r2, r0
 8010e04:	9202      	str	r2, [sp, #8]
 8010e06:	9101      	str	r1, [sp, #4]
 8010e08:	d004      	beq.n	8010e14 <KernelList`1_FirstTarget$22760+0x1c>
 8010e0a:	e7ff      	b.n	8010e0c <KernelList`1_FirstTarget$22760+0x14>
 8010e0c:	9802      	ldr	r0, [sp, #8]
 8010e0e:	6901      	ldr	r1, [r0, #16]
        {
            KernelNode< T > node = m_head.Next;

            if(node != m_tail)
            {
                return node.Target;
 8010e10:	9100      	str	r1, [sp, #0]
 8010e12:	e002      	b.n	8010e1a <KernelList`1_FirstTarget$22760+0x22>
 8010e14:	2000      	movs	r0, #0
            }

            return default(T);
 8010e16:	9000      	str	r0, [sp, #0]
 8010e18:	e7ff      	b.n	8010e1a <KernelList`1_FirstTarget$22760+0x22>
        }
 8010e1a:	9800      	ldr	r0, [sp, #0]
 8010e1c:	b003      	add	sp, #12
 8010e1e:	4770      	bx	lr

08010e20 <SystemTimer_Reload$16501>:
 8010e20:	b510      	push	{r4, lr}
 8010e22:	b08a      	sub	sp, #40	; 0x28
 8010e24:	4619      	mov	r1, r3
 8010e26:	4694      	mov	ip, r2
 8010e28:	469e      	mov	lr, r3
 8010e2a:	4614      	mov	r4, r2
 8010e2c:	0f92      	lsrs	r2, r2, #30
 8010e2e:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
 8010e32:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8010e36:	2a00      	cmp	r2, #0
 8010e38:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 8010e3c:	9408      	str	r4, [sp, #32]
 8010e3e:	f8cd c01c 	str.w	ip, [sp, #28]
 8010e42:	9106      	str	r1, [sp, #24]
 8010e44:	9005      	str	r0, [sp, #20]
 8010e46:	d105      	bne.n	8010e54 <SystemTimer_Reload$16501+0x34>
 8010e48:	e7ff      	b.n	8010e4a <SystemTimer_Reload$16501+0x2a>
 8010e4a:	9808      	ldr	r0, [sp, #32]
 8010e4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010e4e:	9004      	str	r0, [sp, #16]
 8010e50:	9103      	str	r1, [sp, #12]
 8010e52:	e005      	b.n	8010e60 <SystemTimer_Reload$16501+0x40>
 8010e54:	2000      	movs	r0, #0
 8010e56:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 8010e5a:	9104      	str	r1, [sp, #16]
 8010e5c:	9003      	str	r0, [sp, #12]
 8010e5e:	e7ff      	b.n	8010e60 <SystemTimer_Reload$16501+0x40>
 8010e60:	9803      	ldr	r0, [sp, #12]
 8010e62:	9904      	ldr	r1, [sp, #16]
            // This is guaranteed to fit in a uint
            uint trimmed = (uint)Math.Min(remainder, c_QuarterCycle);

            unsafe
            {
                tmp_sys_timer_remove_event(m_timerEvent);
 8010e64:	9a05      	ldr	r2, [sp, #20]
 8010e66:	6993      	ldr	r3, [r2, #24]
 8010e68:	9002      	str	r0, [sp, #8]
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	9101      	str	r1, [sp, #4]
 8010e6e:	f00c fabf 	bl	801d3f0 <tmp_sys_timer_remove_event>
                tmp_sys_timer_insert_event(m_timerEvent, trimmed);
 8010e72:	9805      	ldr	r0, [sp, #20]
 8010e74:	6980      	ldr	r0, [r0, #24]
 8010e76:	9901      	ldr	r1, [sp, #4]
 8010e78:	f00c faa6 	bl	801d3c8 <tmp_sys_timer_insert_event>
 8010e7c:	b00a      	add	sp, #40	; 0x28
 8010e7e:	bd10      	pop	{r4, pc}

08010e80 <SystemTimer_Register$16502>:
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b08e      	sub	sp, #56	; 0x38
 8010e84:	460a      	mov	r2, r1
 8010e86:	4603      	mov	r3, r0
////    [ResourceExposure( ResourceScope.None )]
////    [MethodImpl( MethodImplOptions.InternalCall )]
////    public static extern double Cosh( double value );
////
////    public static Decimal Floor( Decimal d )
////    {
 8010e88:	f8d1 c00c 	ldr.w	ip, [r1, #12]
                return value;
            }
            else
            {
                return AbsHelper( value );
            }
 8010e8c:	900d      	str	r0, [sp, #52]	; 0x34
 8010e8e:	4660      	mov	r0, ip
 8010e90:	910c      	str	r1, [sp, #48]	; 0x30
 8010e92:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 8010e96:	920a      	str	r2, [sp, #40]	; 0x28
 8010e98:	9309      	str	r3, [sp, #36]	; 0x24
 8010e9a:	f7ff ff87 	bl	8010dac <KernelNode`1_RemoveFromList$22772>
 8010e9e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010ea0:	6941      	ldr	r1, [r0, #20]
 8010ea2:	6982      	ldr	r2, [r0, #24]
        }
    
        private static int AbsHelper( int value )
        {
 8010ea4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010ea6:	6898      	ldr	r0, [r3, #8]
 8010ea8:	9108      	str	r1, [sp, #32]
 8010eaa:	9207      	str	r2, [sp, #28]
 8010eac:	f7ff ff6e 	bl	8010d8c <KernelList`1_get_StartOfForwardWalk$22764>
 8010eb0:	9006      	str	r0, [sp, #24]
 8010eb2:	e7ff      	b.n	8010eb4 <SystemTimer_Register$16502+0x34>
////        BCLDebug.Assert( value < 0, "AbsHelper should only be called for negative values! (hack for JIT inlining)" );
////
 8010eb4:	9806      	ldr	r0, [sp, #24]
 8010eb6:	9906      	ldr	r1, [sp, #24]
 8010eb8:	9105      	str	r1, [sp, #20]
 8010eba:	f7ff ff6e 	bl	8010d9a <KernelNode`1_get_IsValidForForwardMove$22779>
 8010ebe:	f010 0fff 	tst.w	r0, #255	; 0xff
 8010ec2:	9805      	ldr	r0, [sp, #20]
 8010ec4:	9004      	str	r0, [sp, #16]
 8010ec6:	d017      	beq.n	8010ef8 <SystemTimer_Register$16502+0x78>
 8010ec8:	e7ff      	b.n	8010eca <SystemTimer_Register$16502+0x4a>
////        {
////            throw new ArgumentException( Environment.GetResourceString( "Argument_InvalidEnumValue", mode, "MidpointRounding" ), "mode" );
////        }
////
////        return InternalRound( value, digits, mode );
////    }
 8010eca:	9805      	ldr	r0, [sp, #20]
 8010ecc:	6901      	ldr	r1, [r0, #16]
 8010ece:	694a      	ldr	r2, [r1, #20]
 8010ed0:	6989      	ldr	r1, [r1, #24]
 8010ed2:	2300      	movs	r3, #0
 8010ed4:	f8dd c020 	ldr.w	ip, [sp, #32]
 8010ed8:	4562      	cmp	r2, ip
 8010eda:	461a      	mov	r2, r3
 8010edc:	bf88      	it	hi
 8010ede:	2201      	movhi	r2, #1
 8010ee0:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8010ee4:	4571      	cmp	r1, lr
 8010ee6:	bf88      	it	hi
 8010ee8:	2301      	movhi	r3, #1
 8010eea:	4571      	cmp	r1, lr
 8010eec:	bf08      	it	eq
 8010eee:	4613      	moveq	r3, r2
        private static int AbsHelper( int value )
        {
////        BCLDebug.Assert( value < 0, "AbsHelper should only be called for negative values! (hack for JIT inlining)" );
////
////        if(value == Int32.MinValue)
////        {
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	9003      	str	r0, [sp, #12]
 8010ef4:	d10f      	bne.n	8010f16 <SystemTimer_Register$16502+0x96>
 8010ef6:	e011      	b.n	8010f1c <SystemTimer_Register$16502+0x9c>
 8010ef8:	9804      	ldr	r0, [sp, #16]
    
            return -value;
        }
    
        public static long Abs( long value )
        {
 8010efa:	9002      	str	r0, [sp, #8]
 8010efc:	e7ff      	b.n	8010efe <SystemTimer_Register$16502+0x7e>
 8010efe:	9802      	ldr	r0, [sp, #8]
 8010f00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010f02:	9001      	str	r0, [sp, #4]
 8010f04:	4608      	mov	r0, r1
 8010f06:	9901      	ldr	r1, [sp, #4]
 8010f08:	f000 f80c 	bl	8010f24 <KernelNode`1_InsertBefore$22771>
            if(value >= 0)
            {
 8010f0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010f0e:	f7ff fe3d 	bl	8010b8c <SystemTimer_Refresh$16500>
 8010f12:	b00e      	add	sp, #56	; 0x38
 8010f14:	bd80      	pop	{r7, pc}
 8010f16:	9803      	ldr	r0, [sp, #12]
////        BCLDebug.Assert( value < 0, "AbsHelper should only be called for negative values! (hack for JIT inlining)" );
////
////        if(value == Int32.MinValue)
////        {
////            throw new OverflowException( Environment.GetResourceString( "Overflow_NegateTwosCompNum" ) );
////        }
 8010f18:	9002      	str	r0, [sp, #8]
 8010f1a:	e7f0      	b.n	8010efe <SystemTimer_Register$16502+0x7e>
        [MethodImpl( MethodImplOptions.InternalCall )]
        public static extern double Round( double a );
    
////    public static double Round( double value, int digits )
////    {
////        if((digits < 0) || (digits > maxRoundingDigits))
 8010f1c:	9805      	ldr	r0, [sp, #20]
 8010f1e:	6881      	ldr	r1, [r0, #8]
////            throw new OverflowException( Environment.GetResourceString( "Overflow_NegateTwosCompNum" ) );
////        }
    
            return -value;
        }
    
 8010f20:	9106      	str	r1, [sp, #24]
 8010f22:	e7c7      	b.n	8010eb4 <SystemTimer_Register$16502+0x34>

08010f24 <KernelNode`1_InsertBefore$22771>:
 8010f24:	b082      	sub	sp, #8
 8010f26:	4602      	mov	r2, r0
        // Helper Methods
        //

        public void InsertBefore( KernelNode< T > place )
        {
            if(m_next != null)
 8010f28:	6880      	ldr	r0, [r0, #8]
 8010f2a:	2800      	cmp	r0, #0
 8010f2c:	9201      	str	r2, [sp, #4]
 8010f2e:	9100      	str	r1, [sp, #0]
 8010f30:	d006      	beq.n	8010f40 <KernelNode`1_InsertBefore$22771+0x1c>
 8010f32:	e7ff      	b.n	8010f34 <KernelNode`1_InsertBefore$22771+0x10>
        //--//

        [Inline]
        private void RemoveFromList_NoClear()
        {
            KernelNode< T > next = m_next;
 8010f34:	9801      	ldr	r0, [sp, #4]
 8010f36:	6881      	ldr	r1, [r0, #8]
            KernelNode< T > prev = m_previous;
 8010f38:	68c2      	ldr	r2, [r0, #12]
 8010f3a:	60ca      	str	r2, [r1, #12]
 8010f3c:	6091      	str	r1, [r2, #8]
        public void InsertBefore( KernelNode< T > place )
        {
            if(m_next != null)
            {
                RemoveFromList_NoClear();
            }
 8010f3e:	e7ff      	b.n	8010f40 <KernelNode`1_InsertBefore$22771+0x1c>

            KernelNode< T > prev = place.m_previous;
 8010f40:	9800      	ldr	r0, [sp, #0]
 8010f42:	68c1      	ldr	r1, [r0, #12]
 8010f44:	9a01      	ldr	r2, [sp, #4]
 8010f46:	608a      	str	r2, [r1, #8]
 8010f48:	60d1      	str	r1, [r2, #12]
 8010f4a:	6090      	str	r0, [r2, #8]
 8010f4c:	60c2      	str	r2, [r0, #12]
 8010f4e:	b002      	add	sp, #8
 8010f50:	4770      	bx	lr

08010f52 <SystemTimer_Deregister$16503>:
 8010f52:	b580      	push	{r7, lr}
 8010f54:	b084      	sub	sp, #16
 8010f56:	460a      	mov	r2, r1

            internal RT.KernelNode<Timer> Node
            {
                get
                {
                    return m_node;
 8010f58:	68c9      	ldr	r1, [r1, #12]
        /// <param name="timer">Timer to be removed</param>
        private void Deregister(Timer timer)
        {
            var node = timer.Node;

            if (node.IsLinked)
 8010f5a:	9003      	str	r0, [sp, #12]
 8010f5c:	4608      	mov	r0, r1
 8010f5e:	9102      	str	r1, [sp, #8]
 8010f60:	9201      	str	r2, [sp, #4]
 8010f62:	f000 f80d 	bl	8010f80 <KernelNode`1_get_IsLinked$22778>
 8010f66:	f010 0fff 	tst.w	r0, #255	; 0xff
 8010f6a:	d007      	beq.n	8010f7c <SystemTimer_Deregister$16503+0x2a>
 8010f6c:	e7ff      	b.n	8010f6e <SystemTimer_Deregister$16503+0x1c>
            {
                node.RemoveFromList();
 8010f6e:	9802      	ldr	r0, [sp, #8]
 8010f70:	f7ff ff1c 	bl	8010dac <KernelNode`1_RemoveFromList$22772>

                Refresh();
 8010f74:	9803      	ldr	r0, [sp, #12]
 8010f76:	f7ff fe09 	bl	8010b8c <SystemTimer_Refresh$16500>
            }
 8010f7a:	e7ff      	b.n	8010f7c <SystemTimer_Deregister$16503+0x2a>
 8010f7c:	b004      	add	sp, #16
 8010f7e:	bd80      	pop	{r7, pc}

08010f80 <KernelNode`1_get_IsLinked$22778>:
 8010f80:	b081      	sub	sp, #4
 8010f82:	4601      	mov	r1, r0

        public bool IsLinked
        {
            get
            {
                return m_next != null;
 8010f84:	6880      	ldr	r0, [r0, #8]
 8010f86:	2800      	cmp	r0, #0
 8010f88:	bf18      	it	ne
 8010f8a:	2001      	movne	r0, #1
 8010f8c:	9100      	str	r1, [sp, #0]
 8010f8e:	b001      	add	sp, #4
 8010f90:	4770      	bx	lr

08010f92 <SystemTimer_Handler>:
 8010f92:	b580      	push	{r7, lr}
 8010f94:	b084      	sub	sp, #16
 8010f96:	2000      	movs	r0, #0
 8010f98:	9002      	str	r0, [sp, #8]
 8010f9a:	9003      	str	r0, [sp, #12]
            {
                m_owner.Deregister(this);
            }

            /// <summary>
            /// Call to the Timer handler
 8010f9c:	9001      	str	r0, [sp, #4]
 8010f9e:	f7f3 fb35 	bl	800460c <ProcessorARMv7M_DisableInterrupts$3259>
 8010fa2:	9901      	ldr	r1, [sp, #4]
 8010fa4:	9103      	str	r1, [sp, #12]
 8010fa6:	9003      	str	r0, [sp, #12]
 8010fa8:	9002      	str	r0, [sp, #8]
        //[TS.WellKnownMethod("Hardware_InvokeSystemTimerHandler")]
        private static void SystemTimer_Handler(uint id)
        {
            using(RT.SmartHandles.InterruptState.Disable())
            {
                SystemTimer.Instance.ProcessTimeout( id );
 8010faa:	f7ff fe89 	bl	8010cc0 <SystemTimer_ProcessTimeout$16499>
            

            //
            // Constructor Methods
            //

 8010fae:	9802      	ldr	r0, [sp, #8]
 8010fb0:	f7f3 fb4e 	bl	8004650 <ProcessorARMv7M_DisableInterruptsWithPriorityLevelHigherOrEqualTo$3266>
 8010fb4:	b004      	add	sp, #16
 8010fb6:	bd80      	pop	{r7, pc}

08010fb8 <GpioPinMbed_Dispose$16517>:
 8010fb8:	b580      	push	{r7, lr}
 8010fba:	b084      	sub	sp, #16
 8010fbc:	460a      	mov	r2, r1
 8010fbe:	4603      	mov	r3, r0

        private void Dispose(bool disposing)
        {
            unsafe
            {
                tmp_gpio_free(_gpio);
 8010fc0:	6880      	ldr	r0, [r0, #8]
 8010fc2:	9103      	str	r1, [sp, #12]
 8010fc4:	9302      	str	r3, [sp, #8]
 8010fc6:	9201      	str	r2, [sp, #4]
 8010fc8:	f00c f906 	bl	801d1d8 <tmp_gpio_free>
            }
            if (disposing)
 8010fcc:	9903      	ldr	r1, [sp, #12]
 8010fce:	f011 0fff 	tst.w	r1, #255	; 0xff
 8010fd2:	9000      	str	r0, [sp, #0]
 8010fd4:	d001      	beq.n	8010fda <GpioPinMbed_Dispose$16517+0x22>
 8010fd6:	e7ff      	b.n	8010fd8 <GpioPinMbed_Dispose$16517+0x20>
            {
            }
 8010fd8:	e7ff      	b.n	8010fda <GpioPinMbed_Dispose$16517+0x22>
 8010fda:	b004      	add	sp, #16
 8010fdc:	bd80      	pop	{r7, pc}

08010fde <GpioPinMbed_Write$16521>:
 8010fde:	b580      	push	{r7, lr}
 8010fe0:	b082      	sub	sp, #8
 8010fe2:	460a      	mov	r2, r1
 8010fe4:	4603      	mov	r3, r0

        public override void Write(int value)
        {
            unsafe
            {
                tmp_gpio_write(_gpio, value);
 8010fe6:	6880      	ldr	r0, [r0, #8]
 8010fe8:	9201      	str	r2, [sp, #4]
 8010fea:	9300      	str	r3, [sp, #0]
 8010fec:	f00c f8cc 	bl	801d188 <tmp_gpio_write>
 8010ff0:	b002      	add	sp, #8
 8010ff2:	bd80      	pop	{r7, pc}

08010ff4 <Board_PinToIndex$16924>:
 8010ff4:	b081      	sub	sp, #4
 8010ff6:	4608      	mov	r0, r1
            }
        }
        
        public override int PinToIndex( int pin )
        {
            int port = pin >> Board.GPIO_PORT_SHIFT;
 8010ff8:	130a      	asrs	r2, r1, #12
            int portIndex = pin & 0x000000FF;
 8010ffa:	b2c9      	uxtb	r1, r1

            return ( port * 32 ) + portIndex;
 8010ffc:	eb01 1142 	add.w	r1, r1, r2, lsl #5
 8011000:	9000      	str	r0, [sp, #0]
 8011002:	4608      	mov	r0, r1
 8011004:	b001      	add	sp, #4
 8011006:	4770      	bx	lr

08011008 <HardwareProvider_get_InvalidPin$16622>:
 8011008:	f04f 30ff 	mov.w	r0, #4294967295
 801100c:	4770      	bx	lr
 801100e:	46c0      	nop			; (mov r8, r8)

08011010 <Board_GetSpiChannelIndexFromString$16919>:
 8011010:	b580      	push	{r7, lr}
 8011012:	b082      	sub	sp, #8
 8011014:	4608      	mov	r0, r1
            return _spiDevices;
        }

        public override int GetSpiChannelIndexFromString( string busId )
        {
            switch(busId)
 8011016:	4a0b      	ldr	r2, [pc, #44]	; (8011044 <Board_GetSpiChannelIndexFromString$16919+0x34>)
 8011018:	4b0b      	ldr	r3, [pc, #44]	; (8011048 <Board_GetSpiChannelIndexFromString$16919+0x38>)
 801101a:	447b      	add	r3, pc
 801101c:	441a      	add	r2, r3
 801101e:	9001      	str	r0, [sp, #4]
 8011020:	4608      	mov	r0, r1
 8011022:	4611      	mov	r1, r2
 8011024:	f7f1 f835 	bl	8002092 <String_op_Equality$2494>
 8011028:	f010 0fff 	tst.w	r0, #255	; 0xff
 801102c:	d003      	beq.n	8011036 <Board_GetSpiChannelIndexFromString$16919+0x26>
 801102e:	e7ff      	b.n	8011030 <Board_GetSpiChannelIndexFromString$16919+0x20>
 8011030:	2000      	movs	r0, #0
            {
                case "SPI0":
                    return 0;
 8011032:	9000      	str	r0, [sp, #0]
 8011034:	e003      	b.n	801103e <Board_GetSpiChannelIndexFromString$16919+0x2e>
 8011036:	f04f 30ff 	mov.w	r0, #4294967295
                default:
                    return -1;
 801103a:	9000      	str	r0, [sp, #0]
 801103c:	e7ff      	b.n	801103e <Board_GetSpiChannelIndexFromString$16919+0x2e>
 801103e:	9800      	ldr	r0, [sp, #0]
 8011040:	b002      	add	sp, #8
 8011042:	bd80      	pop	{r7, pc}
 8011044:	e8011c9c 	.word	0xe8011c9c
 8011048:	17ff07b6 	.word	0x17ff07b6

0801104c <HardwareProvider_GetSpiChannels$16627>:
        public override bool GetSpiChannelInfo(int id, out int csLineCount, out int maxFreq, out int minFreq, out bool supports16)
        {
            ChipsetAbstration.Board.SpiChannelInfo channelInfo = Board.Instance.GetSpiChannelInfo(id);
            if (channelInfo == null)
            {
                // The bus was not found
 801104c:	4802      	ldr	r0, [pc, #8]	; (8011058 <HardwareProvider_GetSpiChannels$16627+0xc>)
 801104e:	4903      	ldr	r1, [pc, #12]	; (801105c <HardwareProvider_GetSpiChannels$16627+0x10>)
 8011050:	4479      	add	r1, pc
 8011052:	4408      	add	r0, r1
 8011054:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8011056:	4770      	bx	lr
 8011058:	fffffe3c 	.word	0xfffffe3c
 801105c:	17ff0780 	.word	0x17ff0780

08011060 <KernelNode`1_.ctor$22770>:
 8011060:	b082      	sub	sp, #8
 8011062:	460a      	mov	r2, r1
 8011064:	4603      	mov	r3, r0
 8011066:	6101      	str	r1, [r0, #16]
 8011068:	9301      	str	r3, [sp, #4]
 801106a:	9200      	str	r2, [sp, #0]
 801106c:	b002      	add	sp, #8
 801106e:	4770      	bx	lr

08011070 <Peripherals_Initialize$16669>:
        // Helper Methods
        //

        public override void Initialize()
        {
            RT.BugCheck.AssertInterruptsOff();
 8011070:	b580      	push	{r7, lr}
 8011072:	b082      	sub	sp, #8
 8011074:	f7f3 f8fa 	bl	800426c <BugCheck_AssertInterruptsOff$4655>
 8011078:	480c      	ldr	r0, [pc, #48]	; (80110ac <Peripherals_Initialize$16669+0x3c>)
 801107a:	490d      	ldr	r1, [pc, #52]	; (80110b0 <Peripherals_Initialize$16669+0x40>)
 801107c:	4479      	add	r1, pc
 801107e:	5840      	ldr	r0, [r0, r1]
 8011080:	4a0c      	ldr	r2, [pc, #48]	; (80110b4 <Peripherals_Initialize$16669+0x44>)
 8011082:	5852      	ldr	r2, [r2, r1]
            {
                Drivers.InterruptController.Instance.ProcessFastInterrupt();
            }
        }

        public override ulong GetPerformanceCounterFrequency()
 8011084:	9101      	str	r1, [sp, #4]
 8011086:	4611      	mov	r1, r2
 8011088:	f00c f91c 	bl	801d2c4 <CMSIS_STUB_NVIC_SetPriority>
 801108c:	480a      	ldr	r0, [pc, #40]	; (80110b8 <Peripherals_Initialize$16669+0x48>)
 801108e:	9901      	ldr	r1, [sp, #4]
 8011090:	5840      	ldr	r0, [r0, r1]
 8011092:	4a0a      	ldr	r2, [pc, #40]	; (80110bc <Peripherals_Initialize$16669+0x4c>)
 8011094:	5851      	ldr	r1, [r2, r1]
 8011096:	f00c f915 	bl	801d2c4 <CMSIS_STUB_NVIC_SetPriority>
 801109a:	4809      	ldr	r0, [pc, #36]	; (80110c0 <Peripherals_Initialize$16669+0x50>)
 801109c:	9901      	ldr	r1, [sp, #4]
 801109e:	5840      	ldr	r0, [r0, r1]
 80110a0:	4a08      	ldr	r2, [pc, #32]	; (80110c4 <Peripherals_Initialize$16669+0x54>)
 80110a2:	5851      	ldr	r1, [r2, r1]
 80110a4:	f00c f90e 	bl	801d2c4 <CMSIS_STUB_NVIC_SetPriority>
 80110a8:	b002      	add	sp, #8
 80110aa:	bd80      	pop	{r7, pc}
 80110ac:	e80254b4 	.word	0xe80254b4
 80110b0:	17ff0754 	.word	0x17ff0754
 80110b4:	e80254b8 	.word	0xe80254b8
 80110b8:	e80254bc 	.word	0xe80254bc
 80110bc:	e80254c0 	.word	0xe80254c0
 80110c0:	e80254c4 	.word	0xe80254c4
 80110c4:	e80254c8 	.word	0xe80254c8

080110c8 <InterruptController_Initialize$16787>:
 80110c8:	b580      	push	{r7, lr}
 80110ca:	b082      	sub	sp, #8
 80110cc:	4809      	ldr	r0, [pc, #36]	; (80110f4 <InterruptController_Initialize$16787+0x2c>)
 80110ce:	490a      	ldr	r1, [pc, #40]	; (80110f8 <InterruptController_Initialize$16787+0x30>)
 80110d0:	4479      	add	r1, pc
 80110d2:	4408      	add	r0, r1
 80110d4:	4a09      	ldr	r2, [pc, #36]	; (80110fc <InterruptController_Initialize$16787+0x34>)
 80110d6:	440a      	add	r2, r1
 80110d8:	9101      	str	r1, [sp, #4]
 80110da:	4611      	mov	r1, r2
 80110dc:	f7ef fb70 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 80110e0:	9000      	str	r0, [sp, #0]
 80110e2:	f000 f8fd 	bl	80112e0 <KernelList`1_.ctor$22789>
 80110e6:	4806      	ldr	r0, [pc, #24]	; (8011100 <InterruptController_Initialize$16787+0x38>)
 80110e8:	9901      	ldr	r1, [sp, #4]
 80110ea:	4408      	add	r0, r1
 80110ec:	9a00      	ldr	r2, [sp, #0]
 80110ee:	6082      	str	r2, [r0, #8]
 80110f0:	b002      	add	sp, #8
 80110f2:	bd80      	pop	{r7, pc}
 80110f4:	ffffea38 	.word	0xffffea38
 80110f8:	17ff0700 	.word	0x17ff0700
 80110fc:	e8014b0c 	.word	0xe8014b0c
 8011100:	ffffea80 	.word	0xffffea80

08011104 <ContextSwitchTimer_Initialize$16806>:
 8011104:	b580      	push	{r7, lr}
 8011106:	b082      	sub	sp, #8
 8011108:	4812      	ldr	r0, [pc, #72]	; (8011154 <ContextSwitchTimer_Initialize$16806+0x50>)
 801110a:	4913      	ldr	r1, [pc, #76]	; (8011158 <ContextSwitchTimer_Initialize$16806+0x54>)
 801110c:	4479      	add	r1, pc
 801110e:	4408      	add	r0, r1
 8011110:	4a12      	ldr	r2, [pc, #72]	; (801115c <ContextSwitchTimer_Initialize$16806+0x58>)
 8011112:	440a      	add	r2, r1
 8011114:	6082      	str	r2, [r0, #8]
                {
                    return (m_settings & InterruptSettings.EdgeSensitive) != 0;
                }
            }

            public bool IsActiveHighOrRising
 8011116:	4a12      	ldr	r2, [pc, #72]	; (8011160 <ContextSwitchTimer_Initialize$16806+0x5c>)
 8011118:	440a      	add	r2, r1
 801111a:	4b12      	ldr	r3, [pc, #72]	; (8011164 <ContextSwitchTimer_Initialize$16806+0x60>)
 801111c:	4419      	add	r1, r3
 801111e:	9001      	str	r0, [sp, #4]
 8011120:	4610      	mov	r0, r2
 8011122:	f7ef fb4d 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8011126:	9000      	str	r0, [sp, #0]
 8011128:	f000 f90e 	bl	8011348 <SysTickTimer_.ctor$16875>
 801112c:	9800      	ldr	r0, [sp, #0]
 801112e:	9901      	ldr	r1, [sp, #4]
 8011130:	60c8      	str	r0, [r1, #12]
 8011132:	2200      	movs	r2, #0
 8011134:	614a      	str	r2, [r1, #20]
 8011136:	610a      	str	r2, [r1, #16]
 8011138:	618a      	str	r2, [r1, #24]
                [RT.Inline]
                get
                {
                    return (m_settings & InterruptSettings.ActiveHighOrRising) != 0;;
                }
            }
 801113a:	f000 f90d 	bl	8011358 <ContextSwitchTimer_Disable$16815>
 801113e:	f64e 3000 	movw	r0, #60160	; 0xeb00
 8011142:	f2c0 0041 	movt	r0, #65	; 0x41
 8011146:	9901      	ldr	r1, [sp, #4]
 8011148:	61c8      	str	r0, [r1, #28]
 801114a:	2001      	movs	r0, #1
 801114c:	f881 0020 	strb.w	r0, [r1, #32]
 8011150:	b002      	add	sp, #8
 8011152:	bd80      	pop	{r7, pc}
 8011154:	ffffea5c 	.word	0xffffea5c
 8011158:	17ff06c4 	.word	0x17ff06c4
 801115c:	ffffea40 	.word	0xffffea40
 8011160:	ffffea38 	.word	0xffffea38
 8011164:	e8014b9c 	.word	0xe8014b9c

08011168 <Peripherals_CauseInterrupt$16673>:
        public override void DisableInterrupt( uint index )
        {
        }

        public override void CauseInterrupt()
        {
 8011168:	b580      	push	{r7, lr}
 801116a:	4803      	ldr	r0, [pc, #12]	; (8011178 <Peripherals_CauseInterrupt$16673+0x10>)
 801116c:	4903      	ldr	r1, [pc, #12]	; (801117c <Peripherals_CauseInterrupt$16673+0x14>)
 801116e:	4479      	add	r1, pc
 8011170:	5840      	ldr	r0, [r0, r1]
            ProcessorARMv7M.CompleteContextSwitch( ); 
 8011172:	f7f3 ffe5 	bl	8005140 <ProcessorARMv7M_RaiseSystemHandler$3240>
 8011176:	bd80      	pop	{r7, pc}
 8011178:	e80254cc 	.word	0xe80254cc
 801117c:	17ff0662 	.word	0x17ff0662

08011180 <Peripherals_WaitForInterrupt$16675>:
        {
            Drivers.InterruptController.Instance.ContinueUnderNormalInterrupt(dlg);
        }

        public override void WaitForInterrupt()
        {
 8011180:	b580      	push	{r7, lr}
 8011182:	e7ff      	b.n	8011184 <Peripherals_WaitForInterrupt$16675+0x4>

            while (true)
            {
                ProcessorARMv7M.WaitForEvent( );
 8011184:	f00b fec6 	bl	801cf14 <CMSIS_STUB_POWER_WaitForEvent>
            }
 8011188:	e7fc      	b.n	8011184 <Peripherals_WaitForInterrupt$16675+0x4>

0801118a <Peripherals_ReadPerformanceCounter$16679>:
        [RT.Inline]
        [RT.DisableNullChecks()]
        public override uint ReadPerformanceCounter()
        {
            // TODO: use a different timer
            return Drivers.ContextSwitchTimer.Instance.CurrentTimeRaw;
 801118a:	b580      	push	{r7, lr}
 801118c:	f000 f801 	bl	8011192 <ContextSwitchTimer_get_CurrentTimeRaw$16810>
 8011190:	bd80      	pop	{r7, pc}

08011192 <ContextSwitchTimer_get_CurrentTimeRaw$16810>:
        //--//
        
        private SysTick      m_sysTick;
        private SysTickTimer m_SysTickTimer;
        private ulong        m_accumulator;
        private uint         m_latestMatch;
 8011192:	b580      	push	{r7, lr}
 8011194:	f00c f958 	bl	801d448 <CMSIS_STUB_SysTick_GetVAL>
 8011198:	bd80      	pop	{r7, pc}

0801119a <Storage_InitializeStorage$16683>:
 801119a:	4770      	bx	lr

0801119c <NVIC_SetPriorityGrouping$16726>:
            return CMSIS_STUB_NVIC_GetPriority( irq );
        }
        
        public static void SetPriorityGrouping( uint split )
        {
            CMSIS_STUB_NVIC_SetPriorityGrouping( split );
 801119c:	b580      	push	{r7, lr}
 801119e:	2000      	movs	r0, #0
 80111a0:	f00c f884 	bl	801d2ac <CMSIS_STUB_NVIC_SetPriorityGrouping>
 80111a4:	bd80      	pop	{r7, pc}

080111a6 <SysTick_get_TenMillisecondsCalibrationValue$16753>:

        public uint TenMillisecondsCalibrationValue
        {
            get
            {
                return CMSIS_STUB_SysTick_GetCALIB( ) & SYST_CALIB__TENMS___MASK;
 80111a6:	b580      	push	{r7, lr}
 80111a8:	f00c f964 	bl	801d474 <CMSIS_STUB_SysTick_GetCALIB>
 80111ac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80111b0:	bd80      	pop	{r7, pc}

080111b2 <SysTick_get_HasRef$16754>:

        public bool HasRef
        {
            get
            {
                return ((CMSIS_STUB_SysTick_GetCALIB() & SYST_CALIB__NOREF__MASK) == SYST_CALIB__NOREF__HASREF);
 80111b2:	b580      	push	{r7, lr}
 80111b4:	f00c f95e 	bl	801d474 <CMSIS_STUB_SysTick_GetCALIB>
 80111b8:	2100      	movs	r1, #0
 80111ba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80111be:	bf08      	it	eq
 80111c0:	2101      	moveq	r1, #1
 80111c2:	4608      	mov	r0, r1
 80111c4:	bd80      	pop	{r7, pc}

080111c6 <SysTick_get_IsPrecise$16755>:

        public bool IsPrecise
        {
            get
            {
                return  (CMSIS_STUB_SysTick_GetCALIB() & SYST_CALIB__SKEW__MASK) == SYST_CALIB__SKEW__PRECISE;
 80111c6:	b580      	push	{r7, lr}
 80111c8:	f00c f954 	bl	801d474 <CMSIS_STUB_SysTick_GetCALIB>
 80111cc:	2100      	movs	r1, #0
 80111ce:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80111d2:	bf08      	it	eq
 80111d4:	2101      	moveq	r1, #1
 80111d6:	4608      	mov	r0, r1
 80111d8:	bd80      	pop	{r7, pc}

080111da <SysTick_get_SystemCoreClock$16756>:

        public uint SystemCoreClock
        {
            get
            {
                return CMSIS_STUB_CLOCK__GetSystemCoreClock();
 80111da:	b580      	push	{r7, lr}
 80111dc:	f00b fe02 	bl	801cde4 <CMSIS_STUB_CLOCK__GetSystemCoreClock>
 80111e0:	bd80      	pop	{r7, pc}

080111e2 <Callback_Invoke$16869>:
 80111e2:	b580      	push	{r7, lr}
 80111e4:	b08a      	sub	sp, #40	; 0x28
 80111e6:	4684      	mov	ip, r0
 80111e8:	6900      	ldr	r0, [r0, #16]
 80111ea:	2800      	cmp	r0, #0
 80111ec:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 80111f0:	9308      	str	r3, [sp, #32]
 80111f2:	9207      	str	r2, [sp, #28]
 80111f4:	9106      	str	r1, [sp, #24]
 80111f6:	9005      	str	r0, [sp, #20]
 80111f8:	d006      	beq.n	8011208 <Callback_Invoke$16869+0x26>
 80111fa:	e7ff      	b.n	80111fc <Callback_Invoke$16869+0x1a>
 80111fc:	9805      	ldr	r0, [sp, #20]
 80111fe:	6881      	ldr	r1, [r0, #8]
 8011200:	2200      	movs	r2, #0
 8011202:	9104      	str	r1, [sp, #16]
 8011204:	9203      	str	r2, [sp, #12]
 8011206:	e00f      	b.n	8011228 <Callback_Invoke$16869+0x46>
 8011208:	9809      	ldr	r0, [sp, #36]	; 0x24
 801120a:	6880      	ldr	r0, [r0, #8]
 801120c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801120e:	68ca      	ldr	r2, [r1, #12]
 8011210:	9906      	ldr	r1, [sp, #24]
 8011212:	9b07      	ldr	r3, [sp, #28]
 8011214:	9202      	str	r2, [sp, #8]
 8011216:	461a      	mov	r2, r3
 8011218:	9b08      	ldr	r3, [sp, #32]
 801121a:	f8dd c008 	ldr.w	ip, [sp, #8]
 801121e:	47e0      	blx	ip
 8011220:	e000      	b.n	8011224 <Callback_Invoke$16869+0x42>
 8011222:	e7ff      	b.n	8011224 <Callback_Invoke$16869+0x42>
 8011224:	b00a      	add	sp, #40	; 0x28
 8011226:	bd80      	pop	{r7, pc}
 8011228:	9803      	ldr	r0, [sp, #12]
 801122a:	9904      	ldr	r1, [sp, #16]
 801122c:	4288      	cmp	r0, r1
 801122e:	9001      	str	r0, [sp, #4]
 8011230:	daf7      	bge.n	8011222 <Callback_Invoke$16869+0x40>
 8011232:	e7ff      	b.n	8011234 <Callback_Invoke$16869+0x52>
 8011234:	9805      	ldr	r0, [sp, #20]
 8011236:	9901      	ldr	r1, [sp, #4]
 8011238:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 801123c:	68d2      	ldr	r2, [r2, #12]
 801123e:	6890      	ldr	r0, [r2, #8]
 8011240:	68d2      	ldr	r2, [r2, #12]
 8011242:	9906      	ldr	r1, [sp, #24]
 8011244:	9b07      	ldr	r3, [sp, #28]
 8011246:	9200      	str	r2, [sp, #0]
 8011248:	461a      	mov	r2, r3
 801124a:	9b08      	ldr	r3, [sp, #32]
 801124c:	f8dd c000 	ldr.w	ip, [sp]
 8011250:	47e0      	blx	ip
 8011252:	9801      	ldr	r0, [sp, #4]
 8011254:	1c41      	adds	r1, r0, #1
 8011256:	9103      	str	r1, [sp, #12]
 8011258:	e7e6      	b.n	8011228 <Callback_Invoke$16869+0x46>

0801125a <ThreadManager_TimeQuantumExpired$16777>:
 801125a:	b580      	push	{r7, lr}
 801125c:	b082      	sub	sp, #8
 801125e:	4601      	mov	r1, r0
        
        //--//

        private void TimeQuantumExpired( Drivers.ContextSwitchTimer.SysTickTimer sysTickTimer, ulong currentTime )
        {
            TimeQuantumExpired();
 8011260:	9101      	str	r1, [sp, #4]
 8011262:	f000 f82b 	bl	80112bc <ThreadManager_TimeQuantumExpired$16776>
 8011266:	b002      	add	sp, #8
 8011268:	bd80      	pop	{r7, pc}
 801126a:	46c0      	nop			; (mov r8, r8)

0801126c <ContextSwitchTimer_CreateTimer$16808>:
 801126c:	b580      	push	{r7, lr}
 801126e:	b084      	sub	sp, #16
 8011270:	4601      	mov	r1, r0
            return ( ( ( ( GetCoreClockMhz( ) * GetFactoryCalibrationValue( ) ) / 100 ) - 1 ) * ms) / 10; 
        }

        public SysTickTimer CreateTimer( Callback callback )
        {
            m_SysTickTimer.Expired = callback;
 8011272:	4a08      	ldr	r2, [pc, #32]	; (8011294 <ContextSwitchTimer_CreateTimer$16808+0x28>)
 8011274:	4b08      	ldr	r3, [pc, #32]	; (8011298 <ContextSwitchTimer_CreateTimer$16808+0x2c>)
 8011276:	447b      	add	r3, pc
 8011278:	441a      	add	r2, r3
 801127a:	68d3      	ldr	r3, [r2, #12]
 801127c:	9003      	str	r0, [sp, #12]
 801127e:	4618      	mov	r0, r3
 8011280:	9b03      	ldr	r3, [sp, #12]
 8011282:	9102      	str	r1, [sp, #8]
 8011284:	4619      	mov	r1, r3
 8011286:	9201      	str	r2, [sp, #4]
 8011288:	f000 f8b8 	bl	80113fc <SysTickTimer_set_Expired$16878>

            return m_SysTickTimer;
 801128c:	9801      	ldr	r0, [sp, #4]
 801128e:	68c0      	ldr	r0, [r0, #12]
 8011290:	b004      	add	sp, #16
 8011292:	bd80      	pop	{r7, pc}
 8011294:	ffffea5c 	.word	0xffffea5c
 8011298:	17ff055a 	.word	0x17ff055a

0801129c <SysTickTimer_Schedule$16884>:
 801129c:	b580      	push	{r7, lr}
 801129e:	b082      	sub	sp, #8
 80112a0:	4601      	mov	r1, r0
                }
            }

            public void Schedule()
            {
                this.RelativeTimeout = m_owner.m_reload20ms;
 80112a2:	6882      	ldr	r2, [r0, #8]
 80112a4:	69d2      	ldr	r2, [r2, #28]
 80112a6:	9101      	str	r1, [sp, #4]
 80112a8:	4611      	mov	r1, r2
 80112aa:	f000 f945 	bl	8011538 <SysTickTimer_set_RelativeTimeout$16883>
 80112ae:	b002      	add	sp, #8
 80112b0:	bd80      	pop	{r7, pc}

080112b2 <SysTickTimer_Cancel$16879>:
 80112b2:	b580      	push	{r7, lr}
                }
            }

            public void Cancel()
            {
                m_owner.Disable( this );
 80112b4:	f000 f850 	bl	8011358 <ContextSwitchTimer_Disable$16815>
 80112b8:	bd80      	pop	{r7, pc}
 80112ba:	46c0      	nop			; (mov r8, r8)

080112bc <ThreadManager_TimeQuantumExpired$16776>:
 80112bc:	b580      	push	{r7, lr}
 80112be:	b082      	sub	sp, #8
 80112c0:	4601      	mov	r1, r0
        public override void TimeQuantumExpired()
        {
            //
            // this will cause the reschedule
            //
            base.TimeQuantumExpired( );
 80112c2:	9101      	str	r1, [sp, #4]
 80112c4:	f7f3 fec9 	bl	800505a <ThreadManager_TimeQuantumExpired$3168>
 80112c8:	4803      	ldr	r0, [pc, #12]	; (80112d8 <ThreadManager_TimeQuantumExpired$16776+0x1c>)
 80112ca:	4904      	ldr	r1, [pc, #16]	; (80112dc <ThreadManager_TimeQuantumExpired$16776+0x20>)
 80112cc:	4479      	add	r1, pc
 80112ce:	5840      	ldr	r0, [r0, r1]

            //
            // stage a PendSV request to complete the ContextSwitch
            //
            ProcessorARMv7M.CompleteContextSwitch( );
 80112d0:	f7f3 ff36 	bl	8005140 <ProcessorARMv7M_RaiseSystemHandler$3240>
 80112d4:	b002      	add	sp, #8
 80112d6:	bd80      	pop	{r7, pc}
 80112d8:	e80254d4 	.word	0xe80254d4
 80112dc:	17ff0504 	.word	0x17ff0504

080112e0 <KernelList`1_.ctor$22789>:
 80112e0:	b580      	push	{r7, lr}
 80112e2:	b086      	sub	sp, #24
 80112e4:	4601      	mov	r1, r0
        //
        // Constructor Methods
        //

        public KernelNode( T target )
        {
 80112e6:	4a15      	ldr	r2, [pc, #84]	; (801133c <KernelList`1_.ctor$22789+0x5c>)
 80112e8:	4b15      	ldr	r3, [pc, #84]	; (8011340 <KernelList`1_.ctor$22789+0x60>)
 80112ea:	447b      	add	r3, pc
 80112ec:	441a      	add	r2, r3
 80112ee:	f8df c054 	ldr.w	ip, [pc, #84]	; 8011344 <KernelList`1_.ctor$22789+0x64>
 80112f2:	4463      	add	r3, ip
 80112f4:	9005      	str	r0, [sp, #20]
 80112f6:	4610      	mov	r0, r2
 80112f8:	9104      	str	r1, [sp, #16]
 80112fa:	4619      	mov	r1, r3
 80112fc:	9303      	str	r3, [sp, #12]
 80112fe:	9202      	str	r2, [sp, #8]
 8011300:	f7ef fa5e 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8011304:	9001      	str	r0, [sp, #4]
 8011306:	f000 fb29 	bl	801195c <KernelNode`1_.ctor$22802>
 801130a:	9801      	ldr	r0, [sp, #4]
 801130c:	9905      	ldr	r1, [sp, #20]
 801130e:	6088      	str	r0, [r1, #8]
            m_target = target;
 8011310:	9802      	ldr	r0, [sp, #8]
 8011312:	9903      	ldr	r1, [sp, #12]
 8011314:	f7ef fa54 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 8011318:	9000      	str	r0, [sp, #0]
 801131a:	f000 fb1f 	bl	801195c <KernelNode`1_.ctor$22802>
 801131e:	9800      	ldr	r0, [sp, #0]
 8011320:	9905      	ldr	r1, [sp, #20]
 8011322:	60c8      	str	r0, [r1, #12]
        }

 8011324:	6888      	ldr	r0, [r1, #8]
 8011326:	9900      	ldr	r1, [sp, #0]
 8011328:	f000 fb1f 	bl	801196a <KernelNode`1_set_Next$22814>
        //
 801132c:	9805      	ldr	r0, [sp, #20]
 801132e:	6881      	ldr	r1, [r0, #8]
 8011330:	68c0      	ldr	r0, [r0, #12]
 8011332:	f000 fb22 	bl	801197a <KernelNode`1_set_Previous$22816>
 8011336:	b006      	add	sp, #24
 8011338:	bd80      	pop	{r7, pc}
 801133a:	46c0      	nop			; (mov r8, r8)
 801133c:	ffffea38 	.word	0xffffea38
 8011340:	17ff04e6 	.word	0x17ff04e6
 8011344:	e8014e8c 	.word	0xe8014e8c

08011348 <SysTickTimer_.ctor$16875>:
 8011348:	b580      	push	{r7, lr}
 801134a:	b082      	sub	sp, #8
 801134c:	4601      	mov	r1, r0
        public int GetLowerBound( int dimension )
        {
            TS.VTable vTable = TS.VTable.Get( this );

            TS.TypeRepresentation ts = vTable.TypeInfo;

 801134e:	9101      	str	r1, [sp, #4]
 8011350:	f000 f8e2 	bl	8011518 <SysTickTimer_.ctor$16876>
 8011354:	b002      	add	sp, #8
 8011356:	bd80      	pop	{r7, pc}

08011358 <ContextSwitchTimer_Disable$16815>:
 8011358:	b580      	push	{r7, lr}
 801135a:	e7ff      	b.n	801135c <ContextSwitchTimer_Disable$16815+0x4>
 801135c:	f00c f856 	bl	801d40c <CMSIS_STUB_SysTick_GetCTRL>
 8011360:	f020 0001 	bic.w	r0, r0, #1
 8011364:	f00c f858 	bl	801d418 <CMSIS_STUB_SysTick_SetCTRL>
 8011368:	e7ff      	b.n	801136a <ContextSwitchTimer_Disable$16815+0x12>
 801136a:	bd80      	pop	{r7, pc}

0801136c <ContextSwitchTimer_GetTicksForQuantumValue$16807>:
 801136c:	b580      	push	{r7, lr}
 801136e:	b086      	sub	sp, #24
        }
        
        [RT.Inline]
        private bool HasRef( )
        {
            return m_sysTick.HasRef;
 8011370:	9105      	str	r1, [sp, #20]
 8011372:	f7ff ff1e 	bl	80111b2 <SysTick_get_HasRef$16754>
            //
            // We use SysTick and handle wrap around for values larger than 24 bit precision
            // We will assume the device can be programmed with teh calibration value from factory settings
            // TODO: need to add logic to handle the case where we cannot count in the calibration value
            //
            RT.BugCheck.Assert( HasRef() && IsPrecise(), RT.BugCheck.StopCode.FailedBootstrap );
 8011376:	f010 0fff 	tst.w	r0, #255	; 0xff
 801137a:	d005      	beq.n	8011388 <ContextSwitchTimer_GetTicksForQuantumValue$16807+0x1c>
 801137c:	e7ff      	b.n	801137e <ContextSwitchTimer_GetTicksForQuantumValue$16807+0x12>
        }

        [RT.Inline]
        private bool IsPrecise( )
        {
            return m_sysTick.IsPrecise;
 801137e:	f7ff ff22 	bl	80111c6 <SysTick_get_IsPrecise$16755>
        }
 8011382:	b2c0      	uxtb	r0, r0
            //
            // We use SysTick and handle wrap around for values larger than 24 bit precision
            // We will assume the device can be programmed with teh calibration value from factory settings
            // TODO: need to add logic to handle the case where we cannot count in the calibration value
            //
            RT.BugCheck.Assert( HasRef() && IsPrecise(), RT.BugCheck.StopCode.FailedBootstrap );
 8011384:	9004      	str	r0, [sp, #16]
 8011386:	e002      	b.n	801138e <ContextSwitchTimer_GetTicksForQuantumValue$16807+0x22>
 8011388:	2000      	movs	r0, #0
 801138a:	9004      	str	r0, [sp, #16]
 801138c:	e7ff      	b.n	801138e <ContextSwitchTimer_GetTicksForQuantumValue$16807+0x22>
 801138e:	9804      	ldr	r0, [sp, #16]

            //
            // Constructor Methods
            //

            internal SysTickTimer( ContextSwitchTimer owner ) : this( owner, null )
 8011390:	f010 0fff 	tst.w	r0, #255	; 0xff
 8011394:	d107      	bne.n	80113a6 <ContextSwitchTimer_GetTicksForQuantumValue$16807+0x3a>
 8011396:	e7ff      	b.n	8011398 <ContextSwitchTimer_GetTicksForQuantumValue$16807+0x2c>
 8011398:	4816      	ldr	r0, [pc, #88]	; (80113f4 <ContextSwitchTimer_GetTicksForQuantumValue$16807+0x88>)
 801139a:	4917      	ldr	r1, [pc, #92]	; (80113f8 <ContextSwitchTimer_GetTicksForQuantumValue$16807+0x8c>)
 801139c:	4479      	add	r1, pc
 801139e:	5840      	ldr	r0, [r0, r1]
            {
            }
 80113a0:	f7ee ffb0 	bl	8000304 <BugCheck_Raise$4648>

 80113a4:	e7ff      	b.n	80113a6 <ContextSwitchTimer_GetTicksForQuantumValue$16807+0x3a>
        }

        [RT.Inline]
        private uint GetCoreClockMhz( )
        {
            return (uint)( m_sysTick.SystemCoreClock / 1000000 ); 
 80113a6:	f7ff ff18 	bl	80111da <SysTick_get_SystemCoreClock$16756>
 80113aa:	f64d 6183 	movw	r1, #56963	; 0xde83
 80113ae:	f2c4 311b 	movt	r1, #17179	; 0x431b
 80113b2:	fba0 0101 	umull	r0, r1, r0, r1
 80113b6:	0c89      	lsrs	r1, r1, #18
        }

        [RT.Inline]
        private uint GetFactoryCalibrationValue( )
        {
            return m_sysTick.TenMillisecondsCalibrationValue;
 80113b8:	9003      	str	r0, [sp, #12]
 80113ba:	9102      	str	r1, [sp, #8]
 80113bc:	f7ff fef3 	bl	80111a6 <SysTick_get_TenMillisecondsCalibrationValue$16753>
            RT.BugCheck.Assert( HasRef() && IsPrecise(), RT.BugCheck.StopCode.FailedBootstrap );

            //
            // match = (coreclock / 100) - 1 ) * 2
            //
            return ( ( ( ( GetCoreClockMhz( ) * GetFactoryCalibrationValue( ) ) / 100 ) - 1 ) * ms) / 10; 
 80113c0:	9902      	ldr	r1, [sp, #8]
 80113c2:	4348      	muls	r0, r1
 80113c4:	f248 511f 	movw	r1, #34079	; 0x851f
 80113c8:	f2c5 11eb 	movt	r1, #20971	; 0x51eb
 80113cc:	fba0 0101 	umull	r0, r1, r0, r1
 80113d0:	f04f 32ff 	mov.w	r2, #4294967295
 80113d4:	eb02 1151 	add.w	r1, r2, r1, lsr #5
 80113d8:	9a05      	ldr	r2, [sp, #20]
 80113da:	4351      	muls	r1, r2
 80113dc:	f64c 43cd 	movw	r3, #52429	; 0xcccd
 80113e0:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
 80113e4:	fba1 1303 	umull	r1, r3, r1, r3
 80113e8:	08db      	lsrs	r3, r3, #3
 80113ea:	9001      	str	r0, [sp, #4]
 80113ec:	4618      	mov	r0, r3
 80113ee:	9100      	str	r1, [sp, #0]
 80113f0:	b006      	add	sp, #24
 80113f2:	bd80      	pop	{r7, pc}
 80113f4:	e80254d8 	.word	0xe80254d8
 80113f8:	17ff0434 	.word	0x17ff0434

080113fc <SysTickTimer_set_Expired$16878>:
 80113fc:	b082      	sub	sp, #8
 80113fe:	460a      	mov	r2, r1
 8011400:	4603      	mov	r3, r0
 8011402:	6101      	str	r1, [r0, #16]
 8011404:	9301      	str	r3, [sp, #4]
 8011406:	9200      	str	r2, [sp, #0]
 8011408:	b002      	add	sp, #8
 801140a:	4770      	bx	lr

0801140c <ContextSwitchTimer_ProcessTimeout$16813>:
 801140c:	b580      	push	{r7, lr}
 801140e:	480a      	ldr	r0, [pc, #40]	; (8011438 <ContextSwitchTimer_ProcessTimeout$16813+0x2c>)
 8011410:	490a      	ldr	r1, [pc, #40]	; (801143c <ContextSwitchTimer_ProcessTimeout$16813+0x30>)
 8011412:	4479      	add	r1, pc
 8011414:	4408      	add	r0, r1
 8011416:	6901      	ldr	r1, [r0, #16]
 8011418:	6942      	ldr	r2, [r0, #20]

        //--//

        private void ProcessTimeout( )
        {
            m_accumulator += m_latestMatch;
 801141a:	6983      	ldr	r3, [r0, #24]
 801141c:	18c9      	adds	r1, r1, r3
 801141e:	f142 0200 	adc.w	r2, r2, #0
 8011422:	6101      	str	r1, [r0, #16]
 8011424:	6142      	str	r2, [r0, #20]

            m_SysTickTimer.Invoke( m_accumulator + c_InvokeOverhead );
 8011426:	68c0      	ldr	r0, [r0, #12]
 8011428:	310a      	adds	r1, #10
 801142a:	f142 0300 	adc.w	r3, r2, #0
 801142e:	460a      	mov	r2, r1
 8011430:	f000 f806 	bl	8011440 <SysTickTimer_Invoke$16881>
 8011434:	bd80      	pop	{r7, pc}
 8011436:	46c0      	nop			; (mov r8, r8)
 8011438:	ffffea5c 	.word	0xffffea5c
 801143c:	17ff03be 	.word	0x17ff03be

08011440 <SysTickTimer_Invoke$16881>:
 8011440:	b510      	push	{r4, lr}
 8011442:	b084      	sub	sp, #16
 8011444:	4619      	mov	r1, r3
 8011446:	4694      	mov	ip, r2
 8011448:	4686      	mov	lr, r0

            //--//
            
            internal void Invoke( ulong currentTime )
            {
                m_callback( this, currentTime );
 801144a:	6904      	ldr	r4, [r0, #16]
 801144c:	9003      	str	r0, [sp, #12]
 801144e:	4620      	mov	r0, r4
 8011450:	9c03      	ldr	r4, [sp, #12]
 8011452:	9102      	str	r1, [sp, #8]
 8011454:	4621      	mov	r1, r4
 8011456:	f8cd c004 	str.w	ip, [sp, #4]
 801145a:	f8cd e000 	str.w	lr, [sp]
 801145e:	f7ff fec0 	bl	80111e2 <Callback_Invoke$16869>
 8011462:	b004      	add	sp, #16
 8011464:	bd10      	pop	{r4, pc}
 8011466:	46c0      	nop			; (mov r8, r8)

08011468 <ContextSwitchTimer_Enable$16814>:
 8011468:	b580      	push	{r7, lr}
 801146a:	b086      	sub	sp, #24
 801146c:	460a      	mov	r2, r1
 801146e:	4603      	mov	r3, r0
 8011470:	f04f 0c00 	mov.w	ip, #0
        // Helper Methods
        //

        public void Initialize()
        {
            m_sysTick      = CMSIS.SysTick.Instance;
 8011474:	9005      	str	r0, [sp, #20]
 8011476:	4660      	mov	r0, ip
 8011478:	9104      	str	r1, [sp, #16]
 801147a:	f8cd c00c 	str.w	ip, [sp, #12]
 801147e:	9202      	str	r2, [sp, #8]
 8011480:	9301      	str	r3, [sp, #4]
 8011482:	f00b ffe9 	bl	801d458 <CMSIS_STUB_SysTick_SetVAL>
        {
            // Clear previous interrupts 
            ResetAndClear();

            // set match
            SetMatchAndStart( sysTickTimer.RelativeTimeout );
 8011486:	9804      	ldr	r0, [sp, #16]
 8011488:	f000 f82c 	bl	80114e4 <SysTickTimer_get_RelativeTimeout$16882>
 801148c:	9905      	ldr	r1, [sp, #20]
 801148e:	6188      	str	r0, [r1, #24]
            m_latestMatch = match;

            // 
            // Restarting causes the match value to be picked up
            // 
            m_sysTick.Match   = match;
 8011490:	4602      	mov	r2, r0
 8011492:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8011496:	9803      	ldr	r0, [sp, #12]
 8011498:	bf38      	it	cc
 801149a:	2001      	movcc	r0, #1

            //
            // Constructor Methods
            //

            internal SysTickTimer( ContextSwitchTimer owner ) : this( owner, null )
 801149c:	2800      	cmp	r0, #0
 801149e:	9200      	str	r2, [sp, #0]
 80114a0:	d107      	bne.n	80114b2 <ContextSwitchTimer_Enable$16814+0x4a>
 80114a2:	e7ff      	b.n	80114a4 <ContextSwitchTimer_Enable$16814+0x3c>
 80114a4:	480b      	ldr	r0, [pc, #44]	; (80114d4 <ContextSwitchTimer_Enable$16814+0x6c>)
 80114a6:	490c      	ldr	r1, [pc, #48]	; (80114d8 <ContextSwitchTimer_Enable$16814+0x70>)
 80114a8:	4479      	add	r1, pc
 80114aa:	5840      	ldr	r0, [r0, r1]
            {
            }
 80114ac:	f7ee ff2a 	bl	8000304 <BugCheck_Raise$4648>

 80114b0:	e7ff      	b.n	80114b2 <ContextSwitchTimer_Enable$16814+0x4a>
                set
                {
                    m_timeout = value;

                    m_owner.Enable( this );
                }
 80114b2:	9800      	ldr	r0, [sp, #0]
 80114b4:	f00b ffba 	bl	801d42c <CMSIS_STUB_SysTick_SetLOAD>

            //
            // Constructor Methods
            //

            internal SysTickTimer( ContextSwitchTimer owner ) : this( owner, null )
 80114b8:	e7ff      	b.n	80114ba <ContextSwitchTimer_Enable$16814+0x52>
        // Helper Methods
        //

        public void Initialize()
        {
            m_sysTick      = CMSIS.SysTick.Instance;
 80114ba:	2000      	movs	r0, #0
 80114bc:	f00b ffcc 	bl	801d458 <CMSIS_STUB_SysTick_SetVAL>
            ulong now = this.CurrentTime;
            ulong last = now;

            int testCount = 20;
            var testTimer = this.CreateTimer(
                    delegate ( SysTickTimer timer, ulong currentTime )
 80114c0:	e7ff      	b.n	80114c2 <ContextSwitchTimer_Enable$16814+0x5a>
 80114c2:	4806      	ldr	r0, [pc, #24]	; (80114dc <ContextSwitchTimer_Enable$16814+0x74>)
 80114c4:	4906      	ldr	r1, [pc, #24]	; (80114e0 <ContextSwitchTimer_Enable$16814+0x78>)
 80114c6:	4479      	add	r1, pc
 80114c8:	5840      	ldr	r0, [r0, r1]
                    {   
                        testCount--;

 80114ca:	f00b ffa5 	bl	801d418 <CMSIS_STUB_SysTick_SetCTRL>
                        RT.BugCheck.Log( "[handler] ct=0x%08x%08x, delta=0x%08x%08x",
 80114ce:	e7ff      	b.n	80114d0 <ContextSwitchTimer_Enable$16814+0x68>
 80114d0:	b006      	add	sp, #24
 80114d2:	bd80      	pop	{r7, pc}
 80114d4:	e80254e0 	.word	0xe80254e0
 80114d8:	17ff0328 	.word	0x17ff0328
 80114dc:	e80254dc 	.word	0xe80254dc
 80114e0:	17ff030a 	.word	0x17ff030a

080114e4 <SysTickTimer_get_RelativeTimeout$16882>:
 80114e4:	b081      	sub	sp, #4
 80114e6:	4601      	mov	r1, r0
 80114e8:	68c0      	ldr	r0, [r0, #12]
 80114ea:	9100      	str	r1, [sp, #0]
 80114ec:	b001      	add	sp, #4
 80114ee:	4770      	bx	lr

080114f0 <SysTick_Handler>:
 80114f0:	b580      	push	{r7, lr}
 80114f2:	b084      	sub	sp, #16
 80114f4:	2000      	movs	r0, #0
 80114f6:	9002      	str	r0, [sp, #8]
 80114f8:	9003      	str	r0, [sp, #12]
            private ContextSwitchTimer m_owner;
            private uint               m_timeout;
            private Callback           m_callback;

            //
            // Constructor Methods
 80114fa:	9001      	str	r0, [sp, #4]
 80114fc:	f7f3 f886 	bl	800460c <ProcessorARMv7M_DisableInterrupts$3259>
 8011500:	9901      	ldr	r1, [sp, #4]
 8011502:	9103      	str	r1, [sp, #12]
 8011504:	9003      	str	r0, [sp, #12]
 8011506:	9002      	str	r0, [sp, #8]
        //[TS.WellKnownMethod("Hardware_InvokeSysTickHandler")]
        private void SysTick_Handler( )
        {
            using(RT.SmartHandles.InterruptState.Disable())
            {
                ContextSwitchTimer.Instance.ProcessTimeout( );
 8011508:	f7ff ff80 	bl	801140c <ContextSwitchTimer_ProcessTimeout$16813>
        /// This constant is the representation of the overhead of querying 
        /// the current time. It needs to be trimmed.
        /// // TODO: automate and/or expose to system configuration
        /// </summary>
        const uint c_QueryOverhead  = 10; 

 801150c:	9802      	ldr	r0, [sp, #8]
 801150e:	f7f3 f89f 	bl	8004650 <ProcessorARMv7M_DisableInterruptsWithPriorityLevelHigherOrEqualTo$3266>
 8011512:	b004      	add	sp, #16
 8011514:	bd80      	pop	{r7, pc}
 8011516:	46c0      	nop			; (mov r8, r8)

08011518 <SysTickTimer_.ctor$16876>:
 8011518:	b081      	sub	sp, #4
 801151a:	4601      	mov	r1, r0
 801151c:	4a04      	ldr	r2, [pc, #16]	; (8011530 <SysTickTimer_.ctor$16876+0x18>)
 801151e:	4b05      	ldr	r3, [pc, #20]	; (8011534 <SysTickTimer_.ctor$16876+0x1c>)
 8011520:	447b      	add	r3, pc
 8011522:	441a      	add	r2, r3
 8011524:	6082      	str	r2, [r0, #8]
 8011526:	2200      	movs	r2, #0
 8011528:	6102      	str	r2, [r0, #16]
 801152a:	9100      	str	r1, [sp, #0]
 801152c:	b001      	add	sp, #4
 801152e:	4770      	bx	lr
 8011530:	ffffea5c 	.word	0xffffea5c
 8011534:	17ff02b0 	.word	0x17ff02b0

08011538 <SysTickTimer_set_RelativeTimeout$16883>:
 8011538:	b580      	push	{r7, lr}
 801153a:	b084      	sub	sp, #16
 801153c:	460a      	mov	r2, r1
 801153e:	4603      	mov	r3, r0
 8011540:	60c1      	str	r1, [r0, #12]

                set
                {
                    m_timeout = value;

                    m_owner.Enable( this );
 8011542:	6881      	ldr	r1, [r0, #8]
 8011544:	9003      	str	r0, [sp, #12]
 8011546:	4608      	mov	r0, r1
 8011548:	9903      	ldr	r1, [sp, #12]
 801154a:	9302      	str	r3, [sp, #8]
 801154c:	9201      	str	r2, [sp, #4]
 801154e:	f7ff ff8b 	bl	8011468 <ContextSwitchTimer_Enable$16814>
 8011552:	b004      	add	sp, #16
 8011554:	bd80      	pop	{r7, pc}
 8011556:	46c0      	nop			; (mov r8, r8)

08011558 <Board_GetSpiChannels$16918>:
        // SPI discovery
        //

        public override string[] GetSpiChannels()
        {
            return _spiDevices;
 8011558:	4802      	ldr	r0, [pc, #8]	; (8011564 <Board_GetSpiChannels$16918+0xc>)
 801155a:	4903      	ldr	r1, [pc, #12]	; (8011568 <Board_GetSpiChannels$16918+0x10>)
 801155c:	4479      	add	r1, pc
 801155e:	4408      	add	r0, r1
 8011560:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8011562:	4770      	bx	lr
 8011564:	fffffe3c 	.word	0xfffffe3c
 8011568:	17ff0274 	.word	0x17ff0274

0801156c <Board_GetSpiChannelInfo$16920>:
 801156c:	b082      	sub	sp, #8
 801156e:	4608      	mov	r0, r1
        }

        // The cases should match the device selector strings
        public override ChipsetAbstration.Board.SpiChannelInfo GetSpiChannelInfo( int id )
        {
            switch(id)
 8011570:	2900      	cmp	r1, #0
 8011572:	9001      	str	r0, [sp, #4]
 8011574:	d003      	beq.n	801157e <Board_GetSpiChannelInfo$16920+0x12>
 8011576:	e7ff      	b.n	8011578 <Board_GetSpiChannelInfo$16920+0xc>
 8011578:	2000      	movs	r0, #0
            {
                case 0:
                    return SPI0;
                default:
                    return null;
 801157a:	9000      	str	r0, [sp, #0]
 801157c:	e006      	b.n	801158c <Board_GetSpiChannelInfo$16920+0x20>
        public override ChipsetAbstration.Board.SpiChannelInfo GetSpiChannelInfo( int id )
        {
            switch(id)
            {
                case 0:
                    return SPI0;
 801157e:	4805      	ldr	r0, [pc, #20]	; (8011594 <Board_GetSpiChannelInfo$16920+0x28>)
 8011580:	4905      	ldr	r1, [pc, #20]	; (8011598 <Board_GetSpiChannelInfo$16920+0x2c>)
 8011582:	4479      	add	r1, pc
 8011584:	4408      	add	r0, r1
 8011586:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8011588:	9000      	str	r0, [sp, #0]
 801158a:	e7ff      	b.n	801158c <Board_GetSpiChannelInfo$16920+0x20>
                default:
                    return null;
            }
        }
 801158c:	9800      	ldr	r0, [sp, #0]
 801158e:	b002      	add	sp, #8
 8011590:	4770      	bx	lr
 8011592:	46c0      	nop			; (mov r8, r8)
 8011594:	fffffe3c 	.word	0xfffffe3c
 8011598:	17ff024e 	.word	0x17ff024e

0801159c <Board_get_NCPin$16922>:
 801159c:	f04f 30ff 	mov.w	r0, #4294967295
 80115a0:	4770      	bx	lr

080115a2 <Board_GetSystemTimerIRQNumber$16930>:
 80115a2:	2032      	movs	r0, #50	; 0x32
 80115a4:	4770      	bx	lr

080115a6 <Device_get_ManagedHeapSize$16935>:
 80115a6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80115aa:	4770      	bx	lr

080115ac <Processor_InitializeProcessor$16947>:
 80115ac:	b580      	push	{r7, lr}
 80115ae:	b082      	sub	sp, #8
 80115b0:	4601      	mov	r1, r0
        {
            get
            { 
                return 0x10000u;
            }
        }
 80115b2:	9101      	str	r1, [sp, #4]
 80115b4:	f7f5 fb6a 	bl	8006c8c <Processor_InitializeProcessor$16906>
 80115b8:	b002      	add	sp, #8
 80115ba:	bd80      	pop	{r7, pc}

080115bc <Processor_AllocateProcessorContext$16948>:
        }

        [RT.Inline]
        public override Microsoft.Zelig.Runtime.Processor.Context AllocateProcessorContext()
        {
            return new Context();
 80115bc:	b580      	push	{r7, lr}
 80115be:	b082      	sub	sp, #8
 80115c0:	4806      	ldr	r0, [pc, #24]	; (80115dc <Processor_AllocateProcessorContext$16948+0x20>)
 80115c2:	4907      	ldr	r1, [pc, #28]	; (80115e0 <Processor_AllocateProcessorContext$16948+0x24>)
 80115c4:	4479      	add	r1, pc
 80115c6:	4408      	add	r0, r1
 80115c8:	4a06      	ldr	r2, [pc, #24]	; (80115e4 <Processor_AllocateProcessorContext$16948+0x28>)
 80115ca:	4411      	add	r1, r2
 80115cc:	f7ef f8f8 	bl	80007c0 <DefaultTypeSystemManager_AllocateObject$4960>
 80115d0:	9001      	str	r0, [sp, #4]
 80115d2:	f7f2 fc46 	bl	8003e62 <Context_.ctor$16959>
 80115d6:	9801      	ldr	r0, [sp, #4]
 80115d8:	b002      	add	sp, #8
 80115da:	bd80      	pop	{r7, pc}
 80115dc:	ffffea38 	.word	0xffffea38
 80115e0:	17ff020c 	.word	0x17ff020c
 80115e4:	e8010dec 	.word	0xe8010dec

080115e8 <ThreadManager_get_DefaultStackSize$16952>:
 80115e8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80115ec:	4770      	bx	lr

080115ee <ContextSwitchTimer_GetTicksForQuantumValue$16954>:
 80115ee:	b081      	sub	sp, #4
 80115f0:	4608      	mov	r0, r1
        private const int DefaultStackSizeDISCO_F746NG = (4 * 1024) / sizeof( uint );

        //--//

        //
        // Helper Methods
 80115f2:	f644 32c0 	movw	r2, #19392	; 0x4bc0
 80115f6:	f2c0 0203 	movt	r2, #3
 80115fa:	4351      	muls	r1, r2
 80115fc:	9000      	str	r0, [sp, #0]
 80115fe:	4608      	mov	r0, r1
 8011600:	b001      	add	sp, #4
 8011602:	4770      	bx	lr

08011604 <KernelNode`1_set_Next$17277>:
 8011604:	b082      	sub	sp, #8
 8011606:	460a      	mov	r2, r1
 8011608:	4603      	mov	r3, r0
 801160a:	6081      	str	r1, [r0, #8]
 801160c:	9301      	str	r3, [sp, #4]
 801160e:	9200      	str	r2, [sp, #0]
 8011610:	b002      	add	sp, #8
 8011612:	4770      	bx	lr

08011614 <KernelNode`1_set_Previous$17279>:
 8011614:	b082      	sub	sp, #8
 8011616:	460a      	mov	r2, r1
 8011618:	4603      	mov	r3, r0
 801161a:	60c1      	str	r1, [r0, #12]
 801161c:	9301      	str	r3, [sp, #4]
 801161e:	9200      	str	r2, [sp, #0]
 8011620:	b002      	add	sp, #8
 8011622:	4770      	bx	lr

08011624 <KernelNode`1_set_Next$17382>:
 8011624:	b082      	sub	sp, #8
 8011626:	460a      	mov	r2, r1
 8011628:	4603      	mov	r3, r0
 801162a:	6081      	str	r1, [r0, #8]
 801162c:	9301      	str	r3, [sp, #4]
 801162e:	9200      	str	r2, [sp, #0]
 8011630:	b002      	add	sp, #8
 8011632:	4770      	bx	lr

08011634 <KernelNode`1_set_Previous$17384>:
 8011634:	b082      	sub	sp, #8
 8011636:	460a      	mov	r2, r1
 8011638:	4603      	mov	r3, r0
 801163a:	60c1      	str	r1, [r0, #12]
 801163c:	9301      	str	r3, [sp, #4]
 801163e:	9200      	str	r2, [sp, #0]
 8011640:	b002      	add	sp, #8
 8011642:	4770      	bx	lr

08011644 <KernelNode`1_set_Next$17692>:
 8011644:	b082      	sub	sp, #8
 8011646:	460a      	mov	r2, r1
 8011648:	4603      	mov	r3, r0
 801164a:	6081      	str	r1, [r0, #8]
 801164c:	9301      	str	r3, [sp, #4]
 801164e:	9200      	str	r2, [sp, #0]
 8011650:	b002      	add	sp, #8
 8011652:	4770      	bx	lr

08011654 <KernelNode`1_set_Previous$17694>:
 8011654:	b082      	sub	sp, #8
 8011656:	460a      	mov	r2, r1
 8011658:	4603      	mov	r3, r0
 801165a:	60c1      	str	r1, [r0, #12]
 801165c:	9301      	str	r3, [sp, #4]
 801165e:	9200      	str	r2, [sp, #0]
 8011660:	b002      	add	sp, #8
 8011662:	4770      	bx	lr

08011664 <KernelNode`1_InsertBefore$17681>:
 8011664:	b082      	sub	sp, #8
 8011666:	4602      	mov	r2, r0
        // Helper Methods
        //

        public void InsertBefore( KernelNode< T > place )
        {
            if(m_next != null)
 8011668:	6880      	ldr	r0, [r0, #8]
 801166a:	2800      	cmp	r0, #0
 801166c:	9201      	str	r2, [sp, #4]
 801166e:	9100      	str	r1, [sp, #0]
 8011670:	d006      	beq.n	8011680 <KernelNode`1_InsertBefore$17681+0x1c>
 8011672:	e7ff      	b.n	8011674 <KernelNode`1_InsertBefore$17681+0x10>
        //--//

        [Inline]
        private void RemoveFromList_NoClear()
        {
            KernelNode< T > next = m_next;
 8011674:	9801      	ldr	r0, [sp, #4]
 8011676:	6881      	ldr	r1, [r0, #8]
            KernelNode< T > prev = m_previous;
 8011678:	68c2      	ldr	r2, [r0, #12]
 801167a:	60ca      	str	r2, [r1, #12]
 801167c:	6091      	str	r1, [r2, #8]
        public void InsertBefore( KernelNode< T > place )
        {
            if(m_next != null)
            {
                RemoveFromList_NoClear();
            }
 801167e:	e7ff      	b.n	8011680 <KernelNode`1_InsertBefore$17681+0x1c>

            KernelNode< T > prev = place.m_previous;
 8011680:	9800      	ldr	r0, [sp, #0]
 8011682:	68c1      	ldr	r1, [r0, #12]
 8011684:	9a01      	ldr	r2, [sp, #4]
 8011686:	608a      	str	r2, [r1, #8]
 8011688:	60d1      	str	r1, [r2, #12]
 801168a:	6090      	str	r0, [r2, #8]
 801168c:	60c2      	str	r2, [r0, #12]
 801168e:	b002      	add	sp, #8
 8011690:	4770      	bx	lr

08011692 <KernelNode`1_set_Next$17443>:
 8011692:	b082      	sub	sp, #8
 8011694:	460a      	mov	r2, r1
 8011696:	4603      	mov	r3, r0
 8011698:	6081      	str	r1, [r0, #8]
 801169a:	9301      	str	r3, [sp, #4]
 801169c:	9200      	str	r2, [sp, #0]
 801169e:	b002      	add	sp, #8
 80116a0:	4770      	bx	lr

080116a2 <KernelNode`1_set_Previous$17445>:
 80116a2:	b082      	sub	sp, #8
 80116a4:	460a      	mov	r2, r1
 80116a6:	4603      	mov	r3, r0
 80116a8:	60c1      	str	r1, [r0, #12]
 80116aa:	9301      	str	r3, [sp, #4]
 80116ac:	9200      	str	r2, [sp, #0]
 80116ae:	b002      	add	sp, #8
 80116b0:	4770      	bx	lr

080116b2 <KernelNode`1_set_Next$17796>:
 80116b2:	b082      	sub	sp, #8
 80116b4:	460a      	mov	r2, r1
 80116b6:	4603      	mov	r3, r0
 80116b8:	6081      	str	r1, [r0, #8]
 80116ba:	9301      	str	r3, [sp, #4]
 80116bc:	9200      	str	r2, [sp, #0]
 80116be:	b002      	add	sp, #8
 80116c0:	4770      	bx	lr

080116c2 <KernelNode`1_set_Previous$17798>:
 80116c2:	b082      	sub	sp, #8
 80116c4:	460a      	mov	r2, r1
 80116c6:	4603      	mov	r3, r0
 80116c8:	60c1      	str	r1, [r0, #12]
 80116ca:	9301      	str	r3, [sp, #4]
 80116cc:	9200      	str	r2, [sp, #0]
 80116ce:	b002      	add	sp, #8
 80116d0:	4770      	bx	lr

080116d2 <KernelNode`1_InsertBefore$17785>:
 80116d2:	b082      	sub	sp, #8
 80116d4:	4602      	mov	r2, r0
        // Helper Methods
        //

        public void InsertBefore( KernelNode< T > place )
        {
            if(m_next != null)
 80116d6:	6880      	ldr	r0, [r0, #8]
 80116d8:	2800      	cmp	r0, #0
 80116da:	9201      	str	r2, [sp, #4]
 80116dc:	9100      	str	r1, [sp, #0]
 80116de:	d006      	beq.n	80116ee <KernelNode`1_InsertBefore$17785+0x1c>
 80116e0:	e7ff      	b.n	80116e2 <KernelNode`1_InsertBefore$17785+0x10>
        //--//

        [Inline]
        private void RemoveFromList_NoClear()
        {
            KernelNode< T > next = m_next;
 80116e2:	9801      	ldr	r0, [sp, #4]
 80116e4:	6881      	ldr	r1, [r0, #8]
            KernelNode< T > prev = m_previous;
 80116e6:	68c2      	ldr	r2, [r0, #12]
 80116e8:	60ca      	str	r2, [r1, #12]
 80116ea:	6091      	str	r1, [r2, #8]
        public void InsertBefore( KernelNode< T > place )
        {
            if(m_next != null)
            {
                RemoveFromList_NoClear();
            }
 80116ec:	e7ff      	b.n	80116ee <KernelNode`1_InsertBefore$17785+0x1c>

            KernelNode< T > prev = place.m_previous;
 80116ee:	9800      	ldr	r0, [sp, #0]
 80116f0:	68c1      	ldr	r1, [r0, #12]
 80116f2:	9a01      	ldr	r2, [sp, #4]
 80116f4:	608a      	str	r2, [r1, #8]
 80116f6:	60d1      	str	r1, [r2, #12]
 80116f8:	6090      	str	r0, [r2, #8]
 80116fa:	60c2      	str	r2, [r0, #12]
 80116fc:	b002      	add	sp, #8
 80116fe:	4770      	bx	lr

08011700 <Queue`1_SetCapacity$17775>:
 8011700:	b5b0      	push	{r4, r5, r7, lr}
 8011702:	b08c      	sub	sp, #48	; 0x30
 8011704:	460a      	mov	r2, r1
 8011706:	4603      	mov	r3, r0
 8011708:	468c      	mov	ip, r1

        // PRIVATE Grows or shrinks the buffer to hold capacity objects. Capacity
        // must be >= _size.
        private void SetCapacity( int capacity )
        {
            T[] newarray = new T[capacity];
 801170a:	f8df e11c 	ldr.w	lr, [pc, #284]	; 8011828 <Queue`1_SetCapacity$17775+0x128>
 801170e:	4c47      	ldr	r4, [pc, #284]	; (801182c <Queue`1_SetCapacity$17775+0x12c>)
 8011710:	447c      	add	r4, pc
 8011712:	44a6      	add	lr, r4
 8011714:	4d46      	ldr	r5, [pc, #280]	; (8011830 <Queue`1_SetCapacity$17775+0x130>)
 8011716:	442c      	add	r4, r5
 8011718:	900a      	str	r0, [sp, #40]	; 0x28
 801171a:	4670      	mov	r0, lr
 801171c:	9109      	str	r1, [sp, #36]	; 0x24
 801171e:	4621      	mov	r1, r4
 8011720:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8011724:	9208      	str	r2, [sp, #32]
 8011726:	4672      	mov	r2, lr
 8011728:	9307      	str	r3, [sp, #28]
 801172a:	f8cd c018 	str.w	ip, [sp, #24]
 801172e:	f7f0 fd37 	bl	80021a0 <DefaultTypeSystemManager_AllocateArray$4962>
 8011732:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011734:	694a      	ldr	r2, [r1, #20]
            if(_size > 0)
 8011736:	2a01      	cmp	r2, #1
 8011738:	9005      	str	r0, [sp, #20]
 801173a:	db06      	blt.n	801174a <Queue`1_SetCapacity$17775+0x4a>
 801173c:	e7ff      	b.n	801173e <Queue`1_SetCapacity$17775+0x3e>
 801173e:	9807      	ldr	r0, [sp, #28]
 8011740:	68c1      	ldr	r1, [r0, #12]
 8011742:	6902      	ldr	r2, [r0, #16]
            {
                if(_head < _tail)
 8011744:	4291      	cmp	r1, r2
 8011746:	db3c      	blt.n	80117c2 <Queue`1_SetCapacity$17775+0xc2>
 8011748:	e049      	b.n	80117de <Queue`1_SetCapacity$17775+0xde>
 801174a:	9805      	ldr	r0, [sp, #20]
 801174c:	9907      	ldr	r1, [sp, #28]
 801174e:	6088      	str	r0, [r1, #8]
 8011750:	2200      	movs	r2, #0
 8011752:	60ca      	str	r2, [r1, #12]
 8011754:	694a      	ldr	r2, [r1, #20]
                }
            }

            _array = newarray;
            _head = 0;
            _tail = (_size == capacity) ? 0 : _size;
 8011756:	9b06      	ldr	r3, [sp, #24]
 8011758:	429a      	cmp	r2, r3
 801175a:	d105      	bne.n	8011768 <Queue`1_SetCapacity$17775+0x68>
 801175c:	e7ff      	b.n	801175e <Queue`1_SetCapacity$17775+0x5e>
 801175e:	2000      	movs	r0, #0
 8011760:	900b      	str	r0, [sp, #44]	; 0x2c
 8011762:	a80b      	add	r0, sp, #44	; 0x2c
 8011764:	9004      	str	r0, [sp, #16]
 8011766:	e010      	b.n	801178a <Queue`1_SetCapacity$17775+0x8a>
 8011768:	a80b      	add	r0, sp, #44	; 0x2c
 801176a:	9907      	ldr	r1, [sp, #28]
 801176c:	f811 2f14 	ldrb.w	r2, [r1, #20]!
 8011770:	784b      	ldrb	r3, [r1, #1]
 8011772:	f891 c002 	ldrb.w	ip, [r1, #2]
 8011776:	78c9      	ldrb	r1, [r1, #3]
 8011778:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 801177c:	ea4c 2101 	orr.w	r1, ip, r1, lsl #8
 8011780:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 8011784:	910b      	str	r1, [sp, #44]	; 0x2c
 8011786:	9004      	str	r0, [sp, #16]
 8011788:	e7ff      	b.n	801178a <Queue`1_SetCapacity$17775+0x8a>
 801178a:	9804      	ldr	r0, [sp, #16]
 801178c:	7801      	ldrb	r1, [r0, #0]
 801178e:	7842      	ldrb	r2, [r0, #1]
 8011790:	7883      	ldrb	r3, [r0, #2]
 8011792:	78c0      	ldrb	r0, [r0, #3]
 8011794:	ea43 2c00 	orr.w	ip, r3, r0, lsl #8
 8011798:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 801179c:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80117a0:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80117a4:	f80c 1f10 	strb.w	r1, [ip, #16]!
 80117a8:	f88c 0003 	strb.w	r0, [ip, #3]
 80117ac:	f88c 3002 	strb.w	r3, [ip, #2]
 80117b0:	f88c 2001 	strb.w	r2, [ip, #1]
 80117b4:	f8dc 0008 	ldr.w	r0, [ip, #8]
            _version++;
 80117b8:	3001      	adds	r0, #1
 80117ba:	f8cc 0008 	str.w	r0, [ip, #8]
 80117be:	b00c      	add	sp, #48	; 0x30
 80117c0:	bdb0      	pop	{r4, r5, r7, pc}
            T[] newarray = new T[capacity];
            if(_size > 0)
            {
                if(_head < _tail)
                {
                    Array.Copy( _array, _head, newarray, 0, _size );
 80117c2:	9807      	ldr	r0, [sp, #28]
 80117c4:	6880      	ldr	r0, [r0, #8]
 80117c6:	9907      	ldr	r1, [sp, #28]
 80117c8:	68c9      	ldr	r1, [r1, #12]
 80117ca:	9a07      	ldr	r2, [sp, #28]
 80117cc:	6953      	ldr	r3, [r2, #20]
            if(_size == 0)
                ThrowHelper.ThrowInvalidOperationException( ExceptionResource.InvalidOperation_EmptyQueue );

            return _array[_head];
        }

 80117ce:	46ec      	mov	ip, sp
 80117d0:	f8cc 3000 	str.w	r3, [ip]
 80117d4:	2300      	movs	r3, #0
 80117d6:	9a05      	ldr	r2, [sp, #20]
 80117d8:	f7ee fedc 	bl	8000594 <Array_Copy$3705>
            if(_size > 0)
            {
                if(_head < _tail)
                {
                    Array.Copy( _array, _head, newarray, 0, _size );
                }
 80117dc:	e022      	b.n	8011824 <Queue`1_SetCapacity$17775+0x124>
                else
                {
                    Array.Copy( _array, _head, newarray, 0, _array.Length - _head );
 80117de:	9807      	ldr	r0, [sp, #28]
 80117e0:	6881      	ldr	r1, [r0, #8]
 80117e2:	68c2      	ldr	r2, [r0, #12]
            return new Enumerator( this );
        }

        // Removes the object at the head of the queue and returns it. If the queue
        // is empty, this method simply returns null.
        /// <include file='doc\Queue.uex' path='docs/doc[@for="Queue.Dequeue"]/*' />
 80117e4:	688b      	ldr	r3, [r1, #8]
                {
                    Array.Copy( _array, _head, newarray, 0, _size );
                }
                else
                {
                    Array.Copy( _array, _head, newarray, 0, _array.Length - _head );
 80117e6:	1a9b      	subs	r3, r3, r2
            if(_size == 0)
                ThrowHelper.ThrowInvalidOperationException( ExceptionResource.InvalidOperation_EmptyQueue );

            return _array[_head];
        }

 80117e8:	46ec      	mov	ip, sp
 80117ea:	f8cc 3000 	str.w	r3, [ip]
 80117ee:	2300      	movs	r3, #0
 80117f0:	4608      	mov	r0, r1
 80117f2:	4611      	mov	r1, r2
 80117f4:	9a05      	ldr	r2, [sp, #20]
 80117f6:	9303      	str	r3, [sp, #12]
 80117f8:	f7ee fecc 	bl	8000594 <Array_Copy$3705>
                    Array.Copy( _array, _head, newarray, 0, _size );
                }
                else
                {
                    Array.Copy( _array, _head, newarray, 0, _array.Length - _head );
                    Array.Copy( _array, 0, newarray, _array.Length - _head, _tail );
 80117fc:	9807      	ldr	r0, [sp, #28]
 80117fe:	6881      	ldr	r1, [r0, #8]
 8011800:	68c2      	ldr	r2, [r0, #12]
 8011802:	6903      	ldr	r3, [r0, #16]
            return new Enumerator( this );
        }

        // Removes the object at the head of the queue and returns it. If the queue
        // is empty, this method simply returns null.
        /// <include file='doc\Queue.uex' path='docs/doc[@for="Queue.Dequeue"]/*' />
 8011804:	f8d1 c008 	ldr.w	ip, [r1, #8]
                    Array.Copy( _array, _head, newarray, 0, _size );
                }
                else
                {
                    Array.Copy( _array, _head, newarray, 0, _array.Length - _head );
                    Array.Copy( _array, 0, newarray, _array.Length - _head, _tail );
 8011808:	ebac 0202 	sub.w	r2, ip, r2
            if(_size == 0)
                ThrowHelper.ThrowInvalidOperationException( ExceptionResource.InvalidOperation_EmptyQueue );

            return _array[_head];
        }

 801180c:	46ec      	mov	ip, sp
 801180e:	f8cc 3000 	str.w	r3, [ip]
 8011812:	4608      	mov	r0, r1
 8011814:	9903      	ldr	r1, [sp, #12]
 8011816:	9b05      	ldr	r3, [sp, #20]
 8011818:	9202      	str	r2, [sp, #8]
 801181a:	461a      	mov	r2, r3
 801181c:	9b02      	ldr	r3, [sp, #8]
 801181e:	f7ee feb9 	bl	8000594 <Array_Copy$3705>
                }
                else
                {
                    Array.Copy( _array, _head, newarray, 0, _array.Length - _head );
                    Array.Copy( _array, 0, newarray, _array.Length - _head, _tail );
                }
 8011822:	e7ff      	b.n	8011824 <Queue`1_SetCapacity$17775+0x124>
            }
 8011824:	e791      	b.n	801174a <Queue`1_SetCapacity$17775+0x4a>
 8011826:	46c0      	nop			; (mov r8, r8)
 8011828:	ffffea38 	.word	0xffffea38
 801182c:	17ff00c0 	.word	0x17ff00c0
 8011830:	e801037c 	.word	0xe801037c

08011834 <List`1_set_Capacity$22641>:
 8011834:	b580      	push	{r7, lr}
 8011836:	b086      	sub	sp, #24
 8011838:	460a      	mov	r2, r1
 801183a:	4603      	mov	r3, r0
 801183c:	468c      	mov	ip, r1
                return m_items.Length;
            }

            set
            {
                if(value != m_items.Length)
 801183e:	6880      	ldr	r0, [r0, #8]
        //
        public void Add( T item )
        {
            if(m_size == m_items.Length)
            {
                EnsureCapacity( m_size + 1 );
 8011840:	6880      	ldr	r0, [r0, #8]
                return m_items.Length;
            }

            set
            {
                if(value != m_items.Length)
 8011842:	4281      	cmp	r1, r0
 8011844:	9305      	str	r3, [sp, #20]
 8011846:	f8cd c010 	str.w	ip, [sp, #16]
 801184a:	9203      	str	r2, [sp, #12]
 801184c:	d006      	beq.n	801185c <List`1_set_Capacity$22641+0x28>
 801184e:	e7ff      	b.n	8011850 <List`1_set_Capacity$22641+0x1c>
 8011850:	9805      	ldr	r0, [sp, #20]
 8011852:	68c1      	ldr	r1, [r0, #12]
                {
                    if(value < m_size)
 8011854:	9a04      	ldr	r2, [sp, #16]
 8011856:	428a      	cmp	r2, r1
 8011858:	db02      	blt.n	8011860 <List`1_set_Capacity$22641+0x2c>
 801185a:	e004      	b.n	8011866 <List`1_set_Capacity$22641+0x32>
 801185c:	b006      	add	sp, #24
 801185e:	bd80      	pop	{r7, pc}
                    {
                        ThrowHelper.ThrowArgumentOutOfRangeException( ExceptionArgument.value, ExceptionResource.ArgumentOutOfRange_SmallCapacity );
 8011860:	f7fc faa2 	bl	800dda8 <ThrowHelper_ThrowArgumentOutOfRangeException$7377>
                    }
 8011864:	e7ff      	b.n	8011866 <List`1_set_Capacity$22641+0x32>

                    if(value > 0)
 8011866:	9804      	ldr	r0, [sp, #16]
 8011868:	2801      	cmp	r0, #1
 801186a:	db0f      	blt.n	801188c <List`1_set_Capacity$22641+0x58>
 801186c:	e7ff      	b.n	801186e <List`1_set_Capacity$22641+0x3a>
                    {
                        T[] newItems = new T[value];
 801186e:	4818      	ldr	r0, [pc, #96]	; (80118d0 <List`1_set_Capacity$22641+0x9c>)
 8011870:	4918      	ldr	r1, [pc, #96]	; (80118d4 <List`1_set_Capacity$22641+0xa0>)
 8011872:	4479      	add	r1, pc
 8011874:	4408      	add	r0, r1
 8011876:	4a18      	ldr	r2, [pc, #96]	; (80118d8 <List`1_set_Capacity$22641+0xa4>)
 8011878:	4411      	add	r1, r2
 801187a:	9a04      	ldr	r2, [sp, #16]
 801187c:	f7f0 fc90 	bl	80021a0 <DefaultTypeSystemManager_AllocateArray$4962>
 8011880:	9905      	ldr	r1, [sp, #20]
 8011882:	68ca      	ldr	r2, [r1, #12]
                        if(m_size > 0)
 8011884:	2a00      	cmp	r2, #0
 8011886:	9002      	str	r0, [sp, #8]
 8011888:	dc0a      	bgt.n	80118a0 <List`1_set_Capacity$22641+0x6c>
 801188a:	e018      	b.n	80118be <List`1_set_Capacity$22641+0x8a>
                        }
                        m_items = newItems;
                    }
                    else
                    {
                        m_items = sEmptyArray;
 801188c:	480e      	ldr	r0, [pc, #56]	; (80118c8 <List`1_set_Capacity$22641+0x94>)
 801188e:	490f      	ldr	r1, [pc, #60]	; (80118cc <List`1_set_Capacity$22641+0x98>)
 8011890:	4479      	add	r1, pc
 8011892:	4408      	add	r0, r1
 8011894:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
 8011898:	9905      	ldr	r1, [sp, #20]
 801189a:	6088      	str	r0, [r1, #8]
                    }
 801189c:	e7ff      	b.n	801189e <List`1_set_Capacity$22641+0x6a>
                }
 801189e:	e7dd      	b.n	801185c <List`1_set_Capacity$22641+0x28>
                    if(value > 0)
                    {
                        T[] newItems = new T[value];
                        if(m_size > 0)
                        {
                            Array.Copy( m_items, 0, newItems, 0, m_size );
 80118a0:	9805      	ldr	r0, [sp, #20]
 80118a2:	6880      	ldr	r0, [r0, #8]
 80118a4:	9905      	ldr	r1, [sp, #20]
 80118a6:	68ca      	ldr	r2, [r1, #12]


        // Adds the elements of the given collection to the end of this list. If
        // required, the capacity of the list is increased to twice the previous
        // capacity or the new size, whichever is larger.
        //
 80118a8:	466b      	mov	r3, sp
 80118aa:	601a      	str	r2, [r3, #0]
 80118ac:	2200      	movs	r2, #0
 80118ae:	4611      	mov	r1, r2
 80118b0:	9b02      	ldr	r3, [sp, #8]
 80118b2:	9201      	str	r2, [sp, #4]
 80118b4:	461a      	mov	r2, r3
 80118b6:	9b01      	ldr	r3, [sp, #4]
 80118b8:	f7ee fe6c 	bl	8000594 <Array_Copy$3705>
                    {
                        T[] newItems = new T[value];
                        if(m_size > 0)
                        {
                            Array.Copy( m_items, 0, newItems, 0, m_size );
                        }
 80118bc:	e7ff      	b.n	80118be <List`1_set_Capacity$22641+0x8a>
 80118be:	9802      	ldr	r0, [sp, #8]
 80118c0:	9905      	ldr	r1, [sp, #20]
 80118c2:	6088      	str	r0, [r1, #8]
                        m_items = newItems;
                    }
 80118c4:	e7eb      	b.n	801189e <List`1_set_Capacity$22641+0x6a>
 80118c6:	46c0      	nop			; (mov r8, r8)
 80118c8:	fffffe3c 	.word	0xfffffe3c
 80118cc:	17feff40 	.word	0x17feff40
 80118d0:	ffffea38 	.word	0xffffea38
 80118d4:	17feff5e 	.word	0x17feff5e
 80118d8:	e801034c 	.word	0xe801034c

080118dc <List`1_EnsureCapacity$22673>:
 80118dc:	b580      	push	{r7, lr}
 80118de:	b086      	sub	sp, #24
 80118e0:	460a      	mov	r2, r1
 80118e2:	4603      	mov	r3, r0
 80118e4:	468c      	mov	ip, r1
        // value. If the currect capacity of the list is less than min, the
        // capacity is increased to twice the current capacity or to min,
        // whichever is larger.
        private void EnsureCapacity( int min )
        {
            if(m_items.Length < min)
 80118e6:	6880      	ldr	r0, [r0, #8]
        //
        public void Add( T item )
        {
            if(m_size == m_items.Length)
            {
                EnsureCapacity( m_size + 1 );
 80118e8:	6880      	ldr	r0, [r0, #8]
        // value. If the currect capacity of the list is less than min, the
        // capacity is increased to twice the current capacity or to min,
        // whichever is larger.
        private void EnsureCapacity( int min )
        {
            if(m_items.Length < min)
 80118ea:	4288      	cmp	r0, r1
 80118ec:	9305      	str	r3, [sp, #20]
 80118ee:	f8cd c010 	str.w	ip, [sp, #16]
 80118f2:	9203      	str	r2, [sp, #12]
 80118f4:	da06      	bge.n	8011904 <List`1_EnsureCapacity$22673+0x28>
 80118f6:	e7ff      	b.n	80118f8 <List`1_EnsureCapacity$22673+0x1c>
            {
                int newCapacity = m_items.Length == 0 ? cDefaultCapacity : m_items.Length * 2;
 80118f8:	9805      	ldr	r0, [sp, #20]
 80118fa:	6881      	ldr	r1, [r0, #8]
        //
        public void Add( T item )
        {
            if(m_size == m_items.Length)
            {
                EnsureCapacity( m_size + 1 );
 80118fc:	6889      	ldr	r1, [r1, #8]
        // whichever is larger.
        private void EnsureCapacity( int min )
        {
            if(m_items.Length < min)
            {
                int newCapacity = m_items.Length == 0 ? cDefaultCapacity : m_items.Length * 2;
 80118fe:	2900      	cmp	r1, #0
 8011900:	d102      	bne.n	8011908 <List`1_EnsureCapacity$22673+0x2c>
 8011902:	e007      	b.n	8011914 <List`1_EnsureCapacity$22673+0x38>
 8011904:	b006      	add	sp, #24
 8011906:	bd80      	pop	{r7, pc}
 8011908:	9805      	ldr	r0, [sp, #20]
 801190a:	6881      	ldr	r1, [r0, #8]
        //
        public void Add( T item )
        {
            if(m_size == m_items.Length)
            {
                EnsureCapacity( m_size + 1 );
 801190c:	6889      	ldr	r1, [r1, #8]
        // whichever is larger.
        private void EnsureCapacity( int min )
        {
            if(m_items.Length < min)
            {
                int newCapacity = m_items.Length == 0 ? cDefaultCapacity : m_items.Length * 2;
 801190e:	0049      	lsls	r1, r1, #1
 8011910:	9102      	str	r1, [sp, #8]
 8011912:	e002      	b.n	801191a <List`1_EnsureCapacity$22673+0x3e>
 8011914:	2004      	movs	r0, #4
 8011916:	9002      	str	r0, [sp, #8]
 8011918:	e7ff      	b.n	801191a <List`1_EnsureCapacity$22673+0x3e>
 801191a:	9802      	ldr	r0, [sp, #8]

                if(newCapacity < min) newCapacity = min;
 801191c:	9904      	ldr	r1, [sp, #16]
 801191e:	4288      	cmp	r0, r1
 8011920:	9001      	str	r0, [sp, #4]
 8011922:	da03      	bge.n	801192c <List`1_EnsureCapacity$22673+0x50>
 8011924:	e7ff      	b.n	8011926 <List`1_EnsureCapacity$22673+0x4a>
 8011926:	9804      	ldr	r0, [sp, #16]
 8011928:	9001      	str	r0, [sp, #4]
 801192a:	e7ff      	b.n	801192c <List`1_EnsureCapacity$22673+0x50>
 801192c:	9801      	ldr	r0, [sp, #4]

                Capacity = newCapacity;
 801192e:	9905      	ldr	r1, [sp, #20]
 8011930:	9000      	str	r0, [sp, #0]
 8011932:	4608      	mov	r0, r1
 8011934:	9900      	ldr	r1, [sp, #0]
 8011936:	f7ff ff7d 	bl	8011834 <List`1_set_Capacity$22641>
            }
 801193a:	e7e3      	b.n	8011904 <List`1_EnsureCapacity$22673+0x28>

0801193c <KernelNode`1_set_Next$22782>:
 801193c:	b082      	sub	sp, #8
 801193e:	460a      	mov	r2, r1
 8011940:	4603      	mov	r3, r0
 8011942:	6081      	str	r1, [r0, #8]
 8011944:	9301      	str	r3, [sp, #4]
 8011946:	9200      	str	r2, [sp, #0]
 8011948:	b002      	add	sp, #8
 801194a:	4770      	bx	lr

0801194c <KernelNode`1_set_Previous$22784>:
 801194c:	b082      	sub	sp, #8
 801194e:	460a      	mov	r2, r1
 8011950:	4603      	mov	r3, r0
 8011952:	60c1      	str	r1, [r0, #12]
 8011954:	9301      	str	r3, [sp, #4]
 8011956:	9200      	str	r2, [sp, #0]
 8011958:	b002      	add	sp, #8
 801195a:	4770      	bx	lr

0801195c <KernelNode`1_.ctor$22802>:
 801195c:	b081      	sub	sp, #4
 801195e:	4601      	mov	r1, r0
 8011960:	2200      	movs	r2, #0
 8011962:	6102      	str	r2, [r0, #16]
 8011964:	9100      	str	r1, [sp, #0]
 8011966:	b001      	add	sp, #4
 8011968:	4770      	bx	lr

0801196a <KernelNode`1_set_Next$22814>:
 801196a:	b082      	sub	sp, #8
 801196c:	460a      	mov	r2, r1
 801196e:	4603      	mov	r3, r0
 8011970:	6081      	str	r1, [r0, #8]
 8011972:	9301      	str	r3, [sp, #4]
 8011974:	9200      	str	r2, [sp, #0]
 8011976:	b002      	add	sp, #8
 8011978:	4770      	bx	lr

0801197a <KernelNode`1_set_Previous$22816>:
 801197a:	b082      	sub	sp, #8
 801197c:	460a      	mov	r2, r1
 801197e:	4603      	mov	r3, r0
 8011980:	60c1      	str	r1, [r0, #12]
 8011982:	9301      	str	r3, [sp, #4]
 8011984:	9200      	str	r2, [sp, #0]
 8011986:	b002      	add	sp, #8
 8011988:	4770      	bx	lr
 801198a:	46c0      	nop			; (mov r8, r8)
 801198c:	46c0      	nop			; (mov r8, r8)
 801198e:	46c0      	nop			; (mov r8, r8)

08011990 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1>:
 8011990:	0004 0000 1b80 0801 0104 0000 0000 0000     ................
 80119a0:	6690 0801 66bc 0801 ab44 abab 66d0 0801     .f...f..D....f..
 80119b0:	1c64 0801                                   d...

080119b4 <Microsoft.CortexM3OnMBED.Memory_3>:
 80119b4:	0004 0000 6720 0801 6774 0801               .... g..tg..

080119c0 <Microsoft.Zelig.DISCO_F746NG.Device_10>:
 80119c0:	0004 0000 68a0 0801                         .....h..

080119c8 <Microsoft.Zelig.DISCO_F746NG.Processor_14>:
 80119c8:	0004 0000 6960 0801                         ....`i..

080119d0 <Microsoft.Zelig.Runtime.TargetPlatform.ARMv7.ProcessorARMv7M.MethodWrapper_19>:
 80119d0:	0004 0000 6a20 0801 46c0 46c0 46c0 46c0     .... j...F.F.F.F

080119e0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_20>:
 80119e0:	0004 0000 1b80 0801 0004 0000 0004 0000     ................
 80119f0:	6a50 0801 6a80 0801 abc6 abab 6a90 0801     Pj...j.......j..
 8011a00:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08011a10 <Microsoft.Zelig.Runtime.TypeSystem.VTable_21>:
 8011a10:	0004 0000 1b80 0801 0008 0000 0002 0000     ................
 8011a20:	6ab0 0801 22a4 0801 ab44 abab 6ae0 0801     .j..."..D....j..
 8011a30:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08011a40 <System.String_22>:
 8011a40:	0004 0000 1a10 0801 0001 0000 0001 0000     ................
 8011a50:	0031 46c0 46c0 46c0 46c0 46c0 46c0 46c0     1..F.F.F.F.F.F.F

08011a60 <Microsoft.Zelig.Runtime.TypeSystem.VTable_26>:
 8011a60:	0004 0000 1b80 0801 0004 0000 0004 0000     ................
 8011a70:	6b00 0801 6b30 0801 abc6 abab 6b40 0801     .k..0k......@k..
 8011a80:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08011a90 <Microsoft.Zelig.Runtime.TypeSystem.VTable_29>:
 8011a90:	0004 0000 1b80 0801 0004 0000 0004 0000     ................
 8011aa0:	6b60 0801 6b90 0801 abc6 abab 6ba0 0801     `k...k.......k..
 8011ab0:	1c64 0801                                   d...

08011ab4 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation[]_30>:
 8011ab4:	0004 0000 1a90 0801 0000 0000               ............

08011ac0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_31>:
 8011ac0:	0004 0000 1b80 0801 0004 0000 0004 0000     ................
 8011ad0:	6bc0 0801 6bf0 0801 abc6 abab 6c00 0801     .k...k.......l..
 8011ae0:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08011af0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_33>:
 8011af0:	0004 0000 1b80 0801 0004 0000 0002 0000     ................
 8011b00:	6c20 0801 6c50 0801 abc6 abab 6c60 0801      l..Pl......`l..
 8011b10:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08011b20 <Microsoft.Zelig.Runtime.TypeSystem.VTable_35>:
 8011b20:	0004 0000 1b80 0801 0004 0000 0004 0000     ................
 8011b30:	6c80 0801 6cb0 0801 abc6 abab 6cc0 0801     .l...l.......l..
 8011b40:	1c64 0801                                   d...

08011b44 <Windows.Devices.Enumeration.DeviceInformation[]_36>:
 8011b44:	0004 0000 1b20 0801 0000 0000               .... .......

08011b50 <Microsoft.Zelig.Runtime.TypeSystem.VTable_37>:
 8011b50:	0004 0000 1b80 0801 0004 0000 0004 0000     ................
 8011b60:	6ce0 0801 6d10 0801 abc6 abab 6d20 0801     .l...m...... m..
 8011b70:	1c64 0801                                   d...

08011b74 <System.Threading.Timer.TimerPool.CallbackHandler[]_38>:
 8011b74:	0004 0000 1b50 0801 0000 0000               ....P.......

08011b80 <Microsoft.Zelig.Runtime.TypeSystem.VTable_43>:
 8011b80:	0004 0000 1b80 0801 001c 0000 0000 0000     ................
 8011b90:	6d40 0801 6d6c 0801 ab44 abab 6d80 0801     @m..lm..D....m..
 8011ba0:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08011bb0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_44>:
 8011bb0:	0004 0000 6da0 0801 ab12 abab 2001 0010     .....m....... ..
 8011bc0:	0000 0000 6dd0 0801 6e10 0801 0000 0000     .....m...n......
 8011bd0:	0000 0000 29e0 0801 1c70 0801               .....)..p...

08011bdc <System.RuntimeType_45>:
 8011bdc:	0004 0000 2280 0801 1c70 0801 46c0 46c0     ....."..p....F.F
 8011bec:	46c0 46c0                                   .F.F

08011bf0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_46>:
 8011bf0:	0004 0000 1b80 0801 0004 0000 0004 0000     ................
 8011c00:	6e30 0801 6e60 0801 abc6 abab 6e70 0801     0n..`n......pn..
 8011c10:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08011c20 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_47>:
 8011c20:	0004 0000 1bf0 0801 0004 0000 0729 0800     ............)...
 8011c30:	0765 0800 0781 0800 0791 0800 46c0 46c0     e............F.F

08011c40 <Microsoft.Zelig.Runtime.TypeSystem.VTable_48>:
 8011c40:	0004 0000 1b80 0801 0004 0000 0008 0000     ................
 8011c50:	6e90 0801 6ec0 0801 abc6 abab 6ed0 0801     .n...n.......n..
 8011c60:	1c64 0801                                   d...

08011c64 <Microsoft.Zelig.Runtime.TypeSystem.VTable.InterfaceMap[]_49>:
 8011c64:	0004 0000 1c40 0801 0000 0000               ....@.......

08011c70 <Microsoft.Zelig.Runtime.TypeSystem.VTable_50>:
 8011c70:	0004 0000 1b80 0801 0008 0000 0000 0000     ................
 8011c80:	1bb0 0801 1bdc 0801 ab44 abab 1c20 0801     ........D... ...
 8011c90:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08011ca0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_51>:
 8011ca0:	0004 0000 6da0 0801 ab12 abab 2001 0010     .....m....... ..
 8011cb0:	0000 0000 6ef0 0801 6e10 0801 0000 0000     .....n...n......
 8011cc0:	0000 0000 6f30 0801 1d00 0801               ....0o......

08011ccc <System.RuntimeType_52>:
 8011ccc:	0004 0000 2280 0801 1d00 0801 46c0 46c0     .....".......F.F
 8011cdc:	46c0 46c0                                   .F.F

08011ce0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_53>:
 8011ce0:	0004 0000 1bf0 0801 0004 0000 0729 0800     ............)...
 8011cf0:	0765 0800 0781 0800 0985 0800 46c0 46c0     e............F.F

08011d00 <Microsoft.Zelig.Runtime.TypeSystem.VTable_54>:
 8011d00:	0004 0000 1b80 0801 0004 0000 0000 0000     ................
 8011d10:	1ca0 0801 1ccc 0801 ab44 abab 1ce0 0801     ........D.......
 8011d20:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08011d30 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_55>:
 8011d30:	0004 0000 6da0 0801 ab12 abab 2101 0010     .....m.......!..
 8011d40:	0000 0000 6f60 0801 6e10 0801 0000 0000     ....`o...n......
 8011d50:	0000 0000 6f30 0801 1d90 0801               ....0o......

08011d5c <System.RuntimeType_56>:
 8011d5c:	0004 0000 2280 0801 1d90 0801 46c0 46c0     .....".......F.F
 8011d6c:	46c0 46c0                                   .F.F

08011d70 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_57>:
 8011d70:	0004 0000 1bf0 0801 0004 0000 0729 0800     ............)...
 8011d80:	0765 0800 0781 0800 0985 0800 46c0 46c0     e............F.F

08011d90 <Microsoft.Zelig.Runtime.TypeSystem.VTable_58>:
 8011d90:	0004 0000 1b80 0801 0004 0000 0000 0000     ................
 8011da0:	1d30 0801 1d5c 0801 ab44 abab 1d70 0801     0...\...D...p...
 8011db0:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08011dc0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_59>:
 8011dc0:	0004 0000 6da0 0801 ab12 abab 0101 0010     .....m..........
 8011dd0:	0000 0000 6fa0 0801 7000 0801 0000 0000     .....o...p......
 8011de0:	0000 0000 2fa0 0801 1e40 0801               ...../..@...

08011dec <System.RuntimeType_60>:
 8011dec:	0004 0000 2280 0801 1e40 0801 46c0 46c0     ....."..@....F.F
 8011dfc:	46c0 46c0                                   .F.F

08011e00 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_61>:
 8011e00:	0004 0000 1bf0 0801 000a 0000 09c5 0800     ................
 8011e10:	0a35 0800 0a8b 0800 0ac9 0800 0b29 0800     5...........)...
 8011e20:	0b35 0800 0b3f 0800 0b7d 0800 0bbd 0800     5...?...}.......
 8011e30:	0c31 0800 46c0 46c0 46c0 46c0 46c0 46c0     1....F.F.F.F.F.F

08011e40 <Microsoft.Zelig.Runtime.TypeSystem.VTable_62>:
 8011e40:	0004 0000 1b80 0801 0028 0000 0000 0000     ........(.......
 8011e50:	1dc0 0801 1dec 0801 ab44 abab 1e00 0801     ........D.......
 8011e60:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08011e70 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_63>:
 8011e70:	0004 0000 6da0 0801 ab12 abab 0101 0010     .....m..........
 8011e80:	0000 0000 7060 0801 7000 0801 0000 0000     ....`p...p......
 8011e90:	0000 0000 2fa0 0801 1ef0 0801               ...../......

08011e9c <System.RuntimeType_64>:
 8011e9c:	0004 0000 2280 0801 1ef0 0801 46c0 46c0     .....".......F.F
 8011eac:	46c0 46c0                                   .F.F

08011eb0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_65>:
 8011eb0:	0004 0000 1bf0 0801 000a 0000 0cad 0800     ................
 8011ec0:	0d1d 0800 0d37 0800 0d49 0800 0b29 0800     ....7...I...)...
 8011ed0:	0b35 0800 0b3f 0800 0b7d 0800 0dcd 0800     5...?...}.......
 8011ee0:	0f45 0800 46c0 46c0 46c0 46c0 46c0 46c0     E....F.F.F.F.F.F

08011ef0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_66>:
 8011ef0:	0004 0000 1b80 0801 0030 0000 0000 0000     ........0.......
 8011f00:	1e70 0801 1e9c 0801 ab44 abab 1eb0 0801     p.......D.......
 8011f10:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08011f20 <Microsoft.Zelig.Runtime.TypeSystem.BoxedValueTypeRepresentation_67>:
 8011f20:	0004 0000 5370 0801 ab05 abab 2109 0010     ....pS.......!..
	...
 8011f44:	70c0 0801 1f80 0801 70f0 0801               .p.......p..

08011f50 <System.RuntimeType_68>:
 8011f50:	0004 0000 2280 0801 1f80 0801 46c0 46c0     .....".......F.F

08011f60 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_69>:
 8011f60:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 8011f70:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

08011f80 <Microsoft.Zelig.Runtime.TypeSystem.VTable_70>:
 8011f80:	0004 0000 1b80 0801 0001 0000 0000 0000     ................
 8011f90:	1f20 0801 1f50 0801 ab00 abab 1f60 0801      ...P.......`...
 8011fa0:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08011fb0 <Microsoft.Zelig.Runtime.TypeSystem.BoxedValueTypeRepresentation_71>:
 8011fb0:	0004 0000 5370 0801 ab03 abab 2109 0010     ....pS.......!..
	...
 8011fd4:	70c0 0801 2010 0801 7120 0801               .p... .. q..

08011fe0 <System.RuntimeType_72>:
 8011fe0:	0004 0000 2280 0801 2010 0801 46c0 46c0     ....."... ...F.F

08011ff0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_73>:
 8011ff0:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 8012000:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

08012010 <Microsoft.Zelig.Runtime.TypeSystem.VTable_74>:
 8012010:	0004 0000 1b80 0801 0002 0000 0000 0000     ................
 8012020:	1fb0 0801 1fe0 0801 ab00 abab 1ff0 0801     ................
 8012030:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08012040 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_75>:
 8012040:	0004 0000 7150 0801 ab12 abab 2081 0010     ....Pq....... ..
 8012050:	0000 0000 7180 0801 6e10 0801 0000 0000     .....q...n......
 8012060:	0000 0000 3770 0801 20a0 0801               ....p7... ..

0801206c <System.RuntimeType_76>:
 801206c:	0004 0000 2280 0801 20a0 0801 46c0 46c0     ....."... ...F.F
 801207c:	46c0 46c0                                   .F.F

08012080 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_77>:
 8012080:	0004 0000 1bf0 0801 0004 0000 109d 0800     ................
 8012090:	1431 0800 151d 0800 152f 0800 46c0 46c0     1......./....F.F

080120a0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_78>:
 80120a0:	0004 0000 1b80 0801 0008 0000 0000 0000     ................
 80120b0:	2040 0801 206c 0801 ab44 abab 2080 0801     @ ..l ..D.... ..
 80120c0:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

080120d0 <Microsoft.Zelig.Runtime.TypeSystem.BoxedValueTypeRepresentation_79>:
 80120d0:	0004 0000 5370 0801 ab08 abab 2109 0010     ....pS.......!..
	...
 80120f4:	70c0 0801 2130 0801 71a0 0801               .p..0!...q..

08012100 <System.RuntimeType_80>:
 8012100:	0004 0000 2280 0801 2130 0801 46c0 46c0     ....."..0!...F.F

08012110 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_81>:
 8012110:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 8012120:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

08012130 <Microsoft.Zelig.Runtime.TypeSystem.VTable_82>:
 8012130:	0004 0000 1b80 0801 0004 0000 0000 0000     ................
 8012140:	20d0 0801 2100 0801 ab00 abab 2110 0801     . ...!.......!..
 8012150:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08012160 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_83>:
 8012160:	0004 0000 7150 0801 ab12 abab 2081 0010     ....Pq....... ..
 8012170:	0000 0000 71d0 0801 6e10 0801 0000 0000     .....q...n......
 8012180:	0000 0000 2040 0801 21c0 0801               ....@ ...!..

0801218c <System.RuntimeType_84>:
 801218c:	0004 0000 2280 0801 21c0 0801 46c0 46c0     ....."...!...F.F
 801219c:	46c0 46c0                                   .F.F

080121a0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_85>:
 80121a0:	0004 0000 1bf0 0801 0004 0000 109d 0800     ................
 80121b0:	18d1 0800 1951 0800 19ff 0800 46c0 46c0     ....Q........F.F

080121c0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_86>:
 80121c0:	0004 0000 1b80 0801 000c 0000 0000 0000     ................
 80121d0:	2160 0801 218c 0801 ab44 abab 21a0 0801     `!...!..D....!..
 80121e0:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

080121f0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_87>:
 80121f0:	0004 0000 6da0 0801 ab12 abab 2001 0010     .....m....... ..
 8012200:	0000 0000 7210 0801 6e10 0801 0000 0000     .....r...n......
 8012210:	0000 0000 29e0 0801 2250 0801               .....)..P"..

0801221c <System.RuntimeType_88>:
 801221c:	0004 0000 2280 0801 2250 0801 46c0 46c0     ....."..P"...F.F
 801222c:	46c0 46c0                                   .F.F

08012230 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_89>:
 8012230:	0004 0000 1bf0 0801 0004 0000 0729 0800     ............)...
 8012240:	0765 0800 0781 0800 0791 0800 46c0 46c0     e............F.F

08012250 <Microsoft.Zelig.Runtime.TypeSystem.VTable_90>:
 8012250:	0004 0000 1b80 0801 0008 0000 0000 0000     ................
 8012260:	21f0 0801 221c 0801 ab44 abab 2230 0801     .!..."..D...0"..
 8012270:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08012280 <Microsoft.Zelig.Runtime.TypeSystem.VTable_91>:
 8012280:	0004 0000 1b80 0801 0004 0000 0000 0000     ................
 8012290:	7260 0801 728c 0801 ab44 abab 72a0 0801     `r...r..D....r..
 80122a0:	1c64 0801                                   d...

080122a4 <System.RuntimeType_92>:
 80122a4:	0004 0000 2280 0801 1a10 0801               ....."......

080122b0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_93>:
 80122b0:	0004 0000 6da0 0801 ab12 abab 2101 0010     .....m.......!..
 80122c0:	0000 0000 72d0 0801 7300 0801 0000 0000     .....r...s......
 80122d0:	0000 0000 3770 0801 2310 0801               ....p7...#..

080122dc <System.RuntimeType_94>:
 80122dc:	0004 0000 2280 0801 2310 0801 46c0 46c0     ....."...#...F.F
 80122ec:	46c0 46c0                                   .F.F

080122f0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_95>:
 80122f0:	0004 0000 1bf0 0801 0003 0000 2885 0800     .............(..
 8012300:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

08012310 <Microsoft.Zelig.Runtime.TypeSystem.VTable_96>:
 8012310:	0004 0000 1b80 0801 000c 0000 0000 0000     ................
 8012320:	22b0 0801 22dc 0801 ab44 abab 22f0 0801     ."..."..D...."..
 8012330:	1c64 0801                                   d...

08012334 <System.String_97>:
 8012334:	0004 0000 1a10 0801 0000 0000 0000 0000     ................
 8012344:	46c0 46c0 46c0 46c0 46c0 46c0               .F.F.F.F.F.F

08012350 <System.Char[]_98>:
 8012350:	0004 0000 1af0 0801 0019 0000 0009 000a     ................
 8012360:	000b 000c 000d 0020 0085 00a0 1680 2000     ...... ........ 
 8012370:	2001 2002 2003 2004 2005 2006 2007 2008     . . . . . . . . 
 8012380:	2009 200a 200b 2028 2029 3000 feff 46c0     . . . ( ) .0...F

08012390 <Microsoft.Zelig.Runtime.TypeSystem.BoxedValueTypeRepresentation_99>:
 8012390:	0004 0000 5370 0801 ab09 abab 2109 0010     ....pS.......!..
	...
 80123b4:	70c0 0801 23f0 0801 7330 0801               .p...#..0s..

080123c0 <System.RuntimeType_100>:
 80123c0:	0004 0000 2280 0801 23f0 0801 46c0 46c0     ....."...#...F.F

080123d0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_101>:
 80123d0:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 80123e0:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

080123f0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_102>:
 80123f0:	0004 0000 1b80 0801 0004 0000 0000 0000     ................
 8012400:	2390 0801 23c0 0801 ab00 abab 23d0 0801     .#...#.......#..
 8012410:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08012420 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_103>:
 8012420:	0004 0000 6da0 0801 ab12 abab 2001 0010     .....m....... ..
 8012430:	0000 0000 7360 0801 73a0 0801 0000 0000     ....`s...s......
 8012440:	0000 0000 6f30 0801 2480 0801               ....0o...$..

0801244c <System.RuntimeType_104>:
 801244c:	0004 0000 2280 0801 2480 0801 46c0 46c0     ....."...$...F.F
 801245c:	46c0 46c0                                   .F.F

08012460 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_105>:
 8012460:	0004 0000 1bf0 0801 0004 0000 0729 0800     ............)...
 8012470:	0765 0800 0781 0800 0985 0800 46c0 46c0     e............F.F

08012480 <Microsoft.Zelig.Runtime.TypeSystem.VTable_106>:
 8012480:	0004 0000 1b80 0801 0004 0000 0000 0000     ................
 8012490:	2420 0801 244c 0801 ab44 abab 2460 0801      $..L$..D...`$..
 80124a0:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

080124b0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_107>:
 80124b0:	0004 0000 6da0 0801 ab12 abab 0002 0010     .....m..........
 80124c0:	0000 0000 73d0 0801 2334 0801 3dc0 0801     .....s..4#...=..
 80124d0:	0000 0000 3770 0801 2510 0801               ....p7...%..

080124dc <System.RuntimeType_108>:
 80124dc:	0004 0000 2280 0801 2510 0801 46c0 46c0     ....."...%...F.F
 80124ec:	46c0 46c0                                   .F.F

080124f0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_109>:
 80124f0:	0004 0000 1bf0 0801 0004 0000 109d 0800     ................
 8012500:	0765 0800 0781 0800 3969 0800 46c0 46c0     e.......i9...F.F

08012510 <Microsoft.Zelig.Runtime.TypeSystem.VTable_110>:
 8012510:	0004 0000 1b80 0801 0014 0000 0000 0000     ................
 8012520:	24b0 0801 24dc 0801 ab44 abab 24f0 0801     .$...$..D....$..
 8012530:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08012540 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_111>:
 8012540:	0004 0000 6da0 0801 ab12 abab 0002 0010     .....m..........
 8012550:	0000 0000 73f0 0801 2334 0801 7410 0801     .....s..4#...t..
 8012560:	0000 0000 7440 0801 25c0 0801               ....@t...%..

0801256c <System.RuntimeType_112>:
 801256c:	0004 0000 2280 0801 25c0 0801 46c0 46c0     ....."...%...F.F
 801257c:	46c0 46c0                                   .F.F

08012580 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_113>:
 8012580:	0004 0000 1bf0 0801 000b 0000 109d 0800     ................
 8012590:	0765 0800 0781 0800 39c1 0800 39d9 0800     e........9...9..
 80125a0:	3de9 0800 3e2d 0800 3e3d 0800 3e49 0800     .=..->..=>..I>..
 80125b0:	3e59 0800 3e61 0800 46c0 46c0 46c0 46c0     Y>..a>...F.F.F.F

080125c0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_114>:
 80125c0:	0004 0000 1b80 0801 0008 0000 0000 0000     ................
 80125d0:	2540 0801 256c 0801 ab44 abab 2580 0801     @%..l%..D....%..
 80125e0:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

080125f0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_115>:
 80125f0:	0004 0000 6da0 0801 ab12 abab 0101 0010     .....m..........
 8012600:	0000 0000 7470 0801 74a0 0801 0000 0000     ....pt...t......
 8012610:	74e0 0801 3770 0801 2650 0801               .t..p7..P&..

0801261c <System.RuntimeType_116>:
 801261c:	0004 0000 2280 0801 2650 0801 46c0 46c0     ....."..P&...F.F
 801262c:	46c0 46c0                                   .F.F

08012630 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_117>:
 8012630:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 8012640:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

08012650 <Microsoft.Zelig.Runtime.TypeSystem.VTable_118>:
 8012650:	0004 0000 1b80 0801 000c 0000 0000 0000     ................
 8012660:	25f0 0801 261c 0801 ab44 abab 2630 0801     .%...&..D...0&..
 8012670:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08012680 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_119>:
 8012680:	0004 0000 6da0 0801 ab12 abab 0101 0010     .....m..........
 8012690:	0000 0000 74f0 0801 74a0 0801 0000 0000     .....t...t......
 80126a0:	7518 0801 3770 0801 26e0 0801               .u..p7...&..

080126ac <System.RuntimeType_120>:
 80126ac:	0004 0000 2280 0801 26e0 0801 46c0 46c0     ....."...&...F.F
 80126bc:	46c0 46c0                                   .F.F

080126c0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_121>:
 80126c0:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 80126d0:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

080126e0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_122>:
 80126e0:	0004 0000 1b80 0801 0008 0000 0000 0000     ................
 80126f0:	2680 0801 26ac 0801 ab44 abab 26c0 0801     .&...&..D....&..
 8012700:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08012710 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_123>:
 8012710:	0004 0000 6da0 0801 ab12 abab 0101 0010     .....m..........
 8012720:	0000 0000 74f0 0801 74a0 0801 0000 0000     .....t...t......
 8012730:	7528 0801 3770 0801 2770 0801               (u..p7..p'..

0801273c <System.RuntimeType_124>:
 801273c:	0004 0000 2280 0801 2770 0801 46c0 46c0     ....."..p'...F.F
 801274c:	46c0 46c0                                   .F.F

08012750 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_125>:
 8012750:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 8012760:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

08012770 <Microsoft.Zelig.Runtime.TypeSystem.VTable_126>:
 8012770:	0004 0000 1b80 0801 0008 0000 0000 0000     ................
 8012780:	2710 0801 273c 0801 ab44 abab 2750 0801     .'..<'..D...P'..
 8012790:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

080127a0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_127>:
 80127a0:	0004 0000 6da0 0801 ab12 abab 0101 0000     .....m..........
 80127b0:	0000 0000 7540 0801 73a0 0801 0000 0000     ....@u...s......
 80127c0:	0000 0000 2160 0801 2800 0801               ....`!...(..

080127cc <System.RuntimeType_128>:
 80127cc:	0004 0000 2280 0801 2800 0801 46c0 46c0     ....."...(...F.F
 80127dc:	46c0 46c0                                   .F.F

080127e0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_129>:
 80127e0:	0004 0000 1bf0 0801 0005 0000 109d 0800     ................
 80127f0:	18d1 0800 1951 0800 19ff 0800 3f55 0800     ....Q.......U?..

08012800 <Microsoft.Zelig.Runtime.TypeSystem.VTable_130>:
 8012800:	0004 0000 1b80 0801 000c 0000 0000 0000     ................
 8012810:	27a0 0801 27cc 0801 ab44 abab 27e0 0801     .'...'..D....'..
 8012820:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08012830 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_141>:
 8012830:	0004 0000 6da0 0801 ab12 abab 0101 0010     .....m..........
 8012840:	0000 0000 7570 0801 73a0 0801 0000 0000     ....pu...s......
 8012850:	0000 0000 7590 0801 2890 0801               .....u...(..

0801285c <System.RuntimeType_142>:
 801285c:	0004 0000 2280 0801 2890 0801 46c0 46c0     ....."...(...F.F
 801286c:	46c0 46c0                                   .F.F

08012870 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_143>:
 8012870:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 8012880:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

08012890 <Microsoft.Zelig.Runtime.TypeSystem.VTable_144>:
 8012890:	0004 0000 1b80 0801 0048 0000 0000 0000     ........H.......
 80128a0:	2830 0801 285c 0801 ab44 abab 2870 0801     0(..\(..D...p(..
 80128b0:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

080128c0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_145>:
 80128c0:	0004 0000 6da0 0801 ab12 abab 0101 0010     .....m..........
 80128d0:	0000 0000 74f0 0801 74a0 0801 0000 0000     .....t...t......
 80128e0:	75bc 0801 3770 0801 2920 0801               .u..p7.. )..

080128ec <System.RuntimeType_146>:
 80128ec:	0004 0000 2280 0801 2920 0801 46c0 46c0     .....".. )...F.F
 80128fc:	46c0 46c0                                   .F.F

08012900 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_147>:
 8012900:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 8012910:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

08012920 <Microsoft.Zelig.Runtime.TypeSystem.VTable_148>:
 8012920:	0004 0000 1b80 0801 0008 0000 0000 0000     ................
 8012930:	28c0 0801 28ec 0801 ab44 abab 2900 0801     .(...(..D....)..
 8012940:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08012950 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_150>:
 8012950:	0004 0000 6da0 0801 ab12 abab 0001 0014     .....m..........
 8012960:	0000 0000 75d0 0801 73a0 0801 0000 0000     .....u...s......
 8012970:	0000 0000 7600 0801 29b0 0801               .....v...)..

0801297c <System.RuntimeType_151>:
 801297c:	0004 0000 2280 0801 29b0 0801 46c0 46c0     ....."...)...F.F
 801298c:	46c0 46c0                                   .F.F

08012990 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_152>:
 8012990:	0004 0000 1bf0 0801 0005 0000 109d 0800     ................
 80129a0:	0765 0800 0781 0800 4bd9 0800 4c01 0800     e........K...L..

080129b0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_153>:
 80129b0:	0004 0000 1b80 0801 000c 0000 0000 0000     ................
 80129c0:	2950 0801 297c 0801 ab44 abab 2990 0801     P)..|)..D....)..
 80129d0:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

080129e0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_154>:
 80129e0:	0004 0000 6da0 0801 ab12 abab 2001 0010     .....m....... ..
 80129f0:	0000 0000 7630 0801 6e10 0801 0000 0000     ....0v...n......
 8012a00:	0000 0000 6f30 0801 2a40 0801               ....0o..@*..

08012a0c <System.RuntimeType_155>:
 8012a0c:	0004 0000 2280 0801 2a40 0801 46c0 46c0     ....."..@*...F.F
 8012a1c:	46c0 46c0                                   .F.F

08012a20 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_156>:
 8012a20:	0004 0000 1bf0 0801 0004 0000 0729 0800     ............)...
 8012a30:	0765 0800 0781 0800 0791 0800 46c0 46c0     e............F.F

08012a40 <Microsoft.Zelig.Runtime.TypeSystem.VTable_157>:
 8012a40:	0004 0000 1b80 0801 0008 0000 0000 0000     ................
 8012a50:	29e0 0801 2a0c 0801 ab44 abab 2a20 0801     .)...*..D... *..
 8012a60:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08012a70 <System.String_158>:
 8012a70:	0004 0000 1a10 0801 002f 0000 002f 0000     ......../.../...
 8012a80:	0052 0065 0071 0075 0065 0073 0074 0020     R.e.q.u.e.s.t. .
 8012a90:	0053 0056 0043 0020 0064 006f 0065 0073     S.V.C. .d.o.e.s.
 8012aa0:	0020 006e 006f 0074 0020 0065 0078 0069      .n.o.t. .e.x.i.
 8012ab0:	0073 0074 0073 0020 006f 0072 0020 0069     s.t.s. .o.r. .i.
 8012ac0:	0073 0020 006e 006f 0074 0020 0073 0075     s. .n.o.t. .s.u.
 8012ad0:	0070 0070 006f 0072 0074 0065 0064 46c0     p.p.o.r.t.e.d..F

08012ae0 <System.String_159>:
 8012ae0:	0004 0000 1a10 0801 000b 0000 000b 0000     ................
 8012af0:	0043 0046 0053 0052 003d 0030 0078 0025     C.F.S.R.=.0.x.%.
 8012b00:	0030 0038 0078 46c0 46c0 46c0 46c0 46c0     0.8.x..F.F.F.F.F

08012b10 <System.String_160>:
 8012b10:	0004 0000 1a10 0801 000b 0000 000b 0000     ................
 8012b20:	0042 0046 0041 0052 003d 0030 0078 0025     B.F.A.R.=.0.x.%.
 8012b30:	0030 0038 0078 46c0 46c0 46c0 46c0 46c0     0.8.x..F.F.F.F.F

08012b40 <System.String_161>:
 8012b40:	0004 0000 1a10 0801 000b 0000 000b 0000     ................
 8012b50:	0050 0043 0020 0020 003d 0030 0078 0025     P.C. . .=.0.x.%.
 8012b60:	0030 0038 0078 46c0 46c0 46c0 46c0 46c0     0.8.x..F.F.F.F.F

08012b70 <System.String_162>:
 8012b70:	0004 0000 1a10 0801 004a 0000 004a 0000     ........J...J...
 8012b80:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 8012b90:	0074 002e 005a 0065 006c 0069 0067 002e     t...Z.e.l.i.g...
 8012ba0:	0052 0075 006e 0074 0069 006d 0065 002e     R.u.n.t.i.m.e...
 8012bb0:	0054 0061 0072 0067 0065 0074 0050 006c     T.a.r.g.e.t.P.l.
 8012bc0:	0061 0074 0066 006f 0072 006d 002e 0041     a.t.f.o.r.m...A.
 8012bd0:	0052 004d 0076 0037 002e 0050 0072 006f     R.M.v.7...P.r.o.
 8012be0:	0063 0065 0073 0073 006f 0072 0041 0052     c.e.s.s.o.r.A.R.
 8012bf0:	004d 0076 0037 004d 002e 004d 0065 0074     M.v.7.M...M.e.t.
 8012c00:	0068 006f 0064 0057 0072 0061 0070 0070     h.o.d.W.r.a.p.p.
 8012c10:	0065 0072 46c0 46c0 46c0 46c0 46c0 46c0     e.r..F.F.F.F.F.F

08012c20 <System.String_163>:
 8012c20:	0004 0000 1a10 0801 00b4 0000 00b4 0000     ................
 8012c30:	0076 006f 0069 0064 0020 004d 0069 0063     v.o.i.d. .M.i.c.
 8012c40:	0072 006f 0073 006f 0066 0074 002e 005a     r.o.s.o.f.t...Z.
 8012c50:	0065 006c 0069 0067 002e 0052 0075 006e     e.l.i.g...R.u.n.
 8012c60:	0074 0069 006d 0065 002e 0054 0061 0072     t.i.m.e...T.a.r.
 8012c70:	0067 0065 0074 0050 006c 0061 0074 0066     g.e.t.P.l.a.t.f.
 8012c80:	006f 0072 006d 002e 0041 0052 004d 0076     o.r.m...A.R.M.v.
 8012c90:	0037 002e 0050 0072 006f 0063 0065 0073     7...P.r.o.c.e.s.
 8012ca0:	0073 006f 0072 0041 0052 004d 0076 0037     s.o.r.A.R.M.v.7.
 8012cb0:	004d 002e 004d 0065 0074 0068 006f 0064     M...M.e.t.h.o.d.
 8012cc0:	0057 0072 0061 0070 0070 0065 0072 003a     W.r.a.p.p.e.r.:.
 8012cd0:	003a 0050 0072 006f 006c 006f 0067 0075     :.P.r.o.l.o.g.u.
 8012ce0:	0065 0028 0073 0074 0072 0069 006e 0067     e.(.s.t.r.i.n.g.
 8012cf0:	002c 0073 0074 0072 0069 006e 0067 002c     ,.s.t.r.i.n.g.,.
 8012d00:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 8012d10:	0074 002e 005a 0065 006c 0069 0067 002e     t...Z.e.l.i.g...
 8012d20:	0052 0075 006e 0074 0069 006d 0065 002e     R.u.n.t.i.m.e...
 8012d30:	0054 0079 0070 0065 0053 0079 0073 0074     T.y.p.e.S.y.s.t.
 8012d40:	0065 006d 002e 004d 0065 0074 0068 006f     e.m...M.e.t.h.o.
 8012d50:	0064 0052 0065 0070 0072 0065 0073 0065     d.R.e.p.r.e.s.e.
 8012d60:	006e 0074 0061 0074 0069 006f 006e 002e     n.t.a.t.i.o.n...
 8012d70:	0042 0075 0069 006c 0064 0054 0069 006d     B.u.i.l.d.T.i.m.
 8012d80:	0065 0041 0074 0074 0072 0069 0062 0075     e.A.t.t.r.i.b.u.
 8012d90:	0074 0065 0073 0029 46c0 46c0 46c0 46c0     t.e.s.)..F.F.F.F

08012da0 <System.String_164>:
 8012da0:	0004 0000 1a10 0801 00b4 0000 00b4 0000     ................
 8012db0:	0076 006f 0069 0064 0020 004d 0069 0063     v.o.i.d. .M.i.c.
 8012dc0:	0072 006f 0073 006f 0066 0074 002e 005a     r.o.s.o.f.t...Z.
 8012dd0:	0065 006c 0069 0067 002e 0052 0075 006e     e.l.i.g...R.u.n.
 8012de0:	0074 0069 006d 0065 002e 0054 0061 0072     t.i.m.e...T.a.r.
 8012df0:	0067 0065 0074 0050 006c 0061 0074 0066     g.e.t.P.l.a.t.f.
 8012e00:	006f 0072 006d 002e 0041 0052 004d 0076     o.r.m...A.R.M.v.
 8012e10:	0037 002e 0050 0072 006f 0063 0065 0073     7...P.r.o.c.e.s.
 8012e20:	0073 006f 0072 0041 0052 004d 0076 0037     s.o.r.A.R.M.v.7.
 8012e30:	004d 002e 004d 0065 0074 0068 006f 0064     M...M.e.t.h.o.d.
 8012e40:	0057 0072 0061 0070 0070 0065 0072 003a     W.r.a.p.p.e.r.:.
 8012e50:	003a 0045 0070 0069 006c 006f 0067 0075     :.E.p.i.l.o.g.u.
 8012e60:	0065 0028 0073 0074 0072 0069 006e 0067     e.(.s.t.r.i.n.g.
 8012e70:	002c 0073 0074 0072 0069 006e 0067 002c     ,.s.t.r.i.n.g.,.
 8012e80:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 8012e90:	0074 002e 005a 0065 006c 0069 0067 002e     t...Z.e.l.i.g...
 8012ea0:	0052 0075 006e 0074 0069 006d 0065 002e     R.u.n.t.i.m.e...
 8012eb0:	0054 0079 0070 0065 0053 0079 0073 0074     T.y.p.e.S.y.s.t.
 8012ec0:	0065 006d 002e 004d 0065 0074 0068 006f     e.m...M.e.t.h.o.
 8012ed0:	0064 0052 0065 0070 0072 0065 0073 0065     d.R.e.p.r.e.s.e.
 8012ee0:	006e 0074 0061 0074 0069 006f 006e 002e     n.t.a.t.i.o.n...
 8012ef0:	0042 0075 0069 006c 0064 0054 0069 006d     B.u.i.l.d.T.i.m.
 8012f00:	0065 0041 0074 0074 0072 0069 0062 0075     e.A.t.t.r.i.b.u.
 8012f10:	0074 0065 0073 0029 46c0 46c0 46c0 46c0     t.e.s.)..F.F.F.F

08012f20 <System.String_165>:
 8012f20:	0004 0000 1a10 0801 0033 0000 0033 0000     ........3...3...
 8012f30:	0046 006f 0075 006e 0064 0020 0061 0072     F.o.u.n.d. .a.r.
 8012f40:	0072 0061 0079 0020 0074 0068 0061 0074     r.a.y. .t.h.a.t.
 8012f50:	0020 0064 006f 0065 0073 0020 006e 006f      .d.o.e.s. .n.o.
 8012f60:	0074 0020 0069 006e 0068 0065 0072 0069     t. .i.n.h.e.r.i.
 8012f70:	0074 0020 0066 0072 006f 006d 0020 0053     t. .f.r.o.m. .S.
 8012f80:	0079 0073 0074 0065 006d 002e 0041 0072     y.s.t.e.m...A.r.
 8012f90:	0072 0061 0079 46c0 46c0 46c0 46c0 46c0     r.a.y..F.F.F.F.F

08012fa0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_166>:
 8012fa0:	0004 0000 7150 0801 ab12 abab 0081 0010     ....Pq..........
 8012fb0:	0000 0000 7670 0801 7000 0801 0000 0000     ....pv...p......
 8012fc0:	0000 0000 76c0 0801 3020 0801               .....v.. 0..

08012fcc <System.RuntimeType_167>:
 8012fcc:	0004 0000 2280 0801 3020 0801 46c0 46c0     .....".. 0...F.F
 8012fdc:	46c0 46c0                                   .F.F

08012fe0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_168>:
 8012fe0:	0004 0000 1bf0 0801 000a 0000 109d 0800     ................
 8012ff0:	0a35 0800 0a8b 0800 0ac9 0800 0b29 0800     5...........)...
 8013000:	0b35 0800 0b3f 0800 0b7d 0800 6081 0800     5...?...}....`..
 8013010:	0000 0000 46c0 46c0 46c0 46c0 46c0 46c0     .....F.F.F.F.F.F

08013020 <Microsoft.Zelig.Runtime.TypeSystem.VTable_169>:
 8013020:	0004 0000 1b80 0801 0028 0000 0000 0000     ........(.......
 8013030:	2fa0 0801 2fcc 0801 ab44 abab 2fe0 0801     ./.../..D..../..
 8013040:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08013050 <System.String_170>:
 8013050:	0004 0000 1a10 0801 000b 0000 000b 0000     ................
 8013060:	0056 0054 0061 0062 006c 0065 0028 007b     V.T.a.b.l.e.(.{.
 8013070:	0030 007d 0029 46c0 46c0 46c0 46c0 46c0     0.}.)..F.F.F.F.F

08013080 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_171>:
 8013080:	0004 0000 6da0 0801 ab12 abab 0103 0010     .....m..........
 8013090:	0000 0000 76f0 0801 2334 0801 7730 0801     .....v..4#..0w..
 80130a0:	0000 0000 3770 0801 30e0 0801               ....p7...0..

080130ac <System.RuntimeType_172>:
 80130ac:	0004 0000 2280 0801 30e0 0801 46c0 46c0     ....."...0...F.F
 80130bc:	46c0 46c0                                   .F.F

080130c0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_173>:
 80130c0:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 80130d0:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

080130e0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_174>:
 80130e0:	0004 0000 1b80 0801 000c 0000 0000 0000     ................
 80130f0:	3080 0801 30ac 0801 ab44 abab 30c0 0801     .0...0..D....0..
 8013100:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08013110 <Microsoft.Zelig.Runtime.TypeSystem.SzArrayReferenceTypeRepresentation_175>:
 8013110:	0004 0000 1e40 0801 ab1d abab 0000 0000     ....@...........
	...
 8013134:	7760 0801 3170 0801 5b10 0801               `w..p1...[..

08013140 <System.RuntimeType_176>:
 8013140:	0004 0000 2280 0801 3170 0801 46c0 46c0     ....."..p1...F.F

08013150 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_177>:
 8013150:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 8013160:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

08013170 <Microsoft.Zelig.Runtime.TypeSystem.VTable_178>:
 8013170:	0004 0000 1b80 0801 0004 0000 0004 0000     ................
 8013180:	3110 0801 3140 0801 abc6 abab 3150 0801     .1..@1......P1..
 8013190:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

080131a0 <Microsoft.Zelig.Runtime.TypeSystem.SzArrayReferenceTypeRepresentation_179>:
 80131a0:	0004 0000 1e40 0801 ab1d abab 0000 0000     ....@...........
	...
 80131c4:	7760 0801 3200 0801 7790 0801               `w...2...w..

080131d0 <System.RuntimeType_180>:
 80131d0:	0004 0000 2280 0801 3200 0801 46c0 46c0     ....."...2...F.F

080131e0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_181>:
 80131e0:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 80131f0:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

08013200 <Microsoft.Zelig.Runtime.TypeSystem.VTable_182>:
 8013200:	0004 0000 1b80 0801 0004 0000 0004 0000     ................
 8013210:	31a0 0801 31d0 0801 abc6 abab 31e0 0801     .1...1.......1..
 8013220:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08013230 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_183>:
 8013230:	0004 0000 6da0 0801 ab12 abab 0000 0010     .....m..........
 8013240:	0000 0000 77c0 0801 7800 0801 0000 0000     .....w...x......
 8013250:	0000 0000 7790 0801 3290 0801               .....w...2..

0801325c <System.RuntimeType_184>:
 801325c:	0004 0000 2280 0801 3290 0801 46c0 46c0     ....."...2...F.F
 801326c:	46c0 46c0                                   .F.F

08013270 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_185>:
 8013270:	0004 0000 1bf0 0801 0004 0000 109d 0800     ................
 8013280:	0765 0800 0781 0800 6589 0800 46c0 46c0     e........e...F.F

08013290 <Microsoft.Zelig.Runtime.TypeSystem.VTable_186>:
 8013290:	0004 0000 1b80 0801 0004 0000 0000 0000     ................
 80132a0:	3230 0801 325c 0801 ab44 abab 3270 0801     02..\2..D...p2..
 80132b0:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

080132c0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_187>:
 80132c0:	0004 0000 6da0 0801 ab12 abab 0000 0010     .....m..........
 80132d0:	0000 0000 7850 0801 7800 0801 0000 0000     ....Px...x......
 80132e0:	0000 0000 7790 0801 3320 0801               .....w.. 3..

080132ec <System.RuntimeType_188>:
 80132ec:	0004 0000 2280 0801 3320 0801 46c0 46c0     .....".. 3...F.F
 80132fc:	46c0 46c0                                   .F.F

08013300 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_189>:
 8013300:	0004 0000 1bf0 0801 0004 0000 109d 0800     ................
 8013310:	0765 0800 0781 0800 65ff 0800 46c0 46c0     e........e...F.F

08013320 <Microsoft.Zelig.Runtime.TypeSystem.VTable_190>:
 8013320:	0004 0000 1b80 0801 0004 0000 0000 0000     ................
 8013330:	32c0 0801 32ec 0801 ab44 abab 3300 0801     .2...2..D....3..
 8013340:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08013350 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_191>:
 8013350:	0004 0000 6da0 0801 ab12 abab 0000 0010     .....m..........
 8013360:	0000 0000 7890 0801 7800 0801 0000 0000     .....x...x......
 8013370:	0000 0000 7790 0801 33b0 0801               .....w...3..

0801337c <System.RuntimeType_192>:
 801337c:	0004 0000 2280 0801 33b0 0801 46c0 46c0     ....."...3...F.F
 801338c:	46c0 46c0                                   .F.F

08013390 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_193>:
 8013390:	0004 0000 1bf0 0801 0004 0000 109d 0800     ................
 80133a0:	0765 0800 0781 0800 6677 0800 46c0 46c0     e.......wf...F.F

080133b0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_194>:
 80133b0:	0004 0000 1b80 0801 0004 0000 0000 0000     ................
 80133c0:	3350 0801 337c 0801 ab44 abab 3390 0801     P3..|3..D....3..
 80133d0:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

080133e0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_195>:
 80133e0:	0004 0000 6da0 0801 ab12 abab 0001 0010     .....m..........
 80133f0:	0000 0000 78d0 0801 78f0 0801 0000 0000     .....x...x......
 8013400:	0000 0000 3770 0801 3440 0801               ....p7..@4..

0801340c <System.RuntimeType_196>:
 801340c:	0004 0000 2280 0801 3440 0801 46c0 46c0     ....."..@4...F.F
 801341c:	46c0 46c0                                   .F.F

08013420 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_197>:
 8013420:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 8013430:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

08013440 <Microsoft.Zelig.Runtime.TypeSystem.VTable_198>:
 8013440:	0004 0000 1b80 0801 000c 0000 0000 0000     ................
 8013450:	33e0 0801 340c 0801 ab44 abab 3420 0801     .3...4..D... 4..
 8013460:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08013470 <System.String_199>:
 8013470:	0004 0000 1a10 0801 0004 0000 0004 0000     ................
 8013480:	0053 0050 0049 0030 46c0 46c0 46c0 46c0     S.P.I.0..F.F.F.F

08013490 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_200>:
 8013490:	0004 0000 6da0 0801 ab12 abab 0101 0010     .....m..........
 80134a0:	0000 0000 7940 0801 7980 0801 0000 0000     ....@y...y......
 80134b0:	0000 0000 3770 0801 34f0 0801               ....p7...4..

080134bc <System.RuntimeType_201>:
 80134bc:	0004 0000 2280 0801 34f0 0801 46c0 46c0     ....."...4...F.F
 80134cc:	46c0 46c0                                   .F.F

080134d0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_202>:
 80134d0:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 80134e0:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

080134f0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_203>:
 80134f0:	0004 0000 1b80 0801 0014 0000 0000 0000     ................
 8013500:	3490 0801 34bc 0801 ab44 abab 34d0 0801     .4...4..D....4..
 8013510:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08013520 <Microsoft.Zelig.Runtime.TypeSystem.SzArrayReferenceTypeRepresentation_204>:
 8013520:	0004 0000 1e40 0801 ab1d abab 0000 0000     ....@...........
	...
 8013544:	7760 0801 3580 0801 70f0 0801               `w...5...p..

08013550 <System.RuntimeType_205>:
 8013550:	0004 0000 2280 0801 3580 0801 46c0 46c0     ....."...5...F.F

08013560 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_206>:
 8013560:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 8013570:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

08013580 <Microsoft.Zelig.Runtime.TypeSystem.VTable_207>:
 8013580:	0004 0000 1b80 0801 0004 0000 0001 0000     ................
 8013590:	3520 0801 3550 0801 abc6 abab 3560 0801      5..P5......`5..
 80135a0:	1c64 0801                                   d...

080135a4 <System.Byte[]_208>:
 80135a4:	0004 0000 3580 0801 0003 0000 0201 c003     .....5..........
 80135b4:	c046 c046 c046 c046 c046 0046               F.F.F.F.F.F.

080135c0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_209>:
 80135c0:	0004 0000 6da0 0801 ab12 abab 0101 0014     .....m..........
 80135d0:	0000 0000 79c0 0801 73a0 0801 0000 0000     .....y...s......
 80135e0:	0000 0000 2950 0801 3620 0801               ....P).. 6..

080135ec <System.RuntimeType_210>:
 80135ec:	0004 0000 2280 0801 3620 0801 46c0 46c0     .....".. 6...F.F
 80135fc:	46c0 46c0                                   .F.F

08013600 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_211>:
 8013600:	0004 0000 1bf0 0801 0005 0000 109d 0800     ................
 8013610:	0765 0800 0781 0800 4bd9 0800 4c01 0800     e........K...L..

08013620 <Microsoft.Zelig.Runtime.TypeSystem.VTable_212>:
 8013620:	0004 0000 1b80 0801 000c 0000 0000 0000     ................
 8013630:	35c0 0801 35ec 0801 ab44 abab 3600 0801     .5...5..D....6..
 8013640:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08013650 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_214>:
 8013650:	0004 0000 6da0 0801 ab12 abab 0101 0000     .....m..........
 8013660:	0000 0000 79f0 0801 73a0 0801 0000 0000     .....y...s......
 8013670:	0000 0000 2160 0801 36b0 0801               ....`!...6..

0801367c <System.RuntimeType_215>:
 801367c:	0004 0000 2280 0801 36b0 0801 46c0 46c0     ....."...6...F.F
 801368c:	46c0 46c0                                   .F.F

08013690 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_216>:
 8013690:	0004 0000 1bf0 0801 0005 0000 109d 0800     ................
 80136a0:	18d1 0800 1951 0800 19ff 0800 69f1 0800     ....Q........i..

080136b0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_217>:
 80136b0:	0004 0000 1b80 0801 000c 0000 0000 0000     ................
 80136c0:	3650 0801 367c 0801 ab44 abab 3690 0801     P6..|6..D....6..
 80136d0:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

080136e0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_219>:
 80136e0:	0004 0000 6da0 0801 ab12 abab 0101 0014     .....m..........
 80136f0:	0000 0000 78d0 0801 73a0 0801 0000 0000     .....x...s......
 8013700:	0000 0000 7a20 0801 3740 0801               .... z..@7..

0801370c <System.RuntimeType_220>:
 801370c:	0004 0000 2280 0801 3740 0801 46c0 46c0     ....."..@7...F.F
 801371c:	46c0 46c0                                   .F.F

08013720 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_221>:
 8013720:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 8013730:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

08013740 <Microsoft.Zelig.Runtime.TypeSystem.VTable_222>:
 8013740:	0004 0000 1b80 0801 0025 0000 0000 0000     ........%.......
 8013750:	36e0 0801 370c 0801 ab44 abab 3720 0801     .6...7..D... 7..
 8013760:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08013770 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_223>:
 8013770:	0004 0000 6da0 0801 ab1c abab 0001 0010     .....m..........
 8013780:	0000 0000 7a50 0801 6e10 0801 0000 0000     ....Pz...n......
	...
 8013798:	37d0 0801                                   .7..

0801379c <System.RuntimeType_224>:
 801379c:	0004 0000 2280 0801 37d0 0801 46c0 46c0     ....."...7...F.F
 80137ac:	46c0 46c0                                   .F.F

080137b0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_225>:
 80137b0:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 80137c0:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

080137d0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_226>:
 80137d0:	0004 0000 1b80 0801 0000 0000 0000 0000     ................
 80137e0:	3770 0801 379c 0801 ab44 abab 37b0 0801     p7...7..D....7..
 80137f0:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08013800 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_227>:
 8013800:	0004 0000 6da0 0801 ab12 abab 2101 0010     .....m.......!..
 8013810:	0000 0000 7a70 0801 7a90 0801 0000 0000     ....pz...z......
 8013820:	0000 0000 3770 0801 3860 0801               ....p7..`8..

0801382c <System.RuntimeType_228>:
 801382c:	0004 0000 2280 0801 3860 0801 46c0 46c0     ....."..`8...F.F
 801383c:	46c0 46c0                                   .F.F

08013840 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_229>:
 8013840:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 8013850:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

08013860 <Microsoft.Zelig.Runtime.TypeSystem.VTable_230>:
 8013860:	0004 0000 1b80 0801 000c 0000 0000 0000     ................
 8013870:	3800 0801 382c 0801 ab44 abab 3840 0801     .8..,8..D...@8..
 8013880:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08013890 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_231>:
 8013890:	0004 0000 6da0 0801 ab12 abab 0101 0010     .....m..........
 80138a0:	0000 0000 74f0 0801 74a0 0801 0000 0000     .....t...t......
 80138b0:	7ac4 0801 3770 0801 38f0 0801               .z..p7...8..

080138bc <System.RuntimeType_232>:
 80138bc:	0004 0000 2280 0801 38f0 0801 46c0 46c0     ....."...8...F.F
 80138cc:	46c0 46c0                                   .F.F

080138d0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_233>:
 80138d0:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 80138e0:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

080138f0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_234>:
 80138f0:	0004 0000 1b80 0801 0008 0000 0000 0000     ................
 8013900:	3890 0801 38bc 0801 ab44 abab 38d0 0801     .8...8..D....8..
 8013910:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08013920 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_235>:
 8013920:	0004 0000 6da0 0801 ab12 abab 0101 0014     .....m..........
 8013930:	0000 0000 7ae0 0801 73a0 0801 0000 0000     .....z...s......
 8013940:	0000 0000 2950 0801 3980 0801               ....P)...9..

0801394c <System.RuntimeType_236>:
 801394c:	0004 0000 2280 0801 3980 0801 46c0 46c0     ....."...9...F.F
 801395c:	46c0 46c0                                   .F.F

08013960 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_237>:
 8013960:	0004 0000 1bf0 0801 0005 0000 109d 0800     ................
 8013970:	0765 0800 0781 0800 4bd9 0800 4c01 0800     e........K...L..

08013980 <Microsoft.Zelig.Runtime.TypeSystem.VTable_238>:
 8013980:	0004 0000 1b80 0801 000c 0000 0000 0000     ................
 8013990:	3920 0801 394c 0801 ab44 abab 3960 0801      9..L9..D...`9..
 80139a0:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

080139b0 <Microsoft.Zelig.Runtime.TypeSystem.SzArrayReferenceTypeRepresentation_239>:
 80139b0:	0004 0000 1e40 0801 ab1d abab 0000 0000     ....@...........
	...
 80139d4:	7760 0801 3a10 0801 3a40 0801               `w...:..@:..

080139e0 <System.RuntimeType_240>:
 80139e0:	0004 0000 2280 0801 3a10 0801 46c0 46c0     ....."...:...F.F

080139f0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_241>:
 80139f0:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 8013a00:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

08013a10 <Microsoft.Zelig.Runtime.TypeSystem.VTable_242>:
 8013a10:	0004 0000 1b80 0801 0004 0000 0004 0000     ................
 8013a20:	39b0 0801 39e0 0801 abc6 abab 39f0 0801     .9...9.......9..
 8013a30:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08013a40 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_243>:
 8013a40:	0004 0000 6da0 0801 ab12 abab 0000 0010     .....m..........
 8013a50:	0000 0000 7b10 0801 74a0 0801 0000 0000     .....{...t......
 8013a60:	0000 0000 3770 0801 3aa0 0801               ....p7...:..

08013a6c <System.RuntimeType_244>:
 8013a6c:	0004 0000 2280 0801 3aa0 0801 46c0 46c0     ....."...:...F.F
 8013a7c:	46c0 46c0                                   .F.F

08013a80 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_245>:
 8013a80:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 8013a90:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

08013aa0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_246>:
 8013aa0:	0004 0000 1b80 0801 001c 0000 0000 0000     ................
 8013ab0:	3a40 0801 3a6c 0801 ab44 abab 3a80 0801     @:..l:..D....:..
 8013ac0:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08013ad0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_247>:
 8013ad0:	0004 0000 6da0 0801 ab12 abab 2001 0010     .....m....... ..
 8013ae0:	0000 0000 7b40 0801 6e10 0801 0000 0000     ....@{...n......
 8013af0:	0000 0000 6f30 0801 3b30 0801               ....0o..0;..

08013afc <System.RuntimeType_248>:
 8013afc:	0004 0000 2280 0801 3b30 0801 46c0 46c0     ....."..0;...F.F
 8013b0c:	46c0 46c0                                   .F.F

08013b10 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_249>:
 8013b10:	0004 0000 1bf0 0801 0004 0000 0729 0800     ............)...
 8013b20:	0765 0800 0781 0800 0985 0800 46c0 46c0     e............F.F

08013b30 <Microsoft.Zelig.Runtime.TypeSystem.VTable_250>:
 8013b30:	0004 0000 1b80 0801 0004 0000 0000 0000     ................
 8013b40:	3ad0 0801 3afc 0801 ab44 abab 3b10 0801     .:...:..D....;..
 8013b50:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08013b60 <System.String_251>:
 8013b60:	0004 0000 1a10 0801 0041 0000 0041 0000     ........A...A...
 8013b70:	0021 0021 0021 0020 0020 0020 0020 0020     !.!.!. . . . . .
 8013b80:	0020 0020 0020 0020 0020 0020 0020 0020      . . . . . . . .
 8013b90:	0020 0020 0020 0020 0020 0020 0020 0020      . . . . . . . .
 8013ba0:	0020 0020 0057 0041 0052 004e 0049 004e      . .W.A.R.N.I.N.
 8013bb0:	0047 0020 0020 0020 0020 0020 0020 0020     G. . . . . . . .
 8013bc0:	0020 0020 0020 0020 0020 0020 0020 0020      . . . . . . . .
 8013bd0:	0020 0020 0020 0020 0020 0020 0020 0020      . . . . . . . .
 8013be0:	0020 0020 0020 0020 0020 0020 0021 0021      . . . . . .!.!.
 8013bf0:	0021 46c0 46c0 46c0 46c0 46c0 46c0 46c0     !..F.F.F.F.F.F.F

08013c00 <System.String_252>:
 8013c00:	0004 0000 1a10 0801 0041 0000 0041 0000     ........A...A...
 8013c10:	0021 0021 0021 0020 0054 0068 0072 006f     !.!.!. .T.h.r.o.
 8013c20:	0077 0069 006e 0067 0020 0045 0078 0063     w.i.n.g. .E.x.c.
 8013c30:	0065 0070 0074 0069 006f 006e 0073 0020     e.p.t.i.o.n.s. .
 8013c40:	0069 0073 0020 006e 006f 0074 0020 0079     i.s. .n.o.t. .y.
 8013c50:	0065 0074 0020 0073 0075 0070 0070 006f     e.t. .s.u.p.p.o.
 8013c60:	0072 0074 0065 0064 0020 0066 006f 0072     r.t.e.d. .f.o.r.
 8013c70:	0020 004c 004c 0056 004d 0020 0043 006f      .L.L.V.M. .C.o.
 8013c80:	0064 0065 0047 0065 006e 0020 0021 0021     d.e.G.e.n. .!.!.
 8013c90:	0021 46c0 46c0 46c0 46c0 46c0 46c0 46c0     !..F.F.F.F.F.F.F

08013ca0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_253>:
 8013ca0:	0004 0000 6da0 0801 ab12 abab 2001 0010     .....m....... ..
 8013cb0:	0000 0000 7b80 0801 6e10 0801 0000 0000     .....{...n......
 8013cc0:	0000 0000 3770 0801 3d00 0801               ....p7...=..

08013ccc <System.RuntimeType_254>:
 8013ccc:	0004 0000 2280 0801 3d00 0801 46c0 46c0     ....."...=...F.F
 8013cdc:	46c0 46c0                                   .F.F

08013ce0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_255>:
 8013ce0:	0004 0000 1bf0 0801 0004 0000 0729 0800     ............)...
 8013cf0:	0765 0800 0781 0800 0985 0800 46c0 46c0     e............F.F

08013d00 <Microsoft.Zelig.Runtime.TypeSystem.VTable_256>:
 8013d00:	0004 0000 1b80 0801 0004 0000 0000 0000     ................
 8013d10:	3ca0 0801 3ccc 0801 ab44 abab 3ce0 0801     .<...<..D....<..
 8013d20:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08013d30 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_257>:
 8013d30:	0004 0000 6da0 0801 ab12 abab 0101 0010     .....m..........
 8013d40:	0000 0000 7470 0801 74a0 0801 0000 0000     ....pt...t......
 8013d50:	7ba4 0801 3770 0801 3d90 0801               .{..p7...=..

08013d5c <System.RuntimeType_258>:
 8013d5c:	0004 0000 2280 0801 3d90 0801 46c0 46c0     ....."...=...F.F
 8013d6c:	46c0 46c0                                   .F.F

08013d70 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_259>:
 8013d70:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 8013d80:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

08013d90 <Microsoft.Zelig.Runtime.TypeSystem.VTable_260>:
 8013d90:	0004 0000 1b80 0801 000c 0000 0000 0000     ................
 8013da0:	3d30 0801 3d5c 0801 ab44 abab 3d70 0801     0=..\=..D...p=..
 8013db0:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08013dc0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_261>:
 8013dc0:	0004 0000 6da0 0801 ab12 abab 0101 0000     .....m..........
 8013dd0:	0000 0000 7bc0 0801 7bf0 0801 0000 0000     .....{...{......
 8013de0:	0000 0000 3770 0801 3e20 0801               ....p7.. >..

08013dec <System.RuntimeType_262>:
 8013dec:	0004 0000 2280 0801 3e20 0801 46c0 46c0     .....".. >...F.F
 8013dfc:	46c0 46c0                                   .F.F

08013e00 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_263>:
 8013e00:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 8013e10:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

08013e20 <Microsoft.Zelig.Runtime.TypeSystem.VTable_264>:
 8013e20:	0004 0000 1b80 0801 001a 0000 0000 0000     ................
 8013e30:	3dc0 0801 3dec 0801 ab44 abab 3e00 0801     .=...=..D....>..
 8013e40:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08013e50 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_265>:
 8013e50:	0004 0000 6da0 0801 ab12 abab 0101 0010     .....m..........
 8013e60:	0000 0000 7470 0801 74a0 0801 0000 0000     ....pt...t......
 8013e70:	7c50 0801 3770 0801 3eb0 0801               P|..p7...>..

08013e7c <System.RuntimeType_266>:
 8013e7c:	0004 0000 2280 0801 3eb0 0801 46c0 46c0     ....."...>...F.F
 8013e8c:	46c0 46c0                                   .F.F

08013e90 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_267>:
 8013e90:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 8013ea0:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

08013eb0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_268>:
 8013eb0:	0004 0000 1b80 0801 000c 0000 0000 0000     ................
 8013ec0:	3e50 0801 3e7c 0801 ab44 abab 3e90 0801     P>..|>..D....>..
 8013ed0:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08013ee0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_273>:
 8013ee0:	0004 0000 6da0 0801 ab12 abab 0101 0010     .....m..........
 8013ef0:	0000 0000 74f0 0801 74a0 0801 0000 0000     .....t...t......
 8013f00:	7c60 0801 3770 0801 3f40 0801               `|..p7..@?..

08013f0c <System.RuntimeType_274>:
 8013f0c:	0004 0000 2280 0801 3f40 0801 46c0 46c0     ....."..@?...F.F
 8013f1c:	46c0 46c0                                   .F.F

08013f20 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_275>:
 8013f20:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 8013f30:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

08013f40 <Microsoft.Zelig.Runtime.TypeSystem.VTable_276>:
 8013f40:	0004 0000 1b80 0801 0008 0000 0000 0000     ................
 8013f50:	3ee0 0801 3f0c 0801 ab44 abab 3f20 0801     .>...?..D... ?..
 8013f60:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08013f70 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_278>:
 8013f70:	0004 0000 6da0 0801 ab12 abab 2001 0010     .....m....... ..
 8013f80:	0000 0000 7c70 0801 7c90 0801 0000 0000     ....p|...|......
 8013f90:	7cd4 0801 3770 0801 3fd0 0801               .|..p7...?..

08013f9c <System.RuntimeType_279>:
 8013f9c:	0004 0000 2280 0801 3fd0 0801 46c0 46c0     ....."...?...F.F
 8013fac:	46c0 46c0                                   .F.F

08013fb0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_280>:
 8013fb0:	0004 0000 1bf0 0801 0004 0000 109d 0800     ................
 8013fc0:	0765 0800 0781 0800 9d95 0800 46c0 46c0     e............F.F

08013fd0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_281>:
 8013fd0:	0004 0000 1b80 0801 0014 0000 0000 0000     ................
 8013fe0:	3f70 0801 3f9c 0801 ab44 abab 3fb0 0801     p?...?..D....?..
 8013ff0:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08014000 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_282>:
 8014000:	0004 0000 6da0 0801 ab12 abab 0005 0010     .....m..........
 8014010:	0000 0000 7cf0 0801 2334 0801 42a0 0801     .....|..4#...B..
 8014020:	0000 0000 3770 0801 4060 0801               ....p7..`@..

0801402c <System.RuntimeType_283>:
 801402c:	0004 0000 2280 0801 4060 0801 46c0 46c0     ....."..`@...F.F
 801403c:	46c0 46c0                                   .F.F

08014040 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_284>:
 8014040:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 8014050:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

08014060 <Microsoft.Zelig.Runtime.TypeSystem.VTable_285>:
 8014060:	0004 0000 1b80 0801 0010 0000 0000 0000     ................
 8014070:	4000 0801 402c 0801 ab44 abab 4040 0801     .@..,@..D...@@..
 8014080:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08014090 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_286>:
 8014090:	0004 0000 6da0 0801 ab12 abab 0101 0010     .....m..........
 80140a0:	0000 0000 7470 0801 74a0 0801 0000 0000     ....pt...t......
 80140b0:	7d20 0801 3770 0801 40f0 0801                }..p7...@..

080140bc <System.RuntimeType_287>:
 80140bc:	0004 0000 2280 0801 40f0 0801 46c0 46c0     ....."...@...F.F
 80140cc:	46c0 46c0                                   .F.F

080140d0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_288>:
 80140d0:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 80140e0:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

080140f0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_289>:
 80140f0:	0004 0000 1b80 0801 000c 0000 0000 0000     ................
 8014100:	4090 0801 40bc 0801 ab44 abab 40d0 0801     .@...@..D....@..
 8014110:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08014120 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_290>:
 8014120:	0004 0000 6da0 0801 ab12 abab 0005 0010     .....m..........
 8014130:	0000 0000 7d30 0801 2334 0801 7d50 0801     ....0}..4#..P}..
 8014140:	0000 0000 3770 0801 4180 0801               ....p7...A..

0801414c <System.RuntimeType_291>:
 801414c:	0004 0000 2280 0801 4180 0801 46c0 46c0     ....."...A...F.F
 801415c:	46c0 46c0                                   .F.F

08014160 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_292>:
 8014160:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 8014170:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

08014180 <Microsoft.Zelig.Runtime.TypeSystem.VTable_293>:
 8014180:	0004 0000 1b80 0801 0009 0000 0000 0000     ................
 8014190:	4120 0801 414c 0801 ab44 abab 4160 0801      A..LA..D...`A..
 80141a0:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

080141b0 <System.String_298>:
 80141b0:	0004 0000 1a10 0801 0016 0000 0016 0000     ................
 80141c0:	0055 006e 0077 0069 006e 0064 0020 006e     U.n.w.i.n.d. .n.
 80141d0:	006f 0074 0020 0069 006d 0070 006c 0065     o.t. .i.m.p.l.e.
 80141e0:	006d 0065 006e 0074 0065 0064 46c0 46c0     m.e.n.t.e.d..F.F

080141f0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_299>:
 80141f0:	0004 0000 7150 0801 ab12 abab 0082 0010     ....Pq..........
 8014200:	0000 0000 73f0 0801 2334 0801 7d80 0801     .....s..4#...}..
 8014210:	0000 0000 7db0 0801 4270 0801               .....}..pB..

0801421c <System.RuntimeType_300>:
 801421c:	0004 0000 2280 0801 4270 0801 46c0 46c0     ....."..pB...F.F
 801422c:	46c0 46c0                                   .F.F

08014230 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_301>:
 8014230:	0004 0000 1bf0 0801 000b 0000 109d 0800     ................
 8014240:	0765 0800 0781 0800 a6ad 0800 a6c5 0800     e...............
 8014250:	abcd 0800 a63d 0800 aced 0800 acf9 0800     ....=...........
 8014260:	ad09 0800 ad11 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

08014270 <Microsoft.Zelig.Runtime.TypeSystem.VTable_302>:
 8014270:	0004 0000 1b80 0801 0008 0000 0000 0000     ................
 8014280:	41f0 0801 421c 0801 ab44 abab 4230 0801     .A...B..D...0B..
 8014290:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

080142a0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_308>:
 80142a0:	0004 0000 6da0 0801 ab12 abab 0005 0010     .....m..........
 80142b0:	0000 0000 7de0 0801 2334 0801 36e0 0801     .....}..4#...6..
 80142c0:	0000 0000 3770 0801 4300 0801               ....p7...C..

080142cc <System.RuntimeType_309>:
 80142cc:	0004 0000 2280 0801 4300 0801 46c0 46c0     ....."...C...F.F
 80142dc:	46c0 46c0                                   .F.F

080142e0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_310>:
 80142e0:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 80142f0:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

08014300 <Microsoft.Zelig.Runtime.TypeSystem.VTable_311>:
 8014300:	0004 0000 1b80 0801 0010 0000 0000 0000     ................
 8014310:	42a0 0801 42cc 0801 ab44 abab 42e0 0801     .B...B..D....B..
 8014320:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08014330 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_312>:
 8014330:	0004 0000 6da0 0801 ab12 abab 0101 0010     .....m..........
 8014340:	0000 0000 7e10 0801 7bf0 0801 0000 0000     .....~...{......
 8014350:	0000 0000 3770 0801 4390 0801               ....p7...C..

0801435c <System.RuntimeType_313>:
 801435c:	0004 0000 2280 0801 4390 0801 46c0 46c0     ....."...C...F.F
 801436c:	46c0 46c0                                   .F.F

08014370 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_314>:
 8014370:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 8014380:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

08014390 <Microsoft.Zelig.Runtime.TypeSystem.VTable_315>:
 8014390:	0004 0000 1b80 0801 0008 0000 0000 0000     ................
 80143a0:	4330 0801 435c 0801 ab44 abab 4370 0801     0C..\C..D...pC..
 80143b0:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

080143c0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_316>:
 80143c0:	0004 0000 6da0 0801 ab12 abab 0101 0010     .....m..........
 80143d0:	0000 0000 7e40 0801 7bf0 0801 0000 0000     ....@~...{......
 80143e0:	0000 0000 7e70 0801 4420 0801               ....p~.. D..

080143ec <System.RuntimeType_317>:
 80143ec:	0004 0000 2280 0801 4420 0801 46c0 46c0     .....".. D...F.F
 80143fc:	46c0 46c0                                   .F.F

08014400 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_318>:
 8014400:	0004 0000 1bf0 0801 0005 0000 109d 0800     ................
 8014410:	0765 0800 0781 0800 93c9 0800 9635 0800     e...........5...

08014420 <Microsoft.Zelig.Runtime.TypeSystem.VTable_319>:
 8014420:	0004 0000 1b80 0801 0010 0000 0000 0000     ................
 8014430:	43c0 0801 43ec 0801 ab44 abab 4400 0801     .C...C..D....D..
 8014440:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08014450 <System.String_320>:
 8014450:	0004 0000 1a10 0801 0001 0000 0001 0000     ................
 8014460:	0020 46c0 46c0 46c0 46c0 46c0 46c0 46c0      ..F.F.F.F.F.F.F

08014470 <System.String_321>:
 8014470:	0004 0000 1a10 0801 0002 0000 0002 0000     ................
 8014480:	000d 000a 46c0 46c0 46c0 46c0 46c0 46c0     .....F.F.F.F.F.F

08014490 <Microsoft.Zelig.Runtime.TypeSystem.EnumerationTypeRepresentation_322>:
 8014490:	0004 0000 7ea0 0801 ab11 abab 0105 0000     .....~..........
 80144a0:	0000 0000 7ed0 0801 2334 0801 3ca0 0801     .....~..4#...<..
 80144b0:	0000 0000 7f10 0801 4550 0801 71a0 0801     ........PE...q..

080144c0 <System.RuntimeType_323>:
 80144c0:	0004 0000 2280 0801 4550 0801 46c0 46c0     ....."..PE...F.F

080144d0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_324>:
 80144d0:	0004 0000 1bf0 0801 0004 0000 109d 0800     ................
 80144e0:	0765 0800 0781 0800 1643 0800 46c0 46c0     e.......C....F.F

080144f0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_325>:
 80144f0:	0004 0000 1b80 0801 0000 0000 0000 0000     ................
 8014500:	7f40 0801 7f6c 0801 ab43 abab 7f78 0801     @...l...C...x...
 8014510:	7fa0 0801                                   ....

08014514 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_326>:
 8014514:	0004 0000 1bf0 0801 0001 0000 1643 0800     ............C...
 8014524:	46c0 46c0 46c0 46c0 46c0 46c0               .F.F.F.F.F.F

08014530 <Microsoft.Zelig.Runtime.TypeSystem.VTable.InterfaceMap[]_327>:
 8014530:	0004 0000 1c40 0801 0001 0000 44f0 0801     ....@........D..
 8014540:	4514 0801 46c0 46c0 46c0 46c0 46c0 46c0     .E...F.F.F.F.F.F

08014550 <Microsoft.Zelig.Runtime.TypeSystem.VTable_328>:
 8014550:	0004 0000 1b80 0801 0004 0000 0000 0000     ................
 8014560:	4490 0801 44c0 0801 ab21 abab 44d0 0801     .D...D..!....D..
 8014570:	4530 0801 46c0 46c0 46c0 46c0 46c0 46c0     0E...F.F.F.F.F.F

08014580 <System.String_329>:
 8014580:	0004 0000 1a10 0801 0019 0000 0019 0000     ................
 8014590:	0041 0072 0067 005f 004e 006f 0074 0053     A.r.g._.N.o.t.S.
 80145a0:	0075 0070 0070 006f 0072 0074 0065 0064     u.p.p.o.r.t.e.d.
 80145b0:	0045 0078 0063 0065 0070 0074 0069 006f     E.x.c.e.p.t.i.o.
 80145c0:	006e 46c0 46c0 46c0 46c0 46c0 46c0 46c0     n..F.F.F.F.F.F.F

080145d0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_330>:
 80145d0:	0004 0000 6da0 0801 ab12 abab 0000 0010     .....m..........
 80145e0:	0000 0000 7fc0 0801 6e10 0801 0000 0000     .........n......
 80145f0:	0000 0000 3770 0801 4630 0801               ....p7..0F..

080145fc <System.RuntimeType_331>:
 80145fc:	0004 0000 2280 0801 4630 0801 46c0 46c0     ....."..0F...F.F
 801460c:	46c0 46c0                                   .F.F

08014610 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_332>:
 8014610:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 8014620:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

08014630 <Microsoft.Zelig.Runtime.TypeSystem.VTable_333>:
 8014630:	0004 0000 1b80 0801 0010 0000 0000 0000     ................
 8014640:	45d0 0801 45fc 0801 ab44 abab 4610 0801     .E...E..D....F..
 8014650:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08014660 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_334>:
 8014660:	0004 0000 6da0 0801 ab12 abab 2001 0010     .....m....... ..
 8014670:	0000 0000 7fe0 0801 6e10 0801 0000 0000     .........n......
 8014680:	0000 0000 6f30 0801 46c0 0801               ....0o...F..

0801468c <System.RuntimeType_335>:
 801468c:	0004 0000 2280 0801 46c0 0801 46c0 46c0     ....."...F...F.F
 801469c:	46c0 46c0                                   .F.F

080146a0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_336>:
 80146a0:	0004 0000 1bf0 0801 0004 0000 0729 0800     ............)...
 80146b0:	0765 0800 0781 0800 0985 0800 46c0 46c0     e............F.F

080146c0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_337>:
 80146c0:	0004 0000 1b80 0801 0004 0000 0000 0000     ................
 80146d0:	4660 0801 468c 0801 ab44 abab 46a0 0801     `F...F..D....F..
 80146e0:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

080146f0 <System.String_338>:
 80146f0:	0004 0000 1a10 0801 0003 0000 0003 0000     ................
 8014700:	0023 0020 0025 46c0 46c0 46c0 46c0 46c0     #. .%..F.F.F.F.F

08014710 <System.String_339>:
 8014710:	0004 0000 1a10 0801 0002 0000 0002 0000     ................
 8014720:	0023 0025 46c0 46c0 46c0 46c0 46c0 46c0     #.%..F.F.F.F.F.F

08014730 <System.String_340>:
 8014730:	0004 0000 1a10 0801 0002 0000 0002 0000     ................
 8014740:	0025 0023 46c0 46c0 46c0 46c0 46c0 46c0     %.#..F.F.F.F.F.F

08014750 <System.String_341>:
 8014750:	0004 0000 1a10 0801 0004 0000 0004 0000     ................
 8014760:	002d 0023 0020 0025 46c0 46c0 46c0 46c0     -.#. .%..F.F.F.F

08014770 <System.String_342>:
 8014770:	0004 0000 1a10 0801 0003 0000 0003 0000     ................
 8014780:	002d 0023 0025 46c0 46c0 46c0 46c0 46c0     -.#.%..F.F.F.F.F

08014790 <System.String_343>:
 8014790:	0004 0000 1a10 0801 0003 0000 0003 0000     ................
 80147a0:	002d 0025 0023 46c0 46c0 46c0 46c0 46c0     -.%.#..F.F.F.F.F

080147b0 <System.String_344>:
 80147b0:	0004 0000 1a10 0801 0003 0000 0003 0000     ................
 80147c0:	0028 0023 0029 46c0 46c0 46c0 46c0 46c0     (.#.)..F.F.F.F.F

080147d0 <System.String_345>:
 80147d0:	0004 0000 1a10 0801 0002 0000 0002 0000     ................
 80147e0:	002d 0023 46c0 46c0 46c0 46c0 46c0 46c0     -.#..F.F.F.F.F.F

080147f0 <System.String_346>:
 80147f0:	0004 0000 1a10 0801 0003 0000 0003 0000     ................
 8014800:	002d 0020 0023 46c0 46c0 46c0 46c0 46c0     -. .#..F.F.F.F.F

08014810 <System.String_347>:
 8014810:	0004 0000 1a10 0801 0002 0000 0002 0000     ................
 8014820:	0023 002d 46c0 46c0 46c0 46c0 46c0 46c0     #.-..F.F.F.F.F.F

08014830 <System.String_348>:
 8014830:	0004 0000 1a10 0801 0003 0000 0003 0000     ................
 8014840:	0023 0020 002d 46c0 46c0 46c0 46c0 46c0     #. .-..F.F.F.F.F

08014850 <System.String_349>:
 8014850:	0004 0000 1a10 0801 0001 0000 0001 0000     ................
 8014860:	0023 46c0 46c0 46c0 46c0 46c0 46c0 46c0     #..F.F.F.F.F.F.F

08014870 <System.String_350>:
 8014870:	0004 0000 1a10 0801 0016 0000 0016 0000     ................
 8014880:	004f 0062 006a 0065 0063 0074 0044 0069     O.b.j.e.c.t.D.i.
 8014890:	0073 0070 006f 0073 0065 0064 005f 0047     s.p.o.s.e.d._.G.
 80148a0:	0065 006e 0065 0072 0069 0063 46c0 46c0     e.n.e.r.i.c..F.F

080148b0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_351>:
 80148b0:	0004 0000 6da0 0801 ab12 abab 2001 0010     .....m....... ..
 80148c0:	0000 0000 8010 0801 6e10 0801 0000 0000     .........n......
 80148d0:	0000 0000 6f30 0801 4910 0801               ....0o...I..

080148dc <System.RuntimeType_352>:
 80148dc:	0004 0000 2280 0801 4910 0801 46c0 46c0     ....."...I...F.F
 80148ec:	46c0 46c0                                   .F.F

080148f0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_353>:
 80148f0:	0004 0000 1bf0 0801 0004 0000 0729 0800     ............)...
 8014900:	0765 0800 0781 0800 0985 0800 46c0 46c0     e............F.F

08014910 <Microsoft.Zelig.Runtime.TypeSystem.VTable_354>:
 8014910:	0004 0000 1b80 0801 0004 0000 0000 0000     ................
 8014920:	48b0 0801 48dc 0801 ab44 abab 48f0 0801     .H...H..D....H..
 8014930:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08014940 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_355>:
 8014940:	0004 0000 6da0 0801 ab12 abab 0104 0010     .....m..........
 8014950:	0000 0000 8060 0801 2334 0801 2950 0801     ....`...4#..P)..
 8014960:	0000 0000 7e70 0801 49a0 0801               ....p~...I..

0801496c <System.RuntimeType_356>:
 801496c:	0004 0000 2280 0801 49a0 0801 46c0 46c0     ....."...I...F.F
 801497c:	46c0 46c0                                   .F.F

08014980 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_357>:
 8014980:	0004 0000 1bf0 0801 0005 0000 109d 0800     ................
 8014990:	0765 0800 0781 0800 a379 0800 a4f5 0800     e.......y.......

080149a0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_358>:
 80149a0:	0004 0000 1b80 0801 000c 0000 0000 0000     ................
 80149b0:	4940 0801 496c 0801 ab44 abab 4980 0801     @I..lI..D....I..
 80149c0:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

080149d0 <System.String_359>:
 80149d0:	0004 0000 1a10 0801 0018 0000 0018 0000     ................
 80149e0:	0041 0072 0067 005f 0054 0068 0072 0065     A.r.g._.T.h.r.e.
 80149f0:	0061 0064 0053 0074 0061 0074 0065 0045     a.d.S.t.a.t.e.E.
 8014a00:	0078 0063 0065 0070 0074 0069 006f 006e     x.c.e.p.t.i.o.n.

08014a10 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_360>:
 8014a10:	0004 0000 6da0 0801 ab12 abab 0101 0010     .....m..........
 8014a20:	0000 0000 7470 0801 74a0 0801 0000 0000     ....pt...t......
 8014a30:	8098 0801 3770 0801 4a70 0801               ....p7..pJ..

08014a3c <System.RuntimeType_361>:
 8014a3c:	0004 0000 2280 0801 4a70 0801 46c0 46c0     ....."..pJ...F.F
 8014a4c:	46c0 46c0                                   .F.F

08014a50 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_362>:
 8014a50:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 8014a60:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

08014a70 <Microsoft.Zelig.Runtime.TypeSystem.VTable_363>:
 8014a70:	0004 0000 1b80 0801 000c 0000 0000 0000     ................
 8014a80:	4a10 0801 4a3c 0801 ab44 abab 4a50 0801     .J..<J..D...PJ..
 8014a90:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08014aa0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_364>:
 8014aa0:	0004 0000 6da0 0801 ab12 abab 2001 0010     .....m....... ..
 8014ab0:	0000 0000 80b0 0801 6e10 0801 0000 0000     .........n......
 8014ac0:	0000 0000 6f30 0801 4b00 0801               ....0o...K..

08014acc <System.RuntimeType_365>:
 8014acc:	0004 0000 2280 0801 4b00 0801 46c0 46c0     ....."...K...F.F
 8014adc:	46c0 46c0                                   .F.F

08014ae0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_366>:
 8014ae0:	0004 0000 1bf0 0801 0004 0000 0729 0800     ............)...
 8014af0:	0765 0800 0781 0800 0985 0800 46c0 46c0     e............F.F

08014b00 <Microsoft.Zelig.Runtime.TypeSystem.VTable_367>:
 8014b00:	0004 0000 1b80 0801 0004 0000 0000 0000     ................
 8014b10:	4aa0 0801 4acc 0801 ab44 abab 4ae0 0801     .J...J..D....J..
 8014b20:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08014b30 <Microsoft.Zelig.Runtime.TypeSystem.SzArrayReferenceTypeRepresentation_368>:
 8014b30:	0004 0000 1e40 0801 ab1d abab 0000 0000     ....@...........
	...
 8014b54:	7760 0801 4b90 0801 3770 0801               `w...K..p7..

08014b60 <System.RuntimeType_369>:
 8014b60:	0004 0000 2280 0801 4b90 0801 46c0 46c0     ....."...K...F.F

08014b70 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_370>:
 8014b70:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 8014b80:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

08014b90 <Microsoft.Zelig.Runtime.TypeSystem.VTable_371>:
 8014b90:	0004 0000 1b80 0801 0004 0000 0004 0000     ................
 8014ba0:	4b30 0801 4b60 0801 abc6 abab 4b70 0801     0K..`K......pK..
 8014bb0:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08014bc0 <Microsoft.Zelig.Runtime.TypeSystem.InterfaceTypeRepresentation_379>:
 8014bc0:	0004 0000 80f0 0801 ab12 abab 00a1 0000     ................
 8014bd0:	0000 0000 8120 0801 6e10 0801 0000 0000     .... ....n......
	...
 8014be8:	4c10 0801                                   .L..

08014bec <System.RuntimeType_380>:
 8014bec:	0004 0000 2280 0801 4c10 0801               ....."...L..

08014bf8 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_381>:
 8014bf8:	0004 0000 1bf0 0801 0001 0000 0000 0000     ................
 8014c08:	46c0 46c0 46c0 46c0                         .F.F.F.F

08014c10 <Microsoft.Zelig.Runtime.TypeSystem.VTable_382>:
 8014c10:	0004 0000 1b80 0801 0000 0000 0000 0000     ................
 8014c20:	4bc0 0801 4bec 0801 ab43 abab 4bf8 0801     .K...K..C....K..
 8014c30:	4c50 0801                                   PL..

08014c34 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_383>:
 8014c34:	0004 0000 1bf0 0801 0001 0000 0000 0000     ................
 8014c44:	46c0 46c0 46c0 46c0 46c0 46c0               .F.F.F.F.F.F

08014c50 <Microsoft.Zelig.Runtime.TypeSystem.VTable.InterfaceMap[]_384>:
 8014c50:	0004 0000 1c40 0801 0001 0000 4c10 0801     ....@........L..
 8014c60:	4c34 0801 46c0 46c0 46c0 46c0 46c0 46c0     4L...F.F.F.F.F.F

08014c70 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_386>:
 8014c70:	0004 0000 7150 0801 ab12 abab 2081 0010     ....Pq....... ..
 8014c80:	0000 0000 8150 0801 8180 0801 0000 0000     ....P...........
 8014c90:	0000 0000 3770 0801 4ce0 0801               ....p7...L..

08014c9c <System.RuntimeType_387>:
 8014c9c:	0004 0000 2280 0801 4ce0 0801 46c0 46c0     ....."...L...F.F
 8014cac:	46c0 46c0                                   .F.F

08014cb0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_388>:
 8014cb0:	0004 0000 1bf0 0801 0006 0000 109d 0800     ................
 8014cc0:	e84d 0800 df39 0800 0000 0000 e8d9 0800     M...9...........
 8014cd0:	e90d 0800 46c0 46c0 46c0 46c0 46c0 46c0     .....F.F.F.F.F.F

08014ce0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_389>:
 8014ce0:	0004 0000 1b80 0801 0000 0000 0000 0000     ................
 8014cf0:	4c70 0801 4c9c 0801 ab44 abab 4cb0 0801     pL...L..D....L..
 8014d00:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08014d10 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_390>:
 8014d10:	0004 0000 6da0 0801 ab12 abab 2001 0000     .....m....... ..
 8014d20:	0000 0000 81c0 0801 81f0 0801 0000 0000     ................
 8014d30:	0000 0000 3770 0801 4da0 0801               ....p7...M..

08014d3c <System.RuntimeType_391>:
 8014d3c:	0004 0000 2280 0801 4da0 0801 46c0 46c0     ....."...M...F.F
 8014d4c:	46c0 46c0                                   .F.F

08014d50 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_392>:
 8014d50:	0004 0000 1bf0 0801 0005 0000 109d 0800     ................
 8014d60:	0765 0800 0781 0800 e921 0800 e965 0800     e.......!...e...

08014d70 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_393>:
 8014d70:	0004 0000 1bf0 0801 0001 0000 e921 0800     ............!...

08014d80 <Microsoft.Zelig.Runtime.TypeSystem.VTable.InterfaceMap[]_394>:
 8014d80:	0004 0000 1c40 0801 0001 0000 4c10 0801     ....@........L..
 8014d90:	4d70 0801 46c0 46c0 46c0 46c0 46c0 46c0     pM...F.F.F.F.F.F

08014da0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_395>:
 8014da0:	0004 0000 1b80 0801 0015 0000 0000 0000     ................
 8014db0:	4d10 0801 4d3c 0801 ab44 abab 4d50 0801     .M..<M..D...PM..
 8014dc0:	4d80 0801 46c0 46c0 46c0 46c0 46c0 46c0     .M...F.F.F.F.F.F

08014dd0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_396>:
 8014dd0:	0004 0000 1b80 0801 0076 0000 0000 0000     ........v.......
 8014de0:	8230 0801 4df4 0801 ab44 abab 8260 0801     0....M..D...`...
 8014df0:	8290 0801                                   ....

08014df4 <System.RuntimeType_397>:
 8014df4:	0004 0000 2280 0801 4dd0 0801               ....."...M..

08014e00 <System.String_398>:
 8014e00:	0004 0000 1a10 0801 0001 0000 0001 0000     ................
 8014e10:	002b 46c0 46c0 46c0 46c0 46c0 46c0 46c0     +..F.F.F.F.F.F.F

08014e20 <System.String_399>:
 8014e20:	0004 0000 1a10 0801 0001 0000 0001 0000     ................
 8014e30:	002d 46c0 46c0 46c0 46c0 46c0 46c0 46c0     -..F.F.F.F.F.F.F

08014e40 <System.String_400>:
 8014e40:	0004 0000 1a10 0801 0001 0000 0001 0000     ................
 8014e50:	002e 46c0 46c0 46c0 46c0 46c0 46c0 46c0     ...F.F.F.F.F.F.F

08014e60 <System.String_401>:
 8014e60:	0004 0000 1a10 0801 0001 0000 0001 0000     ................
 8014e70:	002c 46c0 46c0 46c0 46c0 46c0 46c0 46c0     ,..F.F.F.F.F.F.F

08014e80 <System.String_402>:
 8014e80:	0004 0000 1a10 0801 0001 0000 0001 0000     ................
 8014e90:	00a4 46c0 46c0 46c0 46c0 46c0 46c0 46c0     ...F.F.F.F.F.F.F

08014ea0 <System.String_403>:
 8014ea0:	0004 0000 1a10 0801 0003 0000 0003 0000     ................
 8014eb0:	004e 0061 004e 46c0 46c0 46c0 46c0 46c0     N.a.N..F.F.F.F.F

08014ec0 <System.String_404>:
 8014ec0:	0004 0000 1a10 0801 0008 0000 0008 0000     ................
 8014ed0:	0049 006e 0066 0069 006e 0069 0074 0079     I.n.f.i.n.i.t.y.

08014ee0 <System.String_405>:
 8014ee0:	0004 0000 1a10 0801 0009 0000 0009 0000     ................
 8014ef0:	002d 0049 006e 0066 0069 006e 0069 0074     -.I.n.f.i.n.i.t.
 8014f00:	0079 46c0 46c0 46c0 46c0 46c0 46c0 46c0     y..F.F.F.F.F.F.F

08014f10 <System.String_406>:
 8014f10:	0004 0000 1a10 0801 0001 0000 0001 0000     ................
 8014f20:	0025 46c0 46c0 46c0 46c0 46c0 46c0 46c0     %..F.F.F.F.F.F.F

08014f30 <System.String_407>:
 8014f30:	0004 0000 1a10 0801 0001 0000 0001 0000     ................
 8014f40:	2030 46c0 46c0 46c0 46c0 46c0 46c0 46c0     0 .F.F.F.F.F.F.F

08014f50 <System.String_408>:
 8014f50:	0004 0000 1a10 0801 0001 0000 0001 0000     ................
 8014f60:	0030 46c0 46c0 46c0 46c0 46c0 46c0 46c0     0..F.F.F.F.F.F.F

08014f70 <System.String_409>:
 8014f70:	0004 0000 1a10 0801 0001 0000 0001 0000     ................
 8014f80:	0032 46c0 46c0 46c0 46c0 46c0 46c0 46c0     2..F.F.F.F.F.F.F

08014f90 <System.String_410>:
 8014f90:	0004 0000 1a10 0801 0001 0000 0001 0000     ................
 8014fa0:	0033 46c0 46c0 46c0 46c0 46c0 46c0 46c0     3..F.F.F.F.F.F.F

08014fb0 <System.String_411>:
 8014fb0:	0004 0000 1a10 0801 0001 0000 0001 0000     ................
 8014fc0:	0034 46c0 46c0 46c0 46c0 46c0 46c0 46c0     4..F.F.F.F.F.F.F

08014fd0 <System.String_412>:
 8014fd0:	0004 0000 1a10 0801 0001 0000 0001 0000     ................
 8014fe0:	0035 46c0 46c0 46c0 46c0 46c0 46c0 46c0     5..F.F.F.F.F.F.F

08014ff0 <System.String_413>:
 8014ff0:	0004 0000 1a10 0801 0001 0000 0001 0000     ................
 8015000:	0036 46c0 46c0 46c0 46c0 46c0 46c0 46c0     6..F.F.F.F.F.F.F

08015010 <System.String_414>:
 8015010:	0004 0000 1a10 0801 0001 0000 0001 0000     ................
 8015020:	0037 46c0 46c0 46c0 46c0 46c0 46c0 46c0     7..F.F.F.F.F.F.F

08015030 <System.String_415>:
 8015030:	0004 0000 1a10 0801 0001 0000 0001 0000     ................
 8015040:	0038 46c0 46c0 46c0 46c0 46c0 46c0 46c0     8..F.F.F.F.F.F.F

08015050 <System.String_416>:
 8015050:	0004 0000 1a10 0801 0001 0000 0001 0000     ................
 8015060:	0039 46c0 46c0 46c0 46c0 46c0 46c0 46c0     9..F.F.F.F.F.F.F

08015070 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_421>:
 8015070:	0004 0000 6da0 0801 ab12 abab 0001 0010     .....m..........
 8015080:	0000 0000 82b0 0801 8300 0801 0000 0000     ................
 8015090:	0000 0000 3ca0 0801 50d0 0801               .....<...P..

0801509c <System.RuntimeType_422>:
 801509c:	0004 0000 2280 0801 50d0 0801 46c0 46c0     ....."...P...F.F
 80150ac:	46c0 46c0                                   .F.F

080150b0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_423>:
 80150b0:	0004 0000 1bf0 0801 0004 0000 0729 0800     ............)...
 80150c0:	0765 0800 0781 0800 0985 0800 46c0 46c0     e............F.F

080150d0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_424>:
 80150d0:	0004 0000 1b80 0801 0004 0000 0000 0000     ................
 80150e0:	5070 0801 509c 0801 ab44 abab 50b0 0801     pP...P..D....P..
 80150f0:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08015100 <Microsoft.Zelig.Runtime.TypeSystem.SzArrayReferenceTypeRepresentation_425>:
 8015100:	0004 0000 1e40 0801 ab1d abab 0000 0000     ....@...........
	...
 8015124:	7760 0801 5160 0801 39b0 0801               `w..`Q...9..

08015130 <System.RuntimeType_426>:
 8015130:	0004 0000 2280 0801 5160 0801 46c0 46c0     ....."..`Q...F.F

08015140 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_427>:
 8015140:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 8015150:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

08015160 <Microsoft.Zelig.Runtime.TypeSystem.VTable_428>:
 8015160:	0004 0000 1b80 0801 0004 0000 0004 0000     ................
 8015170:	5100 0801 5130 0801 abc6 abab 5140 0801     .Q..0Q......@Q..
 8015180:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08015190 <Microsoft.Zelig.Runtime.TypeSystem.ValueTypeRepresentation_429>:
 8015190:	0004 0000 8330 0801 ab11 abab 010a 0010     ....0...........
 80151a0:	0000 0000 8360 0801 2334 0801 1e70 0801     ....`...4#..p...
 80151b0:	0000 0000 70c0 0801 51f0 0801               .....p...Q..

080151bc <System.RuntimeType_430>:
 80151bc:	0004 0000 2280 0801 51f0 0801 46c0 46c0     ....."...Q...F.F
 80151cc:	46c0 46c0                                   .F.F

080151d0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_431>:
 80151d0:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 80151e0:	ef59 0800 0781 0800 46c0 46c0 46c0 46c0     Y........F.F.F.F

080151f0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_432>:
 80151f0:	0004 0000 1b80 0801 0008 0000 0000 0000     ................
 8015200:	5190 0801 51bc 0801 ab22 abab 51d0 0801     .Q...Q.."....Q..
 8015210:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08015220 <System.String_450>:
 8015220:	0004 0000 1a10 0801 0001 0000 0001 0000     ................
 8015230:	0029 46c0 46c0 46c0 46c0 46c0 46c0 46c0     )..F.F.F.F.F.F.F

08015240 <System.String_451>:
 8015240:	0004 0000 1a10 0801 0001 0000 0001 0000     ................
 8015250:	003c 46c0 46c0 46c0 46c0 46c0 46c0 46c0     <..F.F.F.F.F.F.F

08015260 <System.String_452>:
 8015260:	0004 0000 1a10 0801 0001 0000 0001 0000     ................
 8015270:	003e 46c0 46c0 46c0 46c0 46c0 46c0 46c0     >..F.F.F.F.F.F.F

08015280 <System.String_454>:
 8015280:	0004 0000 1a10 0801 0008 0000 0008 0000     ................
 8015290:	0067 0065 006e 0065 0072 0069 0063 0020     g.e.n.e.r.i.c. .

080152a0 <System.String_455>:
 80152a0:	0004 0000 1a10 0801 0024 0000 0024 0000     ........$...$...
 80152b0:	0041 0062 0073 0074 0072 0061 0063 0074     A.b.s.t.r.a.c.t.
 80152c0:	0052 0065 0066 0065 0072 0065 006e 0063     R.e.f.e.r.e.n.c.
 80152d0:	0065 0054 0079 0070 0065 0052 0065 0070     e.T.y.p.e.R.e.p.
 80152e0:	0072 0065 0073 0065 006e 0074 0061 0074     r.e.s.e.n.t.a.t.
 80152f0:	0069 006f 006e 0028 46c0 46c0 46c0 46c0     i.o.n.(..F.F.F.F

08015300 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_456>:
 8015300:	0004 0000 6da0 0801 ab12 abab 0101 0010     .....m..........
 8015310:	0000 0000 83c0 0801 7000 0801 0000 0000     .........p......
 8015320:	0000 0000 76c0 0801 5370 0801               .....v..pS..

0801532c <System.RuntimeType_457>:
 801532c:	0004 0000 2280 0801 5370 0801 46c0 46c0     ....."..pS...F.F
 801533c:	46c0 46c0                                   .F.F

08015340 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_458>:
 8015340:	0004 0000 1bf0 0801 0009 0000 f409 0800     ................
 8015350:	f479 0800 f493 0800 f3a9 0800 f4d1 0800     y...............
 8015360:	f4dd 0800 f4e9 0800 f527 0800 f565 0800     ........'...e...

08015370 <Microsoft.Zelig.Runtime.TypeSystem.VTable_459>:
 8015370:	0004 0000 1b80 0801 0028 0000 0000 0000     ........(.......
 8015380:	5300 0801 532c 0801 ab44 abab 5340 0801     .S..,S..D...@S..
 8015390:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

080153a0 <System.String_460>:
 80153a0:	0004 0000 1a10 0801 001d 0000 001d 0000     ................
 80153b0:	0042 006f 0078 0065 0064 0056 0061 006c     B.o.x.e.d.V.a.l.
 80153c0:	0075 0065 0054 0079 0070 0065 0052 0065     u.e.T.y.p.e.R.e.
 80153d0:	0070 0072 0065 0073 0065 006e 0074 0061     p.r.e.s.e.n.t.a.
 80153e0:	0074 0069 006f 006e 0028 46c0 46c0 46c0     t.i.o.n.(..F.F.F

080153f0 <System.String_461>:
 80153f0:	0004 0000 1a10 0801 0006 0000 0006 0000     ................
 8015400:	0062 006f 0078 0065 0064 0020 46c0 46c0     b.o.x.e.d. ..F.F

08015410 <System.String_462>:
 8015410:	0004 0000 1a10 0801 0024 0000 0024 0000     ........$...$...
 8015420:	0043 006f 006e 0063 0072 0065 0074 0065     C.o.n.c.r.e.t.e.
 8015430:	0052 0065 0066 0065 0072 0065 006e 0063     R.e.f.e.r.e.n.c.
 8015440:	0065 0054 0079 0070 0065 0052 0065 0070     e.T.y.p.e.R.e.p.
 8015450:	0072 0065 0073 0065 006e 0074 0061 0074     r.e.s.e.n.t.a.t.
 8015460:	0069 006f 006e 0028 46c0 46c0 46c0 46c0     i.o.n.(..F.F.F.F

08015470 <System.String_470>:
 8015470:	0004 0000 1a10 0801 001e 0000 001e 0000     ................
 8015480:	0045 006e 0075 006d 0065 0072 0061 0074     E.n.u.m.e.r.a.t.
 8015490:	0069 006f 006e 0054 0079 0070 0065 0052     i.o.n.T.y.p.e.R.
 80154a0:	0065 0070 0072 0065 0073 0065 006e 0074     e.p.r.e.s.e.n.t.
 80154b0:	0061 0074 0069 006f 006e 0028 46c0 46c0     a.t.i.o.n.(..F.F

080154c0 <System.String_471>:
 80154c0:	0004 0000 1a10 0801 001c 0000 001c 0000     ................
 80154d0:	0049 006e 0074 0065 0072 0066 0061 0063     I.n.t.e.r.f.a.c.
 80154e0:	0065 0054 0079 0070 0065 0052 0065 0070     e.T.y.p.e.R.e.p.
 80154f0:	0072 0065 0073 0065 006e 0074 0061 0074     r.e.s.e.n.t.a.t.
 8015500:	0069 006f 006e 0028 46c0 46c0 46c0 46c0     i.o.n.(..F.F.F.F

08015510 <System.String_473>:
 8015510:	0004 0000 1a10 0801 0026 0000 0026 0000     ........&...&...
 8015520:	004d 0075 006c 0074 0069 0041 0072 0072     M.u.l.t.i.A.r.r.
 8015530:	0061 0079 0052 0065 0066 0065 0072 0065     a.y.R.e.f.e.r.e.
 8015540:	006e 0063 0065 0054 0079 0070 0065 0052     n.c.e.T.y.p.e.R.
 8015550:	0065 0070 0072 0065 0073 0065 006e 0074     e.p.r.e.s.e.n.t.
 8015560:	0061 0074 0069 006f 006e 0028 46c0 46c0     a.t.i.o.n.(..F.F

08015570 <System.String_474>:
 8015570:	0004 0000 1a10 0801 0001 0000 0001 0000     ................
 8015580:	005b 46c0 46c0 46c0 46c0 46c0 46c0 46c0     [..F.F.F.F.F.F.F

08015590 <System.String_475>:
 8015590:	0004 0000 1a10 0801 0001 0000 0001 0000     ................
 80155a0:	005d 46c0 46c0 46c0 46c0 46c0 46c0 46c0     ]..F.F.F.F.F.F.F

080155b0 <System.String_476>:
 80155b0:	0004 0000 1a10 0801 0002 0000 0002 0000     ................
 80155c0:	002e 002e 46c0 46c0 46c0 46c0 46c0 46c0     .....F.F.F.F.F.F

080155d0 <System.String_481>:
 80155d0:	0004 0000 1a10 0801 0019 0000 0019 0000     ................
 80155e0:	0053 0063 0061 006c 0061 0072 0054 0079     S.c.a.l.a.r.T.y.
 80155f0:	0070 0065 0052 0065 0070 0072 0065 0073     p.e.R.e.p.r.e.s.
 8015600:	0065 006e 0074 0061 0074 0069 006f 006e     e.n.t.a.t.i.o.n.
 8015610:	0028 46c0 46c0 46c0 46c0 46c0 46c0 46c0     (..F.F.F.F.F.F.F

08015620 <System.String_482>:
 8015620:	0004 0000 1a10 0801 0023 0000 0023 0000     ........#...#...
 8015630:	0053 007a 0041 0072 0072 0061 0079 0052     S.z.A.r.r.a.y.R.
 8015640:	0065 0066 0065 0072 0065 006e 0063 0065     e.f.e.r.e.n.c.e.
 8015650:	0054 0079 0070 0065 0052 0065 0070 0072     T.y.p.e.R.e.p.r.
 8015660:	0065 0073 0065 006e 0074 0061 0074 0069     e.s.e.n.t.a.t.i.
 8015670:	006f 006e 0028 46c0 46c0 46c0 46c0 46c0     o.n.(..F.F.F.F.F

08015680 <System.String_483>:
 8015680:	0004 0000 1a10 0801 0002 0000 0002 0000     ................
 8015690:	005b 005d 46c0 46c0 46c0 46c0 46c0 46c0     [.]..F.F.F.F.F.F

080156a0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_484>:
 80156a0:	0004 0000 7150 0801 ab12 abab 0081 0010     ....Pq..........
 80156b0:	0000 0000 8410 0801 7000 0801 0000 0000     .........p......
 80156c0:	0000 0000 8390 0801 5710 0801               .........W..

080156cc <System.RuntimeType_485>:
 80156cc:	0004 0000 2280 0801 5710 0801 46c0 46c0     ....."...W...F.F
 80156dc:	46c0 46c0                                   .F.F

080156e0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_486>:
 80156e0:	0004 0000 1bf0 0801 0009 0000 109d 0800     ................
 80156f0:	f8f1 0800 f947 0800 f7dd 0800 63bd 0800     ....G........c..
 8015700:	0b35 0800 f359 0800 f381 0800 6081 0800     5...Y........`..

08015710 <Microsoft.Zelig.Runtime.TypeSystem.VTable_487>:
 8015710:	0004 0000 1b80 0801 0024 0000 0000 0000     ........$.......
 8015720:	56a0 0801 56cc 0801 ab44 abab 56e0 0801     .V...V..D....V..
 8015730:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08015740 <System.String_488>:
 8015740:	0004 0000 1a10 0801 002a 0000 002a 0000     ........*...*...
 8015750:	0046 006f 0075 006e 0064 0020 0074 0077     F.o.u.n.d. .t.w.
 8015760:	006f 0020 0069 006e 0063 006f 006e 0073     o. .i.n.c.o.n.s.
 8015770:	0069 0073 0074 0065 006e 0074 0020 0054     i.s.t.e.n.t. .T.
 8015780:	0079 0070 0065 0052 0065 0070 0072 0065     y.p.e.R.e.p.r.e.
 8015790:	0073 0065 006e 0074 0061 0074 0069 006f     s.e.n.t.a.t.i.o.
 80157a0:	006e 0073 46c0 46c0 46c0 46c0 46c0 46c0     n.s..F.F.F.F.F.F

080157b0 <System.String_489>:
 80157b0:	0004 0000 1a10 0801 0004 0000 0004 0000     ................
 80157c0:	0076 006f 0069 0064 46c0 46c0 46c0 46c0     v.o.i.d..F.F.F.F

080157d0 <System.String_490>:
 80157d0:	0004 0000 1a10 0801 0004 0000 0004 0000     ................
 80157e0:	0062 006f 006f 006c 46c0 46c0 46c0 46c0     b.o.o.l..F.F.F.F

080157f0 <System.String_491>:
 80157f0:	0004 0000 1a10 0801 0004 0000 0004 0000     ................
 8015800:	0063 0068 0061 0072 46c0 46c0 46c0 46c0     c.h.a.r..F.F.F.F

08015810 <System.String_492>:
 8015810:	0004 0000 1a10 0801 0005 0000 0005 0000     ................
 8015820:	0073 0062 0079 0074 0065 46c0 46c0 46c0     s.b.y.t.e..F.F.F

08015830 <System.String_493>:
 8015830:	0004 0000 1a10 0801 0004 0000 0004 0000     ................
 8015840:	0062 0079 0074 0065 46c0 46c0 46c0 46c0     b.y.t.e..F.F.F.F

08015850 <System.String_494>:
 8015850:	0004 0000 1a10 0801 0005 0000 0005 0000     ................
 8015860:	0073 0068 006f 0072 0074 46c0 46c0 46c0     s.h.o.r.t..F.F.F

08015870 <System.String_495>:
 8015870:	0004 0000 1a10 0801 0006 0000 0006 0000     ................
 8015880:	0075 0073 0068 006f 0072 0074 46c0 46c0     u.s.h.o.r.t..F.F

08015890 <System.String_496>:
 8015890:	0004 0000 1a10 0801 0003 0000 0003 0000     ................
 80158a0:	0069 006e 0074 46c0 46c0 46c0 46c0 46c0     i.n.t..F.F.F.F.F

080158b0 <System.String_497>:
 80158b0:	0004 0000 1a10 0801 0004 0000 0004 0000     ................
 80158c0:	0075 0069 006e 0074 46c0 46c0 46c0 46c0     u.i.n.t..F.F.F.F

080158d0 <System.String_498>:
 80158d0:	0004 0000 1a10 0801 0004 0000 0004 0000     ................
 80158e0:	006c 006f 006e 0067 46c0 46c0 46c0 46c0     l.o.n.g..F.F.F.F

080158f0 <System.String_499>:
 80158f0:	0004 0000 1a10 0801 0005 0000 0005 0000     ................
 8015900:	0075 006c 006f 006e 0067 46c0 46c0 46c0     u.l.o.n.g..F.F.F

08015910 <System.String_500>:
 8015910:	0004 0000 1a10 0801 0005 0000 0005 0000     ................
 8015920:	0066 006c 006f 0061 0074 46c0 46c0 46c0     f.l.o.a.t..F.F.F

08015930 <System.String_501>:
 8015930:	0004 0000 1a10 0801 0006 0000 0006 0000     ................
 8015940:	0064 006f 0075 0062 006c 0065 46c0 46c0     d.o.u.b.l.e..F.F

08015950 <System.String_502>:
 8015950:	0004 0000 1a10 0801 0006 0000 0006 0000     ................
 8015960:	0073 0074 0072 0069 006e 0067 46c0 46c0     s.t.r.i.n.g..F.F

08015970 <System.String_503>:
 8015970:	0004 0000 1a10 0801 0006 0000 0006 0000     ................
 8015980:	006f 0062 006a 0065 0063 0074 46c0 46c0     o.b.j.e.c.t..F.F

08015990 <System.String_504>:
 8015990:	0004 0000 1a10 0801 0008 0000 0008 0000     ................
 80159a0:	0064 0065 006c 0061 0079 0065 0064 0020     d.e.l.a.y.e.d. .

080159b0 <System.String_506>:
 80159b0:	0004 0000 1a10 0801 0018 0000 0018 0000     ................
 80159c0:	0056 0061 006c 0075 0065 0054 0079 0070     V.a.l.u.e.T.y.p.
 80159d0:	0065 0052 0065 0070 0072 0065 0073 0065     e.R.e.p.r.e.s.e.
 80159e0:	006e 0074 0061 0074 0069 006f 006e 0028     n.t.a.t.i.o.n.(.

080159f0 <Microsoft.Zelig.Runtime.TypeSystem.BoxedValueTypeRepresentation_507>:
 80159f0:	0004 0000 5370 0801 ab11 abab 010a 0010     ....pS..........
	...
 8015a14:	70c0 0801 5a50 0801 5190 0801               .p..PZ...Q..

08015a20 <System.RuntimeType_508>:
 8015a20:	0004 0000 2280 0801 5a50 0801 46c0 46c0     ....."..PZ...F.F

08015a30 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_509>:
 8015a30:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 8015a40:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

08015a50 <Microsoft.Zelig.Runtime.TypeSystem.VTable_510>:
 8015a50:	0004 0000 1b80 0801 0008 0000 0000 0000     ................
 8015a60:	59f0 0801 5a20 0801 ab00 abab 5a30 0801     .Y.. Z......0Z..
 8015a70:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08015a80 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_511>:
 8015a80:	0004 0000 6da0 0801 ab12 abab 0101 0010     .....m..........
 8015a90:	0000 0000 8450 0801 7980 0801 0000 0000     ....P....y......
 8015aa0:	0000 0000 3770 0801 5ae0 0801               ....p7...Z..

08015aac <System.RuntimeType_512>:
 8015aac:	0004 0000 2280 0801 5ae0 0801 46c0 46c0     ....."...Z...F.F
 8015abc:	46c0 46c0                                   .F.F

08015ac0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_513>:
 8015ac0:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 8015ad0:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

08015ae0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_514>:
 8015ae0:	0004 0000 1b80 0801 000c 0000 0000 0000     ................
 8015af0:	5a80 0801 5aac 0801 ab44 abab 5ac0 0801     .Z...Z..D....Z..
 8015b00:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08015b10 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_515>:
 8015b10:	0004 0000 6da0 0801 ab12 abab 0101 0010     .....m..........
 8015b20:	0000 0000 8480 0801 84a0 0801 0000 0000     ................
 8015b30:	0000 0000 3770 0801 5b70 0801               ....p7..p[..

08015b3c <System.RuntimeType_516>:
 8015b3c:	0004 0000 2280 0801 5b70 0801 46c0 46c0     ....."..p[...F.F
 8015b4c:	46c0 46c0                                   .F.F

08015b50 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_517>:
 8015b50:	0004 0000 1bf0 0801 0004 0000 109d 0800     ................
 8015b60:	0765 0800 0781 0800 0435 0801 46c0 46c0     e.......5....F.F

08015b70 <Microsoft.Zelig.Runtime.TypeSystem.VTable_518>:
 8015b70:	0004 0000 1b80 0801 0018 0000 0000 0000     ................
 8015b80:	5b10 0801 5b3c 0801 ab44 abab 5b50 0801     .[..<[..D...P[..
 8015b90:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08015ba0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_519>:
 8015ba0:	0004 0000 6da0 0801 ab12 abab 0101 0010     .....m..........
 8015bb0:	0000 0000 84e0 0801 84a0 0801 0000 0000     ................
 8015bc0:	0000 0000 3770 0801 5c00 0801               ....p7...\..

08015bcc <System.RuntimeType_520>:
 8015bcc:	0004 0000 2280 0801 5c00 0801 46c0 46c0     ....."...\...F.F
 8015bdc:	46c0 46c0                                   .F.F

08015be0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_521>:
 8015be0:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 8015bf0:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

08015c00 <Microsoft.Zelig.Runtime.TypeSystem.VTable_522>:
 8015c00:	0004 0000 1b80 0801 0000 0000 0000 0000     ................
 8015c10:	5ba0 0801 5bcc 0801 ab44 abab 5be0 0801     .[...[..D....[..
 8015c20:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08015c30 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_523>:
 8015c30:	0004 0000 6da0 0801 ab12 abab 2001 0010     .....m....... ..
 8015c40:	0000 0000 8510 0801 6e10 0801 0000 0000     .........n......
 8015c50:	0000 0000 48b0 0801 5c90 0801               .....H...\..

08015c5c <System.RuntimeType_524>:
 8015c5c:	0004 0000 2280 0801 5c90 0801 46c0 46c0     ....."...\...F.F
 8015c6c:	46c0 46c0                                   .F.F

08015c70 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_525>:
 8015c70:	0004 0000 1bf0 0801 0004 0000 0729 0800     ............)...
 8015c80:	0765 0800 0781 0800 dcf9 0800 46c0 46c0     e............F.F

08015c90 <Microsoft.Zelig.Runtime.TypeSystem.VTable_526>:
 8015c90:	0004 0000 1b80 0801 0008 0000 0000 0000     ................
 8015ca0:	5c30 0801 5c5c 0801 ab44 abab 5c70 0801     0\..\\..D...p\..
 8015cb0:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08015cc0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_527>:
 8015cc0:	0004 0000 6da0 0801 ab12 abab 0101 0010     .....m..........
 8015cd0:	0000 0000 8550 0801 85a0 0801 0000 0000     ....P...........
 8015ce0:	0000 0000 85f0 0801 5d20 0801               ........ ]..

08015cec <System.RuntimeType_528>:
 8015cec:	0004 0000 2280 0801 5d20 0801 46c0 46c0     .....".. ]...F.F
 8015cfc:	46c0 46c0                                   .F.F

08015d00 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_529>:
 8015d00:	0004 0000 1bf0 0801 0005 0000 109d 0800     ................
 8015d10:	0765 0800 0781 0800 67f1 0800 0751 0801     e........g..Q...

08015d20 <Microsoft.Zelig.Runtime.TypeSystem.VTable_530>:
 8015d20:	0004 0000 1b80 0801 000c 0000 0000 0000     ................
 8015d30:	5cc0 0801 5cec 0801 ab44 abab 5d00 0801     .\...\..D....]..
 8015d40:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08015d50 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_531>:
 8015d50:	0004 0000 6da0 0801 ab12 abab 0101 0010     .....m..........
 8015d60:	0000 0000 8620 0801 85a0 0801 0000 0000     .... ...........
 8015d70:	0000 0000 3770 0801 5db0 0801               ....p7...]..

08015d7c <System.RuntimeType_532>:
 8015d7c:	0004 0000 2280 0801 5db0 0801 46c0 46c0     ....."...]...F.F
 8015d8c:	46c0 46c0                                   .F.F

08015d90 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_533>:
 8015d90:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 8015da0:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

08015db0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_534>:
 8015db0:	0004 0000 1b80 0801 0008 0000 0000 0000     ................
 8015dc0:	5d50 0801 5d7c 0801 ab44 abab 5d90 0801     P]..|]..D....]..
 8015dd0:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08015de0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_535>:
 8015de0:	0004 0000 6da0 0801 ab12 abab 2103 0010     .....m.......!..
 8015df0:	0000 0000 8660 0801 2334 0801 7730 0801     ....`...4#..0w..
 8015e00:	0000 0000 3770 0801 5e40 0801               ....p7..@^..

08015e0c <System.RuntimeType_536>:
 8015e0c:	0004 0000 2280 0801 5e40 0801 46c0 46c0     ....."..@^...F.F
 8015e1c:	46c0 46c0                                   .F.F

08015e20 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_537>:
 8015e20:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 8015e30:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

08015e40 <Microsoft.Zelig.Runtime.TypeSystem.VTable_538>:
 8015e40:	0004 0000 1b80 0801 0000 0000 0000 0000     ................
 8015e50:	5de0 0801 5e0c 0801 ab44 abab 5e20 0801     .]...^..D... ^..
 8015e60:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08015e70 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_539>:
 8015e70:	0004 0000 6da0 0801 ab12 abab 0102 0000     .....m..........
 8015e80:	0000 0000 8680 0801 2334 0801 86a0 0801     ........4#......
 8015e90:	0000 0000 2160 0801 5ed0 0801               ....`!...^..

08015e9c <System.RuntimeType_540>:
 8015e9c:	0004 0000 2280 0801 5ed0 0801 46c0 46c0     ....."...^...F.F
 8015eac:	46c0 46c0                                   .F.F

08015eb0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_541>:
 8015eb0:	0004 0000 1bf0 0801 0005 0000 109d 0800     ................
 8015ec0:	18d1 0800 1951 0800 19ff 0800 09f9 0801     ....Q...........

08015ed0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_542>:
 8015ed0:	0004 0000 1b80 0801 000c 0000 0000 0000     ................
 8015ee0:	5e70 0801 5e9c 0801 ab44 abab 5eb0 0801     p^...^..D....^..
 8015ef0:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08015f00 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_544>:
 8015f00:	0004 0000 6da0 0801 ab12 abab 0101 0010     .....m..........
 8015f10:	0000 0000 74f0 0801 74a0 0801 0000 0000     .....t...t......
 8015f20:	86cc 0801 3770 0801 5f60 0801               ....p7..`_..

08015f2c <System.RuntimeType_545>:
 8015f2c:	0004 0000 2280 0801 5f60 0801 46c0 46c0     ....."..`_...F.F
 8015f3c:	46c0 46c0                                   .F.F

08015f40 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_546>:
 8015f40:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 8015f50:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

08015f60 <Microsoft.Zelig.Runtime.TypeSystem.VTable_547>:
 8015f60:	0004 0000 1b80 0801 0008 0000 0000 0000     ................
 8015f70:	5f00 0801 5f2c 0801 ab44 abab 5f40 0801     ._..,_..D...@_..
 8015f80:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08015f90 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_548>:
 8015f90:	0004 0000 6da0 0801 ab12 abab 0002 0010     .....m..........
 8015fa0:	0000 0000 78d0 0801 2334 0801 86a0 0801     .....x..4#......
 8015fb0:	0000 0000 3770 0801 5ff0 0801               ....p7..._..

08015fbc <System.RuntimeType_549>:
 8015fbc:	0004 0000 2280 0801 5ff0 0801 46c0 46c0     ....."..._...F.F
 8015fcc:	46c0 46c0                                   .F.F

08015fd0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_550>:
 8015fd0:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 8015fe0:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

08015ff0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_551>:
 8015ff0:	0004 0000 1b80 0801 0014 0000 0000 0000     ................
 8016000:	5f90 0801 5fbc 0801 ab44 abab 5fd0 0801     ._..._..D...._..
 8016010:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08016020 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_552>:
 8016020:	0004 0000 6da0 0801 ab12 abab 0001 0010     .....m..........
 8016030:	0000 0000 86e0 0801 8710 0801 0000 0000     ................
 8016040:	0000 0000 8770 0801 6090 0801               ....p....`..

0801604c <System.RuntimeType_553>:
 801604c:	0004 0000 2280 0801 6090 0801 46c0 46c0     ....."...`...F.F
 801605c:	46c0 46c0                                   .F.F

08016060 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_554>:
 8016060:	0004 0000 1bf0 0801 0007 0000 109d 0800     ................
 8016070:	0765 0800 0781 0800 055d 0801 0fdf 0801     e.......].......
 8016080:	05d1 0801 06e9 0801 46c0 46c0 46c0 46c0     .........F.F.F.F

08016090 <Microsoft.Zelig.Runtime.TypeSystem.VTable_555>:
 8016090:	0004 0000 1b80 0801 0005 0000 0000 0000     ................
 80160a0:	6020 0801 604c 0801 ab44 abab 6060 0801      `..L`..D...``..
 80160b0:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

080160c0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_556>:
 80160c0:	0004 0000 6da0 0801 ab12 abab 0001 0010     .....m..........
 80160d0:	0000 0000 87a0 0801 8710 0801 0000 0000     ................
 80160e0:	0000 0000 87d0 0801 6130 0801               ........0a..

080160ec <System.RuntimeType_557>:
 80160ec:	0004 0000 2280 0801 6130 0801 46c0 46c0     ....."..0a...F.F
 80160fc:	46c0 46c0                                   .F.F

08016100 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_558>:
 8016100:	0004 0000 1bf0 0801 0006 0000 109d 0800     ................
 8016110:	0765 0800 0781 0800 0159 0801 023d 0801     e.......Y...=...
 8016120:	02f9 0801 46c0 46c0 46c0 46c0 46c0 46c0     .....F.F.F.F.F.F

08016130 <Microsoft.Zelig.Runtime.TypeSystem.VTable_559>:
 8016130:	0004 0000 1b80 0801 0015 0000 0000 0000     ................
 8016140:	60c0 0801 60ec 0801 ab44 abab 6100 0801     .`...`..D....a..
 8016150:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08016160 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_560>:
 8016160:	0004 0000 6da0 0801 ab12 abab 0101 0010     .....m..........
 8016170:	0000 0000 7470 0801 74a0 0801 0000 0000     ....pt...t......
 8016180:	87fc 0801 3770 0801 61c0 0801               ....p7...a..

0801618c <System.RuntimeType_561>:
 801618c:	0004 0000 2280 0801 61c0 0801 46c0 46c0     ....."...a...F.F
 801619c:	46c0 46c0                                   .F.F

080161a0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_562>:
 80161a0:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 80161b0:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

080161c0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_563>:
 80161c0:	0004 0000 1b80 0801 000c 0000 0000 0000     ................
 80161d0:	6160 0801 618c 0801 ab44 abab 61a0 0801     `a...a..D....a..
 80161e0:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

080161f0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_564>:
 80161f0:	0004 0000 6da0 0801 ab12 abab 0102 0000     .....m..........
 8016200:	0000 0000 8680 0801 2334 0801 8810 0801     ........4#......
 8016210:	0000 0000 2160 0801 6250 0801               ....`!..Pb..

0801621c <System.RuntimeType_565>:
 801621c:	0004 0000 2280 0801 6250 0801 46c0 46c0     ....."..Pb...F.F
 801622c:	46c0 46c0                                   .F.F

08016230 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_566>:
 8016230:	0004 0000 1bf0 0801 0005 0000 109d 0800     ................
 8016240:	18d1 0800 1951 0800 19ff 0800 11e3 0801     ....Q...........

08016250 <Microsoft.Zelig.Runtime.TypeSystem.VTable_567>:
 8016250:	0004 0000 1b80 0801 000c 0000 0000 0000     ................
 8016260:	61f0 0801 621c 0801 ab44 abab 6230 0801     .a...b..D...0b..
 8016270:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08016280 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_569>:
 8016280:	0004 0000 6da0 0801 ab12 abab 0101 0010     .....m..........
 8016290:	0000 0000 74f0 0801 74a0 0801 0000 0000     .....t...t......
 80162a0:	883c 0801 3770 0801 62e0 0801               <...p7...b..

080162ac <System.RuntimeType_570>:
 80162ac:	0004 0000 2280 0801 62e0 0801 46c0 46c0     ....."...b...F.F
 80162bc:	46c0 46c0                                   .F.F

080162c0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_571>:
 80162c0:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 80162d0:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

080162e0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_572>:
 80162e0:	0004 0000 1b80 0801 0008 0000 0000 0000     ................
 80162f0:	6280 0801 62ac 0801 ab44 abab 62c0 0801     .b...b..D....b..
 8016300:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08016310 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_573>:
 8016310:	0004 0000 6da0 0801 ab12 abab 0002 0010     .....m..........
 8016320:	0000 0000 8850 0801 2334 0801 8810 0801     ....P...4#......
 8016330:	0000 0000 3770 0801 6370 0801               ....p7..pc..

0801633c <System.RuntimeType_574>:
 801633c:	0004 0000 2280 0801 6370 0801 46c0 46c0     ....."..pc...F.F
 801634c:	46c0 46c0                                   .F.F

08016350 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_575>:
 8016350:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 8016360:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

08016370 <Microsoft.Zelig.Runtime.TypeSystem.VTable_576>:
 8016370:	0004 0000 1b80 0801 000c 0000 0000 0000     ................
 8016380:	6310 0801 633c 0801 ab44 abab 6350 0801     .c..<c..D...Pc..
 8016390:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

080163a0 <System.String_577>:
 80163a0:	0004 0000 1a10 0801 001f 0000 001f 0000     ................
 80163b0:	0043 0061 006e 006e 006f 0074 0020 0062     C.a.n.n.o.t. .b.
 80163c0:	006f 006f 0074 0073 0074 0072 0061 0070     o.o.t.s.t.r.a.p.
 80163d0:	0020 0069 006e 0020 0054 0068 0072 0065      .i.n. .T.h.r.e.
 80163e0:	0061 0064 0020 006d 006f 0064 0065 46c0     a.d. .m.o.d.e..F

080163f0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_578>:
 80163f0:	0004 0000 6da0 0801 ab12 abab 0002 0010     .....m..........
 8016400:	0000 0000 8880 0801 2334 0801 88b0 0801     ........4#......
 8016410:	0000 0000 3770 0801 6450 0801               ....p7..Pd..

0801641c <System.RuntimeType_579>:
 801641c:	0004 0000 2280 0801 6450 0801 46c0 46c0     ....."..Pd...F.F
 801642c:	46c0 46c0                                   .F.F

08016430 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_580>:
 8016430:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 8016440:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

08016450 <Microsoft.Zelig.Runtime.TypeSystem.VTable_581>:
 8016450:	0004 0000 1b80 0801 0029 0000 0000 0000     ........).......
 8016460:	63f0 0801 641c 0801 ab44 abab 6430 0801     .c...d..D...0d..
 8016470:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08016480 <System.String_582>:
 8016480:	0004 0000 1a10 0801 0004 0000 0004 0000     ................
 8016490:	0049 0032 0043 0030 46c0 46c0 46c0 46c0     I.2.C.0..F.F.F.F

080164a0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_583>:
 80164a0:	0004 0000 6da0 0801 ab12 abab 0002 0010     .....m..........
 80164b0:	0000 0000 88e0 0801 2334 0801 88b0 0801     ........4#......
 80164c0:	0000 0000 3770 0801 6500 0801               ....p7...e..

080164cc <System.RuntimeType_584>:
 80164cc:	0004 0000 2280 0801 6500 0801 46c0 46c0     ....."...e...F.F
 80164dc:	46c0 46c0                                   .F.F

080164e0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_585>:
 80164e0:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 80164f0:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

08016500 <Microsoft.Zelig.Runtime.TypeSystem.VTable_586>:
 8016500:	0004 0000 1b80 0801 0008 0000 0000 0000     ................
 8016510:	64a0 0801 64cc 0801 ab44 abab 64e0 0801     .d...d..D....d..
 8016520:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08016530 <System.String_587>:
 8016530:	0004 0000 1a10 0801 0005 0000 0005 0000     ................
 8016540:	0055 0041 0052 0054 0030 46c0 46c0 46c0     U.A.R.T.0..F.F.F

08016550 <System.String_588>:
 8016550:	0004 0000 1a10 0801 0005 0000 0005 0000     ................
 8016560:	0055 0041 0052 0054 0031 46c0 46c0 46c0     U.A.R.T.1..F.F.F

08016570 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_589>:
 8016570:	0004 0000 6da0 0801 ab12 abab 0002 0010     .....m..........
 8016580:	0000 0000 8910 0801 2334 0801 88b0 0801     ........4#......
 8016590:	0000 0000 3770 0801 65d0 0801               ....p7...e..

0801659c <System.RuntimeType_590>:
 801659c:	0004 0000 2280 0801 65d0 0801 46c0 46c0     ....."...e...F.F
 80165ac:	46c0 46c0                                   .F.F

080165b0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_591>:
 80165b0:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 80165c0:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

080165d0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_592>:
 80165d0:	0004 0000 1b80 0801 0010 0000 0000 0000     ................
 80165e0:	6570 0801 659c 0801 ab44 abab 65b0 0801     pe...e..D....e..
 80165f0:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08016600 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_594>:
 8016600:	0004 0000 6da0 0801 ab12 abab 0101 0010     .....m..........
 8016610:	0000 0000 7470 0801 74a0 0801 0000 0000     ....pt...t......
 8016620:	893c 0801 3770 0801 6660 0801               <...p7..`f..

0801662c <System.RuntimeType_595>:
 801662c:	0004 0000 2280 0801 6660 0801 46c0 46c0     ....."..`f...F.F
 801663c:	46c0 46c0                                   .F.F

08016640 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_596>:
 8016640:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 8016650:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

08016660 <Microsoft.Zelig.Runtime.TypeSystem.VTable_597>:
 8016660:	0004 0000 1b80 0801 000c 0000 0000 0000     ................
 8016670:	6600 0801 662c 0801 ab44 abab 6640 0801     .f..,f..D...@f..
 8016680:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08016690 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_598>:
 8016690:	0004 0000 6da0 0801 ab12 abab 0001 0010     .....m..........
 80166a0:	0000 0000 8950 0801 7000 0801 0000 0000     ....P....p......
 80166b0:	0000 0000 3770 0801 1990 0801               ....p7......

080166bc <System.RuntimeType_599>:
 80166bc:	0004 0000 2280 0801 1990 0801 46c0 46c0     .....".......F.F
 80166cc:	46c0 46c0                                   .F.F

080166d0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_600>:
 80166d0:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 80166e0:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

080166f0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_601>:
 80166f0:	0004 0000 1b80 0801 0000 0000 0000 0000     ................
 8016700:	8980 0801 89ac 0801 ab44 abab 89c0 0801     ........D.......
 8016710:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08016720 <Microsoft.Zelig.Runtime.TypeSystem.VTable_602>:
 8016720:	0004 0000 1b80 0801 0004 0000 0000 0000     ................
 8016730:	8a00 0801 8a2c 0801 ab44 abab 8a40 0801     ....,...D...@...
 8016740:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08016750 <Microsoft.Zelig.Runtime.TypeSystem.VTable_603>:
 8016750:	0004 0000 1b80 0801 0004 0000 0004 0000     ................
 8016760:	8a60 0801 8a90 0801 abc6 abab 8aa0 0801     `...............
 8016770:	1c64 0801                                   d...

08016774 <Microsoft.Zelig.Runtime.Memory.Range[]_604>:
 8016774:	0004 0000 6750 0801 0000 0000               ....Pg......

08016780 <Microsoft.Zelig.Runtime.TypeSystem.VTable_605>:
 8016780:	0004 0000 1b80 0801 0014 0000 0000 0000     ................
 8016790:	8ac0 0801 8aec 0801 ab44 abab 8b00 0801     ........D.......
 80167a0:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

080167b0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_606>:
 80167b0:	0004 0000 1b80 0801 0000 0000 0000 0000     ................
 80167c0:	8b30 0801 8b5c 0801 ab44 abab 8b70 0801     0...\...D...p...
 80167d0:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

080167e0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_607>:
 80167e0:	0004 0000 1b80 0801 0000 0000 0000 0000     ................
 80167f0:	8bb0 0801 8bdc 0801 ab44 abab 8bf0 0801     ........D.......
 8016800:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08016810 <Microsoft.Zelig.Runtime.TypeSystem.VTable_608>:
 8016810:	0004 0000 1b80 0801 0000 0000 0000 0000     ................
 8016820:	8c10 0801 8c3c 0801 ab44 abab 8c50 0801     ....<...D...P...
 8016830:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08016840 <Microsoft.Zelig.Runtime.TypeSystem.VTable_609>:
 8016840:	0004 0000 1b80 0801 0000 0000 0000 0000     ................
 8016850:	8c90 0801 8cbc 0801 ab44 abab 8cd0 0801     ........D.......
 8016860:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08016870 <Microsoft.Zelig.Runtime.TypeSystem.VTable_610>:
 8016870:	0004 0000 1b80 0801 0000 0000 0000 0000     ................
 8016880:	8cf0 0801 8d1c 0801 ab44 abab 8d30 0801     ........D...0...
 8016890:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

080168a0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_611>:
 80168a0:	0004 0000 1b80 0801 0000 0000 0000 0000     ................
 80168b0:	8d60 0801 8d8c 0801 ab44 abab 8da0 0801     `.......D.......
 80168c0:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

080168d0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_612>:
 80168d0:	0004 0000 1b80 0801 0019 0000 0000 0000     ................
 80168e0:	8dd0 0801 8dfc 0801 ab44 abab 8e10 0801     ........D.......
 80168f0:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08016900 <Microsoft.Zelig.Runtime.TypeSystem.VTable_613>:
 8016900:	0004 0000 1b80 0801 0004 0000 0000 0000     ................
 8016910:	8e30 0801 8e5c 0801 ab44 abab 8e70 0801     0...\...D...p...
 8016920:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08016930 <Microsoft.Zelig.Runtime.TypeSystem.VTable_614>:
 8016930:	0004 0000 1b80 0801 0014 0000 0000 0000     ................
 8016940:	8e90 0801 8ebc 0801 ab44 abab 8ed0 0801     ........D.......
 8016950:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08016960 <Microsoft.Zelig.Runtime.TypeSystem.VTable_615>:
 8016960:	0004 0000 1b80 0801 0000 0000 0000 0000     ................
 8016970:	7410 0801 8ee8 0801 ab44 abab 8f00 0801     .t......D.......
 8016980:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08016990 <Microsoft.Zelig.Runtime.TypeSystem.VTable_616>:
 8016990:	0004 0000 1b80 0801 0040 0000 0000 0000     ........@.......
 80169a0:	8f30 0801 8f5c 0801 ab44 abab 8f70 0801     0...\...D...p...
 80169b0:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

080169c0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_617>:
 80169c0:	0004 0000 1b80 0801 0000 0000 0000 0000     ................
 80169d0:	8fe0 0801 900c 0801 ab44 abab 9020 0801     ........D... ...
 80169e0:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

080169f0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_618>:
 80169f0:	0004 0000 1b80 0801 0010 0000 0000 0000     ................
 8016a00:	9050 0801 907c 0801 ab44 abab 9090 0801     P...|...D.......
 8016a10:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08016a20 <Microsoft.Zelig.Runtime.TypeSystem.VTable_619>:
 8016a20:	0004 0000 1b80 0801 0000 0000 0000 0000     ................
 8016a30:	90b0 0801 90dc 0801 ab44 abab 90f0 0801     ........D.......
 8016a40:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08016a50 <Microsoft.Zelig.Runtime.TypeSystem.SzArrayReferenceTypeRepresentation_620>:
 8016a50:	0004 0000 1e40 0801 ab1d abab 0000 0000     ....@...........
	...
 8016a74:	7760 0801 19e0 0801 6ab0 0801               `w.......j..

08016a80 <System.RuntimeType_621>:
 8016a80:	0004 0000 2280 0801 19e0 0801 46c0 46c0     .....".......F.F

08016a90 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_622>:
 8016a90:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 8016aa0:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

08016ab0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_623>:
 8016ab0:	0004 0000 6da0 0801 ab0e abab 2101 0010     .....m.......!..
 8016ac0:	0000 0000 9120 0801 6e10 0801 0000 0000     .... ....n......
 8016ad0:	0000 0000 3770 0801 1a10 0801 46c0 46c0     ....p7.......F.F

08016ae0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_624>:
 8016ae0:	0004 0000 1bf0 0801 0004 0000 27e7 0800     .............'..
 8016af0:	1fc1 0800 2463 0800 2011 0800 46c0 46c0     ....c$... ...F.F

08016b00 <Microsoft.Zelig.Runtime.TypeSystem.SzArrayReferenceTypeRepresentation_625>:
 8016b00:	0004 0000 1e40 0801 ab1d abab 0000 0000     ....@...........
	...
 8016b24:	7760 0801 1a60 0801 7330 0801               `w..`...0s..

08016b30 <System.RuntimeType_626>:
 8016b30:	0004 0000 2280 0801 1a60 0801 46c0 46c0     ....."..`....F.F

08016b40 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_627>:
 8016b40:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 8016b50:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

08016b60 <Microsoft.Zelig.Runtime.TypeSystem.SzArrayReferenceTypeRepresentation_628>:
 8016b60:	0004 0000 1e40 0801 ab1d abab 0000 0000     ....@...........
	...
 8016b84:	7760 0801 1a90 0801 56a0 0801               `w.......V..

08016b90 <System.RuntimeType_629>:
 8016b90:	0004 0000 2280 0801 1a90 0801 46c0 46c0     .....".......F.F

08016ba0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_630>:
 8016ba0:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 8016bb0:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

08016bc0 <Microsoft.Zelig.Runtime.TypeSystem.SzArrayReferenceTypeRepresentation_631>:
 8016bc0:	0004 0000 1e40 0801 ab1d abab 0000 0000     ....@...........
	...
 8016be4:	7760 0801 1ac0 0801 71a0 0801               `w.......q..

08016bf0 <System.RuntimeType_632>:
 8016bf0:	0004 0000 2280 0801 1ac0 0801 46c0 46c0     .....".......F.F

08016c00 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_633>:
 8016c00:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 8016c10:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

08016c20 <Microsoft.Zelig.Runtime.TypeSystem.SzArrayReferenceTypeRepresentation_634>:
 8016c20:	0004 0000 1e40 0801 ab1d abab 0000 0000     ....@...........
	...
 8016c44:	7760 0801 1af0 0801 7120 0801               `w...... q..

08016c50 <System.RuntimeType_635>:
 8016c50:	0004 0000 2280 0801 1af0 0801 46c0 46c0     .....".......F.F

08016c60 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_636>:
 8016c60:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 8016c70:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

08016c80 <Microsoft.Zelig.Runtime.TypeSystem.SzArrayReferenceTypeRepresentation_637>:
 8016c80:	0004 0000 1e40 0801 ab1d abab 0000 0000     ....@...........
	...
 8016ca4:	7760 0801 1b20 0801 5d50 0801               `w.. ...P]..

08016cb0 <System.RuntimeType_638>:
 8016cb0:	0004 0000 2280 0801 1b20 0801 46c0 46c0     .....".. ....F.F

08016cc0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_639>:
 8016cc0:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 8016cd0:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

08016ce0 <Microsoft.Zelig.Runtime.TypeSystem.SzArrayReferenceTypeRepresentation_640>:
 8016ce0:	0004 0000 1e40 0801 ab1d abab 0000 0000     ....@...........
	...
 8016d04:	7760 0801 1b50 0801 4000 0801               `w..P....@..

08016d10 <System.RuntimeType_641>:
 8016d10:	0004 0000 2280 0801 1b50 0801 46c0 46c0     ....."..P....F.F

08016d20 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_642>:
 8016d20:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 8016d30:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

08016d40 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_643>:
 8016d40:	0004 0000 6da0 0801 ab12 abab 0101 0010     .....m..........
 8016d50:	0000 0000 9140 0801 7000 0801 0000 0000     ....@....p......
 8016d60:	0000 0000 3770 0801 1b80 0801               ....p7......

08016d6c <System.RuntimeType_644>:
 8016d6c:	0004 0000 2280 0801 1b80 0801 46c0 46c0     .....".......F.F
 8016d7c:	46c0 46c0                                   .F.F

08016d80 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_645>:
 8016d80:	0004 0000 1bf0 0801 0003 0000 640d 0800     .............d..
 8016d90:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

08016da0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_646>:
 8016da0:	0004 0000 1b80 0801 0024 0000 0000 0000     ........$.......
 8016db0:	9160 0801 918c 0801 ab44 abab 91a0 0801     `.......D.......
 8016dc0:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08016dd0 <System.String_647>:
 8016dd0:	0004 0000 1a10 0801 0015 0000 0015 0000     ................
 8016de0:	0041 0072 0067 0075 006d 0065 006e 0074     A.r.g.u.m.e.n.t.
 8016df0:	004e 0075 006c 006c 0045 0078 0063 0065     N.u.l.l.E.x.c.e.
 8016e00:	0070 0074 0069 006f 006e 46c0 46c0 46c0     p.t.i.o.n..F.F.F

08016e10 <System.String_648>:
 8016e10:	0004 0000 1a10 0801 0006 0000 0006 0000     ................
 8016e20:	0053 0079 0073 0074 0065 006d 46c0 46c0     S.y.s.t.e.m..F.F

08016e30 <Microsoft.Zelig.Runtime.TypeSystem.SzArrayReferenceTypeRepresentation_649>:
 8016e30:	0004 0000 1e40 0801 ab1d abab 0000 0000     ....@...........
	...
 8016e54:	7760 0801 1bf0 0801 91d0 0801               `w..........

08016e60 <System.RuntimeType_650>:
 8016e60:	0004 0000 2280 0801 1bf0 0801 46c0 46c0     .....".......F.F

08016e70 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_651>:
 8016e70:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 8016e80:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

08016e90 <Microsoft.Zelig.Runtime.TypeSystem.SzArrayReferenceTypeRepresentation_652>:
 8016e90:	0004 0000 1e40 0801 ab1d abab 0000 0000     ....@...........
	...
 8016eb4:	7760 0801 1c40 0801 9200 0801               `w..@.......

08016ec0 <System.RuntimeType_653>:
 8016ec0:	0004 0000 2280 0801 1c40 0801 46c0 46c0     ....."..@....F.F

08016ed0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_654>:
 8016ed0:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 8016ee0:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

08016ef0 <System.String_655>:
 8016ef0:	0004 0000 1a10 0801 0015 0000 0015 0000     ................
 8016f00:	004e 006f 0074 0053 0075 0070 0070 006f     N.o.t.S.u.p.p.o.
 8016f10:	0072 0074 0065 0064 0045 0078 0063 0065     r.t.e.d.E.x.c.e.
 8016f20:	0070 0074 0069 006f 006e 46c0 46c0 46c0     p.t.i.o.n..F.F.F

08016f30 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_656>:
 8016f30:	0004 0000 6da0 0801 ab12 abab 2001 0010     .....m....... ..
 8016f40:	0000 0000 9230 0801 6e10 0801 0000 0000     ....0....n......
 8016f50:	0000 0000 3ca0 0801 9260 0801 46c0 46c0     .....<..`....F.F

08016f60 <System.String_657>:
 8016f60:	0004 0000 1a10 0801 0018 0000 0018 0000     ................
 8016f70:	0049 006e 0064 0065 0078 004f 0075 0074     I.n.d.e.x.O.u.t.
 8016f80:	004f 0066 0052 0061 006e 0067 0065 0045     O.f.R.a.n.g.e.E.
 8016f90:	0078 0063 0065 0070 0074 0069 006f 006e     x.c.e.p.t.i.o.n.

08016fa0 <System.String_658>:
 8016fa0:	0004 0000 1a10 0801 0022 0000 0022 0000     ........"..."...
 8016fb0:	0053 007a 0041 0072 0072 0061 0079 0052     S.z.A.r.r.a.y.R.
 8016fc0:	0065 0066 0065 0072 0065 006e 0063 0065     e.f.e.r.e.n.c.e.
 8016fd0:	0054 0079 0070 0065 0052 0065 0070 0072     T.y.p.e.R.e.p.r.
 8016fe0:	0065 0073 0065 006e 0074 0061 0074 0069     e.s.e.n.t.a.t.i.
 8016ff0:	006f 006e 46c0 46c0 46c0 46c0 46c0 46c0     o.n..F.F.F.F.F.F

08017000 <System.String_659>:
 8017000:	0004 0000 1a10 0801 0022 0000 0022 0000     ........"..."...
 8017010:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 8017020:	0074 002e 005a 0065 006c 0069 0067 002e     t...Z.e.l.i.g...
 8017030:	0052 0075 006e 0074 0069 006d 0065 002e     R.u.n.t.i.m.e...
 8017040:	0054 0079 0070 0065 0053 0079 0073 0074     T.y.p.e.S.y.s.t.
 8017050:	0065 006d 46c0 46c0 46c0 46c0 46c0 46c0     e.m..F.F.F.F.F.F

08017060 <System.String_660>:
 8017060:	0004 0000 1a10 0801 0025 0000 0025 0000     ........%...%...
 8017070:	004d 0075 006c 0074 0069 0041 0072 0072     M.u.l.t.i.A.r.r.
 8017080:	0061 0079 0052 0065 0066 0065 0072 0065     a.y.R.e.f.e.r.e.
 8017090:	006e 0063 0065 0054 0079 0070 0065 0052     n.c.e.T.y.p.e.R.
 80170a0:	0065 0070 0072 0065 0073 0065 006e 0074     e.p.r.e.s.e.n.t.
 80170b0:	0061 0074 0069 006f 006e 46c0 46c0 46c0     a.t.i.o.n..F.F.F

080170c0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_661>:
 80170c0:	0004 0000 7150 0801 ab11 abab 2081 0010     ....Pq....... ..
 80170d0:	0000 0000 9290 0801 6e10 0801 0000 0000     .........n......
 80170e0:	0000 0000 3770 0801 92c0 0801 46c0 46c0     ....p7.......F.F

080170f0 <Microsoft.Zelig.Runtime.TypeSystem.ScalarTypeRepresentation_662>:
 80170f0:	0004 0000 92f0 0801 ab05 abab 2109 0010     .............!..
 8017100:	0000 0000 9320 0801 6e10 0801 0000 0000     .... ....n......
 8017110:	0000 0000 70c0 0801 9340 0801 46c0 46c0     .....p..@....F.F

08017120 <Microsoft.Zelig.Runtime.TypeSystem.ScalarTypeRepresentation_663>:
 8017120:	0004 0000 92f0 0801 ab03 abab 2109 0010     .............!..
 8017130:	0000 0000 9370 0801 6e10 0801 0000 0000     ....p....n......
 8017140:	0000 0000 70c0 0801 9390 0801 46c0 46c0     .....p.......F.F

08017150 <Microsoft.Zelig.Runtime.TypeSystem.VTable_664>:
 8017150:	0004 0000 1b80 0801 0024 0000 0000 0000     ........$.......
 8017160:	93c0 0801 93ec 0801 ab44 abab 9400 0801     ........D.......
 8017170:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08017180 <System.String_665>:
 8017180:	0004 0000 1a10 0801 0008 0000 0008 0000     ................
 8017190:	0044 0065 006c 0065 0067 0061 0074 0065     D.e.l.e.g.a.t.e.

080171a0 <Microsoft.Zelig.Runtime.TypeSystem.ScalarTypeRepresentation_666>:
 80171a0:	0004 0000 92f0 0801 ab08 abab 2109 0010     .............!..
 80171b0:	0000 0000 9430 0801 6e10 0801 0000 0000     ....0....n......
 80171c0:	0000 0000 70c0 0801 9450 0801 46c0 46c0     .....p..P....F.F

080171d0 <System.String_667>:
 80171d0:	0004 0000 1a10 0801 0011 0000 0011 0000     ................
 80171e0:	004d 0075 006c 0074 0069 0063 0061 0073     M.u.l.t.i.c.a.s.
 80171f0:	0074 0044 0065 006c 0065 0067 0061 0074     t.D.e.l.e.g.a.t.
 8017200:	0065 46c0 46c0 46c0 46c0 46c0 46c0 46c0     e..F.F.F.F.F.F.F

08017210 <System.String_668>:
 8017210:	0004 0000 1a10 0801 001b 0000 001b 0000     ................
 8017220:	0041 0072 0067 0075 006d 0065 006e 0074     A.r.g.u.m.e.n.t.
 8017230:	004f 0075 0074 004f 0066 0052 0061 006e     O.u.t.O.f.R.a.n.
 8017240:	0067 0065 0045 0078 0063 0065 0070 0074     g.e.E.x.c.e.p.t.
 8017250:	0069 006f 006e 46c0 46c0 46c0 46c0 46c0     i.o.n..F.F.F.F.F

08017260 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_669>:
 8017260:	0004 0000 6da0 0801 ab12 abab 2000 0010     .....m....... ..
 8017270:	0000 0000 9480 0801 6e10 0801 0000 0000     .........n......
 8017280:	0000 0000 94b0 0801 2280 0801               ........."..

0801728c <System.RuntimeType_670>:
 801728c:	0004 0000 2280 0801 2280 0801 46c0 46c0     ....."..."...F.F
 801729c:	46c0 46c0                                   .F.F

080172a0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_671>:
 80172a0:	0004 0000 1bf0 0801 0009 0000 1b03 0800     ................
 80172b0:	de11 0800 dee3 0800 1e49 0800 e8d9 0800     ........I.......
 80172c0:	e90d 0800 1da5 0800 1dbb 0800 1db1 0800     ................

080172d0 <System.String_672>:
 80172d0:	0004 0000 1a10 0801 000d 0000 000d 0000     ................
 80172e0:	0053 0074 0072 0069 006e 0067 0042 0075     S.t.r.i.n.g.B.u.
 80172f0:	0069 006c 0064 0065 0072 46c0 46c0 46c0     i.l.d.e.r..F.F.F

08017300 <System.String_673>:
 8017300:	0004 0000 1a10 0801 000b 0000 000b 0000     ................
 8017310:	0053 0079 0073 0074 0065 006d 002e 0054     S.y.s.t.e.m...T.
 8017320:	0065 0078 0074 46c0 46c0 46c0 46c0 46c0     e.x.t..F.F.F.F.F

08017330 <Microsoft.Zelig.Runtime.TypeSystem.ScalarTypeRepresentation_674>:
 8017330:	0004 0000 92f0 0801 ab09 abab 2109 0010     .............!..
 8017340:	0000 0000 94e0 0801 6e10 0801 0000 0000     .........n......
 8017350:	0000 0000 70c0 0801 9500 0801 46c0 46c0     .....p.......F.F

08017360 <System.String_675>:
 8017360:	0004 0000 1a10 0801 0014 0000 0014 0000     ................
 8017370:	0054 0068 0072 0065 0061 0064 0053 0074     T.h.r.e.a.d.S.t.
 8017380:	0061 0074 0065 0045 0078 0063 0065 0070     a.t.e.E.x.c.e.p.
 8017390:	0074 0069 006f 006e 46c0 46c0 46c0 46c0     t.i.o.n..F.F.F.F

080173a0 <System.String_676>:
 80173a0:	0004 0000 1a10 0801 0010 0000 0010 0000     ................
 80173b0:	0053 0079 0073 0074 0065 006d 002e 0054     S.y.s.t.e.m...T.
 80173c0:	0068 0072 0065 0061 0064 0069 006e 0067     h.r.e.a.d.i.n.g.

080173d0 <System.String_677>:
 80173d0:	0004 0000 1a10 0801 0006 0000 0006 0000     ................
 80173e0:	0048 006f 006c 0064 0065 0072 46c0 46c0     H.o.l.d.e.r..F.F

080173f0 <System.String_678>:
 80173f0:	0004 0000 1a10 0801 0007 0000 0007 0000     ................
 8017400:	0043 006f 006e 0074 0065 0078 0074 46c0     C.o.n.t.e.x.t..F

08017410 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_679>:
 8017410:	0004 0000 6da0 0801 ab12 abab 0101 0010     .....m..........
 8017420:	0000 0000 9530 0801 9560 0801 0000 0000     ....0...`.......
 8017430:	0000 0000 95b0 0801 6960 0801 46c0 46c0     ........`i...F.F

08017440 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_680>:
 8017440:	0004 0000 7150 0801 ab12 abab 0082 0010     ....Pq..........
 8017450:	0000 0000 73f0 0801 2334 0801 95b0 0801     .....s..4#......
 8017460:	0000 0000 95e0 0801 9610 0801 46c0 46c0     .............F.F

08017470 <System.String_681>:
 8017470:	0004 0000 1a10 0801 000c 0000 000c 0000     ................
 8017480:	004b 0065 0072 006e 0065 006c 004e 006f     K.e.r.n.e.l.N.o.
 8017490:	0064 0065 0060 0031 46c0 46c0 46c0 46c0     d.e.`.1..F.F.F.F

080174a0 <System.String_682>:
 80174a0:	0004 0000 1a10 0801 0017 0000 0017 0000     ................
 80174b0:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 80174c0:	0074 002e 005a 0065 006c 0069 0067 002e     t...Z.e.l.i.g...
 80174d0:	0052 0075 006e 0074 0069 006d 0065 46c0     R.u.n.t.i.m.e..F

080174e0 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation.GenericContext_683>:
 80174e0:	0004 0000 9640 0801 9664 0801 0000 0000     ....@...d.......

080174f0 <System.String_684>:
 80174f0:	0004 0000 1a10 0801 000c 0000 000c 0000     ................
 8017500:	004b 0065 0072 006e 0065 006c 004c 0069     K.e.r.n.e.l.L.i.
 8017510:	0073 0074 0060 0031                         s.t.`.1.

08017518 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation.GenericContext_685>:
 8017518:	0004 0000 9640 0801 9674 0801 0000 0000     ....@...t.......

08017528 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation.GenericContext_686>:
 8017528:	0004 0000 9640 0801 9684 0801 0000 0000     ....@...........
 8017538:	46c0 46c0 46c0 46c0                         .F.F.F.F

08017540 <System.String_687>:
 8017540:	0004 0000 1a10 0801 000b 0000 000b 0000     ................
 8017550:	0054 0068 0072 0065 0061 0064 0053 0074     T.h.r.e.a.d.S.t.
 8017560:	0061 0072 0074 46c0 46c0 46c0 46c0 46c0     a.r.t..F.F.F.F.F

08017570 <System.String_691>:
 8017570:	0004 0000 1a10 0801 0006 0000 0006 0000     ................
 8017580:	0054 0068 0072 0065 0061 0064 46c0 46c0     T.h.r.e.a.d..F.F

08017590 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_692>:
 8017590:	0004 0000 7150 0801 ab12 abab 0081 0010     ....Pq..........
 80175a0:	0000 0000 96a0 0801 96e0 0801 0000 0000     ................
 80175b0:	0000 0000 3770 0801 9740 0801               ....p7..@...

080175bc <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation.GenericContext_693>:
 80175bc:	0004 0000 9640 0801 9764 0801 0000 0000     ....@...d.......
 80175cc:	46c0 46c0                                   .F.F

080175d0 <System.String_694>:
 80175d0:	0004 0000 1a10 0801 000f 0000 000f 0000     ................
 80175e0:	0045 0076 0065 006e 0074 0057 0061 0069     E.v.e.n.t.W.a.i.
 80175f0:	0074 0048 0061 006e 0064 006c 0065 46c0     t.H.a.n.d.l.e..F

08017600 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_695>:
 8017600:	0004 0000 7150 0801 ab12 abab 0081 0010     ....Pq..........
 8017610:	0000 0000 9780 0801 73a0 0801 0000 0000     .........s......
 8017620:	0000 0000 7a20 0801 97b0 0801 46c0 46c0     .... z.......F.F

08017630 <System.String_696>:
 8017630:	0004 0000 1a10 0801 0011 0000 0011 0000     ................
 8017640:	0041 0072 0067 0075 006d 0065 006e 0074     A.r.g.u.m.e.n.t.
 8017650:	0045 0078 0063 0065 0070 0074 0069 006f     E.x.c.e.p.t.i.o.
 8017660:	006e 46c0 46c0 46c0 46c0 46c0 46c0 46c0     n..F.F.F.F.F.F.F

08017670 <System.String_697>:
 8017670:	0004 0000 1a10 0801 0020 0000 0020 0000     ........ ... ...
 8017680:	0041 0072 0072 0061 0079 0052 0065 0066     A.r.r.a.y.R.e.f.
 8017690:	0065 0072 0065 006e 0063 0065 0054 0079     e.r.e.n.c.e.T.y.
 80176a0:	0070 0065 0052 0065 0070 0072 0065 0073     p.e.R.e.p.r.e.s.
 80176b0:	0065 006e 0074 0061 0074 0069 006f 006e     e.n.t.a.t.i.o.n.

080176c0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_698>:
 80176c0:	0004 0000 7150 0801 ab12 abab 0081 0010     ....Pq..........
 80176d0:	0000 0000 97e0 0801 7000 0801 0000 0000     .........p......
 80176e0:	0000 0000 56a0 0801 9830 0801 46c0 46c0     .....V..0....F.F

080176f0 <System.String_699>:
 80176f0:	0004 0000 1a10 0801 0014 0000 0014 0000     ................
 8017700:	003c 003e 0063 005f 005f 0044 0069 0073     <.>.c._._.D.i.s.
 8017710:	0070 006c 0061 0079 0043 006c 0061 0073     p.l.a.y.C.l.a.s.
 8017720:	0073 0037 005f 0030 46c0 46c0 46c0 46c0     s.7._.0..F.F.F.F

08017730 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_700>:
 8017730:	0004 0000 6da0 0801 ab12 abab 0000 0010     .....m..........
 8017740:	0000 0000 9860 0801 7800 0801 0000 0000     ....`....x......
 8017750:	0000 0000 3770 0801 9880 0801 46c0 46c0     ....p7.......F.F

08017760 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_701>:
 8017760:	0004 0000 7150 0801 ab1d abab 2081 0010     ....Pq....... ..
 8017770:	0000 0000 98b0 0801 6e10 0801 0000 0000     .........n......
 8017780:	0000 0000 3770 0801 98d0 0801 46c0 46c0     ....p7.......F.F

08017790 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_702>:
 8017790:	0004 0000 7150 0801 ab12 abab 0080 0010     ....Pq..........
 80177a0:	0000 0000 9900 0801 7800 0801 0000 0000     .........x......
 80177b0:	0000 0000 3770 0801 9930 0801 46c0 46c0     ....p7..0....F.F

080177c0 <System.String_703>:
 80177c0:	0004 0000 1a10 0801 0016 0000 0016 0000     ................
 80177d0:	004c 0065 0064 0054 006f 0067 0067 006c     L.e.d.T.o.g.g.l.
 80177e0:	0065 0072 0053 0069 006d 0075 006c 0074     e.r.S.i.m.u.l.t.
 80177f0:	0061 006e 0065 006f 0075 0073 46c0 46c0     a.n.e.o.u.s..F.F

08017800 <System.String_704>:
 8017800:	0004 0000 1a10 0801 0020 0000 0020 0000     ........ ... ...
 8017810:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 8017820:	0074 002e 005a 0065 006c 0069 0067 002e     t...Z.e.l.i.g...
 8017830:	0054 0065 0073 0074 002e 006d 0062 0065     T.e.s.t...m.b.e.
 8017840:	0064 002e 0053 0069 006d 0070 006c 0065     d...S.i.m.p.l.e.

08017850 <System.String_705>:
 8017850:	0004 0000 1a10 0801 0014 0000 0014 0000     ................
 8017860:	004c 0065 0064 0054 006f 0067 0067 006c     L.e.d.T.o.g.g.l.
 8017870:	0065 0072 0053 0065 0071 0075 0065 006e     e.r.S.e.q.u.e.n.
 8017880:	0074 0069 0061 006c 46c0 46c0 46c0 46c0     t.i.a.l..F.F.F.F

08017890 <System.String_706>:
 8017890:	0004 0000 1a10 0801 0013 0000 0013 0000     ................
 80178a0:	004c 0065 0064 0054 006f 0067 0067 006c     L.e.d.T.o.g.g.l.
 80178b0:	0065 0072 0041 006c 0074 0065 0072 006e     e.r.A.l.t.e.r.n.
 80178c0:	0061 0074 0065 46c0 46c0 46c0 46c0 46c0     a.t.e..F.F.F.F.F

080178d0 <System.String_707>:
 80178d0:	0004 0000 1a10 0801 0005 0000 0005 0000     ................
 80178e0:	0054 0069 006d 0065 0072 46c0 46c0 46c0     T.i.m.e.r..F.F.F

080178f0 <System.String_708>:
 80178f0:	0004 0000 1a10 0801 001c 0000 001c 0000     ................
 8017900:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 8017910:	0074 002e 005a 0065 006c 0069 0067 002e     t...Z.e.l.i.g...
 8017920:	0053 0075 0070 0070 006f 0072 0074 002e     S.u.p.p.o.r.t...
 8017930:	006d 0062 0065 0064 46c0 46c0 46c0 46c0     m.b.e.d..F.F.F.F

08017940 <System.String_709>:
 8017940:	0004 0000 1a10 0801 0015 0000 0015 0000     ................
 8017950:	0053 0070 0069 0043 006f 006e 006e 0065     S.p.i.C.o.n.n.e.
 8017960:	0063 0074 0069 006f 006e 0053 0065 0074     c.t.i.o.n.S.e.t.
 8017970:	0074 0069 006e 0067 0073 46c0 46c0 46c0     t.i.n.g.s..F.F.F

08017980 <System.String_710>:
 8017980:	0004 0000 1a10 0801 0013 0000 0013 0000     ................
 8017990:	0057 0069 006e 0064 006f 0077 0073 002e     W.i.n.d.o.w.s...
 80179a0:	0044 0065 0076 0069 0063 0065 0073 002e     D.e.v.i.c.e.s...
 80179b0:	0053 0070 0069 46c0 46c0 46c0 46c0 46c0     S.p.i..F.F.F.F.F

080179c0 <System.String_711>:
 80179c0:	0004 0000 1a10 0801 000e 0000 000e 0000     ................
 80179d0:	0041 0075 0074 006f 0052 0065 0073 0065     A.u.t.o.R.e.s.e.
 80179e0:	0074 0045 0076 0065 006e 0074 46c0 46c0     t.E.v.e.n.t..F.F

080179f0 <System.String_712>:
 80179f0:	0004 0000 1a10 0801 000d 0000 000d 0000     ................
 8017a00:	0054 0069 006d 0065 0072 0043 0061 006c     T.i.m.e.r.C.a.l.
 8017a10:	006c 0062 0061 0063 006b 46c0 46c0 46c0     l.b.a.c.k..F.F.F

08017a20 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_713>:
 8017a20:	0004 0000 7150 0801 ab12 abab 2081 0010     ....Pq....... ..
 8017a30:	0000 0000 9960 0801 6e10 0801 0000 0000     ....`....n......
 8017a40:	0000 0000 3770 0801 99a0 0801 46c0 46c0     ....p7.......F.F

08017a50 <System.String_714>:
 8017a50:	0004 0000 1a10 0801 0006 0000 0006 0000     ................
 8017a60:	004f 0062 006a 0065 0063 0074 46c0 46c0     O.b.j.e.c.t..F.F

08017a70 <System.String_715>:
 8017a70:	0004 0000 1a10 0801 0008 0000 0008 0000     ................
 8017a80:	0042 0069 0074 0041 0072 0072 0061 0079     B.i.t.A.r.r.a.y.

08017a90 <System.String_716>:
 8017a90:	0004 0000 1a10 0801 0012 0000 0012 0000     ................
 8017aa0:	0053 0079 0073 0074 0065 006d 002e 0043     S.y.s.t.e.m...C.
 8017ab0:	006f 006c 006c 0065 0063 0074 0069 006f     o.l.l.e.c.t.i.o.
 8017ac0:	006e 0073                                   n.s.

08017ac4 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation.GenericContext_717>:
 8017ac4:	0004 0000 9640 0801 99c4 0801 0000 0000     ....@...........
 8017ad4:	46c0 46c0 46c0 46c0 46c0 46c0               .F.F.F.F.F.F

08017ae0 <System.String_718>:
 8017ae0:	0004 0000 1a10 0801 0010 0000 0010 0000     ................
 8017af0:	004d 0061 006e 0075 0061 006c 0052 0065     M.a.n.u.a.l.R.e.
 8017b00:	0073 0065 0074 0045 0076 0065 006e 0074     s.e.t.E.v.e.n.t.

08017b10 <System.String_719>:
 8017b10:	0004 0000 1a10 0801 0009 0000 0009 0000     ................
 8017b20:	0053 0079 006e 0063 0042 006c 006f 0063     S.y.n.c.B.l.o.c.
 8017b30:	006b 46c0 46c0 46c0 46c0 46c0 46c0 46c0     k..F.F.F.F.F.F.F

08017b40 <System.String_720>:
 8017b40:	0004 0000 1a10 0801 0014 0000 0014 0000     ................
 8017b50:	0049 006e 0076 0061 006c 0069 0064 0043     I.n.v.a.l.i.d.C.
 8017b60:	0061 0073 0074 0045 0078 0063 0065 0070     a.s.t.E.x.c.e.p.
 8017b70:	0074 0069 006f 006e 46c0 46c0 46c0 46c0     t.i.o.n..F.F.F.F

08017b80 <System.String_721>:
 8017b80:	0004 0000 1a10 0801 0009 0000 0009 0000     ................
 8017b90:	0045 0078 0063 0065 0070 0074 0069 006f     E.x.c.e.p.t.i.o.
 8017ba0:	006e 46c0                                   n..F

08017ba4 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation.GenericContext_722>:
 8017ba4:	0004 0000 9640 0801 99d4 0801 0000 0000     ....@...........
 8017bb4:	46c0 46c0 46c0 46c0 46c0 46c0               .F.F.F.F.F.F

08017bc0 <System.String_723>:
 8017bc0:	0004 0000 1a10 0801 000d 0000 000d 0000     ................
 8017bd0:	0057 0061 0069 0074 0069 006e 0067 0052     W.a.i.t.i.n.g.R.
 8017be0:	0065 0063 006f 0072 0064 46c0 46c0 46c0     e.c.o.r.d..F.F.F

08017bf0 <System.String_724>:
 8017bf0:	0004 0000 1a10 0801 0027 0000 0027 0000     ........'...'...
 8017c00:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 8017c10:	0074 002e 005a 0065 006c 0069 0067 002e     t...Z.e.l.i.g...
 8017c20:	0052 0075 006e 0074 0069 006d 0065 002e     R.u.n.t.i.m.e...
 8017c30:	0053 0079 006e 0063 0068 0072 006f 006e     S.y.n.c.h.r.o.n.
 8017c40:	0069 007a 0061 0074 0069 006f 006e 46c0     i.z.a.t.i.o.n..F

08017c50 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation.GenericContext_725>:
 8017c50:	0004 0000 9640 0801 99e4 0801 0000 0000     ....@...........

08017c60 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation.GenericContext_727>:
 8017c60:	0004 0000 9640 0801 99f4 0801 0000 0000     ....@...........

08017c70 <System.String_728>:
 8017c70:	0004 0000 1a10 0801 0007 0000 0007 0000     ................
 8017c80:	0051 0075 0065 0075 0065 0060 0031 46c0     Q.u.e.u.e.`.1..F

08017c90 <System.String_729>:
 8017c90:	0004 0000 1a10 0801 001a 0000 001a 0000     ................
 8017ca0:	0053 0079 0073 0074 0065 006d 002e 0043     S.y.s.t.e.m...C.
 8017cb0:	006f 006c 006c 0065 0063 0074 0069 006f     o.l.l.e.c.t.i.o.
 8017cc0:	006e 0073 002e 0047 0065 006e 0065 0072     n.s...G.e.n.e.r.
 8017cd0:	0069 0063                                   i.c.

08017cd4 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation.GenericContext_730>:
 8017cd4:	0004 0000 9640 0801 9a04 0801 0000 0000     ....@...........
 8017ce4:	46c0 46c0 46c0 46c0 46c0 46c0               .F.F.F.F.F.F

08017cf0 <System.String_731>:
 8017cf0:	0004 0000 1a10 0801 000f 0000 000f 0000     ................
 8017d00:	0043 0061 006c 006c 0062 0061 0063 006b     C.a.l.l.b.a.c.k.
 8017d10:	0048 0061 006e 0064 006c 0065 0072 46c0     H.a.n.d.l.e.r..F

08017d20 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation.GenericContext_732>:
 8017d20:	0004 0000 9640 0801 9a14 0801 0000 0000     ....@...........

08017d30 <System.String_733>:
 8017d30:	0004 0000 1a10 0801 0007 0000 0007 0000     ................
 8017d40:	0054 0072 0061 0063 006b 0065 0072 46c0     T.r.a.c.k.e.r..F

08017d50 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_734>:
 8017d50:	0004 0000 6da0 0801 ab12 abab 0001 0010     .....m..........
 8017d60:	0000 0000 9a30 0801 74a0 0801 0000 0000     ....0....t......
 8017d70:	0000 0000 3770 0801 9a60 0801 46c0 46c0     ....p7..`....F.F

08017d80 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_736>:
 8017d80:	0004 0000 7150 0801 ab12 abab 0081 0010     ....Pq..........
 8017d90:	0000 0000 9a90 0801 9ac0 0801 0000 0000     ................
 8017da0:	0000 0000 9b30 0801 9b60 0801 46c0 46c0     ....0...`....F.F

08017db0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_737>:
 8017db0:	0004 0000 7150 0801 ab12 abab 0082 0010     ....Pq..........
 8017dc0:	0001 0000 73f0 0801 2334 0801 9b30 0801     .....s..4#..0...
 8017dd0:	0000 0000 3770 0801 9b90 0801 46c0 46c0     ....p7.......F.F

08017de0 <System.String_739>:
 8017de0:	0004 0000 1a10 0801 0009 0000 0009 0000     ................
 8017df0:	0054 0069 006d 0065 0072 0050 006f 006f     T.i.m.e.r.P.o.o.
 8017e00:	006c 46c0 46c0 46c0 46c0 46c0 46c0 46c0     l..F.F.F.F.F.F.F

08017e10 <System.String_740>:
 8017e10:	0004 0000 1a10 0801 0009 0000 0009 0000     ................
 8017e20:	0059 0069 0065 006c 0064 004c 006f 0063     Y.i.e.l.d.L.o.c.
 8017e30:	006b 46c0 46c0 46c0 46c0 46c0 46c0 46c0     k..F.F.F.F.F.F.F

08017e40 <System.String_741>:
 8017e40:	0004 0000 1a10 0801 000f 0000 000f 0000     ................
 8017e50:	0043 0072 0069 0074 0069 0063 0061 006c     C.r.i.t.i.c.a.l.
 8017e60:	0053 0065 0063 0074 0069 006f 006e 46c0     S.e.c.t.i.o.n..F

08017e70 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_742>:
 8017e70:	0004 0000 7150 0801 ab12 abab 0081 0010     ....Pq..........
 8017e80:	0000 0000 9bc0 0801 7bf0 0801 0000 0000     .........{......
 8017e90:	0000 0000 3770 0801 9bf0 0801 46c0 46c0     ....p7.......F.F

08017ea0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_743>:
 8017ea0:	0004 0000 1b80 0801 0028 0000 0000 0000     ........(.......
 8017eb0:	9c20 0801 9c4c 0801 ab44 abab 9c60 0801      ...L...D...`...
 8017ec0:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08017ed0 <System.String_744>:
 8017ed0:	0004 0000 1a10 0801 0014 0000 0014 0000     ................
 8017ee0:	0045 0078 0063 0065 0070 0074 0069 006f     E.x.c.e.p.t.i.o.
 8017ef0:	006e 004d 0065 0073 0073 0061 0067 0065     n.M.e.s.s.a.g.e.
 8017f00:	004b 0069 006e 0064 46c0 46c0 46c0 46c0     K.i.n.d..F.F.F.F

08017f10 <Microsoft.Zelig.Runtime.TypeSystem.ValueTypeRepresentation_745>:
 8017f10:	0004 0000 8330 0801 ab11 abab 2081 0010     ....0........ ..
 8017f20:	0000 0000 9c90 0801 6e10 0801 0000 0000     .........n......
 8017f30:	0000 0000 70c0 0801 9cb0 0801 46c0 46c0     .....p.......F.F

08017f40 <Microsoft.Zelig.Runtime.TypeSystem.InterfaceTypeRepresentation_746>:
 8017f40:	0004 0000 80f0 0801 ab12 abab 00a1 0000     ................
 8017f50:	0000 0000 9ce0 0801 6e10 0801 0000 0000     .........n......
	...
 8017f68:	44f0 0801                                   .D..

08017f6c <System.RuntimeType_747>:
 8017f6c:	0004 0000 2280 0801 44f0 0801               ....."...D..

08017f78 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_748>:
 8017f78:	0004 0000 1bf0 0801 0001 0000 0000 0000     ................

08017f88 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_749>:
 8017f88:	0004 0000 1bf0 0801 0001 0000 0000 0000     ................
 8017f98:	46c0 46c0 46c0 46c0                         .F.F.F.F

08017fa0 <Microsoft.Zelig.Runtime.TypeSystem.VTable.InterfaceMap[]_750>:
 8017fa0:	0004 0000 1c40 0801 0001 0000 44f0 0801     ....@........D..
 8017fb0:	7f88 0801 46c0 46c0 46c0 46c0 46c0 46c0     .....F.F.F.F.F.F

08017fc0 <System.String_751>:
 8017fc0:	0004 0000 1a10 0801 0006 0000 0006 0000     ................
 8017fd0:	004e 0075 006d 0062 0065 0072 46c0 46c0     N.u.m.b.e.r..F.F

08017fe0 <System.String_752>:
 8017fe0:	0004 0000 1a10 0801 000f 0000 000f 0000     ................
 8017ff0:	0046 006f 0072 006d 0061 0074 0045 0078     F.o.r.m.a.t.E.x.
 8018000:	0063 0065 0070 0074 0069 006f 006e 46c0     c.e.p.t.i.o.n..F

08018010 <System.String_753>:
 8018010:	0004 0000 1a10 0801 0019 0000 0019 0000     ................
 8018020:	0049 006e 0076 0061 006c 0069 0064 004f     I.n.v.a.l.i.d.O.
 8018030:	0070 0065 0072 0061 0074 0069 006f 006e     p.e.r.a.t.i.o.n.
 8018040:	0045 0078 0063 0065 0070 0074 0069 006f     E.x.c.e.p.t.i.o.
 8018050:	006e 46c0 46c0 46c0 46c0 46c0 46c0 46c0     n..F.F.F.F.F.F.F

08018060 <System.String_754>:
 8018060:	0004 0000 1a10 0801 0013 0000 0013 0000     ................
 8018070:	0045 0076 0065 006e 0074 0057 0061 0069     E.v.e.n.t.W.a.i.
 8018080:	0074 0061 0062 006c 0065 004f 0062 006a     t.a.b.l.e.O.b.j.
 8018090:	0065 0063 0074 46c0                         e.c.t..F

08018098 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation.GenericContext_755>:
 8018098:	0004 0000 9640 0801 9d08 0801 0000 0000     ....@...........
 80180a8:	46c0 46c0 46c0 46c0                         .F.F.F.F

080180b0 <System.String_756>:
 80180b0:	0004 0000 1a10 0801 0014 0000 0014 0000     ................
 80180c0:	004f 0075 0074 004f 0066 004d 0065 006d     O.u.t.O.f.M.e.m.
 80180d0:	006f 0072 0079 0045 0078 0063 0065 0070     o.r.y.E.x.c.e.p.
 80180e0:	0074 0069 006f 006e 46c0 46c0 46c0 46c0     t.i.o.n..F.F.F.F

080180f0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_757>:
 80180f0:	0004 0000 1b80 0801 0024 0000 0000 0000     ........$.......
 8018100:	9d20 0801 9d4c 0801 ab44 abab 9d60 0801      ...L...D...`...
 8018110:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08018120 <System.String_759>:
 8018120:	0004 0000 1a10 0801 000f 0000 000f 0000     ................
 8018130:	0049 0046 006f 0072 006d 0061 0074 0050     I.F.o.r.m.a.t.P.
 8018140:	0072 006f 0076 0069 0064 0065 0072 46c0     r.o.v.i.d.e.r..F

08018150 <System.String_760>:
 8018150:	0004 0000 1a10 0801 000a 0000 000a 0000     ................
 8018160:	004d 0065 006d 0062 0065 0072 0049 006e     M.e.m.b.e.r.I.n.
 8018170:	0066 006f 46c0 46c0 46c0 46c0 46c0 46c0     f.o..F.F.F.F.F.F

08018180 <System.String_761>:
 8018180:	0004 0000 1a10 0801 0011 0000 0011 0000     ................
 8018190:	0053 0079 0073 0074 0065 006d 002e 0052     S.y.s.t.e.m...R.
 80181a0:	0065 0066 006c 0065 0063 0074 0069 006f     e.f.l.e.c.t.i.o.
 80181b0:	006e 46c0 46c0 46c0 46c0 46c0 46c0 46c0     n..F.F.F.F.F.F.F

080181c0 <System.String_762>:
 80181c0:	0004 0000 1a10 0801 000b 0000 000b 0000     ................
 80181d0:	0043 0075 006c 0074 0075 0072 0065 0049     C.u.l.t.u.r.e.I.
 80181e0:	006e 0066 006f 46c0 46c0 46c0 46c0 46c0     n.f.o..F.F.F.F.F

080181f0 <System.String_763>:
 80181f0:	0004 0000 1a10 0801 0014 0000 0014 0000     ................
 8018200:	0053 0079 0073 0074 0065 006d 002e 0047     S.y.s.t.e.m...G.
 8018210:	006c 006f 0062 0061 006c 0069 007a 0061     l.o.b.a.l.i.z.a.
 8018220:	0074 0069 006f 006e 46c0 46c0 46c0 46c0     t.i.o.n..F.F.F.F

08018230 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_764>:
 8018230:	0004 0000 6da0 0801 ab12 abab 0101 0010     .....m..........
 8018240:	0000 0000 9d90 0801 81f0 0801 0000 0000     ................
 8018250:	0000 0000 3770 0801 4dd0 0801 46c0 46c0     ....p7...M...F.F

08018260 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_765>:
 8018260:	0004 0000 1bf0 0801 0004 0000 109d 0800     ................
 8018270:	0765 0800 0781 0800 eb95 0800               e...........

0801827c <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_766>:
 801827c:	0004 0000 1bf0 0801 0001 0000 eb95 0800     ................
 801828c:	46c0 46c0                                   .F.F

08018290 <Microsoft.Zelig.Runtime.TypeSystem.VTable.InterfaceMap[]_767>:
 8018290:	0004 0000 1c40 0801 0001 0000 4c10 0801     ....@........L..
 80182a0:	827c 0801 46c0 46c0 46c0 46c0 46c0 46c0     |....F.F.F.F.F.F

080182b0 <System.String_769>:
 80182b0:	0004 0000 1a10 0801 001b 0000 001b 0000     ................
 80182c0:	0041 0073 0073 0065 0072 0074 0069 006f     A.s.s.e.r.t.i.o.
 80182d0:	006e 0056 0069 006f 006c 0061 0074 0069     n.V.i.o.l.a.t.i.
 80182e0:	006f 006e 0045 0078 0063 0065 0070 0074     o.n.E.x.c.e.p.t.
 80182f0:	0069 006f 006e 46c0 46c0 46c0 46c0 46c0     i.o.n..F.F.F.F.F

08018300 <System.String_770>:
 8018300:	0004 0000 1a10 0801 000f 0000 000f 0000     ................
 8018310:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 8018320:	0074 002e 005a 0065 006c 0069 0067 46c0     t...Z.e.l.i.g..F

08018330 <Microsoft.Zelig.Runtime.TypeSystem.VTable_771>:
 8018330:	0004 0000 1b80 0801 0024 0000 0000 0000     ........$.......
 8018340:	9dc0 0801 9dec 0801 ab44 abab 9e00 0801     ........D.......
 8018350:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08018360 <System.String_772>:
 8018360:	0004 0000 1a10 0801 0009 0000 0009 0000     ................
 8018370:	0044 0069 006d 0065 006e 0073 0069 006f     D.i.m.e.n.s.i.o.
 8018380:	006e 46c0 46c0 46c0 46c0 46c0 46c0 46c0     n..F.F.F.F.F.F.F

08018390 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_775>:
 8018390:	0004 0000 7150 0801 ab12 abab 0081 0010     ....Pq..........
 80183a0:	0000 0000 9e30 0801 7000 0801 0000 0000     ....0....p......
 80183b0:	0000 0000 3770 0801 9e70 0801 46c0 46c0     ....p7..p....F.F

080183c0 <System.String_777>:
 80183c0:	0004 0000 1a10 0801 001c 0000 001c 0000     ................
 80183d0:	0042 006f 0078 0065 0064 0056 0061 006c     B.o.x.e.d.V.a.l.
 80183e0:	0075 0065 0054 0079 0070 0065 0052 0065     u.e.T.y.p.e.R.e.
 80183f0:	0070 0072 0065 0073 0065 006e 0074 0061     p.r.e.s.e.n.t.a.
 8018400:	0074 0069 006f 006e 46c0 46c0 46c0 46c0     t.i.o.n..F.F.F.F

08018410 <System.String_780>:
 8018410:	0004 0000 1a10 0801 0012 0000 0012 0000     ................
 8018420:	0054 0079 0070 0065 0052 0065 0070 0072     T.y.p.e.R.e.p.r.
 8018430:	0065 0073 0065 006e 0074 0061 0074 0069     e.s.e.n.t.a.t.i.
 8018440:	006f 006e 46c0 46c0 46c0 46c0 46c0 46c0     o.n..F.F.F.F.F.F

08018450 <System.String_781>:
 8018450:	0004 0000 1a10 0801 0009 0000 0009 0000     ................
 8018460:	0053 0070 0069 0044 0065 0076 0069 0063     S.p.i.D.e.v.i.c.
 8018470:	0065 46c0 46c0 46c0 46c0 46c0 46c0 46c0     e..F.F.F.F.F.F.F

08018480 <System.String_782>:
 8018480:	0004 0000 1a10 0801 0007 0000 0007 0000     ................
 8018490:	0047 0070 0069 006f 0050 0069 006e 46c0     G.p.i.o.P.i.n..F

080184a0 <System.String_783>:
 80184a0:	0004 0000 1a10 0801 0014 0000 0014 0000     ................
 80184b0:	0057 0069 006e 0064 006f 0077 0073 002e     W.i.n.d.o.w.s...
 80184c0:	0044 0065 0076 0069 0063 0065 0073 002e     D.e.v.i.c.e.s...
 80184d0:	0047 0070 0069 006f 46c0 46c0 46c0 46c0     G.p.i.o..F.F.F.F

080184e0 <System.String_784>:
 80184e0:	0004 0000 1a10 0801 000e 0000 000e 0000     ................
 80184f0:	0047 0070 0069 006f 0043 006f 006e 0074     G.p.i.o.C.o.n.t.
 8018500:	0072 006f 006c 006c 0065 0072 46c0 46c0     r.o.l.l.e.r..F.F

08018510 <System.String_785>:
 8018510:	0004 0000 1a10 0801 0017 0000 0017 0000     ................
 8018520:	004f 0062 006a 0065 0063 0074 0044 0069     O.b.j.e.c.t.D.i.
 8018530:	0073 0070 006f 0073 0065 0064 0045 0078     s.p.o.s.e.d.E.x.
 8018540:	0063 0065 0070 0074 0069 006f 006e 46c0     c.e.p.t.i.o.n..F

08018550 <System.String_786>:
 8018550:	0004 0000 1a10 0801 001b 0000 001b 0000     ................
 8018560:	0044 0065 0076 0069 0063 0065 0049 006e     D.e.v.i.c.e.I.n.
 8018570:	0066 006f 0072 006d 0061 0074 0069 006f     f.o.r.m.a.t.i.o.
 8018580:	006e 0043 006f 006c 006c 0065 0063 0074     n.C.o.l.l.e.c.t.
 8018590:	0069 006f 006e 46c0 46c0 46c0 46c0 46c0     i.o.n..F.F.F.F.F

080185a0 <System.String_787>:
 80185a0:	0004 0000 1a10 0801 001b 0000 001b 0000     ................
 80185b0:	0057 0069 006e 0064 006f 0077 0073 002e     W.i.n.d.o.w.s...
 80185c0:	0044 0065 0076 0069 0063 0065 0073 002e     D.e.v.i.c.e.s...
 80185d0:	0045 006e 0075 006d 0065 0072 0061 0074     E.n.u.m.e.r.a.t.
 80185e0:	0069 006f 006e 46c0 46c0 46c0 46c0 46c0     i.o.n..F.F.F.F.F

080185f0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_788>:
 80185f0:	0004 0000 6da0 0801 ab12 abab 2001 0010     .....m....... ..
 8018600:	0000 0000 9ea0 0801 7c90 0801 0000 0000     .........|......
 8018610:	9ebc 0801 3770 0801 9ed0 0801 46c0 46c0     ....p7.......F.F

08018620 <System.String_789>:
 8018620:	0004 0000 1a10 0801 0011 0000 0011 0000     ................
 8018630:	0044 0065 0076 0069 0063 0065 0049 006e     D.e.v.i.c.e.I.n.
 8018640:	0066 006f 0072 006d 0061 0074 0069 006f     f.o.r.m.a.t.i.o.
 8018650:	006e 46c0 46c0 46c0 46c0 46c0 46c0 46c0     n..F.F.F.F.F.F.F

08018660 <System.String_790>:
 8018660:	0004 0000 1a10 0801 0003 0000 0003 0000     ................
 8018670:	003c 003e 0063 46c0 46c0 46c0 46c0 46c0     <.>.c..F.F.F.F.F

08018680 <System.String_791>:
 8018680:	0004 0000 1a10 0801 0008 0000 0008 0000     ................
 8018690:	0043 0061 006c 006c 0062 0061 0063 006b     C.a.l.l.b.a.c.k.

080186a0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_792>:
 80186a0:	0004 0000 7150 0801 ab12 abab 0081 0010     ....Pq..........
 80186b0:	0000 0000 9f00 0801 9f30 0801 0000 0000     ........0.......
 80186c0:	0000 0000 3770 0801 9f80 0801               ....p7......

080186cc <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation.GenericContext_793>:
 80186cc:	0004 0000 9640 0801 9fa4 0801 0000 0000     ....@...........
 80186dc:	46c0 46c0                                   .F.F

080186e0 <System.String_794>:
 80186e0:	0004 0000 1a10 0801 000b 0000 000b 0000     ................
 80186f0:	0047 0070 0069 006f 0050 0069 006e 004d     G.p.i.o.P.i.n.M.
 8018700:	0062 0065 0064 46c0 46c0 46c0 46c0 46c0     b.e.d..F.F.F.F.F

08018710 <System.String_795>:
 8018710:	0004 0000 1a10 0801 0026 0000 0026 0000     ........&...&...
 8018720:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 8018730:	0074 002e 0043 006f 0072 0074 0065 0078     t...C.o.r.t.e.x.
 8018740:	004d 0033 004f 006e 004d 0042 0045 0044     M.3.O.n.M.B.E.D.
 8018750:	002e 0048 0061 0072 0064 0077 0061 0072     ..H.a.r.d.w.a.r.
 8018760:	0065 004d 006f 0064 0065 006c 46c0 46c0     e.M.o.d.e.l..F.F

08018770 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_796>:
 8018770:	0004 0000 7150 0801 ab12 abab 0081 0010     ....Pq..........
 8018780:	0000 0000 9fc0 0801 9ff0 0801 0000 0000     ................
 8018790:	0000 0000 3770 0801 a040 0801 46c0 46c0     ....p7..@....F.F

080187a0 <System.String_797>:
 80187a0:	0004 0000 1a10 0801 000a 0000 000a 0000     ................
 80187b0:	0053 0070 0069 0043 0068 0061 006e 006e     S.p.i.C.h.a.n.n.
 80187c0:	0065 006c 46c0 46c0 46c0 46c0 46c0 46c0     e.l..F.F.F.F.F.F

080187d0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_798>:
 80187d0:	0004 0000 7150 0801 ab12 abab 0081 0010     ....Pq..........
 80187e0:	0000 0000 87a0 0801 a070 0801 0000 0000     ........p.......
 80187f0:	0000 0000 3770 0801 a0c0 0801               ....p7......

080187fc <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation.GenericContext_799>:
 80187fc:	0004 0000 9640 0801 a0e4 0801 0000 0000     ....@...........
 801880c:	46c0 46c0                                   .F.F

08018810 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_800>:
 8018810:	0004 0000 7150 0801 ab12 abab 0081 0010     ....Pq..........
 8018820:	0000 0000 a100 0801 a140 0801 0000 0000     ........@.......
 8018830:	0000 0000 3770 0801 a1b0 0801               ....p7......

0801883c <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation.GenericContext_801>:
 801883c:	0004 0000 9640 0801 a20c 0801 0000 0000     ....@...........
 801884c:	46c0 46c0                                   .F.F

08018850 <System.String_802>:
 8018850:	0004 0000 1a10 0801 000c 0000 000c 0000     ................
 8018860:	0053 0079 0073 0054 0069 0063 006b 0054     S.y.s.T.i.c.k.T.
 8018870:	0069 006d 0065 0072 46c0 46c0 46c0 46c0     i.m.e.r..F.F.F.F

08018880 <System.String_803>:
 8018880:	0004 0000 1a10 0801 000e 0000 000e 0000     ................
 8018890:	0053 0070 0069 0043 0068 0061 006e 006e     S.p.i.C.h.a.n.n.
 80188a0:	0065 006c 0049 006e 0066 006f 46c0 46c0     e.l.I.n.f.o..F.F

080188b0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_804>:
 80188b0:	0004 0000 7150 0801 ab12 abab 0081 0010     ....Pq..........
 80188c0:	0000 0000 a220 0801 a240 0801 0000 0000     .... ...@.......
 80188d0:	0000 0000 3770 0801 a2a0 0801 46c0 46c0     ....p7.......F.F

080188e0 <System.String_805>:
 80188e0:	0004 0000 1a10 0801 000e 0000 000e 0000     ................
 80188f0:	0049 0032 0063 0043 0068 0061 006e 006e     I.2.c.C.h.a.n.n.
 8018900:	0065 006c 0049 006e 0066 006f 46c0 46c0     e.l.I.n.f.o..F.F

08018910 <System.String_806>:
 8018910:	0004 0000 1a10 0801 000e 0000 000e 0000     ................
 8018920:	0053 0065 0072 0069 0061 006c 0050 006f     S.e.r.i.a.l.P.o.
 8018930:	0072 0074 0049 006e 0066 006f               r.t.I.n.f.o.

0801893c <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation.GenericContext_807>:
 801893c:	0004 0000 9640 0801 a2c4 0801 0000 0000     ....@...........
 801894c:	46c0 46c0                                   .F.F

08018950 <System.String_808>:
 8018950:	0004 0000 1a10 0801 000a 0000 000a 0000     ................
 8018960:	0047 006c 006f 0062 0061 006c 0052 006f     G.l.o.b.a.l.R.o.
 8018970:	006f 0074 46c0 46c0 46c0 46c0 46c0 46c0     o.t..F.F.F.F.F.F

08018980 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_809>:
 8018980:	0004 0000 6da0 0801 ab12 abab 0001 0010     .....m..........
 8018990:	0000 0000 a2e0 0801 8710 0801 0000 0000     ................
 80189a0:	0000 0000 a310 0801 66f0 0801               .........f..

080189ac <System.RuntimeType_810>:
 80189ac:	0004 0000 2280 0801 66f0 0801 46c0 46c0     ....."...f...F.F
 80189bc:	46c0 46c0                                   .F.F

080189c0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_811>:
 80189c0:	0004 0000 1bf0 0801 000c 0000 109d 0800     ................
 80189d0:	0765 0800 0781 0800 0019 0801 003d 0801     e...........=...
 80189e0:	0291 0801 0101 0801 104d 0801 00d5 0801     ........M.......
 80189f0:	7011 0800 1009 0801 0531 0801 46c0 46c0     .p......1....F.F

08018a00 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_812>:
 8018a00:	0004 0000 6da0 0801 ab12 abab 0001 0010     .....m..........
 8018a10:	0000 0000 a340 0801 a360 0801 0000 0000     ....@...`.......
 8018a20:	0000 0000 a3a0 0801 6720 0801               ........ g..

08018a2c <System.RuntimeType_813>:
 8018a2c:	0004 0000 2280 0801 6720 0801 46c0 46c0     .....".. g...F.F
 8018a3c:	46c0 46c0                                   .F.F

08018a40 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_814>:
 8018a40:	0004 0000 1bf0 0801 0004 0000 109d 0800     ................
 8018a50:	0765 0800 0781 0800 0919 0801 46c0 46c0     e............F.F

08018a60 <Microsoft.Zelig.Runtime.TypeSystem.SzArrayReferenceTypeRepresentation_815>:
 8018a60:	0004 0000 1e40 0801 ab1d abab 0000 0000     ....@...........
	...
 8018a84:	7760 0801 6750 0801 a3d0 0801               `w..Pg......

08018a90 <System.RuntimeType_816>:
 8018a90:	0004 0000 2280 0801 6750 0801 46c0 46c0     ....."..Pg...F.F

08018aa0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_817>:
 8018aa0:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 8018ab0:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

08018ac0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_818>:
 8018ac0:	0004 0000 6da0 0801 ab12 abab 0001 0010     .....m..........
 8018ad0:	0000 0000 a400 0801 a360 0801 0000 0000     ........`.......
 8018ae0:	0000 0000 a430 0801 6780 0801               ....0....g..

08018aec <System.RuntimeType_819>:
 8018aec:	0004 0000 2280 0801 6780 0801 46c0 46c0     ....."...g...F.F
 8018afc:	46c0 46c0                                   .F.F

08018b00 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_820>:
 8018b00:	0004 0000 1bf0 0801 0008 0000 109d 0800     ................
 8018b10:	0765 0800 0781 0800 6cd5 0800 6d55 0800     e........l..Um..
 8018b20:	837f 0800 83af 0800 83e1 0800 46c0 46c0     .............F.F

08018b30 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_821>:
 8018b30:	0004 0000 6da0 0801 ab12 abab 0001 0010     .....m..........
 8018b40:	0000 0000 a460 0801 a360 0801 0000 0000     ....`...`.......
 8018b50:	0000 0000 a490 0801 67b0 0801               .........g..

08018b5c <System.RuntimeType_822>:
 8018b5c:	0004 0000 2280 0801 67b0 0801 46c0 46c0     ....."...g...F.F
 8018b6c:	46c0 46c0                                   .F.F

08018b70 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_823>:
 8018b70:	0004 0000 1bf0 0801 000a 0000 109d 0800     ................
 8018b80:	0765 0800 0781 0800 1071 0801 6d95 0800     e.......q....m..
 8018b90:	1169 0801 1181 0801 036d 0800 044d 0800     i.......m...M...
 8018ba0:	099d 0801 46c0 46c0 46c0 46c0 46c0 46c0     .....F.F.F.F.F.F

08018bb0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_824>:
 8018bb0:	0004 0000 6da0 0801 ab12 abab 0001 0010     .....m..........
 8018bc0:	0000 0000 a4c0 0801 a360 0801 0000 0000     ........`.......
 8018bd0:	0000 0000 a4e0 0801 67e0 0801               .........g..

08018bdc <System.RuntimeType_825>:
 8018bdc:	0004 0000 2280 0801 67e0 0801 46c0 46c0     ....."...g...F.F
 8018bec:	46c0 46c0                                   .F.F

08018bf0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_826>:
 8018bf0:	0004 0000 1bf0 0801 0004 0000 109d 0800     ................
 8018c00:	0765 0800 0781 0800 119b 0801 46c0 46c0     e............F.F

08018c10 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_827>:
 8018c10:	0004 0000 6da0 0801 ab12 abab 0001 0010     .....m..........
 8018c20:	0000 0000 a510 0801 a360 0801 0000 0000     ........`.......
 8018c30:	0000 0000 a550 0801 6810 0801               ....P....h..

08018c3c <System.RuntimeType_828>:
 8018c3c:	0004 0000 2280 0801 6810 0801 46c0 46c0     ....."...h...F.F
 8018c4c:	46c0 46c0                                   .F.F

08018c50 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_829>:
 8018c50:	0004 0000 1bf0 0801 000a 0000 109d 0800     ................
 8018c60:	0765 0800 0781 0800 6d79 0800 07c1 0800     e.......ym......
 8018c70:	7bc9 0800 21a1 0800 254b 0800 086d 0800     .{...!..K%..m...
 8018c80:	4661 0800 46c0 46c0 46c0 46c0 46c0 46c0     aF...F.F.F.F.F.F

08018c90 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_830>:
 8018c90:	0004 0000 6da0 0801 ab12 abab 0001 0010     .....m..........
 8018ca0:	0000 0000 a580 0801 a240 0801 0000 0000     ........@.......
 8018cb0:	0000 0000 3770 0801 6840 0801               ....p7..@h..

08018cbc <System.RuntimeType_831>:
 8018cbc:	0004 0000 2280 0801 6840 0801 46c0 46c0     ....."..@h...F.F
 8018ccc:	46c0 46c0                                   .F.F

08018cd0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_832>:
 8018cd0:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 8018ce0:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

08018cf0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_833>:
 8018cf0:	0004 0000 6da0 0801 ab12 abab 0101 0010     .....m..........
 8018d00:	0000 0000 a220 0801 9560 0801 0000 0000     .... ...`.......
 8018d10:	0000 0000 a5a0 0801 6870 0801               ........ph..

08018d1c <System.RuntimeType_834>:
 8018d1c:	0004 0000 2280 0801 6870 0801 46c0 46c0     ....."..ph...F.F
 8018d2c:	46c0 46c0                                   .F.F

08018d30 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_835>:
 8018d30:	0004 0000 1bf0 0801 0009 0000 109d 0800     ................
 8018d40:	0765 0800 0781 0800 1011 0801 156d 0801     e...........m...
 8018d50:	1559 0801 0ff5 0801 159d 0801 15a3 0801     Y...............

08018d60 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_836>:
 8018d60:	0004 0000 6da0 0801 ab12 abab 0101 0010     .....m..........
 8018d70:	0000 0000 a5d0 0801 9560 0801 0000 0000     ........`.......
 8018d80:	0000 0000 a5f0 0801 68a0 0801               .........h..

08018d8c <System.RuntimeType_837>:
 8018d8c:	0004 0000 2280 0801 68a0 0801 46c0 46c0     ....."...h...F.F
 8018d9c:	46c0 46c0                                   .F.F

08018da0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_838>:
 8018da0:	0004 0000 1bf0 0801 0008 0000 109d 0800     ................
 8018db0:	0765 0800 0781 0800 08f5 0801 861d 0800     e...............
 8018dc0:	864d 0800 6bcd 0800 15a7 0801 46c0 46c0     M....k.......F.F

08018dd0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_839>:
 8018dd0:	0004 0000 6da0 0801 ab12 abab 0101 0010     .....m..........
 8018de0:	0000 0000 a100 0801 a620 0801 0000 0000     ........ .......
 8018df0:	0000 0000 8810 0801 68d0 0801               .........h..

08018dfc <System.RuntimeType_840>:
 8018dfc:	0004 0000 2280 0801 68d0 0801 46c0 46c0     ....."...h...F.F
 8018e0c:	46c0 46c0                                   .F.F

08018e10 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_841>:
 8018e10:	0004 0000 1bf0 0801 0004 0000 109d 0800     ................
 8018e20:	0765 0800 0781 0800 15ef 0801 46c0 46c0     e............F.F

08018e30 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_842>:
 8018e30:	0004 0000 6da0 0801 ab12 abab 0101 0010     .....m..........
 8018e40:	0000 0000 a680 0801 a620 0801 0000 0000     ........ .......
 8018e50:	0000 0000 a6c0 0801 6900 0801               .........i..

08018e5c <System.RuntimeType_843>:
 8018e5c:	0004 0000 2280 0801 6900 0801 46c0 46c0     ....."...i...F.F
 8018e6c:	46c0 46c0                                   .F.F

08018e70 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_844>:
 8018e70:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 8018e80:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

08018e90 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_845>:
 8018e90:	0004 0000 6da0 0801 ab12 abab 0101 0010     .....m..........
 8018ea0:	0000 0000 9f00 0801 a620 0801 0000 0000     ........ .......
 8018eb0:	0000 0000 a6f0 0801 6930 0801               ........0i..

08018ebc <System.RuntimeType_846>:
 8018ebc:	0004 0000 2280 0801 6930 0801 46c0 46c0     ....."..0i...F.F
 8018ecc:	46c0 46c0                                   .F.F

08018ed0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_847>:
 8018ed0:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 8018ee0:	0765 0800 0781 0800                         e.......

08018ee8 <System.RuntimeType_848>:
 8018ee8:	0004 0000 2280 0801 6960 0801 46c0 46c0     ....."..`i...F.F
 8018ef8:	46c0 46c0 46c0 46c0                         .F.F.F.F

08018f00 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_849>:
 8018f00:	0004 0000 1bf0 0801 0007 0000 109d 0800     ................
 8018f10:	0765 0800 0781 0800 15ad 0801 15bd 0801     e...............
 8018f20:	5b41 0800 5b65 0800 46c0 46c0 46c0 46c0     A[..e[...F.F.F.F

08018f30 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_850>:
 8018f30:	0004 0000 6da0 0801 ab12 abab 0101 0010     .....m..........
 8018f40:	0000 0000 a720 0801 9560 0801 0000 0000     .... ...`.......
 8018f50:	0000 0000 a750 0801 6990 0801               ....P....i..

08018f5c <System.RuntimeType_851>:
 8018f5c:	0004 0000 2280 0801 6990 0801 46c0 46c0     ....."...i...F.F
 8018f6c:	46c0 46c0                                   .F.F

08018f70 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_852>:
 8018f70:	0004 0000 1bf0 0801 0016 0000 109d 0800     ................
 8018f80:	0765 0800 0781 0800 15e9 0801 6d69 0800     e...........im..
 8018f90:	6d81 0800 6da9 0800 6c51 0800 382d 0800     .m...m..Ql..-8..
 8018fa0:	3fd9 0800 46c3 0800 40f9 0800 4f99 0800     .?...F...@...O..
 8018fb0:	455b 0800 12bd 0801 5089 0800 5077 0800     [E.......P..wP..
 8018fc0:	5345 0800 512f 0800 511d 0800 8b1b 0800     ES../Q...Q......
 8018fd0:	8b29 0800 46c0 46c0 46c0 46c0 46c0 46c0     )....F.F.F.F.F.F

08018fe0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_853>:
 8018fe0:	0004 0000 6da0 0801 ab12 abab 0003 0010     .....m..........
 8018ff0:	0000 0000 a780 0801 2334 0801 a7b0 0801     ........4#......
 8019000:	0000 0000 a7b0 0801 69c0 0801               .........i..

0801900c <System.RuntimeType_854>:
 801900c:	0004 0000 2280 0801 69c0 0801 46c0 46c0     ....."...i...F.F
 801901c:	46c0 46c0                                   .F.F

08019020 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_855>:
 8019020:	0004 0000 1bf0 0801 0007 0000 109d 0800     ................
 8019030:	0765 0800 0781 0800 a631 0800 a633 0800     e.......1...3...
 8019040:	a635 0800 a639 0800 46c0 46c0 46c0 46c0     5...9....F.F.F.F

08019050 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_856>:
 8019050:	0004 0000 6da0 0801 ab12 abab 0001 0010     .....m..........
 8019060:	0000 0000 a7e0 0801 74a0 0801 0000 0000     .........t......
 8019070:	0000 0000 3770 0801 69f0 0801               ....p7...i..

0801907c <System.RuntimeType_857>:
 801907c:	0004 0000 2280 0801 69f0 0801 46c0 46c0     ....."...i...F.F
 801908c:	46c0 46c0                                   .F.F

08019090 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_858>:
 8019090:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 80190a0:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

080190b0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_859>:
 80190b0:	0004 0000 6da0 0801 ab12 abab 0102 0010     .....m..........
 80190c0:	0000 0000 a810 0801 2334 0801 7d80 0801     ........4#...}..
 80190d0:	0000 0000 a840 0801 6a20 0801               ....@... j..

080190dc <System.RuntimeType_860>:
 80190dc:	0004 0000 2280 0801 6a20 0801 46c0 46c0     .....".. j...F.F
 80190ec:	46c0 46c0                                   .F.F

080190f0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_861>:
 80190f0:	0004 0000 1bf0 0801 0007 0000 109d 0800     ................
 8019100:	0765 0800 0781 0800 5cb1 0800 5ced 0800     e........\...\..
 8019110:	5cf1 0800 5d2d 0800 46c0 46c0 46c0 46c0     .\..-]...F.F.F.F

08019120 <System.String_862>:
 8019120:	0004 0000 1a10 0801 0006 0000 0006 0000     ................
 8019130:	0053 0074 0072 0069 006e 0067 46c0 46c0     S.t.r.i.n.g..F.F

08019140 <System.String_863>:
 8019140:	0004 0000 1a10 0801 0006 0000 0006 0000     ................
 8019150:	0056 0054 0061 0062 006c 0065 46c0 46c0     V.T.a.b.l.e..F.F

08019160 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_864>:
 8019160:	0004 0000 6da0 0801 ab12 abab 0101 0010     .....m..........
 8019170:	0000 0000 a870 0801 7000 0801 0000 0000     ....p....p......
 8019180:	0000 0000 76c0 0801 6da0 0801               .....v...m..

0801918c <System.RuntimeType_865>:
 801918c:	0004 0000 2280 0801 6da0 0801 46c0 46c0     ....."...m...F.F
 801919c:	46c0 46c0                                   .F.F

080191a0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_866>:
 80191a0:	0004 0000 1bf0 0801 0009 0000 f5e1 0800     ................
 80191b0:	f8f1 0800 f947 0800 f7dd 0800 63bd 0800     ....G........c..
 80191c0:	0b35 0800 f359 0800 f381 0800 6081 0800     5...Y........`..

080191d0 <Microsoft.Zelig.Runtime.TypeSystem.ValueTypeRepresentation_867>:
 80191d0:	0004 0000 8330 0801 ab11 abab 0109 0010     ....0...........
 80191e0:	0000 0000 a8d0 0801 7000 0801 0000 0000     .........p......
 80191f0:	0000 0000 70c0 0801 a900 0801 46c0 46c0     .....p.......F.F

08019200 <Microsoft.Zelig.Runtime.TypeSystem.ValueTypeRepresentation_868>:
 8019200:	0004 0000 8330 0801 ab11 abab 010a 0010     ....0...........
 8019210:	0000 0000 a930 0801 2334 0801 6d40 0801     ....0...4#..@m..
 8019220:	0000 0000 70c0 0801 a960 0801 46c0 46c0     .....p..`....F.F

08019230 <System.String_869>:
 8019230:	0004 0000 1a10 0801 000f 0000 000f 0000     ................
 8019240:	0053 0079 0073 0074 0065 006d 0045 0078     S.y.s.t.e.m.E.x.
 8019250:	0063 0065 0070 0074 0069 006f 006e 46c0     c.e.p.t.i.o.n..F

08019260 <Microsoft.Zelig.Runtime.TypeSystem.VTable_870>:
 8019260:	0004 0000 1b80 0801 0004 0000 0000 0000     ................
 8019270:	6f30 0801 a984 0801 ab44 abab a990 0801     0o......D.......
 8019280:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08019290 <System.String_871>:
 8019290:	0004 0000 1a10 0801 0009 0000 0009 0000     ................
 80192a0:	0056 0061 006c 0075 0065 0054 0079 0070     V.a.l.u.e.T.y.p.
 80192b0:	0065 46c0 46c0 46c0 46c0 46c0 46c0 46c0     e..F.F.F.F.F.F.F

080192c0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_872>:
 80192c0:	0004 0000 1b80 0801 0000 0000 0000 0000     ................
 80192d0:	70c0 0801 a9ac 0801 ab44 abab a9c0 0801     .p......D.......
 80192e0:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

080192f0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_873>:
 80192f0:	0004 0000 1b80 0801 0024 0000 0000 0000     ........$.......
 8019300:	a9e0 0801 aa0c 0801 ab44 abab aa20 0801     ........D... ...
 8019310:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08019320 <System.String_874>:
 8019320:	0004 0000 1a10 0801 0004 0000 0004 0000     ................
 8019330:	0042 0079 0074 0065 46c0 46c0 46c0 46c0     B.y.t.e..F.F.F.F

08019340 <Microsoft.Zelig.Runtime.TypeSystem.VTable_875>:
 8019340:	0004 0000 1b80 0801 0001 0000 0000 0000     ................
 8019350:	70f0 0801 aa50 0801 ab21 abab aa60 0801     .p..P...!...`...
 8019360:	aa90 0801 46c0 46c0 46c0 46c0 46c0 46c0     .....F.F.F.F.F.F

08019370 <System.String_876>:
 8019370:	0004 0000 1a10 0801 0004 0000 0004 0000     ................
 8019380:	0043 0068 0061 0072 46c0 46c0 46c0 46c0     C.h.a.r..F.F.F.F

08019390 <Microsoft.Zelig.Runtime.TypeSystem.VTable_877>:
 8019390:	0004 0000 1b80 0801 0002 0000 0000 0000     ................
 80193a0:	7120 0801 aaa4 0801 ab21 abab aab0 0801      q......!.......
 80193b0:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

080193c0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_878>:
 80193c0:	0004 0000 6da0 0801 ab12 abab 0001 0010     .....m..........
 80193d0:	0000 0000 aad0 0801 7000 0801 0000 0000     .........p......
 80193e0:	0000 0000 76c0 0801 7150 0801               .....v..Pq..

080193ec <System.RuntimeType_879>:
 80193ec:	0004 0000 2280 0801 7150 0801 46c0 46c0     ....."..Pq...F.F
 80193fc:	46c0 46c0                                   .F.F

08019400 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_880>:
 8019400:	0004 0000 1bf0 0801 0009 0000 f2b9 0800     ................
 8019410:	f8f1 0800 f947 0800 f7dd 0800 63bd 0800     ....G........c..
 8019420:	0b35 0800 f359 0800 f381 0800 6081 0800     5...Y........`..

08019430 <System.String_881>:
 8019430:	0004 0000 1a10 0801 0005 0000 0005 0000     ................
 8019440:	0049 006e 0074 0033 0032 46c0 46c0 46c0     I.n.t.3.2..F.F.F

08019450 <Microsoft.Zelig.Runtime.TypeSystem.VTable_882>:
 8019450:	0004 0000 1b80 0801 0004 0000 0000 0000     ................
 8019460:	71a0 0801 ab28 0801 ab21 abab ab40 0801     .q..(...!...@...
 8019470:	ab80 0801 46c0 46c0 46c0 46c0 46c0 46c0     .....F.F.F.F.F.F

08019480 <System.String_883>:
 8019480:	0004 0000 1a10 0801 000b 0000 000b 0000     ................
 8019490:	0052 0075 006e 0074 0069 006d 0065 0054     R.u.n.t.i.m.e.T.
 80194a0:	0079 0070 0065 46c0 46c0 46c0 46c0 46c0     y.p.e..F.F.F.F.F

080194b0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_884>:
 80194b0:	0004 0000 7150 0801 ab12 abab 2081 0010     ....Pq....... ..
 80194c0:	0000 0000 aba0 0801 6e10 0801 0000 0000     .........n......
 80194d0:	0000 0000 4c70 0801 abc0 0801 46c0 46c0     ....pL.......F.F

080194e0 <System.String_885>:
 80194e0:	0004 0000 1a10 0801 0006 0000 0006 0000     ................
 80194f0:	0055 0049 006e 0074 0033 0032 46c0 46c0     U.I.n.t.3.2..F.F

08019500 <Microsoft.Zelig.Runtime.TypeSystem.VTable_886>:
 8019500:	0004 0000 1b80 0801 0004 0000 0000 0000     ................
 8019510:	7330 0801 abe4 0801 ab21 abab abf0 0801     0s......!.......
 8019520:	ac30 0801 46c0 46c0 46c0 46c0 46c0 46c0     0....F.F.F.F.F.F

08019530 <System.String_887>:
 8019530:	0004 0000 1a10 0801 0009 0000 0009 0000     ................
 8019540:	0050 0072 006f 0063 0065 0073 0073 006f     P.r.o.c.e.s.s.o.
 8019550:	0072 46c0 46c0 46c0 46c0 46c0 46c0 46c0     r..F.F.F.F.F.F.F

08019560 <System.String_888>:
 8019560:	0004 0000 1a10 0801 001c 0000 001c 0000     ................
 8019570:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 8019580:	0074 002e 005a 0065 006c 0069 0067 002e     t...Z.e.l.i.g...
 8019590:	0044 0049 0053 0043 004f 005f 0046 0037     D.I.S.C.O._.F.7.
 80195a0:	0034 0036 004e 0047 46c0 46c0 46c0 46c0     4.6.N.G..F.F.F.F

080195b0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_889>:
 80195b0:	0004 0000 7150 0801 ab12 abab 0081 0010     ....Pq..........
 80195c0:	0000 0000 9530 0801 ac50 0801 0000 0000     ....0...P.......
 80195d0:	0000 0000 ac90 0801 acc0 0801 46c0 46c0     .............F.F

080195e0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_890>:
 80195e0:	0004 0000 7150 0801 ab12 abab 0082 0010     ....Pq..........
 80195f0:	0000 0000 73f0 0801 2334 0801 ac90 0801     .....s..4#......
 8019600:	0000 0000 acf0 0801 ad20 0801 46c0 46c0     ........ ....F.F

08019610 <Microsoft.Zelig.Runtime.TypeSystem.VTable_891>:
 8019610:	0004 0000 1b80 0801 0008 0000 0000 0000     ................
 8019620:	7440 0801 ad44 0801 ab44 abab ad50 0801     @t..D...D...P...
 8019630:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08019640 <Microsoft.Zelig.Runtime.TypeSystem.VTable_892>:
 8019640:	0004 0000 1b80 0801 0008 0000 0000 0000     ................
 8019650:	ad90 0801 adbc 0801 ab44 abab add0 0801     ........D.......
 8019660:	1c64 0801                                   d...

08019664 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation[]_893>:
 8019664:	0004 0000 1a90 0801 0001 0000 2830 0801     ............0(..

08019674 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation[]_894>:
 8019674:	0004 0000 1a90 0801 0001 0000 7e70 0801     ............p~..

08019684 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation[]_895>:
 8019684:	0004 0000 1a90 0801 0001 0000 3dc0 0801     .............=..
 8019694:	46c0 46c0 46c0 46c0 46c0 46c0               .F.F.F.F.F.F

080196a0 <System.String_898>:
 80196a0:	0004 0000 1a10 0801 0017 0000 0017 0000     ................
 80196b0:	0043 0072 0069 0074 0069 0063 0061 006c     C.r.i.t.i.c.a.l.
 80196c0:	0046 0069 006e 0061 006c 0069 007a 0065     F.i.n.a.l.i.z.e.
 80196d0:	0072 004f 0062 006a 0065 0063 0074 46c0     r.O.b.j.e.c.t..F

080196e0 <System.String_899>:
 80196e0:	0004 0000 1a10 0801 0023 0000 0023 0000     ........#...#...
 80196f0:	0053 0079 0073 0074 0065 006d 002e 0052     S.y.s.t.e.m...R.
 8019700:	0075 006e 0074 0069 006d 0065 002e 0043     u.n.t.i.m.e...C.
 8019710:	006f 006e 0073 0074 0072 0061 0069 006e     o.n.s.t.r.a.i.n.
 8019720:	0065 0064 0045 0078 0065 0063 0075 0074     e.d.E.x.e.c.u.t.
 8019730:	0069 006f 006e 46c0 46c0 46c0 46c0 46c0     i.o.n..F.F.F.F.F

08019740 <Microsoft.Zelig.Runtime.TypeSystem.VTable_900>:
 8019740:	0004 0000 1b80 0801 0000 0000 0000 0000     ................
 8019750:	7590 0801 ade8 0801 ab44 abab ae00 0801     .u......D.......
 8019760:	1c64 0801                                   d...

08019764 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation[]_901>:
 8019764:	0004 0000 1a90 0801 0001 0000 2830 0801     ............0(..
 8019774:	46c0 46c0 46c0 46c0 46c0 46c0               .F.F.F.F.F.F

08019780 <System.String_902>:
 8019780:	0004 0000 1a10 0801 000a 0000 000a 0000     ................
 8019790:	0057 0061 0069 0074 0048 0061 006e 0064     W.a.i.t.H.a.n.d.
 80197a0:	006c 0065 46c0 46c0 46c0 46c0 46c0 46c0     l.e..F.F.F.F.F.F

080197b0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_903>:
 80197b0:	0004 0000 1b80 0801 0004 0000 0000 0000     ................
 80197c0:	7600 0801 ae18 0801 ab44 abab ae30 0801     .v......D...0...
 80197d0:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

080197e0 <System.String_904>:
 80197e0:	0004 0000 1a10 0801 001b 0000 001b 0000     ................
 80197f0:	0052 0065 0066 0065 0072 0065 006e 0063     R.e.f.e.r.e.n.c.
 8019800:	0065 0054 0079 0070 0065 0052 0065 0070     e.T.y.p.e.R.e.p.
 8019810:	0072 0065 0073 0065 006e 0074 0061 0074     r.e.s.e.n.t.a.t.
 8019820:	0069 006f 006e 46c0 46c0 46c0 46c0 46c0     i.o.n..F.F.F.F.F

08019830 <Microsoft.Zelig.Runtime.TypeSystem.VTable_905>:
 8019830:	0004 0000 1b80 0801 0024 0000 0000 0000     ........$.......
 8019840:	76c0 0801 ae50 0801 ab44 abab ae60 0801     .v..P...D...`...
 8019850:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08019860 <System.String_906>:
 8019860:	0004 0000 1a10 0801 0007 0000 0007 0000     ................
 8019870:	0050 0072 006f 0067 0072 0061 006d 46c0     P.r.o.g.r.a.m..F

08019880 <Microsoft.Zelig.Runtime.TypeSystem.VTable_907>:
 8019880:	0004 0000 1b80 0801 0000 0000 0000 0000     ................
 8019890:	7730 0801 ae90 0801 ab44 abab aea0 0801     0w......D.......
 80198a0:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

080198b0 <System.String_908>:
 80198b0:	0004 0000 1a10 0801 0005 0000 0005 0000     ................
 80198c0:	0041 0072 0072 0061 0079 46c0 46c0 46c0     A.r.r.a.y..F.F.F

080198d0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_909>:
 80198d0:	0004 0000 1b80 0801 0004 0000 0000 0000     ................
 80198e0:	7760 0801 aeb8 0801 ab44 abab aed0 0801     `w......D.......
 80198f0:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08019900 <System.String_910>:
 8019900:	0004 0000 1a10 0801 000a 0000 000a 0000     ................
 8019910:	004c 0065 0064 0054 006f 0067 0067 006c     L.e.d.T.o.g.g.l.
 8019920:	0065 0072 46c0 46c0 46c0 46c0 46c0 46c0     e.r..F.F.F.F.F.F

08019930 <Microsoft.Zelig.Runtime.TypeSystem.VTable_911>:
 8019930:	0004 0000 1b80 0801 0004 0000 0000 0000     ................
 8019940:	7790 0801 aee8 0801 ab44 abab af00 0801     .w......D.......
 8019950:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08019960 <System.String_912>:
 8019960:	0004 0000 1a10 0801 0012 0000 0012 0000     ................
 8019970:	004d 0061 0072 0073 0068 0061 006c 0042     M.a.r.s.h.a.l.B.
 8019980:	0079 0052 0065 0066 004f 0062 006a 0065     y.R.e.f.O.b.j.e.
 8019990:	0063 0074 46c0 46c0 46c0 46c0 46c0 46c0     c.t..F.F.F.F.F.F

080199a0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_913>:
 80199a0:	0004 0000 1b80 0801 0000 0000 0000 0000     ................
 80199b0:	7a20 0801 af1c 0801 ab44 abab af30 0801      z......D...0...
 80199c0:	1c64 0801                                   d...

080199c4 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation[]_914>:
 80199c4:	0004 0000 1a90 0801 0001 0000 4120 0801     ............ A..

080199d4 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation[]_915>:
 80199d4:	0004 0000 1a90 0801 0001 0000 7e70 0801     ............p~..

080199e4 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation[]_916>:
 80199e4:	0004 0000 1a90 0801 0001 0000 3dc0 0801     .............=..

080199f4 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation[]_917>:
 80199f4:	0004 0000 1a90 0801 0001 0000 36e0 0801     .............6..

08019a04 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation[]_918>:
 8019a04:	0004 0000 1a90 0801 0001 0000 4000 0801     .............@..

08019a14 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation[]_919>:
 8019a14:	0004 0000 1a90 0801 0001 0000 4120 0801     ............ A..
 8019a24:	46c0 46c0 46c0 46c0 46c0 46c0               .F.F.F.F.F.F

08019a30 <System.String_920>:
 8019a30:	0004 0000 1a10 0801 0009 0000 0009 0000     ................
 8019a40:	0046 0069 006e 0061 006c 0069 007a 0065     F.i.n.a.l.i.z.e.
 8019a50:	0072 46c0 46c0 46c0 46c0 46c0 46c0 46c0     r..F.F.F.F.F.F.F

08019a60 <Microsoft.Zelig.Runtime.TypeSystem.VTable_921>:
 8019a60:	0004 0000 1b80 0801 0000 0000 0000 0000     ................
 8019a70:	7d50 0801 af48 0801 ab44 abab af60 0801     P}..H...D...`...
 8019a80:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08019a90 <System.String_924>:
 8019a90:	0004 0000 1a10 0801 000f 0000 000f 0000     ................
 8019aa0:	0050 0072 006f 0063 0065 0073 0073 006f     P.r.o.c.e.s.s.o.
 8019ab0:	0072 0041 0052 004d 0076 0037 004d 46c0     r.A.R.M.v.7.M..F

08019ac0 <System.String_925>:
 8019ac0:	0004 0000 1a10 0801 002c 0000 002c 0000     ........,...,...
 8019ad0:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 8019ae0:	0074 002e 005a 0065 006c 0069 0067 002e     t...Z.e.l.i.g...
 8019af0:	0052 0075 006e 0074 0069 006d 0065 002e     R.u.n.t.i.m.e...
 8019b00:	0054 0061 0072 0067 0065 0074 0050 006c     T.a.r.g.e.t.P.l.
 8019b10:	0061 0074 0066 006f 0072 006d 002e 0041     a.t.f.o.r.m...A.
 8019b20:	0052 004d 0076 0037 46c0 46c0 46c0 46c0     R.M.v.7..F.F.F.F

08019b30 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_926>:
 8019b30:	0004 0000 7150 0801 ab12 abab 0081 0010     ....Pq..........
 8019b40:	0003 0000 9530 0801 74a0 0801 0000 0000     ....0....t......
 8019b50:	0000 0000 3770 0801 af80 0801 46c0 46c0     ....p7.......F.F

08019b60 <Microsoft.Zelig.Runtime.TypeSystem.VTable_927>:
 8019b60:	0004 0000 1b80 0801 0000 0000 0000 0000     ................
 8019b70:	7d80 0801 afa4 0801 ab44 abab afb0 0801     .}......D.......
 8019b80:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08019b90 <Microsoft.Zelig.Runtime.TypeSystem.VTable_928>:
 8019b90:	0004 0000 1b80 0801 0000 0000 0000 0000     ................
 8019ba0:	7db0 0801 afd8 0801 ab44 abab aff0 0801     .}......D.......
 8019bb0:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08019bc0 <System.String_931>:
 8019bc0:	0004 0000 1a10 0801 000e 0000 000e 0000     ................
 8019bd0:	0057 0061 0069 0074 0061 0062 006c 0065     W.a.i.t.a.b.l.e.
 8019be0:	004f 0062 006a 0065 0063 0074 46c0 46c0     O.b.j.e.c.t..F.F

08019bf0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_932>:
 8019bf0:	0004 0000 1b80 0801 0008 0000 0000 0000     ................
 8019c00:	7e70 0801 b028 0801 ab44 abab b040 0801     p~..(...D...@...
 8019c10:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08019c20 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_933>:
 8019c20:	0004 0000 6da0 0801 ab12 abab 0101 0010     .....m..........
 8019c30:	0000 0000 b060 0801 7000 0801 0000 0000     ....`....p......
 8019c40:	0000 0000 a9e0 0801 7ea0 0801               .........~..

08019c4c <System.RuntimeType_934>:
 8019c4c:	0004 0000 2280 0801 7ea0 0801 46c0 46c0     ....."...~...F.F
 8019c5c:	46c0 46c0                                   .F.F

08019c60 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_935>:
 8019c60:	0004 0000 1bf0 0801 0009 0000 f65d 0800     ............]...
 8019c70:	f8f1 0800 f947 0800 f7dd 0800 63bd 0800     ....G........c..
 8019c80:	f651 0800 f359 0800 f381 0800 6081 0800     Q...Y........`..

08019c90 <System.String_936>:
 8019c90:	0004 0000 1a10 0801 0004 0000 0004 0000     ................
 8019ca0:	0045 006e 0075 006d 46c0 46c0 46c0 46c0     E.n.u.m..F.F.F.F

08019cb0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_937>:
 8019cb0:	0004 0000 1b80 0801 0000 0000 0000 0000     ................
 8019cc0:	7f10 0801 b0ac 0801 ab22 abab b0c0 0801     ........".......
 8019cd0:	b0f0 0801 46c0 46c0 46c0 46c0 46c0 46c0     .....F.F.F.F.F.F

08019ce0 <System.String_938>:
 8019ce0:	0004 0000 1a10 0801 000c 0000 000c 0000     ................
 8019cf0:	0049 0046 006f 0072 006d 0061 0074 0074     I.F.o.r.m.a.t.t.
 8019d00:	0061 0062 006c 0065                         a.b.l.e.

08019d08 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation[]_939>:
 8019d08:	0004 0000 1a90 0801 0001 0000 36e0 0801     .............6..
 8019d18:	46c0 46c0 46c0 46c0                         .F.F.F.F

08019d20 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_940>:
 8019d20:	0004 0000 6da0 0801 ab12 abab 0101 0010     .....m..........
 8019d30:	0000 0000 b110 0801 7000 0801 0000 0000     .........p......
 8019d40:	0000 0000 93c0 0801 80f0 0801               ............

08019d4c <System.RuntimeType_941>:
 8019d4c:	0004 0000 2280 0801 80f0 0801 46c0 46c0     .....".......F.F
 8019d5c:	46c0 46c0                                   .F.F

08019d60 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_942>:
 8019d60:	0004 0000 1bf0 0801 0009 0000 f6cd 0800     ................
 8019d70:	f8f1 0800 f947 0800 f7dd 0800 63bd 0800     ....G........c..
 8019d80:	0b35 0800 f359 0800 f381 0800 6081 0800     5...Y........`..

08019d90 <System.String_943>:
 8019d90:	0004 0000 1a10 0801 0010 0000 0010 0000     ................
 8019da0:	004e 0075 006d 0062 0065 0072 0046 006f     N.u.m.b.e.r.F.o.
 8019db0:	0072 006d 0061 0074 0049 006e 0066 006f     r.m.a.t.I.n.f.o.

08019dc0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_946>:
 8019dc0:	0004 0000 6da0 0801 ab12 abab 0001 0010     .....m..........
 8019dd0:	0000 0000 b160 0801 7000 0801 0000 0000     ....`....p......
 8019de0:	0000 0000 56a0 0801 8330 0801               .....V..0...

08019dec <System.RuntimeType_947>:
 8019dec:	0004 0000 2280 0801 8330 0801 46c0 46c0     ....."..0....F.F
 8019dfc:	46c0 46c0                                   .F.F

08019e00 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_948>:
 8019e00:	0004 0000 1bf0 0801 0009 0000 fc59 0800     ............Y...
 8019e10:	f8f1 0800 f947 0800 f7dd 0800 63bd 0800     ....G........c..
 8019e20:	0b35 0800 f359 0800 f381 0800 6081 0800     5...Y........`..

08019e30 <System.String_949>:
 8019e30:	0004 0000 1a10 0801 0012 0000 0012 0000     ................
 8019e40:	0042 0061 0073 0065 0052 0065 0070 0072     B.a.s.e.R.e.p.r.
 8019e50:	0065 0073 0065 006e 0074 0061 0074 0069     e.s.e.n.t.a.t.i.
 8019e60:	006f 006e 46c0 46c0 46c0 46c0 46c0 46c0     o.n..F.F.F.F.F.F

08019e70 <Microsoft.Zelig.Runtime.TypeSystem.VTable_950>:
 8019e70:	0004 0000 1b80 0801 0000 0000 0000 0000     ................
 8019e80:	8390 0801 b1a0 0801 ab44 abab b1b0 0801     ........D.......
 8019e90:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08019ea0 <System.String_951>:
 8019ea0:	0004 0000 1a10 0801 0006 0000 0006 0000     ................
 8019eb0:	004c 0069 0073 0074 0060 0031               L.i.s.t.`.1.

08019ebc <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation.GenericContext_952>:
 8019ebc:	0004 0000 9640 0801 b1cc 0801 0000 0000     ....@...........
 8019ecc:	46c0 46c0                                   .F.F

08019ed0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_953>:
 8019ed0:	0004 0000 1b80 0801 000c 0000 0000 0000     ................
 8019ee0:	85f0 0801 b1dc 0801 ab44 abab b1f0 0801     ........D.......
 8019ef0:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08019f00 <System.String_954>:
 8019f00:	0004 0000 1a10 0801 000b 0000 000b 0000     ................
 8019f10:	0053 0079 0073 0074 0065 006d 0054 0069     S.y.s.t.e.m.T.i.
 8019f20:	006d 0065 0072 46c0 46c0 46c0 46c0 46c0     m.e.r..F.F.F.F.F

08019f30 <System.String_955>:
 8019f30:	0004 0000 1a10 0801 0020 0000 0020 0000     ........ ... ...
 8019f40:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 8019f50:	0074 002e 0043 006f 0072 0074 0065 0078     t...C.o.r.t.e.x.
 8019f60:	004d 0033 004f 006e 004d 0042 0045 0044     M.3.O.n.M.B.E.D.
 8019f70:	002e 0044 0072 0069 0076 0065 0072 0073     ..D.r.i.v.e.r.s.

08019f80 <Microsoft.Zelig.Runtime.TypeSystem.VTable_956>:
 8019f80:	0004 0000 1b80 0801 0014 0000 0000 0000     ................
 8019f90:	86a0 0801 b210 0801 ab44 abab b220 0801     ........D... ...
 8019fa0:	1c64 0801                                   d...

08019fa4 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation[]_957>:
 8019fa4:	0004 0000 1a90 0801 0001 0000 5f90 0801     ............._..
 8019fb4:	46c0 46c0 46c0 46c0 46c0 46c0               .F.F.F.F.F.F

08019fc0 <System.String_958>:
 8019fc0:	0004 0000 1a10 0801 000f 0000 000f 0000     ................
 8019fd0:	0047 0070 0069 006f 0050 0069 006e 0050     G.p.i.o.P.i.n.P.
 8019fe0:	0072 006f 0076 0069 0064 0065 0072 46c0     r.o.v.i.d.e.r..F

08019ff0 <System.String_959>:
 8019ff0:	0004 0000 1a10 0801 001d 0000 001d 0000     ................
 801a000:	0057 0069 006e 0064 006f 0077 0073 002e     W.i.n.d.o.w.s...
 801a010:	0044 0065 0076 0069 0063 0065 0073 002e     D.e.v.i.c.e.s...
 801a020:	0047 0070 0069 006f 002e 0050 0072 006f     G.p.i.o...P.r.o.
 801a030:	0076 0069 0064 0065 0072 46c0 46c0 46c0     v.i.d.e.r..F.F.F

0801a040 <Microsoft.Zelig.Runtime.TypeSystem.VTable_960>:
 801a040:	0004 0000 1b80 0801 0000 0000 0000 0000     ................
 801a050:	8770 0801 b238 0801 ab44 abab b250 0801     p...8...D...P...
 801a060:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0801a070 <System.String_961>:
 801a070:	0004 0000 1a10 0801 001c 0000 001c 0000     ................
 801a080:	0057 0069 006e 0064 006f 0077 0073 002e     W.i.n.d.o.w.s...
 801a090:	0044 0065 0076 0069 0063 0065 0073 002e     D.e.v.i.c.e.s...
 801a0a0:	0053 0070 0069 002e 0050 0072 006f 0076     S.p.i...P.r.o.v.
 801a0b0:	0069 0064 0065 0072 46c0 46c0 46c0 46c0     i.d.e.r..F.F.F.F

0801a0c0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_962>:
 801a0c0:	0004 0000 1b80 0801 0000 0000 0000 0000     ................
 801a0d0:	87d0 0801 b278 0801 ab44 abab b290 0801     ....x...D.......
 801a0e0:	1c64 0801                                   d...

0801a0e4 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation[]_963>:
 801a0e4:	0004 0000 1a90 0801 0001 0000 5f90 0801     ............._..
 801a0f4:	46c0 46c0 46c0 46c0 46c0 46c0               .F.F.F.F.F.F

0801a100 <System.String_964>:
 801a100:	0004 0000 1a10 0801 0012 0000 0012 0000     ................
 801a110:	0043 006f 006e 0074 0065 0078 0074 0053     C.o.n.t.e.x.t.S.
 801a120:	0077 0069 0074 0063 0068 0054 0069 006d     w.i.t.c.h.T.i.m.
 801a130:	0065 0072 46c0 46c0 46c0 46c0 46c0 46c0     e.r..F.F.F.F.F.F

0801a140 <System.String_965>:
 801a140:	0004 0000 1a10 0801 002f 0000 002f 0000     ......../.../...
 801a150:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 801a160:	0074 002e 0044 0065 0076 0069 0063 0065     t...D.e.v.i.c.e.
 801a170:	004d 006f 0064 0065 006c 0073 002e 0043     M.o.d.e.l.s...C.
 801a180:	0068 0069 0070 0073 0065 0074 002e 0043     h.i.p.s.e.t...C.
 801a190:	006f 0072 0074 0065 0078 004d 0033 002e     o.r.t.e.x.M.3...
 801a1a0:	0044 0072 0069 0076 0065 0072 0073 46c0     D.r.i.v.e.r.s..F

0801a1b0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_966>:
 801a1b0:	0004 0000 1b80 0801 0019 0000 0000 0000     ................
 801a1c0:	8810 0801 b2b4 0801 ab44 abab b2c0 0801     ........D.......
 801a1d0:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0801a1e0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_967>:
 801a1e0:	0004 0000 6da0 0801 ab12 abab 0002 0010     .....m..........
 801a1f0:	0000 0000 b2e0 0801 2334 0801 b300 0801     ........4#......
 801a200:	0000 0000 3770 0801 b330 0801               ....p7..0...

0801a20c <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation[]_968>:
 801a20c:	0004 0000 1a90 0801 0001 0000 a1e0 0801     ................
 801a21c:	46c0 46c0                                   .F.F

0801a220 <System.String_969>:
 801a220:	0004 0000 1a10 0801 0005 0000 0005 0000     ................
 801a230:	0042 006f 0061 0072 0064 46c0 46c0 46c0     B.o.a.r.d..F.F.F

0801a240 <System.String_970>:
 801a240:	0004 0000 1a10 0801 0027 0000 0027 0000     ........'...'...
 801a250:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 801a260:	0074 002e 0044 0065 0076 0069 0063 0065     t...D.e.v.i.c.e.
 801a270:	004d 006f 0064 0065 006c 0073 002e 0043     M.o.d.e.l.s...C.
 801a280:	0068 0069 0070 0073 0065 0074 002e 0043     h.i.p.s.e.t...C.
 801a290:	006f 0072 0074 0065 0078 004d 0033 46c0     o.r.t.e.x.M.3..F

0801a2a0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_971>:
 801a2a0:	0004 0000 1b80 0801 0000 0000 0000 0000     ................
 801a2b0:	88b0 0801 b354 0801 ab44 abab b360 0801     ....T...D...`...
 801a2c0:	1c64 0801                                   d...

0801a2c4 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation[]_972>:
 801a2c4:	0004 0000 1a90 0801 0001 0000 a1e0 0801     ................
 801a2d4:	46c0 46c0 46c0 46c0 46c0 46c0               .F.F.F.F.F.F

0801a2e0 <System.String_973>:
 801a2e0:	0004 0000 1a10 0801 0010 0000 0010 0000     ................
 801a2f0:	0048 0061 0072 0064 0077 0061 0072 0065     H.a.r.d.w.a.r.e.
 801a300:	0050 0072 006f 0076 0069 0064 0065 0072     P.r.o.v.i.d.e.r.

0801a310 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_974>:
 801a310:	0004 0000 7150 0801 ab12 abab 0081 0010     ....Pq..........
 801a320:	0000 0000 a2e0 0801 b390 0801 0000 0000     ................
 801a330:	0000 0000 b3e0 0801 b410 0801 46c0 46c0     .............F.F

0801a340 <System.String_975>:
 801a340:	0004 0000 1a10 0801 0006 0000 0006 0000     ................
 801a350:	004d 0065 006d 006f 0072 0079 46c0 46c0     M.e.m.o.r.y..F.F

0801a360 <System.String_976>:
 801a360:	0004 0000 1a10 0801 0018 0000 0018 0000     ................
 801a370:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 801a380:	0074 002e 0043 006f 0072 0074 0065 0078     t...C.o.r.t.e.x.
 801a390:	004d 0033 004f 006e 004d 0042 0045 0044     M.3.O.n.M.B.E.D.

0801a3a0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_977>:
 801a3a0:	0004 0000 7150 0801 ab12 abab 0081 0010     ....Pq..........
 801a3b0:	0000 0000 a340 0801 b390 0801 0000 0000     ....@...........
 801a3c0:	0000 0000 b440 0801 b470 0801 46c0 46c0     ....@...p....F.F

0801a3d0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_978>:
 801a3d0:	0004 0000 6da0 0801 ab12 abab 0002 0010     .....m..........
 801a3e0:	0000 0000 b4a0 0801 2334 0801 b440 0801     ........4#..@...
 801a3f0:	0000 0000 3770 0801 b4c0 0801 46c0 46c0     ....p7.......F.F

0801a400 <System.String_979>:
 801a400:	0004 0000 1a10 0801 000d 0000 000d 0000     ................
 801a410:	004d 0065 006d 006f 0072 0079 004d 0061     M.e.m.o.r.y.M.a.
 801a420:	006e 0061 0067 0065 0072 46c0 46c0 46c0     n.a.g.e.r..F.F.F

0801a430 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_980>:
 801a430:	0004 0000 7150 0801 ab12 abab 0081 0010     ....Pq..........
 801a440:	0000 0000 a400 0801 b390 0801 0000 0000     ................
 801a450:	0000 0000 b4f0 0801 b520 0801 46c0 46c0     ........ ....F.F

0801a460 <System.String_981>:
 801a460:	0004 0000 1a10 0801 000b 0000 000b 0000     ................
 801a470:	0050 0065 0072 0069 0070 0068 0065 0072     P.e.r.i.p.h.e.r.
 801a480:	0061 006c 0073 46c0 46c0 46c0 46c0 46c0     a.l.s..F.F.F.F.F

0801a490 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_982>:
 801a490:	0004 0000 7150 0801 ab12 abab 0081 0010     ....Pq..........
 801a4a0:	0000 0000 a460 0801 b390 0801 0000 0000     ....`...........
 801a4b0:	0000 0000 b550 0801 b580 0801 46c0 46c0     ....P........F.F

0801a4c0 <System.String_983>:
 801a4c0:	0004 0000 1a10 0801 0007 0000 0007 0000     ................
 801a4d0:	0053 0074 006f 0072 0061 0067 0065 46c0     S.t.o.r.a.g.e..F

0801a4e0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_984>:
 801a4e0:	0004 0000 7150 0801 ab12 abab 0081 0010     ....Pq..........
 801a4f0:	0000 0000 a4c0 0801 b390 0801 0000 0000     ................
 801a500:	0000 0000 b5b0 0801 b5e0 0801 46c0 46c0     .............F.F

0801a510 <System.String_985>:
 801a510:	0004 0000 1a10 0801 0011 0000 0011 0000     ................
 801a520:	0054 0079 0070 0065 0053 0079 0073 0074     T.y.p.e.S.y.s.t.
 801a530:	0065 006d 004d 0061 006e 0061 0067 0065     e.m.M.a.n.a.g.e.
 801a540:	0072 46c0 46c0 46c0 46c0 46c0 46c0 46c0     r..F.F.F.F.F.F.F

0801a550 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_986>:
 801a550:	0004 0000 7150 0801 ab12 abab 0081 0010     ....Pq..........
 801a560:	0000 0000 a510 0801 b390 0801 0000 0000     ................
 801a570:	0000 0000 b610 0801 b640 0801 46c0 46c0     ........@....F.F

0801a580 <System.String_987>:
 801a580:	0004 0000 1a10 0801 0007 0000 0007 0000     ................
 801a590:	0053 0079 0073 0054 0069 0063 006b 46c0     S.y.s.T.i.c.k..F

0801a5a0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_988>:
 801a5a0:	0004 0000 7150 0801 ab12 abab 0081 0010     ....Pq..........
 801a5b0:	0000 0000 a220 0801 ac50 0801 0000 0000     .... ...P.......
 801a5c0:	0000 0000 b670 0801 b6a0 0801 46c0 46c0     ....p........F.F

0801a5d0 <System.String_989>:
 801a5d0:	0004 0000 1a10 0801 0006 0000 0006 0000     ................
 801a5e0:	0044 0065 0076 0069 0063 0065 46c0 46c0     D.e.v.i.c.e..F.F

0801a5f0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_990>:
 801a5f0:	0004 0000 7150 0801 ab12 abab 0081 0010     ....Pq..........
 801a600:	0000 0000 a5d0 0801 ac50 0801 0000 0000     ........P.......
 801a610:	0000 0000 b6d0 0801 b700 0801 46c0 46c0     .............F.F

0801a620 <System.String_991>:
 801a620:	0004 0000 1a10 0801 0024 0000 0024 0000     ........$...$...
 801a630:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 801a640:	0074 002e 005a 0065 006c 0069 0067 002e     t...Z.e.l.i.g...
 801a650:	0044 0049 0053 0043 004f 005f 0046 0037     D.I.S.C.O._.F.7.
 801a660:	0034 0036 004e 0047 002e 0044 0072 0069     4.6.N.G...D.r.i.
 801a670:	0076 0065 0072 0073 46c0 46c0 46c0 46c0     v.e.r.s..F.F.F.F

0801a680 <System.String_992>:
 801a680:	0004 0000 1a10 0801 0013 0000 0013 0000     ................
 801a690:	0049 006e 0074 0065 0072 0072 0075 0070     I.n.t.e.r.r.u.p.
 801a6a0:	0074 0043 006f 006e 0074 0072 006f 006c     t.C.o.n.t.r.o.l.
 801a6b0:	006c 0065 0072 46c0 46c0 46c0 46c0 46c0     l.e.r..F.F.F.F.F

0801a6c0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_993>:
 801a6c0:	0004 0000 7150 0801 ab12 abab 0081 0010     ....Pq..........
 801a6d0:	0000 0000 a680 0801 b730 0801 0000 0000     ........0.......
 801a6e0:	0000 0000 b780 0801 b7b0 0801 46c0 46c0     .............F.F

0801a6f0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_994>:
 801a6f0:	0004 0000 7150 0801 ab12 abab 0081 0010     ....Pq..........
 801a700:	0000 0000 9f00 0801 b730 0801 0000 0000     ........0.......
 801a710:	0000 0000 86a0 0801 b7e0 0801 46c0 46c0     .............F.F

0801a720 <System.String_995>:
 801a720:	0004 0000 1a10 0801 000d 0000 000d 0000     ................
 801a730:	0054 0068 0072 0065 0061 0064 004d 0061     T.h.r.e.a.d.M.a.
 801a740:	006e 0061 0067 0065 0072 46c0 46c0 46c0     n.a.g.e.r..F.F.F

0801a750 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_996>:
 801a750:	0004 0000 7150 0801 ab12 abab 0081 0010     ....Pq..........
 801a760:	0000 0000 a720 0801 ac50 0801 0000 0000     .... ...P.......
 801a770:	0000 0000 b810 0801 b840 0801 46c0 46c0     ........@....F.F

0801a780 <System.String_997>:
 801a780:	0004 0000 1a10 0801 000c 0000 000c 0000     ................
 801a790:	0045 006d 0070 0074 0079 004d 0061 006e     E.m.p.t.y.M.a.n.
 801a7a0:	0061 0067 0065 0072 46c0 46c0 46c0 46c0     a.g.e.r..F.F.F.F

0801a7b0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_998>:
 801a7b0:	0004 0000 7150 0801 ab12 abab 0081 0010     ....Pq..........
 801a7c0:	0003 0000 b870 0801 74a0 0801 0000 0000     ....p....t......
 801a7d0:	0000 0000 3770 0801 b8b0 0801 46c0 46c0     ....p7.......F.F

0801a7e0 <System.String_999>:
 801a7e0:	0004 0000 1a10 0801 000e 0000 000e 0000     ................
 801a7f0:	0053 0079 006e 0063 0042 006c 006f 0063     S.y.n.c.B.l.o.c.
 801a800:	006b 0054 0061 0062 006c 0065 46c0 46c0     k.T.a.b.l.e..F.F

0801a810 <System.String_1000>:
 801a810:	0004 0000 1a10 0801 000d 0000 000d 0000     ................
 801a820:	004d 0065 0074 0068 006f 0064 0057 0072     M.e.t.h.o.d.W.r.
 801a830:	0061 0070 0070 0065 0072 46c0 46c0 46c0     a.p.p.e.r..F.F.F

0801a840 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1001>:
 801a840:	0004 0000 7150 0801 ab12 abab 0081 0010     ....Pq..........
 801a850:	0000 0000 b8e0 0801 74a0 0801 0000 0000     .........t......
 801a860:	0000 0000 3770 0801 b920 0801 46c0 46c0     ....p7.. ....F.F

0801a870 <System.String_1002>:
 801a870:	0004 0000 1a10 0801 0023 0000 0023 0000     ........#...#...
 801a880:	0043 006f 006e 0063 0072 0065 0074 0065     C.o.n.c.r.e.t.e.
 801a890:	0052 0065 0066 0065 0072 0065 006e 0063     R.e.f.e.r.e.n.c.
 801a8a0:	0065 0054 0079 0070 0065 0052 0065 0070     e.T.y.p.e.R.e.p.
 801a8b0:	0072 0065 0073 0065 006e 0074 0061 0074     r.e.s.e.n.t.a.t.
 801a8c0:	0069 006f 006e 46c0 46c0 46c0 46c0 46c0     i.o.n..F.F.F.F.F

0801a8d0 <System.String_1003>:
 801a8d0:	0004 0000 1a10 0801 000b 0000 000b 0000     ................
 801a8e0:	0043 006f 0064 0065 0050 006f 0069 006e     C.o.d.e.P.o.i.n.
 801a8f0:	0074 0065 0072 46c0 46c0 46c0 46c0 46c0     t.e.r..F.F.F.F.F

0801a900 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1004>:
 801a900:	0004 0000 1b80 0801 0004 0000 0000 0000     ................
 801a910:	91d0 0801 b944 0801 ab22 abab b950 0801     ....D..."...P...
 801a920:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0801a930 <System.String_1005>:
 801a930:	0004 0000 1a10 0801 000c 0000 000c 0000     ................
 801a940:	0049 006e 0074 0065 0072 0066 0061 0063     I.n.t.e.r.f.a.c.
 801a950:	0065 004d 0061 0070 46c0 46c0 46c0 46c0     e.M.a.p..F.F.F.F

0801a960 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1006>:
 801a960:	0004 0000 1b80 0801 0008 0000 0000 0000     ................
 801a970:	9200 0801 b968 0801 ab22 abab b980 0801     ....h...".......
 801a980:	1c64 0801                                   d...

0801a984 <System.RuntimeType_1007>:
 801a984:	0004 0000 2280 0801 9260 0801               ....."..`...

0801a990 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1008>:
 801a990:	0004 0000 1bf0 0801 0004 0000 0729 0800     ............)...
 801a9a0:	0765 0800 0781 0800 0985 0800               e...........

0801a9ac <System.RuntimeType_1009>:
 801a9ac:	0004 0000 2280 0801 92c0 0801 46c0 46c0     .....".......F.F
 801a9bc:	46c0 46c0                                   .F.F

0801a9c0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1010>:
 801a9c0:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 801a9d0:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

0801a9e0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_1011>:
 801a9e0:	0004 0000 6da0 0801 ab12 abab 0001 0010     .....m..........
 801a9f0:	0000 0000 b9a0 0801 7000 0801 0000 0000     .........p......
 801aa00:	0000 0000 9dc0 0801 92f0 0801               ............

0801aa0c <System.RuntimeType_1012>:
 801aa0c:	0004 0000 2280 0801 92f0 0801 46c0 46c0     .....".......F.F
 801aa1c:	46c0 46c0                                   .F.F

0801aa20 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1013>:
 801aa20:	0004 0000 1bf0 0801 0009 0000 f73d 0800     ............=...
 801aa30:	f8f1 0800 f947 0800 f7dd 0800 63bd 0800     ....G........c..
 801aa40:	0b35 0800 f359 0800 f381 0800 6081 0800     5...Y........`..

0801aa50 <System.RuntimeType_1014>:
 801aa50:	0004 0000 2280 0801 9340 0801 46c0 46c0     ....."..@....F.F

0801aa60 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1015>:
 801aa60:	0004 0000 1bf0 0801 0004 0000 10bd 0800     ................
 801aa70:	103d 0800 10b1 0800 11b9 0800               =...........

0801aa7c <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1016>:
 801aa7c:	0004 0000 1bf0 0801 0001 0000 11b9 0800     ................
 801aa8c:	46c0 46c0                                   .F.F

0801aa90 <Microsoft.Zelig.Runtime.TypeSystem.VTable.InterfaceMap[]_1017>:
 801aa90:	0004 0000 1c40 0801 0001 0000 44f0 0801     ....@........D..
 801aaa0:	aa7c 0801                                   |...

0801aaa4 <System.RuntimeType_1018>:
 801aaa4:	0004 0000 2280 0801 9390 0801               ....."......

0801aab0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1019>:
 801aab0:	0004 0000 1bf0 0801 0003 0000 1345 0800     ............E...
 801aac0:	12e5 0800 12d5 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

0801aad0 <System.String_1020>:
 801aad0:	0004 0000 1a10 0801 0023 0000 0023 0000     ........#...#...
 801aae0:	0041 0062 0073 0074 0072 0061 0063 0074     A.b.s.t.r.a.c.t.
 801aaf0:	0052 0065 0066 0065 0072 0065 006e 0063     R.e.f.e.r.e.n.c.
 801ab00:	0065 0054 0079 0070 0065 0052 0065 0070     e.T.y.p.e.R.e.p.
 801ab10:	0072 0065 0073 0065 006e 0074 0061 0074     r.e.s.e.n.t.a.t.
 801ab20:	0069 006f 006e 46c0                         i.o.n..F

0801ab28 <System.RuntimeType_1021>:
 801ab28:	0004 0000 2280 0801 9450 0801 46c0 46c0     ....."..P....F.F
 801ab38:	46c0 46c0 46c0 46c0                         .F.F.F.F

0801ab40 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1022>:
 801ab40:	0004 0000 1bf0 0801 0006 0000 1849 0800     ............I...
 801ab50:	17c9 0800 183b 0800 181d 0800 1879 0800     ....;.......y...
 801ab60:	18a9 0800                                   ....

0801ab64 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1023>:
 801ab64:	0004 0000 1bf0 0801 0001 0000 18a9 0800     ................
 801ab74:	46c0 46c0 46c0 46c0 46c0 46c0               .F.F.F.F.F.F

0801ab80 <Microsoft.Zelig.Runtime.TypeSystem.VTable.InterfaceMap[]_1024>:
 801ab80:	0004 0000 1c40 0801 0001 0000 44f0 0801     ....@........D..
 801ab90:	ab64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0801aba0 <System.String_1025>:
 801aba0:	0004 0000 1a10 0801 0004 0000 0004 0000     ................
 801abb0:	0054 0079 0070 0065 46c0 46c0 46c0 46c0     T.y.p.e..F.F.F.F

0801abc0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1026>:
 801abc0:	0004 0000 1b80 0801 0000 0000 0000 0000     ................
 801abd0:	94b0 0801 b9e0 0801 ab44 abab b9f0 0801     ........D.......
 801abe0:	1c64 0801                                   d...

0801abe4 <System.RuntimeType_1027>:
 801abe4:	0004 0000 2280 0801 9500 0801               ....."......

0801abf0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1028>:
 801abf0:	0004 0000 1bf0 0801 0006 0000 34f3 0800     .............4..
 801ac00:	3475 0800 34e7 0800 34c9 0800 3513 0800     u4...4...4...5..
 801ac10:	3533 0800                                   35..

0801ac14 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1029>:
 801ac14:	0004 0000 1bf0 0801 0001 0000 3533 0800     ............35..
 801ac24:	46c0 46c0 46c0 46c0 46c0 46c0               .F.F.F.F.F.F

0801ac30 <Microsoft.Zelig.Runtime.TypeSystem.VTable.InterfaceMap[]_1030>:
 801ac30:	0004 0000 1c40 0801 0001 0000 44f0 0801     ....@........D..
 801ac40:	ac14 0801 46c0 46c0 46c0 46c0 46c0 46c0     .....F.F.F.F.F.F

0801ac50 <System.String_1031>:
 801ac50:	0004 0000 1a10 0801 0018 0000 0018 0000     ................
 801ac60:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 801ac70:	0074 002e 0043 006f 0072 0074 0065 0078     t...C.o.r.t.e.x.
 801ac80:	004d 0034 004f 006e 004d 0042 0045 0044     M.4.O.n.M.B.E.D.

0801ac90 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1032>:
 801ac90:	0004 0000 7150 0801 ab12 abab 0081 0010     ....Pq..........
 801aca0:	0000 0000 9530 0801 ba20 0801 0000 0000     ....0... .......
 801acb0:	0000 0000 ba70 0801 baa0 0801 46c0 46c0     ....p........F.F

0801acc0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1033>:
 801acc0:	0004 0000 1b80 0801 0000 0000 0000 0000     ................
 801acd0:	95b0 0801 bac4 0801 ab44 abab bad0 0801     ........D.......
 801ace0:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0801acf0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1034>:
 801acf0:	0004 0000 7150 0801 ab12 abab 0082 0010     ....Pq..........
 801ad00:	0000 0000 73f0 0801 2334 0801 bb00 0801     .....s..4#......
 801ad10:	0000 0000 7db0 0801 bb30 0801 46c0 46c0     .....}..0....F.F

0801ad20 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1035>:
 801ad20:	0004 0000 1b80 0801 0008 0000 0000 0000     ................
 801ad30:	95e0 0801 bb54 0801 ab44 abab bb60 0801     ....T...D...`...
 801ad40:	1c64 0801                                   d...

0801ad44 <System.RuntimeType_1036>:
 801ad44:	0004 0000 2280 0801 9610 0801               ....."......

0801ad50 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1037>:
 801ad50:	0004 0000 1bf0 0801 000b 0000 109d 0800     ................
 801ad60:	0765 0800 0781 0800 39c1 0800 39d9 0800     e........9...9..
 801ad70:	3de9 0800 ae19 0800 3e3d 0800 3e49 0800     .=......=>..I>..
 801ad80:	3e59 0800 3e61 0800 46c0 46c0 46c0 46c0     Y>..a>...F.F.F.F

0801ad90 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_1038>:
 801ad90:	0004 0000 6da0 0801 ab12 abab 0102 0010     .....m..........
 801ada0:	0000 0000 bba0 0801 2334 0801 56a0 0801     ........4#...V..
 801adb0:	0000 0000 3770 0801 9640 0801               ....p7..@...

0801adbc <System.RuntimeType_1039>:
 801adbc:	0004 0000 2280 0801 9640 0801 46c0 46c0     ....."..@....F.F
 801adcc:	46c0 46c0                                   .F.F

0801add0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1040>:
 801add0:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 801ade0:	0765 0800 0781 0800                         e.......

0801ade8 <System.RuntimeType_1043>:
 801ade8:	0004 0000 2280 0801 9740 0801 46c0 46c0     ....."..@....F.F
 801adf8:	46c0 46c0 46c0 46c0                         .F.F.F.F

0801ae00 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1044>:
 801ae00:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 801ae10:	0765 0800 0781 0800                         e.......

0801ae18 <System.RuntimeType_1045>:
 801ae18:	0004 0000 2280 0801 97b0 0801 46c0 46c0     .....".......F.F
 801ae28:	46c0 46c0 46c0 46c0                         .F.F.F.F

0801ae30 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1046>:
 801ae30:	0004 0000 1bf0 0801 0005 0000 109d 0800     ................
 801ae40:	0765 0800 0781 0800 4bd9 0800 4c01 0800     e........K...L..

0801ae50 <System.RuntimeType_1047>:
 801ae50:	0004 0000 2280 0801 9830 0801 46c0 46c0     ....."..0....F.F

0801ae60 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1048>:
 801ae60:	0004 0000 1bf0 0801 0009 0000 109d 0800     ................
 801ae70:	f8f1 0800 f947 0800 f7dd 0800 63bd 0800     ....G........c..
 801ae80:	0b35 0800 f359 0800 f381 0800 6081 0800     5...Y........`..

0801ae90 <System.RuntimeType_1049>:
 801ae90:	0004 0000 2280 0801 9880 0801 46c0 46c0     .....".......F.F

0801aea0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1050>:
 801aea0:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 801aeb0:	0765 0800 0781 0800                         e.......

0801aeb8 <System.RuntimeType_1051>:
 801aeb8:	0004 0000 2280 0801 98d0 0801 46c0 46c0     .....".......F.F
 801aec8:	46c0 46c0 46c0 46c0                         .F.F.F.F

0801aed0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1052>:
 801aed0:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 801aee0:	0765 0800 0781 0800                         e.......

0801aee8 <System.RuntimeType_1053>:
 801aee8:	0004 0000 2280 0801 9930 0801 46c0 46c0     ....."..0....F.F
 801aef8:	46c0 46c0 46c0 46c0                         .F.F.F.F

0801af00 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1054>:
 801af00:	0004 0000 1bf0 0801 0004 0000 109d 0800     ................
 801af10:	0765 0800 0781 0800 0000 0000               e...........

0801af1c <System.RuntimeType_1055>:
 801af1c:	0004 0000 2280 0801 99a0 0801 46c0 46c0     .....".......F.F
 801af2c:	46c0 46c0                                   .F.F

0801af30 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1056>:
 801af30:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 801af40:	0765 0800 0781 0800                         e.......

0801af48 <System.RuntimeType_1057>:
 801af48:	0004 0000 2280 0801 9a60 0801 46c0 46c0     ....."..`....F.F
 801af58:	46c0 46c0 46c0 46c0                         .F.F.F.F

0801af60 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1058>:
 801af60:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 801af70:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

0801af80 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1061>:
 801af80:	0004 0000 1b80 0801 0000 0000 0000 0000     ................
 801af90:	9b30 0801 bbcc 0801 ab44 abab bbe0 0801     0.......D.......
 801afa0:	1c64 0801                                   d...

0801afa4 <System.RuntimeType_1062>:
 801afa4:	0004 0000 2280 0801 9b60 0801               ....."..`...

0801afb0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1063>:
 801afb0:	0004 0000 1bf0 0801 0007 0000 109d 0800     ................
 801afc0:	0765 0800 0781 0800 5965 0800 0000 0000     e.......eY......
 801afd0:	5b41 0800 5b65 0800                         A[..e[..

0801afd8 <System.RuntimeType_1064>:
 801afd8:	0004 0000 2280 0801 9b90 0801 46c0 46c0     .....".......F.F
 801afe8:	46c0 46c0 46c0 46c0                         .F.F.F.F

0801aff0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1065>:
 801aff0:	0004 0000 1bf0 0801 000b 0000 109d 0800     ................
 801b000:	0765 0800 0781 0800 0000 0000 0000 0000     e...............
	...

0801b028 <System.RuntimeType_1068>:
 801b028:	0004 0000 2280 0801 9bf0 0801 46c0 46c0     .....".......F.F
 801b038:	46c0 46c0 46c0 46c0                         .F.F.F.F

0801b040 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1069>:
 801b040:	0004 0000 1bf0 0801 0005 0000 109d 0800     ................
 801b050:	0765 0800 0781 0800 0000 0000 0000 0000     e...............

0801b060 <System.String_1070>:
 801b060:	0004 0000 1a10 0801 001d 0000 001d 0000     ................
 801b070:	0045 006e 0075 006d 0065 0072 0061 0074     E.n.u.m.e.r.a.t.
 801b080:	0069 006f 006e 0054 0079 0070 0065 0052     i.o.n.T.y.p.e.R.
 801b090:	0065 0070 0072 0065 0073 0065 006e 0074     e.p.r.e.s.e.n.t.
 801b0a0:	0061 0074 0069 006f 006e 46c0               a.t.i.o.n..F

0801b0ac <System.RuntimeType_1071>:
 801b0ac:	0004 0000 2280 0801 9cb0 0801 46c0 46c0     .....".......F.F
 801b0bc:	46c0 46c0                                   .F.F

0801b0c0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1072>:
 801b0c0:	0004 0000 1bf0 0801 0004 0000 109d 0800     ................
 801b0d0:	0765 0800 0781 0800 1643 0800               e.......C...

0801b0dc <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1073>:
 801b0dc:	0004 0000 1bf0 0801 0001 0000 1643 0800     ............C...
 801b0ec:	46c0 46c0                                   .F.F

0801b0f0 <Microsoft.Zelig.Runtime.TypeSystem.VTable.InterfaceMap[]_1074>:
 801b0f0:	0004 0000 1c40 0801 0001 0000 44f0 0801     ....@........D..
 801b100:	b0dc 0801 46c0 46c0 46c0 46c0 46c0 46c0     .....F.F.F.F.F.F

0801b110 <System.String_1075>:
 801b110:	0004 0000 1a10 0801 001b 0000 001b 0000     ................
 801b120:	0049 006e 0074 0065 0072 0066 0061 0063     I.n.t.e.r.f.a.c.
 801b130:	0065 0054 0079 0070 0065 0052 0065 0070     e.T.y.p.e.R.e.p.
 801b140:	0072 0065 0073 0065 006e 0074 0061 0074     r.e.s.e.n.t.a.t.
 801b150:	0069 006f 006e 46c0 46c0 46c0 46c0 46c0     i.o.n..F.F.F.F.F

0801b160 <System.String_1078>:
 801b160:	0004 0000 1a10 0801 0017 0000 0017 0000     ................
 801b170:	0056 0061 006c 0075 0065 0054 0079 0070     V.a.l.u.e.T.y.p.
 801b180:	0065 0052 0065 0070 0072 0065 0073 0065     e.R.e.p.r.e.s.e.
 801b190:	006e 0074 0061 0074 0069 006f 006e 46c0     n.t.a.t.i.o.n..F

0801b1a0 <System.RuntimeType_1079>:
 801b1a0:	0004 0000 2280 0801 9e70 0801 46c0 46c0     ....."..p....F.F

0801b1b0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1080>:
 801b1b0:	0004 0000 1bf0 0801 0004 0000 109d 0800     ................
 801b1c0:	0765 0800 0781 0800 0000 0000               e...........

0801b1cc <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation[]_1081>:
 801b1cc:	0004 0000 1a90 0801 0001 0000 5d50 0801     ............P]..

0801b1dc <System.RuntimeType_1082>:
 801b1dc:	0004 0000 2280 0801 9ed0 0801 46c0 46c0     .....".......F.F
 801b1ec:	46c0 46c0                                   .F.F

0801b1f0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1083>:
 801b1f0:	0004 0000 1bf0 0801 0005 0000 109d 0800     ................
 801b200:	0765 0800 0781 0800 67f1 0800 0751 0801     e........g..Q...

0801b210 <System.RuntimeType_1084>:
 801b210:	0004 0000 2280 0801 9f80 0801 46c0 46c0     .....".......F.F

0801b220 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1085>:
 801b220:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 801b230:	0765 0800 0781 0800                         e.......

0801b238 <System.RuntimeType_1086>:
 801b238:	0004 0000 2280 0801 a040 0801 46c0 46c0     ....."..@....F.F
 801b248:	46c0 46c0 46c0 46c0                         .F.F.F.F

0801b250 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1087>:
 801b250:	0004 0000 1bf0 0801 0007 0000 109d 0800     ................
 801b260:	0765 0800 0781 0800 0000 0000 0000 0000     e...............
	...

0801b278 <System.RuntimeType_1088>:
 801b278:	0004 0000 2280 0801 a0c0 0801 46c0 46c0     .....".......F.F
 801b288:	46c0 46c0 46c0 46c0                         .F.F.F.F

0801b290 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1089>:
 801b290:	0004 0000 1bf0 0801 0006 0000 109d 0800     ................
 801b2a0:	0765 0800 0781 0800 0000 0000 0000 0000     e...............
 801b2b0:	0000 0000                                   ....

0801b2b4 <System.RuntimeType_1090>:
 801b2b4:	0004 0000 2280 0801 a1b0 0801               ....."......

0801b2c0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1091>:
 801b2c0:	0004 0000 1bf0 0801 0004 0000 109d 0800     ................
 801b2d0:	0765 0800 0781 0800 136d 0801 46c0 46c0     e.......m....F.F

0801b2e0 <System.String_1092>:
 801b2e0:	0004 0000 1a10 0801 0007 0000 0007 0000     ................
 801b2f0:	0048 0061 006e 0064 006c 0065 0072 46c0     H.a.n.d.l.e.r..F

0801b300 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1093>:
 801b300:	0004 0000 7150 0801 ab12 abab 0081 0010     ....Pq..........
 801b310:	0000 0000 a680 0801 a140 0801 0000 0000     ........@.......
 801b320:	0000 0000 3770 0801 bc10 0801 46c0 46c0     ....p7.......F.F

0801b330 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1094>:
 801b330:	0004 0000 1b80 0801 0000 0000 0000 0000     ................
 801b340:	a1e0 0801 bc34 0801 ab44 abab bc40 0801     ....4...D...@...
 801b350:	1c64 0801                                   d...

0801b354 <System.RuntimeType_1095>:
 801b354:	0004 0000 2280 0801 a2a0 0801               ....."......

0801b360 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1096>:
 801b360:	0004 0000 1bf0 0801 0009 0000 109d 0800     ................
 801b370:	0765 0800 0781 0800 0000 0000 0000 0000     e...............
	...

0801b390 <System.String_1097>:
 801b390:	0004 0000 1a10 0801 001d 0000 001d 0000     ................
 801b3a0:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 801b3b0:	0074 002e 0043 006f 0072 0074 0065 0078     t...C.o.r.t.e.x.
 801b3c0:	004d 0033 004f 006e 0043 004d 0053 0049     M.3.O.n.C.M.S.I.
 801b3d0:	0053 0043 006f 0072 0065 46c0 46c0 46c0     S.C.o.r.e..F.F.F

0801b3e0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1098>:
 801b3e0:	0004 0000 7150 0801 ab12 abab 0081 0010     ....Pq..........
 801b3f0:	0003 0000 a2e0 0801 74a0 0801 0000 0000     .........t......
 801b400:	0000 0000 3770 0801 bc60 0801 46c0 46c0     ....p7..`....F.F

0801b410 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1099>:
 801b410:	0004 0000 1b80 0801 0000 0000 0000 0000     ................
 801b420:	a310 0801 bc84 0801 ab44 abab bc90 0801     ........D.......
 801b430:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0801b440 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1100>:
 801b440:	0004 0000 7150 0801 ab12 abab 0081 0010     ....Pq..........
 801b450:	0003 0000 a340 0801 74a0 0801 0000 0000     ....@....t......
 801b460:	0000 0000 3770 0801 bcd0 0801 46c0 46c0     ....p7.......F.F

0801b470 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1101>:
 801b470:	0004 0000 1b80 0801 0004 0000 0000 0000     ................
 801b480:	a3a0 0801 bcf4 0801 ab44 abab bd00 0801     ........D.......
 801b490:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0801b4a0 <System.String_1102>:
 801b4a0:	0004 0000 1a10 0801 0005 0000 0005 0000     ................
 801b4b0:	0052 0061 006e 0067 0065 46c0 46c0 46c0     R.a.n.g.e..F.F.F

0801b4c0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1103>:
 801b4c0:	0004 0000 1b80 0801 0010 0000 0000 0000     ................
 801b4d0:	a3d0 0801 bd1c 0801 ab44 abab bd30 0801     ........D...0...
 801b4e0:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0801b4f0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1104>:
 801b4f0:	0004 0000 7150 0801 ab12 abab 0081 0010     ....Pq..........
 801b500:	0000 0000 bd50 0801 74a0 0801 0000 0000     ....P....t......
 801b510:	0000 0000 bd90 0801 bdc0 0801 46c0 46c0     .............F.F

0801b520 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1105>:
 801b520:	0004 0000 1b80 0801 000c 0000 0000 0000     ................
 801b530:	a430 0801 bde4 0801 ab44 abab bdf0 0801     0.......D.......
 801b540:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0801b550 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1106>:
 801b550:	0004 0000 7150 0801 ab12 abab 0081 0010     ....Pq..........
 801b560:	0003 0000 a460 0801 74a0 0801 0000 0000     ....`....t......
 801b570:	0000 0000 3770 0801 be20 0801 46c0 46c0     ....p7.. ....F.F

0801b580 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1107>:
 801b580:	0004 0000 1b80 0801 0000 0000 0000 0000     ................
 801b590:	a490 0801 be44 0801 ab44 abab be50 0801     ....D...D...P...
 801b5a0:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0801b5b0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1108>:
 801b5b0:	0004 0000 7150 0801 ab12 abab 0081 0010     ....Pq..........
 801b5c0:	0003 0000 a4c0 0801 74a0 0801 0000 0000     .........t......
 801b5d0:	0000 0000 3770 0801 be90 0801 46c0 46c0     ....p7.......F.F

0801b5e0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1109>:
 801b5e0:	0004 0000 1b80 0801 0000 0000 0000 0000     ................
 801b5f0:	a4e0 0801 beb4 0801 ab44 abab bec0 0801     ........D.......
 801b600:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0801b610 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1110>:
 801b610:	0004 0000 7150 0801 ab12 abab 0081 0010     ....Pq..........
 801b620:	0000 0000 bee0 0801 74a0 0801 0000 0000     .........t......
 801b630:	0000 0000 bf20 0801 bf50 0801 46c0 46c0     .... ...P....F.F

0801b640 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1111>:
 801b640:	0004 0000 1b80 0801 0000 0000 0000 0000     ................
 801b650:	a550 0801 bf74 0801 ab44 abab bf80 0801     P...t...D.......
 801b660:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0801b670 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1112>:
 801b670:	0004 0000 7150 0801 ab12 abab 0081 0010     ....Pq..........
 801b680:	0000 0000 a220 0801 a360 0801 0000 0000     .... ...`.......
 801b690:	0000 0000 bfc0 0801 bff0 0801 46c0 46c0     .............F.F

0801b6a0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1113>:
 801b6a0:	0004 0000 1b80 0801 0000 0000 0000 0000     ................
 801b6b0:	a5a0 0801 c014 0801 ab44 abab c020 0801     ........D... ...
 801b6c0:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0801b6d0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1114>:
 801b6d0:	0004 0000 7150 0801 ab12 abab 0081 0010     ....Pq..........
 801b6e0:	0000 0000 a5d0 0801 a360 0801 0000 0000     ........`.......
 801b6f0:	0000 0000 c050 0801 c080 0801 46c0 46c0     ....P........F.F

0801b700 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1115>:
 801b700:	0004 0000 1b80 0801 0000 0000 0000 0000     ................
 801b710:	a5f0 0801 c0a4 0801 ab44 abab c0b0 0801     ........D.......
 801b720:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0801b730 <System.String_1116>:
 801b730:	0004 0000 1a10 0801 0020 0000 0020 0000     ........ ... ...
 801b740:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 801b750:	0074 002e 0043 006f 0072 0074 0065 0078     t...C.o.r.t.e.x.
 801b760:	004d 0034 004f 006e 004d 0042 0045 0044     M.4.O.n.M.B.E.D.
 801b770:	002e 0044 0072 0069 0076 0065 0072 0073     ..D.r.i.v.e.r.s.

0801b780 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1117>:
 801b780:	0004 0000 7150 0801 ab12 abab 0081 0010     ....Pq..........
 801b790:	0000 0000 a680 0801 9f30 0801 0000 0000     ........0.......
 801b7a0:	0000 0000 c0e0 0801 c110 0801 46c0 46c0     .............F.F

0801b7b0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1118>:
 801b7b0:	0004 0000 1b80 0801 0004 0000 0000 0000     ................
 801b7c0:	a6c0 0801 c134 0801 ab44 abab c140 0801     ....4...D...@...
 801b7d0:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0801b7e0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1119>:
 801b7e0:	0004 0000 1b80 0801 0014 0000 0000 0000     ................
 801b7f0:	a6f0 0801 c158 0801 ab44 abab c170 0801     ....X...D...p...
 801b800:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0801b810 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1120>:
 801b810:	0004 0000 7150 0801 ab12 abab 0081 0010     ....Pq..........
 801b820:	0000 0000 a720 0801 a360 0801 0000 0000     .... ...`.......
 801b830:	0000 0000 c190 0801 c1c0 0801 46c0 46c0     .............F.F

0801b840 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1121>:
 801b840:	0004 0000 1b80 0801 0040 0000 0000 0000     ........@.......
 801b850:	a750 0801 c1e4 0801 ab44 abab c1f0 0801     P.......D.......
 801b860:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0801b870 <System.String_1122>:
 801b870:	0004 0000 1a10 0801 0018 0000 0018 0000     ................
 801b880:	0047 0061 0072 0062 0061 0067 0065 0043     G.a.r.b.a.g.e.C.
 801b890:	006f 006c 006c 0065 0063 0074 0069 006f     o.l.l.e.c.t.i.o.
 801b8a0:	006e 004d 0061 006e 0061 0067 0065 0072     n.M.a.n.a.g.e.r.

0801b8b0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1123>:
 801b8b0:	0004 0000 1b80 0801 0000 0000 0000 0000     ................
 801b8c0:	a7b0 0801 c254 0801 ab44 abab c260 0801     ....T...D...`...
 801b8d0:	1c64 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0801b8e0 <System.String_1124>:
 801b8e0:	0004 0000 1a10 0801 0015 0000 0015 0000     ................
 801b8f0:	0041 0062 0073 0074 0072 0061 0063 0074     A.b.s.t.r.a.c.t.
 801b900:	004d 0065 0074 0068 006f 0064 0057 0072     M.e.t.h.o.d.W.r.
 801b910:	0061 0070 0070 0065 0072 46c0 46c0 46c0     a.p.p.e.r..F.F.F

0801b920 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1125>:
 801b920:	0004 0000 1b80 0801 0000 0000 0000 0000     ................
 801b930:	a840 0801 c288 0801 ab44 abab c2a0 0801     @.......D.......
 801b940:	1c64 0801                                   d...

0801b944 <System.RuntimeType_1126>:
 801b944:	0004 0000 2280 0801 a900 0801               ....."......

0801b950 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1127>:
 801b950:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 801b960:	0765 0800 0781 0800                         e.......

0801b968 <System.RuntimeType_1128>:
 801b968:	0004 0000 2280 0801 a960 0801 46c0 46c0     ....."..`....F.F
 801b978:	46c0 46c0 46c0 46c0                         .F.F.F.F

0801b980 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1129>:
 801b980:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 801b990:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

0801b9a0 <System.String_1130>:
 801b9a0:	0004 0000 1a10 0801 0018 0000 0018 0000     ................
 801b9b0:	0053 0063 0061 006c 0061 0072 0054 0079     S.c.a.l.a.r.T.y.
 801b9c0:	0070 0065 0052 0065 0070 0072 0065 0073     p.e.R.e.p.r.e.s.
 801b9d0:	0065 006e 0074 0061 0074 0069 006f 006e     e.n.t.a.t.i.o.n.

0801b9e0 <System.RuntimeType_1131>:
 801b9e0:	0004 0000 2280 0801 abc0 0801 46c0 46c0     .....".......F.F

0801b9f0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1132>:
 801b9f0:	0004 0000 1bf0 0801 0009 0000 109d 0800     ................
 801ba00:	de11 0800 dee3 0800 0000 0000 e8d9 0800     ................
 801ba10:	e90d 0800 0000 0000 0000 0000 0000 0000     ................

0801ba20 <System.String_1133>:
 801ba20:	0004 0000 1a10 0801 001d 0000 001d 0000     ................
 801ba30:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 801ba40:	0074 002e 0043 006f 0072 0074 0065 0078     t...C.o.r.t.e.x.
 801ba50:	004d 0034 004f 006e 0043 004d 0053 0049     M.4.O.n.C.M.S.I.
 801ba60:	0053 0043 006f 0072 0065 46c0 46c0 46c0     S.C.o.r.e..F.F.F

0801ba70 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1134>:
 801ba70:	0004 0000 7150 0801 ab12 abab 0081 0010     ....Pq..........
 801ba80:	0000 0000 9530 0801 c2d0 0801 0000 0000     ....0...........
 801ba90:	0000 0000 bb00 0801 c330 0801 46c0 46c0     ........0....F.F

0801baa0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1135>:
 801baa0:	0004 0000 1b80 0801 0000 0000 0000 0000     ................
 801bab0:	ac90 0801 c354 0801 ab44 abab c360 0801     ....T...D...`...
 801bac0:	1c64 0801                                   d...

0801bac4 <System.RuntimeType_1136>:
 801bac4:	0004 0000 2280 0801 acc0 0801               ....."......

0801bad0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1137>:
 801bad0:	0004 0000 1bf0 0801 0007 0000 109d 0800     ................
 801bae0:	0765 0800 0781 0800 6c8d 0800 0000 0000     e........l......
 801baf0:	5b41 0800 5b65 0800 46c0 46c0 46c0 46c0     A[..e[...F.F.F.F

0801bb00 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1138>:
 801bb00:	0004 0000 7150 0801 ab12 abab 0081 0010     ....Pq..........
 801bb10:	0000 0000 c390 0801 9ac0 0801 0000 0000     ................
 801bb20:	0000 0000 7d80 0801 c3d0 0801 46c0 46c0     .....}.......F.F

0801bb30 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1139>:
 801bb30:	0004 0000 1b80 0801 0008 0000 0000 0000     ................
 801bb40:	acf0 0801 c3f4 0801 ab44 abab c400 0801     ........D.......
 801bb50:	1c64 0801                                   d...

0801bb54 <System.RuntimeType_1140>:
 801bb54:	0004 0000 2280 0801 ad20 0801               .....".. ...

0801bb60 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1141>:
 801bb60:	0004 0000 1bf0 0801 000b 0000 109d 0800     ................
 801bb70:	0765 0800 0781 0800 39c1 0800 39d9 0800     e........9...9..
 801bb80:	3de9 0800 ae19 0800 3e3d 0800 3e49 0800     .=......=>..I>..
 801bb90:	3e59 0800 3e61 0800 46c0 46c0 46c0 46c0     Y>..a>...F.F.F.F

0801bba0 <System.String_1142>:
 801bba0:	0004 0000 1a10 0801 000e 0000 000e 0000     ................
 801bbb0:	0047 0065 006e 0065 0072 0069 0063 0043     G.e.n.e.r.i.c.C.
 801bbc0:	006f 006e 0074 0065 0078 0074               o.n.t.e.x.t.

0801bbcc <System.RuntimeType_1143>:
 801bbcc:	0004 0000 2280 0801 af80 0801 46c0 46c0     .....".......F.F
 801bbdc:	46c0 46c0                                   .F.F

0801bbe0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1144>:
 801bbe0:	0004 0000 1bf0 0801 0007 0000 109d 0800     ................
 801bbf0:	0765 0800 0781 0800 0000 0000 0000 0000     e...............
	...
 801bc08:	46c0 46c0 46c0 46c0                         .F.F.F.F

0801bc10 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1145>:
 801bc10:	0004 0000 1b80 0801 0004 0000 0000 0000     ................
 801bc20:	b300 0801 c438 0801 ab44 abab c450 0801     ....8...D...P...
 801bc30:	1c64 0801                                   d...

0801bc34 <System.RuntimeType_1146>:
 801bc34:	0004 0000 2280 0801 b330 0801               ....."..0...

0801bc40 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1147>:
 801bc40:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 801bc50:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

0801bc60 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1148>:
 801bc60:	0004 0000 1b80 0801 0000 0000 0000 0000     ................
 801bc70:	b3e0 0801 c468 0801 ab44 abab c480 0801     ....h...D.......
 801bc80:	1c64 0801                                   d...

0801bc84 <System.RuntimeType_1149>:
 801bc84:	0004 0000 2280 0801 b410 0801               ....."......

0801bc90 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1150>:
 801bc90:	0004 0000 1bf0 0801 000c 0000 109d 0800     ................
 801bca0:	0765 0800 0781 0800 0000 0000 0000 0000     e...............
	...
 801bccc:	46c0 46c0                                   .F.F

0801bcd0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1151>:
 801bcd0:	0004 0000 1b80 0801 0004 0000 0000 0000     ................
 801bce0:	b440 0801 c4bc 0801 ab44 abab c4d0 0801     @.......D.......
 801bcf0:	1c64 0801                                   d...

0801bcf4 <System.RuntimeType_1152>:
 801bcf4:	0004 0000 2280 0801 b470 0801               ....."..p...

0801bd00 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1153>:
 801bd00:	0004 0000 1bf0 0801 0004 0000 109d 0800     ................
 801bd10:	0765 0800 0781 0800 0000 0000               e...........

0801bd1c <System.RuntimeType_1154>:
 801bd1c:	0004 0000 2280 0801 b4c0 0801 46c0 46c0     .....".......F.F
 801bd2c:	46c0 46c0                                   .F.F

0801bd30 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1155>:
 801bd30:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 801bd40:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

0801bd50 <System.String_1156>:
 801bd50:	0004 0000 1a10 0801 0013 0000 0013 0000     ................
 801bd60:	004c 0069 006e 0065 0061 0072 004d 0065     L.i.n.e.a.r.M.e.
 801bd70:	006d 006f 0072 0079 004d 0061 006e 0061     m.o.r.y.M.a.n.a.
 801bd80:	0067 0065 0072 46c0 46c0 46c0 46c0 46c0     g.e.r..F.F.F.F.F

0801bd90 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1157>:
 801bd90:	0004 0000 7150 0801 ab12 abab 0081 0010     ....Pq..........
 801bda0:	0003 0000 a400 0801 74a0 0801 0000 0000     .........t......
 801bdb0:	0000 0000 3770 0801 c4f0 0801 46c0 46c0     ....p7.......F.F

0801bdc0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1158>:
 801bdc0:	0004 0000 1b80 0801 000c 0000 0000 0000     ................
 801bdd0:	b4f0 0801 c514 0801 ab44 abab c520 0801     ........D... ...
 801bde0:	1c64 0801                                   d...

0801bde4 <System.RuntimeType_1159>:
 801bde4:	0004 0000 2280 0801 b520 0801               .....".. ...

0801bdf0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1160>:
 801bdf0:	0004 0000 1bf0 0801 0008 0000 109d 0800     ................
 801be00:	0765 0800 0781 0800 8235 0800 6d55 0800     e.......5...Um..
 801be10:	837f 0800 83af 0800 83e1 0800 46c0 46c0     .............F.F

0801be20 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1161>:
 801be20:	0004 0000 1b80 0801 0000 0000 0000 0000     ................
 801be30:	b550 0801 c54c 0801 ab44 abab c560 0801     P...L...D...`...
 801be40:	1c64 0801                                   d...

0801be44 <System.RuntimeType_1162>:
 801be44:	0004 0000 2280 0801 b580 0801               ....."......

0801be50 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1163>:
 801be50:	0004 0000 1bf0 0801 000a 0000 109d 0800     ................
 801be60:	0765 0800 0781 0800 1071 0801 091b 0801     e.......q.......
 801be70:	1169 0801 1181 0801 036d 0800 044d 0800     i.......m...M...
 801be80:	118b 0801 46c0 46c0 46c0 46c0 46c0 46c0     .....F.F.F.F.F.F

0801be90 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1164>:
 801be90:	0004 0000 1b80 0801 0000 0000 0000 0000     ................
 801bea0:	b5b0 0801 c594 0801 ab44 abab c5a0 0801     ........D.......
 801beb0:	1c64 0801                                   d...

0801beb4 <System.RuntimeType_1165>:
 801beb4:	0004 0000 2280 0801 b5e0 0801               ....."......

0801bec0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1166>:
 801bec0:	0004 0000 1bf0 0801 0004 0000 109d 0800     ................
 801bed0:	0765 0800 0781 0800 119b 0801 46c0 46c0     e............F.F

0801bee0 <System.String_1167>:
 801bee0:	0004 0000 1a10 0801 0018 0000 0018 0000     ................
 801bef0:	0044 0065 0066 0061 0075 006c 0074 0054     D.e.f.a.u.l.t.T.
 801bf00:	0079 0070 0065 0053 0079 0073 0074 0065     y.p.e.S.y.s.t.e.
 801bf10:	006d 004d 0061 006e 0061 0067 0065 0072     m.M.a.n.a.g.e.r.

0801bf20 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1168>:
 801bf20:	0004 0000 7150 0801 ab12 abab 0081 0010     ....Pq..........
 801bf30:	0003 0000 a510 0801 74a0 0801 0000 0000     .........t......
 801bf40:	0000 0000 3770 0801 c5c0 0801 46c0 46c0     ....p7.......F.F

0801bf50 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1169>:
 801bf50:	0004 0000 1b80 0801 0000 0000 0000 0000     ................
 801bf60:	b610 0801 c5e4 0801 ab44 abab c5f0 0801     ........D.......
 801bf70:	1c64 0801                                   d...

0801bf74 <System.RuntimeType_1170>:
 801bf74:	0004 0000 2280 0801 b640 0801               ....."..@...

0801bf80 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1171>:
 801bf80:	0004 0000 1bf0 0801 000a 0000 109d 0800     ................
 801bf90:	0765 0800 0781 0800 6d79 0800 07c1 0800     e.......ym......
 801bfa0:	7bc9 0800 21a1 0800 254b 0800 086d 0800     .{...!..K%..m...
 801bfb0:	4661 0800 46c0 46c0 46c0 46c0 46c0 46c0     aF...F.F.F.F.F.F

0801bfc0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1172>:
 801bfc0:	0004 0000 7150 0801 ab12 abab 0081 0010     ....Pq..........
 801bfd0:	0000 0000 a220 0801 b390 0801 0000 0000     .... ...........
 801bfe0:	0000 0000 88b0 0801 c630 0801 46c0 46c0     ........0....F.F

0801bff0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1173>:
 801bff0:	0004 0000 1b80 0801 0000 0000 0000 0000     ................
 801c000:	b670 0801 c654 0801 ab44 abab c660 0801     p...T...D...`...
 801c010:	1c64 0801                                   d...

0801c014 <System.RuntimeType_1174>:
 801c014:	0004 0000 2280 0801 b6a0 0801               ....."......

0801c020 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1175>:
 801c020:	0004 0000 1bf0 0801 0009 0000 109d 0800     ................
 801c030:	0765 0800 0781 0800 0000 0000 0000 0000     e...............
	...

0801c050 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1176>:
 801c050:	0004 0000 7150 0801 ab12 abab 0081 0010     ....Pq..........
 801c060:	0000 0000 a5d0 0801 b390 0801 0000 0000     ................
 801c070:	0000 0000 c690 0801 c6c0 0801 46c0 46c0     .............F.F

0801c080 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1177>:
 801c080:	0004 0000 1b80 0801 0000 0000 0000 0000     ................
 801c090:	b6d0 0801 c6e4 0801 ab44 abab c6f0 0801     ........D.......
 801c0a0:	1c64 0801                                   d...

0801c0a4 <System.RuntimeType_1178>:
 801c0a4:	0004 0000 2280 0801 b700 0801               ....."......

0801c0b0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1179>:
 801c0b0:	0004 0000 1bf0 0801 0008 0000 109d 0800     ................
 801c0c0:	0765 0800 0781 0800 08f5 0801 861d 0800     e...............
 801c0d0:	864d 0800 741d 0800 7431 0800 46c0 46c0     M....t..1t...F.F

0801c0e0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1180>:
 801c0e0:	0004 0000 7150 0801 ab12 abab 0081 0010     ....Pq..........
 801c0f0:	0000 0000 a680 0801 c720 0801 0000 0000     ........ .......
 801c100:	0000 0000 b300 0801 c780 0801 46c0 46c0     .............F.F

0801c110 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1181>:
 801c110:	0004 0000 1b80 0801 0004 0000 0000 0000     ................
 801c120:	b780 0801 c7a4 0801 ab44 abab c7b0 0801     ........D.......
 801c130:	1c64 0801                                   d...

0801c134 <System.RuntimeType_1182>:
 801c134:	0004 0000 2280 0801 b7b0 0801               ....."......

0801c140 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1183>:
 801c140:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 801c150:	0765 0800 0781 0800                         e.......

0801c158 <System.RuntimeType_1184>:
 801c158:	0004 0000 2280 0801 b7e0 0801 46c0 46c0     .....".......F.F
 801c168:	46c0 46c0 46c0 46c0                         .F.F.F.F

0801c170 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1185>:
 801c170:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 801c180:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

0801c190 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1186>:
 801c190:	0004 0000 7150 0801 ab12 abab 0081 0010     ....Pq..........
 801c1a0:	0000 0000 a720 0801 b390 0801 0000 0000     .... ...........
 801c1b0:	0000 0000 c7d0 0801 c800 0801 46c0 46c0     .............F.F

0801c1c0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1187>:
 801c1c0:	0004 0000 1b80 0801 0040 0000 0000 0000     ........@.......
 801c1d0:	b810 0801 c824 0801 ab44 abab c830 0801     ....$...D...0...
 801c1e0:	1c64 0801                                   d...

0801c1e4 <System.RuntimeType_1188>:
 801c1e4:	0004 0000 2280 0801 b840 0801               ....."..@...

0801c1f0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1189>:
 801c1f0:	0004 0000 1bf0 0801 0016 0000 109d 0800     ................
 801c200:	0765 0800 0781 0800 499d 0800 6d69 0800     e........I..im..
 801c210:	6d81 0800 6da9 0800 6c51 0800 382d 0800     .m...m..Ql..-8..
 801c220:	3fd9 0800 46c3 0800 40f9 0800 4f99 0800     .?...F...@...O..
 801c230:	455b 0800 12bd 0801 5089 0800 5077 0800     [E.......P..wP..
 801c240:	5345 0800 512f 0800 511d 0800 8b1b 0800     ES../Q...Q......
 801c250:	8b29 0800                                   )...

0801c254 <System.RuntimeType_1190>:
 801c254:	0004 0000 2280 0801 b8b0 0801               ....."......

0801c260 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1191>:
 801c260:	0004 0000 1bf0 0801 0007 0000 109d 0800     ................
 801c270:	0765 0800 0781 0800 0000 0000 0000 0000     e...............
	...

0801c288 <System.RuntimeType_1192>:
 801c288:	0004 0000 2280 0801 b920 0801 46c0 46c0     .....".. ....F.F
 801c298:	46c0 46c0 46c0 46c0                         .F.F.F.F

0801c2a0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1193>:
 801c2a0:	0004 0000 1bf0 0801 0007 0000 109d 0800     ................
 801c2b0:	0765 0800 0781 0800 0000 0000 0000 0000     e...............
	...
 801c2c8:	46c0 46c0 46c0 46c0                         .F.F.F.F

0801c2d0 <System.String_1194>:
 801c2d0:	0004 0000 1a10 0801 0027 0000 0027 0000     ........'...'...
 801c2e0:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 801c2f0:	0074 002e 0044 0065 0076 0069 0063 0065     t...D.e.v.i.c.e.
 801c300:	004d 006f 0064 0065 006c 0073 002e 0043     M.o.d.e.l.s...C.
 801c310:	0068 0069 0070 0073 0065 0074 002e 0043     h.i.p.s.e.t...C.
 801c320:	006f 0072 0074 0065 0078 004d 0034 46c0     o.r.t.e.x.M.4..F

0801c330 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1195>:
 801c330:	0004 0000 1b80 0801 0000 0000 0000 0000     ................
 801c340:	ba70 0801 c894 0801 ab44 abab c8a0 0801     p.......D.......
 801c350:	1c64 0801                                   d...

0801c354 <System.RuntimeType_1196>:
 801c354:	0004 0000 2280 0801 baa0 0801               ....."......

0801c360 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1197>:
 801c360:	0004 0000 1bf0 0801 0007 0000 109d 0800     ................
 801c370:	0765 0800 0781 0800 6c8d 0800 0000 0000     e........l......
 801c380:	5b41 0800 5b65 0800 46c0 46c0 46c0 46c0     A[..e[...F.F.F.F

0801c390 <System.String_1198>:
 801c390:	0004 0000 1a10 0801 0013 0000 0013 0000     ................
 801c3a0:	0050 0072 006f 0063 0065 0073 0073 006f     P.r.o.c.e.s.s.o.
 801c3b0:	0072 0041 0052 004d 0076 0037 004d 005f     r.A.R.M.v.7.M._.
 801c3c0:	0056 0046 0050 46c0 46c0 46c0 46c0 46c0     V.F.P..F.F.F.F.F

0801c3d0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1199>:
 801c3d0:	0004 0000 1b80 0801 0000 0000 0000 0000     ................
 801c3e0:	bb00 0801 c8c8 0801 ab44 abab c8e0 0801     ........D.......
 801c3f0:	1c64 0801                                   d...

0801c3f4 <System.RuntimeType_1200>:
 801c3f4:	0004 0000 2280 0801 bb30 0801               ....."..0...

0801c400 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1201>:
 801c400:	0004 0000 1bf0 0801 000b 0000 109d 0800     ................
 801c410:	0765 0800 0781 0800 39c1 0800 39d9 0800     e........9...9..
 801c420:	3de9 0800 ae19 0800 3e3d 0800 3e49 0800     .=......=>..I>..
 801c430:	3e59 0800 3e61 0800                         Y>..a>..

0801c438 <System.RuntimeType_1202>:
 801c438:	0004 0000 2280 0801 bc10 0801 46c0 46c0     .....".......F.F
 801c448:	46c0 46c0 46c0 46c0                         .F.F.F.F

0801c450 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1203>:
 801c450:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 801c460:	0765 0800 0781 0800                         e.......

0801c468 <System.RuntimeType_1204>:
 801c468:	0004 0000 2280 0801 bc60 0801 46c0 46c0     ....."..`....F.F
 801c478:	46c0 46c0 46c0 46c0                         .F.F.F.F

0801c480 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1205>:
 801c480:	0004 0000 1bf0 0801 000c 0000 109d 0800     ................
 801c490:	0765 0800 0781 0800 0000 0000 0000 0000     e...............
	...

0801c4bc <System.RuntimeType_1206>:
 801c4bc:	0004 0000 2280 0801 bcd0 0801 46c0 46c0     .....".......F.F
 801c4cc:	46c0 46c0                                   .F.F

0801c4d0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1207>:
 801c4d0:	0004 0000 1bf0 0801 0004 0000 109d 0800     ................
 801c4e0:	0765 0800 0781 0800 0000 0000 46c0 46c0     e............F.F

0801c4f0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1208>:
 801c4f0:	0004 0000 1b80 0801 000c 0000 0000 0000     ................
 801c500:	bd90 0801 c908 0801 ab44 abab c920 0801     ........D... ...
 801c510:	1c64 0801                                   d...

0801c514 <System.RuntimeType_1209>:
 801c514:	0004 0000 2280 0801 bdc0 0801               ....."......

0801c520 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1210>:
 801c520:	0004 0000 1bf0 0801 0008 0000 109d 0800     ................
 801c530:	0765 0800 0781 0800 8235 0800 6d55 0800     e.......5...Um..
 801c540:	837f 0800 83af 0800 83e1 0800               ............

0801c54c <System.RuntimeType_1211>:
 801c54c:	0004 0000 2280 0801 be20 0801 46c0 46c0     .....".. ....F.F
 801c55c:	46c0 46c0                                   .F.F

0801c560 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1212>:
 801c560:	0004 0000 1bf0 0801 000a 0000 109d 0800     ................
 801c570:	0765 0800 0781 0800 0000 0000 0000 0000     e...............
	...

0801c594 <System.RuntimeType_1213>:
 801c594:	0004 0000 2280 0801 be90 0801               ....."......

0801c5a0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1214>:
 801c5a0:	0004 0000 1bf0 0801 0004 0000 109d 0800     ................
 801c5b0:	0765 0800 0781 0800 0000 0000 46c0 46c0     e............F.F

0801c5c0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1215>:
 801c5c0:	0004 0000 1b80 0801 0000 0000 0000 0000     ................
 801c5d0:	bf20 0801 c94c 0801 ab44 abab c960 0801      ...L...D...`...
 801c5e0:	1c64 0801                                   d...

0801c5e4 <System.RuntimeType_1216>:
 801c5e4:	0004 0000 2280 0801 bf50 0801               ....."..P...

0801c5f0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1217>:
 801c5f0:	0004 0000 1bf0 0801 000a 0000 109d 0800     ................
 801c600:	0765 0800 0781 0800 6d79 0800 07c1 0800     e.......ym......
 801c610:	7bc9 0800 21a1 0800 254b 0800 086d 0800     .{...!..K%..m...
 801c620:	4661 0800 46c0 46c0 46c0 46c0 46c0 46c0     aF...F.F.F.F.F.F

0801c630 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1218>:
 801c630:	0004 0000 1b80 0801 0000 0000 0000 0000     ................
 801c640:	bfc0 0801 c994 0801 ab44 abab c9a0 0801     ........D.......
 801c650:	1c64 0801                                   d...

0801c654 <System.RuntimeType_1219>:
 801c654:	0004 0000 2280 0801 bff0 0801               ....."......

0801c660 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1220>:
 801c660:	0004 0000 1bf0 0801 0009 0000 109d 0800     ................
 801c670:	0765 0800 0781 0800 0000 0000 0000 0000     e...............
	...

0801c690 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1221>:
 801c690:	0004 0000 7150 0801 ab12 abab 0081 0010     ....Pq..........
 801c6a0:	0003 0000 a5d0 0801 74a0 0801 0000 0000     .........t......
 801c6b0:	0000 0000 3770 0801 c9d0 0801 46c0 46c0     ....p7.......F.F

0801c6c0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1222>:
 801c6c0:	0004 0000 1b80 0801 0000 0000 0000 0000     ................
 801c6d0:	c050 0801 c9f4 0801 ab44 abab ca00 0801     P.......D.......
 801c6e0:	1c64 0801                                   d...

0801c6e4 <System.RuntimeType_1223>:
 801c6e4:	0004 0000 2280 0801 c080 0801               ....."......

0801c6f0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1224>:
 801c6f0:	0004 0000 1bf0 0801 0008 0000 109d 0800     ................
 801c700:	0765 0800 0781 0800 08f5 0801 861d 0800     e...............
 801c710:	864d 0800 741d 0800 7431 0800 46c0 46c0     M....t..1t...F.F

0801c720 <System.String_1225>:
 801c720:	0004 0000 1a10 0801 0025 0000 0025 0000     ........%...%...
 801c730:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 801c740:	0074 002e 0043 006f 0072 0074 0065 0078     t...C.o.r.t.e.x.
 801c750:	004d 0033 004f 006e 0043 004d 0053 0049     M.3.O.n.C.M.S.I.
 801c760:	0053 0043 006f 0072 0065 002e 0044 0072     S.C.o.r.e...D.r.
 801c770:	0069 0076 0065 0072 0073 46c0 46c0 46c0     i.v.e.r.s..F.F.F

0801c780 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1226>:
 801c780:	0004 0000 1b80 0801 0004 0000 0000 0000     ................
 801c790:	c0e0 0801 ca2c 0801 ab44 abab ca40 0801     ....,...D...@...
 801c7a0:	1c64 0801                                   d...

0801c7a4 <System.RuntimeType_1227>:
 801c7a4:	0004 0000 2280 0801 c110 0801               ....."......

0801c7b0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1228>:
 801c7b0:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 801c7c0:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

0801c7d0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1229>:
 801c7d0:	0004 0000 7150 0801 ab12 abab 0081 0010     ....Pq..........
 801c7e0:	0000 0000 a720 0801 ca60 0801 0000 0000     .... ...`.......
 801c7f0:	0000 0000 cad0 0801 cb00 0801 46c0 46c0     .............F.F

0801c800 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1230>:
 801c800:	0004 0000 1b80 0801 003c 0000 0000 0000     ........<.......
 801c810:	c190 0801 cb24 0801 ab44 abab cb30 0801     ....$...D...0...
 801c820:	1c64 0801                                   d...

0801c824 <System.RuntimeType_1231>:
 801c824:	0004 0000 2280 0801 c1c0 0801               ....."......

0801c830 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1232>:
 801c830:	0004 0000 1bf0 0801 0016 0000 109d 0800     ................
 801c840:	0765 0800 0781 0800 499d 0800 6d69 0800     e........I..im..
 801c850:	6d81 0800 6da9 0800 6c51 0800 382d 0800     .m...m..Ql..-8..
 801c860:	3fd9 0800 46c3 0800 40f9 0800 4f99 0800     .?...F...@...O..
 801c870:	455b 0800 12bd 0801 5089 0800 5077 0800     [E.......P..wP..
 801c880:	5345 0800 512f 0800 511d 0800 8b1b 0800     ES../Q...Q......
 801c890:	8b29 0800                                   )...

0801c894 <System.RuntimeType_1233>:
 801c894:	0004 0000 2280 0801 c330 0801               ....."..0...

0801c8a0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1234>:
 801c8a0:	0004 0000 1bf0 0801 0007 0000 109d 0800     ................
 801c8b0:	0765 0800 0781 0800 6c8d 0800 0000 0000     e........l......
 801c8c0:	5b41 0800 5b65 0800                         A[..e[..

0801c8c8 <System.RuntimeType_1235>:
 801c8c8:	0004 0000 2280 0801 c3d0 0801 46c0 46c0     .....".......F.F
 801c8d8:	46c0 46c0 46c0 46c0                         .F.F.F.F

0801c8e0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1236>:
 801c8e0:	0004 0000 1bf0 0801 0007 0000 109d 0800     ................
 801c8f0:	0765 0800 0781 0800 9af5 0800 0000 0000     e...............
 801c900:	5b41 0800 5b65 0800                         A[..e[..

0801c908 <System.RuntimeType_1237>:
 801c908:	0004 0000 2280 0801 c4f0 0801 46c0 46c0     .....".......F.F
 801c918:	46c0 46c0 46c0 46c0                         .F.F.F.F

0801c920 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1238>:
 801c920:	0004 0000 1bf0 0801 0008 0000 109d 0800     ................
 801c930:	0765 0800 0781 0800 82ad 0800 8b05 0800     e...............
 801c940:	837f 0800 83af 0800 0000 0000               ............

0801c94c <System.RuntimeType_1239>:
 801c94c:	0004 0000 2280 0801 c5c0 0801 46c0 46c0     .....".......F.F
 801c95c:	46c0 46c0                                   .F.F

0801c960 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1240>:
 801c960:	0004 0000 1bf0 0801 000a 0000 109d 0800     ................
 801c970:	0765 0800 0781 0800 6d79 0800 0000 0000     e.......ym......
	...
 801c98c:	086d 0800 4661 0800                         m...aF..

0801c994 <System.RuntimeType_1241>:
 801c994:	0004 0000 2280 0801 c630 0801               ....."..0...

0801c9a0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1242>:
 801c9a0:	0004 0000 1bf0 0801 0009 0000 109d 0800     ................
 801c9b0:	0765 0800 0781 0800 0000 0000 0000 0000     e...............
	...

0801c9d0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1243>:
 801c9d0:	0004 0000 1b80 0801 0000 0000 0000 0000     ................
 801c9e0:	c690 0801 cb94 0801 ab44 abab cba0 0801     ........D.......
 801c9f0:	1c64 0801                                   d...

0801c9f4 <System.RuntimeType_1244>:
 801c9f4:	0004 0000 2280 0801 c6c0 0801               ....."......

0801ca00 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1245>:
 801ca00:	0004 0000 1bf0 0801 0008 0000 109d 0800     ................
 801ca10:	0765 0800 0781 0800 73fd 0800 7419 0800     e........s...t..
 801ca20:	741b 0800 741d 0800 7431 0800               .t...t..1t..

0801ca2c <System.RuntimeType_1246>:
 801ca2c:	0004 0000 2280 0801 c780 0801 46c0 46c0     .....".......F.F
 801ca3c:	46c0 46c0                                   .F.F

0801ca40 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1247>:
 801ca40:	0004 0000 1bf0 0801 0003 0000 109d 0800     ................
 801ca50:	0765 0800 0781 0800 46c0 46c0 46c0 46c0     e........F.F.F.F

0801ca60 <System.String_1248>:
 801ca60:	0004 0000 1a10 0801 002f 0000 002f 0000     ......../.../...
 801ca70:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 801ca80:	0074 002e 0044 0065 0076 0069 0063 0065     t...D.e.v.i.c.e.
 801ca90:	004d 006f 0064 0065 006c 0073 002e 0043     M.o.d.e.l.s...C.
 801caa0:	0068 0069 0070 0073 0065 0074 002e 0043     h.i.p.s.e.t...C.
 801cab0:	006f 0072 0074 0065 0078 004d 0033 002e     o.r.t.e.x.M.3...
 801cac0:	0052 0075 006e 0074 0069 006d 0065 46c0     R.u.n.t.i.m.e..F

0801cad0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1249>:
 801cad0:	0004 0000 7150 0801 ab12 abab 0081 0010     ....Pq..........
 801cae0:	0000 0000 cbd0 0801 74a0 0801 0000 0000     .........t......
 801caf0:	0000 0000 cc10 0801 cc40 0801 46c0 46c0     ........@....F.F

0801cb00 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1250>:
 801cb00:	0004 0000 1b80 0801 003c 0000 0000 0000     ........<.......
 801cb10:	c7d0 0801 cc64 0801 ab44 abab cc70 0801     ....d...D...p...
 801cb20:	1c64 0801                                   d...

0801cb24 <System.RuntimeType_1251>:
 801cb24:	0004 0000 2280 0801 c800 0801               ....."......

0801cb30 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1252>:
 801cb30:	0004 0000 1bf0 0801 0016 0000 109d 0800     ................
 801cb40:	0765 0800 0781 0800 499d 0800 6d69 0800     e........I..im..
 801cb50:	6d81 0800 09a5 0801 6c51 0800 382d 0800     .m......Ql..-8..
 801cb60:	3fd9 0800 46c3 0800 40f9 0800 4f99 0800     .?...F...@...O..
 801cb70:	455b 0800 12bd 0801 5089 0800 5077 0800     [E.......P..wP..
 801cb80:	0000 0000 512f 0800 511d 0800 8b1b 0800     ..../Q...Q......
 801cb90:	8b29 0800                                   )...

0801cb94 <System.RuntimeType_1253>:
 801cb94:	0004 0000 2280 0801 c9d0 0801               ....."......

0801cba0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1254>:
 801cba0:	0004 0000 1bf0 0801 0008 0000 109d 0800     ................
 801cbb0:	0765 0800 0781 0800 73fd 0800 7419 0800     e........s...t..
 801cbc0:	741b 0800 741d 0800 7431 0800 46c0 46c0     .t...t..1t...F.F

0801cbd0 <System.String_1255>:
 801cbd0:	0004 0000 1a10 0801 0012 0000 0012 0000     ................
 801cbe0:	0041 0052 004d 0076 0037 0054 0068 0072     A.R.M.v.7.T.h.r.
 801cbf0:	0065 0061 0064 004d 0061 006e 0061 0067     e.a.d.M.a.n.a.g.
 801cc00:	0065 0072 46c0 46c0 46c0 46c0 46c0 46c0     e.r..F.F.F.F.F.F

0801cc10 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1256>:
 801cc10:	0004 0000 7150 0801 ab12 abab 0081 0010     ....Pq..........
 801cc20:	0003 0000 a720 0801 74a0 0801 0000 0000     .... ....t......
 801cc30:	0000 0000 3770 0801 cce0 0801 46c0 46c0     ....p7.......F.F

0801cc40 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1257>:
 801cc40:	0004 0000 1b80 0801 0038 0000 0000 0000     ........8.......
 801cc50:	cad0 0801 cd04 0801 ab44 abab cd10 0801     ........D.......
 801cc60:	1c64 0801                                   d...

0801cc64 <System.RuntimeType_1258>:
 801cc64:	0004 0000 2280 0801 cb00 0801               ....."......

0801cc70 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1259>:
 801cc70:	0004 0000 1bf0 0801 0016 0000 109d 0800     ................
 801cc80:	0765 0800 0781 0800 499d 0800 6d69 0800     e........I..im..
 801cc90:	6d81 0800 09a5 0801 6c51 0800 382d 0800     .m......Ql..-8..
 801cca0:	3fd9 0800 46c3 0800 40f9 0800 4f99 0800     .?...F...@...O..
 801ccb0:	455b 0800 12bd 0801 5089 0800 5077 0800     [E.......P..wP..
 801ccc0:	0000 0000 512f 0800 511d 0800 8b1b 0800     ..../Q...Q......
 801ccd0:	8b29 0800 46c0 46c0 46c0 46c0 46c0 46c0     )....F.F.F.F.F.F

0801cce0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1260>:
 801cce0:	0004 0000 1b80 0801 0034 0000 0000 0000     ........4.......
 801ccf0:	cc10 0801 cd74 0801 ab44 abab cd80 0801     ....t...D.......
 801cd00:	1c64 0801                                   d...

0801cd04 <System.RuntimeType_1261>:
 801cd04:	0004 0000 2280 0801 cc40 0801               ....."..@...

0801cd10 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1262>:
 801cd10:	0004 0000 1bf0 0801 0016 0000 109d 0800     ................
 801cd20:	0765 0800 0781 0800 499d 0800 49a5 0800     e........I...I..
 801cd30:	8b07 0800 4cc5 0800 6c51 0800 382d 0800     .....L..Ql..-8..
 801cd40:	3fd9 0800 46c3 0800 40f9 0800 4f99 0800     .?...F...@...O..
 801cd50:	455b 0800 505b 0800 5089 0800 5077 0800     [E..[P...P..wP..
	...
 801cd6c:	8b1b 0800 8b29 0800                         ....)...

0801cd74 <System.RuntimeType_1263>:
 801cd74:	0004 0000 2280 0801 cce0 0801               ....."......

0801cd80 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1264>:
 801cd80:	0004 0000 1bf0 0801 0016 0000 109d 0800     ................
 801cd90:	0765 0800 0781 0800 499d 0800 49a5 0800     e........I...I..
 801cda0:	4a55 0800 4cc5 0800 4cc7 0800 382d 0800     UJ...L...L..-8..
 801cdb0:	4ea1 0800 46c3 0800 40f9 0800 4f99 0800     .N...F...@...O..
 801cdc0:	455b 0800 505b 0800 5089 0800 5077 0800     [E..[P...P..wP..
	...

0801cde4 <CMSIS_STUB_CLOCK__GetSystemCoreClock>:

extern "C"
{
	/*__STATIC_INLINE*/ uint32_t CMSIS_STUB_CLOCK__GetSystemCoreClock()
	{
		return SystemCoreClock;
 801cde4:	4b01      	ldr	r3, [pc, #4]	; (801cdec <CMSIS_STUB_CLOCK__GetSystemCoreClock+0x8>)
 801cde6:	681b      	ldr	r3, [r3, #0]
	}
 801cde8:	4618      	mov	r0, r3
 801cdea:	4770      	bx	lr
 801cdec:	20001720 	.word	0x20001720

0801cdf0 <CMSIS_STUB_SCB__get_CONTROL>:
    //
    // System Control Block 
    //

    /*__STATIC_INLINE*/ uint32_t CMSIS_STUB_SCB__get_CONTROL()
    {
 801cdf0:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 801cdf2:	f3ef 8314 	mrs	r3, CONTROL
 801cdf6:	9301      	str	r3, [sp, #4]
  return(result);
 801cdf8:	9b01      	ldr	r3, [sp, #4]
        return __get_CONTROL();
 801cdfa:	bf00      	nop
    }
 801cdfc:	4618      	mov	r0, r3
 801cdfe:	b002      	add	sp, #8
 801ce00:	4770      	bx	lr
 801ce02:	bf00      	nop

0801ce04 <CMSIS_STUB_SCB__get_IPSR>:
        __set_CONTROL(control);
        __ISB(); // always emit a barrier 
    }

    /*__STATIC_INLINE*/ uint32_t CMSIS_STUB_SCB__get_IPSR()
    {
 801ce04:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801ce06:	f3ef 8305 	mrs	r3, IPSR
 801ce0a:	9301      	str	r3, [sp, #4]
  return(result);
 801ce0c:	9b01      	ldr	r3, [sp, #4]
        return __get_IPSR();
 801ce0e:	bf00      	nop
    }
 801ce10:	4618      	mov	r0, r3
 801ce12:	b002      	add	sp, #8
 801ce14:	4770      	bx	lr
 801ce16:	bf00      	nop

0801ce18 <CMSIS_STUB_SCB__get_PSP>:
    {
        return __get_xPSR();
    }

    /*__STATIC_INLINE*/ uint32_t CMSIS_STUB_SCB__get_PSP()
    {
 801ce18:	b410      	push	{r4}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 801ce1a:	f3ef 8309 	mrs	r3, PSP
 801ce1e:	461c      	mov	r4, r3
  return(result);
 801ce20:	4623      	mov	r3, r4
        return __get_PSP();
 801ce22:	bf00      	nop
    }
 801ce24:	4618      	mov	r0, r3
 801ce26:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ce2a:	4770      	bx	lr

0801ce2c <CMSIS_STUB_SCB__set_PSP>:

    /*__STATIC_INLINE*/ void CMSIS_STUB_SCB__set_PSP(uint32_t topOfProcStack)
    {
 801ce2c:	b084      	sub	sp, #16
 801ce2e:	9001      	str	r0, [sp, #4]
 801ce30:	9b01      	ldr	r3, [sp, #4]
 801ce32:	9303      	str	r3, [sp, #12]

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 801ce34:	9b03      	ldr	r3, [sp, #12]
 801ce36:	f383 8809 	msr	PSP, r3
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
 801ce3a:	f3bf 8f6f 	isb	sy
        __set_PSP(topOfProcStack);
        __ISB(); // always emit a barrier 
    }
 801ce3e:	b004      	add	sp, #16
 801ce40:	4770      	bx	lr
 801ce42:	bf00      	nop

0801ce44 <CMSIS_STUB_SCB__get_PRIMASK>:
        __set_MSP(topOfMainStack);
        __ISB(); // always emit a barrier 
    }

    /*__STATIC_INLINE*/ uint32_t CMSIS_STUB_SCB__get_PRIMASK()
    {
 801ce44:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801ce46:	f3ef 8310 	mrs	r3, PRIMASK
 801ce4a:	9301      	str	r3, [sp, #4]
  return(result);
 801ce4c:	9b01      	ldr	r3, [sp, #4]
        return __get_PRIMASK();
 801ce4e:	bf00      	nop
    }
 801ce50:	4618      	mov	r0, r3
 801ce52:	b002      	add	sp, #8
 801ce54:	4770      	bx	lr
 801ce56:	bf00      	nop

0801ce58 <CMSIS_STUB_SCB__get_BASEPRI>:
        __disable_fault_irq();
        __ISB();
    }

    /*__STATIC_INLINE*/ uint32_t  CMSIS_STUB_SCB__get_BASEPRI()
    {
 801ce58:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
 801ce5a:	f3ef 8312 	mrs	r3, BASEPRI_MAX
 801ce5e:	9301      	str	r3, [sp, #4]
  return(result);
 801ce60:	9b01      	ldr	r3, [sp, #4]
        return __get_BASEPRI() >> (8 - __NVIC_PRIO_BITS);
 801ce62:	091b      	lsrs	r3, r3, #4
    }
 801ce64:	4618      	mov	r0, r3
 801ce66:	b002      	add	sp, #8
 801ce68:	4770      	bx	lr
 801ce6a:	bf00      	nop

0801ce6c <CMSIS_STUB_SCB__set_BASEPRI>:

    /*__STATIC_INLINE*/ void CMSIS_STUB_SCB__set_BASEPRI(uint32_t basePri)
    {
 801ce6c:	b084      	sub	sp, #16
 801ce6e:	9001      	str	r0, [sp, #4]
        __set_BASEPRI(basePri << (8 - __NVIC_PRIO_BITS));
 801ce70:	9b01      	ldr	r3, [sp, #4]
 801ce72:	011b      	lsls	r3, r3, #4
 801ce74:	9303      	str	r3, [sp, #12]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 801ce76:	9b03      	ldr	r3, [sp, #12]
 801ce78:	f383 8811 	msr	BASEPRI, r3
    }
 801ce7c:	b004      	add	sp, #16
 801ce7e:	4770      	bx	lr

0801ce80 <CUSTOM_STUB_SCB__get_FPCCR>:
#endif /* (__CORTEX_M == 0x04) */


    /*__STATIC_INLINE*/ uint32_t CUSTOM_STUB_SCB__get_FPCCR()
    {
        return *((uint32_t volatile *)0xE000EF34);
 801ce80:	4b01      	ldr	r3, [pc, #4]	; (801ce88 <CUSTOM_STUB_SCB__get_FPCCR+0x8>)
 801ce82:	681b      	ldr	r3, [r3, #0]
    }
 801ce84:	4618      	mov	r0, r3
 801ce86:	4770      	bx	lr
 801ce88:	e000ef34 	.word	0xe000ef34

0801ce8c <CUSTOM_STUB_SCB__set_FPCCR>:

    /*__STATIC_INLINE*/ void CUSTOM_STUB_SCB__set_FPCCR(uint32_t fpscr)
    {
 801ce8c:	b082      	sub	sp, #8
 801ce8e:	9001      	str	r0, [sp, #4]
        *((uint32_t volatile *)0xE000EF34) = fpscr;
 801ce90:	4a02      	ldr	r2, [pc, #8]	; (801ce9c <CUSTOM_STUB_SCB__set_FPCCR+0x10>)
 801ce92:	9b01      	ldr	r3, [sp, #4]
 801ce94:	6013      	str	r3, [r2, #0]
    }
 801ce96:	b002      	add	sp, #8
 801ce98:	4770      	bx	lr
 801ce9a:	bf00      	nop
 801ce9c:	e000ef34 	.word	0xe000ef34

0801cea0 <CUSTOM_STUB_SCB_get_CCR>:
    // CCR
    //

	/*__STATIC_INLINE*/ uint32_t CUSTOM_STUB_SCB_get_CCR()
	{
		return *((uint32_t volatile *)0xE000ED14);
 801cea0:	4b01      	ldr	r3, [pc, #4]	; (801cea8 <CUSTOM_STUB_SCB_get_CCR+0x8>)
 801cea2:	681b      	ldr	r3, [r3, #0]
	}
 801cea4:	4618      	mov	r0, r3
 801cea6:	4770      	bx	lr
 801cea8:	e000ed14 	.word	0xe000ed14

0801ceac <CUSTOM_STUB_SCB_set_CCR>:

    /*__STATIC_INLINE*/ void CUSTOM_STUB_SCB_set_CCR(uint32_t value)
    {
 801ceac:	b082      	sub	sp, #8
 801ceae:	9001      	str	r0, [sp, #4]
        *((uint32_t volatile *)0xE000ED14) = value;
 801ceb0:	4a02      	ldr	r2, [pc, #8]	; (801cebc <CUSTOM_STUB_SCB_set_CCR+0x10>)
 801ceb2:	9b01      	ldr	r3, [sp, #4]
 801ceb4:	6013      	str	r3, [r2, #0]
    }
 801ceb6:	b002      	add	sp, #8
 801ceb8:	4770      	bx	lr
 801ceba:	bf00      	nop
 801cebc:	e000ed14 	.word	0xe000ed14

0801cec0 <CUSTOM_STUB_SCB_SHCRS_EnableSystemHandler>:
    //
    // System Handlers
    // 

    /*__STATIC_INLINE*/ void CUSTOM_STUB_SCB_SHCRS_EnableSystemHandler(uint32_t ex)
    {
 801cec0:	b084      	sub	sp, #16
 801cec2:	9001      	str	r0, [sp, #4]
        uint32_t SHCRS = *((uint32_t volatile *)0xE000ED24);
 801cec4:	4b05      	ldr	r3, [pc, #20]	; (801cedc <CUSTOM_STUB_SCB_SHCRS_EnableSystemHandler+0x1c>)
 801cec6:	681b      	ldr	r3, [r3, #0]
 801cec8:	9303      	str	r3, [sp, #12]

        SHCRS |= ex;
 801ceca:	9a03      	ldr	r2, [sp, #12]
 801cecc:	9b01      	ldr	r3, [sp, #4]
 801cece:	4313      	orrs	r3, r2
 801ced0:	9303      	str	r3, [sp, #12]

        *((uint32_t volatile *)0xE000ED24) = SHCRS;
 801ced2:	4a02      	ldr	r2, [pc, #8]	; (801cedc <CUSTOM_STUB_SCB_SHCRS_EnableSystemHandler+0x1c>)
 801ced4:	9b03      	ldr	r3, [sp, #12]
 801ced6:	6013      	str	r3, [r2, #0]

    }
 801ced8:	b004      	add	sp, #16
 801ceda:	4770      	bx	lr
 801cedc:	e000ed24 	.word	0xe000ed24

0801cee0 <CUSTOM_STUB_SCB_ICSR_RaiseSystemException>:

        *((uint32_t volatile *)0xE000ED24) = SHCRS;
    }

    /*__STATIC_INLINE*/ void CUSTOM_STUB_SCB_ICSR_RaiseSystemException(uint32_t ex)
    {
 801cee0:	b084      	sub	sp, #16
 801cee2:	9001      	str	r0, [sp, #4]
        //
        // Set/Clears system handlers in ICSR register of SCB. 
        // CMSIS does not allow using NVIC api to set/clear System Handlers. 
        //
        uint32_t ICSR = *((uint32_t volatile *)0xE000ED04);
 801cee4:	4b05      	ldr	r3, [pc, #20]	; (801cefc <CUSTOM_STUB_SCB_ICSR_RaiseSystemException+0x1c>)
 801cee6:	681b      	ldr	r3, [r3, #0]
 801cee8:	9303      	str	r3, [sp, #12]

        ICSR |= ex;
 801ceea:	9a03      	ldr	r2, [sp, #12]
 801ceec:	9b01      	ldr	r3, [sp, #4]
 801ceee:	4313      	orrs	r3, r2
 801cef0:	9303      	str	r3, [sp, #12]

        *((uint32_t volatile *)0xE000ED04) = ICSR;
 801cef2:	4a02      	ldr	r2, [pc, #8]	; (801cefc <CUSTOM_STUB_SCB_ICSR_RaiseSystemException+0x1c>)
 801cef4:	9b03      	ldr	r3, [sp, #12]
 801cef6:	6013      	str	r3, [r2, #0]
    }
 801cef8:	b004      	add	sp, #16
 801cefa:	4770      	bx	lr
 801cefc:	e000ed04 	.word	0xe000ed04

0801cf00 <CUSTOM_STUB_SCB_SCR_SetSystemControlRegister>:
    {
        return __get_IPSR() & 0x000000FF;
    }

    /*__STATIC_INLINE*/ void CUSTOM_STUB_SCB_SCR_SetSystemControlRegister(uint32_t scr)
    {
 801cf00:	b082      	sub	sp, #8
 801cf02:	9001      	str	r0, [sp, #4]
        *((uint32_t volatile *)0xE000ED10) = scr;
 801cf04:	4a02      	ldr	r2, [pc, #8]	; (801cf10 <CUSTOM_STUB_SCB_SCR_SetSystemControlRegister+0x10>)
 801cf06:	9b01      	ldr	r3, [sp, #4]
 801cf08:	6013      	str	r3, [r2, #0]
    }
 801cf0a:	b002      	add	sp, #8
 801cf0c:	4770      	bx	lr
 801cf0e:	bf00      	nop
 801cf10:	e000ed10 	.word	0xe000ed10

0801cf14 <CMSIS_STUB_POWER_WaitForEvent>:
    Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
 801cf14:	bf20      	wfe
    }

    /*__STATIC_INLINE*/ void CMSIS_STUB_POWER_WaitForEvent()
    {
        __WFE();
    }
 801cf16:	4770      	bx	lr

0801cf18 <CUSTOM_STUB_RaiseSupervisorCallForLongJump>:
        __WFI();
    }
    
    /*__STATIC_INLINE*/ __attribute__((naked)) __attribute__((aligned(8))) void CUSTOM_STUB_RaiseSupervisorCallForLongJump()
    {
        __ASM volatile ("svc #17");
 801cf18:	df11      	svc	17
 801cf1a:	bf00      	nop
 801cf1c:	0000      	movs	r0, r0
	...

0801cf20 <CUSTOM_STUB_RaiseSupervisorCallForStartThreads>:
    }

    /*__STATIC_INLINE*/ __attribute__((naked)) __attribute__((aligned(8))) void CUSTOM_STUB_RaiseSupervisorCallForStartThreads()
    {
        __ASM volatile ("svc #18");
 801cf20:	df12      	svc	18
 801cf22:	bf00      	nop
 801cf24:	0000      	movs	r0, r0
	...

0801cf28 <CUSTOM_STUB_RaiseSupervisorCallForRetireThread>:
    }

    /*__STATIC_INLINE*/ __attribute__((naked)) __attribute__((aligned(8))) void CUSTOM_STUB_RaiseSupervisorCallForRetireThread()
    {
        __ASM volatile ("svc #19");
 801cf28:	df13      	svc	19
 801cf2a:	bf00      	nop

0801cf2c <PendSV_Handler>:
    //
    uint32_t fp_ctx_active = 0x0;

    __attribute__((naked)) void PendSV_Handler(void)
    {
        __ASM volatile ("MRS      R0, PSP");                // Save current process stack pointer value into R0
 801cf2c:	f3ef 8009 	mrs	r0, PSP

#if __FPU_USED != 0
        __ASM volatile ("TST      LR, #0x10");              // When bit 4 in LR is zero (0), we need to stack FP registers as well 
 801cf30:	f01e 0f10 	tst.w	lr, #16
        __ASM volatile ("IT       EQ");        
 801cf34:	bf08      	it	eq
        __ASM volatile ("VSTMDBEQ R0!, {S16-S31}");
 801cf36:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}

        __ASM volatile ("MOV      R1, %0" : /*output*/ : "r"(&fp_ctx_active));  // signal FP context active
 801cf3a:	4b12      	ldr	r3, [pc, #72]	; (801cf84 <PendSV_Handler+0x58>)
 801cf3c:	4619      	mov	r1, r3

        __ASM volatile ("ITE      EQ");
 801cf3e:	bf0c      	ite	eq
        __ASM volatile ("MOVEQ    R2, #1");
 801cf40:	2201      	moveq	r2, #1
        __ASM volatile ("MOVNE    R2, #0");
 801cf42:	2200      	movne	r2, #0

        __ASM volatile ("STR      R2, [R1]");
 801cf44:	600a      	str	r2, [r1, #0]
#endif

        __ASM volatile ("MOV      R2, LR");                  // Save LR and CONTROL, to save the status and privilege/stack mode
 801cf46:	4672      	mov	r2, lr
        __ASM volatile ("MRS      R3, CONTROL");
 801cf48:	f3ef 8314 	mrs	r3, CONTROL

        __ASM volatile ("STMDB    R0!, {R2-R11}");           // Stack the SW stack frame, a total of 10 registers, including R2/3
 801cf4c:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}

#if __FPU_USED != 0
        fp_ctx_active ?                                      // Perform context switch, practically setting the stack pointer for the next task
            PendSV_Handler_Zelig_VFP_FullFPContext() :
            PendSV_Handler_Zelig_VFP_NoFPContext  () ;          
 801cf50:	4b0c      	ldr	r3, [pc, #48]	; (801cf84 <PendSV_Handler+0x58>)
 801cf52:	681b      	ldr	r3, [r3, #0]
 801cf54:	2b00      	cmp	r3, #0
 801cf56:	d002      	beq.n	801cf5e <PendSV_Handler+0x32>

        __ASM volatile ("STMDB    R0!, {R2-R11}");           // Stack the SW stack frame, a total of 10 registers, including R2/3

#if __FPU_USED != 0
        fp_ctx_active ?                                      // Perform context switch, practically setting the stack pointer for the next task
            PendSV_Handler_Zelig_VFP_FullFPContext() :
 801cf58:	f7ee f8d0 	bl	800b0fc <PendSV_Handler_Zelig_VFP_FullFPContext>
 801cf5c:	e001      	b.n	801cf62 <PendSV_Handler+0x36>
            PendSV_Handler_Zelig_VFP_NoFPContext  () ;          
 801cf5e:	f7ee f8ed 	bl	800b13c <PendSV_Handler_Zelig_VFP_NoFPContext>
#else
        PendSV_Handler_Zelig();                              // Perform context switch, practically setting the stack pointer for the next task
#endif

        __ASM volatile ("MRS      R0 , psp");                // Retrivee next process stack pointer, as set by the PendSV_Handler_Zelig() call 
 801cf62:	f3ef 8009 	mrs	r0, PSP

        __ASM volatile ("LDMIA    R0!, {R2-R11}");           // Unstack the next tasks state
 801cf66:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}

        __ASM volatile ("MOV      LR, R2");                  // Restore LR and CONTROL, to restore the status and privilege/stack mode
 801cf6a:	4696      	mov	lr, r2
        __ASM volatile ("MSR      CONTROL, R3");
 801cf6c:	f383 8814 	msr	CONTROL, r3
        __ASM volatile ("ISB");                              // architectural recommendation, always use ISB after updatign control register
 801cf70:	f3bf 8f6f 	isb	sy

#if __FPU_USED != 0
        __ASM volatile ("TST      LR, #0x10");               // When bit 4 in LR is zero (0), we need to stack FP registers as well 
 801cf74:	f01e 0f10 	tst.w	lr, #16
        __ASM volatile ("IT       EQ");
 801cf78:	bf08      	it	eq
        __ASM volatile ("VLDMIAEQ R0!, {S16-S31}");
 801cf7a:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
#endif

        __ASM volatile ("MSR      PSP, R0");                 // update stack pointer to correct location after unstacking 
 801cf7e:	f380 8809 	msr	PSP, r0

        __ASM volatile ("BX       LR");
 801cf82:	4770      	bx	lr
 801cf84:	200017fc 	.word	0x200017fc

0801cf88 <CUSTOM_STUB_SetExcReturn>:
    // Initialized to crash, as the Thread Manager needs to set it right
    //
    uint32_t svc_exc_return = 0xDEADBEEF; 

    void CUSTOM_STUB_SetExcReturn(uint32_t ret)
    {
 801cf88:	b082      	sub	sp, #8
 801cf8a:	9001      	str	r0, [sp, #4]
        svc_exc_return = ret; 
 801cf8c:	4a02      	ldr	r2, [pc, #8]	; (801cf98 <CUSTOM_STUB_SetExcReturn+0x10>)
 801cf8e:	9b01      	ldr	r3, [sp, #4]
 801cf90:	6013      	str	r3, [r2, #0]
    }
 801cf92:	b002      	add	sp, #8
 801cf94:	4770      	bx	lr
 801cf96:	bf00      	nop
 801cf98:	2000171c 	.word	0x2000171c

0801cf9c <SVC_Handler>:

    __attribute__((naked)) void SVC_Handler(void)
    {    
        __ASM volatile ("TST    LR, #0x4");                 // Test bit 3 to use decide which stack pointer we are coming from 
 801cf9c:	f01e 0f04 	tst.w	lr, #4
        __ASM volatile ("ITE    EQ");        
 801cfa0:	bf0c      	ite	eq
        __ASM volatile ("MRSEQ  R0, msp");
 801cfa2:	f3ef 8008 	mrseq	r0, MSP
        __ASM volatile ("MRSNE  R0, psp");
 801cfa6:	f3ef 8009 	mrsne	r0, PSP

        __ASM volatile ("MOV    R1, %0" : /*output*/ : "r"(&svc_exc_return) );
 801cfaa:	4b05      	ldr	r3, [pc, #20]	; (801cfc0 <SVC_Handler+0x24>)
 801cfac:	4619      	mov	r1, r3
        __ASM volatile ("STR    LR, [R1]");
 801cfae:	f8c1 e000 	str.w	lr, [r1]

#if __FPU_USED != 0
        SVC_Handler_Zelig_VFP_NoFPContext();
 801cfb2:	f7ee f877 	bl	800b0a4 <SVC_Handler_Zelig_VFP_NoFPContext>
#else
        SVC_Handler_Zelig();
#endif

        __ASM volatile ("MOV    R1, %0" : /*output*/ : "r"(&svc_exc_return));
 801cfb6:	4b02      	ldr	r3, [pc, #8]	; (801cfc0 <SVC_Handler+0x24>)
 801cfb8:	4619      	mov	r1, r3
        __ASM volatile ("LDR    LR, [R1]");
 801cfba:	f8d1 e000 	ldr.w	lr, [r1]

        __ASM volatile ("BX     LR");
 801cfbe:	4770      	bx	lr
 801cfc0:	2000171c 	.word	0x2000171c

0801cfc4 <CUSTOM_STUB_GetFPContextFlag>:
        *((uint32_t volatile *)0x4000D000) = CESR;
    }

    uint32_t CUSTOM_STUB_GetFPContextFlag()
    {
        return fp_ctx_active;
 801cfc4:	4b01      	ldr	r3, [pc, #4]	; (801cfcc <CUSTOM_STUB_GetFPContextFlag+0x8>)
 801cfc6:	681b      	ldr	r3, [r3, #0]
    }
 801cfc8:	4618      	mov	r0, r3
 801cfca:	4770      	bx	lr
 801cfcc:	200017fc 	.word	0x200017fc

0801cfd0 <Break>:
        __builtin_trap();
    }

    void Break()
    {
        asm("bkpt");
 801cfd0:	be00      	bkpt	0x0000
    }
 801cfd2:	4770      	bx	lr

0801cfd4 <Breakpoint>:

    // placing this outside the BreakPoint() function to avoid compiler unused var warning
    volatile uint32_t valueToWatch;
    void Breakpoint(unsigned n)
    {
 801cfd4:	b500      	push	{lr}
 801cfd6:	b083      	sub	sp, #12
 801cfd8:	9001      	str	r0, [sp, #4]
        valueToWatch = n;
 801cfda:	4a04      	ldr	r2, [pc, #16]	; (801cfec <Breakpoint+0x18>)
 801cfdc:	9b01      	ldr	r3, [sp, #4]
 801cfde:	6013      	str	r3, [r2, #0]

        Break();
 801cfe0:	f7ff fff6 	bl	801cfd0 <Break>
    }
 801cfe4:	b003      	add	sp, #12
 801cfe6:	f85d fb04 	ldr.w	pc, [sp], #4
 801cfea:	bf00      	nop
 801cfec:	20001800 	.word	0x20001800

0801cff0 <Nop>:

    void Nop()
    {
        asm("nop");
 801cff0:	bf00      	nop
    }
 801cff2:	4770      	bx	lr

0801cff4 <ConvertToCharString>:
    //

#define MAXLOGSTRINGSIZE 256

    void ConvertToCharString(char* output, const uint16_t* input, const uint32_t length)
    {
 801cff4:	b086      	sub	sp, #24
 801cff6:	9003      	str	r0, [sp, #12]
 801cff8:	9102      	str	r1, [sp, #8]
 801cffa:	9201      	str	r2, [sp, #4]
        for (unsigned i = 0; i < length; i++)
 801cffc:	2300      	movs	r3, #0
 801cffe:	9305      	str	r3, [sp, #20]
 801d000:	e016      	b.n	801d030 <ConvertToCharString+0x3c>
        {
            uint16_t ch = input[i];
 801d002:	9b05      	ldr	r3, [sp, #20]
 801d004:	005b      	lsls	r3, r3, #1
 801d006:	9a02      	ldr	r2, [sp, #8]
 801d008:	4413      	add	r3, r2
 801d00a:	881b      	ldrh	r3, [r3, #0]
 801d00c:	f8ad 3012 	strh.w	r3, [sp, #18]
            output[i] = (ch > 0xFF) ? '?' : (char)ch;
 801d010:	9a03      	ldr	r2, [sp, #12]
 801d012:	9b05      	ldr	r3, [sp, #20]
 801d014:	4413      	add	r3, r2
 801d016:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801d01a:	2aff      	cmp	r2, #255	; 0xff
 801d01c:	d803      	bhi.n	801d026 <ConvertToCharString+0x32>
 801d01e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801d022:	b2d2      	uxtb	r2, r2
 801d024:	e000      	b.n	801d028 <ConvertToCharString+0x34>
 801d026:	223f      	movs	r2, #63	; 0x3f
 801d028:	701a      	strb	r2, [r3, #0]

#define MAXLOGSTRINGSIZE 256

    void ConvertToCharString(char* output, const uint16_t* input, const uint32_t length)
    {
        for (unsigned i = 0; i < length; i++)
 801d02a:	9b05      	ldr	r3, [sp, #20]
 801d02c:	3301      	adds	r3, #1
 801d02e:	9305      	str	r3, [sp, #20]
 801d030:	9a05      	ldr	r2, [sp, #20]
 801d032:	9b01      	ldr	r3, [sp, #4]
 801d034:	429a      	cmp	r2, r3
 801d036:	d3e4      	bcc.n	801d002 <ConvertToCharString+0xe>
        {
            uint16_t ch = input[i];
            output[i] = (ch > 0xFF) ? '?' : (char)ch;
        }
    }
 801d038:	b006      	add	sp, #24
 801d03a:	4770      	bx	lr

0801d03c <DebugLogPrint>:

    void DebugLogPrint(char* message)
    {
 801d03c:	b082      	sub	sp, #8
 801d03e:	9001      	str	r0, [sp, #4]
            printf "DebugLog: %s\n", message
            cont
            end

        */
    }
 801d040:	b002      	add	sp, #8
 801d042:	4770      	bx	lr

0801d044 <DebugLog0>:

    void DebugLog0(uint16_t* message, uint32_t length)
    {
 801d044:	b500      	push	{lr}
 801d046:	b0c3      	sub	sp, #268	; 0x10c
 801d048:	ab01      	add	r3, sp, #4
 801d04a:	6018      	str	r0, [r3, #0]
 801d04c:	466b      	mov	r3, sp
 801d04e:	6019      	str	r1, [r3, #0]
        char buffer[MAXLOGSTRINGSIZE];
        if (length < MAXLOGSTRINGSIZE)
 801d050:	466b      	mov	r3, sp
 801d052:	681b      	ldr	r3, [r3, #0]
 801d054:	2bff      	cmp	r3, #255	; 0xff
 801d056:	d812      	bhi.n	801d07e <DebugLog0+0x3a>
        {
            ConvertToCharString(buffer, message, length);
 801d058:	a902      	add	r1, sp, #8
 801d05a:	aa01      	add	r2, sp, #4
 801d05c:	466b      	mov	r3, sp
 801d05e:	4608      	mov	r0, r1
 801d060:	6811      	ldr	r1, [r2, #0]
 801d062:	681a      	ldr	r2, [r3, #0]
 801d064:	f7ff ffc6 	bl	801cff4 <ConvertToCharString>
            buffer[length] = '\0';
 801d068:	aa02      	add	r2, sp, #8
 801d06a:	466b      	mov	r3, sp
 801d06c:	681b      	ldr	r3, [r3, #0]
 801d06e:	4413      	add	r3, r2
 801d070:	2200      	movs	r2, #0
 801d072:	701a      	strb	r2, [r3, #0]

            DebugLogPrint(buffer);
 801d074:	ab02      	add	r3, sp, #8
 801d076:	4618      	mov	r0, r3
 801d078:	f7ff ffe0 	bl	801d03c <DebugLogPrint>
 801d07c:	e002      	b.n	801d084 <DebugLog0+0x40>
        }
        else
        {
            DebugLogPrint((char*)"ERROR: MAXLOGSTRINGSIZE exceeded");
 801d07e:	4803      	ldr	r0, [pc, #12]	; (801d08c <DebugLog0+0x48>)
 801d080:	f7ff ffdc 	bl	801d03c <DebugLogPrint>
        }
    }
 801d084:	b043      	add	sp, #268	; 0x10c
 801d086:	f85d fb04 	ldr.w	pc, [sp], #4
 801d08a:	bf00      	nop
 801d08c:	08026cc0 	.word	0x08026cc0

0801d090 <DebugLog1>:

    void DebugLog1(uint16_t* message, uint32_t length, int32_t p1)
    {
 801d090:	b500      	push	{lr}
 801d092:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 801d096:	ab03      	add	r3, sp, #12
 801d098:	6018      	str	r0, [r3, #0]
 801d09a:	ab02      	add	r3, sp, #8
 801d09c:	6019      	str	r1, [r3, #0]
 801d09e:	ab01      	add	r3, sp, #4
 801d0a0:	601a      	str	r2, [r3, #0]
        char buffer[MAXLOGSTRINGSIZE];
        if (length < MAXLOGSTRINGSIZE)
 801d0a2:	ab02      	add	r3, sp, #8
 801d0a4:	681b      	ldr	r3, [r3, #0]
 801d0a6:	2bff      	cmp	r3, #255	; 0xff
 801d0a8:	d81b      	bhi.n	801d0e2 <DebugLog1+0x52>
        {
            ConvertToCharString(buffer, message, length);
 801d0aa:	a904      	add	r1, sp, #16
 801d0ac:	aa03      	add	r2, sp, #12
 801d0ae:	ab02      	add	r3, sp, #8
 801d0b0:	4608      	mov	r0, r1
 801d0b2:	6811      	ldr	r1, [r2, #0]
 801d0b4:	681a      	ldr	r2, [r3, #0]
 801d0b6:	f7ff ff9d 	bl	801cff4 <ConvertToCharString>
            buffer[length] = '\0';
 801d0ba:	aa04      	add	r2, sp, #16
 801d0bc:	ab02      	add	r3, sp, #8
 801d0be:	681b      	ldr	r3, [r3, #0]
 801d0c0:	4413      	add	r3, r2
 801d0c2:	2200      	movs	r2, #0
 801d0c4:	701a      	strb	r2, [r3, #0]
            {
                char buffer2[MAXLOGSTRINGSIZE];
                snprintf(buffer2, MAXLOGSTRINGSIZE, buffer, p1);
 801d0c6:	a944      	add	r1, sp, #272	; 0x110
 801d0c8:	aa04      	add	r2, sp, #16
 801d0ca:	ab01      	add	r3, sp, #4
 801d0cc:	4608      	mov	r0, r1
 801d0ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 801d0d2:	681b      	ldr	r3, [r3, #0]
 801d0d4:	f004 f9e8 	bl	80214a8 <sniprintf>
                DebugLogPrint(buffer2);
 801d0d8:	ab44      	add	r3, sp, #272	; 0x110
 801d0da:	4618      	mov	r0, r3
 801d0dc:	f7ff ffae 	bl	801d03c <DebugLogPrint>
 801d0e0:	e002      	b.n	801d0e8 <DebugLog1+0x58>
            }
        }
        else
        {
            DebugLogPrint((char*)"ERROR: MAXLOGSTRINGSIZE exceeded");
 801d0e2:	4803      	ldr	r0, [pc, #12]	; (801d0f0 <DebugLog1+0x60>)
 801d0e4:	f7ff ffaa 	bl	801d03c <DebugLogPrint>
        }
    }
 801d0e8:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
 801d0ec:	f85d fb04 	ldr.w	pc, [sp], #4
 801d0f0:	08026cc0 	.word	0x08026cc0

0801d0f4 <CUSTOM_STUB_DebuggerConnected>:
    // Faults and Diagnostic
    //

    uint32_t CUSTOM_STUB_DebuggerConnected()
    {
        return (CoreDebug->DHCSR & 0x00000001); 
 801d0f4:	4b02      	ldr	r3, [pc, #8]	; (801d100 <CUSTOM_STUB_DebuggerConnected+0xc>)
 801d0f6:	681b      	ldr	r3, [r3, #0]
 801d0f8:	f003 0301 	and.w	r3, r3, #1
    }
 801d0fc:	4618      	mov	r0, r3
 801d0fe:	4770      	bx	lr
 801d100:	e000edf0 	.word	0xe000edf0

0801d104 <CUSTOM_STUB_SCB__get_CFSR>:
        return 0;
    }

    uint32_t CUSTOM_STUB_SCB__get_CFSR()
    {
        return *((uint32_t volatile *)0xE000ED28);
 801d104:	4b01      	ldr	r3, [pc, #4]	; (801d10c <CUSTOM_STUB_SCB__get_CFSR+0x8>)
 801d106:	681b      	ldr	r3, [r3, #0]
    }
 801d108:	4618      	mov	r0, r3
 801d10a:	4770      	bx	lr
 801d10c:	e000ed28 	.word	0xe000ed28

0801d110 <CUSTOM_STUB_SCB__get_HFSR>:

    uint32_t CUSTOM_STUB_SCB__get_HFSR()
    {
        return *((uint32_t volatile *)0xE000ED2C);
 801d110:	4b01      	ldr	r3, [pc, #4]	; (801d118 <CUSTOM_STUB_SCB__get_HFSR+0x8>)
 801d112:	681b      	ldr	r3, [r3, #0]
    }
 801d114:	4618      	mov	r0, r3
 801d116:	4770      	bx	lr
 801d118:	e000ed2c 	.word	0xe000ed2c

0801d11c <CUSTOM_STUB_SCB__get_BFAR>:
        return *((uint32_t volatile *)0xE000ED34);
    }

    uint32_t CUSTOM_STUB_SCB__get_BFAR()
    {
        return *((uint32_t volatile *)0xE000ED38);
 801d11c:	4b01      	ldr	r3, [pc, #4]	; (801d124 <CUSTOM_STUB_SCB__get_BFAR+0x8>)
 801d11e:	681b      	ldr	r3, [r3, #0]
    }
 801d120:	4618      	mov	r0, r3
 801d122:	4770      	bx	lr
 801d124:	e000ed38 	.word	0xe000ed38

0801d128 <BusFault_Handler>:

    extern void Generic_FaultHandler_Zelig();

    __attribute__((naked)) void BusFault_Handler(void)
    {
        __ASM volatile ("TST    LR, #0x4");                 // Test bit 3 to use decide which stack pointer we are coming from 
 801d128:	f01e 0f04 	tst.w	lr, #4
        __ASM volatile ("ITE    EQ");
 801d12c:	bf0c      	ite	eq
        __ASM volatile ("MRSEQ  R0, msp");
 801d12e:	f3ef 8008 	mrseq	r0, MSP
        __ASM volatile ("MRSNE  R0, psp");
 801d132:	f3ef 8009 	mrsne	r0, PSP

        Generic_FaultHandler_Zelig();
 801d136:	f7e8 fda7 	bl	8005c88 <Generic_FaultHandler_Zelig>

        __ASM volatile ("BX     LR");
 801d13a:	4770      	bx	lr

0801d13c <gpio_write>:
    __IO uint32_t *reg_in;
    __IO uint32_t *reg_set_clr;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
 801d13c:	b500      	push	{lr}
 801d13e:	b083      	sub	sp, #12
 801d140:	9001      	str	r0, [sp, #4]
 801d142:	9100      	str	r1, [sp, #0]
    MBED_ASSERT(obj->pin != (PinName)NC);
 801d144:	9b01      	ldr	r3, [sp, #4]
 801d146:	881b      	ldrh	r3, [r3, #0]
 801d148:	b21b      	sxth	r3, r3
 801d14a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d14e:	d104      	bne.n	801d15a <gpio_write+0x1e>
 801d150:	480b      	ldr	r0, [pc, #44]	; (801d180 <gpio_write+0x44>)
 801d152:	490c      	ldr	r1, [pc, #48]	; (801d184 <gpio_write+0x48>)
 801d154:	2234      	movs	r2, #52	; 0x34
 801d156:	f002 fc79 	bl	801fa4c <mbed_assert_internal>
    if (value) {
 801d15a:	9b00      	ldr	r3, [sp, #0]
 801d15c:	2b00      	cmp	r3, #0
 801d15e:	d005      	beq.n	801d16c <gpio_write+0x30>
        *obj->reg_set_clr = obj->mask;
 801d160:	9b01      	ldr	r3, [sp, #4]
 801d162:	68db      	ldr	r3, [r3, #12]
 801d164:	9a01      	ldr	r2, [sp, #4]
 801d166:	6852      	ldr	r2, [r2, #4]
 801d168:	601a      	str	r2, [r3, #0]
 801d16a:	e005      	b.n	801d178 <gpio_write+0x3c>
    } else {
        *obj->reg_set_clr = obj->mask << 16;
 801d16c:	9b01      	ldr	r3, [sp, #4]
 801d16e:	68db      	ldr	r3, [r3, #12]
 801d170:	9a01      	ldr	r2, [sp, #4]
 801d172:	6852      	ldr	r2, [r2, #4]
 801d174:	0412      	lsls	r2, r2, #16
 801d176:	601a      	str	r2, [r3, #0]
    }
}
 801d178:	b003      	add	sp, #12
 801d17a:	f85d fb04 	ldr.w	pc, [sp], #4
 801d17e:	bf00      	nop
 801d180:	08026ce4 	.word	0x08026ce4
 801d184:	08026cfc 	.word	0x08026cfc

0801d188 <tmp_gpio_write>:

extern "C"
{

	void tmp_gpio_write(gpio_t *obj, int32_t value)
	{
 801d188:	b500      	push	{lr}
 801d18a:	b083      	sub	sp, #12
 801d18c:	9001      	str	r0, [sp, #4]
 801d18e:	9100      	str	r1, [sp, #0]
		gpio_write(obj, value);
 801d190:	9801      	ldr	r0, [sp, #4]
 801d192:	9900      	ldr	r1, [sp, #0]
 801d194:	f7ff ffd2 	bl	801d13c <gpio_write>
	}
 801d198:	b003      	add	sp, #12
 801d19a:	f85d fb04 	ldr.w	pc, [sp], #4
 801d19e:	bf00      	nop

0801d1a0 <tmp_gpio_alloc>:
	{
		return gpio_read(obj);
	}

	void tmp_gpio_alloc(gpio_t **obj)
	{
 801d1a0:	b500      	push	{lr}
 801d1a2:	b083      	sub	sp, #12
 801d1a4:	9001      	str	r0, [sp, #4]
		*obj = (gpio_t*)calloc(sizeof(gpio_t), 1);
 801d1a6:	2010      	movs	r0, #16
 801d1a8:	2101      	movs	r1, #1
 801d1aa:	f002 febf 	bl	801ff2c <calloc>
 801d1ae:	4603      	mov	r3, r0
 801d1b0:	461a      	mov	r2, r3
 801d1b2:	9b01      	ldr	r3, [sp, #4]
 801d1b4:	601a      	str	r2, [r3, #0]
	}
 801d1b6:	b003      	add	sp, #12
 801d1b8:	f85d fb04 	ldr.w	pc, [sp], #4

0801d1bc <tmp_gpio_init>:

	void tmp_gpio_init(gpio_t *obj, int32_t pinNumber)
	{
 801d1bc:	b500      	push	{lr}
 801d1be:	b083      	sub	sp, #12
 801d1c0:	9001      	str	r0, [sp, #4]
 801d1c2:	9100      	str	r1, [sp, #0]
		// Defaulting to input for gpio pins
		gpio_init_in(obj, (PinName)pinNumber);
 801d1c4:	9b00      	ldr	r3, [sp, #0]
 801d1c6:	b29b      	uxth	r3, r3
 801d1c8:	b21b      	sxth	r3, r3
 801d1ca:	9801      	ldr	r0, [sp, #4]
 801d1cc:	4619      	mov	r1, r3
 801d1ce:	f002 fc7d 	bl	801facc <gpio_init_in>
	}
 801d1d2:	b003      	add	sp, #12
 801d1d4:	f85d fb04 	ldr.w	pc, [sp], #4

0801d1d8 <tmp_gpio_free>:

	void tmp_gpio_free(gpio_t *obj)
	{
 801d1d8:	b500      	push	{lr}
 801d1da:	b083      	sub	sp, #12
 801d1dc:	9001      	str	r0, [sp, #4]
		free(obj);
 801d1de:	9801      	ldr	r0, [sp, #4]
 801d1e0:	f003 f87e 	bl	80202e0 <free>
	}
 801d1e4:	b003      	add	sp, #12
 801d1e6:	f85d fb04 	ldr.w	pc, [sp], #4
 801d1ea:	bf00      	nop

0801d1ec <tmp_gpio_dir>:

	void tmp_gpio_dir(gpio_t *obj, int32_t dir)
	{
 801d1ec:	b500      	push	{lr}
 801d1ee:	b083      	sub	sp, #12
 801d1f0:	9001      	str	r0, [sp, #4]
 801d1f2:	9100      	str	r1, [sp, #0]
		gpio_dir(obj, (PinDirection)dir);
 801d1f4:	9b00      	ldr	r3, [sp, #0]
 801d1f6:	b2db      	uxtb	r3, r3
 801d1f8:	9801      	ldr	r0, [sp, #4]
 801d1fa:	4619      	mov	r1, r3
 801d1fc:	f001 fe26 	bl	801ee4c <gpio_dir>
	}
 801d200:	b003      	add	sp, #12
 801d202:	f85d fb04 	ldr.w	pc, [sp], #4
 801d206:	bf00      	nop

0801d208 <tmp_gpio_mode>:

	void tmp_gpio_mode(gpio_t *obj, int32_t mode)
	{
 801d208:	b500      	push	{lr}
 801d20a:	b083      	sub	sp, #12
 801d20c:	9001      	str	r0, [sp, #4]
 801d20e:	9100      	str	r1, [sp, #0]
		gpio_mode(obj, (PinMode)mode);
 801d210:	9b00      	ldr	r3, [sp, #0]
 801d212:	b2db      	uxtb	r3, r3
 801d214:	9801      	ldr	r0, [sp, #4]
 801d216:	4619      	mov	r1, r3
 801d218:	f001 fe06 	bl	801ee28 <gpio_mode>
	}
 801d21c:	b003      	add	sp, #12
 801d21e:	f85d fb04 	ldr.w	pc, [sp], #4
 801d222:	bf00      	nop

0801d224 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801d224:	b084      	sub	sp, #16
 801d226:	9001      	str	r0, [sp, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801d228:	9b01      	ldr	r3, [sp, #4]
 801d22a:	f003 0307 	and.w	r3, r3, #7
 801d22e:	9303      	str	r3, [sp, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801d230:	4b0a      	ldr	r3, [pc, #40]	; (801d25c <NVIC_SetPriorityGrouping+0x38>)
 801d232:	68db      	ldr	r3, [r3, #12]
 801d234:	9302      	str	r3, [sp, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 801d236:	9a02      	ldr	r2, [sp, #8]
 801d238:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801d23c:	4013      	ands	r3, r2
 801d23e:	9302      	str	r3, [sp, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
 801d240:	9b03      	ldr	r3, [sp, #12]
 801d242:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801d244:	9b02      	ldr	r3, [sp, #8]
 801d246:	4313      	orrs	r3, r2
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
 801d248:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 801d24c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801d250:	9302      	str	r3, [sp, #8]
  SCB->AIRCR =  reg_value;
 801d252:	4a02      	ldr	r2, [pc, #8]	; (801d25c <NVIC_SetPriorityGrouping+0x38>)
 801d254:	9b02      	ldr	r3, [sp, #8]
 801d256:	60d3      	str	r3, [r2, #12]
}
 801d258:	b004      	add	sp, #16
 801d25a:	4770      	bx	lr
 801d25c:	e000ed00 	.word	0xe000ed00

0801d260 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801d260:	b082      	sub	sp, #8
 801d262:	4603      	mov	r3, r0
 801d264:	9100      	str	r1, [sp, #0]
 801d266:	f88d 3007 	strb.w	r3, [sp, #7]
  if((int32_t)IRQn < 0) {
 801d26a:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 801d26e:	2b00      	cmp	r3, #0
 801d270:	da0c      	bge.n	801d28c <NVIC_SetPriority+0x2c>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801d272:	490c      	ldr	r1, [pc, #48]	; (801d2a4 <NVIC_SetPriority+0x44>)
 801d274:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801d278:	f003 030f 	and.w	r3, r3, #15
 801d27c:	3b04      	subs	r3, #4
 801d27e:	9a00      	ldr	r2, [sp, #0]
 801d280:	b2d2      	uxtb	r2, r2
 801d282:	0112      	lsls	r2, r2, #4
 801d284:	b2d2      	uxtb	r2, r2
 801d286:	440b      	add	r3, r1
 801d288:	761a      	strb	r2, [r3, #24]
 801d28a:	e009      	b.n	801d2a0 <NVIC_SetPriority+0x40>
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801d28c:	4906      	ldr	r1, [pc, #24]	; (801d2a8 <NVIC_SetPriority+0x48>)
 801d28e:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 801d292:	9a00      	ldr	r2, [sp, #0]
 801d294:	b2d2      	uxtb	r2, r2
 801d296:	0112      	lsls	r2, r2, #4
 801d298:	b2d2      	uxtb	r2, r2
 801d29a:	440b      	add	r3, r1
 801d29c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 801d2a0:	b002      	add	sp, #8
 801d2a2:	4770      	bx	lr
 801d2a4:	e000ed00 	.word	0xe000ed00
 801d2a8:	e000e100 	.word	0xe000e100

0801d2ac <CMSIS_STUB_NVIC_SetPriorityGrouping>:
	//
	// NVIC
	//

	/*__STATIC_INLINE*/ void CMSIS_STUB_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
	{
 801d2ac:	b500      	push	{lr}
 801d2ae:	b083      	sub	sp, #12
 801d2b0:	9001      	str	r0, [sp, #4]
		NVIC_SetPriorityGrouping(PriorityGroup);
 801d2b2:	9801      	ldr	r0, [sp, #4]
 801d2b4:	f7ff ffb6 	bl	801d224 <NVIC_SetPriorityGrouping>
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
 801d2b8:	f3bf 8f6f 	isb	sy
		__ISB(); // always emit a barrier 
	}
 801d2bc:	b003      	add	sp, #12
 801d2be:	f85d fb04 	ldr.w	pc, [sp], #4
 801d2c2:	bf00      	nop

0801d2c4 <CMSIS_STUB_NVIC_SetPriority>:
	{
		return NVIC_GetActive(IRQn);
	}

	/*__STATIC_INLINE*/ void CMSIS_STUB_NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
	{
 801d2c4:	b500      	push	{lr}
 801d2c6:	b083      	sub	sp, #12
 801d2c8:	4603      	mov	r3, r0
 801d2ca:	9100      	str	r1, [sp, #0]
 801d2cc:	f88d 3007 	strb.w	r3, [sp, #7]
		NVIC_SetPriority(IRQn, priority);
 801d2d0:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 801d2d4:	4618      	mov	r0, r3
 801d2d6:	9900      	ldr	r1, [sp, #0]
 801d2d8:	f7ff ffc2 	bl	801d260 <NVIC_SetPriority>
 801d2dc:	f3bf 8f6f 	isb	sy
		__ISB(); // always emit a barrier 
	}
 801d2e0:	b003      	add	sp, #12
 801d2e2:	f85d fb04 	ldr.w	pc, [sp], #4
 801d2e6:	bf00      	nop

0801d2e8 <tmp_spi_format>:
	{
		return spi_master_write(obj, value);
	}

	void tmp_spi_format(spi_t* obj, int32_t bits, int32_t mode, int32_t slave)
	{
 801d2e8:	b500      	push	{lr}
 801d2ea:	b085      	sub	sp, #20
 801d2ec:	9003      	str	r0, [sp, #12]
 801d2ee:	9102      	str	r1, [sp, #8]
 801d2f0:	9201      	str	r2, [sp, #4]
 801d2f2:	9300      	str	r3, [sp, #0]
		spi_format(obj, bits, mode, slave);
 801d2f4:	9803      	ldr	r0, [sp, #12]
 801d2f6:	9902      	ldr	r1, [sp, #8]
 801d2f8:	9a01      	ldr	r2, [sp, #4]
 801d2fa:	9b00      	ldr	r3, [sp, #0]
 801d2fc:	f002 fa34 	bl	801f768 <spi_format>
	}
 801d300:	b005      	add	sp, #20
 801d302:	f85d fb04 	ldr.w	pc, [sp], #4
 801d306:	bf00      	nop

0801d308 <tmp_spi_frequency>:

	void tmp_spi_frequency(spi_t* obj, int32_t hz)
	{
 801d308:	b500      	push	{lr}
 801d30a:	b083      	sub	sp, #12
 801d30c:	9001      	str	r0, [sp, #4]
 801d30e:	9100      	str	r1, [sp, #0]
		spi_frequency(obj, hz);
 801d310:	9801      	ldr	r0, [sp, #4]
 801d312:	9900      	ldr	r1, [sp, #0]
 801d314:	f002 fa7a 	bl	801f80c <spi_frequency>
	}
 801d318:	b003      	add	sp, #12
 801d31a:	f85d fb04 	ldr.w	pc, [sp], #4
 801d31e:	bf00      	nop

0801d320 <tmp_spi_alloc>:

	void tmp_spi_alloc(spi_t** obj)
	{
 801d320:	b500      	push	{lr}
 801d322:	b083      	sub	sp, #12
 801d324:	9001      	str	r0, [sp, #4]
		*obj = (spi_t*)calloc(sizeof(spi_t), 1);
 801d326:	2024      	movs	r0, #36	; 0x24
 801d328:	2101      	movs	r1, #1
 801d32a:	f002 fdff 	bl	801ff2c <calloc>
 801d32e:	4603      	mov	r3, r0
 801d330:	461a      	mov	r2, r3
 801d332:	9b01      	ldr	r3, [sp, #4]
 801d334:	601a      	str	r2, [r3, #0]
	}
 801d336:	b003      	add	sp, #12
 801d338:	f85d fb04 	ldr.w	pc, [sp], #4

0801d33c <tmp_spi_init>:
	{
		free(obj);
	}

	void tmp_spi_init(spi_t* obj, int32_t mosi, int32_t miso, int32_t scl, int32_t cs)
	{
 801d33c:	b510      	push	{r4, lr}
 801d33e:	b086      	sub	sp, #24
 801d340:	9005      	str	r0, [sp, #20]
 801d342:	9104      	str	r1, [sp, #16]
 801d344:	9203      	str	r2, [sp, #12]
 801d346:	9302      	str	r3, [sp, #8]
		spi_init(obj, (PinName)mosi, (PinName)miso, (PinName)scl, (PinName)cs);
 801d348:	9b04      	ldr	r3, [sp, #16]
 801d34a:	b299      	uxth	r1, r3
 801d34c:	9b03      	ldr	r3, [sp, #12]
 801d34e:	b29a      	uxth	r2, r3
 801d350:	9b02      	ldr	r3, [sp, #8]
 801d352:	b298      	uxth	r0, r3
 801d354:	9b08      	ldr	r3, [sp, #32]
 801d356:	b29b      	uxth	r3, r3
 801d358:	b209      	sxth	r1, r1
 801d35a:	b212      	sxth	r2, r2
 801d35c:	b204      	sxth	r4, r0
 801d35e:	b21b      	sxth	r3, r3
 801d360:	9300      	str	r3, [sp, #0]
 801d362:	9805      	ldr	r0, [sp, #20]
 801d364:	4623      	mov	r3, r4
 801d366:	f002 f93f 	bl	801f5e8 <spi_init>
	}
 801d36a:	b006      	add	sp, #24
 801d36c:	bd10      	pop	{r4, pc}
 801d36e:	bf00      	nop

0801d370 <tmp_timer_event_alloc>:
{

	extern void SystemTimer_Handler(uint32_t id);

	void tmp_timer_event_alloc(ticker_event_t** obj)
	{
 801d370:	b500      	push	{lr}
 801d372:	b083      	sub	sp, #12
 801d374:	9001      	str	r0, [sp, #4]
		*obj = (ticker_event_t*)calloc(sizeof(ticker_event_t), 1);
 801d376:	200c      	movs	r0, #12
 801d378:	2101      	movs	r1, #1
 801d37a:	f002 fdd7 	bl	801ff2c <calloc>
 801d37e:	4603      	mov	r3, r0
 801d380:	461a      	mov	r2, r3
 801d382:	9b01      	ldr	r3, [sp, #4]
 801d384:	601a      	str	r2, [r3, #0]
	}
 801d386:	b003      	add	sp, #12
 801d388:	f85d fb04 	ldr.w	pc, [sp], #4

0801d38c <tmp_sys_timer_read>:

	uint32_t tmp_sys_timer_read()
	{
 801d38c:	b508      	push	{r3, lr}
		return us_ticker_read();
 801d38e:	f002 fb27 	bl	801f9e0 <us_ticker_read>
 801d392:	4603      	mov	r3, r0
	}
 801d394:	4618      	mov	r0, r3
 801d396:	bd08      	pop	{r3, pc}

0801d398 <tmp_interrupt_handler>:

	// This is used to call back into the Kernel using a WellKnownMethod
	void tmp_interrupt_handler(uint32_t id)
	{
 801d398:	b500      	push	{lr}
 801d39a:	b083      	sub	sp, #12
 801d39c:	9001      	str	r0, [sp, #4]
		SystemTimer_Handler(id);
 801d39e:	9801      	ldr	r0, [sp, #4]
 801d3a0:	f7f3 fdf7 	bl	8010f92 <SystemTimer_Handler>
	}
 801d3a4:	b003      	add	sp, #12
 801d3a6:	f85d fb04 	ldr.w	pc, [sp], #4
 801d3aa:	bf00      	nop

0801d3ac <tmp_sys_timer_init>:

	void tmp_sys_timer_init()
	{
 801d3ac:	b508      	push	{r3, lr}
		us_ticker_init();
 801d3ae:	f002 fb01 	bl	801f9b4 <us_ticker_init>

		ticker_set_handler(get_us_ticker_data(), tmp_interrupt_handler);
 801d3b2:	f002 fd17 	bl	801fde4 <get_us_ticker_data>
 801d3b6:	4603      	mov	r3, r0
 801d3b8:	4618      	mov	r0, r3
 801d3ba:	4902      	ldr	r1, [pc, #8]	; (801d3c4 <tmp_sys_timer_init+0x18>)
 801d3bc:	f002 fc46 	bl	801fc4c <ticker_set_handler>
	}
 801d3c0:	bd08      	pop	{r3, pc}
 801d3c2:	bf00      	nop
 801d3c4:	0801d399 	.word	0x0801d399

0801d3c8 <tmp_sys_timer_insert_event>:

	void tmp_sys_timer_insert_event(ticker_event_t* tick_event, uint32_t relativeTimeout)
	{
 801d3c8:	b510      	push	{r4, lr}
 801d3ca:	b082      	sub	sp, #8
 801d3cc:	9001      	str	r0, [sp, #4]
 801d3ce:	9100      	str	r1, [sp, #0]
		// We can leave the id as 0 since it is only used for timer event identification
		// And we keep track of that ourselves

		ticker_insert_event(get_us_ticker_data(), tick_event, us_ticker_read() + relativeTimeout, 0);
 801d3d0:	f002 fd08 	bl	801fde4 <get_us_ticker_data>
 801d3d4:	4604      	mov	r4, r0
 801d3d6:	f002 fb03 	bl	801f9e0 <us_ticker_read>
 801d3da:	4602      	mov	r2, r0
 801d3dc:	9b00      	ldr	r3, [sp, #0]
 801d3de:	4413      	add	r3, r2
 801d3e0:	4620      	mov	r0, r4
 801d3e2:	9901      	ldr	r1, [sp, #4]
 801d3e4:	461a      	mov	r2, r3
 801d3e6:	2300      	movs	r3, #0
 801d3e8:	f002 fc84 	bl	801fcf4 <ticker_insert_event>
	}
 801d3ec:	b002      	add	sp, #8
 801d3ee:	bd10      	pop	{r4, pc}

0801d3f0 <tmp_sys_timer_remove_event>:

	void tmp_sys_timer_remove_event(ticker_event_t* tick_event)
	{
 801d3f0:	b500      	push	{lr}
 801d3f2:	b083      	sub	sp, #12
 801d3f4:	9001      	str	r0, [sp, #4]
		// We can leave the id as 0 since it is only used for timer event identification
		// And we keep track of that ourselves

		ticker_remove_event(get_us_ticker_data(), tick_event);
 801d3f6:	f002 fcf5 	bl	801fde4 <get_us_ticker_data>
 801d3fa:	4603      	mov	r3, r0
 801d3fc:	4618      	mov	r0, r3
 801d3fe:	9901      	ldr	r1, [sp, #4]
 801d400:	f002 fcb2 	bl	801fd68 <ticker_remove_event>
	}
 801d404:	b003      	add	sp, #12
 801d406:	f85d fb04 	ldr.w	pc, [sp], #4
 801d40a:	bf00      	nop

0801d40c <CMSIS_STUB_SysTick_GetCTRL>:
	//////	#define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration struct       */
	//////

	/*__STATIC_INLINE*/ uint32_t CMSIS_STUB_SysTick_GetCTRL()
	{
		return SysTick->CTRL;
 801d40c:	4b01      	ldr	r3, [pc, #4]	; (801d414 <CMSIS_STUB_SysTick_GetCTRL+0x8>)
 801d40e:	681b      	ldr	r3, [r3, #0]
	}
 801d410:	4618      	mov	r0, r3
 801d412:	4770      	bx	lr
 801d414:	e000e010 	.word	0xe000e010

0801d418 <CMSIS_STUB_SysTick_SetCTRL>:

	/*__STATIC_INLINE*/ void CMSIS_STUB_SysTick_SetCTRL(uint32_t value)
	{
 801d418:	b082      	sub	sp, #8
 801d41a:	9001      	str	r0, [sp, #4]
		SysTick->CTRL = value;
 801d41c:	4a02      	ldr	r2, [pc, #8]	; (801d428 <CMSIS_STUB_SysTick_SetCTRL+0x10>)
 801d41e:	9b01      	ldr	r3, [sp, #4]
 801d420:	6013      	str	r3, [r2, #0]
	}
 801d422:	b002      	add	sp, #8
 801d424:	4770      	bx	lr
 801d426:	bf00      	nop
 801d428:	e000e010 	.word	0xe000e010

0801d42c <CMSIS_STUB_SysTick_SetLOAD>:
	{
		return SysTick->LOAD & 0x00FFFFFF;
	}

	/*__STATIC_INLINE*/ void CMSIS_STUB_SysTick_SetLOAD(uint32_t value)
	{
 801d42c:	b082      	sub	sp, #8
 801d42e:	9001      	str	r0, [sp, #4]
		SysTick->LOAD |= value & 0x00FFFFFF;
 801d430:	4904      	ldr	r1, [pc, #16]	; (801d444 <CMSIS_STUB_SysTick_SetLOAD+0x18>)
 801d432:	4b04      	ldr	r3, [pc, #16]	; (801d444 <CMSIS_STUB_SysTick_SetLOAD+0x18>)
 801d434:	685a      	ldr	r2, [r3, #4]
 801d436:	9b01      	ldr	r3, [sp, #4]
 801d438:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801d43c:	4313      	orrs	r3, r2
 801d43e:	604b      	str	r3, [r1, #4]
	}
 801d440:	b002      	add	sp, #8
 801d442:	4770      	bx	lr
 801d444:	e000e010 	.word	0xe000e010

0801d448 <CMSIS_STUB_SysTick_GetVAL>:

	/*__STATIC_INLINE*/ uint32_t CMSIS_STUB_SysTick_GetVAL()
	{
		return SysTick->VAL & 0x00FFFFFF;
 801d448:	4b02      	ldr	r3, [pc, #8]	; (801d454 <CMSIS_STUB_SysTick_GetVAL+0xc>)
 801d44a:	689b      	ldr	r3, [r3, #8]
 801d44c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	}
 801d450:	4618      	mov	r0, r3
 801d452:	4770      	bx	lr
 801d454:	e000e010 	.word	0xe000e010

0801d458 <CMSIS_STUB_SysTick_SetVAL>:

	/*__STATIC_INLINE*/ void CMSIS_STUB_SysTick_SetVAL(uint32_t value)
	{
 801d458:	b082      	sub	sp, #8
 801d45a:	9001      	str	r0, [sp, #4]
		SysTick->VAL |= value & 0x00FFFFFF;
 801d45c:	4904      	ldr	r1, [pc, #16]	; (801d470 <CMSIS_STUB_SysTick_SetVAL+0x18>)
 801d45e:	4b04      	ldr	r3, [pc, #16]	; (801d470 <CMSIS_STUB_SysTick_SetVAL+0x18>)
 801d460:	689a      	ldr	r2, [r3, #8]
 801d462:	9b01      	ldr	r3, [sp, #4]
 801d464:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801d468:	4313      	orrs	r3, r2
 801d46a:	608b      	str	r3, [r1, #8]
	}
 801d46c:	b002      	add	sp, #8
 801d46e:	4770      	bx	lr
 801d470:	e000e010 	.word	0xe000e010

0801d474 <CMSIS_STUB_SysTick_GetCALIB>:

	/*__STATIC_INLINE*/ uint32_t CMSIS_STUB_SysTick_GetCALIB()
	{
		return SysTick->CALIB;
 801d474:	4b01      	ldr	r3, [pc, #4]	; (801d47c <CMSIS_STUB_SysTick_GetCALIB+0x8>)
 801d476:	68db      	ldr	r3, [r3, #12]
	}
 801d478:	4618      	mov	r0, r3
 801d47a:	4770      	bx	lr
 801d47c:	e000e010 	.word	0xe000e010

0801d480 <Reset_Handler>:
 801d480:	f8df d030 	ldr.w	sp, [pc, #48]	; 801d4b4 <LoopFillZerobss+0x10>
 801d484:	2100      	movs	r1, #0
 801d486:	e003      	b.n	801d490 <LoopCopyDataInit>

0801d488 <CopyDataInit>:
 801d488:	4b0b      	ldr	r3, [pc, #44]	; (801d4b8 <LoopFillZerobss+0x14>)
 801d48a:	585b      	ldr	r3, [r3, r1]
 801d48c:	5043      	str	r3, [r0, r1]
 801d48e:	3104      	adds	r1, #4

0801d490 <LoopCopyDataInit>:
 801d490:	480a      	ldr	r0, [pc, #40]	; (801d4bc <LoopFillZerobss+0x18>)
 801d492:	4b0b      	ldr	r3, [pc, #44]	; (801d4c0 <LoopFillZerobss+0x1c>)
 801d494:	1842      	adds	r2, r0, r1
 801d496:	429a      	cmp	r2, r3
 801d498:	d3f6      	bcc.n	801d488 <CopyDataInit>
 801d49a:	4a0a      	ldr	r2, [pc, #40]	; (801d4c4 <LoopFillZerobss+0x20>)
 801d49c:	e002      	b.n	801d4a4 <LoopFillZerobss>

0801d49e <FillZerobss>:
 801d49e:	2300      	movs	r3, #0
 801d4a0:	f842 3b04 	str.w	r3, [r2], #4

0801d4a4 <LoopFillZerobss>:
 801d4a4:	4b08      	ldr	r3, [pc, #32]	; (801d4c8 <LoopFillZerobss+0x24>)
 801d4a6:	429a      	cmp	r2, r3
 801d4a8:	d3f9      	bcc.n	801d49e <FillZerobss>
 801d4aa:	f000 f8e1 	bl	801d670 <SystemInit>
 801d4ae:	f7e2 feb9 	bl	8000224 <_mainCRTStartup>
 801d4b2:	4770      	bx	lr
 801d4b4:	20050000 	.word	0x20050000
 801d4b8:	080275a8 	.word	0x080275a8
 801d4bc:	200001d0 	.word	0x200001d0
 801d4c0:	200017d4 	.word	0x200017d4
 801d4c4:	200017e0 	.word	0x200017e0
 801d4c8:	20001a90 	.word	0x20001a90

0801d4cc <ADC_IRQHandler>:
 801d4cc:	e7fe      	b.n	801d4cc <ADC_IRQHandler>
	...

0801d4d0 <SetSysClock_PLL_HSE>:
 801d4d0:	4b20      	ldr	r3, [pc, #128]	; (801d554 <SetSysClock_PLL_HSE+0x84>)
 801d4d2:	2101      	movs	r1, #1
 801d4d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801d4d6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 801d4da:	b570      	push	{r4, r5, r6, lr}
 801d4dc:	641a      	str	r2, [r3, #64]	; 0x40
 801d4de:	b092      	sub	sp, #72	; 0x48
 801d4e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d4e2:	9106      	str	r1, [sp, #24]
 801d4e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801d4e8:	9300      	str	r3, [sp, #0]
 801d4ea:	9b00      	ldr	r3, [sp, #0]
 801d4ec:	b9b0      	cbnz	r0, 801d51c <SetSysClock_PLL_HSE+0x4c>
 801d4ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801d4f2:	9307      	str	r3, [sp, #28]
 801d4f4:	2402      	movs	r4, #2
 801d4f6:	f44f 0580 	mov.w	r5, #4194304	; 0x400000
 801d4fa:	2119      	movs	r1, #25
 801d4fc:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 801d500:	2309      	movs	r3, #9
 801d502:	a806      	add	r0, sp, #24
 801d504:	940c      	str	r4, [sp, #48]	; 0x30
 801d506:	9410      	str	r4, [sp, #64]	; 0x40
 801d508:	950d      	str	r5, [sp, #52]	; 0x34
 801d50a:	910e      	str	r1, [sp, #56]	; 0x38
 801d50c:	920f      	str	r2, [sp, #60]	; 0x3c
 801d50e:	9311      	str	r3, [sp, #68]	; 0x44
 801d510:	f000 faba 	bl	801da88 <HAL_RCC_OscConfig>
 801d514:	b130      	cbz	r0, 801d524 <SetSysClock_PLL_HSE+0x54>
 801d516:	2000      	movs	r0, #0
 801d518:	b012      	add	sp, #72	; 0x48
 801d51a:	bd70      	pop	{r4, r5, r6, pc}
 801d51c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 801d520:	9307      	str	r3, [sp, #28]
 801d522:	e7e7      	b.n	801d4f4 <SetSysClock_PLL_HSE+0x24>
 801d524:	f000 fe5e 	bl	801e1e4 <HAL_PWREx_EnableOverDrive>
 801d528:	4603      	mov	r3, r0
 801d52a:	2800      	cmp	r0, #0
 801d52c:	d1f3      	bne.n	801d516 <SetSysClock_PLL_HSE+0x46>
 801d52e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801d532:	260f      	movs	r6, #15
 801d534:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
 801d538:	a801      	add	r0, sp, #4
 801d53a:	2107      	movs	r1, #7
 801d53c:	9402      	str	r4, [sp, #8]
 801d53e:	9303      	str	r3, [sp, #12]
 801d540:	9601      	str	r6, [sp, #4]
 801d542:	9504      	str	r5, [sp, #16]
 801d544:	9205      	str	r2, [sp, #20]
 801d546:	f000 fcb3 	bl	801deb0 <HAL_RCC_ClockConfig>
 801d54a:	fab0 f080 	clz	r0, r0
 801d54e:	0940      	lsrs	r0, r0, #5
 801d550:	b012      	add	sp, #72	; 0x48
 801d552:	bd70      	pop	{r4, r5, r6, pc}
 801d554:	40023800 	.word	0x40023800

0801d558 <SetSysClock_PLL_HSI>:
 801d558:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d55a:	b093      	sub	sp, #76	; 0x4c
 801d55c:	f3bf 8f4f 	dsb	sy
 801d560:	f3bf 8f6f 	isb	sy
 801d564:	483a      	ldr	r0, [pc, #232]	; (801d650 <SetSysClock_PLL_HSI+0xf8>)
 801d566:	2200      	movs	r2, #0
 801d568:	f8c0 2250 	str.w	r2, [r0, #592]	; 0x250
 801d56c:	6943      	ldr	r3, [r0, #20]
 801d56e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801d572:	6143      	str	r3, [r0, #20]
 801d574:	f3bf 8f4f 	dsb	sy
 801d578:	f3bf 8f6f 	isb	sy
 801d57c:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
 801d580:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 801d584:	f3c3 364e 	ubfx	r6, r3, #13, #15
 801d588:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
 801d58c:	fabe f48e 	clz	r4, lr
 801d590:	f3bf 8f4f 	dsb	sy
 801d594:	f003 0307 	and.w	r3, r3, #7
 801d598:	f004 041f 	and.w	r4, r4, #31
 801d59c:	1d1f      	adds	r7, r3, #4
 801d59e:	fa06 f107 	lsl.w	r1, r6, r7
 801d5a2:	4673      	mov	r3, lr
 801d5a4:	fa03 f204 	lsl.w	r2, r3, r4
 801d5a8:	3b01      	subs	r3, #1
 801d5aa:	4d29      	ldr	r5, [pc, #164]	; (801d650 <SetSysClock_PLL_HSI+0xf8>)
 801d5ac:	430a      	orrs	r2, r1
 801d5ae:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
 801d5b2:	1c5a      	adds	r2, r3, #1
 801d5b4:	d1f6      	bne.n	801d5a4 <SetSysClock_PLL_HSI+0x4c>
 801d5b6:	f116 36ff 	adds.w	r6, r6, #4294967295
 801d5ba:	d2f0      	bcs.n	801d59e <SetSysClock_PLL_HSI+0x46>
 801d5bc:	f3bf 8f4f 	dsb	sy
 801d5c0:	696b      	ldr	r3, [r5, #20]
 801d5c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801d5c6:	616b      	str	r3, [r5, #20]
 801d5c8:	f3bf 8f4f 	dsb	sy
 801d5cc:	f3bf 8f6f 	isb	sy
 801d5d0:	4b20      	ldr	r3, [pc, #128]	; (801d654 <SetSysClock_PLL_HSI+0xfc>)
 801d5d2:	2500      	movs	r5, #0
 801d5d4:	2110      	movs	r1, #16
 801d5d6:	2402      	movs	r4, #2
 801d5d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801d5da:	f04f 0c03 	mov.w	ip, #3
 801d5de:	f04f 0e01 	mov.w	lr, #1
 801d5e2:	f44f 77d8 	mov.w	r7, #432	; 0x1b0
 801d5e6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 801d5ea:	2609      	movs	r6, #9
 801d5ec:	a806      	add	r0, sp, #24
 801d5ee:	641a      	str	r2, [r3, #64]	; 0x40
 801d5f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d5f2:	f8cd c018 	str.w	ip, [sp, #24]
 801d5f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801d5fa:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 801d5fe:	970f      	str	r7, [sp, #60]	; 0x3c
 801d600:	9300      	str	r3, [sp, #0]
 801d602:	9b00      	ldr	r3, [sp, #0]
 801d604:	9611      	str	r6, [sp, #68]	; 0x44
 801d606:	9507      	str	r5, [sp, #28]
 801d608:	950d      	str	r5, [sp, #52]	; 0x34
 801d60a:	910a      	str	r1, [sp, #40]	; 0x28
 801d60c:	910e      	str	r1, [sp, #56]	; 0x38
 801d60e:	940c      	str	r4, [sp, #48]	; 0x30
 801d610:	9410      	str	r4, [sp, #64]	; 0x40
 801d612:	f000 fa39 	bl	801da88 <HAL_RCC_OscConfig>
 801d616:	b110      	cbz	r0, 801d61e <SetSysClock_PLL_HSI+0xc6>
 801d618:	2000      	movs	r0, #0
 801d61a:	b013      	add	sp, #76	; 0x4c
 801d61c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d61e:	f000 fde1 	bl	801e1e4 <HAL_PWREx_EnableOverDrive>
 801d622:	4603      	mov	r3, r0
 801d624:	2800      	cmp	r0, #0
 801d626:	d1f7      	bne.n	801d618 <SetSysClock_PLL_HSI+0xc0>
 801d628:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801d62c:	260f      	movs	r6, #15
 801d62e:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
 801d632:	a801      	add	r0, sp, #4
 801d634:	2107      	movs	r1, #7
 801d636:	9402      	str	r4, [sp, #8]
 801d638:	9303      	str	r3, [sp, #12]
 801d63a:	9601      	str	r6, [sp, #4]
 801d63c:	9504      	str	r5, [sp, #16]
 801d63e:	9205      	str	r2, [sp, #20]
 801d640:	f000 fc36 	bl	801deb0 <HAL_RCC_ClockConfig>
 801d644:	fab0 f080 	clz	r0, r0
 801d648:	0940      	lsrs	r0, r0, #5
 801d64a:	b013      	add	sp, #76	; 0x4c
 801d64c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d64e:	bf00      	nop
 801d650:	e000ed00 	.word	0xe000ed00
 801d654:	40023800 	.word	0x40023800

0801d658 <SetSysClock>:
 801d658:	b508      	push	{r3, lr}
 801d65a:	2000      	movs	r0, #0
 801d65c:	f7ff ff38 	bl	801d4d0 <SetSysClock_PLL_HSE>
 801d660:	b100      	cbz	r0, 801d664 <SetSysClock+0xc>
 801d662:	bd08      	pop	{r3, pc}
 801d664:	f7ff ff78 	bl	801d558 <SetSysClock_PLL_HSI>
 801d668:	2800      	cmp	r0, #0
 801d66a:	d1fa      	bne.n	801d662 <SetSysClock+0xa>
 801d66c:	e7fe      	b.n	801d66c <SetSysClock+0x14>
 801d66e:	bf00      	nop

0801d670 <SystemInit>:
 801d670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d672:	4b31      	ldr	r3, [pc, #196]	; (801d738 <SystemInit+0xc8>)
 801d674:	2500      	movs	r5, #0
 801d676:	4a31      	ldr	r2, [pc, #196]	; (801d73c <SystemInit+0xcc>)
 801d678:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
 801d67c:	6819      	ldr	r1, [r3, #0]
 801d67e:	4f30      	ldr	r7, [pc, #192]	; (801d740 <SystemInit+0xd0>)
 801d680:	f041 0101 	orr.w	r1, r1, #1
 801d684:	4c2f      	ldr	r4, [pc, #188]	; (801d744 <SystemInit+0xd4>)
 801d686:	4830      	ldr	r0, [pc, #192]	; (801d748 <SystemInit+0xd8>)
 801d688:	6019      	str	r1, [r3, #0]
 801d68a:	609d      	str	r5, [r3, #8]
 801d68c:	f8d3 e000 	ldr.w	lr, [r3]
 801d690:	492e      	ldr	r1, [pc, #184]	; (801d74c <SystemInit+0xdc>)
 801d692:	ea0e 0202 	and.w	r2, lr, r2
 801d696:	601a      	str	r2, [r3, #0]
 801d698:	605f      	str	r7, [r3, #4]
 801d69a:	681a      	ldr	r2, [r3, #0]
 801d69c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801d6a0:	601a      	str	r2, [r3, #0]
 801d6a2:	60dd      	str	r5, [r3, #12]
 801d6a4:	60a6      	str	r6, [r4, #8]
 801d6a6:	6001      	str	r1, [r0, #0]
 801d6a8:	f000 fdda 	bl	801e260 <HAL_Init>
 801d6ac:	f3bf 8f4f 	dsb	sy
 801d6b0:	f3bf 8f6f 	isb	sy
 801d6b4:	f8c4 5250 	str.w	r5, [r4, #592]	; 0x250
 801d6b8:	6963      	ldr	r3, [r4, #20]
 801d6ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801d6be:	6163      	str	r3, [r4, #20]
 801d6c0:	f3bf 8f4f 	dsb	sy
 801d6c4:	f3bf 8f6f 	isb	sy
 801d6c8:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
 801d6cc:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 801d6d0:	f3c3 364e 	ubfx	r6, r3, #13, #15
 801d6d4:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
 801d6d8:	fabe f58e 	clz	r5, lr
 801d6dc:	f3bf 8f4f 	dsb	sy
 801d6e0:	f003 0307 	and.w	r3, r3, #7
 801d6e4:	f005 051f 	and.w	r5, r5, #31
 801d6e8:	4620      	mov	r0, r4
 801d6ea:	1d1f      	adds	r7, r3, #4
 801d6ec:	fa06 f107 	lsl.w	r1, r6, r7
 801d6f0:	4673      	mov	r3, lr
 801d6f2:	fa03 f205 	lsl.w	r2, r3, r5
 801d6f6:	3b01      	subs	r3, #1
 801d6f8:	4c12      	ldr	r4, [pc, #72]	; (801d744 <SystemInit+0xd4>)
 801d6fa:	430a      	orrs	r2, r1
 801d6fc:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
 801d700:	1c5a      	adds	r2, r3, #1
 801d702:	d1f6      	bne.n	801d6f2 <SystemInit+0x82>
 801d704:	f116 36ff 	adds.w	r6, r6, #4294967295
 801d708:	d2f0      	bcs.n	801d6ec <SystemInit+0x7c>
 801d70a:	f3bf 8f4f 	dsb	sy
 801d70e:	6963      	ldr	r3, [r4, #20]
 801d710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801d714:	6163      	str	r3, [r4, #20]
 801d716:	f3bf 8f4f 	dsb	sy
 801d71a:	f3bf 8f6f 	isb	sy
 801d71e:	f7ff ff9b 	bl	801d658 <SetSysClock>
 801d722:	4b05      	ldr	r3, [pc, #20]	; (801d738 <SystemInit+0xc8>)
 801d724:	6a1a      	ldr	r2, [r3, #32]
 801d726:	f042 0208 	orr.w	r2, r2, #8
 801d72a:	621a      	str	r2, [r3, #32]
 801d72c:	6a1a      	ldr	r2, [r3, #32]
 801d72e:	f022 0208 	bic.w	r2, r2, #8
 801d732:	621a      	str	r2, [r3, #32]
 801d734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d736:	bf00      	nop
 801d738:	40023800 	.word	0x40023800
 801d73c:	fef6ffff 	.word	0xfef6ffff
 801d740:	24003010 	.word	0x24003010
 801d744:	e000ed00 	.word	0xe000ed00
 801d748:	20001720 	.word	0x20001720
 801d74c:	00f42400 	.word	0x00f42400

0801d750 <mbed_die>:
#include "gpio_api.h"
#include "wait_api.h"
#include "toolchain.h"
#include "mbed_interface.h"

WEAK void mbed_die(void) {
 801d750:	b508      	push	{r3, lr}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 801d752:	b672      	cpsid	i
        gpio_write(&led_2, 0);
        gpio_write(&led_3, 0);
        gpio_write(&led_4, 1);
#endif

        wait_ms(150);
 801d754:	2096      	movs	r0, #150	; 0x96
 801d756:	f002 fb53 	bl	801fe00 <wait_ms>
        gpio_write(&led_2, 1);
        gpio_write(&led_3, 1);
        gpio_write(&led_4, 0);
#endif

        wait_ms(150);
 801d75a:	2096      	movs	r0, #150	; 0x96
 801d75c:	f002 fb50 	bl	801fe00 <wait_ms>
    }
 801d760:	e7f8      	b.n	801d754 <mbed_die+0x4>
 801d762:	bf00      	nop

0801d764 <NVIC_SetVector>:
 801d764:	4a0f      	ldr	r2, [pc, #60]	; (801d7a4 <NVIC_SetVector+0x40>)
 801d766:	b430      	push	{r4, r5}
 801d768:	6893      	ldr	r3, [r2, #8]
 801d76a:	6894      	ldr	r4, [r2, #8]
 801d76c:	461a      	mov	r2, r3
 801d76e:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
 801d772:	d004      	beq.n	801d77e <NVIC_SetVector+0x1a>
 801d774:	3010      	adds	r0, #16
 801d776:	bc30      	pop	{r4, r5}
 801d778:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
 801d77c:	4770      	bx	lr
 801d77e:	f503 75e4 	add.w	r5, r3, #456	; 0x1c8
 801d782:	4a09      	ldr	r2, [pc, #36]	; (801d7a8 <NVIC_SetVector+0x44>)
 801d784:	f853 4b04 	ldr.w	r4, [r3], #4
 801d788:	42ab      	cmp	r3, r5
 801d78a:	f842 4f04 	str.w	r4, [r2, #4]!
 801d78e:	d1f9      	bne.n	801d784 <NVIC_SetVector+0x20>
 801d790:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 801d794:	4c03      	ldr	r4, [pc, #12]	; (801d7a4 <NVIC_SetVector+0x40>)
 801d796:	3010      	adds	r0, #16
 801d798:	461a      	mov	r2, r3
 801d79a:	60a3      	str	r3, [r4, #8]
 801d79c:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
 801d7a0:	bc30      	pop	{r4, r5}
 801d7a2:	4770      	bx	lr
 801d7a4:	e000ed00 	.word	0xe000ed00
 801d7a8:	1ffffffc 	.word	0x1ffffffc

0801d7ac <_ZL11init_serialv>:
#if DEVICE_SERIAL
extern int stdio_uart_inited;
extern serial_t stdio_uart;
#endif

static void init_serial() {
 801d7ac:	b508      	push	{r3, lr}
#if DEVICE_SERIAL
    if (stdio_uart_inited) return;
 801d7ae:	4b05      	ldr	r3, [pc, #20]	; (801d7c4 <_ZL11init_serialv+0x18>)
 801d7b0:	681b      	ldr	r3, [r3, #0]
 801d7b2:	2b00      	cmp	r3, #0
 801d7b4:	d000      	beq.n	801d7b8 <_ZL11init_serialv+0xc>
 801d7b6:	e004      	b.n	801d7c2 <_ZL11init_serialv+0x16>
    serial_init(&stdio_uart, STDIO_UART_TX, STDIO_UART_RX);
 801d7b8:	4803      	ldr	r0, [pc, #12]	; (801d7c8 <_ZL11init_serialv+0x1c>)
 801d7ba:	2109      	movs	r1, #9
 801d7bc:	2217      	movs	r2, #23
 801d7be:	f001 fd33 	bl	801f228 <serial_init>
#endif
}
 801d7c2:	bd08      	pop	{r3, pc}
 801d7c4:	2000190c 	.word	0x2000190c
 801d7c8:	20001a70 	.word	0x20001a70

0801d7cc <_close>:
    filehandles[fh_i] = res;

    return fh_i + 3; // +3 as filehandles 0-2 are stdin/out/err
}

extern "C" int PREFIX(_close)(FILEHANDLE fh) {
 801d7cc:	b500      	push	{lr}
 801d7ce:	b085      	sub	sp, #20
 801d7d0:	9001      	str	r0, [sp, #4]
    if (fh < 3) return 0;
 801d7d2:	9b01      	ldr	r3, [sp, #4]
 801d7d4:	2b02      	cmp	r3, #2
 801d7d6:	dc01      	bgt.n	801d7dc <_close+0x10>
 801d7d8:	2300      	movs	r3, #0
 801d7da:	e018      	b.n	801d80e <_close+0x42>

    FileHandle* fhc = filehandles[fh-3];
 801d7dc:	9b01      	ldr	r3, [sp, #4]
 801d7de:	3b03      	subs	r3, #3
 801d7e0:	4a0d      	ldr	r2, [pc, #52]	; (801d818 <_close+0x4c>)
 801d7e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d7e6:	9303      	str	r3, [sp, #12]
    filehandles[fh-3] = NULL;
 801d7e8:	9b01      	ldr	r3, [sp, #4]
 801d7ea:	3b03      	subs	r3, #3
 801d7ec:	4a0a      	ldr	r2, [pc, #40]	; (801d818 <_close+0x4c>)
 801d7ee:	2100      	movs	r1, #0
 801d7f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    if (fhc == NULL) return -1;
 801d7f4:	9b03      	ldr	r3, [sp, #12]
 801d7f6:	2b00      	cmp	r3, #0
 801d7f8:	d102      	bne.n	801d800 <_close+0x34>
 801d7fa:	f04f 33ff 	mov.w	r3, #4294967295
 801d7fe:	e006      	b.n	801d80e <_close+0x42>

    return fhc->close();
 801d800:	9b03      	ldr	r3, [sp, #12]
 801d802:	681b      	ldr	r3, [r3, #0]
 801d804:	3304      	adds	r3, #4
 801d806:	681b      	ldr	r3, [r3, #0]
 801d808:	9803      	ldr	r0, [sp, #12]
 801d80a:	4798      	blx	r3
 801d80c:	4603      	mov	r3, r0
}
 801d80e:	4618      	mov	r0, r3
 801d810:	b005      	add	sp, #20
 801d812:	f85d fb04 	ldr.w	pc, [sp], #4
 801d816:	bf00      	nop
 801d818:	20001804 	.word	0x20001804

0801d81c <_write>:

#if defined(__ICCARM__)
extern "C" size_t    __write (int        fh, const unsigned char *buffer, size_t length) {
#else
extern "C" int PREFIX(_write)(FILEHANDLE fh, const unsigned char *buffer, unsigned int length, int mode) {
 801d81c:	b500      	push	{lr}
 801d81e:	b089      	sub	sp, #36	; 0x24
 801d820:	9003      	str	r0, [sp, #12]
 801d822:	9102      	str	r1, [sp, #8]
 801d824:	9201      	str	r2, [sp, #4]
 801d826:	9300      	str	r3, [sp, #0]
#endif
    int n; // n is the number of bytes written
    if (fh < 3) {
 801d828:	9b03      	ldr	r3, [sp, #12]
 801d82a:	2b02      	cmp	r3, #2
 801d82c:	dc1a      	bgt.n	801d864 <_write+0x48>
#if DEVICE_SERIAL
        if (!stdio_uart_inited) init_serial();
 801d82e:	4b1a      	ldr	r3, [pc, #104]	; (801d898 <_write+0x7c>)
 801d830:	681b      	ldr	r3, [r3, #0]
 801d832:	2b00      	cmp	r3, #0
 801d834:	d101      	bne.n	801d83a <_write+0x1e>
 801d836:	f7ff ffb9 	bl	801d7ac <_ZL11init_serialv>
        for (unsigned int i = 0; i < length; i++) {
 801d83a:	2300      	movs	r3, #0
 801d83c:	9306      	str	r3, [sp, #24]
 801d83e:	e00a      	b.n	801d856 <_write+0x3a>
            serial_putc(&stdio_uart, buffer[i]);
 801d840:	9a02      	ldr	r2, [sp, #8]
 801d842:	9b06      	ldr	r3, [sp, #24]
 801d844:	4413      	add	r3, r2
 801d846:	781b      	ldrb	r3, [r3, #0]
 801d848:	4814      	ldr	r0, [pc, #80]	; (801d89c <_write+0x80>)
 801d84a:	4619      	mov	r1, r3
 801d84c:	f001 fe36 	bl	801f4bc <serial_putc>
#endif
    int n; // n is the number of bytes written
    if (fh < 3) {
#if DEVICE_SERIAL
        if (!stdio_uart_inited) init_serial();
        for (unsigned int i = 0; i < length; i++) {
 801d850:	9b06      	ldr	r3, [sp, #24]
 801d852:	3301      	adds	r3, #1
 801d854:	9306      	str	r3, [sp, #24]
 801d856:	9a06      	ldr	r2, [sp, #24]
 801d858:	9b01      	ldr	r3, [sp, #4]
 801d85a:	429a      	cmp	r2, r3
 801d85c:	d3f0      	bcc.n	801d840 <_write+0x24>
            serial_putc(&stdio_uart, buffer[i]);
        }
#endif
        n = length;
 801d85e:	9b01      	ldr	r3, [sp, #4]
 801d860:	9307      	str	r3, [sp, #28]
 801d862:	e013      	b.n	801d88c <_write+0x70>
    } else {
        FileHandle* fhc = filehandles[fh-3];
 801d864:	9b03      	ldr	r3, [sp, #12]
 801d866:	3b03      	subs	r3, #3
 801d868:	4a0d      	ldr	r2, [pc, #52]	; (801d8a0 <_write+0x84>)
 801d86a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d86e:	9305      	str	r3, [sp, #20]
        if (fhc == NULL) return -1;
 801d870:	9b05      	ldr	r3, [sp, #20]
 801d872:	2b00      	cmp	r3, #0
 801d874:	d102      	bne.n	801d87c <_write+0x60>
 801d876:	f04f 33ff 	mov.w	r3, #4294967295
 801d87a:	e008      	b.n	801d88e <_write+0x72>

        n = fhc->write(buffer, length);
 801d87c:	9b05      	ldr	r3, [sp, #20]
 801d87e:	681b      	ldr	r3, [r3, #0]
 801d880:	681b      	ldr	r3, [r3, #0]
 801d882:	9805      	ldr	r0, [sp, #20]
 801d884:	9902      	ldr	r1, [sp, #8]
 801d886:	9a01      	ldr	r2, [sp, #4]
 801d888:	4798      	blx	r3
 801d88a:	9007      	str	r0, [sp, #28]
    }
#ifdef __ARMCC_VERSION
    return length-n;
#else
    return n;
 801d88c:	9b07      	ldr	r3, [sp, #28]
#endif
}
 801d88e:	4618      	mov	r0, r3
 801d890:	b009      	add	sp, #36	; 0x24
 801d892:	f85d fb04 	ldr.w	pc, [sp], #4
 801d896:	bf00      	nop
 801d898:	2000190c 	.word	0x2000190c
 801d89c:	20001a70 	.word	0x20001a70
 801d8a0:	20001804 	.word	0x20001804

0801d8a4 <_read>:

#if defined(__ICCARM__)
extern "C" size_t    __read (int        fh, unsigned char *buffer, size_t       length) {
#else
extern "C" int PREFIX(_read)(FILEHANDLE fh, unsigned char *buffer, unsigned int length, int mode) {
 801d8a4:	b500      	push	{lr}
 801d8a6:	b087      	sub	sp, #28
 801d8a8:	9003      	str	r0, [sp, #12]
 801d8aa:	9102      	str	r1, [sp, #8]
 801d8ac:	9201      	str	r2, [sp, #4]
 801d8ae:	9300      	str	r3, [sp, #0]
#endif
    int n; // n is the number of bytes read
    if (fh < 3) {
 801d8b0:	9b03      	ldr	r3, [sp, #12]
 801d8b2:	2b02      	cmp	r3, #2
 801d8b4:	dc0f      	bgt.n	801d8d6 <_read+0x32>
        // only read a character at a time from stdin
#if DEVICE_SERIAL
        if (!stdio_uart_inited) init_serial();
 801d8b6:	4b15      	ldr	r3, [pc, #84]	; (801d90c <_read+0x68>)
 801d8b8:	681b      	ldr	r3, [r3, #0]
 801d8ba:	2b00      	cmp	r3, #0
 801d8bc:	d101      	bne.n	801d8c2 <_read+0x1e>
 801d8be:	f7ff ff75 	bl	801d7ac <_ZL11init_serialv>
        *buffer = serial_getc(&stdio_uart);
 801d8c2:	4813      	ldr	r0, [pc, #76]	; (801d910 <_read+0x6c>)
 801d8c4:	f001 fde4 	bl	801f490 <serial_getc>
 801d8c8:	4603      	mov	r3, r0
 801d8ca:	b2da      	uxtb	r2, r3
 801d8cc:	9b02      	ldr	r3, [sp, #8]
 801d8ce:	701a      	strb	r2, [r3, #0]
#endif
        n = 1;
 801d8d0:	2301      	movs	r3, #1
 801d8d2:	9305      	str	r3, [sp, #20]
 801d8d4:	e014      	b.n	801d900 <_read+0x5c>
    } else {
        FileHandle* fhc = filehandles[fh-3];
 801d8d6:	9b03      	ldr	r3, [sp, #12]
 801d8d8:	3b03      	subs	r3, #3
 801d8da:	4a0e      	ldr	r2, [pc, #56]	; (801d914 <_read+0x70>)
 801d8dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d8e0:	9304      	str	r3, [sp, #16]
        if (fhc == NULL) return -1;
 801d8e2:	9b04      	ldr	r3, [sp, #16]
 801d8e4:	2b00      	cmp	r3, #0
 801d8e6:	d102      	bne.n	801d8ee <_read+0x4a>
 801d8e8:	f04f 33ff 	mov.w	r3, #4294967295
 801d8ec:	e009      	b.n	801d902 <_read+0x5e>

        n = fhc->read(buffer, length);
 801d8ee:	9b04      	ldr	r3, [sp, #16]
 801d8f0:	681b      	ldr	r3, [r3, #0]
 801d8f2:	3308      	adds	r3, #8
 801d8f4:	681b      	ldr	r3, [r3, #0]
 801d8f6:	9804      	ldr	r0, [sp, #16]
 801d8f8:	9902      	ldr	r1, [sp, #8]
 801d8fa:	9a01      	ldr	r2, [sp, #4]
 801d8fc:	4798      	blx	r3
 801d8fe:	9005      	str	r0, [sp, #20]
    }
#ifdef __ARMCC_VERSION
    return length-n;
#else
    return n;
 801d900:	9b05      	ldr	r3, [sp, #20]
#endif
}
 801d902:	4618      	mov	r0, r3
 801d904:	b007      	add	sp, #28
 801d906:	f85d fb04 	ldr.w	pc, [sp], #4
 801d90a:	bf00      	nop
 801d90c:	2000190c 	.word	0x2000190c
 801d910:	20001a70 	.word	0x20001a70
 801d914:	20001804 	.word	0x20001804

0801d918 <_isatty>:
#ifdef __ARMCC_VERSION
extern "C" int PREFIX(_istty)(FILEHANDLE fh)
#else
extern "C" int _isatty(FILEHANDLE fh)
#endif
{
 801d918:	b500      	push	{lr}
 801d91a:	b085      	sub	sp, #20
 801d91c:	9001      	str	r0, [sp, #4]
    /* stdin, stdout and stderr should be tty */
    if (fh < 3) return 1;
 801d91e:	9b01      	ldr	r3, [sp, #4]
 801d920:	2b02      	cmp	r3, #2
 801d922:	dc01      	bgt.n	801d928 <_isatty+0x10>
 801d924:	2301      	movs	r3, #1
 801d926:	e012      	b.n	801d94e <_isatty+0x36>

    FileHandle* fhc = filehandles[fh-3];
 801d928:	9b01      	ldr	r3, [sp, #4]
 801d92a:	3b03      	subs	r3, #3
 801d92c:	4a0a      	ldr	r2, [pc, #40]	; (801d958 <_isatty+0x40>)
 801d92e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d932:	9303      	str	r3, [sp, #12]
    if (fhc == NULL) return -1;
 801d934:	9b03      	ldr	r3, [sp, #12]
 801d936:	2b00      	cmp	r3, #0
 801d938:	d102      	bne.n	801d940 <_isatty+0x28>
 801d93a:	f04f 33ff 	mov.w	r3, #4294967295
 801d93e:	e006      	b.n	801d94e <_isatty+0x36>

    return fhc->isatty();
 801d940:	9b03      	ldr	r3, [sp, #12]
 801d942:	681b      	ldr	r3, [r3, #0]
 801d944:	330c      	adds	r3, #12
 801d946:	681b      	ldr	r3, [r3, #0]
 801d948:	9803      	ldr	r0, [sp, #12]
 801d94a:	4798      	blx	r3
 801d94c:	4603      	mov	r3, r0
}
 801d94e:	4618      	mov	r0, r3
 801d950:	b005      	add	sp, #20
 801d952:	f85d fb04 	ldr.w	pc, [sp], #4
 801d956:	bf00      	nop
 801d958:	20001804 	.word	0x20001804

0801d95c <_lseek>:
#elif defined(__ICCARM__)
long __lseek(int fh, long offset, int whence)
#else
int _lseek(FILEHANDLE fh, int offset, int whence)
#endif
{
 801d95c:	b500      	push	{lr}
 801d95e:	b087      	sub	sp, #28
 801d960:	9003      	str	r0, [sp, #12]
 801d962:	9102      	str	r1, [sp, #8]
 801d964:	9201      	str	r2, [sp, #4]
    if (fh < 3) return 0;
 801d966:	9b03      	ldr	r3, [sp, #12]
 801d968:	2b02      	cmp	r3, #2
 801d96a:	dc01      	bgt.n	801d970 <_lseek+0x14>
 801d96c:	2300      	movs	r3, #0
 801d96e:	e014      	b.n	801d99a <_lseek+0x3e>

    FileHandle* fhc = filehandles[fh-3];
 801d970:	9b03      	ldr	r3, [sp, #12]
 801d972:	3b03      	subs	r3, #3
 801d974:	4a0b      	ldr	r2, [pc, #44]	; (801d9a4 <_lseek+0x48>)
 801d976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d97a:	9305      	str	r3, [sp, #20]
    if (fhc == NULL) return -1;
 801d97c:	9b05      	ldr	r3, [sp, #20]
 801d97e:	2b00      	cmp	r3, #0
 801d980:	d102      	bne.n	801d988 <_lseek+0x2c>
 801d982:	f04f 33ff 	mov.w	r3, #4294967295
 801d986:	e008      	b.n	801d99a <_lseek+0x3e>

#if defined(__ARMCC_VERSION)
    return fhc->lseek(position, SEEK_SET);
#else
    return fhc->lseek(offset, whence);
 801d988:	9b05      	ldr	r3, [sp, #20]
 801d98a:	681b      	ldr	r3, [r3, #0]
 801d98c:	3310      	adds	r3, #16
 801d98e:	681b      	ldr	r3, [r3, #0]
 801d990:	9805      	ldr	r0, [sp, #20]
 801d992:	9902      	ldr	r1, [sp, #8]
 801d994:	9a01      	ldr	r2, [sp, #4]
 801d996:	4798      	blx	r3
 801d998:	4603      	mov	r3, r0
#endif
}
 801d99a:	4618      	mov	r0, r3
 801d99c:	b007      	add	sp, #28
 801d99e:	f85d fb04 	ldr.w	pc, [sp], #4
 801d9a2:	bf00      	nop
 801d9a4:	20001804 	.word	0x20001804

0801d9a8 <_fstat>:
}
#endif


#if !defined(__ARMCC_VERSION) && !defined(__ICCARM__)
extern "C" int _fstat(int fd, struct stat *st) {
 801d9a8:	b500      	push	{lr}
 801d9aa:	b083      	sub	sp, #12
 801d9ac:	9001      	str	r0, [sp, #4]
 801d9ae:	9100      	str	r1, [sp, #0]
    if ((STDOUT_FILENO == fd) || (STDERR_FILENO == fd) || (STDIN_FILENO == fd)) {
 801d9b0:	9b01      	ldr	r3, [sp, #4]
 801d9b2:	2b01      	cmp	r3, #1
 801d9b4:	d005      	beq.n	801d9c2 <_fstat+0x1a>
 801d9b6:	9b01      	ldr	r3, [sp, #4]
 801d9b8:	2b02      	cmp	r3, #2
 801d9ba:	d002      	beq.n	801d9c2 <_fstat+0x1a>
 801d9bc:	9b01      	ldr	r3, [sp, #4]
 801d9be:	2b00      	cmp	r3, #0
 801d9c0:	d105      	bne.n	801d9ce <_fstat+0x26>
        st->st_mode = S_IFCHR;
 801d9c2:	9b00      	ldr	r3, [sp, #0]
 801d9c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801d9c8:	605a      	str	r2, [r3, #4]
        return  0;
 801d9ca:	2300      	movs	r3, #0
 801d9cc:	e006      	b.n	801d9dc <_fstat+0x34>
    }

    errno = EBADF;
 801d9ce:	f002 fab7 	bl	801ff40 <__errno>
 801d9d2:	4602      	mov	r2, r0
 801d9d4:	2309      	movs	r3, #9
 801d9d6:	6013      	str	r3, [r2, #0]
    return -1;
 801d9d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 801d9dc:	4618      	mov	r0, r3
 801d9de:	b003      	add	sp, #12
 801d9e0:	f85d fb04 	ldr.w	pc, [sp], #4

0801d9e4 <mbed_main>:
// mbed_main(), it is not meant for user code, but for the SDK itself to perform
// initializations before main() is called.

extern "C" WEAK void mbed_main(void);
extern "C" WEAK void mbed_main(void) {
}
 801d9e4:	4770      	bx	lr
 801d9e6:	bf00      	nop

0801d9e8 <mbed_sdk_init>:

extern "C" WEAK void mbed_sdk_init(void);
extern "C" WEAK void mbed_sdk_init(void) {
}
 801d9e8:	4770      	bx	lr
 801d9ea:	bf00      	nop

0801d9ec <__wrap_main>:
    return $Super$$main();
}
#elif defined(TOOLCHAIN_GCC)
extern "C" int __real_main(void);

extern "C" int __wrap_main(void) {
 801d9ec:	b508      	push	{r3, lr}
    mbed_sdk_init();
 801d9ee:	f7ff fffb 	bl	801d9e8 <mbed_sdk_init>
    mbed_main();
 801d9f2:	f7ff fff7 	bl	801d9e4 <mbed_main>
    return __real_main();
 801d9f6:	f7e2 fc97 	bl	8000328 <main>
 801d9fa:	4603      	mov	r3, r0
}
 801d9fc:	4618      	mov	r0, r3
 801d9fe:	bd08      	pop	{r3, pc}

0801da00 <_sbrk>:

// For ARM7 only
register unsigned char * stack_ptr __asm ("sp");

// Dynamic memory allocation related syscall.
extern "C" caddr_t _sbrk(int incr) {
 801da00:	b410      	push	{r4}
 801da02:	b085      	sub	sp, #20
 801da04:	9001      	str	r0, [sp, #4]
    static unsigned char* heap = (unsigned char*)&__end__;
    unsigned char*        prev_heap = heap;
 801da06:	4b12      	ldr	r3, [pc, #72]	; (801da50 <_sbrk+0x50>)
 801da08:	681b      	ldr	r3, [r3, #0]
 801da0a:	9303      	str	r3, [sp, #12]
    unsigned char*        new_heap = heap + incr;
 801da0c:	4b10      	ldr	r3, [pc, #64]	; (801da50 <_sbrk+0x50>)
 801da0e:	681a      	ldr	r2, [r3, #0]
 801da10:	9b01      	ldr	r3, [sp, #4]
 801da12:	4413      	add	r3, r2
 801da14:	9302      	str	r3, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 801da16:	f3ef 8308 	mrs	r3, MSP
 801da1a:	461c      	mov	r4, r3
  return(result);
 801da1c:	4623      	mov	r3, r4
#if defined(TARGET_ARM7)
    if (new_heap >= stack_ptr) {
#elif defined(TARGET_CORTEX_A)
    if (new_heap >= (unsigned char*)&__HeapLimit) {     /* __HeapLimit is end of heap section */
#else
    if (new_heap >= (unsigned char*)__get_MSP()) {
 801da1e:	461a      	mov	r2, r3
 801da20:	9b02      	ldr	r3, [sp, #8]
 801da22:	429a      	cmp	r2, r3
 801da24:	bf94      	ite	ls
 801da26:	2301      	movls	r3, #1
 801da28:	2300      	movhi	r3, #0
 801da2a:	b2db      	uxtb	r3, r3
 801da2c:	2b00      	cmp	r3, #0
 801da2e:	d005      	beq.n	801da3c <_sbrk+0x3c>
#endif
        errno = ENOMEM;
 801da30:	4b08      	ldr	r3, [pc, #32]	; (801da54 <_sbrk+0x54>)
 801da32:	220c      	movs	r2, #12
 801da34:	601a      	str	r2, [r3, #0]
        return (caddr_t)-1;
 801da36:	f04f 33ff 	mov.w	r3, #4294967295
 801da3a:	e003      	b.n	801da44 <_sbrk+0x44>
    }

    heap = new_heap;
 801da3c:	4a04      	ldr	r2, [pc, #16]	; (801da50 <_sbrk+0x50>)
 801da3e:	9b02      	ldr	r3, [sp, #8]
 801da40:	6013      	str	r3, [r2, #0]
    return (caddr_t) prev_heap;
 801da42:	9b03      	ldr	r3, [sp, #12]
}
 801da44:	4618      	mov	r0, r3
 801da46:	b005      	add	sp, #20
 801da48:	f85d 4b04 	ldr.w	r4, [sp], #4
 801da4c:	4770      	bx	lr
 801da4e:	bf00      	nop
 801da50:	20001724 	.word	0x20001724
 801da54:	20001a8c 	.word	0x20001a8c

0801da58 <_exit>:

#ifdef TOOLCHAIN_GCC_CW
// TODO: Ideally, we would like to define directly "_ExitProcess"
extern "C" void mbed_exit(int return_code) {
#elif defined TOOLCHAIN_GCC_ARM
extern "C" void _exit(int return_code) {
 801da58:	b500      	push	{lr}
 801da5a:	b083      	sub	sp, #12
 801da5c:	9001      	str	r0, [sp, #4]
namespace std {
extern "C" void exit(int return_code) {
#endif

#if DEVICE_STDIO_MESSAGES
    fflush(stdout);
 801da5e:	4b09      	ldr	r3, [pc, #36]	; (801da84 <_exit+0x2c>)
 801da60:	681b      	ldr	r3, [r3, #0]
 801da62:	689b      	ldr	r3, [r3, #8]
 801da64:	4618      	mov	r0, r3
 801da66:	f002 fb33 	bl	80200d0 <fflush>
    fflush(stderr);
 801da6a:	4b06      	ldr	r3, [pc, #24]	; (801da84 <_exit+0x2c>)
 801da6c:	681b      	ldr	r3, [r3, #0]
 801da6e:	68db      	ldr	r3, [r3, #12]
 801da70:	4618      	mov	r0, r3
 801da72:	f002 fb2d 	bl	80200d0 <fflush>
#if DEVICE_SEMIHOST
    if (mbed_interface_connected()) {
        semihost_exit();
    }
#endif
    if (return_code) {
 801da76:	9b01      	ldr	r3, [sp, #4]
 801da78:	2b00      	cmp	r3, #0
 801da7a:	d001      	beq.n	801da80 <_exit+0x28>
        mbed_die();
 801da7c:	f7ff fe68 	bl	801d750 <mbed_die>

#ifdef TOOLCHAIN_GCC_CW
// TODO: Ideally, we would like to define directly "_ExitProcess"
extern "C" void mbed_exit(int return_code) {
#elif defined TOOLCHAIN_GCC_ARM
extern "C" void _exit(int return_code) {
 801da80:	e7fe      	b.n	801da80 <_exit+0x28>
 801da82:	bf00      	nop
 801da84:	20001788 	.word	0x20001788

0801da88 <HAL_RCC_OscConfig>:
 801da88:	6803      	ldr	r3, [r0, #0]
 801da8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801da8c:	07de      	lsls	r6, r3, #31
 801da8e:	b085      	sub	sp, #20
 801da90:	4605      	mov	r5, r0
 801da92:	d551      	bpl.n	801db38 <HAL_RCC_OscConfig+0xb0>
 801da94:	49a9      	ldr	r1, [pc, #676]	; (801dd3c <HAL_RCC_OscConfig+0x2b4>)
 801da96:	688a      	ldr	r2, [r1, #8]
 801da98:	f002 020c 	and.w	r2, r2, #12
 801da9c:	2a04      	cmp	r2, #4
 801da9e:	f000 8130 	beq.w	801dd02 <HAL_RCC_OscConfig+0x27a>
 801daa2:	688a      	ldr	r2, [r1, #8]
 801daa4:	f002 020c 	and.w	r2, r2, #12
 801daa8:	2a08      	cmp	r2, #8
 801daaa:	f000 8126 	beq.w	801dcfa <HAL_RCC_OscConfig+0x272>
 801daae:	4ba3      	ldr	r3, [pc, #652]	; (801dd3c <HAL_RCC_OscConfig+0x2b4>)
 801dab0:	681a      	ldr	r2, [r3, #0]
 801dab2:	461c      	mov	r4, r3
 801dab4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 801dab8:	601a      	str	r2, [r3, #0]
 801daba:	681a      	ldr	r2, [r3, #0]
 801dabc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801dac0:	601a      	str	r2, [r3, #0]
 801dac2:	681a      	ldr	r2, [r3, #0]
 801dac4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 801dac8:	601a      	str	r2, [r3, #0]
 801daca:	f000 fbe3 	bl	801e294 <HAL_GetTick>
 801dace:	4606      	mov	r6, r0
 801dad0:	e006      	b.n	801dae0 <HAL_RCC_OscConfig+0x58>
 801dad2:	f000 fbdf 	bl	801e294 <HAL_GetTick>
 801dad6:	1b80      	subs	r0, r0, r6
 801dad8:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 801dadc:	f200 80fc 	bhi.w	801dcd8 <HAL_RCC_OscConfig+0x250>
 801dae0:	6823      	ldr	r3, [r4, #0]
 801dae2:	4a96      	ldr	r2, [pc, #600]	; (801dd3c <HAL_RCC_OscConfig+0x2b4>)
 801dae4:	0399      	lsls	r1, r3, #14
 801dae6:	d4f4      	bmi.n	801dad2 <HAL_RCC_OscConfig+0x4a>
 801dae8:	6813      	ldr	r3, [r2, #0]
 801daea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801daee:	6013      	str	r3, [r2, #0]
 801daf0:	686b      	ldr	r3, [r5, #4]
 801daf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801daf6:	f000 814c 	beq.w	801dd92 <HAL_RCC_OscConfig+0x30a>
 801dafa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801dafe:	f000 81aa 	beq.w	801de56 <HAL_RCC_OscConfig+0x3ce>
 801db02:	6811      	ldr	r1, [r2, #0]
 801db04:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 801db08:	6011      	str	r1, [r2, #0]
 801db0a:	6811      	ldr	r1, [r2, #0]
 801db0c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 801db10:	6011      	str	r1, [r2, #0]
 801db12:	2b00      	cmp	r3, #0
 801db14:	f040 8145 	bne.w	801dda2 <HAL_RCC_OscConfig+0x31a>
 801db18:	4614      	mov	r4, r2
 801db1a:	f000 fbbb 	bl	801e294 <HAL_GetTick>
 801db1e:	4606      	mov	r6, r0
 801db20:	e006      	b.n	801db30 <HAL_RCC_OscConfig+0xa8>
 801db22:	f000 fbb7 	bl	801e294 <HAL_GetTick>
 801db26:	1b80      	subs	r0, r0, r6
 801db28:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 801db2c:	f200 80d4 	bhi.w	801dcd8 <HAL_RCC_OscConfig+0x250>
 801db30:	6823      	ldr	r3, [r4, #0]
 801db32:	039b      	lsls	r3, r3, #14
 801db34:	d4f5      	bmi.n	801db22 <HAL_RCC_OscConfig+0x9a>
 801db36:	682b      	ldr	r3, [r5, #0]
 801db38:	079f      	lsls	r7, r3, #30
 801db3a:	d532      	bpl.n	801dba2 <HAL_RCC_OscConfig+0x11a>
 801db3c:	4a7f      	ldr	r2, [pc, #508]	; (801dd3c <HAL_RCC_OscConfig+0x2b4>)
 801db3e:	6891      	ldr	r1, [r2, #8]
 801db40:	f011 0f0c 	tst.w	r1, #12
 801db44:	f000 80cf 	beq.w	801dce6 <HAL_RCC_OscConfig+0x25e>
 801db48:	6891      	ldr	r1, [r2, #8]
 801db4a:	f001 010c 	and.w	r1, r1, #12
 801db4e:	2908      	cmp	r1, #8
 801db50:	f000 80c5 	beq.w	801dcde <HAL_RCC_OscConfig+0x256>
 801db54:	68eb      	ldr	r3, [r5, #12]
 801db56:	2b00      	cmp	r3, #0
 801db58:	f000 8107 	beq.w	801dd6a <HAL_RCC_OscConfig+0x2e2>
 801db5c:	4b77      	ldr	r3, [pc, #476]	; (801dd3c <HAL_RCC_OscConfig+0x2b4>)
 801db5e:	681a      	ldr	r2, [r3, #0]
 801db60:	461c      	mov	r4, r3
 801db62:	f042 0201 	orr.w	r2, r2, #1
 801db66:	601a      	str	r2, [r3, #0]
 801db68:	f000 fb94 	bl	801e294 <HAL_GetTick>
 801db6c:	4606      	mov	r6, r0
 801db6e:	e005      	b.n	801db7c <HAL_RCC_OscConfig+0xf4>
 801db70:	f000 fb90 	bl	801e294 <HAL_GetTick>
 801db74:	1b80      	subs	r0, r0, r6
 801db76:	2864      	cmp	r0, #100	; 0x64
 801db78:	f200 80ae 	bhi.w	801dcd8 <HAL_RCC_OscConfig+0x250>
 801db7c:	6823      	ldr	r3, [r4, #0]
 801db7e:	4a6f      	ldr	r2, [pc, #444]	; (801dd3c <HAL_RCC_OscConfig+0x2b4>)
 801db80:	0798      	lsls	r0, r3, #30
 801db82:	d5f5      	bpl.n	801db70 <HAL_RCC_OscConfig+0xe8>
 801db84:	6811      	ldr	r1, [r2, #0]
 801db86:	23f8      	movs	r3, #248	; 0xf8
 801db88:	fa93 f3a3 	rbit	r3, r3
 801db8c:	fab3 f383 	clz	r3, r3
 801db90:	b2db      	uxtb	r3, r3
 801db92:	6928      	ldr	r0, [r5, #16]
 801db94:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 801db98:	4098      	lsls	r0, r3
 801db9a:	ea40 0301 	orr.w	r3, r0, r1
 801db9e:	6013      	str	r3, [r2, #0]
 801dba0:	682b      	ldr	r3, [r5, #0]
 801dba2:	071a      	lsls	r2, r3, #28
 801dba4:	d421      	bmi.n	801dbea <HAL_RCC_OscConfig+0x162>
 801dba6:	075c      	lsls	r4, r3, #29
 801dba8:	d438      	bmi.n	801dc1c <HAL_RCC_OscConfig+0x194>
 801dbaa:	69aa      	ldr	r2, [r5, #24]
 801dbac:	b1d2      	cbz	r2, 801dbe4 <HAL_RCC_OscConfig+0x15c>
 801dbae:	4b63      	ldr	r3, [pc, #396]	; (801dd3c <HAL_RCC_OscConfig+0x2b4>)
 801dbb0:	6899      	ldr	r1, [r3, #8]
 801dbb2:	f001 010c 	and.w	r1, r1, #12
 801dbb6:	2908      	cmp	r1, #8
 801dbb8:	f000 809c 	beq.w	801dcf4 <HAL_RCC_OscConfig+0x26c>
 801dbbc:	2a02      	cmp	r2, #2
 801dbbe:	681a      	ldr	r2, [r3, #0]
 801dbc0:	461c      	mov	r4, r3
 801dbc2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 801dbc6:	601a      	str	r2, [r3, #0]
 801dbc8:	f000 80fa 	beq.w	801ddc0 <HAL_RCC_OscConfig+0x338>
 801dbcc:	f000 fb62 	bl	801e294 <HAL_GetTick>
 801dbd0:	4605      	mov	r5, r0
 801dbd2:	e004      	b.n	801dbde <HAL_RCC_OscConfig+0x156>
 801dbd4:	f000 fb5e 	bl	801e294 <HAL_GetTick>
 801dbd8:	1b40      	subs	r0, r0, r5
 801dbda:	2864      	cmp	r0, #100	; 0x64
 801dbdc:	d87c      	bhi.n	801dcd8 <HAL_RCC_OscConfig+0x250>
 801dbde:	6823      	ldr	r3, [r4, #0]
 801dbe0:	019b      	lsls	r3, r3, #6
 801dbe2:	d4f7      	bmi.n	801dbd4 <HAL_RCC_OscConfig+0x14c>
 801dbe4:	2000      	movs	r0, #0
 801dbe6:	b005      	add	sp, #20
 801dbe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dbea:	696b      	ldr	r3, [r5, #20]
 801dbec:	2b00      	cmp	r3, #0
 801dbee:	f000 8092 	beq.w	801dd16 <HAL_RCC_OscConfig+0x28e>
 801dbf2:	4b52      	ldr	r3, [pc, #328]	; (801dd3c <HAL_RCC_OscConfig+0x2b4>)
 801dbf4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 801dbf6:	461c      	mov	r4, r3
 801dbf8:	f042 0201 	orr.w	r2, r2, #1
 801dbfc:	675a      	str	r2, [r3, #116]	; 0x74
 801dbfe:	f000 fb49 	bl	801e294 <HAL_GetTick>
 801dc02:	4606      	mov	r6, r0
 801dc04:	e004      	b.n	801dc10 <HAL_RCC_OscConfig+0x188>
 801dc06:	f000 fb45 	bl	801e294 <HAL_GetTick>
 801dc0a:	1b80      	subs	r0, r0, r6
 801dc0c:	2864      	cmp	r0, #100	; 0x64
 801dc0e:	d863      	bhi.n	801dcd8 <HAL_RCC_OscConfig+0x250>
 801dc10:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801dc12:	079b      	lsls	r3, r3, #30
 801dc14:	d5f7      	bpl.n	801dc06 <HAL_RCC_OscConfig+0x17e>
 801dc16:	682b      	ldr	r3, [r5, #0]
 801dc18:	075c      	lsls	r4, r3, #29
 801dc1a:	d5c6      	bpl.n	801dbaa <HAL_RCC_OscConfig+0x122>
 801dc1c:	4a47      	ldr	r2, [pc, #284]	; (801dd3c <HAL_RCC_OscConfig+0x2b4>)
 801dc1e:	4b48      	ldr	r3, [pc, #288]	; (801dd40 <HAL_RCC_OscConfig+0x2b8>)
 801dc20:	6c11      	ldr	r1, [r2, #64]	; 0x40
 801dc22:	461c      	mov	r4, r3
 801dc24:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 801dc28:	6411      	str	r1, [r2, #64]	; 0x40
 801dc2a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801dc2c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 801dc30:	9203      	str	r2, [sp, #12]
 801dc32:	9a03      	ldr	r2, [sp, #12]
 801dc34:	681a      	ldr	r2, [r3, #0]
 801dc36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801dc3a:	601a      	str	r2, [r3, #0]
 801dc3c:	f000 fb2a 	bl	801e294 <HAL_GetTick>
 801dc40:	4606      	mov	r6, r0
 801dc42:	e004      	b.n	801dc4e <HAL_RCC_OscConfig+0x1c6>
 801dc44:	f000 fb26 	bl	801e294 <HAL_GetTick>
 801dc48:	1b80      	subs	r0, r0, r6
 801dc4a:	2864      	cmp	r0, #100	; 0x64
 801dc4c:	d844      	bhi.n	801dcd8 <HAL_RCC_OscConfig+0x250>
 801dc4e:	6823      	ldr	r3, [r4, #0]
 801dc50:	05d8      	lsls	r0, r3, #23
 801dc52:	d5f7      	bpl.n	801dc44 <HAL_RCC_OscConfig+0x1bc>
 801dc54:	4b39      	ldr	r3, [pc, #228]	; (801dd3c <HAL_RCC_OscConfig+0x2b4>)
 801dc56:	f241 3788 	movw	r7, #5000	; 0x1388
 801dc5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801dc5c:	461c      	mov	r4, r3
 801dc5e:	f022 0201 	bic.w	r2, r2, #1
 801dc62:	671a      	str	r2, [r3, #112]	; 0x70
 801dc64:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801dc66:	f022 0204 	bic.w	r2, r2, #4
 801dc6a:	671a      	str	r2, [r3, #112]	; 0x70
 801dc6c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801dc6e:	f022 0201 	bic.w	r2, r2, #1
 801dc72:	671a      	str	r2, [r3, #112]	; 0x70
 801dc74:	f000 fb0e 	bl	801e294 <HAL_GetTick>
 801dc78:	4606      	mov	r6, r0
 801dc7a:	e004      	b.n	801dc86 <HAL_RCC_OscConfig+0x1fe>
 801dc7c:	f000 fb0a 	bl	801e294 <HAL_GetTick>
 801dc80:	1b80      	subs	r0, r0, r6
 801dc82:	42b8      	cmp	r0, r7
 801dc84:	d828      	bhi.n	801dcd8 <HAL_RCC_OscConfig+0x250>
 801dc86:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801dc88:	4a2c      	ldr	r2, [pc, #176]	; (801dd3c <HAL_RCC_OscConfig+0x2b4>)
 801dc8a:	0799      	lsls	r1, r3, #30
 801dc8c:	d4f6      	bmi.n	801dc7c <HAL_RCC_OscConfig+0x1f4>
 801dc8e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 801dc90:	f023 0301 	bic.w	r3, r3, #1
 801dc94:	6713      	str	r3, [r2, #112]	; 0x70
 801dc96:	68ab      	ldr	r3, [r5, #8]
 801dc98:	2b01      	cmp	r3, #1
 801dc9a:	f000 80e5 	beq.w	801de68 <HAL_RCC_OscConfig+0x3e0>
 801dc9e:	2b05      	cmp	r3, #5
 801dca0:	f000 80fa 	beq.w	801de98 <HAL_RCC_OscConfig+0x410>
 801dca4:	6f11      	ldr	r1, [r2, #112]	; 0x70
 801dca6:	f021 0104 	bic.w	r1, r1, #4
 801dcaa:	6711      	str	r1, [r2, #112]	; 0x70
 801dcac:	6f11      	ldr	r1, [r2, #112]	; 0x70
 801dcae:	f021 0101 	bic.w	r1, r1, #1
 801dcb2:	6711      	str	r1, [r2, #112]	; 0x70
 801dcb4:	2b00      	cmp	r3, #0
 801dcb6:	f040 80df 	bne.w	801de78 <HAL_RCC_OscConfig+0x3f0>
 801dcba:	4614      	mov	r4, r2
 801dcbc:	f241 3688 	movw	r6, #5000	; 0x1388
 801dcc0:	f000 fae8 	bl	801e294 <HAL_GetTick>
 801dcc4:	4607      	mov	r7, r0
 801dcc6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801dcc8:	0798      	lsls	r0, r3, #30
 801dcca:	f57f af6e 	bpl.w	801dbaa <HAL_RCC_OscConfig+0x122>
 801dcce:	f000 fae1 	bl	801e294 <HAL_GetTick>
 801dcd2:	1bc0      	subs	r0, r0, r7
 801dcd4:	42b0      	cmp	r0, r6
 801dcd6:	d9f6      	bls.n	801dcc6 <HAL_RCC_OscConfig+0x23e>
 801dcd8:	2003      	movs	r0, #3
 801dcda:	b005      	add	sp, #20
 801dcdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dcde:	6852      	ldr	r2, [r2, #4]
 801dce0:	0256      	lsls	r6, r2, #9
 801dce2:	f53f af37 	bmi.w	801db54 <HAL_RCC_OscConfig+0xcc>
 801dce6:	4a15      	ldr	r2, [pc, #84]	; (801dd3c <HAL_RCC_OscConfig+0x2b4>)
 801dce8:	6812      	ldr	r2, [r2, #0]
 801dcea:	0794      	lsls	r4, r2, #30
 801dcec:	d52a      	bpl.n	801dd44 <HAL_RCC_OscConfig+0x2bc>
 801dcee:	68ea      	ldr	r2, [r5, #12]
 801dcf0:	2a01      	cmp	r2, #1
 801dcf2:	d027      	beq.n	801dd44 <HAL_RCC_OscConfig+0x2bc>
 801dcf4:	2001      	movs	r0, #1
 801dcf6:	b005      	add	sp, #20
 801dcf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dcfa:	684a      	ldr	r2, [r1, #4]
 801dcfc:	0254      	lsls	r4, r2, #9
 801dcfe:	f57f aed6 	bpl.w	801daae <HAL_RCC_OscConfig+0x26>
 801dd02:	4a0e      	ldr	r2, [pc, #56]	; (801dd3c <HAL_RCC_OscConfig+0x2b4>)
 801dd04:	6812      	ldr	r2, [r2, #0]
 801dd06:	0390      	lsls	r0, r2, #14
 801dd08:	f57f af16 	bpl.w	801db38 <HAL_RCC_OscConfig+0xb0>
 801dd0c:	686a      	ldr	r2, [r5, #4]
 801dd0e:	2a00      	cmp	r2, #0
 801dd10:	f47f af12 	bne.w	801db38 <HAL_RCC_OscConfig+0xb0>
 801dd14:	e7ee      	b.n	801dcf4 <HAL_RCC_OscConfig+0x26c>
 801dd16:	4b09      	ldr	r3, [pc, #36]	; (801dd3c <HAL_RCC_OscConfig+0x2b4>)
 801dd18:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 801dd1a:	461c      	mov	r4, r3
 801dd1c:	f022 0201 	bic.w	r2, r2, #1
 801dd20:	675a      	str	r2, [r3, #116]	; 0x74
 801dd22:	f000 fab7 	bl	801e294 <HAL_GetTick>
 801dd26:	4606      	mov	r6, r0
 801dd28:	e004      	b.n	801dd34 <HAL_RCC_OscConfig+0x2ac>
 801dd2a:	f000 fab3 	bl	801e294 <HAL_GetTick>
 801dd2e:	1b80      	subs	r0, r0, r6
 801dd30:	2864      	cmp	r0, #100	; 0x64
 801dd32:	d8d1      	bhi.n	801dcd8 <HAL_RCC_OscConfig+0x250>
 801dd34:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801dd36:	079f      	lsls	r7, r3, #30
 801dd38:	d4f7      	bmi.n	801dd2a <HAL_RCC_OscConfig+0x2a2>
 801dd3a:	e76c      	b.n	801dc16 <HAL_RCC_OscConfig+0x18e>
 801dd3c:	40023800 	.word	0x40023800
 801dd40:	40007000 	.word	0x40007000
 801dd44:	4c59      	ldr	r4, [pc, #356]	; (801deac <HAL_RCC_OscConfig+0x424>)
 801dd46:	22f8      	movs	r2, #248	; 0xf8
 801dd48:	6821      	ldr	r1, [r4, #0]
 801dd4a:	fa92 f2a2 	rbit	r2, r2
 801dd4e:	fab2 f282 	clz	r2, r2
 801dd52:	b2d2      	uxtb	r2, r2
 801dd54:	6928      	ldr	r0, [r5, #16]
 801dd56:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 801dd5a:	4090      	lsls	r0, r2
 801dd5c:	ea40 0201 	orr.w	r2, r0, r1
 801dd60:	6022      	str	r2, [r4, #0]
 801dd62:	071a      	lsls	r2, r3, #28
 801dd64:	f57f af1f 	bpl.w	801dba6 <HAL_RCC_OscConfig+0x11e>
 801dd68:	e73f      	b.n	801dbea <HAL_RCC_OscConfig+0x162>
 801dd6a:	4b50      	ldr	r3, [pc, #320]	; (801deac <HAL_RCC_OscConfig+0x424>)
 801dd6c:	681a      	ldr	r2, [r3, #0]
 801dd6e:	461c      	mov	r4, r3
 801dd70:	f022 0201 	bic.w	r2, r2, #1
 801dd74:	601a      	str	r2, [r3, #0]
 801dd76:	f000 fa8d 	bl	801e294 <HAL_GetTick>
 801dd7a:	4606      	mov	r6, r0
 801dd7c:	e004      	b.n	801dd88 <HAL_RCC_OscConfig+0x300>
 801dd7e:	f000 fa89 	bl	801e294 <HAL_GetTick>
 801dd82:	1b80      	subs	r0, r0, r6
 801dd84:	2864      	cmp	r0, #100	; 0x64
 801dd86:	d8a7      	bhi.n	801dcd8 <HAL_RCC_OscConfig+0x250>
 801dd88:	6823      	ldr	r3, [r4, #0]
 801dd8a:	0799      	lsls	r1, r3, #30
 801dd8c:	d4f7      	bmi.n	801dd7e <HAL_RCC_OscConfig+0x2f6>
 801dd8e:	682b      	ldr	r3, [r5, #0]
 801dd90:	e707      	b.n	801dba2 <HAL_RCC_OscConfig+0x11a>
 801dd92:	6813      	ldr	r3, [r2, #0]
 801dd94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801dd98:	6013      	str	r3, [r2, #0]
 801dd9a:	6813      	ldr	r3, [r2, #0]
 801dd9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801dda0:	6013      	str	r3, [r2, #0]
 801dda2:	f000 fa77 	bl	801e294 <HAL_GetTick>
 801dda6:	4c41      	ldr	r4, [pc, #260]	; (801deac <HAL_RCC_OscConfig+0x424>)
 801dda8:	4606      	mov	r6, r0
 801ddaa:	e005      	b.n	801ddb8 <HAL_RCC_OscConfig+0x330>
 801ddac:	f000 fa72 	bl	801e294 <HAL_GetTick>
 801ddb0:	1b80      	subs	r0, r0, r6
 801ddb2:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 801ddb6:	d88f      	bhi.n	801dcd8 <HAL_RCC_OscConfig+0x250>
 801ddb8:	6823      	ldr	r3, [r4, #0]
 801ddba:	039a      	lsls	r2, r3, #14
 801ddbc:	d5f6      	bpl.n	801ddac <HAL_RCC_OscConfig+0x324>
 801ddbe:	e6ba      	b.n	801db36 <HAL_RCC_OscConfig+0xae>
 801ddc0:	f000 fa68 	bl	801e294 <HAL_GetTick>
 801ddc4:	4606      	mov	r6, r0
 801ddc6:	e004      	b.n	801ddd2 <HAL_RCC_OscConfig+0x34a>
 801ddc8:	f000 fa64 	bl	801e294 <HAL_GetTick>
 801ddcc:	1b80      	subs	r0, r0, r6
 801ddce:	2864      	cmp	r0, #100	; 0x64
 801ddd0:	d882      	bhi.n	801dcd8 <HAL_RCC_OscConfig+0x250>
 801ddd2:	6823      	ldr	r3, [r4, #0]
 801ddd4:	4a35      	ldr	r2, [pc, #212]	; (801deac <HAL_RCC_OscConfig+0x424>)
 801ddd6:	0199      	lsls	r1, r3, #6
 801ddd8:	d4f6      	bmi.n	801ddc8 <HAL_RCC_OscConfig+0x340>
 801ddda:	f647 74c0 	movw	r4, #32704	; 0x7fc0
 801ddde:	fa94 f4a4 	rbit	r4, r4
 801dde2:	fab4 f484 	clz	r4, r4
 801dde6:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801ddea:	fa91 f1a1 	rbit	r1, r1
 801ddee:	fab1 f181 	clz	r1, r1
 801ddf2:	f04f 6070 	mov.w	r0, #251658240	; 0xf000000
 801ddf6:	fa90 f0a0 	rbit	r0, r0
 801ddfa:	fab0 f080 	clz	r0, r0
 801ddfe:	6aab      	ldr	r3, [r5, #40]	; 0x28
 801de00:	b2e4      	uxtb	r4, r4
 801de02:	6a2e      	ldr	r6, [r5, #32]
 801de04:	b2c9      	uxtb	r1, r1
 801de06:	9301      	str	r3, [sp, #4]
 801de08:	b2c0      	uxtb	r0, r0
 801de0a:	69eb      	ldr	r3, [r5, #28]
 801de0c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 801de0e:	431e      	orrs	r6, r3
 801de10:	9b01      	ldr	r3, [sp, #4]
 801de12:	6aed      	ldr	r5, [r5, #44]	; 0x2c
 801de14:	fa07 f404 	lsl.w	r4, r7, r4
 801de18:	085b      	lsrs	r3, r3, #1
 801de1a:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 801de1e:	fa05 f000 	lsl.w	r0, r5, r0
 801de22:	3b01      	subs	r3, #1
 801de24:	ea46 0504 	orr.w	r5, r6, r4
 801de28:	4614      	mov	r4, r2
 801de2a:	408b      	lsls	r3, r1
 801de2c:	432b      	orrs	r3, r5
 801de2e:	4303      	orrs	r3, r0
 801de30:	6053      	str	r3, [r2, #4]
 801de32:	6813      	ldr	r3, [r2, #0]
 801de34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801de38:	6013      	str	r3, [r2, #0]
 801de3a:	f000 fa2b 	bl	801e294 <HAL_GetTick>
 801de3e:	4605      	mov	r5, r0
 801de40:	e005      	b.n	801de4e <HAL_RCC_OscConfig+0x3c6>
 801de42:	f000 fa27 	bl	801e294 <HAL_GetTick>
 801de46:	1b40      	subs	r0, r0, r5
 801de48:	2864      	cmp	r0, #100	; 0x64
 801de4a:	f63f af45 	bhi.w	801dcd8 <HAL_RCC_OscConfig+0x250>
 801de4e:	6823      	ldr	r3, [r4, #0]
 801de50:	019a      	lsls	r2, r3, #6
 801de52:	d5f6      	bpl.n	801de42 <HAL_RCC_OscConfig+0x3ba>
 801de54:	e6c6      	b.n	801dbe4 <HAL_RCC_OscConfig+0x15c>
 801de56:	6813      	ldr	r3, [r2, #0]
 801de58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801de5c:	6013      	str	r3, [r2, #0]
 801de5e:	6813      	ldr	r3, [r2, #0]
 801de60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801de64:	6013      	str	r3, [r2, #0]
 801de66:	e79c      	b.n	801dda2 <HAL_RCC_OscConfig+0x31a>
 801de68:	6f13      	ldr	r3, [r2, #112]	; 0x70
 801de6a:	f023 0304 	bic.w	r3, r3, #4
 801de6e:	6713      	str	r3, [r2, #112]	; 0x70
 801de70:	6f13      	ldr	r3, [r2, #112]	; 0x70
 801de72:	f043 0301 	orr.w	r3, r3, #1
 801de76:	6713      	str	r3, [r2, #112]	; 0x70
 801de78:	f000 fa0c 	bl	801e294 <HAL_GetTick>
 801de7c:	4c0b      	ldr	r4, [pc, #44]	; (801deac <HAL_RCC_OscConfig+0x424>)
 801de7e:	4607      	mov	r7, r0
 801de80:	f241 3688 	movw	r6, #5000	; 0x1388
 801de84:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801de86:	079b      	lsls	r3, r3, #30
 801de88:	f53f ae8f 	bmi.w	801dbaa <HAL_RCC_OscConfig+0x122>
 801de8c:	f000 fa02 	bl	801e294 <HAL_GetTick>
 801de90:	1bc0      	subs	r0, r0, r7
 801de92:	42b0      	cmp	r0, r6
 801de94:	d9f6      	bls.n	801de84 <HAL_RCC_OscConfig+0x3fc>
 801de96:	e71f      	b.n	801dcd8 <HAL_RCC_OscConfig+0x250>
 801de98:	6f13      	ldr	r3, [r2, #112]	; 0x70
 801de9a:	f043 0304 	orr.w	r3, r3, #4
 801de9e:	6713      	str	r3, [r2, #112]	; 0x70
 801dea0:	6f13      	ldr	r3, [r2, #112]	; 0x70
 801dea2:	f043 0301 	orr.w	r3, r3, #1
 801dea6:	6713      	str	r3, [r2, #112]	; 0x70
 801dea8:	e7e6      	b.n	801de78 <HAL_RCC_OscConfig+0x3f0>
 801deaa:	bf00      	nop
 801deac:	40023800 	.word	0x40023800

0801deb0 <HAL_RCC_ClockConfig>:
 801deb0:	4a6c      	ldr	r2, [pc, #432]	; (801e064 <HAL_RCC_ClockConfig+0x1b4>)
 801deb2:	6813      	ldr	r3, [r2, #0]
 801deb4:	f003 030f 	and.w	r3, r3, #15
 801deb8:	428b      	cmp	r3, r1
 801deba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801debe:	460c      	mov	r4, r1
 801dec0:	4605      	mov	r5, r0
 801dec2:	d20c      	bcs.n	801dede <HAL_RCC_ClockConfig+0x2e>
 801dec4:	6813      	ldr	r3, [r2, #0]
 801dec6:	f023 030f 	bic.w	r3, r3, #15
 801deca:	430b      	orrs	r3, r1
 801decc:	6013      	str	r3, [r2, #0]
 801dece:	6813      	ldr	r3, [r2, #0]
 801ded0:	f003 030f 	and.w	r3, r3, #15
 801ded4:	428b      	cmp	r3, r1
 801ded6:	d058      	beq.n	801df8a <HAL_RCC_ClockConfig+0xda>
 801ded8:	2001      	movs	r0, #1
 801deda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dede:	6803      	ldr	r3, [r0, #0]
 801dee0:	079a      	lsls	r2, r3, #30
 801dee2:	d506      	bpl.n	801def2 <HAL_RCC_ClockConfig+0x42>
 801dee4:	4860      	ldr	r0, [pc, #384]	; (801e068 <HAL_RCC_ClockConfig+0x1b8>)
 801dee6:	68aa      	ldr	r2, [r5, #8]
 801dee8:	6881      	ldr	r1, [r0, #8]
 801deea:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 801deee:	430a      	orrs	r2, r1
 801def0:	6082      	str	r2, [r0, #8]
 801def2:	07df      	lsls	r7, r3, #31
 801def4:	d524      	bpl.n	801df40 <HAL_RCC_ClockConfig+0x90>
 801def6:	686b      	ldr	r3, [r5, #4]
 801def8:	4a5b      	ldr	r2, [pc, #364]	; (801e068 <HAL_RCC_ClockConfig+0x1b8>)
 801defa:	2b01      	cmp	r3, #1
 801defc:	6812      	ldr	r2, [r2, #0]
 801defe:	f000 808a 	beq.w	801e016 <HAL_RCC_ClockConfig+0x166>
 801df02:	2b02      	cmp	r3, #2
 801df04:	f000 808e 	beq.w	801e024 <HAL_RCC_ClockConfig+0x174>
 801df08:	0791      	lsls	r1, r2, #30
 801df0a:	d5e5      	bpl.n	801ded8 <HAL_RCC_ClockConfig+0x28>
 801df0c:	4e56      	ldr	r6, [pc, #344]	; (801e068 <HAL_RCC_ClockConfig+0x1b8>)
 801df0e:	f241 3888 	movw	r8, #5000	; 0x1388
 801df12:	68b2      	ldr	r2, [r6, #8]
 801df14:	f022 0203 	bic.w	r2, r2, #3
 801df18:	4313      	orrs	r3, r2
 801df1a:	60b3      	str	r3, [r6, #8]
 801df1c:	f000 f9ba 	bl	801e294 <HAL_GetTick>
 801df20:	686b      	ldr	r3, [r5, #4]
 801df22:	4607      	mov	r7, r0
 801df24:	2b01      	cmp	r3, #1
 801df26:	d065      	beq.n	801dff4 <HAL_RCC_ClockConfig+0x144>
 801df28:	2b02      	cmp	r3, #2
 801df2a:	d105      	bne.n	801df38 <HAL_RCC_ClockConfig+0x88>
 801df2c:	e06d      	b.n	801e00a <HAL_RCC_ClockConfig+0x15a>
 801df2e:	f000 f9b1 	bl	801e294 <HAL_GetTick>
 801df32:	1bc0      	subs	r0, r0, r7
 801df34:	4540      	cmp	r0, r8
 801df36:	d872      	bhi.n	801e01e <HAL_RCC_ClockConfig+0x16e>
 801df38:	68b3      	ldr	r3, [r6, #8]
 801df3a:	f013 0f0c 	tst.w	r3, #12
 801df3e:	d1f6      	bne.n	801df2e <HAL_RCC_ClockConfig+0x7e>
 801df40:	4a48      	ldr	r2, [pc, #288]	; (801e064 <HAL_RCC_ClockConfig+0x1b4>)
 801df42:	6813      	ldr	r3, [r2, #0]
 801df44:	f023 030f 	bic.w	r3, r3, #15
 801df48:	4323      	orrs	r3, r4
 801df4a:	6013      	str	r3, [r2, #0]
 801df4c:	6813      	ldr	r3, [r2, #0]
 801df4e:	f003 030f 	and.w	r3, r3, #15
 801df52:	42a3      	cmp	r3, r4
 801df54:	d1c0      	bne.n	801ded8 <HAL_RCC_ClockConfig+0x28>
 801df56:	682b      	ldr	r3, [r5, #0]
 801df58:	075a      	lsls	r2, r3, #29
 801df5a:	d506      	bpl.n	801df6a <HAL_RCC_ClockConfig+0xba>
 801df5c:	4842      	ldr	r0, [pc, #264]	; (801e068 <HAL_RCC_ClockConfig+0x1b8>)
 801df5e:	68ea      	ldr	r2, [r5, #12]
 801df60:	6881      	ldr	r1, [r0, #8]
 801df62:	f421 51e0 	bic.w	r1, r1, #7168	; 0x1c00
 801df66:	430a      	orrs	r2, r1
 801df68:	6082      	str	r2, [r0, #8]
 801df6a:	071b      	lsls	r3, r3, #28
 801df6c:	d507      	bpl.n	801df7e <HAL_RCC_ClockConfig+0xce>
 801df6e:	4a3e      	ldr	r2, [pc, #248]	; (801e068 <HAL_RCC_ClockConfig+0x1b8>)
 801df70:	6929      	ldr	r1, [r5, #16]
 801df72:	6893      	ldr	r3, [r2, #8]
 801df74:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 801df78:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 801df7c:	6093      	str	r3, [r2, #8]
 801df7e:	200f      	movs	r0, #15
 801df80:	f000 fdce 	bl	801eb20 <HAL_InitTick>
 801df84:	2000      	movs	r0, #0
 801df86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801df8a:	6803      	ldr	r3, [r0, #0]
 801df8c:	079f      	lsls	r7, r3, #30
 801df8e:	d506      	bpl.n	801df9e <HAL_RCC_ClockConfig+0xee>
 801df90:	4835      	ldr	r0, [pc, #212]	; (801e068 <HAL_RCC_ClockConfig+0x1b8>)
 801df92:	68aa      	ldr	r2, [r5, #8]
 801df94:	6881      	ldr	r1, [r0, #8]
 801df96:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 801df9a:	430a      	orrs	r2, r1
 801df9c:	6082      	str	r2, [r0, #8]
 801df9e:	07de      	lsls	r6, r3, #31
 801dfa0:	d5da      	bpl.n	801df58 <HAL_RCC_ClockConfig+0xa8>
 801dfa2:	686b      	ldr	r3, [r5, #4]
 801dfa4:	4a30      	ldr	r2, [pc, #192]	; (801e068 <HAL_RCC_ClockConfig+0x1b8>)
 801dfa6:	2b01      	cmp	r3, #1
 801dfa8:	6812      	ldr	r2, [r2, #0]
 801dfaa:	d058      	beq.n	801e05e <HAL_RCC_ClockConfig+0x1ae>
 801dfac:	2b02      	cmp	r3, #2
 801dfae:	d053      	beq.n	801e058 <HAL_RCC_ClockConfig+0x1a8>
 801dfb0:	0791      	lsls	r1, r2, #30
 801dfb2:	d591      	bpl.n	801ded8 <HAL_RCC_ClockConfig+0x28>
 801dfb4:	4c2c      	ldr	r4, [pc, #176]	; (801e068 <HAL_RCC_ClockConfig+0x1b8>)
 801dfb6:	f241 3788 	movw	r7, #5000	; 0x1388
 801dfba:	68a2      	ldr	r2, [r4, #8]
 801dfbc:	f022 0203 	bic.w	r2, r2, #3
 801dfc0:	4313      	orrs	r3, r2
 801dfc2:	60a3      	str	r3, [r4, #8]
 801dfc4:	f000 f966 	bl	801e294 <HAL_GetTick>
 801dfc8:	686b      	ldr	r3, [r5, #4]
 801dfca:	4606      	mov	r6, r0
 801dfcc:	2b01      	cmp	r3, #1
 801dfce:	d032      	beq.n	801e036 <HAL_RCC_ClockConfig+0x186>
 801dfd0:	2b02      	cmp	r3, #2
 801dfd2:	d105      	bne.n	801dfe0 <HAL_RCC_ClockConfig+0x130>
 801dfd4:	e03a      	b.n	801e04c <HAL_RCC_ClockConfig+0x19c>
 801dfd6:	f000 f95d 	bl	801e294 <HAL_GetTick>
 801dfda:	1b80      	subs	r0, r0, r6
 801dfdc:	42b8      	cmp	r0, r7
 801dfde:	d81e      	bhi.n	801e01e <HAL_RCC_ClockConfig+0x16e>
 801dfe0:	68a3      	ldr	r3, [r4, #8]
 801dfe2:	f013 0f0c 	tst.w	r3, #12
 801dfe6:	d1f6      	bne.n	801dfd6 <HAL_RCC_ClockConfig+0x126>
 801dfe8:	e7b5      	b.n	801df56 <HAL_RCC_ClockConfig+0xa6>
 801dfea:	f000 f953 	bl	801e294 <HAL_GetTick>
 801dfee:	1bc0      	subs	r0, r0, r7
 801dff0:	4540      	cmp	r0, r8
 801dff2:	d814      	bhi.n	801e01e <HAL_RCC_ClockConfig+0x16e>
 801dff4:	68b3      	ldr	r3, [r6, #8]
 801dff6:	f003 030c 	and.w	r3, r3, #12
 801dffa:	2b04      	cmp	r3, #4
 801dffc:	d1f5      	bne.n	801dfea <HAL_RCC_ClockConfig+0x13a>
 801dffe:	e79f      	b.n	801df40 <HAL_RCC_ClockConfig+0x90>
 801e000:	f000 f948 	bl	801e294 <HAL_GetTick>
 801e004:	1bc0      	subs	r0, r0, r7
 801e006:	4540      	cmp	r0, r8
 801e008:	d809      	bhi.n	801e01e <HAL_RCC_ClockConfig+0x16e>
 801e00a:	68b3      	ldr	r3, [r6, #8]
 801e00c:	f003 030c 	and.w	r3, r3, #12
 801e010:	2b08      	cmp	r3, #8
 801e012:	d1f5      	bne.n	801e000 <HAL_RCC_ClockConfig+0x150>
 801e014:	e794      	b.n	801df40 <HAL_RCC_ClockConfig+0x90>
 801e016:	0396      	lsls	r6, r2, #14
 801e018:	f53f af78 	bmi.w	801df0c <HAL_RCC_ClockConfig+0x5c>
 801e01c:	e75c      	b.n	801ded8 <HAL_RCC_ClockConfig+0x28>
 801e01e:	2003      	movs	r0, #3
 801e020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e024:	0190      	lsls	r0, r2, #6
 801e026:	f53f af71 	bmi.w	801df0c <HAL_RCC_ClockConfig+0x5c>
 801e02a:	e755      	b.n	801ded8 <HAL_RCC_ClockConfig+0x28>
 801e02c:	f000 f932 	bl	801e294 <HAL_GetTick>
 801e030:	1b80      	subs	r0, r0, r6
 801e032:	42b8      	cmp	r0, r7
 801e034:	d8f3      	bhi.n	801e01e <HAL_RCC_ClockConfig+0x16e>
 801e036:	68a3      	ldr	r3, [r4, #8]
 801e038:	f003 030c 	and.w	r3, r3, #12
 801e03c:	2b04      	cmp	r3, #4
 801e03e:	d1f5      	bne.n	801e02c <HAL_RCC_ClockConfig+0x17c>
 801e040:	e789      	b.n	801df56 <HAL_RCC_ClockConfig+0xa6>
 801e042:	f000 f927 	bl	801e294 <HAL_GetTick>
 801e046:	1b80      	subs	r0, r0, r6
 801e048:	42b8      	cmp	r0, r7
 801e04a:	d8e8      	bhi.n	801e01e <HAL_RCC_ClockConfig+0x16e>
 801e04c:	68a3      	ldr	r3, [r4, #8]
 801e04e:	f003 030c 	and.w	r3, r3, #12
 801e052:	2b08      	cmp	r3, #8
 801e054:	d1f5      	bne.n	801e042 <HAL_RCC_ClockConfig+0x192>
 801e056:	e77e      	b.n	801df56 <HAL_RCC_ClockConfig+0xa6>
 801e058:	0190      	lsls	r0, r2, #6
 801e05a:	d4ab      	bmi.n	801dfb4 <HAL_RCC_ClockConfig+0x104>
 801e05c:	e73c      	b.n	801ded8 <HAL_RCC_ClockConfig+0x28>
 801e05e:	0394      	lsls	r4, r2, #14
 801e060:	d4a8      	bmi.n	801dfb4 <HAL_RCC_ClockConfig+0x104>
 801e062:	e739      	b.n	801ded8 <HAL_RCC_ClockConfig+0x28>
 801e064:	40023c00 	.word	0x40023c00
 801e068:	40023800 	.word	0x40023800

0801e06c <HAL_RCC_GetSysClockFreq>:
 801e06c:	4923      	ldr	r1, [pc, #140]	; (801e0fc <HAL_RCC_GetSysClockFreq+0x90>)
 801e06e:	688b      	ldr	r3, [r1, #8]
 801e070:	f003 030c 	and.w	r3, r3, #12
 801e074:	2b04      	cmp	r3, #4
 801e076:	d02d      	beq.n	801e0d4 <HAL_RCC_GetSysClockFreq+0x68>
 801e078:	2b08      	cmp	r3, #8
 801e07a:	d129      	bne.n	801e0d0 <HAL_RCC_GetSysClockFreq+0x64>
 801e07c:	684a      	ldr	r2, [r1, #4]
 801e07e:	b430      	push	{r4, r5}
 801e080:	684d      	ldr	r5, [r1, #4]
 801e082:	f002 043f 	and.w	r4, r2, #63	; 0x3f
 801e086:	684b      	ldr	r3, [r1, #4]
 801e088:	026a      	lsls	r2, r5, #9
 801e08a:	d425      	bmi.n	801e0d8 <HAL_RCC_GetSysClockFreq+0x6c>
 801e08c:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 801e090:	fa91 f1a1 	rbit	r1, r1
 801e094:	fab1 f181 	clz	r1, r1
 801e098:	f647 70c0 	movw	r0, #32704	; 0x7fc0
 801e09c:	4a18      	ldr	r2, [pc, #96]	; (801e100 <HAL_RCC_GetSysClockFreq+0x94>)
 801e09e:	b2c9      	uxtb	r1, r1
 801e0a0:	4018      	ands	r0, r3
 801e0a2:	fbb2 f2f4 	udiv	r2, r2, r4
 801e0a6:	40c8      	lsrs	r0, r1
 801e0a8:	fb02 f300 	mul.w	r3, r2, r0
 801e0ac:	4913      	ldr	r1, [pc, #76]	; (801e0fc <HAL_RCC_GetSysClockFreq+0x90>)
 801e0ae:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 801e0b2:	6848      	ldr	r0, [r1, #4]
 801e0b4:	fa92 f2a2 	rbit	r2, r2
 801e0b8:	fab2 f282 	clz	r2, r2
 801e0bc:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 801e0c0:	b2d2      	uxtb	r2, r2
 801e0c2:	40d0      	lsrs	r0, r2
 801e0c4:	3001      	adds	r0, #1
 801e0c6:	0040      	lsls	r0, r0, #1
 801e0c8:	bc30      	pop	{r4, r5}
 801e0ca:	fbb3 f0f0 	udiv	r0, r3, r0
 801e0ce:	4770      	bx	lr
 801e0d0:	480b      	ldr	r0, [pc, #44]	; (801e100 <HAL_RCC_GetSysClockFreq+0x94>)
 801e0d2:	4770      	bx	lr
 801e0d4:	480b      	ldr	r0, [pc, #44]	; (801e104 <HAL_RCC_GetSysClockFreq+0x98>)
 801e0d6:	4770      	bx	lr
 801e0d8:	f647 75c0 	movw	r5, #32704	; 0x7fc0
 801e0dc:	fa95 f5a5 	rbit	r5, r5
 801e0e0:	fab5 f585 	clz	r5, r5
 801e0e4:	f647 70c0 	movw	r0, #32704	; 0x7fc0
 801e0e8:	4906      	ldr	r1, [pc, #24]	; (801e104 <HAL_RCC_GetSysClockFreq+0x98>)
 801e0ea:	b2ed      	uxtb	r5, r5
 801e0ec:	4018      	ands	r0, r3
 801e0ee:	fbb1 f2f4 	udiv	r2, r1, r4
 801e0f2:	40e8      	lsrs	r0, r5
 801e0f4:	fb02 f300 	mul.w	r3, r2, r0
 801e0f8:	e7d8      	b.n	801e0ac <HAL_RCC_GetSysClockFreq+0x40>
 801e0fa:	bf00      	nop
 801e0fc:	40023800 	.word	0x40023800
 801e100:	00f42400 	.word	0x00f42400
 801e104:	017d7840 	.word	0x017d7840

0801e108 <HAL_RCC_GetHCLKFreq>:
 801e108:	b508      	push	{r3, lr}
 801e10a:	f7ff ffaf 	bl	801e06c <HAL_RCC_GetSysClockFreq>
 801e10e:	4a09      	ldr	r2, [pc, #36]	; (801e134 <HAL_RCC_GetHCLKFreq+0x2c>)
 801e110:	23f0      	movs	r3, #240	; 0xf0
 801e112:	6892      	ldr	r2, [r2, #8]
 801e114:	fa93 f3a3 	rbit	r3, r3
 801e118:	fab3 f383 	clz	r3, r3
 801e11c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 801e120:	b2db      	uxtb	r3, r3
 801e122:	4905      	ldr	r1, [pc, #20]	; (801e138 <HAL_RCC_GetHCLKFreq+0x30>)
 801e124:	fa22 f303 	lsr.w	r3, r2, r3
 801e128:	4a04      	ldr	r2, [pc, #16]	; (801e13c <HAL_RCC_GetHCLKFreq+0x34>)
 801e12a:	5ccb      	ldrb	r3, [r1, r3]
 801e12c:	40d8      	lsrs	r0, r3
 801e12e:	6010      	str	r0, [r2, #0]
 801e130:	bd08      	pop	{r3, pc}
 801e132:	bf00      	nop
 801e134:	40023800 	.word	0x40023800
 801e138:	08026d50 	.word	0x08026d50
 801e13c:	20001720 	.word	0x20001720

0801e140 <HAL_RCC_GetPCLK1Freq>:
 801e140:	b508      	push	{r3, lr}
 801e142:	f7ff ffe1 	bl	801e108 <HAL_RCC_GetHCLKFreq>
 801e146:	4a08      	ldr	r2, [pc, #32]	; (801e168 <HAL_RCC_GetPCLK1Freq+0x28>)
 801e148:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 801e14c:	6892      	ldr	r2, [r2, #8]
 801e14e:	fa93 f3a3 	rbit	r3, r3
 801e152:	fab3 f383 	clz	r3, r3
 801e156:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 801e15a:	b2db      	uxtb	r3, r3
 801e15c:	4903      	ldr	r1, [pc, #12]	; (801e16c <HAL_RCC_GetPCLK1Freq+0x2c>)
 801e15e:	fa22 f303 	lsr.w	r3, r2, r3
 801e162:	5ccb      	ldrb	r3, [r1, r3]
 801e164:	40d8      	lsrs	r0, r3
 801e166:	bd08      	pop	{r3, pc}
 801e168:	40023800 	.word	0x40023800
 801e16c:	08026d50 	.word	0x08026d50

0801e170 <HAL_RCC_GetPCLK2Freq>:
 801e170:	b508      	push	{r3, lr}
 801e172:	f7ff ffc9 	bl	801e108 <HAL_RCC_GetHCLKFreq>
 801e176:	4a08      	ldr	r2, [pc, #32]	; (801e198 <HAL_RCC_GetPCLK2Freq+0x28>)
 801e178:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 801e17c:	6892      	ldr	r2, [r2, #8]
 801e17e:	fa93 f3a3 	rbit	r3, r3
 801e182:	fab3 f383 	clz	r3, r3
 801e186:	f402 4260 	and.w	r2, r2, #57344	; 0xe000
 801e18a:	b2db      	uxtb	r3, r3
 801e18c:	4903      	ldr	r1, [pc, #12]	; (801e19c <HAL_RCC_GetPCLK2Freq+0x2c>)
 801e18e:	fa22 f303 	lsr.w	r3, r2, r3
 801e192:	5ccb      	ldrb	r3, [r1, r3]
 801e194:	40d8      	lsrs	r0, r3
 801e196:	bd08      	pop	{r3, pc}
 801e198:	40023800 	.word	0x40023800
 801e19c:	08026d50 	.word	0x08026d50

0801e1a0 <HAL_RCC_GetClockConfig>:
 801e1a0:	4b0e      	ldr	r3, [pc, #56]	; (801e1dc <HAL_RCC_GetClockConfig+0x3c>)
 801e1a2:	220f      	movs	r2, #15
 801e1a4:	6002      	str	r2, [r0, #0]
 801e1a6:	689a      	ldr	r2, [r3, #8]
 801e1a8:	f002 0203 	and.w	r2, r2, #3
 801e1ac:	6042      	str	r2, [r0, #4]
 801e1ae:	689a      	ldr	r2, [r3, #8]
 801e1b0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 801e1b4:	6082      	str	r2, [r0, #8]
 801e1b6:	689a      	ldr	r2, [r3, #8]
 801e1b8:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 801e1bc:	60c2      	str	r2, [r0, #12]
 801e1be:	689b      	ldr	r3, [r3, #8]
 801e1c0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 801e1c4:	b410      	push	{r4}
 801e1c6:	08db      	lsrs	r3, r3, #3
 801e1c8:	4c05      	ldr	r4, [pc, #20]	; (801e1e0 <HAL_RCC_GetClockConfig+0x40>)
 801e1ca:	6103      	str	r3, [r0, #16]
 801e1cc:	6823      	ldr	r3, [r4, #0]
 801e1ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e1d2:	f003 030f 	and.w	r3, r3, #15
 801e1d6:	600b      	str	r3, [r1, #0]
 801e1d8:	4770      	bx	lr
 801e1da:	bf00      	nop
 801e1dc:	40023800 	.word	0x40023800
 801e1e0:	40023c00 	.word	0x40023c00

0801e1e4 <HAL_PWREx_EnableOverDrive>:
 801e1e4:	4a1b      	ldr	r2, [pc, #108]	; (801e254 <HAL_PWREx_EnableOverDrive+0x70>)
 801e1e6:	4b1c      	ldr	r3, [pc, #112]	; (801e258 <HAL_PWREx_EnableOverDrive+0x74>)
 801e1e8:	6c11      	ldr	r1, [r2, #64]	; 0x40
 801e1ea:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 801e1ee:	b530      	push	{r4, r5, lr}
 801e1f0:	6411      	str	r1, [r2, #64]	; 0x40
 801e1f2:	b083      	sub	sp, #12
 801e1f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801e1f6:	461c      	mov	r4, r3
 801e1f8:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 801e1fc:	9201      	str	r2, [sp, #4]
 801e1fe:	9a01      	ldr	r2, [sp, #4]
 801e200:	681a      	ldr	r2, [r3, #0]
 801e202:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 801e206:	601a      	str	r2, [r3, #0]
 801e208:	f000 f844 	bl	801e294 <HAL_GetTick>
 801e20c:	4605      	mov	r5, r0
 801e20e:	e005      	b.n	801e21c <HAL_PWREx_EnableOverDrive+0x38>
 801e210:	f000 f840 	bl	801e294 <HAL_GetTick>
 801e214:	1b40      	subs	r0, r0, r5
 801e216:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 801e21a:	d818      	bhi.n	801e24e <HAL_PWREx_EnableOverDrive+0x6a>
 801e21c:	6863      	ldr	r3, [r4, #4]
 801e21e:	4a0e      	ldr	r2, [pc, #56]	; (801e258 <HAL_PWREx_EnableOverDrive+0x74>)
 801e220:	03d9      	lsls	r1, r3, #15
 801e222:	d5f5      	bpl.n	801e210 <HAL_PWREx_EnableOverDrive+0x2c>
 801e224:	6813      	ldr	r3, [r2, #0]
 801e226:	4614      	mov	r4, r2
 801e228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801e22c:	6013      	str	r3, [r2, #0]
 801e22e:	f000 f831 	bl	801e294 <HAL_GetTick>
 801e232:	4605      	mov	r5, r0
 801e234:	e005      	b.n	801e242 <HAL_PWREx_EnableOverDrive+0x5e>
 801e236:	f000 f82d 	bl	801e294 <HAL_GetTick>
 801e23a:	1b40      	subs	r0, r0, r5
 801e23c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 801e240:	d805      	bhi.n	801e24e <HAL_PWREx_EnableOverDrive+0x6a>
 801e242:	6863      	ldr	r3, [r4, #4]
 801e244:	039b      	lsls	r3, r3, #14
 801e246:	d5f6      	bpl.n	801e236 <HAL_PWREx_EnableOverDrive+0x52>
 801e248:	2000      	movs	r0, #0
 801e24a:	b003      	add	sp, #12
 801e24c:	bd30      	pop	{r4, r5, pc}
 801e24e:	2003      	movs	r0, #3
 801e250:	b003      	add	sp, #12
 801e252:	bd30      	pop	{r4, r5, pc}
 801e254:	40023800 	.word	0x40023800
 801e258:	40007000 	.word	0x40007000

0801e25c <HAL_MspInit>:
 801e25c:	4770      	bx	lr
 801e25e:	bf00      	nop

0801e260 <HAL_Init>:
 801e260:	4a07      	ldr	r2, [pc, #28]	; (801e280 <HAL_Init+0x20>)
 801e262:	2003      	movs	r0, #3
 801e264:	b508      	push	{r3, lr}
 801e266:	6813      	ldr	r3, [r2, #0]
 801e268:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801e26c:	6013      	str	r3, [r2, #0]
 801e26e:	f000 f817 	bl	801e2a0 <HAL_NVIC_SetPriorityGrouping>
 801e272:	200f      	movs	r0, #15
 801e274:	f000 fc54 	bl	801eb20 <HAL_InitTick>
 801e278:	f7ff fff0 	bl	801e25c <HAL_MspInit>
 801e27c:	2000      	movs	r0, #0
 801e27e:	bd08      	pop	{r3, pc}
 801e280:	40023c00 	.word	0x40023c00

0801e284 <HAL_IncTick>:
 801e284:	4a02      	ldr	r2, [pc, #8]	; (801e290 <HAL_IncTick+0xc>)
 801e286:	6813      	ldr	r3, [r2, #0]
 801e288:	3301      	adds	r3, #1
 801e28a:	6013      	str	r3, [r2, #0]
 801e28c:	4770      	bx	lr
 801e28e:	bf00      	nop
 801e290:	20001904 	.word	0x20001904

0801e294 <HAL_GetTick>:
 801e294:	4b01      	ldr	r3, [pc, #4]	; (801e29c <HAL_GetTick+0x8>)
 801e296:	6818      	ldr	r0, [r3, #0]
 801e298:	4770      	bx	lr
 801e29a:	bf00      	nop
 801e29c:	20001904 	.word	0x20001904

0801e2a0 <HAL_NVIC_SetPriorityGrouping>:
 801e2a0:	4907      	ldr	r1, [pc, #28]	; (801e2c0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 801e2a2:	f64f 02ff 	movw	r2, #63743	; 0xf8ff
 801e2a6:	4b07      	ldr	r3, [pc, #28]	; (801e2c4 <HAL_NVIC_SetPriorityGrouping+0x24>)
 801e2a8:	f000 0007 	and.w	r0, r0, #7
 801e2ac:	b410      	push	{r4}
 801e2ae:	68cc      	ldr	r4, [r1, #12]
 801e2b0:	4022      	ands	r2, r4
 801e2b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e2b6:	4313      	orrs	r3, r2
 801e2b8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 801e2bc:	60cb      	str	r3, [r1, #12]
 801e2be:	4770      	bx	lr
 801e2c0:	e000ed00 	.word	0xe000ed00
 801e2c4:	05fa0000 	.word	0x05fa0000

0801e2c8 <HAL_GPIO_Init>:
 801e2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e2cc:	2300      	movs	r3, #0
 801e2ce:	b083      	sub	sp, #12
 801e2d0:	f8df 8230 	ldr.w	r8, [pc, #560]	; 801e504 <HAL_GPIO_Init+0x23c>
 801e2d4:	f8d1 c000 	ldr.w	ip, [r1]
 801e2d8:	f8df 922c 	ldr.w	r9, [pc, #556]	; 801e508 <HAL_GPIO_Init+0x240>
 801e2dc:	f8df e22c 	ldr.w	lr, [pc, #556]	; 801e50c <HAL_GPIO_Init+0x244>
 801e2e0:	e003      	b.n	801e2ea <HAL_GPIO_Init+0x22>
 801e2e2:	3301      	adds	r3, #1
 801e2e4:	2b10      	cmp	r3, #16
 801e2e6:	f000 80ae 	beq.w	801e446 <HAL_GPIO_Init+0x17e>
 801e2ea:	2201      	movs	r2, #1
 801e2ec:	409a      	lsls	r2, r3
 801e2ee:	ea02 040c 	and.w	r4, r2, ip
 801e2f2:	4294      	cmp	r4, r2
 801e2f4:	d1f5      	bne.n	801e2e2 <HAL_GPIO_Init+0x1a>
 801e2f6:	684d      	ldr	r5, [r1, #4]
 801e2f8:	f025 0710 	bic.w	r7, r5, #16
 801e2fc:	2f02      	cmp	r7, #2
 801e2fe:	f040 80a5 	bne.w	801e44c <HAL_GPIO_Init+0x184>
 801e302:	08df      	lsrs	r7, r3, #3
 801e304:	f003 0a07 	and.w	sl, r3, #7
 801e308:	f04f 0b0f 	mov.w	fp, #15
 801e30c:	690a      	ldr	r2, [r1, #16]
 801e30e:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 801e312:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 801e316:	6a3e      	ldr	r6, [r7, #32]
 801e318:	fa0b fb0a 	lsl.w	fp, fp, sl
 801e31c:	fa02 f20a 	lsl.w	r2, r2, sl
 801e320:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 801e324:	ea26 060b 	bic.w	r6, r6, fp
 801e328:	f04f 0b03 	mov.w	fp, #3
 801e32c:	4332      	orrs	r2, r6
 801e32e:	fa0b fb0a 	lsl.w	fp, fp, sl
 801e332:	f005 0603 	and.w	r6, r5, #3
 801e336:	623a      	str	r2, [r7, #32]
 801e338:	ea6f 020b 	mvn.w	r2, fp
 801e33c:	6807      	ldr	r7, [r0, #0]
 801e33e:	fa06 f60a 	lsl.w	r6, r6, sl
 801e342:	4017      	ands	r7, r2
 801e344:	433e      	orrs	r6, r7
 801e346:	6006      	str	r6, [r0, #0]
 801e348:	6886      	ldr	r6, [r0, #8]
 801e34a:	f3c5 1700 	ubfx	r7, r5, #4, #1
 801e34e:	ea02 0b06 	and.w	fp, r2, r6
 801e352:	68ce      	ldr	r6, [r1, #12]
 801e354:	409f      	lsls	r7, r3
 801e356:	fa06 f60a 	lsl.w	r6, r6, sl
 801e35a:	ea4b 0606 	orr.w	r6, fp, r6
 801e35e:	6086      	str	r6, [r0, #8]
 801e360:	6846      	ldr	r6, [r0, #4]
 801e362:	ea26 0604 	bic.w	r6, r6, r4
 801e366:	4337      	orrs	r7, r6
 801e368:	6047      	str	r7, [r0, #4]
 801e36a:	68c7      	ldr	r7, [r0, #12]
 801e36c:	688e      	ldr	r6, [r1, #8]
 801e36e:	403a      	ands	r2, r7
 801e370:	fa06 f60a 	lsl.w	r6, r6, sl
 801e374:	4316      	orrs	r6, r2
 801e376:	00ea      	lsls	r2, r5, #3
 801e378:	60c6      	str	r6, [r0, #12]
 801e37a:	d5b2      	bpl.n	801e2e2 <HAL_GPIO_Init+0x1a>
 801e37c:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 801e380:	f023 0b03 	bic.w	fp, r3, #3
 801e384:	4f58      	ldr	r7, [pc, #352]	; (801e4e8 <HAL_GPIO_Init+0x220>)
 801e386:	f003 0203 	and.w	r2, r3, #3
 801e38a:	f446 4a80 	orr.w	sl, r6, #16384	; 0x4000
 801e38e:	260f      	movs	r6, #15
 801e390:	445f      	add	r7, fp
 801e392:	0092      	lsls	r2, r2, #2
 801e394:	f8c8 a044 	str.w	sl, [r8, #68]	; 0x44
 801e398:	4548      	cmp	r0, r9
 801e39a:	f8d8 a044 	ldr.w	sl, [r8, #68]	; 0x44
 801e39e:	fa06 f602 	lsl.w	r6, r6, r2
 801e3a2:	f40a 4a80 	and.w	sl, sl, #16384	; 0x4000
 801e3a6:	f8cd a004 	str.w	sl, [sp, #4]
 801e3aa:	f8dd a004 	ldr.w	sl, [sp, #4]
 801e3ae:	f8d7 a008 	ldr.w	sl, [r7, #8]
 801e3b2:	ea2a 0b06 	bic.w	fp, sl, r6
 801e3b6:	d068      	beq.n	801e48a <HAL_GPIO_Init+0x1c2>
 801e3b8:	4e4c      	ldr	r6, [pc, #304]	; (801e4ec <HAL_GPIO_Init+0x224>)
 801e3ba:	42b0      	cmp	r0, r6
 801e3bc:	d067      	beq.n	801e48e <HAL_GPIO_Init+0x1c6>
 801e3be:	4e4c      	ldr	r6, [pc, #304]	; (801e4f0 <HAL_GPIO_Init+0x228>)
 801e3c0:	42b0      	cmp	r0, r6
 801e3c2:	d069      	beq.n	801e498 <HAL_GPIO_Init+0x1d0>
 801e3c4:	4e4b      	ldr	r6, [pc, #300]	; (801e4f4 <HAL_GPIO_Init+0x22c>)
 801e3c6:	42b0      	cmp	r0, r6
 801e3c8:	d06b      	beq.n	801e4a2 <HAL_GPIO_Init+0x1da>
 801e3ca:	4e4b      	ldr	r6, [pc, #300]	; (801e4f8 <HAL_GPIO_Init+0x230>)
 801e3cc:	42b0      	cmp	r0, r6
 801e3ce:	d072      	beq.n	801e4b6 <HAL_GPIO_Init+0x1ee>
 801e3d0:	4e4a      	ldr	r6, [pc, #296]	; (801e4fc <HAL_GPIO_Init+0x234>)
 801e3d2:	42b0      	cmp	r0, r6
 801e3d4:	d074      	beq.n	801e4c0 <HAL_GPIO_Init+0x1f8>
 801e3d6:	4e4a      	ldr	r6, [pc, #296]	; (801e500 <HAL_GPIO_Init+0x238>)
 801e3d8:	42b0      	cmp	r0, r6
 801e3da:	d076      	beq.n	801e4ca <HAL_GPIO_Init+0x202>
 801e3dc:	f8df a130 	ldr.w	sl, [pc, #304]	; 801e510 <HAL_GPIO_Init+0x248>
 801e3e0:	4550      	cmp	r0, sl
 801e3e2:	d077      	beq.n	801e4d4 <HAL_GPIO_Init+0x20c>
 801e3e4:	f8df a12c 	ldr.w	sl, [pc, #300]	; 801e514 <HAL_GPIO_Init+0x24c>
 801e3e8:	4550      	cmp	r0, sl
 801e3ea:	d078      	beq.n	801e4de <HAL_GPIO_Init+0x216>
 801e3ec:	f8df a128 	ldr.w	sl, [pc, #296]	; 801e518 <HAL_GPIO_Init+0x250>
 801e3f0:	4550      	cmp	r0, sl
 801e3f2:	d05b      	beq.n	801e4ac <HAL_GPIO_Init+0x1e4>
 801e3f4:	f04f 0a0a 	mov.w	sl, #10
 801e3f8:	fa0a f202 	lsl.w	r2, sl, r2
 801e3fc:	ea42 020b 	orr.w	r2, r2, fp
 801e400:	43e6      	mvns	r6, r4
 801e402:	60ba      	str	r2, [r7, #8]
 801e404:	03ef      	lsls	r7, r5, #15
 801e406:	f8de 2000 	ldr.w	r2, [lr]
 801e40a:	d43c      	bmi.n	801e486 <HAL_GPIO_Init+0x1be>
 801e40c:	4032      	ands	r2, r6
 801e40e:	03af      	lsls	r7, r5, #14
 801e410:	f8ce 2000 	str.w	r2, [lr]
 801e414:	f8de 2004 	ldr.w	r2, [lr, #4]
 801e418:	d433      	bmi.n	801e482 <HAL_GPIO_Init+0x1ba>
 801e41a:	4032      	ands	r2, r6
 801e41c:	02ef      	lsls	r7, r5, #11
 801e41e:	f8ce 2004 	str.w	r2, [lr, #4]
 801e422:	f8de 2008 	ldr.w	r2, [lr, #8]
 801e426:	d42a      	bmi.n	801e47e <HAL_GPIO_Init+0x1b6>
 801e428:	4032      	ands	r2, r6
 801e42a:	02ad      	lsls	r5, r5, #10
 801e42c:	f8ce 2008 	str.w	r2, [lr, #8]
 801e430:	f8de 200c 	ldr.w	r2, [lr, #12]
 801e434:	d421      	bmi.n	801e47a <HAL_GPIO_Init+0x1b2>
 801e436:	ea06 0402 	and.w	r4, r6, r2
 801e43a:	3301      	adds	r3, #1
 801e43c:	f8ce 400c 	str.w	r4, [lr, #12]
 801e440:	2b10      	cmp	r3, #16
 801e442:	f47f af52 	bne.w	801e2ea <HAL_GPIO_Init+0x22>
 801e446:	b003      	add	sp, #12
 801e448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e44c:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 801e450:	2203      	movs	r2, #3
 801e452:	f8d0 b000 	ldr.w	fp, [r0]
 801e456:	3f01      	subs	r7, #1
 801e458:	ea05 0602 	and.w	r6, r5, r2
 801e45c:	fa02 f20a 	lsl.w	r2, r2, sl
 801e460:	2f01      	cmp	r7, #1
 801e462:	ea6f 0202 	mvn.w	r2, r2
 801e466:	fa06 f60a 	lsl.w	r6, r6, sl
 801e46a:	ea02 0b0b 	and.w	fp, r2, fp
 801e46e:	ea4b 0606 	orr.w	r6, fp, r6
 801e472:	6006      	str	r6, [r0, #0]
 801e474:	f63f af79 	bhi.w	801e36a <HAL_GPIO_Init+0xa2>
 801e478:	e766      	b.n	801e348 <HAL_GPIO_Init+0x80>
 801e47a:	4314      	orrs	r4, r2
 801e47c:	e7dd      	b.n	801e43a <HAL_GPIO_Init+0x172>
 801e47e:	4322      	orrs	r2, r4
 801e480:	e7d3      	b.n	801e42a <HAL_GPIO_Init+0x162>
 801e482:	4322      	orrs	r2, r4
 801e484:	e7ca      	b.n	801e41c <HAL_GPIO_Init+0x154>
 801e486:	4322      	orrs	r2, r4
 801e488:	e7c1      	b.n	801e40e <HAL_GPIO_Init+0x146>
 801e48a:	2200      	movs	r2, #0
 801e48c:	e7b6      	b.n	801e3fc <HAL_GPIO_Init+0x134>
 801e48e:	f04f 0a01 	mov.w	sl, #1
 801e492:	fa0a f202 	lsl.w	r2, sl, r2
 801e496:	e7b1      	b.n	801e3fc <HAL_GPIO_Init+0x134>
 801e498:	f04f 0a02 	mov.w	sl, #2
 801e49c:	fa0a f202 	lsl.w	r2, sl, r2
 801e4a0:	e7ac      	b.n	801e3fc <HAL_GPIO_Init+0x134>
 801e4a2:	f04f 0a03 	mov.w	sl, #3
 801e4a6:	fa0a f202 	lsl.w	r2, sl, r2
 801e4aa:	e7a7      	b.n	801e3fc <HAL_GPIO_Init+0x134>
 801e4ac:	f04f 0a09 	mov.w	sl, #9
 801e4b0:	fa0a f202 	lsl.w	r2, sl, r2
 801e4b4:	e7a2      	b.n	801e3fc <HAL_GPIO_Init+0x134>
 801e4b6:	f04f 0a04 	mov.w	sl, #4
 801e4ba:	fa0a f202 	lsl.w	r2, sl, r2
 801e4be:	e79d      	b.n	801e3fc <HAL_GPIO_Init+0x134>
 801e4c0:	f04f 0a05 	mov.w	sl, #5
 801e4c4:	fa0a f202 	lsl.w	r2, sl, r2
 801e4c8:	e798      	b.n	801e3fc <HAL_GPIO_Init+0x134>
 801e4ca:	f04f 0a06 	mov.w	sl, #6
 801e4ce:	fa0a f202 	lsl.w	r2, sl, r2
 801e4d2:	e793      	b.n	801e3fc <HAL_GPIO_Init+0x134>
 801e4d4:	f04f 0a07 	mov.w	sl, #7
 801e4d8:	fa0a f202 	lsl.w	r2, sl, r2
 801e4dc:	e78e      	b.n	801e3fc <HAL_GPIO_Init+0x134>
 801e4de:	f04f 0a08 	mov.w	sl, #8
 801e4e2:	fa0a f202 	lsl.w	r2, sl, r2
 801e4e6:	e789      	b.n	801e3fc <HAL_GPIO_Init+0x134>
 801e4e8:	40013800 	.word	0x40013800
 801e4ec:	40020400 	.word	0x40020400
 801e4f0:	40020800 	.word	0x40020800
 801e4f4:	40020c00 	.word	0x40020c00
 801e4f8:	40021000 	.word	0x40021000
 801e4fc:	40021400 	.word	0x40021400
 801e500:	40021800 	.word	0x40021800
 801e504:	40023800 	.word	0x40023800
 801e508:	40020000 	.word	0x40020000
 801e50c:	40013c00 	.word	0x40013c00
 801e510:	40021c00 	.word	0x40021c00
 801e514:	40022000 	.word	0x40022000
 801e518:	40022400 	.word	0x40022400

0801e51c <HAL_UART_MspInit>:
 801e51c:	4770      	bx	lr
 801e51e:	bf00      	nop

0801e520 <UART_WaitOnFlagUntilTimeout>:
 801e520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e524:	4617      	mov	r7, r2
 801e526:	4606      	mov	r6, r0
 801e528:	460c      	mov	r4, r1
 801e52a:	461d      	mov	r5, r3
 801e52c:	f7ff feb2 	bl	801e294 <HAL_GetTick>
 801e530:	4680      	mov	r8, r0
 801e532:	b98f      	cbnz	r7, 801e558 <UART_WaitOnFlagUntilTimeout+0x38>
 801e534:	6833      	ldr	r3, [r6, #0]
 801e536:	e001      	b.n	801e53c <UART_WaitOnFlagUntilTimeout+0x1c>
 801e538:	1c69      	adds	r1, r5, #1
 801e53a:	d118      	bne.n	801e56e <UART_WaitOnFlagUntilTimeout+0x4e>
 801e53c:	69da      	ldr	r2, [r3, #28]
 801e53e:	4022      	ands	r2, r4
 801e540:	42a2      	cmp	r2, r4
 801e542:	d1f9      	bne.n	801e538 <UART_WaitOnFlagUntilTimeout+0x18>
 801e544:	2000      	movs	r0, #0
 801e546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e54a:	b1c5      	cbz	r5, 801e57e <UART_WaitOnFlagUntilTimeout+0x5e>
 801e54c:	f7ff fea2 	bl	801e294 <HAL_GetTick>
 801e550:	ebc8 0000 	rsb	r0, r8, r0
 801e554:	4285      	cmp	r5, r0
 801e556:	d911      	bls.n	801e57c <UART_WaitOnFlagUntilTimeout+0x5c>
 801e558:	6833      	ldr	r3, [r6, #0]
 801e55a:	e001      	b.n	801e560 <UART_WaitOnFlagUntilTimeout+0x40>
 801e55c:	1c6a      	adds	r2, r5, #1
 801e55e:	d1f4      	bne.n	801e54a <UART_WaitOnFlagUntilTimeout+0x2a>
 801e560:	69da      	ldr	r2, [r3, #28]
 801e562:	4022      	ands	r2, r4
 801e564:	42a2      	cmp	r2, r4
 801e566:	d0f9      	beq.n	801e55c <UART_WaitOnFlagUntilTimeout+0x3c>
 801e568:	2000      	movs	r0, #0
 801e56a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e56e:	b135      	cbz	r5, 801e57e <UART_WaitOnFlagUntilTimeout+0x5e>
 801e570:	f7ff fe90 	bl	801e294 <HAL_GetTick>
 801e574:	ebc8 0000 	rsb	r0, r8, r0
 801e578:	4285      	cmp	r5, r0
 801e57a:	d8db      	bhi.n	801e534 <UART_WaitOnFlagUntilTimeout+0x14>
 801e57c:	6833      	ldr	r3, [r6, #0]
 801e57e:	681a      	ldr	r2, [r3, #0]
 801e580:	2401      	movs	r4, #1
 801e582:	2100      	movs	r1, #0
 801e584:	2003      	movs	r0, #3
 801e586:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801e58a:	601a      	str	r2, [r3, #0]
 801e58c:	681a      	ldr	r2, [r3, #0]
 801e58e:	f022 0220 	bic.w	r2, r2, #32
 801e592:	601a      	str	r2, [r3, #0]
 801e594:	681a      	ldr	r2, [r3, #0]
 801e596:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801e59a:	601a      	str	r2, [r3, #0]
 801e59c:	689a      	ldr	r2, [r3, #8]
 801e59e:	f022 0201 	bic.w	r2, r2, #1
 801e5a2:	609a      	str	r2, [r3, #8]
 801e5a4:	f886 4069 	strb.w	r4, [r6, #105]	; 0x69
 801e5a8:	f886 1068 	strb.w	r1, [r6, #104]	; 0x68
 801e5ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801e5b0 <UART_SetConfig>:
 801e5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e5b2:	4605      	mov	r5, r0
 801e5b4:	4aa4      	ldr	r2, [pc, #656]	; (801e848 <UART_SetConfig+0x298>)
 801e5b6:	48a5      	ldr	r0, [pc, #660]	; (801e84c <UART_SetConfig+0x29c>)
 801e5b8:	68a9      	ldr	r1, [r5, #8]
 801e5ba:	692e      	ldr	r6, [r5, #16]
 801e5bc:	682c      	ldr	r4, [r5, #0]
 801e5be:	696b      	ldr	r3, [r5, #20]
 801e5c0:	430e      	orrs	r6, r1
 801e5c2:	6827      	ldr	r7, [r4, #0]
 801e5c4:	4284      	cmp	r4, r0
 801e5c6:	69e9      	ldr	r1, [r5, #28]
 801e5c8:	ea43 0306 	orr.w	r3, r3, r6
 801e5cc:	ea02 0207 	and.w	r2, r2, r7
 801e5d0:	6a2f      	ldr	r7, [r5, #32]
 801e5d2:	ea43 0301 	orr.w	r3, r3, r1
 801e5d6:	68ee      	ldr	r6, [r5, #12]
 801e5d8:	ea42 0203 	orr.w	r2, r2, r3
 801e5dc:	69ab      	ldr	r3, [r5, #24]
 801e5de:	6022      	str	r2, [r4, #0]
 801e5e0:	ea47 0203 	orr.w	r2, r7, r3
 801e5e4:	6863      	ldr	r3, [r4, #4]
 801e5e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 801e5ea:	ea43 0306 	orr.w	r3, r3, r6
 801e5ee:	6063      	str	r3, [r4, #4]
 801e5f0:	68a3      	ldr	r3, [r4, #8]
 801e5f2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 801e5f6:	ea43 0302 	orr.w	r3, r3, r2
 801e5fa:	60a3      	str	r3, [r4, #8]
 801e5fc:	d04c      	beq.n	801e698 <UART_SetConfig+0xe8>
 801e5fe:	4b94      	ldr	r3, [pc, #592]	; (801e850 <UART_SetConfig+0x2a0>)
 801e600:	429c      	cmp	r4, r3
 801e602:	f000 80c9 	beq.w	801e798 <UART_SetConfig+0x1e8>
 801e606:	4b93      	ldr	r3, [pc, #588]	; (801e854 <UART_SetConfig+0x2a4>)
 801e608:	429c      	cmp	r4, r3
 801e60a:	f000 8097 	beq.w	801e73c <UART_SetConfig+0x18c>
 801e60e:	4b92      	ldr	r3, [pc, #584]	; (801e858 <UART_SetConfig+0x2a8>)
 801e610:	429c      	cmp	r4, r3
 801e612:	d023      	beq.n	801e65c <UART_SetConfig+0xac>
 801e614:	4b91      	ldr	r3, [pc, #580]	; (801e85c <UART_SetConfig+0x2ac>)
 801e616:	429c      	cmp	r4, r3
 801e618:	d00f      	beq.n	801e63a <UART_SetConfig+0x8a>
 801e61a:	4b91      	ldr	r3, [pc, #580]	; (801e860 <UART_SetConfig+0x2b0>)
 801e61c:	429c      	cmp	r4, r3
 801e61e:	d05d      	beq.n	801e6dc <UART_SetConfig+0x12c>
 801e620:	4b90      	ldr	r3, [pc, #576]	; (801e864 <UART_SetConfig+0x2b4>)
 801e622:	429c      	cmp	r4, r3
 801e624:	d07b      	beq.n	801e71e <UART_SetConfig+0x16e>
 801e626:	4b90      	ldr	r3, [pc, #576]	; (801e868 <UART_SetConfig+0x2b8>)
 801e628:	429c      	cmp	r4, r3
 801e62a:	f000 80f9 	beq.w	801e820 <UART_SetConfig+0x270>
 801e62e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 801e632:	d02c      	beq.n	801e68e <UART_SetConfig+0xde>
 801e634:	2101      	movs	r1, #1
 801e636:	4608      	mov	r0, r1
 801e638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e63a:	f503 33f4 	add.w	r3, r3, #124928	; 0x1e800
 801e63e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801e642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801e646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801e64a:	d071      	beq.n	801e730 <UART_SetConfig+0x180>
 801e64c:	d90f      	bls.n	801e66e <UART_SetConfig+0xbe>
 801e64e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e652:	d07e      	beq.n	801e752 <UART_SetConfig+0x1a2>
 801e654:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801e658:	d057      	beq.n	801e70a <UART_SetConfig+0x15a>
 801e65a:	e7e8      	b.n	801e62e <UART_SetConfig+0x7e>
 801e65c:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 801e660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801e664:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801e668:	2b40      	cmp	r3, #64	; 0x40
 801e66a:	d061      	beq.n	801e730 <UART_SetConfig+0x180>
 801e66c:	d849      	bhi.n	801e702 <UART_SetConfig+0x152>
 801e66e:	2b00      	cmp	r3, #0
 801e670:	d1dd      	bne.n	801e62e <UART_SetConfig+0x7e>
 801e672:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 801e676:	f000 80bb 	beq.w	801e7f0 <UART_SetConfig+0x240>
 801e67a:	f7ff fd61 	bl	801e140 <HAL_RCC_GetPCLK1Freq>
 801e67e:	686b      	ldr	r3, [r5, #4]
 801e680:	2100      	movs	r1, #0
 801e682:	fbb0 f0f3 	udiv	r0, r0, r3
 801e686:	b280      	uxth	r0, r0
 801e688:	60e0      	str	r0, [r4, #12]
 801e68a:	4608      	mov	r0, r1
 801e68c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e68e:	2300      	movs	r3, #0
 801e690:	2101      	movs	r1, #1
 801e692:	60e3      	str	r3, [r4, #12]
 801e694:	4608      	mov	r0, r1
 801e696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e698:	4b74      	ldr	r3, [pc, #464]	; (801e86c <UART_SetConfig+0x2bc>)
 801e69a:	4a75      	ldr	r2, [pc, #468]	; (801e870 <UART_SetConfig+0x2c0>)
 801e69c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801e6a0:	f003 0303 	and.w	r3, r3, #3
 801e6a4:	5cd3      	ldrb	r3, [r2, r3]
 801e6a6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 801e6aa:	d05e      	beq.n	801e76a <UART_SetConfig+0x1ba>
 801e6ac:	2b08      	cmp	r3, #8
 801e6ae:	d8c1      	bhi.n	801e634 <UART_SetConfig+0x84>
 801e6b0:	a201      	add	r2, pc, #4	; (adr r2, 801e6b8 <UART_SetConfig+0x108>)
 801e6b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e6b6:	bf00      	nop
 801e6b8:	0801e67b 	.word	0x0801e67b
 801e6bc:	0801e6fd 	.word	0x0801e6fd
 801e6c0:	0801e759 	.word	0x0801e759
 801e6c4:	0801e635 	.word	0x0801e635
 801e6c8:	0801e737 	.word	0x0801e737
 801e6cc:	0801e635 	.word	0x0801e635
 801e6d0:	0801e635 	.word	0x0801e635
 801e6d4:	0801e635 	.word	0x0801e635
 801e6d8:	0801e711 	.word	0x0801e711
 801e6dc:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
 801e6e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801e6e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801e6e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801e6ec:	d020      	beq.n	801e730 <UART_SetConfig+0x180>
 801e6ee:	f200 808b 	bhi.w	801e808 <UART_SetConfig+0x258>
 801e6f2:	2b00      	cmp	r3, #0
 801e6f4:	d19b      	bne.n	801e62e <UART_SetConfig+0x7e>
 801e6f6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 801e6fa:	d076      	beq.n	801e7ea <UART_SetConfig+0x23a>
 801e6fc:	f7ff fd38 	bl	801e170 <HAL_RCC_GetPCLK2Freq>
 801e700:	e7bd      	b.n	801e67e <UART_SetConfig+0xce>
 801e702:	2b80      	cmp	r3, #128	; 0x80
 801e704:	d025      	beq.n	801e752 <UART_SetConfig+0x1a2>
 801e706:	2bc0      	cmp	r3, #192	; 0xc0
 801e708:	d191      	bne.n	801e62e <UART_SetConfig+0x7e>
 801e70a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 801e70e:	d04c      	beq.n	801e7aa <UART_SetConfig+0x1fa>
 801e710:	686a      	ldr	r2, [r5, #4]
 801e712:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801e716:	2100      	movs	r1, #0
 801e718:	fbb3 f3f2 	udiv	r3, r3, r2
 801e71c:	e7b9      	b.n	801e692 <UART_SetConfig+0xe2>
 801e71e:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 801e722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801e726:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 801e72a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801e72e:	d162      	bne.n	801e7f6 <UART_SetConfig+0x246>
 801e730:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 801e734:	d046      	beq.n	801e7c4 <UART_SetConfig+0x214>
 801e736:	f7ff fc99 	bl	801e06c <HAL_RCC_GetSysClockFreq>
 801e73a:	e7a0      	b.n	801e67e <UART_SetConfig+0xce>
 801e73c:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 801e740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801e744:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801e748:	2b10      	cmp	r3, #16
 801e74a:	d0f1      	beq.n	801e730 <UART_SetConfig+0x180>
 801e74c:	d98f      	bls.n	801e66e <UART_SetConfig+0xbe>
 801e74e:	2b20      	cmp	r3, #32
 801e750:	d162      	bne.n	801e818 <UART_SetConfig+0x268>
 801e752:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 801e756:	d044      	beq.n	801e7e2 <UART_SetConfig+0x232>
 801e758:	686a      	ldr	r2, [r5, #4]
 801e75a:	2100      	movs	r1, #0
 801e75c:	4b45      	ldr	r3, [pc, #276]	; (801e874 <UART_SetConfig+0x2c4>)
 801e75e:	4608      	mov	r0, r1
 801e760:	fbb3 f3f2 	udiv	r3, r3, r2
 801e764:	b29b      	uxth	r3, r3
 801e766:	60e3      	str	r3, [r4, #12]
 801e768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e76a:	2b08      	cmp	r3, #8
 801e76c:	d88f      	bhi.n	801e68e <UART_SetConfig+0xde>
 801e76e:	a201      	add	r2, pc, #4	; (adr r2, 801e774 <UART_SetConfig+0x1c4>)
 801e770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e774:	0801e7f1 	.word	0x0801e7f1
 801e778:	0801e7eb 	.word	0x0801e7eb
 801e77c:	0801e7e3 	.word	0x0801e7e3
 801e780:	0801e68f 	.word	0x0801e68f
 801e784:	0801e7c5 	.word	0x0801e7c5
 801e788:	0801e68f 	.word	0x0801e68f
 801e78c:	0801e68f 	.word	0x0801e68f
 801e790:	0801e68f 	.word	0x0801e68f
 801e794:	0801e7ab 	.word	0x0801e7ab
 801e798:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 801e79c:	4a36      	ldr	r2, [pc, #216]	; (801e878 <UART_SetConfig+0x2c8>)
 801e79e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801e7a2:	f003 030c 	and.w	r3, r3, #12
 801e7a6:	5cd3      	ldrb	r3, [r2, r3]
 801e7a8:	e77d      	b.n	801e6a6 <UART_SetConfig+0xf6>
 801e7aa:	686a      	ldr	r2, [r5, #4]
 801e7ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801e7b0:	2100      	movs	r1, #0
 801e7b2:	fbb3 f2f2 	udiv	r2, r3, r2
 801e7b6:	b292      	uxth	r2, r2
 801e7b8:	f3c2 0342 	ubfx	r3, r2, #1, #3
 801e7bc:	f022 020f 	bic.w	r2, r2, #15
 801e7c0:	4313      	orrs	r3, r2
 801e7c2:	e766      	b.n	801e692 <UART_SetConfig+0xe2>
 801e7c4:	f7ff fc52 	bl	801e06c <HAL_RCC_GetSysClockFreq>
 801e7c8:	686a      	ldr	r2, [r5, #4]
 801e7ca:	0040      	lsls	r0, r0, #1
 801e7cc:	682c      	ldr	r4, [r5, #0]
 801e7ce:	2100      	movs	r1, #0
 801e7d0:	fbb0 f2f2 	udiv	r2, r0, r2
 801e7d4:	b292      	uxth	r2, r2
 801e7d6:	f3c2 0342 	ubfx	r3, r2, #1, #3
 801e7da:	f022 020f 	bic.w	r2, r2, #15
 801e7de:	4313      	orrs	r3, r2
 801e7e0:	e757      	b.n	801e692 <UART_SetConfig+0xe2>
 801e7e2:	686a      	ldr	r2, [r5, #4]
 801e7e4:	2100      	movs	r1, #0
 801e7e6:	4b25      	ldr	r3, [pc, #148]	; (801e87c <UART_SetConfig+0x2cc>)
 801e7e8:	e7e3      	b.n	801e7b2 <UART_SetConfig+0x202>
 801e7ea:	f7ff fcc1 	bl	801e170 <HAL_RCC_GetPCLK2Freq>
 801e7ee:	e7eb      	b.n	801e7c8 <UART_SetConfig+0x218>
 801e7f0:	f7ff fca6 	bl	801e140 <HAL_RCC_GetPCLK1Freq>
 801e7f4:	e7e8      	b.n	801e7c8 <UART_SetConfig+0x218>
 801e7f6:	f67f af3a 	bls.w	801e66e <UART_SetConfig+0xbe>
 801e7fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801e7fe:	d0a8      	beq.n	801e752 <UART_SetConfig+0x1a2>
 801e800:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801e804:	d081      	beq.n	801e70a <UART_SetConfig+0x15a>
 801e806:	e712      	b.n	801e62e <UART_SetConfig+0x7e>
 801e808:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801e80c:	d0a1      	beq.n	801e752 <UART_SetConfig+0x1a2>
 801e80e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801e812:	f43f af7a 	beq.w	801e70a <UART_SetConfig+0x15a>
 801e816:	e70a      	b.n	801e62e <UART_SetConfig+0x7e>
 801e818:	2b30      	cmp	r3, #48	; 0x30
 801e81a:	f43f af76 	beq.w	801e70a <UART_SetConfig+0x15a>
 801e81e:	e706      	b.n	801e62e <UART_SetConfig+0x7e>
 801e820:	f503 33de 	add.w	r3, r3, #113664	; 0x1bc00
 801e824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801e828:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801e82c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801e830:	f43f af7e 	beq.w	801e730 <UART_SetConfig+0x180>
 801e834:	f67f af1b 	bls.w	801e66e <UART_SetConfig+0xbe>
 801e838:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801e83c:	d089      	beq.n	801e752 <UART_SetConfig+0x1a2>
 801e83e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801e842:	f43f af62 	beq.w	801e70a <UART_SetConfig+0x15a>
 801e846:	e6f2      	b.n	801e62e <UART_SetConfig+0x7e>
 801e848:	efff69f3 	.word	0xefff69f3
 801e84c:	40011000 	.word	0x40011000
 801e850:	40004400 	.word	0x40004400
 801e854:	40004800 	.word	0x40004800
 801e858:	40004c00 	.word	0x40004c00
 801e85c:	40005000 	.word	0x40005000
 801e860:	40011400 	.word	0x40011400
 801e864:	40007800 	.word	0x40007800
 801e868:	40007c00 	.word	0x40007c00
 801e86c:	40023800 	.word	0x40023800
 801e870:	08026d70 	.word	0x08026d70
 801e874:	00f42400 	.word	0x00f42400
 801e878:	08026d60 	.word	0x08026d60
 801e87c:	01e84800 	.word	0x01e84800

0801e880 <UART_AdvFeatureConfig>:
 801e880:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801e882:	07da      	lsls	r2, r3, #31
 801e884:	b410      	push	{r4}
 801e886:	d506      	bpl.n	801e896 <UART_AdvFeatureConfig+0x16>
 801e888:	6804      	ldr	r4, [r0, #0]
 801e88a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801e88c:	6861      	ldr	r1, [r4, #4]
 801e88e:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
 801e892:	430a      	orrs	r2, r1
 801e894:	6062      	str	r2, [r4, #4]
 801e896:	079c      	lsls	r4, r3, #30
 801e898:	d506      	bpl.n	801e8a8 <UART_AdvFeatureConfig+0x28>
 801e89a:	6804      	ldr	r4, [r0, #0]
 801e89c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 801e89e:	6861      	ldr	r1, [r4, #4]
 801e8a0:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 801e8a4:	430a      	orrs	r2, r1
 801e8a6:	6062      	str	r2, [r4, #4]
 801e8a8:	0759      	lsls	r1, r3, #29
 801e8aa:	d506      	bpl.n	801e8ba <UART_AdvFeatureConfig+0x3a>
 801e8ac:	6804      	ldr	r4, [r0, #0]
 801e8ae:	6b02      	ldr	r2, [r0, #48]	; 0x30
 801e8b0:	6861      	ldr	r1, [r4, #4]
 801e8b2:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 801e8b6:	430a      	orrs	r2, r1
 801e8b8:	6062      	str	r2, [r4, #4]
 801e8ba:	071a      	lsls	r2, r3, #28
 801e8bc:	d506      	bpl.n	801e8cc <UART_AdvFeatureConfig+0x4c>
 801e8be:	6804      	ldr	r4, [r0, #0]
 801e8c0:	6b42      	ldr	r2, [r0, #52]	; 0x34
 801e8c2:	6861      	ldr	r1, [r4, #4]
 801e8c4:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 801e8c8:	430a      	orrs	r2, r1
 801e8ca:	6062      	str	r2, [r4, #4]
 801e8cc:	06dc      	lsls	r4, r3, #27
 801e8ce:	d506      	bpl.n	801e8de <UART_AdvFeatureConfig+0x5e>
 801e8d0:	6804      	ldr	r4, [r0, #0]
 801e8d2:	6b82      	ldr	r2, [r0, #56]	; 0x38
 801e8d4:	68a1      	ldr	r1, [r4, #8]
 801e8d6:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 801e8da:	430a      	orrs	r2, r1
 801e8dc:	60a2      	str	r2, [r4, #8]
 801e8de:	0699      	lsls	r1, r3, #26
 801e8e0:	d506      	bpl.n	801e8f0 <UART_AdvFeatureConfig+0x70>
 801e8e2:	6804      	ldr	r4, [r0, #0]
 801e8e4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801e8e6:	68a1      	ldr	r1, [r4, #8]
 801e8e8:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 801e8ec:	430a      	orrs	r2, r1
 801e8ee:	60a2      	str	r2, [r4, #8]
 801e8f0:	065a      	lsls	r2, r3, #25
 801e8f2:	d50a      	bpl.n	801e90a <UART_AdvFeatureConfig+0x8a>
 801e8f4:	6801      	ldr	r1, [r0, #0]
 801e8f6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 801e8f8:	684a      	ldr	r2, [r1, #4]
 801e8fa:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801e8fe:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 801e902:	ea42 0204 	orr.w	r2, r2, r4
 801e906:	604a      	str	r2, [r1, #4]
 801e908:	d00b      	beq.n	801e922 <UART_AdvFeatureConfig+0xa2>
 801e90a:	061b      	lsls	r3, r3, #24
 801e90c:	d506      	bpl.n	801e91c <UART_AdvFeatureConfig+0x9c>
 801e90e:	6801      	ldr	r1, [r0, #0]
 801e910:	6c82      	ldr	r2, [r0, #72]	; 0x48
 801e912:	684b      	ldr	r3, [r1, #4]
 801e914:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 801e918:	4313      	orrs	r3, r2
 801e91a:	604b      	str	r3, [r1, #4]
 801e91c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e920:	4770      	bx	lr
 801e922:	684c      	ldr	r4, [r1, #4]
 801e924:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801e926:	f424 04c0 	bic.w	r4, r4, #6291456	; 0x600000
 801e92a:	4322      	orrs	r2, r4
 801e92c:	604a      	str	r2, [r1, #4]
 801e92e:	e7ec      	b.n	801e90a <UART_AdvFeatureConfig+0x8a>

0801e930 <UART_CheckIdleState>:
 801e930:	2200      	movs	r2, #0
 801e932:	6803      	ldr	r3, [r0, #0]
 801e934:	b510      	push	{r4, lr}
 801e936:	66c2      	str	r2, [r0, #108]	; 0x6c
 801e938:	4604      	mov	r4, r0
 801e93a:	6819      	ldr	r1, [r3, #0]
 801e93c:	0709      	lsls	r1, r1, #28
 801e93e:	d40a      	bmi.n	801e956 <UART_CheckIdleState+0x26>
 801e940:	681b      	ldr	r3, [r3, #0]
 801e942:	075b      	lsls	r3, r3, #29
 801e944:	d410      	bmi.n	801e968 <UART_CheckIdleState+0x38>
 801e946:	2300      	movs	r3, #0
 801e948:	2201      	movs	r2, #1
 801e94a:	4618      	mov	r0, r3
 801e94c:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
 801e950:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 801e954:	bd10      	pop	{r4, pc}
 801e956:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801e95a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801e95e:	f7ff fddf 	bl	801e520 <UART_WaitOnFlagUntilTimeout>
 801e962:	b168      	cbz	r0, 801e980 <UART_CheckIdleState+0x50>
 801e964:	2003      	movs	r0, #3
 801e966:	bd10      	pop	{r4, pc}
 801e968:	4620      	mov	r0, r4
 801e96a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801e96e:	2200      	movs	r2, #0
 801e970:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801e974:	f7ff fdd4 	bl	801e520 <UART_WaitOnFlagUntilTimeout>
 801e978:	2800      	cmp	r0, #0
 801e97a:	d0e4      	beq.n	801e946 <UART_CheckIdleState+0x16>
 801e97c:	2003      	movs	r0, #3
 801e97e:	bd10      	pop	{r4, pc}
 801e980:	6823      	ldr	r3, [r4, #0]
 801e982:	e7dd      	b.n	801e940 <UART_CheckIdleState+0x10>

0801e984 <HAL_UART_Init>:
 801e984:	b390      	cbz	r0, 801e9ec <HAL_UART_Init+0x68>
 801e986:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 801e98a:	b510      	push	{r4, lr}
 801e98c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801e990:	4604      	mov	r4, r0
 801e992:	b303      	cbz	r3, 801e9d6 <HAL_UART_Init+0x52>
 801e994:	6822      	ldr	r2, [r4, #0]
 801e996:	2302      	movs	r3, #2
 801e998:	4620      	mov	r0, r4
 801e99a:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 801e99e:	6813      	ldr	r3, [r2, #0]
 801e9a0:	f023 0301 	bic.w	r3, r3, #1
 801e9a4:	6013      	str	r3, [r2, #0]
 801e9a6:	f7ff fe03 	bl	801e5b0 <UART_SetConfig>
 801e9aa:	2801      	cmp	r0, #1
 801e9ac:	d01c      	beq.n	801e9e8 <HAL_UART_Init+0x64>
 801e9ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e9b0:	b9b3      	cbnz	r3, 801e9e0 <HAL_UART_Init+0x5c>
 801e9b2:	6823      	ldr	r3, [r4, #0]
 801e9b4:	4620      	mov	r0, r4
 801e9b6:	685a      	ldr	r2, [r3, #4]
 801e9b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801e9bc:	605a      	str	r2, [r3, #4]
 801e9be:	689a      	ldr	r2, [r3, #8]
 801e9c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801e9c4:	609a      	str	r2, [r3, #8]
 801e9c6:	681a      	ldr	r2, [r3, #0]
 801e9c8:	f042 0201 	orr.w	r2, r2, #1
 801e9cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e9d0:	601a      	str	r2, [r3, #0]
 801e9d2:	f7ff bfad 	b.w	801e930 <UART_CheckIdleState>
 801e9d6:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
 801e9da:	f7ff fd9f 	bl	801e51c <HAL_UART_MspInit>
 801e9de:	e7d9      	b.n	801e994 <HAL_UART_Init+0x10>
 801e9e0:	4620      	mov	r0, r4
 801e9e2:	f7ff ff4d 	bl	801e880 <UART_AdvFeatureConfig>
 801e9e6:	e7e4      	b.n	801e9b2 <HAL_UART_Init+0x2e>
 801e9e8:	2001      	movs	r0, #1
 801e9ea:	bd10      	pop	{r4, pc}
 801e9ec:	2001      	movs	r0, #1
 801e9ee:	4770      	bx	lr

0801e9f0 <HAL_SPI_MspInit>:
 801e9f0:	4770      	bx	lr
 801e9f2:	bf00      	nop

0801e9f4 <HAL_SPI_Init>:
 801e9f4:	2800      	cmp	r0, #0
 801e9f6:	d068      	beq.n	801eaca <HAL_SPI_Init+0xd6>
 801e9f8:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 801e9fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ea00:	4604      	mov	r4, r0
 801ea02:	2b00      	cmp	r3, #0
 801ea04:	d053      	beq.n	801eaae <HAL_SPI_Init+0xba>
 801ea06:	68e2      	ldr	r2, [r4, #12]
 801ea08:	2502      	movs	r5, #2
 801ea0a:	6821      	ldr	r1, [r4, #0]
 801ea0c:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 801ea10:	f422 6000 	bic.w	r0, r2, #2048	; 0x800
 801ea14:	680b      	ldr	r3, [r1, #0]
 801ea16:	bf8c      	ite	hi
 801ea18:	f04f 0e00 	movhi.w	lr, #0
 801ea1c:	f44f 5e80 	movls.w	lr, #4096	; 0x1000
 801ea20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801ea24:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 801ea28:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
 801ea2c:	600b      	str	r3, [r1, #0]
 801ea2e:	d13a      	bne.n	801eaa6 <HAL_SPI_Init+0xb2>
 801ea30:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 801ea34:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801ea36:	b920      	cbnz	r0, 801ea42 <HAL_SPI_Init+0x4e>
 801ea38:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 801ea3c:	d941      	bls.n	801eac2 <HAL_SPI_Init+0xce>
 801ea3e:	2002      	movs	r0, #2
 801ea40:	6320      	str	r0, [r4, #48]	; 0x30
 801ea42:	6867      	ldr	r7, [r4, #4]
 801ea44:	2802      	cmp	r0, #2
 801ea46:	68a5      	ldr	r5, [r4, #8]
 801ea48:	6923      	ldr	r3, [r4, #16]
 801ea4a:	ea45 0807 	orr.w	r8, r5, r7
 801ea4e:	6967      	ldr	r7, [r4, #20]
 801ea50:	69e6      	ldr	r6, [r4, #28]
 801ea52:	ea48 0803 	orr.w	r8, r8, r3
 801ea56:	6a25      	ldr	r5, [r4, #32]
 801ea58:	69a3      	ldr	r3, [r4, #24]
 801ea5a:	ea48 0707 	orr.w	r7, r8, r7
 801ea5e:	f403 7800 	and.w	r8, r3, #512	; 0x200
 801ea62:	ea46 0607 	orr.w	r6, r6, r7
 801ea66:	ea45 0506 	orr.w	r5, r5, r6
 801ea6a:	ea45 0508 	orr.w	r5, r5, r8
 801ea6e:	ea45 050c 	orr.w	r5, r5, ip
 801ea72:	600d      	str	r5, [r1, #0]
 801ea74:	d020      	beq.n	801eab8 <HAL_SPI_Init+0xc4>
 801ea76:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801ea78:	0c1b      	lsrs	r3, r3, #16
 801ea7a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801ea7c:	2600      	movs	r6, #0
 801ea7e:	4315      	orrs	r5, r2
 801ea80:	f003 0204 	and.w	r2, r3, #4
 801ea84:	f8d4 c02c 	ldr.w	ip, [r4, #44]	; 0x2c
 801ea88:	2701      	movs	r7, #1
 801ea8a:	ea45 0300 	orr.w	r3, r5, r0
 801ea8e:	4630      	mov	r0, r6
 801ea90:	4313      	orrs	r3, r2
 801ea92:	ea43 030e 	orr.w	r3, r3, lr
 801ea96:	604b      	str	r3, [r1, #4]
 801ea98:	f8c1 c010 	str.w	ip, [r1, #16]
 801ea9c:	6626      	str	r6, [r4, #96]	; 0x60
 801ea9e:	f884 705d 	strb.w	r7, [r4, #93]	; 0x5d
 801eaa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801eaa6:	2300      	movs	r3, #0
 801eaa8:	469c      	mov	ip, r3
 801eaaa:	62a3      	str	r3, [r4, #40]	; 0x28
 801eaac:	e7c2      	b.n	801ea34 <HAL_SPI_Init+0x40>
 801eaae:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
 801eab2:	f7ff ff9d 	bl	801e9f0 <HAL_SPI_MspInit>
 801eab6:	e7a6      	b.n	801ea06 <HAL_SPI_Init+0x12>
 801eab8:	6808      	ldr	r0, [r1, #0]
 801eaba:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 801eabe:	6008      	str	r0, [r1, #0]
 801eac0:	e7d9      	b.n	801ea76 <HAL_SPI_Init+0x82>
 801eac2:	2301      	movs	r3, #1
 801eac4:	4618      	mov	r0, r3
 801eac6:	6323      	str	r3, [r4, #48]	; 0x30
 801eac8:	e7bb      	b.n	801ea42 <HAL_SPI_Init+0x4e>
 801eaca:	2001      	movs	r0, #1
 801eacc:	4770      	bx	lr
 801eace:	bf00      	nop

0801ead0 <timer_irq_handler>:
 801ead0:	b570      	push	{r4, r5, r6, lr}
 801ead2:	4c11      	ldr	r4, [pc, #68]	; (801eb18 <timer_irq_handler+0x48>)
 801ead4:	6823      	ldr	r3, [r4, #0]
 801ead6:	68da      	ldr	r2, [r3, #12]
 801ead8:	0791      	lsls	r1, r2, #30
 801eada:	d415      	bmi.n	801eb08 <timer_irq_handler+0x38>
 801eadc:	68da      	ldr	r2, [r3, #12]
 801eade:	0752      	lsls	r2, r2, #29
 801eae0:	d509      	bpl.n	801eaf6 <timer_irq_handler+0x26>
 801eae2:	f06f 0204 	mvn.w	r2, #4
 801eae6:	4e0d      	ldr	r6, [pc, #52]	; (801eb1c <timer_irq_handler+0x4c>)
 801eae8:	611a      	str	r2, [r3, #16]
 801eaea:	6832      	ldr	r2, [r6, #0]
 801eaec:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801eaee:	1aaa      	subs	r2, r5, r2
 801eaf0:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 801eaf4:	d200      	bcs.n	801eaf8 <timer_irq_handler+0x28>
 801eaf6:	bd70      	pop	{r4, r5, r6, pc}
 801eaf8:	f7ff fbc4 	bl	801e284 <HAL_IncTick>
 801eafc:	6823      	ldr	r3, [r4, #0]
 801eafe:	f505 727a 	add.w	r2, r5, #1000	; 0x3e8
 801eb02:	6035      	str	r5, [r6, #0]
 801eb04:	639a      	str	r2, [r3, #56]	; 0x38
 801eb06:	bd70      	pop	{r4, r5, r6, pc}
 801eb08:	f06f 0202 	mvn.w	r2, #2
 801eb0c:	611a      	str	r2, [r3, #16]
 801eb0e:	f001 f96f 	bl	801fdf0 <us_ticker_irq_handler>
 801eb12:	6823      	ldr	r3, [r4, #0]
 801eb14:	e7e2      	b.n	801eadc <timer_irq_handler+0xc>
 801eb16:	bf00      	nop
 801eb18:	200019c4 	.word	0x200019c4
 801eb1c:	20001908 	.word	0x20001908

0801eb20 <HAL_InitTick>:
 801eb20:	b530      	push	{r4, r5, lr}
 801eb22:	b089      	sub	sp, #36	; 0x24
 801eb24:	4c29      	ldr	r4, [pc, #164]	; (801ebcc <HAL_InitTick+0xac>)
 801eb26:	f04f 35ff 	mov.w	r5, #4294967295
 801eb2a:	a901      	add	r1, sp, #4
 801eb2c:	a803      	add	r0, sp, #12
 801eb2e:	f7ff fb37 	bl	801e1a0 <HAL_RCC_GetClockConfig>
 801eb32:	f7ff fb05 	bl	801e140 <HAL_RCC_GetPCLK1Freq>
 801eb36:	4b26      	ldr	r3, [pc, #152]	; (801ebd0 <HAL_InitTick+0xb0>)
 801eb38:	9001      	str	r0, [sp, #4]
 801eb3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801eb3c:	60e5      	str	r5, [r4, #12]
 801eb3e:	f042 0208 	orr.w	r2, r2, #8
 801eb42:	4924      	ldr	r1, [pc, #144]	; (801ebd4 <HAL_InitTick+0xb4>)
 801eb44:	641a      	str	r2, [r3, #64]	; 0x40
 801eb46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801eb48:	f002 0208 	and.w	r2, r2, #8
 801eb4c:	9202      	str	r2, [sp, #8]
 801eb4e:	9a02      	ldr	r2, [sp, #8]
 801eb50:	6a1a      	ldr	r2, [r3, #32]
 801eb52:	f042 0208 	orr.w	r2, r2, #8
 801eb56:	621a      	str	r2, [r3, #32]
 801eb58:	6a1a      	ldr	r2, [r3, #32]
 801eb5a:	f022 0208 	bic.w	r2, r2, #8
 801eb5e:	621a      	str	r2, [r3, #32]
 801eb60:	9b06      	ldr	r3, [sp, #24]
 801eb62:	6021      	str	r1, [r4, #0]
 801eb64:	b35b      	cbz	r3, 801ebbe <HAL_InitTick+0x9e>
 801eb66:	0040      	lsls	r0, r0, #1
 801eb68:	4b1b      	ldr	r3, [pc, #108]	; (801ebd8 <HAL_InitTick+0xb8>)
 801eb6a:	fba3 3000 	umull	r3, r0, r3, r0
 801eb6e:	0c80      	lsrs	r0, r0, #18
 801eb70:	3801      	subs	r0, #1
 801eb72:	6060      	str	r0, [r4, #4]
 801eb74:	2500      	movs	r5, #0
 801eb76:	4815      	ldr	r0, [pc, #84]	; (801ebcc <HAL_InitTick+0xac>)
 801eb78:	6125      	str	r5, [r4, #16]
 801eb7a:	60a5      	str	r5, [r4, #8]
 801eb7c:	6165      	str	r5, [r4, #20]
 801eb7e:	f000 f8e1 	bl	801ed44 <HAL_TIM_OC_Init>
 801eb82:	2032      	movs	r0, #50	; 0x32
 801eb84:	4915      	ldr	r1, [pc, #84]	; (801ebdc <HAL_InitTick+0xbc>)
 801eb86:	f7fe fded 	bl	801d764 <NVIC_SetVector>
 801eb8a:	4b15      	ldr	r3, [pc, #84]	; (801ebe0 <HAL_InitTick+0xc0>)
 801eb8c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 801eb90:	4629      	mov	r1, r5
 801eb92:	480e      	ldr	r0, [pc, #56]	; (801ebcc <HAL_InitTick+0xac>)
 801eb94:	605a      	str	r2, [r3, #4]
 801eb96:	f000 f829 	bl	801ebec <HAL_TIM_OC_Start>
 801eb9a:	2104      	movs	r1, #4
 801eb9c:	480b      	ldr	r0, [pc, #44]	; (801ebcc <HAL_InitTick+0xac>)
 801eb9e:	f000 f825 	bl	801ebec <HAL_TIM_OC_Start>
 801eba2:	6823      	ldr	r3, [r4, #0]
 801eba4:	4c0f      	ldr	r4, [pc, #60]	; (801ebe4 <HAL_InitTick+0xc4>)
 801eba6:	4628      	mov	r0, r5
 801eba8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801ebaa:	f502 717a 	add.w	r1, r2, #1000	; 0x3e8
 801ebae:	6022      	str	r2, [r4, #0]
 801ebb0:	6399      	str	r1, [r3, #56]	; 0x38
 801ebb2:	68da      	ldr	r2, [r3, #12]
 801ebb4:	f042 0204 	orr.w	r2, r2, #4
 801ebb8:	60da      	str	r2, [r3, #12]
 801ebba:	b009      	add	sp, #36	; 0x24
 801ebbc:	bd30      	pop	{r4, r5, pc}
 801ebbe:	4b06      	ldr	r3, [pc, #24]	; (801ebd8 <HAL_InitTick+0xb8>)
 801ebc0:	fba3 3000 	umull	r3, r0, r3, r0
 801ebc4:	0c80      	lsrs	r0, r0, #18
 801ebc6:	4428      	add	r0, r5
 801ebc8:	6060      	str	r0, [r4, #4]
 801ebca:	e7d3      	b.n	801eb74 <HAL_InitTick+0x54>
 801ebcc:	200019c4 	.word	0x200019c4
 801ebd0:	40023800 	.word	0x40023800
 801ebd4:	40000c00 	.word	0x40000c00
 801ebd8:	431bde83 	.word	0x431bde83
 801ebdc:	0801ead1 	.word	0x0801ead1
 801ebe0:	e000e100 	.word	0xe000e100
 801ebe4:	20001908 	.word	0x20001908

0801ebe8 <HAL_TIM_OC_MspInit>:
 801ebe8:	4770      	bx	lr
 801ebea:	bf00      	nop

0801ebec <HAL_TIM_OC_Start>:
 801ebec:	6803      	ldr	r3, [r0, #0]
 801ebee:	2201      	movs	r2, #1
 801ebf0:	6a18      	ldr	r0, [r3, #32]
 801ebf2:	408a      	lsls	r2, r1
 801ebf4:	ea20 0002 	bic.w	r0, r0, r2
 801ebf8:	b410      	push	{r4}
 801ebfa:	6218      	str	r0, [r3, #32]
 801ebfc:	4c0b      	ldr	r4, [pc, #44]	; (801ec2c <HAL_TIM_OC_Start+0x40>)
 801ebfe:	6a19      	ldr	r1, [r3, #32]
 801ec00:	42a3      	cmp	r3, r4
 801ec02:	ea42 0201 	orr.w	r2, r2, r1
 801ec06:	621a      	str	r2, [r3, #32]
 801ec08:	d00a      	beq.n	801ec20 <HAL_TIM_OC_Start+0x34>
 801ec0a:	4a09      	ldr	r2, [pc, #36]	; (801ec30 <HAL_TIM_OC_Start+0x44>)
 801ec0c:	4293      	cmp	r3, r2
 801ec0e:	d007      	beq.n	801ec20 <HAL_TIM_OC_Start+0x34>
 801ec10:	681a      	ldr	r2, [r3, #0]
 801ec12:	2000      	movs	r0, #0
 801ec14:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ec18:	f042 0201 	orr.w	r2, r2, #1
 801ec1c:	601a      	str	r2, [r3, #0]
 801ec1e:	4770      	bx	lr
 801ec20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801ec22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801ec26:	645a      	str	r2, [r3, #68]	; 0x44
 801ec28:	e7f2      	b.n	801ec10 <HAL_TIM_OC_Start+0x24>
 801ec2a:	bf00      	nop
 801ec2c:	40010400 	.word	0x40010400
 801ec30:	40010000 	.word	0x40010000

0801ec34 <TIM_Base_SetConfig>:
 801ec34:	4a3b      	ldr	r2, [pc, #236]	; (801ed24 <TIM_Base_SetConfig+0xf0>)
 801ec36:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 801ec3a:	6803      	ldr	r3, [r0, #0]
 801ec3c:	b470      	push	{r4, r5, r6}
 801ec3e:	eba0 0602 	sub.w	r6, r0, r2
 801ec42:	fab6 f686 	clz	r6, r6
 801ec46:	ea4f 1656 	mov.w	r6, r6, lsr #5
 801ec4a:	d04c      	beq.n	801ece6 <TIM_Base_SetConfig+0xb2>
 801ec4c:	2e00      	cmp	r6, #0
 801ec4e:	d14a      	bne.n	801ece6 <TIM_Base_SetConfig+0xb2>
 801ec50:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 801ec54:	4290      	cmp	r0, r2
 801ec56:	d00d      	beq.n	801ec74 <TIM_Base_SetConfig+0x40>
 801ec58:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 801ec5c:	4290      	cmp	r0, r2
 801ec5e:	d009      	beq.n	801ec74 <TIM_Base_SetConfig+0x40>
 801ec60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801ec64:	4c30      	ldr	r4, [pc, #192]	; (801ed28 <TIM_Base_SetConfig+0xf4>)
 801ec66:	4290      	cmp	r0, r2
 801ec68:	bf18      	it	ne
 801ec6a:	42a0      	cmpne	r0, r4
 801ec6c:	bf0c      	ite	eq
 801ec6e:	2201      	moveq	r2, #1
 801ec70:	2200      	movne	r2, #0
 801ec72:	d111      	bne.n	801ec98 <TIM_Base_SetConfig+0x64>
 801ec74:	4a2c      	ldr	r2, [pc, #176]	; (801ed28 <TIM_Base_SetConfig+0xf4>)
 801ec76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801ec7a:	4c2c      	ldr	r4, [pc, #176]	; (801ed2c <TIM_Base_SetConfig+0xf8>)
 801ec7c:	1a82      	subs	r2, r0, r2
 801ec7e:	684d      	ldr	r5, [r1, #4]
 801ec80:	42a0      	cmp	r0, r4
 801ec82:	fab2 f282 	clz	r2, r2
 801ec86:	ea43 0305 	orr.w	r3, r3, r5
 801ec8a:	ea4f 1252 	mov.w	r2, r2, lsr #5
 801ec8e:	d033      	beq.n	801ecf8 <TIM_Base_SetConfig+0xc4>
 801ec90:	f5a4 6480 	sub.w	r4, r4, #1024	; 0x400
 801ec94:	42a0      	cmp	r0, r4
 801ec96:	d02f      	beq.n	801ecf8 <TIM_Base_SetConfig+0xc4>
 801ec98:	4c25      	ldr	r4, [pc, #148]	; (801ed30 <TIM_Base_SetConfig+0xfc>)
 801ec9a:	42a0      	cmp	r0, r4
 801ec9c:	bf14      	ite	ne
 801ec9e:	4614      	movne	r4, r2
 801eca0:	f042 0401 	orreq.w	r4, r2, #1
 801eca4:	bb44      	cbnz	r4, 801ecf8 <TIM_Base_SetConfig+0xc4>
 801eca6:	4a23      	ldr	r2, [pc, #140]	; (801ed34 <TIM_Base_SetConfig+0x100>)
 801eca8:	4d23      	ldr	r5, [pc, #140]	; (801ed38 <TIM_Base_SetConfig+0x104>)
 801ecaa:	4290      	cmp	r0, r2
 801ecac:	bf18      	it	ne
 801ecae:	42a8      	cmpne	r0, r5
 801ecb0:	bf0c      	ite	eq
 801ecb2:	2201      	moveq	r2, #1
 801ecb4:	2200      	movne	r2, #0
 801ecb6:	d031      	beq.n	801ed1c <TIM_Base_SetConfig+0xe8>
 801ecb8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 801ecbc:	4c1f      	ldr	r4, [pc, #124]	; (801ed3c <TIM_Base_SetConfig+0x108>)
 801ecbe:	42a0      	cmp	r0, r4
 801ecc0:	bf18      	it	ne
 801ecc2:	42a8      	cmpne	r0, r5
 801ecc4:	d018      	beq.n	801ecf8 <TIM_Base_SetConfig+0xc4>
 801ecc6:	4a1e      	ldr	r2, [pc, #120]	; (801ed40 <TIM_Base_SetConfig+0x10c>)
 801ecc8:	4290      	cmp	r0, r2
 801ecca:	d029      	beq.n	801ed20 <TIM_Base_SetConfig+0xec>
 801eccc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801ecd0:	4290      	cmp	r0, r2
 801ecd2:	d025      	beq.n	801ed20 <TIM_Base_SetConfig+0xec>
 801ecd4:	688c      	ldr	r4, [r1, #8]
 801ecd6:	680a      	ldr	r2, [r1, #0]
 801ecd8:	6003      	str	r3, [r0, #0]
 801ecda:	62c4      	str	r4, [r0, #44]	; 0x2c
 801ecdc:	6282      	str	r2, [r0, #40]	; 0x28
 801ecde:	2301      	movs	r3, #1
 801ece0:	bc70      	pop	{r4, r5, r6}
 801ece2:	6143      	str	r3, [r0, #20]
 801ece4:	4770      	bx	lr
 801ece6:	684a      	ldr	r2, [r1, #4]
 801ece8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801ecec:	4c0e      	ldr	r4, [pc, #56]	; (801ed28 <TIM_Base_SetConfig+0xf4>)
 801ecee:	4313      	orrs	r3, r2
 801ecf0:	1b02      	subs	r2, r0, r4
 801ecf2:	fab2 f282 	clz	r2, r2
 801ecf6:	0952      	lsrs	r2, r2, #5
 801ecf8:	68cc      	ldr	r4, [r1, #12]
 801ecfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801ecfe:	688d      	ldr	r5, [r1, #8]
 801ed00:	431c      	orrs	r4, r3
 801ed02:	680b      	ldr	r3, [r1, #0]
 801ed04:	6004      	str	r4, [r0, #0]
 801ed06:	62c5      	str	r5, [r0, #44]	; 0x2c
 801ed08:	6283      	str	r3, [r0, #40]	; 0x28
 801ed0a:	b90a      	cbnz	r2, 801ed10 <TIM_Base_SetConfig+0xdc>
 801ed0c:	2e00      	cmp	r6, #0
 801ed0e:	d0e6      	beq.n	801ecde <TIM_Base_SetConfig+0xaa>
 801ed10:	690b      	ldr	r3, [r1, #16]
 801ed12:	6303      	str	r3, [r0, #48]	; 0x30
 801ed14:	2301      	movs	r3, #1
 801ed16:	bc70      	pop	{r4, r5, r6}
 801ed18:	6143      	str	r3, [r0, #20]
 801ed1a:	4770      	bx	lr
 801ed1c:	4622      	mov	r2, r4
 801ed1e:	e7eb      	b.n	801ecf8 <TIM_Base_SetConfig+0xc4>
 801ed20:	2200      	movs	r2, #0
 801ed22:	e7e9      	b.n	801ecf8 <TIM_Base_SetConfig+0xc4>
 801ed24:	40010000 	.word	0x40010000
 801ed28:	40010400 	.word	0x40010400
 801ed2c:	40000800 	.word	0x40000800
 801ed30:	40000c00 	.word	0x40000c00
 801ed34:	40014400 	.word	0x40014400
 801ed38:	40014000 	.word	0x40014000
 801ed3c:	40001800 	.word	0x40001800
 801ed40:	40001c00 	.word	0x40001c00

0801ed44 <HAL_TIM_OC_Init>:
 801ed44:	b1c0      	cbz	r0, 801ed78 <HAL_TIM_OC_Init+0x34>
 801ed46:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 801ed4a:	b510      	push	{r4, lr}
 801ed4c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801ed50:	4604      	mov	r4, r0
 801ed52:	b163      	cbz	r3, 801ed6e <HAL_TIM_OC_Init+0x2a>
 801ed54:	4621      	mov	r1, r4
 801ed56:	2302      	movs	r3, #2
 801ed58:	f851 0b04 	ldr.w	r0, [r1], #4
 801ed5c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 801ed60:	f7ff ff68 	bl	801ec34 <TIM_Base_SetConfig>
 801ed64:	2301      	movs	r3, #1
 801ed66:	2000      	movs	r0, #0
 801ed68:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 801ed6c:	bd10      	pop	{r4, pc}
 801ed6e:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
 801ed72:	f7ff ff39 	bl	801ebe8 <HAL_TIM_OC_MspInit>
 801ed76:	e7ed      	b.n	801ed54 <HAL_TIM_OC_Init+0x10>
 801ed78:	2001      	movs	r0, #1
 801ed7a:	4770      	bx	lr

0801ed7c <gpio_set>:
#include "mbed_error.h"

extern uint32_t Set_GPIO_Clock(uint32_t port_idx);

uint32_t gpio_set(PinName pin)
{
 801ed7c:	b500      	push	{lr}
 801ed7e:	b083      	sub	sp, #12
 801ed80:	4603      	mov	r3, r0
 801ed82:	f8ad 3006 	strh.w	r3, [sp, #6]
    MBED_ASSERT(pin != (PinName)NC);
 801ed86:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801ed8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ed8e:	d104      	bne.n	801ed9a <gpio_set+0x1e>
 801ed90:	480a      	ldr	r0, [pc, #40]	; (801edbc <gpio_set+0x40>)
 801ed92:	490b      	ldr	r1, [pc, #44]	; (801edc0 <gpio_set+0x44>)
 801ed94:	2227      	movs	r2, #39	; 0x27
 801ed96:	f000 fe59 	bl	801fa4c <mbed_assert_internal>

    pin_function(pin, STM_PIN_DATA(STM_MODE_INPUT, GPIO_NOPULL, 0));
 801ed9a:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801ed9e:	4618      	mov	r0, r3
 801eda0:	2100      	movs	r1, #0
 801eda2:	f000 f969 	bl	801f078 <pin_function>
    return (uint32_t)(1 << ((uint32_t)pin & 0xF)); // Return the pin mask
 801eda6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801edaa:	f003 030f 	and.w	r3, r3, #15
 801edae:	2201      	movs	r2, #1
 801edb0:	fa02 f303 	lsl.w	r3, r2, r3
}
 801edb4:	4618      	mov	r0, r3
 801edb6:	b003      	add	sp, #12
 801edb8:	f85d fb04 	ldr.w	pc, [sp], #4
 801edbc:	08026d74 	.word	0x08026d74
 801edc0:	08026d88 	.word	0x08026d88

0801edc4 <gpio_init>:

void gpio_init(gpio_t *obj, PinName pin)
{
 801edc4:	b500      	push	{lr}
 801edc6:	b087      	sub	sp, #28
 801edc8:	9001      	str	r0, [sp, #4]
 801edca:	460b      	mov	r3, r1
 801edcc:	f8ad 3002 	strh.w	r3, [sp, #2]
    obj->pin = pin;
 801edd0:	9b01      	ldr	r3, [sp, #4]
 801edd2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801edd6:	801a      	strh	r2, [r3, #0]
    if (pin == (PinName)NC)
 801edd8:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801eddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ede0:	d100      	bne.n	801ede4 <gpio_init+0x20>
        return;
 801ede2:	e01d      	b.n	801ee20 <gpio_init+0x5c>

    uint32_t port_index = STM_PORT(pin);
 801ede4:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801ede8:	091b      	lsrs	r3, r3, #4
 801edea:	f003 030f 	and.w	r3, r3, #15
 801edee:	9305      	str	r3, [sp, #20]

    // Enable GPIO clock
    uint32_t gpio_add = Set_GPIO_Clock(port_index);
 801edf0:	9805      	ldr	r0, [sp, #20]
 801edf2:	f000 f857 	bl	801eea4 <Set_GPIO_Clock>
 801edf6:	9004      	str	r0, [sp, #16]
    GPIO_TypeDef *gpio = (GPIO_TypeDef *)gpio_add;
 801edf8:	9b04      	ldr	r3, [sp, #16]
 801edfa:	9303      	str	r3, [sp, #12]

    // Fill GPIO object structure for future use
    obj->mask        = gpio_set(pin);
 801edfc:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801ee00:	4618      	mov	r0, r3
 801ee02:	f7ff ffbb 	bl	801ed7c <gpio_set>
 801ee06:	4602      	mov	r2, r0
 801ee08:	9b01      	ldr	r3, [sp, #4]
 801ee0a:	605a      	str	r2, [r3, #4]
    obj->reg_in      = &gpio->IDR;
 801ee0c:	9b03      	ldr	r3, [sp, #12]
 801ee0e:	f103 0210 	add.w	r2, r3, #16
 801ee12:	9b01      	ldr	r3, [sp, #4]
 801ee14:	609a      	str	r2, [r3, #8]
    obj->reg_set_clr = &gpio->BSRR;
 801ee16:	9b03      	ldr	r3, [sp, #12]
 801ee18:	f103 0218 	add.w	r2, r3, #24
 801ee1c:	9b01      	ldr	r3, [sp, #4]
 801ee1e:	60da      	str	r2, [r3, #12]
}
 801ee20:	b007      	add	sp, #28
 801ee22:	f85d fb04 	ldr.w	pc, [sp], #4
 801ee26:	bf00      	nop

0801ee28 <gpio_mode>:

void gpio_mode(gpio_t *obj, PinMode mode)
{
 801ee28:	b500      	push	{lr}
 801ee2a:	b083      	sub	sp, #12
 801ee2c:	9001      	str	r0, [sp, #4]
 801ee2e:	460b      	mov	r3, r1
 801ee30:	f88d 3003 	strb.w	r3, [sp, #3]
    pin_mode(obj->pin, mode);
 801ee34:	9b01      	ldr	r3, [sp, #4]
 801ee36:	881b      	ldrh	r3, [r3, #0]
 801ee38:	b21a      	sxth	r2, r3
 801ee3a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801ee3e:	4610      	mov	r0, r2
 801ee40:	4619      	mov	r1, r3
 801ee42:	f000 f967 	bl	801f114 <pin_mode>
}
 801ee46:	b003      	add	sp, #12
 801ee48:	f85d fb04 	ldr.w	pc, [sp], #4

0801ee4c <gpio_dir>:

void gpio_dir(gpio_t *obj, PinDirection direction)
{
 801ee4c:	b500      	push	{lr}
 801ee4e:	b083      	sub	sp, #12
 801ee50:	9001      	str	r0, [sp, #4]
 801ee52:	460b      	mov	r3, r1
 801ee54:	f88d 3003 	strb.w	r3, [sp, #3]
    MBED_ASSERT(obj->pin != (PinName)NC);
 801ee58:	9b01      	ldr	r3, [sp, #4]
 801ee5a:	881b      	ldrh	r3, [r3, #0]
 801ee5c:	b21b      	sxth	r3, r3
 801ee5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ee62:	d104      	bne.n	801ee6e <gpio_dir+0x22>
 801ee64:	480d      	ldr	r0, [pc, #52]	; (801ee9c <gpio_dir+0x50>)
 801ee66:	490e      	ldr	r1, [pc, #56]	; (801eea0 <gpio_dir+0x54>)
 801ee68:	2246      	movs	r2, #70	; 0x46
 801ee6a:	f000 fdef 	bl	801fa4c <mbed_assert_internal>
    if (direction == PIN_OUTPUT) {
 801ee6e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801ee72:	2b01      	cmp	r3, #1
 801ee74:	d107      	bne.n	801ee86 <gpio_dir+0x3a>
        pin_function(obj->pin, STM_PIN_DATA(STM_MODE_OUTPUT_PP, GPIO_NOPULL, 0));
 801ee76:	9b01      	ldr	r3, [sp, #4]
 801ee78:	881b      	ldrh	r3, [r3, #0]
 801ee7a:	b21b      	sxth	r3, r3
 801ee7c:	4618      	mov	r0, r3
 801ee7e:	2101      	movs	r1, #1
 801ee80:	f000 f8fa 	bl	801f078 <pin_function>
 801ee84:	e006      	b.n	801ee94 <gpio_dir+0x48>
    } else { // PIN_INPUT
        pin_function(obj->pin, STM_PIN_DATA(STM_MODE_INPUT, GPIO_NOPULL, 0));
 801ee86:	9b01      	ldr	r3, [sp, #4]
 801ee88:	881b      	ldrh	r3, [r3, #0]
 801ee8a:	b21b      	sxth	r3, r3
 801ee8c:	4618      	mov	r0, r3
 801ee8e:	2100      	movs	r1, #0
 801ee90:	f000 f8f2 	bl	801f078 <pin_function>
    }
}
 801ee94:	b003      	add	sp, #12
 801ee96:	f85d fb04 	ldr.w	pc, [sp], #4
 801ee9a:	bf00      	nop
 801ee9c:	08026dd8 	.word	0x08026dd8
 801eea0:	08026d88 	.word	0x08026d88

0801eea4 <Set_GPIO_Clock>:
    0x10000000  // 12 = Reset GPIO_MODE_IT_EVT
};

// Enable GPIO clock and return GPIO base address
uint32_t Set_GPIO_Clock(uint32_t port_idx)
{
 801eea4:	b500      	push	{lr}
 801eea6:	b08f      	sub	sp, #60	; 0x3c
 801eea8:	9001      	str	r0, [sp, #4]
    uint32_t gpio_add = 0;
 801eeaa:	2300      	movs	r3, #0
 801eeac:	930d      	str	r3, [sp, #52]	; 0x34
    switch (port_idx) {
 801eeae:	9b01      	ldr	r3, [sp, #4]
 801eeb0:	2b0a      	cmp	r3, #10
 801eeb2:	f200 80be 	bhi.w	801f032 <Set_GPIO_Clock+0x18e>
 801eeb6:	a201      	add	r2, pc, #4	; (adr r2, 801eebc <Set_GPIO_Clock+0x18>)
 801eeb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801eebc:	0801eee9 	.word	0x0801eee9
 801eec0:	0801ef07 	.word	0x0801ef07
 801eec4:	0801ef25 	.word	0x0801ef25
 801eec8:	0801ef43 	.word	0x0801ef43
 801eecc:	0801ef61 	.word	0x0801ef61
 801eed0:	0801ef7f 	.word	0x0801ef7f
 801eed4:	0801ef9d 	.word	0x0801ef9d
 801eed8:	0801efbb 	.word	0x0801efbb
 801eedc:	0801efd9 	.word	0x0801efd9
 801eee0:	0801eff7 	.word	0x0801eff7
 801eee4:	0801f015 	.word	0x0801f015
        case PortA:
            gpio_add = GPIOA_BASE;
 801eee8:	4b56      	ldr	r3, [pc, #344]	; (801f044 <Set_GPIO_Clock+0x1a0>)
 801eeea:	930d      	str	r3, [sp, #52]	; 0x34
            __GPIOA_CLK_ENABLE();
 801eeec:	4a56      	ldr	r2, [pc, #344]	; (801f048 <Set_GPIO_Clock+0x1a4>)
 801eeee:	4b56      	ldr	r3, [pc, #344]	; (801f048 <Set_GPIO_Clock+0x1a4>)
 801eef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801eef2:	f043 0301 	orr.w	r3, r3, #1
 801eef6:	6313      	str	r3, [r2, #48]	; 0x30
 801eef8:	4b53      	ldr	r3, [pc, #332]	; (801f048 <Set_GPIO_Clock+0x1a4>)
 801eefa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801eefc:	f003 0301 	and.w	r3, r3, #1
 801ef00:	930c      	str	r3, [sp, #48]	; 0x30
 801ef02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            break;
 801ef04:	e099      	b.n	801f03a <Set_GPIO_Clock+0x196>
        case PortB:
            gpio_add = GPIOB_BASE;
 801ef06:	4b51      	ldr	r3, [pc, #324]	; (801f04c <Set_GPIO_Clock+0x1a8>)
 801ef08:	930d      	str	r3, [sp, #52]	; 0x34
            __GPIOB_CLK_ENABLE();
 801ef0a:	4a4f      	ldr	r2, [pc, #316]	; (801f048 <Set_GPIO_Clock+0x1a4>)
 801ef0c:	4b4e      	ldr	r3, [pc, #312]	; (801f048 <Set_GPIO_Clock+0x1a4>)
 801ef0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ef10:	f043 0302 	orr.w	r3, r3, #2
 801ef14:	6313      	str	r3, [r2, #48]	; 0x30
 801ef16:	4b4c      	ldr	r3, [pc, #304]	; (801f048 <Set_GPIO_Clock+0x1a4>)
 801ef18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ef1a:	f003 0302 	and.w	r3, r3, #2
 801ef1e:	930b      	str	r3, [sp, #44]	; 0x2c
 801ef20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            break;
 801ef22:	e08a      	b.n	801f03a <Set_GPIO_Clock+0x196>
        case PortC:
            gpio_add = GPIOC_BASE;
 801ef24:	4b4a      	ldr	r3, [pc, #296]	; (801f050 <Set_GPIO_Clock+0x1ac>)
 801ef26:	930d      	str	r3, [sp, #52]	; 0x34
            __GPIOC_CLK_ENABLE();
 801ef28:	4a47      	ldr	r2, [pc, #284]	; (801f048 <Set_GPIO_Clock+0x1a4>)
 801ef2a:	4b47      	ldr	r3, [pc, #284]	; (801f048 <Set_GPIO_Clock+0x1a4>)
 801ef2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ef2e:	f043 0304 	orr.w	r3, r3, #4
 801ef32:	6313      	str	r3, [r2, #48]	; 0x30
 801ef34:	4b44      	ldr	r3, [pc, #272]	; (801f048 <Set_GPIO_Clock+0x1a4>)
 801ef36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ef38:	f003 0304 	and.w	r3, r3, #4
 801ef3c:	930a      	str	r3, [sp, #40]	; 0x28
 801ef3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            break;
 801ef40:	e07b      	b.n	801f03a <Set_GPIO_Clock+0x196>
#if defined GPIOD_BASE
        case PortD:
            gpio_add = GPIOD_BASE;
 801ef42:	4b44      	ldr	r3, [pc, #272]	; (801f054 <Set_GPIO_Clock+0x1b0>)
 801ef44:	930d      	str	r3, [sp, #52]	; 0x34
            __GPIOD_CLK_ENABLE();
 801ef46:	4a40      	ldr	r2, [pc, #256]	; (801f048 <Set_GPIO_Clock+0x1a4>)
 801ef48:	4b3f      	ldr	r3, [pc, #252]	; (801f048 <Set_GPIO_Clock+0x1a4>)
 801ef4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ef4c:	f043 0308 	orr.w	r3, r3, #8
 801ef50:	6313      	str	r3, [r2, #48]	; 0x30
 801ef52:	4b3d      	ldr	r3, [pc, #244]	; (801f048 <Set_GPIO_Clock+0x1a4>)
 801ef54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ef56:	f003 0308 	and.w	r3, r3, #8
 801ef5a:	9309      	str	r3, [sp, #36]	; 0x24
 801ef5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
            break;
 801ef5e:	e06c      	b.n	801f03a <Set_GPIO_Clock+0x196>
#endif
#if defined GPIOE_BASE
        case PortE:
            gpio_add = GPIOE_BASE;
 801ef60:	4b3d      	ldr	r3, [pc, #244]	; (801f058 <Set_GPIO_Clock+0x1b4>)
 801ef62:	930d      	str	r3, [sp, #52]	; 0x34
            __GPIOE_CLK_ENABLE();
 801ef64:	4a38      	ldr	r2, [pc, #224]	; (801f048 <Set_GPIO_Clock+0x1a4>)
 801ef66:	4b38      	ldr	r3, [pc, #224]	; (801f048 <Set_GPIO_Clock+0x1a4>)
 801ef68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ef6a:	f043 0310 	orr.w	r3, r3, #16
 801ef6e:	6313      	str	r3, [r2, #48]	; 0x30
 801ef70:	4b35      	ldr	r3, [pc, #212]	; (801f048 <Set_GPIO_Clock+0x1a4>)
 801ef72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ef74:	f003 0310 	and.w	r3, r3, #16
 801ef78:	9308      	str	r3, [sp, #32]
 801ef7a:	9b08      	ldr	r3, [sp, #32]
            break;
 801ef7c:	e05d      	b.n	801f03a <Set_GPIO_Clock+0x196>
#endif
#if defined GPIOF_BASE
        case PortF:
            gpio_add = GPIOF_BASE;
 801ef7e:	4b37      	ldr	r3, [pc, #220]	; (801f05c <Set_GPIO_Clock+0x1b8>)
 801ef80:	930d      	str	r3, [sp, #52]	; 0x34
            __GPIOF_CLK_ENABLE();
 801ef82:	4a31      	ldr	r2, [pc, #196]	; (801f048 <Set_GPIO_Clock+0x1a4>)
 801ef84:	4b30      	ldr	r3, [pc, #192]	; (801f048 <Set_GPIO_Clock+0x1a4>)
 801ef86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ef88:	f043 0320 	orr.w	r3, r3, #32
 801ef8c:	6313      	str	r3, [r2, #48]	; 0x30
 801ef8e:	4b2e      	ldr	r3, [pc, #184]	; (801f048 <Set_GPIO_Clock+0x1a4>)
 801ef90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ef92:	f003 0320 	and.w	r3, r3, #32
 801ef96:	9307      	str	r3, [sp, #28]
 801ef98:	9b07      	ldr	r3, [sp, #28]
            break;
 801ef9a:	e04e      	b.n	801f03a <Set_GPIO_Clock+0x196>
#endif
#if defined GPIOG_BASE
        case PortG:
            gpio_add = GPIOG_BASE;
 801ef9c:	4b30      	ldr	r3, [pc, #192]	; (801f060 <Set_GPIO_Clock+0x1bc>)
 801ef9e:	930d      	str	r3, [sp, #52]	; 0x34
            __GPIOG_CLK_ENABLE();
 801efa0:	4a29      	ldr	r2, [pc, #164]	; (801f048 <Set_GPIO_Clock+0x1a4>)
 801efa2:	4b29      	ldr	r3, [pc, #164]	; (801f048 <Set_GPIO_Clock+0x1a4>)
 801efa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801efa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801efaa:	6313      	str	r3, [r2, #48]	; 0x30
 801efac:	4b26      	ldr	r3, [pc, #152]	; (801f048 <Set_GPIO_Clock+0x1a4>)
 801efae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801efb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801efb4:	9306      	str	r3, [sp, #24]
 801efb6:	9b06      	ldr	r3, [sp, #24]
            break;
 801efb8:	e03f      	b.n	801f03a <Set_GPIO_Clock+0x196>
#endif
#if defined GPIOH_BASE
        case PortH:
            gpio_add = GPIOH_BASE;
 801efba:	4b2a      	ldr	r3, [pc, #168]	; (801f064 <Set_GPIO_Clock+0x1c0>)
 801efbc:	930d      	str	r3, [sp, #52]	; 0x34
            __GPIOH_CLK_ENABLE();
 801efbe:	4a22      	ldr	r2, [pc, #136]	; (801f048 <Set_GPIO_Clock+0x1a4>)
 801efc0:	4b21      	ldr	r3, [pc, #132]	; (801f048 <Set_GPIO_Clock+0x1a4>)
 801efc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801efc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801efc8:	6313      	str	r3, [r2, #48]	; 0x30
 801efca:	4b1f      	ldr	r3, [pc, #124]	; (801f048 <Set_GPIO_Clock+0x1a4>)
 801efcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801efce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801efd2:	9305      	str	r3, [sp, #20]
 801efd4:	9b05      	ldr	r3, [sp, #20]
            break;
 801efd6:	e030      	b.n	801f03a <Set_GPIO_Clock+0x196>
#endif
#if defined GPIOI_BASE
        case PortI:
            gpio_add = GPIOI_BASE;
 801efd8:	4b23      	ldr	r3, [pc, #140]	; (801f068 <Set_GPIO_Clock+0x1c4>)
 801efda:	930d      	str	r3, [sp, #52]	; 0x34
            __GPIOI_CLK_ENABLE();
 801efdc:	4a1a      	ldr	r2, [pc, #104]	; (801f048 <Set_GPIO_Clock+0x1a4>)
 801efde:	4b1a      	ldr	r3, [pc, #104]	; (801f048 <Set_GPIO_Clock+0x1a4>)
 801efe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801efe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801efe6:	6313      	str	r3, [r2, #48]	; 0x30
 801efe8:	4b17      	ldr	r3, [pc, #92]	; (801f048 <Set_GPIO_Clock+0x1a4>)
 801efea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801efec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801eff0:	9304      	str	r3, [sp, #16]
 801eff2:	9b04      	ldr	r3, [sp, #16]
            break;
 801eff4:	e021      	b.n	801f03a <Set_GPIO_Clock+0x196>
#endif
#if defined GPIOJ_BASE
        case PortJ:
            gpio_add = GPIOJ_BASE;
 801eff6:	4b1d      	ldr	r3, [pc, #116]	; (801f06c <Set_GPIO_Clock+0x1c8>)
 801eff8:	930d      	str	r3, [sp, #52]	; 0x34
            __GPIOJ_CLK_ENABLE();
 801effa:	4a13      	ldr	r2, [pc, #76]	; (801f048 <Set_GPIO_Clock+0x1a4>)
 801effc:	4b12      	ldr	r3, [pc, #72]	; (801f048 <Set_GPIO_Clock+0x1a4>)
 801effe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f000:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801f004:	6313      	str	r3, [r2, #48]	; 0x30
 801f006:	4b10      	ldr	r3, [pc, #64]	; (801f048 <Set_GPIO_Clock+0x1a4>)
 801f008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f00a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801f00e:	9303      	str	r3, [sp, #12]
 801f010:	9b03      	ldr	r3, [sp, #12]
            break;
 801f012:	e012      	b.n	801f03a <Set_GPIO_Clock+0x196>
#endif
#if defined GPIOK_BASE
        case PortK:
            gpio_add = GPIOK_BASE;
 801f014:	4b16      	ldr	r3, [pc, #88]	; (801f070 <Set_GPIO_Clock+0x1cc>)
 801f016:	930d      	str	r3, [sp, #52]	; 0x34
            __GPIOK_CLK_ENABLE();
 801f018:	4a0b      	ldr	r2, [pc, #44]	; (801f048 <Set_GPIO_Clock+0x1a4>)
 801f01a:	4b0b      	ldr	r3, [pc, #44]	; (801f048 <Set_GPIO_Clock+0x1a4>)
 801f01c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f01e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801f022:	6313      	str	r3, [r2, #48]	; 0x30
 801f024:	4b08      	ldr	r3, [pc, #32]	; (801f048 <Set_GPIO_Clock+0x1a4>)
 801f026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f028:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801f02c:	9302      	str	r3, [sp, #8]
 801f02e:	9b02      	ldr	r3, [sp, #8]
            break;
 801f030:	e003      	b.n	801f03a <Set_GPIO_Clock+0x196>
#endif
        default:
            error("Pinmap error: wrong port number.");
 801f032:	4810      	ldr	r0, [pc, #64]	; (801f074 <Set_GPIO_Clock+0x1d0>)
 801f034:	f000 fd16 	bl	801fa64 <error>
            break;
 801f038:	bf00      	nop
    }
    return gpio_add;
 801f03a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
}
 801f03c:	4618      	mov	r0, r3
 801f03e:	b00f      	add	sp, #60	; 0x3c
 801f040:	f85d fb04 	ldr.w	pc, [sp], #4
 801f044:	40020000 	.word	0x40020000
 801f048:	40023800 	.word	0x40023800
 801f04c:	40020400 	.word	0x40020400
 801f050:	40020800 	.word	0x40020800
 801f054:	40020c00 	.word	0x40020c00
 801f058:	40021000 	.word	0x40021000
 801f05c:	40021400 	.word	0x40021400
 801f060:	40021800 	.word	0x40021800
 801f064:	40021c00 	.word	0x40021c00
 801f068:	40022000 	.word	0x40022000
 801f06c:	40022400 	.word	0x40022400
 801f070:	40022800 	.word	0x40022800
 801f074:	08026e24 	.word	0x08026e24

0801f078 <pin_function>:

/**
 * Configure pin (mode, speed, output type and pull-up/pull-down)
 */
void pin_function(PinName pin, int data)
{
 801f078:	b500      	push	{lr}
 801f07a:	b08f      	sub	sp, #60	; 0x3c
 801f07c:	4603      	mov	r3, r0
 801f07e:	9100      	str	r1, [sp, #0]
 801f080:	f8ad 3006 	strh.w	r3, [sp, #6]
    MBED_ASSERT(pin != (PinName)NC);
 801f084:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801f088:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f08c:	d104      	bne.n	801f098 <pin_function+0x20>
 801f08e:	481e      	ldr	r0, [pc, #120]	; (801f108 <pin_function+0x90>)
 801f090:	491e      	ldr	r1, [pc, #120]	; (801f10c <pin_function+0x94>)
 801f092:	2281      	movs	r2, #129	; 0x81
 801f094:	f000 fcda 	bl	801fa4c <mbed_assert_internal>
    // Get the pin informations
    uint32_t mode  = STM_PIN_MODE(data);
 801f098:	9b00      	ldr	r3, [sp, #0]
 801f09a:	f003 030f 	and.w	r3, r3, #15
 801f09e:	930d      	str	r3, [sp, #52]	; 0x34
    uint32_t pupd  = STM_PIN_PUPD(data);
 801f0a0:	9b00      	ldr	r3, [sp, #0]
 801f0a2:	111b      	asrs	r3, r3, #4
 801f0a4:	f003 0307 	and.w	r3, r3, #7
 801f0a8:	930c      	str	r3, [sp, #48]	; 0x30
    uint32_t afnum = STM_PIN_AFNUM(data);
 801f0aa:	9b00      	ldr	r3, [sp, #0]
 801f0ac:	11db      	asrs	r3, r3, #7
 801f0ae:	f003 030f 	and.w	r3, r3, #15
 801f0b2:	930b      	str	r3, [sp, #44]	; 0x2c

    uint32_t port_index = STM_PORT(pin);
 801f0b4:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801f0b8:	091b      	lsrs	r3, r3, #4
 801f0ba:	f003 030f 	and.w	r3, r3, #15
 801f0be:	930a      	str	r3, [sp, #40]	; 0x28
    uint32_t pin_index  = STM_PIN(pin);
 801f0c0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801f0c4:	f003 030f 	and.w	r3, r3, #15
 801f0c8:	9309      	str	r3, [sp, #36]	; 0x24

    // Enable GPIO clock
    uint32_t gpio_add = Set_GPIO_Clock(port_index);
 801f0ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 801f0cc:	f7ff feea 	bl	801eea4 <Set_GPIO_Clock>
 801f0d0:	9008      	str	r0, [sp, #32]
    GPIO_TypeDef *gpio = (GPIO_TypeDef *)gpio_add;
 801f0d2:	9b08      	ldr	r3, [sp, #32]
 801f0d4:	9307      	str	r3, [sp, #28]

    // Configure GPIO
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.Pin       = (uint32_t)(1 << pin_index);
 801f0d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f0d8:	2201      	movs	r2, #1
 801f0da:	fa02 f303 	lsl.w	r3, r2, r3
 801f0de:	9302      	str	r3, [sp, #8]
    GPIO_InitStructure.Mode      = gpio_mode[mode];
 801f0e0:	4a0b      	ldr	r2, [pc, #44]	; (801f110 <pin_function+0x98>)
 801f0e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f0e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801f0e8:	9303      	str	r3, [sp, #12]
    GPIO_InitStructure.Pull      = pupd;
 801f0ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f0ec:	9304      	str	r3, [sp, #16]
    GPIO_InitStructure.Speed     = GPIO_SPEED_HIGH;
 801f0ee:	2303      	movs	r3, #3
 801f0f0:	9305      	str	r3, [sp, #20]
    GPIO_InitStructure.Alternate = afnum;
 801f0f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f0f4:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(gpio, &GPIO_InitStructure);
 801f0f6:	ab02      	add	r3, sp, #8
 801f0f8:	9807      	ldr	r0, [sp, #28]
 801f0fa:	4619      	mov	r1, r3
 801f0fc:	f7ff f8e4 	bl	801e2c8 <HAL_GPIO_Init>
    //
    //}
    //if ((pin == PA_15) || (pin == PB_3) || (pin == PB_4)) {
    //
    //}
}
 801f100:	b00f      	add	sp, #60	; 0x3c
 801f102:	f85d fb04 	ldr.w	pc, [sp], #4
 801f106:	bf00      	nop
 801f108:	08026e48 	.word	0x08026e48
 801f10c:	08026e5c 	.word	0x08026e5c
 801f110:	08026df0 	.word	0x08026df0

0801f114 <pin_mode>:

/**
 * Configure pin pull-up/pull-down
 */
void pin_mode(PinName pin, PinMode mode)
{
 801f114:	b500      	push	{lr}
 801f116:	b089      	sub	sp, #36	; 0x24
 801f118:	4603      	mov	r3, r0
 801f11a:	460a      	mov	r2, r1
 801f11c:	f8ad 3006 	strh.w	r3, [sp, #6]
 801f120:	4613      	mov	r3, r2
 801f122:	f88d 3005 	strb.w	r3, [sp, #5]
    MBED_ASSERT(pin != (PinName)NC);
 801f126:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801f12a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f12e:	d104      	bne.n	801f13a <pin_mode+0x26>
 801f130:	481a      	ldr	r0, [pc, #104]	; (801f19c <pin_mode+0x88>)
 801f132:	491b      	ldr	r1, [pc, #108]	; (801f1a0 <pin_mode+0x8c>)
 801f134:	22a6      	movs	r2, #166	; 0xa6
 801f136:	f000 fc89 	bl	801fa4c <mbed_assert_internal>
    uint32_t port_index = STM_PORT(pin);
 801f13a:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801f13e:	091b      	lsrs	r3, r3, #4
 801f140:	f003 030f 	and.w	r3, r3, #15
 801f144:	9306      	str	r3, [sp, #24]
    uint32_t pin_index  = STM_PIN(pin);
 801f146:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801f14a:	f003 030f 	and.w	r3, r3, #15
 801f14e:	9305      	str	r3, [sp, #20]

    // Enable GPIO clock
    uint32_t gpio_add = Set_GPIO_Clock(port_index);
 801f150:	9806      	ldr	r0, [sp, #24]
 801f152:	f7ff fea7 	bl	801eea4 <Set_GPIO_Clock>
 801f156:	9004      	str	r0, [sp, #16]
    GPIO_TypeDef *gpio = (GPIO_TypeDef *)gpio_add;
 801f158:	9b04      	ldr	r3, [sp, #16]
 801f15a:	9303      	str	r3, [sp, #12]

    // Configure pull-up/pull-down resistors
    uint32_t pupd = (uint32_t)mode;
 801f15c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801f160:	9307      	str	r3, [sp, #28]
    if (pupd > 2)
 801f162:	9b07      	ldr	r3, [sp, #28]
 801f164:	2b02      	cmp	r3, #2
 801f166:	d901      	bls.n	801f16c <pin_mode+0x58>
        pupd = 0; // Open-drain = No pull-up/No pull-down
 801f168:	2300      	movs	r3, #0
 801f16a:	9307      	str	r3, [sp, #28]
    gpio->PUPDR &= (uint32_t)(~(GPIO_PUPDR_PUPDR0 << (pin_index * 2)));
 801f16c:	9b03      	ldr	r3, [sp, #12]
 801f16e:	68da      	ldr	r2, [r3, #12]
 801f170:	9b05      	ldr	r3, [sp, #20]
 801f172:	005b      	lsls	r3, r3, #1
 801f174:	4619      	mov	r1, r3
 801f176:	2303      	movs	r3, #3
 801f178:	408b      	lsls	r3, r1
 801f17a:	43db      	mvns	r3, r3
 801f17c:	401a      	ands	r2, r3
 801f17e:	9b03      	ldr	r3, [sp, #12]
 801f180:	60da      	str	r2, [r3, #12]
    gpio->PUPDR |= (uint32_t)(pupd << (pin_index * 2));
 801f182:	9b03      	ldr	r3, [sp, #12]
 801f184:	68da      	ldr	r2, [r3, #12]
 801f186:	9b05      	ldr	r3, [sp, #20]
 801f188:	005b      	lsls	r3, r3, #1
 801f18a:	4619      	mov	r1, r3
 801f18c:	9b07      	ldr	r3, [sp, #28]
 801f18e:	408b      	lsls	r3, r1
 801f190:	431a      	orrs	r2, r3
 801f192:	9b03      	ldr	r3, [sp, #12]
 801f194:	60da      	str	r2, [r3, #12]

}
 801f196:	b009      	add	sp, #36	; 0x24
 801f198:	f85d fb04 	ldr.w	pc, [sp], #4
 801f19c:	08026e48 	.word	0x08026e48
 801f1a0:	08026e5c 	.word	0x08026e5c

0801f1a4 <init_uart>:

int stdio_uart_inited = 0;
serial_t stdio_uart;

static void init_uart(serial_t *obj)
{
 801f1a4:	b500      	push	{lr}
 801f1a6:	b083      	sub	sp, #12
 801f1a8:	9001      	str	r0, [sp, #4]
    UartHandle.Instance = (USART_TypeDef *)(obj->uart);
 801f1aa:	9b01      	ldr	r3, [sp, #4]
 801f1ac:	681b      	ldr	r3, [r3, #0]
 801f1ae:	461a      	mov	r2, r3
 801f1b0:	4b1b      	ldr	r3, [pc, #108]	; (801f220 <init_uart+0x7c>)
 801f1b2:	601a      	str	r2, [r3, #0]

    UartHandle.Init.BaudRate   = obj->baudrate;
 801f1b4:	9b01      	ldr	r3, [sp, #4]
 801f1b6:	689b      	ldr	r3, [r3, #8]
 801f1b8:	4a19      	ldr	r2, [pc, #100]	; (801f220 <init_uart+0x7c>)
 801f1ba:	6053      	str	r3, [r2, #4]
    UartHandle.Init.WordLength = obj->databits;
 801f1bc:	9b01      	ldr	r3, [sp, #4]
 801f1be:	68db      	ldr	r3, [r3, #12]
 801f1c0:	4a17      	ldr	r2, [pc, #92]	; (801f220 <init_uart+0x7c>)
 801f1c2:	6093      	str	r3, [r2, #8]
    UartHandle.Init.StopBits   = obj->stopbits;
 801f1c4:	9b01      	ldr	r3, [sp, #4]
 801f1c6:	691b      	ldr	r3, [r3, #16]
 801f1c8:	4a15      	ldr	r2, [pc, #84]	; (801f220 <init_uart+0x7c>)
 801f1ca:	60d3      	str	r3, [r2, #12]
    UartHandle.Init.Parity     = obj->parity;
 801f1cc:	9b01      	ldr	r3, [sp, #4]
 801f1ce:	695b      	ldr	r3, [r3, #20]
 801f1d0:	4a13      	ldr	r2, [pc, #76]	; (801f220 <init_uart+0x7c>)
 801f1d2:	6113      	str	r3, [r2, #16]
    UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 801f1d4:	4b12      	ldr	r3, [pc, #72]	; (801f220 <init_uart+0x7c>)
 801f1d6:	2200      	movs	r2, #0
 801f1d8:	619a      	str	r2, [r3, #24]

    if (obj->pin_rx == NC) {
 801f1da:	9b01      	ldr	r3, [sp, #4]
 801f1dc:	8b5b      	ldrh	r3, [r3, #26]
 801f1de:	b21b      	sxth	r3, r3
 801f1e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f1e4:	d103      	bne.n	801f1ee <init_uart+0x4a>
        UartHandle.Init.Mode = UART_MODE_TX;
 801f1e6:	4b0e      	ldr	r3, [pc, #56]	; (801f220 <init_uart+0x7c>)
 801f1e8:	2208      	movs	r2, #8
 801f1ea:	615a      	str	r2, [r3, #20]
 801f1ec:	e00c      	b.n	801f208 <init_uart+0x64>
    } else if (obj->pin_tx == NC) {
 801f1ee:	9b01      	ldr	r3, [sp, #4]
 801f1f0:	8b1b      	ldrh	r3, [r3, #24]
 801f1f2:	b21b      	sxth	r3, r3
 801f1f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f1f8:	d103      	bne.n	801f202 <init_uart+0x5e>
        UartHandle.Init.Mode = UART_MODE_RX;
 801f1fa:	4b09      	ldr	r3, [pc, #36]	; (801f220 <init_uart+0x7c>)
 801f1fc:	2204      	movs	r2, #4
 801f1fe:	615a      	str	r2, [r3, #20]
 801f200:	e002      	b.n	801f208 <init_uart+0x64>
    } else {
        UartHandle.Init.Mode = UART_MODE_TX_RX;
 801f202:	4b07      	ldr	r3, [pc, #28]	; (801f220 <init_uart+0x7c>)
 801f204:	220c      	movs	r2, #12
 801f206:	615a      	str	r2, [r3, #20]
    }

    if (HAL_UART_Init(&UartHandle) != HAL_OK) {
 801f208:	4805      	ldr	r0, [pc, #20]	; (801f220 <init_uart+0x7c>)
 801f20a:	f7ff fbbb 	bl	801e984 <HAL_UART_Init>
 801f20e:	4603      	mov	r3, r0
 801f210:	2b00      	cmp	r3, #0
 801f212:	d002      	beq.n	801f21a <init_uart+0x76>
        error("Cannot initialize UART");
 801f214:	4803      	ldr	r0, [pc, #12]	; (801f224 <init_uart+0x80>)
 801f216:	f000 fc25 	bl	801fa64 <error>
    }
}
 801f21a:	b003      	add	sp, #12
 801f21c:	f85d fb04 	ldr.w	pc, [sp], #4
 801f220:	20001a00 	.word	0x20001a00
 801f224:	08026eac 	.word	0x08026eac

0801f228 <serial_init>:

void serial_init(serial_t *obj, PinName tx, PinName rx)
{
 801f228:	b500      	push	{lr}
 801f22a:	b08d      	sub	sp, #52	; 0x34
 801f22c:	9001      	str	r0, [sp, #4]
 801f22e:	460b      	mov	r3, r1
 801f230:	f8ad 3002 	strh.w	r3, [sp, #2]
 801f234:	4613      	mov	r3, r2
 801f236:	f8ad 3000 	strh.w	r3, [sp]
    // Determine the UART to use (UART_1, UART_2, ...)
    UARTName uart_tx = (UARTName)pinmap_peripheral(tx, PinMap_UART_TX);
 801f23a:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801f23e:	4618      	mov	r0, r3
 801f240:	4984      	ldr	r1, [pc, #528]	; (801f454 <serial_init+0x22c>)
 801f242:	f000 fcdd 	bl	801fc00 <pinmap_peripheral>
 801f246:	900b      	str	r0, [sp, #44]	; 0x2c
    UARTName uart_rx = (UARTName)pinmap_peripheral(rx, PinMap_UART_RX);
 801f248:	f9bd 3000 	ldrsh.w	r3, [sp]
 801f24c:	4618      	mov	r0, r3
 801f24e:	4982      	ldr	r1, [pc, #520]	; (801f458 <serial_init+0x230>)
 801f250:	f000 fcd6 	bl	801fc00 <pinmap_peripheral>
 801f254:	900a      	str	r0, [sp, #40]	; 0x28

    // Get the peripheral name (UART_1, UART_2, ...) from the pin and assign it to the object
    obj->uart = (UARTName)pinmap_merge(uart_tx, uart_rx);
 801f256:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801f258:	990a      	ldr	r1, [sp, #40]	; 0x28
 801f25a:	f000 fc91 	bl	801fb80 <pinmap_merge>
 801f25e:	4602      	mov	r2, r0
 801f260:	9b01      	ldr	r3, [sp, #4]
 801f262:	601a      	str	r2, [r3, #0]
    MBED_ASSERT(obj->uart != (UARTName)NC);
 801f264:	9b01      	ldr	r3, [sp, #4]
 801f266:	681b      	ldr	r3, [r3, #0]
 801f268:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f26c:	d104      	bne.n	801f278 <serial_init+0x50>
 801f26e:	487b      	ldr	r0, [pc, #492]	; (801f45c <serial_init+0x234>)
 801f270:	497b      	ldr	r1, [pc, #492]	; (801f460 <serial_init+0x238>)
 801f272:	2253      	movs	r2, #83	; 0x53
 801f274:	f000 fbea 	bl	801fa4c <mbed_assert_internal>

    // Enable USART clock
    switch (obj->uart) {
 801f278:	9b01      	ldr	r3, [sp, #4]
 801f27a:	681b      	ldr	r3, [r3, #0]
 801f27c:	4a79      	ldr	r2, [pc, #484]	; (801f464 <serial_init+0x23c>)
 801f27e:	4293      	cmp	r3, r2
 801f280:	d05d      	beq.n	801f33e <serial_init+0x116>
 801f282:	4a78      	ldr	r2, [pc, #480]	; (801f464 <serial_init+0x23c>)
 801f284:	4293      	cmp	r3, r2
 801f286:	d809      	bhi.n	801f29c <serial_init+0x74>
 801f288:	4a77      	ldr	r2, [pc, #476]	; (801f468 <serial_init+0x240>)
 801f28a:	4293      	cmp	r3, r2
 801f28c:	d037      	beq.n	801f2fe <serial_init+0xd6>
 801f28e:	4a77      	ldr	r2, [pc, #476]	; (801f46c <serial_init+0x244>)
 801f290:	4293      	cmp	r3, r2
 801f292:	d044      	beq.n	801f31e <serial_init+0xf6>
 801f294:	4a76      	ldr	r2, [pc, #472]	; (801f470 <serial_init+0x248>)
 801f296:	4293      	cmp	r3, r2
 801f298:	d021      	beq.n	801f2de <serial_init+0xb6>
 801f29a:	e090      	b.n	801f3be <serial_init+0x196>
 801f29c:	4a75      	ldr	r2, [pc, #468]	; (801f474 <serial_init+0x24c>)
 801f29e:	4293      	cmp	r3, r2
 801f2a0:	d07d      	beq.n	801f39e <serial_init+0x176>
 801f2a2:	4a74      	ldr	r2, [pc, #464]	; (801f474 <serial_init+0x24c>)
 801f2a4:	4293      	cmp	r3, r2
 801f2a6:	d803      	bhi.n	801f2b0 <serial_init+0x88>
 801f2a8:	4a73      	ldr	r2, [pc, #460]	; (801f478 <serial_init+0x250>)
 801f2aa:	4293      	cmp	r3, r2
 801f2ac:	d067      	beq.n	801f37e <serial_init+0x156>
 801f2ae:	e086      	b.n	801f3be <serial_init+0x196>
 801f2b0:	4a72      	ldr	r2, [pc, #456]	; (801f47c <serial_init+0x254>)
 801f2b2:	4293      	cmp	r3, r2
 801f2b4:	d003      	beq.n	801f2be <serial_init+0x96>
 801f2b6:	4a72      	ldr	r2, [pc, #456]	; (801f480 <serial_init+0x258>)
 801f2b8:	4293      	cmp	r3, r2
 801f2ba:	d050      	beq.n	801f35e <serial_init+0x136>
 801f2bc:	e07f      	b.n	801f3be <serial_init+0x196>
        case UART_1:
            __USART1_CLK_ENABLE();
 801f2be:	4a71      	ldr	r2, [pc, #452]	; (801f484 <serial_init+0x25c>)
 801f2c0:	4b70      	ldr	r3, [pc, #448]	; (801f484 <serial_init+0x25c>)
 801f2c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f2c4:	f043 0310 	orr.w	r3, r3, #16
 801f2c8:	6453      	str	r3, [r2, #68]	; 0x44
 801f2ca:	4b6e      	ldr	r3, [pc, #440]	; (801f484 <serial_init+0x25c>)
 801f2cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f2ce:	f003 0310 	and.w	r3, r3, #16
 801f2d2:	9309      	str	r3, [sp, #36]	; 0x24
 801f2d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
            obj->index = 0;
 801f2d6:	9b01      	ldr	r3, [sp, #4]
 801f2d8:	2200      	movs	r2, #0
 801f2da:	605a      	str	r2, [r3, #4]
            break;
 801f2dc:	e06f      	b.n	801f3be <serial_init+0x196>
        case UART_2:
            __USART2_CLK_ENABLE();
 801f2de:	4a69      	ldr	r2, [pc, #420]	; (801f484 <serial_init+0x25c>)
 801f2e0:	4b68      	ldr	r3, [pc, #416]	; (801f484 <serial_init+0x25c>)
 801f2e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f2e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801f2e8:	6413      	str	r3, [r2, #64]	; 0x40
 801f2ea:	4b66      	ldr	r3, [pc, #408]	; (801f484 <serial_init+0x25c>)
 801f2ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f2ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801f2f2:	9308      	str	r3, [sp, #32]
 801f2f4:	9b08      	ldr	r3, [sp, #32]
            obj->index = 1;
 801f2f6:	9b01      	ldr	r3, [sp, #4]
 801f2f8:	2201      	movs	r2, #1
 801f2fa:	605a      	str	r2, [r3, #4]
            break;
 801f2fc:	e05f      	b.n	801f3be <serial_init+0x196>
#if defined(USART3_BASE)
        case UART_3:
            __USART3_CLK_ENABLE();
 801f2fe:	4a61      	ldr	r2, [pc, #388]	; (801f484 <serial_init+0x25c>)
 801f300:	4b60      	ldr	r3, [pc, #384]	; (801f484 <serial_init+0x25c>)
 801f302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f304:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801f308:	6413      	str	r3, [r2, #64]	; 0x40
 801f30a:	4b5e      	ldr	r3, [pc, #376]	; (801f484 <serial_init+0x25c>)
 801f30c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f30e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801f312:	9307      	str	r3, [sp, #28]
 801f314:	9b07      	ldr	r3, [sp, #28]
            obj->index = 2;
 801f316:	9b01      	ldr	r3, [sp, #4]
 801f318:	2202      	movs	r2, #2
 801f31a:	605a      	str	r2, [r3, #4]
            break;
 801f31c:	e04f      	b.n	801f3be <serial_init+0x196>
#endif
#if defined(UART4_BASE)
        case UART_4:
            __UART4_CLK_ENABLE();
 801f31e:	4a59      	ldr	r2, [pc, #356]	; (801f484 <serial_init+0x25c>)
 801f320:	4b58      	ldr	r3, [pc, #352]	; (801f484 <serial_init+0x25c>)
 801f322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f324:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801f328:	6413      	str	r3, [r2, #64]	; 0x40
 801f32a:	4b56      	ldr	r3, [pc, #344]	; (801f484 <serial_init+0x25c>)
 801f32c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f32e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801f332:	9306      	str	r3, [sp, #24]
 801f334:	9b06      	ldr	r3, [sp, #24]
            obj->index = 3;
 801f336:	9b01      	ldr	r3, [sp, #4]
 801f338:	2203      	movs	r2, #3
 801f33a:	605a      	str	r2, [r3, #4]
            break;
 801f33c:	e03f      	b.n	801f3be <serial_init+0x196>
#endif
#if defined(UART5_BASE)
        case UART_5:
            __UART5_CLK_ENABLE();
 801f33e:	4a51      	ldr	r2, [pc, #324]	; (801f484 <serial_init+0x25c>)
 801f340:	4b50      	ldr	r3, [pc, #320]	; (801f484 <serial_init+0x25c>)
 801f342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f344:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801f348:	6413      	str	r3, [r2, #64]	; 0x40
 801f34a:	4b4e      	ldr	r3, [pc, #312]	; (801f484 <serial_init+0x25c>)
 801f34c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f34e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801f352:	9305      	str	r3, [sp, #20]
 801f354:	9b05      	ldr	r3, [sp, #20]
            obj->index = 4;
 801f356:	9b01      	ldr	r3, [sp, #4]
 801f358:	2204      	movs	r2, #4
 801f35a:	605a      	str	r2, [r3, #4]
            break;
 801f35c:	e02f      	b.n	801f3be <serial_init+0x196>
#endif
        case UART_6:
            __USART6_CLK_ENABLE();
 801f35e:	4a49      	ldr	r2, [pc, #292]	; (801f484 <serial_init+0x25c>)
 801f360:	4b48      	ldr	r3, [pc, #288]	; (801f484 <serial_init+0x25c>)
 801f362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f364:	f043 0320 	orr.w	r3, r3, #32
 801f368:	6453      	str	r3, [r2, #68]	; 0x44
 801f36a:	4b46      	ldr	r3, [pc, #280]	; (801f484 <serial_init+0x25c>)
 801f36c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f36e:	f003 0320 	and.w	r3, r3, #32
 801f372:	9304      	str	r3, [sp, #16]
 801f374:	9b04      	ldr	r3, [sp, #16]
            obj->index = 5;
 801f376:	9b01      	ldr	r3, [sp, #4]
 801f378:	2205      	movs	r2, #5
 801f37a:	605a      	str	r2, [r3, #4]
            break;
 801f37c:	e01f      	b.n	801f3be <serial_init+0x196>
#if defined(UART7_BASE)
        case UART_7:
            __UART7_CLK_ENABLE();
 801f37e:	4a41      	ldr	r2, [pc, #260]	; (801f484 <serial_init+0x25c>)
 801f380:	4b40      	ldr	r3, [pc, #256]	; (801f484 <serial_init+0x25c>)
 801f382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f384:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801f388:	6413      	str	r3, [r2, #64]	; 0x40
 801f38a:	4b3e      	ldr	r3, [pc, #248]	; (801f484 <serial_init+0x25c>)
 801f38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f38e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801f392:	9303      	str	r3, [sp, #12]
 801f394:	9b03      	ldr	r3, [sp, #12]
            obj->index = 6;
 801f396:	9b01      	ldr	r3, [sp, #4]
 801f398:	2206      	movs	r2, #6
 801f39a:	605a      	str	r2, [r3, #4]
            break;
 801f39c:	e00f      	b.n	801f3be <serial_init+0x196>
#endif
#if defined(UART8_BASE)
        case UART_8:
            __UART8_CLK_ENABLE();
 801f39e:	4a39      	ldr	r2, [pc, #228]	; (801f484 <serial_init+0x25c>)
 801f3a0:	4b38      	ldr	r3, [pc, #224]	; (801f484 <serial_init+0x25c>)
 801f3a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f3a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801f3a8:	6413      	str	r3, [r2, #64]	; 0x40
 801f3aa:	4b36      	ldr	r3, [pc, #216]	; (801f484 <serial_init+0x25c>)
 801f3ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f3ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801f3b2:	9302      	str	r3, [sp, #8]
 801f3b4:	9b02      	ldr	r3, [sp, #8]
            obj->index = 7;
 801f3b6:	9b01      	ldr	r3, [sp, #4]
 801f3b8:	2207      	movs	r2, #7
 801f3ba:	605a      	str	r2, [r3, #4]
            break;
 801f3bc:	bf00      	nop
#endif
    }

    // Configure the UART pins
    pinmap_pinout(tx, PinMap_UART_TX);
 801f3be:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801f3c2:	4618      	mov	r0, r3
 801f3c4:	4923      	ldr	r1, [pc, #140]	; (801f454 <serial_init+0x22c>)
 801f3c6:	f000 fba7 	bl	801fb18 <pinmap_pinout>
    pinmap_pinout(rx, PinMap_UART_RX);
 801f3ca:	f9bd 3000 	ldrsh.w	r3, [sp]
 801f3ce:	4618      	mov	r0, r3
 801f3d0:	4921      	ldr	r1, [pc, #132]	; (801f458 <serial_init+0x230>)
 801f3d2:	f000 fba1 	bl	801fb18 <pinmap_pinout>
    if (tx != NC) {
 801f3d6:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801f3da:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f3de:	d005      	beq.n	801f3ec <serial_init+0x1c4>
        pin_mode(tx, PullUp);
 801f3e0:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801f3e4:	4618      	mov	r0, r3
 801f3e6:	2101      	movs	r1, #1
 801f3e8:	f7ff fe94 	bl	801f114 <pin_mode>
    }
    if (rx != NC) {
 801f3ec:	f9bd 3000 	ldrsh.w	r3, [sp]
 801f3f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f3f4:	d005      	beq.n	801f402 <serial_init+0x1da>
        pin_mode(rx, PullUp);
 801f3f6:	f9bd 3000 	ldrsh.w	r3, [sp]
 801f3fa:	4618      	mov	r0, r3
 801f3fc:	2101      	movs	r1, #1
 801f3fe:	f7ff fe89 	bl	801f114 <pin_mode>
    }

    // Configure UART
    obj->baudrate = 9600;
 801f402:	9b01      	ldr	r3, [sp, #4]
 801f404:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 801f408:	609a      	str	r2, [r3, #8]
    obj->databits = UART_WORDLENGTH_8B;
 801f40a:	9b01      	ldr	r3, [sp, #4]
 801f40c:	2200      	movs	r2, #0
 801f40e:	60da      	str	r2, [r3, #12]
    obj->stopbits = UART_STOPBITS_1;
 801f410:	9b01      	ldr	r3, [sp, #4]
 801f412:	2200      	movs	r2, #0
 801f414:	611a      	str	r2, [r3, #16]
    obj->parity   = UART_PARITY_NONE;
 801f416:	9b01      	ldr	r3, [sp, #4]
 801f418:	2200      	movs	r2, #0
 801f41a:	615a      	str	r2, [r3, #20]

    obj->pin_tx = tx;
 801f41c:	9b01      	ldr	r3, [sp, #4]
 801f41e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801f422:	831a      	strh	r2, [r3, #24]
    obj->pin_rx = rx;
 801f424:	9b01      	ldr	r3, [sp, #4]
 801f426:	f8bd 2000 	ldrh.w	r2, [sp]
 801f42a:	835a      	strh	r2, [r3, #26]

    init_uart(obj);
 801f42c:	9801      	ldr	r0, [sp, #4]
 801f42e:	f7ff feb9 	bl	801f1a4 <init_uart>

    // For stdio management
    if (obj->uart == STDIO_UART) {
 801f432:	9b01      	ldr	r3, [sp, #4]
 801f434:	681b      	ldr	r3, [r3, #0]
 801f436:	4a11      	ldr	r2, [pc, #68]	; (801f47c <serial_init+0x254>)
 801f438:	4293      	cmp	r3, r2
 801f43a:	d107      	bne.n	801f44c <serial_init+0x224>
        stdio_uart_inited = 1;
 801f43c:	4b12      	ldr	r3, [pc, #72]	; (801f488 <serial_init+0x260>)
 801f43e:	2201      	movs	r2, #1
 801f440:	601a      	str	r2, [r3, #0]
        memcpy(&stdio_uart, obj, sizeof(serial_t));
 801f442:	4812      	ldr	r0, [pc, #72]	; (801f48c <serial_init+0x264>)
 801f444:	9901      	ldr	r1, [sp, #4]
 801f446:	221c      	movs	r2, #28
 801f448:	f000 ff61 	bl	802030e <memcpy>
    }
}
 801f44c:	b00d      	add	sp, #52	; 0x34
 801f44e:	f85d fb04 	ldr.w	pc, [sp], #4
 801f452:	bf00      	nop
 801f454:	0802706c 	.word	0x0802706c
 801f458:	080270a8 	.word	0x080270a8
 801f45c:	08026ec4 	.word	0x08026ec4
 801f460:	08026ee0 	.word	0x08026ee0
 801f464:	40005000 	.word	0x40005000
 801f468:	40004800 	.word	0x40004800
 801f46c:	40004c00 	.word	0x40004c00
 801f470:	40004400 	.word	0x40004400
 801f474:	40007c00 	.word	0x40007c00
 801f478:	40007800 	.word	0x40007800
 801f47c:	40011000 	.word	0x40011000
 801f480:	40011400 	.word	0x40011400
 801f484:	40023800 	.word	0x40023800
 801f488:	2000190c 	.word	0x2000190c
 801f48c:	20001a70 	.word	0x20001a70

0801f490 <serial_getc>:
/******************************************************************************
 * READ/WRITE
 ******************************************************************************/

int serial_getc(serial_t *obj)
{
 801f490:	b500      	push	{lr}
 801f492:	b085      	sub	sp, #20
 801f494:	9001      	str	r0, [sp, #4]
    USART_TypeDef *uart = (USART_TypeDef *)(obj->uart);
 801f496:	9b01      	ldr	r3, [sp, #4]
 801f498:	681b      	ldr	r3, [r3, #0]
 801f49a:	9303      	str	r3, [sp, #12]
    while (!serial_readable(obj));
 801f49c:	bf00      	nop
 801f49e:	9801      	ldr	r0, [sp, #4]
 801f4a0:	f000 f822 	bl	801f4e8 <serial_readable>
 801f4a4:	4603      	mov	r3, r0
 801f4a6:	2b00      	cmp	r3, #0
 801f4a8:	d0f9      	beq.n	801f49e <serial_getc+0xe>
    return (int)(uart->RDR & 0x1FF);
 801f4aa:	9b03      	ldr	r3, [sp, #12]
 801f4ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f4ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 801f4b2:	4618      	mov	r0, r3
 801f4b4:	b005      	add	sp, #20
 801f4b6:	f85d fb04 	ldr.w	pc, [sp], #4
 801f4ba:	bf00      	nop

0801f4bc <serial_putc>:

void serial_putc(serial_t *obj, int c)
{
 801f4bc:	b500      	push	{lr}
 801f4be:	b085      	sub	sp, #20
 801f4c0:	9001      	str	r0, [sp, #4]
 801f4c2:	9100      	str	r1, [sp, #0]
    USART_TypeDef *uart = (USART_TypeDef *)(obj->uart);
 801f4c4:	9b01      	ldr	r3, [sp, #4]
 801f4c6:	681b      	ldr	r3, [r3, #0]
 801f4c8:	9303      	str	r3, [sp, #12]
    while (!serial_writable(obj));
 801f4ca:	bf00      	nop
 801f4cc:	9801      	ldr	r0, [sp, #4]
 801f4ce:	f000 f823 	bl	801f518 <serial_writable>
 801f4d2:	4603      	mov	r3, r0
 801f4d4:	2b00      	cmp	r3, #0
 801f4d6:	d0f9      	beq.n	801f4cc <serial_putc+0x10>
    uart->TDR = (uint32_t)(c & 0x1FF);
 801f4d8:	9b00      	ldr	r3, [sp, #0]
 801f4da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801f4de:	9b03      	ldr	r3, [sp, #12]
 801f4e0:	629a      	str	r2, [r3, #40]	; 0x28
}
 801f4e2:	b005      	add	sp, #20
 801f4e4:	f85d fb04 	ldr.w	pc, [sp], #4

0801f4e8 <serial_readable>:

int serial_readable(serial_t *obj)
{
 801f4e8:	b084      	sub	sp, #16
 801f4ea:	9001      	str	r0, [sp, #4]
    int status;
    UartHandle.Instance = (USART_TypeDef *)(obj->uart);
 801f4ec:	9b01      	ldr	r3, [sp, #4]
 801f4ee:	681b      	ldr	r3, [r3, #0]
 801f4f0:	461a      	mov	r2, r3
 801f4f2:	4b08      	ldr	r3, [pc, #32]	; (801f514 <serial_readable+0x2c>)
 801f4f4:	601a      	str	r2, [r3, #0]
    // Check if data is received
    status = ((__HAL_UART_GET_FLAG(&UartHandle, UART_FLAG_RXNE) != RESET) ? 1 : 0);
 801f4f6:	4b07      	ldr	r3, [pc, #28]	; (801f514 <serial_readable+0x2c>)
 801f4f8:	681b      	ldr	r3, [r3, #0]
 801f4fa:	69db      	ldr	r3, [r3, #28]
 801f4fc:	f003 0320 	and.w	r3, r3, #32
 801f500:	2b00      	cmp	r3, #0
 801f502:	bf14      	ite	ne
 801f504:	2301      	movne	r3, #1
 801f506:	2300      	moveq	r3, #0
 801f508:	b2db      	uxtb	r3, r3
 801f50a:	9303      	str	r3, [sp, #12]
    return status;
 801f50c:	9b03      	ldr	r3, [sp, #12]
}
 801f50e:	4618      	mov	r0, r3
 801f510:	b004      	add	sp, #16
 801f512:	4770      	bx	lr
 801f514:	20001a00 	.word	0x20001a00

0801f518 <serial_writable>:

int serial_writable(serial_t *obj)
{
 801f518:	b084      	sub	sp, #16
 801f51a:	9001      	str	r0, [sp, #4]
    int status;
    UartHandle.Instance = (USART_TypeDef *)(obj->uart);
 801f51c:	9b01      	ldr	r3, [sp, #4]
 801f51e:	681b      	ldr	r3, [r3, #0]
 801f520:	461a      	mov	r2, r3
 801f522:	4b08      	ldr	r3, [pc, #32]	; (801f544 <serial_writable+0x2c>)
 801f524:	601a      	str	r2, [r3, #0]
    // Check if data is transmitted
    status = ((__HAL_UART_GET_FLAG(&UartHandle, UART_FLAG_TXE) != RESET) ? 1 : 0);
 801f526:	4b07      	ldr	r3, [pc, #28]	; (801f544 <serial_writable+0x2c>)
 801f528:	681b      	ldr	r3, [r3, #0]
 801f52a:	69db      	ldr	r3, [r3, #28]
 801f52c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f530:	2b00      	cmp	r3, #0
 801f532:	bf14      	ite	ne
 801f534:	2301      	movne	r3, #1
 801f536:	2300      	moveq	r3, #0
 801f538:	b2db      	uxtb	r3, r3
 801f53a:	9303      	str	r3, [sp, #12]
    return status;
 801f53c:	9b03      	ldr	r3, [sp, #12]
}
 801f53e:	4618      	mov	r0, r3
 801f540:	b004      	add	sp, #16
 801f542:	4770      	bx	lr
 801f544:	20001a00 	.word	0x20001a00

0801f548 <init_spi>:
#include "mbed_error.h"

static SPI_HandleTypeDef SpiHandle;

static void init_spi(spi_t *obj)
{
 801f548:	b500      	push	{lr}
 801f54a:	b083      	sub	sp, #12
 801f54c:	9001      	str	r0, [sp, #4]
    SpiHandle.Instance = (SPI_TypeDef *)(obj->spi);
 801f54e:	9b01      	ldr	r3, [sp, #4]
 801f550:	681b      	ldr	r3, [r3, #0]
 801f552:	461a      	mov	r2, r3
 801f554:	4b22      	ldr	r3, [pc, #136]	; (801f5e0 <init_spi+0x98>)
 801f556:	601a      	str	r2, [r3, #0]

    __HAL_SPI_DISABLE(&SpiHandle);
 801f558:	4b21      	ldr	r3, [pc, #132]	; (801f5e0 <init_spi+0x98>)
 801f55a:	681b      	ldr	r3, [r3, #0]
 801f55c:	4a20      	ldr	r2, [pc, #128]	; (801f5e0 <init_spi+0x98>)
 801f55e:	6812      	ldr	r2, [r2, #0]
 801f560:	6812      	ldr	r2, [r2, #0]
 801f562:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801f566:	601a      	str	r2, [r3, #0]

    SpiHandle.Init.Mode              = obj->mode;
 801f568:	9b01      	ldr	r3, [sp, #4]
 801f56a:	691b      	ldr	r3, [r3, #16]
 801f56c:	4a1c      	ldr	r2, [pc, #112]	; (801f5e0 <init_spi+0x98>)
 801f56e:	6053      	str	r3, [r2, #4]
    SpiHandle.Init.BaudRatePrescaler = obj->br_presc;
 801f570:	9b01      	ldr	r3, [sp, #4]
 801f572:	699b      	ldr	r3, [r3, #24]
 801f574:	4a1a      	ldr	r2, [pc, #104]	; (801f5e0 <init_spi+0x98>)
 801f576:	61d3      	str	r3, [r2, #28]
    SpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
 801f578:	4b19      	ldr	r3, [pc, #100]	; (801f5e0 <init_spi+0x98>)
 801f57a:	2200      	movs	r2, #0
 801f57c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase          = obj->cpha;
 801f57e:	9b01      	ldr	r3, [sp, #4]
 801f580:	68db      	ldr	r3, [r3, #12]
 801f582:	4a17      	ldr	r2, [pc, #92]	; (801f5e0 <init_spi+0x98>)
 801f584:	6153      	str	r3, [r2, #20]
    SpiHandle.Init.CLKPolarity       = obj->cpol;
 801f586:	9b01      	ldr	r3, [sp, #4]
 801f588:	689b      	ldr	r3, [r3, #8]
 801f58a:	4a15      	ldr	r2, [pc, #84]	; (801f5e0 <init_spi+0x98>)
 801f58c:	6113      	str	r3, [r2, #16]
    SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLED;
 801f58e:	4b14      	ldr	r3, [pc, #80]	; (801f5e0 <init_spi+0x98>)
 801f590:	2200      	movs	r2, #0
 801f592:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial     = 7;
 801f594:	4b12      	ldr	r3, [pc, #72]	; (801f5e0 <init_spi+0x98>)
 801f596:	2207      	movs	r2, #7
 801f598:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize          = obj->bits;
 801f59a:	9b01      	ldr	r3, [sp, #4]
 801f59c:	685b      	ldr	r3, [r3, #4]
 801f59e:	4a10      	ldr	r2, [pc, #64]	; (801f5e0 <init_spi+0x98>)
 801f5a0:	60d3      	str	r3, [r2, #12]
    SpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 801f5a2:	4b0f      	ldr	r3, [pc, #60]	; (801f5e0 <init_spi+0x98>)
 801f5a4:	2200      	movs	r2, #0
 801f5a6:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS               = obj->nss;
 801f5a8:	9b01      	ldr	r3, [sp, #4]
 801f5aa:	695b      	ldr	r3, [r3, #20]
 801f5ac:	4a0c      	ldr	r2, [pc, #48]	; (801f5e0 <init_spi+0x98>)
 801f5ae:	6193      	str	r3, [r2, #24]
    SpiHandle.Init.TIMode            = SPI_TIMODE_DISABLED;
 801f5b0:	4b0b      	ldr	r3, [pc, #44]	; (801f5e0 <init_spi+0x98>)
 801f5b2:	2200      	movs	r2, #0
 801f5b4:	625a      	str	r2, [r3, #36]	; 0x24

    if (HAL_SPI_Init(&SpiHandle) != HAL_OK) {
 801f5b6:	480a      	ldr	r0, [pc, #40]	; (801f5e0 <init_spi+0x98>)
 801f5b8:	f7ff fa1c 	bl	801e9f4 <HAL_SPI_Init>
 801f5bc:	4603      	mov	r3, r0
 801f5be:	2b00      	cmp	r3, #0
 801f5c0:	d002      	beq.n	801f5c8 <init_spi+0x80>
        error("Cannot initialize SPI");
 801f5c2:	4808      	ldr	r0, [pc, #32]	; (801f5e4 <init_spi+0x9c>)
 801f5c4:	f000 fa4e 	bl	801fa64 <error>
    }

    __HAL_SPI_ENABLE(&SpiHandle);
 801f5c8:	4b05      	ldr	r3, [pc, #20]	; (801f5e0 <init_spi+0x98>)
 801f5ca:	681b      	ldr	r3, [r3, #0]
 801f5cc:	4a04      	ldr	r2, [pc, #16]	; (801f5e0 <init_spi+0x98>)
 801f5ce:	6812      	ldr	r2, [r2, #0]
 801f5d0:	6812      	ldr	r2, [r2, #0]
 801f5d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801f5d6:	601a      	str	r2, [r3, #0]
}
 801f5d8:	b003      	add	sp, #12
 801f5da:	f85d fb04 	ldr.w	pc, [sp], #4
 801f5de:	bf00      	nop
 801f5e0:	20001910 	.word	0x20001910
 801f5e4:	08026f34 	.word	0x08026f34

0801f5e8 <spi_init>:

void spi_init(spi_t *obj, PinName mosi, PinName miso, PinName sclk, PinName ssel)
{
 801f5e8:	b500      	push	{lr}
 801f5ea:	b08d      	sub	sp, #52	; 0x34
 801f5ec:	9003      	str	r0, [sp, #12]
 801f5ee:	4608      	mov	r0, r1
 801f5f0:	4611      	mov	r1, r2
 801f5f2:	461a      	mov	r2, r3
 801f5f4:	4603      	mov	r3, r0
 801f5f6:	f8ad 300a 	strh.w	r3, [sp, #10]
 801f5fa:	460b      	mov	r3, r1
 801f5fc:	f8ad 3008 	strh.w	r3, [sp, #8]
 801f600:	4613      	mov	r3, r2
 801f602:	f8ad 3006 	strh.w	r3, [sp, #6]
    // Determine the SPI to use
    SPIName spi_mosi = (SPIName)pinmap_peripheral(mosi, PinMap_SPI_MOSI);
 801f606:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801f60a:	4618      	mov	r0, r3
 801f60c:	494d      	ldr	r1, [pc, #308]	; (801f744 <spi_init+0x15c>)
 801f60e:	f000 faf7 	bl	801fc00 <pinmap_peripheral>
 801f612:	900b      	str	r0, [sp, #44]	; 0x2c
    SPIName spi_miso = (SPIName)pinmap_peripheral(miso, PinMap_SPI_MISO);
 801f614:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801f618:	4618      	mov	r0, r3
 801f61a:	494b      	ldr	r1, [pc, #300]	; (801f748 <spi_init+0x160>)
 801f61c:	f000 faf0 	bl	801fc00 <pinmap_peripheral>
 801f620:	900a      	str	r0, [sp, #40]	; 0x28
    SPIName spi_sclk = (SPIName)pinmap_peripheral(sclk, PinMap_SPI_SCLK);
 801f622:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801f626:	4618      	mov	r0, r3
 801f628:	4948      	ldr	r1, [pc, #288]	; (801f74c <spi_init+0x164>)
 801f62a:	f000 fae9 	bl	801fc00 <pinmap_peripheral>
 801f62e:	9009      	str	r0, [sp, #36]	; 0x24
    SPIName spi_ssel = (SPIName)pinmap_peripheral(ssel, PinMap_SPI_SSEL);
 801f630:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 801f634:	4618      	mov	r0, r3
 801f636:	4946      	ldr	r1, [pc, #280]	; (801f750 <spi_init+0x168>)
 801f638:	f000 fae2 	bl	801fc00 <pinmap_peripheral>
 801f63c:	9008      	str	r0, [sp, #32]

    SPIName spi_data = (SPIName)pinmap_merge(spi_mosi, spi_miso);
 801f63e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801f640:	990a      	ldr	r1, [sp, #40]	; 0x28
 801f642:	f000 fa9d 	bl	801fb80 <pinmap_merge>
 801f646:	9007      	str	r0, [sp, #28]
    SPIName spi_cntl = (SPIName)pinmap_merge(spi_sclk, spi_ssel);
 801f648:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f64a:	9908      	ldr	r1, [sp, #32]
 801f64c:	f000 fa98 	bl	801fb80 <pinmap_merge>
 801f650:	9006      	str	r0, [sp, #24]

    obj->spi = (SPIName)pinmap_merge(spi_data, spi_cntl);
 801f652:	9807      	ldr	r0, [sp, #28]
 801f654:	9906      	ldr	r1, [sp, #24]
 801f656:	f000 fa93 	bl	801fb80 <pinmap_merge>
 801f65a:	4602      	mov	r2, r0
 801f65c:	9b03      	ldr	r3, [sp, #12]
 801f65e:	601a      	str	r2, [r3, #0]
    MBED_ASSERT(obj->spi != (SPIName)NC);
 801f660:	9b03      	ldr	r3, [sp, #12]
 801f662:	681b      	ldr	r3, [r3, #0]
 801f664:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f668:	d104      	bne.n	801f674 <spi_init+0x8c>
 801f66a:	483a      	ldr	r0, [pc, #232]	; (801f754 <spi_init+0x16c>)
 801f66c:	493a      	ldr	r1, [pc, #232]	; (801f758 <spi_init+0x170>)
 801f66e:	2250      	movs	r2, #80	; 0x50
 801f670:	f000 f9ec 	bl	801fa4c <mbed_assert_internal>

    // Enable SPI clock
    if (obj->spi == SPI_2) {
 801f674:	9b03      	ldr	r3, [sp, #12]
 801f676:	681b      	ldr	r3, [r3, #0]
 801f678:	4a38      	ldr	r2, [pc, #224]	; (801f75c <spi_init+0x174>)
 801f67a:	4293      	cmp	r3, r2
 801f67c:	d10b      	bne.n	801f696 <spi_init+0xae>
        __HAL_RCC_SPI2_CLK_ENABLE();
 801f67e:	4a38      	ldr	r2, [pc, #224]	; (801f760 <spi_init+0x178>)
 801f680:	4b37      	ldr	r3, [pc, #220]	; (801f760 <spi_init+0x178>)
 801f682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f684:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801f688:	6413      	str	r3, [r2, #64]	; 0x40
 801f68a:	4b35      	ldr	r3, [pc, #212]	; (801f760 <spi_init+0x178>)
 801f68c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f68e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801f692:	9305      	str	r3, [sp, #20]
 801f694:	9b05      	ldr	r3, [sp, #20]
    }

    if (obj->spi == SPI_5) {
 801f696:	9b03      	ldr	r3, [sp, #12]
 801f698:	681b      	ldr	r3, [r3, #0]
 801f69a:	4a32      	ldr	r2, [pc, #200]	; (801f764 <spi_init+0x17c>)
 801f69c:	4293      	cmp	r3, r2
 801f69e:	d10b      	bne.n	801f6b8 <spi_init+0xd0>
        __HAL_RCC_SPI5_CLK_ENABLE();
 801f6a0:	4a2f      	ldr	r2, [pc, #188]	; (801f760 <spi_init+0x178>)
 801f6a2:	4b2f      	ldr	r3, [pc, #188]	; (801f760 <spi_init+0x178>)
 801f6a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f6a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801f6aa:	6453      	str	r3, [r2, #68]	; 0x44
 801f6ac:	4b2c      	ldr	r3, [pc, #176]	; (801f760 <spi_init+0x178>)
 801f6ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f6b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801f6b4:	9304      	str	r3, [sp, #16]
 801f6b6:	9b04      	ldr	r3, [sp, #16]
    }

    // Configure the SPI pins
    pinmap_pinout(mosi, PinMap_SPI_MOSI);
 801f6b8:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801f6bc:	4618      	mov	r0, r3
 801f6be:	4921      	ldr	r1, [pc, #132]	; (801f744 <spi_init+0x15c>)
 801f6c0:	f000 fa2a 	bl	801fb18 <pinmap_pinout>
    pinmap_pinout(miso, PinMap_SPI_MISO);
 801f6c4:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801f6c8:	4618      	mov	r0, r3
 801f6ca:	491f      	ldr	r1, [pc, #124]	; (801f748 <spi_init+0x160>)
 801f6cc:	f000 fa24 	bl	801fb18 <pinmap_pinout>
    pinmap_pinout(sclk, PinMap_SPI_SCLK);
 801f6d0:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801f6d4:	4618      	mov	r0, r3
 801f6d6:	491d      	ldr	r1, [pc, #116]	; (801f74c <spi_init+0x164>)
 801f6d8:	f000 fa1e 	bl	801fb18 <pinmap_pinout>

    // Save new values
    obj->bits = SPI_DATASIZE_8BIT;
 801f6dc:	9b03      	ldr	r3, [sp, #12]
 801f6de:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 801f6e2:	605a      	str	r2, [r3, #4]
    obj->cpol = SPI_POLARITY_LOW;
 801f6e4:	9b03      	ldr	r3, [sp, #12]
 801f6e6:	2200      	movs	r2, #0
 801f6e8:	609a      	str	r2, [r3, #8]
    obj->cpha = SPI_PHASE_1EDGE;
 801f6ea:	9b03      	ldr	r3, [sp, #12]
 801f6ec:	2200      	movs	r2, #0
 801f6ee:	60da      	str	r2, [r3, #12]
    obj->br_presc = SPI_BAUDRATEPRESCALER_256;
 801f6f0:	9b03      	ldr	r3, [sp, #12]
 801f6f2:	2238      	movs	r2, #56	; 0x38
 801f6f4:	619a      	str	r2, [r3, #24]

    obj->pin_miso = miso;
 801f6f6:	9b03      	ldr	r3, [sp, #12]
 801f6f8:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801f6fc:	839a      	strh	r2, [r3, #28]
    obj->pin_mosi = mosi;
 801f6fe:	9b03      	ldr	r3, [sp, #12]
 801f700:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801f704:	83da      	strh	r2, [r3, #30]
    obj->pin_sclk = sclk;
 801f706:	9b03      	ldr	r3, [sp, #12]
 801f708:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801f70c:	841a      	strh	r2, [r3, #32]
    obj->pin_ssel = ssel;
 801f70e:	9b03      	ldr	r3, [sp, #12]
 801f710:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801f714:	845a      	strh	r2, [r3, #34]	; 0x22

    if (ssel != NC) {
 801f716:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 801f71a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f71e:	d006      	beq.n	801f72e <spi_init+0x146>
        pinmap_pinout(ssel, PinMap_SPI_SSEL);
 801f720:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 801f724:	4618      	mov	r0, r3
 801f726:	490a      	ldr	r1, [pc, #40]	; (801f750 <spi_init+0x168>)
 801f728:	f000 f9f6 	bl	801fb18 <pinmap_pinout>
 801f72c:	e003      	b.n	801f736 <spi_init+0x14e>
    } else {
        obj->nss = SPI_NSS_SOFT;
 801f72e:	9b03      	ldr	r3, [sp, #12]
 801f730:	f44f 7200 	mov.w	r2, #512	; 0x200
 801f734:	615a      	str	r2, [r3, #20]
    }

    init_spi(obj);
 801f736:	9803      	ldr	r0, [sp, #12]
 801f738:	f7ff ff06 	bl	801f548 <init_spi>
}
 801f73c:	b00d      	add	sp, #52	; 0x34
 801f73e:	f85d fb04 	ldr.w	pc, [sp], #4
 801f742:	bf00      	nop
 801f744:	080270d8 	.word	0x080270d8
 801f748:	08027108 	.word	0x08027108
 801f74c:	08027138 	.word	0x08027138
 801f750:	08027168 	.word	0x08027168
 801f754:	08026f4c 	.word	0x08026f4c
 801f758:	08026f64 	.word	0x08026f64
 801f75c:	40003800 	.word	0x40003800
 801f760:	40023800 	.word	0x40023800
 801f764:	40015000 	.word	0x40015000

0801f768 <spi_format>:
    pin_function(obj->pin_sclk, STM_PIN_DATA(STM_MODE_INPUT, GPIO_NOPULL, 0));
    pin_function(obj->pin_ssel, STM_PIN_DATA(STM_MODE_INPUT, GPIO_NOPULL, 0));
}

void spi_format(spi_t *obj, int bits, int mode, int slave)
{
 801f768:	b500      	push	{lr}
 801f76a:	b085      	sub	sp, #20
 801f76c:	9003      	str	r0, [sp, #12]
 801f76e:	9102      	str	r1, [sp, #8]
 801f770:	9201      	str	r2, [sp, #4]
 801f772:	9300      	str	r3, [sp, #0]
    // Save new values
    if (bits == 16) {
 801f774:	9b02      	ldr	r3, [sp, #8]
 801f776:	2b10      	cmp	r3, #16
 801f778:	d104      	bne.n	801f784 <spi_format+0x1c>
        obj->bits = SPI_DATASIZE_16BIT;
 801f77a:	9b03      	ldr	r3, [sp, #12]
 801f77c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 801f780:	605a      	str	r2, [r3, #4]
 801f782:	e003      	b.n	801f78c <spi_format+0x24>
    } else {
        obj->bits = SPI_DATASIZE_8BIT;
 801f784:	9b03      	ldr	r3, [sp, #12]
 801f786:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 801f78a:	605a      	str	r2, [r3, #4]
    }

    switch (mode) {
 801f78c:	9b01      	ldr	r3, [sp, #4]
 801f78e:	2b01      	cmp	r3, #1
 801f790:	d00a      	beq.n	801f7a8 <spi_format+0x40>
 801f792:	2b02      	cmp	r3, #2
 801f794:	d00f      	beq.n	801f7b6 <spi_format+0x4e>
 801f796:	2b00      	cmp	r3, #0
 801f798:	d114      	bne.n	801f7c4 <spi_format+0x5c>
        case 0:
            obj->cpol = SPI_POLARITY_LOW;
 801f79a:	9b03      	ldr	r3, [sp, #12]
 801f79c:	2200      	movs	r2, #0
 801f79e:	609a      	str	r2, [r3, #8]
            obj->cpha = SPI_PHASE_1EDGE;
 801f7a0:	9b03      	ldr	r3, [sp, #12]
 801f7a2:	2200      	movs	r2, #0
 801f7a4:	60da      	str	r2, [r3, #12]
            break;
 801f7a6:	e014      	b.n	801f7d2 <spi_format+0x6a>
        case 1:
            obj->cpol = SPI_POLARITY_LOW;
 801f7a8:	9b03      	ldr	r3, [sp, #12]
 801f7aa:	2200      	movs	r2, #0
 801f7ac:	609a      	str	r2, [r3, #8]
            obj->cpha = SPI_PHASE_2EDGE;
 801f7ae:	9b03      	ldr	r3, [sp, #12]
 801f7b0:	2201      	movs	r2, #1
 801f7b2:	60da      	str	r2, [r3, #12]
            break;
 801f7b4:	e00d      	b.n	801f7d2 <spi_format+0x6a>
        case 2:
            obj->cpol = SPI_POLARITY_HIGH;
 801f7b6:	9b03      	ldr	r3, [sp, #12]
 801f7b8:	2202      	movs	r2, #2
 801f7ba:	609a      	str	r2, [r3, #8]
            obj->cpha = SPI_PHASE_1EDGE;
 801f7bc:	9b03      	ldr	r3, [sp, #12]
 801f7be:	2200      	movs	r2, #0
 801f7c0:	60da      	str	r2, [r3, #12]
            break;
 801f7c2:	e006      	b.n	801f7d2 <spi_format+0x6a>
        default:
            obj->cpol = SPI_POLARITY_HIGH;
 801f7c4:	9b03      	ldr	r3, [sp, #12]
 801f7c6:	2202      	movs	r2, #2
 801f7c8:	609a      	str	r2, [r3, #8]
            obj->cpha = SPI_PHASE_2EDGE;
 801f7ca:	9b03      	ldr	r3, [sp, #12]
 801f7cc:	2201      	movs	r2, #1
 801f7ce:	60da      	str	r2, [r3, #12]
            break;
 801f7d0:	bf00      	nop
    }

    if (obj->nss != SPI_NSS_SOFT) {
 801f7d2:	9b03      	ldr	r3, [sp, #12]
 801f7d4:	695b      	ldr	r3, [r3, #20]
 801f7d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f7da:	d008      	beq.n	801f7ee <spi_format+0x86>
        obj->nss = (slave) ? SPI_NSS_HARD_INPUT : SPI_NSS_HARD_OUTPUT;
 801f7dc:	9b00      	ldr	r3, [sp, #0]
 801f7de:	2b00      	cmp	r3, #0
 801f7e0:	d001      	beq.n	801f7e6 <spi_format+0x7e>
 801f7e2:	2200      	movs	r2, #0
 801f7e4:	e001      	b.n	801f7ea <spi_format+0x82>
 801f7e6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 801f7ea:	9b03      	ldr	r3, [sp, #12]
 801f7ec:	615a      	str	r2, [r3, #20]
    }

    obj->mode = (slave) ? SPI_MODE_SLAVE : SPI_MODE_MASTER;
 801f7ee:	9b00      	ldr	r3, [sp, #0]
 801f7f0:	2b00      	cmp	r3, #0
 801f7f2:	d001      	beq.n	801f7f8 <spi_format+0x90>
 801f7f4:	2200      	movs	r2, #0
 801f7f6:	e001      	b.n	801f7fc <spi_format+0x94>
 801f7f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 801f7fc:	9b03      	ldr	r3, [sp, #12]
 801f7fe:	611a      	str	r2, [r3, #16]

    init_spi(obj);
 801f800:	9803      	ldr	r0, [sp, #12]
 801f802:	f7ff fea1 	bl	801f548 <init_spi>
}
 801f806:	b005      	add	sp, #20
 801f808:	f85d fb04 	ldr.w	pc, [sp], #4

0801f80c <spi_frequency>:

void spi_frequency(spi_t *obj, int hz)
{
 801f80c:	b500      	push	{lr}
 801f80e:	b083      	sub	sp, #12
 801f810:	9001      	str	r0, [sp, #4]
 801f812:	9100      	str	r1, [sp, #0]
    // The frequencies are obtained with:
    // - SPI2 clock =  54 MHz (APB1 clock)
    // - SPI5 clock = 108 MHz (APB2 clock)
    if (obj->spi == SPI_2) {
 801f814:	9b01      	ldr	r3, [sp, #4]
 801f816:	681b      	ldr	r3, [r3, #0]
 801f818:	4a5c      	ldr	r2, [pc, #368]	; (801f98c <spi_frequency+0x180>)
 801f81a:	4293      	cmp	r3, r2
 801f81c:	d154      	bne.n	801f8c8 <spi_frequency+0xbc>
        if (hz < 400000) {
 801f81e:	9b00      	ldr	r3, [sp, #0]
 801f820:	4a5b      	ldr	r2, [pc, #364]	; (801f990 <spi_frequency+0x184>)
 801f822:	4293      	cmp	r3, r2
 801f824:	dc03      	bgt.n	801f82e <spi_frequency+0x22>
            obj->br_presc = SPI_BAUDRATEPRESCALER_256; // 211 kHz
 801f826:	9b01      	ldr	r3, [sp, #4]
 801f828:	2238      	movs	r2, #56	; 0x38
 801f82a:	619a      	str	r2, [r3, #24]
 801f82c:	e0a7      	b.n	801f97e <spi_frequency+0x172>
        } else if ((hz >= 400000) && (hz < 800000)) {
 801f82e:	9b00      	ldr	r3, [sp, #0]
 801f830:	4a57      	ldr	r2, [pc, #348]	; (801f990 <spi_frequency+0x184>)
 801f832:	4293      	cmp	r3, r2
 801f834:	dd07      	ble.n	801f846 <spi_frequency+0x3a>
 801f836:	9b00      	ldr	r3, [sp, #0]
 801f838:	4a56      	ldr	r2, [pc, #344]	; (801f994 <spi_frequency+0x188>)
 801f83a:	4293      	cmp	r3, r2
 801f83c:	dc03      	bgt.n	801f846 <spi_frequency+0x3a>
            obj->br_presc = SPI_BAUDRATEPRESCALER_128; // 422 kHz
 801f83e:	9b01      	ldr	r3, [sp, #4]
 801f840:	2230      	movs	r2, #48	; 0x30
 801f842:	619a      	str	r2, [r3, #24]
 801f844:	e03f      	b.n	801f8c6 <spi_frequency+0xba>
        } else if ((hz >= 800000) && (hz < 1000000)) {
 801f846:	9b00      	ldr	r3, [sp, #0]
 801f848:	4a52      	ldr	r2, [pc, #328]	; (801f994 <spi_frequency+0x188>)
 801f84a:	4293      	cmp	r3, r2
 801f84c:	dd07      	ble.n	801f85e <spi_frequency+0x52>
 801f84e:	9b00      	ldr	r3, [sp, #0]
 801f850:	4a51      	ldr	r2, [pc, #324]	; (801f998 <spi_frequency+0x18c>)
 801f852:	4293      	cmp	r3, r2
 801f854:	dc03      	bgt.n	801f85e <spi_frequency+0x52>
            obj->br_presc = SPI_BAUDRATEPRESCALER_64; // 844 kHz
 801f856:	9b01      	ldr	r3, [sp, #4]
 801f858:	2228      	movs	r2, #40	; 0x28
 801f85a:	619a      	str	r2, [r3, #24]
 801f85c:	e033      	b.n	801f8c6 <spi_frequency+0xba>
        } else if ((hz >= 1000000) && (hz < 3000000)) {
 801f85e:	9b00      	ldr	r3, [sp, #0]
 801f860:	4a4d      	ldr	r2, [pc, #308]	; (801f998 <spi_frequency+0x18c>)
 801f862:	4293      	cmp	r3, r2
 801f864:	dd07      	ble.n	801f876 <spi_frequency+0x6a>
 801f866:	9b00      	ldr	r3, [sp, #0]
 801f868:	4a4c      	ldr	r2, [pc, #304]	; (801f99c <spi_frequency+0x190>)
 801f86a:	4293      	cmp	r3, r2
 801f86c:	dc03      	bgt.n	801f876 <spi_frequency+0x6a>
            obj->br_presc = SPI_BAUDRATEPRESCALER_32; // 1.69 MHz
 801f86e:	9b01      	ldr	r3, [sp, #4]
 801f870:	2220      	movs	r2, #32
 801f872:	619a      	str	r2, [r3, #24]
 801f874:	e027      	b.n	801f8c6 <spi_frequency+0xba>
        } else if ((hz >= 3000000) && (hz < 6000000)) {
 801f876:	9b00      	ldr	r3, [sp, #0]
 801f878:	4a48      	ldr	r2, [pc, #288]	; (801f99c <spi_frequency+0x190>)
 801f87a:	4293      	cmp	r3, r2
 801f87c:	dd07      	ble.n	801f88e <spi_frequency+0x82>
 801f87e:	9b00      	ldr	r3, [sp, #0]
 801f880:	4a47      	ldr	r2, [pc, #284]	; (801f9a0 <spi_frequency+0x194>)
 801f882:	4293      	cmp	r3, r2
 801f884:	dc03      	bgt.n	801f88e <spi_frequency+0x82>
            obj->br_presc = SPI_BAUDRATEPRESCALER_16; // 3.38 MHz
 801f886:	9b01      	ldr	r3, [sp, #4]
 801f888:	2218      	movs	r2, #24
 801f88a:	619a      	str	r2, [r3, #24]
 801f88c:	e01b      	b.n	801f8c6 <spi_frequency+0xba>
        } else if ((hz >= 6000000) && (hz < 12000000)) {
 801f88e:	9b00      	ldr	r3, [sp, #0]
 801f890:	4a43      	ldr	r2, [pc, #268]	; (801f9a0 <spi_frequency+0x194>)
 801f892:	4293      	cmp	r3, r2
 801f894:	dd07      	ble.n	801f8a6 <spi_frequency+0x9a>
 801f896:	9b00      	ldr	r3, [sp, #0]
 801f898:	4a42      	ldr	r2, [pc, #264]	; (801f9a4 <spi_frequency+0x198>)
 801f89a:	4293      	cmp	r3, r2
 801f89c:	dc03      	bgt.n	801f8a6 <spi_frequency+0x9a>
            obj->br_presc = SPI_BAUDRATEPRESCALER_8; // 6.75 MHz
 801f89e:	9b01      	ldr	r3, [sp, #4]
 801f8a0:	2210      	movs	r2, #16
 801f8a2:	619a      	str	r2, [r3, #24]
 801f8a4:	e00f      	b.n	801f8c6 <spi_frequency+0xba>
        } else if ((hz >= 12000000) && (hz < 24000000)) {
 801f8a6:	9b00      	ldr	r3, [sp, #0]
 801f8a8:	4a3e      	ldr	r2, [pc, #248]	; (801f9a4 <spi_frequency+0x198>)
 801f8aa:	4293      	cmp	r3, r2
 801f8ac:	dd07      	ble.n	801f8be <spi_frequency+0xb2>
 801f8ae:	9b00      	ldr	r3, [sp, #0]
 801f8b0:	4a3d      	ldr	r2, [pc, #244]	; (801f9a8 <spi_frequency+0x19c>)
 801f8b2:	4293      	cmp	r3, r2
 801f8b4:	dc03      	bgt.n	801f8be <spi_frequency+0xb2>
            obj->br_presc = SPI_BAUDRATEPRESCALER_4; // 13.5 MHz
 801f8b6:	9b01      	ldr	r3, [sp, #4]
 801f8b8:	2208      	movs	r2, #8
 801f8ba:	619a      	str	r2, [r3, #24]
 801f8bc:	e003      	b.n	801f8c6 <spi_frequency+0xba>
        } else { // >= 24000000
            obj->br_presc = SPI_BAUDRATEPRESCALER_2; // 27 MHz
 801f8be:	9b01      	ldr	r3, [sp, #4]
 801f8c0:	2200      	movs	r2, #0
 801f8c2:	619a      	str	r2, [r3, #24]
 801f8c4:	e05b      	b.n	801f97e <spi_frequency+0x172>
 801f8c6:	e05a      	b.n	801f97e <spi_frequency+0x172>
        }
    } else if (obj->spi == SPI_5) {
 801f8c8:	9b01      	ldr	r3, [sp, #4]
 801f8ca:	681b      	ldr	r3, [r3, #0]
 801f8cc:	4a37      	ldr	r2, [pc, #220]	; (801f9ac <spi_frequency+0x1a0>)
 801f8ce:	4293      	cmp	r3, r2
 801f8d0:	d154      	bne.n	801f97c <spi_frequency+0x170>
        if (hz < 800000) {
 801f8d2:	9b00      	ldr	r3, [sp, #0]
 801f8d4:	4a2f      	ldr	r2, [pc, #188]	; (801f994 <spi_frequency+0x188>)
 801f8d6:	4293      	cmp	r3, r2
 801f8d8:	dc03      	bgt.n	801f8e2 <spi_frequency+0xd6>
            obj->br_presc = SPI_BAUDRATEPRESCALER_256; // 422 kHz
 801f8da:	9b01      	ldr	r3, [sp, #4]
 801f8dc:	2238      	movs	r2, #56	; 0x38
 801f8de:	619a      	str	r2, [r3, #24]
 801f8e0:	e04d      	b.n	801f97e <spi_frequency+0x172>
        } else if ((hz >= 800000) && (hz < 1000000)) {
 801f8e2:	9b00      	ldr	r3, [sp, #0]
 801f8e4:	4a2b      	ldr	r2, [pc, #172]	; (801f994 <spi_frequency+0x188>)
 801f8e6:	4293      	cmp	r3, r2
 801f8e8:	dd07      	ble.n	801f8fa <spi_frequency+0xee>
 801f8ea:	9b00      	ldr	r3, [sp, #0]
 801f8ec:	4a2a      	ldr	r2, [pc, #168]	; (801f998 <spi_frequency+0x18c>)
 801f8ee:	4293      	cmp	r3, r2
 801f8f0:	dc03      	bgt.n	801f8fa <spi_frequency+0xee>
            obj->br_presc = SPI_BAUDRATEPRESCALER_128; // 844 kHz
 801f8f2:	9b01      	ldr	r3, [sp, #4]
 801f8f4:	2230      	movs	r2, #48	; 0x30
 801f8f6:	619a      	str	r2, [r3, #24]
 801f8f8:	e03f      	b.n	801f97a <spi_frequency+0x16e>
        } else if ((hz >= 1000000) && (hz < 3000000)) {
 801f8fa:	9b00      	ldr	r3, [sp, #0]
 801f8fc:	4a26      	ldr	r2, [pc, #152]	; (801f998 <spi_frequency+0x18c>)
 801f8fe:	4293      	cmp	r3, r2
 801f900:	dd07      	ble.n	801f912 <spi_frequency+0x106>
 801f902:	9b00      	ldr	r3, [sp, #0]
 801f904:	4a25      	ldr	r2, [pc, #148]	; (801f99c <spi_frequency+0x190>)
 801f906:	4293      	cmp	r3, r2
 801f908:	dc03      	bgt.n	801f912 <spi_frequency+0x106>
            obj->br_presc = SPI_BAUDRATEPRESCALER_64; // 1.69 MHz
 801f90a:	9b01      	ldr	r3, [sp, #4]
 801f90c:	2228      	movs	r2, #40	; 0x28
 801f90e:	619a      	str	r2, [r3, #24]
 801f910:	e033      	b.n	801f97a <spi_frequency+0x16e>
        } else if ((hz >= 3000000) && (hz < 6000000)) {
 801f912:	9b00      	ldr	r3, [sp, #0]
 801f914:	4a21      	ldr	r2, [pc, #132]	; (801f99c <spi_frequency+0x190>)
 801f916:	4293      	cmp	r3, r2
 801f918:	dd07      	ble.n	801f92a <spi_frequency+0x11e>
 801f91a:	9b00      	ldr	r3, [sp, #0]
 801f91c:	4a20      	ldr	r2, [pc, #128]	; (801f9a0 <spi_frequency+0x194>)
 801f91e:	4293      	cmp	r3, r2
 801f920:	dc03      	bgt.n	801f92a <spi_frequency+0x11e>
            obj->br_presc = SPI_BAUDRATEPRESCALER_32; // 3.38 MHz
 801f922:	9b01      	ldr	r3, [sp, #4]
 801f924:	2220      	movs	r2, #32
 801f926:	619a      	str	r2, [r3, #24]
 801f928:	e027      	b.n	801f97a <spi_frequency+0x16e>
        } else if ((hz >= 6000000) && (hz < 12000000)) {
 801f92a:	9b00      	ldr	r3, [sp, #0]
 801f92c:	4a1c      	ldr	r2, [pc, #112]	; (801f9a0 <spi_frequency+0x194>)
 801f92e:	4293      	cmp	r3, r2
 801f930:	dd07      	ble.n	801f942 <spi_frequency+0x136>
 801f932:	9b00      	ldr	r3, [sp, #0]
 801f934:	4a1b      	ldr	r2, [pc, #108]	; (801f9a4 <spi_frequency+0x198>)
 801f936:	4293      	cmp	r3, r2
 801f938:	dc03      	bgt.n	801f942 <spi_frequency+0x136>
            obj->br_presc = SPI_BAUDRATEPRESCALER_16; // 6.75 MHz
 801f93a:	9b01      	ldr	r3, [sp, #4]
 801f93c:	2218      	movs	r2, #24
 801f93e:	619a      	str	r2, [r3, #24]
 801f940:	e01b      	b.n	801f97a <spi_frequency+0x16e>
        } else if ((hz >= 12000000) && (hz < 24000000)) {
 801f942:	9b00      	ldr	r3, [sp, #0]
 801f944:	4a17      	ldr	r2, [pc, #92]	; (801f9a4 <spi_frequency+0x198>)
 801f946:	4293      	cmp	r3, r2
 801f948:	dd07      	ble.n	801f95a <spi_frequency+0x14e>
 801f94a:	9b00      	ldr	r3, [sp, #0]
 801f94c:	4a16      	ldr	r2, [pc, #88]	; (801f9a8 <spi_frequency+0x19c>)
 801f94e:	4293      	cmp	r3, r2
 801f950:	dc03      	bgt.n	801f95a <spi_frequency+0x14e>
            obj->br_presc = SPI_BAUDRATEPRESCALER_8; // 13.5 MHz
 801f952:	9b01      	ldr	r3, [sp, #4]
 801f954:	2210      	movs	r2, #16
 801f956:	619a      	str	r2, [r3, #24]
 801f958:	e00f      	b.n	801f97a <spi_frequency+0x16e>
        } else if ((hz >= 24000000) && (hz < 54000000)) {
 801f95a:	9b00      	ldr	r3, [sp, #0]
 801f95c:	4a12      	ldr	r2, [pc, #72]	; (801f9a8 <spi_frequency+0x19c>)
 801f95e:	4293      	cmp	r3, r2
 801f960:	dd07      	ble.n	801f972 <spi_frequency+0x166>
 801f962:	9b00      	ldr	r3, [sp, #0]
 801f964:	4a12      	ldr	r2, [pc, #72]	; (801f9b0 <spi_frequency+0x1a4>)
 801f966:	4293      	cmp	r3, r2
 801f968:	dc03      	bgt.n	801f972 <spi_frequency+0x166>
            obj->br_presc = SPI_BAUDRATEPRESCALER_4; // 27 MHz
 801f96a:	9b01      	ldr	r3, [sp, #4]
 801f96c:	2208      	movs	r2, #8
 801f96e:	619a      	str	r2, [r3, #24]
 801f970:	e003      	b.n	801f97a <spi_frequency+0x16e>
        } else { // >= 54000000
            obj->br_presc = SPI_BAUDRATEPRESCALER_2; // 54 MHz
 801f972:	9b01      	ldr	r3, [sp, #4]
 801f974:	2200      	movs	r2, #0
 801f976:	619a      	str	r2, [r3, #24]
 801f978:	e001      	b.n	801f97e <spi_frequency+0x172>
 801f97a:	e000      	b.n	801f97e <spi_frequency+0x172>
        }
    } else {
        return;
 801f97c:	e002      	b.n	801f984 <spi_frequency+0x178>
    }
    init_spi(obj);
 801f97e:	9801      	ldr	r0, [sp, #4]
 801f980:	f7ff fde2 	bl	801f548 <init_spi>
}
 801f984:	b003      	add	sp, #12
 801f986:	f85d fb04 	ldr.w	pc, [sp], #4
 801f98a:	bf00      	nop
 801f98c:	40003800 	.word	0x40003800
 801f990:	00061a7f 	.word	0x00061a7f
 801f994:	000c34ff 	.word	0x000c34ff
 801f998:	000f423f 	.word	0x000f423f
 801f99c:	002dc6bf 	.word	0x002dc6bf
 801f9a0:	005b8d7f 	.word	0x005b8d7f
 801f9a4:	00b71aff 	.word	0x00b71aff
 801f9a8:	016e35ff 	.word	0x016e35ff
 801f9ac:	40015000 	.word	0x40015000
 801f9b0:	0337f97f 	.word	0x0337f97f

0801f9b4 <us_ticker_init>:

static TIM_HandleTypeDef TimMasterHandle;
static int us_ticker_inited = 0;

void us_ticker_init(void)
{
 801f9b4:	b508      	push	{r3, lr}
    if (us_ticker_inited) return;
 801f9b6:	4b07      	ldr	r3, [pc, #28]	; (801f9d4 <us_ticker_init+0x20>)
 801f9b8:	681b      	ldr	r3, [r3, #0]
 801f9ba:	2b00      	cmp	r3, #0
 801f9bc:	d000      	beq.n	801f9c0 <us_ticker_init+0xc>
 801f9be:	e008      	b.n	801f9d2 <us_ticker_init+0x1e>
    us_ticker_inited = 1;
 801f9c0:	4b04      	ldr	r3, [pc, #16]	; (801f9d4 <us_ticker_init+0x20>)
 801f9c2:	2201      	movs	r2, #1
 801f9c4:	601a      	str	r2, [r3, #0]

    TimMasterHandle.Instance = TIM_MST;
 801f9c6:	4b04      	ldr	r3, [pc, #16]	; (801f9d8 <us_ticker_init+0x24>)
 801f9c8:	4a04      	ldr	r2, [pc, #16]	; (801f9dc <us_ticker_init+0x28>)
 801f9ca:	601a      	str	r2, [r3, #0]

    HAL_InitTick(0); // The passed value is not used
 801f9cc:	2000      	movs	r0, #0
 801f9ce:	f7ff f8a7 	bl	801eb20 <HAL_InitTick>
}
 801f9d2:	bd08      	pop	{r3, pc}
 801f9d4:	200019b0 	.word	0x200019b0
 801f9d8:	20001974 	.word	0x20001974
 801f9dc:	40000c00 	.word	0x40000c00

0801f9e0 <us_ticker_read>:

uint32_t us_ticker_read()
{
 801f9e0:	b508      	push	{r3, lr}
    if (!us_ticker_inited) us_ticker_init();
 801f9e2:	4b05      	ldr	r3, [pc, #20]	; (801f9f8 <us_ticker_read+0x18>)
 801f9e4:	681b      	ldr	r3, [r3, #0]
 801f9e6:	2b00      	cmp	r3, #0
 801f9e8:	d101      	bne.n	801f9ee <us_ticker_read+0xe>
 801f9ea:	f7ff ffe3 	bl	801f9b4 <us_ticker_init>
    return TIM_MST->CNT;
 801f9ee:	4b03      	ldr	r3, [pc, #12]	; (801f9fc <us_ticker_read+0x1c>)
 801f9f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 801f9f2:	4618      	mov	r0, r3
 801f9f4:	bd08      	pop	{r3, pc}
 801f9f6:	bf00      	nop
 801f9f8:	200019b0 	.word	0x200019b0
 801f9fc:	40000c00 	.word	0x40000c00

0801fa00 <us_ticker_set_interrupt>:

void us_ticker_set_interrupt(timestamp_t timestamp)
{
 801fa00:	b082      	sub	sp, #8
 801fa02:	9001      	str	r0, [sp, #4]
    // Set new output compare value
    __HAL_TIM_SetCompare(&TimMasterHandle, TIM_CHANNEL_1, (uint32_t)timestamp);
 801fa04:	4b06      	ldr	r3, [pc, #24]	; (801fa20 <us_ticker_set_interrupt+0x20>)
 801fa06:	681b      	ldr	r3, [r3, #0]
 801fa08:	9a01      	ldr	r2, [sp, #4]
 801fa0a:	635a      	str	r2, [r3, #52]	; 0x34
    // Enable IT
    __HAL_TIM_ENABLE_IT(&TimMasterHandle, TIM_IT_CC1);
 801fa0c:	4b04      	ldr	r3, [pc, #16]	; (801fa20 <us_ticker_set_interrupt+0x20>)
 801fa0e:	681b      	ldr	r3, [r3, #0]
 801fa10:	4a03      	ldr	r2, [pc, #12]	; (801fa20 <us_ticker_set_interrupt+0x20>)
 801fa12:	6812      	ldr	r2, [r2, #0]
 801fa14:	68d2      	ldr	r2, [r2, #12]
 801fa16:	f042 0202 	orr.w	r2, r2, #2
 801fa1a:	60da      	str	r2, [r3, #12]
}
 801fa1c:	b002      	add	sp, #8
 801fa1e:	4770      	bx	lr
 801fa20:	20001974 	.word	0x20001974

0801fa24 <us_ticker_disable_interrupt>:

void us_ticker_disable_interrupt(void)
{
    __HAL_TIM_DISABLE_IT(&TimMasterHandle, TIM_IT_CC1);
 801fa24:	4b04      	ldr	r3, [pc, #16]	; (801fa38 <us_ticker_disable_interrupt+0x14>)
 801fa26:	681b      	ldr	r3, [r3, #0]
 801fa28:	4a03      	ldr	r2, [pc, #12]	; (801fa38 <us_ticker_disable_interrupt+0x14>)
 801fa2a:	6812      	ldr	r2, [r2, #0]
 801fa2c:	68d2      	ldr	r2, [r2, #12]
 801fa2e:	f022 0202 	bic.w	r2, r2, #2
 801fa32:	60da      	str	r2, [r3, #12]
}
 801fa34:	4770      	bx	lr
 801fa36:	bf00      	nop
 801fa38:	20001974 	.word	0x20001974

0801fa3c <us_ticker_clear_interrupt>:

void us_ticker_clear_interrupt(void)
{
    __HAL_TIM_CLEAR_IT(&TimMasterHandle, TIM_IT_CC1);
 801fa3c:	4b02      	ldr	r3, [pc, #8]	; (801fa48 <us_ticker_clear_interrupt+0xc>)
 801fa3e:	681b      	ldr	r3, [r3, #0]
 801fa40:	f06f 0202 	mvn.w	r2, #2
 801fa44:	611a      	str	r2, [r3, #16]
}
 801fa46:	4770      	bx	lr
 801fa48:	20001974 	.word	0x20001974

0801fa4c <mbed_assert_internal>:
 801fa4c:	b430      	push	{r4, r5}
 801fa4e:	4605      	mov	r5, r0
 801fa50:	460c      	mov	r4, r1
 801fa52:	4613      	mov	r3, r2
 801fa54:	4802      	ldr	r0, [pc, #8]	; (801fa60 <mbed_assert_internal+0x14>)
 801fa56:	4629      	mov	r1, r5
 801fa58:	4622      	mov	r2, r4
 801fa5a:	bc30      	pop	{r4, r5}
 801fa5c:	f000 b802 	b.w	801fa64 <error>
 801fa60:	08026fb4 	.word	0x08026fb4

0801fa64 <error>:
#include "mbed_error.h"
#if DEVICE_STDIO_MESSAGES
#include <stdio.h>
#endif

WEAK void error(const char* format, ...) {
 801fa64:	b40f      	push	{r0, r1, r2, r3}
 801fa66:	b500      	push	{lr}
 801fa68:	b083      	sub	sp, #12
#if DEVICE_STDIO_MESSAGES
    va_list arg;
    va_start(arg, format);
 801fa6a:	ab05      	add	r3, sp, #20
 801fa6c:	9301      	str	r3, [sp, #4]
    vfprintf(stderr, format, arg);
 801fa6e:	4b05      	ldr	r3, [pc, #20]	; (801fa84 <error+0x20>)
 801fa70:	681b      	ldr	r3, [r3, #0]
 801fa72:	68db      	ldr	r3, [r3, #12]
 801fa74:	4618      	mov	r0, r3
 801fa76:	9904      	ldr	r1, [sp, #16]
 801fa78:	9a01      	ldr	r2, [sp, #4]
 801fa7a:	f000 fe33 	bl	80206e4 <vfiprintf>
    va_end(arg);
#endif
    exit(1);
 801fa7e:	2001      	movs	r0, #1
 801fa80:	f000 fa64 	bl	801ff4c <exit>
 801fa84:	20001788 	.word	0x20001788

0801fa88 <_gpio_init_in>:
 * limitations under the License.
 */
#include "gpio_api.h"

static inline void _gpio_init_in(gpio_t* gpio, PinName pin, PinMode mode)
{
 801fa88:	b500      	push	{lr}
 801fa8a:	b083      	sub	sp, #12
 801fa8c:	9001      	str	r0, [sp, #4]
 801fa8e:	460b      	mov	r3, r1
 801fa90:	f8ad 3002 	strh.w	r3, [sp, #2]
 801fa94:	4613      	mov	r3, r2
 801fa96:	f88d 3001 	strb.w	r3, [sp, #1]
    gpio_init(gpio, pin);
 801fa9a:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801fa9e:	9801      	ldr	r0, [sp, #4]
 801faa0:	4619      	mov	r1, r3
 801faa2:	f7ff f98f 	bl	801edc4 <gpio_init>
    if (pin != NC) {
 801faa6:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801faaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 801faae:	d009      	beq.n	801fac4 <_gpio_init_in+0x3c>
        gpio_dir(gpio, PIN_INPUT);
 801fab0:	9801      	ldr	r0, [sp, #4]
 801fab2:	2100      	movs	r1, #0
 801fab4:	f7ff f9ca 	bl	801ee4c <gpio_dir>
        gpio_mode(gpio, mode);
 801fab8:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801fabc:	9801      	ldr	r0, [sp, #4]
 801fabe:	4619      	mov	r1, r3
 801fac0:	f7ff f9b2 	bl	801ee28 <gpio_mode>
    }
}
 801fac4:	b003      	add	sp, #12
 801fac6:	f85d fb04 	ldr.w	pc, [sp], #4
 801faca:	bf00      	nop

0801facc <gpio_init_in>:
        gpio_dir(gpio, PIN_OUTPUT);
        gpio_mode(gpio, mode);
    }
}

void gpio_init_in(gpio_t* gpio, PinName pin) {
 801facc:	b500      	push	{lr}
 801face:	b083      	sub	sp, #12
 801fad0:	9001      	str	r0, [sp, #4]
 801fad2:	460b      	mov	r3, r1
 801fad4:	f8ad 3002 	strh.w	r3, [sp, #2]
    gpio_init_in_ex(gpio, pin, PullDefault);
 801fad8:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801fadc:	9801      	ldr	r0, [sp, #4]
 801fade:	4619      	mov	r1, r3
 801fae0:	2200      	movs	r2, #0
 801fae2:	f000 f803 	bl	801faec <gpio_init_in_ex>
}
 801fae6:	b003      	add	sp, #12
 801fae8:	f85d fb04 	ldr.w	pc, [sp], #4

0801faec <gpio_init_in_ex>:

void gpio_init_in_ex(gpio_t* gpio, PinName pin, PinMode mode) {
 801faec:	b500      	push	{lr}
 801faee:	b083      	sub	sp, #12
 801faf0:	9001      	str	r0, [sp, #4]
 801faf2:	460b      	mov	r3, r1
 801faf4:	f8ad 3002 	strh.w	r3, [sp, #2]
 801faf8:	4613      	mov	r3, r2
 801fafa:	f88d 3001 	strb.w	r3, [sp, #1]
    _gpio_init_in(gpio, pin, mode);
 801fafe:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 801fb02:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801fb06:	9801      	ldr	r0, [sp, #4]
 801fb08:	4611      	mov	r1, r2
 801fb0a:	461a      	mov	r2, r3
 801fb0c:	f7ff ffbc 	bl	801fa88 <_gpio_init_in>
}
 801fb10:	b003      	add	sp, #12
 801fb12:	f85d fb04 	ldr.w	pc, [sp], #4
 801fb16:	bf00      	nop

0801fb18 <pinmap_pinout>:
 * limitations under the License.
 */
#include "pinmap.h"
#include "mbed_error.h"

void pinmap_pinout(PinName pin, const PinMap *map) {
 801fb18:	b500      	push	{lr}
 801fb1a:	b083      	sub	sp, #12
 801fb1c:	4603      	mov	r3, r0
 801fb1e:	9100      	str	r1, [sp, #0]
 801fb20:	f8ad 3006 	strh.w	r3, [sp, #6]
    if (pin == NC)
 801fb24:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801fb28:	f1b3 3fff 	cmp.w	r3, #4294967295
 801fb2c:	d100      	bne.n	801fb30 <pinmap_pinout+0x18>
        return;
 801fb2e:	e022      	b.n	801fb76 <pinmap_pinout+0x5e>

    while (map->pin != NC) {
 801fb30:	e018      	b.n	801fb64 <pinmap_pinout+0x4c>
        if (map->pin == pin) {
 801fb32:	9b00      	ldr	r3, [sp, #0]
 801fb34:	881b      	ldrh	r3, [r3, #0]
 801fb36:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801fb3a:	b21b      	sxth	r3, r3
 801fb3c:	429a      	cmp	r2, r3
 801fb3e:	d10e      	bne.n	801fb5e <pinmap_pinout+0x46>
            pin_function(pin, map->function);
 801fb40:	9b00      	ldr	r3, [sp, #0]
 801fb42:	689b      	ldr	r3, [r3, #8]
 801fb44:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801fb48:	4610      	mov	r0, r2
 801fb4a:	4619      	mov	r1, r3
 801fb4c:	f7ff fa94 	bl	801f078 <pin_function>

            pin_mode(pin, PullNone);
 801fb50:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801fb54:	4618      	mov	r0, r3
 801fb56:	2100      	movs	r1, #0
 801fb58:	f7ff fadc 	bl	801f114 <pin_mode>
            return;
 801fb5c:	e00b      	b.n	801fb76 <pinmap_pinout+0x5e>
        }
        map++;
 801fb5e:	9b00      	ldr	r3, [sp, #0]
 801fb60:	330c      	adds	r3, #12
 801fb62:	9300      	str	r3, [sp, #0]

void pinmap_pinout(PinName pin, const PinMap *map) {
    if (pin == NC)
        return;

    while (map->pin != NC) {
 801fb64:	9b00      	ldr	r3, [sp, #0]
 801fb66:	881b      	ldrh	r3, [r3, #0]
 801fb68:	b21b      	sxth	r3, r3
 801fb6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801fb6e:	d1e0      	bne.n	801fb32 <pinmap_pinout+0x1a>
            pin_mode(pin, PullNone);
            return;
        }
        map++;
    }
    error("could not pinout");
 801fb70:	4802      	ldr	r0, [pc, #8]	; (801fb7c <pinmap_pinout+0x64>)
 801fb72:	f7ff ff77 	bl	801fa64 <error>
}
 801fb76:	b003      	add	sp, #12
 801fb78:	f85d fb04 	ldr.w	pc, [sp], #4
 801fb7c:	08026fe8 	.word	0x08026fe8

0801fb80 <pinmap_merge>:

uint32_t pinmap_merge(uint32_t a, uint32_t b) {
 801fb80:	b500      	push	{lr}
 801fb82:	b083      	sub	sp, #12
 801fb84:	9001      	str	r0, [sp, #4]
 801fb86:	9100      	str	r1, [sp, #0]
    // both are the same (inc both NC)
    if (a == b)
 801fb88:	9a01      	ldr	r2, [sp, #4]
 801fb8a:	9b00      	ldr	r3, [sp, #0]
 801fb8c:	429a      	cmp	r2, r3
 801fb8e:	d101      	bne.n	801fb94 <pinmap_merge+0x14>
        return a;
 801fb90:	9b01      	ldr	r3, [sp, #4]
 801fb92:	e010      	b.n	801fbb6 <pinmap_merge+0x36>

    // one (or both) is not connected
    if (a == (uint32_t)NC)
 801fb94:	9b01      	ldr	r3, [sp, #4]
 801fb96:	f1b3 3fff 	cmp.w	r3, #4294967295
 801fb9a:	d101      	bne.n	801fba0 <pinmap_merge+0x20>
        return b;
 801fb9c:	9b00      	ldr	r3, [sp, #0]
 801fb9e:	e00a      	b.n	801fbb6 <pinmap_merge+0x36>
    if (b == (uint32_t)NC)
 801fba0:	9b00      	ldr	r3, [sp, #0]
 801fba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801fba6:	d101      	bne.n	801fbac <pinmap_merge+0x2c>
        return a;
 801fba8:	9b01      	ldr	r3, [sp, #4]
 801fbaa:	e004      	b.n	801fbb6 <pinmap_merge+0x36>

    // mis-match error case
    error("pinmap mis-match");
 801fbac:	4804      	ldr	r0, [pc, #16]	; (801fbc0 <pinmap_merge+0x40>)
 801fbae:	f7ff ff59 	bl	801fa64 <error>
    return (uint32_t)NC;
 801fbb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 801fbb6:	4618      	mov	r0, r3
 801fbb8:	b003      	add	sp, #12
 801fbba:	f85d fb04 	ldr.w	pc, [sp], #4
 801fbbe:	bf00      	nop
 801fbc0:	08026ffc 	.word	0x08026ffc

0801fbc4 <pinmap_find_peripheral>:

uint32_t pinmap_find_peripheral(PinName pin, const PinMap* map) {
 801fbc4:	b082      	sub	sp, #8
 801fbc6:	4603      	mov	r3, r0
 801fbc8:	9100      	str	r1, [sp, #0]
 801fbca:	f8ad 3006 	strh.w	r3, [sp, #6]
    while (map->pin != NC) {
 801fbce:	e00c      	b.n	801fbea <pinmap_find_peripheral+0x26>
        if (map->pin == pin)
 801fbd0:	9b00      	ldr	r3, [sp, #0]
 801fbd2:	881b      	ldrh	r3, [r3, #0]
 801fbd4:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801fbd8:	b21b      	sxth	r3, r3
 801fbda:	429a      	cmp	r2, r3
 801fbdc:	d102      	bne.n	801fbe4 <pinmap_find_peripheral+0x20>
            return map->peripheral;
 801fbde:	9b00      	ldr	r3, [sp, #0]
 801fbe0:	685b      	ldr	r3, [r3, #4]
 801fbe2:	e00a      	b.n	801fbfa <pinmap_find_peripheral+0x36>
        map++;
 801fbe4:	9b00      	ldr	r3, [sp, #0]
 801fbe6:	330c      	adds	r3, #12
 801fbe8:	9300      	str	r3, [sp, #0]
    error("pinmap mis-match");
    return (uint32_t)NC;
}

uint32_t pinmap_find_peripheral(PinName pin, const PinMap* map) {
    while (map->pin != NC) {
 801fbea:	9b00      	ldr	r3, [sp, #0]
 801fbec:	881b      	ldrh	r3, [r3, #0]
 801fbee:	b21b      	sxth	r3, r3
 801fbf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801fbf4:	d1ec      	bne.n	801fbd0 <pinmap_find_peripheral+0xc>
        if (map->pin == pin)
            return map->peripheral;
        map++;
    }
    return (uint32_t)NC;
 801fbf6:	f04f 33ff 	mov.w	r3, #4294967295
}
 801fbfa:	4618      	mov	r0, r3
 801fbfc:	b002      	add	sp, #8
 801fbfe:	4770      	bx	lr

0801fc00 <pinmap_peripheral>:

uint32_t pinmap_peripheral(PinName pin, const PinMap* map) {
 801fc00:	b500      	push	{lr}
 801fc02:	b085      	sub	sp, #20
 801fc04:	4603      	mov	r3, r0
 801fc06:	9100      	str	r1, [sp, #0]
 801fc08:	f8ad 3006 	strh.w	r3, [sp, #6]
    uint32_t peripheral = (uint32_t)NC;
 801fc0c:	f04f 33ff 	mov.w	r3, #4294967295
 801fc10:	9303      	str	r3, [sp, #12]

    if (pin == (PinName)NC)
 801fc12:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801fc16:	f1b3 3fff 	cmp.w	r3, #4294967295
 801fc1a:	d102      	bne.n	801fc22 <pinmap_peripheral+0x22>
        return (uint32_t)NC;
 801fc1c:	f04f 33ff 	mov.w	r3, #4294967295
 801fc20:	e00e      	b.n	801fc40 <pinmap_peripheral+0x40>
    peripheral = pinmap_find_peripheral(pin, map);
 801fc22:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801fc26:	4618      	mov	r0, r3
 801fc28:	9900      	ldr	r1, [sp, #0]
 801fc2a:	f7ff ffcb 	bl	801fbc4 <pinmap_find_peripheral>
 801fc2e:	9003      	str	r0, [sp, #12]
    if ((uint32_t)NC == peripheral) // no mapping available
 801fc30:	9b03      	ldr	r3, [sp, #12]
 801fc32:	f1b3 3fff 	cmp.w	r3, #4294967295
 801fc36:	d102      	bne.n	801fc3e <pinmap_peripheral+0x3e>
        error("pinmap not found for peripheral");
 801fc38:	4803      	ldr	r0, [pc, #12]	; (801fc48 <pinmap_peripheral+0x48>)
 801fc3a:	f7ff ff13 	bl	801fa64 <error>
    return peripheral;
 801fc3e:	9b03      	ldr	r3, [sp, #12]
}
 801fc40:	4618      	mov	r0, r3
 801fc42:	b005      	add	sp, #20
 801fc44:	f85d fb04 	ldr.w	pc, [sp], #4
 801fc48:	08027010 	.word	0x08027010

0801fc4c <ticker_set_handler>:
 */
#include <stddef.h>
#include "ticker_api.h"
#include "cmsis.h"

void ticker_set_handler(const ticker_data_t *const data, ticker_event_handler handler) {
 801fc4c:	b500      	push	{lr}
 801fc4e:	b083      	sub	sp, #12
 801fc50:	9001      	str	r0, [sp, #4]
 801fc52:	9100      	str	r1, [sp, #0]
    data->interface->init();
 801fc54:	9b01      	ldr	r3, [sp, #4]
 801fc56:	681b      	ldr	r3, [r3, #0]
 801fc58:	681b      	ldr	r3, [r3, #0]
 801fc5a:	4798      	blx	r3

    data->queue->event_handler = handler;
 801fc5c:	9b01      	ldr	r3, [sp, #4]
 801fc5e:	685b      	ldr	r3, [r3, #4]
 801fc60:	9a00      	ldr	r2, [sp, #0]
 801fc62:	601a      	str	r2, [r3, #0]
}
 801fc64:	b003      	add	sp, #12
 801fc66:	f85d fb04 	ldr.w	pc, [sp], #4
 801fc6a:	bf00      	nop

0801fc6c <ticker_irq_handler>:

void ticker_irq_handler(const ticker_data_t *const data) {
 801fc6c:	b510      	push	{r4, lr}
 801fc6e:	b084      	sub	sp, #16
 801fc70:	9001      	str	r0, [sp, #4]
    data->interface->clear_interrupt();
 801fc72:	9b01      	ldr	r3, [sp, #4]
 801fc74:	681b      	ldr	r3, [r3, #0]
 801fc76:	68db      	ldr	r3, [r3, #12]
 801fc78:	4798      	blx	r3

    /* Go through all the pending TimerEvents */
    while (1) {
        if (data->queue->head == NULL) {
 801fc7a:	9b01      	ldr	r3, [sp, #4]
 801fc7c:	685b      	ldr	r3, [r3, #4]
 801fc7e:	685b      	ldr	r3, [r3, #4]
 801fc80:	2b00      	cmp	r3, #0
 801fc82:	d104      	bne.n	801fc8e <ticker_irq_handler+0x22>
            // There are no more TimerEvents left, so disable matches.
            data->interface->disable_interrupt();
 801fc84:	9b01      	ldr	r3, [sp, #4]
 801fc86:	681b      	ldr	r3, [r3, #0]
 801fc88:	689b      	ldr	r3, [r3, #8]
 801fc8a:	4798      	blx	r3
            return;
 801fc8c:	e02f      	b.n	801fcee <ticker_irq_handler+0x82>
        }

        if ((int)(data->queue->head->timestamp - data->interface->read()) <= 0) {
 801fc8e:	9b01      	ldr	r3, [sp, #4]
 801fc90:	685b      	ldr	r3, [r3, #4]
 801fc92:	685b      	ldr	r3, [r3, #4]
 801fc94:	681c      	ldr	r4, [r3, #0]
 801fc96:	9b01      	ldr	r3, [sp, #4]
 801fc98:	681b      	ldr	r3, [r3, #0]
 801fc9a:	685b      	ldr	r3, [r3, #4]
 801fc9c:	4798      	blx	r3
 801fc9e:	4603      	mov	r3, r0
 801fca0:	1ae3      	subs	r3, r4, r3
 801fca2:	2b00      	cmp	r3, #0
 801fca4:	dc18      	bgt.n	801fcd8 <ticker_irq_handler+0x6c>
            // This event was in the past:
            //      point to the following one and execute its handler
            ticker_event_t *p = data->queue->head;
 801fca6:	9b01      	ldr	r3, [sp, #4]
 801fca8:	685b      	ldr	r3, [r3, #4]
 801fcaa:	685b      	ldr	r3, [r3, #4]
 801fcac:	9303      	str	r3, [sp, #12]
            data->queue->head = data->queue->head->next;
 801fcae:	9b01      	ldr	r3, [sp, #4]
 801fcb0:	685b      	ldr	r3, [r3, #4]
 801fcb2:	9a01      	ldr	r2, [sp, #4]
 801fcb4:	6852      	ldr	r2, [r2, #4]
 801fcb6:	6852      	ldr	r2, [r2, #4]
 801fcb8:	6892      	ldr	r2, [r2, #8]
 801fcba:	605a      	str	r2, [r3, #4]
            if (data->queue->event_handler != NULL) {
 801fcbc:	9b01      	ldr	r3, [sp, #4]
 801fcbe:	685b      	ldr	r3, [r3, #4]
 801fcc0:	681b      	ldr	r3, [r3, #0]
 801fcc2:	2b00      	cmp	r3, #0
 801fcc4:	d007      	beq.n	801fcd6 <ticker_irq_handler+0x6a>
                (*data->queue->event_handler)(p->id); // NOTE: the handler can set new events
 801fcc6:	9b01      	ldr	r3, [sp, #4]
 801fcc8:	685b      	ldr	r3, [r3, #4]
 801fcca:	681b      	ldr	r3, [r3, #0]
 801fccc:	9a03      	ldr	r2, [sp, #12]
 801fcce:	6852      	ldr	r2, [r2, #4]
 801fcd0:	4610      	mov	r0, r2
 801fcd2:	4798      	blx	r3
 801fcd4:	e00a      	b.n	801fcec <ticker_irq_handler+0x80>
 801fcd6:	e009      	b.n	801fcec <ticker_irq_handler+0x80>
            /* Note: We continue back to examining the head because calling the
             * event handler may have altered the chain of pending events. */
        } else {
            // This event and the following ones in the list are in the future:
            //      set it as next interrupt and return
            data->interface->set_interrupt(data->queue->head->timestamp);
 801fcd8:	9b01      	ldr	r3, [sp, #4]
 801fcda:	681b      	ldr	r3, [r3, #0]
 801fcdc:	691b      	ldr	r3, [r3, #16]
 801fcde:	9a01      	ldr	r2, [sp, #4]
 801fce0:	6852      	ldr	r2, [r2, #4]
 801fce2:	6852      	ldr	r2, [r2, #4]
 801fce4:	6812      	ldr	r2, [r2, #0]
 801fce6:	4610      	mov	r0, r2
 801fce8:	4798      	blx	r3
            return;
 801fcea:	e000      	b.n	801fcee <ticker_irq_handler+0x82>
        }
    }
 801fcec:	e7c5      	b.n	801fc7a <ticker_irq_handler+0xe>
}
 801fcee:	b004      	add	sp, #16
 801fcf0:	bd10      	pop	{r4, pc}
 801fcf2:	bf00      	nop

0801fcf4 <ticker_insert_event>:

void ticker_insert_event(const ticker_data_t *const data, ticker_event_t *obj, timestamp_t timestamp, uint32_t id) {
 801fcf4:	b500      	push	{lr}
 801fcf6:	b087      	sub	sp, #28
 801fcf8:	9003      	str	r0, [sp, #12]
 801fcfa:	9102      	str	r1, [sp, #8]
 801fcfc:	9201      	str	r2, [sp, #4]
 801fcfe:	9300      	str	r3, [sp, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 801fd00:	b672      	cpsid	i
    /* disable interrupts for the duration of the function */
    __disable_irq();

    // initialise our data
    obj->timestamp = timestamp;
 801fd02:	9b02      	ldr	r3, [sp, #8]
 801fd04:	9a01      	ldr	r2, [sp, #4]
 801fd06:	601a      	str	r2, [r3, #0]
    obj->id = id;
 801fd08:	9b02      	ldr	r3, [sp, #8]
 801fd0a:	9a00      	ldr	r2, [sp, #0]
 801fd0c:	605a      	str	r2, [r3, #4]

    /* Go through the list until we either reach the end, or find
       an element this should come before (which is possibly the
       head). */
    ticker_event_t *prev = NULL, *p = data->queue->head;
 801fd0e:	2300      	movs	r3, #0
 801fd10:	9305      	str	r3, [sp, #20]
 801fd12:	9b03      	ldr	r3, [sp, #12]
 801fd14:	685b      	ldr	r3, [r3, #4]
 801fd16:	685b      	ldr	r3, [r3, #4]
 801fd18:	9304      	str	r3, [sp, #16]
    while (p != NULL) {
 801fd1a:	e00b      	b.n	801fd34 <ticker_insert_event+0x40>
        /* check if we come before p */
        if ((int)(timestamp - p->timestamp) < 0) {
 801fd1c:	9b04      	ldr	r3, [sp, #16]
 801fd1e:	681b      	ldr	r3, [r3, #0]
 801fd20:	9a01      	ldr	r2, [sp, #4]
 801fd22:	1ad3      	subs	r3, r2, r3
 801fd24:	2b00      	cmp	r3, #0
 801fd26:	da00      	bge.n	801fd2a <ticker_insert_event+0x36>
            break;
 801fd28:	e007      	b.n	801fd3a <ticker_insert_event+0x46>
        }
        /* go to the next element */
        prev = p;
 801fd2a:	9b04      	ldr	r3, [sp, #16]
 801fd2c:	9305      	str	r3, [sp, #20]
        p = p->next;
 801fd2e:	9b04      	ldr	r3, [sp, #16]
 801fd30:	689b      	ldr	r3, [r3, #8]
 801fd32:	9304      	str	r3, [sp, #16]

    /* Go through the list until we either reach the end, or find
       an element this should come before (which is possibly the
       head). */
    ticker_event_t *prev = NULL, *p = data->queue->head;
    while (p != NULL) {
 801fd34:	9b04      	ldr	r3, [sp, #16]
 801fd36:	2b00      	cmp	r3, #0
 801fd38:	d1f0      	bne.n	801fd1c <ticker_insert_event+0x28>
        /* go to the next element */
        prev = p;
        p = p->next;
    }
    /* if prev is NULL we're at the head */
    if (prev == NULL) {
 801fd3a:	9b05      	ldr	r3, [sp, #20]
 801fd3c:	2b00      	cmp	r3, #0
 801fd3e:	d109      	bne.n	801fd54 <ticker_insert_event+0x60>
        data->queue->head = obj;
 801fd40:	9b03      	ldr	r3, [sp, #12]
 801fd42:	685b      	ldr	r3, [r3, #4]
 801fd44:	9a02      	ldr	r2, [sp, #8]
 801fd46:	605a      	str	r2, [r3, #4]
        data->interface->set_interrupt(timestamp);
 801fd48:	9b03      	ldr	r3, [sp, #12]
 801fd4a:	681b      	ldr	r3, [r3, #0]
 801fd4c:	691b      	ldr	r3, [r3, #16]
 801fd4e:	9801      	ldr	r0, [sp, #4]
 801fd50:	4798      	blx	r3
 801fd52:	e002      	b.n	801fd5a <ticker_insert_event+0x66>
    } else {
        prev->next = obj;
 801fd54:	9b05      	ldr	r3, [sp, #20]
 801fd56:	9a02      	ldr	r2, [sp, #8]
 801fd58:	609a      	str	r2, [r3, #8]
    }
    /* if we're at the end p will be NULL, which is correct */
    obj->next = p;
 801fd5a:	9b02      	ldr	r3, [sp, #8]
 801fd5c:	9a04      	ldr	r2, [sp, #16]
 801fd5e:	609a      	str	r2, [r3, #8]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 801fd60:	b662      	cpsie	i

    __enable_irq();
}
 801fd62:	b007      	add	sp, #28
 801fd64:	f85d fb04 	ldr.w	pc, [sp], #4

0801fd68 <ticker_remove_event>:

void ticker_remove_event(const ticker_data_t *const data, ticker_event_t *obj) {
 801fd68:	b500      	push	{lr}
 801fd6a:	b085      	sub	sp, #20
 801fd6c:	9001      	str	r0, [sp, #4]
 801fd6e:	9100      	str	r1, [sp, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 801fd70:	b672      	cpsid	i
    __disable_irq();

    // remove this object from the list
    if (data->queue->head == obj) {
 801fd72:	9b01      	ldr	r3, [sp, #4]
 801fd74:	685b      	ldr	r3, [r3, #4]
 801fd76:	685a      	ldr	r2, [r3, #4]
 801fd78:	9b00      	ldr	r3, [sp, #0]
 801fd7a:	429a      	cmp	r2, r3
 801fd7c:	d118      	bne.n	801fdb0 <ticker_remove_event+0x48>
        // first in the list, so just drop me
        data->queue->head = obj->next;
 801fd7e:	9b01      	ldr	r3, [sp, #4]
 801fd80:	685b      	ldr	r3, [r3, #4]
 801fd82:	9a00      	ldr	r2, [sp, #0]
 801fd84:	6892      	ldr	r2, [r2, #8]
 801fd86:	605a      	str	r2, [r3, #4]
        if (data->queue->head == NULL) {
 801fd88:	9b01      	ldr	r3, [sp, #4]
 801fd8a:	685b      	ldr	r3, [r3, #4]
 801fd8c:	685b      	ldr	r3, [r3, #4]
 801fd8e:	2b00      	cmp	r3, #0
 801fd90:	d104      	bne.n	801fd9c <ticker_remove_event+0x34>
            data->interface->disable_interrupt();
 801fd92:	9b01      	ldr	r3, [sp, #4]
 801fd94:	681b      	ldr	r3, [r3, #0]
 801fd96:	689b      	ldr	r3, [r3, #8]
 801fd98:	4798      	blx	r3
 801fd9a:	e01e      	b.n	801fdda <ticker_remove_event+0x72>
        } else {
            data->interface->set_interrupt(data->queue->head->timestamp);
 801fd9c:	9b01      	ldr	r3, [sp, #4]
 801fd9e:	681b      	ldr	r3, [r3, #0]
 801fda0:	691b      	ldr	r3, [r3, #16]
 801fda2:	9a01      	ldr	r2, [sp, #4]
 801fda4:	6852      	ldr	r2, [r2, #4]
 801fda6:	6852      	ldr	r2, [r2, #4]
 801fda8:	6812      	ldr	r2, [r2, #0]
 801fdaa:	4610      	mov	r0, r2
 801fdac:	4798      	blx	r3
 801fdae:	e014      	b.n	801fdda <ticker_remove_event+0x72>
        }
    } else {
        // find the object before me, then drop me
        ticker_event_t* p = data->queue->head;
 801fdb0:	9b01      	ldr	r3, [sp, #4]
 801fdb2:	685b      	ldr	r3, [r3, #4]
 801fdb4:	685b      	ldr	r3, [r3, #4]
 801fdb6:	9303      	str	r3, [sp, #12]
        while (p != NULL) {
 801fdb8:	e00c      	b.n	801fdd4 <ticker_remove_event+0x6c>
            if (p->next == obj) {
 801fdba:	9b03      	ldr	r3, [sp, #12]
 801fdbc:	689a      	ldr	r2, [r3, #8]
 801fdbe:	9b00      	ldr	r3, [sp, #0]
 801fdc0:	429a      	cmp	r2, r3
 801fdc2:	d104      	bne.n	801fdce <ticker_remove_event+0x66>
                p->next = obj->next;
 801fdc4:	9b00      	ldr	r3, [sp, #0]
 801fdc6:	689a      	ldr	r2, [r3, #8]
 801fdc8:	9b03      	ldr	r3, [sp, #12]
 801fdca:	609a      	str	r2, [r3, #8]
                break;
 801fdcc:	e005      	b.n	801fdda <ticker_remove_event+0x72>
            }
            p = p->next;
 801fdce:	9b03      	ldr	r3, [sp, #12]
 801fdd0:	689b      	ldr	r3, [r3, #8]
 801fdd2:	9303      	str	r3, [sp, #12]
            data->interface->set_interrupt(data->queue->head->timestamp);
        }
    } else {
        // find the object before me, then drop me
        ticker_event_t* p = data->queue->head;
        while (p != NULL) {
 801fdd4:	9b03      	ldr	r3, [sp, #12]
 801fdd6:	2b00      	cmp	r3, #0
 801fdd8:	d1ef      	bne.n	801fdba <ticker_remove_event+0x52>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 801fdda:	b662      	cpsie	i
            p = p->next;
        }
    }

    __enable_irq();
}
 801fddc:	b005      	add	sp, #20
 801fdde:	f85d fb04 	ldr.w	pc, [sp], #4
 801fde2:	bf00      	nop

0801fde4 <get_us_ticker_data>:
    .queue = &events,
};

const ticker_data_t* get_us_ticker_data(void)
{
    return &us_data;
 801fde4:	4b01      	ldr	r3, [pc, #4]	; (801fdec <get_us_ticker_data+0x8>)
}
 801fde6:	4618      	mov	r0, r3
 801fde8:	4770      	bx	lr
 801fdea:	bf00      	nop
 801fdec:	08027064 	.word	0x08027064

0801fdf0 <us_ticker_irq_handler>:

void us_ticker_irq_handler(void)
{
 801fdf0:	b508      	push	{r3, lr}
    ticker_irq_handler(&us_data);
 801fdf2:	4802      	ldr	r0, [pc, #8]	; (801fdfc <us_ticker_irq_handler+0xc>)
 801fdf4:	f7ff ff3a 	bl	801fc6c <ticker_irq_handler>
}
 801fdf8:	bd08      	pop	{r3, pc}
 801fdfa:	bf00      	nop
 801fdfc:	08027064 	.word	0x08027064

0801fe00 <wait_ms>:

void wait(float s) {
    wait_us(s * 1000000.0f);
}

void wait_ms(int ms) {
 801fe00:	b500      	push	{lr}
 801fe02:	b083      	sub	sp, #12
 801fe04:	9001      	str	r0, [sp, #4]
    wait_us(ms * 1000);
 801fe06:	9b01      	ldr	r3, [sp, #4]
 801fe08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801fe0c:	fb02 f303 	mul.w	r3, r2, r3
 801fe10:	4618      	mov	r0, r3
 801fe12:	f000 f803 	bl	801fe1c <wait_us>
}
 801fe16:	b003      	add	sp, #12
 801fe18:	f85d fb04 	ldr.w	pc, [sp], #4

0801fe1c <wait_us>:

void wait_us(int us) {
 801fe1c:	b500      	push	{lr}
 801fe1e:	b085      	sub	sp, #20
 801fe20:	9001      	str	r0, [sp, #4]
    uint32_t start = us_ticker_read();
 801fe22:	f7ff fddd 	bl	801f9e0 <us_ticker_read>
 801fe26:	9003      	str	r0, [sp, #12]
    while ((us_ticker_read() - start) < (uint32_t)us);
 801fe28:	bf00      	nop
 801fe2a:	f7ff fdd9 	bl	801f9e0 <us_ticker_read>
 801fe2e:	4602      	mov	r2, r0
 801fe30:	9b03      	ldr	r3, [sp, #12]
 801fe32:	1ad2      	subs	r2, r2, r3
 801fe34:	9b01      	ldr	r3, [sp, #4]
 801fe36:	429a      	cmp	r2, r3
 801fe38:	d3f7      	bcc.n	801fe2a <wait_us+0xe>
}
 801fe3a:	b005      	add	sp, #20
 801fe3c:	f85d fb04 	ldr.w	pc, [sp], #4

0801fe40 <abort>:
 801fe40:	b508      	push	{r3, lr}
 801fe42:	2006      	movs	r0, #6
 801fe44:	f001 fb14 	bl	8021470 <raise>
 801fe48:	2001      	movs	r0, #1
 801fe4a:	f7fd fe05 	bl	801da58 <_exit>

0801fe4e <__aeabi_memclr>:
 801fe4e:	2200      	movs	r2, #0
 801fe50:	f000 b81f 	b.w	801fe92 <__aeabi_memset>

0801fe54 <__aeabi_memcpy>:
 801fe54:	f000 ba5b 	b.w	802030e <memcpy>

0801fe58 <__aeabi_memmove>:
 801fe58:	4288      	cmp	r0, r1
 801fe5a:	b410      	push	{r4}
 801fe5c:	d90d      	bls.n	801fe7a <__aeabi_memmove+0x22>
 801fe5e:	188b      	adds	r3, r1, r2
 801fe60:	4298      	cmp	r0, r3
 801fe62:	d20a      	bcs.n	801fe7a <__aeabi_memmove+0x22>
 801fe64:	1881      	adds	r1, r0, r2
 801fe66:	b132      	cbz	r2, 801fe76 <__aeabi_memmove+0x1e>
 801fe68:	1a9a      	subs	r2, r3, r2
 801fe6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801fe6e:	429a      	cmp	r2, r3
 801fe70:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801fe74:	d1f9      	bne.n	801fe6a <__aeabi_memmove+0x12>
 801fe76:	bc10      	pop	{r4}
 801fe78:	4770      	bx	lr
 801fe7a:	2a00      	cmp	r2, #0
 801fe7c:	d0fb      	beq.n	801fe76 <__aeabi_memmove+0x1e>
 801fe7e:	440a      	add	r2, r1
 801fe80:	1e43      	subs	r3, r0, #1
 801fe82:	f811 4b01 	ldrb.w	r4, [r1], #1
 801fe86:	428a      	cmp	r2, r1
 801fe88:	f803 4f01 	strb.w	r4, [r3, #1]!
 801fe8c:	d1f9      	bne.n	801fe82 <__aeabi_memmove+0x2a>
 801fe8e:	bc10      	pop	{r4}
 801fe90:	4770      	bx	lr

0801fe92 <__aeabi_memset>:
 801fe92:	b470      	push	{r4, r5, r6}
 801fe94:	0784      	lsls	r4, r0, #30
 801fe96:	d046      	beq.n	801ff26 <__aeabi_memset+0x94>
 801fe98:	1e4c      	subs	r4, r1, #1
 801fe9a:	2900      	cmp	r1, #0
 801fe9c:	d041      	beq.n	801ff22 <__aeabi_memset+0x90>
 801fe9e:	b2d5      	uxtb	r5, r2
 801fea0:	4603      	mov	r3, r0
 801fea2:	e002      	b.n	801feaa <__aeabi_memset+0x18>
 801fea4:	1e61      	subs	r1, r4, #1
 801fea6:	b3e4      	cbz	r4, 801ff22 <__aeabi_memset+0x90>
 801fea8:	460c      	mov	r4, r1
 801feaa:	f803 5b01 	strb.w	r5, [r3], #1
 801feae:	0799      	lsls	r1, r3, #30
 801feb0:	d1f8      	bne.n	801fea4 <__aeabi_memset+0x12>
 801feb2:	2c03      	cmp	r4, #3
 801feb4:	d92e      	bls.n	801ff14 <__aeabi_memset+0x82>
 801feb6:	b2d5      	uxtb	r5, r2
 801feb8:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 801febc:	2c0f      	cmp	r4, #15
 801febe:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 801fec2:	d919      	bls.n	801fef8 <__aeabi_memset+0x66>
 801fec4:	4626      	mov	r6, r4
 801fec6:	f103 0110 	add.w	r1, r3, #16
 801feca:	3e10      	subs	r6, #16
 801fecc:	2e0f      	cmp	r6, #15
 801fece:	f841 5c10 	str.w	r5, [r1, #-16]
 801fed2:	f841 5c0c 	str.w	r5, [r1, #-12]
 801fed6:	f841 5c08 	str.w	r5, [r1, #-8]
 801feda:	f841 5c04 	str.w	r5, [r1, #-4]
 801fede:	f101 0110 	add.w	r1, r1, #16
 801fee2:	d8f2      	bhi.n	801feca <__aeabi_memset+0x38>
 801fee4:	f1a4 0110 	sub.w	r1, r4, #16
 801fee8:	f021 010f 	bic.w	r1, r1, #15
 801feec:	f004 040f 	and.w	r4, r4, #15
 801fef0:	3110      	adds	r1, #16
 801fef2:	2c03      	cmp	r4, #3
 801fef4:	440b      	add	r3, r1
 801fef6:	d90d      	bls.n	801ff14 <__aeabi_memset+0x82>
 801fef8:	461e      	mov	r6, r3
 801fefa:	4621      	mov	r1, r4
 801fefc:	3904      	subs	r1, #4
 801fefe:	2903      	cmp	r1, #3
 801ff00:	f846 5b04 	str.w	r5, [r6], #4
 801ff04:	d8fa      	bhi.n	801fefc <__aeabi_memset+0x6a>
 801ff06:	1f21      	subs	r1, r4, #4
 801ff08:	f021 0103 	bic.w	r1, r1, #3
 801ff0c:	3104      	adds	r1, #4
 801ff0e:	440b      	add	r3, r1
 801ff10:	f004 0403 	and.w	r4, r4, #3
 801ff14:	b12c      	cbz	r4, 801ff22 <__aeabi_memset+0x90>
 801ff16:	b2d2      	uxtb	r2, r2
 801ff18:	441c      	add	r4, r3
 801ff1a:	f803 2b01 	strb.w	r2, [r3], #1
 801ff1e:	42a3      	cmp	r3, r4
 801ff20:	d1fb      	bne.n	801ff1a <__aeabi_memset+0x88>
 801ff22:	bc70      	pop	{r4, r5, r6}
 801ff24:	4770      	bx	lr
 801ff26:	460c      	mov	r4, r1
 801ff28:	4603      	mov	r3, r0
 801ff2a:	e7c2      	b.n	801feb2 <__aeabi_memset+0x20>

0801ff2c <calloc>:
 801ff2c:	460a      	mov	r2, r1
 801ff2e:	4903      	ldr	r1, [pc, #12]	; (801ff3c <calloc+0x10>)
 801ff30:	4603      	mov	r3, r0
 801ff32:	6808      	ldr	r0, [r1, #0]
 801ff34:	4619      	mov	r1, r3
 801ff36:	f000 b9fd 	b.w	8020334 <_calloc_r>
 801ff3a:	bf00      	nop
 801ff3c:	20001788 	.word	0x20001788

0801ff40 <__errno>:
 801ff40:	4b01      	ldr	r3, [pc, #4]	; (801ff48 <__errno+0x8>)
 801ff42:	6818      	ldr	r0, [r3, #0]
 801ff44:	4770      	bx	lr
 801ff46:	bf00      	nop
 801ff48:	20001788 	.word	0x20001788

0801ff4c <exit>:
 801ff4c:	b508      	push	{r3, lr}
 801ff4e:	4b07      	ldr	r3, [pc, #28]	; (801ff6c <exit+0x20>)
 801ff50:	4604      	mov	r4, r0
 801ff52:	b113      	cbz	r3, 801ff5a <exit+0xe>
 801ff54:	2100      	movs	r1, #0
 801ff56:	f3af 8000 	nop.w
 801ff5a:	4b05      	ldr	r3, [pc, #20]	; (801ff70 <exit+0x24>)
 801ff5c:	6818      	ldr	r0, [r3, #0]
 801ff5e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801ff60:	b103      	cbz	r3, 801ff64 <exit+0x18>
 801ff62:	4798      	blx	r3
 801ff64:	4620      	mov	r0, r4
 801ff66:	f7fd fd77 	bl	801da58 <_exit>
 801ff6a:	bf00      	nop
 801ff6c:	00000000 	.word	0x00000000
 801ff70:	08027208 	.word	0x08027208

0801ff74 <__sflush_r>:
 801ff74:	898a      	ldrh	r2, [r1, #12]
 801ff76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ff7a:	4605      	mov	r5, r0
 801ff7c:	0710      	lsls	r0, r2, #28
 801ff7e:	460c      	mov	r4, r1
 801ff80:	d457      	bmi.n	8020032 <__sflush_r+0xbe>
 801ff82:	684b      	ldr	r3, [r1, #4]
 801ff84:	2b00      	cmp	r3, #0
 801ff86:	dc02      	bgt.n	801ff8e <__sflush_r+0x1a>
 801ff88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ff8a:	2b00      	cmp	r3, #0
 801ff8c:	dd18      	ble.n	801ffc0 <__sflush_r+0x4c>
 801ff8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ff90:	b1b6      	cbz	r6, 801ffc0 <__sflush_r+0x4c>
 801ff92:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 801ff96:	2300      	movs	r3, #0
 801ff98:	b292      	uxth	r2, r2
 801ff9a:	682f      	ldr	r7, [r5, #0]
 801ff9c:	602b      	str	r3, [r5, #0]
 801ff9e:	b10a      	cbz	r2, 801ffa4 <__sflush_r+0x30>
 801ffa0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 801ffa2:	e010      	b.n	801ffc6 <__sflush_r+0x52>
 801ffa4:	6a21      	ldr	r1, [r4, #32]
 801ffa6:	4628      	mov	r0, r5
 801ffa8:	2301      	movs	r3, #1
 801ffaa:	47b0      	blx	r6
 801ffac:	1c41      	adds	r1, r0, #1
 801ffae:	4602      	mov	r2, r0
 801ffb0:	d109      	bne.n	801ffc6 <__sflush_r+0x52>
 801ffb2:	682b      	ldr	r3, [r5, #0]
 801ffb4:	b13b      	cbz	r3, 801ffc6 <__sflush_r+0x52>
 801ffb6:	2b1d      	cmp	r3, #29
 801ffb8:	d001      	beq.n	801ffbe <__sflush_r+0x4a>
 801ffba:	2b16      	cmp	r3, #22
 801ffbc:	d147      	bne.n	802004e <__sflush_r+0xda>
 801ffbe:	602f      	str	r7, [r5, #0]
 801ffc0:	2000      	movs	r0, #0
 801ffc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ffc6:	89a3      	ldrh	r3, [r4, #12]
 801ffc8:	075b      	lsls	r3, r3, #29
 801ffca:	d505      	bpl.n	801ffd8 <__sflush_r+0x64>
 801ffcc:	6863      	ldr	r3, [r4, #4]
 801ffce:	1ad2      	subs	r2, r2, r3
 801ffd0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ffd2:	b10b      	cbz	r3, 801ffd8 <__sflush_r+0x64>
 801ffd4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ffd6:	1ad2      	subs	r2, r2, r3
 801ffd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ffda:	6a21      	ldr	r1, [r4, #32]
 801ffdc:	2300      	movs	r3, #0
 801ffde:	4628      	mov	r0, r5
 801ffe0:	47b0      	blx	r6
 801ffe2:	1c46      	adds	r6, r0, #1
 801ffe4:	89a3      	ldrh	r3, [r4, #12]
 801ffe6:	d105      	bne.n	801fff4 <__sflush_r+0x80>
 801ffe8:	682a      	ldr	r2, [r5, #0]
 801ffea:	b11a      	cbz	r2, 801fff4 <__sflush_r+0x80>
 801ffec:	2a1d      	cmp	r2, #29
 801ffee:	d001      	beq.n	801fff4 <__sflush_r+0x80>
 801fff0:	2a16      	cmp	r2, #22
 801fff2:	d119      	bne.n	8020028 <__sflush_r+0xb4>
 801fff4:	2200      	movs	r2, #0
 801fff6:	6062      	str	r2, [r4, #4]
 801fff8:	04d9      	lsls	r1, r3, #19
 801fffa:	6922      	ldr	r2, [r4, #16]
 801fffc:	6022      	str	r2, [r4, #0]
 801fffe:	d504      	bpl.n	802000a <__sflush_r+0x96>
 8020000:	1c42      	adds	r2, r0, #1
 8020002:	d101      	bne.n	8020008 <__sflush_r+0x94>
 8020004:	682b      	ldr	r3, [r5, #0]
 8020006:	b903      	cbnz	r3, 802000a <__sflush_r+0x96>
 8020008:	6560      	str	r0, [r4, #84]	; 0x54
 802000a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802000c:	602f      	str	r7, [r5, #0]
 802000e:	2900      	cmp	r1, #0
 8020010:	d0d6      	beq.n	801ffc0 <__sflush_r+0x4c>
 8020012:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020016:	4299      	cmp	r1, r3
 8020018:	d002      	beq.n	8020020 <__sflush_r+0xac>
 802001a:	4628      	mov	r0, r5
 802001c:	f000 f998 	bl	8020350 <_free_r>
 8020020:	2000      	movs	r0, #0
 8020022:	6360      	str	r0, [r4, #52]	; 0x34
 8020024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802002c:	81a3      	strh	r3, [r4, #12]
 802002e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020032:	690f      	ldr	r7, [r1, #16]
 8020034:	2f00      	cmp	r7, #0
 8020036:	d0c3      	beq.n	801ffc0 <__sflush_r+0x4c>
 8020038:	0793      	lsls	r3, r2, #30
 802003a:	680e      	ldr	r6, [r1, #0]
 802003c:	bf08      	it	eq
 802003e:	694b      	ldreq	r3, [r1, #20]
 8020040:	600f      	str	r7, [r1, #0]
 8020042:	bf18      	it	ne
 8020044:	2300      	movne	r3, #0
 8020046:	ebc7 0806 	rsb	r8, r7, r6
 802004a:	608b      	str	r3, [r1, #8]
 802004c:	e012      	b.n	8020074 <__sflush_r+0x100>
 802004e:	89a3      	ldrh	r3, [r4, #12]
 8020050:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020054:	81a3      	strh	r3, [r4, #12]
 8020056:	f04f 30ff 	mov.w	r0, #4294967295
 802005a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802005e:	4628      	mov	r0, r5
 8020060:	6a21      	ldr	r1, [r4, #32]
 8020062:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8020064:	463a      	mov	r2, r7
 8020066:	4643      	mov	r3, r8
 8020068:	47b0      	blx	r6
 802006a:	2800      	cmp	r0, #0
 802006c:	ddef      	ble.n	802004e <__sflush_r+0xda>
 802006e:	4407      	add	r7, r0
 8020070:	ebc0 0808 	rsb	r8, r0, r8
 8020074:	f1b8 0f00 	cmp.w	r8, #0
 8020078:	dcf1      	bgt.n	802005e <__sflush_r+0xea>
 802007a:	e7a1      	b.n	801ffc0 <__sflush_r+0x4c>

0802007c <_fflush_r>:
 802007c:	b538      	push	{r3, r4, r5, lr}
 802007e:	690b      	ldr	r3, [r1, #16]
 8020080:	4605      	mov	r5, r0
 8020082:	460c      	mov	r4, r1
 8020084:	b1db      	cbz	r3, 80200be <_fflush_r+0x42>
 8020086:	b118      	cbz	r0, 8020090 <_fflush_r+0x14>
 8020088:	6983      	ldr	r3, [r0, #24]
 802008a:	b90b      	cbnz	r3, 8020090 <_fflush_r+0x14>
 802008c:	f000 f872 	bl	8020174 <__sinit>
 8020090:	4b0c      	ldr	r3, [pc, #48]	; (80200c4 <_fflush_r+0x48>)
 8020092:	429c      	cmp	r4, r3
 8020094:	d101      	bne.n	802009a <_fflush_r+0x1e>
 8020096:	686c      	ldr	r4, [r5, #4]
 8020098:	e008      	b.n	80200ac <_fflush_r+0x30>
 802009a:	4b0b      	ldr	r3, [pc, #44]	; (80200c8 <_fflush_r+0x4c>)
 802009c:	429c      	cmp	r4, r3
 802009e:	d101      	bne.n	80200a4 <_fflush_r+0x28>
 80200a0:	68ac      	ldr	r4, [r5, #8]
 80200a2:	e003      	b.n	80200ac <_fflush_r+0x30>
 80200a4:	4b09      	ldr	r3, [pc, #36]	; (80200cc <_fflush_r+0x50>)
 80200a6:	429c      	cmp	r4, r3
 80200a8:	bf08      	it	eq
 80200aa:	68ec      	ldreq	r4, [r5, #12]
 80200ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80200b0:	b12b      	cbz	r3, 80200be <_fflush_r+0x42>
 80200b2:	4628      	mov	r0, r5
 80200b4:	4621      	mov	r1, r4
 80200b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80200ba:	f7ff bf5b 	b.w	801ff74 <__sflush_r>
 80200be:	2000      	movs	r0, #0
 80200c0:	bd38      	pop	{r3, r4, r5, pc}
 80200c2:	bf00      	nop
 80200c4:	080271a4 	.word	0x080271a4
 80200c8:	080271c4 	.word	0x080271c4
 80200cc:	080271e4 	.word	0x080271e4

080200d0 <fflush>:
 80200d0:	4601      	mov	r1, r0
 80200d2:	b920      	cbnz	r0, 80200de <fflush+0xe>
 80200d4:	4b04      	ldr	r3, [pc, #16]	; (80200e8 <fflush+0x18>)
 80200d6:	4905      	ldr	r1, [pc, #20]	; (80200ec <fflush+0x1c>)
 80200d8:	6818      	ldr	r0, [r3, #0]
 80200da:	f000 b8b5 	b.w	8020248 <_fwalk_reent>
 80200de:	4b04      	ldr	r3, [pc, #16]	; (80200f0 <fflush+0x20>)
 80200e0:	6818      	ldr	r0, [r3, #0]
 80200e2:	f7ff bfcb 	b.w	802007c <_fflush_r>
 80200e6:	bf00      	nop
 80200e8:	08027208 	.word	0x08027208
 80200ec:	0802007d 	.word	0x0802007d
 80200f0:	20001788 	.word	0x20001788

080200f4 <_cleanup_r>:
 80200f4:	4901      	ldr	r1, [pc, #4]	; (80200fc <_cleanup_r+0x8>)
 80200f6:	f000 b8a7 	b.w	8020248 <_fwalk_reent>
 80200fa:	bf00      	nop
 80200fc:	0802007d 	.word	0x0802007d

08020100 <std.isra.0>:
 8020100:	2300      	movs	r3, #0
 8020102:	b510      	push	{r4, lr}
 8020104:	4604      	mov	r4, r0
 8020106:	6003      	str	r3, [r0, #0]
 8020108:	6043      	str	r3, [r0, #4]
 802010a:	6083      	str	r3, [r0, #8]
 802010c:	8181      	strh	r1, [r0, #12]
 802010e:	6643      	str	r3, [r0, #100]	; 0x64
 8020110:	81c2      	strh	r2, [r0, #14]
 8020112:	6103      	str	r3, [r0, #16]
 8020114:	6143      	str	r3, [r0, #20]
 8020116:	6183      	str	r3, [r0, #24]
 8020118:	4619      	mov	r1, r3
 802011a:	305c      	adds	r0, #92	; 0x5c
 802011c:	2208      	movs	r2, #8
 802011e:	f000 f901 	bl	8020324 <memset>
 8020122:	4b05      	ldr	r3, [pc, #20]	; (8020138 <std.isra.0+0x38>)
 8020124:	6263      	str	r3, [r4, #36]	; 0x24
 8020126:	4b05      	ldr	r3, [pc, #20]	; (802013c <std.isra.0+0x3c>)
 8020128:	62a3      	str	r3, [r4, #40]	; 0x28
 802012a:	4b05      	ldr	r3, [pc, #20]	; (8020140 <std.isra.0+0x40>)
 802012c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802012e:	4b05      	ldr	r3, [pc, #20]	; (8020144 <std.isra.0+0x44>)
 8020130:	6224      	str	r4, [r4, #32]
 8020132:	6323      	str	r3, [r4, #48]	; 0x30
 8020134:	bd10      	pop	{r4, pc}
 8020136:	bf00      	nop
 8020138:	08021555 	.word	0x08021555
 802013c:	08021577 	.word	0x08021577
 8020140:	080215af 	.word	0x080215af
 8020144:	080215d3 	.word	0x080215d3

08020148 <__sfmoreglue>:
 8020148:	b570      	push	{r4, r5, r6, lr}
 802014a:	2368      	movs	r3, #104	; 0x68
 802014c:	1e4d      	subs	r5, r1, #1
 802014e:	435d      	muls	r5, r3
 8020150:	460e      	mov	r6, r1
 8020152:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8020156:	f000 f93f 	bl	80203d8 <_malloc_r>
 802015a:	4604      	mov	r4, r0
 802015c:	b140      	cbz	r0, 8020170 <__sfmoreglue+0x28>
 802015e:	2100      	movs	r1, #0
 8020160:	e880 0042 	stmia.w	r0, {r1, r6}
 8020164:	300c      	adds	r0, #12
 8020166:	60a0      	str	r0, [r4, #8]
 8020168:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802016c:	f000 f8da 	bl	8020324 <memset>
 8020170:	4620      	mov	r0, r4
 8020172:	bd70      	pop	{r4, r5, r6, pc}

08020174 <__sinit>:
 8020174:	6983      	ldr	r3, [r0, #24]
 8020176:	b510      	push	{r4, lr}
 8020178:	4604      	mov	r4, r0
 802017a:	bb33      	cbnz	r3, 80201ca <__sinit+0x56>
 802017c:	6483      	str	r3, [r0, #72]	; 0x48
 802017e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8020180:	6503      	str	r3, [r0, #80]	; 0x50
 8020182:	4b12      	ldr	r3, [pc, #72]	; (80201cc <__sinit+0x58>)
 8020184:	4a12      	ldr	r2, [pc, #72]	; (80201d0 <__sinit+0x5c>)
 8020186:	681b      	ldr	r3, [r3, #0]
 8020188:	6282      	str	r2, [r0, #40]	; 0x28
 802018a:	4298      	cmp	r0, r3
 802018c:	bf04      	itt	eq
 802018e:	2301      	moveq	r3, #1
 8020190:	6183      	streq	r3, [r0, #24]
 8020192:	f000 f81f 	bl	80201d4 <__sfp>
 8020196:	6060      	str	r0, [r4, #4]
 8020198:	4620      	mov	r0, r4
 802019a:	f000 f81b 	bl	80201d4 <__sfp>
 802019e:	60a0      	str	r0, [r4, #8]
 80201a0:	4620      	mov	r0, r4
 80201a2:	f000 f817 	bl	80201d4 <__sfp>
 80201a6:	2104      	movs	r1, #4
 80201a8:	60e0      	str	r0, [r4, #12]
 80201aa:	2200      	movs	r2, #0
 80201ac:	6860      	ldr	r0, [r4, #4]
 80201ae:	f7ff ffa7 	bl	8020100 <std.isra.0>
 80201b2:	68a0      	ldr	r0, [r4, #8]
 80201b4:	2109      	movs	r1, #9
 80201b6:	2201      	movs	r2, #1
 80201b8:	f7ff ffa2 	bl	8020100 <std.isra.0>
 80201bc:	68e0      	ldr	r0, [r4, #12]
 80201be:	2112      	movs	r1, #18
 80201c0:	2202      	movs	r2, #2
 80201c2:	f7ff ff9d 	bl	8020100 <std.isra.0>
 80201c6:	2301      	movs	r3, #1
 80201c8:	61a3      	str	r3, [r4, #24]
 80201ca:	bd10      	pop	{r4, pc}
 80201cc:	08027208 	.word	0x08027208
 80201d0:	080200f5 	.word	0x080200f5

080201d4 <__sfp>:
 80201d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80201d6:	4b1b      	ldr	r3, [pc, #108]	; (8020244 <__sfp+0x70>)
 80201d8:	681e      	ldr	r6, [r3, #0]
 80201da:	69b3      	ldr	r3, [r6, #24]
 80201dc:	4607      	mov	r7, r0
 80201de:	b913      	cbnz	r3, 80201e6 <__sfp+0x12>
 80201e0:	4630      	mov	r0, r6
 80201e2:	f7ff ffc7 	bl	8020174 <__sinit>
 80201e6:	3648      	adds	r6, #72	; 0x48
 80201e8:	68b4      	ldr	r4, [r6, #8]
 80201ea:	6873      	ldr	r3, [r6, #4]
 80201ec:	3b01      	subs	r3, #1
 80201ee:	d404      	bmi.n	80201fa <__sfp+0x26>
 80201f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80201f4:	b175      	cbz	r5, 8020214 <__sfp+0x40>
 80201f6:	3468      	adds	r4, #104	; 0x68
 80201f8:	e7f8      	b.n	80201ec <__sfp+0x18>
 80201fa:	6833      	ldr	r3, [r6, #0]
 80201fc:	b92b      	cbnz	r3, 802020a <__sfp+0x36>
 80201fe:	4638      	mov	r0, r7
 8020200:	2104      	movs	r1, #4
 8020202:	f7ff ffa1 	bl	8020148 <__sfmoreglue>
 8020206:	6030      	str	r0, [r6, #0]
 8020208:	b108      	cbz	r0, 802020e <__sfp+0x3a>
 802020a:	6836      	ldr	r6, [r6, #0]
 802020c:	e7ec      	b.n	80201e8 <__sfp+0x14>
 802020e:	230c      	movs	r3, #12
 8020210:	603b      	str	r3, [r7, #0]
 8020212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020214:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020218:	81e3      	strh	r3, [r4, #14]
 802021a:	2301      	movs	r3, #1
 802021c:	81a3      	strh	r3, [r4, #12]
 802021e:	6665      	str	r5, [r4, #100]	; 0x64
 8020220:	6025      	str	r5, [r4, #0]
 8020222:	60a5      	str	r5, [r4, #8]
 8020224:	6065      	str	r5, [r4, #4]
 8020226:	6125      	str	r5, [r4, #16]
 8020228:	6165      	str	r5, [r4, #20]
 802022a:	61a5      	str	r5, [r4, #24]
 802022c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8020230:	4629      	mov	r1, r5
 8020232:	2208      	movs	r2, #8
 8020234:	f000 f876 	bl	8020324 <memset>
 8020238:	6365      	str	r5, [r4, #52]	; 0x34
 802023a:	63a5      	str	r5, [r4, #56]	; 0x38
 802023c:	64a5      	str	r5, [r4, #72]	; 0x48
 802023e:	64e5      	str	r5, [r4, #76]	; 0x4c
 8020240:	4620      	mov	r0, r4
 8020242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020244:	08027208 	.word	0x08027208

08020248 <_fwalk_reent>:
 8020248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802024c:	4680      	mov	r8, r0
 802024e:	4689      	mov	r9, r1
 8020250:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8020254:	2600      	movs	r6, #0
 8020256:	b194      	cbz	r4, 802027e <_fwalk_reent+0x36>
 8020258:	68a5      	ldr	r5, [r4, #8]
 802025a:	6867      	ldr	r7, [r4, #4]
 802025c:	3f01      	subs	r7, #1
 802025e:	d40c      	bmi.n	802027a <_fwalk_reent+0x32>
 8020260:	89ab      	ldrh	r3, [r5, #12]
 8020262:	2b01      	cmp	r3, #1
 8020264:	d907      	bls.n	8020276 <_fwalk_reent+0x2e>
 8020266:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802026a:	3301      	adds	r3, #1
 802026c:	d003      	beq.n	8020276 <_fwalk_reent+0x2e>
 802026e:	4640      	mov	r0, r8
 8020270:	4629      	mov	r1, r5
 8020272:	47c8      	blx	r9
 8020274:	4306      	orrs	r6, r0
 8020276:	3568      	adds	r5, #104	; 0x68
 8020278:	e7f0      	b.n	802025c <_fwalk_reent+0x14>
 802027a:	6824      	ldr	r4, [r4, #0]
 802027c:	e7eb      	b.n	8020256 <_fwalk_reent+0xe>
 802027e:	4630      	mov	r0, r6
 8020280:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08020284 <__libc_init_array>:
 8020284:	b570      	push	{r4, r5, r6, lr}
 8020286:	4b0e      	ldr	r3, [pc, #56]	; (80202c0 <__libc_init_array+0x3c>)
 8020288:	4c0e      	ldr	r4, [pc, #56]	; (80202c4 <__libc_init_array+0x40>)
 802028a:	1ae4      	subs	r4, r4, r3
 802028c:	10a4      	asrs	r4, r4, #2
 802028e:	2500      	movs	r5, #0
 8020290:	461e      	mov	r6, r3
 8020292:	42a5      	cmp	r5, r4
 8020294:	d004      	beq.n	80202a0 <__libc_init_array+0x1c>
 8020296:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802029a:	4798      	blx	r3
 802029c:	3501      	adds	r5, #1
 802029e:	e7f8      	b.n	8020292 <__libc_init_array+0xe>
 80202a0:	f006 fb82 	bl	80269a8 <_init>
 80202a4:	4c08      	ldr	r4, [pc, #32]	; (80202c8 <__libc_init_array+0x44>)
 80202a6:	4b09      	ldr	r3, [pc, #36]	; (80202cc <__libc_init_array+0x48>)
 80202a8:	1ae4      	subs	r4, r4, r3
 80202aa:	10a4      	asrs	r4, r4, #2
 80202ac:	2500      	movs	r5, #0
 80202ae:	461e      	mov	r6, r3
 80202b0:	42a5      	cmp	r5, r4
 80202b2:	d004      	beq.n	80202be <__libc_init_array+0x3a>
 80202b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80202b8:	4798      	blx	r3
 80202ba:	3501      	adds	r5, #1
 80202bc:	e7f8      	b.n	80202b0 <__libc_init_array+0x2c>
 80202be:	bd70      	pop	{r4, r5, r6, pc}
 80202c0:	200017c8 	.word	0x200017c8
 80202c4:	200017c8 	.word	0x200017c8
 80202c8:	200017cc 	.word	0x200017cc
 80202cc:	200017c8 	.word	0x200017c8

080202d0 <malloc>:
 80202d0:	4b02      	ldr	r3, [pc, #8]	; (80202dc <malloc+0xc>)
 80202d2:	4601      	mov	r1, r0
 80202d4:	6818      	ldr	r0, [r3, #0]
 80202d6:	f000 b87f 	b.w	80203d8 <_malloc_r>
 80202da:	bf00      	nop
 80202dc:	20001788 	.word	0x20001788

080202e0 <free>:
 80202e0:	4b02      	ldr	r3, [pc, #8]	; (80202ec <free+0xc>)
 80202e2:	4601      	mov	r1, r0
 80202e4:	6818      	ldr	r0, [r3, #0]
 80202e6:	f000 b833 	b.w	8020350 <_free_r>
 80202ea:	bf00      	nop
 80202ec:	20001788 	.word	0x20001788

080202f0 <memchr>:
 80202f0:	b510      	push	{r4, lr}
 80202f2:	b2c9      	uxtb	r1, r1
 80202f4:	4402      	add	r2, r0
 80202f6:	4290      	cmp	r0, r2
 80202f8:	4603      	mov	r3, r0
 80202fa:	d006      	beq.n	802030a <memchr+0x1a>
 80202fc:	781c      	ldrb	r4, [r3, #0]
 80202fe:	428c      	cmp	r4, r1
 8020300:	f100 0001 	add.w	r0, r0, #1
 8020304:	d1f7      	bne.n	80202f6 <memchr+0x6>
 8020306:	4618      	mov	r0, r3
 8020308:	bd10      	pop	{r4, pc}
 802030a:	2000      	movs	r0, #0
 802030c:	bd10      	pop	{r4, pc}

0802030e <memcpy>:
 802030e:	b510      	push	{r4, lr}
 8020310:	1e43      	subs	r3, r0, #1
 8020312:	440a      	add	r2, r1
 8020314:	4291      	cmp	r1, r2
 8020316:	d004      	beq.n	8020322 <memcpy+0x14>
 8020318:	f811 4b01 	ldrb.w	r4, [r1], #1
 802031c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020320:	e7f8      	b.n	8020314 <memcpy+0x6>
 8020322:	bd10      	pop	{r4, pc}

08020324 <memset>:
 8020324:	4402      	add	r2, r0
 8020326:	4603      	mov	r3, r0
 8020328:	4293      	cmp	r3, r2
 802032a:	d002      	beq.n	8020332 <memset+0xe>
 802032c:	f803 1b01 	strb.w	r1, [r3], #1
 8020330:	e7fa      	b.n	8020328 <memset+0x4>
 8020332:	4770      	bx	lr

08020334 <_calloc_r>:
 8020334:	b538      	push	{r3, r4, r5, lr}
 8020336:	fb02 f401 	mul.w	r4, r2, r1
 802033a:	4621      	mov	r1, r4
 802033c:	f000 f84c 	bl	80203d8 <_malloc_r>
 8020340:	4605      	mov	r5, r0
 8020342:	b118      	cbz	r0, 802034c <_calloc_r+0x18>
 8020344:	2100      	movs	r1, #0
 8020346:	4622      	mov	r2, r4
 8020348:	f7ff ffec 	bl	8020324 <memset>
 802034c:	4628      	mov	r0, r5
 802034e:	bd38      	pop	{r3, r4, r5, pc}

08020350 <_free_r>:
 8020350:	b530      	push	{r4, r5, lr}
 8020352:	2900      	cmp	r1, #0
 8020354:	d03d      	beq.n	80203d2 <_free_r+0x82>
 8020356:	f851 2c04 	ldr.w	r2, [r1, #-4]
 802035a:	1f0b      	subs	r3, r1, #4
 802035c:	491d      	ldr	r1, [pc, #116]	; (80203d4 <_free_r+0x84>)
 802035e:	2a00      	cmp	r2, #0
 8020360:	bfb8      	it	lt
 8020362:	189b      	addlt	r3, r3, r2
 8020364:	680a      	ldr	r2, [r1, #0]
 8020366:	460c      	mov	r4, r1
 8020368:	b912      	cbnz	r2, 8020370 <_free_r+0x20>
 802036a:	605a      	str	r2, [r3, #4]
 802036c:	600b      	str	r3, [r1, #0]
 802036e:	bd30      	pop	{r4, r5, pc}
 8020370:	4293      	cmp	r3, r2
 8020372:	d20d      	bcs.n	8020390 <_free_r+0x40>
 8020374:	6819      	ldr	r1, [r3, #0]
 8020376:	1858      	adds	r0, r3, r1
 8020378:	4290      	cmp	r0, r2
 802037a:	bf01      	itttt	eq
 802037c:	585a      	ldreq	r2, [r3, r1]
 802037e:	1852      	addeq	r2, r2, r1
 8020380:	601a      	streq	r2, [r3, #0]
 8020382:	6842      	ldreq	r2, [r0, #4]
 8020384:	605a      	str	r2, [r3, #4]
 8020386:	6023      	str	r3, [r4, #0]
 8020388:	bd30      	pop	{r4, r5, pc}
 802038a:	4299      	cmp	r1, r3
 802038c:	d803      	bhi.n	8020396 <_free_r+0x46>
 802038e:	460a      	mov	r2, r1
 8020390:	6851      	ldr	r1, [r2, #4]
 8020392:	2900      	cmp	r1, #0
 8020394:	d1f9      	bne.n	802038a <_free_r+0x3a>
 8020396:	6814      	ldr	r4, [r2, #0]
 8020398:	1915      	adds	r5, r2, r4
 802039a:	429d      	cmp	r5, r3
 802039c:	d10a      	bne.n	80203b4 <_free_r+0x64>
 802039e:	681b      	ldr	r3, [r3, #0]
 80203a0:	4423      	add	r3, r4
 80203a2:	18d0      	adds	r0, r2, r3
 80203a4:	4288      	cmp	r0, r1
 80203a6:	6013      	str	r3, [r2, #0]
 80203a8:	d113      	bne.n	80203d2 <_free_r+0x82>
 80203aa:	6808      	ldr	r0, [r1, #0]
 80203ac:	4403      	add	r3, r0
 80203ae:	6013      	str	r3, [r2, #0]
 80203b0:	684b      	ldr	r3, [r1, #4]
 80203b2:	e00d      	b.n	80203d0 <_free_r+0x80>
 80203b4:	d902      	bls.n	80203bc <_free_r+0x6c>
 80203b6:	230c      	movs	r3, #12
 80203b8:	6003      	str	r3, [r0, #0]
 80203ba:	bd30      	pop	{r4, r5, pc}
 80203bc:	681c      	ldr	r4, [r3, #0]
 80203be:	1918      	adds	r0, r3, r4
 80203c0:	4288      	cmp	r0, r1
 80203c2:	bf04      	itt	eq
 80203c4:	6808      	ldreq	r0, [r1, #0]
 80203c6:	6849      	ldreq	r1, [r1, #4]
 80203c8:	6059      	str	r1, [r3, #4]
 80203ca:	bf04      	itt	eq
 80203cc:	1900      	addeq	r0, r0, r4
 80203ce:	6018      	streq	r0, [r3, #0]
 80203d0:	6053      	str	r3, [r2, #4]
 80203d2:	bd30      	pop	{r4, r5, pc}
 80203d4:	200019c0 	.word	0x200019c0

080203d8 <_malloc_r>:
 80203d8:	b570      	push	{r4, r5, r6, lr}
 80203da:	1ccc      	adds	r4, r1, #3
 80203dc:	f024 0403 	bic.w	r4, r4, #3
 80203e0:	3408      	adds	r4, #8
 80203e2:	2c0c      	cmp	r4, #12
 80203e4:	bf38      	it	cc
 80203e6:	240c      	movcc	r4, #12
 80203e8:	2c00      	cmp	r4, #0
 80203ea:	4606      	mov	r6, r0
 80203ec:	da03      	bge.n	80203f6 <_malloc_r+0x1e>
 80203ee:	230c      	movs	r3, #12
 80203f0:	6033      	str	r3, [r6, #0]
 80203f2:	2000      	movs	r0, #0
 80203f4:	bd70      	pop	{r4, r5, r6, pc}
 80203f6:	428c      	cmp	r4, r1
 80203f8:	d3f9      	bcc.n	80203ee <_malloc_r+0x16>
 80203fa:	4a20      	ldr	r2, [pc, #128]	; (802047c <_malloc_r+0xa4>)
 80203fc:	6813      	ldr	r3, [r2, #0]
 80203fe:	4610      	mov	r0, r2
 8020400:	4619      	mov	r1, r3
 8020402:	b1a1      	cbz	r1, 802042e <_malloc_r+0x56>
 8020404:	680a      	ldr	r2, [r1, #0]
 8020406:	1b12      	subs	r2, r2, r4
 8020408:	d40e      	bmi.n	8020428 <_malloc_r+0x50>
 802040a:	2a0b      	cmp	r2, #11
 802040c:	d903      	bls.n	8020416 <_malloc_r+0x3e>
 802040e:	600a      	str	r2, [r1, #0]
 8020410:	188b      	adds	r3, r1, r2
 8020412:	508c      	str	r4, [r1, r2]
 8020414:	e01f      	b.n	8020456 <_malloc_r+0x7e>
 8020416:	428b      	cmp	r3, r1
 8020418:	bf0d      	iteet	eq
 802041a:	685a      	ldreq	r2, [r3, #4]
 802041c:	684a      	ldrne	r2, [r1, #4]
 802041e:	605a      	strne	r2, [r3, #4]
 8020420:	6002      	streq	r2, [r0, #0]
 8020422:	bf18      	it	ne
 8020424:	460b      	movne	r3, r1
 8020426:	e016      	b.n	8020456 <_malloc_r+0x7e>
 8020428:	460b      	mov	r3, r1
 802042a:	6849      	ldr	r1, [r1, #4]
 802042c:	e7e9      	b.n	8020402 <_malloc_r+0x2a>
 802042e:	4d14      	ldr	r5, [pc, #80]	; (8020480 <_malloc_r+0xa8>)
 8020430:	682b      	ldr	r3, [r5, #0]
 8020432:	b91b      	cbnz	r3, 802043c <_malloc_r+0x64>
 8020434:	4630      	mov	r0, r6
 8020436:	f000 ffdf 	bl	80213f8 <_sbrk_r>
 802043a:	6028      	str	r0, [r5, #0]
 802043c:	4630      	mov	r0, r6
 802043e:	4621      	mov	r1, r4
 8020440:	f000 ffda 	bl	80213f8 <_sbrk_r>
 8020444:	1c42      	adds	r2, r0, #1
 8020446:	4603      	mov	r3, r0
 8020448:	d0d1      	beq.n	80203ee <_malloc_r+0x16>
 802044a:	1cc5      	adds	r5, r0, #3
 802044c:	f025 0503 	bic.w	r5, r5, #3
 8020450:	4285      	cmp	r5, r0
 8020452:	d10a      	bne.n	802046a <_malloc_r+0x92>
 8020454:	601c      	str	r4, [r3, #0]
 8020456:	f103 000b 	add.w	r0, r3, #11
 802045a:	1d1a      	adds	r2, r3, #4
 802045c:	f020 0007 	bic.w	r0, r0, #7
 8020460:	1a82      	subs	r2, r0, r2
 8020462:	d00a      	beq.n	802047a <_malloc_r+0xa2>
 8020464:	4251      	negs	r1, r2
 8020466:	5099      	str	r1, [r3, r2]
 8020468:	bd70      	pop	{r4, r5, r6, pc}
 802046a:	4630      	mov	r0, r6
 802046c:	1ae9      	subs	r1, r5, r3
 802046e:	f000 ffc3 	bl	80213f8 <_sbrk_r>
 8020472:	3001      	adds	r0, #1
 8020474:	d0bb      	beq.n	80203ee <_malloc_r+0x16>
 8020476:	462b      	mov	r3, r5
 8020478:	e7ec      	b.n	8020454 <_malloc_r+0x7c>
 802047a:	bd70      	pop	{r4, r5, r6, pc}
 802047c:	200019c0 	.word	0x200019c0
 8020480:	200019bc 	.word	0x200019bc

08020484 <__sfputc_r>:
 8020484:	6893      	ldr	r3, [r2, #8]
 8020486:	3b01      	subs	r3, #1
 8020488:	2b00      	cmp	r3, #0
 802048a:	b510      	push	{r4, lr}
 802048c:	6093      	str	r3, [r2, #8]
 802048e:	da09      	bge.n	80204a4 <__sfputc_r+0x20>
 8020490:	6994      	ldr	r4, [r2, #24]
 8020492:	42a3      	cmp	r3, r4
 8020494:	db02      	blt.n	802049c <__sfputc_r+0x18>
 8020496:	b2cb      	uxtb	r3, r1
 8020498:	2b0a      	cmp	r3, #10
 802049a:	d103      	bne.n	80204a4 <__sfputc_r+0x20>
 802049c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80204a0:	f001 bf8a 	b.w	80223b8 <__swbuf_r>
 80204a4:	6813      	ldr	r3, [r2, #0]
 80204a6:	1c58      	adds	r0, r3, #1
 80204a8:	6010      	str	r0, [r2, #0]
 80204aa:	7019      	strb	r1, [r3, #0]
 80204ac:	b2c8      	uxtb	r0, r1
 80204ae:	bd10      	pop	{r4, pc}

080204b0 <__sfputs_r>:
 80204b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80204b2:	4606      	mov	r6, r0
 80204b4:	460f      	mov	r7, r1
 80204b6:	4614      	mov	r4, r2
 80204b8:	18d5      	adds	r5, r2, r3
 80204ba:	42ac      	cmp	r4, r5
 80204bc:	d008      	beq.n	80204d0 <__sfputs_r+0x20>
 80204be:	4630      	mov	r0, r6
 80204c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80204c4:	463a      	mov	r2, r7
 80204c6:	f7ff ffdd 	bl	8020484 <__sfputc_r>
 80204ca:	1c43      	adds	r3, r0, #1
 80204cc:	d1f5      	bne.n	80204ba <__sfputs_r+0xa>
 80204ce:	e000      	b.n	80204d2 <__sfputs_r+0x22>
 80204d0:	2000      	movs	r0, #0
 80204d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080204d4 <_vfiprintf_r>:
 80204d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80204d8:	b09d      	sub	sp, #116	; 0x74
 80204da:	460d      	mov	r5, r1
 80204dc:	4690      	mov	r8, r2
 80204de:	9303      	str	r3, [sp, #12]
 80204e0:	4606      	mov	r6, r0
 80204e2:	b118      	cbz	r0, 80204ec <_vfiprintf_r+0x18>
 80204e4:	6983      	ldr	r3, [r0, #24]
 80204e6:	b90b      	cbnz	r3, 80204ec <_vfiprintf_r+0x18>
 80204e8:	f7ff fe44 	bl	8020174 <__sinit>
 80204ec:	4b75      	ldr	r3, [pc, #468]	; (80206c4 <_vfiprintf_r+0x1f0>)
 80204ee:	429d      	cmp	r5, r3
 80204f0:	d101      	bne.n	80204f6 <_vfiprintf_r+0x22>
 80204f2:	6875      	ldr	r5, [r6, #4]
 80204f4:	e008      	b.n	8020508 <_vfiprintf_r+0x34>
 80204f6:	4b74      	ldr	r3, [pc, #464]	; (80206c8 <_vfiprintf_r+0x1f4>)
 80204f8:	429d      	cmp	r5, r3
 80204fa:	d101      	bne.n	8020500 <_vfiprintf_r+0x2c>
 80204fc:	68b5      	ldr	r5, [r6, #8]
 80204fe:	e003      	b.n	8020508 <_vfiprintf_r+0x34>
 8020500:	4b72      	ldr	r3, [pc, #456]	; (80206cc <_vfiprintf_r+0x1f8>)
 8020502:	429d      	cmp	r5, r3
 8020504:	bf08      	it	eq
 8020506:	68f5      	ldreq	r5, [r6, #12]
 8020508:	89ab      	ldrh	r3, [r5, #12]
 802050a:	071c      	lsls	r4, r3, #28
 802050c:	d50a      	bpl.n	8020524 <_vfiprintf_r+0x50>
 802050e:	692b      	ldr	r3, [r5, #16]
 8020510:	b143      	cbz	r3, 8020524 <_vfiprintf_r+0x50>
 8020512:	2300      	movs	r3, #0
 8020514:	9309      	str	r3, [sp, #36]	; 0x24
 8020516:	2320      	movs	r3, #32
 8020518:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802051c:	2330      	movs	r3, #48	; 0x30
 802051e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8020522:	e041      	b.n	80205a8 <_vfiprintf_r+0xd4>
 8020524:	4630      	mov	r0, r6
 8020526:	4629      	mov	r1, r5
 8020528:	f001 ffac 	bl	8022484 <__swsetup_r>
 802052c:	2800      	cmp	r0, #0
 802052e:	d0f0      	beq.n	8020512 <_vfiprintf_r+0x3e>
 8020530:	f04f 30ff 	mov.w	r0, #4294967295
 8020534:	e0c2      	b.n	80206bc <_vfiprintf_r+0x1e8>
 8020536:	9a03      	ldr	r2, [sp, #12]
 8020538:	1d11      	adds	r1, r2, #4
 802053a:	6812      	ldr	r2, [r2, #0]
 802053c:	9103      	str	r1, [sp, #12]
 802053e:	2a00      	cmp	r2, #0
 8020540:	bfbb      	ittet	lt
 8020542:	4252      	neglt	r2, r2
 8020544:	f043 0302 	orrlt.w	r3, r3, #2
 8020548:	9207      	strge	r2, [sp, #28]
 802054a:	9207      	strlt	r2, [sp, #28]
 802054c:	bfb8      	it	lt
 802054e:	9304      	strlt	r3, [sp, #16]
 8020550:	3401      	adds	r4, #1
 8020552:	7823      	ldrb	r3, [r4, #0]
 8020554:	2b2e      	cmp	r3, #46	; 0x2e
 8020556:	d07b      	beq.n	8020650 <_vfiprintf_r+0x17c>
 8020558:	f8df 8180 	ldr.w	r8, [pc, #384]	; 80206dc <_vfiprintf_r+0x208>
 802055c:	7821      	ldrb	r1, [r4, #0]
 802055e:	4640      	mov	r0, r8
 8020560:	2203      	movs	r2, #3
 8020562:	f7ff fec5 	bl	80202f0 <memchr>
 8020566:	b138      	cbz	r0, 8020578 <_vfiprintf_r+0xa4>
 8020568:	9a04      	ldr	r2, [sp, #16]
 802056a:	ebc8 0000 	rsb	r0, r8, r0
 802056e:	2340      	movs	r3, #64	; 0x40
 8020570:	4083      	lsls	r3, r0
 8020572:	4313      	orrs	r3, r2
 8020574:	9304      	str	r3, [sp, #16]
 8020576:	3401      	adds	r4, #1
 8020578:	7821      	ldrb	r1, [r4, #0]
 802057a:	4855      	ldr	r0, [pc, #340]	; (80206d0 <_vfiprintf_r+0x1fc>)
 802057c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020580:	2206      	movs	r2, #6
 8020582:	f104 0801 	add.w	r8, r4, #1
 8020586:	f7ff feb3 	bl	80202f0 <memchr>
 802058a:	2800      	cmp	r0, #0
 802058c:	f000 8085 	beq.w	802069a <_vfiprintf_r+0x1c6>
 8020590:	4b50      	ldr	r3, [pc, #320]	; (80206d4 <_vfiprintf_r+0x200>)
 8020592:	2b00      	cmp	r3, #0
 8020594:	d178      	bne.n	8020688 <_vfiprintf_r+0x1b4>
 8020596:	9b03      	ldr	r3, [sp, #12]
 8020598:	3307      	adds	r3, #7
 802059a:	f023 0307 	bic.w	r3, r3, #7
 802059e:	3308      	adds	r3, #8
 80205a0:	9303      	str	r3, [sp, #12]
 80205a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80205a4:	443b      	add	r3, r7
 80205a6:	9309      	str	r3, [sp, #36]	; 0x24
 80205a8:	4643      	mov	r3, r8
 80205aa:	461c      	mov	r4, r3
 80205ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80205b0:	b91a      	cbnz	r2, 80205ba <_vfiprintf_r+0xe6>
 80205b2:	ebb4 0908 	subs.w	r9, r4, r8
 80205b6:	d00e      	beq.n	80205d6 <_vfiprintf_r+0x102>
 80205b8:	e002      	b.n	80205c0 <_vfiprintf_r+0xec>
 80205ba:	2a25      	cmp	r2, #37	; 0x25
 80205bc:	d1f5      	bne.n	80205aa <_vfiprintf_r+0xd6>
 80205be:	e7f8      	b.n	80205b2 <_vfiprintf_r+0xde>
 80205c0:	4630      	mov	r0, r6
 80205c2:	4629      	mov	r1, r5
 80205c4:	4642      	mov	r2, r8
 80205c6:	464b      	mov	r3, r9
 80205c8:	f7ff ff72 	bl	80204b0 <__sfputs_r>
 80205cc:	3001      	adds	r0, #1
 80205ce:	d070      	beq.n	80206b2 <_vfiprintf_r+0x1de>
 80205d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80205d2:	444b      	add	r3, r9
 80205d4:	9309      	str	r3, [sp, #36]	; 0x24
 80205d6:	7823      	ldrb	r3, [r4, #0]
 80205d8:	2b00      	cmp	r3, #0
 80205da:	d06a      	beq.n	80206b2 <_vfiprintf_r+0x1de>
 80205dc:	2300      	movs	r3, #0
 80205de:	f04f 32ff 	mov.w	r2, #4294967295
 80205e2:	9304      	str	r3, [sp, #16]
 80205e4:	9307      	str	r3, [sp, #28]
 80205e6:	9205      	str	r2, [sp, #20]
 80205e8:	9306      	str	r3, [sp, #24]
 80205ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80205ee:	931a      	str	r3, [sp, #104]	; 0x68
 80205f0:	f104 0801 	add.w	r8, r4, #1
 80205f4:	4644      	mov	r4, r8
 80205f6:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 80206e0 <_vfiprintf_r+0x20c>
 80205fa:	7821      	ldrb	r1, [r4, #0]
 80205fc:	4648      	mov	r0, r9
 80205fe:	2205      	movs	r2, #5
 8020600:	f7ff fe76 	bl	80202f0 <memchr>
 8020604:	f108 0801 	add.w	r8, r8, #1
 8020608:	9b04      	ldr	r3, [sp, #16]
 802060a:	b130      	cbz	r0, 802061a <_vfiprintf_r+0x146>
 802060c:	ebc9 0000 	rsb	r0, r9, r0
 8020610:	2201      	movs	r2, #1
 8020612:	4082      	lsls	r2, r0
 8020614:	4313      	orrs	r3, r2
 8020616:	9304      	str	r3, [sp, #16]
 8020618:	e7ec      	b.n	80205f4 <_vfiprintf_r+0x120>
 802061a:	06d8      	lsls	r0, r3, #27
 802061c:	bf44      	itt	mi
 802061e:	2220      	movmi	r2, #32
 8020620:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8020624:	0719      	lsls	r1, r3, #28
 8020626:	bf44      	itt	mi
 8020628:	222b      	movmi	r2, #43	; 0x2b
 802062a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802062e:	7822      	ldrb	r2, [r4, #0]
 8020630:	2a2a      	cmp	r2, #42	; 0x2a
 8020632:	d080      	beq.n	8020536 <_vfiprintf_r+0x62>
 8020634:	9907      	ldr	r1, [sp, #28]
 8020636:	4623      	mov	r3, r4
 8020638:	461c      	mov	r4, r3
 802063a:	3301      	adds	r3, #1
 802063c:	7822      	ldrb	r2, [r4, #0]
 802063e:	3a30      	subs	r2, #48	; 0x30
 8020640:	2a09      	cmp	r2, #9
 8020642:	d803      	bhi.n	802064c <_vfiprintf_r+0x178>
 8020644:	200a      	movs	r0, #10
 8020646:	fb00 2101 	mla	r1, r0, r1, r2
 802064a:	e7f5      	b.n	8020638 <_vfiprintf_r+0x164>
 802064c:	9107      	str	r1, [sp, #28]
 802064e:	e780      	b.n	8020552 <_vfiprintf_r+0x7e>
 8020650:	7863      	ldrb	r3, [r4, #1]
 8020652:	2b2a      	cmp	r3, #42	; 0x2a
 8020654:	d10a      	bne.n	802066c <_vfiprintf_r+0x198>
 8020656:	9b03      	ldr	r3, [sp, #12]
 8020658:	1d1a      	adds	r2, r3, #4
 802065a:	681b      	ldr	r3, [r3, #0]
 802065c:	9203      	str	r2, [sp, #12]
 802065e:	2b00      	cmp	r3, #0
 8020660:	bfb8      	it	lt
 8020662:	f04f 33ff 	movlt.w	r3, #4294967295
 8020666:	3402      	adds	r4, #2
 8020668:	9305      	str	r3, [sp, #20]
 802066a:	e775      	b.n	8020558 <_vfiprintf_r+0x84>
 802066c:	1c61      	adds	r1, r4, #1
 802066e:	2200      	movs	r2, #0
 8020670:	460c      	mov	r4, r1
 8020672:	3101      	adds	r1, #1
 8020674:	7823      	ldrb	r3, [r4, #0]
 8020676:	3b30      	subs	r3, #48	; 0x30
 8020678:	2b09      	cmp	r3, #9
 802067a:	d803      	bhi.n	8020684 <_vfiprintf_r+0x1b0>
 802067c:	200a      	movs	r0, #10
 802067e:	fb00 3202 	mla	r2, r0, r2, r3
 8020682:	e7f5      	b.n	8020670 <_vfiprintf_r+0x19c>
 8020684:	9205      	str	r2, [sp, #20]
 8020686:	e767      	b.n	8020558 <_vfiprintf_r+0x84>
 8020688:	ab03      	add	r3, sp, #12
 802068a:	9300      	str	r3, [sp, #0]
 802068c:	4630      	mov	r0, r6
 802068e:	a904      	add	r1, sp, #16
 8020690:	462a      	mov	r2, r5
 8020692:	4b11      	ldr	r3, [pc, #68]	; (80206d8 <_vfiprintf_r+0x204>)
 8020694:	f000 f8c4 	bl	8020820 <_printf_float>
 8020698:	e007      	b.n	80206aa <_vfiprintf_r+0x1d6>
 802069a:	ab03      	add	r3, sp, #12
 802069c:	9300      	str	r3, [sp, #0]
 802069e:	4630      	mov	r0, r6
 80206a0:	a904      	add	r1, sp, #16
 80206a2:	462a      	mov	r2, r5
 80206a4:	4b0c      	ldr	r3, [pc, #48]	; (80206d8 <_vfiprintf_r+0x204>)
 80206a6:	f000 fb77 	bl	8020d98 <_printf_i>
 80206aa:	1c42      	adds	r2, r0, #1
 80206ac:	4607      	mov	r7, r0
 80206ae:	f47f af78 	bne.w	80205a2 <_vfiprintf_r+0xce>
 80206b2:	89ab      	ldrh	r3, [r5, #12]
 80206b4:	065b      	lsls	r3, r3, #25
 80206b6:	f53f af3b 	bmi.w	8020530 <_vfiprintf_r+0x5c>
 80206ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80206bc:	b01d      	add	sp, #116	; 0x74
 80206be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80206c2:	bf00      	nop
 80206c4:	080271a4 	.word	0x080271a4
 80206c8:	080271c4 	.word	0x080271c4
 80206cc:	080271e4 	.word	0x080271e4
 80206d0:	08027216 	.word	0x08027216
 80206d4:	08020821 	.word	0x08020821
 80206d8:	080204b1 	.word	0x080204b1
 80206dc:	08027212 	.word	0x08027212
 80206e0:	0802720c 	.word	0x0802720c

080206e4 <vfiprintf>:
 80206e4:	b530      	push	{r4, r5, lr}
 80206e6:	4613      	mov	r3, r2
 80206e8:	4a04      	ldr	r2, [pc, #16]	; (80206fc <vfiprintf+0x18>)
 80206ea:	4605      	mov	r5, r0
 80206ec:	460c      	mov	r4, r1
 80206ee:	6810      	ldr	r0, [r2, #0]
 80206f0:	4629      	mov	r1, r5
 80206f2:	4622      	mov	r2, r4
 80206f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80206f8:	f7ff beec 	b.w	80204d4 <_vfiprintf_r>
 80206fc:	20001788 	.word	0x20001788

08020700 <__cvt>:
 8020700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020704:	b088      	sub	sp, #32
 8020706:	2b00      	cmp	r3, #0
 8020708:	9f14      	ldr	r7, [sp, #80]	; 0x50
 802070a:	9912      	ldr	r1, [sp, #72]	; 0x48
 802070c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 802070e:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8020712:	461d      	mov	r5, r3
 8020714:	bfb8      	it	lt
 8020716:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 802071a:	f027 0720 	bic.w	r7, r7, #32
 802071e:	bfb6      	itet	lt
 8020720:	461d      	movlt	r5, r3
 8020722:	2300      	movge	r3, #0
 8020724:	232d      	movlt	r3, #45	; 0x2d
 8020726:	4614      	mov	r4, r2
 8020728:	bfb8      	it	lt
 802072a:	4614      	movlt	r4, r2
 802072c:	2f46      	cmp	r7, #70	; 0x46
 802072e:	700b      	strb	r3, [r1, #0]
 8020730:	d003      	beq.n	802073a <__cvt+0x3a>
 8020732:	2f45      	cmp	r7, #69	; 0x45
 8020734:	d103      	bne.n	802073e <__cvt+0x3e>
 8020736:	3601      	adds	r6, #1
 8020738:	e001      	b.n	802073e <__cvt+0x3e>
 802073a:	2303      	movs	r3, #3
 802073c:	e000      	b.n	8020740 <__cvt+0x40>
 802073e:	2302      	movs	r3, #2
 8020740:	e88d 0448 	stmia.w	sp, {r3, r6, sl}
 8020744:	ab06      	add	r3, sp, #24
 8020746:	9303      	str	r3, [sp, #12]
 8020748:	ab07      	add	r3, sp, #28
 802074a:	9304      	str	r3, [sp, #16]
 802074c:	4622      	mov	r2, r4
 802074e:	462b      	mov	r3, r5
 8020750:	f001 ffa2 	bl	8022698 <_dtoa_r>
 8020754:	2f47      	cmp	r7, #71	; 0x47
 8020756:	4680      	mov	r8, r0
 8020758:	d102      	bne.n	8020760 <__cvt+0x60>
 802075a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802075c:	07db      	lsls	r3, r3, #31
 802075e:	d526      	bpl.n	80207ae <__cvt+0xae>
 8020760:	2f46      	cmp	r7, #70	; 0x46
 8020762:	eb08 0906 	add.w	r9, r8, r6
 8020766:	d111      	bne.n	802078c <__cvt+0x8c>
 8020768:	f898 3000 	ldrb.w	r3, [r8]
 802076c:	2b30      	cmp	r3, #48	; 0x30
 802076e:	d10a      	bne.n	8020786 <__cvt+0x86>
 8020770:	4620      	mov	r0, r4
 8020772:	4629      	mov	r1, r5
 8020774:	2200      	movs	r2, #0
 8020776:	2300      	movs	r3, #0
 8020778:	f004 faa4 	bl	8024cc4 <__aeabi_dcmpeq>
 802077c:	b918      	cbnz	r0, 8020786 <__cvt+0x86>
 802077e:	f1c6 0601 	rsb	r6, r6, #1
 8020782:	f8ca 6000 	str.w	r6, [sl]
 8020786:	f8da 3000 	ldr.w	r3, [sl]
 802078a:	4499      	add	r9, r3
 802078c:	4620      	mov	r0, r4
 802078e:	4629      	mov	r1, r5
 8020790:	2200      	movs	r2, #0
 8020792:	2300      	movs	r3, #0
 8020794:	f004 fa96 	bl	8024cc4 <__aeabi_dcmpeq>
 8020798:	b108      	cbz	r0, 802079e <__cvt+0x9e>
 802079a:	f8cd 901c 	str.w	r9, [sp, #28]
 802079e:	9b07      	ldr	r3, [sp, #28]
 80207a0:	454b      	cmp	r3, r9
 80207a2:	d204      	bcs.n	80207ae <__cvt+0xae>
 80207a4:	1c5a      	adds	r2, r3, #1
 80207a6:	9207      	str	r2, [sp, #28]
 80207a8:	2230      	movs	r2, #48	; 0x30
 80207aa:	701a      	strb	r2, [r3, #0]
 80207ac:	e7f7      	b.n	802079e <__cvt+0x9e>
 80207ae:	9b07      	ldr	r3, [sp, #28]
 80207b0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80207b2:	ebc8 0303 	rsb	r3, r8, r3
 80207b6:	4640      	mov	r0, r8
 80207b8:	6013      	str	r3, [r2, #0]
 80207ba:	b008      	add	sp, #32
 80207bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080207c0 <__exponent>:
 80207c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80207c2:	4603      	mov	r3, r0
 80207c4:	2900      	cmp	r1, #0
 80207c6:	bfb8      	it	lt
 80207c8:	4249      	neglt	r1, r1
 80207ca:	f803 2b02 	strb.w	r2, [r3], #2
 80207ce:	bfb4      	ite	lt
 80207d0:	222d      	movlt	r2, #45	; 0x2d
 80207d2:	222b      	movge	r2, #43	; 0x2b
 80207d4:	2909      	cmp	r1, #9
 80207d6:	7042      	strb	r2, [r0, #1]
 80207d8:	dd19      	ble.n	802080e <__exponent+0x4e>
 80207da:	f10d 0407 	add.w	r4, sp, #7
 80207de:	4626      	mov	r6, r4
 80207e0:	220a      	movs	r2, #10
 80207e2:	fb91 f5f2 	sdiv	r5, r1, r2
 80207e6:	fb02 1115 	mls	r1, r2, r5, r1
 80207ea:	3130      	adds	r1, #48	; 0x30
 80207ec:	2d09      	cmp	r5, #9
 80207ee:	f804 1d01 	strb.w	r1, [r4, #-1]!
 80207f2:	4629      	mov	r1, r5
 80207f4:	dcf4      	bgt.n	80207e0 <__exponent+0x20>
 80207f6:	3130      	adds	r1, #48	; 0x30
 80207f8:	1e65      	subs	r5, r4, #1
 80207fa:	f804 1c01 	strb.w	r1, [r4, #-1]
 80207fe:	42b5      	cmp	r5, r6
 8020800:	461a      	mov	r2, r3
 8020802:	d20a      	bcs.n	802081a <__exponent+0x5a>
 8020804:	f815 2b01 	ldrb.w	r2, [r5], #1
 8020808:	f803 2b01 	strb.w	r2, [r3], #1
 802080c:	e7f7      	b.n	80207fe <__exponent+0x3e>
 802080e:	2430      	movs	r4, #48	; 0x30
 8020810:	461a      	mov	r2, r3
 8020812:	4421      	add	r1, r4
 8020814:	f802 4b02 	strb.w	r4, [r2], #2
 8020818:	7059      	strb	r1, [r3, #1]
 802081a:	1a10      	subs	r0, r2, r0
 802081c:	b002      	add	sp, #8
 802081e:	bd70      	pop	{r4, r5, r6, pc}

08020820 <_printf_float>:
 8020820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020824:	b091      	sub	sp, #68	; 0x44
 8020826:	468b      	mov	fp, r1
 8020828:	4615      	mov	r5, r2
 802082a:	461e      	mov	r6, r3
 802082c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 802082e:	4604      	mov	r4, r0
 8020830:	f003 f802 	bl	8023838 <_localeconv_r>
 8020834:	f8d0 a000 	ldr.w	sl, [r0]
 8020838:	4650      	mov	r0, sl
 802083a:	f000 fece 	bl	80215da <strlen>
 802083e:	2300      	movs	r3, #0
 8020840:	930e      	str	r3, [sp, #56]	; 0x38
 8020842:	683b      	ldr	r3, [r7, #0]
 8020844:	9009      	str	r0, [sp, #36]	; 0x24
 8020846:	3307      	adds	r3, #7
 8020848:	f023 0307 	bic.w	r3, r3, #7
 802084c:	f103 0208 	add.w	r2, r3, #8
 8020850:	f89b 8018 	ldrb.w	r8, [fp, #24]
 8020854:	603a      	str	r2, [r7, #0]
 8020856:	e9d3 2300 	ldrd	r2, r3, [r3]
 802085a:	e9cb 2312 	strd	r2, r3, [fp, #72]	; 0x48
 802085e:	e9db 0112 	ldrd	r0, r1, [fp, #72]	; 0x48
 8020862:	f000 fd9f 	bl	80213a4 <__fpclassifyd>
 8020866:	2801      	cmp	r0, #1
 8020868:	e9db 0112 	ldrd	r0, r1, [fp, #72]	; 0x48
 802086c:	d119      	bne.n	80208a2 <_printf_float+0x82>
 802086e:	2200      	movs	r2, #0
 8020870:	2300      	movs	r3, #0
 8020872:	f004 fa31 	bl	8024cd8 <__aeabi_dcmplt>
 8020876:	b110      	cbz	r0, 802087e <_printf_float+0x5e>
 8020878:	232d      	movs	r3, #45	; 0x2d
 802087a:	f88b 3043 	strb.w	r3, [fp, #67]	; 0x43
 802087e:	4ba0      	ldr	r3, [pc, #640]	; (8020b00 <_printf_float+0x2e0>)
 8020880:	4fa0      	ldr	r7, [pc, #640]	; (8020b04 <_printf_float+0x2e4>)
 8020882:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8020886:	bf88      	it	hi
 8020888:	461f      	movhi	r7, r3
 802088a:	2303      	movs	r3, #3
 802088c:	f8cb 3010 	str.w	r3, [fp, #16]
 8020890:	f8db 3000 	ldr.w	r3, [fp]
 8020894:	f023 0304 	bic.w	r3, r3, #4
 8020898:	f8cb 3000 	str.w	r3, [fp]
 802089c:	f04f 0900 	mov.w	r9, #0
 80208a0:	e0a1      	b.n	80209e6 <_printf_float+0x1c6>
 80208a2:	f000 fd7f 	bl	80213a4 <__fpclassifyd>
 80208a6:	f8db 3000 	ldr.w	r3, [fp]
 80208aa:	b948      	cbnz	r0, 80208c0 <_printf_float+0xa0>
 80208ac:	4a96      	ldr	r2, [pc, #600]	; (8020b08 <_printf_float+0x2e8>)
 80208ae:	4f97      	ldr	r7, [pc, #604]	; (8020b0c <_printf_float+0x2ec>)
 80208b0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80208b4:	bf88      	it	hi
 80208b6:	4617      	movhi	r7, r2
 80208b8:	2203      	movs	r2, #3
 80208ba:	f8cb 2010 	str.w	r2, [fp, #16]
 80208be:	e7e9      	b.n	8020894 <_printf_float+0x74>
 80208c0:	f8db 2004 	ldr.w	r2, [fp, #4]
 80208c4:	ed9b 7b12 	vldr	d7, [fp, #72]	; 0x48
 80208c8:	1c57      	adds	r7, r2, #1
 80208ca:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80208ce:	d101      	bne.n	80208d4 <_printf_float+0xb4>
 80208d0:	2206      	movs	r2, #6
 80208d2:	e009      	b.n	80208e8 <_printf_float+0xc8>
 80208d4:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80208d8:	d002      	beq.n	80208e0 <_printf_float+0xc0>
 80208da:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80208de:	d105      	bne.n	80208ec <_printf_float+0xcc>
 80208e0:	2a00      	cmp	r2, #0
 80208e2:	f040 81c7 	bne.w	8020c74 <_printf_float+0x454>
 80208e6:	2201      	movs	r2, #1
 80208e8:	f8cb 2004 	str.w	r2, [fp, #4]
 80208ec:	f8db 2004 	ldr.w	r2, [fp, #4]
 80208f0:	f8cd 8010 	str.w	r8, [sp, #16]
 80208f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80208f8:	e88d 000c 	stmia.w	sp, {r2, r3}
 80208fc:	f8cb 3000 	str.w	r3, [fp]
 8020900:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8020904:	9302      	str	r3, [sp, #8]
 8020906:	ab0d      	add	r3, sp, #52	; 0x34
 8020908:	9303      	str	r3, [sp, #12]
 802090a:	ab0e      	add	r3, sp, #56	; 0x38
 802090c:	9305      	str	r3, [sp, #20]
 802090e:	2300      	movs	r3, #0
 8020910:	9306      	str	r3, [sp, #24]
 8020912:	4620      	mov	r0, r4
 8020914:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8020918:	f7ff fef2 	bl	8020700 <__cvt>
 802091c:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8020920:	2b47      	cmp	r3, #71	; 0x47
 8020922:	4607      	mov	r7, r0
 8020924:	d10a      	bne.n	802093c <_printf_float+0x11c>
 8020926:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020928:	1cd8      	adds	r0, r3, #3
 802092a:	db03      	blt.n	8020934 <_printf_float+0x114>
 802092c:	f8db 2004 	ldr.w	r2, [fp, #4]
 8020930:	4293      	cmp	r3, r2
 8020932:	dd37      	ble.n	80209a4 <_printf_float+0x184>
 8020934:	f1a8 0802 	sub.w	r8, r8, #2
 8020938:	fa5f f888 	uxtb.w	r8, r8
 802093c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8020940:	990d      	ldr	r1, [sp, #52]	; 0x34
 8020942:	d815      	bhi.n	8020970 <_printf_float+0x150>
 8020944:	3901      	subs	r1, #1
 8020946:	4642      	mov	r2, r8
 8020948:	f10b 0050 	add.w	r0, fp, #80	; 0x50
 802094c:	910d      	str	r1, [sp, #52]	; 0x34
 802094e:	f7ff ff37 	bl	80207c0 <__exponent>
 8020952:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020954:	1883      	adds	r3, r0, r2
 8020956:	2a01      	cmp	r2, #1
 8020958:	4681      	mov	r9, r0
 802095a:	f8cb 3010 	str.w	r3, [fp, #16]
 802095e:	dc03      	bgt.n	8020968 <_printf_float+0x148>
 8020960:	f8db 2000 	ldr.w	r2, [fp]
 8020964:	07d1      	lsls	r1, r2, #31
 8020966:	d538      	bpl.n	80209da <_printf_float+0x1ba>
 8020968:	3301      	adds	r3, #1
 802096a:	f8cb 3010 	str.w	r3, [fp, #16]
 802096e:	e034      	b.n	80209da <_printf_float+0x1ba>
 8020970:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8020974:	d118      	bne.n	80209a8 <_printf_float+0x188>
 8020976:	2900      	cmp	r1, #0
 8020978:	f8db 3004 	ldr.w	r3, [fp, #4]
 802097c:	dd09      	ble.n	8020992 <_printf_float+0x172>
 802097e:	f8cb 1010 	str.w	r1, [fp, #16]
 8020982:	b91b      	cbnz	r3, 802098c <_printf_float+0x16c>
 8020984:	f8db 2000 	ldr.w	r2, [fp]
 8020988:	07d2      	lsls	r2, r2, #31
 802098a:	d521      	bpl.n	80209d0 <_printf_float+0x1b0>
 802098c:	3301      	adds	r3, #1
 802098e:	440b      	add	r3, r1
 8020990:	e01c      	b.n	80209cc <_printf_float+0x1ac>
 8020992:	b91b      	cbnz	r3, 802099c <_printf_float+0x17c>
 8020994:	f8db 2000 	ldr.w	r2, [fp]
 8020998:	07d0      	lsls	r0, r2, #31
 802099a:	d501      	bpl.n	80209a0 <_printf_float+0x180>
 802099c:	3302      	adds	r3, #2
 802099e:	e015      	b.n	80209cc <_printf_float+0x1ac>
 80209a0:	2301      	movs	r3, #1
 80209a2:	e013      	b.n	80209cc <_printf_float+0x1ac>
 80209a4:	f04f 0867 	mov.w	r8, #103	; 0x67
 80209a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80209aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80209ac:	4293      	cmp	r3, r2
 80209ae:	db07      	blt.n	80209c0 <_printf_float+0x1a0>
 80209b0:	f8db 2000 	ldr.w	r2, [fp]
 80209b4:	f8cb 3010 	str.w	r3, [fp, #16]
 80209b8:	07d1      	lsls	r1, r2, #31
 80209ba:	d509      	bpl.n	80209d0 <_printf_float+0x1b0>
 80209bc:	3301      	adds	r3, #1
 80209be:	e005      	b.n	80209cc <_printf_float+0x1ac>
 80209c0:	2b00      	cmp	r3, #0
 80209c2:	bfd4      	ite	le
 80209c4:	f1c3 0302 	rsble	r3, r3, #2
 80209c8:	2301      	movgt	r3, #1
 80209ca:	4413      	add	r3, r2
 80209cc:	f8cb 3010 	str.w	r3, [fp, #16]
 80209d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80209d2:	f8cb 3058 	str.w	r3, [fp, #88]	; 0x58
 80209d6:	f04f 0900 	mov.w	r9, #0
 80209da:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80209de:	b113      	cbz	r3, 80209e6 <_printf_float+0x1c6>
 80209e0:	232d      	movs	r3, #45	; 0x2d
 80209e2:	f88b 3043 	strb.w	r3, [fp, #67]	; 0x43
 80209e6:	9600      	str	r6, [sp, #0]
 80209e8:	4620      	mov	r0, r4
 80209ea:	4659      	mov	r1, fp
 80209ec:	aa0f      	add	r2, sp, #60	; 0x3c
 80209ee:	462b      	mov	r3, r5
 80209f0:	f000 f95c 	bl	8020cac <_printf_common>
 80209f4:	3001      	adds	r0, #1
 80209f6:	d102      	bne.n	80209fe <_printf_float+0x1de>
 80209f8:	f04f 30ff 	mov.w	r0, #4294967295
 80209fc:	e152      	b.n	8020ca4 <_printf_float+0x484>
 80209fe:	f8db 3000 	ldr.w	r3, [fp]
 8020a02:	055a      	lsls	r2, r3, #21
 8020a04:	d405      	bmi.n	8020a12 <_printf_float+0x1f2>
 8020a06:	4620      	mov	r0, r4
 8020a08:	4629      	mov	r1, r5
 8020a0a:	463a      	mov	r2, r7
 8020a0c:	f8db 3010 	ldr.w	r3, [fp, #16]
 8020a10:	e108      	b.n	8020c24 <_printf_float+0x404>
 8020a12:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8020a16:	f240 80d0 	bls.w	8020bba <_printf_float+0x39a>
 8020a1a:	e9db 0112 	ldrd	r0, r1, [fp, #72]	; 0x48
 8020a1e:	2200      	movs	r2, #0
 8020a20:	2300      	movs	r3, #0
 8020a22:	f004 f94f 	bl	8024cc4 <__aeabi_dcmpeq>
 8020a26:	b350      	cbz	r0, 8020a7e <_printf_float+0x25e>
 8020a28:	4620      	mov	r0, r4
 8020a2a:	4629      	mov	r1, r5
 8020a2c:	4a38      	ldr	r2, [pc, #224]	; (8020b10 <_printf_float+0x2f0>)
 8020a2e:	2301      	movs	r3, #1
 8020a30:	47b0      	blx	r6
 8020a32:	3001      	adds	r0, #1
 8020a34:	d0e0      	beq.n	80209f8 <_printf_float+0x1d8>
 8020a36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020a38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020a3a:	429a      	cmp	r2, r3
 8020a3c:	db09      	blt.n	8020a52 <_printf_float+0x232>
 8020a3e:	f8db 3000 	ldr.w	r3, [fp]
 8020a42:	07d8      	lsls	r0, r3, #31
 8020a44:	d405      	bmi.n	8020a52 <_printf_float+0x232>
 8020a46:	f8db 3000 	ldr.w	r3, [fp]
 8020a4a:	079f      	lsls	r7, r3, #30
 8020a4c:	f100 8110 	bmi.w	8020c70 <_printf_float+0x450>
 8020a50:	e107      	b.n	8020c62 <_printf_float+0x442>
 8020a52:	4620      	mov	r0, r4
 8020a54:	4629      	mov	r1, r5
 8020a56:	4652      	mov	r2, sl
 8020a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020a5a:	47b0      	blx	r6
 8020a5c:	3001      	adds	r0, #1
 8020a5e:	d0cb      	beq.n	80209f8 <_printf_float+0x1d8>
 8020a60:	2700      	movs	r7, #0
 8020a62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020a64:	3b01      	subs	r3, #1
 8020a66:	429f      	cmp	r7, r3
 8020a68:	daed      	bge.n	8020a46 <_printf_float+0x226>
 8020a6a:	4620      	mov	r0, r4
 8020a6c:	4629      	mov	r1, r5
 8020a6e:	f10b 021a 	add.w	r2, fp, #26
 8020a72:	2301      	movs	r3, #1
 8020a74:	47b0      	blx	r6
 8020a76:	3001      	adds	r0, #1
 8020a78:	d0be      	beq.n	80209f8 <_printf_float+0x1d8>
 8020a7a:	3701      	adds	r7, #1
 8020a7c:	e7f1      	b.n	8020a62 <_printf_float+0x242>
 8020a7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020a80:	2b00      	cmp	r3, #0
 8020a82:	dc29      	bgt.n	8020ad8 <_printf_float+0x2b8>
 8020a84:	4620      	mov	r0, r4
 8020a86:	4629      	mov	r1, r5
 8020a88:	4a21      	ldr	r2, [pc, #132]	; (8020b10 <_printf_float+0x2f0>)
 8020a8a:	2301      	movs	r3, #1
 8020a8c:	47b0      	blx	r6
 8020a8e:	3001      	adds	r0, #1
 8020a90:	d0b2      	beq.n	80209f8 <_printf_float+0x1d8>
 8020a92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020a94:	b92b      	cbnz	r3, 8020aa2 <_printf_float+0x282>
 8020a96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020a98:	b91b      	cbnz	r3, 8020aa2 <_printf_float+0x282>
 8020a9a:	f8db 3000 	ldr.w	r3, [fp]
 8020a9e:	07d9      	lsls	r1, r3, #31
 8020aa0:	d5d1      	bpl.n	8020a46 <_printf_float+0x226>
 8020aa2:	4620      	mov	r0, r4
 8020aa4:	4629      	mov	r1, r5
 8020aa6:	4652      	mov	r2, sl
 8020aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020aaa:	47b0      	blx	r6
 8020aac:	3001      	adds	r0, #1
 8020aae:	d0a3      	beq.n	80209f8 <_printf_float+0x1d8>
 8020ab0:	f04f 0800 	mov.w	r8, #0
 8020ab4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020ab6:	425b      	negs	r3, r3
 8020ab8:	4598      	cmp	r8, r3
 8020aba:	4620      	mov	r0, r4
 8020abc:	4629      	mov	r1, r5
 8020abe:	da08      	bge.n	8020ad2 <_printf_float+0x2b2>
 8020ac0:	f10b 021a 	add.w	r2, fp, #26
 8020ac4:	2301      	movs	r3, #1
 8020ac6:	47b0      	blx	r6
 8020ac8:	3001      	adds	r0, #1
 8020aca:	d095      	beq.n	80209f8 <_printf_float+0x1d8>
 8020acc:	f108 0801 	add.w	r8, r8, #1
 8020ad0:	e7f0      	b.n	8020ab4 <_printf_float+0x294>
 8020ad2:	463a      	mov	r2, r7
 8020ad4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020ad6:	e0a5      	b.n	8020c24 <_printf_float+0x404>
 8020ad8:	f8db 2058 	ldr.w	r2, [fp, #88]	; 0x58
 8020adc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020ade:	429a      	cmp	r2, r3
 8020ae0:	bfa8      	it	ge
 8020ae2:	461a      	movge	r2, r3
 8020ae4:	2a00      	cmp	r2, #0
 8020ae6:	4691      	mov	r9, r2
 8020ae8:	dc02      	bgt.n	8020af0 <_printf_float+0x2d0>
 8020aea:	f04f 0800 	mov.w	r8, #0
 8020aee:	e01c      	b.n	8020b2a <_printf_float+0x30a>
 8020af0:	4620      	mov	r0, r4
 8020af2:	4629      	mov	r1, r5
 8020af4:	463a      	mov	r2, r7
 8020af6:	464b      	mov	r3, r9
 8020af8:	47b0      	blx	r6
 8020afa:	3001      	adds	r0, #1
 8020afc:	d1f5      	bne.n	8020aea <_printf_float+0x2ca>
 8020afe:	e77b      	b.n	80209f8 <_printf_float+0x1d8>
 8020b00:	08027221 	.word	0x08027221
 8020b04:	0802721d 	.word	0x0802721d
 8020b08:	08027229 	.word	0x08027229
 8020b0c:	08027225 	.word	0x08027225
 8020b10:	0802722d 	.word	0x0802722d
 8020b14:	4620      	mov	r0, r4
 8020b16:	4629      	mov	r1, r5
 8020b18:	f10b 021a 	add.w	r2, fp, #26
 8020b1c:	2301      	movs	r3, #1
 8020b1e:	47b0      	blx	r6
 8020b20:	3001      	adds	r0, #1
 8020b22:	f43f af69 	beq.w	80209f8 <_printf_float+0x1d8>
 8020b26:	f108 0801 	add.w	r8, r8, #1
 8020b2a:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 8020b2e:	f1b9 0f00 	cmp.w	r9, #0
 8020b32:	bfac      	ite	ge
 8020b34:	ebc9 0203 	rsbge	r2, r9, r3
 8020b38:	461a      	movlt	r2, r3
 8020b3a:	4590      	cmp	r8, r2
 8020b3c:	dbea      	blt.n	8020b14 <_printf_float+0x2f4>
 8020b3e:	eb07 0803 	add.w	r8, r7, r3
 8020b42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020b44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020b46:	429a      	cmp	r2, r3
 8020b48:	db10      	blt.n	8020b6c <_printf_float+0x34c>
 8020b4a:	f8db 3000 	ldr.w	r3, [fp]
 8020b4e:	07da      	lsls	r2, r3, #31
 8020b50:	d40c      	bmi.n	8020b6c <_printf_float+0x34c>
 8020b52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020b54:	4417      	add	r7, r2
 8020b56:	ebc8 0307 	rsb	r3, r8, r7
 8020b5a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8020b5c:	1bd2      	subs	r2, r2, r7
 8020b5e:	4293      	cmp	r3, r2
 8020b60:	bfa8      	it	ge
 8020b62:	4613      	movge	r3, r2
 8020b64:	2b00      	cmp	r3, #0
 8020b66:	461f      	mov	r7, r3
 8020b68:	dc08      	bgt.n	8020b7c <_printf_float+0x35c>
 8020b6a:	e00e      	b.n	8020b8a <_printf_float+0x36a>
 8020b6c:	4620      	mov	r0, r4
 8020b6e:	4629      	mov	r1, r5
 8020b70:	4652      	mov	r2, sl
 8020b72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020b74:	47b0      	blx	r6
 8020b76:	3001      	adds	r0, #1
 8020b78:	d1eb      	bne.n	8020b52 <_printf_float+0x332>
 8020b7a:	e73d      	b.n	80209f8 <_printf_float+0x1d8>
 8020b7c:	4620      	mov	r0, r4
 8020b7e:	4629      	mov	r1, r5
 8020b80:	4642      	mov	r2, r8
 8020b82:	47b0      	blx	r6
 8020b84:	3001      	adds	r0, #1
 8020b86:	f43f af37 	beq.w	80209f8 <_printf_float+0x1d8>
 8020b8a:	f04f 0800 	mov.w	r8, #0
 8020b8e:	e00a      	b.n	8020ba6 <_printf_float+0x386>
 8020b90:	4620      	mov	r0, r4
 8020b92:	4629      	mov	r1, r5
 8020b94:	f10b 021a 	add.w	r2, fp, #26
 8020b98:	2301      	movs	r3, #1
 8020b9a:	47b0      	blx	r6
 8020b9c:	3001      	adds	r0, #1
 8020b9e:	f43f af2b 	beq.w	80209f8 <_printf_float+0x1d8>
 8020ba2:	f108 0801 	add.w	r8, r8, #1
 8020ba6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020ba8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020baa:	2f00      	cmp	r7, #0
 8020bac:	eba3 0302 	sub.w	r3, r3, r2
 8020bb0:	bfa8      	it	ge
 8020bb2:	1bdb      	subge	r3, r3, r7
 8020bb4:	4598      	cmp	r8, r3
 8020bb6:	dbeb      	blt.n	8020b90 <_printf_float+0x370>
 8020bb8:	e745      	b.n	8020a46 <_printf_float+0x226>
 8020bba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020bbc:	2a01      	cmp	r2, #1
 8020bbe:	dc01      	bgt.n	8020bc4 <_printf_float+0x3a4>
 8020bc0:	07db      	lsls	r3, r3, #31
 8020bc2:	d536      	bpl.n	8020c32 <_printf_float+0x412>
 8020bc4:	4620      	mov	r0, r4
 8020bc6:	4629      	mov	r1, r5
 8020bc8:	463a      	mov	r2, r7
 8020bca:	2301      	movs	r3, #1
 8020bcc:	47b0      	blx	r6
 8020bce:	3001      	adds	r0, #1
 8020bd0:	f43f af12 	beq.w	80209f8 <_printf_float+0x1d8>
 8020bd4:	4620      	mov	r0, r4
 8020bd6:	4629      	mov	r1, r5
 8020bd8:	4652      	mov	r2, sl
 8020bda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020bdc:	47b0      	blx	r6
 8020bde:	3001      	adds	r0, #1
 8020be0:	f43f af0a 	beq.w	80209f8 <_printf_float+0x1d8>
 8020be4:	e9db 0112 	ldrd	r0, r1, [fp, #72]	; 0x48
 8020be8:	2200      	movs	r2, #0
 8020bea:	2300      	movs	r3, #0
 8020bec:	f004 f86a 	bl	8024cc4 <__aeabi_dcmpeq>
 8020bf0:	b9e8      	cbnz	r0, 8020c2e <_printf_float+0x40e>
 8020bf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020bf4:	4620      	mov	r0, r4
 8020bf6:	4629      	mov	r1, r5
 8020bf8:	1c7a      	adds	r2, r7, #1
 8020bfa:	3b01      	subs	r3, #1
 8020bfc:	e01d      	b.n	8020c3a <_printf_float+0x41a>
 8020bfe:	4620      	mov	r0, r4
 8020c00:	4629      	mov	r1, r5
 8020c02:	f10b 021a 	add.w	r2, fp, #26
 8020c06:	2301      	movs	r3, #1
 8020c08:	47b0      	blx	r6
 8020c0a:	3001      	adds	r0, #1
 8020c0c:	f43f aef4 	beq.w	80209f8 <_printf_float+0x1d8>
 8020c10:	3701      	adds	r7, #1
 8020c12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020c14:	3b01      	subs	r3, #1
 8020c16:	429f      	cmp	r7, r3
 8020c18:	dbf1      	blt.n	8020bfe <_printf_float+0x3de>
 8020c1a:	4620      	mov	r0, r4
 8020c1c:	4629      	mov	r1, r5
 8020c1e:	f10b 0250 	add.w	r2, fp, #80	; 0x50
 8020c22:	464b      	mov	r3, r9
 8020c24:	47b0      	blx	r6
 8020c26:	3001      	adds	r0, #1
 8020c28:	f47f af0d 	bne.w	8020a46 <_printf_float+0x226>
 8020c2c:	e6e4      	b.n	80209f8 <_printf_float+0x1d8>
 8020c2e:	2700      	movs	r7, #0
 8020c30:	e7ef      	b.n	8020c12 <_printf_float+0x3f2>
 8020c32:	4620      	mov	r0, r4
 8020c34:	4629      	mov	r1, r5
 8020c36:	463a      	mov	r2, r7
 8020c38:	2301      	movs	r3, #1
 8020c3a:	47b0      	blx	r6
 8020c3c:	3001      	adds	r0, #1
 8020c3e:	d1ec      	bne.n	8020c1a <_printf_float+0x3fa>
 8020c40:	e6da      	b.n	80209f8 <_printf_float+0x1d8>
 8020c42:	4620      	mov	r0, r4
 8020c44:	4629      	mov	r1, r5
 8020c46:	f10b 0219 	add.w	r2, fp, #25
 8020c4a:	2301      	movs	r3, #1
 8020c4c:	47b0      	blx	r6
 8020c4e:	3001      	adds	r0, #1
 8020c50:	f43f aed2 	beq.w	80209f8 <_printf_float+0x1d8>
 8020c54:	3701      	adds	r7, #1
 8020c56:	f8db 300c 	ldr.w	r3, [fp, #12]
 8020c5a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020c5c:	1a9b      	subs	r3, r3, r2
 8020c5e:	429f      	cmp	r7, r3
 8020c60:	dbef      	blt.n	8020c42 <_printf_float+0x422>
 8020c62:	f8db 000c 	ldr.w	r0, [fp, #12]
 8020c66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020c68:	4298      	cmp	r0, r3
 8020c6a:	bfb8      	it	lt
 8020c6c:	4618      	movlt	r0, r3
 8020c6e:	e019      	b.n	8020ca4 <_printf_float+0x484>
 8020c70:	2700      	movs	r7, #0
 8020c72:	e7f0      	b.n	8020c56 <_printf_float+0x436>
 8020c74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8020c78:	e88d 000c 	stmia.w	sp, {r2, r3}
 8020c7c:	f8cb 3000 	str.w	r3, [fp]
 8020c80:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8020c84:	9302      	str	r3, [sp, #8]
 8020c86:	ab0d      	add	r3, sp, #52	; 0x34
 8020c88:	9303      	str	r3, [sp, #12]
 8020c8a:	ab0e      	add	r3, sp, #56	; 0x38
 8020c8c:	9305      	str	r3, [sp, #20]
 8020c8e:	2300      	movs	r3, #0
 8020c90:	9306      	str	r3, [sp, #24]
 8020c92:	f8cd 8010 	str.w	r8, [sp, #16]
 8020c96:	4620      	mov	r0, r4
 8020c98:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8020c9c:	f7ff fd30 	bl	8020700 <__cvt>
 8020ca0:	4607      	mov	r7, r0
 8020ca2:	e640      	b.n	8020926 <_printf_float+0x106>
 8020ca4:	b011      	add	sp, #68	; 0x44
 8020ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020caa:	bf00      	nop

08020cac <_printf_common>:
 8020cac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020cb0:	4691      	mov	r9, r2
 8020cb2:	461f      	mov	r7, r3
 8020cb4:	688a      	ldr	r2, [r1, #8]
 8020cb6:	690b      	ldr	r3, [r1, #16]
 8020cb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8020cbc:	4293      	cmp	r3, r2
 8020cbe:	bfb8      	it	lt
 8020cc0:	4613      	movlt	r3, r2
 8020cc2:	f8c9 3000 	str.w	r3, [r9]
 8020cc6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8020cca:	4606      	mov	r6, r0
 8020ccc:	460c      	mov	r4, r1
 8020cce:	b112      	cbz	r2, 8020cd6 <_printf_common+0x2a>
 8020cd0:	3301      	adds	r3, #1
 8020cd2:	f8c9 3000 	str.w	r3, [r9]
 8020cd6:	6823      	ldr	r3, [r4, #0]
 8020cd8:	0699      	lsls	r1, r3, #26
 8020cda:	bf42      	ittt	mi
 8020cdc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8020ce0:	3302      	addmi	r3, #2
 8020ce2:	f8c9 3000 	strmi.w	r3, [r9]
 8020ce6:	6825      	ldr	r5, [r4, #0]
 8020ce8:	f015 0506 	ands.w	r5, r5, #6
 8020cec:	d01c      	beq.n	8020d28 <_printf_common+0x7c>
 8020cee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8020cf2:	6822      	ldr	r2, [r4, #0]
 8020cf4:	3300      	adds	r3, #0
 8020cf6:	bf18      	it	ne
 8020cf8:	2301      	movne	r3, #1
 8020cfa:	0692      	lsls	r2, r2, #26
 8020cfc:	d51f      	bpl.n	8020d3e <_printf_common+0x92>
 8020cfe:	18e1      	adds	r1, r4, r3
 8020d00:	1c5a      	adds	r2, r3, #1
 8020d02:	2030      	movs	r0, #48	; 0x30
 8020d04:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8020d08:	4422      	add	r2, r4
 8020d0a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8020d0e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8020d12:	3302      	adds	r3, #2
 8020d14:	e013      	b.n	8020d3e <_printf_common+0x92>
 8020d16:	4630      	mov	r0, r6
 8020d18:	4639      	mov	r1, r7
 8020d1a:	f104 0219 	add.w	r2, r4, #25
 8020d1e:	2301      	movs	r3, #1
 8020d20:	47c0      	blx	r8
 8020d22:	3001      	adds	r0, #1
 8020d24:	d007      	beq.n	8020d36 <_printf_common+0x8a>
 8020d26:	3501      	adds	r5, #1
 8020d28:	68e3      	ldr	r3, [r4, #12]
 8020d2a:	f8d9 2000 	ldr.w	r2, [r9]
 8020d2e:	1a9b      	subs	r3, r3, r2
 8020d30:	429d      	cmp	r5, r3
 8020d32:	dbf0      	blt.n	8020d16 <_printf_common+0x6a>
 8020d34:	e7db      	b.n	8020cee <_printf_common+0x42>
 8020d36:	f04f 30ff 	mov.w	r0, #4294967295
 8020d3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020d3e:	4630      	mov	r0, r6
 8020d40:	4639      	mov	r1, r7
 8020d42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8020d46:	47c0      	blx	r8
 8020d48:	3001      	adds	r0, #1
 8020d4a:	d0f4      	beq.n	8020d36 <_printf_common+0x8a>
 8020d4c:	6822      	ldr	r2, [r4, #0]
 8020d4e:	f8d9 5000 	ldr.w	r5, [r9]
 8020d52:	68e3      	ldr	r3, [r4, #12]
 8020d54:	f002 0206 	and.w	r2, r2, #6
 8020d58:	2a04      	cmp	r2, #4
 8020d5a:	bf08      	it	eq
 8020d5c:	1b5d      	subeq	r5, r3, r5
 8020d5e:	6922      	ldr	r2, [r4, #16]
 8020d60:	68a3      	ldr	r3, [r4, #8]
 8020d62:	bf0c      	ite	eq
 8020d64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8020d68:	2500      	movne	r5, #0
 8020d6a:	4293      	cmp	r3, r2
 8020d6c:	bfc4      	itt	gt
 8020d6e:	1a9b      	subgt	r3, r3, r2
 8020d70:	18ed      	addgt	r5, r5, r3
 8020d72:	f04f 0900 	mov.w	r9, #0
 8020d76:	45a9      	cmp	r9, r5
 8020d78:	da0a      	bge.n	8020d90 <_printf_common+0xe4>
 8020d7a:	4630      	mov	r0, r6
 8020d7c:	4639      	mov	r1, r7
 8020d7e:	f104 021a 	add.w	r2, r4, #26
 8020d82:	2301      	movs	r3, #1
 8020d84:	47c0      	blx	r8
 8020d86:	3001      	adds	r0, #1
 8020d88:	d0d5      	beq.n	8020d36 <_printf_common+0x8a>
 8020d8a:	f109 0901 	add.w	r9, r9, #1
 8020d8e:	e7f2      	b.n	8020d76 <_printf_common+0xca>
 8020d90:	2000      	movs	r0, #0
 8020d92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08020d98 <_printf_i>:
 8020d98:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8020d9c:	460c      	mov	r4, r1
 8020d9e:	4617      	mov	r7, r2
 8020da0:	7e22      	ldrb	r2, [r4, #24]
 8020da2:	2a6e      	cmp	r2, #110	; 0x6e
 8020da4:	4698      	mov	r8, r3
 8020da6:	4606      	mov	r6, r0
 8020da8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020daa:	f101 0143 	add.w	r1, r1, #67	; 0x43
 8020dae:	f000 80af 	beq.w	8020f10 <_printf_i+0x178>
 8020db2:	d812      	bhi.n	8020dda <_printf_i+0x42>
 8020db4:	2a63      	cmp	r2, #99	; 0x63
 8020db6:	d023      	beq.n	8020e00 <_printf_i+0x68>
 8020db8:	d80a      	bhi.n	8020dd0 <_printf_i+0x38>
 8020dba:	2a00      	cmp	r2, #0
 8020dbc:	f000 80bc 	beq.w	8020f38 <_printf_i+0x1a0>
 8020dc0:	2a58      	cmp	r2, #88	; 0x58
 8020dc2:	f040 80cb 	bne.w	8020f5c <_printf_i+0x1c4>
 8020dc6:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8020dca:	f8df e204 	ldr.w	lr, [pc, #516]	; 8020fd0 <_printf_i+0x238>
 8020dce:	e057      	b.n	8020e80 <_printf_i+0xe8>
 8020dd0:	2a64      	cmp	r2, #100	; 0x64
 8020dd2:	d01e      	beq.n	8020e12 <_printf_i+0x7a>
 8020dd4:	2a69      	cmp	r2, #105	; 0x69
 8020dd6:	d01c      	beq.n	8020e12 <_printf_i+0x7a>
 8020dd8:	e0c0      	b.n	8020f5c <_printf_i+0x1c4>
 8020dda:	2a73      	cmp	r2, #115	; 0x73
 8020ddc:	f000 80b0 	beq.w	8020f40 <_printf_i+0x1a8>
 8020de0:	d809      	bhi.n	8020df6 <_printf_i+0x5e>
 8020de2:	2a6f      	cmp	r2, #111	; 0x6f
 8020de4:	d02e      	beq.n	8020e44 <_printf_i+0xac>
 8020de6:	2a70      	cmp	r2, #112	; 0x70
 8020de8:	f040 80b8 	bne.w	8020f5c <_printf_i+0x1c4>
 8020dec:	6822      	ldr	r2, [r4, #0]
 8020dee:	f042 0220 	orr.w	r2, r2, #32
 8020df2:	6022      	str	r2, [r4, #0]
 8020df4:	e03f      	b.n	8020e76 <_printf_i+0xde>
 8020df6:	2a75      	cmp	r2, #117	; 0x75
 8020df8:	d024      	beq.n	8020e44 <_printf_i+0xac>
 8020dfa:	2a78      	cmp	r2, #120	; 0x78
 8020dfc:	d03b      	beq.n	8020e76 <_printf_i+0xde>
 8020dfe:	e0ad      	b.n	8020f5c <_printf_i+0x1c4>
 8020e00:	681a      	ldr	r2, [r3, #0]
 8020e02:	1d11      	adds	r1, r2, #4
 8020e04:	6019      	str	r1, [r3, #0]
 8020e06:	6813      	ldr	r3, [r2, #0]
 8020e08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8020e0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020e10:	e0a8      	b.n	8020f64 <_printf_i+0x1cc>
 8020e12:	6820      	ldr	r0, [r4, #0]
 8020e14:	681a      	ldr	r2, [r3, #0]
 8020e16:	f010 0f80 	tst.w	r0, #128	; 0x80
 8020e1a:	d002      	beq.n	8020e22 <_printf_i+0x8a>
 8020e1c:	1d10      	adds	r0, r2, #4
 8020e1e:	6018      	str	r0, [r3, #0]
 8020e20:	e008      	b.n	8020e34 <_printf_i+0x9c>
 8020e22:	f010 0f40 	tst.w	r0, #64	; 0x40
 8020e26:	f102 0004 	add.w	r0, r2, #4
 8020e2a:	6018      	str	r0, [r3, #0]
 8020e2c:	d002      	beq.n	8020e34 <_printf_i+0x9c>
 8020e2e:	f9b2 3000 	ldrsh.w	r3, [r2]
 8020e32:	e000      	b.n	8020e36 <_printf_i+0x9e>
 8020e34:	6813      	ldr	r3, [r2, #0]
 8020e36:	2b00      	cmp	r3, #0
 8020e38:	da3e      	bge.n	8020eb8 <_printf_i+0x120>
 8020e3a:	222d      	movs	r2, #45	; 0x2d
 8020e3c:	425b      	negs	r3, r3
 8020e3e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8020e42:	e039      	b.n	8020eb8 <_printf_i+0x120>
 8020e44:	6820      	ldr	r0, [r4, #0]
 8020e46:	681a      	ldr	r2, [r3, #0]
 8020e48:	f010 0f80 	tst.w	r0, #128	; 0x80
 8020e4c:	d002      	beq.n	8020e54 <_printf_i+0xbc>
 8020e4e:	1d10      	adds	r0, r2, #4
 8020e50:	6018      	str	r0, [r3, #0]
 8020e52:	e007      	b.n	8020e64 <_printf_i+0xcc>
 8020e54:	f010 0f40 	tst.w	r0, #64	; 0x40
 8020e58:	f102 0004 	add.w	r0, r2, #4
 8020e5c:	6018      	str	r0, [r3, #0]
 8020e5e:	d001      	beq.n	8020e64 <_printf_i+0xcc>
 8020e60:	8813      	ldrh	r3, [r2, #0]
 8020e62:	e000      	b.n	8020e66 <_printf_i+0xce>
 8020e64:	6813      	ldr	r3, [r2, #0]
 8020e66:	7e22      	ldrb	r2, [r4, #24]
 8020e68:	f8df e164 	ldr.w	lr, [pc, #356]	; 8020fd0 <_printf_i+0x238>
 8020e6c:	2a6f      	cmp	r2, #111	; 0x6f
 8020e6e:	bf0c      	ite	eq
 8020e70:	2208      	moveq	r2, #8
 8020e72:	220a      	movne	r2, #10
 8020e74:	e01c      	b.n	8020eb0 <_printf_i+0x118>
 8020e76:	2278      	movs	r2, #120	; 0x78
 8020e78:	f8df e158 	ldr.w	lr, [pc, #344]	; 8020fd4 <_printf_i+0x23c>
 8020e7c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8020e80:	6822      	ldr	r2, [r4, #0]
 8020e82:	6818      	ldr	r0, [r3, #0]
 8020e84:	f012 0f80 	tst.w	r2, #128	; 0x80
 8020e88:	f100 0504 	add.w	r5, r0, #4
 8020e8c:	601d      	str	r5, [r3, #0]
 8020e8e:	d103      	bne.n	8020e98 <_printf_i+0x100>
 8020e90:	0655      	lsls	r5, r2, #25
 8020e92:	d501      	bpl.n	8020e98 <_printf_i+0x100>
 8020e94:	8803      	ldrh	r3, [r0, #0]
 8020e96:	e000      	b.n	8020e9a <_printf_i+0x102>
 8020e98:	6803      	ldr	r3, [r0, #0]
 8020e9a:	07d0      	lsls	r0, r2, #31
 8020e9c:	bf44      	itt	mi
 8020e9e:	f042 0220 	orrmi.w	r2, r2, #32
 8020ea2:	6022      	strmi	r2, [r4, #0]
 8020ea4:	b91b      	cbnz	r3, 8020eae <_printf_i+0x116>
 8020ea6:	6822      	ldr	r2, [r4, #0]
 8020ea8:	f022 0220 	bic.w	r2, r2, #32
 8020eac:	6022      	str	r2, [r4, #0]
 8020eae:	2210      	movs	r2, #16
 8020eb0:	2000      	movs	r0, #0
 8020eb2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8020eb6:	e002      	b.n	8020ebe <_printf_i+0x126>
 8020eb8:	f8df e114 	ldr.w	lr, [pc, #276]	; 8020fd0 <_printf_i+0x238>
 8020ebc:	220a      	movs	r2, #10
 8020ebe:	6865      	ldr	r5, [r4, #4]
 8020ec0:	60a5      	str	r5, [r4, #8]
 8020ec2:	2d00      	cmp	r5, #0
 8020ec4:	bfa2      	ittt	ge
 8020ec6:	6820      	ldrge	r0, [r4, #0]
 8020ec8:	f020 0004 	bicge.w	r0, r0, #4
 8020ecc:	6020      	strge	r0, [r4, #0]
 8020ece:	b903      	cbnz	r3, 8020ed2 <_printf_i+0x13a>
 8020ed0:	b165      	cbz	r5, 8020eec <_printf_i+0x154>
 8020ed2:	460d      	mov	r5, r1
 8020ed4:	fbb3 f0f2 	udiv	r0, r3, r2
 8020ed8:	fb02 3310 	mls	r3, r2, r0, r3
 8020edc:	f81e 3003 	ldrb.w	r3, [lr, r3]
 8020ee0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8020ee4:	4603      	mov	r3, r0
 8020ee6:	2800      	cmp	r0, #0
 8020ee8:	d1f4      	bne.n	8020ed4 <_printf_i+0x13c>
 8020eea:	e000      	b.n	8020eee <_printf_i+0x156>
 8020eec:	460d      	mov	r5, r1
 8020eee:	2a08      	cmp	r2, #8
 8020ef0:	d10b      	bne.n	8020f0a <_printf_i+0x172>
 8020ef2:	6823      	ldr	r3, [r4, #0]
 8020ef4:	07da      	lsls	r2, r3, #31
 8020ef6:	d508      	bpl.n	8020f0a <_printf_i+0x172>
 8020ef8:	6923      	ldr	r3, [r4, #16]
 8020efa:	6862      	ldr	r2, [r4, #4]
 8020efc:	429a      	cmp	r2, r3
 8020efe:	bfde      	ittt	le
 8020f00:	2330      	movle	r3, #48	; 0x30
 8020f02:	f805 3c01 	strble.w	r3, [r5, #-1]
 8020f06:	f105 35ff 	addle.w	r5, r5, #4294967295
 8020f0a:	1b49      	subs	r1, r1, r5
 8020f0c:	6121      	str	r1, [r4, #16]
 8020f0e:	e02e      	b.n	8020f6e <_printf_i+0x1d6>
 8020f10:	6825      	ldr	r5, [r4, #0]
 8020f12:	681a      	ldr	r2, [r3, #0]
 8020f14:	6960      	ldr	r0, [r4, #20]
 8020f16:	f015 0f80 	tst.w	r5, #128	; 0x80
 8020f1a:	d003      	beq.n	8020f24 <_printf_i+0x18c>
 8020f1c:	1d15      	adds	r5, r2, #4
 8020f1e:	601d      	str	r5, [r3, #0]
 8020f20:	6813      	ldr	r3, [r2, #0]
 8020f22:	e008      	b.n	8020f36 <_printf_i+0x19e>
 8020f24:	f015 0f40 	tst.w	r5, #64	; 0x40
 8020f28:	f102 0504 	add.w	r5, r2, #4
 8020f2c:	601d      	str	r5, [r3, #0]
 8020f2e:	6813      	ldr	r3, [r2, #0]
 8020f30:	d001      	beq.n	8020f36 <_printf_i+0x19e>
 8020f32:	8018      	strh	r0, [r3, #0]
 8020f34:	e000      	b.n	8020f38 <_printf_i+0x1a0>
 8020f36:	6018      	str	r0, [r3, #0]
 8020f38:	2300      	movs	r3, #0
 8020f3a:	6123      	str	r3, [r4, #16]
 8020f3c:	460d      	mov	r5, r1
 8020f3e:	e016      	b.n	8020f6e <_printf_i+0x1d6>
 8020f40:	681a      	ldr	r2, [r3, #0]
 8020f42:	1d11      	adds	r1, r2, #4
 8020f44:	6019      	str	r1, [r3, #0]
 8020f46:	6815      	ldr	r5, [r2, #0]
 8020f48:	6862      	ldr	r2, [r4, #4]
 8020f4a:	4628      	mov	r0, r5
 8020f4c:	2100      	movs	r1, #0
 8020f4e:	f7ff f9cf 	bl	80202f0 <memchr>
 8020f52:	b108      	cbz	r0, 8020f58 <_printf_i+0x1c0>
 8020f54:	1b40      	subs	r0, r0, r5
 8020f56:	6060      	str	r0, [r4, #4]
 8020f58:	6863      	ldr	r3, [r4, #4]
 8020f5a:	e004      	b.n	8020f66 <_printf_i+0x1ce>
 8020f5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020f60:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8020f64:	2301      	movs	r3, #1
 8020f66:	6123      	str	r3, [r4, #16]
 8020f68:	2300      	movs	r3, #0
 8020f6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020f6e:	f8cd 8000 	str.w	r8, [sp]
 8020f72:	4630      	mov	r0, r6
 8020f74:	4621      	mov	r1, r4
 8020f76:	aa03      	add	r2, sp, #12
 8020f78:	463b      	mov	r3, r7
 8020f7a:	f7ff fe97 	bl	8020cac <_printf_common>
 8020f7e:	3001      	adds	r0, #1
 8020f80:	d102      	bne.n	8020f88 <_printf_i+0x1f0>
 8020f82:	f04f 30ff 	mov.w	r0, #4294967295
 8020f86:	e01f      	b.n	8020fc8 <_printf_i+0x230>
 8020f88:	4630      	mov	r0, r6
 8020f8a:	4639      	mov	r1, r7
 8020f8c:	462a      	mov	r2, r5
 8020f8e:	6923      	ldr	r3, [r4, #16]
 8020f90:	47c0      	blx	r8
 8020f92:	3001      	adds	r0, #1
 8020f94:	d0f5      	beq.n	8020f82 <_printf_i+0x1ea>
 8020f96:	6823      	ldr	r3, [r4, #0]
 8020f98:	079b      	lsls	r3, r3, #30
 8020f9a:	d405      	bmi.n	8020fa8 <_printf_i+0x210>
 8020f9c:	68e0      	ldr	r0, [r4, #12]
 8020f9e:	9b03      	ldr	r3, [sp, #12]
 8020fa0:	4298      	cmp	r0, r3
 8020fa2:	bfb8      	it	lt
 8020fa4:	4618      	movlt	r0, r3
 8020fa6:	e00f      	b.n	8020fc8 <_printf_i+0x230>
 8020fa8:	2500      	movs	r5, #0
 8020faa:	68e3      	ldr	r3, [r4, #12]
 8020fac:	9a03      	ldr	r2, [sp, #12]
 8020fae:	1a9b      	subs	r3, r3, r2
 8020fb0:	429d      	cmp	r5, r3
 8020fb2:	daf3      	bge.n	8020f9c <_printf_i+0x204>
 8020fb4:	4630      	mov	r0, r6
 8020fb6:	4639      	mov	r1, r7
 8020fb8:	f104 0219 	add.w	r2, r4, #25
 8020fbc:	2301      	movs	r3, #1
 8020fbe:	47c0      	blx	r8
 8020fc0:	3001      	adds	r0, #1
 8020fc2:	d0de      	beq.n	8020f82 <_printf_i+0x1ea>
 8020fc4:	3501      	adds	r5, #1
 8020fc6:	e7f0      	b.n	8020faa <_printf_i+0x212>
 8020fc8:	b004      	add	sp, #16
 8020fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020fce:	bf00      	nop
 8020fd0:	0802722f 	.word	0x0802722f
 8020fd4:	08027240 	.word	0x08027240

08020fd8 <_scanf_float>:
 8020fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020fdc:	4699      	mov	r9, r3
 8020fde:	688b      	ldr	r3, [r1, #8]
 8020fe0:	4615      	mov	r5, r2
 8020fe2:	1e5a      	subs	r2, r3, #1
 8020fe4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8020fe8:	bf81      	itttt	hi
 8020fea:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8020fee:	eb03 0c02 	addhi.w	ip, r3, r2
 8020ff2:	f240 135d 	movwhi	r3, #349	; 0x15d
 8020ff6:	608b      	strhi	r3, [r1, #8]
 8020ff8:	680b      	ldr	r3, [r1, #0]
 8020ffa:	460f      	mov	r7, r1
 8020ffc:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8021000:	b087      	sub	sp, #28
 8021002:	f847 3b1c 	str.w	r3, [r7], #28
 8021006:	f04f 0b00 	mov.w	fp, #0
 802100a:	4606      	mov	r6, r0
 802100c:	460c      	mov	r4, r1
 802100e:	bf98      	it	ls
 8021010:	f04f 0c00 	movls.w	ip, #0
 8021014:	46b8      	mov	r8, r7
 8021016:	465a      	mov	r2, fp
 8021018:	f8cd b00c 	str.w	fp, [sp, #12]
 802101c:	f8cd b008 	str.w	fp, [sp, #8]
 8021020:	46da      	mov	sl, fp
 8021022:	f8cd b004 	str.w	fp, [sp, #4]
 8021026:	68a1      	ldr	r1, [r4, #8]
 8021028:	2900      	cmp	r1, #0
 802102a:	f000 80ec 	beq.w	8021206 <_scanf_float+0x22e>
 802102e:	682b      	ldr	r3, [r5, #0]
 8021030:	781b      	ldrb	r3, [r3, #0]
 8021032:	2b49      	cmp	r3, #73	; 0x49
 8021034:	d070      	beq.n	8021118 <_scanf_float+0x140>
 8021036:	d816      	bhi.n	8021066 <_scanf_float+0x8e>
 8021038:	2b39      	cmp	r3, #57	; 0x39
 802103a:	d80d      	bhi.n	8021058 <_scanf_float+0x80>
 802103c:	2b31      	cmp	r3, #49	; 0x31
 802103e:	d240      	bcs.n	80210c2 <_scanf_float+0xea>
 8021040:	2b2d      	cmp	r3, #45	; 0x2d
 8021042:	d046      	beq.n	80210d2 <_scanf_float+0xfa>
 8021044:	d802      	bhi.n	802104c <_scanf_float+0x74>
 8021046:	2b2b      	cmp	r3, #43	; 0x2b
 8021048:	d043      	beq.n	80210d2 <_scanf_float+0xfa>
 802104a:	e0dc      	b.n	8021206 <_scanf_float+0x22e>
 802104c:	2b2e      	cmp	r3, #46	; 0x2e
 802104e:	f000 8092 	beq.w	8021176 <_scanf_float+0x19e>
 8021052:	2b30      	cmp	r3, #48	; 0x30
 8021054:	d023      	beq.n	802109e <_scanf_float+0xc6>
 8021056:	e0d6      	b.n	8021206 <_scanf_float+0x22e>
 8021058:	2b45      	cmp	r3, #69	; 0x45
 802105a:	f000 8095 	beq.w	8021188 <_scanf_float+0x1b0>
 802105e:	2b46      	cmp	r3, #70	; 0x46
 8021060:	d077      	beq.n	8021152 <_scanf_float+0x17a>
 8021062:	2b41      	cmp	r3, #65	; 0x41
 8021064:	e00c      	b.n	8021080 <_scanf_float+0xa8>
 8021066:	2b65      	cmp	r3, #101	; 0x65
 8021068:	f000 808e 	beq.w	8021188 <_scanf_float+0x1b0>
 802106c:	d80a      	bhi.n	8021084 <_scanf_float+0xac>
 802106e:	2b54      	cmp	r3, #84	; 0x54
 8021070:	d075      	beq.n	802115e <_scanf_float+0x186>
 8021072:	d802      	bhi.n	802107a <_scanf_float+0xa2>
 8021074:	2b4e      	cmp	r3, #78	; 0x4e
 8021076:	d034      	beq.n	80210e2 <_scanf_float+0x10a>
 8021078:	e0c5      	b.n	8021206 <_scanf_float+0x22e>
 802107a:	2b59      	cmp	r3, #89	; 0x59
 802107c:	d075      	beq.n	802116a <_scanf_float+0x192>
 802107e:	2b61      	cmp	r3, #97	; 0x61
 8021080:	d046      	beq.n	8021110 <_scanf_float+0x138>
 8021082:	e0c0      	b.n	8021206 <_scanf_float+0x22e>
 8021084:	2b6e      	cmp	r3, #110	; 0x6e
 8021086:	d02c      	beq.n	80210e2 <_scanf_float+0x10a>
 8021088:	d804      	bhi.n	8021094 <_scanf_float+0xbc>
 802108a:	2b66      	cmp	r3, #102	; 0x66
 802108c:	d061      	beq.n	8021152 <_scanf_float+0x17a>
 802108e:	2b69      	cmp	r3, #105	; 0x69
 8021090:	d042      	beq.n	8021118 <_scanf_float+0x140>
 8021092:	e0b8      	b.n	8021206 <_scanf_float+0x22e>
 8021094:	2b74      	cmp	r3, #116	; 0x74
 8021096:	d062      	beq.n	802115e <_scanf_float+0x186>
 8021098:	2b79      	cmp	r3, #121	; 0x79
 802109a:	d066      	beq.n	802116a <_scanf_float+0x192>
 802109c:	e0b3      	b.n	8021206 <_scanf_float+0x22e>
 802109e:	6820      	ldr	r0, [r4, #0]
 80210a0:	f410 7f80 	tst.w	r0, #256	; 0x100
 80210a4:	d00d      	beq.n	80210c2 <_scanf_float+0xea>
 80210a6:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80210aa:	6020      	str	r0, [r4, #0]
 80210ac:	f10a 0a01 	add.w	sl, sl, #1
 80210b0:	f1bc 0f00 	cmp.w	ip, #0
 80210b4:	f000 808a 	beq.w	80211cc <_scanf_float+0x1f4>
 80210b8:	3101      	adds	r1, #1
 80210ba:	f10c 3cff 	add.w	ip, ip, #4294967295
 80210be:	60a1      	str	r1, [r4, #8]
 80210c0:	e084      	b.n	80211cc <_scanf_float+0x1f4>
 80210c2:	eb12 0f0b 	cmn.w	r2, fp
 80210c6:	f040 809e 	bne.w	8021206 <_scanf_float+0x22e>
 80210ca:	6821      	ldr	r1, [r4, #0]
 80210cc:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80210d0:	e005      	b.n	80210de <_scanf_float+0x106>
 80210d2:	6821      	ldr	r1, [r4, #0]
 80210d4:	0608      	lsls	r0, r1, #24
 80210d6:	f140 8096 	bpl.w	8021206 <_scanf_float+0x22e>
 80210da:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80210de:	6021      	str	r1, [r4, #0]
 80210e0:	e070      	b.n	80211c4 <_scanf_float+0x1ec>
 80210e2:	b96a      	cbnz	r2, 8021100 <_scanf_float+0x128>
 80210e4:	f1ba 0f00 	cmp.w	sl, #0
 80210e8:	d10c      	bne.n	8021104 <_scanf_float+0x12c>
 80210ea:	6821      	ldr	r1, [r4, #0]
 80210ec:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80210f0:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80210f4:	d106      	bne.n	8021104 <_scanf_float+0x12c>
 80210f6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80210fa:	6021      	str	r1, [r4, #0]
 80210fc:	2201      	movs	r2, #1
 80210fe:	e061      	b.n	80211c4 <_scanf_float+0x1ec>
 8021100:	2a02      	cmp	r2, #2
 8021102:	d05e      	beq.n	80211c2 <_scanf_float+0x1ea>
 8021104:	f1bb 0f01 	cmp.w	fp, #1
 8021108:	d01e      	beq.n	8021148 <_scanf_float+0x170>
 802110a:	f1bb 0f04 	cmp.w	fp, #4
 802110e:	e01a      	b.n	8021146 <_scanf_float+0x16e>
 8021110:	2a01      	cmp	r2, #1
 8021112:	d178      	bne.n	8021206 <_scanf_float+0x22e>
 8021114:	2202      	movs	r2, #2
 8021116:	e055      	b.n	80211c4 <_scanf_float+0x1ec>
 8021118:	f1bb 0f00 	cmp.w	fp, #0
 802111c:	d10e      	bne.n	802113c <_scanf_float+0x164>
 802111e:	f1ba 0f00 	cmp.w	sl, #0
 8021122:	d173      	bne.n	802120c <_scanf_float+0x234>
 8021124:	6821      	ldr	r1, [r4, #0]
 8021126:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 802112a:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 802112e:	d171      	bne.n	8021214 <_scanf_float+0x23c>
 8021130:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8021134:	6021      	str	r1, [r4, #0]
 8021136:	f04f 0b01 	mov.w	fp, #1
 802113a:	e043      	b.n	80211c4 <_scanf_float+0x1ec>
 802113c:	f1bb 0f03 	cmp.w	fp, #3
 8021140:	d002      	beq.n	8021148 <_scanf_float+0x170>
 8021142:	f1bb 0f05 	cmp.w	fp, #5
 8021146:	d15e      	bne.n	8021206 <_scanf_float+0x22e>
 8021148:	f10b 0b01 	add.w	fp, fp, #1
 802114c:	fa5f fb8b 	uxtb.w	fp, fp
 8021150:	e038      	b.n	80211c4 <_scanf_float+0x1ec>
 8021152:	f1bb 0f02 	cmp.w	fp, #2
 8021156:	d156      	bne.n	8021206 <_scanf_float+0x22e>
 8021158:	f04f 0b03 	mov.w	fp, #3
 802115c:	e032      	b.n	80211c4 <_scanf_float+0x1ec>
 802115e:	f1bb 0f06 	cmp.w	fp, #6
 8021162:	d150      	bne.n	8021206 <_scanf_float+0x22e>
 8021164:	f04f 0b07 	mov.w	fp, #7
 8021168:	e02c      	b.n	80211c4 <_scanf_float+0x1ec>
 802116a:	f1bb 0f07 	cmp.w	fp, #7
 802116e:	d14a      	bne.n	8021206 <_scanf_float+0x22e>
 8021170:	f04f 0b08 	mov.w	fp, #8
 8021174:	e026      	b.n	80211c4 <_scanf_float+0x1ec>
 8021176:	6821      	ldr	r1, [r4, #0]
 8021178:	0588      	lsls	r0, r1, #22
 802117a:	d544      	bpl.n	8021206 <_scanf_float+0x22e>
 802117c:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8021180:	6021      	str	r1, [r4, #0]
 8021182:	f8cd a004 	str.w	sl, [sp, #4]
 8021186:	e01d      	b.n	80211c4 <_scanf_float+0x1ec>
 8021188:	6821      	ldr	r1, [r4, #0]
 802118a:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 802118e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8021192:	d004      	beq.n	802119e <_scanf_float+0x1c6>
 8021194:	0548      	lsls	r0, r1, #21
 8021196:	d536      	bpl.n	8021206 <_scanf_float+0x22e>
 8021198:	f1ba 0f00 	cmp.w	sl, #0
 802119c:	d03a      	beq.n	8021214 <_scanf_float+0x23c>
 802119e:	0588      	lsls	r0, r1, #22
 80211a0:	bf5c      	itt	pl
 80211a2:	9801      	ldrpl	r0, [sp, #4]
 80211a4:	f8cd 800c 	strpl.w	r8, [sp, #12]
 80211a8:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80211ac:	bf58      	it	pl
 80211ae:	ebc0 000a 	rsbpl	r0, r0, sl
 80211b2:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80211b6:	bf58      	it	pl
 80211b8:	9002      	strpl	r0, [sp, #8]
 80211ba:	6021      	str	r1, [r4, #0]
 80211bc:	f04f 0a00 	mov.w	sl, #0
 80211c0:	e000      	b.n	80211c4 <_scanf_float+0x1ec>
 80211c2:	2203      	movs	r2, #3
 80211c4:	f888 3000 	strb.w	r3, [r8]
 80211c8:	f108 0801 	add.w	r8, r8, #1
 80211cc:	68a3      	ldr	r3, [r4, #8]
 80211ce:	3b01      	subs	r3, #1
 80211d0:	60a3      	str	r3, [r4, #8]
 80211d2:	6923      	ldr	r3, [r4, #16]
 80211d4:	3301      	adds	r3, #1
 80211d6:	6123      	str	r3, [r4, #16]
 80211d8:	686b      	ldr	r3, [r5, #4]
 80211da:	3b01      	subs	r3, #1
 80211dc:	2b00      	cmp	r3, #0
 80211de:	606b      	str	r3, [r5, #4]
 80211e0:	dd03      	ble.n	80211ea <_scanf_float+0x212>
 80211e2:	682b      	ldr	r3, [r5, #0]
 80211e4:	3301      	adds	r3, #1
 80211e6:	602b      	str	r3, [r5, #0]
 80211e8:	e71d      	b.n	8021026 <_scanf_float+0x4e>
 80211ea:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80211ee:	9205      	str	r2, [sp, #20]
 80211f0:	4630      	mov	r0, r6
 80211f2:	4629      	mov	r1, r5
 80211f4:	f8cd c010 	str.w	ip, [sp, #16]
 80211f8:	4798      	blx	r3
 80211fa:	f8dd c010 	ldr.w	ip, [sp, #16]
 80211fe:	9a05      	ldr	r2, [sp, #20]
 8021200:	2800      	cmp	r0, #0
 8021202:	f43f af10 	beq.w	8021026 <_scanf_float+0x4e>
 8021206:	f1ba 0f00 	cmp.w	sl, #0
 802120a:	d003      	beq.n	8021214 <_scanf_float+0x23c>
 802120c:	6823      	ldr	r3, [r4, #0]
 802120e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8021212:	6023      	str	r3, [r4, #0]
 8021214:	3a01      	subs	r2, #1
 8021216:	2a01      	cmp	r2, #1
 8021218:	d80e      	bhi.n	8021238 <_scanf_float+0x260>
 802121a:	45b8      	cmp	r8, r7
 802121c:	d90a      	bls.n	8021234 <_scanf_float+0x25c>
 802121e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8021222:	f818 1d01 	ldrb.w	r1, [r8, #-1]!
 8021226:	4630      	mov	r0, r6
 8021228:	462a      	mov	r2, r5
 802122a:	4798      	blx	r3
 802122c:	6923      	ldr	r3, [r4, #16]
 802122e:	3b01      	subs	r3, #1
 8021230:	6123      	str	r3, [r4, #16]
 8021232:	e7f2      	b.n	802121a <_scanf_float+0x242>
 8021234:	2501      	movs	r5, #1
 8021236:	e0ae      	b.n	8021396 <_scanf_float+0x3be>
 8021238:	f10b 33ff 	add.w	r3, fp, #4294967295
 802123c:	2b06      	cmp	r3, #6
 802123e:	d822      	bhi.n	8021286 <_scanf_float+0x2ae>
 8021240:	f1bb 0f02 	cmp.w	fp, #2
 8021244:	d912      	bls.n	802126c <_scanf_float+0x294>
 8021246:	f1ab 0b03 	sub.w	fp, fp, #3
 802124a:	fa5f fb8b 	uxtb.w	fp, fp
 802124e:	ebcb 0b08 	rsb	fp, fp, r8
 8021252:	45d8      	cmp	r8, fp
 8021254:	d017      	beq.n	8021286 <_scanf_float+0x2ae>
 8021256:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802125a:	f818 1d01 	ldrb.w	r1, [r8, #-1]!
 802125e:	4630      	mov	r0, r6
 8021260:	462a      	mov	r2, r5
 8021262:	4798      	blx	r3
 8021264:	6923      	ldr	r3, [r4, #16]
 8021266:	3b01      	subs	r3, #1
 8021268:	6123      	str	r3, [r4, #16]
 802126a:	e7f2      	b.n	8021252 <_scanf_float+0x27a>
 802126c:	45b8      	cmp	r8, r7
 802126e:	d9e1      	bls.n	8021234 <_scanf_float+0x25c>
 8021270:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8021274:	f818 1d01 	ldrb.w	r1, [r8, #-1]!
 8021278:	4630      	mov	r0, r6
 802127a:	462a      	mov	r2, r5
 802127c:	4798      	blx	r3
 802127e:	6923      	ldr	r3, [r4, #16]
 8021280:	3b01      	subs	r3, #1
 8021282:	6123      	str	r3, [r4, #16]
 8021284:	e7f2      	b.n	802126c <_scanf_float+0x294>
 8021286:	6823      	ldr	r3, [r4, #0]
 8021288:	05da      	lsls	r2, r3, #23
 802128a:	d52c      	bpl.n	80212e6 <_scanf_float+0x30e>
 802128c:	055b      	lsls	r3, r3, #21
 802128e:	d50c      	bpl.n	80212aa <_scanf_float+0x2d2>
 8021290:	45b8      	cmp	r8, r7
 8021292:	d9cf      	bls.n	8021234 <_scanf_float+0x25c>
 8021294:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8021298:	f818 1d01 	ldrb.w	r1, [r8, #-1]!
 802129c:	4630      	mov	r0, r6
 802129e:	462a      	mov	r2, r5
 80212a0:	4798      	blx	r3
 80212a2:	6923      	ldr	r3, [r4, #16]
 80212a4:	3b01      	subs	r3, #1
 80212a6:	6123      	str	r3, [r4, #16]
 80212a8:	e7f2      	b.n	8021290 <_scanf_float+0x2b8>
 80212aa:	f818 1c01 	ldrb.w	r1, [r8, #-1]
 80212ae:	6923      	ldr	r3, [r4, #16]
 80212b0:	2965      	cmp	r1, #101	; 0x65
 80212b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80212b6:	f108 3bff 	add.w	fp, r8, #4294967295
 80212ba:	6123      	str	r3, [r4, #16]
 80212bc:	d00d      	beq.n	80212da <_scanf_float+0x302>
 80212be:	2945      	cmp	r1, #69	; 0x45
 80212c0:	d00b      	beq.n	80212da <_scanf_float+0x302>
 80212c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80212c6:	4630      	mov	r0, r6
 80212c8:	462a      	mov	r2, r5
 80212ca:	4798      	blx	r3
 80212cc:	6923      	ldr	r3, [r4, #16]
 80212ce:	f818 1c02 	ldrb.w	r1, [r8, #-2]
 80212d2:	3b01      	subs	r3, #1
 80212d4:	f1a8 0b02 	sub.w	fp, r8, #2
 80212d8:	6123      	str	r3, [r4, #16]
 80212da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80212de:	4630      	mov	r0, r6
 80212e0:	462a      	mov	r2, r5
 80212e2:	4798      	blx	r3
 80212e4:	46d8      	mov	r8, fp
 80212e6:	6825      	ldr	r5, [r4, #0]
 80212e8:	f015 0510 	ands.w	r5, r5, #16
 80212ec:	d152      	bne.n	8021394 <_scanf_float+0x3bc>
 80212ee:	f888 5000 	strb.w	r5, [r8]
 80212f2:	6823      	ldr	r3, [r4, #0]
 80212f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80212f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80212fc:	d105      	bne.n	802130a <_scanf_float+0x332>
 80212fe:	9b01      	ldr	r3, [sp, #4]
 8021300:	ebc3 030a 	rsb	r3, r3, sl
 8021304:	425a      	negs	r2, r3
 8021306:	b96b      	cbnz	r3, 8021324 <_scanf_float+0x34c>
 8021308:	e016      	b.n	8021338 <_scanf_float+0x360>
 802130a:	9b02      	ldr	r3, [sp, #8]
 802130c:	b1a3      	cbz	r3, 8021338 <_scanf_float+0x360>
 802130e:	9b03      	ldr	r3, [sp, #12]
 8021310:	462a      	mov	r2, r5
 8021312:	1c59      	adds	r1, r3, #1
 8021314:	4630      	mov	r0, r6
 8021316:	230a      	movs	r3, #10
 8021318:	f000 ffc8 	bl	80222ac <_strtol_r>
 802131c:	9b02      	ldr	r3, [sp, #8]
 802131e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8021322:	1ac2      	subs	r2, r0, r3
 8021324:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8021328:	4598      	cmp	r8, r3
 802132a:	bf28      	it	cs
 802132c:	f504 78b7 	addcs.w	r8, r4, #366	; 0x16e
 8021330:	4640      	mov	r0, r8
 8021332:	491b      	ldr	r1, [pc, #108]	; (80213a0 <_scanf_float+0x3c8>)
 8021334:	f000 f8ea 	bl	802150c <siprintf>
 8021338:	4630      	mov	r0, r6
 802133a:	4639      	mov	r1, r7
 802133c:	2200      	movs	r2, #0
 802133e:	f000 f9a3 	bl	8021688 <_strtod_r>
 8021342:	6822      	ldr	r2, [r4, #0]
 8021344:	f8d9 3000 	ldr.w	r3, [r9]
 8021348:	f012 0f02 	tst.w	r2, #2
 802134c:	4606      	mov	r6, r0
 802134e:	460f      	mov	r7, r1
 8021350:	d003      	beq.n	802135a <_scanf_float+0x382>
 8021352:	1d1a      	adds	r2, r3, #4
 8021354:	f8c9 2000 	str.w	r2, [r9]
 8021358:	e006      	b.n	8021368 <_scanf_float+0x390>
 802135a:	f012 0f04 	tst.w	r2, #4
 802135e:	f103 0204 	add.w	r2, r3, #4
 8021362:	f8c9 2000 	str.w	r2, [r9]
 8021366:	d003      	beq.n	8021370 <_scanf_float+0x398>
 8021368:	681b      	ldr	r3, [r3, #0]
 802136a:	e9c3 6700 	strd	r6, r7, [r3]
 802136e:	e00d      	b.n	802138c <_scanf_float+0x3b4>
 8021370:	f8d3 8000 	ldr.w	r8, [r3]
 8021374:	f000 f816 	bl	80213a4 <__fpclassifyd>
 8021378:	b910      	cbnz	r0, 8021380 <_scanf_float+0x3a8>
 802137a:	f000 f84d 	bl	8021418 <nanf>
 802137e:	e003      	b.n	8021388 <_scanf_float+0x3b0>
 8021380:	4630      	mov	r0, r6
 8021382:	4639      	mov	r1, r7
 8021384:	f003 fd18 	bl	8024db8 <__aeabi_d2f>
 8021388:	f8c8 0000 	str.w	r0, [r8]
 802138c:	68e3      	ldr	r3, [r4, #12]
 802138e:	3301      	adds	r3, #1
 8021390:	60e3      	str	r3, [r4, #12]
 8021392:	e000      	b.n	8021396 <_scanf_float+0x3be>
 8021394:	2500      	movs	r5, #0
 8021396:	4628      	mov	r0, r5
 8021398:	b007      	add	sp, #28
 802139a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802139e:	bf00      	nop
 80213a0:	08027251 	.word	0x08027251

080213a4 <__fpclassifyd>:
 80213a4:	460a      	mov	r2, r1
 80213a6:	f031 4100 	bics.w	r1, r1, #2147483648	; 0x80000000
 80213aa:	b510      	push	{r4, lr}
 80213ac:	4603      	mov	r3, r0
 80213ae:	d01b      	beq.n	80213e8 <__fpclassifyd+0x44>
 80213b0:	480f      	ldr	r0, [pc, #60]	; (80213f0 <__fpclassifyd+0x4c>)
 80213b2:	f5a2 1480 	sub.w	r4, r2, #1048576	; 0x100000
 80213b6:	4284      	cmp	r4, r0
 80213b8:	d910      	bls.n	80213dc <__fpclassifyd+0x38>
 80213ba:	f102 42ff 	add.w	r2, r2, #2139095040	; 0x7f800000
 80213be:	480c      	ldr	r0, [pc, #48]	; (80213f0 <__fpclassifyd+0x4c>)
 80213c0:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 80213c4:	4282      	cmp	r2, r0
 80213c6:	d909      	bls.n	80213dc <__fpclassifyd+0x38>
 80213c8:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80213cc:	d308      	bcc.n	80213e0 <__fpclassifyd+0x3c>
 80213ce:	4a09      	ldr	r2, [pc, #36]	; (80213f4 <__fpclassifyd+0x50>)
 80213d0:	4291      	cmp	r1, r2
 80213d2:	d107      	bne.n	80213e4 <__fpclassifyd+0x40>
 80213d4:	fab3 f083 	clz	r0, r3
 80213d8:	0940      	lsrs	r0, r0, #5
 80213da:	bd10      	pop	{r4, pc}
 80213dc:	2004      	movs	r0, #4
 80213de:	bd10      	pop	{r4, pc}
 80213e0:	2003      	movs	r0, #3
 80213e2:	bd10      	pop	{r4, pc}
 80213e4:	2000      	movs	r0, #0
 80213e6:	bd10      	pop	{r4, pc}
 80213e8:	2800      	cmp	r0, #0
 80213ea:	d1e6      	bne.n	80213ba <__fpclassifyd+0x16>
 80213ec:	2002      	movs	r0, #2
 80213ee:	bd10      	pop	{r4, pc}
 80213f0:	7fdfffff 	.word	0x7fdfffff
 80213f4:	7ff00000 	.word	0x7ff00000

080213f8 <_sbrk_r>:
 80213f8:	b538      	push	{r3, r4, r5, lr}
 80213fa:	4c06      	ldr	r4, [pc, #24]	; (8021414 <_sbrk_r+0x1c>)
 80213fc:	2300      	movs	r3, #0
 80213fe:	4605      	mov	r5, r0
 8021400:	4608      	mov	r0, r1
 8021402:	6023      	str	r3, [r4, #0]
 8021404:	f7fc fafc 	bl	801da00 <_sbrk>
 8021408:	1c43      	adds	r3, r0, #1
 802140a:	d102      	bne.n	8021412 <_sbrk_r+0x1a>
 802140c:	6823      	ldr	r3, [r4, #0]
 802140e:	b103      	cbz	r3, 8021412 <_sbrk_r+0x1a>
 8021410:	602b      	str	r3, [r5, #0]
 8021412:	bd38      	pop	{r3, r4, r5, pc}
 8021414:	20001a8c 	.word	0x20001a8c

08021418 <nanf>:
 8021418:	4800      	ldr	r0, [pc, #0]	; (802141c <nanf+0x4>)
 802141a:	4770      	bx	lr
 802141c:	7fc00000 	.word	0x7fc00000

08021420 <_raise_r>:
 8021420:	291f      	cmp	r1, #31
 8021422:	b538      	push	{r3, r4, r5, lr}
 8021424:	4604      	mov	r4, r0
 8021426:	460d      	mov	r5, r1
 8021428:	d904      	bls.n	8021434 <_raise_r+0x14>
 802142a:	2316      	movs	r3, #22
 802142c:	6003      	str	r3, [r0, #0]
 802142e:	f04f 30ff 	mov.w	r0, #4294967295
 8021432:	bd38      	pop	{r3, r4, r5, pc}
 8021434:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8021436:	b112      	cbz	r2, 802143e <_raise_r+0x1e>
 8021438:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802143c:	b94b      	cbnz	r3, 8021452 <_raise_r+0x32>
 802143e:	4620      	mov	r0, r4
 8021440:	f000 f830 	bl	80214a4 <_getpid_r>
 8021444:	462a      	mov	r2, r5
 8021446:	4601      	mov	r1, r0
 8021448:	4620      	mov	r0, r4
 802144a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802144e:	f000 b817 	b.w	8021480 <_kill_r>
 8021452:	2b01      	cmp	r3, #1
 8021454:	d00a      	beq.n	802146c <_raise_r+0x4c>
 8021456:	1c59      	adds	r1, r3, #1
 8021458:	d103      	bne.n	8021462 <_raise_r+0x42>
 802145a:	2316      	movs	r3, #22
 802145c:	6003      	str	r3, [r0, #0]
 802145e:	2001      	movs	r0, #1
 8021460:	bd38      	pop	{r3, r4, r5, pc}
 8021462:	2400      	movs	r4, #0
 8021464:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8021468:	4628      	mov	r0, r5
 802146a:	4798      	blx	r3
 802146c:	2000      	movs	r0, #0
 802146e:	bd38      	pop	{r3, r4, r5, pc}

08021470 <raise>:
 8021470:	4b02      	ldr	r3, [pc, #8]	; (802147c <raise+0xc>)
 8021472:	4601      	mov	r1, r0
 8021474:	6818      	ldr	r0, [r3, #0]
 8021476:	f7ff bfd3 	b.w	8021420 <_raise_r>
 802147a:	bf00      	nop
 802147c:	20001788 	.word	0x20001788

08021480 <_kill_r>:
 8021480:	b538      	push	{r3, r4, r5, lr}
 8021482:	4c07      	ldr	r4, [pc, #28]	; (80214a0 <_kill_r+0x20>)
 8021484:	2300      	movs	r3, #0
 8021486:	4605      	mov	r5, r0
 8021488:	4608      	mov	r0, r1
 802148a:	4611      	mov	r1, r2
 802148c:	6023      	str	r3, [r4, #0]
 802148e:	f005 fa83 	bl	8026998 <_kill>
 8021492:	1c43      	adds	r3, r0, #1
 8021494:	d102      	bne.n	802149c <_kill_r+0x1c>
 8021496:	6823      	ldr	r3, [r4, #0]
 8021498:	b103      	cbz	r3, 802149c <_kill_r+0x1c>
 802149a:	602b      	str	r3, [r5, #0]
 802149c:	bd38      	pop	{r3, r4, r5, pc}
 802149e:	bf00      	nop
 80214a0:	20001a8c 	.word	0x20001a8c

080214a4 <_getpid_r>:
 80214a4:	f005 ba70 	b.w	8026988 <_getpid>

080214a8 <sniprintf>:
 80214a8:	b40c      	push	{r2, r3}
 80214aa:	b530      	push	{r4, r5, lr}
 80214ac:	4b16      	ldr	r3, [pc, #88]	; (8021508 <sniprintf+0x60>)
 80214ae:	1e0c      	subs	r4, r1, #0
 80214b0:	b09d      	sub	sp, #116	; 0x74
 80214b2:	681d      	ldr	r5, [r3, #0]
 80214b4:	da04      	bge.n	80214c0 <sniprintf+0x18>
 80214b6:	238b      	movs	r3, #139	; 0x8b
 80214b8:	602b      	str	r3, [r5, #0]
 80214ba:	f04f 30ff 	mov.w	r0, #4294967295
 80214be:	e01e      	b.n	80214fe <sniprintf+0x56>
 80214c0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80214c4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80214c8:	bf14      	ite	ne
 80214ca:	f104 33ff 	addne.w	r3, r4, #4294967295
 80214ce:	4623      	moveq	r3, r4
 80214d0:	9304      	str	r3, [sp, #16]
 80214d2:	9307      	str	r3, [sp, #28]
 80214d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80214d8:	9002      	str	r0, [sp, #8]
 80214da:	9006      	str	r0, [sp, #24]
 80214dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80214e0:	4628      	mov	r0, r5
 80214e2:	ab21      	add	r3, sp, #132	; 0x84
 80214e4:	a902      	add	r1, sp, #8
 80214e6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80214e8:	9301      	str	r3, [sp, #4]
 80214ea:	f002 fe9b 	bl	8024224 <_svfiprintf_r>
 80214ee:	1c43      	adds	r3, r0, #1
 80214f0:	bfbc      	itt	lt
 80214f2:	238b      	movlt	r3, #139	; 0x8b
 80214f4:	602b      	strlt	r3, [r5, #0]
 80214f6:	b114      	cbz	r4, 80214fe <sniprintf+0x56>
 80214f8:	9b02      	ldr	r3, [sp, #8]
 80214fa:	2200      	movs	r2, #0
 80214fc:	701a      	strb	r2, [r3, #0]
 80214fe:	b01d      	add	sp, #116	; 0x74
 8021500:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021504:	b002      	add	sp, #8
 8021506:	4770      	bx	lr
 8021508:	20001788 	.word	0x20001788

0802150c <siprintf>:
 802150c:	b40e      	push	{r1, r2, r3}
 802150e:	b500      	push	{lr}
 8021510:	b09c      	sub	sp, #112	; 0x70
 8021512:	f44f 7102 	mov.w	r1, #520	; 0x208
 8021516:	f8ad 1014 	strh.w	r1, [sp, #20]
 802151a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802151e:	9104      	str	r1, [sp, #16]
 8021520:	9107      	str	r1, [sp, #28]
 8021522:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8021526:	ab1d      	add	r3, sp, #116	; 0x74
 8021528:	f8ad 1016 	strh.w	r1, [sp, #22]
 802152c:	4908      	ldr	r1, [pc, #32]	; (8021550 <siprintf+0x44>)
 802152e:	f853 2b04 	ldr.w	r2, [r3], #4
 8021532:	9002      	str	r0, [sp, #8]
 8021534:	9006      	str	r0, [sp, #24]
 8021536:	6808      	ldr	r0, [r1, #0]
 8021538:	9301      	str	r3, [sp, #4]
 802153a:	a902      	add	r1, sp, #8
 802153c:	f002 fe72 	bl	8024224 <_svfiprintf_r>
 8021540:	9b02      	ldr	r3, [sp, #8]
 8021542:	2200      	movs	r2, #0
 8021544:	701a      	strb	r2, [r3, #0]
 8021546:	b01c      	add	sp, #112	; 0x70
 8021548:	f85d eb04 	ldr.w	lr, [sp], #4
 802154c:	b003      	add	sp, #12
 802154e:	4770      	bx	lr
 8021550:	20001788 	.word	0x20001788

08021554 <__sread>:
 8021554:	b510      	push	{r4, lr}
 8021556:	460c      	mov	r4, r1
 8021558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802155c:	f002 ff54 	bl	8024408 <_read_r>
 8021560:	2800      	cmp	r0, #0
 8021562:	bfab      	itete	ge
 8021564:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8021566:	89a3      	ldrhlt	r3, [r4, #12]
 8021568:	181b      	addge	r3, r3, r0
 802156a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802156e:	bfac      	ite	ge
 8021570:	6563      	strge	r3, [r4, #84]	; 0x54
 8021572:	81a3      	strhlt	r3, [r4, #12]
 8021574:	bd10      	pop	{r4, pc}

08021576 <__swrite>:
 8021576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802157a:	461d      	mov	r5, r3
 802157c:	898b      	ldrh	r3, [r1, #12]
 802157e:	05db      	lsls	r3, r3, #23
 8021580:	4607      	mov	r7, r0
 8021582:	460c      	mov	r4, r1
 8021584:	4616      	mov	r6, r2
 8021586:	d505      	bpl.n	8021594 <__swrite+0x1e>
 8021588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802158c:	2200      	movs	r2, #0
 802158e:	2302      	movs	r3, #2
 8021590:	f002 f956 	bl	8023840 <_lseek_r>
 8021594:	89a3      	ldrh	r3, [r4, #12]
 8021596:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802159a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802159e:	81a3      	strh	r3, [r4, #12]
 80215a0:	4638      	mov	r0, r7
 80215a2:	4632      	mov	r2, r6
 80215a4:	462b      	mov	r3, r5
 80215a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80215aa:	f000 bf59 	b.w	8022460 <_write_r>

080215ae <__sseek>:
 80215ae:	b510      	push	{r4, lr}
 80215b0:	460c      	mov	r4, r1
 80215b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80215b6:	f002 f943 	bl	8023840 <_lseek_r>
 80215ba:	1c43      	adds	r3, r0, #1
 80215bc:	89a3      	ldrh	r3, [r4, #12]
 80215be:	bf15      	itete	ne
 80215c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80215c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80215c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80215ca:	81a3      	strheq	r3, [r4, #12]
 80215cc:	bf18      	it	ne
 80215ce:	81a3      	strhne	r3, [r4, #12]
 80215d0:	bd10      	pop	{r4, pc}

080215d2 <__sclose>:
 80215d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80215d6:	f000 bfc1 	b.w	802255c <_close_r>

080215da <strlen>:
 80215da:	4603      	mov	r3, r0
 80215dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80215e0:	2a00      	cmp	r2, #0
 80215e2:	d1fb      	bne.n	80215dc <strlen+0x2>
 80215e4:	1a18      	subs	r0, r3, r0
 80215e6:	3801      	subs	r0, #1
 80215e8:	4770      	bx	lr

080215ea <strncmp>:
 80215ea:	b570      	push	{r4, r5, r6, lr}
 80215ec:	b1aa      	cbz	r2, 802161a <strncmp+0x30>
 80215ee:	1e45      	subs	r5, r0, #1
 80215f0:	3901      	subs	r1, #1
 80215f2:	786b      	ldrb	r3, [r5, #1]
 80215f4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80215f8:	42a3      	cmp	r3, r4
 80215fa:	f105 0601 	add.w	r6, r5, #1
 80215fe:	d106      	bne.n	802160e <strncmp+0x24>
 8021600:	f06f 0401 	mvn.w	r4, #1
 8021604:	1b64      	subs	r4, r4, r5
 8021606:	4414      	add	r4, r2
 8021608:	42e0      	cmn	r0, r4
 802160a:	d102      	bne.n	8021612 <strncmp+0x28>
 802160c:	461c      	mov	r4, r3
 802160e:	1b18      	subs	r0, r3, r4
 8021610:	bd70      	pop	{r4, r5, r6, pc}
 8021612:	4635      	mov	r5, r6
 8021614:	2b00      	cmp	r3, #0
 8021616:	d1ec      	bne.n	80215f2 <strncmp+0x8>
 8021618:	e7f8      	b.n	802160c <strncmp+0x22>
 802161a:	4610      	mov	r0, r2
 802161c:	bd70      	pop	{r4, r5, r6, pc}

0802161e <match>:
 802161e:	b530      	push	{r4, r5, lr}
 8021620:	6803      	ldr	r3, [r0, #0]
 8021622:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021626:	3301      	adds	r3, #1
 8021628:	b14c      	cbz	r4, 802163e <match+0x20>
 802162a:	781a      	ldrb	r2, [r3, #0]
 802162c:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8021630:	2d19      	cmp	r5, #25
 8021632:	bf98      	it	ls
 8021634:	3220      	addls	r2, #32
 8021636:	42a2      	cmp	r2, r4
 8021638:	d0f3      	beq.n	8021622 <match+0x4>
 802163a:	2000      	movs	r0, #0
 802163c:	bd30      	pop	{r4, r5, pc}
 802163e:	6003      	str	r3, [r0, #0]
 8021640:	2001      	movs	r0, #1
 8021642:	bd30      	pop	{r4, r5, pc}

08021644 <sulp>:
 8021644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021648:	460f      	mov	r7, r1
 802164a:	4690      	mov	r8, r2
 802164c:	f002 fc40 	bl	8023ed0 <__ulp>
 8021650:	4604      	mov	r4, r0
 8021652:	460d      	mov	r5, r1
 8021654:	f1b8 0f00 	cmp.w	r8, #0
 8021658:	d011      	beq.n	802167e <sulp+0x3a>
 802165a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 802165e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8021662:	2b00      	cmp	r3, #0
 8021664:	dd0b      	ble.n	802167e <sulp+0x3a>
 8021666:	051b      	lsls	r3, r3, #20
 8021668:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 802166c:	2400      	movs	r4, #0
 802166e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8021672:	4622      	mov	r2, r4
 8021674:	462b      	mov	r3, r5
 8021676:	f003 f8bd 	bl	80247f4 <__aeabi_dmul>
 802167a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802167e:	4620      	mov	r0, r4
 8021680:	4629      	mov	r1, r5
 8021682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08021688 <_strtod_r>:
 8021688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802168c:	b09f      	sub	sp, #124	; 0x7c
 802168e:	2300      	movs	r3, #0
 8021690:	4683      	mov	fp, r0
 8021692:	468a      	mov	sl, r1
 8021694:	9216      	str	r2, [sp, #88]	; 0x58
 8021696:	931a      	str	r3, [sp, #104]	; 0x68
 8021698:	f04f 0800 	mov.w	r8, #0
 802169c:	f04f 0900 	mov.w	r9, #0
 80216a0:	9119      	str	r1, [sp, #100]	; 0x64
 80216a2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80216a4:	781a      	ldrb	r2, [r3, #0]
 80216a6:	2a0d      	cmp	r2, #13
 80216a8:	d805      	bhi.n	80216b6 <_strtod_r+0x2e>
 80216aa:	2a09      	cmp	r2, #9
 80216ac:	d213      	bcs.n	80216d6 <_strtod_r+0x4e>
 80216ae:	2a00      	cmp	r2, #0
 80216b0:	f000 81be 	beq.w	8021a30 <_strtod_r+0x3a8>
 80216b4:	e012      	b.n	80216dc <_strtod_r+0x54>
 80216b6:	2a2b      	cmp	r2, #43	; 0x2b
 80216b8:	d006      	beq.n	80216c8 <_strtod_r+0x40>
 80216ba:	2a2d      	cmp	r2, #45	; 0x2d
 80216bc:	d002      	beq.n	80216c4 <_strtod_r+0x3c>
 80216be:	2a20      	cmp	r2, #32
 80216c0:	d10c      	bne.n	80216dc <_strtod_r+0x54>
 80216c2:	e008      	b.n	80216d6 <_strtod_r+0x4e>
 80216c4:	2201      	movs	r2, #1
 80216c6:	e000      	b.n	80216ca <_strtod_r+0x42>
 80216c8:	2200      	movs	r2, #0
 80216ca:	9209      	str	r2, [sp, #36]	; 0x24
 80216cc:	1c5a      	adds	r2, r3, #1
 80216ce:	9219      	str	r2, [sp, #100]	; 0x64
 80216d0:	785b      	ldrb	r3, [r3, #1]
 80216d2:	b92b      	cbnz	r3, 80216e0 <_strtod_r+0x58>
 80216d4:	e1ac      	b.n	8021a30 <_strtod_r+0x3a8>
 80216d6:	3301      	adds	r3, #1
 80216d8:	9319      	str	r3, [sp, #100]	; 0x64
 80216da:	e7e2      	b.n	80216a2 <_strtod_r+0x1a>
 80216dc:	2300      	movs	r3, #0
 80216de:	9309      	str	r3, [sp, #36]	; 0x24
 80216e0:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80216e2:	7823      	ldrb	r3, [r4, #0]
 80216e4:	2b30      	cmp	r3, #48	; 0x30
 80216e6:	d15c      	bne.n	80217a2 <_strtod_r+0x11a>
 80216e8:	7863      	ldrb	r3, [r4, #1]
 80216ea:	2b58      	cmp	r3, #88	; 0x58
 80216ec:	d001      	beq.n	80216f2 <_strtod_r+0x6a>
 80216ee:	2b78      	cmp	r3, #120	; 0x78
 80216f0:	d14c      	bne.n	802178c <_strtod_r+0x104>
 80216f2:	ab1a      	add	r3, sp, #104	; 0x68
 80216f4:	9300      	str	r3, [sp, #0]
 80216f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80216f8:	9301      	str	r3, [sp, #4]
 80216fa:	4658      	mov	r0, fp
 80216fc:	a919      	add	r1, sp, #100	; 0x64
 80216fe:	4ab1      	ldr	r2, [pc, #708]	; (80219c4 <_strtod_r+0x33c>)
 8021700:	ab1b      	add	r3, sp, #108	; 0x6c
 8021702:	f001 fdd8 	bl	80232b6 <__gethex>
 8021706:	f010 0607 	ands.w	r6, r0, #7
 802170a:	4605      	mov	r5, r0
 802170c:	f000 859b 	beq.w	8022246 <_strtod_r+0xbbe>
 8021710:	2e06      	cmp	r6, #6
 8021712:	d105      	bne.n	8021720 <_strtod_r+0x98>
 8021714:	3401      	adds	r4, #1
 8021716:	2300      	movs	r3, #0
 8021718:	9419      	str	r4, [sp, #100]	; 0x64
 802171a:	9309      	str	r3, [sp, #36]	; 0x24
 802171c:	f000 bd93 	b.w	8022246 <_strtod_r+0xbbe>
 8021720:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8021722:	b13a      	cbz	r2, 8021734 <_strtod_r+0xac>
 8021724:	a81c      	add	r0, sp, #112	; 0x70
 8021726:	2135      	movs	r1, #53	; 0x35
 8021728:	f002 fcc0 	bl	80240ac <__copybits>
 802172c:	4658      	mov	r0, fp
 802172e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8021730:	f002 f936 	bl	80239a0 <_Bfree>
 8021734:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8021736:	2e06      	cmp	r6, #6
 8021738:	d821      	bhi.n	802177e <_strtod_r+0xf6>
 802173a:	e8df f006 	tbb	[pc, r6]
 802173e:	0d04      	.short	0x0d04
 8021740:	0d1c1708 	.word	0x0d1c1708
 8021744:	04          	.byte	0x04
 8021745:	00          	.byte	0x00
 8021746:	f04f 0900 	mov.w	r9, #0
 802174a:	46c8      	mov	r8, r9
 802174c:	e017      	b.n	802177e <_strtod_r+0xf6>
 802174e:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8021752:	f8dd 9074 	ldr.w	r9, [sp, #116]	; 0x74
 8021756:	e012      	b.n	802177e <_strtod_r+0xf6>
 8021758:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802175a:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 802175e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8021762:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8021766:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 802176a:	e008      	b.n	802177e <_strtod_r+0xf6>
 802176c:	f8df 9258 	ldr.w	r9, [pc, #600]	; 80219c8 <_strtod_r+0x340>
 8021770:	f04f 0800 	mov.w	r8, #0
 8021774:	e003      	b.n	802177e <_strtod_r+0xf6>
 8021776:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 802177a:	f04f 38ff 	mov.w	r8, #4294967295
 802177e:	0729      	lsls	r1, r5, #28
 8021780:	f140 8561 	bpl.w	8022246 <_strtod_r+0xbbe>
 8021784:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8021788:	f000 bd5d 	b.w	8022246 <_strtod_r+0xbbe>
 802178c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802178e:	1c5a      	adds	r2, r3, #1
 8021790:	9219      	str	r2, [sp, #100]	; 0x64
 8021792:	785b      	ldrb	r3, [r3, #1]
 8021794:	2b30      	cmp	r3, #48	; 0x30
 8021796:	d0f9      	beq.n	802178c <_strtod_r+0x104>
 8021798:	2b00      	cmp	r3, #0
 802179a:	f000 8554 	beq.w	8022246 <_strtod_r+0xbbe>
 802179e:	2301      	movs	r3, #1
 80217a0:	e000      	b.n	80217a4 <_strtod_r+0x11c>
 80217a2:	2300      	movs	r3, #0
 80217a4:	2600      	movs	r6, #0
 80217a6:	9304      	str	r3, [sp, #16]
 80217a8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80217aa:	9305      	str	r3, [sp, #20]
 80217ac:	9603      	str	r6, [sp, #12]
 80217ae:	4635      	mov	r5, r6
 80217b0:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80217b2:	7827      	ldrb	r7, [r4, #0]
 80217b4:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80217b8:	b2da      	uxtb	r2, r3
 80217ba:	2a09      	cmp	r2, #9
 80217bc:	d810      	bhi.n	80217e0 <_strtod_r+0x158>
 80217be:	2d08      	cmp	r5, #8
 80217c0:	bfd8      	it	le
 80217c2:	9903      	ldrle	r1, [sp, #12]
 80217c4:	f04f 020a 	mov.w	r2, #10
 80217c8:	bfd8      	it	le
 80217ca:	fb02 3301 	mlale	r3, r2, r1, r3
 80217ce:	f104 0401 	add.w	r4, r4, #1
 80217d2:	bfd4      	ite	le
 80217d4:	9303      	strle	r3, [sp, #12]
 80217d6:	fb02 3606 	mlagt	r6, r2, r6, r3
 80217da:	3501      	adds	r5, #1
 80217dc:	9419      	str	r4, [sp, #100]	; 0x64
 80217de:	e7e7      	b.n	80217b0 <_strtod_r+0x128>
 80217e0:	4658      	mov	r0, fp
 80217e2:	f002 f829 	bl	8023838 <_localeconv_r>
 80217e6:	6801      	ldr	r1, [r0, #0]
 80217e8:	9102      	str	r1, [sp, #8]
 80217ea:	4658      	mov	r0, fp
 80217ec:	f002 f824 	bl	8023838 <_localeconv_r>
 80217f0:	6800      	ldr	r0, [r0, #0]
 80217f2:	f7ff fef2 	bl	80215da <strlen>
 80217f6:	9902      	ldr	r1, [sp, #8]
 80217f8:	4602      	mov	r2, r0
 80217fa:	4620      	mov	r0, r4
 80217fc:	f7ff fef5 	bl	80215ea <strncmp>
 8021800:	b128      	cbz	r0, 802180e <_strtod_r+0x186>
 8021802:	2000      	movs	r0, #0
 8021804:	463b      	mov	r3, r7
 8021806:	462c      	mov	r4, r5
 8021808:	9002      	str	r0, [sp, #8]
 802180a:	4607      	mov	r7, r0
 802180c:	e05d      	b.n	80218ca <_strtod_r+0x242>
 802180e:	9002      	str	r0, [sp, #8]
 8021810:	4658      	mov	r0, fp
 8021812:	f002 f811 	bl	8023838 <_localeconv_r>
 8021816:	6800      	ldr	r0, [r0, #0]
 8021818:	f7ff fedf 	bl	80215da <strlen>
 802181c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802181e:	9902      	ldr	r1, [sp, #8]
 8021820:	181a      	adds	r2, r3, r0
 8021822:	9219      	str	r2, [sp, #100]	; 0x64
 8021824:	5c1b      	ldrb	r3, [r3, r0]
 8021826:	2d00      	cmp	r5, #0
 8021828:	d147      	bne.n	80218ba <_strtod_r+0x232>
 802182a:	4628      	mov	r0, r5
 802182c:	2b30      	cmp	r3, #48	; 0x30
 802182e:	d105      	bne.n	802183c <_strtod_r+0x1b4>
 8021830:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8021832:	1c5a      	adds	r2, r3, #1
 8021834:	9219      	str	r2, [sp, #100]	; 0x64
 8021836:	3001      	adds	r0, #1
 8021838:	785b      	ldrb	r3, [r3, #1]
 802183a:	e7f7      	b.n	802182c <_strtod_r+0x1a4>
 802183c:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8021840:	2a08      	cmp	r2, #8
 8021842:	d848      	bhi.n	80218d6 <_strtod_r+0x24e>
 8021844:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8021846:	9002      	str	r0, [sp, #8]
 8021848:	2000      	movs	r0, #0
 802184a:	9205      	str	r2, [sp, #20]
 802184c:	4604      	mov	r4, r0
 802184e:	3b30      	subs	r3, #48	; 0x30
 8021850:	f100 0101 	add.w	r1, r0, #1
 8021854:	d02b      	beq.n	80218ae <_strtod_r+0x226>
 8021856:	9a02      	ldr	r2, [sp, #8]
 8021858:	440a      	add	r2, r1
 802185a:	9202      	str	r2, [sp, #8]
 802185c:	1907      	adds	r7, r0, r4
 802185e:	4621      	mov	r1, r4
 8021860:	42b9      	cmp	r1, r7
 8021862:	d013      	beq.n	802188c <_strtod_r+0x204>
 8021864:	3101      	adds	r1, #1
 8021866:	f101 3eff 	add.w	lr, r1, #4294967295
 802186a:	f1be 0f08 	cmp.w	lr, #8
 802186e:	dc06      	bgt.n	802187e <_strtod_r+0x1f6>
 8021870:	9a03      	ldr	r2, [sp, #12]
 8021872:	f04f 0e0a 	mov.w	lr, #10
 8021876:	fb0e f202 	mul.w	r2, lr, r2
 802187a:	9203      	str	r2, [sp, #12]
 802187c:	e7f0      	b.n	8021860 <_strtod_r+0x1d8>
 802187e:	2910      	cmp	r1, #16
 8021880:	bfdc      	itt	le
 8021882:	f04f 0e0a 	movle.w	lr, #10
 8021886:	fb0e f606 	mulle.w	r6, lr, r6
 802188a:	e7e9      	b.n	8021860 <_strtod_r+0x1d8>
 802188c:	4420      	add	r0, r4
 802188e:	2808      	cmp	r0, #8
 8021890:	f100 0401 	add.w	r4, r0, #1
 8021894:	dc05      	bgt.n	80218a2 <_strtod_r+0x21a>
 8021896:	9a03      	ldr	r2, [sp, #12]
 8021898:	210a      	movs	r1, #10
 802189a:	fb01 3302 	mla	r3, r1, r2, r3
 802189e:	9303      	str	r3, [sp, #12]
 80218a0:	e004      	b.n	80218ac <_strtod_r+0x224>
 80218a2:	2c10      	cmp	r4, #16
 80218a4:	bfdc      	itt	le
 80218a6:	210a      	movle	r1, #10
 80218a8:	fb01 3606 	mlale	r6, r1, r6, r3
 80218ac:	2100      	movs	r1, #0
 80218ae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80218b0:	1c58      	adds	r0, r3, #1
 80218b2:	9019      	str	r0, [sp, #100]	; 0x64
 80218b4:	785b      	ldrb	r3, [r3, #1]
 80218b6:	4608      	mov	r0, r1
 80218b8:	e002      	b.n	80218c0 <_strtod_r+0x238>
 80218ba:	462c      	mov	r4, r5
 80218bc:	4608      	mov	r0, r1
 80218be:	9102      	str	r1, [sp, #8]
 80218c0:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80218c4:	2909      	cmp	r1, #9
 80218c6:	d9c2      	bls.n	802184e <_strtod_r+0x1c6>
 80218c8:	2701      	movs	r7, #1
 80218ca:	2b65      	cmp	r3, #101	; 0x65
 80218cc:	d001      	beq.n	80218d2 <_strtod_r+0x24a>
 80218ce:	2b45      	cmp	r3, #69	; 0x45
 80218d0:	d160      	bne.n	8021994 <_strtod_r+0x30c>
 80218d2:	b974      	cbnz	r4, 80218f2 <_strtod_r+0x26a>
 80218d4:	e005      	b.n	80218e2 <_strtod_r+0x25a>
 80218d6:	2b65      	cmp	r3, #101	; 0x65
 80218d8:	f040 84c3 	bne.w	8022262 <_strtod_r+0xbda>
 80218dc:	2300      	movs	r3, #0
 80218de:	9302      	str	r3, [sp, #8]
 80218e0:	2701      	movs	r7, #1
 80218e2:	b928      	cbnz	r0, 80218f0 <_strtod_r+0x268>
 80218e4:	9b04      	ldr	r3, [sp, #16]
 80218e6:	2b00      	cmp	r3, #0
 80218e8:	f000 80a2 	beq.w	8021a30 <_strtod_r+0x3a8>
 80218ec:	4604      	mov	r4, r0
 80218ee:	e000      	b.n	80218f2 <_strtod_r+0x26a>
 80218f0:	2400      	movs	r4, #0
 80218f2:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 80218f6:	f10a 0301 	add.w	r3, sl, #1
 80218fa:	9319      	str	r3, [sp, #100]	; 0x64
 80218fc:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8021900:	2b2b      	cmp	r3, #43	; 0x2b
 8021902:	d007      	beq.n	8021914 <_strtod_r+0x28c>
 8021904:	2b2d      	cmp	r3, #45	; 0x2d
 8021906:	d002      	beq.n	802190e <_strtod_r+0x286>
 8021908:	f04f 0c00 	mov.w	ip, #0
 802190c:	e009      	b.n	8021922 <_strtod_r+0x29a>
 802190e:	f04f 0c01 	mov.w	ip, #1
 8021912:	e001      	b.n	8021918 <_strtod_r+0x290>
 8021914:	f04f 0c00 	mov.w	ip, #0
 8021918:	f10a 0302 	add.w	r3, sl, #2
 802191c:	9319      	str	r3, [sp, #100]	; 0x64
 802191e:	f89a 3002 	ldrb.w	r3, [sl, #2]
 8021922:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8021926:	2909      	cmp	r1, #9
 8021928:	d832      	bhi.n	8021990 <_strtod_r+0x308>
 802192a:	4619      	mov	r1, r3
 802192c:	2930      	cmp	r1, #48	; 0x30
 802192e:	d104      	bne.n	802193a <_strtod_r+0x2b2>
 8021930:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8021932:	1c59      	adds	r1, r3, #1
 8021934:	9119      	str	r1, [sp, #100]	; 0x64
 8021936:	7859      	ldrb	r1, [r3, #1]
 8021938:	e7f8      	b.n	802192c <_strtod_r+0x2a4>
 802193a:	f1a1 0e31 	sub.w	lr, r1, #49	; 0x31
 802193e:	f1be 0f08 	cmp.w	lr, #8
 8021942:	460b      	mov	r3, r1
 8021944:	d826      	bhi.n	8021994 <_strtod_r+0x30c>
 8021946:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8021948:	9306      	str	r3, [sp, #24]
 802194a:	3930      	subs	r1, #48	; 0x30
 802194c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802194e:	f103 0e01 	add.w	lr, r3, #1
 8021952:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64
 8021956:	785b      	ldrb	r3, [r3, #1]
 8021958:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 802195c:	2a09      	cmp	r2, #9
 802195e:	d805      	bhi.n	802196c <_strtod_r+0x2e4>
 8021960:	f04f 0e0a 	mov.w	lr, #10
 8021964:	fb0e 3101 	mla	r1, lr, r1, r3
 8021968:	3930      	subs	r1, #48	; 0x30
 802196a:	e7ef      	b.n	802194c <_strtod_r+0x2c4>
 802196c:	9a06      	ldr	r2, [sp, #24]
 802196e:	ebc2 0e0e 	rsb	lr, r2, lr
 8021972:	f1be 0f08 	cmp.w	lr, #8
 8021976:	f644 6e1f 	movw	lr, #19999	; 0x4e1f
 802197a:	dc03      	bgt.n	8021984 <_strtod_r+0x2fc>
 802197c:	4571      	cmp	r1, lr
 802197e:	bfa8      	it	ge
 8021980:	4671      	movge	r1, lr
 8021982:	e000      	b.n	8021986 <_strtod_r+0x2fe>
 8021984:	4671      	mov	r1, lr
 8021986:	f1bc 0f00 	cmp.w	ip, #0
 802198a:	d004      	beq.n	8021996 <_strtod_r+0x30e>
 802198c:	4249      	negs	r1, r1
 802198e:	e002      	b.n	8021996 <_strtod_r+0x30e>
 8021990:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
 8021994:	2100      	movs	r1, #0
 8021996:	2c00      	cmp	r4, #0
 8021998:	d154      	bne.n	8021a44 <_strtod_r+0x3bc>
 802199a:	2800      	cmp	r0, #0
 802199c:	f040 8453 	bne.w	8022246 <_strtod_r+0xbbe>
 80219a0:	9a04      	ldr	r2, [sp, #16]
 80219a2:	2a00      	cmp	r2, #0
 80219a4:	f040 844f 	bne.w	8022246 <_strtod_r+0xbbe>
 80219a8:	2f00      	cmp	r7, #0
 80219aa:	d141      	bne.n	8021a30 <_strtod_r+0x3a8>
 80219ac:	2b4e      	cmp	r3, #78	; 0x4e
 80219ae:	d020      	beq.n	80219f2 <_strtod_r+0x36a>
 80219b0:	dc02      	bgt.n	80219b8 <_strtod_r+0x330>
 80219b2:	2b49      	cmp	r3, #73	; 0x49
 80219b4:	d00a      	beq.n	80219cc <_strtod_r+0x344>
 80219b6:	e03b      	b.n	8021a30 <_strtod_r+0x3a8>
 80219b8:	2b69      	cmp	r3, #105	; 0x69
 80219ba:	d007      	beq.n	80219cc <_strtod_r+0x344>
 80219bc:	2b6e      	cmp	r3, #110	; 0x6e
 80219be:	d018      	beq.n	80219f2 <_strtod_r+0x36a>
 80219c0:	e036      	b.n	8021a30 <_strtod_r+0x3a8>
 80219c2:	bf00      	nop
 80219c4:	08027298 	.word	0x08027298
 80219c8:	7ff00000 	.word	0x7ff00000
 80219cc:	a819      	add	r0, sp, #100	; 0x64
 80219ce:	49a6      	ldr	r1, [pc, #664]	; (8021c68 <_strtod_r+0x5e0>)
 80219d0:	f7ff fe25 	bl	802161e <match>
 80219d4:	b360      	cbz	r0, 8021a30 <_strtod_r+0x3a8>
 80219d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80219d8:	49a4      	ldr	r1, [pc, #656]	; (8021c6c <_strtod_r+0x5e4>)
 80219da:	3b01      	subs	r3, #1
 80219dc:	a819      	add	r0, sp, #100	; 0x64
 80219de:	9319      	str	r3, [sp, #100]	; 0x64
 80219e0:	f7ff fe1d 	bl	802161e <match>
 80219e4:	b910      	cbnz	r0, 80219ec <_strtod_r+0x364>
 80219e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80219e8:	3301      	adds	r3, #1
 80219ea:	9319      	str	r3, [sp, #100]	; 0x64
 80219ec:	f8df 9294 	ldr.w	r9, [pc, #660]	; 8021c84 <_strtod_r+0x5fc>
 80219f0:	e01a      	b.n	8021a28 <_strtod_r+0x3a0>
 80219f2:	a819      	add	r0, sp, #100	; 0x64
 80219f4:	499e      	ldr	r1, [pc, #632]	; (8021c70 <_strtod_r+0x5e8>)
 80219f6:	f7ff fe12 	bl	802161e <match>
 80219fa:	b1c8      	cbz	r0, 8021a30 <_strtod_r+0x3a8>
 80219fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80219fe:	781b      	ldrb	r3, [r3, #0]
 8021a00:	2b28      	cmp	r3, #40	; 0x28
 8021a02:	d10f      	bne.n	8021a24 <_strtod_r+0x39c>
 8021a04:	a819      	add	r0, sp, #100	; 0x64
 8021a06:	499b      	ldr	r1, [pc, #620]	; (8021c74 <_strtod_r+0x5ec>)
 8021a08:	aa1c      	add	r2, sp, #112	; 0x70
 8021a0a:	f001 fe8b 	bl	8023724 <__hexnan>
 8021a0e:	2805      	cmp	r0, #5
 8021a10:	d108      	bne.n	8021a24 <_strtod_r+0x39c>
 8021a12:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8021a14:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8021a18:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8021a1c:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8021a20:	f000 bc11 	b.w	8022246 <_strtod_r+0xbbe>
 8021a24:	f8df 9260 	ldr.w	r9, [pc, #608]	; 8021c88 <_strtod_r+0x600>
 8021a28:	f04f 0800 	mov.w	r8, #0
 8021a2c:	f000 bc0b 	b.w	8022246 <_strtod_r+0xbbe>
 8021a30:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021a32:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
 8021a36:	2b00      	cmp	r3, #0
 8021a38:	f000 8410 	beq.w	802225c <_strtod_r+0xbd4>
 8021a3c:	2300      	movs	r3, #0
 8021a3e:	9309      	str	r3, [sp, #36]	; 0x24
 8021a40:	f000 bc03 	b.w	802224a <_strtod_r+0xbc2>
 8021a44:	9b02      	ldr	r3, [sp, #8]
 8021a46:	9803      	ldr	r0, [sp, #12]
 8021a48:	1acb      	subs	r3, r1, r3
 8021a4a:	2d00      	cmp	r5, #0
 8021a4c:	bf14      	ite	ne
 8021a4e:	46aa      	movne	sl, r5
 8021a50:	46a2      	moveq	sl, r4
 8021a52:	2c10      	cmp	r4, #16
 8021a54:	4625      	mov	r5, r4
 8021a56:	9304      	str	r3, [sp, #16]
 8021a58:	bfa8      	it	ge
 8021a5a:	2510      	movge	r5, #16
 8021a5c:	f002 fe54 	bl	8024708 <__aeabi_ui2d>
 8021a60:	2d09      	cmp	r5, #9
 8021a62:	4680      	mov	r8, r0
 8021a64:	4689      	mov	r9, r1
 8021a66:	dd13      	ble.n	8021a90 <_strtod_r+0x408>
 8021a68:	4b83      	ldr	r3, [pc, #524]	; (8021c78 <_strtod_r+0x5f0>)
 8021a6a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8021a6e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8021a72:	f002 febf 	bl	80247f4 <__aeabi_dmul>
 8021a76:	4680      	mov	r8, r0
 8021a78:	4630      	mov	r0, r6
 8021a7a:	4689      	mov	r9, r1
 8021a7c:	f002 fe44 	bl	8024708 <__aeabi_ui2d>
 8021a80:	4602      	mov	r2, r0
 8021a82:	460b      	mov	r3, r1
 8021a84:	4640      	mov	r0, r8
 8021a86:	4649      	mov	r1, r9
 8021a88:	f002 fd02 	bl	8024490 <__adddf3>
 8021a8c:	4680      	mov	r8, r0
 8021a8e:	4689      	mov	r9, r1
 8021a90:	2c0f      	cmp	r4, #15
 8021a92:	dc37      	bgt.n	8021b04 <_strtod_r+0x47c>
 8021a94:	9b04      	ldr	r3, [sp, #16]
 8021a96:	2b00      	cmp	r3, #0
 8021a98:	f000 83d5 	beq.w	8022246 <_strtod_r+0xbbe>
 8021a9c:	dd24      	ble.n	8021ae8 <_strtod_r+0x460>
 8021a9e:	2b16      	cmp	r3, #22
 8021aa0:	dc07      	bgt.n	8021ab2 <_strtod_r+0x42a>
 8021aa2:	4a75      	ldr	r2, [pc, #468]	; (8021c78 <_strtod_r+0x5f0>)
 8021aa4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8021aa8:	e9d2 0100 	ldrd	r0, r1, [r2]
 8021aac:	464b      	mov	r3, r9
 8021aae:	4642      	mov	r2, r8
 8021ab0:	e015      	b.n	8021ade <_strtod_r+0x456>
 8021ab2:	9a04      	ldr	r2, [sp, #16]
 8021ab4:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8021ab8:	429a      	cmp	r2, r3
 8021aba:	dc23      	bgt.n	8021b04 <_strtod_r+0x47c>
 8021abc:	4d6e      	ldr	r5, [pc, #440]	; (8021c78 <_strtod_r+0x5f0>)
 8021abe:	f1c4 040f 	rsb	r4, r4, #15
 8021ac2:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8021ac6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021aca:	4642      	mov	r2, r8
 8021acc:	464b      	mov	r3, r9
 8021ace:	f002 fe91 	bl	80247f4 <__aeabi_dmul>
 8021ad2:	9b04      	ldr	r3, [sp, #16]
 8021ad4:	1b1c      	subs	r4, r3, r4
 8021ad6:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8021ada:	e9d5 2300 	ldrd	r2, r3, [r5]
 8021ade:	f002 fe89 	bl	80247f4 <__aeabi_dmul>
 8021ae2:	4680      	mov	r8, r0
 8021ae4:	4689      	mov	r9, r1
 8021ae6:	e3ae      	b.n	8022246 <_strtod_r+0xbbe>
 8021ae8:	9b04      	ldr	r3, [sp, #16]
 8021aea:	f113 0f16 	cmn.w	r3, #22
 8021aee:	db09      	blt.n	8021b04 <_strtod_r+0x47c>
 8021af0:	4a61      	ldr	r2, [pc, #388]	; (8021c78 <_strtod_r+0x5f0>)
 8021af2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8021af6:	4640      	mov	r0, r8
 8021af8:	4649      	mov	r1, r9
 8021afa:	e9d2 2300 	ldrd	r2, r3, [r2]
 8021afe:	f002 ffa3 	bl	8024a48 <__aeabi_ddiv>
 8021b02:	e7ee      	b.n	8021ae2 <_strtod_r+0x45a>
 8021b04:	9b04      	ldr	r3, [sp, #16]
 8021b06:	1b65      	subs	r5, r4, r5
 8021b08:	441d      	add	r5, r3
 8021b0a:	2d00      	cmp	r5, #0
 8021b0c:	dd54      	ble.n	8021bb8 <_strtod_r+0x530>
 8021b0e:	f015 020f 	ands.w	r2, r5, #15
 8021b12:	d00a      	beq.n	8021b2a <_strtod_r+0x4a2>
 8021b14:	4b58      	ldr	r3, [pc, #352]	; (8021c78 <_strtod_r+0x5f0>)
 8021b16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8021b1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021b1e:	4642      	mov	r2, r8
 8021b20:	464b      	mov	r3, r9
 8021b22:	f002 fe67 	bl	80247f4 <__aeabi_dmul>
 8021b26:	4680      	mov	r8, r0
 8021b28:	4689      	mov	r9, r1
 8021b2a:	f035 050f 	bics.w	r5, r5, #15
 8021b2e:	f000 80b1 	beq.w	8021c94 <_strtod_r+0x60c>
 8021b32:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8021b36:	dd0b      	ble.n	8021b50 <_strtod_r+0x4c8>
 8021b38:	2400      	movs	r4, #0
 8021b3a:	46a2      	mov	sl, r4
 8021b3c:	9405      	str	r4, [sp, #20]
 8021b3e:	9403      	str	r4, [sp, #12]
 8021b40:	2322      	movs	r3, #34	; 0x22
 8021b42:	f8cb 3000 	str.w	r3, [fp]
 8021b46:	f8df 913c 	ldr.w	r9, [pc, #316]	; 8021c84 <_strtod_r+0x5fc>
 8021b4a:	f04f 0800 	mov.w	r8, #0
 8021b4e:	e180      	b.n	8021e52 <_strtod_r+0x7ca>
 8021b50:	4649      	mov	r1, r9
 8021b52:	f8df 9138 	ldr.w	r9, [pc, #312]	; 8021c8c <_strtod_r+0x604>
 8021b56:	112d      	asrs	r5, r5, #4
 8021b58:	4640      	mov	r0, r8
 8021b5a:	2700      	movs	r7, #0
 8021b5c:	464e      	mov	r6, r9
 8021b5e:	2d01      	cmp	r5, #1
 8021b60:	dd0a      	ble.n	8021b78 <_strtod_r+0x4f0>
 8021b62:	07ea      	lsls	r2, r5, #31
 8021b64:	d503      	bpl.n	8021b6e <_strtod_r+0x4e6>
 8021b66:	e9d9 2300 	ldrd	r2, r3, [r9]
 8021b6a:	f002 fe43 	bl	80247f4 <__aeabi_dmul>
 8021b6e:	3701      	adds	r7, #1
 8021b70:	106d      	asrs	r5, r5, #1
 8021b72:	f109 0908 	add.w	r9, r9, #8
 8021b76:	e7f2      	b.n	8021b5e <_strtod_r+0x4d6>
 8021b78:	4680      	mov	r8, r0
 8021b7a:	f1a1 7954 	sub.w	r9, r1, #55574528	; 0x3500000
 8021b7e:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
 8021b82:	4642      	mov	r2, r8
 8021b84:	464b      	mov	r3, r9
 8021b86:	e9d6 0100 	ldrd	r0, r1, [r6]
 8021b8a:	f002 fe33 	bl	80247f4 <__aeabi_dmul>
 8021b8e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8021b92:	4689      	mov	r9, r1
 8021b94:	460a      	mov	r2, r1
 8021b96:	0d1b      	lsrs	r3, r3, #20
 8021b98:	4938      	ldr	r1, [pc, #224]	; (8021c7c <_strtod_r+0x5f4>)
 8021b9a:	051b      	lsls	r3, r3, #20
 8021b9c:	428b      	cmp	r3, r1
 8021b9e:	4680      	mov	r8, r0
 8021ba0:	d8ca      	bhi.n	8021b38 <_strtod_r+0x4b0>
 8021ba2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8021ba6:	428b      	cmp	r3, r1
 8021ba8:	bf86      	itte	hi
 8021baa:	f8df 90e4 	ldrhi.w	r9, [pc, #228]	; 8021c90 <_strtod_r+0x608>
 8021bae:	f04f 38ff 	movhi.w	r8, #4294967295
 8021bb2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8021bb6:	e06d      	b.n	8021c94 <_strtod_r+0x60c>
 8021bb8:	d06c      	beq.n	8021c94 <_strtod_r+0x60c>
 8021bba:	426d      	negs	r5, r5
 8021bbc:	f015 020f 	ands.w	r2, r5, #15
 8021bc0:	d00a      	beq.n	8021bd8 <_strtod_r+0x550>
 8021bc2:	4b2d      	ldr	r3, [pc, #180]	; (8021c78 <_strtod_r+0x5f0>)
 8021bc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8021bc8:	4640      	mov	r0, r8
 8021bca:	4649      	mov	r1, r9
 8021bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021bd0:	f002 ff3a 	bl	8024a48 <__aeabi_ddiv>
 8021bd4:	4680      	mov	r8, r0
 8021bd6:	4689      	mov	r9, r1
 8021bd8:	112d      	asrs	r5, r5, #4
 8021bda:	d05b      	beq.n	8021c94 <_strtod_r+0x60c>
 8021bdc:	2d1f      	cmp	r5, #31
 8021bde:	dd04      	ble.n	8021bea <_strtod_r+0x562>
 8021be0:	2400      	movs	r4, #0
 8021be2:	46a2      	mov	sl, r4
 8021be4:	9405      	str	r4, [sp, #20]
 8021be6:	9403      	str	r4, [sp, #12]
 8021be8:	e12c      	b.n	8021e44 <_strtod_r+0x7bc>
 8021bea:	f015 0f10 	tst.w	r5, #16
 8021bee:	bf0c      	ite	eq
 8021bf0:	2300      	moveq	r3, #0
 8021bf2:	236a      	movne	r3, #106	; 0x6a
 8021bf4:	4e22      	ldr	r6, [pc, #136]	; (8021c80 <_strtod_r+0x5f8>)
 8021bf6:	9302      	str	r3, [sp, #8]
 8021bf8:	4640      	mov	r0, r8
 8021bfa:	4649      	mov	r1, r9
 8021bfc:	2d00      	cmp	r5, #0
 8021bfe:	dd08      	ble.n	8021c12 <_strtod_r+0x58a>
 8021c00:	07eb      	lsls	r3, r5, #31
 8021c02:	d503      	bpl.n	8021c0c <_strtod_r+0x584>
 8021c04:	e9d6 2300 	ldrd	r2, r3, [r6]
 8021c08:	f002 fdf4 	bl	80247f4 <__aeabi_dmul>
 8021c0c:	106d      	asrs	r5, r5, #1
 8021c0e:	3608      	adds	r6, #8
 8021c10:	e7f4      	b.n	8021bfc <_strtod_r+0x574>
 8021c12:	9b02      	ldr	r3, [sp, #8]
 8021c14:	4680      	mov	r8, r0
 8021c16:	4689      	mov	r9, r1
 8021c18:	b1eb      	cbz	r3, 8021c56 <_strtod_r+0x5ce>
 8021c1a:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8021c1e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8021c22:	2b00      	cmp	r3, #0
 8021c24:	460a      	mov	r2, r1
 8021c26:	dd16      	ble.n	8021c56 <_strtod_r+0x5ce>
 8021c28:	2b1f      	cmp	r3, #31
 8021c2a:	dd0e      	ble.n	8021c4a <_strtod_r+0x5c2>
 8021c2c:	2b34      	cmp	r3, #52	; 0x34
 8021c2e:	bfde      	ittt	le
 8021c30:	3b20      	suble	r3, #32
 8021c32:	f04f 31ff 	movle.w	r1, #4294967295
 8021c36:	fa01 f303 	lslle.w	r3, r1, r3
 8021c3a:	f04f 0800 	mov.w	r8, #0
 8021c3e:	bfcc      	ite	gt
 8021c40:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8021c44:	ea03 0902 	andle.w	r9, r3, r2
 8021c48:	e005      	b.n	8021c56 <_strtod_r+0x5ce>
 8021c4a:	f04f 32ff 	mov.w	r2, #4294967295
 8021c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8021c52:	ea03 0800 	and.w	r8, r3, r0
 8021c56:	4640      	mov	r0, r8
 8021c58:	4649      	mov	r1, r9
 8021c5a:	2200      	movs	r2, #0
 8021c5c:	2300      	movs	r3, #0
 8021c5e:	f003 f831 	bl	8024cc4 <__aeabi_dcmpeq>
 8021c62:	2800      	cmp	r0, #0
 8021c64:	d1bc      	bne.n	8021be0 <_strtod_r+0x558>
 8021c66:	e017      	b.n	8021c98 <_strtod_r+0x610>
 8021c68:	08027222 	.word	0x08027222
 8021c6c:	080273b0 	.word	0x080273b0
 8021c70:	0802722a 	.word	0x0802722a
 8021c74:	08027258 	.word	0x08027258
 8021c78:	080273c8 	.word	0x080273c8
 8021c7c:	7ca00000 	.word	0x7ca00000
 8021c80:	08027270 	.word	0x08027270
 8021c84:	7ff00000 	.word	0x7ff00000
 8021c88:	fff80000 	.word	0xfff80000
 8021c8c:	08027490 	.word	0x08027490
 8021c90:	7fefffff 	.word	0x7fefffff
 8021c94:	2300      	movs	r3, #0
 8021c96:	9302      	str	r3, [sp, #8]
 8021c98:	9b03      	ldr	r3, [sp, #12]
 8021c9a:	9300      	str	r3, [sp, #0]
 8021c9c:	4658      	mov	r0, fp
 8021c9e:	9905      	ldr	r1, [sp, #20]
 8021ca0:	4652      	mov	r2, sl
 8021ca2:	4623      	mov	r3, r4
 8021ca4:	f001 fed1 	bl	8023a4a <__s2b>
 8021ca8:	9005      	str	r0, [sp, #20]
 8021caa:	2800      	cmp	r0, #0
 8021cac:	f43f af44 	beq.w	8021b38 <_strtod_r+0x4b0>
 8021cb0:	9a04      	ldr	r2, [sp, #16]
 8021cb2:	9b04      	ldr	r3, [sp, #16]
 8021cb4:	2a00      	cmp	r2, #0
 8021cb6:	f1c3 0300 	rsb	r3, r3, #0
 8021cba:	f04f 0400 	mov.w	r4, #0
 8021cbe:	bfa8      	it	ge
 8021cc0:	2300      	movge	r3, #0
 8021cc2:	9312      	str	r3, [sp, #72]	; 0x48
 8021cc4:	46a2      	mov	sl, r4
 8021cc6:	9b05      	ldr	r3, [sp, #20]
 8021cc8:	4658      	mov	r0, fp
 8021cca:	6859      	ldr	r1, [r3, #4]
 8021ccc:	f001 fe33 	bl	8023936 <_Balloc>
 8021cd0:	9003      	str	r0, [sp, #12]
 8021cd2:	2800      	cmp	r0, #0
 8021cd4:	f43f af34 	beq.w	8021b40 <_strtod_r+0x4b8>
 8021cd8:	9b05      	ldr	r3, [sp, #20]
 8021cda:	691a      	ldr	r2, [r3, #16]
 8021cdc:	9b05      	ldr	r3, [sp, #20]
 8021cde:	3202      	adds	r2, #2
 8021ce0:	f103 010c 	add.w	r1, r3, #12
 8021ce4:	0092      	lsls	r2, r2, #2
 8021ce6:	300c      	adds	r0, #12
 8021ce8:	f7fe fb11 	bl	802030e <memcpy>
 8021cec:	ab1b      	add	r3, sp, #108	; 0x6c
 8021cee:	9300      	str	r3, [sp, #0]
 8021cf0:	ab1c      	add	r3, sp, #112	; 0x70
 8021cf2:	9301      	str	r3, [sp, #4]
 8021cf4:	4658      	mov	r0, fp
 8021cf6:	4642      	mov	r2, r8
 8021cf8:	464b      	mov	r3, r9
 8021cfa:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8021cfe:	f002 f95a 	bl	8023fb6 <__d2b>
 8021d02:	901a      	str	r0, [sp, #104]	; 0x68
 8021d04:	2800      	cmp	r0, #0
 8021d06:	f43f af1b 	beq.w	8021b40 <_strtod_r+0x4b8>
 8021d0a:	4658      	mov	r0, fp
 8021d0c:	2101      	movs	r1, #1
 8021d0e:	f001 ff29 	bl	8023b64 <__i2b>
 8021d12:	4682      	mov	sl, r0
 8021d14:	2800      	cmp	r0, #0
 8021d16:	f43f af13 	beq.w	8021b40 <_strtod_r+0x4b8>
 8021d1a:	9b04      	ldr	r3, [sp, #16]
 8021d1c:	9902      	ldr	r1, [sp, #8]
 8021d1e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8021d20:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021d24:	9308      	str	r3, [sp, #32]
 8021d26:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8021d28:	2b00      	cmp	r3, #0
 8021d2a:	bfad      	iteet	ge
 8021d2c:	9a12      	ldrge	r2, [sp, #72]	; 0x48
 8021d2e:	9a08      	ldrlt	r2, [sp, #32]
 8021d30:	9e12      	ldrlt	r6, [sp, #72]	; 0x48
 8021d32:	18d6      	addge	r6, r2, r3
 8021d34:	bfb8      	it	lt
 8021d36:	1ad2      	sublt	r2, r2, r3
 8021d38:	eba3 0301 	sub.w	r3, r3, r1
 8021d3c:	442b      	add	r3, r5
 8021d3e:	f46f 717f 	mvn.w	r1, #1020	; 0x3fc
 8021d42:	bfa8      	it	ge
 8021d44:	9a08      	ldrge	r2, [sp, #32]
 8021d46:	428b      	cmp	r3, r1
 8021d48:	f1c5 0536 	rsb	r5, r5, #54	; 0x36
 8021d4c:	f280 8086 	bge.w	8021e5c <_strtod_r+0x7d4>
 8021d50:	1ac9      	subs	r1, r1, r3
 8021d52:	291f      	cmp	r1, #31
 8021d54:	eba5 0501 	sub.w	r5, r5, r1
 8021d58:	bfc8      	it	gt
 8021d5a:	49b3      	ldrgt	r1, [pc, #716]	; (8022028 <_strtod_r+0x9a0>)
 8021d5c:	f04f 0001 	mov.w	r0, #1
 8021d60:	bfd5      	itete	le
 8021d62:	fa00 f301 	lslle.w	r3, r0, r1
 8021d66:	1ac9      	subgt	r1, r1, r3
 8021d68:	9313      	strle	r3, [sp, #76]	; 0x4c
 8021d6a:	fa00 f301 	lslgt.w	r3, r0, r1
 8021d6e:	bfd9      	ittee	le
 8021d70:	2300      	movle	r3, #0
 8021d72:	9306      	strle	r3, [sp, #24]
 8021d74:	9306      	strgt	r3, [sp, #24]
 8021d76:	9013      	strgt	r0, [sp, #76]	; 0x4c
 8021d78:	1977      	adds	r7, r6, r5
 8021d7a:	9b02      	ldr	r3, [sp, #8]
 8021d7c:	42b7      	cmp	r7, r6
 8021d7e:	4415      	add	r5, r2
 8021d80:	441d      	add	r5, r3
 8021d82:	463b      	mov	r3, r7
 8021d84:	bfa8      	it	ge
 8021d86:	4633      	movge	r3, r6
 8021d88:	42ab      	cmp	r3, r5
 8021d8a:	bfa8      	it	ge
 8021d8c:	462b      	movge	r3, r5
 8021d8e:	2b00      	cmp	r3, #0
 8021d90:	bfc2      	ittt	gt
 8021d92:	1aff      	subgt	r7, r7, r3
 8021d94:	1aed      	subgt	r5, r5, r3
 8021d96:	1af6      	subgt	r6, r6, r3
 8021d98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021d9a:	2b00      	cmp	r3, #0
 8021d9c:	d163      	bne.n	8021e66 <_strtod_r+0x7de>
 8021d9e:	2f00      	cmp	r7, #0
 8021da0:	dc7a      	bgt.n	8021e98 <_strtod_r+0x810>
 8021da2:	9b08      	ldr	r3, [sp, #32]
 8021da4:	2b00      	cmp	r3, #0
 8021da6:	f040 8081 	bne.w	8021eac <_strtod_r+0x824>
 8021daa:	2d00      	cmp	r5, #0
 8021dac:	f300 8088 	bgt.w	8021ec0 <_strtod_r+0x838>
 8021db0:	2e00      	cmp	r6, #0
 8021db2:	f300 808f 	bgt.w	8021ed4 <_strtod_r+0x84c>
 8021db6:	4658      	mov	r0, fp
 8021db8:	991a      	ldr	r1, [sp, #104]	; 0x68
 8021dba:	9a03      	ldr	r2, [sp, #12]
 8021dbc:	f002 f829 	bl	8023e12 <__mdiff>
 8021dc0:	4604      	mov	r4, r0
 8021dc2:	2800      	cmp	r0, #0
 8021dc4:	f43f aebc 	beq.w	8021b40 <_strtod_r+0x4b8>
 8021dc8:	68c3      	ldr	r3, [r0, #12]
 8021dca:	9308      	str	r3, [sp, #32]
 8021dcc:	2300      	movs	r3, #0
 8021dce:	60c3      	str	r3, [r0, #12]
 8021dd0:	4651      	mov	r1, sl
 8021dd2:	f002 f802 	bl	8023dda <__mcmp>
 8021dd6:	2800      	cmp	r0, #0
 8021dd8:	f280 808a 	bge.w	8021ef0 <_strtod_r+0x868>
 8021ddc:	9b08      	ldr	r3, [sp, #32]
 8021dde:	2b00      	cmp	r3, #0
 8021de0:	f040 820a 	bne.w	80221f8 <_strtod_r+0xb70>
 8021de4:	f1b8 0f00 	cmp.w	r8, #0
 8021de8:	f040 8206 	bne.w	80221f8 <_strtod_r+0xb70>
 8021dec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8021df0:	2b00      	cmp	r3, #0
 8021df2:	f040 8201 	bne.w	80221f8 <_strtod_r+0xb70>
 8021df6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8021dfa:	0d1b      	lsrs	r3, r3, #20
 8021dfc:	051b      	lsls	r3, r3, #20
 8021dfe:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8021e02:	f240 81f9 	bls.w	80221f8 <_strtod_r+0xb70>
 8021e06:	6963      	ldr	r3, [r4, #20]
 8021e08:	2b00      	cmp	r3, #0
 8021e0a:	d06d      	beq.n	8021ee8 <_strtod_r+0x860>
 8021e0c:	4621      	mov	r1, r4
 8021e0e:	2201      	movs	r2, #1
 8021e10:	4658      	mov	r0, fp
 8021e12:	f001 ff8f 	bl	8023d34 <__lshift>
 8021e16:	4651      	mov	r1, sl
 8021e18:	4604      	mov	r4, r0
 8021e1a:	f001 ffde 	bl	8023dda <__mcmp>
 8021e1e:	2800      	cmp	r0, #0
 8021e20:	f340 81ea 	ble.w	80221f8 <_strtod_r+0xb70>
 8021e24:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8021e28:	9a02      	ldr	r2, [sp, #8]
 8021e2a:	0d1b      	lsrs	r3, r3, #20
 8021e2c:	051b      	lsls	r3, r3, #20
 8021e2e:	2a00      	cmp	r2, #0
 8021e30:	f000 808d 	beq.w	8021f4e <_strtod_r+0x8c6>
 8021e34:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8021e38:	f300 8089 	bgt.w	8021f4e <_strtod_r+0x8c6>
 8021e3c:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 8021e40:	f300 81dc 	bgt.w	80221fc <_strtod_r+0xb74>
 8021e44:	2322      	movs	r3, #34	; 0x22
 8021e46:	f04f 0800 	mov.w	r8, #0
 8021e4a:	f04f 0900 	mov.w	r9, #0
 8021e4e:	f8cb 3000 	str.w	r3, [fp]
 8021e52:	9b05      	ldr	r3, [sp, #20]
 8021e54:	2b00      	cmp	r3, #0
 8021e56:	f040 81e2 	bne.w	802221e <_strtod_r+0xb96>
 8021e5a:	e1f4      	b.n	8022246 <_strtod_r+0xbbe>
 8021e5c:	2300      	movs	r3, #0
 8021e5e:	9306      	str	r3, [sp, #24]
 8021e60:	2301      	movs	r3, #1
 8021e62:	9313      	str	r3, [sp, #76]	; 0x4c
 8021e64:	e788      	b.n	8021d78 <_strtod_r+0x6f0>
 8021e66:	4651      	mov	r1, sl
 8021e68:	4658      	mov	r0, fp
 8021e6a:	461a      	mov	r2, r3
 8021e6c:	f001 ff14 	bl	8023c98 <__pow5mult>
 8021e70:	4682      	mov	sl, r0
 8021e72:	2800      	cmp	r0, #0
 8021e74:	f43f ae64 	beq.w	8021b40 <_strtod_r+0x4b8>
 8021e78:	4658      	mov	r0, fp
 8021e7a:	4651      	mov	r1, sl
 8021e7c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8021e7e:	f001 fe7a 	bl	8023b76 <__multiply>
 8021e82:	9017      	str	r0, [sp, #92]	; 0x5c
 8021e84:	2800      	cmp	r0, #0
 8021e86:	f43f ae5b 	beq.w	8021b40 <_strtod_r+0x4b8>
 8021e8a:	4658      	mov	r0, fp
 8021e8c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8021e8e:	f001 fd87 	bl	80239a0 <_Bfree>
 8021e92:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021e94:	931a      	str	r3, [sp, #104]	; 0x68
 8021e96:	e782      	b.n	8021d9e <_strtod_r+0x716>
 8021e98:	4658      	mov	r0, fp
 8021e9a:	991a      	ldr	r1, [sp, #104]	; 0x68
 8021e9c:	463a      	mov	r2, r7
 8021e9e:	f001 ff49 	bl	8023d34 <__lshift>
 8021ea2:	901a      	str	r0, [sp, #104]	; 0x68
 8021ea4:	2800      	cmp	r0, #0
 8021ea6:	f47f af7c 	bne.w	8021da2 <_strtod_r+0x71a>
 8021eaa:	e649      	b.n	8021b40 <_strtod_r+0x4b8>
 8021eac:	4658      	mov	r0, fp
 8021eae:	9903      	ldr	r1, [sp, #12]
 8021eb0:	9a08      	ldr	r2, [sp, #32]
 8021eb2:	f001 fef1 	bl	8023c98 <__pow5mult>
 8021eb6:	9003      	str	r0, [sp, #12]
 8021eb8:	2800      	cmp	r0, #0
 8021eba:	f47f af76 	bne.w	8021daa <_strtod_r+0x722>
 8021ebe:	e63f      	b.n	8021b40 <_strtod_r+0x4b8>
 8021ec0:	4658      	mov	r0, fp
 8021ec2:	9903      	ldr	r1, [sp, #12]
 8021ec4:	462a      	mov	r2, r5
 8021ec6:	f001 ff35 	bl	8023d34 <__lshift>
 8021eca:	9003      	str	r0, [sp, #12]
 8021ecc:	2800      	cmp	r0, #0
 8021ece:	f47f af6f 	bne.w	8021db0 <_strtod_r+0x728>
 8021ed2:	e635      	b.n	8021b40 <_strtod_r+0x4b8>
 8021ed4:	4651      	mov	r1, sl
 8021ed6:	4658      	mov	r0, fp
 8021ed8:	4632      	mov	r2, r6
 8021eda:	f001 ff2b 	bl	8023d34 <__lshift>
 8021ede:	4682      	mov	sl, r0
 8021ee0:	2800      	cmp	r0, #0
 8021ee2:	f47f af68 	bne.w	8021db6 <_strtod_r+0x72e>
 8021ee6:	e62b      	b.n	8021b40 <_strtod_r+0x4b8>
 8021ee8:	6923      	ldr	r3, [r4, #16]
 8021eea:	2b01      	cmp	r3, #1
 8021eec:	dc8e      	bgt.n	8021e0c <_strtod_r+0x784>
 8021eee:	e183      	b.n	80221f8 <_strtod_r+0xb70>
 8021ef0:	d162      	bne.n	8021fb8 <_strtod_r+0x930>
 8021ef2:	9a08      	ldr	r2, [sp, #32]
 8021ef4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8021ef8:	b322      	cbz	r2, 8021f44 <_strtod_r+0x8bc>
 8021efa:	494c      	ldr	r1, [pc, #304]	; (802202c <_strtod_r+0x9a4>)
 8021efc:	428b      	cmp	r3, r1
 8021efe:	464a      	mov	r2, r9
 8021f00:	d12e      	bne.n	8021f60 <_strtod_r+0x8d8>
 8021f02:	9b02      	ldr	r3, [sp, #8]
 8021f04:	4641      	mov	r1, r8
 8021f06:	b163      	cbz	r3, 8021f22 <_strtod_r+0x89a>
 8021f08:	4b49      	ldr	r3, [pc, #292]	; (8022030 <_strtod_r+0x9a8>)
 8021f0a:	4013      	ands	r3, r2
 8021f0c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8021f10:	d807      	bhi.n	8021f22 <_strtod_r+0x89a>
 8021f12:	0d1b      	lsrs	r3, r3, #20
 8021f14:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8021f18:	f04f 30ff 	mov.w	r0, #4294967295
 8021f1c:	fa00 f303 	lsl.w	r3, r0, r3
 8021f20:	e001      	b.n	8021f26 <_strtod_r+0x89e>
 8021f22:	f04f 33ff 	mov.w	r3, #4294967295
 8021f26:	4299      	cmp	r1, r3
 8021f28:	d11a      	bne.n	8021f60 <_strtod_r+0x8d8>
 8021f2a:	4b42      	ldr	r3, [pc, #264]	; (8022034 <_strtod_r+0x9ac>)
 8021f2c:	429a      	cmp	r2, r3
 8021f2e:	d102      	bne.n	8021f36 <_strtod_r+0x8ae>
 8021f30:	3101      	adds	r1, #1
 8021f32:	f43f ae05 	beq.w	8021b40 <_strtod_r+0x4b8>
 8021f36:	4b3e      	ldr	r3, [pc, #248]	; (8022030 <_strtod_r+0x9a8>)
 8021f38:	4013      	ands	r3, r2
 8021f3a:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8021f3e:	f04f 0800 	mov.w	r8, #0
 8021f42:	e159      	b.n	80221f8 <_strtod_r+0xb70>
 8021f44:	b963      	cbnz	r3, 8021f60 <_strtod_r+0x8d8>
 8021f46:	f1b8 0f00 	cmp.w	r8, #0
 8021f4a:	d109      	bne.n	8021f60 <_strtod_r+0x8d8>
 8021f4c:	e76a      	b.n	8021e24 <_strtod_r+0x79c>
 8021f4e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8021f52:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8021f56:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8021f5a:	f04f 38ff 	mov.w	r8, #4294967295
 8021f5e:	e14b      	b.n	80221f8 <_strtod_r+0xb70>
 8021f60:	9b06      	ldr	r3, [sp, #24]
 8021f62:	b113      	cbz	r3, 8021f6a <_strtod_r+0x8e2>
 8021f64:	ea13 0f09 	tst.w	r3, r9
 8021f68:	e002      	b.n	8021f70 <_strtod_r+0x8e8>
 8021f6a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021f6c:	ea13 0f08 	tst.w	r3, r8
 8021f70:	f000 8142 	beq.w	80221f8 <_strtod_r+0xb70>
 8021f74:	9b08      	ldr	r3, [sp, #32]
 8021f76:	9a02      	ldr	r2, [sp, #8]
 8021f78:	4640      	mov	r0, r8
 8021f7a:	4649      	mov	r1, r9
 8021f7c:	b153      	cbz	r3, 8021f94 <_strtod_r+0x90c>
 8021f7e:	f7ff fb61 	bl	8021644 <sulp>
 8021f82:	4602      	mov	r2, r0
 8021f84:	460b      	mov	r3, r1
 8021f86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8021f8a:	f002 fa81 	bl	8024490 <__adddf3>
 8021f8e:	4680      	mov	r8, r0
 8021f90:	4689      	mov	r9, r1
 8021f92:	e131      	b.n	80221f8 <_strtod_r+0xb70>
 8021f94:	f7ff fb56 	bl	8021644 <sulp>
 8021f98:	4602      	mov	r2, r0
 8021f9a:	460b      	mov	r3, r1
 8021f9c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8021fa0:	f002 fa74 	bl	802448c <__aeabi_dsub>
 8021fa4:	2200      	movs	r2, #0
 8021fa6:	2300      	movs	r3, #0
 8021fa8:	4680      	mov	r8, r0
 8021faa:	4689      	mov	r9, r1
 8021fac:	f002 fe8a 	bl	8024cc4 <__aeabi_dcmpeq>
 8021fb0:	2800      	cmp	r0, #0
 8021fb2:	f47f af47 	bne.w	8021e44 <_strtod_r+0x7bc>
 8021fb6:	e11f      	b.n	80221f8 <_strtod_r+0xb70>
 8021fb8:	4620      	mov	r0, r4
 8021fba:	4651      	mov	r1, sl
 8021fbc:	f002 f84d 	bl	802405a <__ratio>
 8021fc0:	2200      	movs	r2, #0
 8021fc2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8021fc6:	4606      	mov	r6, r0
 8021fc8:	460f      	mov	r7, r1
 8021fca:	f002 fe8f 	bl	8024cec <__aeabi_dcmple>
 8021fce:	2800      	cmp	r0, #0
 8021fd0:	d041      	beq.n	8022056 <_strtod_r+0x9ce>
 8021fd2:	9b08      	ldr	r3, [sp, #32]
 8021fd4:	b113      	cbz	r3, 8021fdc <_strtod_r+0x954>
 8021fd6:	2200      	movs	r2, #0
 8021fd8:	4b17      	ldr	r3, [pc, #92]	; (8022038 <_strtod_r+0x9b0>)
 8021fda:	e00f      	b.n	8021ffc <_strtod_r+0x974>
 8021fdc:	f1b8 0f00 	cmp.w	r8, #0
 8021fe0:	d103      	bne.n	8021fea <_strtod_r+0x962>
 8021fe2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8021fe6:	b93b      	cbnz	r3, 8021ff8 <_strtod_r+0x970>
 8021fe8:	e00d      	b.n	8022006 <_strtod_r+0x97e>
 8021fea:	f1b8 0f01 	cmp.w	r8, #1
 8021fee:	d103      	bne.n	8021ff8 <_strtod_r+0x970>
 8021ff0:	f1b9 0f00 	cmp.w	r9, #0
 8021ff4:	f43f af26 	beq.w	8021e44 <_strtod_r+0x7bc>
 8021ff8:	4b10      	ldr	r3, [pc, #64]	; (802203c <_strtod_r+0x9b4>)
 8021ffa:	2200      	movs	r2, #0
 8021ffc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8022000:	2600      	movs	r6, #0
 8022002:	4f0d      	ldr	r7, [pc, #52]	; (8022038 <_strtod_r+0x9b0>)
 8022004:	e03c      	b.n	8022080 <_strtod_r+0x9f8>
 8022006:	4630      	mov	r0, r6
 8022008:	4639      	mov	r1, r7
 802200a:	2200      	movs	r2, #0
 802200c:	4b0a      	ldr	r3, [pc, #40]	; (8022038 <_strtod_r+0x9b0>)
 802200e:	f002 fe63 	bl	8024cd8 <__aeabi_dcmplt>
 8022012:	b9b8      	cbnz	r0, 8022044 <_strtod_r+0x9bc>
 8022014:	4630      	mov	r0, r6
 8022016:	4639      	mov	r1, r7
 8022018:	2200      	movs	r2, #0
 802201a:	4b09      	ldr	r3, [pc, #36]	; (8022040 <_strtod_r+0x9b8>)
 802201c:	f002 fbea 	bl	80247f4 <__aeabi_dmul>
 8022020:	4606      	mov	r6, r0
 8022022:	460f      	mov	r7, r1
 8022024:	e010      	b.n	8022048 <_strtod_r+0x9c0>
 8022026:	bf00      	nop
 8022028:	fffffbe3 	.word	0xfffffbe3
 802202c:	000fffff 	.word	0x000fffff
 8022030:	7ff00000 	.word	0x7ff00000
 8022034:	7fefffff 	.word	0x7fefffff
 8022038:	3ff00000 	.word	0x3ff00000
 802203c:	bff00000 	.word	0xbff00000
 8022040:	3fe00000 	.word	0x3fe00000
 8022044:	4f94      	ldr	r7, [pc, #592]	; (8022298 <_strtod_r+0xc10>)
 8022046:	2600      	movs	r6, #0
 8022048:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 802204c:	9614      	str	r6, [sp, #80]	; 0x50
 802204e:	9315      	str	r3, [sp, #84]	; 0x54
 8022050:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8022054:	e012      	b.n	802207c <_strtod_r+0x9f4>
 8022056:	4630      	mov	r0, r6
 8022058:	4639      	mov	r1, r7
 802205a:	4b8f      	ldr	r3, [pc, #572]	; (8022298 <_strtod_r+0xc10>)
 802205c:	2200      	movs	r2, #0
 802205e:	f002 fbc9 	bl	80247f4 <__aeabi_dmul>
 8022062:	9b08      	ldr	r3, [sp, #32]
 8022064:	4606      	mov	r6, r0
 8022066:	460f      	mov	r7, r1
 8022068:	b923      	cbnz	r3, 8022074 <_strtod_r+0x9ec>
 802206a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802206e:	900e      	str	r0, [sp, #56]	; 0x38
 8022070:	930f      	str	r3, [sp, #60]	; 0x3c
 8022072:	e001      	b.n	8022078 <_strtod_r+0x9f0>
 8022074:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
 8022078:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 802207c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8022080:	f029 4500 	bic.w	r5, r9, #2147483648	; 0x80000000
 8022084:	0d2d      	lsrs	r5, r5, #20
 8022086:	4b85      	ldr	r3, [pc, #532]	; (802229c <_strtod_r+0xc14>)
 8022088:	052d      	lsls	r5, r5, #20
 802208a:	429d      	cmp	r5, r3
 802208c:	d12d      	bne.n	80220ea <_strtod_r+0xa62>
 802208e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8022092:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8022096:	4640      	mov	r0, r8
 8022098:	4649      	mov	r1, r9
 802209a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 802209e:	f001 ff17 	bl	8023ed0 <__ulp>
 80220a2:	4602      	mov	r2, r0
 80220a4:	460b      	mov	r3, r1
 80220a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80220aa:	f002 fba3 	bl	80247f4 <__aeabi_dmul>
 80220ae:	4602      	mov	r2, r0
 80220b0:	460b      	mov	r3, r1
 80220b2:	4640      	mov	r0, r8
 80220b4:	4649      	mov	r1, r9
 80220b6:	f002 f9eb 	bl	8024490 <__adddf3>
 80220ba:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80220be:	0d1b      	lsrs	r3, r3, #20
 80220c0:	4a77      	ldr	r2, [pc, #476]	; (80222a0 <_strtod_r+0xc18>)
 80220c2:	051b      	lsls	r3, r3, #20
 80220c4:	4293      	cmp	r3, r2
 80220c6:	4680      	mov	r8, r0
 80220c8:	d90c      	bls.n	80220e4 <_strtod_r+0xa5c>
 80220ca:	4b76      	ldr	r3, [pc, #472]	; (80222a4 <_strtod_r+0xc1c>)
 80220cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80220ce:	429a      	cmp	r2, r3
 80220d0:	d103      	bne.n	80220da <_strtod_r+0xa52>
 80220d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80220d4:	3301      	adds	r3, #1
 80220d6:	f43f ad33 	beq.w	8021b40 <_strtod_r+0x4b8>
 80220da:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 80222a4 <_strtod_r+0xc1c>
 80220de:	f04f 38ff 	mov.w	r8, #4294967295
 80220e2:	e078      	b.n	80221d6 <_strtod_r+0xb4e>
 80220e4:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 80220e8:	e03d      	b.n	8022166 <_strtod_r+0xade>
 80220ea:	9b02      	ldr	r3, [sp, #8]
 80220ec:	b33b      	cbz	r3, 802213e <_strtod_r+0xab6>
 80220ee:	f1b5 6fd4 	cmp.w	r5, #111149056	; 0x6a00000
 80220f2:	d824      	bhi.n	802213e <_strtod_r+0xab6>
 80220f4:	4630      	mov	r0, r6
 80220f6:	4639      	mov	r1, r7
 80220f8:	a35f      	add	r3, pc, #380	; (adr r3, 8022278 <_strtod_r+0xbf0>)
 80220fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80220fe:	f002 fdf5 	bl	8024cec <__aeabi_dcmple>
 8022102:	b1b8      	cbz	r0, 8022134 <_strtod_r+0xaac>
 8022104:	4639      	mov	r1, r7
 8022106:	4630      	mov	r0, r6
 8022108:	f002 fe36 	bl	8024d78 <__aeabi_d2uiz>
 802210c:	2800      	cmp	r0, #0
 802210e:	bf08      	it	eq
 8022110:	2001      	moveq	r0, #1
 8022112:	f002 faf9 	bl	8024708 <__aeabi_ui2d>
 8022116:	9b08      	ldr	r3, [sp, #32]
 8022118:	4606      	mov	r6, r0
 802211a:	460f      	mov	r7, r1
 802211c:	b923      	cbnz	r3, 8022128 <_strtod_r+0xaa0>
 802211e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8022122:	9010      	str	r0, [sp, #64]	; 0x40
 8022124:	9311      	str	r3, [sp, #68]	; 0x44
 8022126:	e001      	b.n	802212c <_strtod_r+0xaa4>
 8022128:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 802212c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8022130:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8022134:	9b07      	ldr	r3, [sp, #28]
 8022136:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 802213a:	1b5b      	subs	r3, r3, r5
 802213c:	9307      	str	r3, [sp, #28]
 802213e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8022142:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8022146:	f001 fec3 	bl	8023ed0 <__ulp>
 802214a:	4602      	mov	r2, r0
 802214c:	460b      	mov	r3, r1
 802214e:	4640      	mov	r0, r8
 8022150:	4649      	mov	r1, r9
 8022152:	f002 fb4f 	bl	80247f4 <__aeabi_dmul>
 8022156:	4602      	mov	r2, r0
 8022158:	460b      	mov	r3, r1
 802215a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 802215e:	f002 f997 	bl	8024490 <__adddf3>
 8022162:	4680      	mov	r8, r0
 8022164:	4689      	mov	r9, r1
 8022166:	9b02      	ldr	r3, [sp, #8]
 8022168:	bbab      	cbnz	r3, 80221d6 <_strtod_r+0xb4e>
 802216a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 802216e:	0d1b      	lsrs	r3, r3, #20
 8022170:	051b      	lsls	r3, r3, #20
 8022172:	429d      	cmp	r5, r3
 8022174:	d12f      	bne.n	80221d6 <_strtod_r+0xb4e>
 8022176:	4639      	mov	r1, r7
 8022178:	4630      	mov	r0, r6
 802217a:	f8cd 9018 	str.w	r9, [sp, #24]
 802217e:	f002 fdd3 	bl	8024d28 <__aeabi_d2iz>
 8022182:	f002 fad1 	bl	8024728 <__aeabi_i2d>
 8022186:	460b      	mov	r3, r1
 8022188:	4602      	mov	r2, r0
 802218a:	4639      	mov	r1, r7
 802218c:	4630      	mov	r0, r6
 802218e:	f002 f97d 	bl	802448c <__aeabi_dsub>
 8022192:	9b08      	ldr	r3, [sp, #32]
 8022194:	f8dd c018 	ldr.w	ip, [sp, #24]
 8022198:	4606      	mov	r6, r0
 802219a:	460f      	mov	r7, r1
 802219c:	b92b      	cbnz	r3, 80221aa <_strtod_r+0xb22>
 802219e:	f1b8 0f00 	cmp.w	r8, #0
 80221a2:	d102      	bne.n	80221aa <_strtod_r+0xb22>
 80221a4:	f3cc 0313 	ubfx	r3, ip, #0, #20
 80221a8:	b17b      	cbz	r3, 80221ca <_strtod_r+0xb42>
 80221aa:	4630      	mov	r0, r6
 80221ac:	4639      	mov	r1, r7
 80221ae:	a334      	add	r3, pc, #208	; (adr r3, 8022280 <_strtod_r+0xbf8>)
 80221b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80221b4:	f002 fd90 	bl	8024cd8 <__aeabi_dcmplt>
 80221b8:	bb88      	cbnz	r0, 802221e <_strtod_r+0xb96>
 80221ba:	4630      	mov	r0, r6
 80221bc:	4639      	mov	r1, r7
 80221be:	a332      	add	r3, pc, #200	; (adr r3, 8022288 <_strtod_r+0xc00>)
 80221c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80221c4:	f002 fda6 	bl	8024d14 <__aeabi_dcmpgt>
 80221c8:	e004      	b.n	80221d4 <_strtod_r+0xb4c>
 80221ca:	a331      	add	r3, pc, #196	; (adr r3, 8022290 <_strtod_r+0xc08>)
 80221cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80221d0:	f002 fd82 	bl	8024cd8 <__aeabi_dcmplt>
 80221d4:	bb18      	cbnz	r0, 802221e <_strtod_r+0xb96>
 80221d6:	4658      	mov	r0, fp
 80221d8:	991a      	ldr	r1, [sp, #104]	; 0x68
 80221da:	f001 fbe1 	bl	80239a0 <_Bfree>
 80221de:	4658      	mov	r0, fp
 80221e0:	9903      	ldr	r1, [sp, #12]
 80221e2:	f001 fbdd 	bl	80239a0 <_Bfree>
 80221e6:	4658      	mov	r0, fp
 80221e8:	4651      	mov	r1, sl
 80221ea:	f001 fbd9 	bl	80239a0 <_Bfree>
 80221ee:	4658      	mov	r0, fp
 80221f0:	4621      	mov	r1, r4
 80221f2:	f001 fbd5 	bl	80239a0 <_Bfree>
 80221f6:	e566      	b.n	8021cc6 <_strtod_r+0x63e>
 80221f8:	9b02      	ldr	r3, [sp, #8]
 80221fa:	b183      	cbz	r3, 802221e <_strtod_r+0xb96>
 80221fc:	4b2a      	ldr	r3, [pc, #168]	; (80222a8 <_strtod_r+0xc20>)
 80221fe:	930d      	str	r3, [sp, #52]	; 0x34
 8022200:	2300      	movs	r3, #0
 8022202:	930c      	str	r3, [sp, #48]	; 0x30
 8022204:	4640      	mov	r0, r8
 8022206:	4649      	mov	r1, r9
 8022208:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 802220c:	f002 faf2 	bl	80247f4 <__aeabi_dmul>
 8022210:	4680      	mov	r8, r0
 8022212:	4689      	mov	r9, r1
 8022214:	b919      	cbnz	r1, 802221e <_strtod_r+0xb96>
 8022216:	b910      	cbnz	r0, 802221e <_strtod_r+0xb96>
 8022218:	2322      	movs	r3, #34	; 0x22
 802221a:	f8cb 3000 	str.w	r3, [fp]
 802221e:	4658      	mov	r0, fp
 8022220:	991a      	ldr	r1, [sp, #104]	; 0x68
 8022222:	f001 fbbd 	bl	80239a0 <_Bfree>
 8022226:	4658      	mov	r0, fp
 8022228:	9903      	ldr	r1, [sp, #12]
 802222a:	f001 fbb9 	bl	80239a0 <_Bfree>
 802222e:	4658      	mov	r0, fp
 8022230:	4651      	mov	r1, sl
 8022232:	f001 fbb5 	bl	80239a0 <_Bfree>
 8022236:	4658      	mov	r0, fp
 8022238:	9905      	ldr	r1, [sp, #20]
 802223a:	f001 fbb1 	bl	80239a0 <_Bfree>
 802223e:	4658      	mov	r0, fp
 8022240:	4621      	mov	r1, r4
 8022242:	f001 fbad 	bl	80239a0 <_Bfree>
 8022246:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8022248:	b113      	cbz	r3, 8022250 <_strtod_r+0xbc8>
 802224a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802224c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802224e:	6013      	str	r3, [r2, #0]
 8022250:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022252:	b11b      	cbz	r3, 802225c <_strtod_r+0xbd4>
 8022254:	4640      	mov	r0, r8
 8022256:	f109 4100 	add.w	r1, r9, #2147483648	; 0x80000000
 802225a:	e007      	b.n	802226c <_strtod_r+0xbe4>
 802225c:	4640      	mov	r0, r8
 802225e:	4649      	mov	r1, r9
 8022260:	e004      	b.n	802226c <_strtod_r+0xbe4>
 8022262:	2400      	movs	r4, #0
 8022264:	9402      	str	r4, [sp, #8]
 8022266:	2701      	movs	r7, #1
 8022268:	f7ff bb31 	b.w	80218ce <_strtod_r+0x246>
 802226c:	b01f      	add	sp, #124	; 0x7c
 802226e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022272:	bf00      	nop
 8022274:	f3af 8000 	nop.w
 8022278:	ffc00000 	.word	0xffc00000
 802227c:	41dfffff 	.word	0x41dfffff
 8022280:	94a03595 	.word	0x94a03595
 8022284:	3fdfffff 	.word	0x3fdfffff
 8022288:	35afe535 	.word	0x35afe535
 802228c:	3fe00000 	.word	0x3fe00000
 8022290:	94a03595 	.word	0x94a03595
 8022294:	3fcfffff 	.word	0x3fcfffff
 8022298:	3fe00000 	.word	0x3fe00000
 802229c:	7fe00000 	.word	0x7fe00000
 80222a0:	7c9fffff 	.word	0x7c9fffff
 80222a4:	7fefffff 	.word	0x7fefffff
 80222a8:	39500000 	.word	0x39500000

080222ac <_strtol_r>:
 80222ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80222b0:	4c40      	ldr	r4, [pc, #256]	; (80223b4 <_strtol_r+0x108>)
 80222b2:	f8d4 9000 	ldr.w	r9, [r4]
 80222b6:	460f      	mov	r7, r1
 80222b8:	463d      	mov	r5, r7
 80222ba:	f815 eb01 	ldrb.w	lr, [r5], #1
 80222be:	eb09 040e 	add.w	r4, r9, lr
 80222c2:	7866      	ldrb	r6, [r4, #1]
 80222c4:	f006 0408 	and.w	r4, r6, #8
 80222c8:	f004 06ff 	and.w	r6, r4, #255	; 0xff
 80222cc:	b10c      	cbz	r4, 80222d2 <_strtol_r+0x26>
 80222ce:	462f      	mov	r7, r5
 80222d0:	e7f2      	b.n	80222b8 <_strtol_r+0xc>
 80222d2:	4674      	mov	r4, lr
 80222d4:	2c2d      	cmp	r4, #45	; 0x2d
 80222d6:	d103      	bne.n	80222e0 <_strtol_r+0x34>
 80222d8:	1cbd      	adds	r5, r7, #2
 80222da:	787c      	ldrb	r4, [r7, #1]
 80222dc:	2601      	movs	r6, #1
 80222de:	e003      	b.n	80222e8 <_strtol_r+0x3c>
 80222e0:	2c2b      	cmp	r4, #43	; 0x2b
 80222e2:	bf04      	itt	eq
 80222e4:	787c      	ldrbeq	r4, [r7, #1]
 80222e6:	1cbd      	addeq	r5, r7, #2
 80222e8:	b113      	cbz	r3, 80222f0 <_strtol_r+0x44>
 80222ea:	2b10      	cmp	r3, #16
 80222ec:	d10a      	bne.n	8022304 <_strtol_r+0x58>
 80222ee:	e05a      	b.n	80223a6 <_strtol_r+0xfa>
 80222f0:	2c30      	cmp	r4, #48	; 0x30
 80222f2:	d156      	bne.n	80223a2 <_strtol_r+0xf6>
 80222f4:	782c      	ldrb	r4, [r5, #0]
 80222f6:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80222fa:	2c58      	cmp	r4, #88	; 0x58
 80222fc:	d14c      	bne.n	8022398 <_strtol_r+0xec>
 80222fe:	786c      	ldrb	r4, [r5, #1]
 8022300:	2310      	movs	r3, #16
 8022302:	3502      	adds	r5, #2
 8022304:	2e00      	cmp	r6, #0
 8022306:	bf14      	ite	ne
 8022308:	f04f 4800 	movne.w	r8, #2147483648	; 0x80000000
 802230c:	f06f 4800 	mvneq.w	r8, #2147483648	; 0x80000000
 8022310:	2700      	movs	r7, #0
 8022312:	fbb8 faf3 	udiv	sl, r8, r3
 8022316:	46be      	mov	lr, r7
 8022318:	fb03 881a 	mls	r8, r3, sl, r8
 802231c:	eb09 0c04 	add.w	ip, r9, r4
 8022320:	f89c c001 	ldrb.w	ip, [ip, #1]
 8022324:	f01c 0f04 	tst.w	ip, #4
 8022328:	d001      	beq.n	802232e <_strtol_r+0x82>
 802232a:	3c30      	subs	r4, #48	; 0x30
 802232c:	e00b      	b.n	8022346 <_strtol_r+0x9a>
 802232e:	f01c 0c03 	ands.w	ip, ip, #3
 8022332:	d01b      	beq.n	802236c <_strtol_r+0xc0>
 8022334:	f1bc 0f01 	cmp.w	ip, #1
 8022338:	bf0c      	ite	eq
 802233a:	f04f 0c37 	moveq.w	ip, #55	; 0x37
 802233e:	f04f 0c57 	movne.w	ip, #87	; 0x57
 8022342:	ebcc 0404 	rsb	r4, ip, r4
 8022346:	429c      	cmp	r4, r3
 8022348:	da10      	bge.n	802236c <_strtol_r+0xc0>
 802234a:	f1b7 3fff 	cmp.w	r7, #4294967295
 802234e:	d00a      	beq.n	8022366 <_strtol_r+0xba>
 8022350:	45d6      	cmp	lr, sl
 8022352:	d806      	bhi.n	8022362 <_strtol_r+0xb6>
 8022354:	d101      	bne.n	802235a <_strtol_r+0xae>
 8022356:	4544      	cmp	r4, r8
 8022358:	dc03      	bgt.n	8022362 <_strtol_r+0xb6>
 802235a:	fb03 4e0e 	mla	lr, r3, lr, r4
 802235e:	2701      	movs	r7, #1
 8022360:	e001      	b.n	8022366 <_strtol_r+0xba>
 8022362:	f04f 37ff 	mov.w	r7, #4294967295
 8022366:	f815 4b01 	ldrb.w	r4, [r5], #1
 802236a:	e7d7      	b.n	802231c <_strtol_r+0x70>
 802236c:	1c7c      	adds	r4, r7, #1
 802236e:	4673      	mov	r3, lr
 8022370:	d10a      	bne.n	8022388 <_strtol_r+0xdc>
 8022372:	2e00      	cmp	r6, #0
 8022374:	f04f 0122 	mov.w	r1, #34	; 0x22
 8022378:	bf14      	ite	ne
 802237a:	f04f 4300 	movne.w	r3, #2147483648	; 0x80000000
 802237e:	f06f 4300 	mvneq.w	r3, #2147483648	; 0x80000000
 8022382:	6001      	str	r1, [r0, #0]
 8022384:	b92a      	cbnz	r2, 8022392 <_strtol_r+0xe6>
 8022386:	e011      	b.n	80223ac <_strtol_r+0x100>
 8022388:	b10e      	cbz	r6, 802238e <_strtol_r+0xe2>
 802238a:	f1ce 0300 	rsb	r3, lr, #0
 802238e:	b16a      	cbz	r2, 80223ac <_strtol_r+0x100>
 8022390:	b107      	cbz	r7, 8022394 <_strtol_r+0xe8>
 8022392:	1e69      	subs	r1, r5, #1
 8022394:	6011      	str	r1, [r2, #0]
 8022396:	e009      	b.n	80223ac <_strtol_r+0x100>
 8022398:	2430      	movs	r4, #48	; 0x30
 802239a:	2b00      	cmp	r3, #0
 802239c:	d1b2      	bne.n	8022304 <_strtol_r+0x58>
 802239e:	2308      	movs	r3, #8
 80223a0:	e7b0      	b.n	8022304 <_strtol_r+0x58>
 80223a2:	230a      	movs	r3, #10
 80223a4:	e7ae      	b.n	8022304 <_strtol_r+0x58>
 80223a6:	2c30      	cmp	r4, #48	; 0x30
 80223a8:	d1ac      	bne.n	8022304 <_strtol_r+0x58>
 80223aa:	e7a3      	b.n	80222f4 <_strtol_r+0x48>
 80223ac:	4618      	mov	r0, r3
 80223ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80223b2:	bf00      	nop
 80223b4:	2000178c 	.word	0x2000178c

080223b8 <__swbuf_r>:
 80223b8:	b570      	push	{r4, r5, r6, lr}
 80223ba:	460d      	mov	r5, r1
 80223bc:	4614      	mov	r4, r2
 80223be:	4606      	mov	r6, r0
 80223c0:	b118      	cbz	r0, 80223ca <__swbuf_r+0x12>
 80223c2:	6983      	ldr	r3, [r0, #24]
 80223c4:	b90b      	cbnz	r3, 80223ca <__swbuf_r+0x12>
 80223c6:	f7fd fed5 	bl	8020174 <__sinit>
 80223ca:	4b22      	ldr	r3, [pc, #136]	; (8022454 <__swbuf_r+0x9c>)
 80223cc:	429c      	cmp	r4, r3
 80223ce:	d101      	bne.n	80223d4 <__swbuf_r+0x1c>
 80223d0:	6874      	ldr	r4, [r6, #4]
 80223d2:	e008      	b.n	80223e6 <__swbuf_r+0x2e>
 80223d4:	4b20      	ldr	r3, [pc, #128]	; (8022458 <__swbuf_r+0xa0>)
 80223d6:	429c      	cmp	r4, r3
 80223d8:	d101      	bne.n	80223de <__swbuf_r+0x26>
 80223da:	68b4      	ldr	r4, [r6, #8]
 80223dc:	e003      	b.n	80223e6 <__swbuf_r+0x2e>
 80223de:	4b1f      	ldr	r3, [pc, #124]	; (802245c <__swbuf_r+0xa4>)
 80223e0:	429c      	cmp	r4, r3
 80223e2:	bf08      	it	eq
 80223e4:	68f4      	ldreq	r4, [r6, #12]
 80223e6:	69a3      	ldr	r3, [r4, #24]
 80223e8:	60a3      	str	r3, [r4, #8]
 80223ea:	89a3      	ldrh	r3, [r4, #12]
 80223ec:	071a      	lsls	r2, r3, #28
 80223ee:	d509      	bpl.n	8022404 <__swbuf_r+0x4c>
 80223f0:	6923      	ldr	r3, [r4, #16]
 80223f2:	b13b      	cbz	r3, 8022404 <__swbuf_r+0x4c>
 80223f4:	6823      	ldr	r3, [r4, #0]
 80223f6:	6920      	ldr	r0, [r4, #16]
 80223f8:	1a18      	subs	r0, r3, r0
 80223fa:	6963      	ldr	r3, [r4, #20]
 80223fc:	4298      	cmp	r0, r3
 80223fe:	b2ed      	uxtb	r5, r5
 8022400:	db0f      	blt.n	8022422 <__swbuf_r+0x6a>
 8022402:	e008      	b.n	8022416 <__swbuf_r+0x5e>
 8022404:	4630      	mov	r0, r6
 8022406:	4621      	mov	r1, r4
 8022408:	f000 f83c 	bl	8022484 <__swsetup_r>
 802240c:	2800      	cmp	r0, #0
 802240e:	d0f1      	beq.n	80223f4 <__swbuf_r+0x3c>
 8022410:	f04f 30ff 	mov.w	r0, #4294967295
 8022414:	bd70      	pop	{r4, r5, r6, pc}
 8022416:	4630      	mov	r0, r6
 8022418:	4621      	mov	r1, r4
 802241a:	f7fd fe2f 	bl	802007c <_fflush_r>
 802241e:	2800      	cmp	r0, #0
 8022420:	d1f6      	bne.n	8022410 <__swbuf_r+0x58>
 8022422:	68a3      	ldr	r3, [r4, #8]
 8022424:	3b01      	subs	r3, #1
 8022426:	60a3      	str	r3, [r4, #8]
 8022428:	6823      	ldr	r3, [r4, #0]
 802242a:	1c5a      	adds	r2, r3, #1
 802242c:	6022      	str	r2, [r4, #0]
 802242e:	701d      	strb	r5, [r3, #0]
 8022430:	6963      	ldr	r3, [r4, #20]
 8022432:	3001      	adds	r0, #1
 8022434:	4298      	cmp	r0, r3
 8022436:	d004      	beq.n	8022442 <__swbuf_r+0x8a>
 8022438:	89a3      	ldrh	r3, [r4, #12]
 802243a:	07db      	lsls	r3, r3, #31
 802243c:	d507      	bpl.n	802244e <__swbuf_r+0x96>
 802243e:	2d0a      	cmp	r5, #10
 8022440:	d105      	bne.n	802244e <__swbuf_r+0x96>
 8022442:	4630      	mov	r0, r6
 8022444:	4621      	mov	r1, r4
 8022446:	f7fd fe19 	bl	802007c <_fflush_r>
 802244a:	2800      	cmp	r0, #0
 802244c:	d1e0      	bne.n	8022410 <__swbuf_r+0x58>
 802244e:	4628      	mov	r0, r5
 8022450:	bd70      	pop	{r4, r5, r6, pc}
 8022452:	bf00      	nop
 8022454:	080271a4 	.word	0x080271a4
 8022458:	080271c4 	.word	0x080271c4
 802245c:	080271e4 	.word	0x080271e4

08022460 <_write_r>:
 8022460:	b538      	push	{r3, r4, r5, lr}
 8022462:	4c07      	ldr	r4, [pc, #28]	; (8022480 <_write_r+0x20>)
 8022464:	4605      	mov	r5, r0
 8022466:	2000      	movs	r0, #0
 8022468:	6020      	str	r0, [r4, #0]
 802246a:	4608      	mov	r0, r1
 802246c:	4611      	mov	r1, r2
 802246e:	461a      	mov	r2, r3
 8022470:	f7fb f9d4 	bl	801d81c <_write>
 8022474:	1c43      	adds	r3, r0, #1
 8022476:	d102      	bne.n	802247e <_write_r+0x1e>
 8022478:	6823      	ldr	r3, [r4, #0]
 802247a:	b103      	cbz	r3, 802247e <_write_r+0x1e>
 802247c:	602b      	str	r3, [r5, #0]
 802247e:	bd38      	pop	{r3, r4, r5, pc}
 8022480:	20001a8c 	.word	0x20001a8c

08022484 <__swsetup_r>:
 8022484:	4b31      	ldr	r3, [pc, #196]	; (802254c <__swsetup_r+0xc8>)
 8022486:	b570      	push	{r4, r5, r6, lr}
 8022488:	681d      	ldr	r5, [r3, #0]
 802248a:	4606      	mov	r6, r0
 802248c:	460c      	mov	r4, r1
 802248e:	b125      	cbz	r5, 802249a <__swsetup_r+0x16>
 8022490:	69ab      	ldr	r3, [r5, #24]
 8022492:	b913      	cbnz	r3, 802249a <__swsetup_r+0x16>
 8022494:	4628      	mov	r0, r5
 8022496:	f7fd fe6d 	bl	8020174 <__sinit>
 802249a:	4b2d      	ldr	r3, [pc, #180]	; (8022550 <__swsetup_r+0xcc>)
 802249c:	429c      	cmp	r4, r3
 802249e:	d101      	bne.n	80224a4 <__swsetup_r+0x20>
 80224a0:	686c      	ldr	r4, [r5, #4]
 80224a2:	e008      	b.n	80224b6 <__swsetup_r+0x32>
 80224a4:	4b2b      	ldr	r3, [pc, #172]	; (8022554 <__swsetup_r+0xd0>)
 80224a6:	429c      	cmp	r4, r3
 80224a8:	d101      	bne.n	80224ae <__swsetup_r+0x2a>
 80224aa:	68ac      	ldr	r4, [r5, #8]
 80224ac:	e003      	b.n	80224b6 <__swsetup_r+0x32>
 80224ae:	4b2a      	ldr	r3, [pc, #168]	; (8022558 <__swsetup_r+0xd4>)
 80224b0:	429c      	cmp	r4, r3
 80224b2:	bf08      	it	eq
 80224b4:	68ec      	ldreq	r4, [r5, #12]
 80224b6:	89a3      	ldrh	r3, [r4, #12]
 80224b8:	b29a      	uxth	r2, r3
 80224ba:	0711      	lsls	r1, r2, #28
 80224bc:	d41d      	bmi.n	80224fa <__swsetup_r+0x76>
 80224be:	06d5      	lsls	r5, r2, #27
 80224c0:	d402      	bmi.n	80224c8 <__swsetup_r+0x44>
 80224c2:	2209      	movs	r2, #9
 80224c4:	6032      	str	r2, [r6, #0]
 80224c6:	e038      	b.n	802253a <__swsetup_r+0xb6>
 80224c8:	0750      	lsls	r0, r2, #29
 80224ca:	d512      	bpl.n	80224f2 <__swsetup_r+0x6e>
 80224cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80224ce:	b141      	cbz	r1, 80224e2 <__swsetup_r+0x5e>
 80224d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80224d4:	4299      	cmp	r1, r3
 80224d6:	d002      	beq.n	80224de <__swsetup_r+0x5a>
 80224d8:	4630      	mov	r0, r6
 80224da:	f7fd ff39 	bl	8020350 <_free_r>
 80224de:	2300      	movs	r3, #0
 80224e0:	6363      	str	r3, [r4, #52]	; 0x34
 80224e2:	89a3      	ldrh	r3, [r4, #12]
 80224e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80224e8:	81a3      	strh	r3, [r4, #12]
 80224ea:	2300      	movs	r3, #0
 80224ec:	6063      	str	r3, [r4, #4]
 80224ee:	6923      	ldr	r3, [r4, #16]
 80224f0:	6023      	str	r3, [r4, #0]
 80224f2:	89a3      	ldrh	r3, [r4, #12]
 80224f4:	f043 0308 	orr.w	r3, r3, #8
 80224f8:	81a3      	strh	r3, [r4, #12]
 80224fa:	6923      	ldr	r3, [r4, #16]
 80224fc:	b94b      	cbnz	r3, 8022512 <__swsetup_r+0x8e>
 80224fe:	89a3      	ldrh	r3, [r4, #12]
 8022500:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8022504:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8022508:	d003      	beq.n	8022512 <__swsetup_r+0x8e>
 802250a:	4630      	mov	r0, r6
 802250c:	4621      	mov	r1, r4
 802250e:	f001 f9a9 	bl	8023864 <__smakebuf_r>
 8022512:	89a3      	ldrh	r3, [r4, #12]
 8022514:	f013 0201 	ands.w	r2, r3, #1
 8022518:	d005      	beq.n	8022526 <__swsetup_r+0xa2>
 802251a:	2200      	movs	r2, #0
 802251c:	60a2      	str	r2, [r4, #8]
 802251e:	6962      	ldr	r2, [r4, #20]
 8022520:	4252      	negs	r2, r2
 8022522:	61a2      	str	r2, [r4, #24]
 8022524:	e003      	b.n	802252e <__swsetup_r+0xaa>
 8022526:	0799      	lsls	r1, r3, #30
 8022528:	bf58      	it	pl
 802252a:	6962      	ldrpl	r2, [r4, #20]
 802252c:	60a2      	str	r2, [r4, #8]
 802252e:	6922      	ldr	r2, [r4, #16]
 8022530:	b94a      	cbnz	r2, 8022546 <__swsetup_r+0xc2>
 8022532:	f003 0080 	and.w	r0, r3, #128	; 0x80
 8022536:	b280      	uxth	r0, r0
 8022538:	b130      	cbz	r0, 8022548 <__swsetup_r+0xc4>
 802253a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802253e:	81a3      	strh	r3, [r4, #12]
 8022540:	f04f 30ff 	mov.w	r0, #4294967295
 8022544:	bd70      	pop	{r4, r5, r6, pc}
 8022546:	2000      	movs	r0, #0
 8022548:	bd70      	pop	{r4, r5, r6, pc}
 802254a:	bf00      	nop
 802254c:	20001788 	.word	0x20001788
 8022550:	080271a4 	.word	0x080271a4
 8022554:	080271c4 	.word	0x080271c4
 8022558:	080271e4 	.word	0x080271e4

0802255c <_close_r>:
 802255c:	b538      	push	{r3, r4, r5, lr}
 802255e:	4c06      	ldr	r4, [pc, #24]	; (8022578 <_close_r+0x1c>)
 8022560:	2300      	movs	r3, #0
 8022562:	4605      	mov	r5, r0
 8022564:	4608      	mov	r0, r1
 8022566:	6023      	str	r3, [r4, #0]
 8022568:	f7fb f930 	bl	801d7cc <_close>
 802256c:	1c43      	adds	r3, r0, #1
 802256e:	d102      	bne.n	8022576 <_close_r+0x1a>
 8022570:	6823      	ldr	r3, [r4, #0]
 8022572:	b103      	cbz	r3, 8022576 <_close_r+0x1a>
 8022574:	602b      	str	r3, [r5, #0]
 8022576:	bd38      	pop	{r3, r4, r5, pc}
 8022578:	20001a8c 	.word	0x20001a8c

0802257c <quorem>:
 802257c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022580:	6903      	ldr	r3, [r0, #16]
 8022582:	690c      	ldr	r4, [r1, #16]
 8022584:	42a3      	cmp	r3, r4
 8022586:	4680      	mov	r8, r0
 8022588:	f2c0 8081 	blt.w	802268e <quorem+0x112>
 802258c:	3c01      	subs	r4, #1
 802258e:	f101 0714 	add.w	r7, r1, #20
 8022592:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8022596:	f100 0614 	add.w	r6, r0, #20
 802259a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 802259e:	eb06 030e 	add.w	r3, r6, lr
 80225a2:	9301      	str	r3, [sp, #4]
 80225a4:	3501      	adds	r5, #1
 80225a6:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 80225aa:	fbb3 f5f5 	udiv	r5, r3, r5
 80225ae:	eb07 090e 	add.w	r9, r7, lr
 80225b2:	b3c5      	cbz	r5, 8022626 <quorem+0xaa>
 80225b4:	f04f 0a00 	mov.w	sl, #0
 80225b8:	4638      	mov	r0, r7
 80225ba:	46b4      	mov	ip, r6
 80225bc:	46d3      	mov	fp, sl
 80225be:	f850 3b04 	ldr.w	r3, [r0], #4
 80225c2:	b29a      	uxth	r2, r3
 80225c4:	0c1b      	lsrs	r3, r3, #16
 80225c6:	fb02 a205 	mla	r2, r2, r5, sl
 80225ca:	436b      	muls	r3, r5
 80225cc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80225d0:	b292      	uxth	r2, r2
 80225d2:	ebc2 020b 	rsb	r2, r2, fp
 80225d6:	f8bc b000 	ldrh.w	fp, [ip]
 80225da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80225de:	fa12 f28b 	uxtah	r2, r2, fp
 80225e2:	fa1f fb83 	uxth.w	fp, r3
 80225e6:	f8dc 3000 	ldr.w	r3, [ip]
 80225ea:	ebcb 4313 	rsb	r3, fp, r3, lsr #16
 80225ee:	eb03 4322 	add.w	r3, r3, r2, asr #16
 80225f2:	b292      	uxth	r2, r2
 80225f4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80225f8:	4548      	cmp	r0, r9
 80225fa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80225fe:	f84c 2b04 	str.w	r2, [ip], #4
 8022602:	d9dc      	bls.n	80225be <quorem+0x42>
 8022604:	f856 300e 	ldr.w	r3, [r6, lr]
 8022608:	b96b      	cbnz	r3, 8022626 <quorem+0xaa>
 802260a:	9b01      	ldr	r3, [sp, #4]
 802260c:	3b04      	subs	r3, #4
 802260e:	42b3      	cmp	r3, r6
 8022610:	461a      	mov	r2, r3
 8022612:	d802      	bhi.n	802261a <quorem+0x9e>
 8022614:	f8c8 4010 	str.w	r4, [r8, #16]
 8022618:	e005      	b.n	8022626 <quorem+0xaa>
 802261a:	6812      	ldr	r2, [r2, #0]
 802261c:	3b04      	subs	r3, #4
 802261e:	2a00      	cmp	r2, #0
 8022620:	d1f8      	bne.n	8022614 <quorem+0x98>
 8022622:	3c01      	subs	r4, #1
 8022624:	e7f3      	b.n	802260e <quorem+0x92>
 8022626:	4640      	mov	r0, r8
 8022628:	f001 fbd7 	bl	8023dda <__mcmp>
 802262c:	2800      	cmp	r0, #0
 802262e:	db2c      	blt.n	802268a <quorem+0x10e>
 8022630:	3501      	adds	r5, #1
 8022632:	4630      	mov	r0, r6
 8022634:	f04f 0e00 	mov.w	lr, #0
 8022638:	f857 1b04 	ldr.w	r1, [r7], #4
 802263c:	f8d0 c000 	ldr.w	ip, [r0]
 8022640:	b28a      	uxth	r2, r1
 8022642:	ebc2 030e 	rsb	r3, r2, lr
 8022646:	0c09      	lsrs	r1, r1, #16
 8022648:	fa13 f38c 	uxtah	r3, r3, ip
 802264c:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
 8022650:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8022654:	b29b      	uxth	r3, r3
 8022656:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802265a:	454f      	cmp	r7, r9
 802265c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8022660:	f840 3b04 	str.w	r3, [r0], #4
 8022664:	d9e8      	bls.n	8022638 <quorem+0xbc>
 8022666:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 802266a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 802266e:	b962      	cbnz	r2, 802268a <quorem+0x10e>
 8022670:	3b04      	subs	r3, #4
 8022672:	42b3      	cmp	r3, r6
 8022674:	461a      	mov	r2, r3
 8022676:	d802      	bhi.n	802267e <quorem+0x102>
 8022678:	f8c8 4010 	str.w	r4, [r8, #16]
 802267c:	e005      	b.n	802268a <quorem+0x10e>
 802267e:	6812      	ldr	r2, [r2, #0]
 8022680:	3b04      	subs	r3, #4
 8022682:	2a00      	cmp	r2, #0
 8022684:	d1f8      	bne.n	8022678 <quorem+0xfc>
 8022686:	3c01      	subs	r4, #1
 8022688:	e7f3      	b.n	8022672 <quorem+0xf6>
 802268a:	4628      	mov	r0, r5
 802268c:	e000      	b.n	8022690 <quorem+0x114>
 802268e:	2000      	movs	r0, #0
 8022690:	b003      	add	sp, #12
 8022692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08022698 <_dtoa_r>:
 8022698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802269c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 802269e:	b097      	sub	sp, #92	; 0x5c
 80226a0:	4682      	mov	sl, r0
 80226a2:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 80226a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80226a8:	b945      	cbnz	r5, 80226bc <_dtoa_r+0x24>
 80226aa:	2010      	movs	r0, #16
 80226ac:	f7fd fe10 	bl	80202d0 <malloc>
 80226b0:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 80226b4:	6045      	str	r5, [r0, #4]
 80226b6:	6085      	str	r5, [r0, #8]
 80226b8:	6005      	str	r5, [r0, #0]
 80226ba:	60c5      	str	r5, [r0, #12]
 80226bc:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 80226c0:	6819      	ldr	r1, [r3, #0]
 80226c2:	b159      	cbz	r1, 80226dc <_dtoa_r+0x44>
 80226c4:	685a      	ldr	r2, [r3, #4]
 80226c6:	604a      	str	r2, [r1, #4]
 80226c8:	2301      	movs	r3, #1
 80226ca:	4093      	lsls	r3, r2
 80226cc:	608b      	str	r3, [r1, #8]
 80226ce:	4650      	mov	r0, sl
 80226d0:	f001 f966 	bl	80239a0 <_Bfree>
 80226d4:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 80226d8:	2200      	movs	r2, #0
 80226da:	601a      	str	r2, [r3, #0]
 80226dc:	9b03      	ldr	r3, [sp, #12]
 80226de:	4aa2      	ldr	r2, [pc, #648]	; (8022968 <_dtoa_r+0x2d0>)
 80226e0:	2b00      	cmp	r3, #0
 80226e2:	bfbf      	itttt	lt
 80226e4:	2301      	movlt	r3, #1
 80226e6:	6023      	strlt	r3, [r4, #0]
 80226e8:	9b03      	ldrlt	r3, [sp, #12]
 80226ea:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80226ee:	bfb8      	it	lt
 80226f0:	9303      	strlt	r3, [sp, #12]
 80226f2:	9f03      	ldr	r7, [sp, #12]
 80226f4:	bfa4      	itt	ge
 80226f6:	2300      	movge	r3, #0
 80226f8:	6023      	strge	r3, [r4, #0]
 80226fa:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 80226fe:	0d1b      	lsrs	r3, r3, #20
 8022700:	051b      	lsls	r3, r3, #20
 8022702:	4293      	cmp	r3, r2
 8022704:	d11d      	bne.n	8022742 <_dtoa_r+0xaa>
 8022706:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8022708:	f242 730f 	movw	r3, #9999	; 0x270f
 802270c:	6013      	str	r3, [r2, #0]
 802270e:	9b02      	ldr	r3, [sp, #8]
 8022710:	b943      	cbnz	r3, 8022724 <_dtoa_r+0x8c>
 8022712:	4a96      	ldr	r2, [pc, #600]	; (802296c <_dtoa_r+0x2d4>)
 8022714:	4b96      	ldr	r3, [pc, #600]	; (8022970 <_dtoa_r+0x2d8>)
 8022716:	f3c7 0013 	ubfx	r0, r7, #0, #20
 802271a:	2800      	cmp	r0, #0
 802271c:	bf14      	ite	ne
 802271e:	4618      	movne	r0, r3
 8022720:	4610      	moveq	r0, r2
 8022722:	e000      	b.n	8022726 <_dtoa_r+0x8e>
 8022724:	4892      	ldr	r0, [pc, #584]	; (8022970 <_dtoa_r+0x2d8>)
 8022726:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022728:	2b00      	cmp	r3, #0
 802272a:	f000 8573 	beq.w	8023214 <_dtoa_r+0xb7c>
 802272e:	78c3      	ldrb	r3, [r0, #3]
 8022730:	b113      	cbz	r3, 8022738 <_dtoa_r+0xa0>
 8022732:	f100 0308 	add.w	r3, r0, #8
 8022736:	e000      	b.n	802273a <_dtoa_r+0xa2>
 8022738:	1cc3      	adds	r3, r0, #3
 802273a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 802273c:	6013      	str	r3, [r2, #0]
 802273e:	f000 bd69 	b.w	8023214 <_dtoa_r+0xb7c>
 8022742:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8022746:	2200      	movs	r2, #0
 8022748:	4620      	mov	r0, r4
 802274a:	4629      	mov	r1, r5
 802274c:	2300      	movs	r3, #0
 802274e:	f002 fab9 	bl	8024cc4 <__aeabi_dcmpeq>
 8022752:	4680      	mov	r8, r0
 8022754:	b158      	cbz	r0, 802276e <_dtoa_r+0xd6>
 8022756:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8022758:	2301      	movs	r3, #1
 802275a:	6013      	str	r3, [r2, #0]
 802275c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802275e:	2b00      	cmp	r3, #0
 8022760:	f000 8546 	beq.w	80231f0 <_dtoa_r+0xb58>
 8022764:	4883      	ldr	r0, [pc, #524]	; (8022974 <_dtoa_r+0x2dc>)
 8022766:	6018      	str	r0, [r3, #0]
 8022768:	3801      	subs	r0, #1
 802276a:	f000 bd53 	b.w	8023214 <_dtoa_r+0xb7c>
 802276e:	ab15      	add	r3, sp, #84	; 0x54
 8022770:	9300      	str	r3, [sp, #0]
 8022772:	ab14      	add	r3, sp, #80	; 0x50
 8022774:	9301      	str	r3, [sp, #4]
 8022776:	4650      	mov	r0, sl
 8022778:	4622      	mov	r2, r4
 802277a:	462b      	mov	r3, r5
 802277c:	f001 fc1b 	bl	8023fb6 <__d2b>
 8022780:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8022784:	9007      	str	r0, [sp, #28]
 8022786:	b15e      	cbz	r6, 80227a0 <_dtoa_r+0x108>
 8022788:	f3c5 0313 	ubfx	r3, r5, #0, #20
 802278c:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8022790:	4620      	mov	r0, r4
 8022792:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8022796:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 802279a:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 802279e:	e01d      	b.n	80227dc <_dtoa_r+0x144>
 80227a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80227a2:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80227a4:	441e      	add	r6, r3
 80227a6:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 80227aa:	429e      	cmp	r6, r3
 80227ac:	bfad      	iteet	ge
 80227ae:	9a02      	ldrge	r2, [sp, #8]
 80227b0:	4b71      	ldrlt	r3, [pc, #452]	; (8022978 <_dtoa_r+0x2e0>)
 80227b2:	9a02      	ldrlt	r2, [sp, #8]
 80227b4:	f206 4312 	addwge	r3, r6, #1042	; 0x412
 80227b8:	bfa3      	ittte	ge
 80227ba:	fa22 f003 	lsrge.w	r0, r2, r3
 80227be:	4b6f      	ldrge	r3, [pc, #444]	; (802297c <_dtoa_r+0x2e4>)
 80227c0:	1b9b      	subge	r3, r3, r6
 80227c2:	1b9b      	sublt	r3, r3, r6
 80227c4:	bfaa      	itet	ge
 80227c6:	409f      	lslge	r7, r3
 80227c8:	fa02 f003 	lsllt.w	r0, r2, r3
 80227cc:	4338      	orrge	r0, r7
 80227ce:	f001 ff9b 	bl	8024708 <__aeabi_ui2d>
 80227d2:	2301      	movs	r3, #1
 80227d4:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80227d8:	3e01      	subs	r6, #1
 80227da:	9313      	str	r3, [sp, #76]	; 0x4c
 80227dc:	2200      	movs	r2, #0
 80227de:	4b68      	ldr	r3, [pc, #416]	; (8022980 <_dtoa_r+0x2e8>)
 80227e0:	f001 fe54 	bl	802448c <__aeabi_dsub>
 80227e4:	a35a      	add	r3, pc, #360	; (adr r3, 8022950 <_dtoa_r+0x2b8>)
 80227e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80227ea:	f002 f803 	bl	80247f4 <__aeabi_dmul>
 80227ee:	a35a      	add	r3, pc, #360	; (adr r3, 8022958 <_dtoa_r+0x2c0>)
 80227f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80227f4:	f001 fe4c 	bl	8024490 <__adddf3>
 80227f8:	4604      	mov	r4, r0
 80227fa:	4630      	mov	r0, r6
 80227fc:	460d      	mov	r5, r1
 80227fe:	f001 ff93 	bl	8024728 <__aeabi_i2d>
 8022802:	a357      	add	r3, pc, #348	; (adr r3, 8022960 <_dtoa_r+0x2c8>)
 8022804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022808:	f001 fff4 	bl	80247f4 <__aeabi_dmul>
 802280c:	4602      	mov	r2, r0
 802280e:	460b      	mov	r3, r1
 8022810:	4620      	mov	r0, r4
 8022812:	4629      	mov	r1, r5
 8022814:	f001 fe3c 	bl	8024490 <__adddf3>
 8022818:	4604      	mov	r4, r0
 802281a:	460d      	mov	r5, r1
 802281c:	f002 fa84 	bl	8024d28 <__aeabi_d2iz>
 8022820:	4629      	mov	r1, r5
 8022822:	4683      	mov	fp, r0
 8022824:	2200      	movs	r2, #0
 8022826:	4620      	mov	r0, r4
 8022828:	2300      	movs	r3, #0
 802282a:	f002 fa55 	bl	8024cd8 <__aeabi_dcmplt>
 802282e:	b158      	cbz	r0, 8022848 <_dtoa_r+0x1b0>
 8022830:	4658      	mov	r0, fp
 8022832:	f001 ff79 	bl	8024728 <__aeabi_i2d>
 8022836:	4602      	mov	r2, r0
 8022838:	460b      	mov	r3, r1
 802283a:	4620      	mov	r0, r4
 802283c:	4629      	mov	r1, r5
 802283e:	f002 fa41 	bl	8024cc4 <__aeabi_dcmpeq>
 8022842:	b908      	cbnz	r0, 8022848 <_dtoa_r+0x1b0>
 8022844:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022848:	f1bb 0f16 	cmp.w	fp, #22
 802284c:	d80d      	bhi.n	802286a <_dtoa_r+0x1d2>
 802284e:	4b4d      	ldr	r3, [pc, #308]	; (8022984 <_dtoa_r+0x2ec>)
 8022850:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8022854:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022858:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802285c:	f002 fa5a 	bl	8024d14 <__aeabi_dcmpgt>
 8022860:	b130      	cbz	r0, 8022870 <_dtoa_r+0x1d8>
 8022862:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022866:	2300      	movs	r3, #0
 8022868:	e000      	b.n	802286c <_dtoa_r+0x1d4>
 802286a:	2301      	movs	r3, #1
 802286c:	9312      	str	r3, [sp, #72]	; 0x48
 802286e:	e000      	b.n	8022872 <_dtoa_r+0x1da>
 8022870:	9012      	str	r0, [sp, #72]	; 0x48
 8022872:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8022874:	1b9e      	subs	r6, r3, r6
 8022876:	1e73      	subs	r3, r6, #1
 8022878:	930a      	str	r3, [sp, #40]	; 0x28
 802287a:	bf45      	ittet	mi
 802287c:	425b      	negmi	r3, r3
 802287e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8022880:	2300      	movpl	r3, #0
 8022882:	2300      	movmi	r3, #0
 8022884:	bf4c      	ite	mi
 8022886:	930a      	strmi	r3, [sp, #40]	; 0x28
 8022888:	9309      	strpl	r3, [sp, #36]	; 0x24
 802288a:	f1bb 0f00 	cmp.w	fp, #0
 802288e:	db07      	blt.n	80228a0 <_dtoa_r+0x208>
 8022890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022892:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8022896:	445b      	add	r3, fp
 8022898:	930a      	str	r3, [sp, #40]	; 0x28
 802289a:	2300      	movs	r3, #0
 802289c:	930b      	str	r3, [sp, #44]	; 0x2c
 802289e:	e008      	b.n	80228b2 <_dtoa_r+0x21a>
 80228a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80228a2:	ebcb 0303 	rsb	r3, fp, r3
 80228a6:	9309      	str	r3, [sp, #36]	; 0x24
 80228a8:	f1cb 0300 	rsb	r3, fp, #0
 80228ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80228ae:	2300      	movs	r3, #0
 80228b0:	930d      	str	r3, [sp, #52]	; 0x34
 80228b2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80228b4:	2b09      	cmp	r3, #9
 80228b6:	d828      	bhi.n	802290a <_dtoa_r+0x272>
 80228b8:	2b05      	cmp	r3, #5
 80228ba:	bfc4      	itt	gt
 80228bc:	3b04      	subgt	r3, #4
 80228be:	9320      	strgt	r3, [sp, #128]	; 0x80
 80228c0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80228c2:	f1a3 0302 	sub.w	r3, r3, #2
 80228c6:	bfcc      	ite	gt
 80228c8:	2500      	movgt	r5, #0
 80228ca:	2501      	movle	r5, #1
 80228cc:	2b03      	cmp	r3, #3
 80228ce:	d821      	bhi.n	8022914 <_dtoa_r+0x27c>
 80228d0:	e8df f003 	tbb	[pc, r3]
 80228d4:	10040e02 	.word	0x10040e02
 80228d8:	2300      	movs	r3, #0
 80228da:	e000      	b.n	80228de <_dtoa_r+0x246>
 80228dc:	2301      	movs	r3, #1
 80228de:	930c      	str	r3, [sp, #48]	; 0x30
 80228e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80228e2:	2b00      	cmp	r3, #0
 80228e4:	dc20      	bgt.n	8022928 <_dtoa_r+0x290>
 80228e6:	2301      	movs	r3, #1
 80228e8:	9306      	str	r3, [sp, #24]
 80228ea:	9305      	str	r3, [sp, #20]
 80228ec:	461a      	mov	r2, r3
 80228ee:	e019      	b.n	8022924 <_dtoa_r+0x28c>
 80228f0:	2300      	movs	r3, #0
 80228f2:	e000      	b.n	80228f6 <_dtoa_r+0x25e>
 80228f4:	2301      	movs	r3, #1
 80228f6:	930c      	str	r3, [sp, #48]	; 0x30
 80228f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80228fa:	445b      	add	r3, fp
 80228fc:	9306      	str	r3, [sp, #24]
 80228fe:	3301      	adds	r3, #1
 8022900:	2b01      	cmp	r3, #1
 8022902:	9305      	str	r3, [sp, #20]
 8022904:	bfb8      	it	lt
 8022906:	2301      	movlt	r3, #1
 8022908:	e011      	b.n	802292e <_dtoa_r+0x296>
 802290a:	2501      	movs	r5, #1
 802290c:	2300      	movs	r3, #0
 802290e:	9320      	str	r3, [sp, #128]	; 0x80
 8022910:	950c      	str	r5, [sp, #48]	; 0x30
 8022912:	e001      	b.n	8022918 <_dtoa_r+0x280>
 8022914:	2301      	movs	r3, #1
 8022916:	930c      	str	r3, [sp, #48]	; 0x30
 8022918:	f04f 33ff 	mov.w	r3, #4294967295
 802291c:	9306      	str	r3, [sp, #24]
 802291e:	9305      	str	r3, [sp, #20]
 8022920:	2200      	movs	r2, #0
 8022922:	2312      	movs	r3, #18
 8022924:	9221      	str	r2, [sp, #132]	; 0x84
 8022926:	e002      	b.n	802292e <_dtoa_r+0x296>
 8022928:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802292a:	9306      	str	r3, [sp, #24]
 802292c:	9305      	str	r3, [sp, #20]
 802292e:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 8022932:	2200      	movs	r2, #0
 8022934:	6062      	str	r2, [r4, #4]
 8022936:	2104      	movs	r1, #4
 8022938:	f101 0214 	add.w	r2, r1, #20
 802293c:	429a      	cmp	r2, r3
 802293e:	d823      	bhi.n	8022988 <_dtoa_r+0x2f0>
 8022940:	6862      	ldr	r2, [r4, #4]
 8022942:	3201      	adds	r2, #1
 8022944:	6062      	str	r2, [r4, #4]
 8022946:	0049      	lsls	r1, r1, #1
 8022948:	e7f6      	b.n	8022938 <_dtoa_r+0x2a0>
 802294a:	bf00      	nop
 802294c:	f3af 8000 	nop.w
 8022950:	636f4361 	.word	0x636f4361
 8022954:	3fd287a7 	.word	0x3fd287a7
 8022958:	8b60c8b3 	.word	0x8b60c8b3
 802295c:	3fc68a28 	.word	0x3fc68a28
 8022960:	509f79fb 	.word	0x509f79fb
 8022964:	3fd34413 	.word	0x3fd34413
 8022968:	7ff00000 	.word	0x7ff00000
 802296c:	080273ad 	.word	0x080273ad
 8022970:	080273b6 	.word	0x080273b6
 8022974:	0802722e 	.word	0x0802722e
 8022978:	fffffbee 	.word	0xfffffbee
 802297c:	fffffc0e 	.word	0xfffffc0e
 8022980:	3ff80000 	.word	0x3ff80000
 8022984:	080273c8 	.word	0x080273c8
 8022988:	4650      	mov	r0, sl
 802298a:	6861      	ldr	r1, [r4, #4]
 802298c:	f000 ffd3 	bl	8023936 <_Balloc>
 8022990:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8022994:	6020      	str	r0, [r4, #0]
 8022996:	681b      	ldr	r3, [r3, #0]
 8022998:	9308      	str	r3, [sp, #32]
 802299a:	9b05      	ldr	r3, [sp, #20]
 802299c:	2b0e      	cmp	r3, #14
 802299e:	f200 814b 	bhi.w	8022c38 <_dtoa_r+0x5a0>
 80229a2:	2d00      	cmp	r5, #0
 80229a4:	f000 8148 	beq.w	8022c38 <_dtoa_r+0x5a0>
 80229a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80229ac:	f1bb 0f00 	cmp.w	fp, #0
 80229b0:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80229b4:	dd31      	ble.n	8022a1a <_dtoa_r+0x382>
 80229b6:	4ab3      	ldr	r2, [pc, #716]	; (8022c84 <_dtoa_r+0x5ec>)
 80229b8:	f00b 030f 	and.w	r3, fp, #15
 80229bc:	ea4f 172b 	mov.w	r7, fp, asr #4
 80229c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80229c4:	06f8      	lsls	r0, r7, #27
 80229c6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80229ca:	d50c      	bpl.n	80229e6 <_dtoa_r+0x34e>
 80229cc:	4bae      	ldr	r3, [pc, #696]	; (8022c88 <_dtoa_r+0x5f0>)
 80229ce:	ec51 0b17 	vmov	r0, r1, d7
 80229d2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80229d6:	f002 f837 	bl	8024a48 <__aeabi_ddiv>
 80229da:	f007 070f 	and.w	r7, r7, #15
 80229de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80229e2:	2603      	movs	r6, #3
 80229e4:	e000      	b.n	80229e8 <_dtoa_r+0x350>
 80229e6:	2602      	movs	r6, #2
 80229e8:	f8df 829c 	ldr.w	r8, [pc, #668]	; 8022c88 <_dtoa_r+0x5f0>
 80229ec:	b177      	cbz	r7, 8022a0c <_dtoa_r+0x374>
 80229ee:	07f9      	lsls	r1, r7, #31
 80229f0:	d508      	bpl.n	8022a04 <_dtoa_r+0x36c>
 80229f2:	4620      	mov	r0, r4
 80229f4:	4629      	mov	r1, r5
 80229f6:	e9d8 2300 	ldrd	r2, r3, [r8]
 80229fa:	f001 fefb 	bl	80247f4 <__aeabi_dmul>
 80229fe:	3601      	adds	r6, #1
 8022a00:	4604      	mov	r4, r0
 8022a02:	460d      	mov	r5, r1
 8022a04:	107f      	asrs	r7, r7, #1
 8022a06:	f108 0808 	add.w	r8, r8, #8
 8022a0a:	e7ef      	b.n	80229ec <_dtoa_r+0x354>
 8022a0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022a10:	4622      	mov	r2, r4
 8022a12:	462b      	mov	r3, r5
 8022a14:	f002 f818 	bl	8024a48 <__aeabi_ddiv>
 8022a18:	e01b      	b.n	8022a52 <_dtoa_r+0x3ba>
 8022a1a:	f1cb 0400 	rsb	r4, fp, #0
 8022a1e:	b1dc      	cbz	r4, 8022a58 <_dtoa_r+0x3c0>
 8022a20:	4b98      	ldr	r3, [pc, #608]	; (8022c84 <_dtoa_r+0x5ec>)
 8022a22:	4d99      	ldr	r5, [pc, #612]	; (8022c88 <_dtoa_r+0x5f0>)
 8022a24:	f004 020f 	and.w	r2, r4, #15
 8022a28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8022a2c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8022a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a34:	f001 fede 	bl	80247f4 <__aeabi_dmul>
 8022a38:	1124      	asrs	r4, r4, #4
 8022a3a:	2602      	movs	r6, #2
 8022a3c:	b14c      	cbz	r4, 8022a52 <_dtoa_r+0x3ba>
 8022a3e:	07e2      	lsls	r2, r4, #31
 8022a40:	d504      	bpl.n	8022a4c <_dtoa_r+0x3b4>
 8022a42:	e9d5 2300 	ldrd	r2, r3, [r5]
 8022a46:	3601      	adds	r6, #1
 8022a48:	f001 fed4 	bl	80247f4 <__aeabi_dmul>
 8022a4c:	1064      	asrs	r4, r4, #1
 8022a4e:	3508      	adds	r5, #8
 8022a50:	e7f4      	b.n	8022a3c <_dtoa_r+0x3a4>
 8022a52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8022a56:	e000      	b.n	8022a5a <_dtoa_r+0x3c2>
 8022a58:	2602      	movs	r6, #2
 8022a5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022a5c:	b1db      	cbz	r3, 8022a96 <_dtoa_r+0x3fe>
 8022a5e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8022a62:	2200      	movs	r2, #0
 8022a64:	4620      	mov	r0, r4
 8022a66:	4629      	mov	r1, r5
 8022a68:	4b88      	ldr	r3, [pc, #544]	; (8022c8c <_dtoa_r+0x5f4>)
 8022a6a:	f002 f935 	bl	8024cd8 <__aeabi_dcmplt>
 8022a6e:	b190      	cbz	r0, 8022a96 <_dtoa_r+0x3fe>
 8022a70:	9b05      	ldr	r3, [sp, #20]
 8022a72:	b183      	cbz	r3, 8022a96 <_dtoa_r+0x3fe>
 8022a74:	9b06      	ldr	r3, [sp, #24]
 8022a76:	2b00      	cmp	r3, #0
 8022a78:	f340 80da 	ble.w	8022c30 <_dtoa_r+0x598>
 8022a7c:	4629      	mov	r1, r5
 8022a7e:	4620      	mov	r0, r4
 8022a80:	2200      	movs	r2, #0
 8022a82:	4b83      	ldr	r3, [pc, #524]	; (8022c90 <_dtoa_r+0x5f8>)
 8022a84:	f001 feb6 	bl	80247f4 <__aeabi_dmul>
 8022a88:	f10b 37ff 	add.w	r7, fp, #4294967295
 8022a8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8022a90:	3601      	adds	r6, #1
 8022a92:	9d06      	ldr	r5, [sp, #24]
 8022a94:	e001      	b.n	8022a9a <_dtoa_r+0x402>
 8022a96:	9d05      	ldr	r5, [sp, #20]
 8022a98:	465f      	mov	r7, fp
 8022a9a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8022a9e:	4630      	mov	r0, r6
 8022aa0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8022aa4:	f001 fe40 	bl	8024728 <__aeabi_i2d>
 8022aa8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8022aac:	f001 fea2 	bl	80247f4 <__aeabi_dmul>
 8022ab0:	2200      	movs	r2, #0
 8022ab2:	4b78      	ldr	r3, [pc, #480]	; (8022c94 <_dtoa_r+0x5fc>)
 8022ab4:	f001 fcec 	bl	8024490 <__adddf3>
 8022ab8:	4680      	mov	r8, r0
 8022aba:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8022abe:	b9cd      	cbnz	r5, 8022af4 <_dtoa_r+0x45c>
 8022ac0:	2200      	movs	r2, #0
 8022ac2:	4b75      	ldr	r3, [pc, #468]	; (8022c98 <_dtoa_r+0x600>)
 8022ac4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8022ac8:	f001 fce0 	bl	802448c <__aeabi_dsub>
 8022acc:	4642      	mov	r2, r8
 8022ace:	464b      	mov	r3, r9
 8022ad0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8022ad4:	f002 f91e 	bl	8024d14 <__aeabi_dcmpgt>
 8022ad8:	2800      	cmp	r0, #0
 8022ada:	f040 8246 	bne.w	8022f6a <_dtoa_r+0x8d2>
 8022ade:	4642      	mov	r2, r8
 8022ae0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8022ae4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022ae8:	f002 f8f6 	bl	8024cd8 <__aeabi_dcmplt>
 8022aec:	2800      	cmp	r0, #0
 8022aee:	f040 8236 	bne.w	8022f5e <_dtoa_r+0x8c6>
 8022af2:	e09d      	b.n	8022c30 <_dtoa_r+0x598>
 8022af4:	4b63      	ldr	r3, [pc, #396]	; (8022c84 <_dtoa_r+0x5ec>)
 8022af6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022af8:	1e6a      	subs	r2, r5, #1
 8022afa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8022afe:	2900      	cmp	r1, #0
 8022b00:	d049      	beq.n	8022b96 <_dtoa_r+0x4fe>
 8022b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022b06:	2000      	movs	r0, #0
 8022b08:	4964      	ldr	r1, [pc, #400]	; (8022c9c <_dtoa_r+0x604>)
 8022b0a:	f001 ff9d 	bl	8024a48 <__aeabi_ddiv>
 8022b0e:	4642      	mov	r2, r8
 8022b10:	464b      	mov	r3, r9
 8022b12:	f001 fcbb 	bl	802448c <__aeabi_dsub>
 8022b16:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8022b1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8022b1e:	9c08      	ldr	r4, [sp, #32]
 8022b20:	4649      	mov	r1, r9
 8022b22:	4640      	mov	r0, r8
 8022b24:	f002 f900 	bl	8024d28 <__aeabi_d2iz>
 8022b28:	4606      	mov	r6, r0
 8022b2a:	f001 fdfd 	bl	8024728 <__aeabi_i2d>
 8022b2e:	4602      	mov	r2, r0
 8022b30:	460b      	mov	r3, r1
 8022b32:	4640      	mov	r0, r8
 8022b34:	4649      	mov	r1, r9
 8022b36:	f001 fca9 	bl	802448c <__aeabi_dsub>
 8022b3a:	3630      	adds	r6, #48	; 0x30
 8022b3c:	f804 6b01 	strb.w	r6, [r4], #1
 8022b40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8022b44:	4680      	mov	r8, r0
 8022b46:	4689      	mov	r9, r1
 8022b48:	f002 f8c6 	bl	8024cd8 <__aeabi_dcmplt>
 8022b4c:	2800      	cmp	r0, #0
 8022b4e:	f040 8340 	bne.w	80231d2 <_dtoa_r+0xb3a>
 8022b52:	4642      	mov	r2, r8
 8022b54:	464b      	mov	r3, r9
 8022b56:	2000      	movs	r0, #0
 8022b58:	494c      	ldr	r1, [pc, #304]	; (8022c8c <_dtoa_r+0x5f4>)
 8022b5a:	f001 fc97 	bl	802448c <__aeabi_dsub>
 8022b5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8022b62:	f002 f8b9 	bl	8024cd8 <__aeabi_dcmplt>
 8022b66:	2800      	cmp	r0, #0
 8022b68:	f040 80d3 	bne.w	8022d12 <_dtoa_r+0x67a>
 8022b6c:	9b08      	ldr	r3, [sp, #32]
 8022b6e:	1ae3      	subs	r3, r4, r3
 8022b70:	42ab      	cmp	r3, r5
 8022b72:	da5d      	bge.n	8022c30 <_dtoa_r+0x598>
 8022b74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022b78:	2200      	movs	r2, #0
 8022b7a:	4b45      	ldr	r3, [pc, #276]	; (8022c90 <_dtoa_r+0x5f8>)
 8022b7c:	f001 fe3a 	bl	80247f4 <__aeabi_dmul>
 8022b80:	2200      	movs	r2, #0
 8022b82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8022b86:	4b42      	ldr	r3, [pc, #264]	; (8022c90 <_dtoa_r+0x5f8>)
 8022b88:	4640      	mov	r0, r8
 8022b8a:	4649      	mov	r1, r9
 8022b8c:	f001 fe32 	bl	80247f4 <__aeabi_dmul>
 8022b90:	4680      	mov	r8, r0
 8022b92:	4689      	mov	r9, r1
 8022b94:	e7c4      	b.n	8022b20 <_dtoa_r+0x488>
 8022b96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022b9a:	4642      	mov	r2, r8
 8022b9c:	464b      	mov	r3, r9
 8022b9e:	f001 fe29 	bl	80247f4 <__aeabi_dmul>
 8022ba2:	9b08      	ldr	r3, [sp, #32]
 8022ba4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8022ba8:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8022bac:	195c      	adds	r4, r3, r5
 8022bae:	461d      	mov	r5, r3
 8022bb0:	4649      	mov	r1, r9
 8022bb2:	4640      	mov	r0, r8
 8022bb4:	f002 f8b8 	bl	8024d28 <__aeabi_d2iz>
 8022bb8:	4606      	mov	r6, r0
 8022bba:	f001 fdb5 	bl	8024728 <__aeabi_i2d>
 8022bbe:	3630      	adds	r6, #48	; 0x30
 8022bc0:	4602      	mov	r2, r0
 8022bc2:	460b      	mov	r3, r1
 8022bc4:	4640      	mov	r0, r8
 8022bc6:	4649      	mov	r1, r9
 8022bc8:	f001 fc60 	bl	802448c <__aeabi_dsub>
 8022bcc:	f805 6b01 	strb.w	r6, [r5], #1
 8022bd0:	42a5      	cmp	r5, r4
 8022bd2:	4680      	mov	r8, r0
 8022bd4:	4689      	mov	r9, r1
 8022bd6:	d124      	bne.n	8022c22 <_dtoa_r+0x58a>
 8022bd8:	2200      	movs	r2, #0
 8022bda:	4b30      	ldr	r3, [pc, #192]	; (8022c9c <_dtoa_r+0x604>)
 8022bdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022be0:	f001 fc56 	bl	8024490 <__adddf3>
 8022be4:	4602      	mov	r2, r0
 8022be6:	460b      	mov	r3, r1
 8022be8:	4640      	mov	r0, r8
 8022bea:	4649      	mov	r1, r9
 8022bec:	f002 f892 	bl	8024d14 <__aeabi_dcmpgt>
 8022bf0:	2800      	cmp	r0, #0
 8022bf2:	f040 808e 	bne.w	8022d12 <_dtoa_r+0x67a>
 8022bf6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8022bfa:	2000      	movs	r0, #0
 8022bfc:	4927      	ldr	r1, [pc, #156]	; (8022c9c <_dtoa_r+0x604>)
 8022bfe:	f001 fc45 	bl	802448c <__aeabi_dsub>
 8022c02:	4602      	mov	r2, r0
 8022c04:	460b      	mov	r3, r1
 8022c06:	4640      	mov	r0, r8
 8022c08:	4649      	mov	r1, r9
 8022c0a:	f002 f865 	bl	8024cd8 <__aeabi_dcmplt>
 8022c0e:	b178      	cbz	r0, 8022c30 <_dtoa_r+0x598>
 8022c10:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8022c14:	2b30      	cmp	r3, #48	; 0x30
 8022c16:	f104 32ff 	add.w	r2, r4, #4294967295
 8022c1a:	f040 82da 	bne.w	80231d2 <_dtoa_r+0xb3a>
 8022c1e:	4614      	mov	r4, r2
 8022c20:	e7f6      	b.n	8022c10 <_dtoa_r+0x578>
 8022c22:	2200      	movs	r2, #0
 8022c24:	4b1a      	ldr	r3, [pc, #104]	; (8022c90 <_dtoa_r+0x5f8>)
 8022c26:	f001 fde5 	bl	80247f4 <__aeabi_dmul>
 8022c2a:	4680      	mov	r8, r0
 8022c2c:	4689      	mov	r9, r1
 8022c2e:	e7bf      	b.n	8022bb0 <_dtoa_r+0x518>
 8022c30:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8022c34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8022c38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022c3a:	2b00      	cmp	r3, #0
 8022c3c:	f2c0 808b 	blt.w	8022d56 <_dtoa_r+0x6be>
 8022c40:	f1bb 0f0e 	cmp.w	fp, #14
 8022c44:	f300 8087 	bgt.w	8022d56 <_dtoa_r+0x6be>
 8022c48:	4b0e      	ldr	r3, [pc, #56]	; (8022c84 <_dtoa_r+0x5ec>)
 8022c4a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8022c4e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8022c52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022c54:	2b00      	cmp	r3, #0
 8022c56:	da23      	bge.n	8022ca0 <_dtoa_r+0x608>
 8022c58:	9b05      	ldr	r3, [sp, #20]
 8022c5a:	2b00      	cmp	r3, #0
 8022c5c:	dc20      	bgt.n	8022ca0 <_dtoa_r+0x608>
 8022c5e:	f040 817d 	bne.w	8022f5c <_dtoa_r+0x8c4>
 8022c62:	4630      	mov	r0, r6
 8022c64:	2200      	movs	r2, #0
 8022c66:	4b0c      	ldr	r3, [pc, #48]	; (8022c98 <_dtoa_r+0x600>)
 8022c68:	4639      	mov	r1, r7
 8022c6a:	f001 fdc3 	bl	80247f4 <__aeabi_dmul>
 8022c6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8022c72:	f002 f845 	bl	8024d00 <__aeabi_dcmpge>
 8022c76:	9d05      	ldr	r5, [sp, #20]
 8022c78:	462e      	mov	r6, r5
 8022c7a:	2800      	cmp	r0, #0
 8022c7c:	f040 8170 	bne.w	8022f60 <_dtoa_r+0x8c8>
 8022c80:	e175      	b.n	8022f6e <_dtoa_r+0x8d6>
 8022c82:	bf00      	nop
 8022c84:	080273c8 	.word	0x080273c8
 8022c88:	08027490 	.word	0x08027490
 8022c8c:	3ff00000 	.word	0x3ff00000
 8022c90:	40240000 	.word	0x40240000
 8022c94:	401c0000 	.word	0x401c0000
 8022c98:	40140000 	.word	0x40140000
 8022c9c:	3fe00000 	.word	0x3fe00000
 8022ca0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8022ca4:	9c08      	ldr	r4, [sp, #32]
 8022ca6:	4632      	mov	r2, r6
 8022ca8:	463b      	mov	r3, r7
 8022caa:	4640      	mov	r0, r8
 8022cac:	4649      	mov	r1, r9
 8022cae:	f001 fecb 	bl	8024a48 <__aeabi_ddiv>
 8022cb2:	f002 f839 	bl	8024d28 <__aeabi_d2iz>
 8022cb6:	4605      	mov	r5, r0
 8022cb8:	f001 fd36 	bl	8024728 <__aeabi_i2d>
 8022cbc:	4632      	mov	r2, r6
 8022cbe:	463b      	mov	r3, r7
 8022cc0:	f001 fd98 	bl	80247f4 <__aeabi_dmul>
 8022cc4:	460b      	mov	r3, r1
 8022cc6:	4602      	mov	r2, r0
 8022cc8:	4649      	mov	r1, r9
 8022cca:	4640      	mov	r0, r8
 8022ccc:	f001 fbde 	bl	802448c <__aeabi_dsub>
 8022cd0:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 8022cd4:	9b08      	ldr	r3, [sp, #32]
 8022cd6:	f804 eb01 	strb.w	lr, [r4], #1
 8022cda:	ebc3 0e04 	rsb	lr, r3, r4
 8022cde:	9b05      	ldr	r3, [sp, #20]
 8022ce0:	459e      	cmp	lr, r3
 8022ce2:	d12b      	bne.n	8022d3c <_dtoa_r+0x6a4>
 8022ce4:	4602      	mov	r2, r0
 8022ce6:	460b      	mov	r3, r1
 8022ce8:	f001 fbd2 	bl	8024490 <__adddf3>
 8022cec:	4632      	mov	r2, r6
 8022cee:	463b      	mov	r3, r7
 8022cf0:	4680      	mov	r8, r0
 8022cf2:	4689      	mov	r9, r1
 8022cf4:	f002 f80e 	bl	8024d14 <__aeabi_dcmpgt>
 8022cf8:	b970      	cbnz	r0, 8022d18 <_dtoa_r+0x680>
 8022cfa:	4640      	mov	r0, r8
 8022cfc:	4649      	mov	r1, r9
 8022cfe:	4632      	mov	r2, r6
 8022d00:	463b      	mov	r3, r7
 8022d02:	f001 ffdf 	bl	8024cc4 <__aeabi_dcmpeq>
 8022d06:	2800      	cmp	r0, #0
 8022d08:	f000 8264 	beq.w	80231d4 <_dtoa_r+0xb3c>
 8022d0c:	07eb      	lsls	r3, r5, #31
 8022d0e:	d403      	bmi.n	8022d18 <_dtoa_r+0x680>
 8022d10:	e260      	b.n	80231d4 <_dtoa_r+0xb3c>
 8022d12:	46bb      	mov	fp, r7
 8022d14:	e000      	b.n	8022d18 <_dtoa_r+0x680>
 8022d16:	461c      	mov	r4, r3
 8022d18:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8022d1c:	2a39      	cmp	r2, #57	; 0x39
 8022d1e:	f104 33ff 	add.w	r3, r4, #4294967295
 8022d22:	d107      	bne.n	8022d34 <_dtoa_r+0x69c>
 8022d24:	9a08      	ldr	r2, [sp, #32]
 8022d26:	4293      	cmp	r3, r2
 8022d28:	d1f5      	bne.n	8022d16 <_dtoa_r+0x67e>
 8022d2a:	2330      	movs	r3, #48	; 0x30
 8022d2c:	7013      	strb	r3, [r2, #0]
 8022d2e:	f10b 0b01 	add.w	fp, fp, #1
 8022d32:	4613      	mov	r3, r2
 8022d34:	781a      	ldrb	r2, [r3, #0]
 8022d36:	3201      	adds	r2, #1
 8022d38:	701a      	strb	r2, [r3, #0]
 8022d3a:	e24b      	b.n	80231d4 <_dtoa_r+0xb3c>
 8022d3c:	2200      	movs	r2, #0
 8022d3e:	4ba4      	ldr	r3, [pc, #656]	; (8022fd0 <_dtoa_r+0x938>)
 8022d40:	f001 fd58 	bl	80247f4 <__aeabi_dmul>
 8022d44:	2200      	movs	r2, #0
 8022d46:	2300      	movs	r3, #0
 8022d48:	4680      	mov	r8, r0
 8022d4a:	4689      	mov	r9, r1
 8022d4c:	f001 ffba 	bl	8024cc4 <__aeabi_dcmpeq>
 8022d50:	2800      	cmp	r0, #0
 8022d52:	d0a8      	beq.n	8022ca6 <_dtoa_r+0x60e>
 8022d54:	e23e      	b.n	80231d4 <_dtoa_r+0xb3c>
 8022d56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022d58:	2a00      	cmp	r2, #0
 8022d5a:	d032      	beq.n	8022dc2 <_dtoa_r+0x72a>
 8022d5c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8022d5e:	2a01      	cmp	r2, #1
 8022d60:	dc0a      	bgt.n	8022d78 <_dtoa_r+0x6e0>
 8022d62:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022d64:	b112      	cbz	r2, 8022d6c <_dtoa_r+0x6d4>
 8022d66:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8022d6a:	e002      	b.n	8022d72 <_dtoa_r+0x6da>
 8022d6c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8022d6e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8022d72:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8022d74:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8022d76:	e018      	b.n	8022daa <_dtoa_r+0x712>
 8022d78:	9b05      	ldr	r3, [sp, #20]
 8022d7a:	1e5d      	subs	r5, r3, #1
 8022d7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022d7e:	42ab      	cmp	r3, r5
 8022d80:	bfbf      	itttt	lt
 8022d82:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8022d84:	950b      	strlt	r5, [sp, #44]	; 0x2c
 8022d86:	1aea      	sublt	r2, r5, r3
 8022d88:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8022d8a:	bfb6      	itet	lt
 8022d8c:	189b      	addlt	r3, r3, r2
 8022d8e:	1b5d      	subge	r5, r3, r5
 8022d90:	930d      	strlt	r3, [sp, #52]	; 0x34
 8022d92:	9b05      	ldr	r3, [sp, #20]
 8022d94:	bfb8      	it	lt
 8022d96:	2500      	movlt	r5, #0
 8022d98:	2b00      	cmp	r3, #0
 8022d9a:	bfb9      	ittee	lt
 8022d9c:	9b09      	ldrlt	r3, [sp, #36]	; 0x24
 8022d9e:	9a05      	ldrlt	r2, [sp, #20]
 8022da0:	9c09      	ldrge	r4, [sp, #36]	; 0x24
 8022da2:	9b05      	ldrge	r3, [sp, #20]
 8022da4:	bfbc      	itt	lt
 8022da6:	1a9c      	sublt	r4, r3, r2
 8022da8:	2300      	movlt	r3, #0
 8022daa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022dac:	441a      	add	r2, r3
 8022dae:	9209      	str	r2, [sp, #36]	; 0x24
 8022db0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022db2:	4650      	mov	r0, sl
 8022db4:	441a      	add	r2, r3
 8022db6:	2101      	movs	r1, #1
 8022db8:	920a      	str	r2, [sp, #40]	; 0x28
 8022dba:	f000 fed3 	bl	8023b64 <__i2b>
 8022dbe:	4606      	mov	r6, r0
 8022dc0:	e002      	b.n	8022dc8 <_dtoa_r+0x730>
 8022dc2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8022dc4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8022dc6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8022dc8:	b164      	cbz	r4, 8022de4 <_dtoa_r+0x74c>
 8022dca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022dcc:	2b00      	cmp	r3, #0
 8022dce:	dd09      	ble.n	8022de4 <_dtoa_r+0x74c>
 8022dd0:	42a3      	cmp	r3, r4
 8022dd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022dd4:	bfa8      	it	ge
 8022dd6:	4623      	movge	r3, r4
 8022dd8:	1ad2      	subs	r2, r2, r3
 8022dda:	9209      	str	r2, [sp, #36]	; 0x24
 8022ddc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022dde:	1ae4      	subs	r4, r4, r3
 8022de0:	1ad3      	subs	r3, r2, r3
 8022de2:	930a      	str	r3, [sp, #40]	; 0x28
 8022de4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022de6:	2b00      	cmp	r3, #0
 8022de8:	dd20      	ble.n	8022e2c <_dtoa_r+0x794>
 8022dea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022dec:	b1c3      	cbz	r3, 8022e20 <_dtoa_r+0x788>
 8022dee:	2d00      	cmp	r5, #0
 8022df0:	dd10      	ble.n	8022e14 <_dtoa_r+0x77c>
 8022df2:	4631      	mov	r1, r6
 8022df4:	462a      	mov	r2, r5
 8022df6:	4650      	mov	r0, sl
 8022df8:	f000 ff4e 	bl	8023c98 <__pow5mult>
 8022dfc:	4606      	mov	r6, r0
 8022dfe:	4631      	mov	r1, r6
 8022e00:	9a07      	ldr	r2, [sp, #28]
 8022e02:	4650      	mov	r0, sl
 8022e04:	f000 feb7 	bl	8023b76 <__multiply>
 8022e08:	9907      	ldr	r1, [sp, #28]
 8022e0a:	4607      	mov	r7, r0
 8022e0c:	4650      	mov	r0, sl
 8022e0e:	f000 fdc7 	bl	80239a0 <_Bfree>
 8022e12:	9707      	str	r7, [sp, #28]
 8022e14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022e16:	1b5a      	subs	r2, r3, r5
 8022e18:	d008      	beq.n	8022e2c <_dtoa_r+0x794>
 8022e1a:	4650      	mov	r0, sl
 8022e1c:	9907      	ldr	r1, [sp, #28]
 8022e1e:	e002      	b.n	8022e26 <_dtoa_r+0x78e>
 8022e20:	9907      	ldr	r1, [sp, #28]
 8022e22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022e24:	4650      	mov	r0, sl
 8022e26:	f000 ff37 	bl	8023c98 <__pow5mult>
 8022e2a:	9007      	str	r0, [sp, #28]
 8022e2c:	4650      	mov	r0, sl
 8022e2e:	2101      	movs	r1, #1
 8022e30:	f000 fe98 	bl	8023b64 <__i2b>
 8022e34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022e36:	2b00      	cmp	r3, #0
 8022e38:	4605      	mov	r5, r0
 8022e3a:	dd0a      	ble.n	8022e52 <_dtoa_r+0x7ba>
 8022e3c:	4629      	mov	r1, r5
 8022e3e:	461a      	mov	r2, r3
 8022e40:	4650      	mov	r0, sl
 8022e42:	f000 ff29 	bl	8023c98 <__pow5mult>
 8022e46:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022e48:	2b01      	cmp	r3, #1
 8022e4a:	4605      	mov	r5, r0
 8022e4c:	dd04      	ble.n	8022e58 <_dtoa_r+0x7c0>
 8022e4e:	2700      	movs	r7, #0
 8022e50:	e01b      	b.n	8022e8a <_dtoa_r+0x7f2>
 8022e52:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022e54:	2b01      	cmp	r3, #1
 8022e56:	dc13      	bgt.n	8022e80 <_dtoa_r+0x7e8>
 8022e58:	9b02      	ldr	r3, [sp, #8]
 8022e5a:	b98b      	cbnz	r3, 8022e80 <_dtoa_r+0x7e8>
 8022e5c:	9b03      	ldr	r3, [sp, #12]
 8022e5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8022e62:	b97b      	cbnz	r3, 8022e84 <_dtoa_r+0x7ec>
 8022e64:	9b03      	ldr	r3, [sp, #12]
 8022e66:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 8022e6a:	0d3f      	lsrs	r7, r7, #20
 8022e6c:	053f      	lsls	r7, r7, #20
 8022e6e:	b157      	cbz	r7, 8022e86 <_dtoa_r+0x7ee>
 8022e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022e72:	3301      	adds	r3, #1
 8022e74:	9309      	str	r3, [sp, #36]	; 0x24
 8022e76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022e78:	3301      	adds	r3, #1
 8022e7a:	930a      	str	r3, [sp, #40]	; 0x28
 8022e7c:	2701      	movs	r7, #1
 8022e7e:	e002      	b.n	8022e86 <_dtoa_r+0x7ee>
 8022e80:	2700      	movs	r7, #0
 8022e82:	e000      	b.n	8022e86 <_dtoa_r+0x7ee>
 8022e84:	9f02      	ldr	r7, [sp, #8]
 8022e86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022e88:	b143      	cbz	r3, 8022e9c <_dtoa_r+0x804>
 8022e8a:	692b      	ldr	r3, [r5, #16]
 8022e8c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8022e90:	6918      	ldr	r0, [r3, #16]
 8022e92:	f000 fe1a 	bl	8023aca <__hi0bits>
 8022e96:	f1c0 0020 	rsb	r0, r0, #32
 8022e9a:	e000      	b.n	8022e9e <_dtoa_r+0x806>
 8022e9c:	2001      	movs	r0, #1
 8022e9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022ea0:	4418      	add	r0, r3
 8022ea2:	f010 001f 	ands.w	r0, r0, #31
 8022ea6:	d008      	beq.n	8022eba <_dtoa_r+0x822>
 8022ea8:	f1c0 0320 	rsb	r3, r0, #32
 8022eac:	2b04      	cmp	r3, #4
 8022eae:	dd02      	ble.n	8022eb6 <_dtoa_r+0x81e>
 8022eb0:	f1c0 001c 	rsb	r0, r0, #28
 8022eb4:	e002      	b.n	8022ebc <_dtoa_r+0x824>
 8022eb6:	d008      	beq.n	8022eca <_dtoa_r+0x832>
 8022eb8:	4618      	mov	r0, r3
 8022eba:	301c      	adds	r0, #28
 8022ebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022ebe:	4403      	add	r3, r0
 8022ec0:	9309      	str	r3, [sp, #36]	; 0x24
 8022ec2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022ec4:	4403      	add	r3, r0
 8022ec6:	4404      	add	r4, r0
 8022ec8:	930a      	str	r3, [sp, #40]	; 0x28
 8022eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022ecc:	2b00      	cmp	r3, #0
 8022ece:	dd05      	ble.n	8022edc <_dtoa_r+0x844>
 8022ed0:	4650      	mov	r0, sl
 8022ed2:	9907      	ldr	r1, [sp, #28]
 8022ed4:	461a      	mov	r2, r3
 8022ed6:	f000 ff2d 	bl	8023d34 <__lshift>
 8022eda:	9007      	str	r0, [sp, #28]
 8022edc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022ede:	2b00      	cmp	r3, #0
 8022ee0:	dd05      	ble.n	8022eee <_dtoa_r+0x856>
 8022ee2:	4629      	mov	r1, r5
 8022ee4:	4650      	mov	r0, sl
 8022ee6:	461a      	mov	r2, r3
 8022ee8:	f000 ff24 	bl	8023d34 <__lshift>
 8022eec:	4605      	mov	r5, r0
 8022eee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022ef0:	b1eb      	cbz	r3, 8022f2e <_dtoa_r+0x896>
 8022ef2:	9807      	ldr	r0, [sp, #28]
 8022ef4:	4629      	mov	r1, r5
 8022ef6:	f000 ff70 	bl	8023dda <__mcmp>
 8022efa:	2800      	cmp	r0, #0
 8022efc:	da17      	bge.n	8022f2e <_dtoa_r+0x896>
 8022efe:	2300      	movs	r3, #0
 8022f00:	4650      	mov	r0, sl
 8022f02:	9907      	ldr	r1, [sp, #28]
 8022f04:	220a      	movs	r2, #10
 8022f06:	f000 fd62 	bl	80239ce <__multadd>
 8022f0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022f0c:	9007      	str	r0, [sp, #28]
 8022f0e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022f12:	2b00      	cmp	r3, #0
 8022f14:	f000 8170 	beq.w	80231f8 <_dtoa_r+0xb60>
 8022f18:	4631      	mov	r1, r6
 8022f1a:	2300      	movs	r3, #0
 8022f1c:	4650      	mov	r0, sl
 8022f1e:	220a      	movs	r2, #10
 8022f20:	f000 fd55 	bl	80239ce <__multadd>
 8022f24:	9b06      	ldr	r3, [sp, #24]
 8022f26:	2b00      	cmp	r3, #0
 8022f28:	4606      	mov	r6, r0
 8022f2a:	dc33      	bgt.n	8022f94 <_dtoa_r+0x8fc>
 8022f2c:	e16d      	b.n	802320a <_dtoa_r+0xb72>
 8022f2e:	9b05      	ldr	r3, [sp, #20]
 8022f30:	2b00      	cmp	r3, #0
 8022f32:	dc26      	bgt.n	8022f82 <_dtoa_r+0x8ea>
 8022f34:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022f36:	2b02      	cmp	r3, #2
 8022f38:	dd23      	ble.n	8022f82 <_dtoa_r+0x8ea>
 8022f3a:	9b05      	ldr	r3, [sp, #20]
 8022f3c:	9306      	str	r3, [sp, #24]
 8022f3e:	9b06      	ldr	r3, [sp, #24]
 8022f40:	b973      	cbnz	r3, 8022f60 <_dtoa_r+0x8c8>
 8022f42:	4629      	mov	r1, r5
 8022f44:	2205      	movs	r2, #5
 8022f46:	4650      	mov	r0, sl
 8022f48:	f000 fd41 	bl	80239ce <__multadd>
 8022f4c:	4605      	mov	r5, r0
 8022f4e:	4629      	mov	r1, r5
 8022f50:	9807      	ldr	r0, [sp, #28]
 8022f52:	f000 ff42 	bl	8023dda <__mcmp>
 8022f56:	2800      	cmp	r0, #0
 8022f58:	dc09      	bgt.n	8022f6e <_dtoa_r+0x8d6>
 8022f5a:	e001      	b.n	8022f60 <_dtoa_r+0x8c8>
 8022f5c:	2500      	movs	r5, #0
 8022f5e:	462e      	mov	r6, r5
 8022f60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022f62:	9c08      	ldr	r4, [sp, #32]
 8022f64:	ea6f 0b03 	mvn.w	fp, r3
 8022f68:	e008      	b.n	8022f7c <_dtoa_r+0x8e4>
 8022f6a:	46bb      	mov	fp, r7
 8022f6c:	462e      	mov	r6, r5
 8022f6e:	9b08      	ldr	r3, [sp, #32]
 8022f70:	9a08      	ldr	r2, [sp, #32]
 8022f72:	1c5c      	adds	r4, r3, #1
 8022f74:	2331      	movs	r3, #49	; 0x31
 8022f76:	7013      	strb	r3, [r2, #0]
 8022f78:	f10b 0b01 	add.w	fp, fp, #1
 8022f7c:	46b1      	mov	r9, r6
 8022f7e:	2600      	movs	r6, #0
 8022f80:	e114      	b.n	80231ac <_dtoa_r+0xb14>
 8022f82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022f84:	b923      	cbnz	r3, 8022f90 <_dtoa_r+0x8f8>
 8022f86:	9b05      	ldr	r3, [sp, #20]
 8022f88:	9306      	str	r3, [sp, #24]
 8022f8a:	9f08      	ldr	r7, [sp, #32]
 8022f8c:	9c07      	ldr	r4, [sp, #28]
 8022f8e:	e0cc      	b.n	802312a <_dtoa_r+0xa92>
 8022f90:	9b05      	ldr	r3, [sp, #20]
 8022f92:	9306      	str	r3, [sp, #24]
 8022f94:	2c00      	cmp	r4, #0
 8022f96:	dd05      	ble.n	8022fa4 <_dtoa_r+0x90c>
 8022f98:	4631      	mov	r1, r6
 8022f9a:	4650      	mov	r0, sl
 8022f9c:	4622      	mov	r2, r4
 8022f9e:	f000 fec9 	bl	8023d34 <__lshift>
 8022fa2:	4606      	mov	r6, r0
 8022fa4:	b1b7      	cbz	r7, 8022fd4 <_dtoa_r+0x93c>
 8022fa6:	6871      	ldr	r1, [r6, #4]
 8022fa8:	4650      	mov	r0, sl
 8022faa:	f000 fcc4 	bl	8023936 <_Balloc>
 8022fae:	6932      	ldr	r2, [r6, #16]
 8022fb0:	3202      	adds	r2, #2
 8022fb2:	4604      	mov	r4, r0
 8022fb4:	f106 010c 	add.w	r1, r6, #12
 8022fb8:	0092      	lsls	r2, r2, #2
 8022fba:	300c      	adds	r0, #12
 8022fbc:	f7fd f9a7 	bl	802030e <memcpy>
 8022fc0:	4650      	mov	r0, sl
 8022fc2:	4621      	mov	r1, r4
 8022fc4:	2201      	movs	r2, #1
 8022fc6:	f000 feb5 	bl	8023d34 <__lshift>
 8022fca:	4681      	mov	r9, r0
 8022fcc:	e003      	b.n	8022fd6 <_dtoa_r+0x93e>
 8022fce:	bf00      	nop
 8022fd0:	40240000 	.word	0x40240000
 8022fd4:	46b1      	mov	r9, r6
 8022fd6:	9f08      	ldr	r7, [sp, #32]
 8022fd8:	9c07      	ldr	r4, [sp, #28]
 8022fda:	4629      	mov	r1, r5
 8022fdc:	4620      	mov	r0, r4
 8022fde:	f7ff facd 	bl	802257c <quorem>
 8022fe2:	4631      	mov	r1, r6
 8022fe4:	9009      	str	r0, [sp, #36]	; 0x24
 8022fe6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8022fea:	4620      	mov	r0, r4
 8022fec:	f000 fef5 	bl	8023dda <__mcmp>
 8022ff0:	464a      	mov	r2, r9
 8022ff2:	9005      	str	r0, [sp, #20]
 8022ff4:	4629      	mov	r1, r5
 8022ff6:	4650      	mov	r0, sl
 8022ff8:	f000 ff0b 	bl	8023e12 <__mdiff>
 8022ffc:	68c2      	ldr	r2, [r0, #12]
 8022ffe:	4603      	mov	r3, r0
 8023000:	b93a      	cbnz	r2, 8023012 <_dtoa_r+0x97a>
 8023002:	4619      	mov	r1, r3
 8023004:	4620      	mov	r0, r4
 8023006:	9307      	str	r3, [sp, #28]
 8023008:	f000 fee7 	bl	8023dda <__mcmp>
 802300c:	9b07      	ldr	r3, [sp, #28]
 802300e:	4602      	mov	r2, r0
 8023010:	e000      	b.n	8023014 <_dtoa_r+0x97c>
 8023012:	2201      	movs	r2, #1
 8023014:	4650      	mov	r0, sl
 8023016:	4619      	mov	r1, r3
 8023018:	9207      	str	r2, [sp, #28]
 802301a:	f000 fcc1 	bl	80239a0 <_Bfree>
 802301e:	9a07      	ldr	r2, [sp, #28]
 8023020:	b9a2      	cbnz	r2, 802304c <_dtoa_r+0x9b4>
 8023022:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023024:	b993      	cbnz	r3, 802304c <_dtoa_r+0x9b4>
 8023026:	9b02      	ldr	r3, [sp, #8]
 8023028:	f003 0301 	and.w	r3, r3, #1
 802302c:	b973      	cbnz	r3, 802304c <_dtoa_r+0x9b4>
 802302e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8023032:	463b      	mov	r3, r7
 8023034:	9407      	str	r4, [sp, #28]
 8023036:	d040      	beq.n	80230ba <_dtoa_r+0xa22>
 8023038:	9b05      	ldr	r3, [sp, #20]
 802303a:	2b00      	cmp	r3, #0
 802303c:	bfc8      	it	gt
 802303e:	9b09      	ldrgt	r3, [sp, #36]	; 0x24
 8023040:	f107 0401 	add.w	r4, r7, #1
 8023044:	bfc8      	it	gt
 8023046:	f103 0831 	addgt.w	r8, r3, #49	; 0x31
 802304a:	e03d      	b.n	80230c8 <_dtoa_r+0xa30>
 802304c:	9b05      	ldr	r3, [sp, #20]
 802304e:	2b00      	cmp	r3, #0
 8023050:	da04      	bge.n	802305c <_dtoa_r+0x9c4>
 8023052:	2a00      	cmp	r2, #0
 8023054:	46c4      	mov	ip, r8
 8023056:	9407      	str	r4, [sp, #28]
 8023058:	dc08      	bgt.n	802306c <_dtoa_r+0x9d4>
 802305a:	e021      	b.n	80230a0 <_dtoa_r+0xa08>
 802305c:	d124      	bne.n	80230a8 <_dtoa_r+0xa10>
 802305e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023060:	bb13      	cbnz	r3, 80230a8 <_dtoa_r+0xa10>
 8023062:	9b02      	ldr	r3, [sp, #8]
 8023064:	f003 0301 	and.w	r3, r3, #1
 8023068:	b9f3      	cbnz	r3, 80230a8 <_dtoa_r+0xa10>
 802306a:	e7f2      	b.n	8023052 <_dtoa_r+0x9ba>
 802306c:	4621      	mov	r1, r4
 802306e:	2201      	movs	r2, #1
 8023070:	4650      	mov	r0, sl
 8023072:	9705      	str	r7, [sp, #20]
 8023074:	f8cd 8008 	str.w	r8, [sp, #8]
 8023078:	f000 fe5c 	bl	8023d34 <__lshift>
 802307c:	4629      	mov	r1, r5
 802307e:	9007      	str	r0, [sp, #28]
 8023080:	f000 feab 	bl	8023dda <__mcmp>
 8023084:	2800      	cmp	r0, #0
 8023086:	f8dd c008 	ldr.w	ip, [sp, #8]
 802308a:	9b05      	ldr	r3, [sp, #20]
 802308c:	dc03      	bgt.n	8023096 <_dtoa_r+0x9fe>
 802308e:	d107      	bne.n	80230a0 <_dtoa_r+0xa08>
 8023090:	f018 0f01 	tst.w	r8, #1
 8023094:	d004      	beq.n	80230a0 <_dtoa_r+0xa08>
 8023096:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 802309a:	d00e      	beq.n	80230ba <_dtoa_r+0xa22>
 802309c:	f108 0c01 	add.w	ip, r8, #1
 80230a0:	1c7c      	adds	r4, r7, #1
 80230a2:	f887 c000 	strb.w	ip, [r7]
 80230a6:	e081      	b.n	80231ac <_dtoa_r+0xb14>
 80230a8:	2a00      	cmp	r2, #0
 80230aa:	f107 0201 	add.w	r2, r7, #1
 80230ae:	dd0e      	ble.n	80230ce <_dtoa_r+0xa36>
 80230b0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80230b4:	463b      	mov	r3, r7
 80230b6:	9407      	str	r4, [sp, #28]
 80230b8:	d103      	bne.n	80230c2 <_dtoa_r+0xa2a>
 80230ba:	2239      	movs	r2, #57	; 0x39
 80230bc:	3701      	adds	r7, #1
 80230be:	701a      	strb	r2, [r3, #0]
 80230c0:	e057      	b.n	8023172 <_dtoa_r+0xada>
 80230c2:	4614      	mov	r4, r2
 80230c4:	f108 0801 	add.w	r8, r8, #1
 80230c8:	f887 8000 	strb.w	r8, [r7]
 80230cc:	e06e      	b.n	80231ac <_dtoa_r+0xb14>
 80230ce:	9b08      	ldr	r3, [sp, #32]
 80230d0:	f802 8c01 	strb.w	r8, [r2, #-1]
 80230d4:	1ad3      	subs	r3, r2, r3
 80230d6:	4617      	mov	r7, r2
 80230d8:	9a06      	ldr	r2, [sp, #24]
 80230da:	4293      	cmp	r3, r2
 80230dc:	d03a      	beq.n	8023154 <_dtoa_r+0xabc>
 80230de:	4621      	mov	r1, r4
 80230e0:	220a      	movs	r2, #10
 80230e2:	2300      	movs	r3, #0
 80230e4:	4650      	mov	r0, sl
 80230e6:	f000 fc72 	bl	80239ce <__multadd>
 80230ea:	454e      	cmp	r6, r9
 80230ec:	4604      	mov	r4, r0
 80230ee:	4631      	mov	r1, r6
 80230f0:	4650      	mov	r0, sl
 80230f2:	f04f 020a 	mov.w	r2, #10
 80230f6:	f04f 0300 	mov.w	r3, #0
 80230fa:	d104      	bne.n	8023106 <_dtoa_r+0xa6e>
 80230fc:	f000 fc67 	bl	80239ce <__multadd>
 8023100:	4606      	mov	r6, r0
 8023102:	4681      	mov	r9, r0
 8023104:	e769      	b.n	8022fda <_dtoa_r+0x942>
 8023106:	f000 fc62 	bl	80239ce <__multadd>
 802310a:	4649      	mov	r1, r9
 802310c:	4606      	mov	r6, r0
 802310e:	220a      	movs	r2, #10
 8023110:	4650      	mov	r0, sl
 8023112:	2300      	movs	r3, #0
 8023114:	f000 fc5b 	bl	80239ce <__multadd>
 8023118:	4681      	mov	r9, r0
 802311a:	e75e      	b.n	8022fda <_dtoa_r+0x942>
 802311c:	4621      	mov	r1, r4
 802311e:	4650      	mov	r0, sl
 8023120:	220a      	movs	r2, #10
 8023122:	2300      	movs	r3, #0
 8023124:	f000 fc53 	bl	80239ce <__multadd>
 8023128:	4604      	mov	r4, r0
 802312a:	4620      	mov	r0, r4
 802312c:	4629      	mov	r1, r5
 802312e:	f7ff fa25 	bl	802257c <quorem>
 8023132:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8023136:	f807 8b01 	strb.w	r8, [r7], #1
 802313a:	9b08      	ldr	r3, [sp, #32]
 802313c:	9a06      	ldr	r2, [sp, #24]
 802313e:	1afb      	subs	r3, r7, r3
 8023140:	4293      	cmp	r3, r2
 8023142:	dbeb      	blt.n	802311c <_dtoa_r+0xa84>
 8023144:	9b08      	ldr	r3, [sp, #32]
 8023146:	2a01      	cmp	r2, #1
 8023148:	bfac      	ite	ge
 802314a:	189b      	addge	r3, r3, r2
 802314c:	3301      	addlt	r3, #1
 802314e:	46b1      	mov	r9, r6
 8023150:	461f      	mov	r7, r3
 8023152:	2600      	movs	r6, #0
 8023154:	4621      	mov	r1, r4
 8023156:	2201      	movs	r2, #1
 8023158:	4650      	mov	r0, sl
 802315a:	f000 fdeb 	bl	8023d34 <__lshift>
 802315e:	4629      	mov	r1, r5
 8023160:	9007      	str	r0, [sp, #28]
 8023162:	f000 fe3a 	bl	8023dda <__mcmp>
 8023166:	2800      	cmp	r0, #0
 8023168:	dc03      	bgt.n	8023172 <_dtoa_r+0xada>
 802316a:	d116      	bne.n	802319a <_dtoa_r+0xb02>
 802316c:	f018 0f01 	tst.w	r8, #1
 8023170:	d013      	beq.n	802319a <_dtoa_r+0xb02>
 8023172:	463c      	mov	r4, r7
 8023174:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8023178:	2b39      	cmp	r3, #57	; 0x39
 802317a:	f104 32ff 	add.w	r2, r4, #4294967295
 802317e:	d109      	bne.n	8023194 <_dtoa_r+0xafc>
 8023180:	9b08      	ldr	r3, [sp, #32]
 8023182:	429a      	cmp	r2, r3
 8023184:	d104      	bne.n	8023190 <_dtoa_r+0xaf8>
 8023186:	f10b 0b01 	add.w	fp, fp, #1
 802318a:	2331      	movs	r3, #49	; 0x31
 802318c:	9a08      	ldr	r2, [sp, #32]
 802318e:	e002      	b.n	8023196 <_dtoa_r+0xafe>
 8023190:	4614      	mov	r4, r2
 8023192:	e7ef      	b.n	8023174 <_dtoa_r+0xadc>
 8023194:	3301      	adds	r3, #1
 8023196:	7013      	strb	r3, [r2, #0]
 8023198:	e008      	b.n	80231ac <_dtoa_r+0xb14>
 802319a:	463c      	mov	r4, r7
 802319c:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 80231a0:	2b30      	cmp	r3, #48	; 0x30
 80231a2:	f104 32ff 	add.w	r2, r4, #4294967295
 80231a6:	d101      	bne.n	80231ac <_dtoa_r+0xb14>
 80231a8:	4614      	mov	r4, r2
 80231aa:	e7f7      	b.n	802319c <_dtoa_r+0xb04>
 80231ac:	4650      	mov	r0, sl
 80231ae:	4629      	mov	r1, r5
 80231b0:	f000 fbf6 	bl	80239a0 <_Bfree>
 80231b4:	f1b9 0f00 	cmp.w	r9, #0
 80231b8:	d00c      	beq.n	80231d4 <_dtoa_r+0xb3c>
 80231ba:	b12e      	cbz	r6, 80231c8 <_dtoa_r+0xb30>
 80231bc:	454e      	cmp	r6, r9
 80231be:	d003      	beq.n	80231c8 <_dtoa_r+0xb30>
 80231c0:	4650      	mov	r0, sl
 80231c2:	4631      	mov	r1, r6
 80231c4:	f000 fbec 	bl	80239a0 <_Bfree>
 80231c8:	4650      	mov	r0, sl
 80231ca:	4649      	mov	r1, r9
 80231cc:	f000 fbe8 	bl	80239a0 <_Bfree>
 80231d0:	e000      	b.n	80231d4 <_dtoa_r+0xb3c>
 80231d2:	46bb      	mov	fp, r7
 80231d4:	4650      	mov	r0, sl
 80231d6:	9907      	ldr	r1, [sp, #28]
 80231d8:	f000 fbe2 	bl	80239a0 <_Bfree>
 80231dc:	2300      	movs	r3, #0
 80231de:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80231e0:	7023      	strb	r3, [r4, #0]
 80231e2:	f10b 0301 	add.w	r3, fp, #1
 80231e6:	6013      	str	r3, [r2, #0]
 80231e8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80231ea:	b11b      	cbz	r3, 80231f4 <_dtoa_r+0xb5c>
 80231ec:	601c      	str	r4, [r3, #0]
 80231ee:	e001      	b.n	80231f4 <_dtoa_r+0xb5c>
 80231f0:	480a      	ldr	r0, [pc, #40]	; (802321c <_dtoa_r+0xb84>)
 80231f2:	e00f      	b.n	8023214 <_dtoa_r+0xb7c>
 80231f4:	9808      	ldr	r0, [sp, #32]
 80231f6:	e00d      	b.n	8023214 <_dtoa_r+0xb7c>
 80231f8:	9b06      	ldr	r3, [sp, #24]
 80231fa:	2b00      	cmp	r3, #0
 80231fc:	f73f aec5 	bgt.w	8022f8a <_dtoa_r+0x8f2>
 8023200:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023202:	2b02      	cmp	r3, #2
 8023204:	f73f ae9b 	bgt.w	8022f3e <_dtoa_r+0x8a6>
 8023208:	e6bf      	b.n	8022f8a <_dtoa_r+0x8f2>
 802320a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802320c:	2b02      	cmp	r3, #2
 802320e:	f73f ae96 	bgt.w	8022f3e <_dtoa_r+0x8a6>
 8023212:	e6bf      	b.n	8022f94 <_dtoa_r+0x8fc>
 8023214:	b017      	add	sp, #92	; 0x5c
 8023216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802321a:	bf00      	nop
 802321c:	0802722d 	.word	0x0802722d

08023220 <rshift>:
 8023220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023222:	6906      	ldr	r6, [r0, #16]
 8023224:	114b      	asrs	r3, r1, #5
 8023226:	42b3      	cmp	r3, r6
 8023228:	f100 0514 	add.w	r5, r0, #20
 802322c:	da27      	bge.n	802327e <rshift+0x5e>
 802322e:	f011 011f 	ands.w	r1, r1, #31
 8023232:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 8023236:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 802323a:	d101      	bne.n	8023240 <rshift+0x20>
 802323c:	4629      	mov	r1, r5
 802323e:	e016      	b.n	802326e <rshift+0x4e>
 8023240:	1d14      	adds	r4, r2, #4
 8023242:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 8023246:	f1c1 0e20 	rsb	lr, r1, #32
 802324a:	40ca      	lsrs	r2, r1
 802324c:	462b      	mov	r3, r5
 802324e:	42b4      	cmp	r4, r6
 8023250:	d209      	bcs.n	8023266 <rshift+0x46>
 8023252:	6827      	ldr	r7, [r4, #0]
 8023254:	fa07 f70e 	lsl.w	r7, r7, lr
 8023258:	433a      	orrs	r2, r7
 802325a:	f843 2b04 	str.w	r2, [r3], #4
 802325e:	f854 2b04 	ldr.w	r2, [r4], #4
 8023262:	40ca      	lsrs	r2, r1
 8023264:	e7f3      	b.n	802324e <rshift+0x2e>
 8023266:	601a      	str	r2, [r3, #0]
 8023268:	b152      	cbz	r2, 8023280 <rshift+0x60>
 802326a:	3304      	adds	r3, #4
 802326c:	e008      	b.n	8023280 <rshift+0x60>
 802326e:	42b2      	cmp	r2, r6
 8023270:	460b      	mov	r3, r1
 8023272:	d205      	bcs.n	8023280 <rshift+0x60>
 8023274:	f852 3b04 	ldr.w	r3, [r2], #4
 8023278:	f841 3b04 	str.w	r3, [r1], #4
 802327c:	e7f7      	b.n	802326e <rshift+0x4e>
 802327e:	462b      	mov	r3, r5
 8023280:	1b5b      	subs	r3, r3, r5
 8023282:	109b      	asrs	r3, r3, #2
 8023284:	6103      	str	r3, [r0, #16]
 8023286:	b903      	cbnz	r3, 802328a <rshift+0x6a>
 8023288:	6143      	str	r3, [r0, #20]
 802328a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802328c <__hexdig_fun>:
 802328c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8023290:	2b09      	cmp	r3, #9
 8023292:	d801      	bhi.n	8023298 <__hexdig_fun+0xc>
 8023294:	3820      	subs	r0, #32
 8023296:	e00a      	b.n	80232ae <__hexdig_fun+0x22>
 8023298:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 802329c:	2b05      	cmp	r3, #5
 802329e:	d801      	bhi.n	80232a4 <__hexdig_fun+0x18>
 80232a0:	3847      	subs	r0, #71	; 0x47
 80232a2:	e004      	b.n	80232ae <__hexdig_fun+0x22>
 80232a4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80232a8:	2b05      	cmp	r3, #5
 80232aa:	d802      	bhi.n	80232b2 <__hexdig_fun+0x26>
 80232ac:	3827      	subs	r0, #39	; 0x27
 80232ae:	b2c0      	uxtb	r0, r0
 80232b0:	4770      	bx	lr
 80232b2:	2000      	movs	r0, #0
 80232b4:	4770      	bx	lr

080232b6 <__gethex>:
 80232b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80232ba:	b089      	sub	sp, #36	; 0x24
 80232bc:	468a      	mov	sl, r1
 80232be:	4691      	mov	r9, r2
 80232c0:	9304      	str	r3, [sp, #16]
 80232c2:	9001      	str	r0, [sp, #4]
 80232c4:	f000 fab8 	bl	8023838 <_localeconv_r>
 80232c8:	6803      	ldr	r3, [r0, #0]
 80232ca:	9302      	str	r3, [sp, #8]
 80232cc:	4618      	mov	r0, r3
 80232ce:	f7fe f984 	bl	80215da <strlen>
 80232d2:	9b02      	ldr	r3, [sp, #8]
 80232d4:	9000      	str	r0, [sp, #0]
 80232d6:	4403      	add	r3, r0
 80232d8:	2600      	movs	r6, #0
 80232da:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80232de:	9305      	str	r3, [sp, #20]
 80232e0:	f8da 3000 	ldr.w	r3, [sl]
 80232e4:	3302      	adds	r3, #2
 80232e6:	4698      	mov	r8, r3
 80232e8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80232ec:	2830      	cmp	r0, #48	; 0x30
 80232ee:	d101      	bne.n	80232f4 <__gethex+0x3e>
 80232f0:	3601      	adds	r6, #1
 80232f2:	e7f8      	b.n	80232e6 <__gethex+0x30>
 80232f4:	f7ff ffca 	bl	802328c <__hexdig_fun>
 80232f8:	4604      	mov	r4, r0
 80232fa:	b9e8      	cbnz	r0, 8023338 <__gethex+0x82>
 80232fc:	4640      	mov	r0, r8
 80232fe:	9902      	ldr	r1, [sp, #8]
 8023300:	9a00      	ldr	r2, [sp, #0]
 8023302:	f7fe f972 	bl	80215ea <strncmp>
 8023306:	2800      	cmp	r0, #0
 8023308:	d137      	bne.n	802337a <__gethex+0xc4>
 802330a:	9b00      	ldr	r3, [sp, #0]
 802330c:	f818 0003 	ldrb.w	r0, [r8, r3]
 8023310:	eb08 0703 	add.w	r7, r8, r3
 8023314:	f7ff ffba 	bl	802328c <__hexdig_fun>
 8023318:	b388      	cbz	r0, 802337e <__gethex+0xc8>
 802331a:	463b      	mov	r3, r7
 802331c:	7818      	ldrb	r0, [r3, #0]
 802331e:	2830      	cmp	r0, #48	; 0x30
 8023320:	4698      	mov	r8, r3
 8023322:	f103 0301 	add.w	r3, r3, #1
 8023326:	d0f9      	beq.n	802331c <__gethex+0x66>
 8023328:	f7ff ffb0 	bl	802328c <__hexdig_fun>
 802332c:	463c      	mov	r4, r7
 802332e:	fab0 f580 	clz	r5, r0
 8023332:	2601      	movs	r6, #1
 8023334:	096d      	lsrs	r5, r5, #5
 8023336:	e001      	b.n	802333c <__gethex+0x86>
 8023338:	2500      	movs	r5, #0
 802333a:	462c      	mov	r4, r5
 802333c:	46c3      	mov	fp, r8
 802333e:	465f      	mov	r7, fp
 8023340:	f10b 0b01 	add.w	fp, fp, #1
 8023344:	7838      	ldrb	r0, [r7, #0]
 8023346:	f7ff ffa1 	bl	802328c <__hexdig_fun>
 802334a:	2800      	cmp	r0, #0
 802334c:	d1f7      	bne.n	802333e <__gethex+0x88>
 802334e:	4638      	mov	r0, r7
 8023350:	9902      	ldr	r1, [sp, #8]
 8023352:	9a00      	ldr	r2, [sp, #0]
 8023354:	f7fe f949 	bl	80215ea <strncmp>
 8023358:	b958      	cbnz	r0, 8023372 <__gethex+0xbc>
 802335a:	b95c      	cbnz	r4, 8023374 <__gethex+0xbe>
 802335c:	9b00      	ldr	r3, [sp, #0]
 802335e:	18fc      	adds	r4, r7, r3
 8023360:	46a3      	mov	fp, r4
 8023362:	465f      	mov	r7, fp
 8023364:	f10b 0b01 	add.w	fp, fp, #1
 8023368:	7838      	ldrb	r0, [r7, #0]
 802336a:	f7ff ff8f 	bl	802328c <__hexdig_fun>
 802336e:	2800      	cmp	r0, #0
 8023370:	d1f7      	bne.n	8023362 <__gethex+0xac>
 8023372:	b134      	cbz	r4, 8023382 <__gethex+0xcc>
 8023374:	1be4      	subs	r4, r4, r7
 8023376:	00a4      	lsls	r4, r4, #2
 8023378:	e003      	b.n	8023382 <__gethex+0xcc>
 802337a:	4647      	mov	r7, r8
 802337c:	e000      	b.n	8023380 <__gethex+0xca>
 802337e:	4604      	mov	r4, r0
 8023380:	2501      	movs	r5, #1
 8023382:	783b      	ldrb	r3, [r7, #0]
 8023384:	2b50      	cmp	r3, #80	; 0x50
 8023386:	d001      	beq.n	802338c <__gethex+0xd6>
 8023388:	2b70      	cmp	r3, #112	; 0x70
 802338a:	d130      	bne.n	80233ee <__gethex+0x138>
 802338c:	787b      	ldrb	r3, [r7, #1]
 802338e:	2b2b      	cmp	r3, #43	; 0x2b
 8023390:	d006      	beq.n	80233a0 <__gethex+0xea>
 8023392:	2b2d      	cmp	r3, #45	; 0x2d
 8023394:	d002      	beq.n	802339c <__gethex+0xe6>
 8023396:	1c7a      	adds	r2, r7, #1
 8023398:	2300      	movs	r3, #0
 802339a:	e003      	b.n	80233a4 <__gethex+0xee>
 802339c:	2301      	movs	r3, #1
 802339e:	e000      	b.n	80233a2 <__gethex+0xec>
 80233a0:	2300      	movs	r3, #0
 80233a2:	1cba      	adds	r2, r7, #2
 80233a4:	7810      	ldrb	r0, [r2, #0]
 80233a6:	9306      	str	r3, [sp, #24]
 80233a8:	9203      	str	r2, [sp, #12]
 80233aa:	f7ff ff6f 	bl	802328c <__hexdig_fun>
 80233ae:	1e41      	subs	r1, r0, #1
 80233b0:	b2c9      	uxtb	r1, r1
 80233b2:	2918      	cmp	r1, #24
 80233b4:	9a03      	ldr	r2, [sp, #12]
 80233b6:	9b06      	ldr	r3, [sp, #24]
 80233b8:	d819      	bhi.n	80233ee <__gethex+0x138>
 80233ba:	f1a0 0b10 	sub.w	fp, r0, #16
 80233be:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80233c2:	9306      	str	r3, [sp, #24]
 80233c4:	9203      	str	r2, [sp, #12]
 80233c6:	9207      	str	r2, [sp, #28]
 80233c8:	f7ff ff60 	bl	802328c <__hexdig_fun>
 80233cc:	1e41      	subs	r1, r0, #1
 80233ce:	b2c9      	uxtb	r1, r1
 80233d0:	2918      	cmp	r1, #24
 80233d2:	9a03      	ldr	r2, [sp, #12]
 80233d4:	9b06      	ldr	r3, [sp, #24]
 80233d6:	d805      	bhi.n	80233e4 <__gethex+0x12e>
 80233d8:	210a      	movs	r1, #10
 80233da:	fb01 0b0b 	mla	fp, r1, fp, r0
 80233de:	f1ab 0b10 	sub.w	fp, fp, #16
 80233e2:	e7ec      	b.n	80233be <__gethex+0x108>
 80233e4:	b10b      	cbz	r3, 80233ea <__gethex+0x134>
 80233e6:	f1cb 0b00 	rsb	fp, fp, #0
 80233ea:	445c      	add	r4, fp
 80233ec:	e000      	b.n	80233f0 <__gethex+0x13a>
 80233ee:	463a      	mov	r2, r7
 80233f0:	f8ca 2000 	str.w	r2, [sl]
 80233f4:	b125      	cbz	r5, 8023400 <__gethex+0x14a>
 80233f6:	2e00      	cmp	r6, #0
 80233f8:	bf14      	ite	ne
 80233fa:	2000      	movne	r0, #0
 80233fc:	2006      	moveq	r0, #6
 80233fe:	e17c      	b.n	80236fa <__gethex+0x444>
 8023400:	ebc8 0307 	rsb	r3, r8, r7
 8023404:	3b01      	subs	r3, #1
 8023406:	4629      	mov	r1, r5
 8023408:	2b07      	cmp	r3, #7
 802340a:	dd02      	ble.n	8023412 <__gethex+0x15c>
 802340c:	3101      	adds	r1, #1
 802340e:	105b      	asrs	r3, r3, #1
 8023410:	e7fa      	b.n	8023408 <__gethex+0x152>
 8023412:	9801      	ldr	r0, [sp, #4]
 8023414:	f000 fa8f 	bl	8023936 <_Balloc>
 8023418:	f04f 0a00 	mov.w	sl, #0
 802341c:	f100 0b14 	add.w	fp, r0, #20
 8023420:	4605      	mov	r5, r0
 8023422:	465e      	mov	r6, fp
 8023424:	46d4      	mov	ip, sl
 8023426:	4547      	cmp	r7, r8
 8023428:	d937      	bls.n	802349a <__gethex+0x1e4>
 802342a:	1e7b      	subs	r3, r7, #1
 802342c:	9303      	str	r3, [sp, #12]
 802342e:	9a05      	ldr	r2, [sp, #20]
 8023430:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8023434:	4293      	cmp	r3, r2
 8023436:	d009      	beq.n	802344c <__gethex+0x196>
 8023438:	f1bc 0f20 	cmp.w	ip, #32
 802343c:	d11a      	bne.n	8023474 <__gethex+0x1be>
 802343e:	f8c6 a000 	str.w	sl, [r6]
 8023442:	f04f 0a00 	mov.w	sl, #0
 8023446:	3604      	adds	r6, #4
 8023448:	46d4      	mov	ip, sl
 802344a:	e013      	b.n	8023474 <__gethex+0x1be>
 802344c:	9b00      	ldr	r3, [sp, #0]
 802344e:	9a03      	ldr	r2, [sp, #12]
 8023450:	f1c3 0301 	rsb	r3, r3, #1
 8023454:	4413      	add	r3, r2
 8023456:	4543      	cmp	r3, r8
 8023458:	d3ee      	bcc.n	8023438 <__gethex+0x182>
 802345a:	4618      	mov	r0, r3
 802345c:	9902      	ldr	r1, [sp, #8]
 802345e:	9a00      	ldr	r2, [sp, #0]
 8023460:	f8cd c01c 	str.w	ip, [sp, #28]
 8023464:	9306      	str	r3, [sp, #24]
 8023466:	f7fe f8c0 	bl	80215ea <strncmp>
 802346a:	9b06      	ldr	r3, [sp, #24]
 802346c:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8023470:	b188      	cbz	r0, 8023496 <__gethex+0x1e0>
 8023472:	e7e1      	b.n	8023438 <__gethex+0x182>
 8023474:	f817 0c01 	ldrb.w	r0, [r7, #-1]
 8023478:	f8cd c018 	str.w	ip, [sp, #24]
 802347c:	f7ff ff06 	bl	802328c <__hexdig_fun>
 8023480:	f8dd c018 	ldr.w	ip, [sp, #24]
 8023484:	9b03      	ldr	r3, [sp, #12]
 8023486:	f000 000f 	and.w	r0, r0, #15
 802348a:	fa00 f00c 	lsl.w	r0, r0, ip
 802348e:	ea4a 0a00 	orr.w	sl, sl, r0
 8023492:	f10c 0c04 	add.w	ip, ip, #4
 8023496:	461f      	mov	r7, r3
 8023498:	e7c5      	b.n	8023426 <__gethex+0x170>
 802349a:	f846 ab04 	str.w	sl, [r6], #4
 802349e:	ebcb 0606 	rsb	r6, fp, r6
 80234a2:	10b0      	asrs	r0, r6, #2
 80234a4:	6128      	str	r0, [r5, #16]
 80234a6:	0147      	lsls	r7, r0, #5
 80234a8:	4650      	mov	r0, sl
 80234aa:	f000 fb0e 	bl	8023aca <__hi0bits>
 80234ae:	f8d9 6000 	ldr.w	r6, [r9]
 80234b2:	1a38      	subs	r0, r7, r0
 80234b4:	42b0      	cmp	r0, r6
 80234b6:	dd26      	ble.n	8023506 <__gethex+0x250>
 80234b8:	1b87      	subs	r7, r0, r6
 80234ba:	4639      	mov	r1, r7
 80234bc:	4628      	mov	r0, r5
 80234be:	f000 fe0f 	bl	80240e0 <__any_on>
 80234c2:	b1c8      	cbz	r0, 80234f8 <__gethex+0x242>
 80234c4:	1e7b      	subs	r3, r7, #1
 80234c6:	115a      	asrs	r2, r3, #5
 80234c8:	f003 011f 	and.w	r1, r3, #31
 80234cc:	f04f 0801 	mov.w	r8, #1
 80234d0:	f85b 2022 	ldr.w	r2, [fp, r2, lsl #2]
 80234d4:	fa08 f101 	lsl.w	r1, r8, r1
 80234d8:	4211      	tst	r1, r2
 80234da:	d00e      	beq.n	80234fa <__gethex+0x244>
 80234dc:	4543      	cmp	r3, r8
 80234de:	dc02      	bgt.n	80234e6 <__gethex+0x230>
 80234e0:	f04f 0802 	mov.w	r8, #2
 80234e4:	e009      	b.n	80234fa <__gethex+0x244>
 80234e6:	4628      	mov	r0, r5
 80234e8:	1eb9      	subs	r1, r7, #2
 80234ea:	f000 fdf9 	bl	80240e0 <__any_on>
 80234ee:	2800      	cmp	r0, #0
 80234f0:	d0f6      	beq.n	80234e0 <__gethex+0x22a>
 80234f2:	f04f 0803 	mov.w	r8, #3
 80234f6:	e000      	b.n	80234fa <__gethex+0x244>
 80234f8:	4680      	mov	r8, r0
 80234fa:	4628      	mov	r0, r5
 80234fc:	4639      	mov	r1, r7
 80234fe:	f7ff fe8f 	bl	8023220 <rshift>
 8023502:	443c      	add	r4, r7
 8023504:	e00c      	b.n	8023520 <__gethex+0x26a>
 8023506:	da09      	bge.n	802351c <__gethex+0x266>
 8023508:	1a37      	subs	r7, r6, r0
 802350a:	4629      	mov	r1, r5
 802350c:	9801      	ldr	r0, [sp, #4]
 802350e:	463a      	mov	r2, r7
 8023510:	f000 fc10 	bl	8023d34 <__lshift>
 8023514:	1be4      	subs	r4, r4, r7
 8023516:	4605      	mov	r5, r0
 8023518:	f100 0b14 	add.w	fp, r0, #20
 802351c:	f04f 0800 	mov.w	r8, #0
 8023520:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8023524:	429c      	cmp	r4, r3
 8023526:	dd08      	ble.n	802353a <__gethex+0x284>
 8023528:	9801      	ldr	r0, [sp, #4]
 802352a:	4629      	mov	r1, r5
 802352c:	f000 fa38 	bl	80239a0 <_Bfree>
 8023530:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023532:	2300      	movs	r3, #0
 8023534:	6013      	str	r3, [r2, #0]
 8023536:	20a3      	movs	r0, #163	; 0xa3
 8023538:	e0df      	b.n	80236fa <__gethex+0x444>
 802353a:	f8d9 0004 	ldr.w	r0, [r9, #4]
 802353e:	4284      	cmp	r4, r0
 8023540:	da53      	bge.n	80235ea <__gethex+0x334>
 8023542:	1b04      	subs	r4, r0, r4
 8023544:	42b4      	cmp	r4, r6
 8023546:	db2e      	blt.n	80235a6 <__gethex+0x2f0>
 8023548:	f8d9 300c 	ldr.w	r3, [r9, #12]
 802354c:	2b02      	cmp	r3, #2
 802354e:	d01a      	beq.n	8023586 <__gethex+0x2d0>
 8023550:	2b03      	cmp	r3, #3
 8023552:	d01c      	beq.n	802358e <__gethex+0x2d8>
 8023554:	2b01      	cmp	r3, #1
 8023556:	d11d      	bne.n	8023594 <__gethex+0x2de>
 8023558:	42b4      	cmp	r4, r6
 802355a:	d11b      	bne.n	8023594 <__gethex+0x2de>
 802355c:	2e01      	cmp	r6, #1
 802355e:	dc0b      	bgt.n	8023578 <__gethex+0x2c2>
 8023560:	9a04      	ldr	r2, [sp, #16]
 8023562:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8023566:	6013      	str	r3, [r2, #0]
 8023568:	2301      	movs	r3, #1
 802356a:	612b      	str	r3, [r5, #16]
 802356c:	f8cb 3000 	str.w	r3, [fp]
 8023570:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023572:	2062      	movs	r0, #98	; 0x62
 8023574:	601d      	str	r5, [r3, #0]
 8023576:	e0c0      	b.n	80236fa <__gethex+0x444>
 8023578:	4628      	mov	r0, r5
 802357a:	1e71      	subs	r1, r6, #1
 802357c:	f000 fdb0 	bl	80240e0 <__any_on>
 8023580:	2800      	cmp	r0, #0
 8023582:	d1ed      	bne.n	8023560 <__gethex+0x2aa>
 8023584:	e006      	b.n	8023594 <__gethex+0x2de>
 8023586:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023588:	2b00      	cmp	r3, #0
 802358a:	d0e9      	beq.n	8023560 <__gethex+0x2aa>
 802358c:	e002      	b.n	8023594 <__gethex+0x2de>
 802358e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023590:	2b00      	cmp	r3, #0
 8023592:	d1e5      	bne.n	8023560 <__gethex+0x2aa>
 8023594:	9801      	ldr	r0, [sp, #4]
 8023596:	4629      	mov	r1, r5
 8023598:	f000 fa02 	bl	80239a0 <_Bfree>
 802359c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802359e:	2300      	movs	r3, #0
 80235a0:	6013      	str	r3, [r2, #0]
 80235a2:	2050      	movs	r0, #80	; 0x50
 80235a4:	e0a9      	b.n	80236fa <__gethex+0x444>
 80235a6:	1e67      	subs	r7, r4, #1
 80235a8:	f1b8 0f00 	cmp.w	r8, #0
 80235ac:	d107      	bne.n	80235be <__gethex+0x308>
 80235ae:	2f00      	cmp	r7, #0
 80235b0:	dd07      	ble.n	80235c2 <__gethex+0x30c>
 80235b2:	4628      	mov	r0, r5
 80235b4:	4639      	mov	r1, r7
 80235b6:	f000 fd93 	bl	80240e0 <__any_on>
 80235ba:	4680      	mov	r8, r0
 80235bc:	e001      	b.n	80235c2 <__gethex+0x30c>
 80235be:	f04f 0801 	mov.w	r8, #1
 80235c2:	117a      	asrs	r2, r7, #5
 80235c4:	2301      	movs	r3, #1
 80235c6:	f007 071f 	and.w	r7, r7, #31
 80235ca:	f85b 2022 	ldr.w	r2, [fp, r2, lsl #2]
 80235ce:	40bb      	lsls	r3, r7
 80235d0:	4213      	tst	r3, r2
 80235d2:	4621      	mov	r1, r4
 80235d4:	4628      	mov	r0, r5
 80235d6:	bf18      	it	ne
 80235d8:	f048 0802 	orrne.w	r8, r8, #2
 80235dc:	1b36      	subs	r6, r6, r4
 80235de:	f7ff fe1f 	bl	8023220 <rshift>
 80235e2:	2702      	movs	r7, #2
 80235e4:	f8d9 4004 	ldr.w	r4, [r9, #4]
 80235e8:	e000      	b.n	80235ec <__gethex+0x336>
 80235ea:	2701      	movs	r7, #1
 80235ec:	f1b8 0f00 	cmp.w	r8, #0
 80235f0:	d07e      	beq.n	80236f0 <__gethex+0x43a>
 80235f2:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80235f6:	2b02      	cmp	r3, #2
 80235f8:	d00e      	beq.n	8023618 <__gethex+0x362>
 80235fa:	2b03      	cmp	r3, #3
 80235fc:	d010      	beq.n	8023620 <__gethex+0x36a>
 80235fe:	2b01      	cmp	r3, #1
 8023600:	d174      	bne.n	80236ec <__gethex+0x436>
 8023602:	f018 0f02 	tst.w	r8, #2
 8023606:	d071      	beq.n	80236ec <__gethex+0x436>
 8023608:	f8db 0000 	ldr.w	r0, [fp]
 802360c:	ea48 0800 	orr.w	r8, r8, r0
 8023610:	f018 0f01 	tst.w	r8, #1
 8023614:	d107      	bne.n	8023626 <__gethex+0x370>
 8023616:	e069      	b.n	80236ec <__gethex+0x436>
 8023618:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802361a:	f1c3 0301 	rsb	r3, r3, #1
 802361e:	9313      	str	r3, [sp, #76]	; 0x4c
 8023620:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023622:	2b00      	cmp	r3, #0
 8023624:	d062      	beq.n	80236ec <__gethex+0x436>
 8023626:	f8d5 a010 	ldr.w	sl, [r5, #16]
 802362a:	f105 0314 	add.w	r3, r5, #20
 802362e:	ea4f 088a 	mov.w	r8, sl, lsl #2
 8023632:	eb03 0108 	add.w	r1, r3, r8
 8023636:	681a      	ldr	r2, [r3, #0]
 8023638:	1c50      	adds	r0, r2, #1
 802363a:	d002      	beq.n	8023642 <__gethex+0x38c>
 802363c:	3201      	adds	r2, #1
 802363e:	601a      	str	r2, [r3, #0]
 8023640:	e021      	b.n	8023686 <__gethex+0x3d0>
 8023642:	2200      	movs	r2, #0
 8023644:	f843 2b04 	str.w	r2, [r3], #4
 8023648:	428b      	cmp	r3, r1
 802364a:	d3f4      	bcc.n	8023636 <__gethex+0x380>
 802364c:	68ab      	ldr	r3, [r5, #8]
 802364e:	459a      	cmp	sl, r3
 8023650:	db12      	blt.n	8023678 <__gethex+0x3c2>
 8023652:	6869      	ldr	r1, [r5, #4]
 8023654:	9801      	ldr	r0, [sp, #4]
 8023656:	3101      	adds	r1, #1
 8023658:	f000 f96d 	bl	8023936 <_Balloc>
 802365c:	692a      	ldr	r2, [r5, #16]
 802365e:	3202      	adds	r2, #2
 8023660:	f105 010c 	add.w	r1, r5, #12
 8023664:	4683      	mov	fp, r0
 8023666:	0092      	lsls	r2, r2, #2
 8023668:	300c      	adds	r0, #12
 802366a:	f7fc fe50 	bl	802030e <memcpy>
 802366e:	4629      	mov	r1, r5
 8023670:	9801      	ldr	r0, [sp, #4]
 8023672:	f000 f995 	bl	80239a0 <_Bfree>
 8023676:	465d      	mov	r5, fp
 8023678:	692b      	ldr	r3, [r5, #16]
 802367a:	1c5a      	adds	r2, r3, #1
 802367c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8023680:	612a      	str	r2, [r5, #16]
 8023682:	2201      	movs	r2, #1
 8023684:	615a      	str	r2, [r3, #20]
 8023686:	2f02      	cmp	r7, #2
 8023688:	f105 0214 	add.w	r2, r5, #20
 802368c:	d110      	bne.n	80236b0 <__gethex+0x3fa>
 802368e:	f8d9 3000 	ldr.w	r3, [r9]
 8023692:	3b01      	subs	r3, #1
 8023694:	429e      	cmp	r6, r3
 8023696:	d126      	bne.n	80236e6 <__gethex+0x430>
 8023698:	1171      	asrs	r1, r6, #5
 802369a:	2301      	movs	r3, #1
 802369c:	f006 061f 	and.w	r6, r6, #31
 80236a0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80236a4:	40b3      	lsls	r3, r6
 80236a6:	4213      	tst	r3, r2
 80236a8:	bf0c      	ite	eq
 80236aa:	2702      	moveq	r7, #2
 80236ac:	2701      	movne	r7, #1
 80236ae:	e01a      	b.n	80236e6 <__gethex+0x430>
 80236b0:	692b      	ldr	r3, [r5, #16]
 80236b2:	4553      	cmp	r3, sl
 80236b4:	dd0a      	ble.n	80236cc <__gethex+0x416>
 80236b6:	4628      	mov	r0, r5
 80236b8:	2101      	movs	r1, #1
 80236ba:	f7ff fdb1 	bl	8023220 <rshift>
 80236be:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80236c2:	3401      	adds	r4, #1
 80236c4:	429c      	cmp	r4, r3
 80236c6:	f73f af2f 	bgt.w	8023528 <__gethex+0x272>
 80236ca:	e00b      	b.n	80236e4 <__gethex+0x42e>
 80236cc:	f016 061f 	ands.w	r6, r6, #31
 80236d0:	d008      	beq.n	80236e4 <__gethex+0x42e>
 80236d2:	4490      	add	r8, r2
 80236d4:	f1c6 0620 	rsb	r6, r6, #32
 80236d8:	f858 0c04 	ldr.w	r0, [r8, #-4]
 80236dc:	f000 f9f5 	bl	8023aca <__hi0bits>
 80236e0:	42b0      	cmp	r0, r6
 80236e2:	dbe8      	blt.n	80236b6 <__gethex+0x400>
 80236e4:	2701      	movs	r7, #1
 80236e6:	f047 0720 	orr.w	r7, r7, #32
 80236ea:	e001      	b.n	80236f0 <__gethex+0x43a>
 80236ec:	f047 0710 	orr.w	r7, r7, #16
 80236f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80236f2:	601d      	str	r5, [r3, #0]
 80236f4:	9b04      	ldr	r3, [sp, #16]
 80236f6:	4638      	mov	r0, r7
 80236f8:	601c      	str	r4, [r3, #0]
 80236fa:	b009      	add	sp, #36	; 0x24
 80236fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023700 <L_shift>:
 8023700:	f1c2 0208 	rsb	r2, r2, #8
 8023704:	0092      	lsls	r2, r2, #2
 8023706:	b570      	push	{r4, r5, r6, lr}
 8023708:	f1c2 0620 	rsb	r6, r2, #32
 802370c:	6843      	ldr	r3, [r0, #4]
 802370e:	6805      	ldr	r5, [r0, #0]
 8023710:	fa03 f406 	lsl.w	r4, r3, r6
 8023714:	432c      	orrs	r4, r5
 8023716:	40d3      	lsrs	r3, r2
 8023718:	6004      	str	r4, [r0, #0]
 802371a:	f840 3f04 	str.w	r3, [r0, #4]!
 802371e:	4288      	cmp	r0, r1
 8023720:	d3f4      	bcc.n	802370c <L_shift+0xc>
 8023722:	bd70      	pop	{r4, r5, r6, pc}

08023724 <__hexnan>:
 8023724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023728:	680e      	ldr	r6, [r1, #0]
 802372a:	f8d0 a000 	ldr.w	sl, [r0]
 802372e:	1175      	asrs	r5, r6, #5
 8023730:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8023734:	f016 031f 	ands.w	r3, r6, #31
 8023738:	b085      	sub	sp, #20
 802373a:	bf18      	it	ne
 802373c:	3504      	addne	r5, #4
 802373e:	f1a5 0904 	sub.w	r9, r5, #4
 8023742:	4617      	mov	r7, r2
 8023744:	2200      	movs	r2, #0
 8023746:	4683      	mov	fp, r0
 8023748:	9301      	str	r3, [sp, #4]
 802374a:	f845 2c04 	str.w	r2, [r5, #-4]
 802374e:	46c8      	mov	r8, r9
 8023750:	464c      	mov	r4, r9
 8023752:	9200      	str	r2, [sp, #0]
 8023754:	4616      	mov	r6, r2
 8023756:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 802375a:	2900      	cmp	r1, #0
 802375c:	d03a      	beq.n	80237d4 <__hexnan+0xb0>
 802375e:	4608      	mov	r0, r1
 8023760:	9203      	str	r2, [sp, #12]
 8023762:	9102      	str	r1, [sp, #8]
 8023764:	f7ff fd92 	bl	802328c <__hexdig_fun>
 8023768:	9902      	ldr	r1, [sp, #8]
 802376a:	9a03      	ldr	r2, [sp, #12]
 802376c:	b9e8      	cbnz	r0, 80237aa <__hexnan+0x86>
 802376e:	2920      	cmp	r1, #32
 8023770:	d814      	bhi.n	802379c <__hexnan+0x78>
 8023772:	9b00      	ldr	r3, [sp, #0]
 8023774:	42b3      	cmp	r3, r6
 8023776:	daee      	bge.n	8023756 <__hexnan+0x32>
 8023778:	4544      	cmp	r4, r8
 802377a:	d205      	bcs.n	8023788 <__hexnan+0x64>
 802377c:	2a07      	cmp	r2, #7
 802377e:	dc03      	bgt.n	8023788 <__hexnan+0x64>
 8023780:	4620      	mov	r0, r4
 8023782:	4641      	mov	r1, r8
 8023784:	f7ff ffbc 	bl	8023700 <L_shift>
 8023788:	42bc      	cmp	r4, r7
 802378a:	d921      	bls.n	80237d0 <__hexnan+0xac>
 802378c:	f1a4 0804 	sub.w	r8, r4, #4
 8023790:	2200      	movs	r2, #0
 8023792:	f844 2c04 	str.w	r2, [r4, #-4]
 8023796:	9600      	str	r6, [sp, #0]
 8023798:	4644      	mov	r4, r8
 802379a:	e7dc      	b.n	8023756 <__hexnan+0x32>
 802379c:	2929      	cmp	r1, #41	; 0x29
 802379e:	d145      	bne.n	802382c <__hexnan+0x108>
 80237a0:	f10a 0301 	add.w	r3, sl, #1
 80237a4:	f8cb 3000 	str.w	r3, [fp]
 80237a8:	e014      	b.n	80237d4 <__hexnan+0xb0>
 80237aa:	3201      	adds	r2, #1
 80237ac:	2a08      	cmp	r2, #8
 80237ae:	f106 0601 	add.w	r6, r6, #1
 80237b2:	dd06      	ble.n	80237c2 <__hexnan+0x9e>
 80237b4:	42bc      	cmp	r4, r7
 80237b6:	d9ce      	bls.n	8023756 <__hexnan+0x32>
 80237b8:	2200      	movs	r2, #0
 80237ba:	f844 2c04 	str.w	r2, [r4, #-4]
 80237be:	3c04      	subs	r4, #4
 80237c0:	2201      	movs	r2, #1
 80237c2:	6821      	ldr	r1, [r4, #0]
 80237c4:	f000 000f 	and.w	r0, r0, #15
 80237c8:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 80237cc:	6020      	str	r0, [r4, #0]
 80237ce:	e7c2      	b.n	8023756 <__hexnan+0x32>
 80237d0:	2208      	movs	r2, #8
 80237d2:	e7c0      	b.n	8023756 <__hexnan+0x32>
 80237d4:	b356      	cbz	r6, 802382c <__hexnan+0x108>
 80237d6:	4544      	cmp	r4, r8
 80237d8:	d205      	bcs.n	80237e6 <__hexnan+0xc2>
 80237da:	2a07      	cmp	r2, #7
 80237dc:	dc03      	bgt.n	80237e6 <__hexnan+0xc2>
 80237de:	4620      	mov	r0, r4
 80237e0:	4641      	mov	r1, r8
 80237e2:	f7ff ff8d 	bl	8023700 <L_shift>
 80237e6:	42bc      	cmp	r4, r7
 80237e8:	d90c      	bls.n	8023804 <__hexnan+0xe0>
 80237ea:	463b      	mov	r3, r7
 80237ec:	f854 2b04 	ldr.w	r2, [r4], #4
 80237f0:	f843 2b04 	str.w	r2, [r3], #4
 80237f4:	454c      	cmp	r4, r9
 80237f6:	d9f9      	bls.n	80237ec <__hexnan+0xc8>
 80237f8:	2200      	movs	r2, #0
 80237fa:	f843 2b04 	str.w	r2, [r3], #4
 80237fe:	454b      	cmp	r3, r9
 8023800:	d9fa      	bls.n	80237f8 <__hexnan+0xd4>
 8023802:	e00b      	b.n	802381c <__hexnan+0xf8>
 8023804:	9b01      	ldr	r3, [sp, #4]
 8023806:	b14b      	cbz	r3, 802381c <__hexnan+0xf8>
 8023808:	f1c3 0620 	rsb	r6, r3, #32
 802380c:	f855 2c04 	ldr.w	r2, [r5, #-4]
 8023810:	f04f 33ff 	mov.w	r3, #4294967295
 8023814:	40f3      	lsrs	r3, r6
 8023816:	4013      	ands	r3, r2
 8023818:	f845 3c04 	str.w	r3, [r5, #-4]
 802381c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8023820:	b933      	cbnz	r3, 8023830 <__hexnan+0x10c>
 8023822:	42bd      	cmp	r5, r7
 8023824:	d1fa      	bne.n	802381c <__hexnan+0xf8>
 8023826:	2301      	movs	r3, #1
 8023828:	602b      	str	r3, [r5, #0]
 802382a:	e001      	b.n	8023830 <__hexnan+0x10c>
 802382c:	2004      	movs	r0, #4
 802382e:	e000      	b.n	8023832 <__hexnan+0x10e>
 8023830:	2005      	movs	r0, #5
 8023832:	b005      	add	sp, #20
 8023834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023838 <_localeconv_r>:
 8023838:	4800      	ldr	r0, [pc, #0]	; (802383c <_localeconv_r+0x4>)
 802383a:	4770      	bx	lr
 802383c:	20001790 	.word	0x20001790

08023840 <_lseek_r>:
 8023840:	b538      	push	{r3, r4, r5, lr}
 8023842:	4c07      	ldr	r4, [pc, #28]	; (8023860 <_lseek_r+0x20>)
 8023844:	4605      	mov	r5, r0
 8023846:	2000      	movs	r0, #0
 8023848:	6020      	str	r0, [r4, #0]
 802384a:	4608      	mov	r0, r1
 802384c:	4611      	mov	r1, r2
 802384e:	461a      	mov	r2, r3
 8023850:	f7fa f884 	bl	801d95c <_lseek>
 8023854:	1c43      	adds	r3, r0, #1
 8023856:	d102      	bne.n	802385e <_lseek_r+0x1e>
 8023858:	6823      	ldr	r3, [r4, #0]
 802385a:	b103      	cbz	r3, 802385e <_lseek_r+0x1e>
 802385c:	602b      	str	r3, [r5, #0]
 802385e:	bd38      	pop	{r3, r4, r5, pc}
 8023860:	20001a8c 	.word	0x20001a8c

08023864 <__smakebuf_r>:
 8023864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023866:	898b      	ldrh	r3, [r1, #12]
 8023868:	079d      	lsls	r5, r3, #30
 802386a:	b091      	sub	sp, #68	; 0x44
 802386c:	4606      	mov	r6, r0
 802386e:	460c      	mov	r4, r1
 8023870:	d426      	bmi.n	80238c0 <__smakebuf_r+0x5c>
 8023872:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023876:	2900      	cmp	r1, #0
 8023878:	da09      	bge.n	802388e <__smakebuf_r+0x2a>
 802387a:	89a3      	ldrh	r3, [r4, #12]
 802387c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8023880:	f04f 0500 	mov.w	r5, #0
 8023884:	bf14      	ite	ne
 8023886:	2740      	movne	r7, #64	; 0x40
 8023888:	f44f 6780 	moveq.w	r7, #1024	; 0x400
 802388c:	e00d      	b.n	80238aa <__smakebuf_r+0x46>
 802388e:	aa01      	add	r2, sp, #4
 8023890:	f000 fdcc 	bl	802442c <_fstat_r>
 8023894:	2800      	cmp	r0, #0
 8023896:	dbf0      	blt.n	802387a <__smakebuf_r+0x16>
 8023898:	9d02      	ldr	r5, [sp, #8]
 802389a:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 802389e:	f5a5 5100 	sub.w	r1, r5, #8192	; 0x2000
 80238a2:	424d      	negs	r5, r1
 80238a4:	414d      	adcs	r5, r1
 80238a6:	f44f 6780 	mov.w	r7, #1024	; 0x400
 80238aa:	4630      	mov	r0, r6
 80238ac:	4639      	mov	r1, r7
 80238ae:	f7fc fd93 	bl	80203d8 <_malloc_r>
 80238b2:	b960      	cbnz	r0, 80238ce <__smakebuf_r+0x6a>
 80238b4:	89a3      	ldrh	r3, [r4, #12]
 80238b6:	059a      	lsls	r2, r3, #22
 80238b8:	d41d      	bmi.n	80238f6 <__smakebuf_r+0x92>
 80238ba:	f043 0302 	orr.w	r3, r3, #2
 80238be:	81a3      	strh	r3, [r4, #12]
 80238c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80238c4:	6023      	str	r3, [r4, #0]
 80238c6:	6123      	str	r3, [r4, #16]
 80238c8:	2301      	movs	r3, #1
 80238ca:	6163      	str	r3, [r4, #20]
 80238cc:	e013      	b.n	80238f6 <__smakebuf_r+0x92>
 80238ce:	4b0b      	ldr	r3, [pc, #44]	; (80238fc <__smakebuf_r+0x98>)
 80238d0:	62b3      	str	r3, [r6, #40]	; 0x28
 80238d2:	89a3      	ldrh	r3, [r4, #12]
 80238d4:	6020      	str	r0, [r4, #0]
 80238d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80238da:	81a3      	strh	r3, [r4, #12]
 80238dc:	6120      	str	r0, [r4, #16]
 80238de:	6167      	str	r7, [r4, #20]
 80238e0:	b14d      	cbz	r5, 80238f6 <__smakebuf_r+0x92>
 80238e2:	4630      	mov	r0, r6
 80238e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80238e8:	f000 fdb2 	bl	8024450 <_isatty_r>
 80238ec:	b118      	cbz	r0, 80238f6 <__smakebuf_r+0x92>
 80238ee:	89a3      	ldrh	r3, [r4, #12]
 80238f0:	f043 0301 	orr.w	r3, r3, #1
 80238f4:	81a3      	strh	r3, [r4, #12]
 80238f6:	b011      	add	sp, #68	; 0x44
 80238f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80238fa:	bf00      	nop
 80238fc:	080200f5 	.word	0x080200f5

08023900 <memmove>:
 8023900:	4281      	cmp	r1, r0
 8023902:	b510      	push	{r4, lr}
 8023904:	eb01 0302 	add.w	r3, r1, r2
 8023908:	d301      	bcc.n	802390e <memmove+0xe>
 802390a:	1e42      	subs	r2, r0, #1
 802390c:	e00b      	b.n	8023926 <memmove+0x26>
 802390e:	4298      	cmp	r0, r3
 8023910:	d2fb      	bcs.n	802390a <memmove+0xa>
 8023912:	1881      	adds	r1, r0, r2
 8023914:	1ad2      	subs	r2, r2, r3
 8023916:	42d3      	cmn	r3, r2
 8023918:	d004      	beq.n	8023924 <memmove+0x24>
 802391a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802391e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8023922:	e7f8      	b.n	8023916 <memmove+0x16>
 8023924:	bd10      	pop	{r4, pc}
 8023926:	4299      	cmp	r1, r3
 8023928:	d004      	beq.n	8023934 <memmove+0x34>
 802392a:	f811 4b01 	ldrb.w	r4, [r1], #1
 802392e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8023932:	e7f8      	b.n	8023926 <memmove+0x26>
 8023934:	bd10      	pop	{r4, pc}

08023936 <_Balloc>:
 8023936:	b570      	push	{r4, r5, r6, lr}
 8023938:	6a45      	ldr	r5, [r0, #36]	; 0x24
 802393a:	4604      	mov	r4, r0
 802393c:	460e      	mov	r6, r1
 802393e:	b93d      	cbnz	r5, 8023950 <_Balloc+0x1a>
 8023940:	2010      	movs	r0, #16
 8023942:	f7fc fcc5 	bl	80202d0 <malloc>
 8023946:	6260      	str	r0, [r4, #36]	; 0x24
 8023948:	6045      	str	r5, [r0, #4]
 802394a:	6085      	str	r5, [r0, #8]
 802394c:	6005      	str	r5, [r0, #0]
 802394e:	60c5      	str	r5, [r0, #12]
 8023950:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8023952:	68eb      	ldr	r3, [r5, #12]
 8023954:	b143      	cbz	r3, 8023968 <_Balloc+0x32>
 8023956:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8023958:	68db      	ldr	r3, [r3, #12]
 802395a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 802395e:	b178      	cbz	r0, 8023980 <_Balloc+0x4a>
 8023960:	6802      	ldr	r2, [r0, #0]
 8023962:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8023966:	e017      	b.n	8023998 <_Balloc+0x62>
 8023968:	4620      	mov	r0, r4
 802396a:	2104      	movs	r1, #4
 802396c:	2221      	movs	r2, #33	; 0x21
 802396e:	f7fc fce1 	bl	8020334 <_calloc_r>
 8023972:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8023974:	60e8      	str	r0, [r5, #12]
 8023976:	68db      	ldr	r3, [r3, #12]
 8023978:	2b00      	cmp	r3, #0
 802397a:	d1ec      	bne.n	8023956 <_Balloc+0x20>
 802397c:	2000      	movs	r0, #0
 802397e:	bd70      	pop	{r4, r5, r6, pc}
 8023980:	2101      	movs	r1, #1
 8023982:	fa01 f506 	lsl.w	r5, r1, r6
 8023986:	1d6a      	adds	r2, r5, #5
 8023988:	4620      	mov	r0, r4
 802398a:	0092      	lsls	r2, r2, #2
 802398c:	f7fc fcd2 	bl	8020334 <_calloc_r>
 8023990:	2800      	cmp	r0, #0
 8023992:	d0f3      	beq.n	802397c <_Balloc+0x46>
 8023994:	6046      	str	r6, [r0, #4]
 8023996:	6085      	str	r5, [r0, #8]
 8023998:	2300      	movs	r3, #0
 802399a:	6103      	str	r3, [r0, #16]
 802399c:	60c3      	str	r3, [r0, #12]
 802399e:	bd70      	pop	{r4, r5, r6, pc}

080239a0 <_Bfree>:
 80239a0:	b570      	push	{r4, r5, r6, lr}
 80239a2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80239a4:	4606      	mov	r6, r0
 80239a6:	460d      	mov	r5, r1
 80239a8:	b93c      	cbnz	r4, 80239ba <_Bfree+0x1a>
 80239aa:	2010      	movs	r0, #16
 80239ac:	f7fc fc90 	bl	80202d0 <malloc>
 80239b0:	6270      	str	r0, [r6, #36]	; 0x24
 80239b2:	6044      	str	r4, [r0, #4]
 80239b4:	6084      	str	r4, [r0, #8]
 80239b6:	6004      	str	r4, [r0, #0]
 80239b8:	60c4      	str	r4, [r0, #12]
 80239ba:	b13d      	cbz	r5, 80239cc <_Bfree+0x2c>
 80239bc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80239be:	686a      	ldr	r2, [r5, #4]
 80239c0:	68db      	ldr	r3, [r3, #12]
 80239c2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80239c6:	6029      	str	r1, [r5, #0]
 80239c8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80239cc:	bd70      	pop	{r4, r5, r6, pc}

080239ce <__multadd>:
 80239ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80239d2:	690f      	ldr	r7, [r1, #16]
 80239d4:	4698      	mov	r8, r3
 80239d6:	4606      	mov	r6, r0
 80239d8:	460c      	mov	r4, r1
 80239da:	f101 0e14 	add.w	lr, r1, #20
 80239de:	2300      	movs	r3, #0
 80239e0:	f8de 0000 	ldr.w	r0, [lr]
 80239e4:	b285      	uxth	r5, r0
 80239e6:	0c01      	lsrs	r1, r0, #16
 80239e8:	fb02 8505 	mla	r5, r2, r5, r8
 80239ec:	4351      	muls	r1, r2
 80239ee:	eb01 4115 	add.w	r1, r1, r5, lsr #16
 80239f2:	3301      	adds	r3, #1
 80239f4:	b2ad      	uxth	r5, r5
 80239f6:	ea4f 4811 	mov.w	r8, r1, lsr #16
 80239fa:	42bb      	cmp	r3, r7
 80239fc:	eb05 4101 	add.w	r1, r5, r1, lsl #16
 8023a00:	f84e 1b04 	str.w	r1, [lr], #4
 8023a04:	dbec      	blt.n	80239e0 <__multadd+0x12>
 8023a06:	f1b8 0f00 	cmp.w	r8, #0
 8023a0a:	d01b      	beq.n	8023a44 <__multadd+0x76>
 8023a0c:	68a3      	ldr	r3, [r4, #8]
 8023a0e:	429f      	cmp	r7, r3
 8023a10:	db12      	blt.n	8023a38 <__multadd+0x6a>
 8023a12:	6861      	ldr	r1, [r4, #4]
 8023a14:	4630      	mov	r0, r6
 8023a16:	3101      	adds	r1, #1
 8023a18:	f7ff ff8d 	bl	8023936 <_Balloc>
 8023a1c:	6922      	ldr	r2, [r4, #16]
 8023a1e:	3202      	adds	r2, #2
 8023a20:	f104 010c 	add.w	r1, r4, #12
 8023a24:	4605      	mov	r5, r0
 8023a26:	0092      	lsls	r2, r2, #2
 8023a28:	300c      	adds	r0, #12
 8023a2a:	f7fc fc70 	bl	802030e <memcpy>
 8023a2e:	4621      	mov	r1, r4
 8023a30:	4630      	mov	r0, r6
 8023a32:	f7ff ffb5 	bl	80239a0 <_Bfree>
 8023a36:	462c      	mov	r4, r5
 8023a38:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 8023a3c:	3701      	adds	r7, #1
 8023a3e:	f8c3 8014 	str.w	r8, [r3, #20]
 8023a42:	6127      	str	r7, [r4, #16]
 8023a44:	4620      	mov	r0, r4
 8023a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08023a4a <__s2b>:
 8023a4a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023a4e:	460c      	mov	r4, r1
 8023a50:	4615      	mov	r5, r2
 8023a52:	4698      	mov	r8, r3
 8023a54:	2209      	movs	r2, #9
 8023a56:	3308      	adds	r3, #8
 8023a58:	4607      	mov	r7, r0
 8023a5a:	fb93 f2f2 	sdiv	r2, r3, r2
 8023a5e:	2100      	movs	r1, #0
 8023a60:	2301      	movs	r3, #1
 8023a62:	429a      	cmp	r2, r3
 8023a64:	dd02      	ble.n	8023a6c <__s2b+0x22>
 8023a66:	005b      	lsls	r3, r3, #1
 8023a68:	3101      	adds	r1, #1
 8023a6a:	e7fa      	b.n	8023a62 <__s2b+0x18>
 8023a6c:	4638      	mov	r0, r7
 8023a6e:	f7ff ff62 	bl	8023936 <_Balloc>
 8023a72:	9b08      	ldr	r3, [sp, #32]
 8023a74:	6143      	str	r3, [r0, #20]
 8023a76:	2d09      	cmp	r5, #9
 8023a78:	f04f 0301 	mov.w	r3, #1
 8023a7c:	4601      	mov	r1, r0
 8023a7e:	6103      	str	r3, [r0, #16]
 8023a80:	dd10      	ble.n	8023aa4 <__s2b+0x5a>
 8023a82:	f104 0609 	add.w	r6, r4, #9
 8023a86:	46b1      	mov	r9, r6
 8023a88:	442c      	add	r4, r5
 8023a8a:	f819 3b01 	ldrb.w	r3, [r9], #1
 8023a8e:	4638      	mov	r0, r7
 8023a90:	220a      	movs	r2, #10
 8023a92:	3b30      	subs	r3, #48	; 0x30
 8023a94:	f7ff ff9b 	bl	80239ce <__multadd>
 8023a98:	45a1      	cmp	r9, r4
 8023a9a:	4601      	mov	r1, r0
 8023a9c:	d1f5      	bne.n	8023a8a <__s2b+0x40>
 8023a9e:	1974      	adds	r4, r6, r5
 8023aa0:	3c08      	subs	r4, #8
 8023aa2:	e001      	b.n	8023aa8 <__s2b+0x5e>
 8023aa4:	340a      	adds	r4, #10
 8023aa6:	2509      	movs	r5, #9
 8023aa8:	4626      	mov	r6, r4
 8023aaa:	1b2b      	subs	r3, r5, r4
 8023aac:	4433      	add	r3, r6
 8023aae:	4543      	cmp	r3, r8
 8023ab0:	da08      	bge.n	8023ac4 <__s2b+0x7a>
 8023ab2:	f816 3b01 	ldrb.w	r3, [r6], #1
 8023ab6:	4638      	mov	r0, r7
 8023ab8:	220a      	movs	r2, #10
 8023aba:	3b30      	subs	r3, #48	; 0x30
 8023abc:	f7ff ff87 	bl	80239ce <__multadd>
 8023ac0:	4601      	mov	r1, r0
 8023ac2:	e7f2      	b.n	8023aaa <__s2b+0x60>
 8023ac4:	4608      	mov	r0, r1
 8023ac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08023aca <__hi0bits>:
 8023aca:	0c03      	lsrs	r3, r0, #16
 8023acc:	041b      	lsls	r3, r3, #16
 8023ace:	b913      	cbnz	r3, 8023ad6 <__hi0bits+0xc>
 8023ad0:	0400      	lsls	r0, r0, #16
 8023ad2:	2310      	movs	r3, #16
 8023ad4:	e000      	b.n	8023ad8 <__hi0bits+0xe>
 8023ad6:	2300      	movs	r3, #0
 8023ad8:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8023adc:	bf04      	itt	eq
 8023ade:	0200      	lsleq	r0, r0, #8
 8023ae0:	3308      	addeq	r3, #8
 8023ae2:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8023ae6:	bf04      	itt	eq
 8023ae8:	0100      	lsleq	r0, r0, #4
 8023aea:	3304      	addeq	r3, #4
 8023aec:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8023af0:	bf04      	itt	eq
 8023af2:	0080      	lsleq	r0, r0, #2
 8023af4:	3302      	addeq	r3, #2
 8023af6:	2800      	cmp	r0, #0
 8023af8:	db03      	blt.n	8023b02 <__hi0bits+0x38>
 8023afa:	0042      	lsls	r2, r0, #1
 8023afc:	d503      	bpl.n	8023b06 <__hi0bits+0x3c>
 8023afe:	1c58      	adds	r0, r3, #1
 8023b00:	4770      	bx	lr
 8023b02:	4618      	mov	r0, r3
 8023b04:	4770      	bx	lr
 8023b06:	2020      	movs	r0, #32
 8023b08:	4770      	bx	lr

08023b0a <__lo0bits>:
 8023b0a:	6803      	ldr	r3, [r0, #0]
 8023b0c:	f013 0207 	ands.w	r2, r3, #7
 8023b10:	d00b      	beq.n	8023b2a <__lo0bits+0x20>
 8023b12:	07d9      	lsls	r1, r3, #31
 8023b14:	d422      	bmi.n	8023b5c <__lo0bits+0x52>
 8023b16:	079a      	lsls	r2, r3, #30
 8023b18:	bf4b      	itete	mi
 8023b1a:	085b      	lsrmi	r3, r3, #1
 8023b1c:	089b      	lsrpl	r3, r3, #2
 8023b1e:	6003      	strmi	r3, [r0, #0]
 8023b20:	6003      	strpl	r3, [r0, #0]
 8023b22:	bf4c      	ite	mi
 8023b24:	2001      	movmi	r0, #1
 8023b26:	2002      	movpl	r0, #2
 8023b28:	4770      	bx	lr
 8023b2a:	b299      	uxth	r1, r3
 8023b2c:	b909      	cbnz	r1, 8023b32 <__lo0bits+0x28>
 8023b2e:	0c1b      	lsrs	r3, r3, #16
 8023b30:	2210      	movs	r2, #16
 8023b32:	f013 0fff 	tst.w	r3, #255	; 0xff
 8023b36:	bf04      	itt	eq
 8023b38:	0a1b      	lsreq	r3, r3, #8
 8023b3a:	3208      	addeq	r2, #8
 8023b3c:	0719      	lsls	r1, r3, #28
 8023b3e:	bf04      	itt	eq
 8023b40:	091b      	lsreq	r3, r3, #4
 8023b42:	3204      	addeq	r2, #4
 8023b44:	0799      	lsls	r1, r3, #30
 8023b46:	bf04      	itt	eq
 8023b48:	089b      	lsreq	r3, r3, #2
 8023b4a:	3202      	addeq	r2, #2
 8023b4c:	07d9      	lsls	r1, r3, #31
 8023b4e:	d402      	bmi.n	8023b56 <__lo0bits+0x4c>
 8023b50:	085b      	lsrs	r3, r3, #1
 8023b52:	d005      	beq.n	8023b60 <__lo0bits+0x56>
 8023b54:	3201      	adds	r2, #1
 8023b56:	6003      	str	r3, [r0, #0]
 8023b58:	4610      	mov	r0, r2
 8023b5a:	4770      	bx	lr
 8023b5c:	2000      	movs	r0, #0
 8023b5e:	4770      	bx	lr
 8023b60:	2020      	movs	r0, #32
 8023b62:	4770      	bx	lr

08023b64 <__i2b>:
 8023b64:	b510      	push	{r4, lr}
 8023b66:	460c      	mov	r4, r1
 8023b68:	2101      	movs	r1, #1
 8023b6a:	f7ff fee4 	bl	8023936 <_Balloc>
 8023b6e:	2201      	movs	r2, #1
 8023b70:	6144      	str	r4, [r0, #20]
 8023b72:	6102      	str	r2, [r0, #16]
 8023b74:	bd10      	pop	{r4, pc}

08023b76 <__multiply>:
 8023b76:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b7a:	4614      	mov	r4, r2
 8023b7c:	690a      	ldr	r2, [r1, #16]
 8023b7e:	6923      	ldr	r3, [r4, #16]
 8023b80:	429a      	cmp	r2, r3
 8023b82:	bfb8      	it	lt
 8023b84:	460b      	movlt	r3, r1
 8023b86:	4688      	mov	r8, r1
 8023b88:	bfbc      	itt	lt
 8023b8a:	46a0      	movlt	r8, r4
 8023b8c:	461c      	movlt	r4, r3
 8023b8e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8023b92:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8023b96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8023b9a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8023b9e:	eb07 0609 	add.w	r6, r7, r9
 8023ba2:	429e      	cmp	r6, r3
 8023ba4:	bfc8      	it	gt
 8023ba6:	3101      	addgt	r1, #1
 8023ba8:	f7ff fec5 	bl	8023936 <_Balloc>
 8023bac:	f100 0514 	add.w	r5, r0, #20
 8023bb0:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 8023bb4:	462b      	mov	r3, r5
 8023bb6:	4563      	cmp	r3, ip
 8023bb8:	d203      	bcs.n	8023bc2 <__multiply+0x4c>
 8023bba:	2200      	movs	r2, #0
 8023bbc:	f843 2b04 	str.w	r2, [r3], #4
 8023bc0:	e7f9      	b.n	8023bb6 <__multiply+0x40>
 8023bc2:	f104 0214 	add.w	r2, r4, #20
 8023bc6:	f108 0114 	add.w	r1, r8, #20
 8023bca:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8023bce:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8023bd2:	9300      	str	r3, [sp, #0]
 8023bd4:	9b00      	ldr	r3, [sp, #0]
 8023bd6:	9201      	str	r2, [sp, #4]
 8023bd8:	429a      	cmp	r2, r3
 8023bda:	d257      	bcs.n	8023c8c <__multiply+0x116>
 8023bdc:	f8b2 b000 	ldrh.w	fp, [r2]
 8023be0:	f1bb 0f00 	cmp.w	fp, #0
 8023be4:	d023      	beq.n	8023c2e <__multiply+0xb8>
 8023be6:	4689      	mov	r9, r1
 8023be8:	46ae      	mov	lr, r5
 8023bea:	f04f 0800 	mov.w	r8, #0
 8023bee:	f859 4b04 	ldr.w	r4, [r9], #4
 8023bf2:	f8be a000 	ldrh.w	sl, [lr]
 8023bf6:	b2a3      	uxth	r3, r4
 8023bf8:	fb0b a303 	mla	r3, fp, r3, sl
 8023bfc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8023c00:	f8de 4000 	ldr.w	r4, [lr]
 8023c04:	4443      	add	r3, r8
 8023c06:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8023c0a:	fb0b 840a 	mla	r4, fp, sl, r8
 8023c0e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8023c12:	46f2      	mov	sl, lr
 8023c14:	b29b      	uxth	r3, r3
 8023c16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8023c1a:	454f      	cmp	r7, r9
 8023c1c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8023c20:	f84a 3b04 	str.w	r3, [sl], #4
 8023c24:	d901      	bls.n	8023c2a <__multiply+0xb4>
 8023c26:	46d6      	mov	lr, sl
 8023c28:	e7e1      	b.n	8023bee <__multiply+0x78>
 8023c2a:	f8ce 8004 	str.w	r8, [lr, #4]
 8023c2e:	9b01      	ldr	r3, [sp, #4]
 8023c30:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8023c34:	3204      	adds	r2, #4
 8023c36:	f1ba 0f00 	cmp.w	sl, #0
 8023c3a:	d021      	beq.n	8023c80 <__multiply+0x10a>
 8023c3c:	682b      	ldr	r3, [r5, #0]
 8023c3e:	462c      	mov	r4, r5
 8023c40:	4689      	mov	r9, r1
 8023c42:	f04f 0800 	mov.w	r8, #0
 8023c46:	f8b9 e000 	ldrh.w	lr, [r9]
 8023c4a:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 8023c4e:	fb0a be0e 	mla	lr, sl, lr, fp
 8023c52:	44f0      	add	r8, lr
 8023c54:	46a3      	mov	fp, r4
 8023c56:	b29b      	uxth	r3, r3
 8023c58:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8023c5c:	f84b 3b04 	str.w	r3, [fp], #4
 8023c60:	f859 3b04 	ldr.w	r3, [r9], #4
 8023c64:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 8023c68:	0c1b      	lsrs	r3, r3, #16
 8023c6a:	fb0a e303 	mla	r3, sl, r3, lr
 8023c6e:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 8023c72:	45b9      	cmp	r9, r7
 8023c74:	ea4f 4813 	mov.w	r8, r3, lsr #16
 8023c78:	d201      	bcs.n	8023c7e <__multiply+0x108>
 8023c7a:	465c      	mov	r4, fp
 8023c7c:	e7e3      	b.n	8023c46 <__multiply+0xd0>
 8023c7e:	6063      	str	r3, [r4, #4]
 8023c80:	3504      	adds	r5, #4
 8023c82:	e7a7      	b.n	8023bd4 <__multiply+0x5e>
 8023c84:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 8023c88:	b913      	cbnz	r3, 8023c90 <__multiply+0x11a>
 8023c8a:	3e01      	subs	r6, #1
 8023c8c:	2e00      	cmp	r6, #0
 8023c8e:	dcf9      	bgt.n	8023c84 <__multiply+0x10e>
 8023c90:	6106      	str	r6, [r0, #16]
 8023c92:	b003      	add	sp, #12
 8023c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023c98 <__pow5mult>:
 8023c98:	f012 0303 	ands.w	r3, r2, #3
 8023c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023ca0:	4606      	mov	r6, r0
 8023ca2:	460f      	mov	r7, r1
 8023ca4:	4615      	mov	r5, r2
 8023ca6:	d007      	beq.n	8023cb8 <__pow5mult+0x20>
 8023ca8:	3b01      	subs	r3, #1
 8023caa:	4a21      	ldr	r2, [pc, #132]	; (8023d30 <__pow5mult+0x98>)
 8023cac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8023cb0:	2300      	movs	r3, #0
 8023cb2:	f7ff fe8c 	bl	80239ce <__multadd>
 8023cb6:	4607      	mov	r7, r0
 8023cb8:	10ad      	asrs	r5, r5, #2
 8023cba:	d035      	beq.n	8023d28 <__pow5mult+0x90>
 8023cbc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8023cbe:	b93c      	cbnz	r4, 8023cd0 <__pow5mult+0x38>
 8023cc0:	2010      	movs	r0, #16
 8023cc2:	f7fc fb05 	bl	80202d0 <malloc>
 8023cc6:	6270      	str	r0, [r6, #36]	; 0x24
 8023cc8:	6044      	str	r4, [r0, #4]
 8023cca:	6084      	str	r4, [r0, #8]
 8023ccc:	6004      	str	r4, [r0, #0]
 8023cce:	60c4      	str	r4, [r0, #12]
 8023cd0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8023cd4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8023cd8:	b97c      	cbnz	r4, 8023cfa <__pow5mult+0x62>
 8023cda:	4630      	mov	r0, r6
 8023cdc:	f240 2171 	movw	r1, #625	; 0x271
 8023ce0:	f7ff ff40 	bl	8023b64 <__i2b>
 8023ce4:	2300      	movs	r3, #0
 8023ce6:	f8c8 0008 	str.w	r0, [r8, #8]
 8023cea:	4604      	mov	r4, r0
 8023cec:	6003      	str	r3, [r0, #0]
 8023cee:	e004      	b.n	8023cfa <__pow5mult+0x62>
 8023cf0:	106d      	asrs	r5, r5, #1
 8023cf2:	d019      	beq.n	8023d28 <__pow5mult+0x90>
 8023cf4:	6820      	ldr	r0, [r4, #0]
 8023cf6:	b170      	cbz	r0, 8023d16 <__pow5mult+0x7e>
 8023cf8:	4604      	mov	r4, r0
 8023cfa:	07eb      	lsls	r3, r5, #31
 8023cfc:	d5f8      	bpl.n	8023cf0 <__pow5mult+0x58>
 8023cfe:	4639      	mov	r1, r7
 8023d00:	4622      	mov	r2, r4
 8023d02:	4630      	mov	r0, r6
 8023d04:	f7ff ff37 	bl	8023b76 <__multiply>
 8023d08:	4639      	mov	r1, r7
 8023d0a:	4680      	mov	r8, r0
 8023d0c:	4630      	mov	r0, r6
 8023d0e:	f7ff fe47 	bl	80239a0 <_Bfree>
 8023d12:	4647      	mov	r7, r8
 8023d14:	e7ec      	b.n	8023cf0 <__pow5mult+0x58>
 8023d16:	4630      	mov	r0, r6
 8023d18:	4621      	mov	r1, r4
 8023d1a:	4622      	mov	r2, r4
 8023d1c:	f7ff ff2b 	bl	8023b76 <__multiply>
 8023d20:	2300      	movs	r3, #0
 8023d22:	6020      	str	r0, [r4, #0]
 8023d24:	6003      	str	r3, [r0, #0]
 8023d26:	e7e7      	b.n	8023cf8 <__pow5mult+0x60>
 8023d28:	4638      	mov	r0, r7
 8023d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023d2e:	bf00      	nop
 8023d30:	080274b8 	.word	0x080274b8

08023d34 <__lshift>:
 8023d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023d38:	460c      	mov	r4, r1
 8023d3a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8023d3e:	6923      	ldr	r3, [r4, #16]
 8023d40:	6849      	ldr	r1, [r1, #4]
 8023d42:	eb0a 0903 	add.w	r9, sl, r3
 8023d46:	68a3      	ldr	r3, [r4, #8]
 8023d48:	4607      	mov	r7, r0
 8023d4a:	4616      	mov	r6, r2
 8023d4c:	f109 0501 	add.w	r5, r9, #1
 8023d50:	429d      	cmp	r5, r3
 8023d52:	dd02      	ble.n	8023d5a <__lshift+0x26>
 8023d54:	3101      	adds	r1, #1
 8023d56:	005b      	lsls	r3, r3, #1
 8023d58:	e7fa      	b.n	8023d50 <__lshift+0x1c>
 8023d5a:	4638      	mov	r0, r7
 8023d5c:	f7ff fdeb 	bl	8023936 <_Balloc>
 8023d60:	2300      	movs	r3, #0
 8023d62:	4680      	mov	r8, r0
 8023d64:	f100 0114 	add.w	r1, r0, #20
 8023d68:	4553      	cmp	r3, sl
 8023d6a:	da04      	bge.n	8023d76 <__lshift+0x42>
 8023d6c:	2200      	movs	r2, #0
 8023d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8023d72:	3301      	adds	r3, #1
 8023d74:	e7f8      	b.n	8023d68 <__lshift+0x34>
 8023d76:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 8023d7a:	6920      	ldr	r0, [r4, #16]
 8023d7c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8023d80:	f016 021f 	ands.w	r2, r6, #31
 8023d84:	f104 0114 	add.w	r1, r4, #20
 8023d88:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8023d8c:	d014      	beq.n	8023db8 <__lshift+0x84>
 8023d8e:	f1c2 0c20 	rsb	ip, r2, #32
 8023d92:	2000      	movs	r0, #0
 8023d94:	680e      	ldr	r6, [r1, #0]
 8023d96:	4096      	lsls	r6, r2
 8023d98:	4330      	orrs	r0, r6
 8023d9a:	469a      	mov	sl, r3
 8023d9c:	f843 0b04 	str.w	r0, [r3], #4
 8023da0:	f851 0b04 	ldr.w	r0, [r1], #4
 8023da4:	4571      	cmp	r1, lr
 8023da6:	fa20 f00c 	lsr.w	r0, r0, ip
 8023daa:	d3f3      	bcc.n	8023d94 <__lshift+0x60>
 8023dac:	f8ca 0004 	str.w	r0, [sl, #4]
 8023db0:	b148      	cbz	r0, 8023dc6 <__lshift+0x92>
 8023db2:	f109 0502 	add.w	r5, r9, #2
 8023db6:	e006      	b.n	8023dc6 <__lshift+0x92>
 8023db8:	3b04      	subs	r3, #4
 8023dba:	f851 2b04 	ldr.w	r2, [r1], #4
 8023dbe:	f843 2f04 	str.w	r2, [r3, #4]!
 8023dc2:	4571      	cmp	r1, lr
 8023dc4:	d3f9      	bcc.n	8023dba <__lshift+0x86>
 8023dc6:	3d01      	subs	r5, #1
 8023dc8:	4638      	mov	r0, r7
 8023dca:	f8c8 5010 	str.w	r5, [r8, #16]
 8023dce:	4621      	mov	r1, r4
 8023dd0:	f7ff fde6 	bl	80239a0 <_Bfree>
 8023dd4:	4640      	mov	r0, r8
 8023dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08023dda <__mcmp>:
 8023dda:	6903      	ldr	r3, [r0, #16]
 8023ddc:	690a      	ldr	r2, [r1, #16]
 8023dde:	1a9b      	subs	r3, r3, r2
 8023de0:	b510      	push	{r4, lr}
 8023de2:	d111      	bne.n	8023e08 <__mcmp+0x2e>
 8023de4:	0092      	lsls	r2, r2, #2
 8023de6:	3014      	adds	r0, #20
 8023de8:	3114      	adds	r1, #20
 8023dea:	1883      	adds	r3, r0, r2
 8023dec:	440a      	add	r2, r1
 8023dee:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8023df2:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8023df6:	428c      	cmp	r4, r1
 8023df8:	d002      	beq.n	8023e00 <__mcmp+0x26>
 8023dfa:	d307      	bcc.n	8023e0c <__mcmp+0x32>
 8023dfc:	2001      	movs	r0, #1
 8023dfe:	bd10      	pop	{r4, pc}
 8023e00:	4283      	cmp	r3, r0
 8023e02:	d8f4      	bhi.n	8023dee <__mcmp+0x14>
 8023e04:	2000      	movs	r0, #0
 8023e06:	bd10      	pop	{r4, pc}
 8023e08:	4618      	mov	r0, r3
 8023e0a:	bd10      	pop	{r4, pc}
 8023e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8023e10:	bd10      	pop	{r4, pc}

08023e12 <__mdiff>:
 8023e12:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023e16:	4607      	mov	r7, r0
 8023e18:	460c      	mov	r4, r1
 8023e1a:	4608      	mov	r0, r1
 8023e1c:	4611      	mov	r1, r2
 8023e1e:	4615      	mov	r5, r2
 8023e20:	f7ff ffdb 	bl	8023dda <__mcmp>
 8023e24:	1e06      	subs	r6, r0, #0
 8023e26:	d108      	bne.n	8023e3a <__mdiff+0x28>
 8023e28:	4638      	mov	r0, r7
 8023e2a:	4631      	mov	r1, r6
 8023e2c:	f7ff fd83 	bl	8023936 <_Balloc>
 8023e30:	2301      	movs	r3, #1
 8023e32:	6103      	str	r3, [r0, #16]
 8023e34:	6146      	str	r6, [r0, #20]
 8023e36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023e3a:	bfbc      	itt	lt
 8023e3c:	4623      	movlt	r3, r4
 8023e3e:	462c      	movlt	r4, r5
 8023e40:	4638      	mov	r0, r7
 8023e42:	6861      	ldr	r1, [r4, #4]
 8023e44:	bfba      	itte	lt
 8023e46:	461d      	movlt	r5, r3
 8023e48:	2601      	movlt	r6, #1
 8023e4a:	2600      	movge	r6, #0
 8023e4c:	f7ff fd73 	bl	8023936 <_Balloc>
 8023e50:	692b      	ldr	r3, [r5, #16]
 8023e52:	60c6      	str	r6, [r0, #12]
 8023e54:	6926      	ldr	r6, [r4, #16]
 8023e56:	f105 0914 	add.w	r9, r5, #20
 8023e5a:	3414      	adds	r4, #20
 8023e5c:	eb04 0786 	add.w	r7, r4, r6, lsl #2
 8023e60:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8023e64:	f100 0514 	add.w	r5, r0, #20
 8023e68:	f04f 0c00 	mov.w	ip, #0
 8023e6c:	f854 3b04 	ldr.w	r3, [r4], #4
 8023e70:	f859 2b04 	ldr.w	r2, [r9], #4
 8023e74:	fa1c f183 	uxtah	r1, ip, r3
 8023e78:	fa1f fe82 	uxth.w	lr, r2
 8023e7c:	0c12      	lsrs	r2, r2, #16
 8023e7e:	ebce 0101 	rsb	r1, lr, r1
 8023e82:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
 8023e86:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8023e8a:	b289      	uxth	r1, r1
 8023e8c:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8023e90:	45c8      	cmp	r8, r9
 8023e92:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8023e96:	46a6      	mov	lr, r4
 8023e98:	f845 3b04 	str.w	r3, [r5], #4
 8023e9c:	d8e6      	bhi.n	8023e6c <__mdiff+0x5a>
 8023e9e:	45be      	cmp	lr, r7
 8023ea0:	d20e      	bcs.n	8023ec0 <__mdiff+0xae>
 8023ea2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8023ea6:	fa1c f482 	uxtah	r4, ip, r2
 8023eaa:	0c12      	lsrs	r2, r2, #16
 8023eac:	eb02 4224 	add.w	r2, r2, r4, asr #16
 8023eb0:	b2a4      	uxth	r4, r4
 8023eb2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8023eb6:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 8023eba:	f845 2b04 	str.w	r2, [r5], #4
 8023ebe:	e7ee      	b.n	8023e9e <__mdiff+0x8c>
 8023ec0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8023ec4:	b90b      	cbnz	r3, 8023eca <__mdiff+0xb8>
 8023ec6:	3e01      	subs	r6, #1
 8023ec8:	e7fa      	b.n	8023ec0 <__mdiff+0xae>
 8023eca:	6106      	str	r6, [r0, #16]
 8023ecc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08023ed0 <__ulp>:
 8023ed0:	4b10      	ldr	r3, [pc, #64]	; (8023f14 <__ulp+0x44>)
 8023ed2:	400b      	ands	r3, r1
 8023ed4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8023ed8:	2b00      	cmp	r3, #0
 8023eda:	dd02      	ble.n	8023ee2 <__ulp+0x12>
 8023edc:	2000      	movs	r0, #0
 8023ede:	4619      	mov	r1, r3
 8023ee0:	4770      	bx	lr
 8023ee2:	425b      	negs	r3, r3
 8023ee4:	151b      	asrs	r3, r3, #20
 8023ee6:	2b13      	cmp	r3, #19
 8023ee8:	f04f 0000 	mov.w	r0, #0
 8023eec:	f04f 0100 	mov.w	r1, #0
 8023ef0:	dc04      	bgt.n	8023efc <__ulp+0x2c>
 8023ef2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8023ef6:	fa42 f103 	asr.w	r1, r2, r3
 8023efa:	4770      	bx	lr
 8023efc:	2b32      	cmp	r3, #50	; 0x32
 8023efe:	f04f 0201 	mov.w	r2, #1
 8023f02:	bfda      	itte	le
 8023f04:	f1c3 0333 	rsble	r3, r3, #51	; 0x33
 8023f08:	fa02 f303 	lslle.w	r3, r2, r3
 8023f0c:	4613      	movgt	r3, r2
 8023f0e:	4618      	mov	r0, r3
 8023f10:	4770      	bx	lr
 8023f12:	bf00      	nop
 8023f14:	7ff00000 	.word	0x7ff00000

08023f18 <__b2d>:
 8023f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023f1c:	6905      	ldr	r5, [r0, #16]
 8023f1e:	f100 0714 	add.w	r7, r0, #20
 8023f22:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8023f26:	4688      	mov	r8, r1
 8023f28:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8023f2c:	4620      	mov	r0, r4
 8023f2e:	f7ff fdcc 	bl	8023aca <__hi0bits>
 8023f32:	f1c0 0320 	rsb	r3, r0, #32
 8023f36:	280a      	cmp	r0, #10
 8023f38:	f1a5 0604 	sub.w	r6, r5, #4
 8023f3c:	f8c8 3000 	str.w	r3, [r8]
 8023f40:	dc11      	bgt.n	8023f66 <__b2d+0x4e>
 8023f42:	f1c0 0e0b 	rsb	lr, r0, #11
 8023f46:	fa24 f10e 	lsr.w	r1, r4, lr
 8023f4a:	42be      	cmp	r6, r7
 8023f4c:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 8023f50:	bf8c      	ite	hi
 8023f52:	f855 1c08 	ldrhi.w	r1, [r5, #-8]
 8023f56:	2100      	movls	r1, #0
 8023f58:	3015      	adds	r0, #21
 8023f5a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8023f5e:	fa21 f10e 	lsr.w	r1, r1, lr
 8023f62:	4084      	lsls	r4, r0
 8023f64:	e01b      	b.n	8023f9e <__b2d+0x86>
 8023f66:	42be      	cmp	r6, r7
 8023f68:	bf86      	itte	hi
 8023f6a:	f1a5 0608 	subhi.w	r6, r5, #8
 8023f6e:	f855 1c08 	ldrhi.w	r1, [r5, #-8]
 8023f72:	2100      	movls	r1, #0
 8023f74:	f1b0 050b 	subs.w	r5, r0, #11
 8023f78:	d014      	beq.n	8023fa4 <__b2d+0x8c>
 8023f7a:	40ac      	lsls	r4, r5
 8023f7c:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
 8023f80:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8023f84:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8023f88:	fa21 fe00 	lsr.w	lr, r1, r0
 8023f8c:	42be      	cmp	r6, r7
 8023f8e:	ea44 030e 	orr.w	r3, r4, lr
 8023f92:	bf8c      	ite	hi
 8023f94:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8023f98:	2400      	movls	r4, #0
 8023f9a:	40c4      	lsrs	r4, r0
 8023f9c:	40a9      	lsls	r1, r5
 8023f9e:	ea44 0201 	orr.w	r2, r4, r1
 8023fa2:	e004      	b.n	8023fae <__b2d+0x96>
 8023fa4:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8023fa8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8023fac:	460a      	mov	r2, r1
 8023fae:	4610      	mov	r0, r2
 8023fb0:	4619      	mov	r1, r3
 8023fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08023fb6 <__d2b>:
 8023fb6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8023fba:	2101      	movs	r1, #1
 8023fbc:	461d      	mov	r5, r3
 8023fbe:	9f08      	ldr	r7, [sp, #32]
 8023fc0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8023fc2:	4614      	mov	r4, r2
 8023fc4:	f7ff fcb7 	bl	8023936 <_Balloc>
 8023fc8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8023fcc:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8023fd0:	4680      	mov	r8, r0
 8023fd2:	b10d      	cbz	r5, 8023fd8 <__d2b+0x22>
 8023fd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8023fd8:	9301      	str	r3, [sp, #4]
 8023fda:	b1ec      	cbz	r4, 8024018 <__d2b+0x62>
 8023fdc:	a802      	add	r0, sp, #8
 8023fde:	f840 4d08 	str.w	r4, [r0, #-8]!
 8023fe2:	f7ff fd92 	bl	8023b0a <__lo0bits>
 8023fe6:	9b00      	ldr	r3, [sp, #0]
 8023fe8:	b150      	cbz	r0, 8024000 <__d2b+0x4a>
 8023fea:	9a01      	ldr	r2, [sp, #4]
 8023fec:	f1c0 0120 	rsb	r1, r0, #32
 8023ff0:	fa02 f101 	lsl.w	r1, r2, r1
 8023ff4:	430b      	orrs	r3, r1
 8023ff6:	40c2      	lsrs	r2, r0
 8023ff8:	f8c8 3014 	str.w	r3, [r8, #20]
 8023ffc:	9201      	str	r2, [sp, #4]
 8023ffe:	e001      	b.n	8024004 <__d2b+0x4e>
 8024000:	f8c8 3014 	str.w	r3, [r8, #20]
 8024004:	9b01      	ldr	r3, [sp, #4]
 8024006:	f8c8 3018 	str.w	r3, [r8, #24]
 802400a:	2b00      	cmp	r3, #0
 802400c:	bf14      	ite	ne
 802400e:	2402      	movne	r4, #2
 8024010:	2401      	moveq	r4, #1
 8024012:	f8c8 4010 	str.w	r4, [r8, #16]
 8024016:	e009      	b.n	802402c <__d2b+0x76>
 8024018:	a801      	add	r0, sp, #4
 802401a:	f7ff fd76 	bl	8023b0a <__lo0bits>
 802401e:	2401      	movs	r4, #1
 8024020:	9b01      	ldr	r3, [sp, #4]
 8024022:	f8c8 3014 	str.w	r3, [r8, #20]
 8024026:	f8c8 4010 	str.w	r4, [r8, #16]
 802402a:	3020      	adds	r0, #32
 802402c:	b135      	cbz	r5, 802403c <__d2b+0x86>
 802402e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8024032:	4405      	add	r5, r0
 8024034:	603d      	str	r5, [r7, #0]
 8024036:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 802403a:	e009      	b.n	8024050 <__d2b+0x9a>
 802403c:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8024040:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8024044:	6038      	str	r0, [r7, #0]
 8024046:	6918      	ldr	r0, [r3, #16]
 8024048:	f7ff fd3f 	bl	8023aca <__hi0bits>
 802404c:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 8024050:	6030      	str	r0, [r6, #0]
 8024052:	4640      	mov	r0, r8
 8024054:	b002      	add	sp, #8
 8024056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802405a <__ratio>:
 802405a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802405e:	4688      	mov	r8, r1
 8024060:	4669      	mov	r1, sp
 8024062:	4681      	mov	r9, r0
 8024064:	f7ff ff58 	bl	8023f18 <__b2d>
 8024068:	460f      	mov	r7, r1
 802406a:	4606      	mov	r6, r0
 802406c:	a901      	add	r1, sp, #4
 802406e:	4640      	mov	r0, r8
 8024070:	f7ff ff52 	bl	8023f18 <__b2d>
 8024074:	9a01      	ldr	r2, [sp, #4]
 8024076:	9b00      	ldr	r3, [sp, #0]
 8024078:	460d      	mov	r5, r1
 802407a:	1a9b      	subs	r3, r3, r2
 802407c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8024080:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8024084:	1a52      	subs	r2, r2, r1
 8024086:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 802408a:	2b00      	cmp	r3, #0
 802408c:	bfc8      	it	gt
 802408e:	eb07 5703 	addgt.w	r7, r7, r3, lsl #20
 8024092:	4604      	mov	r4, r0
 8024094:	bfd8      	it	le
 8024096:	eba5 5503 	suble.w	r5, r5, r3, lsl #20
 802409a:	4630      	mov	r0, r6
 802409c:	4639      	mov	r1, r7
 802409e:	4622      	mov	r2, r4
 80240a0:	462b      	mov	r3, r5
 80240a2:	f000 fcd1 	bl	8024a48 <__aeabi_ddiv>
 80240a6:	b003      	add	sp, #12
 80240a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080240ac <__copybits>:
 80240ac:	3901      	subs	r1, #1
 80240ae:	b510      	push	{r4, lr}
 80240b0:	1149      	asrs	r1, r1, #5
 80240b2:	6914      	ldr	r4, [r2, #16]
 80240b4:	3101      	adds	r1, #1
 80240b6:	f102 0314 	add.w	r3, r2, #20
 80240ba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80240be:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80240c2:	42a3      	cmp	r3, r4
 80240c4:	4602      	mov	r2, r0
 80240c6:	d204      	bcs.n	80240d2 <__copybits+0x26>
 80240c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80240cc:	f840 2b04 	str.w	r2, [r0], #4
 80240d0:	e7f7      	b.n	80240c2 <__copybits+0x16>
 80240d2:	428a      	cmp	r2, r1
 80240d4:	d203      	bcs.n	80240de <__copybits+0x32>
 80240d6:	2300      	movs	r3, #0
 80240d8:	f842 3b04 	str.w	r3, [r2], #4
 80240dc:	e7f9      	b.n	80240d2 <__copybits+0x26>
 80240de:	bd10      	pop	{r4, pc}

080240e0 <__any_on>:
 80240e0:	f100 0214 	add.w	r2, r0, #20
 80240e4:	6900      	ldr	r0, [r0, #16]
 80240e6:	114b      	asrs	r3, r1, #5
 80240e8:	4283      	cmp	r3, r0
 80240ea:	b510      	push	{r4, lr}
 80240ec:	dc0c      	bgt.n	8024108 <__any_on+0x28>
 80240ee:	da0c      	bge.n	802410a <__any_on+0x2a>
 80240f0:	f011 011f 	ands.w	r1, r1, #31
 80240f4:	d009      	beq.n	802410a <__any_on+0x2a>
 80240f6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80240fa:	fa24 f001 	lsr.w	r0, r4, r1
 80240fe:	fa00 f101 	lsl.w	r1, r0, r1
 8024102:	42a1      	cmp	r1, r4
 8024104:	d10c      	bne.n	8024120 <__any_on+0x40>
 8024106:	e000      	b.n	802410a <__any_on+0x2a>
 8024108:	4603      	mov	r3, r0
 802410a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802410e:	4293      	cmp	r3, r2
 8024110:	d904      	bls.n	802411c <__any_on+0x3c>
 8024112:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8024116:	2900      	cmp	r1, #0
 8024118:	d0f9      	beq.n	802410e <__any_on+0x2e>
 802411a:	e001      	b.n	8024120 <__any_on+0x40>
 802411c:	2000      	movs	r0, #0
 802411e:	bd10      	pop	{r4, pc}
 8024120:	2001      	movs	r0, #1
 8024122:	bd10      	pop	{r4, pc}

08024124 <_realloc_r>:
 8024124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024126:	4607      	mov	r7, r0
 8024128:	4615      	mov	r5, r2
 802412a:	460e      	mov	r6, r1
 802412c:	b921      	cbnz	r1, 8024138 <_realloc_r+0x14>
 802412e:	4611      	mov	r1, r2
 8024130:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8024134:	f7fc b950 	b.w	80203d8 <_malloc_r>
 8024138:	b91a      	cbnz	r2, 8024142 <_realloc_r+0x1e>
 802413a:	f7fc f909 	bl	8020350 <_free_r>
 802413e:	4628      	mov	r0, r5
 8024140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024142:	f000 f995 	bl	8024470 <_malloc_usable_size_r>
 8024146:	42a8      	cmp	r0, r5
 8024148:	d20e      	bcs.n	8024168 <_realloc_r+0x44>
 802414a:	4638      	mov	r0, r7
 802414c:	4629      	mov	r1, r5
 802414e:	f7fc f943 	bl	80203d8 <_malloc_r>
 8024152:	4604      	mov	r4, r0
 8024154:	b150      	cbz	r0, 802416c <_realloc_r+0x48>
 8024156:	4631      	mov	r1, r6
 8024158:	462a      	mov	r2, r5
 802415a:	f7fc f8d8 	bl	802030e <memcpy>
 802415e:	4638      	mov	r0, r7
 8024160:	4631      	mov	r1, r6
 8024162:	f7fc f8f5 	bl	8020350 <_free_r>
 8024166:	e001      	b.n	802416c <_realloc_r+0x48>
 8024168:	4630      	mov	r0, r6
 802416a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802416c:	4620      	mov	r0, r4
 802416e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08024170 <__ssputs_r>:
 8024170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024174:	688e      	ldr	r6, [r1, #8]
 8024176:	42b3      	cmp	r3, r6
 8024178:	4682      	mov	sl, r0
 802417a:	460c      	mov	r4, r1
 802417c:	4690      	mov	r8, r2
 802417e:	4699      	mov	r9, r3
 8024180:	d340      	bcc.n	8024204 <__ssputs_r+0x94>
 8024182:	898a      	ldrh	r2, [r1, #12]
 8024184:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8024188:	d03a      	beq.n	8024200 <__ssputs_r+0x90>
 802418a:	6825      	ldr	r5, [r4, #0]
 802418c:	6909      	ldr	r1, [r1, #16]
 802418e:	1a6f      	subs	r7, r5, r1
 8024190:	6965      	ldr	r5, [r4, #20]
 8024192:	2302      	movs	r3, #2
 8024194:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8024198:	fb95 f5f3 	sdiv	r5, r5, r3
 802419c:	1c7b      	adds	r3, r7, #1
 802419e:	444b      	add	r3, r9
 80241a0:	429d      	cmp	r5, r3
 80241a2:	bf38      	it	cc
 80241a4:	461d      	movcc	r5, r3
 80241a6:	0553      	lsls	r3, r2, #21
 80241a8:	d50f      	bpl.n	80241ca <__ssputs_r+0x5a>
 80241aa:	4629      	mov	r1, r5
 80241ac:	f7fc f914 	bl	80203d8 <_malloc_r>
 80241b0:	4606      	mov	r6, r0
 80241b2:	b198      	cbz	r0, 80241dc <__ssputs_r+0x6c>
 80241b4:	6921      	ldr	r1, [r4, #16]
 80241b6:	463a      	mov	r2, r7
 80241b8:	f7fc f8a9 	bl	802030e <memcpy>
 80241bc:	89a3      	ldrh	r3, [r4, #12]
 80241be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80241c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80241c6:	81a3      	strh	r3, [r4, #12]
 80241c8:	e013      	b.n	80241f2 <__ssputs_r+0x82>
 80241ca:	462a      	mov	r2, r5
 80241cc:	f7ff ffaa 	bl	8024124 <_realloc_r>
 80241d0:	4606      	mov	r6, r0
 80241d2:	b970      	cbnz	r0, 80241f2 <__ssputs_r+0x82>
 80241d4:	4650      	mov	r0, sl
 80241d6:	6921      	ldr	r1, [r4, #16]
 80241d8:	f7fc f8ba 	bl	8020350 <_free_r>
 80241dc:	230c      	movs	r3, #12
 80241de:	f8ca 3000 	str.w	r3, [sl]
 80241e2:	89a3      	ldrh	r3, [r4, #12]
 80241e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80241e8:	81a3      	strh	r3, [r4, #12]
 80241ea:	f04f 30ff 	mov.w	r0, #4294967295
 80241ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80241f2:	6126      	str	r6, [r4, #16]
 80241f4:	6165      	str	r5, [r4, #20]
 80241f6:	443e      	add	r6, r7
 80241f8:	1bed      	subs	r5, r5, r7
 80241fa:	6026      	str	r6, [r4, #0]
 80241fc:	60a5      	str	r5, [r4, #8]
 80241fe:	464e      	mov	r6, r9
 8024200:	45b1      	cmp	r9, r6
 8024202:	d200      	bcs.n	8024206 <__ssputs_r+0x96>
 8024204:	464e      	mov	r6, r9
 8024206:	4632      	mov	r2, r6
 8024208:	6820      	ldr	r0, [r4, #0]
 802420a:	4641      	mov	r1, r8
 802420c:	f7ff fb78 	bl	8023900 <memmove>
 8024210:	68a3      	ldr	r3, [r4, #8]
 8024212:	1b9b      	subs	r3, r3, r6
 8024214:	60a3      	str	r3, [r4, #8]
 8024216:	6823      	ldr	r3, [r4, #0]
 8024218:	441e      	add	r6, r3
 802421a:	6026      	str	r6, [r4, #0]
 802421c:	2000      	movs	r0, #0
 802421e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08024224 <_svfiprintf_r>:
 8024224:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8024228:	b09d      	sub	sp, #116	; 0x74
 802422a:	4606      	mov	r6, r0
 802422c:	9303      	str	r3, [sp, #12]
 802422e:	898b      	ldrh	r3, [r1, #12]
 8024230:	061c      	lsls	r4, r3, #24
 8024232:	460d      	mov	r5, r1
 8024234:	4690      	mov	r8, r2
 8024236:	d50c      	bpl.n	8024252 <_svfiprintf_r+0x2e>
 8024238:	690b      	ldr	r3, [r1, #16]
 802423a:	b953      	cbnz	r3, 8024252 <_svfiprintf_r+0x2e>
 802423c:	2140      	movs	r1, #64	; 0x40
 802423e:	f7fc f8cb 	bl	80203d8 <_malloc_r>
 8024242:	6028      	str	r0, [r5, #0]
 8024244:	6128      	str	r0, [r5, #16]
 8024246:	b910      	cbnz	r0, 802424e <_svfiprintf_r+0x2a>
 8024248:	230c      	movs	r3, #12
 802424a:	6033      	str	r3, [r6, #0]
 802424c:	e0cc      	b.n	80243e8 <_svfiprintf_r+0x1c4>
 802424e:	2340      	movs	r3, #64	; 0x40
 8024250:	616b      	str	r3, [r5, #20]
 8024252:	2300      	movs	r3, #0
 8024254:	9309      	str	r3, [sp, #36]	; 0x24
 8024256:	2320      	movs	r3, #32
 8024258:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802425c:	2330      	movs	r3, #48	; 0x30
 802425e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8024262:	4643      	mov	r3, r8
 8024264:	461c      	mov	r4, r3
 8024266:	f813 2b01 	ldrb.w	r2, [r3], #1
 802426a:	b91a      	cbnz	r2, 8024274 <_svfiprintf_r+0x50>
 802426c:	ebb4 0908 	subs.w	r9, r4, r8
 8024270:	d00f      	beq.n	8024292 <_svfiprintf_r+0x6e>
 8024272:	e002      	b.n	802427a <_svfiprintf_r+0x56>
 8024274:	2a25      	cmp	r2, #37	; 0x25
 8024276:	d1f5      	bne.n	8024264 <_svfiprintf_r+0x40>
 8024278:	e7f8      	b.n	802426c <_svfiprintf_r+0x48>
 802427a:	4630      	mov	r0, r6
 802427c:	4629      	mov	r1, r5
 802427e:	4642      	mov	r2, r8
 8024280:	464b      	mov	r3, r9
 8024282:	f7ff ff75 	bl	8024170 <__ssputs_r>
 8024286:	3001      	adds	r0, #1
 8024288:	f000 80a9 	beq.w	80243de <_svfiprintf_r+0x1ba>
 802428c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802428e:	444b      	add	r3, r9
 8024290:	9309      	str	r3, [sp, #36]	; 0x24
 8024292:	7823      	ldrb	r3, [r4, #0]
 8024294:	2b00      	cmp	r3, #0
 8024296:	f000 80a2 	beq.w	80243de <_svfiprintf_r+0x1ba>
 802429a:	2300      	movs	r3, #0
 802429c:	f04f 32ff 	mov.w	r2, #4294967295
 80242a0:	9304      	str	r3, [sp, #16]
 80242a2:	9307      	str	r3, [sp, #28]
 80242a4:	9205      	str	r2, [sp, #20]
 80242a6:	9306      	str	r3, [sp, #24]
 80242a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80242ac:	931a      	str	r3, [sp, #104]	; 0x68
 80242ae:	f104 0801 	add.w	r8, r4, #1
 80242b2:	4644      	mov	r4, r8
 80242b4:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8024400 <_svfiprintf_r+0x1dc>
 80242b8:	7821      	ldrb	r1, [r4, #0]
 80242ba:	4648      	mov	r0, r9
 80242bc:	2205      	movs	r2, #5
 80242be:	f7fc f817 	bl	80202f0 <memchr>
 80242c2:	f108 0801 	add.w	r8, r8, #1
 80242c6:	9b04      	ldr	r3, [sp, #16]
 80242c8:	b130      	cbz	r0, 80242d8 <_svfiprintf_r+0xb4>
 80242ca:	ebc9 0000 	rsb	r0, r9, r0
 80242ce:	2201      	movs	r2, #1
 80242d0:	4082      	lsls	r2, r0
 80242d2:	4313      	orrs	r3, r2
 80242d4:	9304      	str	r3, [sp, #16]
 80242d6:	e7ec      	b.n	80242b2 <_svfiprintf_r+0x8e>
 80242d8:	06d8      	lsls	r0, r3, #27
 80242da:	bf44      	itt	mi
 80242dc:	2220      	movmi	r2, #32
 80242de:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80242e2:	0719      	lsls	r1, r3, #28
 80242e4:	bf44      	itt	mi
 80242e6:	222b      	movmi	r2, #43	; 0x2b
 80242e8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80242ec:	7822      	ldrb	r2, [r4, #0]
 80242ee:	2a2a      	cmp	r2, #42	; 0x2a
 80242f0:	d002      	beq.n	80242f8 <_svfiprintf_r+0xd4>
 80242f2:	9907      	ldr	r1, [sp, #28]
 80242f4:	4623      	mov	r3, r4
 80242f6:	e00e      	b.n	8024316 <_svfiprintf_r+0xf2>
 80242f8:	9a03      	ldr	r2, [sp, #12]
 80242fa:	1d11      	adds	r1, r2, #4
 80242fc:	6812      	ldr	r2, [r2, #0]
 80242fe:	9103      	str	r1, [sp, #12]
 8024300:	2a00      	cmp	r2, #0
 8024302:	bfbb      	ittet	lt
 8024304:	4252      	neglt	r2, r2
 8024306:	f043 0302 	orrlt.w	r3, r3, #2
 802430a:	9207      	strge	r2, [sp, #28]
 802430c:	9207      	strlt	r2, [sp, #28]
 802430e:	bfb8      	it	lt
 8024310:	9304      	strlt	r3, [sp, #16]
 8024312:	3401      	adds	r4, #1
 8024314:	e00a      	b.n	802432c <_svfiprintf_r+0x108>
 8024316:	461c      	mov	r4, r3
 8024318:	3301      	adds	r3, #1
 802431a:	7822      	ldrb	r2, [r4, #0]
 802431c:	3a30      	subs	r2, #48	; 0x30
 802431e:	2a09      	cmp	r2, #9
 8024320:	d803      	bhi.n	802432a <_svfiprintf_r+0x106>
 8024322:	200a      	movs	r0, #10
 8024324:	fb00 2101 	mla	r1, r0, r1, r2
 8024328:	e7f5      	b.n	8024316 <_svfiprintf_r+0xf2>
 802432a:	9107      	str	r1, [sp, #28]
 802432c:	7823      	ldrb	r3, [r4, #0]
 802432e:	2b2e      	cmp	r3, #46	; 0x2e
 8024330:	d11a      	bne.n	8024368 <_svfiprintf_r+0x144>
 8024332:	7863      	ldrb	r3, [r4, #1]
 8024334:	2b2a      	cmp	r3, #42	; 0x2a
 8024336:	d10a      	bne.n	802434e <_svfiprintf_r+0x12a>
 8024338:	9b03      	ldr	r3, [sp, #12]
 802433a:	1d1a      	adds	r2, r3, #4
 802433c:	681b      	ldr	r3, [r3, #0]
 802433e:	9203      	str	r2, [sp, #12]
 8024340:	2b00      	cmp	r3, #0
 8024342:	bfb8      	it	lt
 8024344:	f04f 33ff 	movlt.w	r3, #4294967295
 8024348:	3402      	adds	r4, #2
 802434a:	9305      	str	r3, [sp, #20]
 802434c:	e00c      	b.n	8024368 <_svfiprintf_r+0x144>
 802434e:	1c61      	adds	r1, r4, #1
 8024350:	2200      	movs	r2, #0
 8024352:	460c      	mov	r4, r1
 8024354:	3101      	adds	r1, #1
 8024356:	7823      	ldrb	r3, [r4, #0]
 8024358:	3b30      	subs	r3, #48	; 0x30
 802435a:	2b09      	cmp	r3, #9
 802435c:	d803      	bhi.n	8024366 <_svfiprintf_r+0x142>
 802435e:	200a      	movs	r0, #10
 8024360:	fb00 3202 	mla	r2, r0, r2, r3
 8024364:	e7f5      	b.n	8024352 <_svfiprintf_r+0x12e>
 8024366:	9205      	str	r2, [sp, #20]
 8024368:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8024404 <_svfiprintf_r+0x1e0>
 802436c:	7821      	ldrb	r1, [r4, #0]
 802436e:	4640      	mov	r0, r8
 8024370:	2203      	movs	r2, #3
 8024372:	f7fb ffbd 	bl	80202f0 <memchr>
 8024376:	b138      	cbz	r0, 8024388 <_svfiprintf_r+0x164>
 8024378:	9a04      	ldr	r2, [sp, #16]
 802437a:	ebc8 0000 	rsb	r0, r8, r0
 802437e:	2340      	movs	r3, #64	; 0x40
 8024380:	4083      	lsls	r3, r0
 8024382:	4313      	orrs	r3, r2
 8024384:	9304      	str	r3, [sp, #16]
 8024386:	3401      	adds	r4, #1
 8024388:	7821      	ldrb	r1, [r4, #0]
 802438a:	481a      	ldr	r0, [pc, #104]	; (80243f4 <_svfiprintf_r+0x1d0>)
 802438c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8024390:	2206      	movs	r2, #6
 8024392:	f104 0801 	add.w	r8, r4, #1
 8024396:	f7fb ffab 	bl	80202f0 <memchr>
 802439a:	b188      	cbz	r0, 80243c0 <_svfiprintf_r+0x19c>
 802439c:	4b16      	ldr	r3, [pc, #88]	; (80243f8 <_svfiprintf_r+0x1d4>)
 802439e:	b933      	cbnz	r3, 80243ae <_svfiprintf_r+0x18a>
 80243a0:	9b03      	ldr	r3, [sp, #12]
 80243a2:	3307      	adds	r3, #7
 80243a4:	f023 0307 	bic.w	r3, r3, #7
 80243a8:	3308      	adds	r3, #8
 80243aa:	9303      	str	r3, [sp, #12]
 80243ac:	e013      	b.n	80243d6 <_svfiprintf_r+0x1b2>
 80243ae:	ab03      	add	r3, sp, #12
 80243b0:	9300      	str	r3, [sp, #0]
 80243b2:	4630      	mov	r0, r6
 80243b4:	a904      	add	r1, sp, #16
 80243b6:	462a      	mov	r2, r5
 80243b8:	4b10      	ldr	r3, [pc, #64]	; (80243fc <_svfiprintf_r+0x1d8>)
 80243ba:	f7fc fa31 	bl	8020820 <_printf_float>
 80243be:	e007      	b.n	80243d0 <_svfiprintf_r+0x1ac>
 80243c0:	ab03      	add	r3, sp, #12
 80243c2:	9300      	str	r3, [sp, #0]
 80243c4:	4630      	mov	r0, r6
 80243c6:	a904      	add	r1, sp, #16
 80243c8:	462a      	mov	r2, r5
 80243ca:	4b0c      	ldr	r3, [pc, #48]	; (80243fc <_svfiprintf_r+0x1d8>)
 80243cc:	f7fc fce4 	bl	8020d98 <_printf_i>
 80243d0:	1c42      	adds	r2, r0, #1
 80243d2:	4607      	mov	r7, r0
 80243d4:	d003      	beq.n	80243de <_svfiprintf_r+0x1ba>
 80243d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80243d8:	443b      	add	r3, r7
 80243da:	9309      	str	r3, [sp, #36]	; 0x24
 80243dc:	e741      	b.n	8024262 <_svfiprintf_r+0x3e>
 80243de:	89ab      	ldrh	r3, [r5, #12]
 80243e0:	065b      	lsls	r3, r3, #25
 80243e2:	d401      	bmi.n	80243e8 <_svfiprintf_r+0x1c4>
 80243e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80243e6:	e001      	b.n	80243ec <_svfiprintf_r+0x1c8>
 80243e8:	f04f 30ff 	mov.w	r0, #4294967295
 80243ec:	b01d      	add	sp, #116	; 0x74
 80243ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80243f2:	bf00      	nop
 80243f4:	08027216 	.word	0x08027216
 80243f8:	08020821 	.word	0x08020821
 80243fc:	08024171 	.word	0x08024171
 8024400:	0802720c 	.word	0x0802720c
 8024404:	08027212 	.word	0x08027212

08024408 <_read_r>:
 8024408:	b538      	push	{r3, r4, r5, lr}
 802440a:	4c07      	ldr	r4, [pc, #28]	; (8024428 <_read_r+0x20>)
 802440c:	4605      	mov	r5, r0
 802440e:	2000      	movs	r0, #0
 8024410:	6020      	str	r0, [r4, #0]
 8024412:	4608      	mov	r0, r1
 8024414:	4611      	mov	r1, r2
 8024416:	461a      	mov	r2, r3
 8024418:	f7f9 fa44 	bl	801d8a4 <_read>
 802441c:	1c43      	adds	r3, r0, #1
 802441e:	d102      	bne.n	8024426 <_read_r+0x1e>
 8024420:	6823      	ldr	r3, [r4, #0]
 8024422:	b103      	cbz	r3, 8024426 <_read_r+0x1e>
 8024424:	602b      	str	r3, [r5, #0]
 8024426:	bd38      	pop	{r3, r4, r5, pc}
 8024428:	20001a8c 	.word	0x20001a8c

0802442c <_fstat_r>:
 802442c:	b538      	push	{r3, r4, r5, lr}
 802442e:	4c07      	ldr	r4, [pc, #28]	; (802444c <_fstat_r+0x20>)
 8024430:	2300      	movs	r3, #0
 8024432:	4605      	mov	r5, r0
 8024434:	4608      	mov	r0, r1
 8024436:	4611      	mov	r1, r2
 8024438:	6023      	str	r3, [r4, #0]
 802443a:	f7f9 fab5 	bl	801d9a8 <_fstat>
 802443e:	1c43      	adds	r3, r0, #1
 8024440:	d102      	bne.n	8024448 <_fstat_r+0x1c>
 8024442:	6823      	ldr	r3, [r4, #0]
 8024444:	b103      	cbz	r3, 8024448 <_fstat_r+0x1c>
 8024446:	602b      	str	r3, [r5, #0]
 8024448:	bd38      	pop	{r3, r4, r5, pc}
 802444a:	bf00      	nop
 802444c:	20001a8c 	.word	0x20001a8c

08024450 <_isatty_r>:
 8024450:	b538      	push	{r3, r4, r5, lr}
 8024452:	4c06      	ldr	r4, [pc, #24]	; (802446c <_isatty_r+0x1c>)
 8024454:	2300      	movs	r3, #0
 8024456:	4605      	mov	r5, r0
 8024458:	4608      	mov	r0, r1
 802445a:	6023      	str	r3, [r4, #0]
 802445c:	f7f9 fa5c 	bl	801d918 <_isatty>
 8024460:	1c43      	adds	r3, r0, #1
 8024462:	d102      	bne.n	802446a <_isatty_r+0x1a>
 8024464:	6823      	ldr	r3, [r4, #0]
 8024466:	b103      	cbz	r3, 802446a <_isatty_r+0x1a>
 8024468:	602b      	str	r3, [r5, #0]
 802446a:	bd38      	pop	{r3, r4, r5, pc}
 802446c:	20001a8c 	.word	0x20001a8c

08024470 <_malloc_usable_size_r>:
 8024470:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8024474:	2800      	cmp	r0, #0
 8024476:	bfbe      	ittt	lt
 8024478:	1809      	addlt	r1, r1, r0
 802447a:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 802447e:	18c0      	addlt	r0, r0, r3
 8024480:	3804      	subs	r0, #4
 8024482:	4770      	bx	lr

08024484 <__aeabi_drsub>:
 8024484:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8024488:	e002      	b.n	8024490 <__adddf3>
 802448a:	bf00      	nop

0802448c <__aeabi_dsub>:
 802448c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08024490 <__adddf3>:
 8024490:	b530      	push	{r4, r5, lr}
 8024492:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8024496:	ea4f 0543 	mov.w	r5, r3, lsl #1
 802449a:	ea94 0f05 	teq	r4, r5
 802449e:	bf08      	it	eq
 80244a0:	ea90 0f02 	teqeq	r0, r2
 80244a4:	bf1f      	itttt	ne
 80244a6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80244aa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80244ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80244b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80244b6:	f000 80e2 	beq.w	802467e <__adddf3+0x1ee>
 80244ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80244be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80244c2:	bfb8      	it	lt
 80244c4:	426d      	neglt	r5, r5
 80244c6:	dd0c      	ble.n	80244e2 <__adddf3+0x52>
 80244c8:	442c      	add	r4, r5
 80244ca:	ea80 0202 	eor.w	r2, r0, r2
 80244ce:	ea81 0303 	eor.w	r3, r1, r3
 80244d2:	ea82 0000 	eor.w	r0, r2, r0
 80244d6:	ea83 0101 	eor.w	r1, r3, r1
 80244da:	ea80 0202 	eor.w	r2, r0, r2
 80244de:	ea81 0303 	eor.w	r3, r1, r3
 80244e2:	2d36      	cmp	r5, #54	; 0x36
 80244e4:	bf88      	it	hi
 80244e6:	bd30      	pophi	{r4, r5, pc}
 80244e8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80244ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80244f0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80244f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80244f8:	d002      	beq.n	8024500 <__adddf3+0x70>
 80244fa:	4240      	negs	r0, r0
 80244fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8024500:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8024504:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8024508:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 802450c:	d002      	beq.n	8024514 <__adddf3+0x84>
 802450e:	4252      	negs	r2, r2
 8024510:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8024514:	ea94 0f05 	teq	r4, r5
 8024518:	f000 80a7 	beq.w	802466a <__adddf3+0x1da>
 802451c:	f1a4 0401 	sub.w	r4, r4, #1
 8024520:	f1d5 0e20 	rsbs	lr, r5, #32
 8024524:	db0d      	blt.n	8024542 <__adddf3+0xb2>
 8024526:	fa02 fc0e 	lsl.w	ip, r2, lr
 802452a:	fa22 f205 	lsr.w	r2, r2, r5
 802452e:	1880      	adds	r0, r0, r2
 8024530:	f141 0100 	adc.w	r1, r1, #0
 8024534:	fa03 f20e 	lsl.w	r2, r3, lr
 8024538:	1880      	adds	r0, r0, r2
 802453a:	fa43 f305 	asr.w	r3, r3, r5
 802453e:	4159      	adcs	r1, r3
 8024540:	e00e      	b.n	8024560 <__adddf3+0xd0>
 8024542:	f1a5 0520 	sub.w	r5, r5, #32
 8024546:	f10e 0e20 	add.w	lr, lr, #32
 802454a:	2a01      	cmp	r2, #1
 802454c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8024550:	bf28      	it	cs
 8024552:	f04c 0c02 	orrcs.w	ip, ip, #2
 8024556:	fa43 f305 	asr.w	r3, r3, r5
 802455a:	18c0      	adds	r0, r0, r3
 802455c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8024560:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8024564:	d507      	bpl.n	8024576 <__adddf3+0xe6>
 8024566:	f04f 0e00 	mov.w	lr, #0
 802456a:	f1dc 0c00 	rsbs	ip, ip, #0
 802456e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8024572:	eb6e 0101 	sbc.w	r1, lr, r1
 8024576:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 802457a:	d31b      	bcc.n	80245b4 <__adddf3+0x124>
 802457c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8024580:	d30c      	bcc.n	802459c <__adddf3+0x10c>
 8024582:	0849      	lsrs	r1, r1, #1
 8024584:	ea5f 0030 	movs.w	r0, r0, rrx
 8024588:	ea4f 0c3c 	mov.w	ip, ip, rrx
 802458c:	f104 0401 	add.w	r4, r4, #1
 8024590:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8024594:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8024598:	f080 809a 	bcs.w	80246d0 <__adddf3+0x240>
 802459c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80245a0:	bf08      	it	eq
 80245a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80245a6:	f150 0000 	adcs.w	r0, r0, #0
 80245aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80245ae:	ea41 0105 	orr.w	r1, r1, r5
 80245b2:	bd30      	pop	{r4, r5, pc}
 80245b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80245b8:	4140      	adcs	r0, r0
 80245ba:	eb41 0101 	adc.w	r1, r1, r1
 80245be:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80245c2:	f1a4 0401 	sub.w	r4, r4, #1
 80245c6:	d1e9      	bne.n	802459c <__adddf3+0x10c>
 80245c8:	f091 0f00 	teq	r1, #0
 80245cc:	bf04      	itt	eq
 80245ce:	4601      	moveq	r1, r0
 80245d0:	2000      	moveq	r0, #0
 80245d2:	fab1 f381 	clz	r3, r1
 80245d6:	bf08      	it	eq
 80245d8:	3320      	addeq	r3, #32
 80245da:	f1a3 030b 	sub.w	r3, r3, #11
 80245de:	f1b3 0220 	subs.w	r2, r3, #32
 80245e2:	da0c      	bge.n	80245fe <__adddf3+0x16e>
 80245e4:	320c      	adds	r2, #12
 80245e6:	dd08      	ble.n	80245fa <__adddf3+0x16a>
 80245e8:	f102 0c14 	add.w	ip, r2, #20
 80245ec:	f1c2 020c 	rsb	r2, r2, #12
 80245f0:	fa01 f00c 	lsl.w	r0, r1, ip
 80245f4:	fa21 f102 	lsr.w	r1, r1, r2
 80245f8:	e00c      	b.n	8024614 <__adddf3+0x184>
 80245fa:	f102 0214 	add.w	r2, r2, #20
 80245fe:	bfd8      	it	le
 8024600:	f1c2 0c20 	rsble	ip, r2, #32
 8024604:	fa01 f102 	lsl.w	r1, r1, r2
 8024608:	fa20 fc0c 	lsr.w	ip, r0, ip
 802460c:	bfdc      	itt	le
 802460e:	ea41 010c 	orrle.w	r1, r1, ip
 8024612:	4090      	lslle	r0, r2
 8024614:	1ae4      	subs	r4, r4, r3
 8024616:	bfa2      	ittt	ge
 8024618:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 802461c:	4329      	orrge	r1, r5
 802461e:	bd30      	popge	{r4, r5, pc}
 8024620:	ea6f 0404 	mvn.w	r4, r4
 8024624:	3c1f      	subs	r4, #31
 8024626:	da1c      	bge.n	8024662 <__adddf3+0x1d2>
 8024628:	340c      	adds	r4, #12
 802462a:	dc0e      	bgt.n	802464a <__adddf3+0x1ba>
 802462c:	f104 0414 	add.w	r4, r4, #20
 8024630:	f1c4 0220 	rsb	r2, r4, #32
 8024634:	fa20 f004 	lsr.w	r0, r0, r4
 8024638:	fa01 f302 	lsl.w	r3, r1, r2
 802463c:	ea40 0003 	orr.w	r0, r0, r3
 8024640:	fa21 f304 	lsr.w	r3, r1, r4
 8024644:	ea45 0103 	orr.w	r1, r5, r3
 8024648:	bd30      	pop	{r4, r5, pc}
 802464a:	f1c4 040c 	rsb	r4, r4, #12
 802464e:	f1c4 0220 	rsb	r2, r4, #32
 8024652:	fa20 f002 	lsr.w	r0, r0, r2
 8024656:	fa01 f304 	lsl.w	r3, r1, r4
 802465a:	ea40 0003 	orr.w	r0, r0, r3
 802465e:	4629      	mov	r1, r5
 8024660:	bd30      	pop	{r4, r5, pc}
 8024662:	fa21 f004 	lsr.w	r0, r1, r4
 8024666:	4629      	mov	r1, r5
 8024668:	bd30      	pop	{r4, r5, pc}
 802466a:	f094 0f00 	teq	r4, #0
 802466e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8024672:	bf06      	itte	eq
 8024674:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8024678:	3401      	addeq	r4, #1
 802467a:	3d01      	subne	r5, #1
 802467c:	e74e      	b.n	802451c <__adddf3+0x8c>
 802467e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8024682:	bf18      	it	ne
 8024684:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8024688:	d029      	beq.n	80246de <__adddf3+0x24e>
 802468a:	ea94 0f05 	teq	r4, r5
 802468e:	bf08      	it	eq
 8024690:	ea90 0f02 	teqeq	r0, r2
 8024694:	d005      	beq.n	80246a2 <__adddf3+0x212>
 8024696:	ea54 0c00 	orrs.w	ip, r4, r0
 802469a:	bf04      	itt	eq
 802469c:	4619      	moveq	r1, r3
 802469e:	4610      	moveq	r0, r2
 80246a0:	bd30      	pop	{r4, r5, pc}
 80246a2:	ea91 0f03 	teq	r1, r3
 80246a6:	bf1e      	ittt	ne
 80246a8:	2100      	movne	r1, #0
 80246aa:	2000      	movne	r0, #0
 80246ac:	bd30      	popne	{r4, r5, pc}
 80246ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80246b2:	d105      	bne.n	80246c0 <__adddf3+0x230>
 80246b4:	0040      	lsls	r0, r0, #1
 80246b6:	4149      	adcs	r1, r1
 80246b8:	bf28      	it	cs
 80246ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80246be:	bd30      	pop	{r4, r5, pc}
 80246c0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80246c4:	bf3c      	itt	cc
 80246c6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80246ca:	bd30      	popcc	{r4, r5, pc}
 80246cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80246d0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80246d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80246d8:	f04f 0000 	mov.w	r0, #0
 80246dc:	bd30      	pop	{r4, r5, pc}
 80246de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80246e2:	bf1a      	itte	ne
 80246e4:	4619      	movne	r1, r3
 80246e6:	4610      	movne	r0, r2
 80246e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80246ec:	bf1c      	itt	ne
 80246ee:	460b      	movne	r3, r1
 80246f0:	4602      	movne	r2, r0
 80246f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80246f6:	bf06      	itte	eq
 80246f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80246fc:	ea91 0f03 	teqeq	r1, r3
 8024700:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8024704:	bd30      	pop	{r4, r5, pc}
 8024706:	bf00      	nop

08024708 <__aeabi_ui2d>:
 8024708:	f090 0f00 	teq	r0, #0
 802470c:	bf04      	itt	eq
 802470e:	2100      	moveq	r1, #0
 8024710:	4770      	bxeq	lr
 8024712:	b530      	push	{r4, r5, lr}
 8024714:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8024718:	f104 0432 	add.w	r4, r4, #50	; 0x32
 802471c:	f04f 0500 	mov.w	r5, #0
 8024720:	f04f 0100 	mov.w	r1, #0
 8024724:	e750      	b.n	80245c8 <__adddf3+0x138>
 8024726:	bf00      	nop

08024728 <__aeabi_i2d>:
 8024728:	f090 0f00 	teq	r0, #0
 802472c:	bf04      	itt	eq
 802472e:	2100      	moveq	r1, #0
 8024730:	4770      	bxeq	lr
 8024732:	b530      	push	{r4, r5, lr}
 8024734:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8024738:	f104 0432 	add.w	r4, r4, #50	; 0x32
 802473c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8024740:	bf48      	it	mi
 8024742:	4240      	negmi	r0, r0
 8024744:	f04f 0100 	mov.w	r1, #0
 8024748:	e73e      	b.n	80245c8 <__adddf3+0x138>
 802474a:	bf00      	nop

0802474c <__aeabi_f2d>:
 802474c:	0042      	lsls	r2, r0, #1
 802474e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8024752:	ea4f 0131 	mov.w	r1, r1, rrx
 8024756:	ea4f 7002 	mov.w	r0, r2, lsl #28
 802475a:	bf1f      	itttt	ne
 802475c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8024760:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8024764:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8024768:	4770      	bxne	lr
 802476a:	f092 0f00 	teq	r2, #0
 802476e:	bf14      	ite	ne
 8024770:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8024774:	4770      	bxeq	lr
 8024776:	b530      	push	{r4, r5, lr}
 8024778:	f44f 7460 	mov.w	r4, #896	; 0x380
 802477c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8024780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8024784:	e720      	b.n	80245c8 <__adddf3+0x138>
 8024786:	bf00      	nop

08024788 <__aeabi_ul2d>:
 8024788:	ea50 0201 	orrs.w	r2, r0, r1
 802478c:	bf08      	it	eq
 802478e:	4770      	bxeq	lr
 8024790:	b530      	push	{r4, r5, lr}
 8024792:	f04f 0500 	mov.w	r5, #0
 8024796:	e00a      	b.n	80247ae <__aeabi_l2d+0x16>

08024798 <__aeabi_l2d>:
 8024798:	ea50 0201 	orrs.w	r2, r0, r1
 802479c:	bf08      	it	eq
 802479e:	4770      	bxeq	lr
 80247a0:	b530      	push	{r4, r5, lr}
 80247a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80247a6:	d502      	bpl.n	80247ae <__aeabi_l2d+0x16>
 80247a8:	4240      	negs	r0, r0
 80247aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80247ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80247b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80247b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80247ba:	f43f aedc 	beq.w	8024576 <__adddf3+0xe6>
 80247be:	f04f 0203 	mov.w	r2, #3
 80247c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80247c6:	bf18      	it	ne
 80247c8:	3203      	addne	r2, #3
 80247ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80247ce:	bf18      	it	ne
 80247d0:	3203      	addne	r2, #3
 80247d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80247d6:	f1c2 0320 	rsb	r3, r2, #32
 80247da:	fa00 fc03 	lsl.w	ip, r0, r3
 80247de:	fa20 f002 	lsr.w	r0, r0, r2
 80247e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80247e6:	ea40 000e 	orr.w	r0, r0, lr
 80247ea:	fa21 f102 	lsr.w	r1, r1, r2
 80247ee:	4414      	add	r4, r2
 80247f0:	e6c1      	b.n	8024576 <__adddf3+0xe6>
 80247f2:	bf00      	nop

080247f4 <__aeabi_dmul>:
 80247f4:	b570      	push	{r4, r5, r6, lr}
 80247f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80247fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80247fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8024802:	bf1d      	ittte	ne
 8024804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8024808:	ea94 0f0c 	teqne	r4, ip
 802480c:	ea95 0f0c 	teqne	r5, ip
 8024810:	f000 f8de 	bleq	80249d0 <__aeabi_dmul+0x1dc>
 8024814:	442c      	add	r4, r5
 8024816:	ea81 0603 	eor.w	r6, r1, r3
 802481a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 802481e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8024822:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8024826:	bf18      	it	ne
 8024828:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 802482c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8024830:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8024834:	d038      	beq.n	80248a8 <__aeabi_dmul+0xb4>
 8024836:	fba0 ce02 	umull	ip, lr, r0, r2
 802483a:	f04f 0500 	mov.w	r5, #0
 802483e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8024842:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8024846:	fbe0 e503 	umlal	lr, r5, r0, r3
 802484a:	f04f 0600 	mov.w	r6, #0
 802484e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8024852:	f09c 0f00 	teq	ip, #0
 8024856:	bf18      	it	ne
 8024858:	f04e 0e01 	orrne.w	lr, lr, #1
 802485c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8024860:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8024864:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8024868:	d204      	bcs.n	8024874 <__aeabi_dmul+0x80>
 802486a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 802486e:	416d      	adcs	r5, r5
 8024870:	eb46 0606 	adc.w	r6, r6, r6
 8024874:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8024878:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 802487c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8024880:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8024884:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8024888:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 802488c:	bf88      	it	hi
 802488e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8024892:	d81e      	bhi.n	80248d2 <__aeabi_dmul+0xde>
 8024894:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8024898:	bf08      	it	eq
 802489a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 802489e:	f150 0000 	adcs.w	r0, r0, #0
 80248a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80248a6:	bd70      	pop	{r4, r5, r6, pc}
 80248a8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80248ac:	ea46 0101 	orr.w	r1, r6, r1
 80248b0:	ea40 0002 	orr.w	r0, r0, r2
 80248b4:	ea81 0103 	eor.w	r1, r1, r3
 80248b8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80248bc:	bfc2      	ittt	gt
 80248be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80248c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80248c6:	bd70      	popgt	{r4, r5, r6, pc}
 80248c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80248cc:	f04f 0e00 	mov.w	lr, #0
 80248d0:	3c01      	subs	r4, #1
 80248d2:	f300 80ab 	bgt.w	8024a2c <__aeabi_dmul+0x238>
 80248d6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80248da:	bfde      	ittt	le
 80248dc:	2000      	movle	r0, #0
 80248de:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80248e2:	bd70      	pople	{r4, r5, r6, pc}
 80248e4:	f1c4 0400 	rsb	r4, r4, #0
 80248e8:	3c20      	subs	r4, #32
 80248ea:	da35      	bge.n	8024958 <__aeabi_dmul+0x164>
 80248ec:	340c      	adds	r4, #12
 80248ee:	dc1b      	bgt.n	8024928 <__aeabi_dmul+0x134>
 80248f0:	f104 0414 	add.w	r4, r4, #20
 80248f4:	f1c4 0520 	rsb	r5, r4, #32
 80248f8:	fa00 f305 	lsl.w	r3, r0, r5
 80248fc:	fa20 f004 	lsr.w	r0, r0, r4
 8024900:	fa01 f205 	lsl.w	r2, r1, r5
 8024904:	ea40 0002 	orr.w	r0, r0, r2
 8024908:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 802490c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8024910:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8024914:	fa21 f604 	lsr.w	r6, r1, r4
 8024918:	eb42 0106 	adc.w	r1, r2, r6
 802491c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8024920:	bf08      	it	eq
 8024922:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8024926:	bd70      	pop	{r4, r5, r6, pc}
 8024928:	f1c4 040c 	rsb	r4, r4, #12
 802492c:	f1c4 0520 	rsb	r5, r4, #32
 8024930:	fa00 f304 	lsl.w	r3, r0, r4
 8024934:	fa20 f005 	lsr.w	r0, r0, r5
 8024938:	fa01 f204 	lsl.w	r2, r1, r4
 802493c:	ea40 0002 	orr.w	r0, r0, r2
 8024940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8024944:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8024948:	f141 0100 	adc.w	r1, r1, #0
 802494c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8024950:	bf08      	it	eq
 8024952:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8024956:	bd70      	pop	{r4, r5, r6, pc}
 8024958:	f1c4 0520 	rsb	r5, r4, #32
 802495c:	fa00 f205 	lsl.w	r2, r0, r5
 8024960:	ea4e 0e02 	orr.w	lr, lr, r2
 8024964:	fa20 f304 	lsr.w	r3, r0, r4
 8024968:	fa01 f205 	lsl.w	r2, r1, r5
 802496c:	ea43 0302 	orr.w	r3, r3, r2
 8024970:	fa21 f004 	lsr.w	r0, r1, r4
 8024974:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8024978:	fa21 f204 	lsr.w	r2, r1, r4
 802497c:	ea20 0002 	bic.w	r0, r0, r2
 8024980:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8024984:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8024988:	bf08      	it	eq
 802498a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802498e:	bd70      	pop	{r4, r5, r6, pc}
 8024990:	f094 0f00 	teq	r4, #0
 8024994:	d10f      	bne.n	80249b6 <__aeabi_dmul+0x1c2>
 8024996:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 802499a:	0040      	lsls	r0, r0, #1
 802499c:	eb41 0101 	adc.w	r1, r1, r1
 80249a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80249a4:	bf08      	it	eq
 80249a6:	3c01      	subeq	r4, #1
 80249a8:	d0f7      	beq.n	802499a <__aeabi_dmul+0x1a6>
 80249aa:	ea41 0106 	orr.w	r1, r1, r6
 80249ae:	f095 0f00 	teq	r5, #0
 80249b2:	bf18      	it	ne
 80249b4:	4770      	bxne	lr
 80249b6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80249ba:	0052      	lsls	r2, r2, #1
 80249bc:	eb43 0303 	adc.w	r3, r3, r3
 80249c0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80249c4:	bf08      	it	eq
 80249c6:	3d01      	subeq	r5, #1
 80249c8:	d0f7      	beq.n	80249ba <__aeabi_dmul+0x1c6>
 80249ca:	ea43 0306 	orr.w	r3, r3, r6
 80249ce:	4770      	bx	lr
 80249d0:	ea94 0f0c 	teq	r4, ip
 80249d4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80249d8:	bf18      	it	ne
 80249da:	ea95 0f0c 	teqne	r5, ip
 80249de:	d00c      	beq.n	80249fa <__aeabi_dmul+0x206>
 80249e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80249e4:	bf18      	it	ne
 80249e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80249ea:	d1d1      	bne.n	8024990 <__aeabi_dmul+0x19c>
 80249ec:	ea81 0103 	eor.w	r1, r1, r3
 80249f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80249f4:	f04f 0000 	mov.w	r0, #0
 80249f8:	bd70      	pop	{r4, r5, r6, pc}
 80249fa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80249fe:	bf06      	itte	eq
 8024a00:	4610      	moveq	r0, r2
 8024a02:	4619      	moveq	r1, r3
 8024a04:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8024a08:	d019      	beq.n	8024a3e <__aeabi_dmul+0x24a>
 8024a0a:	ea94 0f0c 	teq	r4, ip
 8024a0e:	d102      	bne.n	8024a16 <__aeabi_dmul+0x222>
 8024a10:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8024a14:	d113      	bne.n	8024a3e <__aeabi_dmul+0x24a>
 8024a16:	ea95 0f0c 	teq	r5, ip
 8024a1a:	d105      	bne.n	8024a28 <__aeabi_dmul+0x234>
 8024a1c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8024a20:	bf1c      	itt	ne
 8024a22:	4610      	movne	r0, r2
 8024a24:	4619      	movne	r1, r3
 8024a26:	d10a      	bne.n	8024a3e <__aeabi_dmul+0x24a>
 8024a28:	ea81 0103 	eor.w	r1, r1, r3
 8024a2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8024a30:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8024a34:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8024a38:	f04f 0000 	mov.w	r0, #0
 8024a3c:	bd70      	pop	{r4, r5, r6, pc}
 8024a3e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8024a42:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8024a46:	bd70      	pop	{r4, r5, r6, pc}

08024a48 <__aeabi_ddiv>:
 8024a48:	b570      	push	{r4, r5, r6, lr}
 8024a4a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8024a4e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8024a52:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8024a56:	bf1d      	ittte	ne
 8024a58:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8024a5c:	ea94 0f0c 	teqne	r4, ip
 8024a60:	ea95 0f0c 	teqne	r5, ip
 8024a64:	f000 f8a7 	bleq	8024bb6 <__aeabi_ddiv+0x16e>
 8024a68:	eba4 0405 	sub.w	r4, r4, r5
 8024a6c:	ea81 0e03 	eor.w	lr, r1, r3
 8024a70:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8024a74:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8024a78:	f000 8088 	beq.w	8024b8c <__aeabi_ddiv+0x144>
 8024a7c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8024a80:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8024a84:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8024a88:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8024a8c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8024a90:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8024a94:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8024a98:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8024a9c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8024aa0:	429d      	cmp	r5, r3
 8024aa2:	bf08      	it	eq
 8024aa4:	4296      	cmpeq	r6, r2
 8024aa6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8024aaa:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8024aae:	d202      	bcs.n	8024ab6 <__aeabi_ddiv+0x6e>
 8024ab0:	085b      	lsrs	r3, r3, #1
 8024ab2:	ea4f 0232 	mov.w	r2, r2, rrx
 8024ab6:	1ab6      	subs	r6, r6, r2
 8024ab8:	eb65 0503 	sbc.w	r5, r5, r3
 8024abc:	085b      	lsrs	r3, r3, #1
 8024abe:	ea4f 0232 	mov.w	r2, r2, rrx
 8024ac2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8024ac6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8024aca:	ebb6 0e02 	subs.w	lr, r6, r2
 8024ace:	eb75 0e03 	sbcs.w	lr, r5, r3
 8024ad2:	bf22      	ittt	cs
 8024ad4:	1ab6      	subcs	r6, r6, r2
 8024ad6:	4675      	movcs	r5, lr
 8024ad8:	ea40 000c 	orrcs.w	r0, r0, ip
 8024adc:	085b      	lsrs	r3, r3, #1
 8024ade:	ea4f 0232 	mov.w	r2, r2, rrx
 8024ae2:	ebb6 0e02 	subs.w	lr, r6, r2
 8024ae6:	eb75 0e03 	sbcs.w	lr, r5, r3
 8024aea:	bf22      	ittt	cs
 8024aec:	1ab6      	subcs	r6, r6, r2
 8024aee:	4675      	movcs	r5, lr
 8024af0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8024af4:	085b      	lsrs	r3, r3, #1
 8024af6:	ea4f 0232 	mov.w	r2, r2, rrx
 8024afa:	ebb6 0e02 	subs.w	lr, r6, r2
 8024afe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8024b02:	bf22      	ittt	cs
 8024b04:	1ab6      	subcs	r6, r6, r2
 8024b06:	4675      	movcs	r5, lr
 8024b08:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8024b0c:	085b      	lsrs	r3, r3, #1
 8024b0e:	ea4f 0232 	mov.w	r2, r2, rrx
 8024b12:	ebb6 0e02 	subs.w	lr, r6, r2
 8024b16:	eb75 0e03 	sbcs.w	lr, r5, r3
 8024b1a:	bf22      	ittt	cs
 8024b1c:	1ab6      	subcs	r6, r6, r2
 8024b1e:	4675      	movcs	r5, lr
 8024b20:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8024b24:	ea55 0e06 	orrs.w	lr, r5, r6
 8024b28:	d018      	beq.n	8024b5c <__aeabi_ddiv+0x114>
 8024b2a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8024b2e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8024b32:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8024b36:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8024b3a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8024b3e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8024b42:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8024b46:	d1c0      	bne.n	8024aca <__aeabi_ddiv+0x82>
 8024b48:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8024b4c:	d10b      	bne.n	8024b66 <__aeabi_ddiv+0x11e>
 8024b4e:	ea41 0100 	orr.w	r1, r1, r0
 8024b52:	f04f 0000 	mov.w	r0, #0
 8024b56:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8024b5a:	e7b6      	b.n	8024aca <__aeabi_ddiv+0x82>
 8024b5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8024b60:	bf04      	itt	eq
 8024b62:	4301      	orreq	r1, r0
 8024b64:	2000      	moveq	r0, #0
 8024b66:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8024b6a:	bf88      	it	hi
 8024b6c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8024b70:	f63f aeaf 	bhi.w	80248d2 <__aeabi_dmul+0xde>
 8024b74:	ebb5 0c03 	subs.w	ip, r5, r3
 8024b78:	bf04      	itt	eq
 8024b7a:	ebb6 0c02 	subseq.w	ip, r6, r2
 8024b7e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8024b82:	f150 0000 	adcs.w	r0, r0, #0
 8024b86:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8024b8a:	bd70      	pop	{r4, r5, r6, pc}
 8024b8c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8024b90:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8024b94:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8024b98:	bfc2      	ittt	gt
 8024b9a:	ebd4 050c 	rsbsgt	r5, r4, ip
 8024b9e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8024ba2:	bd70      	popgt	{r4, r5, r6, pc}
 8024ba4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8024ba8:	f04f 0e00 	mov.w	lr, #0
 8024bac:	3c01      	subs	r4, #1
 8024bae:	e690      	b.n	80248d2 <__aeabi_dmul+0xde>
 8024bb0:	ea45 0e06 	orr.w	lr, r5, r6
 8024bb4:	e68d      	b.n	80248d2 <__aeabi_dmul+0xde>
 8024bb6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8024bba:	ea94 0f0c 	teq	r4, ip
 8024bbe:	bf08      	it	eq
 8024bc0:	ea95 0f0c 	teqeq	r5, ip
 8024bc4:	f43f af3b 	beq.w	8024a3e <__aeabi_dmul+0x24a>
 8024bc8:	ea94 0f0c 	teq	r4, ip
 8024bcc:	d10a      	bne.n	8024be4 <__aeabi_ddiv+0x19c>
 8024bce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8024bd2:	f47f af34 	bne.w	8024a3e <__aeabi_dmul+0x24a>
 8024bd6:	ea95 0f0c 	teq	r5, ip
 8024bda:	f47f af25 	bne.w	8024a28 <__aeabi_dmul+0x234>
 8024bde:	4610      	mov	r0, r2
 8024be0:	4619      	mov	r1, r3
 8024be2:	e72c      	b.n	8024a3e <__aeabi_dmul+0x24a>
 8024be4:	ea95 0f0c 	teq	r5, ip
 8024be8:	d106      	bne.n	8024bf8 <__aeabi_ddiv+0x1b0>
 8024bea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8024bee:	f43f aefd 	beq.w	80249ec <__aeabi_dmul+0x1f8>
 8024bf2:	4610      	mov	r0, r2
 8024bf4:	4619      	mov	r1, r3
 8024bf6:	e722      	b.n	8024a3e <__aeabi_dmul+0x24a>
 8024bf8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8024bfc:	bf18      	it	ne
 8024bfe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8024c02:	f47f aec5 	bne.w	8024990 <__aeabi_dmul+0x19c>
 8024c06:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8024c0a:	f47f af0d 	bne.w	8024a28 <__aeabi_dmul+0x234>
 8024c0e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8024c12:	f47f aeeb 	bne.w	80249ec <__aeabi_dmul+0x1f8>
 8024c16:	e712      	b.n	8024a3e <__aeabi_dmul+0x24a>

08024c18 <__gedf2>:
 8024c18:	f04f 3cff 	mov.w	ip, #4294967295
 8024c1c:	e006      	b.n	8024c2c <__cmpdf2+0x4>
 8024c1e:	bf00      	nop

08024c20 <__ledf2>:
 8024c20:	f04f 0c01 	mov.w	ip, #1
 8024c24:	e002      	b.n	8024c2c <__cmpdf2+0x4>
 8024c26:	bf00      	nop

08024c28 <__cmpdf2>:
 8024c28:	f04f 0c01 	mov.w	ip, #1
 8024c2c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8024c30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8024c34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8024c38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8024c3c:	bf18      	it	ne
 8024c3e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8024c42:	d01b      	beq.n	8024c7c <__cmpdf2+0x54>
 8024c44:	b001      	add	sp, #4
 8024c46:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8024c4a:	bf0c      	ite	eq
 8024c4c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8024c50:	ea91 0f03 	teqne	r1, r3
 8024c54:	bf02      	ittt	eq
 8024c56:	ea90 0f02 	teqeq	r0, r2
 8024c5a:	2000      	moveq	r0, #0
 8024c5c:	4770      	bxeq	lr
 8024c5e:	f110 0f00 	cmn.w	r0, #0
 8024c62:	ea91 0f03 	teq	r1, r3
 8024c66:	bf58      	it	pl
 8024c68:	4299      	cmppl	r1, r3
 8024c6a:	bf08      	it	eq
 8024c6c:	4290      	cmpeq	r0, r2
 8024c6e:	bf2c      	ite	cs
 8024c70:	17d8      	asrcs	r0, r3, #31
 8024c72:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8024c76:	f040 0001 	orr.w	r0, r0, #1
 8024c7a:	4770      	bx	lr
 8024c7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8024c80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8024c84:	d102      	bne.n	8024c8c <__cmpdf2+0x64>
 8024c86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8024c8a:	d107      	bne.n	8024c9c <__cmpdf2+0x74>
 8024c8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8024c90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8024c94:	d1d6      	bne.n	8024c44 <__cmpdf2+0x1c>
 8024c96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8024c9a:	d0d3      	beq.n	8024c44 <__cmpdf2+0x1c>
 8024c9c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8024ca0:	4770      	bx	lr
 8024ca2:	bf00      	nop

08024ca4 <__aeabi_cdrcmple>:
 8024ca4:	4684      	mov	ip, r0
 8024ca6:	4610      	mov	r0, r2
 8024ca8:	4662      	mov	r2, ip
 8024caa:	468c      	mov	ip, r1
 8024cac:	4619      	mov	r1, r3
 8024cae:	4663      	mov	r3, ip
 8024cb0:	e000      	b.n	8024cb4 <__aeabi_cdcmpeq>
 8024cb2:	bf00      	nop

08024cb4 <__aeabi_cdcmpeq>:
 8024cb4:	b501      	push	{r0, lr}
 8024cb6:	f7ff ffb7 	bl	8024c28 <__cmpdf2>
 8024cba:	2800      	cmp	r0, #0
 8024cbc:	bf48      	it	mi
 8024cbe:	f110 0f00 	cmnmi.w	r0, #0
 8024cc2:	bd01      	pop	{r0, pc}

08024cc4 <__aeabi_dcmpeq>:
 8024cc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8024cc8:	f7ff fff4 	bl	8024cb4 <__aeabi_cdcmpeq>
 8024ccc:	bf0c      	ite	eq
 8024cce:	2001      	moveq	r0, #1
 8024cd0:	2000      	movne	r0, #0
 8024cd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8024cd6:	bf00      	nop

08024cd8 <__aeabi_dcmplt>:
 8024cd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8024cdc:	f7ff ffea 	bl	8024cb4 <__aeabi_cdcmpeq>
 8024ce0:	bf34      	ite	cc
 8024ce2:	2001      	movcc	r0, #1
 8024ce4:	2000      	movcs	r0, #0
 8024ce6:	f85d fb08 	ldr.w	pc, [sp], #8
 8024cea:	bf00      	nop

08024cec <__aeabi_dcmple>:
 8024cec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8024cf0:	f7ff ffe0 	bl	8024cb4 <__aeabi_cdcmpeq>
 8024cf4:	bf94      	ite	ls
 8024cf6:	2001      	movls	r0, #1
 8024cf8:	2000      	movhi	r0, #0
 8024cfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8024cfe:	bf00      	nop

08024d00 <__aeabi_dcmpge>:
 8024d00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8024d04:	f7ff ffce 	bl	8024ca4 <__aeabi_cdrcmple>
 8024d08:	bf94      	ite	ls
 8024d0a:	2001      	movls	r0, #1
 8024d0c:	2000      	movhi	r0, #0
 8024d0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8024d12:	bf00      	nop

08024d14 <__aeabi_dcmpgt>:
 8024d14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8024d18:	f7ff ffc4 	bl	8024ca4 <__aeabi_cdrcmple>
 8024d1c:	bf34      	ite	cc
 8024d1e:	2001      	movcc	r0, #1
 8024d20:	2000      	movcs	r0, #0
 8024d22:	f85d fb08 	ldr.w	pc, [sp], #8
 8024d26:	bf00      	nop

08024d28 <__aeabi_d2iz>:
 8024d28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8024d2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8024d30:	d215      	bcs.n	8024d5e <__aeabi_d2iz+0x36>
 8024d32:	d511      	bpl.n	8024d58 <__aeabi_d2iz+0x30>
 8024d34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8024d38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8024d3c:	d912      	bls.n	8024d64 <__aeabi_d2iz+0x3c>
 8024d3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8024d42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8024d46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8024d4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8024d4e:	fa23 f002 	lsr.w	r0, r3, r2
 8024d52:	bf18      	it	ne
 8024d54:	4240      	negne	r0, r0
 8024d56:	4770      	bx	lr
 8024d58:	f04f 0000 	mov.w	r0, #0
 8024d5c:	4770      	bx	lr
 8024d5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8024d62:	d105      	bne.n	8024d70 <__aeabi_d2iz+0x48>
 8024d64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8024d68:	bf08      	it	eq
 8024d6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8024d6e:	4770      	bx	lr
 8024d70:	f04f 0000 	mov.w	r0, #0
 8024d74:	4770      	bx	lr
 8024d76:	bf00      	nop

08024d78 <__aeabi_d2uiz>:
 8024d78:	004a      	lsls	r2, r1, #1
 8024d7a:	d211      	bcs.n	8024da0 <__aeabi_d2uiz+0x28>
 8024d7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8024d80:	d211      	bcs.n	8024da6 <__aeabi_d2uiz+0x2e>
 8024d82:	d50d      	bpl.n	8024da0 <__aeabi_d2uiz+0x28>
 8024d84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8024d88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8024d8c:	d40e      	bmi.n	8024dac <__aeabi_d2uiz+0x34>
 8024d8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8024d92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8024d96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8024d9a:	fa23 f002 	lsr.w	r0, r3, r2
 8024d9e:	4770      	bx	lr
 8024da0:	f04f 0000 	mov.w	r0, #0
 8024da4:	4770      	bx	lr
 8024da6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8024daa:	d102      	bne.n	8024db2 <__aeabi_d2uiz+0x3a>
 8024dac:	f04f 30ff 	mov.w	r0, #4294967295
 8024db0:	4770      	bx	lr
 8024db2:	f04f 0000 	mov.w	r0, #0
 8024db6:	4770      	bx	lr

08024db8 <__aeabi_d2f>:
 8024db8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8024dbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8024dc0:	bf24      	itt	cs
 8024dc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8024dc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8024dca:	d90d      	bls.n	8024de8 <__aeabi_d2f+0x30>
 8024dcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8024dd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8024dd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8024dd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8024ddc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8024de0:	bf08      	it	eq
 8024de2:	f020 0001 	biceq.w	r0, r0, #1
 8024de6:	4770      	bx	lr
 8024de8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8024dec:	d121      	bne.n	8024e32 <__aeabi_d2f+0x7a>
 8024dee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8024df2:	bfbc      	itt	lt
 8024df4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8024df8:	4770      	bxlt	lr
 8024dfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8024dfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8024e02:	f1c2 0218 	rsb	r2, r2, #24
 8024e06:	f1c2 0c20 	rsb	ip, r2, #32
 8024e0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8024e0e:	fa20 f002 	lsr.w	r0, r0, r2
 8024e12:	bf18      	it	ne
 8024e14:	f040 0001 	orrne.w	r0, r0, #1
 8024e18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8024e1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8024e20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8024e24:	ea40 000c 	orr.w	r0, r0, ip
 8024e28:	fa23 f302 	lsr.w	r3, r3, r2
 8024e2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8024e30:	e7cc      	b.n	8024dcc <__aeabi_d2f+0x14>
 8024e32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8024e36:	d107      	bne.n	8024e48 <__aeabi_d2f+0x90>
 8024e38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8024e3c:	bf1e      	ittt	ne
 8024e3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8024e42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8024e46:	4770      	bxne	lr
 8024e48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8024e4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8024e50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8024e54:	4770      	bx	lr
 8024e56:	bf00      	nop

08024e58 <__aeabi_frsub>:
 8024e58:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8024e5c:	e002      	b.n	8024e64 <__addsf3>
 8024e5e:	bf00      	nop

08024e60 <__aeabi_fsub>:
 8024e60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08024e64 <__addsf3>:
 8024e64:	0042      	lsls	r2, r0, #1
 8024e66:	bf1f      	itttt	ne
 8024e68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8024e6c:	ea92 0f03 	teqne	r2, r3
 8024e70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8024e74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8024e78:	d06a      	beq.n	8024f50 <__addsf3+0xec>
 8024e7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8024e7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8024e82:	bfc1      	itttt	gt
 8024e84:	18d2      	addgt	r2, r2, r3
 8024e86:	4041      	eorgt	r1, r0
 8024e88:	4048      	eorgt	r0, r1
 8024e8a:	4041      	eorgt	r1, r0
 8024e8c:	bfb8      	it	lt
 8024e8e:	425b      	neglt	r3, r3
 8024e90:	2b19      	cmp	r3, #25
 8024e92:	bf88      	it	hi
 8024e94:	4770      	bxhi	lr
 8024e96:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8024e9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8024e9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8024ea2:	bf18      	it	ne
 8024ea4:	4240      	negne	r0, r0
 8024ea6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8024eaa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8024eae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8024eb2:	bf18      	it	ne
 8024eb4:	4249      	negne	r1, r1
 8024eb6:	ea92 0f03 	teq	r2, r3
 8024eba:	d03f      	beq.n	8024f3c <__addsf3+0xd8>
 8024ebc:	f1a2 0201 	sub.w	r2, r2, #1
 8024ec0:	fa41 fc03 	asr.w	ip, r1, r3
 8024ec4:	eb10 000c 	adds.w	r0, r0, ip
 8024ec8:	f1c3 0320 	rsb	r3, r3, #32
 8024ecc:	fa01 f103 	lsl.w	r1, r1, r3
 8024ed0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8024ed4:	d502      	bpl.n	8024edc <__addsf3+0x78>
 8024ed6:	4249      	negs	r1, r1
 8024ed8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8024edc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8024ee0:	d313      	bcc.n	8024f0a <__addsf3+0xa6>
 8024ee2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8024ee6:	d306      	bcc.n	8024ef6 <__addsf3+0x92>
 8024ee8:	0840      	lsrs	r0, r0, #1
 8024eea:	ea4f 0131 	mov.w	r1, r1, rrx
 8024eee:	f102 0201 	add.w	r2, r2, #1
 8024ef2:	2afe      	cmp	r2, #254	; 0xfe
 8024ef4:	d251      	bcs.n	8024f9a <__addsf3+0x136>
 8024ef6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8024efa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8024efe:	bf08      	it	eq
 8024f00:	f020 0001 	biceq.w	r0, r0, #1
 8024f04:	ea40 0003 	orr.w	r0, r0, r3
 8024f08:	4770      	bx	lr
 8024f0a:	0049      	lsls	r1, r1, #1
 8024f0c:	eb40 0000 	adc.w	r0, r0, r0
 8024f10:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8024f14:	f1a2 0201 	sub.w	r2, r2, #1
 8024f18:	d1ed      	bne.n	8024ef6 <__addsf3+0x92>
 8024f1a:	fab0 fc80 	clz	ip, r0
 8024f1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8024f22:	ebb2 020c 	subs.w	r2, r2, ip
 8024f26:	fa00 f00c 	lsl.w	r0, r0, ip
 8024f2a:	bfaa      	itet	ge
 8024f2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8024f30:	4252      	neglt	r2, r2
 8024f32:	4318      	orrge	r0, r3
 8024f34:	bfbc      	itt	lt
 8024f36:	40d0      	lsrlt	r0, r2
 8024f38:	4318      	orrlt	r0, r3
 8024f3a:	4770      	bx	lr
 8024f3c:	f092 0f00 	teq	r2, #0
 8024f40:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8024f44:	bf06      	itte	eq
 8024f46:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8024f4a:	3201      	addeq	r2, #1
 8024f4c:	3b01      	subne	r3, #1
 8024f4e:	e7b5      	b.n	8024ebc <__addsf3+0x58>
 8024f50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8024f54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8024f58:	bf18      	it	ne
 8024f5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8024f5e:	d021      	beq.n	8024fa4 <__addsf3+0x140>
 8024f60:	ea92 0f03 	teq	r2, r3
 8024f64:	d004      	beq.n	8024f70 <__addsf3+0x10c>
 8024f66:	f092 0f00 	teq	r2, #0
 8024f6a:	bf08      	it	eq
 8024f6c:	4608      	moveq	r0, r1
 8024f6e:	4770      	bx	lr
 8024f70:	ea90 0f01 	teq	r0, r1
 8024f74:	bf1c      	itt	ne
 8024f76:	2000      	movne	r0, #0
 8024f78:	4770      	bxne	lr
 8024f7a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8024f7e:	d104      	bne.n	8024f8a <__addsf3+0x126>
 8024f80:	0040      	lsls	r0, r0, #1
 8024f82:	bf28      	it	cs
 8024f84:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8024f88:	4770      	bx	lr
 8024f8a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8024f8e:	bf3c      	itt	cc
 8024f90:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8024f94:	4770      	bxcc	lr
 8024f96:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8024f9a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8024f9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8024fa2:	4770      	bx	lr
 8024fa4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8024fa8:	bf16      	itet	ne
 8024faa:	4608      	movne	r0, r1
 8024fac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8024fb0:	4601      	movne	r1, r0
 8024fb2:	0242      	lsls	r2, r0, #9
 8024fb4:	bf06      	itte	eq
 8024fb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8024fba:	ea90 0f01 	teqeq	r0, r1
 8024fbe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8024fc2:	4770      	bx	lr

08024fc4 <__aeabi_ui2f>:
 8024fc4:	f04f 0300 	mov.w	r3, #0
 8024fc8:	e004      	b.n	8024fd4 <__aeabi_i2f+0x8>
 8024fca:	bf00      	nop

08024fcc <__aeabi_i2f>:
 8024fcc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8024fd0:	bf48      	it	mi
 8024fd2:	4240      	negmi	r0, r0
 8024fd4:	ea5f 0c00 	movs.w	ip, r0
 8024fd8:	bf08      	it	eq
 8024fda:	4770      	bxeq	lr
 8024fdc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8024fe0:	4601      	mov	r1, r0
 8024fe2:	f04f 0000 	mov.w	r0, #0
 8024fe6:	e01c      	b.n	8025022 <__aeabi_l2f+0x2a>

08024fe8 <__aeabi_ul2f>:
 8024fe8:	ea50 0201 	orrs.w	r2, r0, r1
 8024fec:	bf08      	it	eq
 8024fee:	4770      	bxeq	lr
 8024ff0:	f04f 0300 	mov.w	r3, #0
 8024ff4:	e00a      	b.n	802500c <__aeabi_l2f+0x14>
 8024ff6:	bf00      	nop

08024ff8 <__aeabi_l2f>:
 8024ff8:	ea50 0201 	orrs.w	r2, r0, r1
 8024ffc:	bf08      	it	eq
 8024ffe:	4770      	bxeq	lr
 8025000:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8025004:	d502      	bpl.n	802500c <__aeabi_l2f+0x14>
 8025006:	4240      	negs	r0, r0
 8025008:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 802500c:	ea5f 0c01 	movs.w	ip, r1
 8025010:	bf02      	ittt	eq
 8025012:	4684      	moveq	ip, r0
 8025014:	4601      	moveq	r1, r0
 8025016:	2000      	moveq	r0, #0
 8025018:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 802501c:	bf08      	it	eq
 802501e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8025022:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8025026:	fabc f28c 	clz	r2, ip
 802502a:	3a08      	subs	r2, #8
 802502c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8025030:	db10      	blt.n	8025054 <__aeabi_l2f+0x5c>
 8025032:	fa01 fc02 	lsl.w	ip, r1, r2
 8025036:	4463      	add	r3, ip
 8025038:	fa00 fc02 	lsl.w	ip, r0, r2
 802503c:	f1c2 0220 	rsb	r2, r2, #32
 8025040:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8025044:	fa20 f202 	lsr.w	r2, r0, r2
 8025048:	eb43 0002 	adc.w	r0, r3, r2
 802504c:	bf08      	it	eq
 802504e:	f020 0001 	biceq.w	r0, r0, #1
 8025052:	4770      	bx	lr
 8025054:	f102 0220 	add.w	r2, r2, #32
 8025058:	fa01 fc02 	lsl.w	ip, r1, r2
 802505c:	f1c2 0220 	rsb	r2, r2, #32
 8025060:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8025064:	fa21 f202 	lsr.w	r2, r1, r2
 8025068:	eb43 0002 	adc.w	r0, r3, r2
 802506c:	bf08      	it	eq
 802506e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8025072:	4770      	bx	lr

08025074 <__aeabi_fmul>:
 8025074:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8025078:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 802507c:	bf1e      	ittt	ne
 802507e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8025082:	ea92 0f0c 	teqne	r2, ip
 8025086:	ea93 0f0c 	teqne	r3, ip
 802508a:	d06f      	beq.n	802516c <__aeabi_fmul+0xf8>
 802508c:	441a      	add	r2, r3
 802508e:	ea80 0c01 	eor.w	ip, r0, r1
 8025092:	0240      	lsls	r0, r0, #9
 8025094:	bf18      	it	ne
 8025096:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 802509a:	d01e      	beq.n	80250da <__aeabi_fmul+0x66>
 802509c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80250a0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80250a4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80250a8:	fba0 3101 	umull	r3, r1, r0, r1
 80250ac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80250b0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80250b4:	bf3e      	ittt	cc
 80250b6:	0049      	lslcc	r1, r1, #1
 80250b8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80250bc:	005b      	lslcc	r3, r3, #1
 80250be:	ea40 0001 	orr.w	r0, r0, r1
 80250c2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80250c6:	2afd      	cmp	r2, #253	; 0xfd
 80250c8:	d81d      	bhi.n	8025106 <__aeabi_fmul+0x92>
 80250ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80250ce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80250d2:	bf08      	it	eq
 80250d4:	f020 0001 	biceq.w	r0, r0, #1
 80250d8:	4770      	bx	lr
 80250da:	f090 0f00 	teq	r0, #0
 80250de:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80250e2:	bf08      	it	eq
 80250e4:	0249      	lsleq	r1, r1, #9
 80250e6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80250ea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80250ee:	3a7f      	subs	r2, #127	; 0x7f
 80250f0:	bfc2      	ittt	gt
 80250f2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80250f6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80250fa:	4770      	bxgt	lr
 80250fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8025100:	f04f 0300 	mov.w	r3, #0
 8025104:	3a01      	subs	r2, #1
 8025106:	dc5d      	bgt.n	80251c4 <__aeabi_fmul+0x150>
 8025108:	f112 0f19 	cmn.w	r2, #25
 802510c:	bfdc      	itt	le
 802510e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8025112:	4770      	bxle	lr
 8025114:	f1c2 0200 	rsb	r2, r2, #0
 8025118:	0041      	lsls	r1, r0, #1
 802511a:	fa21 f102 	lsr.w	r1, r1, r2
 802511e:	f1c2 0220 	rsb	r2, r2, #32
 8025122:	fa00 fc02 	lsl.w	ip, r0, r2
 8025126:	ea5f 0031 	movs.w	r0, r1, rrx
 802512a:	f140 0000 	adc.w	r0, r0, #0
 802512e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8025132:	bf08      	it	eq
 8025134:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8025138:	4770      	bx	lr
 802513a:	f092 0f00 	teq	r2, #0
 802513e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8025142:	bf02      	ittt	eq
 8025144:	0040      	lsleq	r0, r0, #1
 8025146:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 802514a:	3a01      	subeq	r2, #1
 802514c:	d0f9      	beq.n	8025142 <__aeabi_fmul+0xce>
 802514e:	ea40 000c 	orr.w	r0, r0, ip
 8025152:	f093 0f00 	teq	r3, #0
 8025156:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 802515a:	bf02      	ittt	eq
 802515c:	0049      	lsleq	r1, r1, #1
 802515e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8025162:	3b01      	subeq	r3, #1
 8025164:	d0f9      	beq.n	802515a <__aeabi_fmul+0xe6>
 8025166:	ea41 010c 	orr.w	r1, r1, ip
 802516a:	e78f      	b.n	802508c <__aeabi_fmul+0x18>
 802516c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8025170:	ea92 0f0c 	teq	r2, ip
 8025174:	bf18      	it	ne
 8025176:	ea93 0f0c 	teqne	r3, ip
 802517a:	d00a      	beq.n	8025192 <__aeabi_fmul+0x11e>
 802517c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8025180:	bf18      	it	ne
 8025182:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8025186:	d1d8      	bne.n	802513a <__aeabi_fmul+0xc6>
 8025188:	ea80 0001 	eor.w	r0, r0, r1
 802518c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8025190:	4770      	bx	lr
 8025192:	f090 0f00 	teq	r0, #0
 8025196:	bf17      	itett	ne
 8025198:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 802519c:	4608      	moveq	r0, r1
 802519e:	f091 0f00 	teqne	r1, #0
 80251a2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80251a6:	d014      	beq.n	80251d2 <__aeabi_fmul+0x15e>
 80251a8:	ea92 0f0c 	teq	r2, ip
 80251ac:	d101      	bne.n	80251b2 <__aeabi_fmul+0x13e>
 80251ae:	0242      	lsls	r2, r0, #9
 80251b0:	d10f      	bne.n	80251d2 <__aeabi_fmul+0x15e>
 80251b2:	ea93 0f0c 	teq	r3, ip
 80251b6:	d103      	bne.n	80251c0 <__aeabi_fmul+0x14c>
 80251b8:	024b      	lsls	r3, r1, #9
 80251ba:	bf18      	it	ne
 80251bc:	4608      	movne	r0, r1
 80251be:	d108      	bne.n	80251d2 <__aeabi_fmul+0x15e>
 80251c0:	ea80 0001 	eor.w	r0, r0, r1
 80251c4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80251c8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80251cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80251d0:	4770      	bx	lr
 80251d2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80251d6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80251da:	4770      	bx	lr

080251dc <__aeabi_fdiv>:
 80251dc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80251e0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80251e4:	bf1e      	ittt	ne
 80251e6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80251ea:	ea92 0f0c 	teqne	r2, ip
 80251ee:	ea93 0f0c 	teqne	r3, ip
 80251f2:	d069      	beq.n	80252c8 <__aeabi_fdiv+0xec>
 80251f4:	eba2 0203 	sub.w	r2, r2, r3
 80251f8:	ea80 0c01 	eor.w	ip, r0, r1
 80251fc:	0249      	lsls	r1, r1, #9
 80251fe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8025202:	d037      	beq.n	8025274 <__aeabi_fdiv+0x98>
 8025204:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8025208:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 802520c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8025210:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8025214:	428b      	cmp	r3, r1
 8025216:	bf38      	it	cc
 8025218:	005b      	lslcc	r3, r3, #1
 802521a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 802521e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8025222:	428b      	cmp	r3, r1
 8025224:	bf24      	itt	cs
 8025226:	1a5b      	subcs	r3, r3, r1
 8025228:	ea40 000c 	orrcs.w	r0, r0, ip
 802522c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8025230:	bf24      	itt	cs
 8025232:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8025236:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 802523a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 802523e:	bf24      	itt	cs
 8025240:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8025244:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8025248:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 802524c:	bf24      	itt	cs
 802524e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8025252:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8025256:	011b      	lsls	r3, r3, #4
 8025258:	bf18      	it	ne
 802525a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 802525e:	d1e0      	bne.n	8025222 <__aeabi_fdiv+0x46>
 8025260:	2afd      	cmp	r2, #253	; 0xfd
 8025262:	f63f af50 	bhi.w	8025106 <__aeabi_fmul+0x92>
 8025266:	428b      	cmp	r3, r1
 8025268:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 802526c:	bf08      	it	eq
 802526e:	f020 0001 	biceq.w	r0, r0, #1
 8025272:	4770      	bx	lr
 8025274:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8025278:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 802527c:	327f      	adds	r2, #127	; 0x7f
 802527e:	bfc2      	ittt	gt
 8025280:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8025284:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8025288:	4770      	bxgt	lr
 802528a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 802528e:	f04f 0300 	mov.w	r3, #0
 8025292:	3a01      	subs	r2, #1
 8025294:	e737      	b.n	8025106 <__aeabi_fmul+0x92>
 8025296:	f092 0f00 	teq	r2, #0
 802529a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 802529e:	bf02      	ittt	eq
 80252a0:	0040      	lsleq	r0, r0, #1
 80252a2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80252a6:	3a01      	subeq	r2, #1
 80252a8:	d0f9      	beq.n	802529e <__aeabi_fdiv+0xc2>
 80252aa:	ea40 000c 	orr.w	r0, r0, ip
 80252ae:	f093 0f00 	teq	r3, #0
 80252b2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80252b6:	bf02      	ittt	eq
 80252b8:	0049      	lsleq	r1, r1, #1
 80252ba:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80252be:	3b01      	subeq	r3, #1
 80252c0:	d0f9      	beq.n	80252b6 <__aeabi_fdiv+0xda>
 80252c2:	ea41 010c 	orr.w	r1, r1, ip
 80252c6:	e795      	b.n	80251f4 <__aeabi_fdiv+0x18>
 80252c8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80252cc:	ea92 0f0c 	teq	r2, ip
 80252d0:	d108      	bne.n	80252e4 <__aeabi_fdiv+0x108>
 80252d2:	0242      	lsls	r2, r0, #9
 80252d4:	f47f af7d 	bne.w	80251d2 <__aeabi_fmul+0x15e>
 80252d8:	ea93 0f0c 	teq	r3, ip
 80252dc:	f47f af70 	bne.w	80251c0 <__aeabi_fmul+0x14c>
 80252e0:	4608      	mov	r0, r1
 80252e2:	e776      	b.n	80251d2 <__aeabi_fmul+0x15e>
 80252e4:	ea93 0f0c 	teq	r3, ip
 80252e8:	d104      	bne.n	80252f4 <__aeabi_fdiv+0x118>
 80252ea:	024b      	lsls	r3, r1, #9
 80252ec:	f43f af4c 	beq.w	8025188 <__aeabi_fmul+0x114>
 80252f0:	4608      	mov	r0, r1
 80252f2:	e76e      	b.n	80251d2 <__aeabi_fmul+0x15e>
 80252f4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80252f8:	bf18      	it	ne
 80252fa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80252fe:	d1ca      	bne.n	8025296 <__aeabi_fdiv+0xba>
 8025300:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8025304:	f47f af5c 	bne.w	80251c0 <__aeabi_fmul+0x14c>
 8025308:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 802530c:	f47f af3c 	bne.w	8025188 <__aeabi_fmul+0x114>
 8025310:	e75f      	b.n	80251d2 <__aeabi_fmul+0x15e>
 8025312:	bf00      	nop

08025314 <__gesf2>:
 8025314:	f04f 3cff 	mov.w	ip, #4294967295
 8025318:	e006      	b.n	8025328 <__cmpsf2+0x4>
 802531a:	bf00      	nop

0802531c <__lesf2>:
 802531c:	f04f 0c01 	mov.w	ip, #1
 8025320:	e002      	b.n	8025328 <__cmpsf2+0x4>
 8025322:	bf00      	nop

08025324 <__cmpsf2>:
 8025324:	f04f 0c01 	mov.w	ip, #1
 8025328:	f84d cd04 	str.w	ip, [sp, #-4]!
 802532c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8025330:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8025334:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8025338:	bf18      	it	ne
 802533a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 802533e:	d011      	beq.n	8025364 <__cmpsf2+0x40>
 8025340:	b001      	add	sp, #4
 8025342:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8025346:	bf18      	it	ne
 8025348:	ea90 0f01 	teqne	r0, r1
 802534c:	bf58      	it	pl
 802534e:	ebb2 0003 	subspl.w	r0, r2, r3
 8025352:	bf88      	it	hi
 8025354:	17c8      	asrhi	r0, r1, #31
 8025356:	bf38      	it	cc
 8025358:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 802535c:	bf18      	it	ne
 802535e:	f040 0001 	orrne.w	r0, r0, #1
 8025362:	4770      	bx	lr
 8025364:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8025368:	d102      	bne.n	8025370 <__cmpsf2+0x4c>
 802536a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 802536e:	d105      	bne.n	802537c <__cmpsf2+0x58>
 8025370:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8025374:	d1e4      	bne.n	8025340 <__cmpsf2+0x1c>
 8025376:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 802537a:	d0e1      	beq.n	8025340 <__cmpsf2+0x1c>
 802537c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8025380:	4770      	bx	lr
 8025382:	bf00      	nop

08025384 <__aeabi_cfrcmple>:
 8025384:	4684      	mov	ip, r0
 8025386:	4608      	mov	r0, r1
 8025388:	4661      	mov	r1, ip
 802538a:	e7ff      	b.n	802538c <__aeabi_cfcmpeq>

0802538c <__aeabi_cfcmpeq>:
 802538c:	b50f      	push	{r0, r1, r2, r3, lr}
 802538e:	f7ff ffc9 	bl	8025324 <__cmpsf2>
 8025392:	2800      	cmp	r0, #0
 8025394:	bf48      	it	mi
 8025396:	f110 0f00 	cmnmi.w	r0, #0
 802539a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0802539c <__aeabi_fcmpeq>:
 802539c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80253a0:	f7ff fff4 	bl	802538c <__aeabi_cfcmpeq>
 80253a4:	bf0c      	ite	eq
 80253a6:	2001      	moveq	r0, #1
 80253a8:	2000      	movne	r0, #0
 80253aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80253ae:	bf00      	nop

080253b0 <__aeabi_fcmplt>:
 80253b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80253b4:	f7ff ffea 	bl	802538c <__aeabi_cfcmpeq>
 80253b8:	bf34      	ite	cc
 80253ba:	2001      	movcc	r0, #1
 80253bc:	2000      	movcs	r0, #0
 80253be:	f85d fb08 	ldr.w	pc, [sp], #8
 80253c2:	bf00      	nop

080253c4 <__aeabi_fcmple>:
 80253c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80253c8:	f7ff ffe0 	bl	802538c <__aeabi_cfcmpeq>
 80253cc:	bf94      	ite	ls
 80253ce:	2001      	movls	r0, #1
 80253d0:	2000      	movhi	r0, #0
 80253d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80253d6:	bf00      	nop

080253d8 <__aeabi_fcmpge>:
 80253d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80253dc:	f7ff ffd2 	bl	8025384 <__aeabi_cfrcmple>
 80253e0:	bf94      	ite	ls
 80253e2:	2001      	movls	r0, #1
 80253e4:	2000      	movhi	r0, #0
 80253e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80253ea:	bf00      	nop

080253ec <__aeabi_fcmpgt>:
 80253ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80253f0:	f7ff ffc8 	bl	8025384 <__aeabi_cfrcmple>
 80253f4:	bf34      	ite	cc
 80253f6:	2001      	movcc	r0, #1
 80253f8:	2000      	movcs	r0, #0
 80253fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80253fe:	bf00      	nop

08025400 <__aeabi_fcmpun>:
 8025400:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8025404:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8025408:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 802540c:	d102      	bne.n	8025414 <__aeabi_fcmpun+0x14>
 802540e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8025412:	d108      	bne.n	8025426 <__aeabi_fcmpun+0x26>
 8025414:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8025418:	d102      	bne.n	8025420 <__aeabi_fcmpun+0x20>
 802541a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 802541e:	d102      	bne.n	8025426 <__aeabi_fcmpun+0x26>
 8025420:	f04f 0000 	mov.w	r0, #0
 8025424:	4770      	bx	lr
 8025426:	f04f 0001 	mov.w	r0, #1
 802542a:	4770      	bx	lr

0802542c <__aeabi_uldivmod>:
 802542c:	b953      	cbnz	r3, 8025444 <__aeabi_uldivmod+0x18>
 802542e:	b94a      	cbnz	r2, 8025444 <__aeabi_uldivmod+0x18>
 8025430:	2900      	cmp	r1, #0
 8025432:	bf08      	it	eq
 8025434:	2800      	cmpeq	r0, #0
 8025436:	bf1c      	itt	ne
 8025438:	f04f 31ff 	movne.w	r1, #4294967295
 802543c:	f04f 30ff 	movne.w	r0, #4294967295
 8025440:	f001 b81c 	b.w	802647c <__aeabi_idiv0>
 8025444:	b082      	sub	sp, #8
 8025446:	46ec      	mov	ip, sp
 8025448:	e92d 5000 	stmdb	sp!, {ip, lr}
 802544c:	f000 f842 	bl	80254d4 <__gnu_uldivmod_helper>
 8025450:	f8dd e004 	ldr.w	lr, [sp, #4]
 8025454:	b002      	add	sp, #8
 8025456:	bc0c      	pop	{r2, r3}
 8025458:	4770      	bx	lr
 802545a:	bf00      	nop

0802545c <__aeabi_d2ulz>:
 802545c:	b5d0      	push	{r4, r6, r7, lr}
 802545e:	2200      	movs	r2, #0
 8025460:	4b0e      	ldr	r3, [pc, #56]	; (802549c <__aeabi_d2ulz+0x40>)
 8025462:	4606      	mov	r6, r0
 8025464:	460f      	mov	r7, r1
 8025466:	f7ff f9c5 	bl	80247f4 <__aeabi_dmul>
 802546a:	f7ff fc85 	bl	8024d78 <__aeabi_d2uiz>
 802546e:	4604      	mov	r4, r0
 8025470:	f7ff f94a 	bl	8024708 <__aeabi_ui2d>
 8025474:	2200      	movs	r2, #0
 8025476:	4b0a      	ldr	r3, [pc, #40]	; (80254a0 <__aeabi_d2ulz+0x44>)
 8025478:	f7ff f9bc 	bl	80247f4 <__aeabi_dmul>
 802547c:	4602      	mov	r2, r0
 802547e:	460b      	mov	r3, r1
 8025480:	4630      	mov	r0, r6
 8025482:	4639      	mov	r1, r7
 8025484:	f7ff f802 	bl	802448c <__aeabi_dsub>
 8025488:	f7ff fc76 	bl	8024d78 <__aeabi_d2uiz>
 802548c:	4623      	mov	r3, r4
 802548e:	2200      	movs	r2, #0
 8025490:	ea42 0200 	orr.w	r2, r2, r0
 8025494:	4610      	mov	r0, r2
 8025496:	4619      	mov	r1, r3
 8025498:	bdd0      	pop	{r4, r6, r7, pc}
 802549a:	bf00      	nop
 802549c:	3df00000 	.word	0x3df00000
 80254a0:	41f00000 	.word	0x41f00000

080254a4 <__gnu_ldivmod_helper>:
 80254a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80254a8:	9c06      	ldr	r4, [sp, #24]
 80254aa:	4615      	mov	r5, r2
 80254ac:	4606      	mov	r6, r0
 80254ae:	460f      	mov	r7, r1
 80254b0:	4698      	mov	r8, r3
 80254b2:	f000 ffe5 	bl	8026480 <__divdi3>
 80254b6:	fb05 f301 	mul.w	r3, r5, r1
 80254ba:	fb00 3808 	mla	r8, r0, r8, r3
 80254be:	fba5 2300 	umull	r2, r3, r5, r0
 80254c2:	1ab2      	subs	r2, r6, r2
 80254c4:	4443      	add	r3, r8
 80254c6:	eb67 0303 	sbc.w	r3, r7, r3
 80254ca:	e9c4 2300 	strd	r2, r3, [r4]
 80254ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80254d2:	bf00      	nop

080254d4 <__gnu_uldivmod_helper>:
 80254d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80254d8:	9c06      	ldr	r4, [sp, #24]
 80254da:	4690      	mov	r8, r2
 80254dc:	4606      	mov	r6, r0
 80254de:	460f      	mov	r7, r1
 80254e0:	461d      	mov	r5, r3
 80254e2:	f001 f91b 	bl	802671c <__udivdi3>
 80254e6:	fb00 f505 	mul.w	r5, r0, r5
 80254ea:	fba0 2308 	umull	r2, r3, r0, r8
 80254ee:	fb08 5501 	mla	r5, r8, r1, r5
 80254f2:	1ab2      	subs	r2, r6, r2
 80254f4:	442b      	add	r3, r5
 80254f6:	eb67 0303 	sbc.w	r3, r7, r3
 80254fa:	e9c4 2300 	strd	r2, r3, [r4]
 80254fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025502:	bf00      	nop

08025504 <selfrel_offset31>:
 8025504:	6803      	ldr	r3, [r0, #0]
 8025506:	005a      	lsls	r2, r3, #1
 8025508:	bf4c      	ite	mi
 802550a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 802550e:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8025512:	4418      	add	r0, r3
 8025514:	4770      	bx	lr
 8025516:	bf00      	nop

08025518 <search_EIT_table>:
 8025518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802551c:	b083      	sub	sp, #12
 802551e:	b399      	cbz	r1, 8025588 <search_EIT_table+0x70>
 8025520:	1e4b      	subs	r3, r1, #1
 8025522:	4617      	mov	r7, r2
 8025524:	4605      	mov	r5, r0
 8025526:	9301      	str	r3, [sp, #4]
 8025528:	4698      	mov	r8, r3
 802552a:	2600      	movs	r6, #0
 802552c:	eb06 0408 	add.w	r4, r6, r8
 8025530:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8025534:	1064      	asrs	r4, r4, #1
 8025536:	ea4f 0ac4 	mov.w	sl, r4, lsl #3
 802553a:	eb05 0b0a 	add.w	fp, r5, sl
 802553e:	4658      	mov	r0, fp
 8025540:	f7ff ffe0 	bl	8025504 <selfrel_offset31>
 8025544:	9b01      	ldr	r3, [sp, #4]
 8025546:	4681      	mov	r9, r0
 8025548:	42a3      	cmp	r3, r4
 802554a:	f10a 0008 	add.w	r0, sl, #8
 802554e:	4428      	add	r0, r5
 8025550:	d00e      	beq.n	8025570 <search_EIT_table+0x58>
 8025552:	f7ff ffd7 	bl	8025504 <selfrel_offset31>
 8025556:	45b9      	cmp	r9, r7
 8025558:	f100 30ff 	add.w	r0, r0, #4294967295
 802555c:	d904      	bls.n	8025568 <search_EIT_table+0x50>
 802555e:	42b4      	cmp	r4, r6
 8025560:	d00c      	beq.n	802557c <search_EIT_table+0x64>
 8025562:	f104 38ff 	add.w	r8, r4, #4294967295
 8025566:	e7e1      	b.n	802552c <search_EIT_table+0x14>
 8025568:	42b8      	cmp	r0, r7
 802556a:	d203      	bcs.n	8025574 <search_EIT_table+0x5c>
 802556c:	1c66      	adds	r6, r4, #1
 802556e:	e7dd      	b.n	802552c <search_EIT_table+0x14>
 8025570:	45b9      	cmp	r9, r7
 8025572:	d8f4      	bhi.n	802555e <search_EIT_table+0x46>
 8025574:	4658      	mov	r0, fp
 8025576:	b003      	add	sp, #12
 8025578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802557c:	f04f 0b00 	mov.w	fp, #0
 8025580:	4658      	mov	r0, fp
 8025582:	b003      	add	sp, #12
 8025584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025588:	468b      	mov	fp, r1
 802558a:	4658      	mov	r0, fp
 802558c:	b003      	add	sp, #12
 802558e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025592:	bf00      	nop

08025594 <__gnu_unwind_get_pr_addr>:
 8025594:	2801      	cmp	r0, #1
 8025596:	d007      	beq.n	80255a8 <__gnu_unwind_get_pr_addr+0x14>
 8025598:	2802      	cmp	r0, #2
 802559a:	d007      	beq.n	80255ac <__gnu_unwind_get_pr_addr+0x18>
 802559c:	4b04      	ldr	r3, [pc, #16]	; (80255b0 <__gnu_unwind_get_pr_addr+0x1c>)
 802559e:	2800      	cmp	r0, #0
 80255a0:	bf0c      	ite	eq
 80255a2:	4618      	moveq	r0, r3
 80255a4:	2000      	movne	r0, #0
 80255a6:	4770      	bx	lr
 80255a8:	4802      	ldr	r0, [pc, #8]	; (80255b4 <__gnu_unwind_get_pr_addr+0x20>)
 80255aa:	4770      	bx	lr
 80255ac:	4802      	ldr	r0, [pc, #8]	; (80255b8 <__gnu_unwind_get_pr_addr+0x24>)
 80255ae:	4770      	bx	lr
 80255b0:	08025ca1 	.word	0x08025ca1
 80255b4:	08025ca5 	.word	0x08025ca5
 80255b8:	08025ca9 	.word	0x08025ca9

080255bc <get_eit_entry>:
 80255bc:	b530      	push	{r4, r5, lr}
 80255be:	4b24      	ldr	r3, [pc, #144]	; (8025650 <get_eit_entry+0x94>)
 80255c0:	b083      	sub	sp, #12
 80255c2:	4604      	mov	r4, r0
 80255c4:	1e8d      	subs	r5, r1, #2
 80255c6:	b37b      	cbz	r3, 8025628 <get_eit_entry+0x6c>
 80255c8:	4628      	mov	r0, r5
 80255ca:	a901      	add	r1, sp, #4
 80255cc:	f3af 8000 	nop.w
 80255d0:	b320      	cbz	r0, 802561c <get_eit_entry+0x60>
 80255d2:	9901      	ldr	r1, [sp, #4]
 80255d4:	462a      	mov	r2, r5
 80255d6:	f7ff ff9f 	bl	8025518 <search_EIT_table>
 80255da:	4605      	mov	r5, r0
 80255dc:	b1f0      	cbz	r0, 802561c <get_eit_entry+0x60>
 80255de:	f7ff ff91 	bl	8025504 <selfrel_offset31>
 80255e2:	686b      	ldr	r3, [r5, #4]
 80255e4:	64a0      	str	r0, [r4, #72]	; 0x48
 80255e6:	2b01      	cmp	r3, #1
 80255e8:	d012      	beq.n	8025610 <get_eit_entry+0x54>
 80255ea:	2b00      	cmp	r3, #0
 80255ec:	f105 0004 	add.w	r0, r5, #4
 80255f0:	db20      	blt.n	8025634 <get_eit_entry+0x78>
 80255f2:	f7ff ff87 	bl	8025504 <selfrel_offset31>
 80255f6:	2300      	movs	r3, #0
 80255f8:	64e0      	str	r0, [r4, #76]	; 0x4c
 80255fa:	6523      	str	r3, [r4, #80]	; 0x50
 80255fc:	6803      	ldr	r3, [r0, #0]
 80255fe:	2b00      	cmp	r3, #0
 8025600:	db1c      	blt.n	802563c <get_eit_entry+0x80>
 8025602:	f7ff ff7f 	bl	8025504 <selfrel_offset31>
 8025606:	2300      	movs	r3, #0
 8025608:	6120      	str	r0, [r4, #16]
 802560a:	4618      	mov	r0, r3
 802560c:	b003      	add	sp, #12
 802560e:	bd30      	pop	{r4, r5, pc}
 8025610:	2300      	movs	r3, #0
 8025612:	6123      	str	r3, [r4, #16]
 8025614:	2305      	movs	r3, #5
 8025616:	4618      	mov	r0, r3
 8025618:	b003      	add	sp, #12
 802561a:	bd30      	pop	{r4, r5, pc}
 802561c:	2300      	movs	r3, #0
 802561e:	6123      	str	r3, [r4, #16]
 8025620:	2309      	movs	r3, #9
 8025622:	4618      	mov	r0, r3
 8025624:	b003      	add	sp, #12
 8025626:	bd30      	pop	{r4, r5, pc}
 8025628:	490a      	ldr	r1, [pc, #40]	; (8025654 <get_eit_entry+0x98>)
 802562a:	480b      	ldr	r0, [pc, #44]	; (8025658 <get_eit_entry+0x9c>)
 802562c:	1a09      	subs	r1, r1, r0
 802562e:	10c9      	asrs	r1, r1, #3
 8025630:	9101      	str	r1, [sp, #4]
 8025632:	e7cf      	b.n	80255d4 <get_eit_entry+0x18>
 8025634:	2301      	movs	r3, #1
 8025636:	64e0      	str	r0, [r4, #76]	; 0x4c
 8025638:	6523      	str	r3, [r4, #80]	; 0x50
 802563a:	e7df      	b.n	80255fc <get_eit_entry+0x40>
 802563c:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8025640:	f7ff ffa8 	bl	8025594 <__gnu_unwind_get_pr_addr>
 8025644:	2800      	cmp	r0, #0
 8025646:	6120      	str	r0, [r4, #16]
 8025648:	bf0c      	ite	eq
 802564a:	2309      	moveq	r3, #9
 802564c:	2300      	movne	r3, #0
 802564e:	e7dc      	b.n	802560a <get_eit_entry+0x4e>
 8025650:	00000000 	.word	0x00000000
 8025654:	080275a8 	.word	0x080275a8
 8025658:	080274e0 	.word	0x080274e0

0802565c <restore_non_core_regs>:
 802565c:	6803      	ldr	r3, [r0, #0]
 802565e:	07da      	lsls	r2, r3, #31
 8025660:	b510      	push	{r4, lr}
 8025662:	4604      	mov	r4, r0
 8025664:	d406      	bmi.n	8025674 <restore_non_core_regs+0x18>
 8025666:	079b      	lsls	r3, r3, #30
 8025668:	f100 0048 	add.w	r0, r0, #72	; 0x48
 802566c:	d509      	bpl.n	8025682 <restore_non_core_regs+0x26>
 802566e:	f000 fc85 	bl	8025f7c <__gnu_Unwind_Restore_VFP_D>
 8025672:	6823      	ldr	r3, [r4, #0]
 8025674:	0759      	lsls	r1, r3, #29
 8025676:	d509      	bpl.n	802568c <restore_non_core_regs+0x30>
 8025678:	071a      	lsls	r2, r3, #28
 802567a:	d50e      	bpl.n	802569a <restore_non_core_regs+0x3e>
 802567c:	06db      	lsls	r3, r3, #27
 802567e:	d513      	bpl.n	80256a8 <restore_non_core_regs+0x4c>
 8025680:	bd10      	pop	{r4, pc}
 8025682:	f000 fc73 	bl	8025f6c <__gnu_Unwind_Restore_VFP>
 8025686:	6823      	ldr	r3, [r4, #0]
 8025688:	0759      	lsls	r1, r3, #29
 802568a:	d4f5      	bmi.n	8025678 <restore_non_core_regs+0x1c>
 802568c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8025690:	f000 fc7c 	bl	8025f8c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8025694:	6823      	ldr	r3, [r4, #0]
 8025696:	071a      	lsls	r2, r3, #28
 8025698:	d4f0      	bmi.n	802567c <restore_non_core_regs+0x20>
 802569a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 802569e:	f000 fc7d 	bl	8025f9c <__gnu_Unwind_Restore_WMMXD>
 80256a2:	6823      	ldr	r3, [r4, #0]
 80256a4:	06db      	lsls	r3, r3, #27
 80256a6:	d4eb      	bmi.n	8025680 <restore_non_core_regs+0x24>
 80256a8:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 80256ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80256b0:	f000 bcb8 	b.w	8026024 <__gnu_Unwind_Restore_WMMXC>

080256b4 <_Unwind_decode_typeinfo_ptr.isra.0>:
 80256b4:	6803      	ldr	r3, [r0, #0]
 80256b6:	b10b      	cbz	r3, 80256bc <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
 80256b8:	4418      	add	r0, r3
 80256ba:	4770      	bx	lr
 80256bc:	4618      	mov	r0, r3
 80256be:	4770      	bx	lr

080256c0 <__gnu_unwind_24bit.isra.1>:
 80256c0:	2009      	movs	r0, #9
 80256c2:	4770      	bx	lr

080256c4 <_Unwind_DebugHook>:
 80256c4:	4770      	bx	lr
 80256c6:	bf00      	nop

080256c8 <unwind_phase2>:
 80256c8:	b570      	push	{r4, r5, r6, lr}
 80256ca:	4604      	mov	r4, r0
 80256cc:	460d      	mov	r5, r1
 80256ce:	e008      	b.n	80256e2 <unwind_phase2+0x1a>
 80256d0:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80256d2:	6163      	str	r3, [r4, #20]
 80256d4:	2001      	movs	r0, #1
 80256d6:	6923      	ldr	r3, [r4, #16]
 80256d8:	4621      	mov	r1, r4
 80256da:	462a      	mov	r2, r5
 80256dc:	4798      	blx	r3
 80256de:	2808      	cmp	r0, #8
 80256e0:	d108      	bne.n	80256f4 <unwind_phase2+0x2c>
 80256e2:	4620      	mov	r0, r4
 80256e4:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80256e6:	f7ff ff69 	bl	80255bc <get_eit_entry>
 80256ea:	4606      	mov	r6, r0
 80256ec:	2800      	cmp	r0, #0
 80256ee:	d0ef      	beq.n	80256d0 <unwind_phase2+0x8>
 80256f0:	f7fa fba6 	bl	801fe40 <abort>
 80256f4:	2807      	cmp	r0, #7
 80256f6:	d1fb      	bne.n	80256f0 <unwind_phase2+0x28>
 80256f8:	4630      	mov	r0, r6
 80256fa:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80256fc:	f7ff ffe2 	bl	80256c4 <_Unwind_DebugHook>
 8025700:	1d28      	adds	r0, r5, #4
 8025702:	f000 fc27 	bl	8025f54 <__restore_core_regs>
 8025706:	bf00      	nop

08025708 <unwind_phase2_forced>:
 8025708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802570c:	1d0c      	adds	r4, r1, #4
 802570e:	4606      	mov	r6, r0
 8025710:	4617      	mov	r7, r2
 8025712:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8025714:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8025718:	ad03      	add	r5, sp, #12
 802571a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802571c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802571e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8025720:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8025722:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8025724:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8025728:	ac02      	add	r4, sp, #8
 802572a:	f04f 0e00 	mov.w	lr, #0
 802572e:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8025732:	f8d6 9018 	ldr.w	r9, [r6, #24]
 8025736:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 802573a:	4630      	mov	r0, r6
 802573c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802573e:	f8c4 e000 	str.w	lr, [r4]
 8025742:	f7ff ff3b 	bl	80255bc <get_eit_entry>
 8025746:	2f00      	cmp	r7, #0
 8025748:	4605      	mov	r5, r0
 802574a:	bf0c      	ite	eq
 802574c:	2709      	moveq	r7, #9
 802574e:	270a      	movne	r7, #10
 8025750:	b17d      	cbz	r5, 8025772 <unwind_phase2_forced+0x6a>
 8025752:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8025754:	f047 0110 	orr.w	r1, r7, #16
 8025758:	e88d 0210 	stmia.w	sp, {r4, r9}
 802575c:	2001      	movs	r0, #1
 802575e:	6463      	str	r3, [r4, #68]	; 0x44
 8025760:	4632      	mov	r2, r6
 8025762:	4633      	mov	r3, r6
 8025764:	47c0      	blx	r8
 8025766:	bb78      	cbnz	r0, 80257c8 <unwind_phase2_forced+0xc0>
 8025768:	4628      	mov	r0, r5
 802576a:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 802576e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025772:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8025774:	6173      	str	r3, [r6, #20]
 8025776:	4621      	mov	r1, r4
 8025778:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 802577c:	a87a      	add	r0, sp, #488	; 0x1e8
 802577e:	f7fa fdc6 	bl	802030e <memcpy>
 8025782:	6933      	ldr	r3, [r6, #16]
 8025784:	4631      	mov	r1, r6
 8025786:	aa7a      	add	r2, sp, #488	; 0x1e8
 8025788:	4638      	mov	r0, r7
 802578a:	4798      	blx	r3
 802578c:	9b88      	ldr	r3, [sp, #544]	; 0x220
 802578e:	4682      	mov	sl, r0
 8025790:	e88d 0210 	stmia.w	sp, {r4, r9}
 8025794:	4639      	mov	r1, r7
 8025796:	6463      	str	r3, [r4, #68]	; 0x44
 8025798:	2001      	movs	r0, #1
 802579a:	4632      	mov	r2, r6
 802579c:	4633      	mov	r3, r6
 802579e:	47c0      	blx	r8
 80257a0:	b990      	cbnz	r0, 80257c8 <unwind_phase2_forced+0xc0>
 80257a2:	4620      	mov	r0, r4
 80257a4:	a97a      	add	r1, sp, #488	; 0x1e8
 80257a6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80257aa:	f7fa fdb0 	bl	802030e <memcpy>
 80257ae:	f1ba 0f08 	cmp.w	sl, #8
 80257b2:	d106      	bne.n	80257c2 <unwind_phase2_forced+0xba>
 80257b4:	4630      	mov	r0, r6
 80257b6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80257b8:	f7ff ff00 	bl	80255bc <get_eit_entry>
 80257bc:	2709      	movs	r7, #9
 80257be:	4605      	mov	r5, r0
 80257c0:	e7c6      	b.n	8025750 <unwind_phase2_forced+0x48>
 80257c2:	f1ba 0f07 	cmp.w	sl, #7
 80257c6:	d004      	beq.n	80257d2 <unwind_phase2_forced+0xca>
 80257c8:	2009      	movs	r0, #9
 80257ca:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80257ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80257d2:	4628      	mov	r0, r5
 80257d4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80257d6:	f7ff ff75 	bl	80256c4 <_Unwind_DebugHook>
 80257da:	a803      	add	r0, sp, #12
 80257dc:	f000 fbba 	bl	8025f54 <__restore_core_regs>

080257e0 <_Unwind_GetCFA>:
 80257e0:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80257e2:	4770      	bx	lr

080257e4 <__gnu_Unwind_RaiseException>:
 80257e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80257e6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80257e8:	640b      	str	r3, [r1, #64]	; 0x40
 80257ea:	1d0e      	adds	r6, r1, #4
 80257ec:	460f      	mov	r7, r1
 80257ee:	4604      	mov	r4, r0
 80257f0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80257f2:	b0f9      	sub	sp, #484	; 0x1e4
 80257f4:	ad01      	add	r5, sp, #4
 80257f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80257f8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80257fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80257fc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80257fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8025800:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8025804:	f04f 36ff 	mov.w	r6, #4294967295
 8025808:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 802580c:	9600      	str	r6, [sp, #0]
 802580e:	e006      	b.n	802581e <__gnu_Unwind_RaiseException+0x3a>
 8025810:	6923      	ldr	r3, [r4, #16]
 8025812:	4621      	mov	r1, r4
 8025814:	466a      	mov	r2, sp
 8025816:	4798      	blx	r3
 8025818:	2808      	cmp	r0, #8
 802581a:	4605      	mov	r5, r0
 802581c:	d108      	bne.n	8025830 <__gnu_Unwind_RaiseException+0x4c>
 802581e:	4620      	mov	r0, r4
 8025820:	9910      	ldr	r1, [sp, #64]	; 0x40
 8025822:	f7ff fecb 	bl	80255bc <get_eit_entry>
 8025826:	2800      	cmp	r0, #0
 8025828:	d0f2      	beq.n	8025810 <__gnu_Unwind_RaiseException+0x2c>
 802582a:	2009      	movs	r0, #9
 802582c:	b079      	add	sp, #484	; 0x1e4
 802582e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025830:	4668      	mov	r0, sp
 8025832:	f7ff ff13 	bl	802565c <restore_non_core_regs>
 8025836:	2d06      	cmp	r5, #6
 8025838:	d1f7      	bne.n	802582a <__gnu_Unwind_RaiseException+0x46>
 802583a:	4620      	mov	r0, r4
 802583c:	4639      	mov	r1, r7
 802583e:	f7ff ff43 	bl	80256c8 <unwind_phase2>
 8025842:	bf00      	nop

08025844 <__gnu_Unwind_ForcedUnwind>:
 8025844:	b430      	push	{r4, r5}
 8025846:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8025848:	60c1      	str	r1, [r0, #12]
 802584a:	6182      	str	r2, [r0, #24]
 802584c:	4619      	mov	r1, r3
 802584e:	641d      	str	r5, [r3, #64]	; 0x40
 8025850:	2200      	movs	r2, #0
 8025852:	bc30      	pop	{r4, r5}
 8025854:	e758      	b.n	8025708 <unwind_phase2_forced>
 8025856:	bf00      	nop

08025858 <__gnu_Unwind_Resume>:
 8025858:	b570      	push	{r4, r5, r6, lr}
 802585a:	68c6      	ldr	r6, [r0, #12]
 802585c:	6943      	ldr	r3, [r0, #20]
 802585e:	640b      	str	r3, [r1, #64]	; 0x40
 8025860:	4604      	mov	r4, r0
 8025862:	460d      	mov	r5, r1
 8025864:	b126      	cbz	r6, 8025870 <__gnu_Unwind_Resume+0x18>
 8025866:	2201      	movs	r2, #1
 8025868:	f7ff ff4e 	bl	8025708 <unwind_phase2_forced>
 802586c:	f7fa fae8 	bl	801fe40 <abort>
 8025870:	6903      	ldr	r3, [r0, #16]
 8025872:	4621      	mov	r1, r4
 8025874:	2002      	movs	r0, #2
 8025876:	462a      	mov	r2, r5
 8025878:	4798      	blx	r3
 802587a:	2807      	cmp	r0, #7
 802587c:	d007      	beq.n	802588e <__gnu_Unwind_Resume+0x36>
 802587e:	2808      	cmp	r0, #8
 8025880:	d103      	bne.n	802588a <__gnu_Unwind_Resume+0x32>
 8025882:	4620      	mov	r0, r4
 8025884:	4629      	mov	r1, r5
 8025886:	f7ff ff1f 	bl	80256c8 <unwind_phase2>
 802588a:	f7fa fad9 	bl	801fe40 <abort>
 802588e:	4630      	mov	r0, r6
 8025890:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8025892:	f7ff ff17 	bl	80256c4 <_Unwind_DebugHook>
 8025896:	1d28      	adds	r0, r5, #4
 8025898:	f000 fb5c 	bl	8025f54 <__restore_core_regs>

0802589c <__gnu_Unwind_Resume_or_Rethrow>:
 802589c:	68c2      	ldr	r2, [r0, #12]
 802589e:	b11a      	cbz	r2, 80258a8 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 80258a0:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 80258a2:	640a      	str	r2, [r1, #64]	; 0x40
 80258a4:	2200      	movs	r2, #0
 80258a6:	e72f      	b.n	8025708 <unwind_phase2_forced>
 80258a8:	e79c      	b.n	80257e4 <__gnu_Unwind_RaiseException>
 80258aa:	bf00      	nop

080258ac <_Unwind_Complete>:
 80258ac:	4770      	bx	lr
 80258ae:	bf00      	nop

080258b0 <_Unwind_DeleteException>:
 80258b0:	6883      	ldr	r3, [r0, #8]
 80258b2:	b113      	cbz	r3, 80258ba <_Unwind_DeleteException+0xa>
 80258b4:	4601      	mov	r1, r0
 80258b6:	2001      	movs	r0, #1
 80258b8:	4718      	bx	r3
 80258ba:	4770      	bx	lr

080258bc <_Unwind_VRS_Get>:
 80258bc:	b500      	push	{lr}
 80258be:	2904      	cmp	r1, #4
 80258c0:	d807      	bhi.n	80258d2 <_Unwind_VRS_Get+0x16>
 80258c2:	e8df f001 	tbb	[pc, r1]
 80258c6:	0903      	.short	0x0903
 80258c8:	0906      	.short	0x0906
 80258ca:	09          	.byte	0x09
 80258cb:	00          	.byte	0x00
 80258cc:	b90b      	cbnz	r3, 80258d2 <_Unwind_VRS_Get+0x16>
 80258ce:	2a0f      	cmp	r2, #15
 80258d0:	d905      	bls.n	80258de <_Unwind_VRS_Get+0x22>
 80258d2:	2002      	movs	r0, #2
 80258d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80258d8:	2001      	movs	r0, #1
 80258da:	f85d fb04 	ldr.w	pc, [sp], #4
 80258de:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80258e2:	4618      	mov	r0, r3
 80258e4:	6853      	ldr	r3, [r2, #4]
 80258e6:	9a01      	ldr	r2, [sp, #4]
 80258e8:	6013      	str	r3, [r2, #0]
 80258ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80258ee:	bf00      	nop

080258f0 <_Unwind_GetGR>:
 80258f0:	b500      	push	{lr}
 80258f2:	b085      	sub	sp, #20
 80258f4:	460a      	mov	r2, r1
 80258f6:	ab03      	add	r3, sp, #12
 80258f8:	2100      	movs	r1, #0
 80258fa:	9300      	str	r3, [sp, #0]
 80258fc:	460b      	mov	r3, r1
 80258fe:	f7ff ffdd 	bl	80258bc <_Unwind_VRS_Get>
 8025902:	9803      	ldr	r0, [sp, #12]
 8025904:	b005      	add	sp, #20
 8025906:	f85d fb04 	ldr.w	pc, [sp], #4
 802590a:	bf00      	nop

0802590c <_Unwind_VRS_Set>:
 802590c:	b500      	push	{lr}
 802590e:	2904      	cmp	r1, #4
 8025910:	d807      	bhi.n	8025922 <_Unwind_VRS_Set+0x16>
 8025912:	e8df f001 	tbb	[pc, r1]
 8025916:	0903      	.short	0x0903
 8025918:	0906      	.short	0x0906
 802591a:	09          	.byte	0x09
 802591b:	00          	.byte	0x00
 802591c:	b90b      	cbnz	r3, 8025922 <_Unwind_VRS_Set+0x16>
 802591e:	2a0f      	cmp	r2, #15
 8025920:	d905      	bls.n	802592e <_Unwind_VRS_Set+0x22>
 8025922:	2002      	movs	r0, #2
 8025924:	f85d fb04 	ldr.w	pc, [sp], #4
 8025928:	2001      	movs	r0, #1
 802592a:	f85d fb04 	ldr.w	pc, [sp], #4
 802592e:	9901      	ldr	r1, [sp, #4]
 8025930:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8025934:	6809      	ldr	r1, [r1, #0]
 8025936:	6051      	str	r1, [r2, #4]
 8025938:	4618      	mov	r0, r3
 802593a:	f85d fb04 	ldr.w	pc, [sp], #4
 802593e:	bf00      	nop

08025940 <_Unwind_SetGR>:
 8025940:	b510      	push	{r4, lr}
 8025942:	b084      	sub	sp, #16
 8025944:	ab04      	add	r3, sp, #16
 8025946:	460c      	mov	r4, r1
 8025948:	f843 2d04 	str.w	r2, [r3, #-4]!
 802594c:	2100      	movs	r1, #0
 802594e:	9300      	str	r3, [sp, #0]
 8025950:	4622      	mov	r2, r4
 8025952:	460b      	mov	r3, r1
 8025954:	f7ff ffda 	bl	802590c <_Unwind_VRS_Set>
 8025958:	b004      	add	sp, #16
 802595a:	bd10      	pop	{r4, pc}

0802595c <__gnu_Unwind_Backtrace>:
 802595c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802595e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8025960:	6413      	str	r3, [r2, #64]	; 0x40
 8025962:	1d15      	adds	r5, r2, #4
 8025964:	4607      	mov	r7, r0
 8025966:	460e      	mov	r6, r1
 8025968:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802596a:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 802596e:	ac17      	add	r4, sp, #92	; 0x5c
 8025970:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025972:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025974:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025976:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025978:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802597a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 802597e:	f04f 35ff 	mov.w	r5, #4294967295
 8025982:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8025986:	9516      	str	r5, [sp, #88]	; 0x58
 8025988:	e010      	b.n	80259ac <__gnu_Unwind_Backtrace+0x50>
 802598a:	a816      	add	r0, sp, #88	; 0x58
 802598c:	f7ff ffd8 	bl	8025940 <_Unwind_SetGR>
 8025990:	4631      	mov	r1, r6
 8025992:	a816      	add	r0, sp, #88	; 0x58
 8025994:	47b8      	blx	r7
 8025996:	4669      	mov	r1, sp
 8025998:	aa16      	add	r2, sp, #88	; 0x58
 802599a:	b978      	cbnz	r0, 80259bc <__gnu_Unwind_Backtrace+0x60>
 802599c:	9b04      	ldr	r3, [sp, #16]
 802599e:	2008      	movs	r0, #8
 80259a0:	4798      	blx	r3
 80259a2:	2805      	cmp	r0, #5
 80259a4:	4604      	mov	r4, r0
 80259a6:	d00a      	beq.n	80259be <__gnu_Unwind_Backtrace+0x62>
 80259a8:	2809      	cmp	r0, #9
 80259aa:	d007      	beq.n	80259bc <__gnu_Unwind_Backtrace+0x60>
 80259ac:	9926      	ldr	r1, [sp, #152]	; 0x98
 80259ae:	4668      	mov	r0, sp
 80259b0:	f7ff fe04 	bl	80255bc <get_eit_entry>
 80259b4:	466a      	mov	r2, sp
 80259b6:	210c      	movs	r1, #12
 80259b8:	2800      	cmp	r0, #0
 80259ba:	d0e6      	beq.n	802598a <__gnu_Unwind_Backtrace+0x2e>
 80259bc:	2409      	movs	r4, #9
 80259be:	a816      	add	r0, sp, #88	; 0x58
 80259c0:	f7ff fe4c 	bl	802565c <restore_non_core_regs>
 80259c4:	4620      	mov	r0, r4
 80259c6:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 80259ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080259cc <__gnu_unwind_pr_common>:
 80259cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80259d0:	460d      	mov	r5, r1
 80259d2:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80259d4:	b08b      	sub	sp, #44	; 0x2c
 80259d6:	1d0c      	adds	r4, r1, #4
 80259d8:	6809      	ldr	r1, [r1, #0]
 80259da:	9107      	str	r1, [sp, #28]
 80259dc:	4690      	mov	r8, r2
 80259de:	9408      	str	r4, [sp, #32]
 80259e0:	f000 0903 	and.w	r9, r0, #3
 80259e4:	461e      	mov	r6, r3
 80259e6:	2b00      	cmp	r3, #0
 80259e8:	d164      	bne.n	8025ab4 <__gnu_unwind_pr_common+0xe8>
 80259ea:	0209      	lsls	r1, r1, #8
 80259ec:	2303      	movs	r3, #3
 80259ee:	9107      	str	r1, [sp, #28]
 80259f0:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 80259f4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80259f8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80259fa:	f1b9 0f02 	cmp.w	r9, #2
 80259fe:	bf08      	it	eq
 8025a00:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8025a02:	f013 0301 	ands.w	r3, r3, #1
 8025a06:	d143      	bne.n	8025a90 <__gnu_unwind_pr_common+0xc4>
 8025a08:	f000 0008 	and.w	r0, r0, #8
 8025a0c:	b2c2      	uxtb	r2, r0
 8025a0e:	9203      	str	r2, [sp, #12]
 8025a10:	9301      	str	r3, [sp, #4]
 8025a12:	6827      	ldr	r7, [r4, #0]
 8025a14:	2f00      	cmp	r7, #0
 8025a16:	d03d      	beq.n	8025a94 <__gnu_unwind_pr_common+0xc8>
 8025a18:	2e02      	cmp	r6, #2
 8025a1a:	d047      	beq.n	8025aac <__gnu_unwind_pr_common+0xe0>
 8025a1c:	8827      	ldrh	r7, [r4, #0]
 8025a1e:	f8b4 a002 	ldrh.w	sl, [r4, #2]
 8025a22:	3404      	adds	r4, #4
 8025a24:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8025a26:	f02a 0b01 	bic.w	fp, sl, #1
 8025a2a:	4640      	mov	r0, r8
 8025a2c:	210f      	movs	r1, #15
 8025a2e:	449b      	add	fp, r3
 8025a30:	f7ff ff5e 	bl	80258f0 <_Unwind_GetGR>
 8025a34:	4583      	cmp	fp, r0
 8025a36:	d837      	bhi.n	8025aa8 <__gnu_unwind_pr_common+0xdc>
 8025a38:	f027 0301 	bic.w	r3, r7, #1
 8025a3c:	449b      	add	fp, r3
 8025a3e:	4558      	cmp	r0, fp
 8025a40:	bf2c      	ite	cs
 8025a42:	2000      	movcs	r0, #0
 8025a44:	2001      	movcc	r0, #1
 8025a46:	f00a 0a01 	and.w	sl, sl, #1
 8025a4a:	f007 0701 	and.w	r7, r7, #1
 8025a4e:	ea47 0a4a 	orr.w	sl, r7, sl, lsl #1
 8025a52:	f1ba 0f01 	cmp.w	sl, #1
 8025a56:	d043      	beq.n	8025ae0 <__gnu_unwind_pr_common+0x114>
 8025a58:	d33a      	bcc.n	8025ad0 <__gnu_unwind_pr_common+0x104>
 8025a5a:	f1ba 0f02 	cmp.w	sl, #2
 8025a5e:	d11f      	bne.n	8025aa0 <__gnu_unwind_pr_common+0xd4>
 8025a60:	6823      	ldr	r3, [r4, #0]
 8025a62:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8025a66:	9202      	str	r2, [sp, #8]
 8025a68:	f1b9 0f00 	cmp.w	r9, #0
 8025a6c:	d17b      	bne.n	8025b66 <__gnu_unwind_pr_common+0x19a>
 8025a6e:	b138      	cbz	r0, 8025a80 <__gnu_unwind_pr_common+0xb4>
 8025a70:	9a03      	ldr	r2, [sp, #12]
 8025a72:	2a00      	cmp	r2, #0
 8025a74:	f000 8083 	beq.w	8025b7e <__gnu_unwind_pr_common+0x1b2>
 8025a78:	9a02      	ldr	r2, [sp, #8]
 8025a7a:	2a00      	cmp	r2, #0
 8025a7c:	f000 80a6 	beq.w	8025bcc <__gnu_unwind_pr_common+0x200>
 8025a80:	2b00      	cmp	r3, #0
 8025a82:	db7a      	blt.n	8025b7a <__gnu_unwind_pr_common+0x1ae>
 8025a84:	9b02      	ldr	r3, [sp, #8]
 8025a86:	f103 0a01 	add.w	sl, r3, #1
 8025a8a:	eb04 048a 	add.w	r4, r4, sl, lsl #2
 8025a8e:	e7c0      	b.n	8025a12 <__gnu_unwind_pr_common+0x46>
 8025a90:	2300      	movs	r3, #0
 8025a92:	9301      	str	r3, [sp, #4]
 8025a94:	2e02      	cmp	r6, #2
 8025a96:	dd40      	ble.n	8025b1a <__gnu_unwind_pr_common+0x14e>
 8025a98:	f7ff fe12 	bl	80256c0 <__gnu_unwind_24bit.isra.1>
 8025a9c:	2800      	cmp	r0, #0
 8025a9e:	d042      	beq.n	8025b26 <__gnu_unwind_pr_common+0x15a>
 8025aa0:	2009      	movs	r0, #9
 8025aa2:	b00b      	add	sp, #44	; 0x2c
 8025aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025aa8:	2000      	movs	r0, #0
 8025aaa:	e7cc      	b.n	8025a46 <__gnu_unwind_pr_common+0x7a>
 8025aac:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8025ab0:	3408      	adds	r4, #8
 8025ab2:	e7b7      	b.n	8025a24 <__gnu_unwind_pr_common+0x58>
 8025ab4:	2b02      	cmp	r3, #2
 8025ab6:	dc9f      	bgt.n	80259f8 <__gnu_unwind_pr_common+0x2c>
 8025ab8:	0c0b      	lsrs	r3, r1, #16
 8025aba:	b2df      	uxtb	r7, r3
 8025abc:	0409      	lsls	r1, r1, #16
 8025abe:	2202      	movs	r2, #2
 8025ac0:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8025ac4:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 8025ac8:	9107      	str	r1, [sp, #28]
 8025aca:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8025ace:	e793      	b.n	80259f8 <__gnu_unwind_pr_common+0x2c>
 8025ad0:	f1b9 0f00 	cmp.w	r9, #0
 8025ad4:	d002      	beq.n	8025adc <__gnu_unwind_pr_common+0x110>
 8025ad6:	2800      	cmp	r0, #0
 8025ad8:	f040 80ad 	bne.w	8025c36 <__gnu_unwind_pr_common+0x26a>
 8025adc:	3404      	adds	r4, #4
 8025ade:	e798      	b.n	8025a12 <__gnu_unwind_pr_common+0x46>
 8025ae0:	f1b9 0f00 	cmp.w	r9, #0
 8025ae4:	d126      	bne.n	8025b34 <__gnu_unwind_pr_common+0x168>
 8025ae6:	b1b0      	cbz	r0, 8025b16 <__gnu_unwind_pr_common+0x14a>
 8025ae8:	e894 000c 	ldmia.w	r4, {r2, r3}
 8025aec:	0fd7      	lsrs	r7, r2, #31
 8025aee:	1c9a      	adds	r2, r3, #2
 8025af0:	d0d6      	beq.n	8025aa0 <__gnu_unwind_pr_common+0xd4>
 8025af2:	f105 0258 	add.w	r2, r5, #88	; 0x58
 8025af6:	3301      	adds	r3, #1
 8025af8:	9206      	str	r2, [sp, #24]
 8025afa:	f000 8092 	beq.w	8025c22 <__gnu_unwind_pr_common+0x256>
 8025afe:	1d20      	adds	r0, r4, #4
 8025b00:	f7ff fdd8 	bl	80256b4 <_Unwind_decode_typeinfo_ptr.isra.0>
 8025b04:	463a      	mov	r2, r7
 8025b06:	4601      	mov	r1, r0
 8025b08:	ab06      	add	r3, sp, #24
 8025b0a:	4628      	mov	r0, r5
 8025b0c:	f3af 8000 	nop.w
 8025b10:	2800      	cmp	r0, #0
 8025b12:	f040 80b5 	bne.w	8025c80 <__gnu_unwind_pr_common+0x2b4>
 8025b16:	3408      	adds	r4, #8
 8025b18:	e77b      	b.n	8025a12 <__gnu_unwind_pr_common+0x46>
 8025b1a:	4640      	mov	r0, r8
 8025b1c:	a907      	add	r1, sp, #28
 8025b1e:	f000 fb1b 	bl	8026158 <__gnu_unwind_execute>
 8025b22:	2800      	cmp	r0, #0
 8025b24:	d1bc      	bne.n	8025aa0 <__gnu_unwind_pr_common+0xd4>
 8025b26:	9b01      	ldr	r3, [sp, #4]
 8025b28:	2b00      	cmp	r3, #0
 8025b2a:	d159      	bne.n	8025be0 <__gnu_unwind_pr_common+0x214>
 8025b2c:	2008      	movs	r0, #8
 8025b2e:	b00b      	add	sp, #44	; 0x2c
 8025b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025b34:	4640      	mov	r0, r8
 8025b36:	210d      	movs	r1, #13
 8025b38:	6a2f      	ldr	r7, [r5, #32]
 8025b3a:	f7ff fed9 	bl	80258f0 <_Unwind_GetGR>
 8025b3e:	4287      	cmp	r7, r0
 8025b40:	d1e9      	bne.n	8025b16 <__gnu_unwind_pr_common+0x14a>
 8025b42:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8025b44:	429c      	cmp	r4, r3
 8025b46:	d1e6      	bne.n	8025b16 <__gnu_unwind_pr_common+0x14a>
 8025b48:	4620      	mov	r0, r4
 8025b4a:	f7ff fcdb 	bl	8025504 <selfrel_offset31>
 8025b4e:	210f      	movs	r1, #15
 8025b50:	4602      	mov	r2, r0
 8025b52:	4640      	mov	r0, r8
 8025b54:	f7ff fef4 	bl	8025940 <_Unwind_SetGR>
 8025b58:	4640      	mov	r0, r8
 8025b5a:	462a      	mov	r2, r5
 8025b5c:	2100      	movs	r1, #0
 8025b5e:	f7ff feef 	bl	8025940 <_Unwind_SetGR>
 8025b62:	2007      	movs	r0, #7
 8025b64:	e79d      	b.n	8025aa2 <__gnu_unwind_pr_common+0xd6>
 8025b66:	4640      	mov	r0, r8
 8025b68:	210d      	movs	r1, #13
 8025b6a:	6a2f      	ldr	r7, [r5, #32]
 8025b6c:	f7ff fec0 	bl	80258f0 <_Unwind_GetGR>
 8025b70:	4287      	cmp	r7, r0
 8025b72:	d045      	beq.n	8025c00 <__gnu_unwind_pr_common+0x234>
 8025b74:	6823      	ldr	r3, [r4, #0]
 8025b76:	2b00      	cmp	r3, #0
 8025b78:	da84      	bge.n	8025a84 <__gnu_unwind_pr_common+0xb8>
 8025b7a:	3404      	adds	r4, #4
 8025b7c:	e782      	b.n	8025a84 <__gnu_unwind_pr_common+0xb8>
 8025b7e:	9b02      	ldr	r3, [sp, #8]
 8025b80:	b323      	cbz	r3, 8025bcc <__gnu_unwind_pr_common+0x200>
 8025b82:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8025b86:	9605      	str	r6, [sp, #20]
 8025b88:	f104 0a04 	add.w	sl, r4, #4
 8025b8c:	9f03      	ldr	r7, [sp, #12]
 8025b8e:	f8dd b008 	ldr.w	fp, [sp, #8]
 8025b92:	f8cd 9010 	str.w	r9, [sp, #16]
 8025b96:	461e      	mov	r6, r3
 8025b98:	e002      	b.n	8025ba0 <__gnu_unwind_pr_common+0x1d4>
 8025b9a:	45d9      	cmp	r9, fp
 8025b9c:	464f      	mov	r7, r9
 8025b9e:	d015      	beq.n	8025bcc <__gnu_unwind_pr_common+0x200>
 8025ba0:	4650      	mov	r0, sl
 8025ba2:	9606      	str	r6, [sp, #24]
 8025ba4:	f7ff fd86 	bl	80256b4 <_Unwind_decode_typeinfo_ptr.isra.0>
 8025ba8:	2200      	movs	r2, #0
 8025baa:	4601      	mov	r1, r0
 8025bac:	ab06      	add	r3, sp, #24
 8025bae:	4628      	mov	r0, r5
 8025bb0:	f3af 8000 	nop.w
 8025bb4:	f107 0901 	add.w	r9, r7, #1
 8025bb8:	f10a 0a04 	add.w	sl, sl, #4
 8025bbc:	2800      	cmp	r0, #0
 8025bbe:	d0ec      	beq.n	8025b9a <__gnu_unwind_pr_common+0x1ce>
 8025bc0:	9b02      	ldr	r3, [sp, #8]
 8025bc2:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8025bc6:	9e05      	ldr	r6, [sp, #20]
 8025bc8:	429f      	cmp	r7, r3
 8025bca:	d1d3      	bne.n	8025b74 <__gnu_unwind_pr_common+0x1a8>
 8025bcc:	4640      	mov	r0, r8
 8025bce:	210d      	movs	r1, #13
 8025bd0:	f7ff fe8e 	bl	80258f0 <_Unwind_GetGR>
 8025bd4:	9b06      	ldr	r3, [sp, #24]
 8025bd6:	6228      	str	r0, [r5, #32]
 8025bd8:	62ac      	str	r4, [r5, #40]	; 0x28
 8025bda:	626b      	str	r3, [r5, #36]	; 0x24
 8025bdc:	2006      	movs	r0, #6
 8025bde:	e760      	b.n	8025aa2 <__gnu_unwind_pr_common+0xd6>
 8025be0:	210f      	movs	r1, #15
 8025be2:	4640      	mov	r0, r8
 8025be4:	f7ff fe84 	bl	80258f0 <_Unwind_GetGR>
 8025be8:	210e      	movs	r1, #14
 8025bea:	4602      	mov	r2, r0
 8025bec:	4640      	mov	r0, r8
 8025bee:	f7ff fea7 	bl	8025940 <_Unwind_SetGR>
 8025bf2:	4640      	mov	r0, r8
 8025bf4:	210f      	movs	r1, #15
 8025bf6:	4a29      	ldr	r2, [pc, #164]	; (8025c9c <__gnu_unwind_pr_common+0x2d0>)
 8025bf8:	f7ff fea2 	bl	8025940 <_Unwind_SetGR>
 8025bfc:	2007      	movs	r0, #7
 8025bfe:	e750      	b.n	8025aa2 <__gnu_unwind_pr_common+0xd6>
 8025c00:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8025c02:	429c      	cmp	r4, r3
 8025c04:	d1b6      	bne.n	8025b74 <__gnu_unwind_pr_common+0x1a8>
 8025c06:	2204      	movs	r2, #4
 8025c08:	2700      	movs	r7, #0
 8025c0a:	18a3      	adds	r3, r4, r2
 8025c0c:	9902      	ldr	r1, [sp, #8]
 8025c0e:	62a9      	str	r1, [r5, #40]	; 0x28
 8025c10:	62ef      	str	r7, [r5, #44]	; 0x2c
 8025c12:	632a      	str	r2, [r5, #48]	; 0x30
 8025c14:	636b      	str	r3, [r5, #52]	; 0x34
 8025c16:	6823      	ldr	r3, [r4, #0]
 8025c18:	42bb      	cmp	r3, r7
 8025c1a:	db1f      	blt.n	8025c5c <__gnu_unwind_pr_common+0x290>
 8025c1c:	2301      	movs	r3, #1
 8025c1e:	9301      	str	r3, [sp, #4]
 8025c20:	e730      	b.n	8025a84 <__gnu_unwind_pr_common+0xb8>
 8025c22:	4640      	mov	r0, r8
 8025c24:	210d      	movs	r1, #13
 8025c26:	f7ff fe63 	bl	80258f0 <_Unwind_GetGR>
 8025c2a:	6228      	str	r0, [r5, #32]
 8025c2c:	9b06      	ldr	r3, [sp, #24]
 8025c2e:	626b      	str	r3, [r5, #36]	; 0x24
 8025c30:	62ac      	str	r4, [r5, #40]	; 0x28
 8025c32:	2006      	movs	r0, #6
 8025c34:	e735      	b.n	8025aa2 <__gnu_unwind_pr_common+0xd6>
 8025c36:	4620      	mov	r0, r4
 8025c38:	f7ff fc64 	bl	8025504 <selfrel_offset31>
 8025c3c:	3404      	adds	r4, #4
 8025c3e:	4606      	mov	r6, r0
 8025c40:	63ac      	str	r4, [r5, #56]	; 0x38
 8025c42:	4628      	mov	r0, r5
 8025c44:	f3af 8000 	nop.w
 8025c48:	2800      	cmp	r0, #0
 8025c4a:	f43f af29 	beq.w	8025aa0 <__gnu_unwind_pr_common+0xd4>
 8025c4e:	4640      	mov	r0, r8
 8025c50:	4632      	mov	r2, r6
 8025c52:	210f      	movs	r1, #15
 8025c54:	f7ff fe74 	bl	8025940 <_Unwind_SetGR>
 8025c58:	2007      	movs	r0, #7
 8025c5a:	e722      	b.n	8025aa2 <__gnu_unwind_pr_common+0xd6>
 8025c5c:	4608      	mov	r0, r1
 8025c5e:	3001      	adds	r0, #1
 8025c60:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8025c64:	f7ff fc4e 	bl	8025504 <selfrel_offset31>
 8025c68:	210f      	movs	r1, #15
 8025c6a:	4602      	mov	r2, r0
 8025c6c:	4640      	mov	r0, r8
 8025c6e:	f7ff fe67 	bl	8025940 <_Unwind_SetGR>
 8025c72:	4640      	mov	r0, r8
 8025c74:	4639      	mov	r1, r7
 8025c76:	462a      	mov	r2, r5
 8025c78:	f7ff fe62 	bl	8025940 <_Unwind_SetGR>
 8025c7c:	2007      	movs	r0, #7
 8025c7e:	e710      	b.n	8025aa2 <__gnu_unwind_pr_common+0xd6>
 8025c80:	4607      	mov	r7, r0
 8025c82:	210d      	movs	r1, #13
 8025c84:	4640      	mov	r0, r8
 8025c86:	f7ff fe33 	bl	80258f0 <_Unwind_GetGR>
 8025c8a:	2f02      	cmp	r7, #2
 8025c8c:	6228      	str	r0, [r5, #32]
 8025c8e:	d1cd      	bne.n	8025c2c <__gnu_unwind_pr_common+0x260>
 8025c90:	462b      	mov	r3, r5
 8025c92:	9a06      	ldr	r2, [sp, #24]
 8025c94:	f843 2f2c 	str.w	r2, [r3, #44]!
 8025c98:	626b      	str	r3, [r5, #36]	; 0x24
 8025c9a:	e7c9      	b.n	8025c30 <__gnu_unwind_pr_common+0x264>
 8025c9c:	00000000 	.word	0x00000000

08025ca0 <__aeabi_unwind_cpp_pr0>:
 8025ca0:	2300      	movs	r3, #0
 8025ca2:	e693      	b.n	80259cc <__gnu_unwind_pr_common>

08025ca4 <__aeabi_unwind_cpp_pr1>:
 8025ca4:	2301      	movs	r3, #1
 8025ca6:	e691      	b.n	80259cc <__gnu_unwind_pr_common>

08025ca8 <__aeabi_unwind_cpp_pr2>:
 8025ca8:	2302      	movs	r3, #2
 8025caa:	e68f      	b.n	80259cc <__gnu_unwind_pr_common>

08025cac <_Unwind_VRS_Pop>:
 8025cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025cae:	4605      	mov	r5, r0
 8025cb0:	b0c5      	sub	sp, #276	; 0x114
 8025cb2:	2904      	cmp	r1, #4
 8025cb4:	d80c      	bhi.n	8025cd0 <_Unwind_VRS_Pop+0x24>
 8025cb6:	e8df f001 	tbb	[pc, r1]
 8025cba:	0356      	.short	0x0356
 8025cbc:	300b      	.short	0x300b
 8025cbe:	0e          	.byte	0x0e
 8025cbf:	00          	.byte	0x00
 8025cc0:	2b01      	cmp	r3, #1
 8025cc2:	ea4f 4412 	mov.w	r4, r2, lsr #16
 8025cc6:	b296      	uxth	r6, r2
 8025cc8:	d065      	beq.n	8025d96 <_Unwind_VRS_Pop+0xea>
 8025cca:	2b05      	cmp	r3, #5
 8025ccc:	f000 8084 	beq.w	8025dd8 <_Unwind_VRS_Pop+0x12c>
 8025cd0:	2002      	movs	r0, #2
 8025cd2:	b045      	add	sp, #276	; 0x114
 8025cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025cd6:	2b00      	cmp	r3, #0
 8025cd8:	d1fa      	bne.n	8025cd0 <_Unwind_VRS_Pop+0x24>
 8025cda:	2a10      	cmp	r2, #16
 8025cdc:	d8f8      	bhi.n	8025cd0 <_Unwind_VRS_Pop+0x24>
 8025cde:	682b      	ldr	r3, [r5, #0]
 8025ce0:	06dc      	lsls	r4, r3, #27
 8025ce2:	f100 80eb 	bmi.w	8025ebc <_Unwind_VRS_Pop+0x210>
 8025ce6:	ae22      	add	r6, sp, #136	; 0x88
 8025ce8:	4630      	mov	r0, r6
 8025cea:	9201      	str	r2, [sp, #4]
 8025cec:	f000 f9a4 	bl	8026038 <__gnu_Unwind_Save_WMMXC>
 8025cf0:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8025cf2:	9a01      	ldr	r2, [sp, #4]
 8025cf4:	2300      	movs	r3, #0
 8025cf6:	2401      	movs	r4, #1
 8025cf8:	fa04 f103 	lsl.w	r1, r4, r3
 8025cfc:	4211      	tst	r1, r2
 8025cfe:	d003      	beq.n	8025d08 <_Unwind_VRS_Pop+0x5c>
 8025d00:	6801      	ldr	r1, [r0, #0]
 8025d02:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 8025d06:	3004      	adds	r0, #4
 8025d08:	3301      	adds	r3, #1
 8025d0a:	2b04      	cmp	r3, #4
 8025d0c:	d1f4      	bne.n	8025cf8 <_Unwind_VRS_Pop+0x4c>
 8025d0e:	63a8      	str	r0, [r5, #56]	; 0x38
 8025d10:	4630      	mov	r0, r6
 8025d12:	f000 f987 	bl	8026024 <__gnu_Unwind_Restore_WMMXC>
 8025d16:	2000      	movs	r0, #0
 8025d18:	e7db      	b.n	8025cd2 <_Unwind_VRS_Pop+0x26>
 8025d1a:	2b03      	cmp	r3, #3
 8025d1c:	d1d8      	bne.n	8025cd0 <_Unwind_VRS_Pop+0x24>
 8025d1e:	0c14      	lsrs	r4, r2, #16
 8025d20:	b297      	uxth	r7, r2
 8025d22:	193b      	adds	r3, r7, r4
 8025d24:	2b10      	cmp	r3, #16
 8025d26:	d8d3      	bhi.n	8025cd0 <_Unwind_VRS_Pop+0x24>
 8025d28:	682b      	ldr	r3, [r5, #0]
 8025d2a:	071e      	lsls	r6, r3, #28
 8025d2c:	f100 80e6 	bmi.w	8025efc <_Unwind_VRS_Pop+0x250>
 8025d30:	ae22      	add	r6, sp, #136	; 0x88
 8025d32:	4630      	mov	r0, r6
 8025d34:	007f      	lsls	r7, r7, #1
 8025d36:	f000 f953 	bl	8025fe0 <__gnu_Unwind_Save_WMMXD>
 8025d3a:	eb06 02c4 	add.w	r2, r6, r4, lsl #3
 8025d3e:	1e7b      	subs	r3, r7, #1
 8025d40:	6bac      	ldr	r4, [r5, #56]	; 0x38
 8025d42:	b157      	cbz	r7, 8025d5a <_Unwind_VRS_Pop+0xae>
 8025d44:	3a04      	subs	r2, #4
 8025d46:	4621      	mov	r1, r4
 8025d48:	f851 0b04 	ldr.w	r0, [r1], #4
 8025d4c:	f842 0f04 	str.w	r0, [r2, #4]!
 8025d50:	3b01      	subs	r3, #1
 8025d52:	1c58      	adds	r0, r3, #1
 8025d54:	d1f8      	bne.n	8025d48 <_Unwind_VRS_Pop+0x9c>
 8025d56:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 8025d5a:	4630      	mov	r0, r6
 8025d5c:	63ac      	str	r4, [r5, #56]	; 0x38
 8025d5e:	f000 f91d 	bl	8025f9c <__gnu_Unwind_Restore_WMMXD>
 8025d62:	2000      	movs	r0, #0
 8025d64:	e7b5      	b.n	8025cd2 <_Unwind_VRS_Pop+0x26>
 8025d66:	2b00      	cmp	r3, #0
 8025d68:	d1b2      	bne.n	8025cd0 <_Unwind_VRS_Pop+0x24>
 8025d6a:	6bac      	ldr	r4, [r5, #56]	; 0x38
 8025d6c:	b297      	uxth	r7, r2
 8025d6e:	1d28      	adds	r0, r5, #4
 8025d70:	2601      	movs	r6, #1
 8025d72:	fa06 f103 	lsl.w	r1, r6, r3
 8025d76:	4239      	tst	r1, r7
 8025d78:	f103 0301 	add.w	r3, r3, #1
 8025d7c:	d002      	beq.n	8025d84 <_Unwind_VRS_Pop+0xd8>
 8025d7e:	6821      	ldr	r1, [r4, #0]
 8025d80:	6001      	str	r1, [r0, #0]
 8025d82:	3404      	adds	r4, #4
 8025d84:	2b10      	cmp	r3, #16
 8025d86:	f100 0004 	add.w	r0, r0, #4
 8025d8a:	d1f2      	bne.n	8025d72 <_Unwind_VRS_Pop+0xc6>
 8025d8c:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8025d90:	d120      	bne.n	8025dd4 <_Unwind_VRS_Pop+0x128>
 8025d92:	63ac      	str	r4, [r5, #56]	; 0x38
 8025d94:	e79d      	b.n	8025cd2 <_Unwind_VRS_Pop+0x26>
 8025d96:	1932      	adds	r2, r6, r4
 8025d98:	2a10      	cmp	r2, #16
 8025d9a:	d899      	bhi.n	8025cd0 <_Unwind_VRS_Pop+0x24>
 8025d9c:	2c0f      	cmp	r4, #15
 8025d9e:	d897      	bhi.n	8025cd0 <_Unwind_VRS_Pop+0x24>
 8025da0:	6829      	ldr	r1, [r5, #0]
 8025da2:	07c8      	lsls	r0, r1, #31
 8025da4:	f04f 0700 	mov.w	r7, #0
 8025da8:	d455      	bmi.n	8025e56 <_Unwind_VRS_Pop+0x1aa>
 8025daa:	a822      	add	r0, sp, #136	; 0x88
 8025dac:	9301      	str	r3, [sp, #4]
 8025dae:	f000 f8e1 	bl	8025f74 <__gnu_Unwind_Save_VFP>
 8025db2:	9b01      	ldr	r3, [sp, #4]
 8025db4:	e019      	b.n	8025dea <_Unwind_VRS_Pop+0x13e>
 8025db6:	4608      	mov	r0, r1
 8025db8:	4637      	mov	r7, r6
 8025dba:	2b01      	cmp	r3, #1
 8025dbc:	f000 8098 	beq.w	8025ef0 <_Unwind_VRS_Pop+0x244>
 8025dc0:	2c0f      	cmp	r4, #15
 8025dc2:	63a8      	str	r0, [r5, #56]	; 0x38
 8025dc4:	d802      	bhi.n	8025dcc <_Unwind_VRS_Pop+0x120>
 8025dc6:	a822      	add	r0, sp, #136	; 0x88
 8025dc8:	f000 f8d8 	bl	8025f7c <__gnu_Unwind_Restore_VFP_D>
 8025dcc:	b117      	cbz	r7, 8025dd4 <_Unwind_VRS_Pop+0x128>
 8025dce:	a802      	add	r0, sp, #8
 8025dd0:	f000 f8dc 	bl	8025f8c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8025dd4:	2000      	movs	r0, #0
 8025dd6:	e77c      	b.n	8025cd2 <_Unwind_VRS_Pop+0x26>
 8025dd8:	1937      	adds	r7, r6, r4
 8025dda:	2f20      	cmp	r7, #32
 8025ddc:	f63f af78 	bhi.w	8025cd0 <_Unwind_VRS_Pop+0x24>
 8025de0:	2c0f      	cmp	r4, #15
 8025de2:	d930      	bls.n	8025e46 <_Unwind_VRS_Pop+0x19a>
 8025de4:	4637      	mov	r7, r6
 8025de6:	2e00      	cmp	r6, #0
 8025de8:	d145      	bne.n	8025e76 <_Unwind_VRS_Pop+0x1ca>
 8025dea:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8025dec:	4632      	mov	r2, r6
 8025dee:	2e00      	cmp	r6, #0
 8025df0:	d0e1      	beq.n	8025db6 <_Unwind_VRS_Pop+0x10a>
 8025df2:	2700      	movs	r7, #0
 8025df4:	a844      	add	r0, sp, #272	; 0x110
 8025df6:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8025dfa:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8025dfe:	f10c 32ff 	add.w	r2, ip, #4294967295
 8025e02:	388c      	subs	r0, #140	; 0x8c
 8025e04:	468e      	mov	lr, r1
 8025e06:	f85e 6b04 	ldr.w	r6, [lr], #4
 8025e0a:	f840 6f04 	str.w	r6, [r0, #4]!
 8025e0e:	3a01      	subs	r2, #1
 8025e10:	1c56      	adds	r6, r2, #1
 8025e12:	d1f8      	bne.n	8025e06 <_Unwind_VRS_Pop+0x15a>
 8025e14:	eb01 008c 	add.w	r0, r1, ip, lsl #2
 8025e18:	2f00      	cmp	r7, #0
 8025e1a:	d0ce      	beq.n	8025dba <_Unwind_VRS_Pop+0x10e>
 8025e1c:	2c10      	cmp	r4, #16
 8025e1e:	4622      	mov	r2, r4
 8025e20:	a944      	add	r1, sp, #272	; 0x110
 8025e22:	bf38      	it	cc
 8025e24:	2210      	movcc	r2, #16
 8025e26:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8025e2a:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8025e2e:	4601      	mov	r1, r0
 8025e30:	0078      	lsls	r0, r7, #1
 8025e32:	3a04      	subs	r2, #4
 8025e34:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8025e38:	f851 6b04 	ldr.w	r6, [r1], #4
 8025e3c:	f842 6f04 	str.w	r6, [r2, #4]!
 8025e40:	4281      	cmp	r1, r0
 8025e42:	d1f9      	bne.n	8025e38 <_Unwind_VRS_Pop+0x18c>
 8025e44:	e7b9      	b.n	8025dba <_Unwind_VRS_Pop+0x10e>
 8025e46:	2f10      	cmp	r7, #16
 8025e48:	d942      	bls.n	8025ed0 <_Unwind_VRS_Pop+0x224>
 8025e4a:	682a      	ldr	r2, [r5, #0]
 8025e4c:	07d0      	lsls	r0, r2, #31
 8025e4e:	f1a7 0710 	sub.w	r7, r7, #16
 8025e52:	4611      	mov	r1, r2
 8025e54:	d510      	bpl.n	8025e78 <_Unwind_VRS_Pop+0x1cc>
 8025e56:	f021 0201 	bic.w	r2, r1, #1
 8025e5a:	2b05      	cmp	r3, #5
 8025e5c:	602a      	str	r2, [r5, #0]
 8025e5e:	9301      	str	r3, [sp, #4]
 8025e60:	4628      	mov	r0, r5
 8025e62:	d05b      	beq.n	8025f1c <_Unwind_VRS_Pop+0x270>
 8025e64:	f021 0103 	bic.w	r1, r1, #3
 8025e68:	f840 1b48 	str.w	r1, [r0], #72
 8025e6c:	f000 f882 	bl	8025f74 <__gnu_Unwind_Save_VFP>
 8025e70:	9b01      	ldr	r3, [sp, #4]
 8025e72:	2f00      	cmp	r7, #0
 8025e74:	d04a      	beq.n	8025f0c <_Unwind_VRS_Pop+0x260>
 8025e76:	682a      	ldr	r2, [r5, #0]
 8025e78:	0751      	lsls	r1, r2, #29
 8025e7a:	d45b      	bmi.n	8025f34 <_Unwind_VRS_Pop+0x288>
 8025e7c:	2b01      	cmp	r3, #1
 8025e7e:	d063      	beq.n	8025f48 <_Unwind_VRS_Pop+0x29c>
 8025e80:	2c0f      	cmp	r4, #15
 8025e82:	d804      	bhi.n	8025e8e <_Unwind_VRS_Pop+0x1e2>
 8025e84:	a822      	add	r0, sp, #136	; 0x88
 8025e86:	9301      	str	r3, [sp, #4]
 8025e88:	f000 f87c 	bl	8025f84 <__gnu_Unwind_Save_VFP_D>
 8025e8c:	9b01      	ldr	r3, [sp, #4]
 8025e8e:	2f00      	cmp	r7, #0
 8025e90:	d0ab      	beq.n	8025dea <_Unwind_VRS_Pop+0x13e>
 8025e92:	a802      	add	r0, sp, #8
 8025e94:	9301      	str	r3, [sp, #4]
 8025e96:	f000 f87d 	bl	8025f94 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8025e9a:	9b01      	ldr	r3, [sp, #4]
 8025e9c:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8025e9e:	f1c4 0210 	rsb	r2, r4, #16
 8025ea2:	2a00      	cmp	r2, #0
 8025ea4:	dca6      	bgt.n	8025df4 <_Unwind_VRS_Pop+0x148>
 8025ea6:	2c10      	cmp	r4, #16
 8025ea8:	4622      	mov	r2, r4
 8025eaa:	a844      	add	r0, sp, #272	; 0x110
 8025eac:	bf38      	it	cc
 8025eae:	2210      	movcc	r2, #16
 8025eb0:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8025eb4:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8025eb8:	0078      	lsls	r0, r7, #1
 8025eba:	e7ba      	b.n	8025e32 <_Unwind_VRS_Pop+0x186>
 8025ebc:	f023 0310 	bic.w	r3, r3, #16
 8025ec0:	602b      	str	r3, [r5, #0]
 8025ec2:	f505 70e8 	add.w	r0, r5, #464	; 0x1d0
 8025ec6:	9201      	str	r2, [sp, #4]
 8025ec8:	f000 f8b6 	bl	8026038 <__gnu_Unwind_Save_WMMXC>
 8025ecc:	9a01      	ldr	r2, [sp, #4]
 8025ece:	e70a      	b.n	8025ce6 <_Unwind_VRS_Pop+0x3a>
 8025ed0:	6829      	ldr	r1, [r5, #0]
 8025ed2:	07c8      	lsls	r0, r1, #31
 8025ed4:	d51d      	bpl.n	8025f12 <_Unwind_VRS_Pop+0x266>
 8025ed6:	f021 0201 	bic.w	r2, r1, #1
 8025eda:	4628      	mov	r0, r5
 8025edc:	f042 0202 	orr.w	r2, r2, #2
 8025ee0:	f840 2b48 	str.w	r2, [r0], #72
 8025ee4:	9301      	str	r3, [sp, #4]
 8025ee6:	2700      	movs	r7, #0
 8025ee8:	f000 f84c 	bl	8025f84 <__gnu_Unwind_Save_VFP_D>
 8025eec:	9b01      	ldr	r3, [sp, #4]
 8025eee:	e7c9      	b.n	8025e84 <_Unwind_VRS_Pop+0x1d8>
 8025ef0:	3004      	adds	r0, #4
 8025ef2:	63a8      	str	r0, [r5, #56]	; 0x38
 8025ef4:	a822      	add	r0, sp, #136	; 0x88
 8025ef6:	f000 f839 	bl	8025f6c <__gnu_Unwind_Restore_VFP>
 8025efa:	e76b      	b.n	8025dd4 <_Unwind_VRS_Pop+0x128>
 8025efc:	f023 0308 	bic.w	r3, r3, #8
 8025f00:	602b      	str	r3, [r5, #0]
 8025f02:	f505 70a8 	add.w	r0, r5, #336	; 0x150
 8025f06:	f000 f86b 	bl	8025fe0 <__gnu_Unwind_Save_WMMXD>
 8025f0a:	e711      	b.n	8025d30 <_Unwind_VRS_Pop+0x84>
 8025f0c:	2b01      	cmp	r3, #1
 8025f0e:	f43f af4c 	beq.w	8025daa <_Unwind_VRS_Pop+0xfe>
 8025f12:	2c0f      	cmp	r4, #15
 8025f14:	bf98      	it	ls
 8025f16:	2700      	movls	r7, #0
 8025f18:	d9b4      	bls.n	8025e84 <_Unwind_VRS_Pop+0x1d8>
 8025f1a:	e766      	b.n	8025dea <_Unwind_VRS_Pop+0x13e>
 8025f1c:	f042 0202 	orr.w	r2, r2, #2
 8025f20:	f840 2b48 	str.w	r2, [r0], #72
 8025f24:	f000 f82e 	bl	8025f84 <__gnu_Unwind_Save_VFP_D>
 8025f28:	9b01      	ldr	r3, [sp, #4]
 8025f2a:	2f00      	cmp	r7, #0
 8025f2c:	d0aa      	beq.n	8025e84 <_Unwind_VRS_Pop+0x1d8>
 8025f2e:	682a      	ldr	r2, [r5, #0]
 8025f30:	0751      	lsls	r1, r2, #29
 8025f32:	d5a5      	bpl.n	8025e80 <_Unwind_VRS_Pop+0x1d4>
 8025f34:	4628      	mov	r0, r5
 8025f36:	f022 0204 	bic.w	r2, r2, #4
 8025f3a:	f840 2bd0 	str.w	r2, [r0], #208
 8025f3e:	9301      	str	r3, [sp, #4]
 8025f40:	f000 f828 	bl	8025f94 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8025f44:	9b01      	ldr	r3, [sp, #4]
 8025f46:	e799      	b.n	8025e7c <_Unwind_VRS_Pop+0x1d0>
 8025f48:	a822      	add	r0, sp, #136	; 0x88
 8025f4a:	9301      	str	r3, [sp, #4]
 8025f4c:	f000 f812 	bl	8025f74 <__gnu_Unwind_Save_VFP>
 8025f50:	9b01      	ldr	r3, [sp, #4]
 8025f52:	e7a3      	b.n	8025e9c <_Unwind_VRS_Pop+0x1f0>

08025f54 <__restore_core_regs>:
 8025f54:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8025f58:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8025f5c:	469c      	mov	ip, r3
 8025f5e:	46a6      	mov	lr, r4
 8025f60:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8025f64:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8025f68:	46e5      	mov	sp, ip
 8025f6a:	bd00      	pop	{pc}

08025f6c <__gnu_Unwind_Restore_VFP>:
 8025f6c:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8025f70:	4770      	bx	lr
 8025f72:	bf00      	nop

08025f74 <__gnu_Unwind_Save_VFP>:
 8025f74:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8025f78:	4770      	bx	lr
 8025f7a:	bf00      	nop

08025f7c <__gnu_Unwind_Restore_VFP_D>:
 8025f7c:	ec90 0b20 	vldmia	r0, {d0-d15}
 8025f80:	4770      	bx	lr
 8025f82:	bf00      	nop

08025f84 <__gnu_Unwind_Save_VFP_D>:
 8025f84:	ec80 0b20 	vstmia	r0, {d0-d15}
 8025f88:	4770      	bx	lr
 8025f8a:	bf00      	nop

08025f8c <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8025f8c:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8025f90:	4770      	bx	lr
 8025f92:	bf00      	nop

08025f94 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8025f94:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8025f98:	4770      	bx	lr
 8025f9a:	bf00      	nop

08025f9c <__gnu_Unwind_Restore_WMMXD>:
 8025f9c:	ecf0 0102 	ldfe	f0, [r0], #8
 8025fa0:	ecf0 1102 	ldfe	f1, [r0], #8
 8025fa4:	ecf0 2102 	ldfe	f2, [r0], #8
 8025fa8:	ecf0 3102 	ldfe	f3, [r0], #8
 8025fac:	ecf0 4102 	ldfe	f4, [r0], #8
 8025fb0:	ecf0 5102 	ldfe	f5, [r0], #8
 8025fb4:	ecf0 6102 	ldfe	f6, [r0], #8
 8025fb8:	ecf0 7102 	ldfe	f7, [r0], #8
 8025fbc:	ecf0 8102 	ldfp	f0, [r0], #8
 8025fc0:	ecf0 9102 	ldfp	f1, [r0], #8
 8025fc4:	ecf0 a102 	ldfp	f2, [r0], #8
 8025fc8:	ecf0 b102 	ldfp	f3, [r0], #8
 8025fcc:	ecf0 c102 	ldfp	f4, [r0], #8
 8025fd0:	ecf0 d102 	ldfp	f5, [r0], #8
 8025fd4:	ecf0 e102 	ldfp	f6, [r0], #8
 8025fd8:	ecf0 f102 	ldfp	f7, [r0], #8
 8025fdc:	4770      	bx	lr
 8025fde:	bf00      	nop

08025fe0 <__gnu_Unwind_Save_WMMXD>:
 8025fe0:	ece0 0102 	stfe	f0, [r0], #8
 8025fe4:	ece0 1102 	stfe	f1, [r0], #8
 8025fe8:	ece0 2102 	stfe	f2, [r0], #8
 8025fec:	ece0 3102 	stfe	f3, [r0], #8
 8025ff0:	ece0 4102 	stfe	f4, [r0], #8
 8025ff4:	ece0 5102 	stfe	f5, [r0], #8
 8025ff8:	ece0 6102 	stfe	f6, [r0], #8
 8025ffc:	ece0 7102 	stfe	f7, [r0], #8
 8026000:	ece0 8102 	stfp	f0, [r0], #8
 8026004:	ece0 9102 	stfp	f1, [r0], #8
 8026008:	ece0 a102 	stfp	f2, [r0], #8
 802600c:	ece0 b102 	stfp	f3, [r0], #8
 8026010:	ece0 c102 	stfp	f4, [r0], #8
 8026014:	ece0 d102 	stfp	f5, [r0], #8
 8026018:	ece0 e102 	stfp	f6, [r0], #8
 802601c:	ece0 f102 	stfp	f7, [r0], #8
 8026020:	4770      	bx	lr
 8026022:	bf00      	nop

08026024 <__gnu_Unwind_Restore_WMMXC>:
 8026024:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8026028:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 802602c:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8026030:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8026034:	4770      	bx	lr
 8026036:	bf00      	nop

08026038 <__gnu_Unwind_Save_WMMXC>:
 8026038:	fca0 8101 	stc2	1, cr8, [r0], #4
 802603c:	fca0 9101 	stc2	1, cr9, [r0], #4
 8026040:	fca0 a101 	stc2	1, cr10, [r0], #4
 8026044:	fca0 b101 	stc2	1, cr11, [r0], #4
 8026048:	4770      	bx	lr
 802604a:	bf00      	nop

0802604c <_Unwind_RaiseException>:
 802604c:	46ec      	mov	ip, sp
 802604e:	b500      	push	{lr}
 8026050:	e92d 5000 	stmdb	sp!, {ip, lr}
 8026054:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8026058:	f04f 0300 	mov.w	r3, #0
 802605c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8026060:	a901      	add	r1, sp, #4
 8026062:	f7ff fbbf 	bl	80257e4 <__gnu_Unwind_RaiseException>
 8026066:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 802606a:	b012      	add	sp, #72	; 0x48
 802606c:	4770      	bx	lr
 802606e:	bf00      	nop

08026070 <_Unwind_Resume>:
 8026070:	46ec      	mov	ip, sp
 8026072:	b500      	push	{lr}
 8026074:	e92d 5000 	stmdb	sp!, {ip, lr}
 8026078:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 802607c:	f04f 0300 	mov.w	r3, #0
 8026080:	e92d 000c 	stmdb	sp!, {r2, r3}
 8026084:	a901      	add	r1, sp, #4
 8026086:	f7ff fbe7 	bl	8025858 <__gnu_Unwind_Resume>
 802608a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 802608e:	b012      	add	sp, #72	; 0x48
 8026090:	4770      	bx	lr
 8026092:	bf00      	nop

08026094 <_Unwind_Resume_or_Rethrow>:
 8026094:	46ec      	mov	ip, sp
 8026096:	b500      	push	{lr}
 8026098:	e92d 5000 	stmdb	sp!, {ip, lr}
 802609c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80260a0:	f04f 0300 	mov.w	r3, #0
 80260a4:	e92d 000c 	stmdb	sp!, {r2, r3}
 80260a8:	a901      	add	r1, sp, #4
 80260aa:	f7ff fbf7 	bl	802589c <__gnu_Unwind_Resume_or_Rethrow>
 80260ae:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80260b2:	b012      	add	sp, #72	; 0x48
 80260b4:	4770      	bx	lr
 80260b6:	bf00      	nop

080260b8 <_Unwind_ForcedUnwind>:
 80260b8:	46ec      	mov	ip, sp
 80260ba:	b500      	push	{lr}
 80260bc:	e92d 5000 	stmdb	sp!, {ip, lr}
 80260c0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80260c4:	f04f 0300 	mov.w	r3, #0
 80260c8:	e92d 000c 	stmdb	sp!, {r2, r3}
 80260cc:	ab01      	add	r3, sp, #4
 80260ce:	f7ff fbb9 	bl	8025844 <__gnu_Unwind_ForcedUnwind>
 80260d2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80260d6:	b012      	add	sp, #72	; 0x48
 80260d8:	4770      	bx	lr
 80260da:	bf00      	nop

080260dc <_Unwind_Backtrace>:
 80260dc:	46ec      	mov	ip, sp
 80260de:	b500      	push	{lr}
 80260e0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80260e4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80260e8:	f04f 0300 	mov.w	r3, #0
 80260ec:	e92d 000c 	stmdb	sp!, {r2, r3}
 80260f0:	aa01      	add	r2, sp, #4
 80260f2:	f7ff fc33 	bl	802595c <__gnu_Unwind_Backtrace>
 80260f6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80260fa:	b012      	add	sp, #72	; 0x48
 80260fc:	4770      	bx	lr
 80260fe:	bf00      	nop

08026100 <next_unwind_byte>:
 8026100:	7a03      	ldrb	r3, [r0, #8]
 8026102:	b91b      	cbnz	r3, 802610c <next_unwind_byte+0xc>
 8026104:	7a43      	ldrb	r3, [r0, #9]
 8026106:	b943      	cbnz	r3, 802611a <next_unwind_byte+0x1a>
 8026108:	20b0      	movs	r0, #176	; 0xb0
 802610a:	4770      	bx	lr
 802610c:	1e5a      	subs	r2, r3, #1
 802610e:	6803      	ldr	r3, [r0, #0]
 8026110:	7202      	strb	r2, [r0, #8]
 8026112:	021a      	lsls	r2, r3, #8
 8026114:	6002      	str	r2, [r0, #0]
 8026116:	0e18      	lsrs	r0, r3, #24
 8026118:	4770      	bx	lr
 802611a:	6842      	ldr	r2, [r0, #4]
 802611c:	3b01      	subs	r3, #1
 802611e:	b410      	push	{r4}
 8026120:	7243      	strb	r3, [r0, #9]
 8026122:	6813      	ldr	r3, [r2, #0]
 8026124:	2103      	movs	r1, #3
 8026126:	1d14      	adds	r4, r2, #4
 8026128:	7201      	strb	r1, [r0, #8]
 802612a:	021a      	lsls	r2, r3, #8
 802612c:	6044      	str	r4, [r0, #4]
 802612e:	6002      	str	r2, [r0, #0]
 8026130:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026134:	0e18      	lsrs	r0, r3, #24
 8026136:	4770      	bx	lr

08026138 <_Unwind_GetGR.constprop.0>:
 8026138:	b500      	push	{lr}
 802613a:	b085      	sub	sp, #20
 802613c:	ab03      	add	r3, sp, #12
 802613e:	2100      	movs	r1, #0
 8026140:	9300      	str	r3, [sp, #0]
 8026142:	220c      	movs	r2, #12
 8026144:	460b      	mov	r3, r1
 8026146:	f7ff fbb9 	bl	80258bc <_Unwind_VRS_Get>
 802614a:	9803      	ldr	r0, [sp, #12]
 802614c:	b005      	add	sp, #20
 802614e:	f85d fb04 	ldr.w	pc, [sp], #4
 8026152:	bf00      	nop

08026154 <unwind_UCB_from_context>:
 8026154:	e7f0      	b.n	8026138 <_Unwind_GetGR.constprop.0>
 8026156:	bf00      	nop

08026158 <__gnu_unwind_execute>:
 8026158:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802615c:	4606      	mov	r6, r0
 802615e:	b085      	sub	sp, #20
 8026160:	460d      	mov	r5, r1
 8026162:	f04f 0800 	mov.w	r8, #0
 8026166:	4628      	mov	r0, r5
 8026168:	f7ff ffca 	bl	8026100 <next_unwind_byte>
 802616c:	28b0      	cmp	r0, #176	; 0xb0
 802616e:	4604      	mov	r4, r0
 8026170:	f000 80b5 	beq.w	80262de <__gnu_unwind_execute+0x186>
 8026174:	f020 017f 	bic.w	r1, r0, #127	; 0x7f
 8026178:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 802617c:	d020      	beq.n	80261c0 <__gnu_unwind_execute+0x68>
 802617e:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8026182:	2b80      	cmp	r3, #128	; 0x80
 8026184:	d07a      	beq.n	802627c <__gnu_unwind_execute+0x124>
 8026186:	2b90      	cmp	r3, #144	; 0x90
 8026188:	d036      	beq.n	80261f8 <__gnu_unwind_execute+0xa0>
 802618a:	2ba0      	cmp	r3, #160	; 0xa0
 802618c:	d049      	beq.n	8026222 <__gnu_unwind_execute+0xca>
 802618e:	2bb0      	cmp	r3, #176	; 0xb0
 8026190:	d05c      	beq.n	802624c <__gnu_unwind_execute+0xf4>
 8026192:	2bc0      	cmp	r3, #192	; 0xc0
 8026194:	f000 8089 	beq.w	80262aa <__gnu_unwind_execute+0x152>
 8026198:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 802619c:	2bd0      	cmp	r3, #208	; 0xd0
 802619e:	d10b      	bne.n	80261b8 <__gnu_unwind_execute+0x60>
 80261a0:	f000 0207 	and.w	r2, r0, #7
 80261a4:	3201      	adds	r2, #1
 80261a6:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80261aa:	4630      	mov	r0, r6
 80261ac:	2101      	movs	r1, #1
 80261ae:	2305      	movs	r3, #5
 80261b0:	f7ff fd7c 	bl	8025cac <_Unwind_VRS_Pop>
 80261b4:	2800      	cmp	r0, #0
 80261b6:	d0d6      	beq.n	8026166 <__gnu_unwind_execute+0xe>
 80261b8:	2009      	movs	r0, #9
 80261ba:	b005      	add	sp, #20
 80261bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80261c0:	f10d 090c 	add.w	r9, sp, #12
 80261c4:	460b      	mov	r3, r1
 80261c6:	0087      	lsls	r7, r0, #2
 80261c8:	f8cd 9000 	str.w	r9, [sp]
 80261cc:	4630      	mov	r0, r6
 80261ce:	220d      	movs	r2, #13
 80261d0:	f7ff fb74 	bl	80258bc <_Unwind_VRS_Get>
 80261d4:	b2ff      	uxtb	r7, r7
 80261d6:	9b03      	ldr	r3, [sp, #12]
 80261d8:	f8cd 9000 	str.w	r9, [sp]
 80261dc:	3704      	adds	r7, #4
 80261de:	0660      	lsls	r0, r4, #25
 80261e0:	f04f 0100 	mov.w	r1, #0
 80261e4:	bf4c      	ite	mi
 80261e6:	1bdf      	submi	r7, r3, r7
 80261e8:	18ff      	addpl	r7, r7, r3
 80261ea:	4630      	mov	r0, r6
 80261ec:	460b      	mov	r3, r1
 80261ee:	220d      	movs	r2, #13
 80261f0:	9703      	str	r7, [sp, #12]
 80261f2:	f7ff fb8b 	bl	802590c <_Unwind_VRS_Set>
 80261f6:	e7b6      	b.n	8026166 <__gnu_unwind_execute+0xe>
 80261f8:	f000 030d 	and.w	r3, r0, #13
 80261fc:	2b0d      	cmp	r3, #13
 80261fe:	d0db      	beq.n	80261b8 <__gnu_unwind_execute+0x60>
 8026200:	af03      	add	r7, sp, #12
 8026202:	2100      	movs	r1, #0
 8026204:	f000 020f 	and.w	r2, r0, #15
 8026208:	460b      	mov	r3, r1
 802620a:	9700      	str	r7, [sp, #0]
 802620c:	4630      	mov	r0, r6
 802620e:	f7ff fb55 	bl	80258bc <_Unwind_VRS_Get>
 8026212:	2100      	movs	r1, #0
 8026214:	9700      	str	r7, [sp, #0]
 8026216:	460b      	mov	r3, r1
 8026218:	4630      	mov	r0, r6
 802621a:	220d      	movs	r2, #13
 802621c:	f7ff fb76 	bl	802590c <_Unwind_VRS_Set>
 8026220:	e7a1      	b.n	8026166 <__gnu_unwind_execute+0xe>
 8026222:	43c3      	mvns	r3, r0
 8026224:	f003 0307 	and.w	r3, r3, #7
 8026228:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 802622c:	411a      	asrs	r2, r3
 802622e:	0701      	lsls	r1, r0, #28
 8026230:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8026234:	f04f 0100 	mov.w	r1, #0
 8026238:	bf48      	it	mi
 802623a:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 802623e:	460b      	mov	r3, r1
 8026240:	4630      	mov	r0, r6
 8026242:	f7ff fd33 	bl	8025cac <_Unwind_VRS_Pop>
 8026246:	2800      	cmp	r0, #0
 8026248:	d1b6      	bne.n	80261b8 <__gnu_unwind_execute+0x60>
 802624a:	e78c      	b.n	8026166 <__gnu_unwind_execute+0xe>
 802624c:	28b1      	cmp	r0, #177	; 0xb1
 802624e:	d04c      	beq.n	80262ea <__gnu_unwind_execute+0x192>
 8026250:	28b2      	cmp	r0, #178	; 0xb2
 8026252:	d05d      	beq.n	8026310 <__gnu_unwind_execute+0x1b8>
 8026254:	28b3      	cmp	r0, #179	; 0xb3
 8026256:	f000 808a 	beq.w	802636e <__gnu_unwind_execute+0x216>
 802625a:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 802625e:	2bb4      	cmp	r3, #180	; 0xb4
 8026260:	d0aa      	beq.n	80261b8 <__gnu_unwind_execute+0x60>
 8026262:	f000 0207 	and.w	r2, r0, #7
 8026266:	3201      	adds	r2, #1
 8026268:	2101      	movs	r1, #1
 802626a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 802626e:	460b      	mov	r3, r1
 8026270:	4630      	mov	r0, r6
 8026272:	f7ff fd1b 	bl	8025cac <_Unwind_VRS_Pop>
 8026276:	2800      	cmp	r0, #0
 8026278:	d19e      	bne.n	80261b8 <__gnu_unwind_execute+0x60>
 802627a:	e774      	b.n	8026166 <__gnu_unwind_execute+0xe>
 802627c:	4628      	mov	r0, r5
 802627e:	f7ff ff3f 	bl	8026100 <next_unwind_byte>
 8026282:	0224      	lsls	r4, r4, #8
 8026284:	4320      	orrs	r0, r4
 8026286:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 802628a:	d095      	beq.n	80261b8 <__gnu_unwind_execute+0x60>
 802628c:	0104      	lsls	r4, r0, #4
 802628e:	2100      	movs	r1, #0
 8026290:	b2a2      	uxth	r2, r4
 8026292:	460b      	mov	r3, r1
 8026294:	4630      	mov	r0, r6
 8026296:	f7ff fd09 	bl	8025cac <_Unwind_VRS_Pop>
 802629a:	2800      	cmp	r0, #0
 802629c:	d18c      	bne.n	80261b8 <__gnu_unwind_execute+0x60>
 802629e:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80262a2:	bf18      	it	ne
 80262a4:	f04f 0801 	movne.w	r8, #1
 80262a8:	e75d      	b.n	8026166 <__gnu_unwind_execute+0xe>
 80262aa:	28c6      	cmp	r0, #198	; 0xc6
 80262ac:	d072      	beq.n	8026394 <__gnu_unwind_execute+0x23c>
 80262ae:	28c7      	cmp	r0, #199	; 0xc7
 80262b0:	d07a      	beq.n	80263a8 <__gnu_unwind_execute+0x250>
 80262b2:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80262b6:	2bc0      	cmp	r3, #192	; 0xc0
 80262b8:	f000 8089 	beq.w	80263ce <__gnu_unwind_execute+0x276>
 80262bc:	28c8      	cmp	r0, #200	; 0xc8
 80262be:	f000 80a5 	beq.w	802640c <__gnu_unwind_execute+0x2b4>
 80262c2:	28c9      	cmp	r0, #201	; 0xc9
 80262c4:	f47f af78 	bne.w	80261b8 <__gnu_unwind_execute+0x60>
 80262c8:	4628      	mov	r0, r5
 80262ca:	f7ff ff19 	bl	8026100 <next_unwind_byte>
 80262ce:	f000 020f 	and.w	r2, r0, #15
 80262d2:	3201      	adds	r2, #1
 80262d4:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 80262d8:	ea42 3200 	orr.w	r2, r2, r0, lsl #12
 80262dc:	e765      	b.n	80261aa <__gnu_unwind_execute+0x52>
 80262de:	f1b8 0f00 	cmp.w	r8, #0
 80262e2:	f000 8082 	beq.w	80263ea <__gnu_unwind_execute+0x292>
 80262e6:	2000      	movs	r0, #0
 80262e8:	e767      	b.n	80261ba <__gnu_unwind_execute+0x62>
 80262ea:	4628      	mov	r0, r5
 80262ec:	f7ff ff08 	bl	8026100 <next_unwind_byte>
 80262f0:	4602      	mov	r2, r0
 80262f2:	2800      	cmp	r0, #0
 80262f4:	f43f af60 	beq.w	80261b8 <__gnu_unwind_execute+0x60>
 80262f8:	f010 01f0 	ands.w	r1, r0, #240	; 0xf0
 80262fc:	f47f af5c 	bne.w	80261b8 <__gnu_unwind_execute+0x60>
 8026300:	4630      	mov	r0, r6
 8026302:	460b      	mov	r3, r1
 8026304:	f7ff fcd2 	bl	8025cac <_Unwind_VRS_Pop>
 8026308:	2800      	cmp	r0, #0
 802630a:	f47f af55 	bne.w	80261b8 <__gnu_unwind_execute+0x60>
 802630e:	e72a      	b.n	8026166 <__gnu_unwind_execute+0xe>
 8026310:	2100      	movs	r1, #0
 8026312:	f10d 090c 	add.w	r9, sp, #12
 8026316:	220d      	movs	r2, #13
 8026318:	460b      	mov	r3, r1
 802631a:	f8cd 9000 	str.w	r9, [sp]
 802631e:	4630      	mov	r0, r6
 8026320:	f7ff facc 	bl	80258bc <_Unwind_VRS_Get>
 8026324:	4628      	mov	r0, r5
 8026326:	f7ff feeb 	bl	8026100 <next_unwind_byte>
 802632a:	0602      	lsls	r2, r0, #24
 802632c:	f04f 0402 	mov.w	r4, #2
 8026330:	d50c      	bpl.n	802634c <__gnu_unwind_execute+0x1f4>
 8026332:	9b03      	ldr	r3, [sp, #12]
 8026334:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8026338:	40a0      	lsls	r0, r4
 802633a:	4403      	add	r3, r0
 802633c:	4628      	mov	r0, r5
 802633e:	9303      	str	r3, [sp, #12]
 8026340:	f7ff fede 	bl	8026100 <next_unwind_byte>
 8026344:	0603      	lsls	r3, r0, #24
 8026346:	f104 0407 	add.w	r4, r4, #7
 802634a:	d4f2      	bmi.n	8026332 <__gnu_unwind_execute+0x1da>
 802634c:	9b03      	ldr	r3, [sp, #12]
 802634e:	f8cd 9000 	str.w	r9, [sp]
 8026352:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8026356:	40a0      	lsls	r0, r4
 8026358:	f503 7301 	add.w	r3, r3, #516	; 0x204
 802635c:	2100      	movs	r1, #0
 802635e:	181c      	adds	r4, r3, r0
 8026360:	220d      	movs	r2, #13
 8026362:	460b      	mov	r3, r1
 8026364:	4630      	mov	r0, r6
 8026366:	9403      	str	r4, [sp, #12]
 8026368:	f7ff fad0 	bl	802590c <_Unwind_VRS_Set>
 802636c:	e6fb      	b.n	8026166 <__gnu_unwind_execute+0xe>
 802636e:	4628      	mov	r0, r5
 8026370:	f7ff fec6 	bl	8026100 <next_unwind_byte>
 8026374:	f000 020f 	and.w	r2, r0, #15
 8026378:	3201      	adds	r2, #1
 802637a:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 802637e:	2101      	movs	r1, #1
 8026380:	ea42 3200 	orr.w	r2, r2, r0, lsl #12
 8026384:	460b      	mov	r3, r1
 8026386:	4630      	mov	r0, r6
 8026388:	f7ff fc90 	bl	8025cac <_Unwind_VRS_Pop>
 802638c:	2800      	cmp	r0, #0
 802638e:	f47f af13 	bne.w	80261b8 <__gnu_unwind_execute+0x60>
 8026392:	e6e8      	b.n	8026166 <__gnu_unwind_execute+0xe>
 8026394:	4628      	mov	r0, r5
 8026396:	f7ff feb3 	bl	8026100 <next_unwind_byte>
 802639a:	f000 020f 	and.w	r2, r0, #15
 802639e:	3201      	adds	r2, #1
 80263a0:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 80263a4:	2103      	movs	r1, #3
 80263a6:	e7eb      	b.n	8026380 <__gnu_unwind_execute+0x228>
 80263a8:	4628      	mov	r0, r5
 80263aa:	f7ff fea9 	bl	8026100 <next_unwind_byte>
 80263ae:	4602      	mov	r2, r0
 80263b0:	2800      	cmp	r0, #0
 80263b2:	f43f af01 	beq.w	80261b8 <__gnu_unwind_execute+0x60>
 80263b6:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80263ba:	f47f aefd 	bne.w	80261b8 <__gnu_unwind_execute+0x60>
 80263be:	4630      	mov	r0, r6
 80263c0:	2104      	movs	r1, #4
 80263c2:	f7ff fc73 	bl	8025cac <_Unwind_VRS_Pop>
 80263c6:	2800      	cmp	r0, #0
 80263c8:	f47f aef6 	bne.w	80261b8 <__gnu_unwind_execute+0x60>
 80263cc:	e6cb      	b.n	8026166 <__gnu_unwind_execute+0xe>
 80263ce:	f000 020f 	and.w	r2, r0, #15
 80263d2:	3201      	adds	r2, #1
 80263d4:	2103      	movs	r1, #3
 80263d6:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 80263da:	460b      	mov	r3, r1
 80263dc:	4630      	mov	r0, r6
 80263de:	f7ff fc65 	bl	8025cac <_Unwind_VRS_Pop>
 80263e2:	2800      	cmp	r0, #0
 80263e4:	f47f aee8 	bne.w	80261b8 <__gnu_unwind_execute+0x60>
 80263e8:	e6bd      	b.n	8026166 <__gnu_unwind_execute+0xe>
 80263ea:	ac03      	add	r4, sp, #12
 80263ec:	4641      	mov	r1, r8
 80263ee:	220e      	movs	r2, #14
 80263f0:	4643      	mov	r3, r8
 80263f2:	9400      	str	r4, [sp, #0]
 80263f4:	4630      	mov	r0, r6
 80263f6:	f7ff fa61 	bl	80258bc <_Unwind_VRS_Get>
 80263fa:	9400      	str	r4, [sp, #0]
 80263fc:	4630      	mov	r0, r6
 80263fe:	4641      	mov	r1, r8
 8026400:	220f      	movs	r2, #15
 8026402:	4643      	mov	r3, r8
 8026404:	f7ff fa82 	bl	802590c <_Unwind_VRS_Set>
 8026408:	4640      	mov	r0, r8
 802640a:	e6d6      	b.n	80261ba <__gnu_unwind_execute+0x62>
 802640c:	4628      	mov	r0, r5
 802640e:	f7ff fe77 	bl	8026100 <next_unwind_byte>
 8026412:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8026416:	f000 030f 	and.w	r3, r0, #15
 802641a:	3210      	adds	r2, #16
 802641c:	3301      	adds	r3, #1
 802641e:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8026422:	e6c2      	b.n	80261aa <__gnu_unwind_execute+0x52>

08026424 <__gnu_unwind_frame>:
 8026424:	b510      	push	{r4, lr}
 8026426:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8026428:	b084      	sub	sp, #16
 802642a:	685a      	ldr	r2, [r3, #4]
 802642c:	2003      	movs	r0, #3
 802642e:	f88d 000c 	strb.w	r0, [sp, #12]
 8026432:	79dc      	ldrb	r4, [r3, #7]
 8026434:	f88d 400d 	strb.w	r4, [sp, #13]
 8026438:	0212      	lsls	r2, r2, #8
 802643a:	3308      	adds	r3, #8
 802643c:	4608      	mov	r0, r1
 802643e:	a901      	add	r1, sp, #4
 8026440:	9201      	str	r2, [sp, #4]
 8026442:	9302      	str	r3, [sp, #8]
 8026444:	f7ff fe88 	bl	8026158 <__gnu_unwind_execute>
 8026448:	b004      	add	sp, #16
 802644a:	bd10      	pop	{r4, pc}

0802644c <_Unwind_GetRegionStart>:
 802644c:	b508      	push	{r3, lr}
 802644e:	f7ff fe81 	bl	8026154 <unwind_UCB_from_context>
 8026452:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8026454:	bd08      	pop	{r3, pc}
 8026456:	bf00      	nop

08026458 <_Unwind_GetLanguageSpecificData>:
 8026458:	b508      	push	{r3, lr}
 802645a:	f7ff fe7b 	bl	8026154 <unwind_UCB_from_context>
 802645e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8026460:	79d8      	ldrb	r0, [r3, #7]
 8026462:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8026466:	3008      	adds	r0, #8
 8026468:	bd08      	pop	{r3, pc}
 802646a:	bf00      	nop

0802646c <_Unwind_GetDataRelBase>:
 802646c:	b508      	push	{r3, lr}
 802646e:	f7f9 fce7 	bl	801fe40 <abort>
 8026472:	bf00      	nop

08026474 <_Unwind_GetTextRelBase>:
 8026474:	b508      	push	{r3, lr}
 8026476:	f7f9 fce3 	bl	801fe40 <abort>
 802647a:	bf00      	nop

0802647c <__aeabi_idiv0>:
 802647c:	4770      	bx	lr
 802647e:	bf00      	nop

08026480 <__divdi3>:
 8026480:	2900      	cmp	r1, #0
 8026482:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8026486:	f2c0 80a6 	blt.w	80265d6 <__divdi3+0x156>
 802648a:	2600      	movs	r6, #0
 802648c:	2b00      	cmp	r3, #0
 802648e:	f2c0 809c 	blt.w	80265ca <__divdi3+0x14a>
 8026492:	4688      	mov	r8, r1
 8026494:	4694      	mov	ip, r2
 8026496:	469e      	mov	lr, r3
 8026498:	4615      	mov	r5, r2
 802649a:	4604      	mov	r4, r0
 802649c:	460f      	mov	r7, r1
 802649e:	2b00      	cmp	r3, #0
 80264a0:	d13d      	bne.n	802651e <__divdi3+0x9e>
 80264a2:	428a      	cmp	r2, r1
 80264a4:	d959      	bls.n	802655a <__divdi3+0xda>
 80264a6:	fab2 f382 	clz	r3, r2
 80264aa:	b13b      	cbz	r3, 80264bc <__divdi3+0x3c>
 80264ac:	f1c3 0220 	rsb	r2, r3, #32
 80264b0:	409f      	lsls	r7, r3
 80264b2:	fa20 f202 	lsr.w	r2, r0, r2
 80264b6:	409d      	lsls	r5, r3
 80264b8:	4317      	orrs	r7, r2
 80264ba:	409c      	lsls	r4, r3
 80264bc:	0c29      	lsrs	r1, r5, #16
 80264be:	0c22      	lsrs	r2, r4, #16
 80264c0:	fbb7 fef1 	udiv	lr, r7, r1
 80264c4:	b2a8      	uxth	r0, r5
 80264c6:	fb01 771e 	mls	r7, r1, lr, r7
 80264ca:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 80264ce:	fb00 f30e 	mul.w	r3, r0, lr
 80264d2:	42bb      	cmp	r3, r7
 80264d4:	d90a      	bls.n	80264ec <__divdi3+0x6c>
 80264d6:	197f      	adds	r7, r7, r5
 80264d8:	f10e 32ff 	add.w	r2, lr, #4294967295
 80264dc:	f080 8105 	bcs.w	80266ea <__divdi3+0x26a>
 80264e0:	42bb      	cmp	r3, r7
 80264e2:	f240 8102 	bls.w	80266ea <__divdi3+0x26a>
 80264e6:	f1ae 0e02 	sub.w	lr, lr, #2
 80264ea:	442f      	add	r7, r5
 80264ec:	1aff      	subs	r7, r7, r3
 80264ee:	b2a4      	uxth	r4, r4
 80264f0:	fbb7 f3f1 	udiv	r3, r7, r1
 80264f4:	fb01 7713 	mls	r7, r1, r3, r7
 80264f8:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80264fc:	fb00 f003 	mul.w	r0, r0, r3
 8026500:	42b8      	cmp	r0, r7
 8026502:	d908      	bls.n	8026516 <__divdi3+0x96>
 8026504:	197f      	adds	r7, r7, r5
 8026506:	f103 32ff 	add.w	r2, r3, #4294967295
 802650a:	f080 80f0 	bcs.w	80266ee <__divdi3+0x26e>
 802650e:	42b8      	cmp	r0, r7
 8026510:	f240 80ed 	bls.w	80266ee <__divdi3+0x26e>
 8026514:	3b02      	subs	r3, #2
 8026516:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 802651a:	2200      	movs	r2, #0
 802651c:	e003      	b.n	8026526 <__divdi3+0xa6>
 802651e:	428b      	cmp	r3, r1
 8026520:	d90f      	bls.n	8026542 <__divdi3+0xc2>
 8026522:	2200      	movs	r2, #0
 8026524:	4613      	mov	r3, r2
 8026526:	1c34      	adds	r4, r6, #0
 8026528:	bf18      	it	ne
 802652a:	2401      	movne	r4, #1
 802652c:	4260      	negs	r0, r4
 802652e:	f04f 0500 	mov.w	r5, #0
 8026532:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
 8026536:	4058      	eors	r0, r3
 8026538:	4051      	eors	r1, r2
 802653a:	1900      	adds	r0, r0, r4
 802653c:	4169      	adcs	r1, r5
 802653e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8026542:	fab3 f283 	clz	r2, r3
 8026546:	2a00      	cmp	r2, #0
 8026548:	f040 8086 	bne.w	8026658 <__divdi3+0x1d8>
 802654c:	428b      	cmp	r3, r1
 802654e:	d302      	bcc.n	8026556 <__divdi3+0xd6>
 8026550:	4584      	cmp	ip, r0
 8026552:	f200 80db 	bhi.w	802670c <__divdi3+0x28c>
 8026556:	2301      	movs	r3, #1
 8026558:	e7e5      	b.n	8026526 <__divdi3+0xa6>
 802655a:	b912      	cbnz	r2, 8026562 <__divdi3+0xe2>
 802655c:	2301      	movs	r3, #1
 802655e:	fbb3 f5f2 	udiv	r5, r3, r2
 8026562:	fab5 f085 	clz	r0, r5
 8026566:	2800      	cmp	r0, #0
 8026568:	d13b      	bne.n	80265e2 <__divdi3+0x162>
 802656a:	1b78      	subs	r0, r7, r5
 802656c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8026570:	fa1f fc85 	uxth.w	ip, r5
 8026574:	2201      	movs	r2, #1
 8026576:	fbb0 f8fe 	udiv	r8, r0, lr
 802657a:	0c21      	lsrs	r1, r4, #16
 802657c:	fb0e 0718 	mls	r7, lr, r8, r0
 8026580:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
 8026584:	fb0c f308 	mul.w	r3, ip, r8
 8026588:	42bb      	cmp	r3, r7
 802658a:	d907      	bls.n	802659c <__divdi3+0x11c>
 802658c:	197f      	adds	r7, r7, r5
 802658e:	f108 31ff 	add.w	r1, r8, #4294967295
 8026592:	d202      	bcs.n	802659a <__divdi3+0x11a>
 8026594:	42bb      	cmp	r3, r7
 8026596:	f200 80bd 	bhi.w	8026714 <__divdi3+0x294>
 802659a:	4688      	mov	r8, r1
 802659c:	1aff      	subs	r7, r7, r3
 802659e:	b2a4      	uxth	r4, r4
 80265a0:	fbb7 f3fe 	udiv	r3, r7, lr
 80265a4:	fb0e 7713 	mls	r7, lr, r3, r7
 80265a8:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80265ac:	fb0c fc03 	mul.w	ip, ip, r3
 80265b0:	45bc      	cmp	ip, r7
 80265b2:	d907      	bls.n	80265c4 <__divdi3+0x144>
 80265b4:	197f      	adds	r7, r7, r5
 80265b6:	f103 31ff 	add.w	r1, r3, #4294967295
 80265ba:	d202      	bcs.n	80265c2 <__divdi3+0x142>
 80265bc:	45bc      	cmp	ip, r7
 80265be:	f200 80a7 	bhi.w	8026710 <__divdi3+0x290>
 80265c2:	460b      	mov	r3, r1
 80265c4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80265c8:	e7ad      	b.n	8026526 <__divdi3+0xa6>
 80265ca:	4252      	negs	r2, r2
 80265cc:	ea6f 0606 	mvn.w	r6, r6
 80265d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80265d4:	e75d      	b.n	8026492 <__divdi3+0x12>
 80265d6:	4240      	negs	r0, r0
 80265d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80265dc:	f04f 36ff 	mov.w	r6, #4294967295
 80265e0:	e754      	b.n	802648c <__divdi3+0xc>
 80265e2:	f1c0 0220 	rsb	r2, r0, #32
 80265e6:	fa24 f102 	lsr.w	r1, r4, r2
 80265ea:	fa07 f300 	lsl.w	r3, r7, r0
 80265ee:	4085      	lsls	r5, r0
 80265f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80265f4:	40d7      	lsrs	r7, r2
 80265f6:	4319      	orrs	r1, r3
 80265f8:	fbb7 f2fe 	udiv	r2, r7, lr
 80265fc:	0c0b      	lsrs	r3, r1, #16
 80265fe:	fb0e 7712 	mls	r7, lr, r2, r7
 8026602:	fa1f fc85 	uxth.w	ip, r5
 8026606:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 802660a:	fb0c f702 	mul.w	r7, ip, r2
 802660e:	429f      	cmp	r7, r3
 8026610:	fa04 f400 	lsl.w	r4, r4, r0
 8026614:	d907      	bls.n	8026626 <__divdi3+0x1a6>
 8026616:	195b      	adds	r3, r3, r5
 8026618:	f102 30ff 	add.w	r0, r2, #4294967295
 802661c:	d274      	bcs.n	8026708 <__divdi3+0x288>
 802661e:	429f      	cmp	r7, r3
 8026620:	d972      	bls.n	8026708 <__divdi3+0x288>
 8026622:	3a02      	subs	r2, #2
 8026624:	442b      	add	r3, r5
 8026626:	1bdf      	subs	r7, r3, r7
 8026628:	b289      	uxth	r1, r1
 802662a:	fbb7 f8fe 	udiv	r8, r7, lr
 802662e:	fb0e 7318 	mls	r3, lr, r8, r7
 8026632:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8026636:	fb0c f708 	mul.w	r7, ip, r8
 802663a:	429f      	cmp	r7, r3
 802663c:	d908      	bls.n	8026650 <__divdi3+0x1d0>
 802663e:	195b      	adds	r3, r3, r5
 8026640:	f108 31ff 	add.w	r1, r8, #4294967295
 8026644:	d25c      	bcs.n	8026700 <__divdi3+0x280>
 8026646:	429f      	cmp	r7, r3
 8026648:	d95a      	bls.n	8026700 <__divdi3+0x280>
 802664a:	f1a8 0802 	sub.w	r8, r8, #2
 802664e:	442b      	add	r3, r5
 8026650:	1bd8      	subs	r0, r3, r7
 8026652:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 8026656:	e78e      	b.n	8026576 <__divdi3+0xf6>
 8026658:	f1c2 0320 	rsb	r3, r2, #32
 802665c:	fa2c f103 	lsr.w	r1, ip, r3
 8026660:	fa0e fe02 	lsl.w	lr, lr, r2
 8026664:	fa20 f703 	lsr.w	r7, r0, r3
 8026668:	ea41 0e0e 	orr.w	lr, r1, lr
 802666c:	fa08 f002 	lsl.w	r0, r8, r2
 8026670:	fa28 f103 	lsr.w	r1, r8, r3
 8026674:	ea4f 451e 	mov.w	r5, lr, lsr #16
 8026678:	4338      	orrs	r0, r7
 802667a:	fbb1 f8f5 	udiv	r8, r1, r5
 802667e:	0c03      	lsrs	r3, r0, #16
 8026680:	fb05 1118 	mls	r1, r5, r8, r1
 8026684:	fa1f f78e 	uxth.w	r7, lr
 8026688:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 802668c:	fb07 f308 	mul.w	r3, r7, r8
 8026690:	428b      	cmp	r3, r1
 8026692:	fa0c fc02 	lsl.w	ip, ip, r2
 8026696:	d909      	bls.n	80266ac <__divdi3+0x22c>
 8026698:	eb11 010e 	adds.w	r1, r1, lr
 802669c:	f108 39ff 	add.w	r9, r8, #4294967295
 80266a0:	d230      	bcs.n	8026704 <__divdi3+0x284>
 80266a2:	428b      	cmp	r3, r1
 80266a4:	d92e      	bls.n	8026704 <__divdi3+0x284>
 80266a6:	f1a8 0802 	sub.w	r8, r8, #2
 80266aa:	4471      	add	r1, lr
 80266ac:	1ac9      	subs	r1, r1, r3
 80266ae:	b280      	uxth	r0, r0
 80266b0:	fbb1 f3f5 	udiv	r3, r1, r5
 80266b4:	fb05 1113 	mls	r1, r5, r3, r1
 80266b8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80266bc:	fb07 f703 	mul.w	r7, r7, r3
 80266c0:	428f      	cmp	r7, r1
 80266c2:	d908      	bls.n	80266d6 <__divdi3+0x256>
 80266c4:	eb11 010e 	adds.w	r1, r1, lr
 80266c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80266cc:	d216      	bcs.n	80266fc <__divdi3+0x27c>
 80266ce:	428f      	cmp	r7, r1
 80266d0:	d914      	bls.n	80266fc <__divdi3+0x27c>
 80266d2:	3b02      	subs	r3, #2
 80266d4:	4471      	add	r1, lr
 80266d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80266da:	1bc9      	subs	r1, r1, r7
 80266dc:	fba3 890c 	umull	r8, r9, r3, ip
 80266e0:	4549      	cmp	r1, r9
 80266e2:	d309      	bcc.n	80266f8 <__divdi3+0x278>
 80266e4:	d005      	beq.n	80266f2 <__divdi3+0x272>
 80266e6:	2200      	movs	r2, #0
 80266e8:	e71d      	b.n	8026526 <__divdi3+0xa6>
 80266ea:	4696      	mov	lr, r2
 80266ec:	e6fe      	b.n	80264ec <__divdi3+0x6c>
 80266ee:	4613      	mov	r3, r2
 80266f0:	e711      	b.n	8026516 <__divdi3+0x96>
 80266f2:	4094      	lsls	r4, r2
 80266f4:	4544      	cmp	r4, r8
 80266f6:	d2f6      	bcs.n	80266e6 <__divdi3+0x266>
 80266f8:	3b01      	subs	r3, #1
 80266fa:	e7f4      	b.n	80266e6 <__divdi3+0x266>
 80266fc:	4603      	mov	r3, r0
 80266fe:	e7ea      	b.n	80266d6 <__divdi3+0x256>
 8026700:	4688      	mov	r8, r1
 8026702:	e7a5      	b.n	8026650 <__divdi3+0x1d0>
 8026704:	46c8      	mov	r8, r9
 8026706:	e7d1      	b.n	80266ac <__divdi3+0x22c>
 8026708:	4602      	mov	r2, r0
 802670a:	e78c      	b.n	8026626 <__divdi3+0x1a6>
 802670c:	4613      	mov	r3, r2
 802670e:	e70a      	b.n	8026526 <__divdi3+0xa6>
 8026710:	3b02      	subs	r3, #2
 8026712:	e757      	b.n	80265c4 <__divdi3+0x144>
 8026714:	f1a8 0802 	sub.w	r8, r8, #2
 8026718:	442f      	add	r7, r5
 802671a:	e73f      	b.n	802659c <__divdi3+0x11c>

0802671c <__udivdi3>:
 802671c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026720:	2b00      	cmp	r3, #0
 8026722:	d144      	bne.n	80267ae <__udivdi3+0x92>
 8026724:	428a      	cmp	r2, r1
 8026726:	4615      	mov	r5, r2
 8026728:	4604      	mov	r4, r0
 802672a:	d94f      	bls.n	80267cc <__udivdi3+0xb0>
 802672c:	fab2 f782 	clz	r7, r2
 8026730:	460e      	mov	r6, r1
 8026732:	b14f      	cbz	r7, 8026748 <__udivdi3+0x2c>
 8026734:	f1c7 0320 	rsb	r3, r7, #32
 8026738:	40b9      	lsls	r1, r7
 802673a:	fa20 f603 	lsr.w	r6, r0, r3
 802673e:	fa02 f507 	lsl.w	r5, r2, r7
 8026742:	430e      	orrs	r6, r1
 8026744:	fa00 f407 	lsl.w	r4, r0, r7
 8026748:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 802674c:	0c23      	lsrs	r3, r4, #16
 802674e:	fbb6 f0fe 	udiv	r0, r6, lr
 8026752:	b2af      	uxth	r7, r5
 8026754:	fb0e 6110 	mls	r1, lr, r0, r6
 8026758:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 802675c:	fb07 f100 	mul.w	r1, r7, r0
 8026760:	4299      	cmp	r1, r3
 8026762:	d909      	bls.n	8026778 <__udivdi3+0x5c>
 8026764:	195b      	adds	r3, r3, r5
 8026766:	f100 32ff 	add.w	r2, r0, #4294967295
 802676a:	f080 80ec 	bcs.w	8026946 <__udivdi3+0x22a>
 802676e:	4299      	cmp	r1, r3
 8026770:	f240 80e9 	bls.w	8026946 <__udivdi3+0x22a>
 8026774:	3802      	subs	r0, #2
 8026776:	442b      	add	r3, r5
 8026778:	1a5a      	subs	r2, r3, r1
 802677a:	b2a4      	uxth	r4, r4
 802677c:	fbb2 f3fe 	udiv	r3, r2, lr
 8026780:	fb0e 2213 	mls	r2, lr, r3, r2
 8026784:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 8026788:	fb07 f703 	mul.w	r7, r7, r3
 802678c:	4297      	cmp	r7, r2
 802678e:	d908      	bls.n	80267a2 <__udivdi3+0x86>
 8026790:	1952      	adds	r2, r2, r5
 8026792:	f103 31ff 	add.w	r1, r3, #4294967295
 8026796:	f080 80d8 	bcs.w	802694a <__udivdi3+0x22e>
 802679a:	4297      	cmp	r7, r2
 802679c:	f240 80d5 	bls.w	802694a <__udivdi3+0x22e>
 80267a0:	3b02      	subs	r3, #2
 80267a2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80267a6:	2600      	movs	r6, #0
 80267a8:	4631      	mov	r1, r6
 80267aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80267ae:	428b      	cmp	r3, r1
 80267b0:	d847      	bhi.n	8026842 <__udivdi3+0x126>
 80267b2:	fab3 f683 	clz	r6, r3
 80267b6:	2e00      	cmp	r6, #0
 80267b8:	d148      	bne.n	802684c <__udivdi3+0x130>
 80267ba:	428b      	cmp	r3, r1
 80267bc:	d302      	bcc.n	80267c4 <__udivdi3+0xa8>
 80267be:	4282      	cmp	r2, r0
 80267c0:	f200 80cd 	bhi.w	802695e <__udivdi3+0x242>
 80267c4:	2001      	movs	r0, #1
 80267c6:	4631      	mov	r1, r6
 80267c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80267cc:	b912      	cbnz	r2, 80267d4 <__udivdi3+0xb8>
 80267ce:	2501      	movs	r5, #1
 80267d0:	fbb5 f5f2 	udiv	r5, r5, r2
 80267d4:	fab5 f885 	clz	r8, r5
 80267d8:	f1b8 0f00 	cmp.w	r8, #0
 80267dc:	d177      	bne.n	80268ce <__udivdi3+0x1b2>
 80267de:	1b4a      	subs	r2, r1, r5
 80267e0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80267e4:	b2af      	uxth	r7, r5
 80267e6:	2601      	movs	r6, #1
 80267e8:	fbb2 f0fe 	udiv	r0, r2, lr
 80267ec:	0c23      	lsrs	r3, r4, #16
 80267ee:	fb0e 2110 	mls	r1, lr, r0, r2
 80267f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80267f6:	fb07 f300 	mul.w	r3, r7, r0
 80267fa:	428b      	cmp	r3, r1
 80267fc:	d907      	bls.n	802680e <__udivdi3+0xf2>
 80267fe:	1949      	adds	r1, r1, r5
 8026800:	f100 32ff 	add.w	r2, r0, #4294967295
 8026804:	d202      	bcs.n	802680c <__udivdi3+0xf0>
 8026806:	428b      	cmp	r3, r1
 8026808:	f200 80ba 	bhi.w	8026980 <__udivdi3+0x264>
 802680c:	4610      	mov	r0, r2
 802680e:	1ac9      	subs	r1, r1, r3
 8026810:	b2a4      	uxth	r4, r4
 8026812:	fbb1 f3fe 	udiv	r3, r1, lr
 8026816:	fb0e 1113 	mls	r1, lr, r3, r1
 802681a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 802681e:	fb07 f703 	mul.w	r7, r7, r3
 8026822:	42a7      	cmp	r7, r4
 8026824:	d908      	bls.n	8026838 <__udivdi3+0x11c>
 8026826:	1964      	adds	r4, r4, r5
 8026828:	f103 32ff 	add.w	r2, r3, #4294967295
 802682c:	f080 808f 	bcs.w	802694e <__udivdi3+0x232>
 8026830:	42a7      	cmp	r7, r4
 8026832:	f240 808c 	bls.w	802694e <__udivdi3+0x232>
 8026836:	3b02      	subs	r3, #2
 8026838:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 802683c:	4631      	mov	r1, r6
 802683e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026842:	2600      	movs	r6, #0
 8026844:	4630      	mov	r0, r6
 8026846:	4631      	mov	r1, r6
 8026848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802684c:	f1c6 0420 	rsb	r4, r6, #32
 8026850:	fa22 f504 	lsr.w	r5, r2, r4
 8026854:	40b3      	lsls	r3, r6
 8026856:	432b      	orrs	r3, r5
 8026858:	fa20 fc04 	lsr.w	ip, r0, r4
 802685c:	fa01 f706 	lsl.w	r7, r1, r6
 8026860:	fa21 f504 	lsr.w	r5, r1, r4
 8026864:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8026868:	ea4c 0707 	orr.w	r7, ip, r7
 802686c:	fbb5 f8fe 	udiv	r8, r5, lr
 8026870:	0c39      	lsrs	r1, r7, #16
 8026872:	fb0e 5518 	mls	r5, lr, r8, r5
 8026876:	fa1f fc83 	uxth.w	ip, r3
 802687a:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 802687e:	fb0c f108 	mul.w	r1, ip, r8
 8026882:	42a9      	cmp	r1, r5
 8026884:	fa02 f206 	lsl.w	r2, r2, r6
 8026888:	d904      	bls.n	8026894 <__udivdi3+0x178>
 802688a:	18ed      	adds	r5, r5, r3
 802688c:	f108 34ff 	add.w	r4, r8, #4294967295
 8026890:	d367      	bcc.n	8026962 <__udivdi3+0x246>
 8026892:	46a0      	mov	r8, r4
 8026894:	1a6d      	subs	r5, r5, r1
 8026896:	b2bf      	uxth	r7, r7
 8026898:	fbb5 f4fe 	udiv	r4, r5, lr
 802689c:	fb0e 5514 	mls	r5, lr, r4, r5
 80268a0:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 80268a4:	fb0c fc04 	mul.w	ip, ip, r4
 80268a8:	458c      	cmp	ip, r1
 80268aa:	d904      	bls.n	80268b6 <__udivdi3+0x19a>
 80268ac:	18c9      	adds	r1, r1, r3
 80268ae:	f104 35ff 	add.w	r5, r4, #4294967295
 80268b2:	d35c      	bcc.n	802696e <__udivdi3+0x252>
 80268b4:	462c      	mov	r4, r5
 80268b6:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 80268ba:	ebcc 0101 	rsb	r1, ip, r1
 80268be:	fba4 2302 	umull	r2, r3, r4, r2
 80268c2:	4299      	cmp	r1, r3
 80268c4:	d348      	bcc.n	8026958 <__udivdi3+0x23c>
 80268c6:	d044      	beq.n	8026952 <__udivdi3+0x236>
 80268c8:	4620      	mov	r0, r4
 80268ca:	2600      	movs	r6, #0
 80268cc:	e76c      	b.n	80267a8 <__udivdi3+0x8c>
 80268ce:	f1c8 0420 	rsb	r4, r8, #32
 80268d2:	fa01 f308 	lsl.w	r3, r1, r8
 80268d6:	fa05 f508 	lsl.w	r5, r5, r8
 80268da:	fa20 f704 	lsr.w	r7, r0, r4
 80268de:	40e1      	lsrs	r1, r4
 80268e0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80268e4:	431f      	orrs	r7, r3
 80268e6:	fbb1 f6fe 	udiv	r6, r1, lr
 80268ea:	0c3a      	lsrs	r2, r7, #16
 80268ec:	fb0e 1116 	mls	r1, lr, r6, r1
 80268f0:	fa1f fc85 	uxth.w	ip, r5
 80268f4:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
 80268f8:	fb0c f206 	mul.w	r2, ip, r6
 80268fc:	429a      	cmp	r2, r3
 80268fe:	fa00 f408 	lsl.w	r4, r0, r8
 8026902:	d907      	bls.n	8026914 <__udivdi3+0x1f8>
 8026904:	195b      	adds	r3, r3, r5
 8026906:	f106 31ff 	add.w	r1, r6, #4294967295
 802690a:	d237      	bcs.n	802697c <__udivdi3+0x260>
 802690c:	429a      	cmp	r2, r3
 802690e:	d935      	bls.n	802697c <__udivdi3+0x260>
 8026910:	3e02      	subs	r6, #2
 8026912:	442b      	add	r3, r5
 8026914:	1a9b      	subs	r3, r3, r2
 8026916:	b2bf      	uxth	r7, r7
 8026918:	fbb3 f0fe 	udiv	r0, r3, lr
 802691c:	fb0e 3310 	mls	r3, lr, r0, r3
 8026920:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8026924:	fb0c f100 	mul.w	r1, ip, r0
 8026928:	4299      	cmp	r1, r3
 802692a:	d907      	bls.n	802693c <__udivdi3+0x220>
 802692c:	195b      	adds	r3, r3, r5
 802692e:	f100 32ff 	add.w	r2, r0, #4294967295
 8026932:	d221      	bcs.n	8026978 <__udivdi3+0x25c>
 8026934:	4299      	cmp	r1, r3
 8026936:	d91f      	bls.n	8026978 <__udivdi3+0x25c>
 8026938:	3802      	subs	r0, #2
 802693a:	442b      	add	r3, r5
 802693c:	1a5a      	subs	r2, r3, r1
 802693e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8026942:	4667      	mov	r7, ip
 8026944:	e750      	b.n	80267e8 <__udivdi3+0xcc>
 8026946:	4610      	mov	r0, r2
 8026948:	e716      	b.n	8026778 <__udivdi3+0x5c>
 802694a:	460b      	mov	r3, r1
 802694c:	e729      	b.n	80267a2 <__udivdi3+0x86>
 802694e:	4613      	mov	r3, r2
 8026950:	e772      	b.n	8026838 <__udivdi3+0x11c>
 8026952:	40b0      	lsls	r0, r6
 8026954:	4290      	cmp	r0, r2
 8026956:	d2b7      	bcs.n	80268c8 <__udivdi3+0x1ac>
 8026958:	1e60      	subs	r0, r4, #1
 802695a:	2600      	movs	r6, #0
 802695c:	e724      	b.n	80267a8 <__udivdi3+0x8c>
 802695e:	4630      	mov	r0, r6
 8026960:	e722      	b.n	80267a8 <__udivdi3+0x8c>
 8026962:	42a9      	cmp	r1, r5
 8026964:	d995      	bls.n	8026892 <__udivdi3+0x176>
 8026966:	f1a8 0802 	sub.w	r8, r8, #2
 802696a:	441d      	add	r5, r3
 802696c:	e792      	b.n	8026894 <__udivdi3+0x178>
 802696e:	458c      	cmp	ip, r1
 8026970:	d9a0      	bls.n	80268b4 <__udivdi3+0x198>
 8026972:	3c02      	subs	r4, #2
 8026974:	4419      	add	r1, r3
 8026976:	e79e      	b.n	80268b6 <__udivdi3+0x19a>
 8026978:	4610      	mov	r0, r2
 802697a:	e7df      	b.n	802693c <__udivdi3+0x220>
 802697c:	460e      	mov	r6, r1
 802697e:	e7c9      	b.n	8026914 <__udivdi3+0x1f8>
 8026980:	3802      	subs	r0, #2
 8026982:	4429      	add	r1, r5
 8026984:	e743      	b.n	802680e <__udivdi3+0xf2>
 8026986:	bf00      	nop

08026988 <_getpid>:
 8026988:	4b02      	ldr	r3, [pc, #8]	; (8026994 <_getpid+0xc>)
 802698a:	2258      	movs	r2, #88	; 0x58
 802698c:	601a      	str	r2, [r3, #0]
 802698e:	f04f 30ff 	mov.w	r0, #4294967295
 8026992:	4770      	bx	lr
 8026994:	20001a8c 	.word	0x20001a8c

08026998 <_kill>:
 8026998:	4b02      	ldr	r3, [pc, #8]	; (80269a4 <_kill+0xc>)
 802699a:	2258      	movs	r2, #88	; 0x58
 802699c:	601a      	str	r2, [r3, #0]
 802699e:	f04f 30ff 	mov.w	r0, #4294967295
 80269a2:	4770      	bx	lr
 80269a4:	20001a8c 	.word	0x20001a8c

080269a8 <_init>:
 80269a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80269aa:	bf00      	nop
 80269ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80269ae:	bc08      	pop	{r3}
 80269b0:	469e      	mov	lr, r3
 80269b2:	4770      	bx	lr

080269b4 <_fini>:
 80269b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80269b6:	bf00      	nop
 80269b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80269ba:	bc08      	pop	{r3}
 80269bc:	469e      	mov	lr, r3
 80269be:	4770      	bx	lr

080269c0 <__unnamed_2>:
 80269c0:	001a 0000                                   ....

080269c4 <__unnamed_1>:
 80269c4:	0019 0000                                   ....

080269c8 <__unnamed_8>:
 80269c8:	0047 0000                                   G...

080269cc <__unnamed_10>:
 80269cc:	0001 0000                                   ....

080269d0 <__unnamed_11>:
 80269d0:	0001 0000                                   ....

080269d4 <__unnamed_12>:
 80269d4:	0047                                        G.

080269d6 <__unnamed_13>:
 80269d6:	0047                                        G.

080269d8 <__unnamed_20>:
 80269d8:	0400 0000                                   ....

080269dc <__unnamed_39>:
 80269dc:	0007 0000                                   ....

080269e0 <__unnamed_40>:
 80269e0:	0400 0000                                   ....

080269e4 <__unnamed_42>:
 80269e4:	0001 0000                                   ....

080269e8 <__unnamed_21>:
 80269e8:	0003 0000                                   ....

080269ec <__unnamed_37>:
 80269ec:	0004 0000                                   ....

080269f0 <__unnamed_48>:
 80269f0:	0005 0000                                   ....

080269f4 <__unnamed_46>:
 80269f4:	0000 1000                                   ....

080269f8 <__unnamed_43>:
 80269f8:	0000 0400                                   ....

080269fc <__unnamed_41>:
 80269fc:	0004 0000                                   ....

08026a00 <__unnamed_65>:
 8026a00:	fff3 ffff                                   ....

08026a04 <__unnamed_66>:
 8026a04:	fff5 ffff                                   ....

08026a08 <__unnamed_67>:
 8026a08:	fff4 ffff                                   ....

08026a0c <__unnamed_68>:
 8026a0c:	fff6 ffff                                   ....

08026a10 <__unnamed_49>:
 8026a10:	0009 0000                                   ....

08026a14 <__unnamed_72>:
 8026a14:	0009 0000                                   ....

08026a18 <__unnamed_71>:
 8026a18:	000e 0000                                   ....

08026a1c <__unnamed_70>:
 8026a1c:	0009 0000                                   ....

08026a20 <__unnamed_69>:
 8026a20:	0009 0000                                   ....

08026a24 <__unnamed_73>:
 8026a24:	a5a5 a5a5                                   ....

08026a28 <__unnamed_50>:
 8026a28:	00ff 0000                                   ....

08026a2c <__unnamed_38>:
 8026a2c:	0001 0000                                   ....

08026a30 <__unnamed_74>:
 8026a30:	0001 0040                                   ..@.

08026a34 <__unnamed_75>:
 8026a34:	0001 0040                                   ..@.

08026a38 <__unnamed_51>:
 8026a38:	0001 0000                                   ....

08026a3c <__unnamed_52>:
 8026a3c:	0003 0000                                   ....

08026a40 <__unnamed_53>:
 8026a40:	0008 0000                                   ....

08026a44 <__unnamed_54>:
 8026a44:	4240 000f                                   @B..

08026a48 <__unnamed_55>:
 8026a48:	0002 0000                                   ....

08026a4c <__unnamed_56>:
 8026a4c:	0001 0000                                   ....

08026a50 <__unnamed_57>:
 8026a50:	0003 0000                                   ....

08026a54 <__unnamed_58>:
 8026a54:	0001 0000                                   ....

08026a58 <__unnamed_59>:
 8026a58:	012c 0000                                   ,...

08026a5c <__unnamed_60>:
 8026a5c:	012c 0000                                   ,...

08026a60 <__unnamed_61>:
 8026a60:	07d0 0000                                   ....

08026a64 <__unnamed_62>:
 8026a64:	1388 0000                                   ....

08026a68 <__unnamed_63>:
 8026a68:	0001 0000                                   ....

08026a6c <__unnamed_64>:
 8026a6c:	0001 0000                                   ....

08026a70 <__unnamed_82>:
 8026a70:	fffb ffff                                   ....

08026a74 <__unnamed_83>:
 8026a74:	0005 0000                                   ....

08026a78 <__unnamed_84>:
 8026a78:	ffff ffff                                   ....

08026a7c <__unnamed_85>:
 8026a7c:	0007 0000                                   ....

08026a80 <__unnamed_86>:
 8026a80:	fffe ffff                                   ....

08026a84 <__unnamed_87>:
 8026a84:	000e 0000                                   ....

08026a88 <__unnamed_93>:
 8026a88:	0001 0000                                   ....

08026a8c <__unnamed_94>:
 8026a8c:	0100 0000                                   ....

08026a90 <__unnamed_95>:
 8026a90:	0001 0000                                   ....

08026a94 <__unnamed_15>:
 8026a94:	0007 0000                                   ....

08026a98 <__unnamed_14>:
 8026a98:	0001 0000                                   ....

08026a9c <__unnamed_101>:
 8026a9c:	0007 0000                                   ....

08026aa0 <__unnamed_100>:
 8026aa0:	0007 0000                                   ....

08026aa4 <__unnamed_98>:
 8026aa4:	0007 0000                                   ....

08026aa8 <__unnamed_99>:
 8026aa8:	0002 0000                                   ....

08026aac <__unnamed_97>:
 8026aac:	0007 0000                                   ....

08026ab0 <__unnamed_102>:
 8026ab0:	0020 0000                                    ...

08026ab4 <__unnamed_47>:
 8026ab4:	0001 0000                                   ....

08026ab8 <__unnamed_104>:
 8026ab8:	0000 0000 0000 8000                         ........

08026ac0 <__unnamed_105>:
 8026ac0:	ffff ffff ffff 7fff                         ........

08026ac8 <__unnamed_106>:
 8026ac8:	ffff ffff ffff ffff                         ........

08026ad0 <__unnamed_88>:
 8026ad0:	0006 0000                                   ....

08026ad4 <__unnamed_89>:
 8026ad4:	0014 0000                                   ....

08026ad8 <__unnamed_35>:
 8026ad8:	0013 0000                                   ....

08026adc <__unnamed_36>:
 8026adc:	0014 0000                                   ....

08026ae0 <__unnamed_107>:
 8026ae0:	0011 0000                                   ....

08026ae4 <__unnamed_4>:
 8026ae4:	0017 0000                                   ....

08026ae8 <__unnamed_108>:
 8026ae8:	0017 0000                                   ....

08026aec <__unnamed_109>:
 8026aec:	0002 0000                                   ....

08026af0 <__unnamed_45>:
 8026af0:	000e 0000                                   ....

08026af4 <__unnamed_110>:
 8026af4:	0004 0000                                   ....

08026af8 <__unnamed_111>:
 8026af8:	0001 0000                                   ....

08026afc <__unnamed_112>:
 8026afc:	fffd ffff                                   ....

08026b00 <__unnamed_113>:
 8026b00:	0011 0000                                   ....

08026b04 <__unnamed_114>:
 8026b04:	000e 0000                                   ....

08026b08 <__unnamed_115>:
 8026b08:	0017 0000                                   ....

08026b0c <__unnamed_116>:
 8026b0c:	0000 0100                                   ....

08026b10 <__unnamed_127>:
 8026b10:	0015 0000                                   ....

08026b14 <__unnamed_126>:
 8026b14:	0015 0000                                   ....

08026b18 <__unnamed_125>:
 8026b18:	0015 0000                                   ....

08026b1c <__unnamed_124>:
 8026b1c:	0015 0000                                   ....

08026b20 <__unnamed_123>:
 8026b20:	0015 0000                                   ....

08026b24 <__unnamed_122>:
 8026b24:	0015 0000                                   ....

08026b28 <__unnamed_121>:
 8026b28:	0015 0000                                   ....

08026b2c <__unnamed_120>:
 8026b2c:	0015 0000                                   ....

08026b30 <__unnamed_119>:
 8026b30:	0015 0000                                   ....

08026b34 <__unnamed_118>:
 8026b34:	0015 0000                                   ....

08026b38 <__unnamed_117>:
 8026b38:	0015 0000                                   ....

08026b3c <__unnamed_128>:
 8026b3c:	0018 0000                                   ....

08026b40 <__unnamed_129>:
 8026b40:	fffd ffff                                   ....

08026b44 <__unnamed_130>:
 8026b44:	0011 0000                                   ....

08026b48 <__unnamed_131>:
 8026b48:	000e 0000                                   ....

08026b4c <__unnamed_22>:
 8026b4c:	0017 0000                                   ....

08026b50 <__unnamed_23>:
 8026b50:	0000 0100                                   ....

08026b54 <__unnamed_34>:
 8026b54:	0015 0000                                   ....

08026b58 <__unnamed_33>:
 8026b58:	0015 0000                                   ....

08026b5c <__unnamed_32>:
 8026b5c:	0015 0000                                   ....

08026b60 <__unnamed_31>:
 8026b60:	0015 0000                                   ....

08026b64 <__unnamed_30>:
 8026b64:	0015 0000                                   ....

08026b68 <__unnamed_29>:
 8026b68:	0015 0000                                   ....

08026b6c <__unnamed_28>:
 8026b6c:	0015 0000                                   ....

08026b70 <__unnamed_27>:
 8026b70:	0015 0000                                   ....

08026b74 <__unnamed_26>:
 8026b74:	0015 0000                                   ....

08026b78 <__unnamed_25>:
 8026b78:	0015 0000                                   ....

08026b7c <__unnamed_24>:
 8026b7c:	0015 0000                                   ....

08026b80 <__unnamed_132>:
 8026b80:	0014 0000                                   ....

08026b84 <__unnamed_133>:
 8026b84:	0018 0000                                   ....

08026b88 <__unnamed_5>:
 8026b88:	0008 0000                                   ....

08026b8c <__unnamed_134>:
 8026b8c:	0033 0000                                   3...

08026b90 <__unnamed_135>:
 8026b90:	000a 0000                                   ....

08026b94 <__unnamed_136>:
 8026b94:	0033 0000                                   3...

08026b98 <__unnamed_137>:
 8026b98:	000a 0000                                   ....

08026b9c <__unnamed_9>:
 8026b9c:	ffff ffff                                   ....

08026ba0 <__unnamed_18>:
 8026ba0:	0047 0000                                   G...

08026ba4 <__unnamed_19>:
 8026ba4:	ffff ffff                                   ....

08026ba8 <__unnamed_138>:
 8026ba8:	0001 0000                                   ....

08026bac <__unnamed_139>:
 8026bac:	0002 0000                                   ....

08026bb0 <__unnamed_142>:
 8026bb0:	0080 0000                                   ....

08026bb4 <__unnamed_143>:
 8026bb4:	0001 0000                                   ....

08026bb8 <__unnamed_141>:
 8026bb8:	007d 0000                                   }...

08026bbc <__unnamed_140>:
 8026bbc:	0002 0000                                   ....

08026bc0 <__unnamed_144>:
 8026bc0:	0064 0000                                   d...

08026bc4 <__unnamed_145>:
 8026bc4:	0064 0000                                   d...

08026bc8 <__unnamed_146>:
 8026bc8:	0064 0000                                   d...

08026bcc <__unnamed_147>:
 8026bcc:	0064 0000                                   d...

08026bd0 <__unnamed_155>:
 8026bd0:	000b 0000                                   ....

08026bd4 <__unnamed_156>:
 8026bd4:	000a 0000                                   ....

08026bd8 <__unnamed_151>:
 8026bd8:	0030 0000                                   0...

08026bdc <__unnamed_152>:
 8026bdc:	0002 0000                                   ....

08026be0 <__unnamed_153>:
 8026be0:	0030 0000                                   0...

08026be4 <__unnamed_148>:
 8026be4:	0003 0000                                   ....

08026be8 <__unnamed_149>:
 8026be8:	0030                                        0.

08026bea <__unnamed_150>:
 8026bea:	0030                                        0.

08026bec <__unnamed_157>:
 8026bec:	0003 0000                                   ....

08026bf0 <__unnamed_96>:
 8026bf0:	0001 0000                                   ....

08026bf4 <__unnamed_44>:
 8026bf4:	ffff ffff                                   ....

08026bf8 <__unnamed_76>:
 8026bf8:	0010 0000                                   ....

08026bfc <__unnamed_158>:
 8026bfc:	0010 0000                                   ....

08026c00 <__unnamed_77>:
 8026c00:	0001 0000                                   ....

08026c04 <__unnamed_17>:
 8026c04:	0020                                         .

08026c06 <__unnamed_16>:
 8026c06:	0020                                         .

08026c08 <__unnamed_159>:
 8026c08:	0001 0000                                   ....

08026c0c <__unnamed_160>:
 8026c0c:	0001 0000                                   ....

08026c10 <__unnamed_161>:
 8026c10:	0001 0000                                   ....

08026c14 <__unnamed_162>:
 8026c14:	000a 0000                                   ....

08026c18 <__unnamed_154>:
 8026c18:	0001 0000                                   ....

08026c1c <__unnamed_103>:
 8026c1c:	0001 0000                                   ....

08026c20 <__unnamed_163>:
 8026c20:	ffff ffff                                   ....

08026c24 <__unnamed_164>:
 8026c24:	0101                                             .

08026c25 <__unnamed_165>:
 8026c25:	0101                                             .

08026c26 <__unnamed_166>:
 8026c26:	0101                                             .

08026c27 <__unnamed_167>:
 8026c27:	0101                                             .

08026c28 <__unnamed_168>:
 8026c28:	0101                                             .

08026c29 <__unnamed_7>:
 8026c29:	0101                                             .

08026c2a <__unnamed_169>:
 8026c2a:	0101                                             .

08026c2b <__unnamed_6>:
 8026c2b:	0101                                             .

08026c2c <__unnamed_170>:
 8026c2c:	0001 0000                                   ....

08026c30 <__unnamed_78>:
 8026c30:	0900 003d                                   ..=.

08026c34 <__unnamed_79>:
 8026c34:	0008 0000                                   ....

08026c38 <__unnamed_171>:
 8026c38:	0004 0000                                   ....

08026c3c <__unnamed_172>:
 8026c3c:	0001 0000                                   ....

08026c40 <__unnamed_173>:
 8026c40:	ffff ffff                                   ....

08026c44 <__unnamed_174>:
 8026c44:	ffff ffff                                   ....

08026c48 <__unnamed_178>:
 8026c48:	0001 0000                                   ....

08026c4c <__unnamed_179>:
 8026c4c:	0001 0000                                   ....

08026c50 <__unnamed_176>:
 8026c50:	0101                                             .

08026c51 <__unnamed_177>:
 8026c51:	0001 e800                                        ...

08026c54 <__unnamed_80>:
 8026c54:	03e8 0000                                   ....

08026c58 <__unnamed_81>:
 8026c58:	0032 0000                                   2...

08026c5c <__unnamed_186>:
 8026c5c:	ffff 7fff                                   ....

08026c60 <__unnamed_92>:
 8026c60:	0a80 0000                                   ....

08026c64 <__unnamed_91>:
 8026c64:	0010 0000                                   ....

08026c68 <__unnamed_187>:
 8026c68:	0032 0000                                   2...

08026c6c <__unnamed_188>:
 8026c6c:	0007 0000                                   ....

08026c70 <__unnamed_184>:
 8026c70:	0101                                             .

08026c71 <__unnamed_185>:
 8026c71:	0001 0300                                        ...

08026c74 <__unnamed_183>:
 8026c74:	0003 0000                                   ....

08026c78 <__unnamed_181>:
 8026c78:	0003 0000                                   ....

08026c7c <__unnamed_182>:
 8026c7c:	0001 0000                                   ....

08026c80 <__unnamed_180>:
 8026c80:	0003 0000                                   ....

08026c84 <__unnamed_175>:
 8026c84:	0001 0000                                   ....

08026c88 <__unnamed_189>:
 8026c88:	fffb ffff                                   ....

08026c8c <__unnamed_190>:
 8026c8c:	0005 0000                                   ....

08026c90 <__unnamed_191>:
 8026c90:	ffff ffff                                   ....

08026c94 <__unnamed_192>:
 8026c94:	0007 0000                                   ....

08026c98 <__unnamed_193>:
 8026c98:	fffe ffff                                   ....

08026c9c <__unnamed_194>:
 8026c9c:	000e 0000                                   ....

08026ca0 <__unnamed_195>:
 8026ca0:	0000 1000                                   ....

08026ca4 <__unnamed_3>:
 8026ca4:	0011 0000                                   ....

08026ca8 <__unnamed_196>:
 8026ca8:	0000 1000                                   ....

08026cac <__unnamed_197>:
 8026cac:	0010 0000                                   ....

08026cb0 <__unnamed_199>:
 8026cb0:	0007 0000                                   ....

08026cb4 <__unnamed_198>:
 8026cb4:	0009 0000                                   ....

08026cb8 <__unnamed_90>:
 8026cb8:	0010 0000 7325 0000 5245 4f52 3a52 4d20     ....%s..ERROR: M
 8026cc8:	5841 4f4c 5347 5254 4e49 5347 5a49 2045     AXLOGSTRINGSIZE 
 8026cd8:	7865 6563 6465 6465 0000 0000 626f 2d6a     exceeded....obj-
 8026ce8:	703e 6e69 2120 203d 5028 6e69 614e 656d     >pin != (PinName
 8026cf8:	4e29 0043 3a43 6c5c 696c 756c 5c6d 655a     )NC.C:\llilum\Ze
 8026d08:	696c 5c67 626d 6465 542f 5241 4547 5f54     lig\mbed/TARGET_
 8026d18:	4944 4353 5f4f 3746 3634 474e 542f 5241     DISCO_F746NG/TAR
 8026d28:	4547 5f54 5453 2f4d 4154 4752 5445 535f     GET_STM/TARGET_S
 8026d38:	4d54 3233 3746 672f 6970 5f6f 626f 656a     TM32F7/gpio_obje
 8026d48:	7463 682e 0000 0000                         ct.h....

08026d50 <APBAHBPrescTable>:
 8026d50:	0000 0000 0201 0403 0201 0403 0706 0908     ................

08026d60 <CSWTCH.36>:
 8026d60:	1000 1010 1004 1010 1002 1010 0008 0000     ................

08026d70 <CSWTCH.35>:
 8026d70:	0401 0802 6970 206e 3d21 2820 6950 4e6e     ....pin != (PinN
 8026d80:	6d61 2965 434e 0000 3a43 6d5c 6562 2d64     ame)NC..C:\mbed-
 8026d90:	616d 7473 7265 6c5c 6269 6172 6972 7365     master\libraries
 8026da0:	6d5c 6562 5c64 6174 6772 7465 5c73 6168     \mbed\targets\ha
 8026db0:	5c6c 4154 4752 5445 535f 4d54 545c 5241     l\TARGET_STM\TAR
 8026dc0:	4547 5f54 5453 334d 4632 5c37 7067 6f69     GET_STM32F7\gpio
 8026dd0:	615f 6970 632e 0000 626f 2d6a 703e 6e69     _api.c..obj->pin
 8026de0:	2120 203d 5028 6e69 614e 656d 4e29 0043      != (PinName)NC.

08026df0 <gpio_mode>:
 8026df0:	0000 0000 0001 0000 0011 0000 0002 0000     ................
 8026e00:	0012 0000 0003 0000 0000 1011 0000 1021     ..............!.
 8026e10:	0000 1031 0000 1012 0000 1022 0000 1032     ..1......."...2.
 8026e20:	0000 1000 6950 6d6e 7061 6520 7272 726f     ....Pinmap error
 8026e30:	203a 7277 6e6f 2067 6f70 7472 6e20 6d75     : wrong port num
 8026e40:	6562 2e72 0000 0000 6970 206e 3d21 2820     ber.....pin != (
 8026e50:	6950 4e6e 6d61 2965 434e 0000 3a43 6d5c     PinName)NC..C:\m
 8026e60:	6562 2d64 616d 7473 7265 6c5c 6269 6172     bed-master\libra
 8026e70:	6972 7365 6d5c 6562 5c64 6174 6772 7465     ries\mbed\target
 8026e80:	5c73 6168 5c6c 4154 4752 5445 535f 4d54     s\hal\TARGET_STM
 8026e90:	545c 5241 4547 5f54 5453 334d 4632 5c37     \TARGET_STM32F7\
 8026ea0:	6970 6d6e 7061 632e 0000 0000 6143 6e6e     pinmap.c....Cann
 8026eb0:	746f 6920 696e 6974 6c61 7a69 2065 4155     ot initialize UA
 8026ec0:	5452 0000 626f 2d6a 753e 7261 2074 3d21     RT..obj->uart !=
 8026ed0:	2820 4155 5452 614e 656d 4e29 0043 0000      (UARTName)NC...
 8026ee0:	3a43 6d5c 6562 2d64 616d 7473 7265 6c5c     C:\mbed-master\l
 8026ef0:	6269 6172 6972 7365 6d5c 6562 5c64 6174     ibraries\mbed\ta
 8026f00:	6772 7465 5c73 6168 5c6c 4154 4752 5445     rgets\hal\TARGET
 8026f10:	535f 4d54 545c 5241 4547 5f54 5453 334d     _STM\TARGET_STM3
 8026f20:	4632 5c37 6573 6972 6c61 615f 6970 632e     2F7\serial_api.c
 8026f30:	0000 0000 6143 6e6e 746f 6920 696e 6974     ....Cannot initi
 8026f40:	6c61 7a69 2065 5053 0049 0000 626f 2d6a     alize SPI...obj-
 8026f50:	733e 6970 2120 203d 5328 4950 614e 656d     >spi != (SPIName
 8026f60:	4e29 0043 3a43 6d5c 6562 2d64 616d 7473     )NC.C:\mbed-mast
 8026f70:	7265 6c5c 6269 6172 6972 7365 6d5c 6562     er\libraries\mbe
 8026f80:	5c64 6174 6772 7465 5c73 6168 5c6c 4154     d\targets\hal\TA
 8026f90:	4752 5445 535f 4d54 545c 5241 4547 5f54     RGET_STM\TARGET_
 8026fa0:	5453 334d 4632 5c37 7073 5f69 7061 2e69     STM32F7\spi_api.
 8026fb0:	0063 0000 626d 6465 6120 7373 7265 6174     c...mbed asserta
 8026fc0:	6974 6e6f 6620 6961 656c 3a64 2520 2c73     tion failed: %s,
 8026fd0:	6620 6c69 3a65 2520 2c73 6c20 6e69 2065      file: %s, line 
 8026fe0:	6425 0a20 0000 0000 6f63 6c75 2064 6f6e     %d .....could no
 8026ff0:	2074 6970 6f6e 7475 0000 0000 6970 6d6e     t pinout....pinm
 8027000:	7061 6d20 7369 6d2d 7461 6863 0000 0000     ap mis-match....
 8027010:	6970 6d6e 7061 6e20 746f 6620 756f 646e     pinmap not found
 8027020:	6620 726f 7020 7265 7069 6568 6172 006c      for peripheral.
 8027030:	6970 6d6e 7061 6e20 746f 6620 756f 646e     pinmap not found
 8027040:	6620 726f 6620 6e75 7463 6f69 006e 0000      for function...

08027050 <us_interface>:
 8027050:	f9b5 0801 f9e1 0801 fa25 0801 fa3d 0801     ........%...=...
 8027060:	fa01 0801                                   ....

08027064 <us_data>:
 8027064:	7050 0802 19b4 2000                         Pp..... 

0802706c <PinMap_UART_TX>:
 802706c:	0000 0000 4c00 4000 0413 0000 0009 0000     .....L.@........
 802707c:	1000 4001 0393 0000 0026 0000 1400 4001     ...@....&......@
 802708c:	0413 0000 0057 0000 7800 4000 0413 0000     ....W....x.@....
 802709c:	ffff 0000 ffff ffff 0000 0000               ............

080270a8 <PinMap_UART_RX>:
 80270a8:	0017 0000 1000 4001 0393 0000 0027 0000     .......@....'...
 80270b8:	1400 4001 0413 0000 0056 0000 7800 4000     ...@....V....x.@
 80270c8:	0413 0000 ffff 0000 ffff ffff 0000 0000     ................

080270d8 <PinMap_SPI_MOSI>:
 80270d8:	001f 0000 3800 4000 0283 0000 0059 0000     .....8.@....Y...
 80270e8:	5000 4001 0283 0000 0083 0000 3800 4000     .P.@.........8.@
 80270f8:	0283 0000 ffff 0000 ffff ffff 0000 0000     ................

08027108 <PinMap_SPI_MISO>:
 8027108:	001e 0000 3800 4000 0283 0000 0058 0000     .....8.@....X...
 8027118:	5000 4001 0283 0000 0082 0000 3800 4000     .P.@.........8.@
 8027128:	0283 0000 ffff 0000 ffff ffff 0000 0000     ................

08027138 <PinMap_SPI_SCLK>:
 8027138:	0057 0000 5000 4001 0283 0000 0076 0000     W....P.@....v...
 8027148:	5000 4001 0283 0000 0081 0000 3800 4000     .P.@.........8.@
 8027158:	0283 0000 ffff 0000 ffff ffff 0000 0000     ................

08027168 <PinMap_SPI_SSEL>:
 8027168:	0014 0000 3800 4000 0383 0000 0019 0000     .....8.@........
 8027178:	3800 4000 0283 0000 0056 0000 5000 4001     .8.@....V....P.@
 8027188:	0283 0000 0080 0000 3800 4000 0283 0000     .........8.@....
 8027198:	ffff 0000 ffff ffff 0000 0000               ............

080271a4 <__sf_fake_stdin>:
	...

080271c4 <__sf_fake_stdout>:
	...

080271e4 <__sf_fake_stderr>:
	...
 8027204:	0043 0000                                   C...

08027208 <_global_impure_ptr>:
 8027208:	1728 2000 2d23 2b30 0020 6c68 004c 6665     (.. #-0+ .hlL.ef
 8027218:	4567 4746 4900 464e 6900 666e 4e00 4e41     gEFG.INF.inf.NAN
 8027228:	6e00 6e61 3000 3000 3231 3433 3635 3837     .nan.0.012345678
 8027238:	4139 4342 4544 0046 3130 3332 3534 3736     9ABCDEF.01234567
 8027248:	3938 6261 6463 6665 6500 6c25 0064 0000     89abcdef.e%ld...

08027258 <fpinan.5315>:
 8027258:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

08027270 <tinytens>:
 8027270:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 8027280:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 8027290:	6f43 64ac 0628 1168                         Co.d(.h.

08027298 <fpi.5279>:
 8027298:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 80272a8:	0000 0000                                   ....

080272ac <_ctype_>:
 80272ac:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80272bc:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80272cc:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80272dc:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80272ec:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80272fc:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 802730c:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 802731c:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 802732c:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
 80273ac:	4900 666e 6e69 7469 0079 614e 004e 4f50     .Infinity.NaN.PO
 80273bc:	4953 0058 002e 0000 0000 0000               SIX.........

080273c8 <__mprec_tens>:
 80273c8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 80273d8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 80273e8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 80273f8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 8027408:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 8027418:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 8027428:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 8027438:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 8027448:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 8027458:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 8027468:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 8027478:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 8027488:	9db4 79d9 7843 44ea                         ...yCx.D

08027490 <__mprec_bigtens>:
 8027490:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 80274a0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 80274b0:	bf3c 7f73 4fdd 7515                         <.s..O.u

080274b8 <p05.5314>:
 80274b8:	0005 0000 0019 0000 007d 0000               ........}...

080274c4 <__EH_FRAME_BEGIN__>:
 80274c4:	0000 0000                                   ....
