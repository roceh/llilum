
DISCO_F746NG\mbed_simple.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001d430  08000000  08000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.extab    00000018  0801d430  0801d430  00025430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .ARM.exidx    000000c8  0801d448  0801d448  00025448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data         000015e4  200001d0  0801d510  000281d0  2**4
                  CONTENTS, ALLOC, LOAD, DATA
  4 .got.plt      0000000c  200017b4  0801eaf4  000297b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000045c  200017c0  0801eb00  000297c0  2**2
                  ALLOC
  6 .ARM.attributes 00000032  00000000  00000000  000297c0  2**0
                  CONTENTS, READONLY
  7 .comment      00000070  00000000  00000000  000297f2  2**0
                  CONTENTS, READONLY
  8 .debug_str    000d6177  00000000  00000000  00029862  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00006ded  00000000  00000000  000ff9d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000024f1  00000000  00000000  001067c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0001cc2a  00000000  00000000  00108cb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009f0  00000000  00000000  001258e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 00002b5d  00000000  00000000  001262d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 00002cf7  00000000  00000000  00128e2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00006a18  00000000  00000000  0012bb28  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000c966  00000000  00000000  00132540  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00000948  00000000  00000000  0013eea6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  000026fd  00000000  00000000  0013f7ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      00000076  00000000  00000000  00141eeb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	00 00 05 20 49 41 01 08 95 41 01 08 a1 02 00 08     ... IA...A......
 8000010:	e5 3d 01 08 f9 3d 01 08 0d 3e 01 08 00 00 00 00     .=...=...>......
	...
 800002c:	51 3c 01 08 95 41 01 08 00 00 00 00 fd 3b 01 08     Q<...A.......;..
 800003c:	39 41 01 08 95 41 01 08 95 41 01 08 95 41 01 08     9A...A...A...A..
 800004c:	95 41 01 08 95 41 01 08 95 41 01 08 95 41 01 08     .A...A...A...A..
 800005c:	95 41 01 08 95 41 01 08 95 41 01 08 95 41 01 08     .A...A...A...A..
 800006c:	95 41 01 08 95 41 01 08 95 41 01 08 95 41 01 08     .A...A...A...A..
 800007c:	95 41 01 08 95 41 01 08 95 41 01 08 95 41 01 08     .A...A...A...A..
 800008c:	95 41 01 08 95 41 01 08 95 41 01 08 95 41 01 08     .A...A...A...A..
 800009c:	95 41 01 08 95 41 01 08 95 41 01 08 95 41 01 08     .A...A...A...A..
 80000ac:	95 41 01 08 95 41 01 08 95 41 01 08 95 41 01 08     .A...A...A...A..
 80000bc:	95 41 01 08 95 41 01 08 95 41 01 08 95 41 01 08     .A...A...A...A..
 80000cc:	95 41 01 08 95 41 01 08 95 41 01 08 95 41 01 08     .A...A...A...A..
 80000dc:	95 41 01 08 95 41 01 08 95 41 01 08 95 41 01 08     .A...A...A...A..
 80000ec:	95 41 01 08 95 41 01 08 95 41 01 08 95 41 01 08     .A...A...A...A..
 80000fc:	95 41 01 08 95 41 01 08 95 41 01 08 95 41 01 08     .A...A...A...A..
 800010c:	95 41 01 08 95 41 01 08 95 41 01 08 95 41 01 08     .A...A...A...A..
 800011c:	95 41 01 08 95 41 01 08 95 41 01 08 95 41 01 08     .A...A...A...A..
 800012c:	95 41 01 08 95 41 01 08 95 41 01 08 95 41 01 08     .A...A...A...A..
 800013c:	95 41 01 08 95 41 01 08 95 41 01 08 95 41 01 08     .A...A...A...A..
 800014c:	95 41 01 08 95 41 01 08 95 41 01 08 95 41 01 08     .A...A...A...A..
 800015c:	95 41 01 08 95 41 01 08 95 41 01 08 95 41 01 08     .A...A...A...A..
 800016c:	95 41 01 08 95 41 01 08 95 41 01 08 95 41 01 08     .A...A...A...A..
 800017c:	00 00 00 00 95 41 01 08 95 41 01 08 95 41 01 08     .....A...A...A..
 800018c:	95 41 01 08 95 41 01 08 95 41 01 08 95 41 01 08     .A...A...A...A..
 800019c:	95 41 01 08 95 41 01 08 95 41 01 08 95 41 01 08     .A...A...A...A..
 80001ac:	95 41 01 08 95 41 01 08 95 41 01 08 95 41 01 08     .A...A...A...A..
 80001bc:	95 41 01 08 95 41 01 08 95 41 01 08                 .A...A...A..

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200017c0 	.word	0x200017c0
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0801d42c 	.word	0x0801d42c

080001ec <frame_dummy>:
 80001ec:	4b08      	ldr	r3, [pc, #32]	; (8000210 <frame_dummy+0x24>)
 80001ee:	b510      	push	{r4, lr}
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4808      	ldr	r0, [pc, #32]	; (8000214 <frame_dummy+0x28>)
 80001f4:	4908      	ldr	r1, [pc, #32]	; (8000218 <frame_dummy+0x2c>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	4808      	ldr	r0, [pc, #32]	; (800021c <frame_dummy+0x30>)
 80001fc:	6803      	ldr	r3, [r0, #0]
 80001fe:	b903      	cbnz	r3, 8000202 <frame_dummy+0x16>
 8000200:	bd10      	pop	{r4, pc}
 8000202:	4b07      	ldr	r3, [pc, #28]	; (8000220 <frame_dummy+0x34>)
 8000204:	2b00      	cmp	r3, #0
 8000206:	d0fb      	beq.n	8000200 <frame_dummy+0x14>
 8000208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800020c:	4718      	bx	r3
 800020e:	bf00      	nop
 8000210:	00000000 	.word	0x00000000
 8000214:	0801d42c 	.word	0x0801d42c
 8000218:	200017c4 	.word	0x200017c4
 800021c:	200017b0 	.word	0x200017b0
 8000220:	00000000 	.word	0x00000000

08000224 <_mainCRTStartup>:
 8000224:	4b15      	ldr	r3, [pc, #84]	; (800027c <_mainCRTStartup+0x58>)
 8000226:	2b00      	cmp	r3, #0
 8000228:	bf08      	it	eq
 800022a:	4b13      	ldreq	r3, [pc, #76]	; (8000278 <_mainCRTStartup+0x54>)
 800022c:	469d      	mov	sp, r3
 800022e:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
 8000232:	2100      	movs	r1, #0
 8000234:	468b      	mov	fp, r1
 8000236:	460f      	mov	r7, r1
 8000238:	4813      	ldr	r0, [pc, #76]	; (8000288 <_mainCRTStartup+0x64>)
 800023a:	4a14      	ldr	r2, [pc, #80]	; (800028c <_mainCRTStartup+0x68>)
 800023c:	1a12      	subs	r2, r2, r0
 800023e:	f016 fcf3 	bl	8016c28 <memset>
 8000242:	4b0f      	ldr	r3, [pc, #60]	; (8000280 <_mainCRTStartup+0x5c>)
 8000244:	2b00      	cmp	r3, #0
 8000246:	d000      	beq.n	800024a <_mainCRTStartup+0x26>
 8000248:	4798      	blx	r3
 800024a:	4b0e      	ldr	r3, [pc, #56]	; (8000284 <_mainCRTStartup+0x60>)
 800024c:	2b00      	cmp	r3, #0
 800024e:	d000      	beq.n	8000252 <_mainCRTStartup+0x2e>
 8000250:	4798      	blx	r3
 8000252:	2000      	movs	r0, #0
 8000254:	2100      	movs	r1, #0
 8000256:	0004      	movs	r4, r0
 8000258:	000d      	movs	r5, r1
 800025a:	480d      	ldr	r0, [pc, #52]	; (8000290 <_mainCRTStartup+0x6c>)
 800025c:	2800      	cmp	r0, #0
 800025e:	d002      	beq.n	8000266 <_mainCRTStartup+0x42>
 8000260:	480c      	ldr	r0, [pc, #48]	; (8000294 <_mainCRTStartup+0x70>)
 8000262:	f3af 8000 	nop.w
 8000266:	f016 fc8f 	bl	8016b88 <__libc_init_array>
 800026a:	0020      	movs	r0, r4
 800026c:	0029      	movs	r1, r5
 800026e:	f014 fa21 	bl	80146b4 <__wrap_main>
 8000272:	f016 faed 	bl	8016850 <exit>
 8000276:	bf00      	nop
 8000278:	00080000 	.word	0x00080000
 800027c:	20050000 	.word	0x20050000
	...
 8000288:	200017c0 	.word	0x200017c0
 800028c:	20001c1c 	.word	0x20001c1c
	...

080002a0 <HardFault_Handler>:
 80002a0:	f000 f80f 	bl	80002c2 <ProcessorARMv7M::DebuggerConnected#3451>
 80002a4:	f010 0fff 	tst.w	r0, #255	; 0xff
 80002a8:	d100      	bne.n	80002ac <HardFault_Handler+0xc>
 80002aa:	e7fe      	b.n	80002aa <HardFault_Handler+0xa>
 80002ac:	f000 f810 	bl	80002d0 <ProcessorARMv7M::WasHardFaultOnVectorTableRead#3446>
 80002b0:	f010 0fff 	tst.w	r0, #255	; 0xff
 80002b4:	d002      	beq.n	80002bc <HardFault_Handler+0x1c>
 80002b6:	2019      	movs	r0, #25
 80002b8:	f000 f812 	bl	80002e0 <BugCheck::Raise#4938>
 80002bc:	201a      	movs	r0, #26
 80002be:	f000 f80f 	bl	80002e0 <BugCheck::Raise#4938>

080002c2 <ProcessorARMv7M::DebuggerConnected#3451>:
 80002c2:	b580      	push	{r7, lr}
 80002c4:	f013 fd6e 	bl	8013da4 <CUSTOM_STUB_DebuggerConnected>
 80002c8:	2801      	cmp	r0, #1
 80002ca:	bf18      	it	ne
 80002cc:	2000      	movne	r0, #0
 80002ce:	bd80      	pop	{r7, pc}

080002d0 <ProcessorARMv7M::WasHardFaultOnVectorTableRead#3446>:
 80002d0:	b580      	push	{r7, lr}
 80002d2:	f013 fd75 	bl	8013dc0 <CUSTOM_STUB_SCB__get_HFSR>
 80002d6:	f000 0002 	and.w	r0, r0, #2
 80002da:	0840      	lsrs	r0, r0, #1
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	46c0      	nop			; (mov r8, r8)

080002e0 <BugCheck::Raise#4938>:

        [NoReturn]
        [NoInline]
        [TS.WellKnownMethod( "BugCheck_Raise" )]
        public static void Raise( StopCode code )
        {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	4601      	mov	r1, r0
 80002e4:	4803      	ldr	r0, [pc, #12]	; (80002f4 <BugCheck::Raise#4938+0x14>)
            Device.Instance.ProcessBugCheck( code );
 80002e6:	4a04      	ldr	r2, [pc, #16]	; (80002f8 <BugCheck::Raise#4938+0x18>)
 80002e8:	4478      	add	r0, pc
 80002ea:	4410      	add	r0, r2
 80002ec:	f004 f988 	bl	8004600 <Device::ProcessBugCheck#16924>
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	46c0      	nop			; (mov r8, r8)
 80002f4:	180014c8 	.word	0x180014c8
 80002f8:	e800739c 	.word	0xe800739c

080002fc <MemManage_Handler_Zelig>:
        }
        
        [RT.HardwareExceptionHandler( RT.HardwareException.Fault )]
        [RT.ExportedMethod]
        private static unsafe void MemManage_Handler_Zelig( uint sp )
        {
 80002fc:	b580      	push	{r7, lr}
 80002fe:	f000 f801 	bl	8000304 <ProcessorARMv7M::MemManage_Handler#3455>
 8000302:	bd80      	pop	{r7, pc}

08000304 <ProcessorARMv7M::MemManage_Handler#3455>:
        /// <summary>
        /// Detects memory access violations to regions that are defined in the Memory Management Unit (MPU). 
        /// For example code execution from a memory region with read/write access only.
        /// </summary>
        private static void MemManage_Handler( ref StandardFrame registers )
        {
 8000304:	b570      	push	{r4, r5, r6, lr}
 8000306:	4e16      	ldr	r6, [pc, #88]	; (8000360 <ProcessorARMv7M::MemManage_Handler#3455+0x5c>)
 8000308:	4604      	mov	r4, r0
 800030a:	4816      	ldr	r0, [pc, #88]	; (8000364 <ProcessorARMv7M::MemManage_Handler#3455+0x60>)
 800030c:	447e      	add	r6, pc
 800030e:	1985      	adds	r5, r0, r6
 8000310:	f013 fd50 	bl	8013db4 <CUSTOM_STUB_SCB__get_CFSR>
 8000314:	4601      	mov	r1, r0
 8000316:	4628      	mov	r0, r5
 8000318:	f000 f83e 	bl	8000398 <BugCheck::Log#4940>
 800031c:	4812      	ldr	r0, [pc, #72]	; (8000368 <ProcessorARMv7M::MemManage_Handler#3455+0x64>)
 800031e:	1985      	adds	r5, r0, r6
 8000320:	f013 fd54 	bl	8013dcc <CUSTOM_STUB_SCB__get_MMFAR>
 8000324:	4601      	mov	r1, r0
 8000326:	4628      	mov	r0, r5
 8000328:	f000 f836 	bl	8000398 <BugCheck::Log#4940>
 800032c:	480f      	ldr	r0, [pc, #60]	; (800036c <ProcessorARMv7M::MemManage_Handler#3455+0x68>)
 800032e:	6821      	ldr	r1, [r4, #0]
 8000330:	4430      	add	r0, r6
 8000332:	f000 f831 	bl	8000398 <BugCheck::Log#4940>
 8000336:	f002 ff56 	bl	80031e6 <ProcessorARMv7M::IsBusFaultAddressValid#3448>
 800033a:	f010 0fff 	tst.w	r0, #255	; 0xff
 800033e:	d009      	beq.n	8000354 <ProcessorARMv7M::MemManage_Handler#3455+0x50>
 8000340:	f002 ff58 	bl	80031f4 <ProcessorARMv7M::IsBusFaultAddressPrecise#3449>
 8000344:	f010 0fff 	tst.w	r0, #255	; 0xff
 8000348:	d004      	beq.n	8000354 <ProcessorARMv7M::MemManage_Handler#3455+0x50>
 800034a:	f013 fd3f 	bl	8013dcc <CUSTOM_STUB_SCB__get_MMFAR>
 800034e:	f013 fc99 	bl	8013c84 <Breakpoint>
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f013 fd2e 	bl	8013db4 <CUSTOM_STUB_SCB__get_CFSR>
 8000358:	f013 fc94 	bl	8013c84 <Breakpoint>
 800035c:	bd70      	pop	{r4, r5, r6, pc}
 800035e:	46c0      	nop			; (mov r8, r8)
 8000360:	180014a4 	.word	0x180014a4
 8000364:	e80084cc 	.word	0xe80084cc
 8000368:	e80084fc 	.word	0xe80084fc
 800036c:	e800852c 	.word	0xe800852c

08000370 <UsageFault_Handler_Zelig>:
        }
        
        [RT.HardwareExceptionHandler( RT.HardwareException.Fault )]
        [RT.ExportedMethod]
        private static unsafe void UsageFault_Handler_Zelig( uint sp )
        {
 8000370:	b510      	push	{r4, lr}
 8000372:	4807      	ldr	r0, [pc, #28]	; (8000390 <UsageFault_Handler_Zelig+0x20>)
 8000374:	4907      	ldr	r1, [pc, #28]	; (8000394 <UsageFault_Handler_Zelig+0x24>)
 8000376:	4478      	add	r0, pc
 8000378:	180c      	adds	r4, r1, r0
 800037a:	f013 fd1b 	bl	8013db4 <CUSTOM_STUB_SCB__get_CFSR>
 800037e:	4601      	mov	r1, r0
 8000380:	4620      	mov	r0, r4
 8000382:	f000 f809 	bl	8000398 <BugCheck::Log#4940>
 8000386:	f013 fd15 	bl	8013db4 <CUSTOM_STUB_SCB__get_CFSR>
 800038a:	f013 fc7b 	bl	8013c84 <Breakpoint>
 800038e:	bd10      	pop	{r4, pc}
 8000390:	1800143a 	.word	0x1800143a
 8000394:	e80072dc 	.word	0xe80072dc

08000398 <BugCheck::Log#4940>:
        {
            Device.Instance.ProcessLog(format);
        }

        public static void Log(string format, int p1)
        {
 8000398:	b580      	push	{r7, lr}
 800039a:	460a      	mov	r2, r1
 800039c:	4601      	mov	r1, r0
 800039e:	4803      	ldr	r0, [pc, #12]	; (80003ac <BugCheck::Log#4940+0x14>)
            Device.Instance.ProcessLog(format, p1);
 80003a0:	4b03      	ldr	r3, [pc, #12]	; (80003b0 <BugCheck::Log#4940+0x18>)
 80003a2:	4478      	add	r0, pc
 80003a4:	4418      	add	r0, r3
 80003a6:	f004 f951 	bl	800464c <Device::ProcessLog#16926>
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	1800140e 	.word	0x1800140e
 80003b0:	e800739c 	.word	0xe800739c

080003b4 <BusFault_Handler_Zelig>:
        }
        
        [RT.HardwareExceptionHandler( RT.HardwareException.Fault )]
        [RT.ExportedMethod]
        private static unsafe void BusFault_Handler_Zelig( uint sp )
        {
 80003b4:	b580      	push	{r7, lr}
 80003b6:	f000 f801 	bl	80003bc <ProcessorARMv7M::BusFault_Handler#3457>
 80003ba:	bd80      	pop	{r7, pc}

080003bc <ProcessorARMv7M::BusFault_Handler#3457>:
        /// <summary>
        /// Detects memory access errors on instruction fetch, data read/write, interrupt vector fetch, and 
        /// register stacking (save/restore) on interrupt (entry/exit).
        /// </summary>
        private static void BusFault_Handler( ref StandardFrame registers )
        {
 80003bc:	b570      	push	{r4, r5, r6, lr}
 80003be:	4e16      	ldr	r6, [pc, #88]	; (8000418 <ProcessorARMv7M::BusFault_Handler#3457+0x5c>)
 80003c0:	4604      	mov	r4, r0
 80003c2:	4816      	ldr	r0, [pc, #88]	; (800041c <ProcessorARMv7M::BusFault_Handler#3457+0x60>)
 80003c4:	447e      	add	r6, pc
 80003c6:	1985      	adds	r5, r0, r6
 80003c8:	f013 fcf4 	bl	8013db4 <CUSTOM_STUB_SCB__get_CFSR>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4628      	mov	r0, r5
 80003d0:	f7ff ffe2 	bl	8000398 <BugCheck::Log#4940>
 80003d4:	4812      	ldr	r0, [pc, #72]	; (8000420 <ProcessorARMv7M::BusFault_Handler#3457+0x64>)
 80003d6:	1985      	adds	r5, r0, r6
 80003d8:	f013 fcfe 	bl	8013dd8 <CUSTOM_STUB_SCB__get_BFAR>
 80003dc:	4601      	mov	r1, r0
 80003de:	4628      	mov	r0, r5
 80003e0:	f7ff ffda 	bl	8000398 <BugCheck::Log#4940>
 80003e4:	480f      	ldr	r0, [pc, #60]	; (8000424 <ProcessorARMv7M::BusFault_Handler#3457+0x68>)
 80003e6:	6821      	ldr	r1, [r4, #0]
 80003e8:	4430      	add	r0, r6
 80003ea:	f7ff ffd5 	bl	8000398 <BugCheck::Log#4940>
 80003ee:	f002 fefa 	bl	80031e6 <ProcessorARMv7M::IsBusFaultAddressValid#3448>
 80003f2:	f010 0fff 	tst.w	r0, #255	; 0xff
 80003f6:	d009      	beq.n	800040c <ProcessorARMv7M::BusFault_Handler#3457+0x50>
 80003f8:	f002 fefc 	bl	80031f4 <ProcessorARMv7M::IsBusFaultAddressPrecise#3449>
 80003fc:	f010 0fff 	tst.w	r0, #255	; 0xff
 8000400:	d004      	beq.n	800040c <ProcessorARMv7M::BusFault_Handler#3457+0x50>
 8000402:	f013 fce9 	bl	8013dd8 <CUSTOM_STUB_SCB__get_BFAR>
 8000406:	f013 fc3d 	bl	8013c84 <Breakpoint>
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f013 fcd2 	bl	8013db4 <CUSTOM_STUB_SCB__get_CFSR>
 8000410:	f013 fc38 	bl	8013c84 <Breakpoint>
 8000414:	bd70      	pop	{r4, r5, r6, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	180013ec 	.word	0x180013ec
 800041c:	e80072dc 	.word	0xe80072dc
 8000420:	e800855c 	.word	0xe800855c
 8000424:	e800858c 	.word	0xe800858c

08000428 <main>:
            // This should only minimally setup hardware so that the system is functional.
            // For example, all the peripherals have been added to the address space,
            // memory has been initialized and operated at the nominal rate, the CPU runs at
            // the correct clock frequency, etc.
            //
            HardwareInitialization();
 8000428:	b510      	push	{r4, lr}
 800042a:	f003 f9f9 	bl	8003820 <Bootstrap::HardwareInitialization#3863>
            
            //
            // This only initializes the heap.
            //
            HeapInitialization();
 800042e:	f003 fa17 	bl	8003860 <Bootstrap::HeapInitialization#3864>
 8000432:	4c08      	ldr	r4, [pc, #32]	; (8000454 <main+0x2c>)

            //
            // This initializes the main software services, like object allocation, type system, thread manager, etc.
            //
            SoftwareInitialization( Device.Instance.BootstrapStack );
 8000434:	4808      	ldr	r0, [pc, #32]	; (8000458 <main+0x30>)
 8000436:	447c      	add	r4, pc
 8000438:	4420      	add	r0, r4
 800043a:	f003 fa21 	bl	8003880 <Device::get_BootstrapStack#17472>
 800043e:	f003 fa29 	bl	8003894 <Bootstrap::SoftwareInitialization#3865>

            //
            // Once all the software services have been initialized, we can activate the hardware.
            // Activating the hardware might require starting threads, associated delegate with callbacks, etc.
            //
            HardwareActivation();
 8000442:	f003 fa3f 	bl	80038c4 <Bootstrap::HardwareActivation#3866>

            //
            // After the hardware is ready, we can start the software services, which will use the hardware one.
            //
            SoftwareActivation();
 8000446:	f003 fa49 	bl	80038dc <Bootstrap::SoftwareActivation#3867>

            // 
            // Time to start execution of user app by delegating to the thread manager
            ThreadManager.Instance.StartThreads();
 800044a:	4804      	ldr	r0, [pc, #16]	; (800045c <main+0x34>)
 800044c:	4420      	add	r0, r4
 800044e:	f003 fa51 	bl	80038f4 <ARMv7ThreadManager::StartThreads#5217>
 8000452:	bd10      	pop	{r4, pc}
 8000454:	1800137a 	.word	0x1800137a
 8000458:	e800739c 	.word	0xe800739c
 800045c:	ffffea1c 	.word	0xffffea1c

08000460 <SVC_Handler_Zelig>:
            //
            
            [RT.HardwareExceptionHandler( RT.HardwareException.Service )]
            [RT.ExportedMethod]
            private static unsafe void SVC_Handler_Zelig( uint* args )
            {
 8000460:	b580      	push	{r7, lr}
                SVC_Code svc_number = (SVC_Code)((byte*)args[6])[-2]; // svc number is at stacked PC offset - 2 bytes
 8000462:	6980      	ldr	r0, [r0, #24]

                switch(svc_number)
 8000464:	f810 0c02 	ldrb.w	r0, [r0, #-2]
 8000468:	3811      	subs	r0, #17
 800046a:	2802      	cmp	r0, #2
 800046c:	bf18      	it	ne
 800046e:	2801      	cmpne	r0, #1
 8000470:	d000      	beq.n	8000474 <SVC_Handler_Zelig+0x14>
 8000472:	b910      	cbnz	r0, 800047a <SVC_Handler_Zelig+0x1a>
                //ProcessorARMv7M.SwitchToUnprivilegedMode( ); 
            }

            private static unsafe void LongJumpForRetireThread( )
            {
                LongJump( ); 
 8000474:	f000 f804 	bl	8000480 <Context::LongJump#5945>
 8000478:	bd80      	pop	{r7, pc}
 800047a:	2018      	movs	r0, #24
 800047c:	f7ff ff30 	bl	80002e0 <BugCheck::Raise#4938>

08000480 <Context::LongJump#5945>:
            {
                LongJump( ); 
            }
            
            private static unsafe void LongJump( )
            {
 8000480:	b510      	push	{r4, lr}
 8000482:	4809      	ldr	r0, [pc, #36]	; (80004a8 <Context::LongJump#5945+0x28>)
                //
                // Retrieve next context from ThreadManager
                //
                Context currentThreadCtx = (ProcessorARMv7M.Context)ThreadManager.Instance.CurrentThread.SwappedOutContext;
 8000484:	4909      	ldr	r1, [pc, #36]	; (80004ac <Context::LongJump#5945+0x2c>)
 8000486:	4a0a      	ldr	r2, [pc, #40]	; (80004b0 <Context::LongJump#5945+0x30>)
 8000488:	4478      	add	r0, pc
 800048a:	4401      	add	r1, r0
 800048c:	4410      	add	r0, r2
 800048e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000490:	69c0      	ldr	r0, [r0, #28]
 8000492:	f003 f86f 	bl	8003574 <TypeSystemManager::CastToType#5241>
 8000496:	4604      	mov	r4, r0
 8000498:	68a0      	ldr	r0, [r4, #8]
 800049a:	3028      	adds	r0, #40	; 0x28
 800049c:	f013 fb1e 	bl	8013adc <CMSIS_STUB_SCB__set_PSP>
                //
                SetProcessStackPointer(
                    AddressMath.Increment( currentThreadCtx.StackPointer, ProcessorARMv7M.Context.RegistersOnStack.SwitcherFrameSize )
                    );

                SetExcReturn( currentThreadCtx.EXC_RETURN ); 
 80004a0:	68e0      	ldr	r0, [r4, #12]
 80004a2:	f013 fbcb 	bl	8013c3c <CUSTOM_STUB_SetExcReturn>
 80004a6:	bd10      	pop	{r4, pc}
 80004a8:	18001328 	.word	0x18001328
 80004ac:	e80098bc 	.word	0xe80098bc
 80004b0:	ffffea1c 	.word	0xffffea1c

080004b4 <PendSV_Handler_Zelig>:
            }
            
            [RT.HardwareExceptionHandler( RT.HardwareException.Interrupt )]
            [RT.ExportedMethod]
            private static UIntPtr PendSV_Handler_Zelig( UIntPtr stackPtr )
            {
 80004b4:	b5b0      	push	{r4, r5, r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	4604      	mov	r4, r0
 80004ba:	2500      	movs	r5, #0
 80004bc:	2001      	movs	r0, #1
 80004be:	9501      	str	r5, [sp, #4]
 80004c0:	f013 fb22 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
 80004c4:	9500      	str	r5, [sp, #0]
 80004c6:	e9cd 0000 	strd	r0, r0, [sp]
                using(SmartHandles.InterruptState.Disable( ))
                {
                    unsafe
                    {
                        return ContextSwitch(ThreadManager.Instance, stackPtr );
 80004ca:	4620      	mov	r0, r4
 80004cc:	f000 f808 	bl	80004e0 <Context::ContextSwitch#5943>
 80004d0:	4604      	mov	r4, r0
 80004d2:	9801      	ldr	r0, [sp, #4]
 80004d4:	f013 fb18 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
 80004d8:	4620      	mov	r0, r4
 80004da:	b002      	add	sp, #8
 80004dc:	bdb0      	pop	{r4, r5, r7, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <Context::ContextSwitch#5943>:

#endregion


            private static UIntPtr ContextSwitch( ThreadManager tm, UIntPtr stackPointer )
            {
 80004e0:	b570      	push	{r4, r5, r6, lr}
 80004e2:	4605      	mov	r5, r0
 80004e4:	4812      	ldr	r0, [pc, #72]	; (8000530 <Context::ContextSwitch#5943+0x50>)
 80004e6:	4913      	ldr	r1, [pc, #76]	; (8000534 <Context::ContextSwitch#5943+0x54>)
 80004e8:	4478      	add	r0, pc
 80004ea:	4401      	add	r1, r0
 80004ec:	e9d1 0409 	ldrd	r0, r4, [r1, #36]	; 0x24
 80004f0:	b148      	cbz	r0, 8000506 <Context::ContextSwitch#5943+0x26>
 80004f2:	4911      	ldr	r1, [pc, #68]	; (8000538 <Context::ContextSwitch#5943+0x58>)
                ThreadImpl nextThread    = tm.NextThread;
                Context    ctx;

                if(currentThread != null)
                {
                    ctx = (Context)currentThread.SwappedOutContext;
 80004f4:	4a11      	ldr	r2, [pc, #68]	; (800053c <Context::ContextSwitch#5943+0x5c>)
 80004f6:	69c0      	ldr	r0, [r0, #28]
 80004f8:	4479      	add	r1, pc
 80004fa:	4411      	add	r1, r2
 80004fc:	f003 f83a 	bl	8003574 <TypeSystemManager::CastToType#5241>
                    //
                    // update SP as well as the EXC_RETURN address
                    //
                    unsafe
                    {
                        ctx.EXC_RETURN = PointerToFrame(stackPointer)->EXC_RETURN;
 8000500:	6829      	ldr	r1, [r5, #0]
 8000502:	e9c0 5102 	strd	r5, r1, [r0, #8]
 8000506:	4e0e      	ldr	r6, [pc, #56]	; (8000540 <Context::ContextSwitch#5943+0x60>)
                    }

                    ctx.StackPointer = stackPointer;
                }

                ctx = (Context)nextThread.SwappedOutContext;
 8000508:	480c      	ldr	r0, [pc, #48]	; (800053c <Context::ContextSwitch#5943+0x5c>)
 800050a:	447e      	add	r6, pc
 800050c:	1981      	adds	r1, r0, r6
 800050e:	69e0      	ldr	r0, [r4, #28]
 8000510:	f003 f830 	bl	8003574 <TypeSystemManager::CastToType#5241>
 8000514:	4605      	mov	r5, r0

                //
                // Pass EXC_RETURN down to the native portion of the 
                // PendSV handler we need to offset to the beginning of the frame
                //
                SetExcReturn( ctx.EXC_RETURN ); 
 8000516:	68e8      	ldr	r0, [r5, #12]
 8000518:	f013 fb90 	bl	8013c3c <CUSTOM_STUB_SetExcReturn>
                    
                //
                // Update thread manager state and Thread.CurrentThread static field
                //
                tm.CurrentThread = nextThread;
 800051c:	4620      	mov	r0, r4
 800051e:	f002 fda1 	bl	8003064 <ThreadManager::set_CurrentThread#3359>
 8000522:	4808      	ldr	r0, [pc, #32]	; (8000544 <Context::ContextSwitch#5943+0x64>)
 8000524:	4430      	add	r0, r6
 8000526:	f8c0 40bc 	str.w	r4, [r0, #188]	; 0xbc
 800052a:	68a8      	ldr	r0, [r5, #8]
 800052c:	bd70      	pop	{r4, r5, r6, pc}
 800052e:	46c0      	nop			; (mov r8, r8)
 8000530:	180012c8 	.word	0x180012c8
 8000534:	ffffea1c 	.word	0xffffea1c
 8000538:	180012b8 	.word	0x180012b8
 800053c:	e80098bc 	.word	0xe80098bc
 8000540:	180012a6 	.word	0x180012a6
 8000544:	fffffe3c 	.word	0xfffffe3c

08000548 <TypeSystemManager::Rethrow#5248>:

        [NoReturn]
        [NoInline]
        [TS.WellKnownMethod( "TypeSystemManager_Rethrow" )]
        public virtual void Rethrow()
        {
 8000548:	b580      	push	{r7, lr}
            DeliverException( ThreadImpl.GetCurrentException() );
 800054a:	f001 febf 	bl	80022cc <Thread::GetCurrentException#4203>
 800054e:	f004 fa1f 	bl	8004990 <TypeSystemManager::DeliverException#5250>
 8000552:	bd80      	pop	{r7, pc}

08000554 <AnyInterrupt>:
 8000554:	4770      	bx	lr

08000556 <SVC_Handler_Zelig_VFP_NoFPContext>:
            //
            
            [RT.HardwareExceptionHandler( RT.HardwareException.Interrupt )]
            [RT.ExportedMethod]
            private static unsafe void SVC_Handler_Zelig_VFP_NoFPContext( uint* args )
            {
 8000556:	b580      	push	{r7, lr}
                SVC_Code svc_number = (SVC_Code)((byte*)args[6])[-2]; // svc number is at stacked PC offset - 2 bytes
 8000558:	6980      	ldr	r0, [r0, #24]

                switch(svc_number)
 800055a:	f810 0c02 	ldrb.w	r0, [r0, #-2]
 800055e:	3811      	subs	r0, #17
 8000560:	2802      	cmp	r0, #2
 8000562:	bf18      	it	ne
 8000564:	2801      	cmpne	r0, #1
 8000566:	d000      	beq.n	800056a <SVC_Handler_Zelig_VFP_NoFPContext+0x14>
 8000568:	b910      	cbnz	r0, 8000570 <SVC_Handler_Zelig_VFP_NoFPContext+0x1a>
                //ProcessorARMv7M.SwitchToUnprivilegedMode( ); 
            }

            private static unsafe void LongJumpForRetireThread( )
            {
                LongJump( ); 
 800056a:	f000 f805 	bl	8000578 <Context::LongJump#5980>
 800056e:	bd80      	pop	{r7, pc}
 8000570:	2018      	movs	r0, #24
 8000572:	f7ff feb5 	bl	80002e0 <BugCheck::Raise#4938>
 8000576:	46c0      	nop			; (mov r8, r8)

08000578 <Context::LongJump#5980>:
            {
                LongJump( ); 
            }
            
            private static unsafe void LongJump( )
            {
 8000578:	b510      	push	{r4, lr}
 800057a:	4809      	ldr	r0, [pc, #36]	; (80005a0 <Context::LongJump#5980+0x28>)
 800057c:	4909      	ldr	r1, [pc, #36]	; (80005a4 <Context::LongJump#5980+0x2c>)
 800057e:	4478      	add	r0, pc
 8000580:	4408      	add	r0, r1
                {
                    [RT.Inline]
                    get
                    {
                        return (uint)(sizeof(SoftwareFrame) + sizeof(SoftwareFloatingPointFrame));
                    }
 8000582:	2128      	movs	r1, #40	; 0x28
 8000584:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000586:	69c4      	ldr	r4, [r0, #28]
            }

            public bool IsFullContext
            {
                [RT.Inline]
                get { return this.m_isFullContext; }
 8000588:	7c20      	ldrb	r0, [r4, #16]
                {
                    [RT.Inline]
                    get
                    {
                        return (uint)(sizeof(SoftwareFrame) + sizeof(SoftwareFloatingPointFrame));
                    }
 800058a:	2800      	cmp	r0, #0
 800058c:	bf18      	it	ne
 800058e:	2168      	movne	r1, #104	; 0x68
            //

            public override UIntPtr StackPointer
            {
                [RT.Inline]
                get { return this.SP; }
 8000590:	68a0      	ldr	r0, [r4, #8]
 8000592:	4408      	add	r0, r1
 8000594:	f013 faa2 	bl	8013adc <CMSIS_STUB_SCB__set_PSP>
                    currentThreadCtx.StackPointer, 
                    currentThreadCtx.IsFullContext 
                        ? RegistersOnStackFullFPContext.SwitcherFrameSize 
                        : RegistersOnStackNoFPContext.SwitcherFrameSize ) );

                SetExcReturn( currentThreadCtx.EXC_RETURN );
 8000598:	68e0      	ldr	r0, [r4, #12]
 800059a:	f013 fb4f 	bl	8013c3c <CUSTOM_STUB_SetExcReturn>
 800059e:	bd10      	pop	{r4, pc}
 80005a0:	18001232 	.word	0x18001232
 80005a4:	ffffea1c 	.word	0xffffea1c

080005a8 <PendSV_Handler_Zelig_VFP>:
            
            
            [RT.HardwareExceptionHandler( RT.HardwareException.Interrupt )]
            [RT.ExportedMethod]
            private static UIntPtr PendSV_Handler_Zelig_VFP( UIntPtr stackPointer, uint isParitalStack )
            {
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	4605      	mov	r5, r0
 80005ae:	2600      	movs	r6, #0
 80005b0:	2001      	movs	r0, #1
 80005b2:	460c      	mov	r4, r1
 80005b4:	9601      	str	r6, [sp, #4]
 80005b6:	f013 faa7 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
 80005ba:	2c00      	cmp	r4, #0
 80005bc:	9600      	str	r6, [sp, #0]
 80005be:	e9cd 0000 	strd	r0, r0, [sp]
                using (SmartHandles.InterruptState.Disable( ))
                {
                    return ContextSwitch( ThreadManager.Instance, stackPointer, isParitalStack == 0 );
 80005c2:	4628      	mov	r0, r5
 80005c4:	bf08      	it	eq
 80005c6:	2601      	moveq	r6, #1
 80005c8:	4631      	mov	r1, r6
 80005ca:	f000 f807 	bl	80005dc <Context::ContextSwitch#5978>
 80005ce:	4604      	mov	r4, r0
 80005d0:	9801      	ldr	r0, [sp, #4]
 80005d2:	f013 fa99 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
 80005d6:	4620      	mov	r0, r4
 80005d8:	b002      	add	sp, #8
 80005da:	bd70      	pop	{r4, r5, r6, pc}

080005dc <Context::ContextSwitch#5978>:
            }

            #endregion

            private static UIntPtr ContextSwitch( ThreadManager tm, UIntPtr stackPointer, bool isFullFrame )
            {
 80005dc:	b5b0      	push	{r4, r5, r7, lr}
 80005de:	4a0e      	ldr	r2, [pc, #56]	; (8000618 <Context::ContextSwitch#5978+0x3c>)
 80005e0:	4b0e      	ldr	r3, [pc, #56]	; (800061c <Context::ContextSwitch#5978+0x40>)
 80005e2:	447a      	add	r2, pc
 80005e4:	4413      	add	r3, r2
 80005e6:	e9d3 2409 	ldrd	r2, r4, [r3, #36]	; 0x24
 80005ea:	b132      	cbz	r2, 80005fa <Context::ContextSwitch#5978+0x1e>
 80005ec:	69d2      	ldr	r2, [r2, #28]

                    //
                    // update SP as well as the EXC_RETURN address
                    //     
                    ctx.IsFullContext = isFullFrame;
                    ctx.EXC_RETURN = isFullFrame 
 80005ee:	f011 0fff 	tst.w	r1, #255	; 0xff
 80005f2:	7411      	strb	r1, [r2, #16]
 80005f4:	6801      	ldr	r1, [r0, #0]
 80005f6:	e9c2 0102 	strd	r0, r1, [r2, #8]
 80005fa:	69e5      	ldr	r5, [r4, #28]

                //
                // Pass EXC_RETURN down to the native portion of the 
                // PendSV handler we need to offset to the beginning of the frame
                //
                SetExcReturn( ctx.EXC_RETURN );
 80005fc:	68e8      	ldr	r0, [r5, #12]
 80005fe:	f013 fb1d 	bl	8013c3c <CUSTOM_STUB_SetExcReturn>

                //
                // Update thread manager state and Thread.CurrentThread static field
                //
                tm.CurrentThread = nextThread;
 8000602:	4620      	mov	r0, r4
 8000604:	f002 fd2e 	bl	8003064 <ThreadManager::set_CurrentThread#3359>
 8000608:	4805      	ldr	r0, [pc, #20]	; (8000620 <Context::ContextSwitch#5978+0x44>)
 800060a:	4906      	ldr	r1, [pc, #24]	; (8000624 <Context::ContextSwitch#5978+0x48>)
 800060c:	4478      	add	r0, pc
 800060e:	4408      	add	r0, r1
 8000610:	f8c0 40bc 	str.w	r4, [r0, #188]	; 0xbc
            //

            public override UIntPtr StackPointer
            {
                [RT.Inline]
                get { return this.SP; }
 8000614:	68a8      	ldr	r0, [r5, #8]
 8000616:	bdb0      	pop	{r4, r5, r7, pc}
 8000618:	180011ce 	.word	0x180011ce
 800061c:	ffffea1c 	.word	0xffffea1c
 8000620:	180011a4 	.word	0x180011a4
 8000624:	fffffe3c 	.word	0xfffffe3c

08000628 <AnyInterrupt.1>:
 8000628:	4770      	bx	lr
 800062a:	46c0      	nop			; (mov r8, r8)

0800062c <Peripherals::ProcessInterrupt#17238>:
            //ProcessorARMv7M.InitiateContextSwitch( ); 
            //while(true) ;
        }

        public override void ProcessInterrupt()
        {
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	4909      	ldr	r1, [pc, #36]	; (8000658 <Peripherals::ProcessInterrupt#17238+0x2c>)
 8000632:	4a0a      	ldr	r2, [pc, #40]	; (800065c <Peripherals::ProcessInterrupt#17238+0x30>)
 8000634:	2000      	movs	r0, #0
 8000636:	9001      	str	r0, [sp, #4]
 8000638:	9000      	str	r0, [sp, #0]
 800063a:	4668      	mov	r0, sp
 800063c:	4479      	add	r1, pc
 800063e:	4411      	add	r1, r2
 8000640:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000642:	f002 f8bd 	bl	80027c0 <SwapCurrentThreadUnderInterrupt::.ctor#5347>
 8000646:	9800      	ldr	r0, [sp, #0]
 8000648:	9001      	str	r0, [sp, #4]
            using (RT.SmartHandles.SwapCurrentThreadUnderInterrupt hnd = RT.ThreadManager.InstallInterruptThread())
            {
                Drivers.InterruptController.Instance.ProcessInterrupt();
 800064a:	f007 ff6b 	bl	8008524 <InterruptController::ProcessInterrupt#17351>
 800064e:	a801      	add	r0, sp, #4
            }
 8000650:	f004 fc7c 	bl	8004f4c <SwapCurrentThreadUnderInterrupt::Dispose#5349>
 8000654:	b002      	add	sp, #8
 8000656:	bd80      	pop	{r7, pc}
 8000658:	18001174 	.word	0x18001174
 800065c:	ffffea1c 	.word	0xffffea1c

08000660 <Peripherals::ProcessFastInterrupt#17239>:
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	2000      	movs	r0, #0
 8000666:	9001      	str	r0, [sp, #4]
 8000668:	2011      	movs	r0, #17
 800066a:	f7ff fe39 	bl	80002e0 <BugCheck::Raise#4938>

0800066e <SystemTimer_Handler>:
        //
        
        [RT.HardwareExceptionHandler( RT.HardwareException.Interrupt )]
        [RT.ExportedMethod]
        private static void SystemTimer_Handler(uint id)
        {
 800066e:	b510      	push	{r4, lr}
 8000670:	b082      	sub	sp, #8
 8000672:	2400      	movs	r4, #0
 8000674:	2001      	movs	r0, #1
 8000676:	9401      	str	r4, [sp, #4]
 8000678:	f013 fa46 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
 800067c:	9400      	str	r4, [sp, #0]
 800067e:	e9cd 0000 	strd	r0, r0, [sp]
            using(RT.SmartHandles.InterruptState.Disable())
            {
                SystemTimer.Instance.ProcessTimeout( id );
 8000682:	f000 f805 	bl	8000690 <SystemTimer::ProcessTimeout#17017>
            }
 8000686:	9801      	ldr	r0, [sp, #4]
 8000688:	f013 fa3e 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
 800068c:	b002      	add	sp, #8
 800068e:	bd10      	pop	{r4, pc}

08000690 <SystemTimer::ProcessTimeout#17017>:
        /// <summary>
        /// Handle the timer expiration interrupt
        /// </summary>
        /// <param name="id">Timer ID from mbed</param>
        private void ProcessTimeout(uint id)
        {
 8000690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000694:	4820      	ldr	r0, [pc, #128]	; (8000718 <SystemTimer::ProcessTimeout#17017+0x88>)
            uint counter = this.Counter;

            //
            // BUGBUG: this logic does not cover the case of multiple wrapaorunds
            //
            m_accumulator           += TimeSinceAccumulatorUpdate(counter);
 8000696:	f8df 8084 	ldr.w	r8, [pc, #132]	; 800071c <SystemTimer::ProcessTimeout#17017+0x8c>
 800069a:	4478      	add	r0, pc
 800069c:	eb08 0400 	add.w	r4, r8, r0
        public uint Counter
        {
            [RT.Inline]
            get
            {
                return tmp_sys_timer_read();
 80006a0:	f013 fcd0 	bl	8014044 <tmp_sys_timer_read>
            uint counter = this.Counter;

            //
            // BUGBUG: this logic does not cover the case of multiple wrapaorunds
            //
            m_accumulator           += TimeSinceAccumulatorUpdate(counter);
 80006a4:	e9d4 6703 	ldrd	r6, r7, [r4, #12]
        public uint Counter
        {
            [RT.Inline]
            get
            {
                return tmp_sys_timer_read();
 80006a8:	4605      	mov	r5, r0
            uint counter = this.Counter;

            //
            // BUGBUG: this logic does not cover the case of multiple wrapaorunds
            //
            m_accumulator           += TimeSinceAccumulatorUpdate(counter);
 80006aa:	4620      	mov	r0, r4
 80006ac:	4629      	mov	r1, r5
 80006ae:	f007 fcd1 	bl	8008054 <SystemTimer::TimeSinceAccumulatorUpdate#17022>
 80006b2:	1980      	adds	r0, r0, r6
 80006b4:	f104 020c 	add.w	r2, r4, #12
 80006b8:	f147 0100 	adc.w	r1, r7, #0
 80006bc:	e882 0023 	stmia.w	r2, {r0, r1, r5}
            m_lastAccumulatorUpdate =  counter;

            // we just updated this above, so it will be precise
            ulong now = m_accumulator;
 80006c0:	e9d4 5603 	ldrd	r5, r6, [r4, #12]
 80006c4:	e007      	b.n	80006d6 <SystemTimer::ProcessTimeout#17017+0x46>
                    break;
                }

                // The current timeout is for the current node (Timer). Remove from List
                // so we do not try to Reload its time.
                node.RemoveFromList();
 80006c6:	4638      	mov	r0, r7
 80006c8:	f007 fcd3 	bl	8008072 <KernelNode`1::RemoveFromList#23592>
 80006cc:	6938      	ldr	r0, [r7, #16]

                // Invoke the handler for the expired timer
                node.Target.Invoke(now);
 80006ce:	462a      	mov	r2, r5
 80006d0:	4633      	mov	r3, r6
 80006d2:	f007 fcd9 	bl	8008088 <Timer::Invoke#17212>
            // we just updated this above, so it will be precise
            ulong now = m_accumulator;

            while (true)
            {
                RT.KernelNode<Timer> node = m_timers.StartOfForwardWalk;
 80006d6:	68a0      	ldr	r0, [r4, #8]
 80006d8:	f007 fcc3 	bl	8008062 <KernelList`1::get_StartOfForwardWalk#23584>
 80006dc:	4607      	mov	r7, r0

                // If the next node is null, break and call Refresh
                if (node.IsValidForForwardMove == false)
 80006de:	f007 fcc3 	bl	8008068 <KernelNode`1::get_IsValidForForwardMove#23599>
 80006e2:	f010 0fff 	tst.w	r0, #255	; 0xff
 80006e6:	d010      	beq.n	800070a <SystemTimer::ProcessTimeout#17017+0x7a>
 80006e8:	6938      	ldr	r0, [r7, #16]
            /// </summary>
            public ulong Timeout
            {
                get
                {
                    return m_timeout;
 80006ea:	6981      	ldr	r1, [r0, #24]
 80006ec:	6940      	ldr	r0, [r0, #20]
 80006ee:	42a8      	cmp	r0, r5
 80006f0:	f04f 0000 	mov.w	r0, #0
 80006f4:	bf88      	it	hi
 80006f6:	2001      	movhi	r0, #1
 80006f8:	42b1      	cmp	r1, r6
 80006fa:	f04f 0100 	mov.w	r1, #0
 80006fe:	bf88      	it	hi
 8000700:	2101      	movhi	r1, #1
 8000702:	bf08      	it	eq
 8000704:	4601      	moveq	r1, r0
                    break;
                }

                ulong timeout = node.Target.Timeout;

                if (timeout > now)
 8000706:	2900      	cmp	r1, #0
 8000708:	d0dd      	beq.n	80006c6 <SystemTimer::ProcessTimeout#17017+0x36>
 800070a:	4805      	ldr	r0, [pc, #20]	; (8000720 <SystemTimer::ProcessTimeout#17017+0x90>)
 800070c:	4478      	add	r0, pc

                // Invoke the handler for the expired timer
                node.Target.Invoke(now);
            }

            Refresh();
 800070e:	4440      	add	r0, r8
 8000710:	f007 fc5a 	bl	8007fc8 <SystemTimer::Refresh#17018>
 8000714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000718:	18001116 	.word	0x18001116
 800071c:	ffffeb0c 	.word	0xffffeb0c
 8000720:	180010a4 	.word	0x180010a4

08000724 <SysTick_Handler_Zelig>:
        //--//
        
        [RT.HardwareExceptionHandler( RT.HardwareException.Interrupt )]
        [RT.ExportedMethod]
        private void SysTick_Handler_Zelig( )
        {
 8000724:	b510      	push	{r4, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	2400      	movs	r4, #0
 800072a:	2001      	movs	r0, #1
 800072c:	9401      	str	r4, [sp, #4]
 800072e:	f013 f9eb 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
 8000732:	9400      	str	r4, [sp, #0]
 8000734:	e9cd 0000 	strd	r0, r0, [sp]
            using(RT.SmartHandles.InterruptState.Disable())
            {
                ContextSwitchTimer.Instance.ProcessTimeout( );
 8000738:	f000 f806 	bl	8000748 <ContextSwitchTimer::ProcessTimeout#17375>
            }
 800073c:	9801      	ldr	r0, [sp, #4]
 800073e:	f013 f9e3 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
 8000742:	b002      	add	sp, #8
 8000744:	bd10      	pop	{r4, pc}
 8000746:	46c0      	nop			; (mov r8, r8)

08000748 <ContextSwitchTimer::ProcessTimeout#17375>:
        }

        //--//

        private void ProcessTimeout( )
        {
 8000748:	b580      	push	{r7, lr}
 800074a:	480a      	ldr	r0, [pc, #40]	; (8000774 <ContextSwitchTimer::ProcessTimeout#17375+0x2c>)
            m_accumulator += m_latestMatch;
 800074c:	490a      	ldr	r1, [pc, #40]	; (8000778 <ContextSwitchTimer::ProcessTimeout#17375+0x30>)
 800074e:	4478      	add	r0, pc
 8000750:	4408      	add	r0, r1
 8000752:	f100 0310 	add.w	r3, r0, #16
 8000756:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000758:	18c9      	adds	r1, r1, r3
 800075a:	f142 0300 	adc.w	r3, r2, #0

            m_SysTickTimer.Invoke( m_accumulator + c_InvokeOverhead );
 800075e:	f111 020a 	adds.w	r2, r1, #10
 8000762:	e9c0 1304 	strd	r1, r3, [r0, #16]
 8000766:	f143 0300 	adc.w	r3, r3, #0
 800076a:	68c0      	ldr	r0, [r0, #12]
 800076c:	f008 f877 	bl	800885e <SysTickTimer::Invoke#17429>
 8000770:	bd80      	pop	{r7, pc}
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	18001062 	.word	0x18001062
 8000778:	ffffeabc 	.word	0xffffeabc

0800077c <Array::Copy#1563>:
        // Copies length elements from sourceArray, starting at index 0, to
        // destinationArray, starting at index 0.
        //
////    [ReliabilityContract( Consistency.MayCorruptInstance, Cer.MayFail )]
        public static void Copy( Array sourceArray, Array destinationArray, int length )
        {
 800077c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800077e:	b081      	sub	sp, #4
 8000780:	4606      	mov	r6, r0
 8000782:	4615      	mov	r5, r2
 8000784:	460c      	mov	r4, r1
 8000786:	b186      	cbz	r6, 80007aa <Array::Copy#1563+0x2e>
 8000788:	b194      	cbz	r4, 80007b0 <Array::Copy#1563+0x34>
#else
                throw new ArgumentNullException();
#endif
            }

            Copy( sourceArray, sourceArray.GetLowerBound( 0 ), destinationArray, destinationArray.GetLowerBound( 0 ), length, false );
 800078a:	4630      	mov	r0, r6
 800078c:	f000 f828 	bl	80007e0 <Array::GetLowerBound#3871>
 8000790:	4607      	mov	r7, r0
 8000792:	4620      	mov	r0, r4
 8000794:	f000 f824 	bl	80007e0 <Array::GetLowerBound#3871>
 8000798:	4603      	mov	r3, r0
 800079a:	4630      	mov	r0, r6
 800079c:	4639      	mov	r1, r7
 800079e:	4622      	mov	r2, r4
 80007a0:	9500      	str	r5, [sp, #0]
 80007a2:	f000 f83d 	bl	8000820 <Array::Copy#3873>
 80007a6:	b001      	add	sp, #4
 80007a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007aa:	480c      	ldr	r0, [pc, #48]	; (80007dc <Array::Copy#1563+0x60>)
 80007ac:	4478      	add	r0, pc
 80007ae:	e001      	b.n	80007b4 <Array::Copy#1563+0x38>
 80007b0:	4807      	ldr	r0, [pc, #28]	; (80007d0 <Array::Copy#1563+0x54>)
 80007b2:	4478      	add	r0, pc
            if(sourceArray == null)
            {
#if EXCEPTION_STRINGS
                throw new ArgumentNullException( "sourceArray" );
#else
                throw new ArgumentNullException();
 80007b4:	4907      	ldr	r1, [pc, #28]	; (80007d4 <Array::Copy#1563+0x58>)
 80007b6:	180c      	adds	r4, r1, r0
 80007b8:	4907      	ldr	r1, [pc, #28]	; (80007d8 <Array::Copy#1563+0x5c>)
 80007ba:	4401      	add	r1, r0
 80007bc:	4620      	mov	r0, r4
 80007be:	f000 f8af 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 80007c2:	4605      	mov	r5, r0
 80007c4:	f000 f8bd 	bl	8000942 <ArgumentNullException::.ctor#6362>
 80007c8:	4620      	mov	r0, r4
 80007ca:	4629      	mov	r1, r5
 80007cc:	f000 f8be 	bl	800094c <TypeSystemManager::Throw#5247>
 80007d0:	18000ffe 	.word	0x18000ffe
 80007d4:	ffffea64 	.word	0xffffea64
 80007d8:	e80075bc 	.word	0xe80075bc
 80007dc:	18001004 	.word	0x18001004

080007e0 <Array::GetLowerBound#3871>:

            return (int)ts2.Dimensions[dimension].m_upperBound;
        }

        public int GetLowerBound( int dimension )
        {
 80007e0:	b510      	push	{r4, lr}
 80007e2:	6840      	ldr	r0, [r0, #4]
 80007e4:	490a      	ldr	r1, [pc, #40]	; (8000810 <Array::GetLowerBound#3871+0x30>)
            TS.VTable vTable = TS.VTable.Get( this );

            TS.TypeRepresentation ts = vTable.TypeInfo;

            if(ts is TS.SzArrayReferenceTypeRepresentation)
 80007e6:	4a0b      	ldr	r2, [pc, #44]	; (8000814 <Array::GetLowerBound#3871+0x34>)

        public int GetLowerBound( int dimension )
        {
            TS.VTable vTable = TS.VTable.Get( this );

            TS.TypeRepresentation ts = vTable.TypeInfo;
 80007e8:	6904      	ldr	r4, [r0, #16]
 80007ea:	4479      	add	r1, pc

            if(ts is TS.SzArrayReferenceTypeRepresentation)
 80007ec:	4411      	add	r1, r2
 80007ee:	4620      	mov	r0, r4
 80007f0:	f000 f98c 	bl	8000b0c <TypeSystemManager::CastToSealedTypeNoThrow#5244>
 80007f4:	2800      	cmp	r0, #0
 80007f6:	bf1c      	itt	ne
 80007f8:	2000      	movne	r0, #0
 80007fa:	bd10      	popne	{r4, pc}
 80007fc:	4806      	ldr	r0, [pc, #24]	; (8000818 <Array::GetLowerBound#3871+0x38>)
            {
                return 0;
            }

            TS.MultiArrayReferenceTypeRepresentation ts2 = (TS.MultiArrayReferenceTypeRepresentation)ts;
 80007fe:	4907      	ldr	r1, [pc, #28]	; (800081c <Array::GetLowerBound#3871+0x3c>)
 8000800:	4478      	add	r0, pc
 8000802:	4401      	add	r1, r0
 8000804:	4620      	mov	r0, r4
 8000806:	f000 fa79 	bl	8000cfc <TypeSystemManager::CastToSealedType#5243>
 800080a:	6b40      	ldr	r0, [r0, #52]	; 0x34

            return (int)ts2.Dimensions[dimension].m_lowerBound;
 800080c:	68c0      	ldr	r0, [r0, #12]
 800080e:	bd10      	pop	{r4, pc}
 8000810:	18000fc6 	.word	0x18000fc6
 8000814:	e800778c 	.word	0xe800778c
 8000818:	18000fb0 	.word	0x18000fb0
 800081c:	e800783c 	.word	0xe800783c

08000820 <Array::Copy#3873>:
                                          int       sourceIndex      ,
                                          ArrayImpl destinationArray ,
                                          int       destinationIndex ,
                                          int       length           ,
                                          bool      reliable         )
        {
 8000820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000824:	461c      	mov	r4, r3
            if(sourceIndex      < 0 ||
 8000826:	2900      	cmp	r1, #0
 8000828:	4615      	mov	r5, r2
 800082a:	bfa8      	it	ge
 800082c:	2c00      	cmpge	r4, #0
 800082e:	db39      	blt.n	80008a4 <Array::Copy#3873+0x84>
 8000830:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8000834:	f1b8 3fff 	cmp.w	r8, #4294967295
 8000838:	dd34      	ble.n	80008a4 <Array::Copy#3873+0x84>
        {
            [Inline]
            [TS.WellKnownMethod( "ArrayImpl_get_Length" )]
            get
            {
                return (int)m_numElements;
 800083a:	6883      	ldr	r3, [r0, #8]
               length           < 0  )
            {
                throw new IndexOutOfRangeException();
            }

            int sourceIndexEnd = sourceIndex + length;
 800083c:	eb01 0208 	add.w	r2, r1, r8
            if(sourceIndexEnd > sourceArray.Length)
 8000840:	429a      	cmp	r2, r3
 8000842:	dc1c      	bgt.n	800087e <Array::Copy#3873+0x5e>
        {
            [Inline]
            [TS.WellKnownMethod( "ArrayImpl_get_Length" )]
            get
            {
                return (int)m_numElements;
 8000844:	68ab      	ldr	r3, [r5, #8]
            if(sourceIndexEnd > sourceArray.Length)
            {
                throw new IndexOutOfRangeException();
            }

            int destinationIndexEnd = destinationIndex + length;
 8000846:	eb04 0208 	add.w	r2, r4, r8
            if(destinationIndexEnd > destinationArray.Length)
 800084a:	429a      	cmp	r2, r3
 800084c:	dc1a      	bgt.n	8000884 <Array::Copy#3873+0x64>
 800084e:	6847      	ldr	r7, [r0, #4]
 8000850:	686a      	ldr	r2, [r5, #4]
            }

            TS.VTable vTableSource      = TS.VTable.Get( sourceArray      );
            TS.VTable vTableDestination = TS.VTable.Get( destinationArray );

            if(vTableSource != vTableDestination)
 8000852:	4297      	cmp	r7, r2
 8000854:	d119      	bne.n	800088a <Array::Copy#3873+0x6a>
            {
                throw new NotSupportedException();
            }

            void* voidSourcePtr      = sourceArray     .GetPointerToElement( (uint)sourceIndex      );
 8000856:	f000 f891 	bl	800097c <Array::GetPointerToElement#3877>
 800085a:	4606      	mov	r6, r0
            void* voidDestinationPtr = destinationArray.GetPointerToElement( (uint)destinationIndex );
 800085c:	4628      	mov	r0, r5
 800085e:	4621      	mov	r1, r4
 8000860:	f000 f88c 	bl	800097c <Array::GetPointerToElement#3877>
 8000864:	4601      	mov	r1, r0

            if(voidSourcePtr != voidDestinationPtr)
 8000866:	428e      	cmp	r6, r1
 8000868:	bf08      	it	eq
 800086a:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
            {
                BufferImpl.InternalMemoryMove( (byte*)voidSourcePtr, (byte*)voidDestinationPtr, length * (int)vTableSource.ElementSize );
 800086e:	68f8      	ldr	r0, [r7, #12]
 8000870:	fb08 f200 	mul.w	r2, r8, r0
 8000874:	4630      	mov	r0, r6
 8000876:	f000 f887 	bl	8000988 <Buffer::InternalMemoryMove#3915>
 800087a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800087e:	4816      	ldr	r0, [pc, #88]	; (80008d8 <Array::Copy#3873+0xb8>)
 8000880:	4478      	add	r0, pc
 8000882:	e011      	b.n	80008a8 <Array::Copy#3873+0x88>
 8000884:	4812      	ldr	r0, [pc, #72]	; (80008d0 <Array::Copy#3873+0xb0>)
 8000886:	4478      	add	r0, pc
 8000888:	e00e      	b.n	80008a8 <Array::Copy#3873+0x88>
 800088a:	480e      	ldr	r0, [pc, #56]	; (80008c4 <Array::Copy#3873+0xa4>)
            TS.VTable vTableSource      = TS.VTable.Get( sourceArray      );
            TS.VTable vTableDestination = TS.VTable.Get( destinationArray );

            if(vTableSource != vTableDestination)
            {
                throw new NotSupportedException();
 800088c:	490e      	ldr	r1, [pc, #56]	; (80008c8 <Array::Copy#3873+0xa8>)
 800088e:	4478      	add	r0, pc
 8000890:	180c      	adds	r4, r1, r0
 8000892:	490e      	ldr	r1, [pc, #56]	; (80008cc <Array::Copy#3873+0xac>)
 8000894:	4401      	add	r1, r0
 8000896:	4620      	mov	r0, r4
 8000898:	f000 f842 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 800089c:	4605      	mov	r5, r0
 800089e:	f000 f88f 	bl	80009c0 <NotSupportedException::.ctor#7487>
 80008a2:	e00b      	b.n	80008bc <Array::Copy#3873+0x9c>
 80008a4:	480d      	ldr	r0, [pc, #52]	; (80008dc <Array::Copy#3873+0xbc>)
 80008a6:	4478      	add	r0, pc
        {
            if(sourceIndex      < 0 ||
               destinationIndex < 0 ||
               length           < 0  )
            {
                throw new IndexOutOfRangeException();
 80008a8:	4907      	ldr	r1, [pc, #28]	; (80008c8 <Array::Copy#3873+0xa8>)
 80008aa:	180c      	adds	r4, r1, r0
 80008ac:	4909      	ldr	r1, [pc, #36]	; (80008d4 <Array::Copy#3873+0xb4>)
 80008ae:	4401      	add	r1, r0
 80008b0:	4620      	mov	r0, r4
 80008b2:	f000 f835 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 80008b6:	4605      	mov	r5, r0
 80008b8:	f000 f88e 	bl	80009d8 <IndexOutOfRangeException::.ctor#7410>
 80008bc:	4620      	mov	r0, r4
 80008be:	4629      	mov	r1, r5
 80008c0:	f000 f844 	bl	800094c <TypeSystemManager::Throw#5247>
 80008c4:	18000f22 	.word	0x18000f22
 80008c8:	ffffea64 	.word	0xffffea64
 80008cc:	e800764c 	.word	0xe800764c
 80008d0:	18000f2a 	.word	0x18000f2a
 80008d4:	e80076dc 	.word	0xe80076dc
 80008d8:	18000f30 	.word	0x18000f30
 80008dc:	18000f0a 	.word	0x18000f0a

080008e0 <Exception::ToString#7335>:
////            m_source = value;
////        }
////    }

    public override String ToString()
    {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	6841      	ldr	r1, [r0, #4]
        return Message;
 80008e4:	69c9      	ldr	r1, [r1, #28]
 80008e6:	6989      	ldr	r1, [r1, #24]
 80008e8:	4788      	blx	r1
 80008ea:	bd80      	pop	{r7, pc}

080008ec <Object::Equals#3990>:
 80008ec:	2200      	movs	r2, #0
 80008ee:	4288      	cmp	r0, r1
 80008f0:	bf08      	it	eq
 80008f2:	2201      	moveq	r2, #1
 80008f4:	4610      	mov	r0, r2
 80008f6:	4770      	bx	lr

080008f8 <Object::GetHashCode#3991>:
        {
            return Object.ReferenceEquals( this, obj );
        }

        public override int GetHashCode()
        {
 80008f8:	b580      	push	{r7, lr}
            return SyncBlockTable.GetHashCode( this );
 80008fa:	f000 fd0d 	bl	8001318 <SyncBlockTable::GetHashCode#4789>
 80008fe:	bd80      	pop	{r7, pc}

08000900 <ArgumentException::get_Message#6360>:
////    }

        public override String Message
        {
            get
            {
 8000900:	b580      	push	{r7, lr}
 8000902:	4905      	ldr	r1, [pc, #20]	; (8000918 <ArgumentException::get_Message#6360+0x18>)
                return m_message + " " + m_paramName;
 8000904:	4a05      	ldr	r2, [pc, #20]	; (800091c <ArgumentException::get_Message#6360+0x1c>)
 8000906:	4479      	add	r1, pc
 8000908:	4411      	add	r1, r2
 800090a:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800090e:	4618      	mov	r0, r3
 8000910:	f001 f968 	bl	8001be4 <String::Concat#2751>
 8000914:	bd80      	pop	{r7, pc}
 8000916:	46c0      	nop			; (mov r8, r8)
 8000918:	18000eaa 	.word	0x18000eaa
 800091c:	e8009a0c 	.word	0xe8009a0c

08000920 <DefaultTypeSystemManager::AllocateObject#5253>:

    public abstract class DefaultTypeSystemManager : TypeSystemManager
    {
        [NoInline]
        public override Object AllocateObject( TS.VTable vTable )
        {
 8000920:	b570      	push	{r4, r5, r6, lr}
 8000922:	460c      	mov	r4, r1
            uint   size = ComputeObjectSize( vTable       );
 8000924:	4620      	mov	r0, r4
 8000926:	f004 f8a3 	bl	8004a70 <DefaultTypeSystemManager::ComputeObjectSize#5258>
 800092a:	4605      	mov	r5, r0
 800092c:	f004 f8a6 	bl	8004a7c <DefaultTypeSystemManager::AllocateInner#5260>
 8000930:	4629      	mov	r1, r5
 8000932:	4606      	mov	r6, r0
 8000934:	f015 ff0d 	bl	8016752 <__aeabi_memclr>
 8000938:	2008      	movs	r0, #8
 800093a:	e9c6 0400 	strd	r0, r4, [r6]
 800093e:	4630      	mov	r0, r6
 8000940:	bd70      	pop	{r4, r5, r6, pc}

08000942 <ArgumentNullException::.ctor#6362>:
        // Creates a new ArgumentNullException with its message
        // string set to a default message explaining an argument was null.
#if EXCEPTION_STRINGS
        public ArgumentNullException() : base( Environment.GetResourceString( "ArgumentNull_Generic" ) )
#else
        public ArgumentNullException()
 8000942:	b580      	push	{r7, lr}
 8000944:	f004 fc8b 	bl	800525e <ArgumentException::.ctor#6355>
 8000948:	bd80      	pop	{r7, pc}
 800094a:	46c0      	nop			; (mov r8, r8)

0800094c <TypeSystemManager::Throw#5247>:

        [NoReturn]
        [NoInline]
        [TS.WellKnownMethod( "TypeSystemManager_Throw" )]
        public virtual void Throw( Exception obj )
        {
 800094c:	b5b0      	push	{r4, r5, r7, lr}
 800094e:	4d08      	ldr	r5, [pc, #32]	; (8000970 <TypeSystemManager::Throw#5247+0x24>)

            //
            // Our LLVM port does not yet support throwing exceptions
            //
            
             BugCheck.Log( "!!!                       WARNING                             !!!" );
 8000950:	4808      	ldr	r0, [pc, #32]	; (8000974 <TypeSystemManager::Throw#5247+0x28>)
 8000952:	447d      	add	r5, pc
 8000954:	1944      	adds	r4, r0, r5
 8000956:	4620      	mov	r0, r4
 8000958:	f003 fe60 	bl	800461c <BugCheck::Log#4939>
             BugCheck.Log( "!!! Throwing Exceptions is not yet supported for LLVM CodeGen !!!" );
 800095c:	4806      	ldr	r0, [pc, #24]	; (8000978 <TypeSystemManager::Throw#5247+0x2c>)
 800095e:	4428      	add	r0, r5
 8000960:	f003 fe5c 	bl	800461c <BugCheck::Log#4939>
             BugCheck.Log( "!!!                       WARNING                             !!!" );
 8000964:	4620      	mov	r0, r4
 8000966:	f003 fe59 	bl	800461c <BugCheck::Log#4939>

             BugCheck.Raise( BugCheck.StopCode.InvalidOperation );
 800096a:	2017      	movs	r0, #23
 800096c:	f7ff fcb8 	bl	80002e0 <BugCheck::Raise#4938>
 8000970:	18000e5e 	.word	0x18000e5e
 8000974:	e800935c 	.word	0xe800935c
 8000978:	e80093fc 	.word	0xe80093fc

0800097c <Array::GetPointerToElement#3877>:
        {
            fixed(uint* ptr = &m_numElements)
            {
                return &ptr[1];
            }
        }
 800097c:	6842      	ldr	r2, [r0, #4]
        public uint ElementSize
        {
            [Inline]
            get
            {
                return TS.VTable.Get( this ).ElementSize;
 800097e:	68d2      	ldr	r2, [r2, #12]
        // This is used to get the pointer to the data, which is not possible in C#.
        //
        [Inline]
        public unsafe uint* GetDataPointer()
        {
            fixed(uint* ptr = &m_numElements)
 8000980:	fb01 0002 	mla	r0, r1, r2, r0
        //
        public unsafe void* GetPointerToElement( uint index )
        {
            byte* ptr = (byte*)GetDataPointer();

            return &ptr[index * this.ElementSize];
 8000984:	300c      	adds	r0, #12
 8000986:	4770      	bx	lr

08000988 <Buffer::InternalMemoryMove#3915>:
        //--//--//

        internal unsafe static void InternalMemoryMove( byte* src   ,
                                                        byte* dst   ,
                                                        int   count )
        {
 8000988:	b580      	push	{r7, lr}
 800098a:	4603      	mov	r3, r0
 800098c:	2000      	movs	r0, #0
 800098e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8000992:	bfc8      	it	gt
 8000994:	2001      	movgt	r0, #1
            BugCheck.Assert( count >= 0, BugCheck.StopCode.NegativeIndex );
 8000996:	b170      	cbz	r0, 80009b6 <Buffer::InternalMemoryMove#3915+0x2e>

            if(src <= dst && dst < &src[count])
 8000998:	428b      	cmp	r3, r1
 800099a:	bf9c      	itt	ls
 800099c:	1898      	addls	r0, r3, r2
 800099e:	4281      	cmpls	r1, r0
 80009a0:	d204      	bcs.n	80009ac <Buffer::InternalMemoryMove#3915+0x24>
 80009a2:	4608      	mov	r0, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	f015 fed9 	bl	801675c <__aeabi_memmove>
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	4608      	mov	r0, r1
 80009ae:	4619      	mov	r1, r3
 80009b0:	f015 fed2 	bl	8016758 <__aeabi_memcpy>
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	2008      	movs	r0, #8
 80009b8:	f7ff fc92 	bl	80002e0 <BugCheck::Raise#4938>

080009bc <Exception::get_Message#7332>:
////
////                return String.Format( CultureInfo.CurrentCulture, Environment.GetResourceString( "Exception_WasThrown" ), m_className );
////            }
////            else
////            {
                    return m_message;
 80009bc:	6880      	ldr	r0, [r0, #8]
 80009be:	4770      	bx	lr

080009c0 <NotSupportedException::.ctor#7487>:
    using System.Runtime.Serialization;

    [Serializable]
    public class NotSupportedException : SystemException
    {
        public NotSupportedException() : base( Environment.GetResourceString( "Arg_NotSupportedException" ) )
 80009c0:	b580      	push	{r7, lr}
 80009c2:	4903      	ldr	r1, [pc, #12]	; (80009d0 <NotSupportedException::.ctor#7487+0x10>)
 80009c4:	4a03      	ldr	r2, [pc, #12]	; (80009d4 <NotSupportedException::.ctor#7487+0x14>)
 80009c6:	4479      	add	r1, pc
 80009c8:	4411      	add	r1, r2
 80009ca:	f004 fc50 	bl	800526e <SystemException::.ctor#7663>
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	18000dea 	.word	0x18000dea
 80009d4:	e8009b3c 	.word	0xe8009b3c

080009d8 <IndexOutOfRangeException::.ctor#7410>:
    public sealed class IndexOutOfRangeException : SystemException
    {
#if EXCEPTION_STRINGS
        public IndexOutOfRangeException() : base( Environment.GetResourceString( "Arg_IndexOutOfRangeException" ) )
#else
        public IndexOutOfRangeException()
 80009d8:	b580      	push	{r7, lr}
 80009da:	f004 fc44 	bl	8005266 <SystemException::.ctor#7662>
 80009de:	bd80      	pop	{r7, pc}

080009e0 <SzArrayReferenceTypeRepresentation::ToString#14886>:
        //
        // Debug Methods
        //

        public override String ToString()
        {
 80009e0:	b570      	push	{r4, r5, r6, lr}
 80009e2:	4e0f      	ldr	r6, [pc, #60]	; (8000a20 <SzArrayReferenceTypeRepresentation::ToString#14886+0x40>)
 80009e4:	4604      	mov	r4, r0
            System.Text.StringBuilder sb = new System.Text.StringBuilder( "SzArrayReferenceTypeRepresentation(" );
 80009e6:	480f      	ldr	r0, [pc, #60]	; (8000a24 <SzArrayReferenceTypeRepresentation::ToString#14886+0x44>)
 80009e8:	490f      	ldr	r1, [pc, #60]	; (8000a28 <SzArrayReferenceTypeRepresentation::ToString#14886+0x48>)
 80009ea:	447e      	add	r6, pc
 80009ec:	4430      	add	r0, r6
 80009ee:	4431      	add	r1, r6
 80009f0:	f7ff ff96 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 80009f4:	4605      	mov	r5, r0
 80009f6:	480d      	ldr	r0, [pc, #52]	; (8000a2c <SzArrayReferenceTypeRepresentation::ToString#14886+0x4c>)
 80009f8:	1981      	adds	r1, r0, r6
 80009fa:	4628      	mov	r0, r5
 80009fc:	f005 ff79 	bl	80068f2 <StringBuilder::.ctor#8788>

            PrettyToString( sb, true, false );
 8000a00:	4620      	mov	r0, r4
 8000a02:	4629      	mov	r1, r5
 8000a04:	2201      	movs	r2, #1
 8000a06:	2300      	movs	r3, #0
 8000a08:	f000 f858 	bl	8000abc <SzArrayReferenceTypeRepresentation::PrettyToString#14887>

            sb.Append( ")" );
 8000a0c:	4808      	ldr	r0, [pc, #32]	; (8000a30 <SzArrayReferenceTypeRepresentation::ToString#14886+0x50>)
 8000a0e:	1981      	adds	r1, r0, r6
 8000a10:	4628      	mov	r0, r5
 8000a12:	f005 fb0a 	bl	800602a <StringBuilder::Append#8806>

            return sb.ToString();
 8000a16:	4628      	mov	r0, r5
 8000a18:	f000 fece 	bl	80017b8 <StringBuilder::ToString#8798>
 8000a1c:	bd70      	pop	{r4, r5, r6, pc}
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	18000dc6 	.word	0x18000dc6
 8000a24:	ffffea64 	.word	0xffffea64
 8000a28:	e8007c5c 	.word	0xe8007c5c
 8000a2c:	e800ac6c 	.word	0xe800ac6c
 8000a30:	e800a74c 	.word	0xe800a74c

08000a34 <ArrayReferenceTypeRepresentation::Equals#14731>:

            return false;
        }

        public override bool Equals( object obj )
        {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	6842      	ldr	r2, [r0, #4]
            return this.EqualsThroughEquivalence( obj, null );
 8000a38:	69d2      	ldr	r2, [r2, #28]
 8000a3a:	6993      	ldr	r3, [r2, #24]
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	4798      	blx	r3
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <ArrayReferenceTypeRepresentation::GetHashCode#14732>:
        }

        public override int GetHashCode()
        {
 8000a42:	b580      	push	{r7, lr}
            return m_elementType.GetHashCode();
 8000a44:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8000a46:	6841      	ldr	r1, [r0, #4]
 8000a48:	69c9      	ldr	r1, [r1, #28]
 8000a4a:	6949      	ldr	r1, [r1, #20]
 8000a4c:	4788      	blx	r1
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <ArrayReferenceTypeRepresentation::EqualsThroughEquivalence#14730>:
        // MetaDataEquality Methods
        //

        public override bool EqualsThroughEquivalence( object         obj ,
                                                       EquivalenceSet set )
        {
 8000a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a52:	b081      	sub	sp, #4
 8000a54:	4605      	mov	r5, r0
 8000a56:	480d      	ldr	r0, [pc, #52]	; (8000a8c <ArrayReferenceTypeRepresentation::EqualsThroughEquivalence#14730+0x3c>)
            if(obj is ArrayReferenceTypeRepresentation)
 8000a58:	4f0d      	ldr	r7, [pc, #52]	; (8000a90 <ArrayReferenceTypeRepresentation::EqualsThroughEquivalence#14730+0x40>)
 8000a5a:	460e      	mov	r6, r1
 8000a5c:	4614      	mov	r4, r2
 8000a5e:	4478      	add	r0, pc
 8000a60:	1839      	adds	r1, r7, r0
 8000a62:	4630      	mov	r0, r6
 8000a64:	f000 fae0 	bl	8001028 <TypeSystemManager::CastToTypeNoThrow#5242>
 8000a68:	2800      	cmp	r0, #0
 8000a6a:	bf02      	ittt	eq
 8000a6c:	2000      	moveq	r0, #0
 8000a6e:	b001      	addeq	sp, #4
 8000a70:	bdf0      	popeq	{r4, r5, r6, r7, pc}
 8000a72:	4808      	ldr	r0, [pc, #32]	; (8000a94 <ArrayReferenceTypeRepresentation::EqualsThroughEquivalence#14730+0x44>)
 8000a74:	4478      	add	r0, pc
            {
                ArrayReferenceTypeRepresentation other = (ArrayReferenceTypeRepresentation)obj;
 8000a76:	1839      	adds	r1, r7, r0
 8000a78:	4630      	mov	r0, r6
 8000a7a:	f002 fd7b 	bl	8003574 <TypeSystemManager::CastToType#5241>

                return EqualsThroughEquivalence( m_elementType, other.m_elementType, set );
 8000a7e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8000a80:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8000a82:	4622      	mov	r2, r4
 8000a84:	f006 fb70 	bl	8007168 <BaseRepresentation::EqualsThroughEquivalence#13874>
 8000a88:	b001      	add	sp, #4
 8000a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a8c:	18000d52 	.word	0x18000d52
 8000a90:	e8008a6c 	.word	0xe8008a6c
 8000a94:	18000d3c 	.word	0x18000d3c

08000a98 <ArrayReferenceTypeRepresentation::get_ContainedType#14736>:

        public override TypeRepresentation ContainedType
        {
            get
            {
                return m_elementType;
 8000a98:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8000a9a:	4770      	bx	lr

08000a9c <TypeRepresentation::get_UnderlyingType#15007>:
 8000a9c:	4770      	bx	lr

08000a9e <ArrayReferenceTypeRepresentation::get_IsOpenType#14737>:
        }

        public override bool IsOpenType
        {
            get
            {
 8000a9e:	b580      	push	{r7, lr}
                return m_elementType.IsOpenType;
 8000aa0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8000aa2:	6841      	ldr	r1, [r0, #4]
 8000aa4:	69c9      	ldr	r1, [r1, #28]
 8000aa6:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8000aa8:	4788      	blx	r1
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <ArrayReferenceTypeRepresentation::get_IsDelayedType#14738>:
        }

        public override bool IsDelayedType
        {
            get
            {
 8000aac:	b580      	push	{r7, lr}
                return m_elementType.IsDelayedType;
 8000aae:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8000ab0:	6841      	ldr	r1, [r0, #4]
 8000ab2:	69c9      	ldr	r1, [r1, #28]
 8000ab4:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8000ab6:	4788      	blx	r1
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	46c0      	nop			; (mov r8, r8)

08000abc <SzArrayReferenceTypeRepresentation::PrettyToString#14887>:
        }

        internal override void PrettyToString( System.Text.StringBuilder sb                 ,
                                               bool                      fPrefix            ,
                                               bool                      fWithAbbreviations )
        {
 8000abc:	b510      	push	{r4, lr}
            m_elementType.PrettyToString( sb, fPrefix, fWithAbbreviations );
 8000abe:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8000ac0:	460c      	mov	r4, r1
 8000ac2:	6841      	ldr	r1, [r0, #4]
 8000ac4:	69c9      	ldr	r1, [r1, #28]
 8000ac6:	f8d1 c02c 	ldr.w	ip, [r1, #44]	; 0x2c
 8000aca:	4621      	mov	r1, r4
 8000acc:	47e0      	blx	ip
 8000ace:	4804      	ldr	r0, [pc, #16]	; (8000ae0 <SzArrayReferenceTypeRepresentation::PrettyToString#14887+0x24>)

            sb.Append( "[]" );
 8000ad0:	4904      	ldr	r1, [pc, #16]	; (8000ae4 <SzArrayReferenceTypeRepresentation::PrettyToString#14887+0x28>)
 8000ad2:	4478      	add	r0, pc
 8000ad4:	4401      	add	r1, r0
 8000ad6:	4620      	mov	r0, r4
 8000ad8:	f005 faa7 	bl	800602a <StringBuilder::Append#8806>
 8000adc:	bd10      	pop	{r4, pc}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	18000cde 	.word	0x18000cde
 8000ae4:	e800accc 	.word	0xe800accc

08000ae8 <SzArrayReferenceTypeRepresentation::SameShape#14885>:
        }

        //--//

        public override bool SameShape( ArrayReferenceTypeRepresentation other )
        {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	4806      	ldr	r0, [pc, #24]	; (8000b04 <SzArrayReferenceTypeRepresentation::SameShape#14885+0x1c>)
            return other is SzArrayReferenceTypeRepresentation;
 8000aec:	4a06      	ldr	r2, [pc, #24]	; (8000b08 <SzArrayReferenceTypeRepresentation::SameShape#14885+0x20>)
 8000aee:	4478      	add	r0, pc
 8000af0:	4402      	add	r2, r0
 8000af2:	4608      	mov	r0, r1
 8000af4:	4611      	mov	r1, r2
 8000af6:	f000 f809 	bl	8000b0c <TypeSystemManager::CastToSealedTypeNoThrow#5244>
 8000afa:	2800      	cmp	r0, #0
 8000afc:	bf18      	it	ne
 8000afe:	2001      	movne	r0, #1
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	18000cc2 	.word	0x18000cc2
 8000b08:	e800778c 	.word	0xe800778c

08000b0c <TypeSystemManager::CastToSealedTypeNoThrow#5244>:

        [TS.WellKnownMethod( "TypeSystemManager_CastToSealedTypeNoThrow" )]
        public static object CastToSealedTypeNoThrow( object    obj      ,
                                                      TS.VTable expected )
        {
            if(obj != null)
 8000b0c:	2800      	cmp	r0, #0
 8000b0e:	bf08      	it	eq
 8000b10:	4770      	bxeq	lr
 8000b12:	6842      	ldr	r2, [r0, #4]
            {
                TS.VTable got = TS.VTable.Get( obj );

                if(got != expected)
 8000b14:	428a      	cmp	r2, r1
 8000b16:	bf18      	it	ne
 8000b18:	2000      	movne	r0, #0
 8000b1a:	4770      	bx	lr

08000b1c <MultiArrayReferenceTypeRepresentation::ToString#14838>:
        //
        // Debug Methods
        //

        public override String ToString()
        {
 8000b1c:	b570      	push	{r4, r5, r6, lr}
 8000b1e:	4e0f      	ldr	r6, [pc, #60]	; (8000b5c <MultiArrayReferenceTypeRepresentation::ToString#14838+0x40>)
 8000b20:	4604      	mov	r4, r0
            System.Text.StringBuilder sb = new System.Text.StringBuilder( "MultiArrayReferenceTypeRepresentation(" );
 8000b22:	480f      	ldr	r0, [pc, #60]	; (8000b60 <MultiArrayReferenceTypeRepresentation::ToString#14838+0x44>)
 8000b24:	490f      	ldr	r1, [pc, #60]	; (8000b64 <MultiArrayReferenceTypeRepresentation::ToString#14838+0x48>)
 8000b26:	447e      	add	r6, pc
 8000b28:	4430      	add	r0, r6
 8000b2a:	4431      	add	r1, r6
 8000b2c:	f7ff fef8 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8000b30:	4605      	mov	r5, r0
 8000b32:	480d      	ldr	r0, [pc, #52]	; (8000b68 <MultiArrayReferenceTypeRepresentation::ToString#14838+0x4c>)
 8000b34:	1981      	adds	r1, r0, r6
 8000b36:	4628      	mov	r0, r5
 8000b38:	f005 fedb 	bl	80068f2 <StringBuilder::.ctor#8788>

            PrettyToString( sb, true, false );
 8000b3c:	4620      	mov	r0, r4
 8000b3e:	4629      	mov	r1, r5
 8000b40:	2201      	movs	r2, #1
 8000b42:	2300      	movs	r3, #0
 8000b44:	f000 f84c 	bl	8000be0 <MultiArrayReferenceTypeRepresentation::PrettyToString#14839>

            sb.Append( ")" );
 8000b48:	4808      	ldr	r0, [pc, #32]	; (8000b6c <MultiArrayReferenceTypeRepresentation::ToString#14838+0x50>)
 8000b4a:	1981      	adds	r1, r0, r6
 8000b4c:	4628      	mov	r0, r5
 8000b4e:	f005 fa6c 	bl	800602a <StringBuilder::Append#8806>

            return sb.ToString();
 8000b52:	4628      	mov	r0, r5
 8000b54:	f000 fe30 	bl	80017b8 <StringBuilder::ToString#8798>
 8000b58:	bd70      	pop	{r4, r5, r6, pc}
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	18000c8a 	.word	0x18000c8a
 8000b60:	ffffea64 	.word	0xffffea64
 8000b64:	e8007c5c 	.word	0xe8007c5c
 8000b68:	e800aabc 	.word	0xe800aabc
 8000b6c:	e800a74c 	.word	0xe800a74c

08000b70 <MultiArrayReferenceTypeRepresentation::Equals#14830>:

            return false;
        }

        public override bool Equals( object obj )
        {
 8000b70:	b580      	push	{r7, lr}
            return this.EqualsThroughEquivalence( obj, null );
 8000b72:	2200      	movs	r2, #0
 8000b74:	f000 f806 	bl	8000b84 <MultiArrayReferenceTypeRepresentation::EqualsThroughEquivalence#14829>
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <MultiArrayReferenceTypeRepresentation::GetHashCode#14831>:
        }

        public override int GetHashCode()
        {
 8000b7a:	b580      	push	{r7, lr}
            return base.GetHashCode();
 8000b7c:	f7ff ff61 	bl	8000a42 <ArrayReferenceTypeRepresentation::GetHashCode#14732>
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	46c0      	nop			; (mov r8, r8)

08000b84 <MultiArrayReferenceTypeRepresentation::EqualsThroughEquivalence#14829>:
        // MetaDataEquality Methods
        //

        public override bool EqualsThroughEquivalence( object         obj ,
                                                       EquivalenceSet set )
        {
 8000b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b86:	b081      	sub	sp, #4
 8000b88:	4606      	mov	r6, r0
 8000b8a:	4812      	ldr	r0, [pc, #72]	; (8000bd4 <MultiArrayReferenceTypeRepresentation::EqualsThroughEquivalence#14829+0x50>)
            if(obj is MultiArrayReferenceTypeRepresentation)
 8000b8c:	4f12      	ldr	r7, [pc, #72]	; (8000bd8 <MultiArrayReferenceTypeRepresentation::EqualsThroughEquivalence#14829+0x54>)
 8000b8e:	460d      	mov	r5, r1
 8000b90:	4614      	mov	r4, r2
 8000b92:	4478      	add	r0, pc
 8000b94:	1839      	adds	r1, r7, r0
 8000b96:	4628      	mov	r0, r5
 8000b98:	f7ff ffb8 	bl	8000b0c <TypeSystemManager::CastToSealedTypeNoThrow#5244>
 8000b9c:	b1b8      	cbz	r0, 8000bce <MultiArrayReferenceTypeRepresentation::EqualsThroughEquivalence#14829+0x4a>
 8000b9e:	480f      	ldr	r0, [pc, #60]	; (8000bdc <MultiArrayReferenceTypeRepresentation::EqualsThroughEquivalence#14829+0x58>)
 8000ba0:	4478      	add	r0, pc
            {
                MultiArrayReferenceTypeRepresentation other = (MultiArrayReferenceTypeRepresentation)obj;
 8000ba2:	1839      	adds	r1, r7, r0
 8000ba4:	4628      	mov	r0, r5
 8000ba6:	f000 f8a9 	bl	8000cfc <TypeSystemManager::CastToSealedType#5243>

                if(m_rank == other.m_rank)
 8000baa:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8000bac:	6b32      	ldr	r2, [r6, #48]	; 0x30
 8000bae:	428a      	cmp	r2, r1
 8000bb0:	d10d      	bne.n	8000bce <MultiArrayReferenceTypeRepresentation::EqualsThroughEquivalence#14829+0x4a>
                {
                    if(ArrayUtility.ArrayEquals( m_dimensions, other.m_dimensions ))
 8000bb2:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8000bb4:	6b70      	ldr	r0, [r6, #52]	; 0x34
 8000bb6:	f006 fa6d 	bl	8007094 <ArrayUtility::ArrayEquals#34689>
 8000bba:	f010 0fff 	tst.w	r0, #255	; 0xff
 8000bbe:	d006      	beq.n	8000bce <MultiArrayReferenceTypeRepresentation::EqualsThroughEquivalence#14829+0x4a>
                    {
                        return base.EqualsThroughEquivalence( obj, set );
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4629      	mov	r1, r5
 8000bc4:	4622      	mov	r2, r4
 8000bc6:	f7ff ff43 	bl	8000a50 <ArrayReferenceTypeRepresentation::EqualsThroughEquivalence#14730>
 8000bca:	b001      	add	sp, #4
 8000bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bce:	2000      	movs	r0, #0
 8000bd0:	b001      	add	sp, #4
 8000bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bd4:	18000c1e 	.word	0x18000c1e
 8000bd8:	e800783c 	.word	0xe800783c
 8000bdc:	18000c10 	.word	0x18000c10

08000be0 <MultiArrayReferenceTypeRepresentation::PrettyToString#14839>:
        }

        internal override void PrettyToString( System.Text.StringBuilder sb                 ,
                                               bool                      fPrefix            ,
                                               bool                      fWithAbbreviations )
        {
 8000be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be4:	b082      	sub	sp, #8
 8000be6:	f04f 0800 	mov.w	r8, #0
 8000bea:	4605      	mov	r5, r0
 8000bec:	460c      	mov	r4, r1
 8000bee:	e9cd 8800 	strd	r8, r8, [sp]
            m_elementType.PrettyToString( sb, fPrefix, fWithAbbreviations );
 8000bf2:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8000bf4:	6841      	ldr	r1, [r0, #4]
 8000bf6:	69c9      	ldr	r1, [r1, #28]
 8000bf8:	6acf      	ldr	r7, [r1, #44]	; 0x2c
 8000bfa:	4621      	mov	r1, r4
 8000bfc:	47b8      	blx	r7
 8000bfe:	4e27      	ldr	r6, [pc, #156]	; (8000c9c <MultiArrayReferenceTypeRepresentation::PrettyToString#14839+0xbc>)

            sb.Append( "[" );
 8000c00:	4827      	ldr	r0, [pc, #156]	; (8000ca0 <MultiArrayReferenceTypeRepresentation::PrettyToString#14839+0xc0>)
 8000c02:	447e      	add	r6, pc
 8000c04:	1981      	adds	r1, r0, r6
 8000c06:	4620      	mov	r0, r4
 8000c08:	f005 fa0f 	bl	800602a <StringBuilder::Append#8806>
            for(int i = 0; i < m_rank; i++)
            {
                if(i != 0)
                {
                    sb.Append( "," );
 8000c0c:	4827      	ldr	r0, [pc, #156]	; (8000cac <MultiArrayReferenceTypeRepresentation::PrettyToString#14839+0xcc>)
 8000c0e:	270c      	movs	r7, #12
 8000c10:	eb00 0a06 	add.w	sl, r0, r6
                    Dimension dm = m_dimensions[i];

                    if(dm.m_lowerBound != 0 || dm.m_upperBound != 0)
                    {
                        sb.Append( dm.m_lowerBound );
                        sb.Append( ".." );
 8000c14:	4826      	ldr	r0, [pc, #152]	; (8000cb0 <MultiArrayReferenceTypeRepresentation::PrettyToString#14839+0xd0>)
 8000c16:	eb00 0906 	add.w	r9, r0, r6
 8000c1a:	2600      	movs	r6, #0
 8000c1c:	e001      	b.n	8000c22 <MultiArrayReferenceTypeRepresentation::PrettyToString#14839+0x42>
                                               bool                      fWithAbbreviations )
        {
            m_elementType.PrettyToString( sb, fPrefix, fWithAbbreviations );

            sb.Append( "[" );
            for(int i = 0; i < m_rank; i++)
 8000c1e:	3708      	adds	r7, #8
 8000c20:	3601      	adds	r6, #1
 8000c22:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8000c24:	17f1      	asrs	r1, r6, #31
 8000c26:	4286      	cmp	r6, r0
 8000c28:	f04f 0000 	mov.w	r0, #0
 8000c2c:	bf28      	it	cs
 8000c2e:	2001      	movcs	r0, #1
 8000c30:	f1b1 3fff 	cmp.w	r1, #4294967295
 8000c34:	f04f 0100 	mov.w	r1, #0
 8000c38:	bfc8      	it	gt
 8000c3a:	2101      	movgt	r1, #1
 8000c3c:	ebb8 7fe6 	cmp.w	r8, r6, asr #31
 8000c40:	bf08      	it	eq
 8000c42:	4601      	moveq	r1, r0
 8000c44:	bb01      	cbnz	r1, 8000c88 <MultiArrayReferenceTypeRepresentation::PrettyToString#14839+0xa8>
 8000c46:	b11e      	cbz	r6, 8000c50 <MultiArrayReferenceTypeRepresentation::PrettyToString#14839+0x70>
            {
                if(i != 0)
                {
                    sb.Append( "," );
 8000c48:	4620      	mov	r0, r4
 8000c4a:	4651      	mov	r1, sl
 8000c4c:	f005 f9ed 	bl	800602a <StringBuilder::Append#8806>
                }

                if(i < m_dimensions.Length)
 8000c50:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8000c52:	6880      	ldr	r0, [r0, #8]
 8000c54:	4286      	cmp	r6, r0
 8000c56:	dae2      	bge.n	8000c1e <MultiArrayReferenceTypeRepresentation::PrettyToString#14839+0x3e>
                {
                    Dimension dm = m_dimensions[i];
 8000c58:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8000c5a:	59c1      	ldr	r1, [r0, r7]
 8000c5c:	4438      	add	r0, r7
 8000c5e:	6840      	ldr	r0, [r0, #4]
 8000c60:	e9cd 1000 	strd	r1, r0, [sp]

                    if(dm.m_lowerBound != 0 || dm.m_upperBound != 0)
 8000c64:	9800      	ldr	r0, [sp, #0]
 8000c66:	b910      	cbnz	r0, 8000c6e <MultiArrayReferenceTypeRepresentation::PrettyToString#14839+0x8e>
 8000c68:	9801      	ldr	r0, [sp, #4]
 8000c6a:	2800      	cmp	r0, #0
 8000c6c:	d0d7      	beq.n	8000c1e <MultiArrayReferenceTypeRepresentation::PrettyToString#14839+0x3e>
                    {
                        sb.Append( dm.m_lowerBound );
 8000c6e:	9900      	ldr	r1, [sp, #0]
 8000c70:	4620      	mov	r0, r4
 8000c72:	f005 ffd5 	bl	8006c20 <StringBuilder::Append#8828>
                        sb.Append( ".." );
 8000c76:	4620      	mov	r0, r4
 8000c78:	4649      	mov	r1, r9
 8000c7a:	f005 f9d6 	bl	800602a <StringBuilder::Append#8806>
                        sb.Append( dm.m_upperBound );
 8000c7e:	9901      	ldr	r1, [sp, #4]
 8000c80:	4620      	mov	r0, r4
 8000c82:	f005 ffcd 	bl	8006c20 <StringBuilder::Append#8828>
 8000c86:	e7ca      	b.n	8000c1e <MultiArrayReferenceTypeRepresentation::PrettyToString#14839+0x3e>
 8000c88:	4806      	ldr	r0, [pc, #24]	; (8000ca4 <MultiArrayReferenceTypeRepresentation::PrettyToString#14839+0xc4>)
                    }
                }
            }
            sb.Append( "]" );
 8000c8a:	4907      	ldr	r1, [pc, #28]	; (8000ca8 <MultiArrayReferenceTypeRepresentation::PrettyToString#14839+0xc8>)
 8000c8c:	4478      	add	r0, pc
 8000c8e:	4401      	add	r1, r0
 8000c90:	4620      	mov	r0, r4
 8000c92:	f005 f9ca 	bl	800602a <StringBuilder::Append#8806>
 8000c96:	b002      	add	sp, #8
 8000c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9c:	18000bae 	.word	0x18000bae
 8000ca0:	e800ab1c 	.word	0xe800ab1c
 8000ca4:	18000b24 	.word	0x18000b24
 8000ca8:	e800ab3c 	.word	0xe800ab3c
 8000cac:	e800a38c 	.word	0xe800a38c
 8000cb0:	e800ab5c 	.word	0xe800ab5c

08000cb4 <MultiArrayReferenceTypeRepresentation::SameShape#14835>:
        }

        //--//

        public override bool SameShape( ArrayReferenceTypeRepresentation other )
        {
 8000cb4:	b5b0      	push	{r4, r5, r7, lr}
 8000cb6:	4604      	mov	r4, r0
 8000cb8:	480e      	ldr	r0, [pc, #56]	; (8000cf4 <MultiArrayReferenceTypeRepresentation::SameShape#14835+0x40>)
            MultiArrayReferenceTypeRepresentation other2 = other as MultiArrayReferenceTypeRepresentation;
 8000cba:	4a0f      	ldr	r2, [pc, #60]	; (8000cf8 <MultiArrayReferenceTypeRepresentation::SameShape#14835+0x44>)
 8000cbc:	4478      	add	r0, pc
 8000cbe:	4402      	add	r2, r0
 8000cc0:	4608      	mov	r0, r1
 8000cc2:	4611      	mov	r1, r2
 8000cc4:	f7ff ff22 	bl	8000b0c <TypeSystemManager::CastToSealedTypeNoThrow#5244>
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4605      	mov	r5, r0
 8000ccc:	f000 fb12 	bl	80012f4 <Object::Equals#2397>

            if(other2 != null)
 8000cd0:	f010 0fff 	tst.w	r0, #255	; 0xff
 8000cd4:	d10c      	bne.n	8000cf0 <MultiArrayReferenceTypeRepresentation::SameShape#14835+0x3c>
            {
                if(m_rank == other2.m_rank)
 8000cd6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8000cd8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000cda:	4281      	cmp	r1, r0
 8000cdc:	d108      	bne.n	8000cf0 <MultiArrayReferenceTypeRepresentation::SameShape#14835+0x3c>
                {
                    if(ArrayUtility.ArrayEquals( m_dimensions, other2.m_dimensions ))
 8000cde:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8000ce0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8000ce2:	f006 f9d7 	bl	8007094 <ArrayUtility::ArrayEquals#34689>
 8000ce6:	b2c0      	uxtb	r0, r0
 8000ce8:	2800      	cmp	r0, #0
 8000cea:	bf18      	it	ne
 8000cec:	2001      	movne	r0, #1
 8000cee:	bdb0      	pop	{r4, r5, r7, pc}
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	bdb0      	pop	{r4, r5, r7, pc}
 8000cf4:	18000af4 	.word	0x18000af4
 8000cf8:	e800783c 	.word	0xe800783c

08000cfc <TypeSystemManager::CastToSealedType#5243>:
        //--//

        [TS.WellKnownMethod( "TypeSystemManager_CastToSealedType" )]
        public static object CastToSealedType( object    obj      ,
                                               TS.VTable expected )
        {
 8000cfc:	b5b0      	push	{r4, r5, r7, lr}
            if(obj != null)
 8000cfe:	2800      	cmp	r0, #0
 8000d00:	bf08      	it	eq
 8000d02:	bdb0      	popeq	{r4, r5, r7, pc}
            {
                obj = CastToSealedTypeNoThrow( obj, expected );
 8000d04:	f7ff ff02 	bl	8000b0c <TypeSystemManager::CastToSealedTypeNoThrow#5244>
 8000d08:	b100      	cbz	r0, 8000d0c <TypeSystemManager::CastToSealedType#5243+0x10>
 8000d0a:	bdb0      	pop	{r4, r5, r7, pc}
 8000d0c:	4807      	ldr	r0, [pc, #28]	; (8000d2c <TypeSystemManager::CastToSealedType#5243+0x30>)
                if(obj == null)
                {
                    throw new InvalidCastException();
 8000d0e:	4908      	ldr	r1, [pc, #32]	; (8000d30 <TypeSystemManager::CastToSealedType#5243+0x34>)
 8000d10:	4478      	add	r0, pc
 8000d12:	180c      	adds	r4, r1, r0
 8000d14:	4907      	ldr	r1, [pc, #28]	; (8000d34 <TypeSystemManager::CastToSealedType#5243+0x38>)
 8000d16:	4401      	add	r1, r0
 8000d18:	4620      	mov	r0, r4
 8000d1a:	f7ff fe01 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8000d1e:	4605      	mov	r5, r0
 8000d20:	f003 fdfe 	bl	8004920 <InvalidCastException::.ctor#7413>
 8000d24:	4620      	mov	r0, r4
 8000d26:	4629      	mov	r1, r5
 8000d28:	f7ff fe10 	bl	800094c <TypeSystemManager::Throw#5247>
 8000d2c:	18000aa0 	.word	0x18000aa0
 8000d30:	ffffea64 	.word	0xffffea64
 8000d34:	e800932c 	.word	0xe800932c

08000d38 <Array::GetEndDataPointer#3878>:

        //
        // This is used to get the pointer to the data, which is not possible in C#.
        //
        public unsafe uint* GetEndDataPointer()
        {
 8000d38:	b580      	push	{r7, lr}
            return (uint*)GetPointerToElement( m_numElements );
 8000d3a:	6881      	ldr	r1, [r0, #8]
 8000d3c:	f7ff fe1e 	bl	800097c <Array::GetPointerToElement#3877>
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <Array::SetLength#3879>:
 8000d42:	6081      	str	r1, [r0, #8]
 8000d44:	4770      	bx	lr
 8000d46:	46c0      	nop			; (mov r8, r8)

08000d48 <Byte::Equals#1808>:
            return m_value - value;
        }

        // Determines whether two Byte objects are equal.
        public override bool Equals( Object obj )
        {
 8000d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d4a:	b081      	sub	sp, #4
 8000d4c:	4606      	mov	r6, r0
 8000d4e:	480c      	ldr	r0, [pc, #48]	; (8000d80 <Byte::Equals#1808+0x38>)
            if(!(obj is Byte))
 8000d50:	4f0c      	ldr	r7, [pc, #48]	; (8000d84 <Byte::Equals#1808+0x3c>)
 8000d52:	460d      	mov	r5, r1
 8000d54:	4478      	add	r0, pc
 8000d56:	1839      	adds	r1, r7, r0
 8000d58:	4628      	mov	r0, r5
 8000d5a:	f7ff fed7 	bl	8000b0c <TypeSystemManager::CastToSealedTypeNoThrow#5244>
 8000d5e:	2400      	movs	r4, #0
 8000d60:	b150      	cbz	r0, 8000d78 <Byte::Equals#1808+0x30>
 8000d62:	4809      	ldr	r0, [pc, #36]	; (8000d88 <Byte::Equals#1808+0x40>)
            {
                return false;
            }

            return m_value == ((Byte)obj).m_value;
 8000d64:	7836      	ldrb	r6, [r6, #0]
 8000d66:	4478      	add	r0, pc
 8000d68:	1839      	adds	r1, r7, r0
 8000d6a:	4628      	mov	r0, r5
 8000d6c:	f7ff ffc6 	bl	8000cfc <TypeSystemManager::CastToSealedType#5243>
 8000d70:	7800      	ldrb	r0, [r0, #0]
 8000d72:	4286      	cmp	r6, r0
 8000d74:	bf08      	it	eq
 8000d76:	2401      	moveq	r4, #1
 8000d78:	4620      	mov	r0, r4
 8000d7a:	b001      	add	sp, #4
 8000d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	18000a5c 	.word	0x18000a5c
 8000d84:	e80078cc 	.word	0xe80078cc
 8000d88:	18000a4a 	.word	0x18000a4a

08000d8c <Object::ToString#2395>:

        // Returns a String which represents the object instance.  The default
        // for an object is to return the fully qualified name of the class.
        //
        public virtual String ToString()
        {
 8000d8c:	b580      	push	{r7, lr}
            return GetType().ToString();
 8000d8e:	f000 faaa 	bl	80012e6 <Object::GetType#3988>
 8000d92:	f000 faab 	bl	80012ec <RuntimeType::ToString#2469>
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <Byte::GetHashCode#1812>:
        }

        // Gets a hash code for this instance.
        public override int GetHashCode()
        {
            return m_value;
 8000d98:	7800      	ldrb	r0, [r0, #0]
 8000d9a:	4770      	bx	lr

08000d9c <Byte::ToString#1831>:
            result = (byte)i;
            return true;
        }

        public override String ToString()
        {
 8000d9c:	b510      	push	{r4, lr}
            return Number.FormatInt32( m_value, /*null,*/ NumberFormatInfo.CurrentInfo );
 8000d9e:	7804      	ldrb	r4, [r0, #0]
 8000da0:	f000 f806 	bl	8000db0 <NumberFormatInfo::get_CurrentInfo#10019>
 8000da4:	4601      	mov	r1, r0
 8000da6:	4620      	mov	r0, r4
 8000da8:	f000 f824 	bl	8000df4 <Number::FormatInt32#7543>
 8000dac:	bd10      	pop	{r4, pc}
 8000dae:	46c0      	nop			; (mov r8, r8)

08000db0 <NumberFormatInfo::get_CurrentInfo#10019>:
        //

        public static NumberFormatInfo CurrentInfo
        {
            get
            {
 8000db0:	b510      	push	{r4, lr}
 8000db2:	480b      	ldr	r0, [pc, #44]	; (8000de0 <NumberFormatInfo::get_CurrentInfo#10019+0x30>)
 8000db4:	490b      	ldr	r1, [pc, #44]	; (8000de4 <NumberFormatInfo::get_CurrentInfo#10019+0x34>)
 8000db6:	4478      	add	r0, pc
 8000db8:	4408      	add	r0, r1
 8000dba:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
                System.Globalization.CultureInfo culture = System.Threading.Thread.CurrentThread.CurrentCulture;
                if(!culture.m_isInherited)
 8000dbe:	7f01      	ldrb	r1, [r0, #28]
 8000dc0:	b909      	cbnz	r1, 8000dc6 <NumberFormatInfo::get_CurrentInfo#10019+0x16>
                {
                    NumberFormatInfo info = culture.numInfo;
                    if(info != null)
                    {
                        return info;
 8000dc2:	6901      	ldr	r1, [r0, #16]
 8000dc4:	b951      	cbnz	r1, 8000ddc <NumberFormatInfo::get_CurrentInfo#10019+0x2c>
 8000dc6:	4c08      	ldr	r4, [pc, #32]	; (8000de8 <NumberFormatInfo::get_CurrentInfo#10019+0x38>)
                    }
                }
                return ((NumberFormatInfo)culture.GetFormat( typeof( NumberFormatInfo ) ));
 8000dc8:	4908      	ldr	r1, [pc, #32]	; (8000dec <NumberFormatInfo::get_CurrentInfo#10019+0x3c>)
 8000dca:	447c      	add	r4, pc
 8000dcc:	4421      	add	r1, r4
 8000dce:	f005 ff97 	bl	8006d00 <CultureInfo::GetFormat#9880>
 8000dd2:	4907      	ldr	r1, [pc, #28]	; (8000df0 <NumberFormatInfo::get_CurrentInfo#10019+0x40>)
 8000dd4:	4421      	add	r1, r4
 8000dd6:	f7ff ff91 	bl	8000cfc <TypeSystemManager::CastToSealedType#5243>
 8000dda:	4601      	mov	r1, r0
 8000ddc:	4608      	mov	r0, r1
 8000dde:	bd10      	pop	{r4, pc}
 8000de0:	180009fa 	.word	0x180009fa
 8000de4:	fffffe3c 	.word	0xfffffe3c
 8000de8:	180009e6 	.word	0x180009e6
 8000dec:	e800a320 	.word	0xe800a320
 8000df0:	e800a2fc 	.word	0xe800a2fc

08000df4 <Number::FormatInt32#7543>:
        }

        internal static String FormatInt32( int              value     ,
                                            char             formatChar,
                                            NumberFormatInfo info      )
        {
 8000df4:	b570      	push	{r4, r5, r6, lr}
 8000df6:	460c      	mov	r4, r1
 8000df8:	490a      	ldr	r1, [pc, #40]	; (8000e24 <Number::FormatInt32#7543+0x30>)
 8000dfa:	4605      	mov	r5, r0
            Number number = new Number( value );
 8000dfc:	480a      	ldr	r0, [pc, #40]	; (8000e28 <Number::FormatInt32#7543+0x34>)
 8000dfe:	4a0b      	ldr	r2, [pc, #44]	; (8000e2c <Number::FormatInt32#7543+0x38>)
 8000e00:	4479      	add	r1, pc
 8000e02:	4408      	add	r0, r1
 8000e04:	4411      	add	r1, r2
 8000e06:	f7ff fd8b 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8000e0a:	4629      	mov	r1, r5
 8000e0c:	4606      	mov	r6, r0
 8000e0e:	f004 fa5b 	bl	80052c8 <Number::.ctor#7530>
            return number.ToString( formatChar, -1, info );
 8000e12:	4630      	mov	r0, r6
 8000e14:	2147      	movs	r1, #71	; 0x47
 8000e16:	f04f 32ff 	mov.w	r2, #4294967295
 8000e1a:	4623      	mov	r3, r4
 8000e1c:	f004 fb3e 	bl	800549c <Number::ToString#7554>
 8000e20:	bd70      	pop	{r4, r5, r6, pc}
 8000e22:	46c0      	nop			; (mov r8, r8)
 8000e24:	180009b0 	.word	0x180009b0
 8000e28:	ffffea64 	.word	0xffffea64
 8000e2c:	e8009bec 	.word	0xe8009bec

08000e30 <Byte::ToString#1837>:
        {
            return Number.FormatInt32( m_value, /*null,*/ NumberFormatInfo.GetInstance( provider ) );
        }
    
        public String ToString( String format, IFormatProvider provider )
        {
 8000e30:	b5b0      	push	{r4, r5, r7, lr}
            return Number.FormatInt32( m_value, format, NumberFormatInfo.GetInstance( provider ) );
 8000e32:	7805      	ldrb	r5, [r0, #0]
 8000e34:	460c      	mov	r4, r1
 8000e36:	f7ff ffbb 	bl	8000db0 <NumberFormatInfo::get_CurrentInfo#10019>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	4628      	mov	r0, r5
 8000e3e:	4621      	mov	r1, r4
 8000e40:	f000 f802 	bl	8000e48 <Number::FormatInt32#7544>
 8000e44:	bdb0      	pop	{r4, r5, r7, pc}
 8000e46:	46c0      	nop			; (mov r8, r8)

08000e48 <Number::FormatInt32#7544>:
        }

        public static String FormatInt32( int              value  ,
                                          String           format ,
                                          NumberFormatInfo info   )
        {
 8000e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	460d      	mov	r5, r1
 8000e50:	4606      	mov	r6, r0
 8000e52:	2000      	movs	r0, #0
 8000e54:	a901      	add	r1, sp, #4
 8000e56:	4690      	mov	r8, r2
 8000e58:	9001      	str	r0, [sp, #4]
                        return Int32ToDecString( value, digits, info.negativeSign );
                    }
                case 'x':
                case 'X':
                    {
                        return Int32ToHexString( unchecked( (uint)value ),
 8000e5a:	4628      	mov	r0, r5
 8000e5c:	f004 fad0 	bl	8005400 <Number::ParseFormatSpecifier#7555>
 8000e60:	4607      	mov	r7, r0
                                          NumberFormatInfo info   )
        {
            // rusa: see also Lightning\Src\VM\COMNumber.cpp::FormatInt32
            int digits;
            char fmt = ParseFormatSpecifier( format, out digits );
            switch(fmt)
 8000e62:	b2b8      	uxth	r0, r7
 8000e64:	2859      	cmp	r0, #89	; 0x59
 8000e66:	d306      	bcc.n	8000e76 <Number::FormatInt32#7544+0x2e>
 8000e68:	2864      	cmp	r0, #100	; 0x64
 8000e6a:	d017      	beq.n	8000e9c <Number::FormatInt32#7544+0x54>
 8000e6c:	2867      	cmp	r0, #103	; 0x67
 8000e6e:	d006      	beq.n	8000e7e <Number::FormatInt32#7544+0x36>
 8000e70:	2878      	cmp	r0, #120	; 0x78
 8000e72:	d11c      	bne.n	8000eae <Number::FormatInt32#7544+0x66>
 8000e74:	e007      	b.n	8000e86 <Number::FormatInt32#7544+0x3e>
 8000e76:	2858      	cmp	r0, #88	; 0x58
 8000e78:	d005      	beq.n	8000e86 <Number::FormatInt32#7544+0x3e>
 8000e7a:	2847      	cmp	r0, #71	; 0x47
 8000e7c:	d10c      	bne.n	8000e98 <Number::FormatInt32#7544+0x50>
            {
                case 'g':
                case 'G':
                    {
                        if(digits > 0) break;
 8000e7e:	9801      	ldr	r0, [sp, #4]
 8000e80:	2800      	cmp	r0, #0
 8000e82:	dc14      	bgt.n	8000eae <Number::FormatInt32#7544+0x66>
 8000e84:	e00a      	b.n	8000e9c <Number::FormatInt32#7544+0x54>
                        return Int32ToDecString( value, digits, info.negativeSign );
                    }
                case 'x':
                case 'X':
                    {
                        return Int32ToHexString( unchecked( (uint)value ),
 8000e86:	9a01      	ldr	r2, [sp, #4]
 8000e88:	f1a0 0121 	sub.w	r1, r0, #33	; 0x21
 8000e8c:	4630      	mov	r0, r6
 8000e8e:	f004 ff07 	bl	8005ca0 <Number::Int32ToHexString#7559>
 8000e92:	b002      	add	sp, #8
 8000e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e98:	2844      	cmp	r0, #68	; 0x44
 8000e9a:	d108      	bne.n	8000eae <Number::FormatInt32#7544+0x66>
                        goto case 'D';
                    }
                case 'd':
                case 'D':
                    {
                        return Int32ToDecString( value, digits, info.negativeSign );
 8000e9c:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8000ea0:	9901      	ldr	r1, [sp, #4]
 8000ea2:	4630      	mov	r0, r6
 8000ea4:	f004 ff28 	bl	8005cf8 <Number::Int32ToDecString#7558>
 8000ea8:	b002      	add	sp, #8
 8000eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000eae:	4910      	ldr	r1, [pc, #64]	; (8000ef0 <Number::FormatInt32#7544+0xa8>)
                default:
                    {
                        break;
                    }
            }
            Number number = new Number( value );
 8000eb0:	4810      	ldr	r0, [pc, #64]	; (8000ef4 <Number::FormatInt32#7544+0xac>)
 8000eb2:	4a11      	ldr	r2, [pc, #68]	; (8000ef8 <Number::FormatInt32#7544+0xb0>)
 8000eb4:	4479      	add	r1, pc
 8000eb6:	4408      	add	r0, r1
 8000eb8:	4411      	add	r1, r2
 8000eba:	f7ff fd31 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	4604      	mov	r4, r0
 8000ec2:	f004 fa01 	bl	80052c8 <Number::.ctor#7530>
            if(fmt == 0)
 8000ec6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000eca:	4207      	tst	r7, r0
 8000ecc:	d008      	beq.n	8000ee0 <Number::FormatInt32#7544+0x98>
            {
                return number.ToStringFormat( format, info );
            }
            else
            {
                return number.ToString( fmt, digits, info );
 8000ece:	9a01      	ldr	r2, [sp, #4]
 8000ed0:	4620      	mov	r0, r4
 8000ed2:	4639      	mov	r1, r7
 8000ed4:	4643      	mov	r3, r8
 8000ed6:	f004 fae1 	bl	800549c <Number::ToString#7554>
 8000eda:	b002      	add	sp, #8
 8000edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    }
            }
            Number number = new Number( value );
            if(fmt == 0)
            {
                return number.ToStringFormat( format, info );
 8000ee0:	4620      	mov	r0, r4
 8000ee2:	4629      	mov	r1, r5
 8000ee4:	4642      	mov	r2, r8
 8000ee6:	f004 fc37 	bl	8005758 <Number::ToStringFormat#7556>
 8000eea:	b002      	add	sp, #8
 8000eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ef0:	180008fc 	.word	0x180008fc
 8000ef4:	ffffea64 	.word	0xffffea64
 8000ef8:	e8009bec 	.word	0xe8009bec

08000efc <Char::GetHashCode#1877>:
        //

        // Calculate a hashcode for a 2 byte Unicode character.
        public override int GetHashCode()
        {
            return (int)m_value | ((int)m_value << 16);
 8000efc:	8800      	ldrh	r0, [r0, #0]
 8000efe:	ea40 4000 	orr.w	r0, r0, r0, lsl #16
 8000f02:	4770      	bx	lr

08000f04 <Char::Equals#1879>:
        }

        // Used for comparing two boxed Char objects.
        //
        public override bool Equals( Object obj )
        {
 8000f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f06:	b081      	sub	sp, #4
 8000f08:	4606      	mov	r6, r0
 8000f0a:	480c      	ldr	r0, [pc, #48]	; (8000f3c <Char::Equals#1879+0x38>)
            if(!(obj is Char))
 8000f0c:	4f0c      	ldr	r7, [pc, #48]	; (8000f40 <Char::Equals#1879+0x3c>)
 8000f0e:	460d      	mov	r5, r1
 8000f10:	4478      	add	r0, pc
 8000f12:	1839      	adds	r1, r7, r0
 8000f14:	4628      	mov	r0, r5
 8000f16:	f7ff fdf9 	bl	8000b0c <TypeSystemManager::CastToSealedTypeNoThrow#5244>
 8000f1a:	2400      	movs	r4, #0
 8000f1c:	b150      	cbz	r0, 8000f34 <Char::Equals#1879+0x30>
 8000f1e:	4809      	ldr	r0, [pc, #36]	; (8000f44 <Char::Equals#1879+0x40>)
            {
                return false;
            }

            return (m_value == ((Char)obj).m_value);
 8000f20:	8836      	ldrh	r6, [r6, #0]
 8000f22:	4478      	add	r0, pc
 8000f24:	1839      	adds	r1, r7, r0
 8000f26:	4628      	mov	r0, r5
 8000f28:	f7ff fee8 	bl	8000cfc <TypeSystemManager::CastToSealedType#5243>
 8000f2c:	8800      	ldrh	r0, [r0, #0]
 8000f2e:	4286      	cmp	r6, r0
 8000f30:	bf08      	it	eq
 8000f32:	2401      	moveq	r4, #1
 8000f34:	4620      	mov	r0, r4
 8000f36:	b001      	add	sp, #4
 8000f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	180008a0 	.word	0x180008a0
 8000f40:	e800795c 	.word	0xe800795c
 8000f44:	1800088e 	.word	0x1800088e

08000f48 <Char::ToString#1887>:
            return (m_value - value);
        }

        // Overrides System.Object.ToString.
        public override String ToString()
        {
 8000f48:	b580      	push	{r7, lr}
            return Char.ToString( m_value );
 8000f4a:	8800      	ldrh	r0, [r0, #0]
 8000f4c:	f000 f801 	bl	8000f52 <Char::ToString#1891>
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <Char::ToString#1891>:
        /*===================================ToString===================================
        **This static methods takes a character and returns the String representation of it.
        ==============================================================================*/
        // Provides a string representation of a character.
        public static String ToString( char c )
        {
 8000f52:	b5b0      	push	{r4, r5, r7, lr}
 8000f54:	4604      	mov	r4, r0
            return new String( c, 1 );
 8000f56:	2001      	movs	r0, #1
 8000f58:	f000 f806 	bl	8000f68 <String::FastAllocateString#4058>
 8000f5c:	4621      	mov	r1, r4
 8000f5e:	4605      	mov	r5, r0
 8000f60:	f000 f818 	bl	8000f94 <String::.ctor#4057>
 8000f64:	4628      	mov	r0, r5
 8000f66:	bdb0      	pop	{r4, r5, r7, pc}

08000f68 <String::FastAllocateString#4058>:
        // Helper Methods
        //

        [TS.WellKnownMethod( "StringImpl_FastAllocateString" )]
        private static StringImpl FastAllocateString( int length )
        {
 8000f68:	b510      	push	{r4, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	4906      	ldr	r1, [pc, #24]	; (8000f88 <String::FastAllocateString#4058+0x20>)
 8000f6e:	4604      	mov	r4, r0
            StringImpl res = (StringImpl)(object)TypeSystemManager.Instance.AllocateString( TS.VTable.GetFromType( typeof(string) ), length + 1 );
 8000f70:	4806      	ldr	r0, [pc, #24]	; (8000f8c <String::FastAllocateString#4058+0x24>)
 8000f72:	4a07      	ldr	r2, [pc, #28]	; (8000f90 <String::FastAllocateString#4058+0x28>)
 8000f74:	4479      	add	r1, pc
 8000f76:	4408      	add	r0, r1
 8000f78:	4411      	add	r1, r2
 8000f7a:	1c62      	adds	r2, r4, #1
 8000f7c:	9101      	str	r1, [sp, #4]
 8000f7e:	f000 fb69 	bl	8001654 <DefaultTypeSystemManager::AllocateString#5257>
 8000f82:	60c4      	str	r4, [r0, #12]
 8000f84:	b002      	add	sp, #8
 8000f86:	bd10      	pop	{r4, pc}
 8000f88:	1800083c 	.word	0x1800083c
 8000f8c:	ffffea64 	.word	0xffffea64
 8000f90:	e80072ac 	.word	0xe80072ac

08000f94 <String::.ctor#4057>:
        }

        [DiscardTargetImplementation]
        [TS.WellKnownMethod( "StringImpl_ctor_char_int" )]
        public unsafe StringImpl( char c     ,
                                  int  count )
 8000f94:	b5b0      	push	{r4, r5, r7, lr}
 8000f96:	4605      	mov	r5, r0
 8000f98:	460c      	mov	r4, r1
        {
            if(count < 0 || count > m_stringLength)
 8000f9a:	68e8      	ldr	r0, [r5, #12]
 8000f9c:	2800      	cmp	r0, #0
            {
                ThreadImpl.ThrowIndexOutOfRangeException();
 8000f9e:	bfd8      	it	le
 8000fa0:	f000 fbb4 	blle	800170c <Thread::ThrowIndexOutOfRangeException#4205>
            }

            fixed(char* dest = &this.m_firstChar)
 8000fa4:	f105 0010 	add.w	r0, r5, #16
 8000fa8:	2101      	movs	r1, #1
            {
                char* ptr = dest;

                while(--count >= 0)
 8000faa:	3901      	subs	r1, #1
 8000fac:	2900      	cmp	r1, #0
 8000fae:	bfb8      	it	lt
 8000fb0:	bdb0      	poplt	{r4, r5, r7, pc}
 8000fb2:	f820 4b02 	strh.w	r4, [r0], #2
 8000fb6:	e7f8      	b.n	8000faa <String::.ctor#4057+0x16>

08000fb8 <Delegate::Equals#4903>:
        }

        //--//

        public override bool Equals( Object obj )
        {
 8000fb8:	b5b0      	push	{r4, r5, r7, lr}
 8000fba:	460d      	mov	r5, r1
 8000fbc:	4604      	mov	r4, r0
 8000fbe:	b19d      	cbz	r5, 8000fe8 <Delegate::Equals#4903+0x30>

        [Inline]
        protected static bool InternalEqualTypes( object a ,
                                                  object b )
        {
            return TS.VTable.SameType( a, b );
 8000fc0:	4620      	mov	r0, r4
 8000fc2:	4629      	mov	r1, r5
 8000fc4:	f000 f822 	bl	800100c <VTable::SameType#3836>

        //--//

        public override bool Equals( Object obj )
        {
            if(obj == null || !InternalEqualTypes( this, obj ))
 8000fc8:	f010 0fff 	tst.w	r0, #255	; 0xff
 8000fcc:	d00c      	beq.n	8000fe8 <Delegate::Equals#4903+0x30>
 8000fce:	480d      	ldr	r0, [pc, #52]	; (8001004 <Delegate::Equals#4903+0x4c>)
            {
                return false;
            }

            DelegateImpl d = obj as DelegateImpl;
 8000fd0:	490d      	ldr	r1, [pc, #52]	; (8001008 <Delegate::Equals#4903+0x50>)
 8000fd2:	4478      	add	r0, pc
 8000fd4:	4401      	add	r1, r0
 8000fd6:	4628      	mov	r0, r5
 8000fd8:	f000 f826 	bl	8001028 <TypeSystemManager::CastToTypeNoThrow#5242>
 8000fdc:	4605      	mov	r5, r0
            if(d == null)
 8000fde:	f000 f835 	bl	800104c <Delegate::op_Equality#4905>
 8000fe2:	f010 0fff 	tst.w	r0, #255	; 0xff
 8000fe6:	d001      	beq.n	8000fec <Delegate::Equals#4903+0x34>
 8000fe8:	2000      	movs	r0, #0
 8000fea:	bdb0      	pop	{r4, r5, r7, pc}
            {
                return false;
            }

            return (m_target == d.m_target && m_codePtr.Target == d.m_codePtr.Target);
 8000fec:	68a9      	ldr	r1, [r5, #8]
 8000fee:	68a2      	ldr	r2, [r4, #8]
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	428a      	cmp	r2, r1
 8000ff4:	bf18      	it	ne
 8000ff6:	bdb0      	popne	{r4, r5, r7, pc}
 8000ff8:	68e9      	ldr	r1, [r5, #12]
 8000ffa:	68e2      	ldr	r2, [r4, #12]
 8000ffc:	428a      	cmp	r2, r1
 8000ffe:	bf08      	it	eq
 8001000:	2001      	moveq	r0, #1
 8001002:	bdb0      	pop	{r4, r5, r7, pc}
 8001004:	180007de 	.word	0x180007de
 8001008:	e80079ec 	.word	0xe80079ec

0800100c <VTable::SameType#3836>:
 800100c:	6842      	ldr	r2, [r0, #4]
 800100e:	6849      	ldr	r1, [r1, #4]
 8001010:	2000      	movs	r0, #0
 8001012:	428a      	cmp	r2, r1
 8001014:	bf08      	it	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	4770      	bx	lr

0800101a <Delegate::GetHashCode#4904>:
        }

        public override int GetHashCode()
        {
 800101a:	b580      	push	{r7, lr}
            return m_codePtr.Target.GetHashCode();
 800101c:	300c      	adds	r0, #12
 800101e:	f000 f820 	bl	8001062 <IntPtr::GetHashCode#2330>
 8001022:	bd80      	pop	{r7, pc}

08001024 <Delegate::GetTarget#4909>:

        //--//

        protected virtual Object GetTarget()
        {
            return m_target;
 8001024:	6880      	ldr	r0, [r0, #8]
 8001026:	4770      	bx	lr

08001028 <TypeSystemManager::CastToTypeNoThrow#5242>:
        }

        [TS.WellKnownMethod( "TypeSystemManager_CastToTypeNoThrow" )]
        public static object CastToTypeNoThrow( object    obj      ,
                                                TS.VTable expected )
        {
 8001028:	b510      	push	{r4, lr}
 800102a:	4604      	mov	r4, r0
 800102c:	b164      	cbz	r4, 8001048 <TypeSystemManager::CastToTypeNoThrow#5242+0x20>
 800102e:	6862      	ldr	r2, [r4, #4]
 8001030:	4291      	cmp	r1, r2
 8001032:	d101      	bne.n	8001038 <TypeSystemManager::CastToTypeNoThrow#5242+0x10>
 8001034:	2001      	movs	r0, #1
 8001036:	e003      	b.n	8001040 <TypeSystemManager::CastToTypeNoThrow#5242+0x18>
 8001038:	4608      	mov	r0, r1
 800103a:	4611      	mov	r1, r2
 800103c:	f002 f930 	bl	80032a0 <VTable::CanBeAssignedFrom_Slow#3843>
            if(obj != null)
            {
                TS.VTable got = TS.VTable.Get( obj );

                if(expected.CanBeAssignedFrom( got ) == false)
 8001040:	b2c0      	uxtb	r0, r0
                {
                    return null;
 8001042:	2800      	cmp	r0, #0
 8001044:	bf08      	it	eq
 8001046:	4604      	moveq	r4, r0
 8001048:	4620      	mov	r0, r4
 800104a:	bd10      	pop	{r4, pc}

0800104c <Delegate::op_Equality#4905>:
        //--//

        public static bool operator ==( DelegateImpl d1 ,
                                        DelegateImpl d2 )
        {
            if((Object)d1 == null)
 800104c:	b580      	push	{r7, lr}
 800104e:	2800      	cmp	r0, #0
 8001050:	bf04      	itt	eq
 8001052:	2001      	moveq	r0, #1
 8001054:	bd80      	popeq	{r7, pc}
 8001056:	6841      	ldr	r1, [r0, #4]
            {
                return (Object)d2 == null;
            }

            return d1.Equals( d2 );
 8001058:	69c9      	ldr	r1, [r1, #28]
 800105a:	690a      	ldr	r2, [r1, #16]
 800105c:	2100      	movs	r1, #0
 800105e:	4790      	blx	r2
 8001060:	bd80      	pop	{r7, pc}

08001062 <IntPtr::GetHashCode#2330>:
            return false;
        }

        public unsafe override int GetHashCode()
        {
            return unchecked( (int)((long)m_value) );
 8001062:	6800      	ldr	r0, [r0, #0]
 8001064:	4770      	bx	lr

08001066 <Delegate::.ctor#4902>:
 8001066:	e9c0 1202 	strd	r1, r2, [r0, #8]
 800106a:	4770      	bx	lr

0800106c <Enum::ToString#2080>:
        #endregion

        #region IFormattable
        [Obsolete( "The provider argument is not used. Please use ToString(String)." )]
        public String ToString( String format, IFormatProvider provider )
        {
 800106c:	b580      	push	{r7, lr}
 800106e:	6841      	ldr	r1, [r0, #4]
        #endregion

        #region Public Methods
        public String ToString( String format )
        {
            return ToString();
 8001070:	69c9      	ldr	r1, [r1, #28]
 8001072:	68c9      	ldr	r1, [r1, #12]
 8001074:	4788      	blx	r1
 8001076:	bd80      	pop	{r7, pc}

08001078 <String::get_Chars#4064>:

        [System.Runtime.CompilerServices.IndexerName( "Chars" )]
        public unsafe char this[int index]
        {
            get
            {
 8001078:	b5b0      	push	{r4, r5, r7, lr}
                if(index >= 0 && index < m_stringLength)
 800107a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800107e:	dd08      	ble.n	8001092 <String::get_Chars#4064+0x1a>
 8001080:	68c2      	ldr	r2, [r0, #12]
 8001082:	4291      	cmp	r1, r2
 8001084:	da05      	bge.n	8001092 <String::get_Chars#4064+0x1a>
                {
                    fixed(char* ptr = (string)(object)this)
 8001086:	2800      	cmp	r0, #0
 8001088:	bf18      	it	ne
 800108a:	3010      	addne	r0, #16
 800108c:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 8001090:	bdb0      	pop	{r4, r5, r7, pc}
 8001092:	4808      	ldr	r0, [pc, #32]	; (80010b4 <String::get_Chars#4064+0x3c>)
                    {
                        return ptr[index];
                    }
                }

                throw new IndexOutOfRangeException();
 8001094:	4908      	ldr	r1, [pc, #32]	; (80010b8 <String::get_Chars#4064+0x40>)
 8001096:	4478      	add	r0, pc
 8001098:	180c      	adds	r4, r1, r0
 800109a:	4908      	ldr	r1, [pc, #32]	; (80010bc <String::get_Chars#4064+0x44>)
 800109c:	4401      	add	r1, r0
 800109e:	4620      	mov	r0, r4
 80010a0:	f7ff fc3e 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 80010a4:	4605      	mov	r5, r0
 80010a6:	f7ff fc97 	bl	80009d8 <IndexOutOfRangeException::.ctor#7410>
 80010aa:	4620      	mov	r0, r4
 80010ac:	4629      	mov	r1, r5
 80010ae:	f7ff fc4d 	bl	800094c <TypeSystemManager::Throw#5247>
 80010b2:	46c0      	nop			; (mov r8, r8)
 80010b4:	1800071a 	.word	0x1800071a
 80010b8:	ffffea64 	.word	0xffffea64
 80010bc:	e80076dc 	.word	0xe80076dc

080010c0 <Number::FormatUInt32#7546>:
        }

        public static String FormatUInt32( uint             value  ,
                                           String           format ,
                                           NumberFormatInfo info   )
        {
 80010c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	460d      	mov	r5, r1
 80010c8:	4606      	mov	r6, r0
 80010ca:	2000      	movs	r0, #0
 80010cc:	a901      	add	r1, sp, #4
 80010ce:	4690      	mov	r8, r2
 80010d0:	9001      	str	r0, [sp, #4]
                        return UInt32ToDecString( value, digits );
                    }
                case 'x':
                case 'X':
                    {
                        return Int32ToHexString( value,
 80010d2:	4628      	mov	r0, r5
 80010d4:	f004 f994 	bl	8005400 <Number::ParseFormatSpecifier#7555>
 80010d8:	4607      	mov	r7, r0
                                           NumberFormatInfo info   )
        {
            // rusa: see also Lightning\Src\VM\COMNumber.cpp::FormatUInt32
            int digits;
            char fmt = ParseFormatSpecifier( format, out digits );
            switch(fmt)
 80010da:	b2b8      	uxth	r0, r7
 80010dc:	2859      	cmp	r0, #89	; 0x59
 80010de:	d306      	bcc.n	80010ee <Number::FormatUInt32#7546+0x2e>
 80010e0:	2864      	cmp	r0, #100	; 0x64
 80010e2:	d017      	beq.n	8001114 <Number::FormatUInt32#7546+0x54>
 80010e4:	2867      	cmp	r0, #103	; 0x67
 80010e6:	d006      	beq.n	80010f6 <Number::FormatUInt32#7546+0x36>
 80010e8:	2878      	cmp	r0, #120	; 0x78
 80010ea:	d11a      	bne.n	8001122 <Number::FormatUInt32#7546+0x62>
 80010ec:	e007      	b.n	80010fe <Number::FormatUInt32#7546+0x3e>
 80010ee:	2858      	cmp	r0, #88	; 0x58
 80010f0:	d005      	beq.n	80010fe <Number::FormatUInt32#7546+0x3e>
 80010f2:	2847      	cmp	r0, #71	; 0x47
 80010f4:	d10c      	bne.n	8001110 <Number::FormatUInt32#7546+0x50>
            {
                case 'g':
                case 'G':
                    {
                        if(digits > 0) break;
 80010f6:	9801      	ldr	r0, [sp, #4]
 80010f8:	2800      	cmp	r0, #0
 80010fa:	dc12      	bgt.n	8001122 <Number::FormatUInt32#7546+0x62>
 80010fc:	e00a      	b.n	8001114 <Number::FormatUInt32#7546+0x54>
                        return UInt32ToDecString( value, digits );
                    }
                case 'x':
                case 'X':
                    {
                        return Int32ToHexString( value,
 80010fe:	9a01      	ldr	r2, [sp, #4]
 8001100:	f1a0 0121 	sub.w	r1, r0, #33	; 0x21
 8001104:	4630      	mov	r0, r6
 8001106:	f004 fdcb 	bl	8005ca0 <Number::Int32ToHexString#7559>
 800110a:	b002      	add	sp, #8
 800110c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001110:	2844      	cmp	r0, #68	; 0x44
 8001112:	d106      	bne.n	8001122 <Number::FormatUInt32#7546+0x62>
                        goto case 'D';
                    }
                case 'd':
                case 'D':
                    {
                        return UInt32ToDecString( value, digits );
 8001114:	9901      	ldr	r1, [sp, #4]
 8001116:	4630      	mov	r0, r6
 8001118:	f004 fe40 	bl	8005d9c <Number::UInt32ToDecString#7561>
 800111c:	b002      	add	sp, #8
 800111e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001122:	4910      	ldr	r1, [pc, #64]	; (8001164 <Number::FormatUInt32#7546+0xa4>)
                default:
                    {
                        break;
                    }
            }
            Number number = new Number( value );
 8001124:	4810      	ldr	r0, [pc, #64]	; (8001168 <Number::FormatUInt32#7546+0xa8>)
 8001126:	4a11      	ldr	r2, [pc, #68]	; (800116c <Number::FormatUInt32#7546+0xac>)
 8001128:	4479      	add	r1, pc
 800112a:	4408      	add	r0, r1
 800112c:	4411      	add	r1, r2
 800112e:	f7ff fbf7 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8001132:	4631      	mov	r1, r6
 8001134:	4604      	mov	r4, r0
 8001136:	f004 f923 	bl	8005380 <Number::.ctor#7531>
            if(fmt == 0)
 800113a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800113e:	4207      	tst	r7, r0
 8001140:	d008      	beq.n	8001154 <Number::FormatUInt32#7546+0x94>
            {
                return number.ToStringFormat( format, info );
            }
            else
            {
                return number.ToString( fmt, digits, info );
 8001142:	9a01      	ldr	r2, [sp, #4]
 8001144:	4620      	mov	r0, r4
 8001146:	4639      	mov	r1, r7
 8001148:	4643      	mov	r3, r8
 800114a:	f004 f9a7 	bl	800549c <Number::ToString#7554>
 800114e:	b002      	add	sp, #8
 8001150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    }
            }
            Number number = new Number( value );
            if(fmt == 0)
            {
                return number.ToStringFormat( format, info );
 8001154:	4620      	mov	r0, r4
 8001156:	4629      	mov	r1, r5
 8001158:	4642      	mov	r2, r8
 800115a:	f004 fafd 	bl	8005758 <Number::ToStringFormat#7556>
 800115e:	b002      	add	sp, #8
 8001160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001164:	18000688 	.word	0x18000688
 8001168:	ffffea64 	.word	0xffffea64
 800116c:	e8009bec 	.word	0xe8009bec

08001170 <Int32::Equals#2188>:

            return 0;
        }

        public override bool Equals( Object obj )
        {
 8001170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001172:	b081      	sub	sp, #4
 8001174:	4604      	mov	r4, r0
 8001176:	480c      	ldr	r0, [pc, #48]	; (80011a8 <Int32::Equals#2188+0x38>)
            if(!(obj is Int32))
 8001178:	4f0c      	ldr	r7, [pc, #48]	; (80011ac <Int32::Equals#2188+0x3c>)
 800117a:	460e      	mov	r6, r1
 800117c:	4478      	add	r0, pc
 800117e:	1839      	adds	r1, r7, r0
 8001180:	4630      	mov	r0, r6
 8001182:	f7ff fcc3 	bl	8000b0c <TypeSystemManager::CastToSealedTypeNoThrow#5244>
 8001186:	2500      	movs	r5, #0
 8001188:	b150      	cbz	r0, 80011a0 <Int32::Equals#2188+0x30>
 800118a:	4809      	ldr	r0, [pc, #36]	; (80011b0 <Int32::Equals#2188+0x40>)
 800118c:	4478      	add	r0, pc
            {
                return false;
            }

            return Equals( (Int32)obj );
 800118e:	1839      	adds	r1, r7, r0
 8001190:	4630      	mov	r0, r6
 8001192:	f7ff fdb3 	bl	8000cfc <TypeSystemManager::CastToSealedType#5243>
 8001196:	6800      	ldr	r0, [r0, #0]
 8001198:	6821      	ldr	r1, [r4, #0]
 800119a:	4281      	cmp	r1, r0
 800119c:	bf08      	it	eq
 800119e:	2501      	moveq	r5, #1
 80011a0:	4628      	mov	r0, r5
 80011a2:	b001      	add	sp, #4
 80011a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011a6:	46c0      	nop			; (mov r8, r8)
 80011a8:	18000634 	.word	0x18000634
 80011ac:	e8007a7c 	.word	0xe8007a7c
 80011b0:	18000624 	.word	0x18000624

080011b4 <Int32::GetHashCode#2192>:
        }

        // The absolute value of the int contained.
        public override int GetHashCode()
        {
            return m_value;
 80011b4:	6800      	ldr	r0, [r0, #0]
 80011b6:	4770      	bx	lr

080011b8 <Int32::ToString#2194>:
        }

        public override String ToString()
        {
 80011b8:	b510      	push	{r4, lr}
            return Number.FormatInt32( m_value, /*null,*/ NumberFormatInfo.CurrentInfo );
 80011ba:	6804      	ldr	r4, [r0, #0]
 80011bc:	f7ff fdf8 	bl	8000db0 <NumberFormatInfo::get_CurrentInfo#10019>
 80011c0:	4601      	mov	r1, r0
 80011c2:	4620      	mov	r0, r4
 80011c4:	f7ff fe16 	bl	8000df4 <Number::FormatInt32#7543>
 80011c8:	bd10      	pop	{r4, pc}

080011ca <Int32::ToString#2200>:
        {
            return Number.FormatInt32( m_value, format, NumberFormatInfo.CurrentInfo );
        }
    
        public String ToString( IFormatProvider provider )
        {
 80011ca:	b510      	push	{r4, lr}
            return Number.FormatInt32( m_value, /*null,*/ NumberFormatInfo.GetInstance( provider ) );
 80011cc:	6804      	ldr	r4, [r0, #0]
 80011ce:	f7ff fdef 	bl	8000db0 <NumberFormatInfo::get_CurrentInfo#10019>
 80011d2:	4601      	mov	r1, r0
 80011d4:	4620      	mov	r0, r4
 80011d6:	f7ff fe0d 	bl	8000df4 <Number::FormatInt32#7543>
 80011da:	bd10      	pop	{r4, pc}

080011dc <Int32::ToString#2202>:
        }
    
        public String ToString( String          format   ,
                                IFormatProvider provider )
        {
 80011dc:	b5b0      	push	{r4, r5, r7, lr}
            return Number.FormatInt32( m_value, format, NumberFormatInfo.GetInstance( provider ) );
 80011de:	6805      	ldr	r5, [r0, #0]
 80011e0:	460c      	mov	r4, r1
 80011e2:	f7ff fde5 	bl	8000db0 <NumberFormatInfo::get_CurrentInfo#10019>
 80011e6:	4602      	mov	r2, r0
 80011e8:	4628      	mov	r0, r5
 80011ea:	4621      	mov	r1, r4
 80011ec:	f7ff fe2c 	bl	8000e48 <Number::FormatInt32#7544>
 80011f0:	bdb0      	pop	{r4, r5, r7, pc}
 80011f2:	46c0      	nop			; (mov r8, r8)

080011f4 <MulticastDelegate::Equals#4920>:
        //--//

        // equals returns true IIF the delegate is not null and has the
        //    same target, method and invocation list as this object
        public override bool Equals( Object obj )
        {
 80011f4:	b5b0      	push	{r4, r5, r7, lr}
 80011f6:	460d      	mov	r5, r1
 80011f8:	4604      	mov	r4, r0
 80011fa:	b1fd      	cbz	r5, 800123c <MulticastDelegate::Equals#4920+0x48>
 80011fc:	4620      	mov	r0, r4
 80011fe:	4629      	mov	r1, r5
 8001200:	f7ff ff04 	bl	800100c <VTable::SameType#3836>
            if(obj == null || !InternalEqualTypes( this, obj ))
 8001204:	f010 0fff 	tst.w	r0, #255	; 0xff
 8001208:	d018      	beq.n	800123c <MulticastDelegate::Equals#4920+0x48>
 800120a:	480d      	ldr	r0, [pc, #52]	; (8001240 <MulticastDelegate::Equals#4920+0x4c>)
            {
                return false;
            }

            MulticastDelegateImpl d = obj as MulticastDelegateImpl;
 800120c:	490d      	ldr	r1, [pc, #52]	; (8001244 <MulticastDelegate::Equals#4920+0x50>)
 800120e:	4478      	add	r0, pc
 8001210:	4401      	add	r1, r0
 8001212:	4628      	mov	r0, r5
 8001214:	f7ff ff08 	bl	8001028 <TypeSystemManager::CastToTypeNoThrow#5242>
 8001218:	4605      	mov	r5, r0
            if(d == null)
 800121a:	f7ff ff17 	bl	800104c <Delegate::op_Equality#4905>
 800121e:	f010 0fff 	tst.w	r0, #255	; 0xff
 8001222:	d10b      	bne.n	800123c <MulticastDelegate::Equals#4920+0x48>
            {
                return false;
            }

            if(ArrayUtility.ArrayEquals( m_invocationList, d.m_invocationList ) == false)
 8001224:	6929      	ldr	r1, [r5, #16]
 8001226:	6920      	ldr	r0, [r4, #16]
 8001228:	f000 f835 	bl	8001296 <ArrayUtility::ArrayEquals#33562>
 800122c:	f010 0fff 	tst.w	r0, #255	; 0xff
 8001230:	d004      	beq.n	800123c <MulticastDelegate::Equals#4920+0x48>
            {
                return false;
            }

            // now we can call on the base
            return base.Equals( d );
 8001232:	4620      	mov	r0, r4
 8001234:	4629      	mov	r1, r5
 8001236:	f7ff febf 	bl	8000fb8 <Delegate::Equals#4903>
 800123a:	bdb0      	pop	{r4, r5, r7, pc}
 800123c:	2000      	movs	r0, #0
 800123e:	bdb0      	pop	{r4, r5, r7, pc}
 8001240:	180005a2 	.word	0x180005a2
 8001244:	e8007b0c 	.word	0xe8007b0c

08001248 <MulticastDelegate::GetHashCode#4921>:
        }

        public override int GetHashCode()
        {
 8001248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800124a:	b081      	sub	sp, #4
            DelegateImpl[] invocationList = m_invocationList;
 800124c:	6905      	ldr	r5, [r0, #16]
            if(invocationList == null)
 800124e:	b195      	cbz	r5, 8001276 <MulticastDelegate::GetHashCode#4921+0x2e>
 8001250:	f105 060c 	add.w	r6, r5, #12
 8001254:	2400      	movs	r4, #0
 8001256:	2700      	movs	r7, #0
 8001258:	e009      	b.n	800126e <MulticastDelegate::GetHashCode#4921+0x26>
            }
            else
            {
                int hash = 0;

                foreach(DelegateImpl d in invocationList)
 800125a:	f856 0027 	ldr.w	r0, [r6, r7, lsl #2]
                {
                    hash = hash * 33 + d.GetHashCode();
 800125e:	6841      	ldr	r1, [r0, #4]
 8001260:	69c9      	ldr	r1, [r1, #28]
 8001262:	6949      	ldr	r1, [r1, #20]
 8001264:	4788      	blx	r1
 8001266:	eb04 1144 	add.w	r1, r4, r4, lsl #5
                }
 800126a:	3701      	adds	r7, #1
            {
                int hash = 0;

                foreach(DelegateImpl d in invocationList)
                {
                    hash = hash * 33 + d.GetHashCode();
 800126c:	180c      	adds	r4, r1, r0
 800126e:	68a8      	ldr	r0, [r5, #8]
            }
            else
            {
                int hash = 0;

                foreach(DelegateImpl d in invocationList)
 8001270:	4287      	cmp	r7, r0
 8001272:	dbf2      	blt.n	800125a <MulticastDelegate::GetHashCode#4921+0x12>
 8001274:	e002      	b.n	800127c <MulticastDelegate::GetHashCode#4921+0x34>
        public override int GetHashCode()
        {
            DelegateImpl[] invocationList = m_invocationList;
            if(invocationList == null)
            {
                return base.GetHashCode();
 8001276:	f7ff fed0 	bl	800101a <Delegate::GetHashCode#4904>
 800127a:	4604      	mov	r4, r0
 800127c:	4620      	mov	r0, r4
 800127e:	b001      	add	sp, #4
 8001280:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001282 <MulticastDelegate::GetTarget#4925>:

        protected override Object GetTarget()
        {
            DelegateImpl dlg;

            if(m_invocationList == null)
 8001282:	6901      	ldr	r1, [r0, #16]
 8001284:	2900      	cmp	r1, #0
            {
                dlg = this;
            }
            else
            {
                DelegateImpl[] lst = m_invocationList;
 8001286:	bf1f      	itttt	ne
 8001288:	6900      	ldrne	r0, [r0, #16]
 800128a:	6881      	ldrne	r1, [r0, #8]
 800128c:	eb00 0081 	addne.w	r0, r0, r1, lsl #2

                dlg = lst[lst.Length - 1];
 8001290:	6880      	ldrne	r0, [r0, #8]
            }

            return dlg.m_target;
 8001292:	6880      	ldr	r0, [r0, #8]
 8001294:	4770      	bx	lr

08001296 <ArrayUtility::ArrayEquals#33562>:
            return true;
        }

        public static bool ArrayEquals<T>( T[] s ,
                                           T[] d )
        {
 8001296:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001298:	b081      	sub	sp, #4
 800129a:	b108      	cbz	r0, 80012a0 <ArrayUtility::ArrayEquals#33562+0xa>
 800129c:	6884      	ldr	r4, [r0, #8]
 800129e:	e000      	b.n	80012a2 <ArrayUtility::ArrayEquals#33562+0xc>
 80012a0:	2400      	movs	r4, #0
 80012a2:	b109      	cbz	r1, 80012a8 <ArrayUtility::ArrayEquals#33562+0x12>
 80012a4:	688a      	ldr	r2, [r1, #8]
 80012a6:	e000      	b.n	80012aa <ArrayUtility::ArrayEquals#33562+0x14>
 80012a8:	2200      	movs	r2, #0
            int sLen = s != null ? s.Length : 0;
            int dLen = d != null ? d.Length : 0;

            if(sLen == dLen)
 80012aa:	4294      	cmp	r4, r2
 80012ac:	d111      	bne.n	80012d2 <ArrayUtility::ArrayEquals#33562+0x3c>
 80012ae:	f101 050c 	add.w	r5, r1, #12
 80012b2:	f100 060c 	add.w	r6, r0, #12
 80012b6:	2700      	movs	r7, #0
 80012b8:	e000      	b.n	80012bc <ArrayUtility::ArrayEquals#33562+0x26>
            {
                for(int i = 0; i < sLen; i++)
 80012ba:	3701      	adds	r7, #1
 80012bc:	42a7      	cmp	r7, r4
 80012be:	da0b      	bge.n	80012d8 <ArrayUtility::ArrayEquals#33562+0x42>
                {
                    if(Object.Equals( s[i], d[i] ) == false)
 80012c0:	f855 1027 	ldr.w	r1, [r5, r7, lsl #2]
 80012c4:	f856 0027 	ldr.w	r0, [r6, r7, lsl #2]
 80012c8:	f000 f814 	bl	80012f4 <Object::Equals#2397>
 80012cc:	f010 0fff 	tst.w	r0, #255	; 0xff
 80012d0:	d1f3      	bne.n	80012ba <ArrayUtility::ArrayEquals#33562+0x24>
 80012d2:	2000      	movs	r0, #0
 80012d4:	b001      	add	sp, #4
 80012d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012d8:	2001      	movs	r0, #1
 80012da:	b001      	add	sp, #4
 80012dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012de <MulticastDelegate::.ctor#4919>:
        //

        [MergeWithTargetImplementation]
        [TS.WellKnownMethod( "MulticastDelegateImpl_MulticastDelegateImpl" )]
        internal MulticastDelegateImpl( Object         target  ,
                                        TS.CodePointer codePtr ) : base( target, codePtr )
 80012de:	b580      	push	{r7, lr}
 80012e0:	f7ff fec1 	bl	8001066 <Delegate::.ctor#4902>
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <Object::GetType#3988>:
        [MethodImpl( MethodImplOptions.InternalCall )]
        public extern virtual void FinalizeImpl();

        [NoInline]
        public new Type GetType()
        {
 80012e6:	6840      	ldr	r0, [r0, #4]
            return TS.VTable.Get( this ).Type;
 80012e8:	6940      	ldr	r0, [r0, #20]
 80012ea:	4770      	bx	lr

080012ec <RuntimeType::ToString#2469>:
////        return unchecked( (int)l );
#endif
////    }
    
        public override String ToString()
        {
 80012ec:	b580      	push	{r7, lr}
            return this.Name;
 80012ee:	f000 f8c9 	bl	8001484 <RuntimeType::get_Name#3270>
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <Object::Equals#2397>:
////    [ResourceExposure( ResourceScope.None )]
////    [MethodImpl( MethodImplOptions.InternalCall )]
////    internal static extern bool InternalEquals( Object objA, Object objB );

        public static bool Equals( Object objA, Object objB )
        {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	4602      	mov	r2, r0
            if(objA == objB)
 80012f8:	428a      	cmp	r2, r1
 80012fa:	bf04      	itt	eq
 80012fc:	2001      	moveq	r0, #1
 80012fe:	bd80      	popeq	{r7, pc}
            {
                return true;
            }

            if(objA == null || objB == null)
 8001300:	2a00      	cmp	r2, #0
 8001302:	f04f 0000 	mov.w	r0, #0
 8001306:	bf18      	it	ne
 8001308:	2900      	cmpne	r1, #0
 800130a:	d004      	beq.n	8001316 <Object::Equals#2397+0x22>
 800130c:	6850      	ldr	r0, [r2, #4]
            {
                return false;
            }

            return objA.Equals( objB );
 800130e:	69c0      	ldr	r0, [r0, #28]
 8001310:	6903      	ldr	r3, [r0, #16]
 8001312:	4610      	mov	r0, r2
 8001314:	4798      	blx	r3
 8001316:	bd80      	pop	{r7, pc}

08001318 <SyncBlockTable::GetHashCode#4789>:
        //
        // Helper Methods
        //

        public static int GetHashCode( object target )
        {
 8001318:	b5b0      	push	{r4, r5, r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	4604      	mov	r4, r0
 800131e:	2000      	movs	r0, #0
            ObjectHeader oh = ObjectHeader.Unpack( target );
            int          hashCode;

            switch(oh.ExtensionKind)
 8001320:	2101      	movs	r1, #1
 8001322:	9003      	str	r0, [sp, #12]
 8001324:	e9cd 0001 	strd	r0, r0, [sp, #4]
        // Helper Methods
        //

        public static int GetHashCode( object target )
        {
            ObjectHeader oh = ObjectHeader.Unpack( target );
 8001328:	6820      	ldr	r0, [r4, #0]
 800132a:	f400 7040 	and.w	r0, r0, #768	; 0x300
            int          hashCode;

            switch(oh.ExtensionKind)
 800132e:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
 8001332:	d102      	bne.n	800133a <SyncBlockTable::GetHashCode#4789+0x22>
 8001334:	6820      	ldr	r0, [r4, #0]
 8001336:	0a85      	lsrs	r5, r0, #10
 8001338:	e04e      	b.n	80013d8 <SyncBlockTable::GetHashCode#4789+0xc0>
        // Helper Methods
        //

        public static int GetHashCode( object target )
        {
            ObjectHeader oh = ObjectHeader.Unpack( target );
 800133a:	0a00      	lsrs	r0, r0, #8
 800133c:	bba8      	cbnz	r0, 80013aa <SyncBlockTable::GetHashCode#4789+0x92>
            {
                case ObjectHeader.ExtensionKinds.HashCode:
                    return oh.Payload;

                case ObjectHeader.ExtensionKinds.Empty:
                    using(var hnd = new SmartHandles.YieldLockHolder( Instance.Lock ))
 800133e:	f002 fd6f 	bl	8003e20 <SyncBlockTable::get_Lock#4798>
 8001342:	4605      	mov	r5, r0
 8001344:	4836      	ldr	r0, [pc, #216]	; (8001420 <SyncBlockTable::GetHashCode#4789+0x108>)
 8001346:	4937      	ldr	r1, [pc, #220]	; (8001424 <SyncBlockTable::GetHashCode#4789+0x10c>)
 8001348:	9501      	str	r5, [sp, #4]
 800134a:	4478      	add	r0, pc
 800134c:	4408      	add	r0, r1
 800134e:	f8d0 00bc 	ldr.w	r0, [r0, #188]	; 0xbc
 8001352:	9002      	str	r0, [sp, #8]
 8001354:	b118      	cbz	r0, 800135e <SyncBlockTable::GetHashCode#4789+0x46>
 8001356:	9802      	ldr	r0, [sp, #8]
 8001358:	f000 fe9c 	bl	8002094 <Thread::get_Priority#4211>
 800135c:	e000      	b.n	8001360 <SyncBlockTable::GetHashCode#4789+0x48>
 800135e:	2002      	movs	r0, #2
 8001360:	9003      	str	r0, [sp, #12]
 8001362:	4628      	mov	r0, r5
 8001364:	9902      	ldr	r1, [sp, #8]
 8001366:	f002 fd71 	bl	8003e4c <YieldLock::Acquire#5265>
 800136a:	7820      	ldrb	r0, [r4, #0]
 800136c:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
 8001370:	2000      	movs	r0, #0
 8001372:	2904      	cmp	r1, #4
 8001374:	f04f 0100 	mov.w	r1, #0
 8001378:	bf08      	it	eq
 800137a:	2101      	moveq	r1, #1
 800137c:	b929      	cbnz	r1, 800138a <SyncBlockTable::GetHashCode#4789+0x72>
 800137e:	6821      	ldr	r1, [r4, #0]
 8001380:	f401 7140 	and.w	r1, r1, #768	; 0x300
                        if(oh.IsImmutable == false)
                        {
                            //
                            // Check again, under lock, in case we had a race condition.
                            //
                            if(oh.ExtensionKind == ObjectHeader.ExtensionKinds.Empty)
 8001384:	ebb0 2f11 	cmp.w	r0, r1, lsr #8
 8001388:	d029      	beq.n	80013de <SyncBlockTable::GetHashCode#4789+0xc6>
                                oh.UpdateExtension( ObjectHeader.ExtensionKinds.HashCode, hashCode );

                                return hashCode;
                            }
                        }
                    }
 800138a:	e9dd 0101 	ldrd	r0, r1, [sp, #4]
 800138e:	f002 fd93 	bl	8003eb8 <YieldLock::Release#5266>
 8001392:	9802      	ldr	r0, [sp, #8]
 8001394:	b148      	cbz	r0, 80013aa <SyncBlockTable::GetHashCode#4789+0x92>
 8001396:	9802      	ldr	r0, [sp, #8]
 8001398:	f000 fe7c 	bl	8002094 <Thread::get_Priority#4211>
 800139c:	9903      	ldr	r1, [sp, #12]
 800139e:	4288      	cmp	r0, r1
 80013a0:	d003      	beq.n	80013aa <SyncBlockTable::GetHashCode#4789+0x92>
 80013a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80013a6:	f000 fe77 	bl	8002098 <Thread::set_Priority#4212>
 80013aa:	2c00      	cmp	r4, #0
 80013ac:	4620      	mov	r0, r4
 80013ae:	bf18      	it	ne
 80013b0:	2001      	movne	r0, #1
        //--//

        [Inline]
        private static int AssignSyncBlock( object obj )
        {
            BugCheck.Assert(null != obj, BugCheck.StopCode.SyncBlockCorruption);
 80013b2:	b390      	cbz	r0, 800141a <SyncBlockTable::GetHashCode#4789+0x102>

            ObjectHeader oh = ObjectHeader.Unpack( obj );
 80013b4:	6820      	ldr	r0, [r4, #0]
 80013b6:	2102      	movs	r1, #2
 80013b8:	f400 7040 	and.w	r0, r0, #768	; 0x300

            if(oh.ExtensionKind == ObjectHeader.ExtensionKinds.SyncBlock)
 80013bc:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
 80013c0:	d102      	bne.n	80013c8 <SyncBlockTable::GetHashCode#4789+0xb0>
 80013c2:	6820      	ldr	r0, [r4, #0]
 80013c4:	0a80      	lsrs	r0, r0, #10
 80013c6:	e002      	b.n	80013ce <SyncBlockTable::GetHashCode#4789+0xb6>
            {
                return oh.Payload;
            }

            return Instance.AssignSyncBlockSlow( obj );
 80013c8:	4620      	mov	r0, r4
 80013ca:	f002 fd9d 	bl	8003f08 <SyncBlockTable::AssignSyncBlockSlow#4792>

            //--//

            int idx = AssignSyncBlock( target );

            hashCode = Instance.GetHashCode( idx );
 80013ce:	f002 fe49 	bl	8004064 <SyncBlockTable::GetHashCode#4793>
 80013d2:	4605      	mov	r5, r0

            GC.KeepAlive( target );
 80013d4:	f002 fe5a 	bl	800408c <GC::KeepAlive#3959>
 80013d8:	4628      	mov	r0, r5
 80013da:	b004      	add	sp, #16
 80013dc:	bdb0      	pop	{r4, r5, r7, pc}
 80013de:	4812      	ldr	r0, [pc, #72]	; (8001428 <SyncBlockTable::GetHashCode#4789+0x110>)
                            //
                            // Check again, under lock, in case we had a race condition.
                            //
                            if(oh.ExtensionKind == ObjectHeader.ExtensionKinds.Empty)
                            {
                                hashCode = Instance.m_uniqueHashCode++;
 80013e0:	4912      	ldr	r1, [pc, #72]	; (800142c <SyncBlockTable::GetHashCode#4789+0x114>)
 80013e2:	4478      	add	r0, pc
 80013e4:	4408      	add	r0, r1
 80013e6:	6945      	ldr	r5, [r0, #20]
 80013e8:	1c69      	adds	r1, r5, #1

                                oh.UpdateExtension( ObjectHeader.ExtensionKinds.HashCode, hashCode );
 80013ea:	462a      	mov	r2, r5
 80013ec:	6141      	str	r1, [r0, #20]
 80013ee:	4620      	mov	r0, r4
 80013f0:	2101      	movs	r1, #1
 80013f2:	f001 fa16 	bl	8002822 <ObjectHeader::UpdateExtension#3298>

                                return hashCode;
                            }
                        }
                    }
 80013f6:	e9dd 0101 	ldrd	r0, r1, [sp, #4]
 80013fa:	f002 fd5d 	bl	8003eb8 <YieldLock::Release#5266>
 80013fe:	9802      	ldr	r0, [sp, #8]
 8001400:	2800      	cmp	r0, #0
 8001402:	d0e9      	beq.n	80013d8 <SyncBlockTable::GetHashCode#4789+0xc0>
 8001404:	9802      	ldr	r0, [sp, #8]
 8001406:	f000 fe45 	bl	8002094 <Thread::get_Priority#4211>
 800140a:	9903      	ldr	r1, [sp, #12]
 800140c:	4288      	cmp	r0, r1
 800140e:	d0e3      	beq.n	80013d8 <SyncBlockTable::GetHashCode#4789+0xc0>
 8001410:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001414:	f000 fe40 	bl	8002098 <Thread::set_Priority#4212>
 8001418:	e7de      	b.n	80013d8 <SyncBlockTable::GetHashCode#4789+0xc0>
 800141a:	2007      	movs	r0, #7
 800141c:	f7fe ff60 	bl	80002e0 <BugCheck::Raise#4938>
 8001420:	18000466 	.word	0x18000466
 8001424:	fffffe3c 	.word	0xfffffe3c
 8001428:	180003ce 	.word	0x180003ce
 800142c:	ffffeb3c 	.word	0xffffeb3c

08001430 <RuntimeType::get_TypeHandle#2456>:

        public override RuntimeTypeHandle TypeHandle
        {
            get
            {
                return m_handle;
 8001430:	6880      	ldr	r0, [r0, #8]
 8001432:	4770      	bx	lr

08001434 <RuntimeType::get_UnderlyingSystemType#2459>:
 8001434:	4770      	bx	lr

08001436 <RuntimeType::get_FullName#3271>:
        }

        public override String FullName
        {
            get
            {
 8001436:	b580      	push	{r7, lr}
                TS.TypeRepresentation td = m_handle.m_value.TypeInfo;
 8001438:	6880      	ldr	r0, [r0, #8]
 800143a:	6900      	ldr	r0, [r0, #16]

                return td.FullName;
 800143c:	f000 f802 	bl	8001444 <TypeRepresentation::get_FullName#15004>
 8001440:	bd80      	pop	{r7, pc}
 8001442:	46c0      	nop			; (mov r8, r8)

08001444 <TypeRepresentation::get_FullName#15004>:
        //--//

        public string FullName
        {
            get
            {
 8001444:	b5b0      	push	{r4, r5, r7, lr}
 8001446:	490c      	ldr	r1, [pc, #48]	; (8001478 <TypeRepresentation::get_FullName#15004+0x34>)
 8001448:	4604      	mov	r4, r0
                System.Text.StringBuilder sb = new System.Text.StringBuilder();
 800144a:	480c      	ldr	r0, [pc, #48]	; (800147c <TypeRepresentation::get_FullName#15004+0x38>)
 800144c:	4a0c      	ldr	r2, [pc, #48]	; (8001480 <TypeRepresentation::get_FullName#15004+0x3c>)
 800144e:	4479      	add	r1, pc
 8001450:	4408      	add	r0, r1
 8001452:	4411      	add	r1, r2
 8001454:	f7ff fa64 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8001458:	4605      	mov	r5, r0
 800145a:	f002 f8d9 	bl	8003610 <StringBuilder::.ctor#8786>
 800145e:	6860      	ldr	r0, [r4, #4]

                PrettyToString( sb, false, false );
 8001460:	4629      	mov	r1, r5
 8001462:	2200      	movs	r2, #0
 8001464:	2300      	movs	r3, #0
 8001466:	69c0      	ldr	r0, [r0, #28]
 8001468:	f8d0 c02c 	ldr.w	ip, [r0, #44]	; 0x2c
 800146c:	4620      	mov	r0, r4
 800146e:	47e0      	blx	ip

                return sb.ToString();
 8001470:	4628      	mov	r0, r5
 8001472:	f000 f9a1 	bl	80017b8 <StringBuilder::ToString#8798>
 8001476:	bdb0      	pop	{r4, r5, r7, pc}
 8001478:	18000362 	.word	0x18000362
 800147c:	ffffea64 	.word	0xffffea64
 8001480:	e8007c5c 	.word	0xe8007c5c

08001484 <RuntimeType::get_Name#3270>:
        }

        public override String Name
        {
            get
            {
 8001484:	b580      	push	{r7, lr}
                TS.TypeRepresentation td = m_handle.m_value.TypeInfo;
 8001486:	6880      	ldr	r0, [r0, #8]
 8001488:	6900      	ldr	r0, [r0, #16]

                return td.FullName;
 800148a:	f7ff ffdb 	bl	8001444 <TypeRepresentation::get_FullName#15004>
 800148e:	bd80      	pop	{r7, pc}

08001490 <String::EqualsHelper#2653>:

        public int Length
        {
            get
            {
                return m_stringLength;
 8001490:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8001494:	68cb      	ldr	r3, [r1, #12]

////    [ReliabilityContract( Consistency.WillNotCorruptState, Cer.MayFail )]
        private unsafe static bool EqualsHelper( String strA, String strB )
        {
            int length = strA.Length;
            if(length != strB.Length) return false;
 8001496:	459c      	cmp	ip, r3
 8001498:	bf1c      	itt	ne
 800149a:	2000      	movne	r0, #0
 800149c:	4770      	bxne	lr

            fixed(char* ap = strA) fixed(char* bp = strB)
 800149e:	2900      	cmp	r1, #0
 80014a0:	bf18      	it	ne
 80014a2:	3110      	addne	r1, #16
 80014a4:	2800      	cmp	r0, #0
 80014a6:	bf18      	it	ne
 80014a8:	3010      	addne	r0, #16
 80014aa:	e003      	b.n	80014b4 <String::EqualsHelper#2653+0x24>
                // the last compare will include the zero terminator.
                while(length > 0)
                {
                    if(*(int*)a != *(int*)b) break;

                    a += 2; b += 2; length -= 2;
 80014ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80014b0:	3104      	adds	r1, #4
 80014b2:	3004      	adds	r0, #4
                char* b = bp;

                // This depends on the fact that the String objects are always zero terminated and
                // that the terminating zero is not included in the length. For odd string sizes,
                // the last compare will include the zero terminator.
                while(length > 0)
 80014b4:	f1bc 0f01 	cmp.w	ip, #1
 80014b8:	db03      	blt.n	80014c2 <String::EqualsHelper#2653+0x32>
                {
                    if(*(int*)a != *(int*)b) break;
 80014ba:	680b      	ldr	r3, [r1, #0]
 80014bc:	6802      	ldr	r2, [r0, #0]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d0f4      	beq.n	80014ac <String::EqualsHelper#2653+0x1c>
 80014c2:	2000      	movs	r0, #0
 80014c4:	f1bc 0f01 	cmp.w	ip, #1
 80014c8:	bfb8      	it	lt
 80014ca:	2001      	movlt	r0, #1
 80014cc:	4770      	bx	lr
 80014ce:	46c0      	nop			; (mov r8, r8)

080014d0 <String::Equals#2655>:
        }

        // Determines whether two strings match.
////    [ReliabilityContract( Consistency.WillNotCorruptState, Cer.MayFail )]
        public override bool Equals( Object obj )
        {
 80014d0:	b510      	push	{r4, lr}
 80014d2:	4604      	mov	r4, r0
 80014d4:	4808      	ldr	r0, [pc, #32]	; (80014f8 <String::Equals#2655+0x28>)
            String str = obj as String;
 80014d6:	4a09      	ldr	r2, [pc, #36]	; (80014fc <String::Equals#2655+0x2c>)
 80014d8:	4478      	add	r0, pc
 80014da:	4402      	add	r2, r0
 80014dc:	4608      	mov	r0, r1
 80014de:	4611      	mov	r1, r2
 80014e0:	f7ff fb14 	bl	8000b0c <TypeSystemManager::CastToSealedTypeNoThrow#5244>
 80014e4:	4601      	mov	r1, r0
 80014e6:	b919      	cbnz	r1, 80014f0 <String::Equals#2655+0x20>
 80014e8:	2c00      	cmp	r4, #0
 80014ea:	bf1c      	itt	ne
 80014ec:	2000      	movne	r0, #0
 80014ee:	bd10      	popne	{r4, pc}
            {
                // exception will be thrown later for null this
                if(this != null) return false;
            }

            return EqualsHelper( this, str );
 80014f0:	4620      	mov	r0, r4
 80014f2:	f7ff ffcd 	bl	8001490 <String::EqualsHelper#2653>
 80014f6:	bd10      	pop	{r4, pc}
 80014f8:	180002d8 	.word	0x180002d8
 80014fc:	e80072ac 	.word	0xe80072ac

08001500 <String::Equals#2658>:
        }


        // Determines whether two Strings match.
        public static bool Equals( String a, String b )
        {
 8001500:	b580      	push	{r7, lr}
 8001502:	4602      	mov	r2, r0
            if((Object)a == (Object)b)
 8001504:	428a      	cmp	r2, r1
 8001506:	bf04      	itt	eq
 8001508:	2001      	moveq	r0, #1
 800150a:	bd80      	popeq	{r7, pc}
 800150c:	2000      	movs	r0, #0
            {
                return true;
            }

            if((Object)a == null || (Object)b == null)
 800150e:	2a00      	cmp	r2, #0
 8001510:	bf08      	it	eq
 8001512:	bd80      	popeq	{r7, pc}
 8001514:	2900      	cmp	r1, #0
            {
                return false;
            }

            return EqualsHelper( a, b );
 8001516:	bf1c      	itt	ne
 8001518:	4610      	movne	r0, r2
 800151a:	f7ff ffb9 	blne	8001490 <String::EqualsHelper#2653>
 800151e:	bd80      	pop	{r7, pc}

08001520 <String::ToCharArray#2665>:
        }

        // Returns a substring of this string as an array of characters.
        //
        unsafe public char[] ToCharArray( int startIndex, int length )
        {
 8001520:	b570      	push	{r4, r5, r6, lr}
 8001522:	4606      	mov	r6, r0
 8001524:	460c      	mov	r4, r1

        public int Length
        {
            get
            {
                return m_stringLength;
 8001526:	68f0      	ldr	r0, [r6, #12]
        // Returns a substring of this string as an array of characters.
        //
        unsafe public char[] ToCharArray( int startIndex, int length )
        {
            // Range check everything.
            if(startIndex < 0 || startIndex > Length || startIndex > Length - length)
 8001528:	f1b0 3fff 	cmp.w	r0, #4294967295
 800152c:	dd22      	ble.n	8001574 <String::ToCharArray#2665+0x54>

        public int Length
        {
            get
            {
                return m_stringLength;
 800152e:	68f0      	ldr	r0, [r6, #12]
        // Returns a substring of this string as an array of characters.
        //
        unsafe public char[] ToCharArray( int startIndex, int length )
        {
            // Range check everything.
            if(startIndex < 0 || startIndex > Length || startIndex > Length - length)
 8001530:	1b00      	subs	r0, r0, r4
 8001532:	2800      	cmp	r0, #0
 8001534:	db1e      	blt.n	8001574 <String::ToCharArray#2665+0x54>
#else
                throw new ArgumentOutOfRangeException();
#endif
            }

            if(length < 0)
 8001536:	f1b4 3fff 	cmp.w	r4, #4294967295
 800153a:	dd1e      	ble.n	800157a <String::ToCharArray#2665+0x5a>
 800153c:	4917      	ldr	r1, [pc, #92]	; (800159c <String::ToCharArray#2665+0x7c>)
#else
                throw new ArgumentOutOfRangeException();
#endif
            }

            char[] chars = new char[length];
 800153e:	4818      	ldr	r0, [pc, #96]	; (80015a0 <String::ToCharArray#2665+0x80>)
 8001540:	4a18      	ldr	r2, [pc, #96]	; (80015a4 <String::ToCharArray#2665+0x84>)
 8001542:	4479      	add	r1, pc
 8001544:	4408      	add	r0, r1
 8001546:	4411      	add	r1, r2
 8001548:	4622      	mov	r2, r4
 800154a:	f000 f833 	bl	80015b4 <DefaultTypeSystemManager::AllocateArray#5255>
 800154e:	4605      	mov	r5, r0
            if(length > 0)
 8001550:	2c01      	cmp	r4, #1
 8001552:	db0d      	blt.n	8001570 <String::ToCharArray#2665+0x50>
            {
                fixed(char* src = &this.m_firstChar)
                {
                    fixed(char* dest = chars)
 8001554:	2d00      	cmp	r5, #0
            }

            char[] chars = new char[length];
            if(length > 0)
            {
                fixed(char* src = &this.m_firstChar)
 8001556:	f106 0010 	add.w	r0, r6, #16
 800155a:	bf1c      	itt	ne
 800155c:	68a9      	ldrne	r1, [r5, #8]
                {
                    fixed(char* dest = chars)
 800155e:	2900      	cmpne	r1, #0
 8001560:	d101      	bne.n	8001566 <String::ToCharArray#2665+0x46>
 8001562:	2100      	movs	r1, #0
 8001564:	e001      	b.n	800156a <String::ToCharArray#2665+0x4a>
 8001566:	f105 010c 	add.w	r1, r5, #12
                    {
                        Buffer.InternalMemoryCopy( src + startIndex, dest, length );
 800156a:	4622      	mov	r2, r4
 800156c:	f000 f838 	bl	80015e0 <Buffer::InternalMemoryCopy#3900>
 8001570:	4628      	mov	r0, r5
 8001572:	bd70      	pop	{r4, r5, r6, pc}
 8001574:	480e      	ldr	r0, [pc, #56]	; (80015b0 <String::ToCharArray#2665+0x90>)
 8001576:	4478      	add	r0, pc
 8001578:	e001      	b.n	800157e <String::ToCharArray#2665+0x5e>
 800157a:	480b      	ldr	r0, [pc, #44]	; (80015a8 <String::ToCharArray#2665+0x88>)
 800157c:	4478      	add	r0, pc
            if(startIndex < 0 || startIndex > Length || startIndex > Length - length)
            {
#if EXCEPTION_STRINGS
                throw new ArgumentOutOfRangeException( "startIndex", Environment.GetResourceString( "ArgumentOutOfRange_Index" ) );
#else
                throw new ArgumentOutOfRangeException();
 800157e:	4908      	ldr	r1, [pc, #32]	; (80015a0 <String::ToCharArray#2665+0x80>)
 8001580:	180c      	adds	r4, r1, r0
 8001582:	490a      	ldr	r1, [pc, #40]	; (80015ac <String::ToCharArray#2665+0x8c>)
 8001584:	4401      	add	r1, r0
 8001586:	4620      	mov	r0, r4
 8001588:	f7ff f9ca 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 800158c:	4605      	mov	r5, r0
 800158e:	f000 f82f 	bl	80015f0 <ArgumentOutOfRangeException::.ctor#6367>
 8001592:	4620      	mov	r0, r4
 8001594:	4629      	mov	r1, r5
 8001596:	f7ff f9d9 	bl	800094c <TypeSystemManager::Throw#5247>
 800159a:	46c0      	nop			; (mov r8, r8)
 800159c:	1800026e 	.word	0x1800026e
 80015a0:	ffffea64 	.word	0xffffea64
 80015a4:	e800744c 	.word	0xe800744c
 80015a8:	18000234 	.word	0x18000234
 80015ac:	e8007b9c 	.word	0xe8007b9c
 80015b0:	1800023a 	.word	0x1800023a

080015b4 <DefaultTypeSystemManager::AllocateArray#5255>:
        }

        [NoInline]
        public override Array AllocateArray( TS.VTable vTable ,
                                             uint      length )
        {
 80015b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015b6:	b081      	sub	sp, #4
 80015b8:	460d      	mov	r5, r1
 80015ba:	4614      	mov	r4, r2
            uint    size = ComputeArraySize( vTable, length );
 80015bc:	4628      	mov	r0, r5
 80015be:	4621      	mov	r1, r4
 80015c0:	f003 fa7c 	bl	8004abc <DefaultTypeSystemManager::ComputeArraySize#5259>
 80015c4:	4606      	mov	r6, r0
 80015c6:	f003 fa59 	bl	8004a7c <DefaultTypeSystemManager::AllocateInner#5260>
 80015ca:	4631      	mov	r1, r6
 80015cc:	4607      	mov	r7, r0
 80015ce:	f015 f8c0 	bl	8016752 <__aeabi_memclr>
 80015d2:	2008      	movs	r0, #8
 80015d4:	e9c7 0500 	strd	r0, r5, [r7]
 80015d8:	60bc      	str	r4, [r7, #8]
 80015da:	4638      	mov	r0, r7
 80015dc:	b001      	add	sp, #4
 80015de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015e0 <Buffer::InternalMemoryCopy#3900>:

        [DisableNullChecks]
        internal unsafe static void InternalMemoryCopy( ushort* src   ,
                                                        ushort* dst   ,
                                                        int     count )
        {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	4603      	mov	r3, r0
 80015e4:	4608      	mov	r0, r1
#if LLVM
            InternalMemoryCopy((byte*)src, (byte*)dst, count * sizeof(ushort));
 80015e6:	0052      	lsls	r2, r2, #1
 80015e8:	4619      	mov	r1, r3
 80015ea:	f015 f8b5 	bl	8016758 <__aeabi_memcpy>
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <ArgumentOutOfRangeException::.ctor#6367>:
    {
        private Object m_actualValue;

        // Creates a new ArgumentOutOfRangeException with its message
        // string set to a default message explaining an argument was out of range.
        public ArgumentOutOfRangeException() : base( RangeMessage )
 80015f0:	b580      	push	{r7, lr}
 80015f2:	2100      	movs	r1, #0
 80015f4:	f001 fdda 	bl	80031ac <ArgumentException::.ctor#6356>
 80015f8:	bd80      	pop	{r7, pc}

080015fa <String::GetHashCode#2667>:

        // Gets a hash code for this string.  If strings A and B are such that A.Equals(B), then
        // they will return the same hash code.
////    [ReliabilityContract( Consistency.WillNotCorruptState, Cer.MayFail )]
        public override int GetHashCode()
        {
 80015fa:	b580      	push	{r7, lr}

        public int Length
        {
            get
            {
                return m_stringLength;
 80015fc:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8001600:	f241 5c05 	movw	ip, #5381	; 0x1505
////    [ReliabilityContract( Consistency.WillNotCorruptState, Cer.MayFail )]
        public override int GetHashCode()
        {
            unsafe
            {
                fixed(char* src = this)
 8001604:	2800      	cmp	r0, #0
 8001606:	f2c1 5c05 	movt	ip, #5381	; 0x1505
 800160a:	bf18      	it	ne
 800160c:	3010      	addne	r0, #16
 800160e:	4663      	mov	r3, ip
 8001610:	e009      	b.n	8001626 <String::GetHashCode#2667+0x2c>
                        if(len <= 2)
                        {
                            break;
                        }

                        hash2 = ((hash2 << 5) + hash2 + (hash2 >> 27)) ^ pint[1];
 8001612:	6842      	ldr	r2, [r0, #4]
 8001614:	eb0c 114c 	add.w	r1, ip, ip, lsl #5
                        pint += 2;
                        len  -= 4;
 8001618:	f1ae 0e04 	sub.w	lr, lr, #4
                        {
                            break;
                        }

                        hash2 = ((hash2 << 5) + hash2 + (hash2 >> 27)) ^ pint[1];
                        pint += 2;
 800161c:	3008      	adds	r0, #8
                        if(len <= 2)
                        {
                            break;
                        }

                        hash2 = ((hash2 << 5) + hash2 + (hash2 >> 27)) ^ pint[1];
 800161e:	eb01 61ec 	add.w	r1, r1, ip, asr #27
 8001622:	ea81 0c02 	eor.w	ip, r1, r2
#if !WIN64
                    // 32bit machines.
                    int* pint = (int *)src;
                    int  len  =        this.Length;

                    while(len > 0)
 8001626:	f1be 0f01 	cmp.w	lr, #1
                    {
                        hash1 = ((hash1 << 5) + hash1 + (hash1 >> 27)) ^ pint[0];
 800162a:	bfa1      	itttt	ge
 800162c:	eb03 1143 	addge.w	r1, r3, r3, lsl #5
 8001630:	eb01 61e3 	addge.w	r1, r1, r3, asr #27
 8001634:	6803      	ldrge	r3, [r0, #0]
 8001636:	404b      	eorge	r3, r1
                        if(len <= 2)
 8001638:	bfa8      	it	ge
 800163a:	f1be 0f02 	cmpge.w	lr, #2
 800163e:	dce8      	bgt.n	8001612 <String::GetHashCode#2667+0x18>
////                    // This is perfectly fine as long as you don't persist the
////                    // value from GetHashCode to disk or count on String A
////                    // hashing before string B.  Those are bugs in your code.
////                    hash1 ^= ThisAssembly.DailyBuildNumber;
////#endif
                    return hash1 + (hash2 * 1566083941);
 8001640:	f648 3065 	movw	r0, #35685	; 0x8b65
 8001644:	f6c5 5058 	movt	r0, #23896	; 0x5d58
 8001648:	fb0c 3000 	mla	r0, ip, r0, r3
 800164c:	bd80      	pop	{r7, pc}

0800164e <String::get_Capacity#2670>:
        // Used by StringBuilder
        internal int Capacity
        {
            get
            {
                return m_arrayLength - 1;
 800164e:	6880      	ldr	r0, [r0, #8]
 8001650:	3801      	subs	r0, #1
 8001652:	4770      	bx	lr

08001654 <DefaultTypeSystemManager::AllocateString#5257>:
        }

        [NoInline]
        public override String AllocateString( TS.VTable vTable ,
                                               int       length )
        {
 8001654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001656:	b081      	sub	sp, #4
 8001658:	460d      	mov	r5, r1
 800165a:	4614      	mov	r4, r2
            uint    size = ComputeArraySize( vTable, (uint)length );
 800165c:	4628      	mov	r0, r5
 800165e:	4621      	mov	r1, r4
 8001660:	f003 fa2c 	bl	8004abc <DefaultTypeSystemManager::ComputeArraySize#5259>
 8001664:	4606      	mov	r6, r0
 8001666:	f003 fa09 	bl	8004a7c <DefaultTypeSystemManager::AllocateInner#5260>
 800166a:	4631      	mov	r1, r6
 800166c:	4607      	mov	r7, r0
 800166e:	f015 f870 	bl	8016752 <__aeabi_memclr>
 8001672:	2008      	movs	r0, #8
 8001674:	e9c7 0500 	strd	r0, r5, [r7]
 8001678:	60bc      	str	r4, [r7, #8]
 800167a:	4638      	mov	r0, r7
 800167c:	b001      	add	sp, #4
 800167e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001680 <String::FillStringChecked#2694>:
////    [ResourceExposure( ResourceScope.None )]
        [MethodImpl( MethodImplOptions.InternalCall )]
        private extern static String FastAllocateString( int length );

        unsafe private static void FillStringChecked( String dest, int destPos, String src )
        {
 8001680:	b5b0      	push	{r4, r5, r7, lr}

        public int Length
        {
            get
            {
                return m_stringLength;
 8001682:	68c3      	ldr	r3, [r0, #12]

        unsafe private static void FillStringChecked( String dest, int destPos, String src )
        {
            int length = src.Length;

            if(length > dest.Length - destPos)
 8001684:	1a5d      	subs	r5, r3, r1

        public int Length
        {
            get
            {
                return m_stringLength;
 8001686:	68d3      	ldr	r3, [r2, #12]

        unsafe private static void FillStringChecked( String dest, int destPos, String src )
        {
            int length = src.Length;

            if(length > dest.Length - destPos)
 8001688:	42ab      	cmp	r3, r5
 800168a:	dc09      	bgt.n	80016a0 <String::FillStringChecked#2694+0x20>
            {
                throw new IndexOutOfRangeException();
            }

            fixed(char* pDest = &dest.m_firstChar)
 800168c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
            {
                fixed(char* pSrc = &src.m_firstChar)
                {
                    Buffer.InternalMemoryCopy( pSrc, pDest + destPos, length );
 8001690:	f100 0110 	add.w	r1, r0, #16
                throw new IndexOutOfRangeException();
            }

            fixed(char* pDest = &dest.m_firstChar)
            {
                fixed(char* pSrc = &src.m_firstChar)
 8001694:	f102 0010 	add.w	r0, r2, #16
                {
                    Buffer.InternalMemoryCopy( pSrc, pDest + destPos, length );
 8001698:	461a      	mov	r2, r3
 800169a:	f7ff ffa1 	bl	80015e0 <Buffer::InternalMemoryCopy#3900>
 800169e:	bdb0      	pop	{r4, r5, r7, pc}
 80016a0:	4807      	ldr	r0, [pc, #28]	; (80016c0 <String::FillStringChecked#2694+0x40>)
        {
            int length = src.Length;

            if(length > dest.Length - destPos)
            {
                throw new IndexOutOfRangeException();
 80016a2:	4908      	ldr	r1, [pc, #32]	; (80016c4 <String::FillStringChecked#2694+0x44>)
 80016a4:	4478      	add	r0, pc
 80016a6:	180c      	adds	r4, r1, r0
 80016a8:	4907      	ldr	r1, [pc, #28]	; (80016c8 <String::FillStringChecked#2694+0x48>)
 80016aa:	4401      	add	r1, r0
 80016ac:	4620      	mov	r0, r4
 80016ae:	f7ff f937 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 80016b2:	4605      	mov	r5, r0
 80016b4:	f7ff f990 	bl	80009d8 <IndexOutOfRangeException::.ctor#7410>
 80016b8:	4620      	mov	r0, r4
 80016ba:	4629      	mov	r1, r5
 80016bc:	f7ff f946 	bl	800094c <TypeSystemManager::Throw#5247>
 80016c0:	1800010c 	.word	0x1800010c
 80016c4:	ffffea64 	.word	0xffffea64
 80016c8:	e80076dc 	.word	0xe80076dc

080016cc <String::.ctor#4055>:
        // Constructor Methods
        //

        [DiscardTargetImplementation]
        [TS.WellKnownMethod( "StringImpl_ctor_charArray_int_int" )]
        public unsafe StringImpl( char[] value      ,
 80016cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ce:	b081      	sub	sp, #4
 80016d0:	461c      	mov	r4, r3
 80016d2:	4616      	mov	r6, r2
 80016d4:	460f      	mov	r7, r1
 80016d6:	4605      	mov	r5, r0
                                  int    length     )
        {
////        BCLDebug.Assert( startIndex >= 0 && startIndex <= this.Length         , "StartIndex is out of range!" );
////        BCLDebug.Assert( length     >= 0 && startIndex <= this.Length - length, "length is out of range!"     );

            if(length     < 0 ||               length  > m_stringLength ||
 80016d8:	f1b4 3fff 	cmp.w	r4, #4294967295
 80016dc:	dd08      	ble.n	80016f0 <String::.ctor#4055+0x24>
 80016de:	68e8      	ldr	r0, [r5, #12]
 80016e0:	4284      	cmp	r4, r0
 80016e2:	dc05      	bgt.n	80016f0 <String::.ctor#4055+0x24>
 80016e4:	2e00      	cmp	r6, #0
 80016e6:	db03      	blt.n	80016f0 <String::.ctor#4055+0x24>
 80016e8:	68b9      	ldr	r1, [r7, #8]
 80016ea:	1930      	adds	r0, r6, r4
 80016ec:	4288      	cmp	r0, r1
 80016ee:	dd01      	ble.n	80016f4 <String::.ctor#4055+0x28>
               startIndex < 0 || (startIndex + length) > value.Length   )
            {
                ThreadImpl.ThrowIndexOutOfRangeException();
 80016f0:	f000 f80c 	bl	800170c <Thread::ThrowIndexOutOfRangeException#4205>
            }

            if(length > 0)
 80016f4:	2c01      	cmp	r4, #1
 80016f6:	db07      	blt.n	8001708 <String::.ctor#4055+0x3c>
            {
                fixed(char* dest = &this.m_firstChar)
                {
                    fixed(char* src = &value[startIndex])
 80016f8:	eb07 0046 	add.w	r0, r7, r6, lsl #1
                ThreadImpl.ThrowIndexOutOfRangeException();
            }

            if(length > 0)
            {
                fixed(char* dest = &this.m_firstChar)
 80016fc:	f105 0110 	add.w	r1, r5, #16
                {
                    fixed(char* src = &value[startIndex])
 8001700:	4622      	mov	r2, r4
 8001702:	300c      	adds	r0, #12
 8001704:	f7ff ff6c 	bl	80015e0 <Buffer::InternalMemoryCopy#3900>
 8001708:	b001      	add	sp, #4
 800170a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800170c <Thread::ThrowIndexOutOfRangeException#4205>:
        }

        [NoInline]
        [TS.WellKnownMethod( "ThreadImpl_ThrowIndexOutOfRangeException" )]
        internal static void ThrowIndexOutOfRangeException()
        {
 800170c:	b5b0      	push	{r4, r5, r7, lr}
 800170e:	4808      	ldr	r0, [pc, #32]	; (8001730 <Thread::ThrowIndexOutOfRangeException#4205+0x24>)
            throw new IndexOutOfRangeException();
 8001710:	4908      	ldr	r1, [pc, #32]	; (8001734 <Thread::ThrowIndexOutOfRangeException#4205+0x28>)
 8001712:	4478      	add	r0, pc
 8001714:	180c      	adds	r4, r1, r0
 8001716:	4908      	ldr	r1, [pc, #32]	; (8001738 <Thread::ThrowIndexOutOfRangeException#4205+0x2c>)
 8001718:	4401      	add	r1, r0
 800171a:	4620      	mov	r0, r4
 800171c:	f7ff f900 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8001720:	4605      	mov	r5, r0
 8001722:	f7ff f959 	bl	80009d8 <IndexOutOfRangeException::.ctor#7410>
 8001726:	4620      	mov	r0, r4
 8001728:	4629      	mov	r1, r5
 800172a:	f7ff f90f 	bl	800094c <TypeSystemManager::Throw#5247>
 800172e:	46c0      	nop			; (mov r8, r8)
 8001730:	1800009e 	.word	0x1800009e
 8001734:	ffffea64 	.word	0xffffea64
 8001738:	e80076dc 	.word	0xe80076dc

0800173c <String::ToString#2733>:
 800173c:	4770      	bx	lr
 800173e:	46c0      	nop			; (mov r8, r8)

08001740 <String::Format#2743>:
        {
            return Format( null, format, args );
        }

        public static String Format( IFormatProvider provider, String format, params Object[] args )
        {
 8001740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001744:	4605      	mov	r5, r0
 8001746:	460c      	mov	r4, r1
            if(format == null || args == null)
 8001748:	2d00      	cmp	r5, #0
 800174a:	bf18      	it	ne
 800174c:	2c00      	cmpne	r4, #0
 800174e:	d019      	beq.n	8001784 <String::Format#2743+0x44>
 8001750:	4914      	ldr	r1, [pc, #80]	; (80017a4 <String::Format#2743+0x64>)
#else
                throw new ArgumentNullException();
#endif
            }
    
            StringBuilder sb = new StringBuilder( format.Length + args.Length * 8 );
 8001752:	4815      	ldr	r0, [pc, #84]	; (80017a8 <String::Format#2743+0x68>)
 8001754:	4a15      	ldr	r2, [pc, #84]	; (80017ac <String::Format#2743+0x6c>)

        public int Length
        {
            get
            {
                return m_stringLength;
 8001756:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800175a:	68ef      	ldr	r7, [r5, #12]
 800175c:	4479      	add	r1, pc
#else
                throw new ArgumentNullException();
#endif
            }
    
            StringBuilder sb = new StringBuilder( format.Length + args.Length * 8 );
 800175e:	4408      	add	r0, r1
 8001760:	4411      	add	r1, r2
 8001762:	f7ff f8dd 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8001766:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
 800176a:	4606      	mov	r6, r0
 800176c:	f000 f844 	bl	80017f8 <StringBuilder::.ctor#8787>
    
            sb.AppendFormat( provider, format, args );
 8001770:	4630      	mov	r0, r6
 8001772:	4629      	mov	r1, r5
 8001774:	4622      	mov	r2, r4
 8001776:	f000 f84f 	bl	8001818 <StringBuilder::AppendFormat#8854>
    
            return sb.ToString();
 800177a:	4630      	mov	r0, r6
 800177c:	f000 f81c 	bl	80017b8 <StringBuilder::ToString#8798>
 8001780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001784:	480a      	ldr	r0, [pc, #40]	; (80017b0 <String::Format#2743+0x70>)
            if(format == null || args == null)
            {
#if EXCEPTION_STRINGS
                throw new ArgumentNullException( (format == null) ? "format" : "args" );
#else
                throw new ArgumentNullException();
 8001786:	4908      	ldr	r1, [pc, #32]	; (80017a8 <String::Format#2743+0x68>)
 8001788:	4478      	add	r0, pc
 800178a:	180c      	adds	r4, r1, r0
 800178c:	4909      	ldr	r1, [pc, #36]	; (80017b4 <String::Format#2743+0x74>)
 800178e:	4401      	add	r1, r0
 8001790:	4620      	mov	r0, r4
 8001792:	f7ff f8c5 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8001796:	4605      	mov	r5, r0
 8001798:	f7ff f8d3 	bl	8000942 <ArgumentNullException::.ctor#6362>
 800179c:	4620      	mov	r0, r4
 800179e:	4629      	mov	r1, r5
 80017a0:	f7ff f8d4 	bl	800094c <TypeSystemManager::Throw#5247>
 80017a4:	18000054 	.word	0x18000054
 80017a8:	ffffea64 	.word	0xffffea64
 80017ac:	e8007c5c 	.word	0xe8007c5c
 80017b0:	18000028 	.word	0x18000028
 80017b4:	e80075bc 	.word	0xe80075bc

080017b8 <StringBuilder::ToString#8798>:
            ReplaceString( th, newString );
            return newString.Capacity;
        }

        public override String ToString()
        {
 80017b8:	b5b0      	push	{r4, r5, r7, lr}
 80017ba:	4605      	mov	r5, r0
 80017bc:	480c      	ldr	r0, [pc, #48]	; (80017f0 <StringBuilder::ToString#8798+0x38>)
            // If these reads get re-ordered then it is possible to get a currentString owned by some other 
            // (mutating) thread and yet think, according to currentThread, that such was not the case.
            // This is acheived by marking m_StringValue as volatile. 
            //
            String currentString = m_StringValue;
            Thread currentThread = m_currentThread;
 80017be:	490d      	ldr	r1, [pc, #52]	; (80017f4 <StringBuilder::ToString#8798+0x3c>)
            // We assume that their read of m_currentThread will always occur after read of m_StringValue.  
            // If these reads get re-ordered then it is possible to get a currentString owned by some other 
            // (mutating) thread and yet think, according to currentThread, that such was not the case.
            // This is acheived by marking m_StringValue as volatile. 
            //
            String currentString = m_StringValue;
 80017c0:	692c      	ldr	r4, [r5, #16]
 80017c2:	4478      	add	r0, pc
            Thread currentThread = m_currentThread;
 80017c4:	4408      	add	r0, r1
 80017c6:	68a9      	ldr	r1, [r5, #8]
 80017c8:	f8d0 00bc 	ldr.w	r0, [r0, #188]	; 0xbc
            // A thread interleaving happens at this point.
            // (4) Thread T2 resumes execution.  T2 reads m_currentThread and sees that NOBODY is the registered owner
            //  Assuming its currentString is not wasting excessive space, T2 will return the same string that thread T1 is 
            //  in the middle of mutating.  
            //
            if(currentThread != Thread.CurrentThread)
 80017cc:	4281      	cmp	r1, r0
 80017ce:	d104      	bne.n	80017da <StringBuilder::ToString#8798+0x22>
            {
                return String.InternalCopy( currentString );
            }

            if((2 * currentString.Length) < currentString.ArrayLength)
 80017d0:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 80017d4:	0049      	lsls	r1, r1, #1
 80017d6:	4281      	cmp	r1, r0
 80017d8:	da03      	bge.n	80017e2 <StringBuilder::ToString#8798+0x2a>
            //  Assuming its currentString is not wasting excessive space, T2 will return the same string that thread T1 is 
            //  in the middle of mutating.  
            //
            if(currentThread != Thread.CurrentThread)
            {
                return String.InternalCopy( currentString );
 80017da:	4620      	mov	r0, r4
 80017dc:	f000 f9f2 	bl	8001bc4 <String::InternalCopy#2745>
 80017e0:	bdb0      	pop	{r4, r5, r7, pc}
            if((2 * currentString.Length) < currentString.ArrayLength)
            {
                return String.InternalCopy( currentString );
            }

            currentString.ClearPostNullChar();
 80017e2:	4620      	mov	r0, r4
 80017e4:	f000 fab5 	bl	8001d52 <String::ClearPostNullChar#2786>
 80017e8:	2000      	movs	r0, #0
 80017ea:	60a8      	str	r0, [r5, #8]
 80017ec:	4620      	mov	r0, r4
 80017ee:	bdb0      	pop	{r4, r5, r7, pc}
 80017f0:	17ffffee 	.word	0x17ffffee
 80017f4:	fffffe3c 	.word	0xfffffe3c

080017f8 <StringBuilder::.ctor#8787>:
        }

        // Create a new empty string builder (i.e., it represents String.Empty)
        // with the specified capacity.
        public StringBuilder( int capacity )
            : this( String.Empty, capacity )
 80017f8:	b580      	push	{r7, lr}
 80017fa:	460a      	mov	r2, r1
 80017fc:	4904      	ldr	r1, [pc, #16]	; (8001810 <StringBuilder::.ctor#8787+0x18>)
 80017fe:	4b05      	ldr	r3, [pc, #20]	; (8001814 <StringBuilder::.ctor#8787+0x1c>)
 8001800:	4479      	add	r1, pc
 8001802:	4419      	add	r1, r3
 8001804:	f8d1 10a0 	ldr.w	r1, [r1, #160]	; 0xa0
 8001808:	f005 f868 	bl	80068dc <StringBuilder::.ctor#8789>
 800180c:	bd80      	pop	{r7, pc}
 800180e:	46c0      	nop			; (mov r8, r8)
 8001810:	17ffffb0 	.word	0x17ffffb0
 8001814:	fffffe3c 	.word	0xfffffe3c

08001818 <StringBuilder::AppendFormat#8854>:
            throw new FormatException();
#endif
        }

        public StringBuilder AppendFormat( IFormatProvider provider, String format, params Object[] args )
        {
 8001818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800181c:	b089      	sub	sp, #36	; 0x24
            if(format == null || args == null)
 800181e:	2900      	cmp	r1, #0
 8001820:	e9cd 0206 	strd	r0, r2, [sp, #24]
 8001824:	bf18      	it	ne
 8001826:	2a00      	cmpne	r2, #0
 8001828:	f000 81af 	beq.w	8001b8a <StringBuilder::AppendFormat#8854+0x372>
 800182c:	9207      	str	r2, [sp, #28]
 800182e:	68ca      	ldr	r2, [r1, #12]
                throw new ArgumentNullException( (format == null) ? "format" : "args" );
#else
                throw new ArgumentNullException();
#endif
            }
            char[] chars = format.ToCharArray( 0, format.Length );
 8001830:	4608      	mov	r0, r1
 8001832:	4611      	mov	r1, r2
 8001834:	f7ff fe74 	bl	8001520 <String::ToCharArray#2665>
 8001838:	4606      	mov	r6, r0

                if(s == null)
                {
                    if(arg is IFormattable)
                    {
                        s = ((IFormattable)arg).ToString( fmt, provider );
 800183a:	49db      	ldr	r1, [pc, #876]	; (8001ba8 <StringBuilder::AppendFormat#8854+0x390>)
 800183c:	f04f 0900 	mov.w	r9, #0
 8001840:	2700      	movs	r7, #0
#else
                throw new ArgumentNullException();
#endif
            }
            char[] chars = format.ToCharArray( 0, format.Length );
            int pos = 0;
 8001842:	f8d6 8008 	ldr.w	r8, [r6, #8]
                cf = (ICustomFormatter)provider.GetFormat( typeof( ICustomFormatter ) );
            }

            while(true)
            {
                int p = pos;
 8001846:	f1a8 0001 	sub.w	r0, r8, #1
 800184a:	f1a8 0b02 	sub.w	fp, r8, #2
 800184e:	9008      	str	r0, [sp, #32]
 8001850:	48d4      	ldr	r0, [pc, #848]	; (8001ba4 <StringBuilder::AppendFormat#8854+0x38c>)
 8001852:	f8cd b00c 	str.w	fp, [sp, #12]
 8001856:	4478      	add	r0, pc

                if(s == null)
                {
                    if(arg is IFormattable)
                    {
                        s = ((IFormattable)arg).ToString( fmt, provider );
 8001858:	4401      	add	r1, r0
                    {
                        s = arg.ToString();
                    }
                }

                if(s == null) s = String.Empty;
 800185a:	9100      	str	r1, [sp, #0]
 800185c:	49d3      	ldr	r1, [pc, #844]	; (8001bac <StringBuilder::AppendFormat#8854+0x394>)
 800185e:	4408      	add	r0, r1
 8001860:	9002      	str	r0, [sp, #8]
 8001862:	e003      	b.n	800186c <StringBuilder::AppendFormat#8854+0x54>
                int pad = width - s.Length;
                if(!leftJustify && pad > 0) Append( ' ', pad );
                Append( s );
                if(leftJustify && pad > 0) Append( ' ', pad );
 8001864:	9806      	ldr	r0, [sp, #24]
 8001866:	4651      	mov	r1, sl
 8001868:	f005 f8bc 	bl	80069e4 <StringBuilder::Append#8804>
 800186c:	463c      	mov	r4, r7
 800186e:	463d      	mov	r5, r7
 8001870:	e004      	b.n	800187c <StringBuilder::AppendFormat#8854+0x64>
 8001872:	eb06 0044 	add.w	r0, r6, r4, lsl #1
                            pos--;
                            break;
                        }
                    }

                    chars[i++] = ch;
 8001876:	3401      	adds	r4, #1
 8001878:	f8a0 900c 	strh.w	r9, [r0, #12]

            while(true)
            {
                int p = pos;
                int i = pos;
                while(pos < len)
 800187c:	4545      	cmp	r5, r8
 800187e:	da1f      	bge.n	80018c0 <StringBuilder::AppendFormat#8854+0xa8>
                {
                    ch = chars[pos];
 8001880:	eb06 0045 	add.w	r0, r6, r5, lsl #1

                    pos++;
                    if(ch == '}')
                    {
                        if(pos < len && chars[pos] == '}') // Treat as escape character for }}
 8001884:	3501      	adds	r5, #1
            {
                int p = pos;
                int i = pos;
                while(pos < len)
                {
                    ch = chars[pos];
 8001886:	f8b0 900c 	ldrh.w	r9, [r0, #12]

                    pos++;
                    if(ch == '}')
 800188a:	f1b9 0f7d 	cmp.w	r9, #125	; 0x7d
 800188e:	d10a      	bne.n	80018a6 <StringBuilder::AppendFormat#8854+0x8e>
                    {
                        if(pos < len && chars[pos] == '}') // Treat as escape character for }}
 8001890:	4545      	cmp	r5, r8
 8001892:	da06      	bge.n	80018a2 <StringBuilder::AppendFormat#8854+0x8a>
 8001894:	eb06 0045 	add.w	r0, r6, r5, lsl #1
 8001898:	8980      	ldrh	r0, [r0, #12]
 800189a:	287d      	cmp	r0, #125	; 0x7d
 800189c:	d101      	bne.n	80018a2 <StringBuilder::AppendFormat#8854+0x8a>
                            pos++;
 800189e:	3501      	adds	r5, #1
 80018a0:	e001      	b.n	80018a6 <StringBuilder::AppendFormat#8854+0x8e>
                        else
                            FormatError();
 80018a2:	f005 f9d5 	bl	8006c50 <StringBuilder::FormatError#8853>
                    }

                    if(ch == '{')
 80018a6:	f1b9 0f7b 	cmp.w	r9, #123	; 0x7b
 80018aa:	d1e2      	bne.n	8001872 <StringBuilder::AppendFormat#8854+0x5a>
                    {
                        if(pos < len && chars[pos] == '{') // Treat as escape character for {{
 80018ac:	4545      	cmp	r5, r8
 80018ae:	da06      	bge.n	80018be <StringBuilder::AppendFormat#8854+0xa6>
 80018b0:	eb06 0045 	add.w	r0, r6, r5, lsl #1
 80018b4:	8980      	ldrh	r0, [r0, #12]
 80018b6:	287b      	cmp	r0, #123	; 0x7b
 80018b8:	d101      	bne.n	80018be <StringBuilder::AppendFormat#8854+0xa6>
                            pos++;
 80018ba:	3501      	adds	r5, #1
 80018bc:	e7d9      	b.n	8001872 <StringBuilder::AppendFormat#8854+0x5a>
                        else
                        {
                            pos--;
 80018be:	3d01      	subs	r5, #1
                        }
                    }

                    chars[i++] = ch;
                }
                if(i > p) Append( chars, p, i - p );
 80018c0:	42bc      	cmp	r4, r7
 80018c2:	dd05      	ble.n	80018d0 <StringBuilder::AppendFormat#8854+0xb8>
 80018c4:	9806      	ldr	r0, [sp, #24]
 80018c6:	1be3      	subs	r3, r4, r7
 80018c8:	4631      	mov	r1, r6
 80018ca:	463a      	mov	r2, r7
 80018cc:	f005 f938 	bl	8006b40 <StringBuilder::Append#8805>
                if(pos == len) break;
 80018d0:	4545      	cmp	r5, r8
 80018d2:	f000 8146 	beq.w	8001b62 <StringBuilder::AppendFormat#8854+0x34a>
 80018d6:	f8dd a01c 	ldr.w	sl, [sp, #28]
                pos++;
                if(pos == len || (ch = chars[pos]) < '0' || ch > '9') FormatError();
 80018da:	1c68      	adds	r0, r5, #1
 80018dc:	4540      	cmp	r0, r8
 80018de:	d009      	beq.n	80018f4 <StringBuilder::AppendFormat#8854+0xdc>
 80018e0:	eb06 0040 	add.w	r0, r6, r0, lsl #1
 80018e4:	f8b0 900c 	ldrh.w	r9, [r0, #12]
 80018e8:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 80018ec:	db02      	blt.n	80018f4 <StringBuilder::AppendFormat#8854+0xdc>
 80018ee:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80018f2:	dd01      	ble.n	80018f8 <StringBuilder::AppendFormat#8854+0xe0>
 80018f4:	f005 f9ac 	bl	8006c50 <StringBuilder::FormatError#8853>
 80018f8:	2400      	movs	r4, #0
 80018fa:	462f      	mov	r7, r5
                int index = 0;
                do
                {
                    index = index * 10 + ch - '0';
 80018fc:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 8001900:	fa0f f189 	sxth.w	r1, r9
                    pos++;
                    if(pos == len) FormatError();
 8001904:	45bb      	cmp	fp, r7
                pos++;
                if(pos == len || (ch = chars[pos]) < '0' || ch > '9') FormatError();
                int index = 0;
                do
                {
                    index = index * 10 + ch - '0';
 8001906:	eb01 0440 	add.w	r4, r1, r0, lsl #1
                    pos++;
                    if(pos == len) FormatError();
 800190a:	bf08      	it	eq
 800190c:	f005 f9a0 	bleq	8006c50 <StringBuilder::FormatError#8853>
                    ch = chars[pos];
                } while(ch >= '0' && ch <= '9' && index < 1000000);
 8001910:	eb06 0047 	add.w	r0, r6, r7, lsl #1
 8001914:	2100      	movs	r1, #0
                pos++;
                if(pos == len || (ch = chars[pos]) < '0' || ch > '9') FormatError();
                int index = 0;
                do
                {
                    index = index * 10 + ch - '0';
 8001916:	3c30      	subs	r4, #48	; 0x30
                    pos++;
                    if(pos == len) FormatError();
                    ch = chars[pos];
                } while(ch >= '0' && ch <= '9' && index < 1000000);
 8001918:	f8b0 9010 	ldrh.w	r9, [r0, #16]
 800191c:	2000      	movs	r0, #0
 800191e:	f1b9 0f3a 	cmp.w	r9, #58	; 0x3a
 8001922:	bfb8      	it	lt
 8001924:	2001      	movlt	r0, #1
 8001926:	f1b9 0f2f 	cmp.w	r9, #47	; 0x2f
 800192a:	bfc8      	it	gt
 800192c:	2101      	movgt	r1, #1
 800192e:	4201      	tst	r1, r0
 8001930:	d006      	beq.n	8001940 <StringBuilder::AppendFormat#8854+0x128>
 8001932:	f244 2040 	movw	r0, #16960	; 0x4240
 8001936:	1c7d      	adds	r5, r7, #1
 8001938:	f2c0 000f 	movt	r0, #15
 800193c:	4284      	cmp	r4, r0
 800193e:	dbdc      	blt.n	80018fa <StringBuilder::AppendFormat#8854+0xe2>
 8001940:	f8da 0008 	ldr.w	r0, [sl, #8]
                if(index >= args.Length) 
 8001944:	4284      	cmp	r4, r0
 8001946:	f280 8110 	bge.w	8001b6a <StringBuilder::AppendFormat#8854+0x352>
                {
                    index = index * 10 + ch - '0';
                    pos++;
                    if(pos == len) FormatError();
                    ch = chars[pos];
                } while(ch >= '0' && ch <= '9' && index < 1000000);
 800194a:	f107 0b02 	add.w	fp, r7, #2
 800194e:	e001      	b.n	8001954 <StringBuilder::AppendFormat#8854+0x13c>
#if EXCEPTION_STRINGS
                    throw new FormatException( Environment.GetResourceString( "Format_IndexOutOfRange" ) );
#else
                    throw new FormatException();
#endif
                while(pos < len && (ch = chars[pos]) == ' ') pos++;
 8001950:	f10b 0b01 	add.w	fp, fp, #1
 8001954:	45c3      	cmp	fp, r8
 8001956:	da06      	bge.n	8001966 <StringBuilder::AppendFormat#8854+0x14e>
 8001958:	eb06 004b 	add.w	r0, r6, fp, lsl #1
 800195c:	f8b0 900c 	ldrh.w	r9, [r0, #12]
 8001960:	f1b9 0f20 	cmp.w	r9, #32
 8001964:	d0f4      	beq.n	8001950 <StringBuilder::AppendFormat#8854+0x138>
                bool leftJustify = false;
                int width = 0;
                if(ch == ',')
 8001966:	fa1f f089 	uxth.w	r0, r9
 800196a:	282c      	cmp	r0, #44	; 0x2c
 800196c:	d120      	bne.n	80019b0 <StringBuilder::AppendFormat#8854+0x198>
                {
                    pos++;
 800196e:	f10b 0007 	add.w	r0, fp, #7
 8001972:	e000      	b.n	8001976 <StringBuilder::AppendFormat#8854+0x15e>
                    while(pos < len && chars[pos] == ' ') pos++;
 8001974:	3001      	adds	r0, #1
 8001976:	1f85      	subs	r5, r0, #6
 8001978:	4545      	cmp	r5, r8
 800197a:	da03      	bge.n	8001984 <StringBuilder::AppendFormat#8854+0x16c>
 800197c:	f836 1010 	ldrh.w	r1, [r6, r0, lsl #1]
 8001980:	2920      	cmp	r1, #32
 8001982:	d0f7      	beq.n	8001974 <StringBuilder::AppendFormat#8854+0x15c>

                    if(pos == len) FormatError();
 8001984:	4545      	cmp	r5, r8
 8001986:	bf08      	it	eq
 8001988:	f005 f962 	bleq	8006c50 <StringBuilder::FormatError#8853>
                    ch = chars[pos];
 800198c:	eb06 0045 	add.w	r0, r6, r5, lsl #1
 8001990:	f8b0 900c 	ldrh.w	r9, [r0, #12]
                    if(ch == '-')
 8001994:	f1b9 0f2d 	cmp.w	r9, #45	; 0x2d
 8001998:	d10e      	bne.n	80019b8 <StringBuilder::AppendFormat#8854+0x1a0>
                    {
                        leftJustify = true;
                        pos++;
 800199a:	3501      	adds	r5, #1
                        if(pos == len) FormatError();
 800199c:	4545      	cmp	r5, r8
 800199e:	bf08      	it	eq
 80019a0:	f005 f956 	bleq	8006c50 <StringBuilder::FormatError#8853>
                        ch = chars[pos];
 80019a4:	eb06 0045 	add.w	r0, r6, r5, lsl #1
 80019a8:	f8b0 900c 	ldrh.w	r9, [r0, #12]
 80019ac:	2001      	movs	r0, #1
 80019ae:	e004      	b.n	80019ba <StringBuilder::AppendFormat#8854+0x1a2>
 80019b0:	2000      	movs	r0, #0
 80019b2:	2700      	movs	r7, #0
 80019b4:	9005      	str	r0, [sp, #20]
 80019b6:	e036      	b.n	8001a26 <StringBuilder::AppendFormat#8854+0x20e>
 80019b8:	2000      	movs	r0, #0
 80019ba:	9005      	str	r0, [sp, #20]
                    }
                    if(ch < '0' || ch > '9') FormatError();
 80019bc:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 80019c0:	db05      	blt.n	80019ce <StringBuilder::AppendFormat#8854+0x1b6>
 80019c2:	f1b9 0f3a 	cmp.w	r9, #58	; 0x3a
 80019c6:	bfa8      	it	ge
 80019c8:	f005 f942 	blge	8006c50 <StringBuilder::FormatError#8853>
 80019cc:	e001      	b.n	80019d2 <StringBuilder::AppendFormat#8854+0x1ba>
 80019ce:	f005 f93f 	bl	8006c50 <StringBuilder::FormatError#8853>
 80019d2:	2700      	movs	r7, #0
                    do
                    {
                        width = width * 10 + ch - '0';
 80019d4:	eb07 0087 	add.w	r0, r7, r7, lsl #2
 80019d8:	fa0f f189 	sxth.w	r1, r9
                        pos++;
 80019dc:	f105 0b01 	add.w	fp, r5, #1
                        ch = chars[pos];
                    }
                    if(ch < '0' || ch > '9') FormatError();
                    do
                    {
                        width = width * 10 + ch - '0';
 80019e0:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80019e4:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
                        pos++;
                        if(pos == len) FormatError();
 80019e8:	9808      	ldr	r0, [sp, #32]
 80019ea:	42a8      	cmp	r0, r5
 80019ec:	bf08      	it	eq
 80019ee:	f005 f92f 	bleq	8006c50 <StringBuilder::FormatError#8853>
                        ch = chars[pos];
                    } while(ch >= '0' && ch <= '9' && width < 1000000);
 80019f2:	eb06 0045 	add.w	r0, r6, r5, lsl #1
 80019f6:	2100      	movs	r1, #0
 80019f8:	f8b0 900e 	ldrh.w	r9, [r0, #14]
 80019fc:	2000      	movs	r0, #0
 80019fe:	f1b9 0f3a 	cmp.w	r9, #58	; 0x3a
 8001a02:	bfb8      	it	lt
 8001a04:	2001      	movlt	r0, #1
 8001a06:	f1b9 0f2f 	cmp.w	r9, #47	; 0x2f
 8001a0a:	bfc8      	it	gt
 8001a0c:	2101      	movgt	r1, #1
 8001a0e:	4201      	tst	r1, r0
 8001a10:	d009      	beq.n	8001a26 <StringBuilder::AppendFormat#8854+0x20e>
 8001a12:	f244 2040 	movw	r0, #16960	; 0x4240
 8001a16:	465d      	mov	r5, fp
 8001a18:	f2c0 000f 	movt	r0, #15
 8001a1c:	4287      	cmp	r7, r0
 8001a1e:	dbd9      	blt.n	80019d4 <StringBuilder::AppendFormat#8854+0x1bc>
 8001a20:	e001      	b.n	8001a26 <StringBuilder::AppendFormat#8854+0x20e>
                }

                while(pos < len && (ch = chars[pos]) == ' ') pos++;
 8001a22:	f10b 0b01 	add.w	fp, fp, #1
 8001a26:	45c3      	cmp	fp, r8
 8001a28:	da06      	bge.n	8001a38 <StringBuilder::AppendFormat#8854+0x220>
 8001a2a:	eb06 004b 	add.w	r0, r6, fp, lsl #1
 8001a2e:	f8b0 900c 	ldrh.w	r9, [r0, #12]
 8001a32:	f1b9 0f20 	cmp.w	r9, #32
 8001a36:	d0f4      	beq.n	8001a22 <StringBuilder::AppendFormat#8854+0x20a>
                Object arg = args[index];
 8001a38:	eb0a 0084 	add.w	r0, sl, r4, lsl #2
 8001a3c:	68c4      	ldr	r4, [r0, #12]
                String fmt = null;
                if(ch == ':')
 8001a3e:	fa1f f089 	uxth.w	r0, r9
 8001a42:	283a      	cmp	r0, #58	; 0x3a
 8001a44:	d12c      	bne.n	8001aa0 <StringBuilder::AppendFormat#8854+0x288>
 8001a46:	9404      	str	r4, [sp, #16]
                {
                    pos++;
 8001a48:	f10b 0401 	add.w	r4, fp, #1
                    p = pos;
                    i = pos;
 8001a4c:	f10b 0507 	add.w	r5, fp, #7
                            else
                                FormatError();
                        }
                        else if(ch == '}')
                        {
                            if(pos < len && chars[pos] == '}')  // Treat as escape character for }}
 8001a50:	f106 0a0c 	add.w	sl, r6, #12
 8001a54:	9401      	str	r4, [sp, #4]
 8001a56:	e002      	b.n	8001a5e <StringBuilder::AppendFormat#8854+0x246>
 8001a58:	f826 9015 	strh.w	r9, [r6, r5, lsl #1]
                                pos--;
                                break;
                            }
                        }

                        chars[i++] = ch;
 8001a5c:	3501      	adds	r5, #1
                    pos++;
                    p = pos;
                    i = pos;
                    while(true)
                    {
                        if(pos == len) FormatError();
 8001a5e:	4544      	cmp	r4, r8
 8001a60:	bf08      	it	eq
 8001a62:	f005 f8f5 	bleq	8006c50 <StringBuilder::FormatError#8853>
                        ch = chars[pos];
 8001a66:	eb06 0044 	add.w	r0, r6, r4, lsl #1
                        pos++;
                        if(ch == '{')
                        {
                            if(pos < len && chars[pos] == '{')  // Treat as escape character for {{
 8001a6a:	3401      	adds	r4, #1
                    p = pos;
                    i = pos;
                    while(true)
                    {
                        if(pos == len) FormatError();
                        ch = chars[pos];
 8001a6c:	f8b0 900c 	ldrh.w	r9, [r0, #12]
                        pos++;
                        if(ch == '{')
 8001a70:	f1b9 0f7b 	cmp.w	r9, #123	; 0x7b
 8001a74:	d109      	bne.n	8001a8a <StringBuilder::AppendFormat#8854+0x272>
                        {
                            if(pos < len && chars[pos] == '{')  // Treat as escape character for {{
 8001a76:	4544      	cmp	r4, r8
 8001a78:	da04      	bge.n	8001a84 <StringBuilder::AppendFormat#8854+0x26c>
 8001a7a:	eb06 0044 	add.w	r0, r6, r4, lsl #1
 8001a7e:	8980      	ldrh	r0, [r0, #12]
 8001a80:	287b      	cmp	r0, #123	; 0x7b
 8001a82:	d00b      	beq.n	8001a9c <StringBuilder::AppendFormat#8854+0x284>
                                pos++;
                            else
                                FormatError();
 8001a84:	f005 f8e4 	bl	8006c50 <StringBuilder::FormatError#8853>
 8001a88:	e7e6      	b.n	8001a58 <StringBuilder::AppendFormat#8854+0x240>
                        }
                        else if(ch == '}')
 8001a8a:	f1b9 0f7d 	cmp.w	r9, #125	; 0x7d
 8001a8e:	d1e3      	bne.n	8001a58 <StringBuilder::AppendFormat#8854+0x240>
                        {
                            if(pos < len && chars[pos] == '}')  // Treat as escape character for }}
 8001a90:	4544      	cmp	r4, r8
 8001a92:	da07      	bge.n	8001aa4 <StringBuilder::AppendFormat#8854+0x28c>
 8001a94:	f83a 0014 	ldrh.w	r0, [sl, r4, lsl #1]
 8001a98:	287d      	cmp	r0, #125	; 0x7d
 8001a9a:	d103      	bne.n	8001aa4 <StringBuilder::AppendFormat#8854+0x28c>
                                pos++;
 8001a9c:	3401      	adds	r4, #1
 8001a9e:	e7db      	b.n	8001a58 <StringBuilder::AppendFormat#8854+0x240>
 8001aa0:	2500      	movs	r5, #0
 8001aa2:	e015      	b.n	8001ad0 <StringBuilder::AppendFormat#8854+0x2b8>
                            else
                                FormatError();
                        }
                        else if(ch == '}')
                        {
                            if(pos < len && chars[pos] == '}')  // Treat as escape character for }}
 8001aa4:	1fa8      	subs	r0, r5, #6
 8001aa6:	9d01      	ldr	r5, [sp, #4]
 8001aa8:	f8dd a01c 	ldr.w	sl, [sp, #28]
                                pos++;
                            else
                            {
                                pos--;
 8001aac:	f1a4 0b01 	sub.w	fp, r4, #1
                            }
                        }

                        chars[i++] = ch;
                    }
                    if(i > p) fmt = new String( chars, p, i - p );
 8001ab0:	42a8      	cmp	r0, r5
 8001ab2:	dd0b      	ble.n	8001acc <StringBuilder::AppendFormat#8854+0x2b4>
 8001ab4:	1b44      	subs	r4, r0, r5
 8001ab6:	4620      	mov	r0, r4
 8001ab8:	f7ff fa56 	bl	8000f68 <String::FastAllocateString#4058>
 8001abc:	462a      	mov	r2, r5
 8001abe:	4631      	mov	r1, r6
 8001ac0:	4623      	mov	r3, r4
 8001ac2:	4605      	mov	r5, r0
 8001ac4:	f7ff fe02 	bl	80016cc <String::.ctor#4055>
 8001ac8:	9c04      	ldr	r4, [sp, #16]
 8001aca:	e001      	b.n	8001ad0 <StringBuilder::AppendFormat#8854+0x2b8>
 8001acc:	9c04      	ldr	r4, [sp, #16]
 8001ace:	2500      	movs	r5, #0
                }
                if(ch != '}') FormatError();
 8001ad0:	fa1f f089 	uxth.w	r0, r9
 8001ad4:	287d      	cmp	r0, #125	; 0x7d
 8001ad6:	bf18      	it	ne
 8001ad8:	f005 f8ba 	blne	8006c50 <StringBuilder::FormatError#8853>
                    s = cf.Format( fmt, arg, provider );
                }

                if(s == null)
                {
                    if(arg is IFormattable)
 8001adc:	4620      	mov	r0, r4
 8001ade:	f002 ff41 	bl	8004964 <TypeSystemManager::CastToInterfaceNoThrow#5246>
 8001ae2:	b170      	cbz	r0, 8001b02 <StringBuilder::AppendFormat#8854+0x2ea>
                    {
                        s = ((IFormattable)arg).ToString( fmt, provider );
 8001ae4:	4620      	mov	r0, r4
 8001ae6:	f8cd a01c 	str.w	sl, [sp, #28]
 8001aea:	f002 ff1d 	bl	8004928 <TypeSystemManager::CastToInterface#5245>
 8001aee:	9900      	ldr	r1, [sp, #0]
 8001af0:	4604      	mov	r4, r0
 8001af2:	f001 fbbf 	bl	8003274 <VTable::GetInterface#3839>
 8001af6:	68c3      	ldr	r3, [r0, #12]
 8001af8:	4620      	mov	r0, r4
 8001afa:	4629      	mov	r1, r5
 8001afc:	2200      	movs	r2, #0
 8001afe:	4798      	blx	r3
 8001b00:	e00b      	b.n	8001b1a <StringBuilder::AppendFormat#8854+0x302>
 8001b02:	b13c      	cbz	r4, 8001b14 <StringBuilder::AppendFormat#8854+0x2fc>
 8001b04:	6860      	ldr	r0, [r4, #4]
 8001b06:	f8cd a01c 	str.w	sl, [sp, #28]
                    }
                    else if(arg != null)
                    {
                        s = arg.ToString();
 8001b0a:	69c0      	ldr	r0, [r0, #28]
 8001b0c:	68c1      	ldr	r1, [r0, #12]
 8001b0e:	4620      	mov	r0, r4
 8001b10:	4788      	blx	r1
 8001b12:	e002      	b.n	8001b1a <StringBuilder::AppendFormat#8854+0x302>
 8001b14:	f8cd a01c 	str.w	sl, [sp, #28]
 8001b18:	2000      	movs	r0, #0
                        chars[i++] = ch;
                    }
                    if(i > p) fmt = new String( chars, p, i - p );
                }
                if(ch != '}') FormatError();
                pos++;
 8001b1a:	f10b 0101 	add.w	r1, fp, #1
                    {
                        s = arg.ToString();
                    }
                }

                if(s == null) s = String.Empty;
 8001b1e:	2800      	cmp	r0, #0
 8001b20:	9104      	str	r1, [sp, #16]
 8001b22:	9902      	ldr	r1, [sp, #8]
 8001b24:	f8d1 50a0 	ldr.w	r5, [r1, #160]	; 0xa0
 8001b28:	bf18      	it	ne
 8001b2a:	4605      	movne	r5, r0
 8001b2c:	9c06      	ldr	r4, [sp, #24]
 8001b2e:	68e8      	ldr	r0, [r5, #12]
                int pad = width - s.Length;
                if(!leftJustify && pad > 0) Append( ' ', pad );
 8001b30:	eba7 0a00 	sub.w	sl, r7, r0
 8001b34:	9f05      	ldr	r7, [sp, #20]
 8001b36:	b937      	cbnz	r7, 8001b46 <StringBuilder::AppendFormat#8854+0x32e>
 8001b38:	f1ba 0f00 	cmp.w	sl, #0
 8001b3c:	dd03      	ble.n	8001b46 <StringBuilder::AppendFormat#8854+0x32e>
 8001b3e:	4620      	mov	r0, r4
 8001b40:	4651      	mov	r1, sl
 8001b42:	f004 ff4f 	bl	80069e4 <StringBuilder::Append#8804>
                Append( s );
 8001b46:	4620      	mov	r0, r4
 8001b48:	4629      	mov	r1, r5
 8001b4a:	f004 fa6e 	bl	800602a <StringBuilder::Append#8806>
                if(leftJustify && pad > 0) Append( ' ', pad );
 8001b4e:	2f00      	cmp	r7, #0
 8001b50:	e9dd b703 	ldrd	fp, r7, [sp, #12]
 8001b54:	f43f ae8a 	beq.w	800186c <StringBuilder::AppendFormat#8854+0x54>
 8001b58:	f1ba 0f00 	cmp.w	sl, #0
 8001b5c:	f73f ae82 	bgt.w	8001864 <StringBuilder::AppendFormat#8854+0x4c>
 8001b60:	e684      	b.n	800186c <StringBuilder::AppendFormat#8854+0x54>
 8001b62:	9806      	ldr	r0, [sp, #24]
 8001b64:	b009      	add	sp, #36	; 0x24
 8001b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b6a:	4811      	ldr	r0, [pc, #68]	; (8001bb0 <StringBuilder::AppendFormat#8854+0x398>)
                } while(ch >= '0' && ch <= '9' && index < 1000000);
                if(index >= args.Length) 
#if EXCEPTION_STRINGS
                    throw new FormatException( Environment.GetResourceString( "Format_IndexOutOfRange" ) );
#else
                    throw new FormatException();
 8001b6c:	4911      	ldr	r1, [pc, #68]	; (8001bb4 <StringBuilder::AppendFormat#8854+0x39c>)
 8001b6e:	4478      	add	r0, pc
 8001b70:	180c      	adds	r4, r1, r0
 8001b72:	4911      	ldr	r1, [pc, #68]	; (8001bb8 <StringBuilder::AppendFormat#8854+0x3a0>)
 8001b74:	4401      	add	r1, r0
 8001b76:	4620      	mov	r0, r4
 8001b78:	f7fe fed2 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8001b7c:	4605      	mov	r5, r0
 8001b7e:	f003 fb8f 	bl	80052a0 <FormatException::.ctor#7338>
            if(format == null || args == null)
            {
#if EXCEPTION_STRINGS
                throw new ArgumentNullException( (format == null) ? "format" : "args" );
#else
                throw new ArgumentNullException();
 8001b82:	4620      	mov	r0, r4
 8001b84:	4629      	mov	r1, r5
 8001b86:	f7fe fee1 	bl	800094c <TypeSystemManager::Throw#5247>
 8001b8a:	480c      	ldr	r0, [pc, #48]	; (8001bbc <StringBuilder::AppendFormat#8854+0x3a4>)
 8001b8c:	4909      	ldr	r1, [pc, #36]	; (8001bb4 <StringBuilder::AppendFormat#8854+0x39c>)
 8001b8e:	4478      	add	r0, pc
 8001b90:	180c      	adds	r4, r1, r0
 8001b92:	490b      	ldr	r1, [pc, #44]	; (8001bc0 <StringBuilder::AppendFormat#8854+0x3a8>)
 8001b94:	4401      	add	r1, r0
 8001b96:	4620      	mov	r0, r4
 8001b98:	f7fe fec2 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8001b9c:	4605      	mov	r5, r0
 8001b9e:	f7fe fed0 	bl	8000942 <ArgumentNullException::.ctor#6362>
 8001ba2:	e7ee      	b.n	8001b82 <StringBuilder::AppendFormat#8854+0x36a>
 8001ba4:	17ffff5a 	.word	0x17ffff5a
 8001ba8:	e8009aac 	.word	0xe8009aac
 8001bac:	fffffe3c 	.word	0xfffffe3c
 8001bb0:	17fffc42 	.word	0x17fffc42
 8001bb4:	ffffea64 	.word	0xffffea64
 8001bb8:	e8009c7c 	.word	0xe8009c7c
 8001bbc:	17fffc22 	.word	0x17fffc22
 8001bc0:	e80075bc 	.word	0xe80075bc

08001bc4 <String::InternalCopy#2745>:
            return result;
        }

        // Used by StringBuilder to avoid data corruption
        unsafe internal static String InternalCopy( String str )
        {
 8001bc4:	b570      	push	{r4, r5, r6, lr}
 8001bc6:	4604      	mov	r4, r0

        public int Length
        {
            get
            {
                return m_stringLength;
 8001bc8:	68e5      	ldr	r5, [r4, #12]

        // Used by StringBuilder to avoid data corruption
        unsafe internal static String InternalCopy( String str )
        {
            int    length = str.Length;
            String result = FastAllocateString( length );
 8001bca:	4628      	mov	r0, r5
 8001bcc:	f7ff f9cc 	bl	8000f68 <String::FastAllocateString#4058>
 8001bd0:	4606      	mov	r6, r0

            // The underlying's String can changed length is StringBuilder
            fixed(char* dest = &result.m_firstChar)
            {
                fixed(char* src = &str.m_firstChar)
 8001bd2:	f104 0010 	add.w	r0, r4, #16
 8001bd6:	462a      	mov	r2, r5
        {
            int    length = str.Length;
            String result = FastAllocateString( length );

            // The underlying's String can changed length is StringBuilder
            fixed(char* dest = &result.m_firstChar)
 8001bd8:	f106 0110 	add.w	r1, r6, #16
            {
                fixed(char* src = &str.m_firstChar)
 8001bdc:	f7ff fd00 	bl	80015e0 <Buffer::InternalMemoryCopy#3900>
 8001be0:	4630      	mov	r0, r6
 8001be2:	bd70      	pop	{r4, r5, r6, pc}

08001be4 <String::Concat#2751>:

            return result;
        }

        public static String Concat( String str0, String str1, String str2 )
        {
 8001be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001be6:	b081      	sub	sp, #4
 8001be8:	460d      	mov	r5, r1
 8001bea:	4606      	mov	r6, r0
 8001bec:	4614      	mov	r4, r2
            if(str0 == null && str1 == null && str2 == null)
 8001bee:	ea56 0005 	orrs.w	r0, r6, r5
 8001bf2:	bf08      	it	eq
 8001bf4:	2c00      	cmpeq	r4, #0
 8001bf6:	d027      	beq.n	8001c48 <String::Concat#2751+0x64>
 8001bf8:	4818      	ldr	r0, [pc, #96]	; (8001c5c <String::Concat#2751+0x78>)
                return String.Empty;
            }

            if(str0 == null)
            {
                str0 = String.Empty;
 8001bfa:	4919      	ldr	r1, [pc, #100]	; (8001c60 <String::Concat#2751+0x7c>)
            }

            if(str1 == null)
 8001bfc:	2d00      	cmp	r5, #0
 8001bfe:	4478      	add	r0, pc
                return String.Empty;
            }

            if(str0 == null)
            {
                str0 = String.Empty;
 8001c00:	4408      	add	r0, r1
 8001c02:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
            }

            if(str1 == null)
 8001c06:	bf08      	it	eq
 8001c08:	4605      	moveq	r5, r0
            if(str0 == null && str1 == null && str2 == null)
            {
                return String.Empty;
            }

            if(str0 == null)
 8001c0a:	2e00      	cmp	r6, #0

        public int Length
        {
            get
            {
                return m_stringLength;
 8001c0c:	68e9      	ldr	r1, [r5, #12]
            if(str0 == null && str1 == null && str2 == null)
            {
                return String.Empty;
            }

            if(str0 == null)
 8001c0e:	bf08      	it	eq
 8001c10:	4606      	moveq	r6, r0
            if(str1 == null)
            {
                str1 = String.Empty;
            }

            if(str2 == null)
 8001c12:	2c00      	cmp	r4, #0

        public int Length
        {
            get
            {
                return m_stringLength;
 8001c14:	68f2      	ldr	r2, [r6, #12]
            if(str1 == null)
            {
                str1 = String.Empty;
            }

            if(str2 == null)
 8001c16:	bf08      	it	eq
 8001c18:	4604      	moveq	r4, r0

        public int Length
        {
            get
            {
                return m_stringLength;
 8001c1a:	68e0      	ldr	r0, [r4, #12]
            if(str2 == null)
            {
                str2 = String.Empty;
            }

            int totalLength = str0.Length + str1.Length + str2.Length;
 8001c1c:	4411      	add	r1, r2
 8001c1e:	4408      	add	r0, r1

            String result = FastAllocateString( totalLength );
 8001c20:	f7ff f9a2 	bl	8000f68 <String::FastAllocateString#4058>
 8001c24:	2100      	movs	r1, #0

            FillStringChecked( result, 0                        , str0 );
 8001c26:	4632      	mov	r2, r6
                str2 = String.Empty;
            }

            int totalLength = str0.Length + str1.Length + str2.Length;

            String result = FastAllocateString( totalLength );
 8001c28:	4607      	mov	r7, r0

            FillStringChecked( result, 0                        , str0 );
 8001c2a:	f7ff fd29 	bl	8001680 <String::FillStringChecked#2694>

        public int Length
        {
            get
            {
                return m_stringLength;
 8001c2e:	68f1      	ldr	r1, [r6, #12]
            int totalLength = str0.Length + str1.Length + str2.Length;

            String result = FastAllocateString( totalLength );

            FillStringChecked( result, 0                        , str0 );
            FillStringChecked( result, str0.Length              , str1 );
 8001c30:	4638      	mov	r0, r7
 8001c32:	462a      	mov	r2, r5
 8001c34:	f7ff fd24 	bl	8001680 <String::FillStringChecked#2694>

        public int Length
        {
            get
            {
                return m_stringLength;
 8001c38:	68e8      	ldr	r0, [r5, #12]
 8001c3a:	68f1      	ldr	r1, [r6, #12]

            String result = FastAllocateString( totalLength );

            FillStringChecked( result, 0                        , str0 );
            FillStringChecked( result, str0.Length              , str1 );
            FillStringChecked( result, str0.Length + str1.Length, str2 );
 8001c3c:	4622      	mov	r2, r4
 8001c3e:	4401      	add	r1, r0
 8001c40:	4638      	mov	r0, r7
 8001c42:	f7ff fd1d 	bl	8001680 <String::FillStringChecked#2694>
 8001c46:	e005      	b.n	8001c54 <String::Concat#2751+0x70>
 8001c48:	4806      	ldr	r0, [pc, #24]	; (8001c64 <String::Concat#2751+0x80>)

        public static String Concat( String str0, String str1, String str2 )
        {
            if(str0 == null && str1 == null && str2 == null)
            {
                return String.Empty;
 8001c4a:	4905      	ldr	r1, [pc, #20]	; (8001c60 <String::Concat#2751+0x7c>)
 8001c4c:	4478      	add	r0, pc
 8001c4e:	4408      	add	r0, r1
 8001c50:	f8d0 70a0 	ldr.w	r7, [r0, #160]	; 0xa0
 8001c54:	4638      	mov	r0, r7
 8001c56:	b001      	add	sp, #4
 8001c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c5a:	46c0      	nop			; (mov r8, r8)
 8001c5c:	17fffbb2 	.word	0x17fffbb2
 8001c60:	fffffe3c 	.word	0xfffffe3c
 8001c64:	17fffb64 	.word	0x17fffb64

08001c68 <String::AppendInPlace#2775>:
            BCLDebug.Assert( currentLength < m_arrayLength, "[String.AppendInPlace]currentLength < m_arrayLength" );
#if _DEBUG
            BCLDebug.Assert( ValidModifiableString(), "Modifiable string must not have highChars flags set" );
#endif

            fixed(char* p = &this.m_firstChar)
 8001c68:	f100 0310 	add.w	r3, r0, #16
 8001c6c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            {
                // Append the character.
                p[currentLength] = value;
                currentLength++;
 8001c70:	1c51      	adds	r1, r2, #1
 8001c72:	2200      	movs	r2, #0
 8001c74:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 8001c78:	60c1      	str	r1, [r0, #12]
 8001c7a:	4770      	bx	lr

08001c7c <String::AppendInPlace#2776>:
        }


        ///<internalonly/>
        unsafe internal void AppendInPlace( char value, int repeatCount, int currentLength )
        {
 8001c7c:	b580      	push	{r7, lr}
            int newLength = currentLength + repeatCount;
 8001c7e:	eb02 0c01 	add.w	ip, r2, r1

            fixed(char* p = &this.m_firstChar)
            {
                int i;

                for(i = currentLength; i < newLength; i++)
 8001c82:	0051      	lsls	r1, r2, #1
            BCLDebug.Assert( newLength < m_arrayLength, "[String.AppendInPlace]currentLength+repeatCount < m_arrayLength" );
#if _DEBUG
            BCLDebug.Assert( ValidModifiableString(), "Modifiable string must not have highChars flags set" );
#endif

            fixed(char* p = &this.m_firstChar)
 8001c84:	f100 0310 	add.w	r3, r0, #16
 8001c88:	f04f 0e20 	mov.w	lr, #32
 8001c8c:	e003      	b.n	8001c96 <String::AppendInPlace#2776+0x1a>
 8001c8e:	f823 e001 	strh.w	lr, [r3, r1]
            {
                int i;

                for(i = currentLength; i < newLength; i++)
 8001c92:	3102      	adds	r1, #2
 8001c94:	3201      	adds	r2, #1
 8001c96:	4562      	cmp	r2, ip
 8001c98:	dbf9      	blt.n	8001c8e <String::AppendInPlace#2776+0x12>
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001ca0:	f8c0 c00c 	str.w	ip, [r0, #12]
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <String::AppendInPlace#2777>:
            this.m_stringLength = newLength;
        }

        ///<internalonly/>
        internal unsafe void AppendInPlace( String value, int currentLength )
        {
 8001ca6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ca8:	b081      	sub	sp, #4

        public int Length
        {
            get
            {
                return m_stringLength;
 8001caa:	68ce      	ldr	r6, [r1, #12]
 8001cac:	4605      	mov	r5, r0
 8001cae:	4614      	mov	r4, r2
            BCLDebug.Assert( ValidModifiableString(), "Modifiable string must not have highChars flags set" );
#endif

            fixed(char* dest = &this.m_firstChar)
            {
                fixed(char* src = &value.m_firstChar)
 8001cb0:	f101 0010 	add.w	r0, r1, #16
            BCLDebug.Assert( newLength < this.m_arrayLength, "[String.AppendInPlace]Length is wrong." );
#if _DEBUG
            BCLDebug.Assert( ValidModifiableString(), "Modifiable string must not have highChars flags set" );
#endif

            fixed(char* dest = &this.m_firstChar)
 8001cb4:	f105 0710 	add.w	r7, r5, #16
            {
                fixed(char* src = &value.m_firstChar)
                {
                    Buffer.InternalMemoryCopy( src, dest + currentLength, count );
 8001cb8:	eb07 0244 	add.w	r2, r7, r4, lsl #1
 8001cbc:	4611      	mov	r1, r2
 8001cbe:	4632      	mov	r2, r6
 8001cc0:	f7ff fc8e 	bl	80015e0 <Buffer::InternalMemoryCopy#3900>

        ///<internalonly/>
        internal unsafe void AppendInPlace( String value, int currentLength )
        {
            int count     = value.Length;
            int newLength = currentLength + count;
 8001cc4:	19a0      	adds	r0, r4, r6
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	f827 1010 	strh.w	r1, [r7, r0, lsl #1]
 8001ccc:	60e8      	str	r0, [r5, #12]
 8001cce:	b001      	add	sp, #4
 8001cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cd2 <String::AppendInPlace#2781>:
        }


        ///<internalonly/>
        internal unsafe void AppendInPlace( char[] value, int start, int count, int currentLength )
        {
 8001cd2:	b570      	push	{r4, r5, r6, lr}
 8001cd4:	f8dd c010 	ldr.w	ip, [sp, #16]
 8001cd8:	4604      	mov	r4, r0
#endif

            fixed(char* dest = &this.m_firstChar)
            {
                // Note: fixed does not like empty arrays
                if(count > 0)
 8001cda:	2b01      	cmp	r3, #1
            BCLDebug.Assert( value.Length - count >= start, "[String.AppendInPlace]value.Length-count>=start" );
#if _DEBUG
            BCLDebug.Assert(ValidModifiableString(), "Modifiable string must not have highChars flags set");
#endif

            fixed(char* dest = &this.m_firstChar)
 8001cdc:	f104 0610 	add.w	r6, r4, #16


        ///<internalonly/>
        internal unsafe void AppendInPlace( char[] value, int start, int count, int currentLength )
        {
            int newLength = currentLength + count;
 8001ce0:	eb0c 0503 	add.w	r5, ip, r3
 8001ce4:	db0f      	blt.n	8001d06 <String::AppendInPlace#2781+0x34>
            fixed(char* dest = &this.m_firstChar)
            {
                // Note: fixed does not like empty arrays
                if(count > 0)
                {
                    fixed(char* src = value)
 8001ce6:	2900      	cmp	r1, #0
 8001ce8:	bf1c      	itt	ne
 8001cea:	6888      	ldrne	r0, [r1, #8]
 8001cec:	2800      	cmpne	r0, #0
 8001cee:	d101      	bne.n	8001cf4 <String::AppendInPlace#2781+0x22>
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	e001      	b.n	8001cf8 <String::AppendInPlace#2781+0x26>
 8001cf4:	f101 000c 	add.w	r0, r1, #12
                    {
                        Buffer.InternalMemoryCopy( src + start, dest + currentLength, count );
 8001cf8:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8001cfc:	eb06 014c 	add.w	r1, r6, ip, lsl #1
 8001d00:	461a      	mov	r2, r3
 8001d02:	f7ff fc6d 	bl	80015e0 <Buffer::InternalMemoryCopy#3900>
 8001d06:	2000      	movs	r0, #0
 8001d08:	f826 0015 	strh.w	r0, [r6, r5, lsl #1]
 8001d0c:	60e5      	str	r5, [r4, #12]
 8001d0e:	bd70      	pop	{r4, r5, r6, pc}

08001d10 <String::GetStringForStringBuilder#2783>:
            }
        }

        ///<internalonly/>
        internal static String GetStringForStringBuilder( String value, int capacity )
        {
 8001d10:	b580      	push	{r7, lr}
 8001d12:	460a      	mov	r2, r1

        public int Length
        {
            get
            {
                return m_stringLength;
 8001d14:	68c1      	ldr	r1, [r0, #12]
        ///<internalonly/>
        internal static String GetStringForStringBuilder( String value, int capacity )
        {
            BCLDebug.Assert( value != null, "[String.GetStringForStringBuilder]value!=null" );

            return GetStringForStringBuilder( value, 0, value.Length, capacity );
 8001d16:	f000 f801 	bl	8001d1c <String::GetStringForStringBuilder#2784>
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <String::GetStringForStringBuilder#2784>:
        }

        ///<internalonly/>
        unsafe internal static String GetStringForStringBuilder( String value, int startIndex, int length, int capacity )
        {
 8001d1c:	b570      	push	{r4, r5, r6, lr}
 8001d1e:	4606      	mov	r6, r0
            BCLDebug.Assert( value != null     , "[String.GetStringForStringBuilder]value!=null" );
            BCLDebug.Assert( capacity >= length, "[String.GetStringForStringBuilder]capacity>=length" );

            String newStr = FastAllocateString( capacity );
 8001d20:	4610      	mov	r0, r2
 8001d22:	460d      	mov	r5, r1
 8001d24:	f7ff f920 	bl	8000f68 <String::FastAllocateString#4058>
 8001d28:	4604      	mov	r4, r0

        public int Length
        {
            get
            {
                return m_stringLength;
 8001d2a:	68f0      	ldr	r0, [r6, #12]
 8001d2c:	b148      	cbz	r0, 8001d42 <String::GetStringForStringBuilder#2784+0x26>
                return newStr;
            }

            fixed(char* dest = &newStr.m_firstChar)
            {
                fixed(char* src = &value.m_firstChar)
 8001d2e:	f106 0010 	add.w	r0, r6, #16
                newStr.SetLength( 0 );
                // already null terminated
                return newStr;
            }

            fixed(char* dest = &newStr.m_firstChar)
 8001d32:	f104 0110 	add.w	r1, r4, #16
            {
                fixed(char* src = &value.m_firstChar)
                {
                    Buffer.InternalMemoryCopy( src + startIndex, dest, length );
 8001d36:	462a      	mov	r2, r5
 8001d38:	f7ff fc52 	bl	80015e0 <Buffer::InternalMemoryCopy#3900>
                }
            }
            newStr.SetLength( length );
 8001d3c:	4620      	mov	r0, r4
 8001d3e:	4629      	mov	r1, r5
 8001d40:	e001      	b.n	8001d46 <String::GetStringForStringBuilder#2784+0x2a>

            String newStr = FastAllocateString( capacity );

            if(value.Length == 0)
            {
                newStr.SetLength( 0 );
 8001d42:	4620      	mov	r0, r4
 8001d44:	2100      	movs	r1, #0
                fixed(char* src = &value.m_firstChar)
                {
                    Buffer.InternalMemoryCopy( src + startIndex, dest, length );
                }
            }
            newStr.SetLength( length );
 8001d46:	f000 f802 	bl	8001d4e <String::SetLength#2787>
 8001d4a:	4620      	mov	r0, r4
 8001d4c:	bd70      	pop	{r4, r5, r6, pc}

08001d4e <String::SetLength#2787>:
 8001d4e:	60c1      	str	r1, [r0, #12]
 8001d50:	4770      	bx	lr

08001d52 <String::ClearPostNullChar#2786>:

        ///<internalonly/>
        unsafe internal void ClearPostNullChar()
        {
            int newLength = Length + 1;
            if(newLength < m_arrayLength)
 8001d52:	e9d0 2102 	ldrd	r2, r1, [r0, #8]
        }

        ///<internalonly/>
        unsafe internal void ClearPostNullChar()
        {
            int newLength = Length + 1;
 8001d56:	3101      	adds	r1, #1
            if(newLength < m_arrayLength)
 8001d58:	4291      	cmp	r1, r2
            {
                fixed(char* p = &this.m_firstChar)
 8001d5a:	bfbe      	ittt	lt
 8001d5c:	eb00 0041 	addlt.w	r0, r0, r1, lsl #1
 8001d60:	2100      	movlt	r1, #0
 8001d62:	8201      	strhlt	r1, [r0, #16]
 8001d64:	4770      	bx	lr
 8001d66:	46c0      	nop			; (mov r8, r8)

08001d68 <String::.cctor#2793>:

        // The Empty constant holds the empty string value.
        //We need to call the String constructor so that the compiler doesn't mark this as a literal.
        //Marking this as a literal would mean that it doesn't show up as a field which we can access
        //from native.
        public static readonly String Empty = "";
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	4808      	ldr	r0, [pc, #32]	; (8001d8c <String::.cctor#2793+0x24>)
 8001d6c:	4908      	ldr	r1, [pc, #32]	; (8001d90 <String::.cctor#2793+0x28>)
 8001d6e:	4a09      	ldr	r2, [pc, #36]	; (8001d94 <String::.cctor#2793+0x2c>)
 8001d70:	4478      	add	r0, pc
 8001d72:	4401      	add	r1, r0
 8001d74:	4402      	add	r2, r0
 8001d76:	f8c1 20a0 	str.w	r2, [r1, #160]	; 0xa0
        //This should really live on System.Globalization.CharacterInfo.  However,
        //Trim gets called by security while resgen is running, so we can't run
        //CharacterInfo's class initializer (which goes to native and looks for a
        //resource table that hasn't yet been attached to the assembly when resgen
        //runs.
        internal static readonly char[] WhitespaceChars =
 8001d7a:	4a07      	ldr	r2, [pc, #28]	; (8001d98 <String::.cctor#2793+0x30>)
 8001d7c:	f8d1 10a4 	ldr.w	r1, [r1, #164]	; 0xa4
 8001d80:	4410      	add	r0, r2
 8001d82:	2219      	movs	r2, #25
 8001d84:	f7fe fcfa 	bl	800077c <Array::Copy#1563>
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	46c0      	nop			; (mov r8, r8)
 8001d8c:	17fffa40 	.word	0x17fffa40
 8001d90:	fffffe3c 	.word	0xfffffe3c
 8001d94:	e8007c80 	.word	0xe8007c80
 8001d98:	e8007c9c 	.word	0xe8007c9c

08001d9c <Number::FormatUInt32#7545>:
            }
        }

        internal static String FormatUInt32( uint value,
                                    NumberFormatInfo info )
        {
 8001d9c:	b570      	push	{r4, r5, r6, lr}
 8001d9e:	460c      	mov	r4, r1
 8001da0:	490a      	ldr	r1, [pc, #40]	; (8001dcc <Number::FormatUInt32#7545+0x30>)
 8001da2:	4605      	mov	r5, r0
            Number number = new Number( value );
 8001da4:	480a      	ldr	r0, [pc, #40]	; (8001dd0 <Number::FormatUInt32#7545+0x34>)
 8001da6:	4a0b      	ldr	r2, [pc, #44]	; (8001dd4 <Number::FormatUInt32#7545+0x38>)
 8001da8:	4479      	add	r1, pc
 8001daa:	4408      	add	r0, r1
 8001dac:	4411      	add	r1, r2
 8001dae:	f7fe fdb7 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8001db2:	4629      	mov	r1, r5
 8001db4:	4606      	mov	r6, r0
 8001db6:	f003 fae3 	bl	8005380 <Number::.ctor#7531>
            return number.ToString( 'G', -1, info );
 8001dba:	4630      	mov	r0, r6
 8001dbc:	2147      	movs	r1, #71	; 0x47
 8001dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc2:	4623      	mov	r3, r4
 8001dc4:	f003 fb6a 	bl	800549c <Number::ToString#7554>
 8001dc8:	bd70      	pop	{r4, r5, r6, pc}
 8001dca:	46c0      	nop			; (mov r8, r8)
 8001dcc:	17fffa08 	.word	0x17fffa08
 8001dd0:	ffffea64 	.word	0xffffea64
 8001dd4:	e8009bec 	.word	0xe8009bec

08001dd8 <UInt32::CompareTo#2893>:

        public int CompareTo( UInt32 value )
        {
            // Need to use compare because subtraction will wrap
            // to positive for very large neg numbers, etc.
            if(m_value < value) return -1;
 8001dd8:	6802      	ldr	r2, [r0, #0]
 8001dda:	428a      	cmp	r2, r1
 8001ddc:	bf3c      	itt	cc
 8001dde:	f04f 30ff 	movcc.w	r0, #4294967295
 8001de2:	4770      	bxcc	lr
            if(m_value > value) return  1;
 8001de4:	6802      	ldr	r2, [r0, #0]
 8001de6:	2000      	movs	r0, #0
 8001de8:	428a      	cmp	r2, r1
 8001dea:	bf88      	it	hi
 8001dec:	2001      	movhi	r0, #1
 8001dee:	4770      	bx	lr

08001df0 <UInt32::Equals#2895>:

            return 0;
        }

        public override bool Equals( Object obj )
        {
 8001df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001df2:	b081      	sub	sp, #4
 8001df4:	4604      	mov	r4, r0
 8001df6:	480c      	ldr	r0, [pc, #48]	; (8001e28 <UInt32::Equals#2895+0x38>)
            if(!(obj is UInt32))
 8001df8:	4f0c      	ldr	r7, [pc, #48]	; (8001e2c <UInt32::Equals#2895+0x3c>)
 8001dfa:	460e      	mov	r6, r1
 8001dfc:	4478      	add	r0, pc
 8001dfe:	1839      	adds	r1, r7, r0
 8001e00:	4630      	mov	r0, r6
 8001e02:	f7fe fe83 	bl	8000b0c <TypeSystemManager::CastToSealedTypeNoThrow#5244>
 8001e06:	2500      	movs	r5, #0
 8001e08:	b150      	cbz	r0, 8001e20 <UInt32::Equals#2895+0x30>
 8001e0a:	4809      	ldr	r0, [pc, #36]	; (8001e30 <UInt32::Equals#2895+0x40>)
 8001e0c:	4478      	add	r0, pc
            {
                return false;
            }

            return Equals( (UInt32)obj );
 8001e0e:	1839      	adds	r1, r7, r0
 8001e10:	4630      	mov	r0, r6
 8001e12:	f7fe ff73 	bl	8000cfc <TypeSystemManager::CastToSealedType#5243>
 8001e16:	6800      	ldr	r0, [r0, #0]
 8001e18:	6821      	ldr	r1, [r4, #0]
 8001e1a:	4281      	cmp	r1, r0
 8001e1c:	bf08      	it	eq
 8001e1e:	2501      	moveq	r5, #1
 8001e20:	4628      	mov	r0, r5
 8001e22:	b001      	add	sp, #4
 8001e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e26:	46c0      	nop			; (mov r8, r8)
 8001e28:	17fff9b4 	.word	0x17fff9b4
 8001e2c:	e8007d3c 	.word	0xe8007d3c
 8001e30:	17fff9a4 	.word	0x17fff9a4

08001e34 <UInt32::GetHashCode#2899>:
        }

        // The absolute value of the int contained.
        public override int GetHashCode()
        {
            return ((int)m_value);
 8001e34:	6800      	ldr	r0, [r0, #0]
 8001e36:	4770      	bx	lr

08001e38 <UInt32::ToString#2901>:
        }

        // The base 10 representation of the number with no extra padding.
        public override String ToString()
        {
 8001e38:	b510      	push	{r4, lr}
            return Number.FormatUInt32( m_value, /*null,*/ NumberFormatInfo.CurrentInfo );
 8001e3a:	6804      	ldr	r4, [r0, #0]
 8001e3c:	f7fe ffb8 	bl	8000db0 <NumberFormatInfo::get_CurrentInfo#10019>
 8001e40:	4601      	mov	r1, r0
 8001e42:	4620      	mov	r0, r4
 8001e44:	f7ff ffaa 	bl	8001d9c <Number::FormatUInt32#7545>
 8001e48:	bd10      	pop	{r4, pc}

08001e4a <UInt32::ToString#2903>:
        }

        public String ToString( IFormatProvider provider )
        {
 8001e4a:	b510      	push	{r4, lr}
            return Number.FormatUInt32( m_value, /*null,*/ NumberFormatInfo.GetInstance( provider ) );
 8001e4c:	6804      	ldr	r4, [r0, #0]
 8001e4e:	f7fe ffaf 	bl	8000db0 <NumberFormatInfo::get_CurrentInfo#10019>
 8001e52:	4601      	mov	r1, r0
 8001e54:	4620      	mov	r0, r4
 8001e56:	f7ff ffa1 	bl	8001d9c <Number::FormatUInt32#7545>
 8001e5a:	bd10      	pop	{r4, pc}

08001e5c <UInt32::ToString#2907>:
            return Number.FormatUInt32( m_value, format, NumberFormatInfo.CurrentInfo );
        }
    
        public String ToString( String          format   ,
                                IFormatProvider provider )
        {
 8001e5c:	b5b0      	push	{r4, r5, r7, lr}
            return Number.FormatUInt32( m_value, format, NumberFormatInfo.GetInstance( provider ) );
 8001e5e:	6805      	ldr	r5, [r0, #0]
 8001e60:	460c      	mov	r4, r1
 8001e62:	f7fe ffa5 	bl	8000db0 <NumberFormatInfo::get_CurrentInfo#10019>
 8001e66:	4602      	mov	r2, r0
 8001e68:	4628      	mov	r0, r5
 8001e6a:	4621      	mov	r1, r4
 8001e6c:	f7ff f928 	bl	80010c0 <Number::FormatUInt32#7546>
 8001e70:	bdb0      	pop	{r4, r5, r7, pc}

08001e72 <UIntPtr::.ctor#3026>:
 8001e72:	2100      	movs	r1, #0
 8001e74:	6001      	str	r1, [r0, #0]
 8001e76:	4770      	bx	lr

08001e78 <UIntPtr::op_Explicit#3040>:
        {
            return new UIntPtr( value );
        }

        public static explicit operator UIntPtr (ulong value) 
        {
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	9001      	str	r0, [sp, #4]
 8001e80:	a801      	add	r0, sp, #4
            return new UIntPtr(value);
 8001e82:	f7ff fff6 	bl	8001e72 <UIntPtr::.ctor#3026>
        }
 8001e86:	9801      	ldr	r0, [sp, #4]
 8001e88:	b002      	add	sp, #8
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <Thread::.ctor#4175>:
        //
        // Constructor Methods
        //

        [DiscardTargetImplementation]
        public ThreadImpl( System.Threading.ThreadStart start ) : this( start, new uint[ ThreadManager.Instance.DefaultStackSize ] ) // move to configuration??
 8001e8c:	b5b0      	push	{r4, r5, r7, lr}
 8001e8e:	460c      	mov	r4, r1
 8001e90:	4908      	ldr	r1, [pc, #32]	; (8001eb4 <Thread::.ctor#4175+0x28>)
 8001e92:	4605      	mov	r5, r0
 8001e94:	4808      	ldr	r0, [pc, #32]	; (8001eb8 <Thread::.ctor#4175+0x2c>)
 8001e96:	4a09      	ldr	r2, [pc, #36]	; (8001ebc <Thread::.ctor#4175+0x30>)
 8001e98:	4479      	add	r1, pc
 8001e9a:	4408      	add	r0, r1
 8001e9c:	4411      	add	r1, r2
 8001e9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ea2:	f7ff fb87 	bl	80015b4 <DefaultTypeSystemManager::AllocateArray#5255>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	4628      	mov	r0, r5
 8001eaa:	4621      	mov	r1, r4
 8001eac:	f000 f808 	bl	8001ec0 <Thread::.ctor#4176>
 8001eb0:	bdb0      	pop	{r4, r5, r7, pc}
 8001eb2:	46c0      	nop			; (mov r8, r8)
 8001eb4:	17fff918 	.word	0x17fff918
 8001eb8:	ffffea64 	.word	0xffffea64
 8001ebc:	e80073bc 	.word	0xe80073bc

08001ec0 <Thread::.ctor#4176>:
        private          ReleaseReferenceHelper                       m_releaseReferenceHelper;

        //
        // HACK: We have a bug in the liveness of multi-pointer structure. We have to use a class instead.
        //
        internal Synchronization.WaitingRecord.Holder m_holder = new Synchronization.WaitingRecord.Holder();
 8001ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ec4:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8001fac <Thread::.ctor#4176+0xec>
 8001ec8:	4604      	mov	r4, r0
 8001eca:	4839      	ldr	r0, [pc, #228]	; (8001fb0 <Thread::.ctor#4176+0xf0>)
 8001ecc:	460f      	mov	r7, r1
 8001ece:	4616      	mov	r6, r2
 8001ed0:	44f8      	add	r8, pc
 8001ed2:	eb00 0508 	add.w	r5, r0, r8
 8001ed6:	4837      	ldr	r0, [pc, #220]	; (8001fb4 <Thread::.ctor#4176+0xf4>)
 8001ed8:	eb00 0108 	add.w	r1, r0, r8
 8001edc:	4628      	mov	r0, r5
 8001ede:	f7fe fd1f 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8001ee2:	64e0      	str	r0, [r4, #76]	; 0x4c

        [DiscardTargetImplementation]
        public ThreadImpl( System.Threading.ThreadStart start ,
                           uint[]                       stack )
        {
            m_managedThreadId   = (int)0x12340000 | s_managedThreadId++;
 8001ee4:	4834      	ldr	r0, [pc, #208]	; (8001fb8 <Thread::.ctor#4176+0xf8>)
 8001ee6:	4440      	add	r0, r8
 8001ee8:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
 8001eec:	1c4a      	adds	r2, r1, #1
 8001eee:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 8001ef2:	f041 5080 	orr.w	r0, r1, #268435456	; 0x10000000
 8001ef6:	f040 700d 	orr.w	r0, r0, #36962304	; 0x2340000
 8001efa:	60a0      	str	r0, [r4, #8]

            m_start             = start;
            m_stack             = stack;
 8001efc:	482f      	ldr	r0, [pc, #188]	; (8001fbc <Thread::.ctor#4176+0xfc>)
 8001efe:	e9c4 7605 	strd	r7, r6, [r4, #20]
 8001f02:	eb00 0608 	add.w	r6, r0, r8
 8001f06:	4628      	mov	r0, r5
 8001f08:	4631      	mov	r1, r6
 8001f0a:	f7fe fd09 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8001f0e:	4607      	mov	r7, r0
 8001f10:	f000 f94a 	bl	80021a8 <Context::.ctor#17523>
            m_swappedOutContext = Processor.Instance.AllocateProcessorContext();
 8001f14:	4628      	mov	r0, r5
 8001f16:	4631      	mov	r1, r6
 8001f18:	61e7      	str	r7, [r4, #28]
 8001f1a:	f7fe fd01 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8001f1e:	4606      	mov	r6, r0
 8001f20:	f000 f942 	bl	80021a8 <Context::.ctor#17523>
 8001f24:	2008      	movs	r0, #8
 8001f26:	e9c4 6008 	strd	r6, r0, [r4, #32]
            m_throwContext      = Processor.Instance.AllocateProcessorContext();

            m_state             = ThreadState.Unstarted;
            m_registrationLink  = new KernelNode< ThreadImpl                     >( this );
 8001f2a:	4825      	ldr	r0, [pc, #148]	; (8001fc0 <Thread::.ctor#4176+0x100>)
 8001f2c:	eb00 0608 	add.w	r6, r0, r8
 8001f30:	4628      	mov	r0, r5
 8001f32:	4631      	mov	r1, r6
 8001f34:	f7fe fcf4 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8001f38:	4621      	mov	r1, r4
 8001f3a:	4607      	mov	r7, r0
 8001f3c:	f000 f938 	bl	80021b0 <KernelNode`1::.ctor#17830>
            m_schedulingLink    = new KernelNode< ThreadImpl                     >( this );
 8001f40:	4628      	mov	r0, r5
 8001f42:	4631      	mov	r1, r6
 8001f44:	62a7      	str	r7, [r4, #40]	; 0x28
 8001f46:	f7fe fceb 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8001f4a:	4621      	mov	r1, r4
 8001f4c:	4606      	mov	r6, r0
 8001f4e:	f000 f92f 	bl	80021b0 <KernelNode`1::.ctor#17830>
            m_ownedObjects      = new KernelList< Synchronization.WaitableObject >();
 8001f52:	481c      	ldr	r0, [pc, #112]	; (8001fc4 <Thread::.ctor#4176+0x104>)
 8001f54:	62e6      	str	r6, [r4, #44]	; 0x2c
 8001f56:	eb00 0108 	add.w	r1, r0, r8
 8001f5a:	4628      	mov	r0, r5
 8001f5c:	f7fe fce0 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8001f60:	4606      	mov	r6, r0
 8001f62:	f000 f927 	bl	80021b4 <KernelList`1::.ctor#17971>
            m_pendingObjects    = new KernelList< Synchronization.WaitingRecord  >();
 8001f66:	4818      	ldr	r0, [pc, #96]	; (8001fc8 <Thread::.ctor#4176+0x108>)
 8001f68:	6366      	str	r6, [r4, #52]	; 0x34
 8001f6a:	eb00 0108 	add.w	r1, r0, r8
 8001f6e:	4628      	mov	r0, r5
 8001f70:	f7fe fcd6 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8001f74:	4606      	mov	r6, r0
 8001f76:	f000 f949 	bl	800220c <KernelList`1::.ctor#17983>
 8001f7a:	2002      	movs	r0, #2
 8001f7c:	63a6      	str	r6, [r4, #56]	; 0x38
 8001f7e:	6120      	str	r0, [r4, #16]

            m_priority          = ThreadPriority.Normal;

            ThreadStart entrypoint = Entrypoint;
 8001f80:	4812      	ldr	r0, [pc, #72]	; (8001fcc <Thread::.ctor#4176+0x10c>)
 8001f82:	eb00 0108 	add.w	r1, r0, r8
 8001f86:	4628      	mov	r0, r5
 8001f88:	f7fe fcca 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8001f8c:	4605      	mov	r5, r0
 8001f8e:	4810      	ldr	r0, [pc, #64]	; (8001fd0 <Thread::.ctor#4176+0x110>)
 8001f90:	4621      	mov	r1, r4
 8001f92:	eb00 0208 	add.w	r2, r0, r8
 8001f96:	4628      	mov	r0, r5
 8001f98:	f7ff f9a1 	bl	80012de <MulticastDelegate::.ctor#4919>
            
            m_swappedOutContext.PopulateFromDelegate( entrypoint, m_stack );
 8001f9c:	e9d4 2006 	ldrd	r2, r0, [r4, #24]
 8001fa0:	4629      	mov	r1, r5
 8001fa2:	f000 f897 	bl	80020d4 <Context::PopulateFromDelegate#5973>
 8001fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001faa:	46c0      	nop			; (mov r8, r8)
 8001fac:	17fff8e0 	.word	0x17fff8e0
 8001fb0:	ffffea64 	.word	0xffffea64
 8001fb4:	e8007ebc 	.word	0xe8007ebc
 8001fb8:	fffffe3c 	.word	0xfffffe3c
 8001fbc:	e8007f6c 	.word	0xe8007f6c
 8001fc0:	e8007ffc 	.word	0xe8007ffc
 8001fc4:	e800808c 	.word	0xe800808c
 8001fc8:	e800811c 	.word	0xe800811c
 8001fcc:	e80081ac 	.word	0xe80081ac
 8001fd0:	e8000add 	.word	0xe8000add

08001fd4 <Thread::Start#4177>:
        //
        // Helper Methods
        //

        public void Start()
        {
 8001fd4:	b5b0      	push	{r4, r5, r7, lr}
 8001fd6:	4601      	mov	r1, r0
            if((m_state & ThreadState.Unstarted) == 0)
 8001fd8:	f891 0024 	ldrb.w	r0, [r1, #36]	; 0x24
 8001fdc:	f010 0f08 	tst.w	r0, #8
 8001fe0:	d00a      	beq.n	8001ff8 <Thread::Start#4177+0x24>
#else
                throw new ThreadStateException();
#endif
            }

            m_state &= ~ThreadState.Unstarted;
 8001fe2:	6a48      	ldr	r0, [r1, #36]	; 0x24

            ThreadManager.Instance.AddThread( this );
 8001fe4:	4a0d      	ldr	r2, [pc, #52]	; (800201c <Thread::Start#4177+0x48>)
#else
                throw new ThreadStateException();
#endif
            }

            m_state &= ~ThreadState.Unstarted;
 8001fe6:	f020 0008 	bic.w	r0, r0, #8
 8001fea:	6248      	str	r0, [r1, #36]	; 0x24
 8001fec:	480a      	ldr	r0, [pc, #40]	; (8002018 <Thread::Start#4177+0x44>)
 8001fee:	4478      	add	r0, pc

            ThreadManager.Instance.AddThread( this );
 8001ff0:	4410      	add	r0, r2
 8001ff2:	f000 f81b 	bl	800202c <ThreadManager::AddThread#3329>
 8001ff6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ff8:	4809      	ldr	r0, [pc, #36]	; (8002020 <Thread::Start#4177+0x4c>)
            if((m_state & ThreadState.Unstarted) == 0)
            {
#if EXCEPTION_STRINGS
                throw new ThreadStateException( "Thread already started" );
#else
                throw new ThreadStateException();
 8001ffa:	490a      	ldr	r1, [pc, #40]	; (8002024 <Thread::Start#4177+0x50>)
 8001ffc:	4478      	add	r0, pc
 8001ffe:	180c      	adds	r4, r1, r0
 8002000:	4909      	ldr	r1, [pc, #36]	; (8002028 <Thread::Start#4177+0x54>)
 8002002:	4401      	add	r1, r0
 8002004:	4620      	mov	r0, r4
 8002006:	f7fe fc8b 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 800200a:	4605      	mov	r5, r0
 800200c:	f000 f836 	bl	800207c <ThreadStateException::.ctor#8071>
 8002010:	4620      	mov	r0, r4
 8002012:	4629      	mov	r1, r5
 8002014:	f7fe fc9a 	bl	800094c <TypeSystemManager::Throw#5247>
 8002018:	17fff7c2 	.word	0x17fff7c2
 800201c:	ffffea1c 	.word	0xffffea1c
 8002020:	17fff7b4 	.word	0x17fff7b4
 8002024:	ffffea64 	.word	0xffffea64
 8002028:	e8007dcc 	.word	0xe8007dcc

0800202c <ThreadManager::AddThread#3329>:

            m_allThreads.InsertAtTail( thread.RegistrationLink );
        }

        public virtual void AddThread( ThreadImpl thread )
        {
 800202c:	b570      	push	{r4, r5, r6, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	2600      	movs	r6, #0
 8002032:	460d      	mov	r5, r1
 8002034:	4604      	mov	r4, r0
 8002036:	9601      	str	r6, [sp, #4]
 8002038:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
            BugCheck.Assert( thread.SchedulingLink.VerifyUnlinked(), BugCheck.StopCode.KernelNodeStillLinked );
 800203a:	f000 fd63 	bl	8002b04 <KernelNode`1::VerifyUnlinked#17837>
 800203e:	f010 0fff 	tst.w	r0, #255	; 0xff
 8002042:	d018      	beq.n	8002076 <ThreadManager::AddThread#3329+0x4a>
 8002044:	2001      	movs	r0, #1
 8002046:	f011 fd5f 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
 800204a:	9600      	str	r6, [sp, #0]
 800204c:	e9cd 0000 	strd	r0, r0, [sp]

            using(SmartHandles.InterruptState hnd = SmartHandles.InterruptState.Disable())
            {
                RegisterThread( thread );
 8002050:	4620      	mov	r0, r4
 8002052:	4629      	mov	r1, r5
 8002054:	f000 fd36 	bl	8002ac4 <ThreadManager::RegisterThread#3328>

                InsertInPriorityOrder( thread );
 8002058:	4620      	mov	r0, r4
 800205a:	4629      	mov	r1, r5
 800205c:	f000 fd5d 	bl	8002b1a <ThreadManager::InsertInPriorityOrder#3354>

                RescheduleAndRequestContextSwitchIfNeeded( hnd.GetCurrentExceptionMode() );
 8002060:	f000 fd84 	bl	8002b6c <InterruptState::GetCurrentExceptionMode#5592>
 8002064:	4601      	mov	r1, r0
 8002066:	4620      	mov	r0, r4
 8002068:	f000 fda3 	bl	8002bb2 <ThreadManager::RescheduleAndRequestContextSwitchIfNeeded#3337>
            }
 800206c:	9801      	ldr	r0, [sp, #4]
 800206e:	f011 fd4b 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
 8002072:	b002      	add	sp, #8
 8002074:	bd70      	pop	{r4, r5, r6, pc}
 8002076:	2003      	movs	r0, #3
 8002078:	f7fe f932 	bl	80002e0 <BugCheck::Raise#4938>

0800207c <ThreadStateException::.ctor#8071>:
    using System.Runtime.Serialization;

    [Serializable]
    public class ThreadStateException : SystemException
    {
        public ThreadStateException() : base( Environment.GetResourceString( "Arg_ThreadStateException" ) )
 800207c:	b580      	push	{r7, lr}
 800207e:	4903      	ldr	r1, [pc, #12]	; (800208c <ThreadStateException::.ctor#8071+0x10>)
 8002080:	4a03      	ldr	r2, [pc, #12]	; (8002090 <ThreadStateException::.ctor#8071+0x14>)
 8002082:	4479      	add	r1, pc
 8002084:	4411      	add	r1, r2
 8002086:	f003 f8f2 	bl	800526e <SystemException::.ctor#7663>
 800208a:	bd80      	pop	{r7, pc}
 800208c:	17fff72e 	.word	0x17fff72e
 8002090:	e8009efc 	.word	0xe8009efc

08002094 <Thread::get_Priority#4211>:

        public ThreadPriority Priority
        {
            get
            {
                return m_priority;
 8002094:	6900      	ldr	r0, [r0, #16]
 8002096:	4770      	bx	lr

08002098 <Thread::set_Priority#4212>:
 8002098:	6101      	str	r1, [r0, #16]
 800209a:	4770      	bx	lr

0800209c <Holder::Dispose#5905>:
            //
            // Helper Methods
            //

            public void Dispose()
            {
 800209c:	b5b0      	push	{r4, r5, r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	2500      	movs	r5, #0
 80020a2:	4604      	mov	r4, r0
 80020a4:	9501      	str	r5, [sp, #4]
                if(m_wr != null)
 80020a6:	69a0      	ldr	r0, [r4, #24]
 80020a8:	b170      	cbz	r0, 80020c8 <Holder::Dispose#5905+0x2c>
 80020aa:	2001      	movs	r0, #1
 80020ac:	f011 fd2c 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
 80020b0:	9500      	str	r5, [sp, #0]
 80020b2:	e9cd 0000 	strd	r0, r0, [sp]
                {
                    using(SmartHandles.InterruptState.Disable())
                    {
                        m_wr.Recycle();
 80020b6:	69a0      	ldr	r0, [r4, #24]
 80020b8:	f002 fe7c 	bl	8004db4 <WaitingRecord::Recycle#5297>
 80020bc:	61a5      	str	r5, [r4, #24]
 80020be:	e9c4 5502 	strd	r5, r5, [r4, #8]

                        m_thread         = null;
                        m_waitableObject = null;
                        m_wr             = null;
                    }
 80020c2:	9801      	ldr	r0, [sp, #4]
 80020c4:	f011 fd20 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
 80020c8:	b002      	add	sp, #8
 80020ca:	bdb0      	pop	{r4, r5, r7, pc}

080020cc <Context::Populate#5971>:
                RT.BugCheck.Assert( false, BugCheck.StopCode.IllegalMode );
            }
            
            public override void Populate( )
            {
                BugCheck.Raise( BugCheck.StopCode.InvalidOperation );
 80020cc:	b580      	push	{r7, lr}
 80020ce:	2017      	movs	r0, #23
 80020d0:	f7fe f906 	bl	80002e0 <BugCheck::Raise#4938>

080020d4 <Context::PopulateFromDelegate#5973>:
            {
                BugCheck.Raise( BugCheck.StopCode.InvalidOperation );
            }

            public unsafe override void PopulateFromDelegate( Delegate dlg, uint[] stack )
            {
 80020d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80020d8:	b081      	sub	sp, #4
 80020da:	2600      	movs	r6, #0
 80020dc:	460c      	mov	r4, r1
 80020de:	4605      	mov	r5, r0
 80020e0:	4617      	mov	r7, r2
 80020e2:	9600      	str	r6, [sp, #0]
 80020e4:	6860      	ldr	r0, [r4, #4]
 80020e6:	69c0      	ldr	r0, [r0, #28]
 80020e8:	6981      	ldr	r1, [r0, #24]
 80020ea:	4620      	mov	r0, r4
 80020ec:	4788      	blx	r1
 80020ee:	4680      	mov	r8, r0
                //
                // Save the initial stack pointer
                // In the general case the SP will be at the top of the current frame we are building
                // When we do a LongJump though, or we start the thread first, we will have to use the base stack pointer
                //
                this.SP         = GetFirstStackPointerFromPhysicalStack( stackImpl );
 80020f0:	4638      	mov	r0, r7
 80020f2:	f003 f8ad 	bl	8005250 <Context::GetFirstStackPointerFromPhysicalStack#5982>
 80020f6:	f06f 0902 	mvn.w	r9, #2
 80020fa:	e9c5 0902 	strd	r0, r9, [r5, #8]
                this.EXC_RETURN = c_MODE_RETURN__THREAD_PSP;

                //
                // Initial offset from start of stack storage must be at least as large as a frame
                //
                RT.BugCheck.Assert(
 80020fe:	4638      	mov	r0, r7
 8002100:	f7fe fe1a 	bl	8000d38 <Array::GetEndDataPointer#3878>
 8002104:	68aa      	ldr	r2, [r5, #8]
 8002106:	17c1      	asrs	r1, r0, #31
 8002108:	1a80      	subs	r0, r0, r2
 800210a:	f161 0100 	sbc.w	r1, r1, #0
 800210e:	288f      	cmp	r0, #143	; 0x8f
 8002110:	f04f 0000 	mov.w	r0, #0
 8002114:	bf88      	it	hi
 8002116:	2001      	movhi	r0, #1
 8002118:	2900      	cmp	r1, #0
 800211a:	bfc8      	it	gt
 800211c:	2601      	movgt	r6, #1
 800211e:	bf08      	it	eq
 8002120:	4606      	moveq	r6, r0
 8002122:	2e00      	cmp	r6, #0
                    BugCheck.StopCode.StackCorruptionDetected);

                //
                // build the first stack frame
                //
                RegistersOnStackNoFPContext* firstFrame = PointerToSimpleFrame(this.SP);
 8002124:	bf1f      	itttt	ne
 8002126:	68a8      	ldrne	r0, [r5, #8]

                firstFrame->HardwareFrameRegisters.PC         = new UIntPtr( dlgImpl.InnerGetCodePointer().Target.ToPointer() );
 8002128:	68e1      	ldrne	r1, [r4, #12]
 800212a:	9100      	strne	r1, [sp, #0]
 800212c:	6401      	strne	r1, [r0, #64]	; 0x40
 800212e:	bf1f      	itttt	ne
 8002130:	f8c0 8028 	strne.w	r8, [r0, #40]	; 0x28
 8002134:	f04f 7180 	movne.w	r1, #16777216	; 0x1000000
 8002138:	6441      	strne	r1, [r0, #68]	; 0x44
 800213a:	f8c0 9000 	strne.w	r9, [r0]
 800213e:	bf1f      	itttt	ne
 8002140:	2102      	movne	r1, #2
 8002142:	6041      	strne	r1, [r0, #4]
 8002144:	b001      	addne	sp, #4
 8002146:	e8bd 83f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800214a:	2015      	movs	r0, #21
 800214c:	f7fe f8c8 	bl	80002e0 <BugCheck::Raise#4938>

08002150 <Context::Unwind#5975>:
            }
            
#region Tracking Collector and Exceptions  

            public override bool Unwind( )
            {
 8002150:	b570      	push	{r4, r5, r6, lr}
 8002152:	4e09      	ldr	r6, [pc, #36]	; (8002178 <Context::Unwind#5975+0x28>)
                throw new Exception( "Unwind not implemented" );
 8002154:	4809      	ldr	r0, [pc, #36]	; (800217c <Context::Unwind#5975+0x2c>)
 8002156:	447e      	add	r6, pc
 8002158:	1984      	adds	r4, r0, r6
 800215a:	4809      	ldr	r0, [pc, #36]	; (8002180 <Context::Unwind#5975+0x30>)
 800215c:	1981      	adds	r1, r0, r6
 800215e:	4620      	mov	r0, r4
 8002160:	f7fe fbde 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8002164:	4605      	mov	r5, r0
 8002166:	4807      	ldr	r0, [pc, #28]	; (8002184 <Context::Unwind#5975+0x34>)
 8002168:	1981      	adds	r1, r0, r6
 800216a:	4628      	mov	r0, r5
 800216c:	f003 f85e 	bl	800522c <Exception::.ctor#7330>
 8002170:	4620      	mov	r0, r4
 8002172:	4629      	mov	r1, r5
 8002174:	f7fe fbea 	bl	800094c <TypeSystemManager::Throw#5247>
 8002178:	17fff65a 	.word	0x17fff65a
 800217c:	ffffea64 	.word	0xffffea64
 8002180:	e80094fc 	.word	0xe80094fc
 8002184:	e80097fc 	.word	0xe80097fc

08002188 <Context::SwitchTo#17522>:
    public sealed class Processor : Microsoft.CortexM4OnMBED.Processor
    {
        public new class Context : ChipsetModel.Processor.Context
        {
            public override unsafe void SwitchTo( )
            {
 8002188:	b580      	push	{r7, lr}
 800218a:	2011      	movs	r0, #17
 800218c:	f000 ffe2 	bl	8003154 <ProcessorARMv7M::RaiseSupervisorCall#3408>
 8002190:	200e      	movs	r0, #14
 8002192:	f7fe f8a5 	bl	80002e0 <BugCheck::Raise#4938>

08002196 <Context::get_StackPointer#5983>:
            //

            public override UIntPtr StackPointer
            {
                [RT.Inline]
                get { return this.SP; }
 8002196:	6880      	ldr	r0, [r0, #8]
 8002198:	4770      	bx	lr

0800219a <Context::set_StackPointer#5984>:
 800219a:	6081      	str	r1, [r0, #8]
 800219c:	4770      	bx	lr

0800219e <Context::get_ProgramCounter#5987>:
            public override UIntPtr ProgramCounter
            {
                get
                {
                    //return Registers.PC;
                    return (UIntPtr)0;
 800219e:	b580      	push	{r7, lr}
 80021a0:	f7ff fe6a 	bl	8001e78 <UIntPtr::op_Explicit#3040>
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <Context::set_ProgramCounter#5988>:
 80021a6:	4770      	bx	lr

080021a8 <Context::.ctor#17523>:
 80021a8:	b580      	push	{r7, lr}
 80021aa:	f005 fe27 	bl	8007dfc <Context::.ctor#16920>
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <KernelNode`1::.ctor#17830>:
 80021b0:	6101      	str	r1, [r0, #16]
 80021b2:	4770      	bx	lr

080021b4 <KernelList`1::.ctor#17971>:

        //
        // Constructor Methods
        //

        public KernelList()
 80021b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021b6:	b081      	sub	sp, #4
 80021b8:	4604      	mov	r4, r0
 80021ba:	4811      	ldr	r0, [pc, #68]	; (8002200 <KernelList`1::.ctor#17971+0x4c>)
        {
            m_head = new KernelNode< T >( default(T) );
 80021bc:	4911      	ldr	r1, [pc, #68]	; (8002204 <KernelList`1::.ctor#17971+0x50>)
 80021be:	4478      	add	r0, pc
 80021c0:	180d      	adds	r5, r1, r0
 80021c2:	4911      	ldr	r1, [pc, #68]	; (8002208 <KernelList`1::.ctor#17971+0x54>)
 80021c4:	180e      	adds	r6, r1, r0
 80021c6:	4628      	mov	r0, r5
 80021c8:	4631      	mov	r1, r6
 80021ca:	f7fe fba9 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 80021ce:	2100      	movs	r1, #0
 80021d0:	4607      	mov	r7, r0
 80021d2:	f002 fd97 	bl	8004d04 <KernelNode`1::.ctor#18284>
            m_tail = new KernelNode< T >( default(T) );
 80021d6:	4628      	mov	r0, r5
 80021d8:	4631      	mov	r1, r6
 80021da:	60a7      	str	r7, [r4, #8]
 80021dc:	f7fe fba0 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 80021e0:	2100      	movs	r1, #0
 80021e2:	4605      	mov	r5, r0
 80021e4:	f002 fd8e 	bl	8004d04 <KernelNode`1::.ctor#18284>
 80021e8:	60e5      	str	r5, [r4, #12]

            m_head.Next     = m_tail;
 80021ea:	4629      	mov	r1, r5
 80021ec:	68a0      	ldr	r0, [r4, #8]
 80021ee:	f006 fbd8 	bl	80089a2 <KernelNode`1::set_Next#18296>
            m_tail.Previous = m_head;
 80021f2:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 80021f6:	f006 fbd6 	bl	80089a6 <KernelNode`1::set_Previous#18298>
 80021fa:	b001      	add	sp, #4
 80021fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021fe:	46c0      	nop			; (mov r8, r8)
 8002200:	17fff5f2 	.word	0x17fff5f2
 8002204:	ffffea64 	.word	0xffffea64
 8002208:	e800958c 	.word	0xe800958c

0800220c <KernelList`1::.ctor#17983>:

        //
        // Constructor Methods
        //

        public KernelList()
 800220c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800220e:	b081      	sub	sp, #4
 8002210:	4604      	mov	r4, r0
 8002212:	4811      	ldr	r0, [pc, #68]	; (8002258 <KernelList`1::.ctor#17983+0x4c>)
        {
            m_head = new KernelNode< T >( default(T) );
 8002214:	4911      	ldr	r1, [pc, #68]	; (800225c <KernelList`1::.ctor#17983+0x50>)
 8002216:	4478      	add	r0, pc
 8002218:	180d      	adds	r5, r1, r0
 800221a:	4911      	ldr	r1, [pc, #68]	; (8002260 <KernelList`1::.ctor#17983+0x54>)
 800221c:	180e      	adds	r6, r1, r0
 800221e:	4628      	mov	r0, r5
 8002220:	4631      	mov	r1, r6
 8002222:	f7fe fb7d 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8002226:	2100      	movs	r1, #0
 8002228:	4607      	mov	r7, r0
 800222a:	f002 fded 	bl	8004e08 <KernelNode`1::.ctor#17996>
            m_tail = new KernelNode< T >( default(T) );
 800222e:	4628      	mov	r0, r5
 8002230:	4631      	mov	r1, r6
 8002232:	60a7      	str	r7, [r4, #8]
 8002234:	f7fe fb74 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8002238:	2100      	movs	r1, #0
 800223a:	4605      	mov	r5, r0
 800223c:	f002 fde4 	bl	8004e08 <KernelNode`1::.ctor#17996>
 8002240:	60e5      	str	r5, [r4, #12]

            m_head.Next     = m_tail;
 8002242:	4629      	mov	r1, r5
 8002244:	68a0      	ldr	r0, [r4, #8]
 8002246:	f006 fbbd 	bl	80089c4 <KernelNode`1::set_Next#18008>
            m_tail.Previous = m_head;
 800224a:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 800224e:	f006 fbbb 	bl	80089c8 <KernelNode`1::set_Previous#18010>
 8002252:	b001      	add	sp, #4
 8002254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002256:	46c0      	nop			; (mov r8, r8)
 8002258:	17fff59a 	.word	0x17fff59a
 800225c:	ffffea64 	.word	0xffffea64
 8002260:	e80096ac 	.word	0xe80096ac

08002264 <ThreadStart::Invoke#8064>:
            [Inline]
            [DisableNullChecks( ApplyRecursively = true )]
            public override void Prologue( string typeFullName,
                                           string methodFullName,
                                           TS.MethodRepresentation.BuildTimeAttributes attribs )
            {
 8002264:	b570      	push	{r4, r5, r6, lr}
 8002266:	6901      	ldr	r1, [r0, #16]
 8002268:	b169      	cbz	r1, 8002286 <ThreadStart::Invoke#8064+0x22>
 800226a:	688d      	ldr	r5, [r1, #8]
 800226c:	f101 040c 	add.w	r4, r1, #12
 8002270:	2600      	movs	r6, #0
 8002272:	42ae      	cmp	r6, r5
 8002274:	bfa8      	it	ge
 8002276:	bd70      	popge	{r4, r5, r6, pc}
 8002278:	f854 1026 	ldr.w	r1, [r4, r6, lsl #2]
 800227c:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 8002280:	4788      	blx	r1
 8002282:	3601      	adds	r6, #1
 8002284:	e7f5      	b.n	8002272 <ThreadStart::Invoke#8064+0xe>
 8002286:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
 800228a:	4608      	mov	r0, r1
 800228c:	4790      	blx	r2
 800228e:	bd70      	pop	{r4, r5, r6, pc}

08002290 <Thread::Entrypoint#4186>:
            m_swappedOutContext.SetupForExceptionHandling( mode );
        }

        [BottomOfCallStack()]
        private void Entrypoint()
        {
 8002290:	4604      	mov	r4, r0
            try
            {
                m_start();
 8002292:	6960      	ldr	r0, [r4, #20]
 8002294:	f7ff ffe6 	bl	8002264 <ThreadStart::Invoke#8064>
            }
            catch
            {
            }

            m_state |= ThreadState.StopRequested;
 8002298:	6a60      	ldr	r0, [r4, #36]	; 0x24

            ThreadManager.Instance.RemoveThread( this );
 800229a:	4906      	ldr	r1, [pc, #24]	; (80022b4 <Thread::Entrypoint#4186+0x24>)
            }
            catch
            {
            }

            m_state |= ThreadState.StopRequested;
 800229c:	f040 0001 	orr.w	r0, r0, #1
 80022a0:	6260      	str	r0, [r4, #36]	; 0x24
 80022a2:	4803      	ldr	r0, [pc, #12]	; (80022b0 <Thread::Entrypoint#4186+0x20>)
 80022a4:	4478      	add	r0, pc

            ThreadManager.Instance.RemoveThread( this );
 80022a6:	4408      	add	r0, r1
 80022a8:	4621      	mov	r1, r4
 80022aa:	f000 f805 	bl	80022b8 <ARMv7ThreadManager::RemoveThread#5218>
 80022ae:	4770      	bx	lr
 80022b0:	17fff50c 	.word	0x17fff50c
 80022b4:	ffffea1c 	.word	0xffffea1c

080022b8 <ARMv7ThreadManager::RemoveThread#5218>:
                
            BugCheck.Assert( false, BugCheck.StopCode.CtxSwtchFailed );
        }
        
        public override void RemoveThread( ThreadImpl thread )
        {
 80022b8:	b580      	push	{r7, lr}
            //
            // This shoudl scheduel a context switch
            //
            base.RemoveThread( thread ); 
 80022ba:	f000 fc8d 	bl	8002bd8 <ThreadManager::RemoveThread#3330>
                
            //
            // If context switch was not already performed, we need to jump else where
            //
            ProcessorARMv7M.RaiseSupervisorCall( ProcessorARMv7M.SVC_Code.SupervisorCall__RetireThread );
 80022be:	2013      	movs	r0, #19
 80022c0:	f000 ff48 	bl	8003154 <ProcessorARMv7M::RaiseSupervisorCall#3408>
 80022c4:	2014      	movs	r0, #20
 80022c6:	f7fe f80b 	bl	80002e0 <BugCheck::Raise#4938>
 80022ca:	46c0      	nop			; (mov r8, r8)

080022cc <Thread::GetCurrentException#4203>:
        //--//

        [NoInline]
        [TS.WellKnownMethod( "ThreadImpl_GetCurrentException" )]
        public static Exception GetCurrentException()
        {
 80022cc:	4803      	ldr	r0, [pc, #12]	; (80022dc <Thread::GetCurrentException#4203+0x10>)
        {
            [Inline]
            [TS.WellKnownMethod( "ThreadImpl_get_CurrentThread" )]
            get
            {
                return s_currentThread;
 80022ce:	4904      	ldr	r1, [pc, #16]	; (80022e0 <Thread::GetCurrentException#4203+0x14>)
 80022d0:	4478      	add	r0, pc
 80022d2:	4408      	add	r0, r1
 80022d4:	f8d0 00bc 	ldr.w	r0, [r0, #188]	; 0xbc

        public Exception CurrentException
        {
            get
            {
                return m_currentException;
 80022d8:	68c0      	ldr	r0, [r0, #12]
 80022da:	4770      	bx	lr
 80022dc:	17fff4e0 	.word	0x17fff4e0
 80022e0:	fffffe3c 	.word	0xfffffe3c

080022e4 <Thread::ReleasedProcessor#4187>:
        }

        //--//

        public void ReleasedProcessor()
        {
 80022e4:	b510      	push	{r4, lr}
 80022e6:	4604      	mov	r4, r0
                // For ARMv7 we are using the async PendSV exception, which is delivered with ISRs enabled
                //
                BugCheck.AssertInterruptsOff();
#endif

            m_activeTime.Stop();
 80022e8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80022ec:	f000 f809 	bl	8002302 <KernelPerformanceCounter::Stop#4955>

            if((m_state & ThreadState.StopRequested) != 0)
 80022f0:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 80022f4:	f010 0f01 	tst.w	r0, #1
            {
                Stop();
 80022f8:	bf1c      	itt	ne
 80022fa:	4620      	movne	r0, r4
 80022fc:	f000 f812 	blne	8002324 <Thread::Stop#4198>
 8002300:	bd10      	pop	{r4, pc}

08002302 <KernelPerformanceCounter::Stop#4955>:
        {
            m_start = Peripherals.Instance.ReadPerformanceCounter();
        }

        public void Stop()
        {
 8002302:	b570      	push	{r4, r5, r6, lr}
 8002304:	4604      	mov	r4, r0
            m_hits  += 1;
 8002306:	6820      	ldr	r0, [r4, #0]
 8002308:	3001      	adds	r0, #1
 800230a:	6020      	str	r0, [r4, #0]
            m_total += (Peripherals.Instance.ReadPerformanceCounter() - m_start);
 800230c:	e9d4 5602 	ldrd	r5, r6, [r4, #8]
 8002310:	f011 fe98 	bl	8014044 <tmp_sys_timer_read>
 8002314:	6861      	ldr	r1, [r4, #4]
 8002316:	1a40      	subs	r0, r0, r1
 8002318:	1940      	adds	r0, r0, r5
 800231a:	f146 0100 	adc.w	r1, r6, #0
 800231e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8002322:	bd70      	pop	{r4, r5, r6, pc}

08002324 <Thread::Stop#4198>:
        }

        //--//

        public void Stop()
        {
 8002324:	b510      	push	{r4, lr}
 8002326:	4604      	mov	r4, r0
 8002328:	4808      	ldr	r0, [pc, #32]	; (800234c <Thread::Stop#4198+0x28>)
            ThreadManager.Instance.RetireThread( this );
 800232a:	4909      	ldr	r1, [pc, #36]	; (8002350 <Thread::Stop#4198+0x2c>)
 800232c:	4478      	add	r0, pc
 800232e:	4408      	add	r0, r1
 8002330:	4621      	mov	r1, r4
 8002332:	f000 f9f2 	bl	800271a <ThreadManager::RetireThread#3331>

            m_state |= ThreadState.Stopped;
 8002336:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002338:	f040 0010 	orr.w	r0, r0, #16
 800233c:	6260      	str	r0, [r4, #36]	; 0x24

            if(m_joinEvent != null)
 800233e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002340:	2800      	cmp	r0, #0
            {
                m_joinEvent.Set();
 8002342:	bf1c      	itt	ne
 8002344:	6b20      	ldrne	r0, [r4, #48]	; 0x30
 8002346:	f000 f9f6 	blne	8002736 <EventWaitHandle::Set#4116>
 800234a:	bd10      	pop	{r4, pc}
 800234c:	17fff484 	.word	0x17fff484
 8002350:	ffffea1c 	.word	0xffffea1c

08002354 <Thread::AcquiredProcessor#4188>:
                Stop();
            }
        }

        public void AcquiredProcessor()
        {
 8002354:	b580      	push	{r7, lr}
#if !ARMv7
            BugCheck.AssertInterruptsOff();
#endif

            m_activeTime.Start();
 8002356:	303c      	adds	r0, #60	; 0x3c
 8002358:	f000 f801 	bl	800235e <KernelPerformanceCounter::Start#4953>
 800235c:	bd80      	pop	{r7, pc}

0800235e <KernelPerformanceCounter::Start#4953>:
        //
        // Helper Methods
        //

        public void Start()
        {
 800235e:	b510      	push	{r4, lr}
 8002360:	4604      	mov	r4, r0
 8002362:	f011 fe6f 	bl	8014044 <tmp_sys_timer_read>
 8002366:	6060      	str	r0, [r4, #4]
 8002368:	bd10      	pop	{r4, pc}
 800236a:	46c0      	nop			; (mov r8, r8)

0800236c <Thread::Yield#4189>:
        }

        //--//

        public void Yield()
        {
 800236c:	b580      	push	{r7, lr}
 800236e:	4803      	ldr	r0, [pc, #12]	; (800237c <Thread::Yield#4189+0x10>)
            ThreadManager.Instance.Yield();
 8002370:	4903      	ldr	r1, [pc, #12]	; (8002380 <Thread::Yield#4189+0x14>)
 8002372:	4478      	add	r0, pc
 8002374:	4408      	add	r0, r1
 8002376:	f000 f805 	bl	8002384 <ThreadManager::Yield#3332>
 800237a:	bd80      	pop	{r7, pc}
 800237c:	17fff43e 	.word	0x17fff43e
 8002380:	ffffea1c 	.word	0xffffea1c

08002384 <ThreadManager::Yield#3332>:
        }

        //--//

        public virtual void Yield()
        {
 8002384:	b570      	push	{r4, r5, r6, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	4604      	mov	r4, r0
 800238a:	4812      	ldr	r0, [pc, #72]	; (80023d4 <ThreadManager::Yield#3332+0x50>)
            BugCheck.AssertInterruptsOn();
 800238c:	4912      	ldr	r1, [pc, #72]	; (80023d8 <ThreadManager::Yield#3332+0x54>)
 800238e:	2600      	movs	r6, #0
 8002390:	9601      	str	r6, [sp, #4]
 8002392:	4478      	add	r0, pc
 8002394:	180d      	adds	r5, r1, r0
 8002396:	f000 fc56 	bl	8002c46 <BugCheck::AssertInterruptsOn#4946>
 800239a:	f8d5 50bc 	ldr.w	r5, [r5, #188]	; 0xbc
 800239e:	2d00      	cmp	r5, #0
 80023a0:	4628      	mov	r0, r5
 80023a2:	bf18      	it	ne
 80023a4:	2001      	movne	r0, #1

            ThreadImpl thisThread = ThreadImpl.CurrentThread;

            BugCheck.Assert( thisThread != null, BugCheck.StopCode.NoCurrentThread );
 80023a6:	b190      	cbz	r0, 80023ce <ThreadManager::Yield#3332+0x4a>
 80023a8:	2001      	movs	r0, #1
 80023aa:	f011 fbad 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
 80023ae:	9600      	str	r6, [sp, #0]
 80023b0:	e9cd 0000 	strd	r0, r0, [sp]

            using (SmartHandles.InterruptState hnd = SmartHandles.InterruptState.Disable())
            {
                InsertInPriorityOrder(thisThread);
 80023b4:	4620      	mov	r0, r4
 80023b6:	4629      	mov	r1, r5
 80023b8:	f000 fbaf 	bl	8002b1a <ThreadManager::InsertInPriorityOrder#3354>

                RescheduleAndRequestContextSwitchIfNeeded(HardwareException.None);
 80023bc:	4620      	mov	r0, r4
 80023be:	2100      	movs	r1, #0
 80023c0:	f000 fbf7 	bl	8002bb2 <ThreadManager::RescheduleAndRequestContextSwitchIfNeeded#3337>
            }
 80023c4:	9801      	ldr	r0, [sp, #4]
 80023c6:	f011 fb9f 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
 80023ca:	b002      	add	sp, #8
 80023cc:	bd70      	pop	{r4, r5, r6, pc}
 80023ce:	2004      	movs	r0, #4
 80023d0:	f7fd ff86 	bl	80002e0 <BugCheck::Raise#4938>
 80023d4:	17fff41e 	.word	0x17fff41e
 80023d8:	fffffe3c 	.word	0xfffffe3c

080023dc <Thread::RegisterWait#4190>:
        }

        public void RegisterWait( KernelNode< Synchronization.WaitingRecord > node )
        {
 80023dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023e0:	b088      	sub	sp, #32
 80023e2:	4605      	mov	r5, r0
 80023e4:	4828      	ldr	r0, [pc, #160]	; (8002488 <Thread::RegisterWait#4190+0xac>)
 80023e6:	4688      	mov	r8, r1
            BugCheck.AssertInterruptsOff();

            SchedulerTime timeout = node.Target.Timeout;

            if(timeout == SchedulerTime.MaxValue)
 80023e8:	4928      	ldr	r1, [pc, #160]	; (800248c <Thread::RegisterWait#4190+0xb0>)
 80023ea:	4478      	add	r0, pc
 80023ec:	180c      	adds	r4, r1, r0
            ThreadManager.Instance.Yield();
        }

        public void RegisterWait( KernelNode< Synchronization.WaitingRecord > node )
        {
            BugCheck.AssertInterruptsOff();
 80023ee:	f000 f853 	bl	8002498 <BugCheck::AssertInterruptsOff#4945>
 80023f2:	f8d8 2010 	ldr.w	r2, [r8, #16]

            SchedulerTime timeout = node.Target.Timeout;

            if(timeout == SchedulerTime.MaxValue)
 80023f6:	e9d4 011f 	ldrd	r0, r1, [r4, #124]	; 0x7c
            ThreadManager.Instance.Yield();
        }

        public void RegisterWait( KernelNode< Synchronization.WaitingRecord > node )
        {
            BugCheck.AssertInterruptsOff();
 80023fa:	e9d2 6706 	ldrd	r6, r7, [r2, #24]
 80023fe:	aa04      	add	r2, sp, #16
 8002400:	e882 00c3 	stmia.w	r2, {r0, r1, r6, r7}

            SchedulerTime timeout = node.Target.Timeout;

            if(timeout == SchedulerTime.MaxValue)
 8002404:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002408:	4059      	eors	r1, r3
 800240a:	4050      	eors	r0, r2
 800240c:	4308      	orrs	r0, r1
            {
                //
                // No timeout, add at end.
                //
                m_pendingObjects.InsertAtTail( node );
 800240e:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8002410:	d105      	bne.n	800241e <Thread::RegisterWait#4190+0x42>
 8002412:	4641      	mov	r1, r8
 8002414:	f000 f86a 	bl	80024ec <KernelList`1::InsertAtTail#17984>
 8002418:	b008      	add	sp, #32
 800241a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            else
            {
                //
                // Insert in order.
                //
                KernelNode< Synchronization.WaitingRecord > node2            = m_pendingObjects.StartOfForwardWalk;
 800241e:	f000 f848 	bl	80024b2 <KernelList`1::get_StartOfForwardWalk#17990>
 8002422:	4605      	mov	r5, r0
 8002424:	2401      	movs	r4, #1
 8002426:	e001      	b.n	800242c <Thread::RegisterWait#4190+0x50>
 8002428:	68ad      	ldr	r5, [r5, #8]
 800242a:	2400      	movs	r4, #0
                bool                                        fInvalidateTimer = true;

                while(node2.IsValidForForwardMove)
 800242c:	4628      	mov	r0, r5
 800242e:	f000 f843 	bl	80024b8 <KernelNode`1::get_IsValidForForwardMove#18005>
 8002432:	f010 0fff 	tst.w	r0, #255	; 0xff
 8002436:	d016      	beq.n	8002466 <Thread::RegisterWait#4190+0x8a>
 8002438:	6928      	ldr	r0, [r5, #16]
 800243a:	69c1      	ldr	r1, [r0, #28]
 800243c:	6980      	ldr	r0, [r0, #24]
 800243e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002442:	e9cd 6700 	strd	r6, r7, [sp]
 8002446:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
                {
                    if(node2.Target.Timeout > timeout)
 800244a:	42b0      	cmp	r0, r6
 800244c:	f04f 0000 	mov.w	r0, #0
 8002450:	bf98      	it	ls
 8002452:	2001      	movls	r0, #1
 8002454:	42b9      	cmp	r1, r7
 8002456:	f04f 0100 	mov.w	r1, #0
 800245a:	bf98      	it	ls
 800245c:	2101      	movls	r1, #1
 800245e:	bf08      	it	eq
 8002460:	4601      	moveq	r1, r0
 8002462:	2900      	cmp	r1, #0
 8002464:	d1e0      	bne.n	8002428 <Thread::RegisterWait#4190+0x4c>

                    node2            = node2.Next;
                    fInvalidateTimer = false;
                }

                node.InsertBefore( node2 );
 8002466:	4640      	mov	r0, r8
 8002468:	4629      	mov	r1, r5
 800246a:	f000 f82a 	bl	80024c2 <KernelNode`1::InsertBefore#17997>

                if(fInvalidateTimer)
 800246e:	f014 0fff 	tst.w	r4, #255	; 0xff
 8002472:	d005      	beq.n	8002480 <Thread::RegisterWait#4190+0xa4>
 8002474:	4806      	ldr	r0, [pc, #24]	; (8002490 <Thread::RegisterWait#4190+0xb4>)
                {
                    ThreadManager.Instance.InvalidateNextWaitTimer();
 8002476:	4907      	ldr	r1, [pc, #28]	; (8002494 <Thread::RegisterWait#4190+0xb8>)
 8002478:	4478      	add	r0, pc
 800247a:	4408      	add	r0, r1
 800247c:	f000 f82e 	bl	80024dc <ThreadManager::InvalidateNextWaitTimer#3347>
 8002480:	b008      	add	sp, #32
 8002482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002486:	46c0      	nop			; (mov r8, r8)
 8002488:	17fff3c6 	.word	0x17fff3c6
 800248c:	fffffe3c 	.word	0xfffffe3c
 8002490:	17fff338 	.word	0x17fff338
 8002494:	ffffea1c 	.word	0xffffea1c

08002498 <BugCheck::AssertInterruptsOff#4945>:
        }

        //--//

        public static void AssertInterruptsOff()
        {
 8002498:	b580      	push	{r7, lr}
 800249a:	f011 fb2b 	bl	8013af4 <CMSIS_STUB_SCB__get_BASEPRI>
 800249e:	2100      	movs	r1, #0
 80024a0:	2802      	cmp	r0, #2
 80024a2:	bf38      	it	cc
 80024a4:	2101      	movcc	r1, #1

        [Inline]
        public static void Assert( bool     condition ,
                                   StopCode code      )
        {
            if(!condition)
 80024a6:	2900      	cmp	r1, #0
 80024a8:	bf18      	it	ne
 80024aa:	bd80      	popne	{r7, pc}
            {
                Raise( code );
 80024ac:	2000      	movs	r0, #0
 80024ae:	f7fd ff17 	bl	80002e0 <BugCheck::Raise#4938>

080024b2 <KernelList`1::get_StartOfForwardWalk#17990>:

        public KernelNode< T > StartOfForwardWalk
        {
            get
            {
                return m_head.Next;
 80024b2:	6880      	ldr	r0, [r0, #8]
 80024b4:	6880      	ldr	r0, [r0, #8]
 80024b6:	4770      	bx	lr

080024b8 <KernelNode`1::get_IsValidForForwardMove#18005>:

        public bool IsValidForForwardMove
        {
            get
            {
                return m_next != null;
 80024b8:	6880      	ldr	r0, [r0, #8]
 80024ba:	2800      	cmp	r0, #0
 80024bc:	bf18      	it	ne
 80024be:	2001      	movne	r0, #1
 80024c0:	4770      	bx	lr

080024c2 <KernelNode`1::InsertBefore#17997>:
        // Helper Methods
        //

        public void InsertBefore( KernelNode< T > place )
        {
            if(m_next != null)
 80024c2:	6882      	ldr	r2, [r0, #8]
 80024c4:	2a00      	cmp	r2, #0
        //--//

        [Inline]
        private void RemoveFromList_NoClear()
        {
            KernelNode< T > next = m_next;
 80024c6:	bf1e      	ittt	ne
 80024c8:	e9d0 2302 	ldrdne	r2, r3, [r0, #8]
 80024cc:	60d3      	strne	r3, [r2, #12]
 80024ce:	609a      	strne	r2, [r3, #8]
            if(m_next != null)
            {
                RemoveFromList_NoClear();
            }

            KernelNode< T > prev = place.m_previous;
 80024d0:	68ca      	ldr	r2, [r1, #12]
 80024d2:	6090      	str	r0, [r2, #8]
 80024d4:	e9c0 1202 	strd	r1, r2, [r0, #8]
 80024d8:	60c8      	str	r0, [r1, #12]
 80024da:	4770      	bx	lr

080024dc <ThreadManager::InvalidateNextWaitTimer#3347>:
        public abstract ThreadImpl AbortThread         { get; }

        //--//

        public void InvalidateNextWaitTimer()
        {
 80024dc:	b580      	push	{r7, lr}
            if(m_noInvalidateNextWaitTimerRecursion == false)
 80024de:	f890 1020 	ldrb.w	r1, [r0, #32]
 80024e2:	2900      	cmp	r1, #0
            {
                ComputeNextTimeout();
 80024e4:	bf08      	it	eq
 80024e6:	f000 fc65 	bleq	8002db4 <ThreadManager::ComputeNextTimeout#3349>
 80024ea:	bd80      	pop	{r7, pc}

080024ec <KernelList`1::InsertAtTail#17984>:
        //
        // Helper Methods
        //

        public void InsertAtTail( KernelNode< T > node )
        {
 80024ec:	b580      	push	{r7, lr}
            node.InsertBefore( m_tail );
 80024ee:	68c2      	ldr	r2, [r0, #12]
 80024f0:	4608      	mov	r0, r1
 80024f2:	4611      	mov	r1, r2
 80024f4:	f7ff ffe5 	bl	80024c2 <KernelNode`1::InsertBefore#17997>
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	46c0      	nop			; (mov r8, r8)

080024fc <Thread::UnregisterWait#4192>:
                }
            }
        }

        public void UnregisterWait( KernelNode< Synchronization.WaitingRecord > node )
        {
 80024fc:	b5b0      	push	{r4, r5, r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	4604      	mov	r4, r0
 8002502:	480f      	ldr	r0, [pc, #60]	; (8002540 <Thread::UnregisterWait#4192+0x44>)

            node.RemoveFromList();

            SchedulerTime timeout = node.Target.Timeout;

            if(timeout != SchedulerTime.MaxValue)
 8002504:	490f      	ldr	r1, [pc, #60]	; (8002544 <Thread::UnregisterWait#4192+0x48>)
 8002506:	4478      	add	r0, pc
 8002508:	180d      	adds	r5, r1, r0
            }
        }

        public void UnregisterWait( KernelNode< Synchronization.WaitingRecord > node )
        {
            BugCheck.AssertInterruptsOff();
 800250a:	f7ff ffc5 	bl	8002498 <BugCheck::AssertInterruptsOff#4945>

            node.RemoveFromList();
 800250e:	4620      	mov	r0, r4
 8002510:	f000 f81e 	bl	8002550 <KernelNode`1::RemoveFromList#17998>
 8002514:	6922      	ldr	r2, [r4, #16]

            SchedulerTime timeout = node.Target.Timeout;

            if(timeout != SchedulerTime.MaxValue)
 8002516:	e9d5 011f 	ldrd	r0, r1, [r5, #124]	; 0x7c

        public void UnregisterWait( KernelNode< Synchronization.WaitingRecord > node )
        {
            BugCheck.AssertInterruptsOff();

            node.RemoveFromList();
 800251a:	69d3      	ldr	r3, [r2, #28]
 800251c:	6992      	ldr	r2, [r2, #24]
 800251e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}

            SchedulerTime timeout = node.Target.Timeout;

            if(timeout != SchedulerTime.MaxValue)
 8002522:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002526:	4059      	eors	r1, r3
 8002528:	4050      	eors	r0, r2
 800252a:	4308      	orrs	r0, r1
 800252c:	d005      	beq.n	800253a <Thread::UnregisterWait#4192+0x3e>
 800252e:	4806      	ldr	r0, [pc, #24]	; (8002548 <Thread::UnregisterWait#4192+0x4c>)
            {
                ThreadManager.Instance.InvalidateNextWaitTimer();
 8002530:	4906      	ldr	r1, [pc, #24]	; (800254c <Thread::UnregisterWait#4192+0x50>)
 8002532:	4478      	add	r0, pc
 8002534:	4408      	add	r0, r1
 8002536:	f7ff ffd1 	bl	80024dc <ThreadManager::InvalidateNextWaitTimer#3347>
 800253a:	b004      	add	sp, #16
 800253c:	bdb0      	pop	{r4, r5, r7, pc}
 800253e:	46c0      	nop			; (mov r8, r8)
 8002540:	17fff2aa 	.word	0x17fff2aa
 8002544:	fffffe3c 	.word	0xfffffe3c
 8002548:	17fff27e 	.word	0x17fff27e
 800254c:	ffffea1c 	.word	0xffffea1c

08002550 <KernelNode`1::RemoveFromList#17998>:
            this.ConnectToNext( place );
        }

        public void RemoveFromList()
        {
            if(m_next != null)
 8002550:	6881      	ldr	r1, [r0, #8]
 8002552:	2900      	cmp	r1, #0
        //--//

        [Inline]
        private void RemoveFromList_NoClear()
        {
            KernelNode< T > next = m_next;
 8002554:	bf1e      	ittt	ne
 8002556:	e9d0 1202 	ldrdne	r1, r2, [r0, #8]
 800255a:	60ca      	strne	r2, [r1, #12]
 800255c:	6091      	strne	r1, [r2, #8]
 800255e:	2100      	movs	r1, #0
 8002560:	e9c0 1102 	strd	r1, r1, [r0, #8]
 8002564:	4770      	bx	lr
 8002566:	46c0      	nop			; (mov r8, r8)

08002568 <Thread::GetFirstTimeout#4193>:
            }
        }

        public SchedulerTime GetFirstTimeout()
        {
 8002568:	b510      	push	{r4, lr}
 800256a:	4604      	mov	r4, r0
            BugCheck.AssertInterruptsOff();
 800256c:	f7ff ff94 	bl	8002498 <BugCheck::AssertInterruptsOff#4945>

            Synchronization.WaitingRecord wr = m_pendingObjects.FirstTarget();
 8002570:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002572:	f000 f811 	bl	8002598 <KernelList`1::FirstTarget#17986>

            return wr != null ? wr.Timeout : SchedulerTime.MaxValue;
 8002576:	2800      	cmp	r0, #0
 8002578:	bf1e      	ittt	ne
 800257a:	69c1      	ldrne	r1, [r0, #28]
 800257c:	6980      	ldrne	r0, [r0, #24]
 800257e:	bd10      	popne	{r4, pc}
 8002580:	4803      	ldr	r0, [pc, #12]	; (8002590 <Thread::GetFirstTimeout#4193+0x28>)
 8002582:	4904      	ldr	r1, [pc, #16]	; (8002594 <Thread::GetFirstTimeout#4193+0x2c>)
 8002584:	4478      	add	r0, pc
 8002586:	4408      	add	r0, r1
 8002588:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 800258c:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 800258e:	bd10      	pop	{r4, pc}
 8002590:	17fff22c 	.word	0x17fff22c
 8002594:	fffffe3c 	.word	0xfffffe3c

08002598 <KernelList`1::FirstTarget#17986>:
            return null;
        }

        public T FirstTarget()
        {
            KernelNode< T > node = m_head.Next;
 8002598:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
 800259c:	6888      	ldr	r0, [r1, #8]

            if(node != m_tail)
 800259e:	4290      	cmp	r0, r2
 80025a0:	bf14      	ite	ne
 80025a2:	6900      	ldrne	r0, [r0, #16]
 80025a4:	2000      	moveq	r0, #0
 80025a6:	4770      	bx	lr

080025a8 <Thread::ProcessWaitExpiration#4194>:
        }

        public void ProcessWaitExpiration( SchedulerTime currentTime )
        {
 80025a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025ac:	b084      	sub	sp, #16
 80025ae:	461d      	mov	r5, r3
 80025b0:	4616      	mov	r6, r2
 80025b2:	4680      	mov	r8, r0
            BugCheck.AssertInterruptsOff();
 80025b4:	f7ff ff70 	bl	8002498 <BugCheck::AssertInterruptsOff#4945>

            KernelNode< Synchronization.WaitingRecord > node    = m_pendingObjects.StartOfForwardWalk;
 80025b8:	f8d8 0038 	ldr.w	r0, [r8, #56]	; 0x38
 80025bc:	f7ff ff79 	bl	80024b2 <KernelList`1::get_StartOfForwardWalk#17990>
 80025c0:	4607      	mov	r7, r0
 80025c2:	2400      	movs	r4, #0
 80025c4:	e004      	b.n	80025d0 <Thread::ProcessWaitExpiration#4194+0x28>
 80025c6:	68bf      	ldr	r7, [r7, #8]
 80025c8:	2100      	movs	r1, #0
                }
                else
                {
                    KernelNode< Synchronization.WaitingRecord > nodeNext = node.Next;

                    wr.RequestFulfilled = false;
 80025ca:	f000 f835 	bl	8002638 <WaitingRecord::set_RequestFulfilled#5304>
 80025ce:	2401      	movs	r4, #1
            BugCheck.AssertInterruptsOff();

            KernelNode< Synchronization.WaitingRecord > node    = m_pendingObjects.StartOfForwardWalk;
            bool                                        fWakeup = false;

            while(node.IsValidForForwardMove)
 80025d0:	4638      	mov	r0, r7
 80025d2:	f7ff ff71 	bl	80024b8 <KernelNode`1::get_IsValidForForwardMove#18005>
 80025d6:	f010 0fff 	tst.w	r0, #255	; 0xff
 80025da:	d016      	beq.n	800260a <Thread::ProcessWaitExpiration#4194+0x62>
 80025dc:	6938      	ldr	r0, [r7, #16]
 80025de:	e9d0 1206 	ldrd	r1, r2, [r0, #24]
 80025e2:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80025e6:	e9cd 6500 	strd	r6, r5, [sp]
 80025ea:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
                Synchronization.WaitingRecord wr = node.Target;

                //
                // The items are kept sorted, so we can stop at the first failure.
                //
                if(wr.Timeout > currentTime)
 80025ee:	42b1      	cmp	r1, r6
 80025f0:	f04f 0100 	mov.w	r1, #0
 80025f4:	bf98      	it	ls
 80025f6:	2101      	movls	r1, #1
 80025f8:	42aa      	cmp	r2, r5
 80025fa:	f04f 0200 	mov.w	r2, #0
 80025fe:	bf98      	it	ls
 8002600:	2201      	movls	r2, #1
 8002602:	bf08      	it	eq
 8002604:	460a      	moveq	r2, r1
 8002606:	2a00      	cmp	r2, #0
 8002608:	d1dd      	bne.n	80025c6 <Thread::ProcessWaitExpiration#4194+0x1e>

                    node = nodeNext;
                }
            }

            if(fWakeup)
 800260a:	f014 0fff 	tst.w	r4, #255	; 0xff
            {
                Wakeup();
 800260e:	bf1c      	itt	ne
 8002610:	4640      	movne	r0, r8
 8002612:	f000 f803 	blne	800261c <Thread::Wakeup#4195>
 8002616:	b004      	add	sp, #16
 8002618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800261c <Thread::Wakeup#4195>:
            }
        }

        public void Wakeup()
        {
 800261c:	b580      	push	{r7, lr}
 800261e:	4601      	mov	r1, r0
 8002620:	4803      	ldr	r0, [pc, #12]	; (8002630 <Thread::Wakeup#4195+0x14>)
            ThreadManager.Instance.Wakeup( this );
 8002622:	4a04      	ldr	r2, [pc, #16]	; (8002634 <Thread::Wakeup#4195+0x18>)
 8002624:	4478      	add	r0, pc
 8002626:	4410      	add	r0, r2
 8002628:	f000 f814 	bl	8002654 <ThreadManager::Wakeup#3334>
 800262c:	bd80      	pop	{r7, pc}
 800262e:	46c0      	nop			; (mov r8, r8)
 8002630:	17fff18c 	.word	0x17fff18c
 8002634:	ffffea1c 	.word	0xffffea1c

08002638 <WaitingRecord::set_RequestFulfilled#5304>:
            {
                return m_fulfilled;
            }

            set
            {
 8002638:	b580      	push	{r7, lr}
                if(m_processed == false)
 800263a:	f890 2020 	ldrb.w	r2, [r0, #32]
 800263e:	2a00      	cmp	r2, #0
 8002640:	bf18      	it	ne
 8002642:	bd80      	popne	{r7, pc}
 8002644:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
 8002648:	2101      	movs	r1, #1
 800264a:	f880 1020 	strb.w	r1, [r0, #32]
                {
                    m_fulfilled = value;
                    m_processed = true;

                    Disconnect();
 800264e:	f002 fc57 	bl	8004f00 <WaitingRecord::Disconnect#5298>
 8002652:	bd80      	pop	{r7, pc}

08002654 <ThreadManager::Wakeup#3334>:
                }
            }
        }

        public virtual void Wakeup( ThreadImpl thread )
        {
 8002654:	b570      	push	{r4, r5, r6, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	4604      	mov	r4, r0
 800265a:	2600      	movs	r6, #0
 800265c:	2001      	movs	r0, #1
 800265e:	460d      	mov	r5, r1
 8002660:	9601      	str	r6, [sp, #4]
 8002662:	f011 fa51 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
 8002666:	9600      	str	r6, [sp, #0]
 8002668:	e9cd 0000 	strd	r0, r0, [sp]
            using(SmartHandles.InterruptState hnd = SmartHandles.InterruptState.Disable())
            {
                if(thread.IsWaiting)
 800266c:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
 8002670:	f010 0f20 	tst.w	r0, #32
 8002674:	d011      	beq.n	800269a <ThreadManager::Wakeup#3334+0x46>
                {
                    thread.State &= ~System.Threading.ThreadState.WaitSleepJoin;
 8002676:	4628      	mov	r0, r5
 8002678:	f000 f8c4 	bl	8002804 <Thread::get_State#4218>
 800267c:	f020 0120 	bic.w	r1, r0, #32
 8002680:	4628      	mov	r0, r5
 8002682:	f000 f8c1 	bl	8002808 <Thread::set_State#4219>

                    InsertInPriorityOrder( thread );
 8002686:	4620      	mov	r0, r4
 8002688:	4629      	mov	r1, r5
 800268a:	f000 fa46 	bl	8002b1a <ThreadManager::InsertInPriorityOrder#3354>

                    RescheduleAndRequestContextSwitchIfNeeded( hnd.GetCurrentExceptionMode() );
 800268e:	f000 fa6d 	bl	8002b6c <InterruptState::GetCurrentExceptionMode#5592>
 8002692:	4601      	mov	r1, r0
 8002694:	4620      	mov	r0, r4
 8002696:	f000 fa8c 	bl	8002bb2 <ThreadManager::RescheduleAndRequestContextSwitchIfNeeded#3337>
 800269a:	a801      	add	r0, sp, #4
                }
            }
 800269c:	6800      	ldr	r0, [r0, #0]
 800269e:	f011 fa33 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
 80026a2:	b002      	add	sp, #8
 80026a4:	bd70      	pop	{r4, r5, r6, pc}

080026a6 <Thread::AcquiredWaitableObject#4196>:
        }

        //--//

        public void AcquiredWaitableObject( Synchronization.WaitableObject waitableObject )
        {
 80026a6:	b570      	push	{r4, r5, r6, lr}
 80026a8:	b082      	sub	sp, #8
 80026aa:	4605      	mov	r5, r0
 80026ac:	2600      	movs	r6, #0
 80026ae:	2001      	movs	r0, #1
 80026b0:	460c      	mov	r4, r1
 80026b2:	9601      	str	r6, [sp, #4]
 80026b4:	f011 fa28 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
 80026b8:	9600      	str	r6, [sp, #0]
 80026ba:	e9cd 0000 	strd	r0, r0, [sp]
            using(SmartHandles.InterruptState.Disable())
            {
                m_ownedObjects.InsertAtTail( waitableObject.OwnershipLink );
 80026be:	68a1      	ldr	r1, [r4, #8]
 80026c0:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80026c2:	f000 f805 	bl	80026d0 <KernelList`1::InsertAtTail#17972>
            }
 80026c6:	9801      	ldr	r0, [sp, #4]
 80026c8:	f011 fa1e 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
 80026cc:	b002      	add	sp, #8
 80026ce:	bd70      	pop	{r4, r5, r6, pc}

080026d0 <KernelList`1::InsertAtTail#17972>:
        //
        // Helper Methods
        //

        public void InsertAtTail( KernelNode< T > node )
        {
 80026d0:	b580      	push	{r7, lr}
            node.InsertBefore( m_tail );
 80026d2:	68c2      	ldr	r2, [r0, #12]
 80026d4:	4608      	mov	r0, r1
 80026d6:	4611      	mov	r1, r2
 80026d8:	f006 f967 	bl	80089aa <KernelNode`1::InsertBefore#18285>
 80026dc:	bd80      	pop	{r7, pc}

080026de <Thread::ReleasedWaitableObject#4197>:
        }

        public void ReleasedWaitableObject( Synchronization.WaitableObject waitableObject )
        {
 80026de:	b5b0      	push	{r4, r5, r7, lr}
 80026e0:	b082      	sub	sp, #8
 80026e2:	4604      	mov	r4, r0
 80026e4:	2500      	movs	r5, #0
 80026e6:	2001      	movs	r0, #1
 80026e8:	9501      	str	r5, [sp, #4]
 80026ea:	f011 fa0d 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
 80026ee:	9500      	str	r5, [sp, #0]
 80026f0:	e9cd 0000 	strd	r0, r0, [sp]
 80026f4:	68a0      	ldr	r0, [r4, #8]
            using(SmartHandles.InterruptState.Disable())
            {
                waitableObject.OwnershipLink.RemoveFromList();
 80026f6:	f000 f805 	bl	8002704 <KernelNode`1::RemoveFromList#18286>
            }
 80026fa:	9801      	ldr	r0, [sp, #4]
 80026fc:	f011 fa04 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
 8002700:	b002      	add	sp, #8
 8002702:	bdb0      	pop	{r4, r5, r7, pc}

08002704 <KernelNode`1::RemoveFromList#18286>:
            this.ConnectToNext( place );
        }

        public void RemoveFromList()
        {
            if(m_next != null)
 8002704:	6881      	ldr	r1, [r0, #8]
 8002706:	2900      	cmp	r1, #0
        //--//

        [Inline]
        private void RemoveFromList_NoClear()
        {
            KernelNode< T > next = m_next;
 8002708:	bf1e      	ittt	ne
 800270a:	e9d0 1202 	ldrdne	r1, r2, [r0, #8]
 800270e:	60ca      	strne	r2, [r1, #12]
 8002710:	6091      	strne	r1, [r2, #8]
 8002712:	2100      	movs	r1, #0
 8002714:	e9c0 1102 	strd	r1, r1, [r0, #8]
 8002718:	4770      	bx	lr

0800271a <ThreadManager::RetireThread#3331>:
                }
            }
        }

        public virtual void RetireThread( ThreadImpl thread )
        {
 800271a:	b580      	push	{r7, lr}
 800271c:	b082      	sub	sp, #8
            m_deadThreadsTime.Merge( thread.ActiveTime );
 800271e:	e9d1 c20f 	ldrd	ip, r2, [r1, #60]	; 0x3c
 8002722:	e9d1 3111 	ldrd	r3, r1, [r1, #68]	; 0x44
 8002726:	302c      	adds	r0, #44	; 0x2c
 8002728:	e9cd 3100 	strd	r3, r1, [sp]
 800272c:	4661      	mov	r1, ip
 800272e:	f000 fa75 	bl	8002c1c <KernelPerformanceCounter::Merge#4957>
 8002732:	b002      	add	sp, #8
 8002734:	bd80      	pop	{r7, pc}

08002736 <EventWaitHandle::Set#4116>:

            return true;
        }

        public bool Set()
        {
 8002736:	b580      	push	{r7, lr}
 8002738:	2101      	movs	r1, #1
 800273a:	7301      	strb	r1, [r0, #12]
            m_state = true;

            m_handle.Release();
 800273c:	6880      	ldr	r0, [r0, #8]
 800273e:	6841      	ldr	r1, [r0, #4]
 8002740:	69c9      	ldr	r1, [r1, #28]
 8002742:	69c9      	ldr	r1, [r1, #28]
 8002744:	4788      	blx	r1
 8002746:	bd80      	pop	{r7, pc}

08002748 <Thread::Detach#4199>:
                m_joinEvent.Set();
            }
        }

        public void Detach()
        {
 8002748:	b5b0      	push	{r4, r5, r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	4604      	mov	r4, r0
 800274e:	2500      	movs	r5, #0
 8002750:	2001      	movs	r0, #1
 8002752:	9501      	str	r5, [sp, #4]
 8002754:	f011 f9d8 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
 8002758:	9500      	str	r5, [sp, #0]
 800275a:	e9cd 0000 	strd	r0, r0, [sp]
 800275e:	e002      	b.n	8002766 <Thread::Detach#4199+0x1e>
 8002760:	2100      	movs	r1, #0
                    if(wr == null)
                    {
                        break;
                    }

                    wr.RequestFulfilled = false;
 8002762:	f7ff ff69 	bl	8002638 <WaitingRecord::set_RequestFulfilled#5304>
        {
            using(SmartHandles.InterruptState.Disable())
            {
                while(true)
                {
                    Synchronization.WaitingRecord wr = m_pendingObjects.FirstTarget();
 8002766:	6ba0      	ldr	r0, [r4, #56]	; 0x38
                    if(wr == null)
                    {
                        break;
                    }

                    wr.RequestFulfilled = false;
 8002768:	f7ff ff16 	bl	8002598 <KernelList`1::FirstTarget#17986>
            using(SmartHandles.InterruptState.Disable())
            {
                while(true)
                {
                    Synchronization.WaitingRecord wr = m_pendingObjects.FirstTarget();
                    if(wr == null)
 800276c:	2800      	cmp	r0, #0
 800276e:	d1f7      	bne.n	8002760 <Thread::Detach#4199+0x18>
 8002770:	e003      	b.n	800277a <Thread::Detach#4199+0x32>
 8002772:	6841      	ldr	r1, [r0, #4]
                    if(wo == null)
                    {
                        break;
                    }

                    wo.Release();
 8002774:	69c9      	ldr	r1, [r1, #28]
 8002776:	69c9      	ldr	r1, [r1, #28]
 8002778:	4788      	blx	r1
                    wr.RequestFulfilled = false;
                }

                while(true)
                {
                    Synchronization.WaitableObject wo = m_ownedObjects.FirstTarget();
 800277a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800277c:	f000 f80d 	bl	800279a <KernelList`1::FirstTarget#17974>
                    if(wo == null)
 8002780:	2800      	cmp	r0, #0
 8002782:	d1f6      	bne.n	8002772 <Thread::Detach#4199+0x2a>
                    }

                    wo.Release();
                }

                m_schedulingLink  .RemoveFromList();
 8002784:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002786:	f000 f810 	bl	80027aa <KernelNode`1::RemoveFromList#17832>
                m_registrationLink.RemoveFromList();
 800278a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800278c:	f000 f80d 	bl	80027aa <KernelNode`1::RemoveFromList#17832>
            }
 8002790:	9801      	ldr	r0, [sp, #4]
 8002792:	f011 f9b9 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
 8002796:	b002      	add	sp, #8
 8002798:	bdb0      	pop	{r4, r5, r7, pc}

0800279a <KernelList`1::FirstTarget#17974>:
            return null;
        }

        public T FirstTarget()
        {
            KernelNode< T > node = m_head.Next;
 800279a:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
 800279e:	6888      	ldr	r0, [r1, #8]

            if(node != m_tail)
 80027a0:	4290      	cmp	r0, r2
 80027a2:	bf14      	ite	ne
 80027a4:	6900      	ldrne	r0, [r0, #16]
 80027a6:	2000      	moveq	r0, #0
 80027a8:	4770      	bx	lr

080027aa <KernelNode`1::RemoveFromList#17832>:
            this.ConnectToNext( place );
        }

        public void RemoveFromList()
        {
            if(m_next != null)
 80027aa:	6881      	ldr	r1, [r0, #8]
 80027ac:	2900      	cmp	r1, #0
        //--//

        [Inline]
        private void RemoveFromList_NoClear()
        {
            KernelNode< T > next = m_next;
 80027ae:	bf1e      	ittt	ne
 80027b0:	e9d0 1202 	ldrdne	r1, r2, [r0, #8]
 80027b4:	60ca      	strne	r2, [r1, #12]
 80027b6:	6091      	strne	r1, [r2, #8]
 80027b8:	2100      	movs	r1, #0
 80027ba:	e9c0 1102 	strd	r1, r1, [r0, #8]
 80027be:	4770      	bx	lr

080027c0 <SwapCurrentThreadUnderInterrupt::.ctor#5347>:
        //
        // Constructor Methods
        //

        internal SwapCurrentThreadUnderInterrupt( ThreadImpl newThread )
        {
 80027c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027c2:	b081      	sub	sp, #4
 80027c4:	4605      	mov	r5, r0
 80027c6:	480c      	ldr	r0, [pc, #48]	; (80027f8 <SwapCurrentThreadUnderInterrupt::.ctor#5347+0x38>)
            BugCheck.AssertInterruptsOff();
 80027c8:	4e0c      	ldr	r6, [pc, #48]	; (80027fc <SwapCurrentThreadUnderInterrupt::.ctor#5347+0x3c>)
 80027ca:	460c      	mov	r4, r1
 80027cc:	4478      	add	r0, pc
 80027ce:	1837      	adds	r7, r6, r0
 80027d0:	f7ff fe62 	bl	8002498 <BugCheck::AssertInterruptsOff#4945>
 80027d4:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc

            m_previousThread = ThreadImpl.CurrentThread;

            if(m_previousThread != null)
 80027d8:	2800      	cmp	r0, #0
 80027da:	6028      	str	r0, [r5, #0]
            {
                m_previousThread.ReleasedProcessor();
 80027dc:	bf1c      	itt	ne
 80027de:	6828      	ldrne	r0, [r5, #0]
 80027e0:	f7ff fd80 	blne	80022e4 <Thread::ReleasedProcessor#4187>
            }

            newThread.AcquiredProcessor();
 80027e4:	4620      	mov	r0, r4
 80027e6:	f7ff fdb5 	bl	8002354 <Thread::AcquiredProcessor#4188>
 80027ea:	4805      	ldr	r0, [pc, #20]	; (8002800 <SwapCurrentThreadUnderInterrupt::.ctor#5347+0x40>)
 80027ec:	4478      	add	r0, pc
 80027ee:	4430      	add	r0, r6
 80027f0:	f8c0 40bc 	str.w	r4, [r0, #188]	; 0xbc
 80027f4:	b001      	add	sp, #4
 80027f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027f8:	17ffefe4 	.word	0x17ffefe4
 80027fc:	fffffe3c 	.word	0xfffffe3c
 8002800:	17ffefc4 	.word	0x17ffefc4

08002804 <Thread::get_State#4218>:

        public ThreadState State
        {
            get
            {
                return m_state;
 8002804:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002806:	4770      	bx	lr

08002808 <Thread::set_State#4219>:
 8002808:	6241      	str	r1, [r0, #36]	; 0x24
 800280a:	4770      	bx	lr

0800280c <Thread::set_CurrentException#4222>:
 800280c:	60c1      	str	r1, [r0, #12]
 800280e:	4770      	bx	lr

08002810 <ObjectHeader::InsertPlug#3297>:
        [TS.WellKnownMethod("DebugGC_ObjectHeader_InsertPlug")]
        public unsafe void InsertPlug( uint size )
        {
            UIntPtr address = this.ToPointer();
            uint*   dst     = (uint*)address.ToPointer();
            var bytesLeft = size;
 8002810:	3104      	adds	r1, #4
 8002812:	2202      	movs	r2, #2
 8002814:	3904      	subs	r1, #4

            while(bytesLeft >= sizeof(uint))
 8002816:	2904      	cmp	r1, #4
 8002818:	bf38      	it	cc
 800281a:	4770      	bxcc	lr
 800281c:	f840 2b04 	str.w	r2, [r0], #4
 8002820:	e7f8      	b.n	8002814 <ObjectHeader::InsertPlug#3297+0x4>

08002822 <ObjectHeader::UpdateExtension#3298>:

        //--//

        public void UpdateExtension( ExtensionKinds kind    ,
                                     int            payload )
        {
 8002822:	b580      	push	{r7, lr}
                fixed(int* ptr = &this.MultiUseWord)
#pragma warning restore 420
                {
                    byte* flags = (byte*)ptr;

                    return (GarbageCollectorFlags)(uint)*flags;
 8002824:	7803      	ldrb	r3, [r0, #0]
        public GarbageCollectorFlags GarbageCollectorStateWithoutMutableBits
        {
            [Inline]
            get
            {
                return (this.GarbageCollectorState & ~GarbageCollectorFlags.MutableMask);
 8002826:	f003 0cfe 	and.w	ip, r3, #254	; 0xfe
 800282a:	2300      	movs	r3, #0
 800282c:	f1bc 0f04 	cmp.w	ip, #4
 8002830:	bf08      	it	eq
 8002832:	2301      	moveq	r3, #1
 8002834:	b9cb      	cbnz	r3, 800286a <ObjectHeader::UpdateExtension#3298+0x48>
            BugCheck.Assert( this.IsImmutable == false, BugCheck.StopCode.SyncBlockCorruption );

            while(true)
            {
                var  oldValue = this.MultiUseWord;
                uint newValue = ((uint)kind << ExtensionKindShift) | ((uint)payload << ExtensionPayloadShift) | ((uint)oldValue & GarbageCollectorMask);
 8002836:	0209      	lsls	r1, r1, #8
 8002838:	ea41 2c82 	orr.w	ip, r1, r2, lsl #10
 800283c:	e004      	b.n	8002848 <ObjectHeader::UpdateExtension#3298+0x26>
 800283e:	f3bf 8f5f 	dmb	sy
                // CS0420: a reference to a volatile field will not be treated as volatile
#pragma warning disable 420
                var oldValue2 = System.Threading.Interlocked.CompareExchange( ref this.MultiUseWord, (int)newValue, oldValue );
#pragma warning restore 420

                if(oldValue2 == oldValue)
 8002842:	4573      	cmp	r3, lr
 8002844:	bf08      	it	eq
 8002846:	bd80      	popeq	{r7, pc}
        {
            BugCheck.Assert( this.IsImmutable == false, BugCheck.StopCode.SyncBlockCorruption );

            while(true)
            {
                var  oldValue = this.MultiUseWord;
 8002848:	f8d0 e000 	ldr.w	lr, [r0]
 800284c:	f3bf 8f5f 	dmb	sy
                uint newValue = ((uint)kind << ExtensionKindShift) | ((uint)payload << ExtensionPayloadShift) | ((uint)oldValue & GarbageCollectorMask);
 8002850:	fa5f f18e 	uxtb.w	r1, lr
 8002854:	ea41 010c 	orr.w	r1, r1, ip
 8002858:	e850 3f00 	ldrex	r3, [r0]
 800285c:	4573      	cmp	r3, lr
 800285e:	d1ee      	bne.n	800283e <ObjectHeader::UpdateExtension#3298+0x1c>
 8002860:	e840 1200 	strex	r2, r1, [r0]
 8002864:	2a00      	cmp	r2, #0
 8002866:	d1f7      	bne.n	8002858 <ObjectHeader::UpdateExtension#3298+0x36>
 8002868:	e7e9      	b.n	800283e <ObjectHeader::UpdateExtension#3298+0x1c>
 800286a:	2007      	movs	r0, #7
 800286c:	f7fd fd38 	bl	80002e0 <BugCheck::Raise#4938>

08002870 <ThreadManager::get_DefaultStackSize#3321>:
 8002870:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002874:	4770      	bx	lr
 8002876:	46c0      	nop			; (mov r8, r8)

08002878 <ThreadManager::InitializeBeforeStaticConstructors#3322>:
                return 512;
            }
        }

        public virtual void InitializeBeforeStaticConstructors()
        {
 8002878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800287c:	4c15      	ldr	r4, [pc, #84]	; (80028d4 <ThreadManager::InitializeBeforeStaticConstructors#3322+0x5c>)
 800287e:	4680      	mov	r8, r0
            //
            // Create the first active thread.
            //
            m_mainThread = new ThreadImpl( MainThread, new uint[ ThreadManager.Instance.DefaultStackSize ] );
 8002880:	4815      	ldr	r0, [pc, #84]	; (80028d8 <ThreadManager::InitializeBeforeStaticConstructors#3322+0x60>)
 8002882:	447c      	add	r4, pc
 8002884:	1905      	adds	r5, r0, r4
 8002886:	4815      	ldr	r0, [pc, #84]	; (80028dc <ThreadManager::InitializeBeforeStaticConstructors#3322+0x64>)
 8002888:	1901      	adds	r1, r0, r4
 800288a:	4628      	mov	r0, r5
 800288c:	f7fe f848 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8002890:	4606      	mov	r6, r0
 8002892:	4813      	ldr	r0, [pc, #76]	; (80028e0 <ThreadManager::InitializeBeforeStaticConstructors#3322+0x68>)
 8002894:	4641      	mov	r1, r8
 8002896:	1902      	adds	r2, r0, r4
 8002898:	4630      	mov	r0, r6
 800289a:	f7fe fd20 	bl	80012de <MulticastDelegate::.ctor#4919>
 800289e:	4811      	ldr	r0, [pc, #68]	; (80028e4 <ThreadManager::InitializeBeforeStaticConstructors#3322+0x6c>)
 80028a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028a4:	1901      	adds	r1, r0, r4
 80028a6:	4628      	mov	r0, r5
 80028a8:	f7fe fe84 	bl	80015b4 <DefaultTypeSystemManager::AllocateArray#5255>
 80028ac:	4607      	mov	r7, r0
 80028ae:	480e      	ldr	r0, [pc, #56]	; (80028e8 <ThreadManager::InitializeBeforeStaticConstructors#3322+0x70>)
 80028b0:	1901      	adds	r1, r0, r4
 80028b2:	4628      	mov	r0, r5
 80028b4:	f7fe f834 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 80028b8:	4631      	mov	r1, r6
 80028ba:	463a      	mov	r2, r7
 80028bc:	4605      	mov	r5, r0
 80028be:	f7ff faff 	bl	8001ec0 <Thread::.ctor#4176>
 80028c2:	480a      	ldr	r0, [pc, #40]	; (80028ec <ThreadManager::InitializeBeforeStaticConstructors#3322+0x74>)
 80028c4:	f8c8 5014 	str.w	r5, [r8, #20]
 80028c8:	4420      	add	r0, r4
 80028ca:	f8c0 50bc 	str.w	r5, [r0, #188]	; 0xbc
 80028ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028d2:	46c0      	nop			; (mov r8, r8)
 80028d4:	17ffef2e 	.word	0x17ffef2e
 80028d8:	ffffea64 	.word	0xffffea64
 80028dc:	e80081ac 	.word	0xe80081ac
 80028e0:	e800113d 	.word	0xe800113d
 80028e4:	e80073bc 	.word	0xe80073bc
 80028e8:	e800823c 	.word	0xe800823c
 80028ec:	fffffe3c 	.word	0xfffffe3c

080028f0 <ThreadManager::MainThread#3356>:
                {
                    //BugCheck.Log( "[MainThreads] !!! EXECUTING APP !!!" );
                    //BugCheck.Log( "[MainThreads] !!! EXECUTING APP !!!" );
                    //BugCheck.Log( "[MainThreads] !!! EXECUTING APP !!!" );

                    Configuration.ExecuteApplication();
 80028f0:	b580      	push	{r7, lr}
 80028f2:	f000 faf5 	bl	8002ee0 <Program::Main#141>
                }
                catch
                {
                }

                BugCheck.Raise( BugCheck.StopCode.NoCurrentThread ); 
 80028f6:	2004      	movs	r0, #4
 80028f8:	f7fd fcf2 	bl	80002e0 <BugCheck::Raise#4938>

080028fc <ThreadManager::InitializeAfterStaticConstructors#3323>:
            //
            ThreadImpl.CurrentThread = m_mainThread;
        }

        public virtual void InitializeAfterStaticConstructors( uint[] systemStack )
        {
 80028fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002900:	b081      	sub	sp, #4
 8002902:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 80029a4 <ThreadManager::InitializeAfterStaticConstructors#3323+0xa8>
 8002906:	4604      	mov	r4, r0
            m_allThreads          = new KernelList< ThreadImpl >();
 8002908:	4827      	ldr	r0, [pc, #156]	; (80029a8 <ThreadManager::InitializeAfterStaticConstructors#3323+0xac>)
 800290a:	4688      	mov	r8, r1
 800290c:	44f9      	add	r9, pc
 800290e:	eb00 0509 	add.w	r5, r0, r9
 8002912:	4826      	ldr	r0, [pc, #152]	; (80029ac <ThreadManager::InitializeAfterStaticConstructors#3323+0xb0>)
 8002914:	eb00 0709 	add.w	r7, r0, r9
 8002918:	4628      	mov	r0, r5
 800291a:	4639      	mov	r1, r7
 800291c:	f7fe f800 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8002920:	4606      	mov	r6, r0
 8002922:	f000 f84d 	bl	80029c0 <KernelList`1::.ctor#17800>
            m_readyThreads        = new KernelList< ThreadImpl >();
 8002926:	4628      	mov	r0, r5
 8002928:	4639      	mov	r1, r7
 800292a:	60a6      	str	r6, [r4, #8]
 800292c:	f7fd fff8 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8002930:	4606      	mov	r6, r0
 8002932:	f000 f845 	bl	80029c0 <KernelList`1::.ctor#17800>
            m_waitingThreads      = new KernelList< ThreadImpl >();
 8002936:	4628      	mov	r0, r5
 8002938:	4639      	mov	r1, r7
 800293a:	60e6      	str	r6, [r4, #12]
 800293c:	f7fd fff0 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8002940:	4606      	mov	r6, r0
 8002942:	f000 f83d 	bl	80029c0 <KernelList`1::.ctor#17800>

            m_idleThread          = new ThreadImpl( IdleThread, systemStack );
 8002946:	481a      	ldr	r0, [pc, #104]	; (80029b0 <ThreadManager::InitializeAfterStaticConstructors#3323+0xb4>)
 8002948:	6126      	str	r6, [r4, #16]
 800294a:	eb00 0109 	add.w	r1, r0, r9
 800294e:	4628      	mov	r0, r5
 8002950:	f7fd ffe6 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8002954:	4606      	mov	r6, r0
 8002956:	4817      	ldr	r0, [pc, #92]	; (80029b4 <ThreadManager::InitializeAfterStaticConstructors#3323+0xb8>)
 8002958:	4621      	mov	r1, r4
 800295a:	eb00 0209 	add.w	r2, r0, r9
 800295e:	4630      	mov	r0, r6
 8002960:	f7fe fcbd 	bl	80012de <MulticastDelegate::.ctor#4919>
 8002964:	4814      	ldr	r0, [pc, #80]	; (80029b8 <ThreadManager::InitializeAfterStaticConstructors#3323+0xbc>)
 8002966:	eb00 0109 	add.w	r1, r0, r9
 800296a:	4628      	mov	r0, r5
 800296c:	f7fd ffd8 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8002970:	4631      	mov	r1, r6
 8002972:	4642      	mov	r2, r8
 8002974:	4607      	mov	r7, r0
 8002976:	f7ff faa3 	bl	8001ec0 <Thread::.ctor#4176>
            m_neverSignaledEvent  = new EventWaitHandleImpl( false, System.Threading.EventResetMode.ManualReset );
 800297a:	4810      	ldr	r0, [pc, #64]	; (80029bc <ThreadManager::InitializeAfterStaticConstructors#3323+0xc0>)
 800297c:	61a7      	str	r7, [r4, #24]
 800297e:	eb00 0109 	add.w	r1, r0, r9
 8002982:	4628      	mov	r0, r5
 8002984:	f7fd ffcc 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8002988:	2100      	movs	r1, #0
 800298a:	2201      	movs	r2, #1
 800298c:	4605      	mov	r5, r0
 800298e:	f000 f881 	bl	8002a94 <EventWaitHandle::.ctor#4114>
 8002992:	61e5      	str	r5, [r4, #28]

            //
            // These threads are never started, so we have to manually register them, to enable the debugger to see them.
            //
            RegisterThread( m_idleThread );
 8002994:	4620      	mov	r0, r4
 8002996:	69a1      	ldr	r1, [r4, #24]
 8002998:	f000 f894 	bl	8002ac4 <ThreadManager::RegisterThread#3328>
 800299c:	b001      	add	sp, #4
 800299e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80029a2:	46c0      	nop			; (mov r8, r8)
 80029a4:	17ffeea4 	.word	0x17ffeea4
 80029a8:	ffffea64 	.word	0xffffea64
 80029ac:	e80082cc 	.word	0xe80082cc
 80029b0:	e80081ac 	.word	0xe80081ac
 80029b4:	e8001265 	.word	0xe8001265
 80029b8:	e800823c 	.word	0xe800823c
 80029bc:	e800839c 	.word	0xe800839c

080029c0 <KernelList`1::.ctor#17800>:

        //
        // Constructor Methods
        //

        public KernelList()
 80029c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029c2:	b081      	sub	sp, #4
 80029c4:	4604      	mov	r4, r0
 80029c6:	4811      	ldr	r0, [pc, #68]	; (8002a0c <KernelList`1::.ctor#17800+0x4c>)
        {
            m_head = new KernelNode< T >( default(T) );
 80029c8:	4911      	ldr	r1, [pc, #68]	; (8002a10 <KernelList`1::.ctor#17800+0x50>)
 80029ca:	4478      	add	r0, pc
 80029cc:	180d      	adds	r5, r1, r0
 80029ce:	4911      	ldr	r1, [pc, #68]	; (8002a14 <KernelList`1::.ctor#17800+0x54>)
 80029d0:	180e      	adds	r6, r1, r0
 80029d2:	4628      	mov	r0, r5
 80029d4:	4631      	mov	r1, r6
 80029d6:	f7fd ffa3 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 80029da:	2100      	movs	r1, #0
 80029dc:	4607      	mov	r7, r0
 80029de:	f7ff fbe7 	bl	80021b0 <KernelNode`1::.ctor#17830>
            m_tail = new KernelNode< T >( default(T) );
 80029e2:	4628      	mov	r0, r5
 80029e4:	4631      	mov	r1, r6
 80029e6:	60a7      	str	r7, [r4, #8]
 80029e8:	f7fd ff9a 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 80029ec:	2100      	movs	r1, #0
 80029ee:	4605      	mov	r5, r0
 80029f0:	f7ff fbde 	bl	80021b0 <KernelNode`1::.ctor#17830>
 80029f4:	60e5      	str	r5, [r4, #12]

            m_head.Next     = m_tail;
 80029f6:	4629      	mov	r1, r5
 80029f8:	68a0      	ldr	r0, [r4, #8]
 80029fa:	f005 ffce 	bl	800899a <KernelNode`1::set_Next#17842>
            m_tail.Previous = m_head;
 80029fe:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 8002a02:	f005 ffcc 	bl	800899e <KernelNode`1::set_Previous#17844>
 8002a06:	b001      	add	sp, #4
 8002a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a0a:	46c0      	nop			; (mov r8, r8)
 8002a0c:	17ffede6 	.word	0x17ffede6
 8002a10:	ffffea64 	.word	0xffffea64
 8002a14:	e8007ffc 	.word	0xe8007ffc

08002a18 <ThreadManager::IdleThread#3355>:
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002a20:	f000 f996 	bl	8002d50 <ProcessorARMv7M::RaiseSystemHandler#3407>
 8002a24:	20ff      	movs	r0, #255	; 0xff
 8002a26:	f011 f86f 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	9101      	str	r1, [sp, #4]
 8002a2e:	9001      	str	r0, [sp, #4]
 8002a30:	f011 f8d6 	bl	8013be0 <CMSIS_STUB_POWER_WaitForEvent>
 8002a34:	e7fc      	b.n	8002a30 <ThreadManager::IdleThread#3355+0x18>

08002a36 <WaitHandle::WaitOne#4104>:
        // Helper Methods
        //

        public virtual bool WaitOne( int  millisecondsTimeout ,
                                     bool exitContext         )
        {
 8002a36:	b510      	push	{r4, lr}
 8002a38:	4604      	mov	r4, r0
            return WaitOne( (SchedulerTime)millisecondsTimeout, exitContext );
 8002a3a:	4608      	mov	r0, r1
 8002a3c:	f001 fe13 	bl	8004666 <SchedulerTime::op_Explicit#5116>
 8002a40:	4602      	mov	r2, r0
 8002a42:	68a0      	ldr	r0, [r4, #8]
 8002a44:	460b      	mov	r3, r1
 8002a46:	f003 ff43 	bl	80068d0 <WaitHandle::WaitOne#4111>
 8002a4a:	bd10      	pop	{r4, pc}

08002a4c <WaitHandle::WaitOne#8087>:
////
////        return WaitOne( tm, exitContext );
////    }
    
        public virtual bool WaitOne()
        {
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	6841      	ldr	r1, [r0, #4]
 8002a50:	2200      	movs	r2, #0
            return WaitOne( Timeout.Infinite, false );
 8002a52:	69c9      	ldr	r1, [r1, #28]
 8002a54:	698b      	ldr	r3, [r1, #24]
 8002a56:	f04f 31ff 	mov.w	r1, #4294967295
 8002a5a:	4798      	blx	r3
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <WaitHandle::Dispose#4110>:
        {
            throw new NotImplementedException();
        }

        protected virtual void Dispose( bool explicitDisposing )
        {
 8002a5e:	b580      	push	{r7, lr}
            Synchronization.WaitableObject handle = System.Threading.Interlocked.Exchange( ref m_handle, null );
 8002a60:	f3bf 8f5f 	dmb	sy
 8002a64:	f100 0108 	add.w	r1, r0, #8
 8002a68:	2200      	movs	r2, #0
 8002a6a:	e851 0f00 	ldrex	r0, [r1]
 8002a6e:	e841 2300 	strex	r3, r2, [r1]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1f9      	bne.n	8002a6a <WaitHandle::Dispose#4110+0xc>
 8002a76:	f3bf 8f5f 	dmb	sy

            if(handle != null)
 8002a7a:	2800      	cmp	r0, #0
            {
                handle.Dispose();
 8002a7c:	bf18      	it	ne
 8002a7e:	f002 f953 	blne	8004d28 <WaitableObject::Dispose#5279>
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <WaitHandle::System.IDisposable.Dispose#8096>:
////        }
        }
    
        /// <internalonly/>
        void IDisposable.Dispose()
        {
 8002a84:	b580      	push	{r7, lr}
 8002a86:	6841      	ldr	r1, [r0, #4]
            Dispose( true );
 8002a88:	69c9      	ldr	r1, [r1, #28]
 8002a8a:	6a0a      	ldr	r2, [r1, #32]
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	4790      	blx	r2
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	46c0      	nop			; (mov r8, r8)

08002a94 <EventWaitHandle::.ctor#4114>:
        //
        // Constructor Methods
        //

        [DiscardTargetImplementation]
        public EventWaitHandleImpl( bool                            initialState ,
 8002a94:	b5b0      	push	{r4, r5, r7, lr}
 8002a96:	4604      	mov	r4, r0
            m_state = initialState;
            m_mode  = mode;

            //--//

            m_handle = new EventWaitableObject( this );
 8002a98:	4808      	ldr	r0, [pc, #32]	; (8002abc <EventWaitHandle::.ctor#4114+0x28>)
 8002a9a:	7321      	strb	r1, [r4, #12]
 8002a9c:	4906      	ldr	r1, [pc, #24]	; (8002ab8 <EventWaitHandle::.ctor#4114+0x24>)
 8002a9e:	6122      	str	r2, [r4, #16]
 8002aa0:	4a07      	ldr	r2, [pc, #28]	; (8002ac0 <EventWaitHandle::.ctor#4114+0x2c>)
 8002aa2:	4479      	add	r1, pc
 8002aa4:	4408      	add	r0, r1
 8002aa6:	4411      	add	r1, r2
 8002aa8:	f7fd ff3a 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8002aac:	4621      	mov	r1, r4
 8002aae:	4605      	mov	r5, r0
 8002ab0:	f002 fa7c 	bl	8004fac <EventWaitableObject::.ctor#5650>
 8002ab4:	60a5      	str	r5, [r4, #8]
 8002ab6:	bdb0      	pop	{r4, r5, r7, pc}
 8002ab8:	17ffed0e 	.word	0x17ffed0e
 8002abc:	ffffea64 	.word	0xffffea64
 8002ac0:	e8009ecc 	.word	0xe8009ecc

08002ac4 <ThreadManager::RegisterThread#3328>:
        //
        // Helper Methods
        //

        protected void RegisterThread( ThreadImpl thread )
        {
 8002ac4:	b5b0      	push	{r4, r5, r7, lr}
 8002ac6:	460c      	mov	r4, r1
 8002ac8:	4605      	mov	r5, r0
            BugCheck.AssertInterruptsOff();
 8002aca:	f7ff fce5 	bl	8002498 <BugCheck::AssertInterruptsOff#4945>

            m_allThreads.InsertAtTail( thread.RegistrationLink );
 8002ace:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002ad0:	68a8      	ldr	r0, [r5, #8]
 8002ad2:	f000 f810 	bl	8002af6 <KernelList`1::InsertAtTail#17801>
 8002ad6:	bdb0      	pop	{r4, r5, r7, pc}

08002ad8 <ThreadManager::Activate#3326>:
 8002ad8:	4770      	bx	lr

08002ada <ThreadManager::StartThreads#3327>:
        {
        }

        [NoReturn]
        public virtual void StartThreads()
        {
 8002ada:	b5b0      	push	{r4, r5, r7, lr}
 8002adc:	4604      	mov	r4, r0
            //
            // 'm_runningThread' should never be null once the interrupts have been enabled, so we have to set it here.
            //
            ThreadImpl bootstrapThread = m_idleThread;
 8002ade:	69a5      	ldr	r5, [r4, #24]

            m_runningThread = bootstrapThread;
            bootstrapThread.AcquiredProcessor();
 8002ae0:	4628      	mov	r0, r5
 8002ae2:	6265      	str	r5, [r4, #36]	; 0x24
 8002ae4:	f7ff fc36 	bl	8002354 <Thread::AcquiredProcessor#4188>

            //
            // Start the first active thread.
            //
            m_mainThread.Start();
 8002ae8:	6960      	ldr	r0, [r4, #20]
 8002aea:	f7ff fa73 	bl	8001fd4 <Thread::Start#4177>
 8002aee:	69e8      	ldr	r0, [r5, #28]

            //
            // Long jump to the idle thread context, which will re-enable interrupts and 
            // cause the first context switch to the process stack of this thread
            //
            bootstrapThread.SwappedOutContext.SwitchTo();
 8002af0:	f7ff fb4a 	bl	8002188 <Context::SwitchTo#17522>
 8002af4:	bdb0      	pop	{r4, r5, r7, pc}

08002af6 <KernelList`1::InsertAtTail#17801>:
        //
        // Helper Methods
        //

        public void InsertAtTail( KernelNode< T > node )
        {
 8002af6:	b580      	push	{r7, lr}
            node.InsertBefore( m_tail );
 8002af8:	68c2      	ldr	r2, [r0, #12]
 8002afa:	4608      	mov	r0, r1
 8002afc:	4611      	mov	r1, r2
 8002afe:	f000 f9e1 	bl	8002ec4 <KernelNode`1::InsertBefore#17831>
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <KernelNode`1::VerifyUnlinked#17837>:
            this.m_next     = next;
            next.m_previous = this;
        }

        public bool VerifyUnlinked()
        {
 8002b04:	4601      	mov	r1, r0
 8002b06:	2000      	movs	r0, #0
            return m_next == null && m_previous == null;
 8002b08:	688a      	ldr	r2, [r1, #8]
 8002b0a:	2a00      	cmp	r2, #0
 8002b0c:	bf18      	it	ne
 8002b0e:	4770      	bxne	lr
 8002b10:	68c9      	ldr	r1, [r1, #12]
 8002b12:	2900      	cmp	r1, #0
 8002b14:	bf08      	it	eq
 8002b16:	2001      	moveq	r0, #1
 8002b18:	4770      	bx	lr

08002b1a <ThreadManager::InsertInPriorityOrder#3354>:
        }

        //--//

        protected void InsertInPriorityOrder( ThreadImpl thread )
        {
 8002b1a:	b570      	push	{r4, r5, r6, lr}
 8002b1c:	460c      	mov	r4, r1
            //
            // Idle thread must never enter the set of the ready threads
            //
            if(thread == m_idleThread)
 8002b1e:	6981      	ldr	r1, [r0, #24]
 8002b20:	428c      	cmp	r4, r1
 8002b22:	bf08      	it	eq
 8002b24:	bd70      	popeq	{r4, r5, r6, pc}
            }

            //
            // Insert in order.
            //
            var node = m_readyThreads.StartOfForwardWalk;
 8002b26:	68c0      	ldr	r0, [r0, #12]
 8002b28:	f000 f9a1 	bl	8002e6e <KernelList`1::get_StartOfForwardWalk#17807>
 8002b2c:	4605      	mov	r5, r0
            var pri  = thread.Priority;
 8002b2e:	4620      	mov	r0, r4
 8002b30:	f7ff fab0 	bl	8002094 <Thread::get_Priority#4211>
 8002b34:	4606      	mov	r6, r0
 8002b36:	e000      	b.n	8002b3a <ThreadManager::InsertInPriorityOrder#3354+0x20>
 8002b38:	68ad      	ldr	r5, [r5, #8]

            while(node.IsValidForForwardMove)
 8002b3a:	4628      	mov	r0, r5
 8002b3c:	f000 f99a 	bl	8002e74 <KernelNode`1::get_IsValidForForwardMove#17839>
 8002b40:	f010 0fff 	tst.w	r0, #255	; 0xff
 8002b44:	d004      	beq.n	8002b50 <ThreadManager::InsertInPriorityOrder#3354+0x36>
 8002b46:	6928      	ldr	r0, [r5, #16]
            {
                if(node.Target.Priority < pri)
 8002b48:	f7ff faa4 	bl	8002094 <Thread::get_Priority#4211>
 8002b4c:	42b0      	cmp	r0, r6
 8002b4e:	daf3      	bge.n	8002b38 <ThreadManager::InsertInPriorityOrder#3354+0x1e>
 8002b50:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                }

                node = node.Next;
            }

            thread.SchedulingLink.InsertBefore( node );
 8002b52:	4629      	mov	r1, r5
 8002b54:	f000 f9b6 	bl	8002ec4 <KernelNode`1::InsertBefore#17831>

            thread.State &= ~System.Threading.ThreadState.WaitSleepJoin;
 8002b58:	4620      	mov	r0, r4
 8002b5a:	f7ff fe53 	bl	8002804 <Thread::get_State#4218>
 8002b5e:	f020 0120 	bic.w	r1, r0, #32
 8002b62:	4620      	mov	r0, r4
 8002b64:	f7ff fe50 	bl	8002808 <Thread::set_State#4219>
 8002b68:	bd70      	pop	{r4, r5, r6, pc}
 8002b6a:	46c0      	nop			; (mov r8, r8)

08002b6c <InterruptState::GetCurrentExceptionMode#5592>:
            return m_basepri;
        }

        public HardwareException GetCurrentExceptionMode()
        {
            ProcessorARMv7M.ISR_NUMBER ex = GetMode();
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	f002 f9e6 	bl	8004f3e <InterruptState::GetMode#5594>
            
            if(ex == ProcessorARMv7M.ISR_NUMBER.ThreadMode)
 8002b72:	2800      	cmp	r0, #0
 8002b74:	bf04      	itt	eq
 8002b76:	2000      	moveq	r0, #0
 8002b78:	bd80      	popeq	{r7, pc}
            {
                return HardwareException.None;
            }

            switch(ex)
 8002b7a:	1e41      	subs	r1, r0, #1
 8002b7c:	290e      	cmp	r1, #14
 8002b7e:	d901      	bls.n	8002b84 <InterruptState::GetCurrentExceptionMode#5592+0x18>
 8002b80:	2008      	movs	r0, #8
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	200b      	movs	r0, #11
 8002b86:	e8df f001 	tbb	[pc, r1]
 8002b8a:	0811      	.short	0x0811
 8002b8c:	09090909 	.word	0x09090909
 8002b90:	11111111 	.word	0x11111111
 8002b94:	0b110f0d 	.word	0x0b110f0d
 8002b98:	000b      	.short	0x000b
 8002b9a:	e7f2      	b.n	8002b82 <InterruptState::GetCurrentExceptionMode#5592+0x16>
 8002b9c:	200c      	movs	r0, #12
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	200a      	movs	r0, #10
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	200d      	movs	r0, #13
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	200e      	movs	r0, #14
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	200e      	movs	r0, #14
 8002bae:	f7fd fb97 	bl	80002e0 <BugCheck::Raise#4938>

08002bb2 <ThreadManager::RescheduleAndRequestContextSwitchIfNeeded#3337>:
                }
            }
        }

        public void RescheduleAndRequestContextSwitchIfNeeded( HardwareException mode )
        {
 8002bb2:	b5b0      	push	{r4, r5, r7, lr}
 8002bb4:	460d      	mov	r5, r1
 8002bb6:	4604      	mov	r4, r0
            Reschedule();
 8002bb8:	f000 f899 	bl	8002cee <ThreadManager::Reschedule#3338>
            // We therefore need to  pick the case if System timer exception and let it go as if it was a normal thread mode
            // handler. When we enable the interrupts controller this case will be automatically take care of and we 
            // can remove this #if
            // 
            
            if(mode == HardwareException.None || mode == HardwareException.Interrupt )
 8002bbc:	f045 0008 	orr.w	r0, r5, #8
 8002bc0:	2808      	cmp	r0, #8
 8002bc2:	bf18      	it	ne
 8002bc4:	bdb0      	popne	{r4, r5, r7, pc}
        public bool ShouldContextSwitch
        {
            [Inline]
            get
            {
                return m_runningThread != m_nextThread;
 8002bc6:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
            if(mode == HardwareException.None || mode == HardwareException.Interrupt )
#else
            if(mode == HardwareException.None)
#endif
            {
                if(this.ShouldContextSwitch)
 8002bca:	4288      	cmp	r0, r1
 8002bcc:	bf1c      	itt	ne
 8002bce:	f04f 5080 	movne.w	r0, #268435456	; 0x10000000
 8002bd2:	f000 f8bd 	blne	8002d50 <ProcessorARMv7M::RaiseSystemHandler#3407>
 8002bd6:	bdb0      	pop	{r4, r5, r7, pc}

08002bd8 <ThreadManager::RemoveThread#3330>:
                RescheduleAndRequestContextSwitchIfNeeded( hnd.GetCurrentExceptionMode() );
            }
        }

        public virtual void RemoveThread( ThreadImpl thread )
        {
 8002bd8:	b570      	push	{r4, r5, r6, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	4604      	mov	r4, r0
 8002bde:	2600      	movs	r6, #0
 8002be0:	2001      	movs	r0, #1
 8002be2:	460d      	mov	r5, r1
 8002be4:	9601      	str	r6, [sp, #4]
 8002be6:	f010 ff8f 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
 8002bea:	9600      	str	r6, [sp, #0]
 8002bec:	e9cd 0000 	strd	r0, r0, [sp]
            using(SmartHandles.InterruptState hnd = SmartHandles.InterruptState.Disable())
            {
                thread.Detach();
 8002bf0:	4628      	mov	r0, r5
 8002bf2:	f7ff fda9 	bl	8002748 <Thread::Detach#4199>

                if(thread == m_runningThread)
 8002bf6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002bf8:	4285      	cmp	r5, r0
 8002bfa:	d106      	bne.n	8002c0a <ThreadManager::RemoveThread#3330+0x32>
                {
                    RescheduleAndRequestContextSwitchIfNeeded( hnd.GetCurrentExceptionMode() );
 8002bfc:	f7ff ffb6 	bl	8002b6c <InterruptState::GetCurrentExceptionMode#5592>
 8002c00:	4601      	mov	r1, r0
 8002c02:	4620      	mov	r0, r4
 8002c04:	f7ff ffd5 	bl	8002bb2 <ThreadManager::RescheduleAndRequestContextSwitchIfNeeded#3337>
 8002c08:	e002      	b.n	8002c10 <ThreadManager::RemoveThread#3330+0x38>
                else
                {
                    //
                    // If the thread is not the running one, it won't get a chance to execute the Stop method.
                    //
                    thread.Stop();
 8002c0a:	4628      	mov	r0, r5
 8002c0c:	f7ff fb8a 	bl	8002324 <Thread::Stop#4198>
 8002c10:	a801      	add	r0, sp, #4
                }
            }
 8002c12:	6800      	ldr	r0, [r0, #0]
 8002c14:	f010 ff78 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
 8002c18:	b002      	add	sp, #8
 8002c1a:	bd70      	pop	{r4, r5, r6, pc}

08002c1c <KernelPerformanceCounter::Merge#4957>:
            m_hits  += 1;
            m_total += (Peripherals.Instance.ReadPerformanceCounter() - m_start);
        }

        public void Merge( KernelPerformanceCounter other )
        {
 8002c1c:	b084      	sub	sp, #16
 8002c1e:	9b05      	ldr	r3, [sp, #20]
 8002c20:	9303      	str	r3, [sp, #12]
 8002c22:	9b04      	ldr	r3, [sp, #16]
 8002c24:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
            m_hits  += other.m_hits;
 8002c28:	6801      	ldr	r1, [r0, #0]
 8002c2a:	9a00      	ldr	r2, [sp, #0]
 8002c2c:	4411      	add	r1, r2
 8002c2e:	6001      	str	r1, [r0, #0]
            m_total += other.m_total;
 8002c30:	e9d0 1c02 	ldrd	r1, ip, [r0, #8]
 8002c34:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8002c38:	18c9      	adds	r1, r1, r3
 8002c3a:	eb42 020c 	adc.w	r2, r2, ip
 8002c3e:	e9c0 1202 	strd	r1, r2, [r0, #8]
 8002c42:	b004      	add	sp, #16
 8002c44:	4770      	bx	lr

08002c46 <BugCheck::AssertInterruptsOn#4946>:
        {
            Assert( Processor.Instance.AreInterruptsDisabled() == true, BugCheck.StopCode.InterruptsNotDisabled );
        }

        public static void AssertInterruptsOn()
        {
 8002c46:	b580      	push	{r7, lr}
 8002c48:	f010 ff54 	bl	8013af4 <CMSIS_STUB_SCB__get_BASEPRI>
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	2802      	cmp	r0, #2
 8002c50:	bf38      	it	cc
 8002c52:	2101      	movcc	r1, #1

        [Inline]
        public static void Assert( bool     condition ,
                                   StopCode code      )
        {
            if(!condition)
 8002c54:	2900      	cmp	r1, #0
 8002c56:	bf08      	it	eq
 8002c58:	bd80      	popeq	{r7, pc}
            {
                Raise( code );
 8002c5a:	2001      	movs	r0, #1
 8002c5c:	f7fd fb40 	bl	80002e0 <BugCheck::Raise#4938>

08002c60 <ThreadManager::SwitchToWait#3333>:
                RescheduleAndRequestContextSwitchIfNeeded(HardwareException.None);
            }
        }

        public virtual void SwitchToWait( Synchronization.WaitingRecord wr )
        {
 8002c60:	b570      	push	{r4, r5, r6, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	2600      	movs	r6, #0
 8002c66:	460c      	mov	r4, r1
 8002c68:	4605      	mov	r5, r0
 8002c6a:	9601      	str	r6, [sp, #4]
            BugCheck.AssertInterruptsOn();
 8002c6c:	f7ff ffeb 	bl	8002c46 <BugCheck::AssertInterruptsOn#4946>
 8002c70:	2001      	movs	r0, #1
 8002c72:	f010 ff49 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
 8002c76:	9600      	str	r6, [sp, #0]
 8002c78:	e9cd 0000 	strd	r0, r0, [sp]
 8002c7c:	f894 0020 	ldrb.w	r0, [r4, #32]

            using(SmartHandles.InterruptState hnd = SmartHandles.InterruptState.Disable())
            {
                if(wr.Processed == false)
 8002c80:	b108      	cbz	r0, 8002c86 <ThreadManager::SwitchToWait#3333+0x26>
 8002c82:	ae01      	add	r6, sp, #4
 8002c84:	e025      	b.n	8002cd2 <ThreadManager::SwitchToWait#3333+0x72>
 8002c86:	6924      	ldr	r4, [r4, #16]
                {
                    ThreadImpl thread = wr.Source;

                    m_waitingThreads.InsertAtTail( thread.SchedulingLink );
 8002c88:	6928      	ldr	r0, [r5, #16]
 8002c8a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002c8c:	f7ff ff33 	bl	8002af6 <KernelList`1::InsertAtTail#17801>

                    thread.State |= System.Threading.ThreadState.WaitSleepJoin;
 8002c90:	4620      	mov	r0, r4
 8002c92:	f7ff fdb7 	bl	8002804 <Thread::get_State#4218>
 8002c96:	f040 0120 	orr.w	r1, r0, #32
 8002c9a:	4620      	mov	r0, r4
 8002c9c:	f7ff fdb4 	bl	8002808 <Thread::set_State#4219>

                    InvalidateNextWaitTimer();
 8002ca0:	4628      	mov	r0, r5
 8002ca2:	f7ff fc1b 	bl	80024dc <ThreadManager::InvalidateNextWaitTimer#3347>

                    RescheduleAndRequestContextSwitchIfNeeded( hnd.GetCurrentExceptionMode() );
 8002ca6:	f7ff ff61 	bl	8002b6c <InterruptState::GetCurrentExceptionMode#5592>
 8002caa:	4601      	mov	r1, r0
 8002cac:	4628      	mov	r0, r5
 8002cae:	f7ff ff80 	bl	8002bb2 <ThreadManager::RescheduleAndRequestContextSwitchIfNeeded#3337>
 8002cb2:	ae01      	add	r6, sp, #4
 8002cb4:	e008      	b.n	8002cc8 <ThreadManager::SwitchToWait#3333+0x68>

                    while(thread.IsWaiting)
                    {
                        hnd.Toggle();
 8002cb6:	9801      	ldr	r0, [sp, #4]
 8002cb8:	f010 ff26 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
 8002cbc:	4605      	mov	r5, r0
 8002cbe:	f010 ffef 	bl	8013ca0 <Nop>
 8002cc2:	4628      	mov	r0, r5
 8002cc4:	f010 ff20 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>

                    InvalidateNextWaitTimer();

                    RescheduleAndRequestContextSwitchIfNeeded( hnd.GetCurrentExceptionMode() );

                    while(thread.IsWaiting)
 8002cc8:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 8002ccc:	f010 0f20 	tst.w	r0, #32
 8002cd0:	d1f1      	bne.n	8002cb6 <ThreadManager::SwitchToWait#3333+0x56>
                    {
                        hnd.Toggle();
                    }
                }
            }
 8002cd2:	6830      	ldr	r0, [r6, #0]
 8002cd4:	f010 ff18 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
 8002cd8:	b002      	add	sp, #8
 8002cda:	bd70      	pop	{r4, r5, r6, pc}

08002cdc <ThreadManager::TimeQuantumExpired#3335>:
                }
            }
        }

        public virtual void TimeQuantumExpired( )
        {
 8002cdc:	b510      	push	{r4, lr}
 8002cde:	4604      	mov	r4, r0
#if !ARMv7
            BugCheck.AssertInterruptsOff( );
#endif

            InsertInPriorityOrder( m_runningThread );
 8002ce0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002ce2:	f7ff ff1a 	bl	8002b1a <ThreadManager::InsertInPriorityOrder#3354>

            Reschedule( );
 8002ce6:	4620      	mov	r0, r4
 8002ce8:	f000 f801 	bl	8002cee <ThreadManager::Reschedule#3338>
 8002cec:	bd10      	pop	{r4, pc}

08002cee <ThreadManager::Reschedule#3338>:
                }
            }
        }

        public virtual void Reschedule()
        {
 8002cee:	b580      	push	{r7, lr}
            SelectNextThreadToRun();
 8002cf0:	f000 f83e 	bl	8002d70 <ThreadManager::SelectNextThreadToRun#3339>
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <ThreadManager::SetNextQuantumTimerIfNeeded#3336>:

            Reschedule( );
        }

        public virtual void SetNextQuantumTimerIfNeeded()
        {
 8002cf6:	b5b0      	push	{r4, r5, r7, lr}
 8002cf8:	4604      	mov	r4, r0
            ThreadImpl nextThread = m_nextThread;
 8002cfa:	6aa5      	ldr	r5, [r4, #40]	; 0x28

            if(nextThread == m_idleThread)
 8002cfc:	69a0      	ldr	r0, [r4, #24]
 8002cfe:	4285      	cmp	r5, r0
 8002d00:	d009      	beq.n	8002d16 <ThreadManager::SetNextQuantumTimerIfNeeded#3336+0x20>
            {
                CancelQuantumTimer(); // No need to set a timer, we are just idling.
            }
            else
            {
                ThreadImpl lastThread = m_readyThreads.LastTarget();
 8002d02:	68e0      	ldr	r0, [r4, #12]
 8002d04:	f000 f812 	bl	8002d2c <KernelList`1::LastTarget#17805>
 8002d08:	2800      	cmp	r0, #0
 8002d0a:	4601      	mov	r1, r0
 8002d0c:	bf18      	it	ne
 8002d0e:	2101      	movne	r1, #1

                //
                // If the next thread is not an idle thread, there has to be a ready thread.
                //
                BugCheck.Assert( lastThread != null, BugCheck.StopCode.ExpectingReadyThread );
 8002d10:	b149      	cbz	r1, 8002d26 <ThreadManager::SetNextQuantumTimerIfNeeded#3336+0x30>

                if(lastThread == nextThread)
 8002d12:	42a8      	cmp	r0, r5
 8002d14:	d103      	bne.n	8002d1e <ThreadManager::SetNextQuantumTimerIfNeeded#3336+0x28>
        {
            ThreadImpl nextThread = m_nextThread;

            if(nextThread == m_idleThread)
            {
                CancelQuantumTimer(); // No need to set a timer, we are just idling.
 8002d16:	4620      	mov	r0, r4
 8002d18:	f000 f815 	bl	8002d46 <ThreadManager::CancelQuantumTimer#17329>
 8002d1c:	bdb0      	pop	{r4, r5, r7, pc}
                {
                    CancelQuantumTimer(); // Only one ready thread, no need to preempt it.
                }
                else
                {
                    SetNextQuantumTimer();
 8002d1e:	4620      	mov	r0, r4
 8002d20:	f000 f80c 	bl	8002d3c <ThreadManager::SetNextQuantumTimer#17330>
 8002d24:	bdb0      	pop	{r4, r5, r7, pc}
 8002d26:	2005      	movs	r0, #5
 8002d28:	f7fd fada 	bl	80002e0 <BugCheck::Raise#4938>

08002d2c <KernelList`1::LastTarget#17805>:

        public T LastTarget()
        {
            KernelNode< T > node = m_tail.Previous;

            if(node != m_head)
 8002d2c:	e9d0 1002 	ldrd	r1, r0, [r0, #8]
            return null;
        }

        public T LastTarget()
        {
            KernelNode< T > node = m_tail.Previous;
 8002d30:	68c0      	ldr	r0, [r0, #12]

            if(node != m_head)
 8002d32:	4288      	cmp	r0, r1
 8002d34:	bf14      	ite	ne
 8002d36:	6900      	ldrne	r0, [r0, #16]
 8002d38:	2000      	moveq	r0, #0
 8002d3a:	4770      	bx	lr

08002d3c <ThreadManager::SetNextQuantumTimer#17330>:
        {
            m_SysTickTimer.Cancel();
        }

        public override void SetNextQuantumTimer()
        {
 8002d3c:	b580      	push	{r7, lr}
            m_SysTickTimer.Schedule( ); 
 8002d3e:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8002d40:	f005 fc52 	bl	80085e8 <SysTickTimer::Schedule#17432>
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <ThreadManager::CancelQuantumTimer#17329>:
            m_SysTickTimer = Drivers.ContextSwitchTimer.Instance.CreateTimer( TimeQuantumExpired );
            m_SysTickTimer.Schedule();
        }

        public override void CancelQuantumTimer()
        {
 8002d46:	b580      	push	{r7, lr}
            m_SysTickTimer.Cancel();
 8002d48:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8002d4a:	f005 fc53 	bl	80085f4 <SysTickTimer::Cancel#17427>
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <ProcessorARMv7M::RaiseSystemHandler#3407>:

            CUSTOM_STUB_SCB_set_CCR( ccr );
        }

        internal static void RaiseSystemHandler( uint mask )
        {
 8002d50:	b580      	push	{r7, lr}
 8002d52:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002d56:	2200      	movs	r2, #0
 8002d58:	f2c6 11bf 	movt	r1, #25023	; 0x61bf
 8002d5c:	4208      	tst	r0, r1
 8002d5e:	bf08      	it	eq
 8002d60:	2201      	moveq	r2, #1
 8002d62:	b112      	cbz	r2, 8002d6a <ProcessorARMv7M::RaiseSystemHandler#3407+0x1a>
 8002d64:	f010 ff22 	bl	8013bac <CUSTOM_STUB_SCB_ICSR_RaiseSystemException>
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	2009      	movs	r0, #9
 8002d6c:	f7fd fab8 	bl	80002e0 <BugCheck::Raise#4938>

08002d70 <ThreadManager::SelectNextThreadToRun#3339>:
        {
            SelectNextThreadToRun();
        }

        public void SelectNextThreadToRun()
        {
 8002d70:	b5b0      	push	{r4, r5, r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	4604      	mov	r4, r0
 8002d76:	2500      	movs	r5, #0
 8002d78:	2001      	movs	r0, #1
 8002d7a:	9501      	str	r5, [sp, #4]
 8002d7c:	f010 fec4 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
 8002d80:	9500      	str	r5, [sp, #0]
 8002d82:	e9cd 0000 	strd	r0, r0, [sp]
            using(SmartHandles.InterruptState.Disable())
            {
                ThreadImpl thread = m_readyThreads.FirstTarget();
 8002d86:	68e0      	ldr	r0, [r4, #12]
 8002d88:	f000 f80c 	bl	8002da4 <KernelList`1::FirstTarget#17803>

                m_nextThread = thread != null ? thread : m_idleThread;
 8002d8c:	2800      	cmp	r0, #0
 8002d8e:	bf08      	it	eq
 8002d90:	69a0      	ldreq	r0, [r4, #24]
 8002d92:	62a0      	str	r0, [r4, #40]	; 0x28
                
                SetNextQuantumTimerIfNeeded();
 8002d94:	4620      	mov	r0, r4
 8002d96:	f7ff ffae 	bl	8002cf6 <ThreadManager::SetNextQuantumTimerIfNeeded#3336>
            }
 8002d9a:	9801      	ldr	r0, [sp, #4]
 8002d9c:	f010 feb4 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
 8002da0:	b002      	add	sp, #8
 8002da2:	bdb0      	pop	{r4, r5, r7, pc}

08002da4 <KernelList`1::FirstTarget#17803>:
            return null;
        }

        public T FirstTarget()
        {
            KernelNode< T > node = m_head.Next;
 8002da4:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
 8002da8:	6888      	ldr	r0, [r1, #8]

            if(node != m_tail)
 8002daa:	4290      	cmp	r0, r2
 8002dac:	bf14      	ite	ne
 8002dae:	6900      	ldrne	r0, [r0, #16]
 8002db0:	2000      	moveq	r0, #0
 8002db2:	4770      	bx	lr

08002db4 <ThreadManager::ComputeNextTimeout#3349>:

            ComputeNextTimeout();
        }

        private void ComputeNextTimeout()
        {
 8002db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002db6:	b085      	sub	sp, #20
 8002db8:	4604      	mov	r4, r0
 8002dba:	4819      	ldr	r0, [pc, #100]	; (8002e20 <ThreadManager::ComputeNextTimeout#3349+0x6c>)
            SchedulerTime            nextTimeout = SchedulerTime.MaxValue;
 8002dbc:	4919      	ldr	r1, [pc, #100]	; (8002e24 <ThreadManager::ComputeNextTimeout#3349+0x70>)
 8002dbe:	4478      	add	r0, pc
 8002dc0:	4408      	add	r0, r1
 8002dc2:	e9d0 651f 	ldrd	r6, r5, [r0, #124]	; 0x7c
            KernelNode< ThreadImpl > node        = m_waitingThreads.StartOfForwardWalk;
 8002dc6:	6920      	ldr	r0, [r4, #16]
 8002dc8:	f000 f851 	bl	8002e6e <KernelList`1::get_StartOfForwardWalk#17807>
 8002dcc:	4607      	mov	r7, r0
 8002dce:	e019      	b.n	8002e04 <ThreadManager::ComputeNextTimeout#3349+0x50>
 8002dd0:	6938      	ldr	r0, [r7, #16]

            while(node.IsValidForForwardMove)
            {
                SchedulerTime threadTimeout = node.Target.GetFirstTimeout();
 8002dd2:	f7ff fbc9 	bl	8002568 <Thread::GetFirstTimeout#4193>
 8002dd6:	aa01      	add	r2, sp, #4
 8002dd8:	9504      	str	r5, [sp, #16]
 8002dda:	e882 0043 	stmia.w	r2, {r0, r1, r6}
 8002dde:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8002de2:	4282      	cmp	r2, r0
 8002de4:	f04f 0200 	mov.w	r2, #0
 8002de8:	bf88      	it	hi
 8002dea:	2201      	movhi	r2, #1
 8002dec:	428b      	cmp	r3, r1
 8002dee:	f04f 0300 	mov.w	r3, #0
 8002df2:	bf88      	it	hi
 8002df4:	2301      	movhi	r3, #1
 8002df6:	bf08      	it	eq
 8002df8:	4613      	moveq	r3, r2

                if(nextTimeout > threadTimeout)
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	bf1c      	itt	ne
 8002dfe:	460d      	movne	r5, r1
 8002e00:	4606      	movne	r6, r0
 8002e02:	68bf      	ldr	r7, [r7, #8]
        private void ComputeNextTimeout()
        {
            SchedulerTime            nextTimeout = SchedulerTime.MaxValue;
            KernelNode< ThreadImpl > node        = m_waitingThreads.StartOfForwardWalk;

            while(node.IsValidForForwardMove)
 8002e04:	4638      	mov	r0, r7
 8002e06:	f000 f835 	bl	8002e74 <KernelNode`1::get_IsValidForForwardMove#17839>
 8002e0a:	f010 0fff 	tst.w	r0, #255	; 0xff
 8002e0e:	d1df      	bne.n	8002dd0 <ThreadManager::ComputeNextTimeout#3349+0x1c>
                }

                node = node.Next;
            }

            SetNextWaitTimer( nextTimeout );
 8002e10:	4620      	mov	r0, r4
 8002e12:	4632      	mov	r2, r6
 8002e14:	462b      	mov	r3, r5
 8002e16:	f000 f833 	bl	8002e80 <ThreadManager::SetNextWaitTimer#16998>
 8002e1a:	b005      	add	sp, #20
 8002e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e1e:	46c0      	nop			; (mov r8, r8)
 8002e20:	17ffe9f2 	.word	0x17ffe9f2
 8002e24:	fffffe3c 	.word	0xfffffe3c

08002e28 <ThreadManager::WaitExpired#3348>:
                ComputeNextTimeout();
            }
        }

        protected void WaitExpired( SchedulerTime currentTime )
        {
 8002e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e2c:	4680      	mov	r8, r0
 8002e2e:	2001      	movs	r0, #1
 8002e30:	461d      	mov	r5, r3
 8002e32:	4616      	mov	r6, r2
 8002e34:	f888 0020 	strb.w	r0, [r8, #32]
            m_noInvalidateNextWaitTimerRecursion = true;

            KernelNode< ThreadImpl > node = m_waitingThreads.StartOfForwardWalk;
 8002e38:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8002e3c:	f000 f817 	bl	8002e6e <KernelList`1::get_StartOfForwardWalk#17807>
 8002e40:	4607      	mov	r7, r0
 8002e42:	e006      	b.n	8002e52 <ThreadManager::WaitExpired#3348+0x2a>
 8002e44:	6938      	ldr	r0, [r7, #16]
 8002e46:	68bc      	ldr	r4, [r7, #8]

            while(node.IsValidForForwardMove)
            {
                KernelNode< ThreadImpl > nodeNext = node.Next;

                node.Target.ProcessWaitExpiration( currentTime );
 8002e48:	4632      	mov	r2, r6
 8002e4a:	462b      	mov	r3, r5
 8002e4c:	f7ff fbac 	bl	80025a8 <Thread::ProcessWaitExpiration#4194>
 8002e50:	4627      	mov	r7, r4
        {
            m_noInvalidateNextWaitTimerRecursion = true;

            KernelNode< ThreadImpl > node = m_waitingThreads.StartOfForwardWalk;

            while(node.IsValidForForwardMove)
 8002e52:	4638      	mov	r0, r7
 8002e54:	f000 f80e 	bl	8002e74 <KernelNode`1::get_IsValidForForwardMove#17839>
 8002e58:	f010 0fff 	tst.w	r0, #255	; 0xff
 8002e5c:	d1f2      	bne.n	8002e44 <ThreadManager::WaitExpired#3348+0x1c>
 8002e5e:	2000      	movs	r0, #0
 8002e60:	f888 0020 	strb.w	r0, [r8, #32]
                node = nodeNext;
            }

            m_noInvalidateNextWaitTimerRecursion = false;

            ComputeNextTimeout();
 8002e64:	4640      	mov	r0, r8
 8002e66:	f7ff ffa5 	bl	8002db4 <ThreadManager::ComputeNextTimeout#3349>
 8002e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002e6e <KernelList`1::get_StartOfForwardWalk#17807>:

        public KernelNode< T > StartOfForwardWalk
        {
            get
            {
                return m_head.Next;
 8002e6e:	6880      	ldr	r0, [r0, #8]
 8002e70:	6880      	ldr	r0, [r0, #8]
 8002e72:	4770      	bx	lr

08002e74 <KernelNode`1::get_IsValidForForwardMove#17839>:

        public bool IsValidForForwardMove
        {
            get
            {
                return m_next != null;
 8002e74:	6880      	ldr	r0, [r0, #8]
 8002e76:	2800      	cmp	r0, #0
 8002e78:	bf18      	it	ne
 8002e7a:	2001      	movne	r0, #1
 8002e7c:	4770      	bx	lr
 8002e7e:	46c0      	nop			; (mov r8, r8)

08002e80 <ThreadManager::SetNextWaitTimer#16998>:
            m_timerForWaits = Drivers.SystemTimer.Instance.CreateTimer( WaitExpired );
            DeviceModels.Chipset.CortexM3.Drivers.InterruptController.Instance.Activate();
        }

        public override void SetNextWaitTimer( RT.SchedulerTime nextTimeout )
        {
 8002e80:	b510      	push	{r4, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	f8df c034 	ldr.w	ip, [pc, #52]	; 8002ebc <ThreadManager::SetNextWaitTimer#16998+0x3c>
            if(nextTimeout != RT.SchedulerTime.MaxValue)
 8002e88:	490d      	ldr	r1, [pc, #52]	; (8002ec0 <ThreadManager::SetNextWaitTimer#16998+0x40>)
 8002e8a:	44fc      	add	ip, pc
 8002e8c:	4461      	add	r1, ip
 8002e8e:	e9d1 c11f 	ldrd	ip, r1, [r1, #124]	; 0x7c
 8002e92:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002e96:	e9cd c100 	strd	ip, r1, [sp]
 8002e9a:	e9dd e402 	ldrd	lr, r4, [sp, #8]
            {
                m_timerForWaits.Timeout = nextTimeout.Units;
 8002e9e:	6c40      	ldr	r0, [r0, #68]	; 0x44
            DeviceModels.Chipset.CortexM3.Drivers.InterruptController.Instance.Activate();
        }

        public override void SetNextWaitTimer( RT.SchedulerTime nextTimeout )
        {
            if(nextTimeout != RT.SchedulerTime.MaxValue)
 8002ea0:	4061      	eors	r1, r4
 8002ea2:	ea8e 040c 	eor.w	r4, lr, ip
 8002ea6:	4321      	orrs	r1, r4
 8002ea8:	d003      	beq.n	8002eb2 <ThreadManager::SetNextWaitTimer#16998+0x32>
            {
                m_timerForWaits.Timeout = nextTimeout.Units;
 8002eaa:	f005 f859 	bl	8007f60 <Timer::set_Timeout#17215>
 8002eae:	b004      	add	sp, #16
 8002eb0:	bd10      	pop	{r4, pc}
            }
            else
            {
                m_timerForWaits.Cancel( );
 8002eb2:	f005 f84f 	bl	8007f54 <Timer::Cancel#17211>
 8002eb6:	b004      	add	sp, #16
 8002eb8:	bd10      	pop	{r4, pc}
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	17ffe926 	.word	0x17ffe926
 8002ec0:	fffffe3c 	.word	0xfffffe3c

08002ec4 <KernelNode`1::InsertBefore#17831>:
        // Helper Methods
        //

        public void InsertBefore( KernelNode< T > place )
        {
            if(m_next != null)
 8002ec4:	6882      	ldr	r2, [r0, #8]
 8002ec6:	2a00      	cmp	r2, #0
        //--//

        [Inline]
        private void RemoveFromList_NoClear()
        {
            KernelNode< T > next = m_next;
 8002ec8:	bf1e      	ittt	ne
 8002eca:	e9d0 2302 	ldrdne	r2, r3, [r0, #8]
 8002ece:	60d3      	strne	r3, [r2, #12]
 8002ed0:	609a      	strne	r2, [r3, #8]
            if(m_next != null)
            {
                RemoveFromList_NoClear();
            }

            KernelNode< T > prev = place.m_previous;
 8002ed2:	68ca      	ldr	r2, [r1, #12]
 8002ed4:	6090      	str	r0, [r2, #8]
 8002ed6:	e9c0 1202 	strd	r1, r2, [r0, #8]
 8002eda:	60c8      	str	r0, [r1, #12]
 8002edc:	4770      	bx	lr
 8002ede:	46c0      	nop			; (mov r8, r8)

08002ee0 <Program::Main#141>:
#error No target board defined.
#endif
        };

        static void Main()
        {
 8002ee0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ee4:	b081      	sub	sp, #4
 8002ee6:	4a55      	ldr	r2, [pc, #340]	; (800303c <Program::Main#141+0x15c>)
#if (TEST_GPIO_INTERRUPTS)
            TestGpioInterrupt(5);
#endif

            var controller = GpioController.GetDefault();
            var pins = new GpioPin[pinNumbers.Length];
 8002ee8:	4b57      	ldr	r3, [pc, #348]	; (8003048 <Program::Main#141+0x168>)
 8002eea:	f8df 8154 	ldr.w	r8, [pc, #340]	; 8003040 <Program::Main#141+0x160>
 8002eee:	4955      	ldr	r1, [pc, #340]	; (8003044 <Program::Main#141+0x164>)
 8002ef0:	447a      	add	r2, pc
 8002ef2:	189f      	adds	r7, r3, r2
 8002ef4:	eb08 0002 	add.w	r0, r8, r2
 8002ef8:	4411      	add	r1, r2
 8002efa:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8002efe:	6892      	ldr	r2, [r2, #8]
 8002f00:	f7fe fb58 	bl	80015b4 <DefaultTypeSystemManager::AllocateArray#5255>
 8002f04:	4605      	mov	r5, r0
 8002f06:	2603      	movs	r6, #3
 8002f08:	e00f      	b.n	8002f2a <Program::Main#141+0x4a>

            for (int i = 0; i < pinNumbers.Length; ++i)
            {
                GpioPin pin = controller.OpenPin(pinNumbers[i]);
 8002f0a:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8002f0e:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 8002f12:	f000 fc2a 	bl	800376a <GpioController::OpenPin#16707>

                // Start with all LEDs on.
                pin.Write(GpioPinValue.High);
 8002f16:	2101      	movs	r1, #1
            var controller = GpioController.GetDefault();
            var pins = new GpioPin[pinNumbers.Length];

            for (int i = 0; i < pinNumbers.Length; ++i)
            {
                GpioPin pin = controller.OpenPin(pinNumbers[i]);
 8002f18:	4604      	mov	r4, r0

                // Start with all LEDs on.
                pin.Write(GpioPinValue.High);
 8002f1a:	f000 fc2b 	bl	8003774 <GpioPin::Write#16737>
                pin.SetDriveMode(GpioPinDriveMode.Output);
 8002f1e:	4620      	mov	r0, r4
 8002f20:	f000 fc44 	bl	80037ac <GpioPin::SetDriveMode#16740>
 8002f24:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
#endif

            var controller = GpioController.GetDefault();
            var pins = new GpioPin[pinNumbers.Length];

            for (int i = 0; i < pinNumbers.Length; ++i)
 8002f28:	3601      	adds	r6, #1
 8002f2a:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8002f2e:	1ef1      	subs	r1, r6, #3
 8002f30:	6880      	ldr	r0, [r0, #8]
 8002f32:	4281      	cmp	r1, r0
 8002f34:	dbe9      	blt.n	8002f0a <Program::Main#141+0x2a>
 8002f36:	4c45      	ldr	r4, [pc, #276]	; (800304c <Program::Main#141+0x16c>)
#if (USE_THREADING)
            var solitary = controller.OpenPin( threadPin );
            solitary.SetDriveMode( GpioPinDriveMode.Output );
#endif

            LedToggler[] blinkingModes = new LedToggler[3];
 8002f38:	4845      	ldr	r0, [pc, #276]	; (8003050 <Program::Main#141+0x170>)
 8002f3a:	2203      	movs	r2, #3
 8002f3c:	447c      	add	r4, pc
 8002f3e:	eb08 0604 	add.w	r6, r8, r4
 8002f42:	1901      	adds	r1, r0, r4
 8002f44:	4630      	mov	r0, r6
 8002f46:	f7fe fb35 	bl	80015b4 <DefaultTypeSystemManager::AllocateArray#5255>
 8002f4a:	4680      	mov	r8, r0
            blinkingModes[0] = new LedTogglerSimultaneous(pins);
 8002f4c:	4841      	ldr	r0, [pc, #260]	; (8003054 <Program::Main#141+0x174>)
 8002f4e:	1901      	adds	r1, r0, r4
 8002f50:	4630      	mov	r0, r6
 8002f52:	f7fd fce5 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8002f56:	4629      	mov	r1, r5
 8002f58:	4607      	mov	r7, r0
 8002f5a:	f000 fb9b 	bl	8003694 <LedTogglerSimultaneous::.ctor#16844>
            blinkingModes[1] = new LedTogglerSequential(pins);
 8002f5e:	483e      	ldr	r0, [pc, #248]	; (8003058 <Program::Main#141+0x178>)
 8002f60:	f8c8 700c 	str.w	r7, [r8, #12]
 8002f64:	1901      	adds	r1, r0, r4
 8002f66:	4630      	mov	r0, r6
 8002f68:	f7fd fcda 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8002f6c:	4629      	mov	r1, r5
 8002f6e:	4607      	mov	r7, r0
 8002f70:	f000 fbb0 	bl	80036d4 <LedTogglerSequential::.ctor#16846>
            blinkingModes[2] = new LedTogglerAlternate(pins);
 8002f74:	4839      	ldr	r0, [pc, #228]	; (800305c <Program::Main#141+0x17c>)
 8002f76:	f8c8 7010 	str.w	r7, [r8, #16]
 8002f7a:	1901      	adds	r1, r0, r4
 8002f7c:	4630      	mov	r0, r6
 8002f7e:	f7fd fccf 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8002f82:	4629      	mov	r1, r5
 8002f84:	4607      	mov	r7, r0
 8002f86:	f000 fbc8 	bl	800371a <LedTogglerAlternate::.ctor#16848>

            var blinkingTimer = new ZeligSupport.Timer();
 8002f8a:	4835      	ldr	r0, [pc, #212]	; (8003060 <Program::Main#141+0x180>)
 8002f8c:	f8c8 7014 	str.w	r7, [r8, #20]
 8002f90:	1907      	adds	r7, r0, r4
 8002f92:	4630      	mov	r0, r6
 8002f94:	4639      	mov	r1, r7
 8002f96:	f7fd fcc3 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8002f9a:	4605      	mov	r5, r0
 8002f9c:	f000 fbc1 	bl	8003722 <Timer::.ctor#16878>
            var blinkingModeSwitchTimer = new ZeligSupport.Timer();
 8002fa0:	4630      	mov	r0, r6
 8002fa2:	4639      	mov	r1, r7
 8002fa4:	f7fd fcbc 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8002fa8:	4681      	mov	r9, r0
 8002faa:	f000 fbba 	bl	8003722 <Timer::.ctor#16878>

            blinkingTimer.start();
 8002fae:	4628      	mov	r0, r5
 8002fb0:	f000 fbbb 	bl	800372a <Timer::start#16879>
            blinkingModeSwitchTimer.start();
 8002fb4:	4648      	mov	r0, r9
 8002fb6:	f000 fbb8 	bl	800372a <Timer::start#16879>
 8002fba:	2600      	movs	r6, #0
 8002fbc:	e00f      	b.n	8002fde <Program::Main#141+0xfe>
                    count++;

                }


                blinkingModes[currentMode].run(blinkingTimer.read() / (period / periodDivider));
 8002fbe:	eb08 0086 	add.w	r0, r8, r6, lsl #2
 8002fc2:	68c4      	ldr	r4, [r0, #12]
 8002fc4:	4628      	mov	r0, r5
 8002fc6:	f000 fbbc 	bl	8003742 <Timer::read#16882>
 8002fca:	f04f 517d 	mov.w	r1, #1061158912	; 0x3f400000
 8002fce:	f018 fd89 	bl	801bae4 <__aeabi_fdiv>
 8002fd2:	4601      	mov	r1, r0
 8002fd4:	6860      	ldr	r0, [r4, #4]
 8002fd6:	69c0      	ldr	r0, [r0, #28]
 8002fd8:	6982      	ldr	r2, [r0, #24]
 8002fda:	4620      	mov	r0, r4
 8002fdc:	4790      	blx	r2
                readVal = ((float)adcChannel.ReadValue()) / adcController.MaxValue * 2;
#endif
                // If ADC isn't in use, this will always be 1
                periodDivider = 1 + readVal;

                if (blinkingTimer.read() >= (period / periodDivider))
 8002fde:	4628      	mov	r0, r5
 8002fe0:	f000 fbaf 	bl	8003742 <Timer::read#16882>
 8002fe4:	f04f 517d 	mov.w	r1, #1061158912	; 0x3f400000
 8002fe8:	4607      	mov	r7, r0
 8002fea:	f018 fe65 	bl	801bcb8 <__aeabi_fcmplt>
 8002fee:	4604      	mov	r4, r0
 8002ff0:	4638      	mov	r0, r7
 8002ff2:	f04f 517d 	mov.w	r1, #1061158912	; 0x3f400000
 8002ff6:	f018 fe87 	bl	801bd08 <__aeabi_fcmpun>
 8002ffa:	4320      	orrs	r0, r4
                {
                    blinkingTimer.reset();
 8002ffc:	bf04      	itt	eq
 8002ffe:	4628      	moveq	r0, r5
 8003000:	f000 fbab 	bleq	800375a <Timer::reset#16881>
                }

                if (blinkingModeSwitchTimer.read() >= timePerMode)
 8003004:	4648      	mov	r0, r9
 8003006:	f000 fb9c 	bl	8003742 <Timer::read#16882>
 800300a:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800300e:	4604      	mov	r4, r0
 8003010:	f018 fe52 	bl	801bcb8 <__aeabi_fcmplt>
 8003014:	4607      	mov	r7, r0
 8003016:	4620      	mov	r0, r4
 8003018:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800301c:	f018 fe74 	bl	801bd08 <__aeabi_fcmpun>
 8003020:	4338      	orrs	r0, r7
 8003022:	d1cc      	bne.n	8002fbe <Program::Main#141+0xde>
                {
                    currentMode = (currentMode + 1) % blinkingModes.Length;
 8003024:	f8d8 4008 	ldr.w	r4, [r8, #8]
                    blinkingModeSwitchTimer.reset();
 8003028:	4648      	mov	r0, r9
 800302a:	f000 fb96 	bl	800375a <Timer::reset#16881>
                    blinkingTimer.reset();
                }

                if (blinkingModeSwitchTimer.read() >= timePerMode)
                {
                    currentMode = (currentMode + 1) % blinkingModes.Length;
 800302e:	1c70      	adds	r0, r6, #1
 8003030:	fb90 f1f4 	sdiv	r1, r0, r4
 8003034:	fb01 0614 	mls	r6, r1, r4, r0
 8003038:	e7c1      	b.n	8002fbe <Program::Main#141+0xde>
 800303a:	46c0      	nop			; (mov r8, r8)
 800303c:	17ffe8c0 	.word	0x17ffe8c0
 8003040:	ffffea64 	.word	0xffffea64
 8003044:	e8008b2c 	.word	0xe8008b2c
 8003048:	fffffe3c 	.word	0xfffffe3c
 800304c:	17ffe874 	.word	0x17ffe874
 8003050:	e8008bbc 	.word	0xe8008bbc
 8003054:	e8008c4c 	.word	0xe8008c4c
 8003058:	e8008cdc 	.word	0xe8008cdc
 800305c:	e8008d6c 	.word	0xe8008d6c
 8003060:	e8008dfc 	.word	0xe8008dfc

08003064 <ThreadManager::set_CurrentThread#3359>:
            {
                return m_runningThread;
            }

            set
            {
 8003064:	b5b0      	push	{r4, r5, r7, lr}
 8003066:	4604      	mov	r4, r0
 8003068:	480a      	ldr	r0, [pc, #40]	; (8003094 <ThreadManager::set_CurrentThread#3359+0x30>)

                ThreadImpl oldValue = m_runningThread;

                if(oldValue != value)
                {
                    oldValue.ReleasedProcessor();
 800306a:	4d0b      	ldr	r5, [pc, #44]	; (8003098 <ThreadManager::set_CurrentThread#3359+0x34>)
 800306c:	4478      	add	r0, pc
 800306e:	4428      	add	r0, r5
 8003070:	6a40      	ldr	r0, [r0, #36]	; 0x24
                BugCheck.AssertInterruptsOff();
#endif

                ThreadImpl oldValue = m_runningThread;

                if(oldValue != value)
 8003072:	42a0      	cmp	r0, r4
 8003074:	bf08      	it	eq
 8003076:	bdb0      	popeq	{r4, r5, r7, pc}
                {
                    oldValue.ReleasedProcessor();
 8003078:	f7ff f934 	bl	80022e4 <Thread::ReleasedProcessor#4187>
 800307c:	4807      	ldr	r0, [pc, #28]	; (800309c <ThreadManager::set_CurrentThread#3359+0x38>)
 800307e:	4478      	add	r0, pc
 8003080:	4405      	add	r5, r0

                    m_runningThread = value;

                    value.AcquiredProcessor();
 8003082:	4620      	mov	r0, r4
 8003084:	626c      	str	r4, [r5, #36]	; 0x24
 8003086:	f7ff f965 	bl	8002354 <Thread::AcquiredProcessor#4188>

                    SetNextQuantumTimerIfNeeded();
 800308a:	4628      	mov	r0, r5
 800308c:	f7ff fe33 	bl	8002cf6 <ThreadManager::SetNextQuantumTimerIfNeeded#3336>
 8003090:	bdb0      	pop	{r4, r5, r7, pc}
 8003092:	46c0      	nop			; (mov r8, r8)
 8003094:	17ffe744 	.word	0x17ffe744
 8003098:	ffffea1c 	.word	0xffffea1c
 800309c:	17ffe732 	.word	0x17ffe732

080030a0 <ProcessorARMv7M::InitializeProcessor#3405>:
        //
        // Helper Methods
        //

        public override void InitializeProcessor( )
        {
 80030a0:	b580      	push	{r7, lr}
 80030a2:	2001      	movs	r0, #1
 80030a4:	f010 fd30 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
 80030a8:	2000      	movs	r0, #0
 80030aa:	f010 fd8f 	bl	8013bcc <CUSTOM_STUB_SCB_SCR_SetSystemControlRegister>
 80030ae:	f000 f811 	bl	80030d4 <ProcessorARMv7M::Set_8_BytesAlignment#3406>
 80030b2:	f06f 000c 	mvn.w	r0, #12
 80030b6:	f000 f817 	bl	80030e8 <ProcessorARMv7M::EnableSystemHandler#3416>
 80030ba:	f06f 000a 	mvn.w	r0, #10
 80030be:	f000 f813 	bl	80030e8 <ProcessorARMv7M::EnableSystemHandler#3416>
 80030c2:	f06f 000b 	mvn.w	r0, #11
 80030c6:	f000 f80f 	bl	80030e8 <ProcessorARMv7M::EnableSystemHandler#3416>
 80030ca:	f06f 0009 	mvn.w	r0, #9
 80030ce:	f000 f80b 	bl	80030e8 <ProcessorARMv7M::EnableSystemHandler#3416>
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <ProcessorARMv7M::Set_8_BytesAlignment#3406>:
 80030d4:	b580      	push	{r7, lr}
 80030d6:	f010 fd49 	bl	8013b6c <CUSTOM_STUB_SCB_get_CCR>
 80030da:	f240 2119 	movw	r1, #537	; 0x219
 80030de:	4308      	orrs	r0, r1
 80030e0:	f010 fd4a 	bl	8013b78 <CUSTOM_STUB_SCB_set_CCR>
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	46c0      	nop			; (mov r8, r8)

080030e8 <ProcessorARMv7M::EnableSystemHandler#3416>:

        //--//


        private static void EnableSystemHandler( IRQn_Type ex )
        {
 80030e8:	b580      	push	{r7, lr}
 80030ea:	2100      	movs	r1, #0
 80030ec:	2800      	cmp	r0, #0
 80030ee:	bfb8      	it	lt
 80030f0:	2101      	movlt	r1, #1
 80030f2:	2900      	cmp	r1, #0
 80030f4:	d027      	beq.n	8003146 <ProcessorARMv7M::EnableSystemHandler#3416+0x5e>
 80030f6:	f110 0f2a 	cmn.w	r0, #42	; 0x2a
 80030fa:	d101      	bne.n	8003100 <ProcessorARMv7M::EnableSystemHandler#3416+0x18>
 80030fc:	2000      	movs	r0, #0
 80030fe:	e00d      	b.n	800311c <ProcessorARMv7M::EnableSystemHandler#3416+0x34>
 8003100:	f100 010e 	add.w	r1, r0, #14
 8003104:	290d      	cmp	r1, #13
 8003106:	d81b      	bhi.n	8003140 <ProcessorARMv7M::EnableSystemHandler#3416+0x58>
 8003108:	2000      	movs	r0, #0
 800310a:	e8df f001 	tbb	[pc, r1]
 800310e:	0707      	.short	0x0707
 8003110:	19140f0a 	.word	0x19140f0a
 8003114:	07191919 	.word	0x07191919
 8003118:	1c1c191f 	.word	0x1c1c191f
 800311c:	f010 fd36 	bl	8013b8c <CUSTOM_STUB_SCB_SHCRS_EnableSystemHandler>
 8003120:	bd80      	pop	{r7, pc}
 8003122:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003126:	f010 fd31 	bl	8013b8c <CUSTOM_STUB_SCB_SHCRS_EnableSystemHandler>
 800312a:	bd80      	pop	{r7, pc}
 800312c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003130:	f010 fd2c 	bl	8013b8c <CUSTOM_STUB_SCB_SHCRS_EnableSystemHandler>
 8003134:	bd80      	pop	{r7, pc}
 8003136:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800313a:	f010 fd27 	bl	8013b8c <CUSTOM_STUB_SCB_SHCRS_EnableSystemHandler>
 800313e:	bd80      	pop	{r7, pc}
 8003140:	2009      	movs	r0, #9
 8003142:	f7fd f8cd 	bl	80002e0 <BugCheck::Raise#4938>
 8003146:	2009      	movs	r0, #9
 8003148:	f7fd f8ca 	bl	80002e0 <BugCheck::Raise#4938>
 800314c:	200e      	movs	r0, #14
 800314e:	f7fd f8c7 	bl	80002e0 <BugCheck::Raise#4938>
 8003152:	46c0      	nop			; (mov r8, r8)

08003154 <ProcessorARMv7M::RaiseSupervisorCall#3408>:
 8003154:	b570      	push	{r4, r5, r6, lr}
 8003156:	b2c0      	uxtb	r0, r0
 8003158:	3811      	subs	r0, #17
 800315a:	2802      	cmp	r0, #2
 800315c:	d004      	beq.n	8003168 <ProcessorARMv7M::RaiseSupervisorCall#3408+0x14>
 800315e:	2801      	cmp	r0, #1
 8003160:	d105      	bne.n	800316e <ProcessorARMv7M::RaiseSupervisorCall#3408+0x1a>
 8003162:	f010 fd45 	bl	8013bf0 <CUSTOM_STUB_RaiseSupervisorCallForStartThreads>
 8003166:	bd70      	pop	{r4, r5, r6, pc}
 8003168:	f010 fd46 	bl	8013bf8 <CUSTOM_STUB_RaiseSupervisorCallForRetireThread>
 800316c:	bd70      	pop	{r4, r5, r6, pc}
 800316e:	b910      	cbnz	r0, 8003176 <ProcessorARMv7M::RaiseSupervisorCall#3408+0x22>
 8003170:	f010 fd3a 	bl	8013be8 <CUSTOM_STUB_RaiseSupervisorCallForLongJump>
 8003174:	bd70      	pop	{r4, r5, r6, pc}
 8003176:	4e09      	ldr	r6, [pc, #36]	; (800319c <ProcessorARMv7M::RaiseSupervisorCall#3408+0x48>)
 8003178:	4809      	ldr	r0, [pc, #36]	; (80031a0 <ProcessorARMv7M::RaiseSupervisorCall#3408+0x4c>)
 800317a:	447e      	add	r6, pc
 800317c:	1984      	adds	r4, r0, r6
 800317e:	4809      	ldr	r0, [pc, #36]	; (80031a4 <ProcessorARMv7M::RaiseSupervisorCall#3408+0x50>)
 8003180:	1981      	adds	r1, r0, r6
 8003182:	4620      	mov	r0, r4
 8003184:	f7fd fbcc 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8003188:	4605      	mov	r5, r0
 800318a:	4807      	ldr	r0, [pc, #28]	; (80031a8 <ProcessorARMv7M::RaiseSupervisorCall#3408+0x54>)
 800318c:	1981      	adds	r1, r0, r6
 800318e:	4628      	mov	r0, r5
 8003190:	f000 f80c 	bl	80031ac <ArgumentException::.ctor#6356>
 8003194:	4620      	mov	r0, r4
 8003196:	4629      	mov	r1, r5
 8003198:	f7fd fbd8 	bl	800094c <TypeSystemManager::Throw#5247>
 800319c:	17ffe636 	.word	0x17ffe636
 80031a0:	ffffea64 	.word	0xffffea64
 80031a4:	e800842c 	.word	0xe800842c
 80031a8:	e800845c 	.word	0xe800845c

080031ac <ArgumentException::.ctor#6356>:
        }

        // Creates a new ArgumentException with its message
        // string set to message.
        //
        public ArgumentException( String message ) : base( message )
 80031ac:	b580      	push	{r7, lr}
 80031ae:	f002 f85e 	bl	800526e <SystemException::.ctor#7663>
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <ProcessorARMv7M::AreInterruptsDisabled#3421>:
 80031b4:	b580      	push	{r7, lr}
 80031b6:	f010 fc9d 	bl	8013af4 <CMSIS_STUB_SCB__get_BASEPRI>
 80031ba:	2100      	movs	r1, #0
 80031bc:	2802      	cmp	r0, #2
 80031be:	bf38      	it	cc
 80031c0:	2101      	movcc	r1, #1
 80031c2:	4608      	mov	r0, r1
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <ProcessorARMv7M::Breakpoint#3424>:
 80031c6:	b580      	push	{r7, lr}
 80031c8:	f04f 30a5 	mov.w	r0, #2779096485	; 0xa5a5a5a5
 80031cc:	f010 fd5a 	bl	8013c84 <Breakpoint>
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <ProcessorARMv7M::VerifyHandlerMode#3432>:
 80031d2:	b580      	push	{r7, lr}
 80031d4:	f010 fc6e 	bl	8013ab4 <CMSIS_STUB_SCB__get_CONTROL>
 80031d8:	2100      	movs	r1, #0
 80031da:	f010 0f02 	tst.w	r0, #2
 80031de:	bf08      	it	eq
 80031e0:	2101      	moveq	r1, #1
 80031e2:	4608      	mov	r0, r1
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <ProcessorARMv7M::IsBusFaultAddressValid#3448>:
 80031e6:	b580      	push	{r7, lr}
 80031e8:	f010 fde4 	bl	8013db4 <CUSTOM_STUB_SCB__get_CFSR>
 80031ec:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
 80031f0:	0bc0      	lsrs	r0, r0, #15
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <ProcessorARMv7M::IsBusFaultAddressPrecise#3449>:
 80031f4:	b580      	push	{r7, lr}
 80031f6:	f010 fddd 	bl	8013db4 <CUSTOM_STUB_SCB__get_CFSR>
 80031fa:	f400 7000 	and.w	r0, r0, #512	; 0x200
 80031fe:	0a40      	lsrs	r0, r0, #9
 8003200:	bd80      	pop	{r7, pc}
 8003202:	46c0      	nop			; (mov r8, r8)

08003204 <MethodWrapper::Prologue#3505>:
 8003204:	b580      	push	{r7, lr}
 8003206:	4a07      	ldr	r2, [pc, #28]	; (8003224 <MethodWrapper::Prologue#3505+0x20>)
 8003208:	4807      	ldr	r0, [pc, #28]	; (8003228 <MethodWrapper::Prologue#3505+0x24>)
 800320a:	4908      	ldr	r1, [pc, #32]	; (800322c <MethodWrapper::Prologue#3505+0x28>)
 800320c:	4b08      	ldr	r3, [pc, #32]	; (8003230 <MethodWrapper::Prologue#3505+0x2c>)
 800320e:	447a      	add	r2, pc
 8003210:	4410      	add	r0, r2
 8003212:	4411      	add	r1, r2
 8003214:	441a      	add	r2, r3
 8003216:	2301      	movs	r3, #1
 8003218:	f2c0 0340 	movt	r3, #64	; 0x40
 800321c:	f7ff fff2 	bl	8003204 <MethodWrapper::Prologue#3505>
 8003220:	bd80      	pop	{r7, pc}
 8003222:	46c0      	nop			; (mov r8, r8)
 8003224:	17ffe5a2 	.word	0x17ffe5a2
 8003228:	e80073ac 	.word	0xe80073ac
 800322c:	e80085bc 	.word	0xe80085bc
 8003230:	e800866c 	.word	0xe800866c

08003234 <MethodWrapper::Prologue#3506>:
 8003234:	4770      	bx	lr
 8003236:	46c0      	nop			; (mov r8, r8)

08003238 <MethodWrapper::Epilogue#3507>:
 8003238:	b580      	push	{r7, lr}
 800323a:	4a07      	ldr	r2, [pc, #28]	; (8003258 <MethodWrapper::Epilogue#3507+0x20>)
 800323c:	4807      	ldr	r0, [pc, #28]	; (800325c <MethodWrapper::Epilogue#3507+0x24>)
 800323e:	4908      	ldr	r1, [pc, #32]	; (8003260 <MethodWrapper::Epilogue#3507+0x28>)
 8003240:	4b08      	ldr	r3, [pc, #32]	; (8003264 <MethodWrapper::Epilogue#3507+0x2c>)
 8003242:	447a      	add	r2, pc
 8003244:	4410      	add	r0, r2
 8003246:	4411      	add	r1, r2
 8003248:	441a      	add	r2, r3
 800324a:	2301      	movs	r3, #1
 800324c:	f2c0 0340 	movt	r3, #64	; 0x40
 8003250:	f7ff fff2 	bl	8003238 <MethodWrapper::Epilogue#3507>
 8003254:	bd80      	pop	{r7, pc}
 8003256:	46c0      	nop			; (mov r8, r8)
 8003258:	17ffe56e 	.word	0x17ffe56e
 800325c:	e80073ac 	.word	0xe80073ac
 8003260:	e80085bc 	.word	0xe80085bc
 8003264:	e80087ec 	.word	0xe80087ec

08003268 <MethodWrapper::Epilogue#3508>:
 8003268:	4770      	bx	lr

0800326a <CodePointer::get_IsValid#3818>:

        public bool IsValid
        {
            get
            {
                return this.Target.ToInt32() != 0;
 800326a:	6800      	ldr	r0, [r0, #0]
 800326c:	2800      	cmp	r0, #0
 800326e:	bf18      	it	ne
 8003270:	2001      	movne	r0, #1
 8003272:	4770      	bx	lr

08003274 <VTable::GetInterface#3839>:
        public extern static VTable Get( object a );

        [WellKnownMethod( "VTable_GetInterface" )]
        public static CodePointer[] GetInterface( object a             ,
                                                  VTable vtblInterface )
        {
 8003274:	6840      	ldr	r0, [r0, #4]
 8003276:	2200      	movs	r2, #0
            VTable         vtbl  = Get( a );
            InterfaceMap[] array = vtbl.InterfaceMethodPointers;
 8003278:	f8d0 c020 	ldr.w	ip, [r0, #32]

            for(int i = 0; i < array.Length; i++)
 800327c:	f10c 030c 	add.w	r3, ip, #12
 8003280:	e001      	b.n	8003286 <VTable::GetInterface#3839+0x12>
 8003282:	3308      	adds	r3, #8
 8003284:	3201      	adds	r2, #1
 8003286:	f8dc 0008 	ldr.w	r0, [ip, #8]
 800328a:	4282      	cmp	r2, r0
 800328c:	bfa4      	itt	ge
 800328e:	2000      	movge	r0, #0
 8003290:	4770      	bxge	lr
            {
                if(Object.ReferenceEquals( array[i].Interface, vtblInterface ))
 8003292:	6818      	ldr	r0, [r3, #0]
 8003294:	4288      	cmp	r0, r1
 8003296:	d1f4      	bne.n	8003282 <VTable::GetInterface#3839+0xe>
                {
                    return array[i].MethodPointers;
 8003298:	eb0c 00c2 	add.w	r0, ip, r2, lsl #3
 800329c:	6900      	ldr	r0, [r0, #16]
 800329e:	4770      	bx	lr

080032a0 <VTable::CanBeAssignedFrom_Slow#3843>:
            return CanBeAssignedFrom_Slow( target );
        }

        [NoInline]
        private bool CanBeAssignedFrom_Slow( VTable source )
        {
 80032a0:	b570      	push	{r4, r5, r6, lr}
 80032a2:	460c      	mov	r4, r1
 80032a4:	4605      	mov	r5, r0
            if(source.IsSubclassOf( this ))
 80032a6:	4620      	mov	r0, r4
 80032a8:	4629      	mov	r1, r5
 80032aa:	f000 f86b 	bl	8003384 <VTable::IsSubclassOf#3844>
 80032ae:	f010 0fff 	tst.w	r0, #255	; 0xff
 80032b2:	bf1c      	itt	ne
 80032b4:	2001      	movne	r0, #1
 80032b6:	bd70      	popne	{r4, r5, r6, pc}
        public bool IsArray
        {
            [Inline]
            get
            {
                return (this.ShapeCategory & Shape.Array) != 0;
 80032b8:	7e28      	ldrb	r0, [r5, #24]
            if(source.IsSubclassOf( this ))
            {
                return true;
            }

            if(this.IsArray && source.IsArray)
 80032ba:	f010 0f80 	tst.w	r0, #128	; 0x80
        public bool IsArray
        {
            [Inline]
            get
            {
                return (this.ShapeCategory & Shape.Array) != 0;
 80032be:	bf1c      	itt	ne
 80032c0:	7e20      	ldrbne	r0, [r4, #24]
            if(source.IsSubclassOf( this ))
            {
                return true;
            }

            if(this.IsArray && source.IsArray)
 80032c2:	f010 0f80 	tstne.w	r0, #128	; 0x80
 80032c6:	d047      	beq.n	8003358 <VTable::CanBeAssignedFrom_Slow#3843+0xb8>
            {
                CHECKS.ASSERT( this.ShapeCategory == Shape.SzArray || this.ShapeCategory == Shape.MultiArray, "Found array that does not inherit from System.Array" );
 80032c8:	7e28      	ldrb	r0, [r5, #24]
 80032ca:	28c6      	cmp	r0, #198	; 0xc6
 80032cc:	d101      	bne.n	80032d2 <VTable::CanBeAssignedFrom_Slow#3843+0x32>
 80032ce:	2001      	movs	r0, #1
 80032d0:	e004      	b.n	80032dc <VTable::CanBeAssignedFrom_Slow#3843+0x3c>
 80032d2:	7e29      	ldrb	r1, [r5, #24]
 80032d4:	2000      	movs	r0, #0
 80032d6:	29c7      	cmp	r1, #199	; 0xc7
 80032d8:	bf08      	it	eq
 80032da:	2001      	moveq	r0, #1
 80032dc:	4925      	ldr	r1, [pc, #148]	; (8003374 <VTable::CanBeAssignedFrom_Slow#3843+0xd4>)
 80032de:	4a26      	ldr	r2, [pc, #152]	; (8003378 <VTable::CanBeAssignedFrom_Slow#3843+0xd8>)
 80032e0:	4479      	add	r1, pc
 80032e2:	4411      	add	r1, r2
 80032e4:	f000 f862 	bl	80033ac <CHECKS::ASSERT#12162>

                if(this.ShapeCategory == source.ShapeCategory)
 80032e8:	7e20      	ldrb	r0, [r4, #24]
 80032ea:	7e29      	ldrb	r1, [r5, #24]
 80032ec:	4281      	cmp	r1, r0
 80032ee:	d133      	bne.n	8003358 <VTable::CanBeAssignedFrom_Slow#3843+0xb8>
 80032f0:	4822      	ldr	r0, [pc, #136]	; (800337c <VTable::CanBeAssignedFrom_Slow#3843+0xdc>)
                {
                    ArrayReferenceTypeRepresentation tdThis   = (ArrayReferenceTypeRepresentation)this  .TypeInfo;
 80032f2:	4923      	ldr	r1, [pc, #140]	; (8003380 <VTable::CanBeAssignedFrom_Slow#3843+0xe0>)
 80032f4:	4478      	add	r0, pc
 80032f6:	180e      	adds	r6, r1, r0
 80032f8:	6928      	ldr	r0, [r5, #16]
 80032fa:	4631      	mov	r1, r6
 80032fc:	f000 f93a 	bl	8003574 <TypeSystemManager::CastToType#5241>
 8003300:	4605      	mov	r5, r0
                    ArrayReferenceTypeRepresentation tdSource = (ArrayReferenceTypeRepresentation)source.TypeInfo;
 8003302:	6920      	ldr	r0, [r4, #16]
 8003304:	4631      	mov	r1, r6
 8003306:	f000 f935 	bl	8003574 <TypeSystemManager::CastToType#5241>
 800330a:	4604      	mov	r4, r0
 800330c:	6868      	ldr	r0, [r5, #4]

                    if(tdThis.SameShape( tdSource ))
 800330e:	4621      	mov	r1, r4
 8003310:	69c0      	ldr	r0, [r0, #28]
 8003312:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003314:	4628      	mov	r0, r5
 8003316:	4790      	blx	r2
 8003318:	f010 0fff 	tst.w	r0, #255	; 0xff
 800331c:	d01c      	beq.n	8003358 <VTable::CanBeAssignedFrom_Slow#3843+0xb8>
 800331e:	6868      	ldr	r0, [r5, #4]
                    {
                        TypeRepresentation subThis   = tdThis  .ContainedType.UnderlyingType;
 8003320:	69c0      	ldr	r0, [r0, #28]
 8003322:	69c1      	ldr	r1, [r0, #28]
 8003324:	4628      	mov	r0, r5
 8003326:	4788      	blx	r1
 8003328:	6841      	ldr	r1, [r0, #4]
 800332a:	69c9      	ldr	r1, [r1, #28]
 800332c:	6a09      	ldr	r1, [r1, #32]
 800332e:	4788      	blx	r1
 8003330:	4605      	mov	r5, r0
 8003332:	6860      	ldr	r0, [r4, #4]
                        TypeRepresentation subSource = tdSource.ContainedType.UnderlyingType;
 8003334:	69c0      	ldr	r0, [r0, #28]
 8003336:	69c1      	ldr	r1, [r0, #28]
 8003338:	4620      	mov	r0, r4
 800333a:	4788      	blx	r1
 800333c:	6841      	ldr	r1, [r0, #4]
 800333e:	69c9      	ldr	r1, [r1, #28]
 8003340:	6a09      	ldr	r1, [r1, #32]
 8003342:	4788      	blx	r1
 8003344:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8003346:	6aaa      	ldr	r2, [r5, #40]	; 0x28

                        VTable subVTableThis   = subThis  .VirtualTable;
                        VTable subVTableSource = subSource.VirtualTable;

                        if(subVTableThis == subVTableSource)
 8003348:	428a      	cmp	r2, r1
 800334a:	bf04      	itt	eq
 800334c:	2001      	moveq	r0, #1
 800334e:	bd70      	popeq	{r4, r5, r6, pc}
        public bool IsValueType
        {
            [Inline]
            get
            {
                return (this.ShapeCategory & Shape.ValueType) != 0;
 8003350:	7e08      	ldrb	r0, [r1, #24]
                        if(subVTableThis == subVTableSource)
                        {
                            return true;
                        }

                        if(subVTableSource.IsValueType)
 8003352:	f010 0f20 	tst.w	r0, #32
 8003356:	d001      	beq.n	800335c <VTable::CanBeAssignedFrom_Slow#3843+0xbc>
 8003358:	2000      	movs	r0, #0
 800335a:	bd70      	pop	{r4, r5, r6, pc}
        public bool IsInterface
        {
            [Inline]
            get
            {
                return this.ShapeCategory == Shape.Interface;
 800335c:	7e10      	ldrb	r0, [r2, #24]
                            // We require exact matching for value types.
                            //
                            return false;
                        }

                        if(subVTableThis.IsInterface)
 800335e:	2843      	cmp	r0, #67	; 0x43
 8003360:	d104      	bne.n	800336c <VTable::CanBeAssignedFrom_Slow#3843+0xcc>
                        {
                            return subVTableSource.ImplementsInterface( subVTableThis );
 8003362:	4608      	mov	r0, r1
 8003364:	4611      	mov	r1, r2
 8003366:	f000 f925 	bl	80035b4 <VTable::ImplementsInterface#3845>
 800336a:	bd70      	pop	{r4, r5, r6, pc}
                        }

                        return subVTableThis.CanBeAssignedFrom_Slow( subVTableSource );
 800336c:	4610      	mov	r0, r2
 800336e:	f7ff ff97 	bl	80032a0 <VTable::CanBeAssignedFrom_Slow#3843>
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	17ffe4d0 	.word	0x17ffe4d0
 8003378:	e800896c 	.word	0xe800896c
 800337c:	17ffe4bc 	.word	0x17ffe4bc
 8003380:	e8008a6c 	.word	0xe8008a6c

08003384 <VTable::IsSubclassOf#3844>:
            return false;
        }

        [NoInline]
        public bool IsSubclassOf( VTable target )
        {
 8003384:	b570      	push	{r4, r5, r6, lr}
            TypeRepresentation td = this.TypeInfo;
 8003386:	6905      	ldr	r5, [r0, #16]
 8003388:	460c      	mov	r4, r1
 800338a:	2600      	movs	r6, #0
 800338c:	e000      	b.n	8003390 <VTable::IsSubclassOf#3844+0xc>
 800338e:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 8003390:	4628      	mov	r0, r5
 8003392:	2100      	movs	r1, #0
 8003394:	f7fd ffae 	bl	80012f4 <Object::Equals#2397>
            while(td != null)
 8003398:	f010 0fff 	tst.w	r0, #255	; 0xff
 800339c:	d103      	bne.n	80033a6 <VTable::IsSubclassOf#3844+0x22>
 800339e:	6aa8      	ldr	r0, [r5, #40]	; 0x28
            {
                if(target == td.VirtualTable)
 80033a0:	4284      	cmp	r4, r0
 80033a2:	d1f4      	bne.n	800338e <VTable::IsSubclassOf#3844+0xa>
 80033a4:	2601      	movs	r6, #1
 80033a6:	4630      	mov	r0, r6
 80033a8:	bd70      	pop	{r4, r5, r6, pc}
 80033aa:	46c0      	nop			; (mov r8, r8)

080033ac <CHECKS::ASSERT#12162>:

        [System.Diagnostics.Conditional( "DEBUG"         )]
        [System.Diagnostics.Conditional( "CHECKS_ASSERT" )]
        public static void ASSERT( bool   res  ,
                                   string text )
        {
 80033ac:	b5b0      	push	{r4, r5, r7, lr}
 80033ae:	460c      	mov	r4, r1
            if(res == false)
 80033b0:	f010 0fff 	tst.w	r0, #255	; 0xff
 80033b4:	bf18      	it	ne
 80033b6:	bdb0      	popne	{r4, r5, r7, pc}
 80033b8:	4808      	ldr	r0, [pc, #32]	; (80033dc <CHECKS::ASSERT#12162+0x30>)
            {
                throw AssertionViolationException.Create( text );
 80033ba:	4909      	ldr	r1, [pc, #36]	; (80033e0 <CHECKS::ASSERT#12162+0x34>)
 80033bc:	2200      	movs	r2, #0
 80033be:	4478      	add	r0, pc
 80033c0:	180d      	adds	r5, r1, r0
 80033c2:	4908      	ldr	r1, [pc, #32]	; (80033e4 <CHECKS::ASSERT#12162+0x38>)
 80033c4:	4401      	add	r1, r0
 80033c6:	4628      	mov	r0, r5
 80033c8:	f7fe f8f4 	bl	80015b4 <DefaultTypeSystemManager::AllocateArray#5255>
 80033cc:	4601      	mov	r1, r0
 80033ce:	4620      	mov	r0, r4
 80033d0:	f003 fe26 	bl	8007020 <AssertionViolationException::Create#11949>
 80033d4:	4601      	mov	r1, r0
 80033d6:	4628      	mov	r0, r5
 80033d8:	f7fd fab8 	bl	800094c <TypeSystemManager::Throw#5247>
 80033dc:	17ffe3f2 	.word	0x17ffe3f2
 80033e0:	ffffea64 	.word	0xffffea64
 80033e4:	e800a02c 	.word	0xe800a02c

080033e8 <TypeRepresentation::PrettyToString#15025>:
        }

        internal virtual void PrettyToString( System.Text.StringBuilder sb                 ,
                                              bool                      fPrefix            ,
                                              bool                      fWithAbbreviations )
        {
 80033e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033ec:	b081      	sub	sp, #4
 80033ee:	4690      	mov	r8, r2
 80033f0:	4699      	mov	r9, r3
 80033f2:	468a      	mov	sl, r1
 80033f4:	4607      	mov	r7, r0
            if(fPrefix)
 80033f6:	f018 0fff 	tst.w	r8, #255	; 0xff
 80033fa:	d01a      	beq.n	8003432 <TypeRepresentation::PrettyToString#15025+0x4a>
 80033fc:	6878      	ldr	r0, [r7, #4]
            {
                if(this.IsDelayedType)
 80033fe:	69c0      	ldr	r0, [r0, #28]
 8003400:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8003402:	4638      	mov	r0, r7
 8003404:	4788      	blx	r1
 8003406:	f010 0fff 	tst.w	r0, #255	; 0xff
 800340a:	d003      	beq.n	8003414 <TypeRepresentation::PrettyToString#15025+0x2c>
 800340c:	484d      	ldr	r0, [pc, #308]	; (8003544 <TypeRepresentation::PrettyToString#15025+0x15c>)
                {
                    sb.Append( "delayed " );
 800340e:	494e      	ldr	r1, [pc, #312]	; (8003548 <TypeRepresentation::PrettyToString#15025+0x160>)
 8003410:	4478      	add	r0, pc
 8003412:	e00a      	b.n	800342a <TypeRepresentation::PrettyToString#15025+0x42>
 8003414:	6878      	ldr	r0, [r7, #4]
                }
                else if(this.IsOpenType)
 8003416:	69c0      	ldr	r0, [r0, #28]
 8003418:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800341a:	4638      	mov	r0, r7
 800341c:	4788      	blx	r1
 800341e:	f010 0fff 	tst.w	r0, #255	; 0xff
 8003422:	d006      	beq.n	8003432 <TypeRepresentation::PrettyToString#15025+0x4a>
 8003424:	4845      	ldr	r0, [pc, #276]	; (800353c <TypeRepresentation::PrettyToString#15025+0x154>)
                {
                    sb.Append( "generic " );
 8003426:	4946      	ldr	r1, [pc, #280]	; (8003540 <TypeRepresentation::PrettyToString#15025+0x158>)
 8003428:	4478      	add	r0, pc
        {
            if(fPrefix)
            {
                if(this.IsDelayedType)
                {
                    sb.Append( "delayed " );
 800342a:	4401      	add	r1, r0
 800342c:	4650      	mov	r0, sl
 800342e:	f002 fdfc 	bl	800602a <StringBuilder::Append#8806>
                }
            }

            string name = null;

            if(fWithAbbreviations)
 8003432:	f019 0fff 	tst.w	r9, #255	; 0xff
 8003436:	d004      	beq.n	8003442 <TypeRepresentation::PrettyToString#15025+0x5a>
            {
                name = GetAbbreviation();
 8003438:	4638      	mov	r0, r7
 800343a:	f004 f9e7 	bl	800780c <TypeRepresentation::GetAbbreviation#15024>
 800343e:	4601      	mov	r1, r0
 8003440:	e000      	b.n	8003444 <TypeRepresentation::PrettyToString#15025+0x5c>
 8003442:	2100      	movs	r1, #0
 8003444:	bb31      	cbnz	r1, 8003494 <TypeRepresentation::PrettyToString#15025+0xac>

        public bool IsNestedType
        {
            get
            {
                return m_enclosingClass != null;
 8003446:	69f8      	ldr	r0, [r7, #28]
 8003448:	2100      	movs	r1, #0

        [Inline]
        public static bool operator ==( TypeRepresentation left  ,
                                        TypeRepresentation right )
        {
            return Object.Equals( left, right );
 800344a:	f7fd ff53 	bl	80012f4 <Object::Equals#2397>
            {
                sb.Append( name );
            }
            else
            {
                if(this.IsNestedType)
 800344e:	f010 0fff 	tst.w	r0, #255	; 0xff
 8003452:	d10e      	bne.n	8003472 <TypeRepresentation::PrettyToString#15025+0x8a>

        public TypeRepresentation EnclosingClass
        {
            get
            {
                return m_enclosingClass;
 8003454:	69f8      	ldr	r0, [r7, #28]
 8003456:	2200      	movs	r2, #0
            }
            else
            {
                if(this.IsNestedType)
                {
                    this.EnclosingClass.PrettyToString( sb, false, fWithAbbreviations );
 8003458:	464b      	mov	r3, r9

        public TypeRepresentation EnclosingClass
        {
            get
            {
                return m_enclosingClass;
 800345a:	6841      	ldr	r1, [r0, #4]
            }
            else
            {
                if(this.IsNestedType)
                {
                    this.EnclosingClass.PrettyToString( sb, false, fWithAbbreviations );
 800345c:	69c9      	ldr	r1, [r1, #28]
 800345e:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8003460:	4651      	mov	r1, sl
 8003462:	47b0      	blx	r6
 8003464:	4839      	ldr	r0, [pc, #228]	; (800354c <TypeRepresentation::PrettyToString#15025+0x164>)
                    sb.Append( "." );
 8003466:	493a      	ldr	r1, [pc, #232]	; (8003550 <TypeRepresentation::PrettyToString#15025+0x168>)
 8003468:	4478      	add	r0, pc
 800346a:	4401      	add	r1, r0
 800346c:	4650      	mov	r0, sl
 800346e:	f002 fddc 	bl	800602a <StringBuilder::Append#8806>

        public string Namespace
        {
            get
            {
                return m_namespace;
 8003472:	69b8      	ldr	r0, [r7, #24]
 8003474:	b168      	cbz	r0, 8003492 <TypeRepresentation::PrettyToString#15025+0xaa>
 8003476:	69b8      	ldr	r0, [r7, #24]
 8003478:	68c0      	ldr	r0, [r0, #12]
 800347a:	b150      	cbz	r0, 8003492 <TypeRepresentation::PrettyToString#15025+0xaa>
 800347c:	69b9      	ldr	r1, [r7, #24]
                    sb.Append( "." );
                }

                if(this.Namespace != null && this.Namespace.Length != 0)
                {
                    sb.Append( this.Namespace );
 800347e:	4650      	mov	r0, sl
 8003480:	f002 fdd3 	bl	800602a <StringBuilder::Append#8806>
 8003484:	4833      	ldr	r0, [pc, #204]	; (8003554 <TypeRepresentation::PrettyToString#15025+0x16c>)
                    sb.Append( "."            );
 8003486:	4932      	ldr	r1, [pc, #200]	; (8003550 <TypeRepresentation::PrettyToString#15025+0x168>)
 8003488:	4478      	add	r0, pc
 800348a:	4401      	add	r1, r0
 800348c:	4650      	mov	r0, sl
 800348e:	f002 fdcc 	bl	800602a <StringBuilder::Append#8806>
        
        public string Name
        {
            get
            {
                return m_name;
 8003492:	6979      	ldr	r1, [r7, #20]
                {
                    sb.Append( this.Namespace );
                    sb.Append( "."            );
                }

                sb.Append( this.Name );
 8003494:	4650      	mov	r0, sl
 8003496:	f002 fdc8 	bl	800602a <StringBuilder::Append#8806>
            }

            if(m_genericContext != null)
 800349a:	6a38      	ldr	r0, [r7, #32]
 800349c:	2800      	cmp	r0, #0
 800349e:	d049      	beq.n	8003534 <TypeRepresentation::PrettyToString#15025+0x14c>
 80034a0:	482d      	ldr	r0, [pc, #180]	; (8003558 <TypeRepresentation::PrettyToString#15025+0x170>)
            {
                sb.Append( "<" );
 80034a2:	492e      	ldr	r1, [pc, #184]	; (800355c <TypeRepresentation::PrettyToString#15025+0x174>)
 80034a4:	4478      	add	r0, pc
 80034a6:	4401      	add	r1, r0
 80034a8:	4650      	mov	r0, sl
 80034aa:	f002 fdbe 	bl	800602a <StringBuilder::Append#8806>

                TypeRepresentation[] parameters = m_genericContext.Parameters;
 80034ae:	6a38      	ldr	r0, [r7, #32]

            public TypeRepresentation[] Parameters
            {
                get
                {
                    return m_parameters;
 80034b0:	6886      	ldr	r6, [r0, #8]
 80034b2:	68b0      	ldr	r0, [r6, #8]
            if(m_genericContext != null)
            {
                sb.Append( "<" );

                TypeRepresentation[] parameters = m_genericContext.Parameters;
                if(parameters.Length > 0)
 80034b4:	b1e0      	cbz	r0, 80034f0 <TypeRepresentation::PrettyToString#15025+0x108>
 80034b6:	482e      	ldr	r0, [pc, #184]	; (8003570 <TypeRepresentation::PrettyToString#15025+0x188>)
                {
                    for(int i = 0; i < parameters.Length; i++)
                    {
                        if(i != 0) sb.Append( "," );
 80034b8:	492a      	ldr	r1, [pc, #168]	; (8003564 <TypeRepresentation::PrettyToString#15025+0x17c>)
 80034ba:	f106 050c 	add.w	r5, r6, #12
 80034be:	2400      	movs	r4, #0
 80034c0:	4478      	add	r0, pc
 80034c2:	eb01 0b00 	add.w	fp, r1, r0
 80034c6:	e009      	b.n	80034dc <TypeRepresentation::PrettyToString#15025+0xf4>

                        parameters[i].PrettyToString( sb, fPrefix, fWithAbbreviations );
 80034c8:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 80034cc:	4642      	mov	r2, r8
 80034ce:	464b      	mov	r3, r9
 80034d0:	6841      	ldr	r1, [r0, #4]
 80034d2:	69c9      	ldr	r1, [r1, #28]
 80034d4:	6acf      	ldr	r7, [r1, #44]	; 0x2c
 80034d6:	4651      	mov	r1, sl
 80034d8:	47b8      	blx	r7
                sb.Append( "<" );

                TypeRepresentation[] parameters = m_genericContext.Parameters;
                if(parameters.Length > 0)
                {
                    for(int i = 0; i < parameters.Length; i++)
 80034da:	3401      	adds	r4, #1
 80034dc:	68b0      	ldr	r0, [r6, #8]
 80034de:	4284      	cmp	r4, r0
 80034e0:	da21      	bge.n	8003526 <TypeRepresentation::PrettyToString#15025+0x13e>
                    {
                        if(i != 0) sb.Append( "," );
 80034e2:	2c00      	cmp	r4, #0
 80034e4:	d0f0      	beq.n	80034c8 <TypeRepresentation::PrettyToString#15025+0xe0>
 80034e6:	4650      	mov	r0, sl
 80034e8:	4659      	mov	r1, fp
 80034ea:	f002 fd9e 	bl	800602a <StringBuilder::Append#8806>
 80034ee:	e7eb      	b.n	80034c8 <TypeRepresentation::PrettyToString#15025+0xe0>
                        parameters[i].PrettyToString( sb, fPrefix, fWithAbbreviations );
                    }
                }
                else
                {
                    GenericParameterDefinition[] defs = m_genericContext.ParametersDefinition;
 80034f0:	6a38      	ldr	r0, [r7, #32]

            public GenericParameterDefinition[] ParametersDefinition
            {
                get
                {
                    return m_parametersDefinition;
 80034f2:	68c6      	ldr	r6, [r0, #12]
 80034f4:	b1be      	cbz	r6, 8003526 <TypeRepresentation::PrettyToString#15025+0x13e>
 80034f6:	481a      	ldr	r0, [pc, #104]	; (8003560 <TypeRepresentation::PrettyToString#15025+0x178>)
                    GenericParameterDefinition[] defs = m_genericContext.ParametersDefinition;
                    if(defs != null)
                    {
                        for(int i = 0; i < defs.Length; i++)
                        {
                            if(i != 0) sb.Append( "," );
 80034f8:	491a      	ldr	r1, [pc, #104]	; (8003564 <TypeRepresentation::PrettyToString#15025+0x17c>)
 80034fa:	f106 070c 	add.w	r7, r6, #12
 80034fe:	2400      	movs	r4, #0
 8003500:	4478      	add	r0, pc
 8003502:	180d      	adds	r5, r1, r0
 8003504:	e005      	b.n	8003512 <TypeRepresentation::PrettyToString#15025+0x12a>

                            sb.Append( defs[i].Name );
 8003506:	f857 1b08 	ldr.w	r1, [r7], #8
 800350a:	4650      	mov	r0, sl
 800350c:	f002 fd8d 	bl	800602a <StringBuilder::Append#8806>
                else
                {
                    GenericParameterDefinition[] defs = m_genericContext.ParametersDefinition;
                    if(defs != null)
                    {
                        for(int i = 0; i < defs.Length; i++)
 8003510:	3401      	adds	r4, #1
 8003512:	68b0      	ldr	r0, [r6, #8]
 8003514:	4284      	cmp	r4, r0
 8003516:	da06      	bge.n	8003526 <TypeRepresentation::PrettyToString#15025+0x13e>
                        {
                            if(i != 0) sb.Append( "," );
 8003518:	2c00      	cmp	r4, #0
 800351a:	d0f4      	beq.n	8003506 <TypeRepresentation::PrettyToString#15025+0x11e>
 800351c:	4650      	mov	r0, sl
 800351e:	4629      	mov	r1, r5
 8003520:	f002 fd83 	bl	800602a <StringBuilder::Append#8806>
 8003524:	e7ef      	b.n	8003506 <TypeRepresentation::PrettyToString#15025+0x11e>
 8003526:	4810      	ldr	r0, [pc, #64]	; (8003568 <TypeRepresentation::PrettyToString#15025+0x180>)
                            sb.Append( defs[i].Name );
                        }
                    }
                }

                sb.Append( ">" );
 8003528:	4910      	ldr	r1, [pc, #64]	; (800356c <TypeRepresentation::PrettyToString#15025+0x184>)
 800352a:	4478      	add	r0, pc
 800352c:	4401      	add	r1, r0
 800352e:	4650      	mov	r0, sl
 8003530:	f002 fd7b 	bl	800602a <StringBuilder::Append#8806>
 8003534:	b001      	add	sp, #4
 8003536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800353a:	46c0      	nop			; (mov r8, r8)
 800353c:	17ffe388 	.word	0x17ffe388
 8003540:	e800a7ac 	.word	0xe800a7ac
 8003544:	17ffe3a0 	.word	0x17ffe3a0
 8003548:	e800afdc 	.word	0xe800afdc
 800354c:	17ffe348 	.word	0x17ffe348
 8003550:	e800a36c 	.word	0xe800a36c
 8003554:	17ffe328 	.word	0x17ffe328
 8003558:	17ffe30c 	.word	0x17ffe30c
 800355c:	e800a76c 	.word	0xe800a76c
 8003560:	17ffe2b0 	.word	0x17ffe2b0
 8003564:	e800a38c 	.word	0xe800a38c
 8003568:	17ffe286 	.word	0x17ffe286
 800356c:	e800a78c 	.word	0xe800a78c
 8003570:	17ffe2f0 	.word	0x17ffe2f0

08003574 <TypeSystemManager::CastToType#5241>:
        }

        [TS.WellKnownMethod( "TypeSystemManager_CastToType" )]
        public static object CastToType( object    obj      ,
                                         TS.VTable expected )
        {
 8003574:	b5b0      	push	{r4, r5, r7, lr}
            if(obj != null)
 8003576:	2800      	cmp	r0, #0
 8003578:	bf08      	it	eq
 800357a:	bdb0      	popeq	{r4, r5, r7, pc}
            {
                obj = CastToTypeNoThrow( obj, expected );
 800357c:	f7fd fd54 	bl	8001028 <TypeSystemManager::CastToTypeNoThrow#5242>
 8003580:	b100      	cbz	r0, 8003584 <TypeSystemManager::CastToType#5241+0x10>
 8003582:	bdb0      	pop	{r4, r5, r7, pc}
 8003584:	4807      	ldr	r0, [pc, #28]	; (80035a4 <TypeSystemManager::CastToType#5241+0x30>)
                if(obj == null)
                {
                    throw new InvalidCastException();
 8003586:	4908      	ldr	r1, [pc, #32]	; (80035a8 <TypeSystemManager::CastToType#5241+0x34>)
 8003588:	4478      	add	r0, pc
 800358a:	180c      	adds	r4, r1, r0
 800358c:	4907      	ldr	r1, [pc, #28]	; (80035ac <TypeSystemManager::CastToType#5241+0x38>)
 800358e:	4401      	add	r1, r0
 8003590:	4620      	mov	r0, r4
 8003592:	f7fd f9c5 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8003596:	4605      	mov	r5, r0
 8003598:	f001 f9c2 	bl	8004920 <InvalidCastException::.ctor#7413>
 800359c:	4620      	mov	r0, r4
 800359e:	4629      	mov	r1, r5
 80035a0:	f7fd f9d4 	bl	800094c <TypeSystemManager::Throw#5247>
 80035a4:	17ffe228 	.word	0x17ffe228
 80035a8:	ffffea64 	.word	0xffffea64
 80035ac:	e800932c 	.word	0xe800932c

080035b0 <TypeRepresentation::get_ContainedType#15006>:
 80035b0:	2000      	movs	r0, #0
 80035b2:	4770      	bx	lr

080035b4 <VTable::ImplementsInterface#3845>:
        }

        [NoInline]
        public bool ImplementsInterface( VTable expectedItf )
        {
            VTable.InterfaceMap[] itfs = this.InterfaceMethodPointers;
 80035b4:	6a00      	ldr	r0, [r0, #32]
 80035b6:	6882      	ldr	r2, [r0, #8]
 80035b8:	eb00 00c2 	add.w	r0, r0, r2, lsl #3

            for(int i = itfs.Length; --i >= 0; )
 80035bc:	3a01      	subs	r2, #1
 80035be:	3004      	adds	r0, #4
 80035c0:	2a00      	cmp	r2, #0
 80035c2:	bfbc      	itt	lt
 80035c4:	2000      	movlt	r0, #0
 80035c6:	4770      	bxlt	lr
            {
                if(Object.ReferenceEquals( itfs[i].Interface, expectedItf ))
 80035c8:	f850 3908 	ldr.w	r3, [r0], #-8
 80035cc:	3a01      	subs	r2, #1
 80035ce:	428b      	cmp	r3, r1
 80035d0:	bf04      	itt	eq
 80035d2:	2001      	moveq	r0, #1
 80035d4:	4770      	bxeq	lr
 80035d6:	e7f3      	b.n	80035c0 <VTable::ImplementsInterface#3845+0xc>

080035d8 <VTable::ToString#3849>:
        //
        // Debug Methods
        //

        public override string ToString()
        {
 80035d8:	b5b0      	push	{r4, r5, r7, lr}
 80035da:	490a      	ldr	r1, [pc, #40]	; (8003604 <VTable::ToString#3849+0x2c>)
 80035dc:	4604      	mov	r4, r0
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
 80035de:	480a      	ldr	r0, [pc, #40]	; (8003608 <VTable::ToString#3849+0x30>)
 80035e0:	4a0a      	ldr	r2, [pc, #40]	; (800360c <VTable::ToString#3849+0x34>)
 80035e2:	4479      	add	r1, pc
 80035e4:	4408      	add	r0, r1
 80035e6:	4411      	add	r1, r2
 80035e8:	f7fd f99a 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 80035ec:	4605      	mov	r5, r0
 80035ee:	f000 f80f 	bl	8003610 <StringBuilder::.ctor#8786>

            sb.AppendFormat( "VTable({0})", this.TypeInfo );
 80035f2:	6921      	ldr	r1, [r4, #16]
 80035f4:	4628      	mov	r0, r5
 80035f6:	f000 f811 	bl	800361c <StringBuilder::AppendFormat#8849>

            return sb.ToString();
 80035fa:	4628      	mov	r0, r5
 80035fc:	f7fe f8dc 	bl	80017b8 <StringBuilder::ToString#8798>
 8003600:	bdb0      	pop	{r4, r5, r7, pc}
 8003602:	46c0      	nop			; (mov r8, r8)
 8003604:	17ffe1ce 	.word	0x17ffe1ce
 8003608:	ffffea64 	.word	0xffffea64
 800360c:	e8007c5c 	.word	0xe8007c5c

08003610 <StringBuilder::.ctor#8786>:
        //

        // Creates a new empty string builder (i.e., it represents String.Empty)
        // with the default capacity (16 characters).
        public StringBuilder()
            : this( DefaultCapacity )
 8003610:	b580      	push	{r7, lr}
 8003612:	2110      	movs	r1, #16
 8003614:	f7fe f8f0 	bl	80017f8 <StringBuilder::.ctor#8787>
 8003618:	bd80      	pop	{r7, pc}
 800361a:	46c0      	nop			; (mov r8, r8)

0800361c <StringBuilder::AppendFormat#8849>:
            }
            return Insert( index, value.ToString(), 1 );
        }

        public StringBuilder AppendFormat( String format, Object arg0 )
        {
 800361c:	b570      	push	{r4, r5, r6, lr}
 800361e:	4e09      	ldr	r6, [pc, #36]	; (8003644 <StringBuilder::AppendFormat#8849+0x28>)
 8003620:	460c      	mov	r4, r1
 8003622:	4605      	mov	r5, r0
            return AppendFormat( null, format, new Object[] { arg0 } );
 8003624:	4808      	ldr	r0, [pc, #32]	; (8003648 <StringBuilder::AppendFormat#8849+0x2c>)
 8003626:	4909      	ldr	r1, [pc, #36]	; (800364c <StringBuilder::AppendFormat#8849+0x30>)
 8003628:	2201      	movs	r2, #1
 800362a:	447e      	add	r6, pc
 800362c:	4430      	add	r0, r6
 800362e:	4431      	add	r1, r6
 8003630:	f7fd ffc0 	bl	80015b4 <DefaultTypeSystemManager::AllocateArray#5255>
 8003634:	4602      	mov	r2, r0
 8003636:	4806      	ldr	r0, [pc, #24]	; (8003650 <StringBuilder::AppendFormat#8849+0x34>)
 8003638:	60d4      	str	r4, [r2, #12]
 800363a:	1981      	adds	r1, r0, r6
 800363c:	4628      	mov	r0, r5
 800363e:	f7fe f8eb 	bl	8001818 <StringBuilder::AppendFormat#8854>
 8003642:	bd70      	pop	{r4, r5, r6, pc}
 8003644:	17ffe186 	.word	0x17ffe186
 8003648:	ffffea64 	.word	0xffffea64
 800364c:	e800a02c 	.word	0xe800a02c
 8003650:	e8008a9c 	.word	0xe8008a9c

08003654 <LedTogglerSimultaneous::run#16845>:
            : base(pins)
        {
        }

        public override void run(float t)
        {
 8003654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003656:	b081      	sub	sp, #4
 8003658:	2700      	movs	r7, #0
 800365a:	460c      	mov	r4, r1
 800365c:	4605      	mov	r5, r0
 800365e:	2600      	movs	r6, #0
 8003660:	f6c3 77e0 	movt	r7, #16352	; 0x3fe0
            for (int i = 0; i < PinCount; ++i)
 8003664:	4628      	mov	r0, r5
 8003666:	f004 fb89 	bl	8007d7c <LedToggler::get_PinCount#16841>
 800366a:	4286      	cmp	r6, r0
 800366c:	bfa4      	itt	ge
 800366e:	b001      	addge	sp, #4
 8003670:	bdf0      	popge	{r4, r5, r6, r7, pc}
            {
                this[i] = (t < 0.5) ? GpioPinValue.High : GpioPinValue.Low;
 8003672:	4620      	mov	r0, r4
 8003674:	f017 fcee 	bl	801b054 <__aeabi_f2d>
 8003678:	2200      	movs	r2, #0
 800367a:	463b      	mov	r3, r7
 800367c:	f017 ffb0 	bl	801b5e0 <__aeabi_dcmplt>
 8003680:	4602      	mov	r2, r0
 8003682:	4628      	mov	r0, r5
 8003684:	4631      	mov	r1, r6
 8003686:	2a00      	cmp	r2, #0
 8003688:	bf18      	it	ne
 800368a:	2201      	movne	r2, #1
 800368c:	f004 fb79 	bl	8007d82 <LedToggler::set_Item#16843>
        {
        }

        public override void run(float t)
        {
            for (int i = 0; i < PinCount; ++i)
 8003690:	3601      	adds	r6, #1
 8003692:	e7e7      	b.n	8003664 <LedTogglerSimultaneous::run#16845+0x10>

08003694 <LedTogglerSimultaneous::.ctor#16844>:
    };

    internal class LedTogglerSimultaneous : LedToggler
    {
        public LedTogglerSimultaneous(GpioPin[] pins)
            : base(pins)
 8003694:	b580      	push	{r7, lr}
 8003696:	f004 fb6f 	bl	8007d78 <LedToggler::.ctor#16839>
 800369a:	bd80      	pop	{r7, pc}

0800369c <LedTogglerSequential::run#16847>:
            : base(pins)
        {
        }

        public override void run(float t)
        {
 800369c:	b570      	push	{r4, r5, r6, lr}
 800369e:	460c      	mov	r4, r1
 80036a0:	4605      	mov	r5, r0
 80036a2:	2600      	movs	r6, #0
            for (int i = 0; i < PinCount; ++i)
 80036a4:	4628      	mov	r0, r5
 80036a6:	f004 fb69 	bl	8007d7c <LedToggler::get_PinCount#16841>
 80036aa:	4286      	cmp	r6, r0
 80036ac:	bfa8      	it	ge
 80036ae:	bd70      	popge	{r4, r5, r6, pc}
            {
                this[i] = ((int)(t * 4) == i) ? GpioPinValue.High : GpioPinValue.Low;
 80036b0:	4620      	mov	r0, r4
 80036b2:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80036b6:	f018 f961 	bl	801b97c <__aeabi_fmul>
 80036ba:	f018 fb3b 	bl	801bd34 <__aeabi_f2uiz>
 80036be:	4286      	cmp	r6, r0
 80036c0:	f04f 0200 	mov.w	r2, #0
 80036c4:	4628      	mov	r0, r5
 80036c6:	4631      	mov	r1, r6
 80036c8:	bf08      	it	eq
 80036ca:	2201      	moveq	r2, #1
 80036cc:	f004 fb59 	bl	8007d82 <LedToggler::set_Item#16843>
        {
        }

        public override void run(float t)
        {
            for (int i = 0; i < PinCount; ++i)
 80036d0:	3601      	adds	r6, #1
 80036d2:	e7e7      	b.n	80036a4 <LedTogglerSequential::run#16847+0x8>

080036d4 <LedTogglerSequential::.ctor#16846>:
    }

    internal class LedTogglerSequential : LedToggler
    {
        public LedTogglerSequential(GpioPin[] pins)
            : base(pins)
 80036d4:	b580      	push	{r7, lr}
 80036d6:	f004 fb4f 	bl	8007d78 <LedToggler::.ctor#16839>
 80036da:	bd80      	pop	{r7, pc}

080036dc <LedTogglerAlternate::run#16849>:
            : base(pins)
        {
        }

        public override void run(float t)
        {
 80036dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036de:	b081      	sub	sp, #4
 80036e0:	460c      	mov	r4, r1
 80036e2:	4605      	mov	r5, r0
 80036e4:	2600      	movs	r6, #0
            for (int i = 0; i < PinCount; ++i)
 80036e6:	4628      	mov	r0, r5
 80036e8:	f004 fb48 	bl	8007d7c <LedToggler::get_PinCount#16841>
 80036ec:	4286      	cmp	r6, r0
 80036ee:	bfa4      	itt	ge
 80036f0:	b001      	addge	sp, #4
 80036f2:	bdf0      	popge	{r4, r5, r6, r7, pc}
            {
                this[i] = ((i % 2) == (int)(t * 2)) ? GpioPinValue.High : GpioPinValue.Low;
 80036f4:	4620      	mov	r0, r4
 80036f6:	4621      	mov	r1, r4
 80036f8:	f018 f838 	bl	801b76c <__addsf3>
 80036fc:	f006 0701 	and.w	r7, r6, #1
 8003700:	f018 fb18 	bl	801bd34 <__aeabi_f2uiz>
 8003704:	4287      	cmp	r7, r0
 8003706:	f04f 0200 	mov.w	r2, #0
 800370a:	4628      	mov	r0, r5
 800370c:	4631      	mov	r1, r6
 800370e:	bf08      	it	eq
 8003710:	2201      	moveq	r2, #1
 8003712:	f004 fb36 	bl	8007d82 <LedToggler::set_Item#16843>
        {
        }

        public override void run(float t)
        {
            for (int i = 0; i < PinCount; ++i)
 8003716:	3601      	adds	r6, #1
 8003718:	e7e5      	b.n	80036e6 <LedTogglerAlternate::run#16849+0xa>

0800371a <LedTogglerAlternate::.ctor#16848>:
    }

    internal class LedTogglerAlternate : LedToggler
    {
        public LedTogglerAlternate(GpioPin[] pins)
            : base(pins)
 800371a:	b580      	push	{r7, lr}
 800371c:	f004 fb2c 	bl	8007d78 <LedToggler::.ctor#16839>
 8003720:	bd80      	pop	{r7, pc}

08003722 <Timer::.ctor#16878>:
        {
            uint timestamp = UsTicker.us_ticker_read();
            while ((int)(UsTicker.us_ticker_read() - timestamp) < us) { }
        }

        public Timer()
 8003722:	b580      	push	{r7, lr}
        {
            reset();
 8003724:	f000 f819 	bl	800375a <Timer::reset#16881>
 8003728:	bd80      	pop	{r7, pc}

0800372a <Timer::start#16879>:
        }

        /** Start the timer
         */
        public void start()
        {
 800372a:	b510      	push	{r4, lr}
 800372c:	4604      	mov	r4, r0
            if (!_running)
 800372e:	7a20      	ldrb	r0, [r4, #8]
 8003730:	2800      	cmp	r0, #0
 8003732:	bf18      	it	ne
 8003734:	bd10      	popne	{r4, pc}
            {
                reset( );
 8003736:	4620      	mov	r0, r4
 8003738:	f000 f80f 	bl	800375a <Timer::reset#16881>
 800373c:	2001      	movs	r0, #1
 800373e:	7220      	strb	r0, [r4, #8]
 8003740:	bd10      	pop	{r4, pc}

08003742 <Timer::read#16882>:
        }

        /** Get the time passed in seconds
         */
        public float read()
        {
 8003742:	b580      	push	{r7, lr}
            return (float)read_us() / 1000000.0f;
 8003744:	f004 fb48 	bl	8007dd8 <Timer::read_us#16884>
 8003748:	f018 f8c4 	bl	801b8d4 <__aeabi_i2f>
 800374c:	f242 4100 	movw	r1, #9216	; 0x2400
 8003750:	f6c4 1174 	movt	r1, #18804	; 0x4974
 8003754:	f018 f9c6 	bl	801bae4 <__aeabi_fdiv>
 8003758:	bd80      	pop	{r7, pc}

0800375a <Timer::reset#16881>:
        /** Reset the timer to 0.
         *
         * If it was already counting, it will continue
         */
        public void reset()
        {
 800375a:	b510      	push	{r4, lr}
 800375c:	4604      	mov	r4, r0
            _start = UsTicker.us_ticker_read();
 800375e:	f012 fdc1 	bl	80162e4 <us_ticker_read>
 8003762:	2100      	movs	r1, #0
 8003764:	e9c4 0103 	strd	r0, r1, [r4, #12]
 8003768:	bd10      	pop	{r4, pc}

0800376a <GpioController::OpenPin#16707>:
        ///     in user mode. For information about how the pin numbers correspond to physical pins, see the
        ///     documentation for your circuit board.</param>
        /// <returns>The opened GPIO pin.</returns>
        public GpioPin OpenPin(int pinNumber)
        {
            return OpenPin(pinNumber, GpioSharingMode.Exclusive);
 800376a:	b580      	push	{r7, lr}
 800376c:	f004 fa52 	bl	8007c14 <GpioController::OpenPin#16708>
 8003770:	bd80      	pop	{r7, pc}
 8003772:	46c0      	nop			; (mov r8, r8)

08003774 <GpioPin::Write#16737>:
        ///         The latched output value is driven onto the pin when the configuration for the pin changes to
        ///         output.</para></param>
        /// <remarks>If the pin drive mode is not currently set to output, this will latch <paramref name="value"/>
        ///     and drive the signal the when the mode is set.</remarks>
        public void Write(GpioPinValue value)
        {
 8003774:	b5b0      	push	{r4, r5, r7, lr}
 8003776:	460c      	mov	r4, r1
 8003778:	4605      	mov	r5, r0
            ThrowIfDisposed();
 800377a:	f004 fac5 	bl	8007d08 <GpioPin::ThrowIfDisposed#16744>
 800377e:	612c      	str	r4, [r5, #16]

            // Remember this value in case we switch drive mode
            _lastOutputValue = value;

            if (_driveMode == GpioPinDriveMode.Output)
 8003780:	68e8      	ldr	r0, [r5, #12]
 8003782:	2801      	cmp	r0, #1
 8003784:	bf18      	it	ne
 8003786:	bdb0      	popne	{r4, r5, r7, pc}
 8003788:	4806      	ldr	r0, [pc, #24]	; (80037a4 <GpioPin::Write#16737+0x30>)
            {
                _provider.Write(value);
 800378a:	4907      	ldr	r1, [pc, #28]	; (80037a8 <GpioPin::Write#16737+0x34>)
 800378c:	68ad      	ldr	r5, [r5, #8]
 800378e:	4478      	add	r0, pc
 8003790:	4401      	add	r1, r0
 8003792:	4628      	mov	r0, r5
 8003794:	f7ff fd6e 	bl	8003274 <VTable::GetInterface#3839>
 8003798:	68c2      	ldr	r2, [r0, #12]
 800379a:	4628      	mov	r0, r5
 800379c:	4621      	mov	r1, r4
 800379e:	4790      	blx	r2
 80037a0:	bdb0      	pop	{r4, r5, r7, pc}
 80037a2:	46c0      	nop			; (mov r8, r8)
 80037a4:	17ffe022 	.word	0x17ffe022
 80037a8:	e800b1fc 	.word	0xe800b1fc

080037ac <GpioPin::SetDriveMode#16740>:
        /// </summary>
        /// <param name="driveMode">An enumeration value that specifies drive mode to use for the GPIO pin. The drive
        ///     mode specifies whether the pin is configured as an input or an output, and determines how values are
        ///     driven onto the pin.</param>
        public void SetDriveMode(GpioPinDriveMode driveMode)
        {
 80037ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037b0:	4604      	mov	r4, r0
            ThrowIfDisposed();
 80037b2:	f004 faa9 	bl	8007d08 <GpioPin::ThrowIfDisposed#16744>

            if (driveMode != _driveMode)
 80037b6:	68e0      	ldr	r0, [r4, #12]
 80037b8:	2801      	cmp	r0, #1
 80037ba:	bf08      	it	eq
 80037bc:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037c0:	480e      	ldr	r0, [pc, #56]	; (80037fc <GpioPin::SetDriveMode#16740+0x50>)
            {
                _provider.SetPinDriveMode((GpioDriveMode)driveMode);
 80037c2:	490f      	ldr	r1, [pc, #60]	; (8003800 <GpioPin::SetDriveMode#16740+0x54>)
 80037c4:	68a6      	ldr	r6, [r4, #8]
 80037c6:	4478      	add	r0, pc
 80037c8:	180d      	adds	r5, r1, r0
 80037ca:	4630      	mov	r0, r6
 80037cc:	4629      	mov	r1, r5
 80037ce:	f7ff fd51 	bl	8003274 <VTable::GetInterface#3839>
 80037d2:	6902      	ldr	r2, [r0, #16]
 80037d4:	4630      	mov	r0, r6
 80037d6:	2101      	movs	r1, #1
 80037d8:	f04f 0801 	mov.w	r8, #1
 80037dc:	4790      	blx	r2
                if (driveMode == GpioPinDriveMode.Output)
                {
                    _provider.Write(_lastOutputValue);
 80037de:	68a6      	ldr	r6, [r4, #8]
 80037e0:	6927      	ldr	r7, [r4, #16]
 80037e2:	4629      	mov	r1, r5
 80037e4:	4630      	mov	r0, r6
 80037e6:	f7ff fd45 	bl	8003274 <VTable::GetInterface#3839>
 80037ea:	68c2      	ldr	r2, [r0, #12]
 80037ec:	4630      	mov	r0, r6
 80037ee:	4639      	mov	r1, r7
 80037f0:	4790      	blx	r2
 80037f2:	f8c4 800c 	str.w	r8, [r4, #12]
 80037f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037fa:	46c0      	nop			; (mov r8, r8)
 80037fc:	17ffdfea 	.word	0x17ffdfea
 8003800:	e800b1fc 	.word	0xe800b1fc

08003804 <Program::.cctor#3859>:
        }
    }

    class Program
    {
        public static byte[] i2cReadWrite1 = new byte[1];
 8003804:	4804      	ldr	r0, [pc, #16]	; (8003818 <Program::.cctor#3859+0x14>)
#else
#error No target board defined.
#endif
#endif

        static int[] pinNumbers =
 8003806:	4905      	ldr	r1, [pc, #20]	; (800381c <Program::.cctor#3859+0x18>)
 8003808:	4478      	add	r0, pc
 800380a:	4408      	add	r0, r1
 800380c:	2181      	movs	r1, #129	; 0x81
 800380e:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
 8003812:	60c1      	str	r1, [r0, #12]
 8003814:	4770      	bx	lr
 8003816:	46c0      	nop			; (mov r8, r8)
 8003818:	17ffdfa8 	.word	0x17ffdfa8
 800381c:	fffffe3c 	.word	0xfffffe3c

08003820 <Bootstrap::HardwareInitialization#3863>:
 8003820:	b580      	push	{r7, lr}
 8003822:	480d      	ldr	r0, [pc, #52]	; (8003858 <Bootstrap::HardwareInitialization#3863+0x38>)
 8003824:	490d      	ldr	r1, [pc, #52]	; (800385c <Bootstrap::HardwareInitialization#3863+0x3c>)
 8003826:	4478      	add	r0, pc
 8003828:	4408      	add	r0, r1
 800382a:	f000 f86b 	bl	8003904 <Processor::InitializeProcessor#17454>
 800382e:	f010 fa23 	bl	8013c78 <CUSTOM_STUB_DISCO_F746NG_DisableMPU>
 8003832:	f7fe fe31 	bl	8002498 <BugCheck::AssertInterruptsOff#4945>
 8003836:	f06f 0004 	mvn.w	r0, #4
 800383a:	2105      	movs	r1, #5
 800383c:	f000 f87c 	bl	8003938 <NVIC::SetPriority#17280>
 8003840:	f04f 30ff 	mov.w	r0, #4294967295
 8003844:	2107      	movs	r1, #7
 8003846:	f000 f877 	bl	8003938 <NVIC::SetPriority#17280>
 800384a:	f06f 0001 	mvn.w	r0, #1
 800384e:	210e      	movs	r1, #14
 8003850:	f000 f872 	bl	8003938 <NVIC::SetPriority#17280>
 8003854:	bd80      	pop	{r7, pc}
 8003856:	46c0      	nop			; (mov r8, r8)
 8003858:	17ffdf8a 	.word	0x17ffdf8a
 800385c:	e80073a4 	.word	0xe80073a4

08003860 <Bootstrap::HeapInitialization#3864>:
        }

        [NoInline]
        [CanAllocateOnReturn]
        private static void HeapInitialization()
        {
 8003860:	b510      	push	{r4, lr}
 8003862:	4805      	ldr	r0, [pc, #20]	; (8003878 <Bootstrap::HeapInitialization#3864+0x18>)
            MemoryManager mm = MemoryManager.Instance;
            
            mm.InitializeMemoryManager();
 8003864:	4905      	ldr	r1, [pc, #20]	; (800387c <Bootstrap::HeapInitialization#3864+0x1c>)
 8003866:	4478      	add	r0, pc
 8003868:	180c      	adds	r4, r1, r0
 800386a:	4620      	mov	r0, r4
 800386c:	f000 f868 	bl	8003940 <MemoryManager::InitializeMemoryManager#16953>

            mm.InitializationComplete();
 8003870:	4620      	mov	r0, r4
 8003872:	f000 f882 	bl	800397a <LinearMemoryManager::InitializationComplete#4929>
 8003876:	bd10      	pop	{r4, pc}
 8003878:	17ffdf4a 	.word	0x17ffdf4a
 800387c:	ffffea7c 	.word	0xffffea7c

08003880 <Device::get_BootstrapStack#17472>:

        public override uint[] BootstrapStack
        {
            [RT.NoInline]
            get
            {
 8003880:	4802      	ldr	r0, [pc, #8]	; (800388c <Device::get_BootstrapStack#17472+0xc>)
                return s_bootstrapStackDISCO_F746NG;
 8003882:	4903      	ldr	r1, [pc, #12]	; (8003890 <Device::get_BootstrapStack#17472+0x10>)
 8003884:	4478      	add	r0, pc
 8003886:	4408      	add	r0, r1
 8003888:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 800388a:	4770      	bx	lr
 800388c:	17ffdf2c 	.word	0x17ffdf2c
 8003890:	fffffe3c 	.word	0xfffffe3c

08003894 <Bootstrap::SoftwareInitialization#3865>:
        }

        [NoInline]
        [CanAllocateOnReturn]
        private static void SoftwareInitialization( uint[] systemStack )
        {
 8003894:	b570      	push	{r4, r5, r6, lr}
 8003896:	4e08      	ldr	r6, [pc, #32]	; (80038b8 <Bootstrap::SoftwareInitialization#3865+0x24>)
 8003898:	4604      	mov	r4, r0
            ThreadManager.Instance.InitializeBeforeStaticConstructors();
 800389a:	4808      	ldr	r0, [pc, #32]	; (80038bc <Bootstrap::SoftwareInitialization#3865+0x28>)
 800389c:	447e      	add	r6, pc
 800389e:	1985      	adds	r5, r0, r6
 80038a0:	4628      	mov	r0, r5
 80038a2:	f000 f86e 	bl	8003982 <ThreadManager::InitializeBeforeStaticConstructors#17326>

            TypeSystemManager.Instance.InitializeTypeSystemManager();
 80038a6:	4806      	ldr	r0, [pc, #24]	; (80038c0 <Bootstrap::SoftwareInitialization#3865+0x2c>)
 80038a8:	4430      	add	r0, r6
 80038aa:	f000 f86e 	bl	800398a <TypeSystemManager::InitializeTypeSystemManager#5223>
            
            ThreadManager.Instance.InitializeAfterStaticConstructors( systemStack );
 80038ae:	4628      	mov	r0, r5
 80038b0:	4621      	mov	r1, r4
 80038b2:	f000 f86e 	bl	8003992 <ThreadManager::InitializeAfterStaticConstructors#17327>
 80038b6:	bd70      	pop	{r4, r5, r6, pc}
 80038b8:	17ffdf14 	.word	0x17ffdf14
 80038bc:	ffffea1c 	.word	0xffffea1c
 80038c0:	ffffea64 	.word	0xffffea64

080038c4 <Bootstrap::HardwareActivation#3866>:
            GarbageCollectionManager.Instance.InitializeGarbageCollectionManager();
        }

        [NoInline]
        private static void HardwareActivation()
        {
 80038c4:	b580      	push	{r7, lr}
 80038c6:	4803      	ldr	r0, [pc, #12]	; (80038d4 <Bootstrap::HardwareActivation#3866+0x10>)
            Storage.Instance.InitializeStorage();

            Peripherals.Instance.Activate();
 80038c8:	4903      	ldr	r1, [pc, #12]	; (80038d8 <Bootstrap::HardwareActivation#3866+0x14>)
 80038ca:	4478      	add	r0, pc
 80038cc:	4408      	add	r0, r1
 80038ce:	f000 f864 	bl	800399a <Peripherals::Activate#16934>
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	17ffdee6 	.word	0x17ffdee6
 80038d8:	ffffea98 	.word	0xffffea98

080038dc <Bootstrap::SoftwareActivation#3867>:
        }

        [NoInline]
        private static void SoftwareActivation()
        {
 80038dc:	b580      	push	{r7, lr}
 80038de:	4803      	ldr	r0, [pc, #12]	; (80038ec <Bootstrap::SoftwareActivation#3867+0x10>)
            ThreadManager.Instance.Activate();
 80038e0:	4903      	ldr	r1, [pc, #12]	; (80038f0 <Bootstrap::SoftwareActivation#3867+0x14>)
 80038e2:	4478      	add	r0, pc
 80038e4:	4408      	add	r0, r1
 80038e6:	f000 f85f 	bl	80039a8 <ThreadManager::Activate#16997>
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	17ffdece 	.word	0x17ffdece
 80038f0:	ffffea1c 	.word	0xffffea1c

080038f4 <ARMv7ThreadManager::StartThreads#5217>:
            //m_SysTick        .SetupForExceptionHandling( unchecked((uint)TargetPlatform.ARMv7.ProcessorARMv7M.IRQn_Type.SysTick_IRQn   ) );
            //m_interruptThread.SetupForExceptionHandling( unchecked((uint)TargetPlatform.ARMv7.ProcessorARMv7M.IRQn_Type.AnyInterrupt16 ) );
        }

        public override unsafe void StartThreads( )
        {
 80038f4:	b510      	push	{r4, lr}
 80038f6:	4604      	mov	r4, r0
 80038f8:	2006      	movs	r0, #6
 80038fa:	f010 f905 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>

            //
            // Let the standard thread manager set up the next thread to run and request the switch to its context
            // It will be a switch to the idle thread (bootstrap thread)
            //
            base.StartThreads( );
 80038fe:	4620      	mov	r0, r4
 8003900:	f7ff f8eb 	bl	8002ada <ThreadManager::StartThreads#3327>

08003904 <Processor::InitializeProcessor#17454>:
        //
        // Helper Methods
        //

        public override void InitializeProcessor()
        {
 8003904:	b580      	push	{r7, lr}
            base.InitializeProcessor();
 8003906:	f001 fb43 	bl	8004f90 <ProcessorARMv7M_VFP::InitializeProcessor#5564>
            
            //
            // Ensure privileged Handler mode
            //
            
            if(!ChipsetModel.ProcessorARMv7M.VerifyHandlerMode())
 800390a:	f7ff fc62 	bl	80031d2 <ProcessorARMv7M::VerifyHandlerMode#3432>
 800390e:	f010 0fff 	tst.w	r0, #255	; 0xff
 8003912:	d003      	beq.n	800391c <Processor::InitializeProcessor#17454+0x18>
 8003914:	2000      	movs	r0, #0
 8003916:	f010 fb69 	bl	8013fec <CMSIS_STUB_NVIC_SetPriorityGrouping>
 800391a:	bd80      	pop	{r7, pc}
 800391c:	4804      	ldr	r0, [pc, #16]	; (8003930 <Processor::InitializeProcessor#17454+0x2c>)
            {
                RT.BugCheck.Log( "Cannot bootstrap in Thread mode" );
 800391e:	4905      	ldr	r1, [pc, #20]	; (8003934 <Processor::InitializeProcessor#17454+0x30>)
 8003920:	4478      	add	r0, pc
 8003922:	4408      	add	r0, r1
 8003924:	f000 fe7a 	bl	800461c <BugCheck::Log#4939>
 8003928:	2010      	movs	r0, #16
 800392a:	f7fc fcd9 	bl	80002e0 <BugCheck::Raise#4938>
 800392e:	46c0      	nop			; (mov r8, r8)
 8003930:	17ffde90 	.word	0x17ffde90
 8003934:	e800bb3c 	.word	0xe800bb3c

08003938 <NVIC::SetPriority#17280>:
            
            CMSIS_STUB_NVIC_DisableIRQ( irq );
        }

        public static void SetPriority( ProcessorARMv7M.IRQn_Type irq, int pri )
        {
 8003938:	b580      	push	{r7, lr}
            CMSIS_STUB_NVIC_SetPriority( irq, (uint)pri );
 800393a:	f010 fb63 	bl	8014004 <CMSIS_STUB_NVIC_SetPriority>
 800393e:	bd80      	pop	{r7, pc}

08003940 <MemoryManager::InitializeMemoryManager#16953>:
            }
        }


        public override unsafe void InitializeMemoryManager( )
        {
 8003940:	b510      	push	{r4, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	4604      	mov	r4, r0
            base.InitializeMemoryManager( );
 8003946:	f000 fdb5 	bl	80044b4 <LinearMemoryManager::InitializeMemoryManager#4928>
 800394a:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 800394e:	9001      	str	r0, [sp, #4]
 8003950:	a801      	add	r0, sp, #4
                MBED.Memory.FreeMemoryPool( zeligHeap );

                RT.BugCheck.Raise( RT.BugCheck.StopCode.FailedBootstrap );
            }

            ManagedHeap    = (UIntPtr)         zeligHeap              ;
 8003952:	f004 fa1f 	bl	8007d94 <Memory::RequestMemoryPool#16869>

            uint stackSize = Device.Instance.ManagedHeapSize;

            byte *zeligHeap = MBED.Memory.RequestMemoryPool( &stackSize );

            if( zeligHeap == null || stackSize < Device.Instance.ManagedHeapSize / 2 )
 8003956:	b158      	cbz	r0, 8003970 <MemoryManager::InitializeMemoryManager#16953+0x30>
 8003958:	6160      	str	r0, [r4, #20]

            var attrs = RT.MemoryAttributes.InternalMemory          |
                        RT.MemoryAttributes.RandomAccessMemory      |
                        RT.MemoryAttributes.ConfiguredAtEntryPoint  ;
            
            AddLinearSection( ManagedHeap, ManagedHeapEnd , attrs );
 800395a:	f44f 6328 	mov.w	r3, #2688	; 0xa80

                RT.BugCheck.Raise( RT.BugCheck.StopCode.FailedBootstrap );
            }

            ManagedHeap    = (UIntPtr)         zeligHeap              ;
            ManagedHeapEnd = (UIntPtr) ( (uint)zeligHeap + stackSize );
 800395e:	9901      	ldr	r1, [sp, #4]
 8003960:	1842      	adds	r2, r0, r1

            var attrs = RT.MemoryAttributes.InternalMemory          |
                        RT.MemoryAttributes.RandomAccessMemory      |
                        RT.MemoryAttributes.ConfiguredAtEntryPoint  ;
            
            AddLinearSection( ManagedHeap, ManagedHeapEnd , attrs );
 8003962:	4620      	mov	r0, r4
 8003964:	61a2      	str	r2, [r4, #24]
 8003966:	6961      	ldr	r1, [r4, #20]
 8003968:	f000 fdad 	bl	80044c6 <MemoryManager::AddLinearSection#5195>
 800396c:	b002      	add	sp, #8
 800396e:	bd10      	pop	{r4, pc}

            byte *zeligHeap = MBED.Memory.RequestMemoryPool( &stackSize );

            if( zeligHeap == null || stackSize < Device.Instance.ManagedHeapSize / 2 )
            {
                MBED.Memory.FreeMemoryPool( zeligHeap );
 8003970:	f004 fa2c 	bl	8007dcc <Memory::FreeMemoryPool#16870>

                RT.BugCheck.Raise( RT.BugCheck.StopCode.FailedBootstrap );
 8003974:	2010      	movs	r0, #16
 8003976:	f7fc fcb3 	bl	80002e0 <BugCheck::Raise#4938>

0800397a <LinearMemoryManager::InitializationComplete#4929>:
                }
            }
        }

        public override void InitializationComplete()
        {
 800397a:	b580      	push	{r7, lr}
            if(MemoryManager.Configuration.TrashFreeMemory)
            {
                DirtyFreeMemory();
 800397c:	f000 fdc9 	bl	8004512 <MemoryManager::DirtyFreeMemory#5189>
 8003980:	bd80      	pop	{r7, pc}

08003982 <ThreadManager::InitializeBeforeStaticConstructors#17326>:
        //
        // Helper Methods
        //

        public override void InitializeBeforeStaticConstructors()
        {
 8003982:	b580      	push	{r7, lr}
            base.InitializeBeforeStaticConstructors();
 8003984:	f7fe ff78 	bl	8002878 <ThreadManager::InitializeBeforeStaticConstructors#3322>
 8003988:	bd80      	pop	{r7, pc}

0800398a <TypeSystemManager::InitializeTypeSystemManager#5223>:
        //
        // Helper Methods
        //

        public virtual void InitializeTypeSystemManager()
        {
 800398a:	b580      	push	{r7, lr}
            InvokeStaticConstructors();
 800398c:	f000 fef5 	bl	800477a <TypeSystemManager::InvokeStaticConstructors#5240>
 8003990:	bd80      	pop	{r7, pc}

08003992 <ThreadManager::InitializeAfterStaticConstructors#17327>:
        }

        public override void InitializeAfterStaticConstructors( uint[] systemStack )
        {
 8003992:	b580      	push	{r7, lr}
            base.InitializeAfterStaticConstructors( systemStack );
 8003994:	f000 fee7 	bl	8004766 <ARMv7ThreadManager::InitializeAfterStaticConstructors#5216>
 8003998:	bd80      	pop	{r7, pc}

0800399a <Peripherals::Activate#16934>:
        //
        // Helper Methods
        //
        
        public override void Activate()
        {
 800399a:	b580      	push	{r7, lr}
            base.Activate( ); 
 800399c:	f004 fa30 	bl	8007e00 <Peripherals::Activate#17232>
            
            Drivers.SystemTimer.Instance.Initialize();
 80039a0:	f004 fa34 	bl	8007e0c <SystemTimer::Initialize#17011>
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	46c0      	nop			; (mov r8, r8)

080039a8 <ThreadManager::Activate#16997>:
        //
        // Helper Methods
        //

        public override void Activate()
        {
 80039a8:	b570      	push	{r4, r5, r6, lr}
 80039aa:	4604      	mov	r4, r0
            base.Activate( ); 
 80039ac:	f004 fa5e 	bl	8007e6c <ThreadManager::Activate#17328>
 80039b0:	4e0a      	ldr	r6, [pc, #40]	; (80039dc <ThreadManager::Activate#16997+0x34>)

            m_timerForWaits = Drivers.SystemTimer.Instance.CreateTimer( WaitExpired );
 80039b2:	480b      	ldr	r0, [pc, #44]	; (80039e0 <ThreadManager::Activate#16997+0x38>)
 80039b4:	490b      	ldr	r1, [pc, #44]	; (80039e4 <ThreadManager::Activate#16997+0x3c>)
 80039b6:	447e      	add	r6, pc
 80039b8:	4430      	add	r0, r6
 80039ba:	4431      	add	r1, r6
 80039bc:	f7fc ffb0 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 80039c0:	4605      	mov	r5, r0
 80039c2:	4809      	ldr	r0, [pc, #36]	; (80039e8 <ThreadManager::Activate#16997+0x40>)
 80039c4:	4621      	mov	r1, r4
 80039c6:	1982      	adds	r2, r0, r6
 80039c8:	4628      	mov	r0, r5
 80039ca:	f7fd fc88 	bl	80012de <MulticastDelegate::.ctor#4919>
 80039ce:	4628      	mov	r0, r5
 80039d0:	f004 fa9c 	bl	8007f0c <SystemTimer::CreateTimer#17012>
 80039d4:	6460      	str	r0, [r4, #68]	; 0x44
            DeviceModels.Chipset.CortexM3.Drivers.InterruptController.Instance.Activate();
 80039d6:	f004 faaf 	bl	8007f38 <InterruptController::Activate#17346>
 80039da:	bd70      	pop	{r4, r5, r6, pc}
 80039dc:	17ffddfa 	.word	0x17ffddfa
 80039e0:	ffffea64 	.word	0xffffea64
 80039e4:	e800b41c 	.word	0xe800b41c
 80039e8:	e8006741 	.word	0xe8006741

080039ec <HardwareProvider::TryReservePins#4542>:
        //
        // Gpio reservation
        //

        public bool TryReservePins(params int[] pins)
        {
 80039ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039f0:	b081      	sub	sp, #4
 80039f2:	4f36      	ldr	r7, [pc, #216]	; (8003acc <HardwareProvider::TryReservePins#4542+0xe0>)
 80039f4:	4605      	mov	r5, r0
            int failIndex = -1;

            lock (pinLock)
 80039f6:	4836      	ldr	r0, [pc, #216]	; (8003ad0 <HardwareProvider::TryReservePins#4542+0xe4>)
 80039f8:	2400      	movs	r4, #0
 80039fa:	f10d 0103 	add.w	r1, sp, #3
 80039fe:	f88d 4003 	strb.w	r4, [sp, #3]
 8003a02:	f88d 4003 	strb.w	r4, [sp, #3]
 8003a06:	447f      	add	r7, pc
 8003a08:	eb00 0a07 	add.w	sl, r0, r7
 8003a0c:	f8da b078 	ldr.w	fp, [sl, #120]	; 0x78
 8003a10:	4658      	mov	r0, fp
 8003a12:	f000 f863 	bl	8003adc <Monitor::Enter#8007>
                for (int i = 0; i < pins.Length; i++)
                {
                    // Do not try to release NC pins
                    if (InvalidPin != pins[i])
                    {
                        int index = PinToIndex(pins[i]);
 8003a16:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8003ad4 <HardwareProvider::TryReservePins#4542+0xe8>
        {
            int failIndex = -1;

            lock (pinLock)
            {
                for (int i = 0; i < pins.Length; i++)
 8003a1a:	f105 060c 	add.w	r6, r5, #12
                {
                    // Do not try to release NC pins
                    if (InvalidPin != pins[i])
                    {
                        int index = PinToIndex(pins[i]);
 8003a1e:	eb08 0907 	add.w	r9, r8, r7
 8003a22:	e000      	b.n	8003a26 <HardwareProvider::TryReservePins#4542+0x3a>
        {
            int failIndex = -1;

            lock (pinLock)
            {
                for (int i = 0; i < pins.Length; i++)
 8003a24:	3401      	adds	r4, #1
 8003a26:	68a8      	ldr	r0, [r5, #8]
 8003a28:	4284      	cmp	r4, r0
 8003a2a:	da19      	bge.n	8003a60 <HardwareProvider::TryReservePins#4542+0x74>
                {
                    // Do not try to release NC pins
                    if (InvalidPin != pins[i])
 8003a2c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003a30:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003a34:	d0f6      	beq.n	8003a24 <HardwareProvider::TryReservePins#4542+0x38>
                    {
                        int index = PinToIndex(pins[i]);
 8003a36:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 8003a3a:	4648      	mov	r0, r9
 8003a3c:	f000 f888 	bl	8003b50 <HardwareProvider::PinToIndex#17178>
 8003a40:	4607      	mov	r7, r0
                        if (m_reservedPins[index] == true)
 8003a42:	f8da 0074 	ldr.w	r0, [sl, #116]	; 0x74
 8003a46:	4639      	mov	r1, r7
 8003a48:	f000 f892 	bl	8003b70 <BitArray::get_Item#10517>
 8003a4c:	f010 0fff 	tst.w	r0, #255	; 0xff
 8003a50:	d108      	bne.n	8003a64 <HardwareProvider::TryReservePins#4542+0x78>
                        {
                            failIndex = i;
                            break;
                        }
                        m_reservedPins[index] = true;
 8003a52:	f8da 0074 	ldr.w	r0, [sl, #116]	; 0x74
 8003a56:	4639      	mov	r1, r7
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f000 f885 	bl	8003b68 <BitArray::set_Item#10518>
 8003a5e:	e7e1      	b.n	8003a24 <HardwareProvider::TryReservePins#4542+0x38>
 8003a60:	f04f 34ff 	mov.w	r4, #4294967295
                    }
                }

                if (failIndex > 0)
 8003a64:	2c01      	cmp	r4, #1
 8003a66:	db25      	blt.n	8003ab4 <HardwareProvider::TryReservePins#4542+0xc8>
 8003a68:	481b      	ldr	r0, [pc, #108]	; (8003ad8 <HardwareProvider::TryReservePins#4542+0xec>)

        public bool TryReservePins(params int[] pins)
        {
            int failIndex = -1;

            lock (pinLock)
 8003a6a:	4919      	ldr	r1, [pc, #100]	; (8003ad0 <HardwareProvider::TryReservePins#4542+0xe4>)
 8003a6c:	2700      	movs	r7, #0
 8003a6e:	4478      	add	r0, pc
                    for (int i = 0; i < failIndex; i++)
                    {
                        // Do not touch NC pins
                        if (InvalidPin != pins[i])
                        {
                            int index = PinToIndex(pins[i]);
 8003a70:	eb08 0900 	add.w	r9, r8, r0
                            m_reservedPins[index] = false;
 8003a74:	180d      	adds	r5, r1, r0
 8003a76:	e000      	b.n	8003a7a <HardwareProvider::TryReservePins#4542+0x8e>
                    }
                }

                if (failIndex > 0)
                {
                    for (int i = 0; i < failIndex; i++)
 8003a78:	3701      	adds	r7, #1
 8003a7a:	42a7      	cmp	r7, r4
 8003a7c:	da0f      	bge.n	8003a9e <HardwareProvider::TryReservePins#4542+0xb2>
                    {
                        // Do not touch NC pins
                        if (InvalidPin != pins[i])
 8003a7e:	f856 0027 	ldr.w	r0, [r6, r7, lsl #2]
 8003a82:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003a86:	d0f7      	beq.n	8003a78 <HardwareProvider::TryReservePins#4542+0x8c>
                        {
                            int index = PinToIndex(pins[i]);
 8003a88:	f856 1027 	ldr.w	r1, [r6, r7, lsl #2]
 8003a8c:	4648      	mov	r0, r9
 8003a8e:	f000 f85f 	bl	8003b50 <HardwareProvider::PinToIndex#17178>
 8003a92:	4601      	mov	r1, r0
                            m_reservedPins[index] = false;
 8003a94:	6f68      	ldr	r0, [r5, #116]	; 0x74
 8003a96:	2200      	movs	r2, #0
 8003a98:	f000 f866 	bl	8003b68 <BitArray::set_Item#10518>
 8003a9c:	e7ec      	b.n	8003a78 <HardwareProvider::TryReservePins#4542+0x8c>
                        }
                    }
                    return false;
                }
                return true;
 8003a9e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8003aa2:	2800      	cmp	r0, #0
 8003aa4:	bf1c      	itt	ne
 8003aa6:	4658      	movne	r0, fp
 8003aa8:	f000 f84c 	blne	8003b44 <Monitor::Exit#4097>
 8003aac:	2000      	movs	r0, #0
 8003aae:	b001      	add	sp, #4
 8003ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ab4:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8003ab8:	2800      	cmp	r0, #0
 8003aba:	bf1c      	itt	ne
 8003abc:	4658      	movne	r0, fp
 8003abe:	f000 f841 	blne	8003b44 <Monitor::Exit#4097>
 8003ac2:	2001      	movs	r0, #1
 8003ac4:	b001      	add	sp, #4
 8003ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003aca:	46c0      	nop			; (mov r8, r8)
 8003acc:	17ffddaa 	.word	0x17ffddaa
 8003ad0:	fffffe3c 	.word	0xfffffe3c
 8003ad4:	ffffea6c 	.word	0xffffea6c
 8003ad8:	17ffdd42 	.word	0x17ffdd42

08003adc <Monitor::Enter#8007>:
////    [ResourceExposure( ResourceScope.None )]
////    [MethodImpl( MethodImplOptions.InternalCall )]
////    internal static extern void ReliableEnter( Object obj, ref bool tookLock );

        public static void Enter( Object obj, ref bool lockTaken )
        {
 8003adc:	b5b0      	push	{r4, r5, r7, lr}
 8003ade:	460c      	mov	r4, r1
 8003ae0:	b130      	cbz	r0, 8003af0 <Monitor::Enter#8007+0x14>
            {
                throw new ArgumentNullException();
            }

            //  The input must be false.
            if (lockTaken == true)
 8003ae2:	7821      	ldrb	r1, [r4, #0]
 8003ae4:	b989      	cbnz	r1, 8003b0a <Monitor::Enter#8007+0x2e>
            }
            
            //The output is true if the lock is acquired; otherwise, the output is 
            // false. The output is set even if an exception occurs during the attempt 
            // to acquire the lock. 
            Enter(obj);
 8003ae6:	f002 feed 	bl	80068c4 <Monitor::Enter#4096>
 8003aea:	2001      	movs	r0, #1
 8003aec:	7020      	strb	r0, [r4, #0]
 8003aee:	bdb0      	pop	{r4, r5, r7, pc}
 8003af0:	4812      	ldr	r0, [pc, #72]	; (8003b3c <Monitor::Enter#8007+0x60>)

        public static void Enter( Object obj, ref bool lockTaken )
        {
            if(obj == null)
            {
                throw new ArgumentNullException();
 8003af2:	4910      	ldr	r1, [pc, #64]	; (8003b34 <Monitor::Enter#8007+0x58>)
 8003af4:	4478      	add	r0, pc
 8003af6:	180c      	adds	r4, r1, r0
 8003af8:	4911      	ldr	r1, [pc, #68]	; (8003b40 <Monitor::Enter#8007+0x64>)
 8003afa:	4401      	add	r1, r0
 8003afc:	4620      	mov	r0, r4
 8003afe:	f7fc ff0f 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8003b02:	4605      	mov	r5, r0
 8003b04:	f7fc ff1d 	bl	8000942 <ArgumentNullException::.ctor#6362>
 8003b08:	e00d      	b.n	8003b26 <Monitor::Enter#8007+0x4a>
 8003b0a:	2000      	movs	r0, #0

            //  The input must be false.
            if (lockTaken == true)
            {
                lockTaken = false;
                throw new ArgumentException();
 8003b0c:	4909      	ldr	r1, [pc, #36]	; (8003b34 <Monitor::Enter#8007+0x58>)
 8003b0e:	7020      	strb	r0, [r4, #0]
 8003b10:	4807      	ldr	r0, [pc, #28]	; (8003b30 <Monitor::Enter#8007+0x54>)
 8003b12:	4478      	add	r0, pc
 8003b14:	180c      	adds	r4, r1, r0
 8003b16:	4908      	ldr	r1, [pc, #32]	; (8003b38 <Monitor::Enter#8007+0x5c>)
 8003b18:	4401      	add	r1, r0
 8003b1a:	4620      	mov	r0, r4
 8003b1c:	f7fc ff00 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8003b20:	4605      	mov	r5, r0
 8003b22:	f001 fb9c 	bl	800525e <ArgumentException::.ctor#6355>

        public static void Enter( Object obj, ref bool lockTaken )
        {
            if(obj == null)
            {
                throw new ArgumentNullException();
 8003b26:	4620      	mov	r0, r4
 8003b28:	4629      	mov	r1, r5
 8003b2a:	f7fc ff0f 	bl	800094c <TypeSystemManager::Throw#5247>
 8003b2e:	46c0      	nop			; (mov r8, r8)
 8003b30:	17ffdc9e 	.word	0x17ffdc9e
 8003b34:	ffffea64 	.word	0xffffea64
 8003b38:	e800842c 	.word	0xe800842c
 8003b3c:	17ffdcbc 	.word	0x17ffdcbc
 8003b40:	e80075bc 	.word	0xe80075bc

08003b44 <Monitor::Exit#4097>:
            SyncBlockTable.GetLock( obj ).Acquire();
        }

        [NoInline]
        public static void Exit( Object obj )
        {
 8003b44:	b580      	push	{r7, lr}
            SyncBlockTable.GetLock( obj ).Release();
 8003b46:	f000 faa2 	bl	800408e <SyncBlockTable::GetLock#4790>
 8003b4a:	f001 f88b 	bl	8004c64 <CriticalSection::Release#5271>
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <HardwareProvider::PinToIndex#17178>:
        // Gpio Discovery 
        //
        public override int PinCount => Board.Instance.PinCount;

        public override int PinToIndex(int pin)
        {
 8003b50:	b580      	push	{r7, lr}
 8003b52:	4803      	ldr	r0, [pc, #12]	; (8003b60 <HardwareProvider::PinToIndex#17178+0x10>)
            return Board.Instance.PinToIndex(pin);
 8003b54:	4a03      	ldr	r2, [pc, #12]	; (8003b64 <HardwareProvider::PinToIndex#17178+0x14>)
 8003b56:	4478      	add	r0, pc
 8003b58:	4410      	add	r0, r2
 8003b5a:	f004 fc4a 	bl	80083f2 <Board::PinToIndex#17464>
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	17ffdc5a 	.word	0x17ffdc5a
 8003b64:	ffffeab0 	.word	0xffffeab0

08003b68 <BitArray::set_Item#10518>:
            {
                return Get( index );
            }

            set
            {
 8003b68:	b580      	push	{r7, lr}
                Set( index, value );
 8003b6a:	f003 fa1b 	bl	8006fa4 <BitArray::Set#10520>
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <BitArray::get_Item#10517>:
        }

        public bool this[int index]
        {
            get
            {
 8003b70:	b580      	push	{r7, lr}
                return Get( index );
 8003b72:	f003 f9eb 	bl	8006f4c <BitArray::Get#10519>
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <HardwareProvider::ReleasePins#4543>:
            }
        }

        public void ReleasePins(params int[] pins)
        {
 8003b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b7c:	b082      	sub	sp, #8
 8003b7e:	4f1e      	ldr	r7, [pc, #120]	; (8003bf8 <HardwareProvider::ReleasePins#4543+0x80>)
 8003b80:	4682      	mov	sl, r0
            lock (pinLock)
 8003b82:	481e      	ldr	r0, [pc, #120]	; (8003bfc <HardwareProvider::ReleasePins#4543+0x84>)
 8003b84:	2400      	movs	r4, #0
 8003b86:	f10d 0107 	add.w	r1, sp, #7
 8003b8a:	f88d 4007 	strb.w	r4, [sp, #7]
 8003b8e:	f88d 4007 	strb.w	r4, [sp, #7]
 8003b92:	447f      	add	r7, pc
 8003b94:	19c6      	adds	r6, r0, r7
 8003b96:	f8d6 8078 	ldr.w	r8, [r6, #120]	; 0x78
 8003b9a:	4640      	mov	r0, r8
 8003b9c:	f7ff ff9e 	bl	8003adc <Monitor::Enter#8007>
                foreach (int pin in pins)
                {
                    // Don't touch NC pins
                    if (InvalidPin != pin)
                    {
                        int index = PinToIndex(pin);
 8003ba0:	4817      	ldr	r0, [pc, #92]	; (8003c00 <HardwareProvider::ReleasePins#4543+0x88>)

        public void ReleasePins(params int[] pins)
        {
            lock (pinLock)
            {
                foreach (int pin in pins)
 8003ba2:	f10a 050c 	add.w	r5, sl, #12
                {
                    // Don't touch NC pins
                    if (InvalidPin != pin)
                    {
                        int index = PinToIndex(pin);
 8003ba6:	eb00 0907 	add.w	r9, r0, r7
 8003baa:	e000      	b.n	8003bae <HardwareProvider::ReleasePins#4543+0x36>
                        if (m_reservedPins[index] == true)
                        {
                            m_reservedPins[index] = false;
                        }
                    }
                }
 8003bac:	3401      	adds	r4, #1
 8003bae:	f8da 0008 	ldr.w	r0, [sl, #8]

        public void ReleasePins(params int[] pins)
        {
            lock (pinLock)
            {
                foreach (int pin in pins)
 8003bb2:	4284      	cmp	r4, r0
 8003bb4:	da16      	bge.n	8003be4 <HardwareProvider::ReleasePins#4543+0x6c>
                {
                    // Don't touch NC pins
                    if (InvalidPin != pin)
                    {
                        int index = PinToIndex(pin);
 8003bb6:	f855 1024 	ldr.w	r1, [r5, r4, lsl #2]
            lock (pinLock)
            {
                foreach (int pin in pins)
                {
                    // Don't touch NC pins
                    if (InvalidPin != pin)
 8003bba:	f1b1 3fff 	cmp.w	r1, #4294967295
 8003bbe:	d0f5      	beq.n	8003bac <HardwareProvider::ReleasePins#4543+0x34>
                    {
                        int index = PinToIndex(pin);
 8003bc0:	4648      	mov	r0, r9
 8003bc2:	f7ff ffc5 	bl	8003b50 <HardwareProvider::PinToIndex#17178>
 8003bc6:	4607      	mov	r7, r0

                        if (m_reservedPins[index] == true)
 8003bc8:	6f70      	ldr	r0, [r6, #116]	; 0x74
 8003bca:	4639      	mov	r1, r7
 8003bcc:	f7ff ffd0 	bl	8003b70 <BitArray::get_Item#10517>
 8003bd0:	f010 0fff 	tst.w	r0, #255	; 0xff
 8003bd4:	d0ea      	beq.n	8003bac <HardwareProvider::ReleasePins#4543+0x34>
                        {
                            m_reservedPins[index] = false;
 8003bd6:	6f70      	ldr	r0, [r6, #116]	; 0x74
 8003bd8:	4639      	mov	r1, r7
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f7ff ffc4 	bl	8003b68 <BitArray::set_Item#10518>
                        }
                    }
                }
 8003be0:	3401      	adds	r4, #1
 8003be2:	e7e4      	b.n	8003bae <HardwareProvider::ReleasePins#4543+0x36>
            }
 8003be4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8003be8:	2800      	cmp	r0, #0
 8003bea:	bf1c      	itt	ne
 8003bec:	4640      	movne	r0, r8
 8003bee:	f7ff ffa9 	blne	8003b44 <Monitor::Exit#4097>
 8003bf2:	b002      	add	sp, #8
 8003bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bf8:	17ffdc1e 	.word	0x17ffdc1e
 8003bfc:	fffffe3c 	.word	0xfffffe3c
 8003c00:	ffffea6c 	.word	0xffffea6c

08003c04 <HardwareProvider::.cctor#4546>:

    [ImplicitInstance]
    [ForceDevirtualization]
    public abstract class HardwareProvider
    {
        private static object pinLock = new object();
 8003c04:	b570      	push	{r4, r5, r6, lr}
 8003c06:	4d0b      	ldr	r5, [pc, #44]	; (8003c34 <HardwareProvider::.cctor#4546+0x30>)
 8003c08:	480b      	ldr	r0, [pc, #44]	; (8003c38 <HardwareProvider::.cctor#4546+0x34>)
 8003c0a:	447d      	add	r5, pc
 8003c0c:	1944      	adds	r4, r0, r5
 8003c0e:	480b      	ldr	r0, [pc, #44]	; (8003c3c <HardwareProvider::.cctor#4546+0x38>)
 8003c10:	1941      	adds	r1, r0, r5
 8003c12:	4620      	mov	r0, r4
 8003c14:	f7fc fe84 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8003c18:	4909      	ldr	r1, [pc, #36]	; (8003c40 <HardwareProvider::.cctor#4546+0x3c>)
 8003c1a:	194e      	adds	r6, r1, r5
 8003c1c:	67b0      	str	r0, [r6, #120]	; 0x78
        // See below in default ctor: the singleton factory currently does not yet support creating parameterized objects
        // we need to use a ceiling value until we invoke the defautl ctor that will ask the actual number of pins to the 
        // concrete HW Provider (e.g. mBed HW provider)
        // Consider that LPC1768 board has 32 exposed pins and K64F has 64 pins only
        //
        static BitArray m_reservedPins = new BitArray(256);
 8003c1e:	4809      	ldr	r0, [pc, #36]	; (8003c44 <HardwareProvider::.cctor#4546+0x40>)
 8003c20:	1941      	adds	r1, r0, r5
 8003c22:	4620      	mov	r0, r4
 8003c24:	f7fc fe7c 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8003c28:	4604      	mov	r4, r0
 8003c2a:	f000 f80d 	bl	8003c48 <BitArray::.ctor#10511>
 8003c2e:	6774      	str	r4, [r6, #116]	; 0x74
 8003c30:	bd70      	pop	{r4, r5, r6, pc}
 8003c32:	46c0      	nop			; (mov r8, r8)
 8003c34:	17ffdba6 	.word	0x17ffdba6
 8003c38:	ffffea64 	.word	0xffffea64
 8003c3c:	e8008e8c 	.word	0xe8008e8c
 8003c40:	fffffe3c 	.word	0xfffffe3c
 8003c44:	e8008f1c 	.word	0xe8008f1c

08003c48 <BitArray::.ctor#10511>:
        ** Allocates space to hold length bit values. All of the values in the bit
        ** array are set to false.
        **
        ** Exceptions: ArgumentException if length < 0.
        =========================================================================*/
        public BitArray( int length ) : this( length, false )
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	f003 f95b 	bl	8006f04 <BitArray::.ctor#10512>
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <Tracker::Allocate#5728>:
            //
            // Helper Methods
            //

            internal static void Allocate( object obj )
            {
 8003c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c52:	b081      	sub	sp, #4
 8003c54:	4f13      	ldr	r7, [pc, #76]	; (8003ca4 <Tracker::Allocate#5728+0x54>)
 8003c56:	4604      	mov	r4, r0
                var tracker = new Tracker( obj );
 8003c58:	4813      	ldr	r0, [pc, #76]	; (8003ca8 <Tracker::Allocate#5728+0x58>)
 8003c5a:	4914      	ldr	r1, [pc, #80]	; (8003cac <Tracker::Allocate#5728+0x5c>)
 8003c5c:	2600      	movs	r6, #0
 8003c5e:	f88d 6003 	strb.w	r6, [sp, #3]
 8003c62:	447f      	add	r7, pc
 8003c64:	4438      	add	r0, r7
 8003c66:	4439      	add	r1, r7
 8003c68:	f000 fafc 	bl	8004264 <DefaultTypeSystemManager::AllocateObjectWithExtensions#5254>
 8003c6c:	4621      	mov	r1, r4
 8003c6e:	4605      	mov	r5, r0
 8003c70:	f001 fa42 	bl	80050f8 <Tracker::.ctor#5727>

                lock(s_list)
 8003c74:	480e      	ldr	r0, [pc, #56]	; (8003cb0 <Tracker::Allocate#5728+0x60>)
 8003c76:	f10d 0103 	add.w	r1, sp, #3
 8003c7a:	f88d 6003 	strb.w	r6, [sp, #3]
 8003c7e:	4407      	add	r7, r0
 8003c80:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8003c82:	4620      	mov	r0, r4
 8003c84:	f7ff ff2a 	bl	8003adc <Monitor::Enter#8007>
                {
                    s_list.InsertAtTail( tracker.m_node );
 8003c88:	68a9      	ldr	r1, [r5, #8]
 8003c8a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8003c8c:	f001 fa4e 	bl	800512c <KernelList`1::InsertAtTail#18115>
                }
 8003c90:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8003c94:	2800      	cmp	r0, #0
 8003c96:	bf1c      	itt	ne
 8003c98:	4620      	movne	r0, r4
 8003c9a:	f7ff ff53 	blne	8003b44 <Monitor::Exit#4097>
 8003c9e:	b001      	add	sp, #4
 8003ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ca2:	46c0      	nop			; (mov r8, r8)
 8003ca4:	17ffdb4e 	.word	0x17ffdb4e
 8003ca8:	ffffea64 	.word	0xffffea64
 8003cac:	e80097cc 	.word	0xe80097cc
 8003cb0:	fffffe3c 	.word	0xfffffe3c

08003cb4 <Tracker::SetFinalizationFlag#5729>:
            }

            internal static void SetFinalizationFlag( object obj ,
                                                      bool   val )
            {
 8003cb4:	b570      	push	{r4, r5, r6, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	4915      	ldr	r1, [pc, #84]	; (8003d10 <Tracker::SetFinalizationFlag#5729+0x5c>)
                lock(s_list)
 8003cba:	4a16      	ldr	r2, [pc, #88]	; (8003d14 <Tracker::SetFinalizationFlag#5729+0x60>)
 8003cbc:	4605      	mov	r5, r0
 8003cbe:	2000      	movs	r0, #0
 8003cc0:	f88d 0007 	strb.w	r0, [sp, #7]
 8003cc4:	f88d 0007 	strb.w	r0, [sp, #7]
 8003cc8:	4479      	add	r1, pc
 8003cca:	1856      	adds	r6, r2, r1
 8003ccc:	f10d 0107 	add.w	r1, sp, #7
 8003cd0:	6eb4      	ldr	r4, [r6, #104]	; 0x68
 8003cd2:	4620      	mov	r0, r4
 8003cd4:	f7ff ff02 	bl	8003adc <Monitor::Enter#8007>
                {
                    for(var node = s_list.StartOfForwardWalk; node.IsValidForForwardMove; node = node.Next)
 8003cd8:	6eb0      	ldr	r0, [r6, #104]	; 0x68
 8003cda:	f001 fa2e 	bl	800513a <KernelList`1::get_StartOfForwardWalk#18121>
 8003cde:	4606      	mov	r6, r0
 8003ce0:	e000      	b.n	8003ce4 <Tracker::SetFinalizationFlag#5729+0x30>
 8003ce2:	68b6      	ldr	r6, [r6, #8]
 8003ce4:	4630      	mov	r0, r6
 8003ce6:	f001 fa2b 	bl	8005140 <KernelNode`1::get_IsValidForForwardMove#18399>
 8003cea:	f010 0fff 	tst.w	r0, #255	; 0xff
 8003cee:	d005      	beq.n	8003cfc <Tracker::SetFinalizationFlag#5729+0x48>
 8003cf0:	6930      	ldr	r0, [r6, #16]
                    {
                        var ptr = node.Target;

                        if(ptr.m_target == obj)
 8003cf2:	68c1      	ldr	r1, [r0, #12]
 8003cf4:	42a9      	cmp	r1, r5
 8003cf6:	d1f4      	bne.n	8003ce2 <Tracker::SetFinalizationFlag#5729+0x2e>
 8003cf8:	2101      	movs	r1, #1
 8003cfa:	7401      	strb	r1, [r0, #16]
                        {
                            ptr.m_fFinalized = val;
                            return;
                        }
                    }
                }
 8003cfc:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8003d00:	2800      	cmp	r0, #0
 8003d02:	bf1c      	itt	ne
 8003d04:	4620      	movne	r0, r4
 8003d06:	f7ff ff1d 	blne	8003b44 <Monitor::Exit#4097>
 8003d0a:	b002      	add	sp, #8
 8003d0c:	bd70      	pop	{r4, r5, r6, pc}
 8003d0e:	46c0      	nop			; (mov r8, r8)
 8003d10:	17ffdae8 	.word	0x17ffdae8
 8003d14:	fffffe3c 	.word	0xfffffe3c

08003d18 <Finalizer::.cctor#4562>:

        //
        // State
        //

        static readonly KernelList< Tracker> s_list        = new KernelList< Tracker >();
 8003d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d1a:	b081      	sub	sp, #4
 8003d1c:	4e11      	ldr	r6, [pc, #68]	; (8003d64 <Finalizer::.cctor#4562+0x4c>)
 8003d1e:	4812      	ldr	r0, [pc, #72]	; (8003d68 <Finalizer::.cctor#4562+0x50>)
 8003d20:	447e      	add	r6, pc
 8003d22:	1984      	adds	r4, r0, r6
 8003d24:	4811      	ldr	r0, [pc, #68]	; (8003d6c <Finalizer::.cctor#4562+0x54>)
 8003d26:	1981      	adds	r1, r0, r6
 8003d28:	4620      	mov	r0, r4
 8003d2a:	f7fc fdf9 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8003d2e:	4605      	mov	r5, r0
 8003d30:	f000 f824 	bl	8003d7c <KernelList`1::.ctor#18114>
 8003d34:	480e      	ldr	r0, [pc, #56]	; (8003d70 <Finalizer::.cctor#4562+0x58>)
 8003d36:	1987      	adds	r7, r0, r6
        static readonly AutoResetEvent       s_notifyStart = new AutoResetEvent  ( false );
 8003d38:	480e      	ldr	r0, [pc, #56]	; (8003d74 <Finalizer::.cctor#4562+0x5c>)
 8003d3a:	66bd      	str	r5, [r7, #104]	; 0x68
 8003d3c:	1981      	adds	r1, r0, r6
 8003d3e:	4620      	mov	r0, r4
 8003d40:	f7fc fdee 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8003d44:	4605      	mov	r5, r0
 8003d46:	f000 f845 	bl	8003dd4 <AutoResetEvent::.ctor#7867>
        static readonly ManualResetEvent     s_notifyStop  = new ManualResetEvent( true  );
 8003d4a:	480b      	ldr	r0, [pc, #44]	; (8003d78 <Finalizer::.cctor#4562+0x60>)
 8003d4c:	66fd      	str	r5, [r7, #108]	; 0x6c
 8003d4e:	1981      	adds	r1, r0, r6
 8003d50:	4620      	mov	r0, r4
 8003d52:	f7fc fde5 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8003d56:	2101      	movs	r1, #1
 8003d58:	4604      	mov	r4, r0
 8003d5a:	f000 f841 	bl	8003de0 <ManualResetEvent::.ctor#8005>
 8003d5e:	673c      	str	r4, [r7, #112]	; 0x70
 8003d60:	b001      	add	sp, #4
 8003d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d64:	17ffda90 	.word	0x17ffda90
 8003d68:	ffffea64 	.word	0xffffea64
 8003d6c:	e8008fac 	.word	0xe8008fac
 8003d70:	fffffe3c 	.word	0xfffffe3c
 8003d74:	e800907c 	.word	0xe800907c
 8003d78:	e800914c 	.word	0xe800914c

08003d7c <KernelList`1::.ctor#18114>:

        //
        // Constructor Methods
        //

        public KernelList()
 8003d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d7e:	b081      	sub	sp, #4
 8003d80:	4604      	mov	r4, r0
 8003d82:	4811      	ldr	r0, [pc, #68]	; (8003dc8 <KernelList`1::.ctor#18114+0x4c>)
        {
            m_head = new KernelNode< T >( default(T) );
 8003d84:	4911      	ldr	r1, [pc, #68]	; (8003dcc <KernelList`1::.ctor#18114+0x50>)
 8003d86:	4478      	add	r0, pc
 8003d88:	180d      	adds	r5, r1, r0
 8003d8a:	4911      	ldr	r1, [pc, #68]	; (8003dd0 <KernelList`1::.ctor#18114+0x54>)
 8003d8c:	180e      	adds	r6, r1, r0
 8003d8e:	4628      	mov	r0, r5
 8003d90:	4631      	mov	r1, r6
 8003d92:	f7fc fdc5 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8003d96:	2100      	movs	r1, #0
 8003d98:	4607      	mov	r7, r0
 8003d9a:	f001 f9c5 	bl	8005128 <KernelNode`1::.ctor#18390>
            m_tail = new KernelNode< T >( default(T) );
 8003d9e:	4628      	mov	r0, r5
 8003da0:	4631      	mov	r1, r6
 8003da2:	60a7      	str	r7, [r4, #8]
 8003da4:	f7fc fdbc 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8003da8:	2100      	movs	r1, #0
 8003daa:	4605      	mov	r5, r0
 8003dac:	f001 f9bc 	bl	8005128 <KernelNode`1::.ctor#18390>
 8003db0:	60e5      	str	r5, [r4, #12]

            m_head.Next     = m_tail;
 8003db2:	4629      	mov	r1, r5
 8003db4:	68a0      	ldr	r0, [r4, #8]
 8003db6:	f004 fe09 	bl	80089cc <KernelNode`1::set_Next#18402>
            m_tail.Previous = m_head;
 8003dba:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 8003dbe:	f004 fe07 	bl	80089d0 <KernelNode`1::set_Previous#18404>
 8003dc2:	b001      	add	sp, #4
 8003dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dc6:	46c0      	nop			; (mov r8, r8)
 8003dc8:	17ffda2a 	.word	0x17ffda2a
 8003dcc:	ffffea64 	.word	0xffffea64
 8003dd0:	e800973c 	.word	0xe800973c

08003dd4 <AutoResetEvent::.ctor#7867>:
    using System.Runtime.InteropServices;

    [HostProtection( Synchronization = true, ExternalThreading = true )]
    public sealed class AutoResetEvent : EventWaitHandle
    {
        public AutoResetEvent( bool initialState ) : base( initialState, EventResetMode.AutoReset )
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f7fe fe5b 	bl	8002a94 <EventWaitHandle::.ctor#4114>
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <ManualResetEvent::.ctor#8005>:
    using System.Runtime.InteropServices;

    [HostProtection( Synchronization = true, ExternalThreading = true )]
    public sealed class ManualResetEvent : EventWaitHandle
    {
        public ManualResetEvent( bool initialState ) : base( initialState, EventResetMode.ManualReset )
 8003de0:	b580      	push	{r7, lr}
 8003de2:	2201      	movs	r2, #1
 8003de4:	f7fe fe56 	bl	8002a94 <EventWaitHandle::.ctor#4114>
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	46c0      	nop			; (mov r8, r8)

08003dec <Device::ProcessBugCheck#4715>:
 8003dec:	4802      	ldr	r0, [pc, #8]	; (8003df8 <Device::ProcessBugCheck#4715+0xc>)
 8003dee:	4a03      	ldr	r2, [pc, #12]	; (8003dfc <Device::ProcessBugCheck#4715+0x10>)
 8003df0:	4478      	add	r0, pc
 8003df2:	4410      	add	r0, r2
 8003df4:	6601      	str	r1, [r0, #96]	; 0x60
 8003df6:	e7fe      	b.n	8003df6 <Device::ProcessBugCheck#4715+0xa>
 8003df8:	17ffd9c0 	.word	0x17ffd9c0
 8003dfc:	fffffe3c 	.word	0xfffffe3c

08003e00 <Device::ProcessLog#4716>:
 8003e00:	4770      	bx	lr

08003e02 <Device::ProcessLog#4717>:
 8003e02:	4770      	bx	lr

08003e04 <Device::get_BootstrapStack#4723>:
        }

        public virtual uint[] BootstrapStack
        {
            get
            {
 8003e04:	4802      	ldr	r0, [pc, #8]	; (8003e10 <Device::get_BootstrapStack#4723+0xc>)
                return s_bootstrapStack;
 8003e06:	4903      	ldr	r1, [pc, #12]	; (8003e14 <Device::get_BootstrapStack#4723+0x10>)
 8003e08:	4478      	add	r0, pc
 8003e0a:	4408      	add	r0, r1
 8003e0c:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8003e0e:	4770      	bx	lr
 8003e10:	17ffd9a8 	.word	0x17ffd9a8
 8003e14:	fffffe3c 	.word	0xfffffe3c

08003e18 <Device::get_ManagedHeapSize#4725>:
 8003e18:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003e1c:	4770      	bx	lr
 8003e1e:	46c0      	nop			; (mov r8, r8)

08003e20 <SyncBlockTable::get_Lock#4798>:
        }

        public Synchronization.YieldLock Lock
        {
            get
            {
 8003e20:	b580      	push	{r7, lr}
 8003e22:	4907      	ldr	r1, [pc, #28]	; (8003e40 <SyncBlockTable::get_Lock#4798+0x20>)
                return TypeSystemManager.AtomicAllocator( ref m_lock );
 8003e24:	4807      	ldr	r0, [pc, #28]	; (8003e44 <SyncBlockTable::get_Lock#4798+0x24>)
 8003e26:	4479      	add	r1, pc
 8003e28:	4401      	add	r1, r0
 8003e2a:	6889      	ldr	r1, [r1, #8]
 8003e2c:	b121      	cbz	r1, 8003e38 <SyncBlockTable::get_Lock#4798+0x18>
 8003e2e:	4906      	ldr	r1, [pc, #24]	; (8003e48 <SyncBlockTable::get_Lock#4798+0x28>)
 8003e30:	4479      	add	r1, pc
 8003e32:	4408      	add	r0, r1
 8003e34:	6880      	ldr	r0, [r0, #8]
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	f000 fa2a 	bl	8004290 <TypeSystemManager::AtomicAllocatorSlow#38449>
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	46c0      	nop			; (mov r8, r8)
 8003e40:	17ffd98a 	.word	0x17ffd98a
 8003e44:	ffffeb3c 	.word	0xffffeb3c
 8003e48:	17ffd980 	.word	0x17ffd980

08003e4c <YieldLock::Acquire#5265>:
        //
        // Helper Methods
        //

        public void Acquire(ThreadImpl thisThread)
        {
 8003e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	460d      	mov	r5, r1
 8003e52:	2700      	movs	r7, #0
 8003e54:	4604      	mov	r4, r0
 8003e56:	9702      	str	r7, [sp, #8]
 8003e58:	b92d      	cbnz	r5, 8003e66 <YieldLock::Acquire#5265+0x1a>
 8003e5a:	e02a      	b.n	8003eb2 <YieldLock::Acquire#5265+0x66>
                    //bump priority to prevent priority inversion problems
                    if ((int)m_ownerThread.Priority < (int)thisThread.Priority)
                    {
                        m_ownerThread.Priority = thisThread.Priority;
                    }
                }
 8003e5c:	9802      	ldr	r0, [sp, #8]
 8003e5e:	f00f fe53 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>

                thisThread.Yield();
 8003e62:	f7fe fa83 	bl	800236c <Thread::Yield#4189>
 8003e66:	2001      	movs	r0, #1
 8003e68:	9701      	str	r7, [sp, #4]
 8003e6a:	f00f fe4d 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
 8003e6e:	9701      	str	r7, [sp, #4]
 8003e70:	e9cd 0001 	strd	r0, r0, [sp, #4]

            while(true)
            {
                using(SmartHandles.InterruptState.Disable())
                {
                    if(m_ownerThread == null)
 8003e74:	68a0      	ldr	r0, [r4, #8]
 8003e76:	b1a0      	cbz	r0, 8003ea2 <YieldLock::Acquire#5265+0x56>
                    {
                        m_ownerThread = thisThread;
                        return;
                    }

                    if(m_ownerThread == thisThread)
 8003e78:	68a0      	ldr	r0, [r4, #8]
 8003e7a:	42a8      	cmp	r0, r5
 8003e7c:	d013      	beq.n	8003ea6 <YieldLock::Acquire#5265+0x5a>
                        m_nestingCount++;
                        return;
                    }

                    //bump priority to prevent priority inversion problems
                    if ((int)m_ownerThread.Priority < (int)thisThread.Priority)
 8003e7e:	68a0      	ldr	r0, [r4, #8]
 8003e80:	f7fe f908 	bl	8002094 <Thread::get_Priority#4211>
 8003e84:	4606      	mov	r6, r0
 8003e86:	4628      	mov	r0, r5
 8003e88:	f7fe f904 	bl	8002094 <Thread::get_Priority#4211>
 8003e8c:	4286      	cmp	r6, r0
 8003e8e:	dae5      	bge.n	8003e5c <YieldLock::Acquire#5265+0x10>
                    {
                        m_ownerThread.Priority = thisThread.Priority;
 8003e90:	68a6      	ldr	r6, [r4, #8]
 8003e92:	4628      	mov	r0, r5
 8003e94:	f7fe f8fe 	bl	8002094 <Thread::get_Priority#4211>
 8003e98:	4601      	mov	r1, r0
 8003e9a:	4630      	mov	r0, r6
 8003e9c:	f7fe f8fc 	bl	8002098 <Thread::set_Priority#4212>
 8003ea0:	e7dc      	b.n	8003e5c <YieldLock::Acquire#5265+0x10>
 8003ea2:	60a5      	str	r5, [r4, #8]
 8003ea4:	e002      	b.n	8003eac <YieldLock::Acquire#5265+0x60>
                        return;
                    }

                    if(m_ownerThread == thisThread)
                    {
                        m_nestingCount++;
 8003ea6:	68e0      	ldr	r0, [r4, #12]
 8003ea8:	3001      	adds	r0, #1
 8003eaa:	60e0      	str	r0, [r4, #12]
                    //bump priority to prevent priority inversion problems
                    if ((int)m_ownerThread.Priority < (int)thisThread.Priority)
                    {
                        m_ownerThread.Priority = thisThread.Priority;
                    }
                }
 8003eac:	9802      	ldr	r0, [sp, #8]
 8003eae:	f00f fe2b 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
 8003eb2:	b003      	add	sp, #12
 8003eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003eb6:	46c0      	nop			; (mov r8, r8)

08003eb8 <YieldLock::Release#5266>:
                thisThread.Yield();
            }
        }

        public void Release(ThreadImpl thisThread)
        {
 8003eb8:	b5b0      	push	{r4, r5, r7, lr}
            if(thisThread == null)
 8003eba:	2900      	cmp	r1, #0
 8003ebc:	bf08      	it	eq
 8003ebe:	bdb0      	popeq	{r4, r5, r7, pc}
                // Special case for boot code path: all locks are transparent.
                //
                return;
            }

            if(m_ownerThread != thisThread)
 8003ec0:	6882      	ldr	r2, [r0, #8]
 8003ec2:	428a      	cmp	r2, r1
 8003ec4:	d109      	bne.n	8003eda <YieldLock::Release#5266+0x22>
#else
                throw new Exception();
#endif
            }

            if(m_nestingCount > 0)
 8003ec6:	68c1      	ldr	r1, [r0, #12]
 8003ec8:	2901      	cmp	r1, #1
            {
                m_nestingCount--;
 8003eca:	bfa1      	itttt	ge
 8003ecc:	68c1      	ldrge	r1, [r0, #12]
 8003ece:	3901      	subge	r1, #1
 8003ed0:	60c1      	strge	r1, [r0, #12]
 8003ed2:	bdb0      	popge	{r4, r5, r7, pc}
 8003ed4:	2100      	movs	r1, #0
 8003ed6:	6081      	str	r1, [r0, #8]
 8003ed8:	bdb0      	pop	{r4, r5, r7, pc}
 8003eda:	4808      	ldr	r0, [pc, #32]	; (8003efc <YieldLock::Release#5266+0x44>)
            if(m_ownerThread != thisThread)
            {
#if EXCEPTION_STRINGS
                throw new Exception( "Releasing waitable object not owned by thread" );
#else
                throw new Exception();
 8003edc:	4908      	ldr	r1, [pc, #32]	; (8003f00 <YieldLock::Release#5266+0x48>)
 8003ede:	4478      	add	r0, pc
 8003ee0:	180c      	adds	r4, r1, r0
 8003ee2:	4908      	ldr	r1, [pc, #32]	; (8003f04 <YieldLock::Release#5266+0x4c>)
 8003ee4:	4401      	add	r1, r0
 8003ee6:	4620      	mov	r0, r4
 8003ee8:	f7fc fd1a 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8003eec:	4605      	mov	r5, r0
 8003eee:	f000 fded 	bl	8004acc <Exception::.ctor#7329>
 8003ef2:	4620      	mov	r0, r4
 8003ef4:	4629      	mov	r1, r5
 8003ef6:	f7fc fd29 	bl	800094c <TypeSystemManager::Throw#5247>
 8003efa:	46c0      	nop			; (mov r8, r8)
 8003efc:	17ffd8d2 	.word	0x17ffd8d2
 8003f00:	ffffea64 	.word	0xffffea64
 8003f04:	e80094fc 	.word	0xe80094fc

08003f08 <SyncBlockTable::AssignSyncBlockSlow#4792>:

            return Instance.AssignSyncBlockSlow( obj );
        }

        private int AssignSyncBlockSlow( object obj )
        {
 8003f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	4604      	mov	r4, r0
 8003f0e:	2000      	movs	r0, #0
 8003f10:	9002      	str	r0, [sp, #8]
 8003f12:	e9cd 0000 	strd	r0, r0, [sp]
            ObjectHeader oh = ObjectHeader.Unpack( obj );

            using(new SmartHandles.YieldLockHolder( this.Lock ))
 8003f16:	f7ff ff83 	bl	8003e20 <SyncBlockTable::get_Lock#4798>
 8003f1a:	4605      	mov	r5, r0
 8003f1c:	484b      	ldr	r0, [pc, #300]	; (800404c <SyncBlockTable::AssignSyncBlockSlow#4792+0x144>)
 8003f1e:	494c      	ldr	r1, [pc, #304]	; (8004050 <SyncBlockTable::AssignSyncBlockSlow#4792+0x148>)
 8003f20:	2602      	movs	r6, #2
 8003f22:	9500      	str	r5, [sp, #0]
 8003f24:	4478      	add	r0, pc
 8003f26:	4408      	add	r0, r1
 8003f28:	f8d0 00bc 	ldr.w	r0, [r0, #188]	; 0xbc
 8003f2c:	9001      	str	r0, [sp, #4]
 8003f2e:	2800      	cmp	r0, #0
 8003f30:	f04f 0002 	mov.w	r0, #2
 8003f34:	bf1c      	itt	ne
 8003f36:	9801      	ldrne	r0, [sp, #4]
 8003f38:	f7fe f8ac 	blne	8002094 <Thread::get_Priority#4211>
 8003f3c:	9002      	str	r0, [sp, #8]
 8003f3e:	4628      	mov	r0, r5
 8003f40:	9901      	ldr	r1, [sp, #4]
 8003f42:	f7ff ff83 	bl	8003e4c <YieldLock::Acquire#5265>
 8003f46:	6820      	ldr	r0, [r4, #0]
 8003f48:	f400 7040 	and.w	r0, r0, #768	; 0x300
            {
                //
                // Check again, under lock, in case we had a race condition.
                //
                if(oh.ExtensionKind == ObjectHeader.ExtensionKinds.SyncBlock)
 8003f4c:	ebb6 2f10 	cmp.w	r6, r0, lsr #8
 8003f50:	d106      	bne.n	8003f60 <SyncBlockTable::AssignSyncBlockSlow#4792+0x58>
 8003f52:	6824      	ldr	r4, [r4, #0]
                if(oh.IsImmutable == false)
                {
                    oh.UpdateExtension( ObjectHeader.ExtensionKinds.SyncBlock, idx );
                }

                return idx;
 8003f54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003f58:	f7ff ffae 	bl	8003eb8 <YieldLock::Release#5266>
 8003f5c:	0aa7      	lsrs	r7, r4, #10
 8003f5e:	e060      	b.n	8004022 <SyncBlockTable::AssignSyncBlockSlow#4792+0x11a>
                if(oh.ExtensionKind == ObjectHeader.ExtensionKinds.SyncBlock)
                {
                    return oh.Payload;
                }

                int idx = -1;
 8003f60:	7820      	ldrb	r0, [r4, #0]
 8003f62:	f000 00fe 	and.w	r0, r0, #254	; 0xfe

                if(oh.IsImmutable)
 8003f66:	2804      	cmp	r0, #4
 8003f68:	d124      	bne.n	8003fb4 <SyncBlockTable::AssignSyncBlockSlow#4792+0xac>
 8003f6a:	493a      	ldr	r1, [pc, #232]	; (8004054 <SyncBlockTable::AssignSyncBlockSlow#4792+0x14c>)
                {
                    if(m_clusters != null)
 8003f6c:	483a      	ldr	r0, [pc, #232]	; (8004058 <SyncBlockTable::AssignSyncBlockSlow#4792+0x150>)
 8003f6e:	4479      	add	r1, pc
 8003f70:	4401      	add	r1, r0
 8003f72:	68c9      	ldr	r1, [r1, #12]
 8003f74:	b1f1      	cbz	r1, 8003fb4 <SyncBlockTable::AssignSyncBlockSlow#4792+0xac>
 8003f76:	4939      	ldr	r1, [pc, #228]	; (800405c <SyncBlockTable::AssignSyncBlockSlow#4792+0x154>)
 8003f78:	f04f 37ff 	mov.w	r7, #4294967295
 8003f7c:	4479      	add	r1, pc
                    {
                        foreach(var blocks in m_clusters)
 8003f7e:	4408      	add	r0, r1
 8003f80:	2100      	movs	r1, #0
 8003f82:	68c0      	ldr	r0, [r0, #12]
 8003f84:	e000      	b.n	8003f88 <SyncBlockTable::AssignSyncBlockSlow#4792+0x80>

                            if(idx >= 0)
                            {
                                break;
                            }
                        }
 8003f86:	3101      	adds	r1, #1
 8003f88:	6882      	ldr	r2, [r0, #8]

                if(oh.IsImmutable)
                {
                    if(m_clusters != null)
                    {
                        foreach(var blocks in m_clusters)
 8003f8a:	4291      	cmp	r1, r2
 8003f8c:	da14      	bge.n	8003fb8 <SyncBlockTable::AssignSyncBlockSlow#4792+0xb0>
 8003f8e:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8003f92:	2300      	movs	r3, #0
 8003f94:	68d2      	ldr	r2, [r2, #12]
                        {
                            for(int pos = 0; pos < BlocksInACluster; pos++)
 8003f96:	320c      	adds	r2, #12
 8003f98:	e000      	b.n	8003f9c <SyncBlockTable::AssignSyncBlockSlow#4792+0x94>
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	2b1f      	cmp	r3, #31
 8003f9e:	dc05      	bgt.n	8003fac <SyncBlockTable::AssignSyncBlockSlow#4792+0xa4>
                            {
                                var sb = blocks[pos];
 8003fa0:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8003fa4:	68b5      	ldr	r5, [r6, #8]

                                if(sb.AssociatedObject == obj)
 8003fa6:	42a5      	cmp	r5, r4
 8003fa8:	d1f7      	bne.n	8003f9a <SyncBlockTable::AssignSyncBlockSlow#4792+0x92>
 8003faa:	6937      	ldr	r7, [r6, #16]
                                    idx = sb.Index;
                                    break;
                                }
                            }

                            if(idx >= 0)
 8003fac:	f1b7 3fff 	cmp.w	r7, #4294967295
 8003fb0:	dde9      	ble.n	8003f86 <SyncBlockTable::AssignSyncBlockSlow#4792+0x7e>
 8003fb2:	e001      	b.n	8003fb8 <SyncBlockTable::AssignSyncBlockSlow#4792+0xb0>
 8003fb4:	f04f 37ff 	mov.w	r7, #4294967295
                            }
                        }
                    }
                }

                if(idx < 0)
 8003fb8:	2f00      	cmp	r7, #0
 8003fba:	da13      	bge.n	8003fe4 <SyncBlockTable::AssignSyncBlockSlow#4792+0xdc>
 8003fbc:	e001      	b.n	8003fc2 <SyncBlockTable::AssignSyncBlockSlow#4792+0xba>

                            idx = sb.Index;
                            break;
                        }

                        ExpandClusters();
 8003fbe:	f000 f8d7 	bl	8004170 <SyncBlockTable::ExpandClusters#4796>

                if(idx < 0)
                {
                    while(true)
                    {
                        var sb = SyncBlock.ExtractFromFreeList();
 8003fc2:	f000 f8b1 	bl	8004128 <SyncBlock::ExtractFromFreeList#4810>
 8003fc6:	4605      	mov	r5, r0
                        if(sb != null)
 8003fc8:	2d00      	cmp	r5, #0
 8003fca:	d0f8      	beq.n	8003fbe <SyncBlockTable::AssignSyncBlockSlow#4792+0xb6>
 8003fcc:	4824      	ldr	r0, [pc, #144]	; (8004060 <SyncBlockTable::AssignSyncBlockSlow#4792+0x158>)
                        {
                            sb.Prepare( obj, m_uniqueHashCode++ );
 8003fce:	4922      	ldr	r1, [pc, #136]	; (8004058 <SyncBlockTable::AssignSyncBlockSlow#4792+0x150>)
 8003fd0:	4478      	add	r0, pc
 8003fd2:	4408      	add	r0, r1
 8003fd4:	6942      	ldr	r2, [r0, #20]
 8003fd6:	1c51      	adds	r1, r2, #1
 8003fd8:	6141      	str	r1, [r0, #20]
 8003fda:	4628      	mov	r0, r5
 8003fdc:	4621      	mov	r1, r4
 8003fde:	f000 f919 	bl	8004214 <SyncBlock::Prepare#4808>
 8003fe2:	692f      	ldr	r7, [r5, #16]
 8003fe4:	6820      	ldr	r0, [r4, #0]
 8003fe6:	2600      	movs	r6, #0
 8003fe8:	f400 7040 	and.w	r0, r0, #768	; 0x300

                        ExpandClusters();
                    }
                }

                switch(oh.ExtensionKind)
 8003fec:	ebb6 2f10 	cmp.w	r6, r0, lsr #8
 8003ff0:	d007      	beq.n	8004002 <SyncBlockTable::AssignSyncBlockSlow#4792+0xfa>
 8003ff2:	0a00      	lsrs	r0, r0, #8
 8003ff4:	2801      	cmp	r0, #1
 8003ff6:	d123      	bne.n	8004040 <SyncBlockTable::AssignSyncBlockSlow#4792+0x138>
 8003ff8:	6820      	ldr	r0, [r4, #0]
 8003ffa:	0a81      	lsrs	r1, r0, #10

                    case ObjectHeader.ExtensionKinds.HashCode:
                        //
                        // Copy hash code from header.
                        //
                        SetHashCode( idx, oh.Payload );
 8003ffc:	4638      	mov	r0, r7
 8003ffe:	f000 f87d 	bl	80040fc <SyncBlockTable::SetHashCode#4794>
 8004002:	7820      	ldrb	r0, [r4, #0]
 8004004:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
 8004008:	2804      	cmp	r0, #4
 800400a:	bf08      	it	eq
 800400c:	2601      	moveq	r6, #1
 800400e:	b926      	cbnz	r6, 800401a <SyncBlockTable::AssignSyncBlockSlow#4792+0x112>
                        break;
                }

                if(oh.IsImmutable == false)
                {
                    oh.UpdateExtension( ObjectHeader.ExtensionKinds.SyncBlock, idx );
 8004010:	4620      	mov	r0, r4
 8004012:	2102      	movs	r1, #2
 8004014:	463a      	mov	r2, r7
 8004016:	f7fe fc04 	bl	8002822 <ObjectHeader::UpdateExtension#3298>
                }

                return idx;
 800401a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800401e:	f7ff ff4b 	bl	8003eb8 <YieldLock::Release#5266>
 8004022:	9801      	ldr	r0, [sp, #4]
 8004024:	b148      	cbz	r0, 800403a <SyncBlockTable::AssignSyncBlockSlow#4792+0x132>
 8004026:	9801      	ldr	r0, [sp, #4]
 8004028:	f7fe f834 	bl	8002094 <Thread::get_Priority#4211>
 800402c:	9902      	ldr	r1, [sp, #8]
 800402e:	4288      	cmp	r0, r1
 8004030:	d003      	beq.n	800403a <SyncBlockTable::AssignSyncBlockSlow#4792+0x132>
 8004032:	9801      	ldr	r0, [sp, #4]
 8004034:	9902      	ldr	r1, [sp, #8]
 8004036:	f7fe f82f 	bl	8002098 <Thread::set_Priority#4212>
 800403a:	4638      	mov	r0, r7
 800403c:	b003      	add	sp, #12
 800403e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004040:	2802      	cmp	r0, #2

                    default:
                        //
                        // Not implemented yet, so it has to be a corruption.
                        //
                        BugCheck.Raise( BugCheck.StopCode.SyncBlockCorruption );
 8004042:	f04f 0007 	mov.w	r0, #7
 8004046:	f7fc f94b 	bl	80002e0 <BugCheck::Raise#4938>
 800404a:	46c0      	nop			; (mov r8, r8)
 800404c:	17ffd88c 	.word	0x17ffd88c
 8004050:	fffffe3c 	.word	0xfffffe3c
 8004054:	17ffd842 	.word	0x17ffd842
 8004058:	ffffeb3c 	.word	0xffffeb3c
 800405c:	17ffd834 	.word	0x17ffd834
 8004060:	17ffd7e0 	.word	0x17ffd7e0

08004064 <SyncBlockTable::GetHashCode#4793>:
        }

        //--//

        public int GetHashCode( int idx )
        {
 8004064:	4907      	ldr	r1, [pc, #28]	; (8004084 <SyncBlockTable::GetHashCode#4793+0x20>)
            int clusterIndex = idx / BlocksInACluster;
            int blockIndex   = idx % BlocksInACluster;

            return m_clusters[clusterIndex][blockIndex].HashCode;
 8004066:	4a08      	ldr	r2, [pc, #32]	; (8004088 <SyncBlockTable::GetHashCode#4793+0x24>)
 8004068:	4479      	add	r1, pc
 800406a:	4411      	add	r1, r2

        //--//

        public int GetHashCode( int idx )
        {
            int clusterIndex = idx / BlocksInACluster;
 800406c:	1142      	asrs	r2, r0, #5
            int blockIndex   = idx % BlocksInACluster;
 800406e:	f000 001f 	and.w	r0, r0, #31

            return m_clusters[clusterIndex][blockIndex].HashCode;
 8004072:	68c9      	ldr	r1, [r1, #12]
 8004074:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004078:	68c9      	ldr	r1, [r1, #12]
 800407a:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 800407e:	68c0      	ldr	r0, [r0, #12]
 8004080:	6940      	ldr	r0, [r0, #20]
 8004082:	4770      	bx	lr
 8004084:	17ffd748 	.word	0x17ffd748
 8004088:	ffffeb3c 	.word	0xffffeb3c

0800408c <GC::KeepAlive#3959>:
 800408c:	4770      	bx	lr

0800408e <SyncBlockTable::GetLock#4790>:

            return hashCode;
        }

        public static Synchronization.CriticalSection GetLock( object target )
        {
 800408e:	b510      	push	{r4, lr}
 8004090:	2800      	cmp	r0, #0
 8004092:	4601      	mov	r1, r0
 8004094:	bf18      	it	ne
 8004096:	2101      	movne	r1, #1
 8004098:	b1b9      	cbz	r1, 80040ca <SyncBlockTable::GetLock#4790+0x3c>
 800409a:	2800      	cmp	r0, #0
 800409c:	4601      	mov	r1, r0
 800409e:	bf18      	it	ne
 80040a0:	2101      	movne	r1, #1
 80040a2:	b191      	cbz	r1, 80040ca <SyncBlockTable::GetLock#4790+0x3c>
        [Inline]
        private static int AssignSyncBlock( object obj )
        {
            BugCheck.Assert(null != obj, BugCheck.StopCode.SyncBlockCorruption);

            ObjectHeader oh = ObjectHeader.Unpack( obj );
 80040a4:	6801      	ldr	r1, [r0, #0]
 80040a6:	2202      	movs	r2, #2
 80040a8:	f401 7140 	and.w	r1, r1, #768	; 0x300

            if(oh.ExtensionKind == ObjectHeader.ExtensionKinds.SyncBlock)
 80040ac:	ebb2 2f11 	cmp.w	r2, r1, lsr #8
 80040b0:	d102      	bne.n	80040b8 <SyncBlockTable::GetLock#4790+0x2a>
 80040b2:	6800      	ldr	r0, [r0, #0]
 80040b4:	0a80      	lsrs	r0, r0, #10
 80040b6:	e001      	b.n	80040bc <SyncBlockTable::GetLock#4790+0x2e>
            {
                return oh.Payload;
            }

            return Instance.AssignSyncBlockSlow( obj );
 80040b8:	f7ff ff26 	bl	8003f08 <SyncBlockTable::AssignSyncBlockSlow#4792>
        {
            BugCheck.Assert(null != target, BugCheck.StopCode.SyncBlockCorruption );

            int idx = AssignSyncBlock( target );

            Synchronization.CriticalSection res = Instance.GetLock( idx );
 80040bc:	f000 f808 	bl	80040d0 <SyncBlockTable::GetLock#4795>
 80040c0:	4604      	mov	r4, r0

            GC.KeepAlive( target );
 80040c2:	f7ff ffe3 	bl	800408c <GC::KeepAlive#3959>
 80040c6:	4620      	mov	r0, r4
 80040c8:	bd10      	pop	{r4, pc}
 80040ca:	2007      	movs	r0, #7
 80040cc:	f7fc f908 	bl	80002e0 <BugCheck::Raise#4938>

080040d0 <SyncBlockTable::GetLock#4795>:

            m_clusters[clusterIndex][blockIndex].HashCode = hashCode;
        }

        public Synchronization.CriticalSection GetLock( int idx )
        {
 80040d0:	b580      	push	{r7, lr}
 80040d2:	4908      	ldr	r1, [pc, #32]	; (80040f4 <SyncBlockTable::GetLock#4795+0x24>)
            int clusterIndex = idx / BlocksInACluster;
            int blockIndex   = idx % BlocksInACluster;

            return m_clusters[clusterIndex][blockIndex].Lock;
 80040d4:	4a08      	ldr	r2, [pc, #32]	; (80040f8 <SyncBlockTable::GetLock#4795+0x28>)
 80040d6:	4479      	add	r1, pc
 80040d8:	4411      	add	r1, r2
            m_clusters[clusterIndex][blockIndex].HashCode = hashCode;
        }

        public Synchronization.CriticalSection GetLock( int idx )
        {
            int clusterIndex = idx / BlocksInACluster;
 80040da:	1142      	asrs	r2, r0, #5
            int blockIndex   = idx % BlocksInACluster;
 80040dc:	f000 001f 	and.w	r0, r0, #31

            return m_clusters[clusterIndex][blockIndex].Lock;
 80040e0:	68c9      	ldr	r1, [r1, #12]
 80040e2:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80040e6:	68c9      	ldr	r1, [r1, #12]
 80040e8:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 80040ec:	68c0      	ldr	r0, [r0, #12]
 80040ee:	f000 f896 	bl	800421e <SyncBlock::get_Lock#4811>
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	17ffd6da 	.word	0x17ffd6da
 80040f8:	ffffeb3c 	.word	0xffffeb3c

080040fc <SyncBlockTable::SetHashCode#4794>:
            return m_clusters[clusterIndex][blockIndex].HashCode;
        }

        public void SetHashCode( int idx      ,
                                 int hashCode )
        {
 80040fc:	b580      	push	{r7, lr}
 80040fe:	4a08      	ldr	r2, [pc, #32]	; (8004120 <SyncBlockTable::SetHashCode#4794+0x24>)
            int clusterIndex = idx / BlocksInACluster;
            int blockIndex   = idx % BlocksInACluster;

            m_clusters[clusterIndex][blockIndex].HashCode = hashCode;
 8004100:	4b08      	ldr	r3, [pc, #32]	; (8004124 <SyncBlockTable::SetHashCode#4794+0x28>)
 8004102:	447a      	add	r2, pc
 8004104:	441a      	add	r2, r3
        }

        public void SetHashCode( int idx      ,
                                 int hashCode )
        {
            int clusterIndex = idx / BlocksInACluster;
 8004106:	1143      	asrs	r3, r0, #5
            int blockIndex   = idx % BlocksInACluster;
 8004108:	f000 001f 	and.w	r0, r0, #31

            m_clusters[clusterIndex][blockIndex].HashCode = hashCode;
 800410c:	68d2      	ldr	r2, [r2, #12]
 800410e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8004112:	68d2      	ldr	r2, [r2, #12]
 8004114:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8004118:	68c0      	ldr	r0, [r0, #12]
 800411a:	f000 f87e 	bl	800421a <SyncBlock::set_HashCode#4814>
 800411e:	bd80      	pop	{r7, pc}
 8004120:	17ffd6ae 	.word	0x17ffd6ae
 8004124:	ffffeb3c 	.word	0xffffeb3c

08004128 <SyncBlock::ExtractFromFreeList#4810>:
                }
            }
        }

        internal static SyncBlock ExtractFromFreeList()
        {
 8004128:	480f      	ldr	r0, [pc, #60]	; (8004168 <SyncBlock::ExtractFromFreeList#4810+0x40>)
                if(first == null)
                {
                    return null;
                }

                var next = first.m_next;
 800412a:	4910      	ldr	r1, [pc, #64]	; (800416c <SyncBlock::ExtractFromFreeList#4810+0x44>)
 800412c:	4478      	add	r0, pc
 800412e:	4401      	add	r1, r0
 8004130:	6908      	ldr	r0, [r1, #16]

            while(true)
            {
                var first = table.m_freeList;

                if(first == null)
 8004132:	2800      	cmp	r0, #0
 8004134:	bf04      	itt	eq
 8004136:	2000      	moveq	r0, #0
 8004138:	4770      	bxeq	lr
                {
                    return null;
                }

                var next = first.m_next;
 800413a:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 800413e:	f3bf 8f5f 	dmb	sy
 8004142:	e851 2f04 	ldrex	r2, [r1, #16]
 8004146:	4282      	cmp	r2, r0
 8004148:	d103      	bne.n	8004152 <SyncBlock::ExtractFromFreeList#4810+0x2a>
 800414a:	e841 c304 	strex	r3, ip, [r1, #16]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1f7      	bne.n	8004142 <SyncBlock::ExtractFromFreeList#4810+0x1a>
 8004152:	f3bf 8f5f 	dmb	sy

                if(System.Threading.Interlocked.CompareExchange( ref table.m_freeList, next, first ) == first)
 8004156:	4282      	cmp	r2, r0
 8004158:	d1ea      	bne.n	8004130 <SyncBlock::ExtractFromFreeList#4810+0x8>
                {
                    first.m_counterUse++;
 800415a:	69c1      	ldr	r1, [r0, #28]
 800415c:	3101      	adds	r1, #1
 800415e:	61c1      	str	r1, [r0, #28]
 8004160:	2100      	movs	r1, #0
 8004162:	60c1      	str	r1, [r0, #12]
 8004164:	4770      	bx	lr
 8004166:	46c0      	nop			; (mov r8, r8)
 8004168:	17ffd684 	.word	0x17ffd684
 800416c:	ffffeb3c 	.word	0xffffeb3c

08004170 <SyncBlockTable::ExpandClusters#4796>:
        }

        //--//

        private void ExpandClusters()
        {
 8004170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004174:	b081      	sub	sp, #4
 8004176:	481f      	ldr	r0, [pc, #124]	; (80041f4 <SyncBlockTable::ExpandClusters#4796+0x84>)
            int clusterIndex = (m_clusters == null) ? 0 : m_clusters.Length;
 8004178:	491f      	ldr	r1, [pc, #124]	; (80041f8 <SyncBlockTable::ExpandClusters#4796+0x88>)
 800417a:	4478      	add	r0, pc
 800417c:	4408      	add	r0, r1
 800417e:	68c0      	ldr	r0, [r0, #12]
 8004180:	b128      	cbz	r0, 800418e <SyncBlockTable::ExpandClusters#4796+0x1e>
 8004182:	481e      	ldr	r0, [pc, #120]	; (80041fc <SyncBlockTable::ExpandClusters#4796+0x8c>)
 8004184:	4478      	add	r0, pc
 8004186:	4408      	add	r0, r1
 8004188:	68c0      	ldr	r0, [r0, #12]
 800418a:	6884      	ldr	r4, [r0, #8]
 800418c:	e000      	b.n	8004190 <SyncBlockTable::ExpandClusters#4796+0x20>
 800418e:	2400      	movs	r4, #0
 8004190:	4d1b      	ldr	r5, [pc, #108]	; (8004200 <SyncBlockTable::ExpandClusters#4796+0x90>)

            var blocks = new SyncBlock[BlocksInACluster];
 8004192:	481c      	ldr	r0, [pc, #112]	; (8004204 <SyncBlockTable::ExpandClusters#4796+0x94>)
 8004194:	2220      	movs	r2, #32
 8004196:	447d      	add	r5, pc
 8004198:	eb00 0a05 	add.w	sl, r0, r5
 800419c:	481a      	ldr	r0, [pc, #104]	; (8004208 <SyncBlockTable::ExpandClusters#4796+0x98>)
 800419e:	1941      	adds	r1, r0, r5
 80041a0:	4650      	mov	r0, sl
 80041a2:	f7fd fa07 	bl	80015b4 <DefaultTypeSystemManager::AllocateArray#5255>
 80041a6:	4680      	mov	r8, r0
            //
            int index = clusterIndex * BlocksInACluster;

            for(int i = 0; i < BlocksInACluster; i++)
            {
                blocks[i] = new SyncBlock( index++ );
 80041a8:	4819      	ldr	r0, [pc, #100]	; (8004210 <SyncBlockTable::ExpandClusters#4796+0xa0>)
            var blocks = new SyncBlock[BlocksInACluster];

            //
            // Link each block to the next one, except for the last one.
            //
            int index = clusterIndex * BlocksInACluster;
 80041aa:	0164      	lsls	r4, r4, #5
 80041ac:	f04f 0900 	mov.w	r9, #0

            for(int i = 0; i < BlocksInACluster; i++)
 80041b0:	f108 0b0c 	add.w	fp, r8, #12
            {
                blocks[i] = new SyncBlock( index++ );
 80041b4:	1946      	adds	r6, r0, r5
 80041b6:	e00d      	b.n	80041d4 <SyncBlockTable::ExpandClusters#4796+0x64>
 80041b8:	4650      	mov	r0, sl
 80041ba:	4631      	mov	r1, r6
 80041bc:	eb04 0709 	add.w	r7, r4, r9
 80041c0:	f000 f850 	bl	8004264 <DefaultTypeSystemManager::AllocateObjectWithExtensions#5254>
 80041c4:	4639      	mov	r1, r7
 80041c6:	4605      	mov	r5, r0
 80041c8:	f000 f85d 	bl	8004286 <SyncBlock::.ctor#4807>
 80041cc:	f84b 5029 	str.w	r5, [fp, r9, lsl #2]
            //
            // Link each block to the next one, except for the last one.
            //
            int index = clusterIndex * BlocksInACluster;

            for(int i = 0; i < BlocksInACluster; i++)
 80041d0:	f109 0901 	add.w	r9, r9, #1
 80041d4:	f1b9 0f1f 	cmp.w	r9, #31
 80041d8:	ddee      	ble.n	80041b8 <SyncBlockTable::ExpandClusters#4796+0x48>
 80041da:	480c      	ldr	r0, [pc, #48]	; (800420c <SyncBlockTable::ExpandClusters#4796+0x9c>)

        //--//

        private void ExpandClusters()
        {
            int clusterIndex = (m_clusters == null) ? 0 : m_clusters.Length;
 80041dc:	4906      	ldr	r1, [pc, #24]	; (80041f8 <SyncBlockTable::ExpandClusters#4796+0x88>)
 80041de:	4478      	add	r0, pc
            for(int i = 0; i < BlocksInACluster; i++)
            {
                blocks[i] = new SyncBlock( index++ );
            }

            m_clusters = ArrayUtility.AppendToArray( m_clusters, blocks );
 80041e0:	180c      	adds	r4, r1, r0
 80041e2:	4641      	mov	r1, r8
 80041e4:	68e0      	ldr	r0, [r4, #12]
 80041e6:	f000 f825 	bl	8004234 <ArrayUtility::AppendToArray#33550>
 80041ea:	60e0      	str	r0, [r4, #12]
 80041ec:	b001      	add	sp, #4
 80041ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041f2:	46c0      	nop			; (mov r8, r8)
 80041f4:	17ffd636 	.word	0x17ffd636
 80041f8:	ffffeb3c 	.word	0xffffeb3c
 80041fc:	17ffd62c 	.word	0x17ffd62c
 8004200:	17ffd61a 	.word	0x17ffd61a
 8004204:	ffffea64 	.word	0xffffea64
 8004208:	e80091dc 	.word	0xe80091dc
 800420c:	17ffd5d2 	.word	0x17ffd5d2
 8004210:	e800926c 	.word	0xe800926c

08004214 <SyncBlock::Prepare#4808>:
 8004214:	6081      	str	r1, [r0, #8]
 8004216:	6142      	str	r2, [r0, #20]
 8004218:	4770      	bx	lr

0800421a <SyncBlock::set_HashCode#4814>:
 800421a:	6141      	str	r1, [r0, #20]
 800421c:	4770      	bx	lr

0800421e <SyncBlock::get_Lock#4811>:
        //

        internal Synchronization.CriticalSection Lock
        {
            get
            {
 800421e:	b580      	push	{r7, lr}
                return TypeSystemManager.AtomicAllocator( ref m_lock );
 8004220:	f850 1f18 	ldr.w	r1, [r0, #24]!
 8004224:	2900      	cmp	r1, #0
 8004226:	bf1c      	itt	ne
 8004228:	6800      	ldrne	r0, [r0, #0]
 800422a:	bd80      	popne	{r7, pc}
 800422c:	f000 f872 	bl	8004314 <TypeSystemManager::AtomicAllocatorSlow#38451>
 8004230:	bd80      	pop	{r7, pc}
 8004232:	46c0      	nop			; (mov r8, r8)

08004234 <ArrayUtility::AppendToArray#33550>:

        //--//

        public static T[] AppendToArray<T>( T[] array   ,
                                            T   element )
        {
 8004234:	b510      	push	{r4, lr}
 8004236:	460c      	mov	r4, r1
 8004238:	b118      	cbz	r0, 8004242 <ArrayUtility::AppendToArray#33550+0xe>
            {
                return new T[] { element };
            }
            else
            {
                return AppendToNotNullArray( array, element );
 800423a:	4621      	mov	r1, r4
 800423c:	f002 ff08 	bl	8007050 <ArrayUtility::AppendToNotNullArray#38446>
 8004240:	bd10      	pop	{r4, pc}
 8004242:	4905      	ldr	r1, [pc, #20]	; (8004258 <ArrayUtility::AppendToArray#33550+0x24>)
        public static T[] AppendToArray<T>( T[] array   ,
                                            T   element )
        {
            if(array == null)
            {
                return new T[] { element };
 8004244:	4805      	ldr	r0, [pc, #20]	; (800425c <ArrayUtility::AppendToArray#33550+0x28>)
 8004246:	4a06      	ldr	r2, [pc, #24]	; (8004260 <ArrayUtility::AppendToArray#33550+0x2c>)
 8004248:	4479      	add	r1, pc
 800424a:	4408      	add	r0, r1
 800424c:	4411      	add	r1, r2
 800424e:	2201      	movs	r2, #1
 8004250:	f7fd f9b0 	bl	80015b4 <DefaultTypeSystemManager::AllocateArray#5255>
 8004254:	60c4      	str	r4, [r0, #12]
 8004256:	bd10      	pop	{r4, pc}
 8004258:	17ffd568 	.word	0x17ffd568
 800425c:	ffffea64 	.word	0xffffea64
 8004260:	e800a68c 	.word	0xe800a68c

08004264 <DefaultTypeSystemManager::AllocateObjectWithExtensions#5254>:
            return InitializeObject( ptr, vTable );
        }

        [NoInline]
        public override Object AllocateObjectWithExtensions( TS.VTable vTable )
        {
 8004264:	b570      	push	{r4, r5, r6, lr}
 8004266:	460c      	mov	r4, r1
            uint   size = ComputeObjectSize( vTable       );
 8004268:	4620      	mov	r0, r4
 800426a:	f000 fc01 	bl	8004a70 <DefaultTypeSystemManager::ComputeObjectSize#5258>
 800426e:	4605      	mov	r5, r0
 8004270:	f000 fc04 	bl	8004a7c <DefaultTypeSystemManager::AllocateInner#5260>
 8004274:	4629      	mov	r1, r5
 8004276:	4606      	mov	r6, r0
 8004278:	f012 fa6b 	bl	8016752 <__aeabi_memclr>
 800427c:	200a      	movs	r0, #10
 800427e:	e9c6 0400 	strd	r0, r4, [r6]
 8004282:	4630      	mov	r0, r6
 8004284:	bd70      	pop	{r4, r5, r6, pc}

08004286 <SyncBlock::.ctor#4807>:

        //
        // Helper Methods
        //

        internal SyncBlock( int index )
 8004286:	b580      	push	{r7, lr}
 8004288:	6101      	str	r1, [r0, #16]
        {
            m_index = index;

            AddToFreeList();
 800428a:	f000 f81f 	bl	80042cc <SyncBlock::AddToFreeList#4809>
 800428e:	bd80      	pop	{r7, pc}

08004290 <TypeSystemManager::AtomicAllocatorSlow#38449>:
        }

        [NoInline]
        private static T AtomicAllocatorSlow<T>( ref T obj ) where T : class, new()
        {
            T newObj = new T();
 8004290:	b580      	push	{r7, lr}
 8004292:	f000 fbc9 	bl	8004a28 <Activator::CreateInstance#39890>
 8004296:	4a0a      	ldr	r2, [pc, #40]	; (80042c0 <TypeSystemManager::AtomicAllocatorSlow#38449+0x30>)
 8004298:	490a      	ldr	r1, [pc, #40]	; (80042c4 <TypeSystemManager::AtomicAllocatorSlow#38449+0x34>)
 800429a:	f3bf 8f5f 	dmb	sy
 800429e:	447a      	add	r2, pc
 80042a0:	440a      	add	r2, r1
 80042a2:	e852 3f02 	ldrex	r3, [r2, #8]
 80042a6:	b91b      	cbnz	r3, 80042b0 <TypeSystemManager::AtomicAllocatorSlow#38449+0x20>
 80042a8:	e842 0302 	strex	r3, r0, [r2, #8]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1f8      	bne.n	80042a2 <TypeSystemManager::AtomicAllocatorSlow#38449+0x12>
 80042b0:	4805      	ldr	r0, [pc, #20]	; (80042c8 <TypeSystemManager::AtomicAllocatorSlow#38449+0x38>)
 80042b2:	f3bf 8f5f 	dmb	sy
 80042b6:	4478      	add	r0, pc

            System.Threading.Interlocked.CompareExchange( ref obj, newObj, default(T) );

            return obj;
 80042b8:	4408      	add	r0, r1
 80042ba:	6880      	ldr	r0, [r0, #8]
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	46c0      	nop			; (mov r8, r8)
 80042c0:	17ffd512 	.word	0x17ffd512
 80042c4:	ffffeb3c 	.word	0xffffeb3c
 80042c8:	17ffd4fa 	.word	0x17ffd4fa

080042cc <SyncBlock::AddToFreeList#4809>:
            m_associatedObject = target;
            m_hashCode         = hashCode;
        }

        internal void AddToFreeList()
        {
 80042cc:	2100      	movs	r1, #0

            m_counterFree++;

            while(true)
            {
                var first = table.m_freeList;
 80042ce:	4a10      	ldr	r2, [pc, #64]	; (8004310 <SyncBlock::AddToFreeList#4809+0x44>)
 80042d0:	6081      	str	r1, [r0, #8]
 80042d2:	6181      	str	r1, [r0, #24]
            var table = SyncBlockTable.Instance;

            m_associatedObject = null;
            m_lock             = null;

            m_counterFree++;
 80042d4:	6a01      	ldr	r1, [r0, #32]
 80042d6:	3101      	adds	r1, #1
 80042d8:	6201      	str	r1, [r0, #32]
 80042da:	490c      	ldr	r1, [pc, #48]	; (800430c <SyncBlock::AddToFreeList#4809+0x40>)
 80042dc:	4479      	add	r1, pc

            while(true)
            {
                var first = table.m_freeList;
 80042de:	4411      	add	r1, r2
 80042e0:	e004      	b.n	80042ec <SyncBlock::AddToFreeList#4809+0x20>
 80042e2:	f3bf 8f5f 	dmb	sy

                m_next = first;

                if(System.Threading.Interlocked.CompareExchange( ref table.m_freeList, this, first ) == first)
 80042e6:	4563      	cmp	r3, ip
 80042e8:	bf08      	it	eq
 80042ea:	4770      	bxeq	lr

            m_counterFree++;

            while(true)
            {
                var first = table.m_freeList;
 80042ec:	f8d1 c010 	ldr.w	ip, [r1, #16]
 80042f0:	f8c0 c00c 	str.w	ip, [r0, #12]
 80042f4:	f3bf 8f5f 	dmb	sy
 80042f8:	e851 3f04 	ldrex	r3, [r1, #16]
 80042fc:	4563      	cmp	r3, ip
 80042fe:	d1f0      	bne.n	80042e2 <SyncBlock::AddToFreeList#4809+0x16>
 8004300:	e841 0204 	strex	r2, r0, [r1, #16]
 8004304:	2a00      	cmp	r2, #0
 8004306:	d1f7      	bne.n	80042f8 <SyncBlock::AddToFreeList#4809+0x2c>
 8004308:	e7eb      	b.n	80042e2 <SyncBlock::AddToFreeList#4809+0x16>
 800430a:	46c0      	nop			; (mov r8, r8)
 800430c:	17ffd4d4 	.word	0x17ffd4d4
 8004310:	ffffeb3c 	.word	0xffffeb3c

08004314 <TypeSystemManager::AtomicAllocatorSlow#38451>:
            return obj;
        }

        [NoInline]
        private static T AtomicAllocatorSlow<T>( ref T obj ) where T : class, new()
        {
 8004314:	b510      	push	{r4, lr}
 8004316:	4604      	mov	r4, r0
            T newObj = new T();
 8004318:	f000 fb96 	bl	8004a48 <Activator::CreateInstance#39893>
 800431c:	f3bf 8f5f 	dmb	sy
 8004320:	e854 1f00 	ldrex	r1, [r4]
 8004324:	b919      	cbnz	r1, 800432e <TypeSystemManager::AtomicAllocatorSlow#38451+0x1a>
 8004326:	e844 0100 	strex	r1, r0, [r4]
 800432a:	2900      	cmp	r1, #0
 800432c:	d1f8      	bne.n	8004320 <TypeSystemManager::AtomicAllocatorSlow#38451+0xc>
 800432e:	f3bf 8f5f 	dmb	sy

            System.Threading.Interlocked.CompareExchange( ref obj, newObj, default(T) );

            return obj;
 8004332:	6820      	ldr	r0, [r4, #0]
 8004334:	bd10      	pop	{r4, pc}

08004336 <MemoryFreeBlock::Unpack#4821>:
 8004336:	300c      	adds	r0, #12
 8004338:	4770      	bx	lr

0800433a <MemoryFreeBlock::ZeroFreeMemory#4831>:
            return ToObjectHeader().ToPointer();
        }

        [TS.WellKnownMethod("DebugGC_MemoryFreeBlock_ZeroFreeMemory")]
        public void ZeroFreeMemory()
        {
 800433a:	b580      	push	{r7, lr}
            byte[] array = Pack();
            byte*  ptr   = (byte*)ArrayImpl.CastAsArray( array ).GetDataPointer();

            UIntPtr start = new UIntPtr( ptr + sizeof(MemoryFreeBlock) );
 800433c:	f850 1c04 	ldr.w	r1, [r0, #-4]
 8004340:	4401      	add	r1, r0
 8004342:	3008      	adds	r0, #8
            UIntPtr end   = new UIntPtr( ptr + array.Length );
 8004344:	1a09      	subs	r1, r1, r0
 8004346:	f012 fa04 	bl	8016752 <__aeabi_memclr>
 800434a:	bd80      	pop	{r7, pc}

0800434c <MemoryFreeBlock::DirtyFreeMemory#4833>:
            Memory.Zero( start, end );
        }

        [TS.WellKnownMethod("DebugGC_MemoryFreeBlock_DirtyFreeMemory")]
        public void DirtyFreeMemory()
        {
 800434c:	b580      	push	{r7, lr}
            byte[] array = Pack();
            byte*  ptr   = (byte*)ArrayImpl.CastAsArray( array ).GetDataPointer();

            UIntPtr start = new UIntPtr( ptr + sizeof(MemoryFreeBlock) );
 800434e:	f850 1c04 	ldr.w	r1, [r0, #-4]
 8004352:	22dd      	movs	r2, #221	; 0xdd
 8004354:	4401      	add	r1, r0
 8004356:	3008      	adds	r0, #8
            UIntPtr end   = new UIntPtr( ptr + array.Length );
 8004358:	1a09      	subs	r1, r1, r0
 800435a:	f012 fa1c 	bl	8016796 <__aeabi_memset>
 800435e:	bd80      	pop	{r7, pc}

08004360 <MemoryFreeBlock::Allocate#4835>:
            Memory.Dirty( start, end );
        }

        [TS.WellKnownMethod("DebugGC_MemoryFreeBlock_Allocate")]
        public UIntPtr Allocate( ref MemorySegment memorySegment, uint size )
        {
 8004360:	b570      	push	{r4, r5, r6, lr}
 8004362:	4603      	mov	r3, r0
        [Inline]
        public byte[] Pack()
        {
            fixed(MemoryFreeBlock* ptr = &this)
            {
                return CastAsArray( AddressMath.Decrement( new UIntPtr( ptr ), FixedSize() ) );
 8004364:	f853 0c04 	ldr.w	r0, [r3, #-4]
            uint      numElements   = (uint)array.Length;
            uint      availableSize = numElements + fixedSize;

            if(size <= availableSize)
            {
                uint left = availableSize - size;
 8004368:	f100 060c 	add.w	r6, r0, #12
            ArrayImpl array         = ArrayImpl.CastAsArray( Pack() );
            uint      fixedSize     = FixedSize();
            uint      numElements   = (uint)array.Length;
            uint      availableSize = numElements + fixedSize;

            if(size <= availableSize)
 800436c:	42b2      	cmp	r2, r6
 800436e:	d814      	bhi.n	800439a <MemoryFreeBlock::Allocate#4835+0x3a>
            {
                uint left = availableSize - size;
 8004370:	1ab6      	subs	r6, r6, r2
 8004372:	f1a3 040c 	sub.w	r4, r3, #12
                else
                {
                    //
                    // Resize the array, as a way of marking memory allocation.
                    //
                    array.SetLength( numElements );
 8004376:	1a85      	subs	r5, r0, r2
            {
                uint left = availableSize - size;

                numElements -= size;

                if(left <= MinimumSpaceRequired())
 8004378:	2e15      	cmp	r6, #21
 800437a:	d215      	bcs.n	80043a8 <MemoryFreeBlock::Allocate#4835+0x48>
                {
                    fixed(MemoryFreeBlock* ptr = &this)
                    {
                        memorySegment.RemoveFreeBlock( ptr );
 800437c:	4608      	mov	r0, r1
 800437e:	4619      	mov	r1, r3
 8004380:	f000 f81e 	bl	80043c0 <MemorySegment::RemoveFreeBlock#4871>
 8004384:	4620      	mov	r0, r4

                    ObjectHeader oh = ObjectHeader.Unpack( array );

                    if(MemoryManager.Configuration.TrashFreeMemory)
                    {
                        DirtyHeader( oh.ToPointer() );
 8004386:	2114      	movs	r1, #20
 8004388:	22dd      	movs	r2, #221	; 0xdd
 800438a:	f012 fa04 	bl	8016796 <__aeabi_memset>
 800438e:	b17e      	cbz	r6, 80043b0 <MemoryFreeBlock::Allocate#4835+0x50>
                        ZeroHeader( oh.ToPointer() );
                    }

                    if(left > 0)
                    {
                        oh.InsertPlug( left );
 8004390:	4620      	mov	r0, r4
 8004392:	4631      	mov	r1, r6
 8004394:	f7fe fa3c 	bl	8002810 <ObjectHeader::InsertPlug#3297>
 8004398:	e00a      	b.n	80043b0 <MemoryFreeBlock::Allocate#4835+0x50>
 800439a:	4807      	ldr	r0, [pc, #28]	; (80043b8 <MemoryFreeBlock::Allocate#4835+0x58>)
                }

                return new UIntPtr( (byte*)array.GetDataPointer() + numElements );
            }

            return UIntPtr.Zero;
 800439c:	4907      	ldr	r1, [pc, #28]	; (80043bc <MemoryFreeBlock::Allocate#4835+0x5c>)
 800439e:	4478      	add	r0, pc
 80043a0:	4408      	add	r0, r1
 80043a2:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 80043a6:	bd70      	pop	{r4, r5, r6, pc}
                else
                {
                    //
                    // Resize the array, as a way of marking memory allocation.
                    //
                    array.SetLength( numElements );
 80043a8:	4620      	mov	r0, r4
 80043aa:	4629      	mov	r1, r5
 80043ac:	f7fc fcc9 	bl	8000d42 <Array::SetLength#3879>
 80043b0:	1960      	adds	r0, r4, r5
                }

                return new UIntPtr( (byte*)array.GetDataPointer() + numElements );
 80043b2:	300c      	adds	r0, #12
 80043b4:	bd70      	pop	{r4, r5, r6, pc}
 80043b6:	46c0      	nop			; (mov r8, r8)
 80043b8:	17ffd412 	.word	0x17ffd412
 80043bc:	fffffe3c 	.word	0xfffffe3c

080043c0 <MemorySegment::RemoveFreeBlock#4871>:
        }

        [TS.WellKnownMethod("DebugGC_MemorySegment_RemoveFreeBlock")]
        public void RemoveFreeBlock( MemoryFreeBlock* ptr )
        {
            MemoryFreeBlock* ptrNext = ptr->Next;
 80043c0:	e9d1 3c00 	ldrd	r3, ip, [r1]
            MemoryFreeBlock* ptrPrev = ptr->Previous;

            if(ptrNext != null               ) ptrNext->Previous   = ptrPrev;
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	bf18      	it	ne
 80043c8:	f8c3 c004 	strne.w	ip, [r3, #4]
            if(ptrPrev != null               ) ptrPrev->Next       = ptrNext;
 80043cc:	f1bc 0f00 	cmp.w	ip, #0
 80043d0:	bf18      	it	ne
 80043d2:	f8cc 3000 	strne.w	r3, [ip]
            if(ptr     == this.FirstFreeBlock) this.FirstFreeBlock = ptrNext;
 80043d6:	6942      	ldr	r2, [r0, #20]
 80043d8:	4291      	cmp	r1, r2
 80043da:	bf08      	it	eq
 80043dc:	6143      	streq	r3, [r0, #20]
            if(ptr     == this.LastFreeBlock ) this.LastFreeBlock  = ptrPrev;
 80043de:	6982      	ldr	r2, [r0, #24]
 80043e0:	4291      	cmp	r1, r2
 80043e2:	bf08      	it	eq
 80043e4:	f8c0 c018 	streq.w	ip, [r0, #24]
 80043e8:	4770      	bx	lr
 80043ea:	46c0      	nop			; (mov r8, r8)

080043ec <MemoryFreeBlock::InitializeFromRawMemory#4842>:

        //--//

        [TS.WellKnownMethod("DebugGC_MemoryFreeBlock_InitializeFromRawMemory")]
        public static MemoryFreeBlock* InitializeFromRawMemory( UIntPtr baseAddress, uint sizeInBytes )
        {
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	4a09      	ldr	r2, [pc, #36]	; (8004418 <MemoryFreeBlock::InitializeFromRawMemory#4842+0x2c>)
 80043f2:	4b0a      	ldr	r3, [pc, #40]	; (800441c <MemoryFreeBlock::InitializeFromRawMemory#4842+0x30>)
            TS.VTable vTable        = TS.VTable.GetFromType( typeof(byte[]) );
            uint      numOfElements = sizeInBytes - FixedSize();
 80043f4:	390c      	subs	r1, #12
 80043f6:	447a      	add	r2, pc
 80043f8:	441a      	add	r2, r3
 80043fa:	2308      	movs	r3, #8
 80043fc:	9201      	str	r2, [sp, #4]
 80043fe:	e9c0 3200 	strd	r3, r2, [r0]
 8004402:	6081      	str	r1, [r0, #8]

            byte[] externalRepresentation = (byte[])TypeSystemManager.Instance.InitializeArray( baseAddress, vTable, numOfElements );
 8004404:	4611      	mov	r1, r2
 8004406:	f7ff f8b5 	bl	8003574 <TypeSystemManager::CastToType#5241>
 800440a:	2100      	movs	r1, #0
 800440c:	6001      	str	r1, [r0, #0]

            ObjectHeader oh = ObjectHeader.Unpack( externalRepresentation );

            oh.MultiUseWord = (int)(ObjectHeader.GarbageCollectorFlags.FreeBlock | ObjectHeader.GarbageCollectorFlags.Unmarked);

            return Unpack( externalRepresentation );
 800440e:	f7ff ff92 	bl	8004336 <MemoryFreeBlock::Unpack#4821>
 8004412:	b002      	add	sp, #8
 8004414:	bd80      	pop	{r7, pc}
 8004416:	46c0      	nop			; (mov r8, r8)
 8004418:	17ffd3ba 	.word	0x17ffd3ba
 800441c:	e800929c 	.word	0xe800929c

08004420 <MemorySegment::Initialize#4859>:
        // Helper Methods
        //

        [TS.WellKnownMethod("DebugGC_MemorySegment_Initialize")]
        public void Initialize()
        {
 8004420:	b510      	push	{r4, lr}
 8004422:	4604      	mov	r4, r0
            fixed(MemorySegment* seg = &this)
            {
                byte* firstBlockPtr =        (byte*)&seg[1];
                uint  size          = (uint)((byte*) seg->End.ToPointer() - firstBlockPtr);
 8004424:	68e1      	ldr	r1, [r4, #12]
        [TS.WellKnownMethod("DebugGC_MemorySegment_Initialize")]
        public void Initialize()
        {
            fixed(MemorySegment* seg = &this)
            {
                byte* firstBlockPtr =        (byte*)&seg[1];
 8004426:	f104 001c 	add.w	r0, r4, #28
                uint  size          = (uint)((byte*) seg->End.ToPointer() - firstBlockPtr);
 800442a:	1a09      	subs	r1, r1, r0

                MemoryFreeBlock* firstBlock = MemoryFreeBlock.InitializeFromRawMemory( new UIntPtr( firstBlockPtr ), size );
 800442c:	f7ff ffde 	bl	80043ec <MemoryFreeBlock::InitializeFromRawMemory#4842>
 8004430:	2100      	movs	r1, #0
 8004432:	e9c4 0005 	strd	r0, r0, [r4, #20]
 8004436:	e9c0 1100 	strd	r1, r1, [r0]
 800443a:	bd10      	pop	{r4, pc}

0800443c <MemorySegment::ZeroFreeMemory#4861>:
                firstBlock->Previous = null;
            }
        }

        public void ZeroFreeMemory()
        {
 800443c:	b510      	push	{r4, lr}
            for(MemoryFreeBlock* ptr = this.FirstFreeBlock; ptr != null; ptr = ptr->Next)
 800443e:	6944      	ldr	r4, [r0, #20]
 8004440:	2c00      	cmp	r4, #0
 8004442:	bf08      	it	eq
 8004444:	bd10      	popeq	{r4, pc}
            {
                ptr->ZeroFreeMemory();
 8004446:	4620      	mov	r0, r4
 8004448:	f7ff ff77 	bl	800433a <MemoryFreeBlock::ZeroFreeMemory#4831>
            }
        }

        public void ZeroFreeMemory()
        {
            for(MemoryFreeBlock* ptr = this.FirstFreeBlock; ptr != null; ptr = ptr->Next)
 800444c:	6824      	ldr	r4, [r4, #0]
 800444e:	e7f7      	b.n	8004440 <MemorySegment::ZeroFreeMemory#4861+0x4>

08004450 <MemorySegment::DirtyFreeMemory#4863>:
                ptr->ZeroFreeMemory();
            }
        }

        public void DirtyFreeMemory()
        {
 8004450:	b510      	push	{r4, lr}
            for(MemoryFreeBlock* ptr = this.FirstFreeBlock; ptr != null; ptr = ptr->Next)
 8004452:	6944      	ldr	r4, [r0, #20]
 8004454:	2c00      	cmp	r4, #0
 8004456:	bf08      	it	eq
 8004458:	bd10      	popeq	{r4, pc}
            {
                ptr->DirtyFreeMemory();
 800445a:	4620      	mov	r0, r4
 800445c:	f7ff ff76 	bl	800434c <MemoryFreeBlock::DirtyFreeMemory#4833>
            }
        }

        public void DirtyFreeMemory()
        {
            for(MemoryFreeBlock* ptr = this.FirstFreeBlock; ptr != null; ptr = ptr->Next)
 8004460:	6824      	ldr	r4, [r4, #0]
 8004462:	e7f7      	b.n	8004454 <MemorySegment::DirtyFreeMemory#4863+0x4>

08004464 <MemorySegment::Allocate#4865>:
                ptr->DirtyFreeMemory();
            }
        }

        public UIntPtr Allocate( uint size )
        {
 8004464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004468:	4605      	mov	r5, r0
 800446a:	4811      	ldr	r0, [pc, #68]	; (80044b0 <MemorySegment::Allocate#4865+0x4c>)
            for(MemoryFreeBlock* ptr = this.FirstFreeBlock; ptr != null; ptr = ptr->Next)
            {
                UIntPtr res = ptr->Allocate( ref this, size );

                if(res != UIntPtr.Zero)
 800446c:	f8df 803c 	ldr.w	r8, [pc, #60]	; 80044ac <MemorySegment::Allocate#4865+0x48>
 8004470:	460c      	mov	r4, r1
            }
        }

        public UIntPtr Allocate( uint size )
        {
            for(MemoryFreeBlock* ptr = this.FirstFreeBlock; ptr != null; ptr = ptr->Next)
 8004472:	696e      	ldr	r6, [r5, #20]
 8004474:	4478      	add	r0, pc
            {
                UIntPtr res = ptr->Allocate( ref this, size );

                if(res != UIntPtr.Zero)
 8004476:	eb08 0700 	add.w	r7, r8, r0
 800447a:	e00b      	b.n	8004494 <MemorySegment::Allocate#4865+0x30>

        public UIntPtr Allocate( uint size )
        {
            for(MemoryFreeBlock* ptr = this.FirstFreeBlock; ptr != null; ptr = ptr->Next)
            {
                UIntPtr res = ptr->Allocate( ref this, size );
 800447c:	4630      	mov	r0, r6
 800447e:	4629      	mov	r1, r5
 8004480:	4622      	mov	r2, r4
 8004482:	f7ff ff6d 	bl	8004360 <MemoryFreeBlock::Allocate#4835>

                if(res != UIntPtr.Zero)
 8004486:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 800448a:	4288      	cmp	r0, r1
 800448c:	bf18      	it	ne
 800448e:	e8bd 81f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, pc}
            }
        }

        public UIntPtr Allocate( uint size )
        {
            for(MemoryFreeBlock* ptr = this.FirstFreeBlock; ptr != null; ptr = ptr->Next)
 8004492:	6836      	ldr	r6, [r6, #0]
 8004494:	2e00      	cmp	r6, #0
 8004496:	d1f1      	bne.n	800447c <MemorySegment::Allocate#4865+0x18>
 8004498:	4803      	ldr	r0, [pc, #12]	; (80044a8 <MemorySegment::Allocate#4865+0x44>)
 800449a:	4478      	add	r0, pc

                    return res;
                }
            }

            return UIntPtr.Zero;
 800449c:	4440      	add	r0, r8
 800449e:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 80044a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044a6:	46c0      	nop			; (mov r8, r8)
 80044a8:	17ffd316 	.word	0x17ffd316
 80044ac:	fffffe3c 	.word	0xfffffe3c
 80044b0:	17ffd33c 	.word	0x17ffd33c

080044b4 <LinearMemoryManager::InitializeMemoryManager#4928>:
        //
        // Helper Methods
        //

        public override void InitializeMemoryManager()
        {
 80044b4:	b580      	push	{r7, lr}
            base.InitializeMemoryManager();
 80044b6:	f000 f801 	bl	80044bc <MemoryManager::InitializeMemoryManager#5186>
 80044ba:	bd80      	pop	{r7, pc}

080044bc <MemoryManager::InitializeMemoryManager#5186>:
 80044bc:	2100      	movs	r1, #0
 80044be:	e9c0 1102 	strd	r1, r1, [r0, #8]
 80044c2:	6101      	str	r1, [r0, #16]
 80044c4:	4770      	bx	lr

080044c6 <MemoryManager::AddLinearSection#5195>:
        //--//

        protected void AddLinearSection( UIntPtr          beginning  ,
                                         UIntPtr          end        ,
                                         MemoryAttributes attributes )
        {
 80044c6:	b580      	push	{r7, lr}
 80044c8:	1a53      	subs	r3, r2, r1
            uint size = AddressMath.RangeSize( beginning, end );

            if(size >= MemorySegment.MinimumSpaceRequired())
 80044ca:	2b30      	cmp	r3, #48	; 0x30
 80044cc:	bf38      	it	cc
 80044ce:	bd80      	popcc	{r7, pc}
 80044d0:	2300      	movs	r3, #0
 80044d2:	600b      	str	r3, [r1, #0]
            {
                MemorySegment* seg = (MemorySegment*)beginning.ToPointer();

                seg->Next       = null;
                seg->Previous   = m_heapTail;
 80044d4:	68c3      	ldr	r3, [r0, #12]
 80044d6:	e9c1 3101 	strd	r3, r1, [r1, #4]
 80044da:	60ca      	str	r2, [r1, #12]
 80044dc:	f44f 6228 	mov.w	r2, #2688	; 0xa80
 80044e0:	610a      	str	r2, [r1, #16]
                seg->Beginning  = beginning;
                seg->End        = end;
                seg->Attributes = attributes;

                if(m_heapHead == null)
 80044e2:	6882      	ldr	r2, [r0, #8]
 80044e4:	2a00      	cmp	r2, #0
 80044e6:	bf08      	it	eq
 80044e8:	6081      	streq	r1, [r0, #8]
                {
                    m_heapHead = seg;
                }

                if(m_heapTail != null)
 80044ea:	68c2      	ldr	r2, [r0, #12]
 80044ec:	2a00      	cmp	r2, #0
                {
                    m_heapTail->Next = seg;
 80044ee:	bf1c      	itt	ne
 80044f0:	68c2      	ldrne	r2, [r0, #12]
 80044f2:	6011      	strne	r1, [r2, #0]
 80044f4:	60c1      	str	r1, [r0, #12]
                }

                m_heapTail = seg;

                seg->Initialize();
 80044f6:	4608      	mov	r0, r1
 80044f8:	f7ff ff92 	bl	8004420 <MemorySegment::Initialize#4859>
 80044fc:	bd80      	pop	{r7, pc}

080044fe <MemoryManager::ZeroFreeMemory#5188>:
        public virtual void InitializationComplete()
        {
        }

        public virtual void ZeroFreeMemory()
        {
 80044fe:	b510      	push	{r4, lr}
            MemorySegment* ptr = m_heapHead;
 8004500:	6884      	ldr	r4, [r0, #8]

            while(ptr != null)
 8004502:	2c00      	cmp	r4, #0
 8004504:	bf08      	it	eq
 8004506:	bd10      	popeq	{r4, pc}
            {
                ptr->ZeroFreeMemory();
 8004508:	4620      	mov	r0, r4
 800450a:	f7ff ff97 	bl	800443c <MemorySegment::ZeroFreeMemory#4861>

                ptr = ptr->Next;
 800450e:	6824      	ldr	r4, [r4, #0]
 8004510:	e7f7      	b.n	8004502 <MemoryManager::ZeroFreeMemory#5188+0x4>

08004512 <MemoryManager::DirtyFreeMemory#5189>:
            }
        }

        public virtual void DirtyFreeMemory()
        {
 8004512:	b510      	push	{r4, lr}
            MemorySegment* ptr = m_heapHead;
 8004514:	6884      	ldr	r4, [r0, #8]

            while(ptr != null)
 8004516:	2c00      	cmp	r4, #0
 8004518:	bf08      	it	eq
 800451a:	bd10      	popeq	{r4, pc}
            {
                ptr->DirtyFreeMemory();
 800451c:	4620      	mov	r0, r4
 800451e:	f7ff ff97 	bl	8004450 <MemorySegment::DirtyFreeMemory#4863>

                ptr = ptr->Next;
 8004522:	6824      	ldr	r4, [r4, #0]
 8004524:	e7f7      	b.n	8004516 <MemoryManager::DirtyFreeMemory#5189+0x4>
 8004526:	46c0      	nop			; (mov r8, r8)

08004528 <LinearMemoryManager::Allocate#4930>:
        }

        //--//

        public override unsafe UIntPtr Allocate( uint size )
        {
 8004528:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800452c:	b083      	sub	sp, #12
 800452e:	4681      	mov	r9, r0
 8004530:	2000      	movs	r0, #0
 8004532:	4c2d      	ldr	r4, [pc, #180]	; (80045e8 <LinearMemoryManager::Allocate#4930+0xc0>)
            using(SmartHandles.YieldLockHolder hnd = new SmartHandles.YieldLockHolder( MemoryManager.Lock ))
 8004534:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 80045ec <LinearMemoryManager::Allocate#4930+0xc4>
 8004538:	460e      	mov	r6, r1
 800453a:	9002      	str	r0, [sp, #8]
 800453c:	e9cd 0000 	strd	r0, r0, [sp]
 8004540:	4828      	ldr	r0, [pc, #160]	; (80045e4 <LinearMemoryManager::Allocate#4930+0xbc>)
 8004542:	4478      	add	r0, pc
 8004544:	1821      	adds	r1, r4, r0
 8004546:	4440      	add	r0, r8
 8004548:	f8d0 00bc 	ldr.w	r0, [r0, #188]	; 0xbc
 800454c:	9100      	str	r1, [sp, #0]
 800454e:	9001      	str	r0, [sp, #4]
 8004550:	b118      	cbz	r0, 800455a <LinearMemoryManager::Allocate#4930+0x32>
 8004552:	9801      	ldr	r0, [sp, #4]
 8004554:	f7fd fd9e 	bl	8002094 <Thread::get_Priority#4211>
 8004558:	e000      	b.n	800455c <LinearMemoryManager::Allocate#4930+0x34>
 800455a:	2002      	movs	r0, #2
 800455c:	9002      	str	r0, [sp, #8]
 800455e:	4824      	ldr	r0, [pc, #144]	; (80045f0 <LinearMemoryManager::Allocate#4930+0xc8>)
 8004560:	9901      	ldr	r1, [sp, #4]
 8004562:	4478      	add	r0, pc
 8004564:	4420      	add	r0, r4
 8004566:	f7ff fc71 	bl	8003e4c <YieldLock::Acquire#5265>
            {
                MemorySegment* ptr = m_active;

                if(ptr != null)
                {
                    UIntPtr res = ptr->Allocate( size );
 800456a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800456e:	b150      	cbz	r0, 8004586 <LinearMemoryManager::Allocate#4930+0x5e>
 8004570:	4631      	mov	r1, r6
 8004572:	f7ff ff77 	bl	8004464 <MemorySegment::Allocate#4865>
 8004576:	4604      	mov	r4, r0
 8004578:	481e      	ldr	r0, [pc, #120]	; (80045f4 <LinearMemoryManager::Allocate#4930+0xcc>)
 800457a:	4478      	add	r0, pc

                    if(res != UIntPtr.Zero)
 800457c:	4440      	add	r0, r8
 800457e:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 8004582:	4284      	cmp	r4, r0
 8004584:	d119      	bne.n	80045ba <LinearMemoryManager::Allocate#4930+0x92>
 8004586:	481d      	ldr	r0, [pc, #116]	; (80045fc <LinearMemoryManager::Allocate#4930+0xd4>)
                    {
                        return res;
                    }
                }

                ptr = m_heapHead;
 8004588:	f8d9 7008 	ldr.w	r7, [r9, #8]
 800458c:	4478      	add	r0, pc
                while(ptr != null)
                {
                    UIntPtr res = ptr->Allocate( size );

                    if(res != UIntPtr.Zero)
 800458e:	eb08 0500 	add.w	r5, r8, r0
 8004592:	e000      	b.n	8004596 <LinearMemoryManager::Allocate#4930+0x6e>
                        m_active = ptr;

                        return res;
                    }

                    ptr = ptr->Next;
 8004594:	683f      	ldr	r7, [r7, #0]
                        return res;
                    }
                }

                ptr = m_heapHead;
                while(ptr != null)
 8004596:	b15f      	cbz	r7, 80045b0 <LinearMemoryManager::Allocate#4930+0x88>
                {
                    UIntPtr res = ptr->Allocate( size );
 8004598:	4638      	mov	r0, r7
 800459a:	4631      	mov	r1, r6
 800459c:	f7ff ff62 	bl	8004464 <MemorySegment::Allocate#4865>
 80045a0:	4604      	mov	r4, r0

                    if(res != UIntPtr.Zero)
 80045a2:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 80045a6:	4284      	cmp	r4, r0
 80045a8:	d0f4      	beq.n	8004594 <LinearMemoryManager::Allocate#4930+0x6c>
 80045aa:	f8c9 7010 	str.w	r7, [r9, #16]
 80045ae:	e004      	b.n	80045ba <LinearMemoryManager::Allocate#4930+0x92>
 80045b0:	4811      	ldr	r0, [pc, #68]	; (80045f8 <LinearMemoryManager::Allocate#4930+0xd0>)
 80045b2:	4478      	add	r0, pc
                    }

                    ptr = ptr->Next;
                }
                
                return UIntPtr.Zero;
 80045b4:	4440      	add	r0, r8
 80045b6:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
 80045ba:	9800      	ldr	r0, [sp, #0]
 80045bc:	9901      	ldr	r1, [sp, #4]
 80045be:	f7ff fc7b 	bl	8003eb8 <YieldLock::Release#5266>
 80045c2:	9801      	ldr	r0, [sp, #4]
 80045c4:	b148      	cbz	r0, 80045da <LinearMemoryManager::Allocate#4930+0xb2>
 80045c6:	9801      	ldr	r0, [sp, #4]
 80045c8:	f7fd fd64 	bl	8002094 <Thread::get_Priority#4211>
 80045cc:	9902      	ldr	r1, [sp, #8]
 80045ce:	4288      	cmp	r0, r1
 80045d0:	d003      	beq.n	80045da <LinearMemoryManager::Allocate#4930+0xb2>
 80045d2:	9801      	ldr	r0, [sp, #4]
 80045d4:	9902      	ldr	r1, [sp, #8]
 80045d6:	f7fd fd5f 	bl	8002098 <Thread::set_Priority#4212>
 80045da:	4620      	mov	r0, r4
 80045dc:	b003      	add	sp, #12
 80045de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80045e2:	46c0      	nop			; (mov r8, r8)
 80045e4:	17ffd26e 	.word	0x17ffd26e
 80045e8:	ffffeb54 	.word	0xffffeb54
 80045ec:	fffffe3c 	.word	0xfffffe3c
 80045f0:	17ffd24e 	.word	0x17ffd24e
 80045f4:	17ffd236 	.word	0x17ffd236
 80045f8:	17ffd1fe 	.word	0x17ffd1fe
 80045fc:	17ffd224 	.word	0x17ffd224

08004600 <Device::ProcessBugCheck#16924>:
        {
            RT.BugCheck.Raise( RT.BugCheck.StopCode.FailedBootstrap );
        }        

        public override void ProcessBugCheck( RT.BugCheck.StopCode code )
        {
 8004600:	b580      	push	{r7, lr}
 8004602:	4804      	ldr	r0, [pc, #16]	; (8004614 <Device::ProcessBugCheck#16924+0x14>)
 8004604:	4a04      	ldr	r2, [pc, #16]	; (8004618 <Device::ProcessBugCheck#16924+0x18>)
 8004606:	4478      	add	r0, pc
 8004608:	4410      	add	r0, r2
 800460a:	6601      	str	r1, [r0, #96]	; 0x60
            m_bugCheckCode = code;

            RTOS.Utilities.Breakpoint( (uint)code ); 
 800460c:	4608      	mov	r0, r1
 800460e:	f00f fb39 	bl	8013c84 <Breakpoint>
 8004612:	bd80      	pop	{r7, pc}
 8004614:	17ffd1aa 	.word	0x17ffd1aa
 8004618:	fffffe3c 	.word	0xfffffe3c

0800461c <BugCheck::Log#4939>:
        {
            Device.Instance.ProcessBugCheck( code );
        }

        public static void Log(string format)
        {
 800461c:	b580      	push	{r7, lr}
 800461e:	4601      	mov	r1, r0
 8004620:	4803      	ldr	r0, [pc, #12]	; (8004630 <BugCheck::Log#4939+0x14>)
            Device.Instance.ProcessLog(format);
 8004622:	4a04      	ldr	r2, [pc, #16]	; (8004634 <BugCheck::Log#4939+0x18>)
 8004624:	4478      	add	r0, pc
 8004626:	4410      	add	r0, r2
 8004628:	f000 f806 	bl	8004638 <Device::ProcessLog#16925>
 800462c:	bd80      	pop	{r7, pc}
 800462e:	46c0      	nop			; (mov r8, r8)
 8004630:	17ffd18c 	.word	0x17ffd18c
 8004634:	e800739c 	.word	0xe800739c

08004638 <Device::ProcessLog#16925>:
        }

        public override unsafe void ProcessLog(string format)
        {
 8004638:	b580      	push	{r7, lr}
 800463a:	68ca      	ldr	r2, [r1, #12]
            fixed (char* pS = format)
 800463c:	2900      	cmp	r1, #0
 800463e:	bf18      	it	ne
 8004640:	3110      	addne	r1, #16
            {
                uint length = (uint)format.Length;
                RTOS.Utilities.DebugLog0(pS, length);
 8004642:	4608      	mov	r0, r1
 8004644:	4611      	mov	r1, r2
 8004646:	f00f fb55 	bl	8013cf4 <DebugLog0>
 800464a:	bd80      	pop	{r7, pc}

0800464c <Device::ProcessLog#16926>:
            }
        }

        public override unsafe void ProcessLog(string format, int p1)
        {
 800464c:	b580      	push	{r7, lr}
 800464e:	68cb      	ldr	r3, [r1, #12]
            fixed (char* pS = format)
 8004650:	2900      	cmp	r1, #0
 8004652:	bf18      	it	ne
 8004654:	3110      	addne	r1, #16
            {
                uint length = (uint)format.Length;
                RTOS.Utilities.DebugLog1(pS, length, p1);
 8004656:	4608      	mov	r0, r1
 8004658:	4619      	mov	r1, r3
 800465a:	f00f fb71 	bl	8013d40 <DebugLog1>
 800465e:	bd80      	pop	{r7, pc}

08004660 <SchedulerTime::.ctor#5096>:
 8004660:	e9c0 2300 	strd	r2, r3, [r0]
 8004664:	4770      	bx	lr

08004666 <SchedulerTime::op_Explicit#5116>:

        //--//

        public static explicit operator SchedulerTime ( int milliseconds )
        {
            return new SchedulerTime( ConvertFromMillisecondsToUnits( milliseconds ) );
 8004666:	b580      	push	{r7, lr}
 8004668:	b082      	sub	sp, #8
 800466a:	f000 f80c 	bl	8004686 <SchedulerTime::ConvertFromMillisecondsToUnits#16956>
 800466e:	4602      	mov	r2, r0
 8004670:	2000      	movs	r0, #0
 8004672:	460b      	mov	r3, r1
 8004674:	e9cd 0000 	strd	r0, r0, [sp]
 8004678:	4668      	mov	r0, sp
 800467a:	f7ff fff1 	bl	8004660 <SchedulerTime::.ctor#5096>
        }
 800467e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004682:	b002      	add	sp, #8
 8004684:	bd80      	pop	{r7, pc}

08004686 <SchedulerTime::ConvertFromMillisecondsToUnits#16956>:
        //
        // Helper Methods
        //

        private static ulong ConvertFromMillisecondsToUnits( int milliSeconds )
        {
 8004686:	b510      	push	{r4, lr}
            if(milliSeconds < 0)
 8004688:	2800      	cmp	r0, #0
 800468a:	bfbe      	ittt	lt
 800468c:	f04f 30ff 	movlt.w	r0, #4294967295
 8004690:	f04f 31ff 	movlt.w	r1, #4294967295
 8004694:	bd10      	poplt	{r4, pc}
                // The 1MHz timer.
                //
                //  => 1000000 / 1000 == 1000
                //

                ulong res = (uint)milliSeconds * 1000;
 8004696:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800469a:	fb00 f401 	mul.w	r4, r0, r1
                
                return GetCurrentTime() + res;
 800469e:	f000 f813 	bl	80046c8 <SchedulerTime::GetCurrentTime#16964>
 80046a2:	1900      	adds	r0, r0, r4
 80046a4:	f141 0100 	adc.w	r1, r1, #0
 80046a8:	bd10      	pop	{r4, pc}

080046aa <SchedulerTime::FromUnits#5146>:
        }

        //--//

        public static SchedulerTime FromUnits( ulong units )
        {
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b082      	sub	sp, #8
 80046ae:	4602      	mov	r2, r0
 80046b0:	2000      	movs	r0, #0
            return new SchedulerTime( units );
 80046b2:	460b      	mov	r3, r1
 80046b4:	e9cd 0000 	strd	r0, r0, [sp]
 80046b8:	4668      	mov	r0, sp
 80046ba:	f7ff ffd1 	bl	8004660 <SchedulerTime::.ctor#5096>
        }
 80046be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80046c2:	b002      	add	sp, #8
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	46c0      	nop			; (mov r8, r8)

080046c8 <SchedulerTime::GetCurrentTime#16964>:
        {
            return (long)((double)units * RatioFromUnitsToDateTimeTicks);
        }

        private static ulong GetCurrentTime()
        {
 80046c8:	b580      	push	{r7, lr}
 80046ca:	4803      	ldr	r0, [pc, #12]	; (80046d8 <SchedulerTime::GetCurrentTime#16964+0x10>)
            return Drivers.SystemTimer.Instance.CurrentTime;
 80046cc:	4903      	ldr	r1, [pc, #12]	; (80046dc <SchedulerTime::GetCurrentTime#16964+0x14>)
 80046ce:	4478      	add	r0, pc
 80046d0:	4408      	add	r0, r1
 80046d2:	f000 f805 	bl	80046e0 <SystemTimer::get_CurrentTime#17013>
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	17ffd0e2 	.word	0x17ffd0e2
 80046dc:	ffffeb0c 	.word	0xffffeb0c

080046e0 <SystemTimer::get_CurrentTime#17013>:
        /// Gets the current accumulator time
        /// </summary>
        public ulong CurrentTime
        {
            get
            {
 80046e0:	b570      	push	{r4, r5, r6, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	4604      	mov	r4, r0
 80046e6:	2500      	movs	r5, #0
 80046e8:	2001      	movs	r0, #1
 80046ea:	9501      	str	r5, [sp, #4]
 80046ec:	f00f fa0c 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
 80046f0:	9500      	str	r5, [sp, #0]
 80046f2:	e9cd 0000 	strd	r0, r0, [sp]
                using (RT.SmartHandles.InterruptState.Disable())
                {
                    // Current time is the accumulator + time since it was updated
                    return m_accumulator + TimeSinceAccumulatorUpdate( this.Counter ); 
 80046f6:	e9d4 5603 	ldrd	r5, r6, [r4, #12]
        public uint Counter
        {
            [RT.Inline]
            get
            {
                return tmp_sys_timer_read();
 80046fa:	f00f fca3 	bl	8014044 <tmp_sys_timer_read>
 80046fe:	4601      	mov	r1, r0
            get
            {
                using (RT.SmartHandles.InterruptState.Disable())
                {
                    // Current time is the accumulator + time since it was updated
                    return m_accumulator + TimeSinceAccumulatorUpdate( this.Counter ); 
 8004700:	4620      	mov	r0, r4
 8004702:	f003 fca7 	bl	8008054 <SystemTimer::TimeSinceAccumulatorUpdate#17022>
 8004706:	4604      	mov	r4, r0
 8004708:	9801      	ldr	r0, [sp, #4]
 800470a:	f00f f9fd 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
 800470e:	1928      	adds	r0, r5, r4
 8004710:	f146 0100 	adc.w	r1, r6, #0
 8004714:	b002      	add	sp, #8
 8004716:	bd70      	pop	{r4, r5, r6, pc}

08004718 <SchedulerTime::.cctor#5162>:
    {
        //
        // State
        //

        public static readonly SchedulerTime MinValue = new SchedulerTime( ulong.MinValue );
 8004718:	b5b0      	push	{r4, r5, r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	2400      	movs	r4, #0
 800471e:	a802      	add	r0, sp, #8
 8004720:	2200      	movs	r2, #0
 8004722:	2300      	movs	r3, #0
 8004724:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8004728:	f7ff ff9a 	bl	8004660 <SchedulerTime::.ctor#5096>
 800472c:	480b      	ldr	r0, [pc, #44]	; (800475c <SchedulerTime::.cctor#5162+0x44>)
 800472e:	490c      	ldr	r1, [pc, #48]	; (8004760 <SchedulerTime::.cctor#5162+0x48>)
        public static readonly SchedulerTime MaxValue = new SchedulerTime( ulong.MaxValue );
 8004730:	f04f 32ff 	mov.w	r2, #4294967295
 8004734:	f04f 33ff 	mov.w	r3, #4294967295
 8004738:	4478      	add	r0, pc
 800473a:	180d      	adds	r5, r1, r0
    {
        //
        // State
        //

        public static readonly SchedulerTime MinValue = new SchedulerTime( ulong.MinValue );
 800473c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004740:	e9c5 0121 	strd	r0, r1, [r5, #132]	; 0x84
 8004744:	4668      	mov	r0, sp
 8004746:	e9cd 4400 	strd	r4, r4, [sp]
        public static readonly SchedulerTime MaxValue = new SchedulerTime( ulong.MaxValue );
 800474a:	f7ff ff89 	bl	8004660 <SchedulerTime::.ctor#5096>
 800474e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004752:	e9c5 011f 	strd	r0, r1, [r5, #124]	; 0x7c
 8004756:	b004      	add	sp, #16
 8004758:	bdb0      	pop	{r4, r5, r7, pc}
 800475a:	46c0      	nop			; (mov r8, r8)
 800475c:	17ffd078 	.word	0x17ffd078
 8004760:	fffffe3c 	.word	0xfffffe3c

08004764 <MemoryManager::InitializationComplete#5187>:
 8004764:	4770      	bx	lr

08004766 <ARMv7ThreadManager::InitializeAfterStaticConstructors#5216>:
        //
        // Helper methods
        //

        public override void InitializeAfterStaticConstructors( uint[] systemStack )
        {
 8004766:	b580      	push	{r7, lr}
            base.InitializeAfterStaticConstructors( systemStack );
 8004768:	f7fe f8c8 	bl	80028fc <ThreadManager::InitializeAfterStaticConstructors#3323>
 800476c:	bd80      	pop	{r7, pc}

0800476e <ARMv7ThreadManager::get_InterruptThread#5219>:

        public override ThreadImpl InterruptThread
        {
            get
            {
                return m_interruptThread;
 800476e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8004770:	4770      	bx	lr

08004772 <ARMv7ThreadManager::get_FastInterruptThread#5220>:
 8004772:	b580      	push	{r7, lr}
 8004774:	2011      	movs	r0, #17
 8004776:	f7fb fdb3 	bl	80002e0 <BugCheck::Raise#4938>

0800477a <TypeSystemManager::InvokeStaticConstructors#5240>:
 800477a:	b580      	push	{r7, lr}
 800477c:	f7ff ffcc 	bl	8004718 <SchedulerTime::.cctor#5162>
 8004780:	f7ff f840 	bl	8003804 <Program::.cctor#3859>
 8004784:	f7ff fa3e 	bl	8003c04 <HardwareProvider::.cctor#4546>
 8004788:	f000 f80e 	bl	80047a8 <WaitingRecord::.cctor#5292>
 800478c:	f7ff fac4 	bl	8003d18 <Finalizer::.cctor#4562>
 8004790:	f000 f83a 	bl	8004808 <Number::.cctor#7581>
 8004794:	f000 f884 	bl	80048a0 <CultureInfo::.cctor#9870>
 8004798:	f000 f89e 	bl	80048d8 <GpioController::.cctor#16712>
 800479c:	f000 f8b2 	bl	8004904 <Processor::.cctor#16903>
 80047a0:	f7fd fae2 	bl	8001d68 <String::.cctor#2793>
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	46c0      	nop			; (mov r8, r8)

080047a8 <WaitingRecord::.cctor#5292>:
        //
        // Constructor Methods
        //

        static WaitingRecord()
        {
 80047a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047aa:	b081      	sub	sp, #4
 80047ac:	4e11      	ldr	r6, [pc, #68]	; (80047f4 <WaitingRecord::.cctor#5292+0x4c>)
            s_recycledList = new KernelList< WaitingRecord >();
 80047ae:	4812      	ldr	r0, [pc, #72]	; (80047f8 <WaitingRecord::.cctor#5292+0x50>)
 80047b0:	447e      	add	r6, pc
 80047b2:	1984      	adds	r4, r0, r6
 80047b4:	4811      	ldr	r0, [pc, #68]	; (80047fc <WaitingRecord::.cctor#5292+0x54>)
 80047b6:	1981      	adds	r1, r0, r6
 80047b8:	4620      	mov	r0, r4
 80047ba:	f7fc f8b1 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 80047be:	4605      	mov	r5, r0
 80047c0:	f7fd fd24 	bl	800220c <KernelList`1::.ctor#17983>
 80047c4:	480e      	ldr	r0, [pc, #56]	; (8004800 <WaitingRecord::.cctor#5292+0x58>)
 80047c6:	1987      	adds	r7, r0, r6

            while(s_recycledCount < RecycleLimit)
            {
                WaitingRecord wr = new WaitingRecord();
 80047c8:	480e      	ldr	r0, [pc, #56]	; (8004804 <WaitingRecord::.cctor#5292+0x5c>)
 80047ca:	f8c7 5090 	str.w	r5, [r7, #144]	; 0x90
 80047ce:	1985      	adds	r5, r0, r6

        static WaitingRecord()
        {
            s_recycledList = new KernelList< WaitingRecord >();

            while(s_recycledCount < RecycleLimit)
 80047d0:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80047d4:	281f      	cmp	r0, #31
 80047d6:	bfc4      	itt	gt
 80047d8:	b001      	addgt	sp, #4
 80047da:	bdf0      	popgt	{r4, r5, r6, r7, pc}
            {
                WaitingRecord wr = new WaitingRecord();
 80047dc:	4620      	mov	r0, r4
 80047de:	4629      	mov	r1, r5
 80047e0:	f7fc f89e 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 80047e4:	4606      	mov	r6, r0
 80047e6:	f000 fac1 	bl	8004d6c <WaitingRecord::.ctor#5293>

                wr.Recycle();
 80047ea:	4630      	mov	r0, r6
 80047ec:	f000 fae2 	bl	8004db4 <WaitingRecord::Recycle#5297>
 80047f0:	e7ee      	b.n	80047d0 <WaitingRecord::.cctor#5292+0x28>
 80047f2:	46c0      	nop			; (mov r8, r8)
 80047f4:	17ffd000 	.word	0x17ffd000
 80047f8:	ffffea64 	.word	0xffffea64
 80047fc:	e800811c 	.word	0xe800811c
 8004800:	fffffe3c 	.word	0xfffffe3c
 8004804:	e800961c 	.word	0xe800961c

08004808 <Number::.cctor#7581>:
        private const int SCALE_NAN = unchecked( (int)0x80000000 );
        private const int SCALE_INF = 0x7FFFFFFF;

        private static String[] posPercentFormats = {
            "# %", "#%", "%#"
        };
 8004808:	4817      	ldr	r0, [pc, #92]	; (8004868 <Number::.cctor#7581+0x60>)
 800480a:	4918      	ldr	r1, [pc, #96]	; (800486c <Number::.cctor#7581+0x64>)
 800480c:	4478      	add	r0, pc
 800480e:	180a      	adds	r2, r1, r0
        private const int DOUBLE_PRECISION = 15;
        private const int MIN_BUFFER_SIZE = 105;
        private const int SCALE_NAN = unchecked( (int)0x80000000 );
        private const int SCALE_INF = 0x7FFFFFFF;

        private static String[] posPercentFormats = {
 8004810:	4917      	ldr	r1, [pc, #92]	; (8004870 <Number::.cctor#7581+0x68>)
 8004812:	4401      	add	r1, r0
 8004814:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
 8004818:	60da      	str	r2, [r3, #12]
 800481a:	4a16      	ldr	r2, [pc, #88]	; (8004874 <Number::.cctor#7581+0x6c>)
 800481c:	4402      	add	r2, r0
 800481e:	611a      	str	r2, [r3, #16]
 8004820:	4a15      	ldr	r2, [pc, #84]	; (8004878 <Number::.cctor#7581+0x70>)
 8004822:	4402      	add	r2, r0
 8004824:	615a      	str	r2, [r3, #20]
 8004826:	4a15      	ldr	r2, [pc, #84]	; (800487c <Number::.cctor#7581+0x74>)
            "# %", "#%", "%#"
        };

        // BUGBUG yslin: have to verify on the negative Percent
        // format for real format.
        private static String[] negPercentFormats = {
 8004828:	f8d1 30b0 	ldr.w	r3, [r1, #176]	; 0xb0
 800482c:	4402      	add	r2, r0
 800482e:	60da      	str	r2, [r3, #12]
 8004830:	4a13      	ldr	r2, [pc, #76]	; (8004880 <Number::.cctor#7581+0x78>)
 8004832:	4402      	add	r2, r0
 8004834:	611a      	str	r2, [r3, #16]
 8004836:	4a13      	ldr	r2, [pc, #76]	; (8004884 <Number::.cctor#7581+0x7c>)
 8004838:	4402      	add	r2, r0
 800483a:	615a      	str	r2, [r3, #20]
 800483c:	4a12      	ldr	r2, [pc, #72]	; (8004888 <Number::.cctor#7581+0x80>)
            "-# %", "-#%", "-%#"
        };
        private static String[] negNumberFormats = {
 800483e:	f8d1 30ac 	ldr.w	r3, [r1, #172]	; 0xac
 8004842:	4402      	add	r2, r0
 8004844:	60da      	str	r2, [r3, #12]
 8004846:	4a11      	ldr	r2, [pc, #68]	; (800488c <Number::.cctor#7581+0x84>)
 8004848:	4402      	add	r2, r0
 800484a:	611a      	str	r2, [r3, #16]
 800484c:	4a10      	ldr	r2, [pc, #64]	; (8004890 <Number::.cctor#7581+0x88>)
 800484e:	4402      	add	r2, r0
 8004850:	615a      	str	r2, [r3, #20]
 8004852:	4a10      	ldr	r2, [pc, #64]	; (8004894 <Number::.cctor#7581+0x8c>)
 8004854:	4402      	add	r2, r0
 8004856:	619a      	str	r2, [r3, #24]
 8004858:	4a0f      	ldr	r2, [pc, #60]	; (8004898 <Number::.cctor#7581+0x90>)
 800485a:	4402      	add	r2, r0
 800485c:	61da      	str	r2, [r3, #28]
 800485e:	4a0f      	ldr	r2, [pc, #60]	; (800489c <Number::.cctor#7581+0x94>)
 8004860:	4410      	add	r0, r2
 8004862:	f8c1 00b4 	str.w	r0, [r1, #180]	; 0xb4
 8004866:	4770      	bx	lr
 8004868:	17ffcfa4 	.word	0x17ffcfa4
 800486c:	e8009cac 	.word	0xe8009cac
 8004870:	fffffe3c 	.word	0xfffffe3c
 8004874:	e8009ccc 	.word	0xe8009ccc
 8004878:	e8009cec 	.word	0xe8009cec
 800487c:	e8009d0c 	.word	0xe8009d0c
 8004880:	e8009d2c 	.word	0xe8009d2c
 8004884:	e8009d4c 	.word	0xe8009d4c
 8004888:	e8009d6c 	.word	0xe8009d6c
 800488c:	e8009d8c 	.word	0xe8009d8c
 8004890:	e8009dac 	.word	0xe8009dac
 8004894:	e8009dcc 	.word	0xe8009dcc
 8004898:	e8009dec 	.word	0xe8009dec
 800489c:	e8009e0c 	.word	0xe8009e0c

080048a0 <CultureInfo::.cctor#9870>:
        //
        // All of the following will be created on demand.
        //
    
        //The Invariant culture;
        private static CultureInfo  m_InvariantCultureInfo = null;
 80048a0:	b5b0      	push	{r4, r5, r7, lr}
 80048a2:	4909      	ldr	r1, [pc, #36]	; (80048c8 <CultureInfo::.cctor#9870+0x28>)
 80048a4:	4809      	ldr	r0, [pc, #36]	; (80048cc <CultureInfo::.cctor#9870+0x2c>)
        //
        static unsafe CultureInfo()
        {
            if(m_InvariantCultureInfo == null)
            {
                CultureInfo temp = new CultureInfo( LOCALE_INVARIANT, false );
 80048a6:	4a0b      	ldr	r2, [pc, #44]	; (80048d4 <CultureInfo::.cctor#9870+0x34>)
 80048a8:	4479      	add	r1, pc
 80048aa:	1845      	adds	r5, r0, r1
 80048ac:	2000      	movs	r0, #0
 80048ae:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 80048b2:	4807      	ldr	r0, [pc, #28]	; (80048d0 <CultureInfo::.cctor#9870+0x30>)
 80048b4:	4408      	add	r0, r1
 80048b6:	4411      	add	r1, r2
 80048b8:	f7fc f832 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 80048bc:	4604      	mov	r4, r0
 80048be:	f002 fa55 	bl	8006d6c <CultureInfo::.ctor#9874>
 80048c2:	f8c5 40a8 	str.w	r4, [r5, #168]	; 0xa8
 80048c6:	bdb0      	pop	{r4, r5, r7, pc}
 80048c8:	17ffcf08 	.word	0x17ffcf08
 80048cc:	fffffe3c 	.word	0xfffffe3c
 80048d0:	ffffea64 	.word	0xffffea64
 80048d4:	e800a2cc 	.word	0xe800a2cc

080048d8 <GpioController::.cctor#16712>:
    /// <summary>
    /// Represents the default general-purpose I/O (GPIO) controller for the system.
    /// </summary>
    public sealed class GpioController
    {
        private static readonly GpioController _instance = new GpioController();
 80048d8:	b510      	push	{r4, lr}
 80048da:	4c06      	ldr	r4, [pc, #24]	; (80048f4 <GpioController::.cctor#16712+0x1c>)
 80048dc:	4806      	ldr	r0, [pc, #24]	; (80048f8 <GpioController::.cctor#16712+0x20>)
 80048de:	4907      	ldr	r1, [pc, #28]	; (80048fc <GpioController::.cctor#16712+0x24>)
 80048e0:	447c      	add	r4, pc
 80048e2:	4420      	add	r0, r4
 80048e4:	4421      	add	r1, r4
 80048e6:	f7fc f81b 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 80048ea:	4905      	ldr	r1, [pc, #20]	; (8004900 <GpioController::.cctor#16712+0x28>)
 80048ec:	4421      	add	r1, r4
 80048ee:	f8c1 00c8 	str.w	r0, [r1, #200]	; 0xc8
 80048f2:	bd10      	pop	{r4, pc}
 80048f4:	17ffced0 	.word	0x17ffced0
 80048f8:	ffffea64 	.word	0xffffea64
 80048fc:	e800b2fc 	.word	0xe800b2fc
 8004900:	fffffe3c 	.word	0xfffffe3c

08004904 <Processor::.cctor#16903>:
 8004904:	4804      	ldr	r0, [pc, #16]	; (8004918 <Processor::.cctor#16903+0x14>)
 8004906:	4905      	ldr	r1, [pc, #20]	; (800491c <Processor::.cctor#16903+0x18>)
 8004908:	4478      	add	r0, pc
 800490a:	4408      	add	r0, r1
 800490c:	2100      	movs	r1, #0
 800490e:	f880 1058 	strb.w	r1, [r0, #88]	; 0x58
 8004912:	6541      	str	r1, [r0, #84]	; 0x54
 8004914:	4770      	bx	lr
 8004916:	46c0      	nop			; (mov r8, r8)
 8004918:	17ffcea8 	.word	0x17ffcea8
 800491c:	fffffe3c 	.word	0xfffffe3c

08004920 <InvalidCastException::.ctor#7413>:
    public class InvalidCastException : SystemException
    {
#if EXCEPTION_STRINGS
        public InvalidCastException() : base( Environment.GetResourceString( "Arg_InvalidCastException" ) )
#else
        public InvalidCastException()
 8004920:	b580      	push	{r7, lr}
 8004922:	f000 fca0 	bl	8005266 <SystemException::.ctor#7662>
 8004926:	bd80      	pop	{r7, pc}

08004928 <TypeSystemManager::CastToInterface#5245>:

        [TS.WellKnownMethod( "TypeSystemManager_CastToInterface" )]
        public static object CastToInterface( object    obj      ,
                                              TS.VTable expected )
        {
            if(obj != null)
 8004928:	b5b0      	push	{r4, r5, r7, lr}
 800492a:	2800      	cmp	r0, #0
 800492c:	bf08      	it	eq
 800492e:	bdb0      	popeq	{r4, r5, r7, pc}
            {
                obj = CastToInterfaceNoThrow( obj, expected );
 8004930:	f000 f818 	bl	8004964 <TypeSystemManager::CastToInterfaceNoThrow#5246>
 8004934:	b100      	cbz	r0, 8004938 <TypeSystemManager::CastToInterface#5245+0x10>
 8004936:	bdb0      	pop	{r4, r5, r7, pc}
 8004938:	4807      	ldr	r0, [pc, #28]	; (8004958 <TypeSystemManager::CastToInterface#5245+0x30>)
                if(obj == null)
                {
                    throw new InvalidCastException();
 800493a:	4908      	ldr	r1, [pc, #32]	; (800495c <TypeSystemManager::CastToInterface#5245+0x34>)
 800493c:	4478      	add	r0, pc
 800493e:	180c      	adds	r4, r1, r0
 8004940:	4907      	ldr	r1, [pc, #28]	; (8004960 <TypeSystemManager::CastToInterface#5245+0x38>)
 8004942:	4401      	add	r1, r0
 8004944:	4620      	mov	r0, r4
 8004946:	f7fb ffeb 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 800494a:	4605      	mov	r5, r0
 800494c:	f7ff ffe8 	bl	8004920 <InvalidCastException::.ctor#7413>
 8004950:	4620      	mov	r0, r4
 8004952:	4629      	mov	r1, r5
 8004954:	f7fb fffa 	bl	800094c <TypeSystemManager::Throw#5247>
 8004958:	17ffce74 	.word	0x17ffce74
 800495c:	ffffea64 	.word	0xffffea64
 8004960:	e800932c 	.word	0xe800932c

08004964 <TypeSystemManager::CastToInterfaceNoThrow#5246>:
        }

        [TS.WellKnownMethod( "TypeSystemManager_CastToInterfaceNoThrow" )]
        public static object CastToInterfaceNoThrow( object    obj      ,
                                                     TS.VTable expected )
        {
 8004964:	b510      	push	{r4, lr}
 8004966:	4604      	mov	r4, r0
            if(obj != null)
 8004968:	2c00      	cmp	r4, #0
 800496a:	bf04      	itt	eq
 800496c:	2000      	moveq	r0, #0
 800496e:	bd10      	popeq	{r4, pc}
 8004970:	4805      	ldr	r0, [pc, #20]	; (8004988 <TypeSystemManager::CastToInterfaceNoThrow#5246+0x24>)
            {
                TS.VTable got = TS.VTable.Get( obj );

                if(got.ImplementsInterface( expected ))
 8004972:	4906      	ldr	r1, [pc, #24]	; (800498c <TypeSystemManager::CastToInterfaceNoThrow#5246+0x28>)
 8004974:	4478      	add	r0, pc
 8004976:	4401      	add	r1, r0
 8004978:	6860      	ldr	r0, [r4, #4]
 800497a:	f7fe fe1b 	bl	80035b4 <VTable::ImplementsInterface#3845>
 800497e:	b2c0      	uxtb	r0, r0
 8004980:	2800      	cmp	r0, #0
 8004982:	bf18      	it	ne
 8004984:	4620      	movne	r0, r4
 8004986:	bd10      	pop	{r4, pc}
 8004988:	17ffce3c 	.word	0x17ffce3c
 800498c:	e8009aac 	.word	0xe8009aac

08004990 <TypeSystemManager::DeliverException#5250>:
        }

        //--//

        private void DeliverException( Exception obj )
        {
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	4601      	mov	r1, r0
 8004996:	2000      	movs	r0, #0
 8004998:	4a06      	ldr	r2, [pc, #24]	; (80049b4 <TypeSystemManager::DeliverException#5250+0x24>)
 800499a:	9001      	str	r0, [sp, #4]
 800499c:	4804      	ldr	r0, [pc, #16]	; (80049b0 <TypeSystemManager::DeliverException#5250+0x20>)
 800499e:	4478      	add	r0, pc
 80049a0:	4410      	add	r0, r2
 80049a2:	6a40      	ldr	r0, [r0, #36]	; 0x24
            // TODO: LT72: Only RT.ThreadManager can implement this method correctly
            //
            ThreadImpl        thread = ThreadManager.Instance.CurrentThread;
            Processor.Context ctx    = thread.ThrowContext;

            thread.CurrentException = obj;
 80049a4:	f7fd ff32 	bl	800280c <Thread::set_CurrentException#4222>
 80049a8:	2017      	movs	r0, #23
 80049aa:	f7fb fc99 	bl	80002e0 <BugCheck::Raise#4938>
 80049ae:	46c0      	nop			; (mov r8, r8)
 80049b0:	17ffce12 	.word	0x17ffce12
 80049b4:	ffffea1c 	.word	0xffffea1c

080049b8 <CodeMap::ResolveAddressToCodeMap#13910>:
            return -1;
        }

        [NoInline]
        public static CodeMap ResolveAddressToCodeMap( UIntPtr address )
        {
 80049b8:	b580      	push	{r7, lr}
 80049ba:	4904      	ldr	r1, [pc, #16]	; (80049cc <CodeMap::ResolveAddressToCodeMap#13910+0x14>)
            return ResolveAddressToCodeMap( address, CodeMap.LookupAddress );
 80049bc:	4a04      	ldr	r2, [pc, #16]	; (80049d0 <CodeMap::ResolveAddressToCodeMap#13910+0x18>)
 80049be:	4479      	add	r1, pc
 80049c0:	4411      	add	r1, r2
 80049c2:	f8d1 1094 	ldr.w	r1, [r1, #148]	; 0x94
 80049c6:	f002 fc07 	bl	80071d8 <CodeMap::ResolveAddressToCodeMap#13911>
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	17ffcdf2 	.word	0x17ffcdf2
 80049d0:	fffffe3c 	.word	0xfffffe3c

080049d4 <ExceptionMap::ResolveAddressToHandler#14049>:
        }

        [NoInline]
        public CodePointer ResolveAddressToHandler( UIntPtr address   ,
                                                    VTable  exception )
        {
 80049d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80049d8:	b081      	sub	sp, #4
 80049da:	460d      	mov	r5, r1
 80049dc:	4601      	mov	r1, r0
 80049de:	2000      	movs	r0, #0
 80049e0:	4691      	mov	r9, r2
 80049e2:	9000      	str	r0, [sp, #0]
            Range[] ranges = this.Ranges;
 80049e4:	688f      	ldr	r7, [r1, #8]
 80049e6:	b1bf      	cbz	r7, 8004a18 <ExceptionMap::ResolveAddressToHandler#14049+0x44>
 80049e8:	f107 000c 	add.w	r0, r7, #12
 80049ec:	f04f 36ff 	mov.w	r6, #4294967295
 80049f0:	46e8      	mov	r8, sp
 80049f2:	68b9      	ldr	r1, [r7, #8]
 80049f4:	3601      	adds	r6, #1

            if(ranges != null)
            {
                for(int i = 0; i < ranges.Length; i++)
 80049f6:	428e      	cmp	r6, r1
 80049f8:	da11      	bge.n	8004a1e <ExceptionMap::ResolveAddressToHandler#14049+0x4a>
                {
                    CodePointer res = ranges[i].Match( address, exception );
 80049fa:	4629      	mov	r1, r5
 80049fc:	464a      	mov	r2, r9
 80049fe:	f100 040c 	add.w	r4, r0, #12
 8004a02:	f002 fc07 	bl	8007214 <Range::Match#15299>
 8004a06:	9000      	str	r0, [sp, #0]

                    if(res.IsValid)
 8004a08:	4640      	mov	r0, r8
 8004a0a:	f7fe fc2e 	bl	800326a <CodePointer::get_IsValid#3818>
 8004a0e:	f010 0fff 	tst.w	r0, #255	; 0xff
 8004a12:	4620      	mov	r0, r4
 8004a14:	d0ed      	beq.n	80049f2 <ExceptionMap::ResolveAddressToHandler#14049+0x1e>
                    {
                        return res;
 8004a16:	9800      	ldr	r0, [sp, #0]
 8004a18:	b001      	add	sp, #4
 8004a1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a1e:	2000      	movs	r0, #0
 8004a20:	b001      	add	sp, #4
 8004a22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a26:	46c0      	nop			; (mov r8, r8)

08004a28 <Activator::CreateInstance#39890>:
////
////        return rt.CreateInstanceImpl( !nonPublic, false, false );
////    }
    
        static public T CreateInstance<T>()
        {
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	4904      	ldr	r1, [pc, #16]	; (8004a3c <Activator::CreateInstance#39890+0x14>)
            return (T)CreateInstanceInner( typeof(T) );
 8004a2c:	4804      	ldr	r0, [pc, #16]	; (8004a40 <Activator::CreateInstance#39890+0x18>)
 8004a2e:	4a05      	ldr	r2, [pc, #20]	; (8004a44 <Activator::CreateInstance#39890+0x1c>)
 8004a30:	4479      	add	r1, pc
 8004a32:	4408      	add	r0, r1
 8004a34:	4411      	add	r1, r2
 8004a36:	f7fb ff73 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	17ffcd80 	.word	0x17ffcd80
 8004a40:	ffffea64 	.word	0xffffea64
 8004a44:	e800994c 	.word	0xe800994c

08004a48 <Activator::CreateInstance#39893>:
////
////        return rt.CreateInstanceImpl( !nonPublic, false, false );
////    }
    
        static public T CreateInstance<T>()
        {
 8004a48:	b510      	push	{r4, lr}
 8004a4a:	4906      	ldr	r1, [pc, #24]	; (8004a64 <Activator::CreateInstance#39893+0x1c>)
            return (T)CreateInstanceInner( typeof(T) );
 8004a4c:	4806      	ldr	r0, [pc, #24]	; (8004a68 <Activator::CreateInstance#39893+0x20>)
 8004a4e:	4a07      	ldr	r2, [pc, #28]	; (8004a6c <Activator::CreateInstance#39893+0x24>)
 8004a50:	4479      	add	r1, pc
 8004a52:	4408      	add	r0, r1
 8004a54:	4411      	add	r1, r2
 8004a56:	f7fb ff63 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8004a5a:	4604      	mov	r4, r0
 8004a5c:	f000 f839 	bl	8004ad2 <CriticalSection::.ctor#5269>
 8004a60:	4620      	mov	r0, r4
 8004a62:	bd10      	pop	{r4, pc}
 8004a64:	17ffcd60 	.word	0x17ffcd60
 8004a68:	ffffea64 	.word	0xffffea64
 8004a6c:	e80099dc 	.word	0xe80099dc

08004a70 <DefaultTypeSystemManager::ComputeObjectSize#5258>:

        public static uint ComputeObjectSize( TS.VTable vTable )
        {
            uint size = (uint)System.Runtime.InteropServices.Marshal.SizeOf( typeof(ObjectHeader) );

            size += vTable.BaseSize;
 8004a70:	6880      	ldr	r0, [r0, #8]

            //
            // Align to word boundary.
            //
            size = (size + (sizeof(uint)-1)) & ~(uint)(sizeof(uint)-1);
 8004a72:	300b      	adds	r0, #11
 8004a74:	f020 0003 	bic.w	r0, r0, #3
 8004a78:	4770      	bx	lr
 8004a7a:	46c0      	nop			; (mov r8, r8)

08004a7c <DefaultTypeSystemManager::AllocateInner#5260>:
        //--//

        [TS.WellKnownMethod("DebugGC_DefaultTypeSystemManager_AllocateInner")]
        private UIntPtr AllocateInner( TS.VTable vTable ,
                                       uint      size   )
        {
 8004a7c:	b570      	push	{r4, r5, r6, lr}
 8004a7e:	4e0b      	ldr	r6, [pc, #44]	; (8004aac <DefaultTypeSystemManager::AllocateInner#5260+0x30>)
            UIntPtr ptr = MemoryManager.Instance.Allocate( size );
 8004a80:	4d0b      	ldr	r5, [pc, #44]	; (8004ab0 <DefaultTypeSystemManager::AllocateInner#5260+0x34>)
 8004a82:	4604      	mov	r4, r0
 8004a84:	4621      	mov	r1, r4
 8004a86:	447e      	add	r6, pc
 8004a88:	19a8      	adds	r0, r5, r6
 8004a8a:	f7ff fd4d 	bl	8004528 <LinearMemoryManager::Allocate#4930>

            if(ptr == UIntPtr.Zero)
 8004a8e:	4909      	ldr	r1, [pc, #36]	; (8004ab4 <DefaultTypeSystemManager::AllocateInner#5260+0x38>)
 8004a90:	4431      	add	r1, r6
 8004a92:	f8d1 10c4 	ldr.w	r1, [r1, #196]	; 0xc4
 8004a96:	4288      	cmp	r0, r1
 8004a98:	bf18      	it	ne
 8004a9a:	bd70      	popne	{r4, r5, r6, pc}
 8004a9c:	4806      	ldr	r0, [pc, #24]	; (8004ab8 <DefaultTypeSystemManager::AllocateInner#5260+0x3c>)
            {
                GarbageCollectionManager.Instance.Collect();

                ptr = MemoryManager.Instance.Allocate( size );
 8004a9e:	4621      	mov	r1, r4
 8004aa0:	4478      	add	r0, pc
 8004aa2:	4428      	add	r0, r5
 8004aa4:	f7ff fd40 	bl	8004528 <LinearMemoryManager::Allocate#4930>
 8004aa8:	bd70      	pop	{r4, r5, r6, pc}
 8004aaa:	46c0      	nop			; (mov r8, r8)
 8004aac:	17ffcd2a 	.word	0x17ffcd2a
 8004ab0:	ffffea7c 	.word	0xffffea7c
 8004ab4:	fffffe3c 	.word	0xfffffe3c
 8004ab8:	17ffcd10 	.word	0x17ffcd10

08004abc <DefaultTypeSystemManager::ComputeArraySize#5259>:
        public static uint ComputeArraySize( TS.VTable vTable ,
                                             uint      length )
        {
            uint size = (uint)System.Runtime.InteropServices.Marshal.SizeOf( typeof(ObjectHeader) );

            size += vTable.BaseSize;
 8004abc:	e9d0 2002 	ldrd	r2, r0, [r0, #8]
 8004ac0:	fb00 2001 	mla	r0, r0, r1, r2
            size += vTable.ElementSize * length;
 8004ac4:	300b      	adds	r0, #11
 8004ac6:	f020 0003 	bic.w	r0, r0, #3
 8004aca:	4770      	bx	lr

08004acc <Exception::.ctor#7329>:
 8004acc:	2100      	movs	r1, #0
 8004ace:	6081      	str	r1, [r0, #8]
 8004ad0:	4770      	bx	lr

08004ad2 <CriticalSection::.ctor#5269>:

        //
        // Constructor Methods
        //

        public CriticalSection()
 8004ad2:	b580      	push	{r7, lr}
 8004ad4:	f000 f802 	bl	8004adc <WaitableObject::.ctor#5275>
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	46c0      	nop			; (mov r8, r8)

08004adc <WaitableObject::.ctor#5275>:

        //
        // Constructor Methods
        //

        protected WaitableObject()
 8004adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ade:	b081      	sub	sp, #4
 8004ae0:	4f0c      	ldr	r7, [pc, #48]	; (8004b14 <WaitableObject::.ctor#5275+0x38>)
 8004ae2:	4604      	mov	r4, r0
        {
            m_ownershipLink = new KernelNode< WaitableObject >( this );
 8004ae4:	480c      	ldr	r0, [pc, #48]	; (8004b18 <WaitableObject::.ctor#5275+0x3c>)
 8004ae6:	447f      	add	r7, pc
 8004ae8:	19c5      	adds	r5, r0, r7
 8004aea:	480c      	ldr	r0, [pc, #48]	; (8004b1c <WaitableObject::.ctor#5275+0x40>)
 8004aec:	19c1      	adds	r1, r0, r7
 8004aee:	4628      	mov	r0, r5
 8004af0:	f7fb ff16 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8004af4:	4621      	mov	r1, r4
 8004af6:	4606      	mov	r6, r0
 8004af8:	f000 f904 	bl	8004d04 <KernelNode`1::.ctor#18284>
            m_listWaiting   = new KernelList< WaitingRecord  >();
 8004afc:	4808      	ldr	r0, [pc, #32]	; (8004b20 <WaitableObject::.ctor#5275+0x44>)
 8004afe:	60a6      	str	r6, [r4, #8]
 8004b00:	19c1      	adds	r1, r0, r7
 8004b02:	4628      	mov	r0, r5
 8004b04:	f7fb ff0c 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8004b08:	4605      	mov	r5, r0
 8004b0a:	f7fd fb7f 	bl	800220c <KernelList`1::.ctor#17983>
 8004b0e:	60e5      	str	r5, [r4, #12]
 8004b10:	b001      	add	sp, #4
 8004b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b14:	17ffccca 	.word	0x17ffccca
 8004b18:	ffffea64 	.word	0xffffea64
 8004b1c:	e800958c 	.word	0xe800958c
 8004b20:	e800811c 	.word	0xe800811c

08004b24 <CriticalSection::Acquire#5270>:
        //
        // Helper Methods
        //

        public override bool Acquire( SchedulerTime timeout )
        {
 8004b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b28:	b082      	sub	sp, #8
 8004b2a:	4604      	mov	r4, r0
 8004b2c:	2000      	movs	r0, #0
 8004b2e:	492c      	ldr	r1, [pc, #176]	; (8004be0 <CriticalSection::Acquire#5270+0xbc>)
 8004b30:	9001      	str	r0, [sp, #4]
 8004b32:	482a      	ldr	r0, [pc, #168]	; (8004bdc <CriticalSection::Acquire#5270+0xb8>)
 8004b34:	4478      	add	r0, pc
 8004b36:	4408      	add	r0, r1
 8004b38:	f8d0 80bc 	ldr.w	r8, [r0, #188]	; 0xbc
            ThreadImpl thisThread = ThreadImpl.CurrentThread;

            if(thisThread == null)
 8004b3c:	f1b8 0f00 	cmp.w	r8, #0
 8004b40:	d007      	beq.n	8004b52 <CriticalSection::Acquire#5270+0x2e>
            }

            //
            // Fast shortcut for non-contended case.
            //
            if(m_ownerThread == null)
 8004b42:	6920      	ldr	r0, [r4, #16]
            }

            //
            // Fast shortcut for nested calls.
            //
            if(m_ownerThread == thisThread)
 8004b44:	4540      	cmp	r0, r8
 8004b46:	d106      	bne.n	8004b56 <CriticalSection::Acquire#5270+0x32>
            {
                m_nestingCount++;
 8004b48:	6960      	ldr	r0, [r4, #20]
 8004b4a:	2701      	movs	r7, #1
 8004b4c:	3001      	adds	r0, #1
 8004b4e:	6160      	str	r0, [r4, #20]
 8004b50:	e03f      	b.n	8004bd2 <CriticalSection::Acquire#5270+0xae>
 8004b52:	2701      	movs	r7, #1
 8004b54:	e03d      	b.n	8004bd2 <CriticalSection::Acquire#5270+0xae>
                return true;
            }

            using(Synchronization.WaitingRecord.Holder holder = WaitingRecord.Holder.Get( thisThread, this, timeout ))
 8004b56:	4640      	mov	r0, r8
 8004b58:	4621      	mov	r1, r4
 8004b5a:	f000 f843 	bl	8004be4 <Holder::Get#5906>
 8004b5e:	4606      	mov	r6, r0
 8004b60:	2500      	movs	r5, #0
            {
                while(true)
                {
                    bool fNotify = false;
                    bool fResult = false;
 8004b62:	2001      	movs	r0, #1
 8004b64:	9500      	str	r5, [sp, #0]
 8004b66:	f00e ffcf 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
 8004b6a:	9500      	str	r5, [sp, #0]
 8004b6c:	e9cd 0000 	strd	r0, r0, [sp]

                    using(SmartHandles.InterruptState.Disable())
                    {
                        if(holder.ShouldTryToAcquire)
 8004b70:	4630      	mov	r0, r6
 8004b72:	f000 f842 	bl	8004bfa <Holder::get_ShouldTryToAcquire#5907>
 8004b76:	2700      	movs	r7, #0
 8004b78:	f010 0fff 	tst.w	r0, #255	; 0xff
 8004b7c:	d011      	beq.n	8004ba2 <CriticalSection::Acquire#5270+0x7e>
                        {
                            if(m_ownerThread == null)
 8004b7e:	6920      	ldr	r0, [r4, #16]
 8004b80:	b140      	cbz	r0, 8004b94 <CriticalSection::Acquire#5270+0x70>
                                fNotify = true;
                                fResult = true;
                            }
                            else
                            {
                                if(m_ownerThread == thisThread)
 8004b82:	6920      	ldr	r0, [r4, #16]
 8004b84:	4540      	cmp	r0, r8
 8004b86:	d10a      	bne.n	8004b9e <CriticalSection::Acquire#5270+0x7a>
                                {
                                    m_nestingCount++;
 8004b88:	6960      	ldr	r0, [r4, #20]
 8004b8a:	2701      	movs	r7, #1
 8004b8c:	2500      	movs	r5, #0
 8004b8e:	3001      	adds	r0, #1
 8004b90:	6160      	str	r0, [r4, #20]
 8004b92:	e006      	b.n	8004ba2 <CriticalSection::Acquire#5270+0x7e>
 8004b94:	2501      	movs	r5, #1
 8004b96:	2701      	movs	r7, #1
 8004b98:	f8c4 8010 	str.w	r8, [r4, #16]
 8004b9c:	e001      	b.n	8004ba2 <CriticalSection::Acquire#5270+0x7e>
 8004b9e:	2500      	movs	r5, #0
 8004ba0:	2700      	movs	r7, #0

                                    fResult = true;
                                }
                            }
                        }
                    }
 8004ba2:	9801      	ldr	r0, [sp, #4]
 8004ba4:	f00e ffb0 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
 8004ba8:	b11d      	cbz	r5, 8004bb2 <CriticalSection::Acquire#5270+0x8e>

                    if(fNotify)
                    {
                        thisThread.AcquiredWaitableObject( this );
 8004baa:	4640      	mov	r0, r8
 8004bac:	4621      	mov	r1, r4
 8004bae:	f7fd fd7a 	bl	80026a6 <Thread::AcquiredWaitableObject#4196>
 8004bb2:	b94f      	cbnz	r7, 8004bc8 <CriticalSection::Acquire#5270+0xa4>
                    if(fResult)
                    {
                        return fResult;
                    }

                    if(holder.RequestProcessed)
 8004bb4:	4630      	mov	r0, r6
 8004bb6:	f000 f82d 	bl	8004c14 <Holder::get_RequestProcessed#5908>
 8004bba:	f010 0fff 	tst.w	r0, #255	; 0xff
 8004bbe:	d0cf      	beq.n	8004b60 <CriticalSection::Acquire#5270+0x3c>
                    {
                        return holder.RequestFulfilled;
 8004bc0:	4630      	mov	r0, r6
 8004bc2:	f000 f84a 	bl	8004c5a <Holder::get_RequestFulfilled#5909>
 8004bc6:	4607      	mov	r7, r0
                return true;
            }

            using(Synchronization.WaitingRecord.Holder holder = WaitingRecord.Holder.Get( thisThread, this, timeout ))
            {
                while(true)
 8004bc8:	2e00      	cmp	r6, #0
 8004bca:	bf1c      	itt	ne
 8004bcc:	4630      	movne	r0, r6
 8004bce:	f7fd fa65 	blne	800209c <Holder::Dispose#5905>
 8004bd2:	4638      	mov	r0, r7
 8004bd4:	b002      	add	sp, #8
 8004bd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bda:	46c0      	nop			; (mov r8, r8)
 8004bdc:	17ffcc7c 	.word	0x17ffcc7c
 8004be0:	fffffe3c 	.word	0xfffffe3c

08004be4 <Holder::Get#5906>:
            // HACK: We have a bug in the liveness of multi-pointer structure. We have to use a class instead. Use this instead of the parametrized constructor.
            //
            public static Holder Get( ThreadImpl                     thread         ,
                                      Synchronization.WaitableObject waitableObject ,
                                      SchedulerTime                  timeout        )
            {
 8004be4:	b580      	push	{r7, lr}
                Holder hld = thread.m_holder;
 8004be6:	f8d0 c04c 	ldr.w	ip, [r0, #76]	; 0x4c
 8004bea:	f04f 0e00 	mov.w	lr, #0
 8004bee:	f10c 0708 	add.w	r7, ip, #8
 8004bf2:	e887 400f 	stmia.w	r7, {r0, r1, r2, r3, lr}
 8004bf6:	4660      	mov	r0, ip
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <Holder::get_ShouldTryToAcquire#5907>:

            public bool ShouldTryToAcquire
            {
                get
                {
                    return m_wr == null || m_wr.Processed == false;
 8004bfa:	6981      	ldr	r1, [r0, #24]
 8004bfc:	2900      	cmp	r1, #0
 8004bfe:	bf04      	itt	eq
 8004c00:	2001      	moveq	r0, #1
 8004c02:	4770      	bxeq	lr
 8004c04:	6980      	ldr	r0, [r0, #24]

        public bool Processed
        {
            get
            {
                return m_processed;
 8004c06:	f890 1020 	ldrb.w	r1, [r0, #32]
 8004c0a:	2000      	movs	r0, #0
 8004c0c:	2900      	cmp	r1, #0
 8004c0e:	bf08      	it	eq
 8004c10:	2001      	moveq	r0, #1
 8004c12:	4770      	bx	lr

08004c14 <Holder::get_RequestProcessed#5908>:
            }

            public bool RequestProcessed
            {
                get
                {
 8004c14:	b5b0      	push	{r4, r5, r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	2400      	movs	r4, #0
 8004c1a:	4605      	mov	r5, r0
 8004c1c:	9401      	str	r4, [sp, #4]
                    // On the first pass, we don't allocate a WaitingRecord, we just try to acquire the resource.
                    // If that fails, we allocate a WaitingRecord, connect it and 
                    //
                    // On the second pass, we retry to acquire the resource and if that fails, we simply wait.
                    //
                    if(m_wr == null)
 8004c1e:	69a8      	ldr	r0, [r5, #24]
 8004c20:	b130      	cbz	r0, 8004c30 <Holder::get_RequestProcessed#5908+0x1c>

                        return false;
                    }
                    else
                    {
                        m_wr.Wait();
 8004c22:	69a8      	ldr	r0, [r5, #24]
 8004c24:	f000 f95e 	bl	8004ee4 <WaitingRecord::Wait#5296>

                        return m_wr.Processed;
 8004c28:	69a8      	ldr	r0, [r5, #24]

        public bool Processed
        {
            get
            {
                return m_processed;
 8004c2a:	f890 4020 	ldrb.w	r4, [r0, #32]
 8004c2e:	e011      	b.n	8004c54 <Holder::get_RequestProcessed#5908+0x40>
                    //
                    // On the second pass, we retry to acquire the resource and if that fails, we simply wait.
                    //
                    if(m_wr == null)
                    {
                        m_wr = WaitingRecord.GetInstance( m_thread, m_waitableObject, m_timeout );
 8004c30:	f105 0308 	add.w	r3, r5, #8
 8004c34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c36:	f000 f8e9 	bl	8004e0c <WaitingRecord::GetInstance#5294>
 8004c3a:	61a8      	str	r0, [r5, #24]
 8004c3c:	2001      	movs	r0, #1
 8004c3e:	f00e ff63 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
 8004c42:	9400      	str	r4, [sp, #0]
 8004c44:	e9cd 0000 	strd	r0, r0, [sp]

                        using(SmartHandles.InterruptState.Disable())
                        {
                            m_wr.Connect();
 8004c48:	69a8      	ldr	r0, [r5, #24]
 8004c4a:	f000 f93d 	bl	8004ec8 <WaitingRecord::Connect#5295>
                        }
 8004c4e:	9801      	ldr	r0, [sp, #4]
 8004c50:	f00e ff5a 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
 8004c54:	4620      	mov	r0, r4
 8004c56:	b002      	add	sp, #8
 8004c58:	bdb0      	pop	{r4, r5, r7, pc}

08004c5a <Holder::get_RequestFulfilled#5909>:

            public bool RequestFulfilled
            {
                get
                {
                    return m_wr.RequestFulfilled;
 8004c5a:	6980      	ldr	r0, [r0, #24]
 8004c5c:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
 8004c60:	4770      	bx	lr
 8004c62:	46c0      	nop			; (mov r8, r8)

08004c64 <CriticalSection::Release#5271>:
                }
            }
        }

        public override void Release()
        {
 8004c64:	b570      	push	{r4, r5, r6, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	4604      	mov	r4, r0
 8004c6a:	2000      	movs	r0, #0
 8004c6c:	4921      	ldr	r1, [pc, #132]	; (8004cf4 <CriticalSection::Release#5271+0x90>)
 8004c6e:	9001      	str	r0, [sp, #4]
 8004c70:	481f      	ldr	r0, [pc, #124]	; (8004cf0 <CriticalSection::Release#5271+0x8c>)
 8004c72:	4478      	add	r0, pc
 8004c74:	4408      	add	r0, r1
 8004c76:	f8d0 00bc 	ldr.w	r0, [r0, #188]	; 0xbc
 8004c7a:	b330      	cbz	r0, 8004cca <CriticalSection::Release#5271+0x66>
                // Special case for boot code path: all locks are transparent.
                //
                return;
            }

            if(m_ownerThread != thisThread)
 8004c7c:	6921      	ldr	r1, [r4, #16]
 8004c7e:	4281      	cmp	r1, r0
 8004c80:	d125      	bne.n	8004cce <CriticalSection::Release#5271+0x6a>
#else
                throw new Exception();
#endif
            }

            if(m_nestingCount > 0)
 8004c82:	6960      	ldr	r0, [r4, #20]
 8004c84:	2801      	cmp	r0, #1
            {
                m_nestingCount--;
 8004c86:	bfa1      	itttt	ge
 8004c88:	6960      	ldrge	r0, [r4, #20]
 8004c8a:	3801      	subge	r0, #1
 8004c8c:	6160      	strge	r0, [r4, #20]
 8004c8e:	b002      	addge	sp, #8
 8004c90:	bfa8      	it	ge
 8004c92:	bd70      	popge	{r4, r5, r6, pc}
                return;
            }

            thisThread.ReleasedWaitableObject( this );
 8004c94:	4620      	mov	r0, r4
 8004c96:	f7fd fd22 	bl	80026de <Thread::ReleasedWaitableObject#4197>

            ThreadImpl ownerThread  = null;
            ThreadImpl wakeupThread = null;
 8004c9a:	2001      	movs	r0, #1
 8004c9c:	f00e ff34 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
 8004ca0:	2600      	movs	r6, #0
 8004ca2:	9600      	str	r6, [sp, #0]
 8004ca4:	e9cd 0000 	strd	r0, r0, [sp]

            using(SmartHandles.InterruptState.Disable())
            {
                WaitingRecord wr = m_listWaiting.FirstTarget();
 8004ca8:	68e0      	ldr	r0, [r4, #12]
 8004caa:	f7fd fc75 	bl	8002598 <KernelList`1::FirstTarget#17986>

                if(wr != null)
 8004cae:	2800      	cmp	r0, #0
 8004cb0:	f04f 0500 	mov.w	r5, #0
 8004cb4:	bf18      	it	ne
 8004cb6:	6905      	ldrne	r5, [r0, #16]
 8004cb8:	6126      	str	r6, [r4, #16]
                        wr.RequestFulfilled = true;
                    }
                }

                m_ownerThread = ownerThread;
            }
 8004cba:	9801      	ldr	r0, [sp, #4]
 8004cbc:	f00e ff24 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
            if(ownerThread != null)
            {
                ownerThread.AcquiredWaitableObject( this );
            }

            if(wakeupThread != null)
 8004cc0:	2d00      	cmp	r5, #0
            {
                wakeupThread.Wakeup();
 8004cc2:	bf1c      	itt	ne
 8004cc4:	4628      	movne	r0, r5
 8004cc6:	f7fd fca9 	blne	800261c <Thread::Wakeup#4195>
 8004cca:	b002      	add	sp, #8
 8004ccc:	bd70      	pop	{r4, r5, r6, pc}
 8004cce:	480a      	ldr	r0, [pc, #40]	; (8004cf8 <CriticalSection::Release#5271+0x94>)
            if(m_ownerThread != thisThread)
            {
#if EXCEPTION_STRINGS
                throw new Exception( "Releasing waitable object not owned by thread" );
#else
                throw new Exception();
 8004cd0:	490a      	ldr	r1, [pc, #40]	; (8004cfc <CriticalSection::Release#5271+0x98>)
 8004cd2:	4478      	add	r0, pc
 8004cd4:	180c      	adds	r4, r1, r0
 8004cd6:	490a      	ldr	r1, [pc, #40]	; (8004d00 <CriticalSection::Release#5271+0x9c>)
 8004cd8:	4401      	add	r1, r0
 8004cda:	4620      	mov	r0, r4
 8004cdc:	f7fb fe20 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8004ce0:	4605      	mov	r5, r0
 8004ce2:	f7ff fef3 	bl	8004acc <Exception::.ctor#7329>
 8004ce6:	4620      	mov	r0, r4
 8004ce8:	4629      	mov	r1, r5
 8004cea:	f7fb fe2f 	bl	800094c <TypeSystemManager::Throw#5247>
 8004cee:	46c0      	nop			; (mov r8, r8)
 8004cf0:	17ffcb3e 	.word	0x17ffcb3e
 8004cf4:	fffffe3c 	.word	0xfffffe3c
 8004cf8:	17ffcade 	.word	0x17ffcade
 8004cfc:	ffffea64 	.word	0xffffea64
 8004d00:	e80094fc 	.word	0xe80094fc

08004d04 <KernelNode`1::.ctor#18284>:
 8004d04:	6101      	str	r1, [r0, #16]
 8004d06:	4770      	bx	lr

08004d08 <WaitableObject::Acquire#5278>:
        public abstract void Release();

        //--//

        public bool Acquire()
        {
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	4905      	ldr	r1, [pc, #20]	; (8004d20 <WaitableObject::Acquire#5278+0x18>)
            return Acquire( SchedulerTime.MaxValue );
 8004d0c:	4a05      	ldr	r2, [pc, #20]	; (8004d24 <WaitableObject::Acquire#5278+0x1c>)
 8004d0e:	4479      	add	r1, pc
 8004d10:	4411      	add	r1, r2
 8004d12:	e9d1 231f 	ldrd	r2, r3, [r1, #124]	; 0x7c
 8004d16:	6841      	ldr	r1, [r0, #4]
 8004d18:	69c9      	ldr	r1, [r1, #28]
 8004d1a:	6989      	ldr	r1, [r1, #24]
 8004d1c:	4788      	blx	r1
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	17ffcaa2 	.word	0x17ffcaa2
 8004d24:	fffffe3c 	.word	0xfffffe3c

08004d28 <WaitableObject::Dispose#5279>:
        }

        public void Dispose()
        {
 8004d28:	b5b0      	push	{r4, r5, r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	4604      	mov	r4, r0
 8004d2e:	2500      	movs	r5, #0
 8004d30:	2001      	movs	r0, #1
 8004d32:	9501      	str	r5, [sp, #4]
 8004d34:	f00e fee8 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
 8004d38:	9500      	str	r5, [sp, #0]
 8004d3a:	e9cd 0000 	strd	r0, r0, [sp]
 8004d3e:	e002      	b.n	8004d46 <WaitableObject::Dispose#5279+0x1e>
 8004d40:	2100      	movs	r1, #0
            {
                WaitingRecord wr;

                while((wr = m_listWaiting.FirstTarget()) != null)
                {
                    wr.RequestFulfilled = false;
 8004d42:	f7fd fc79 	bl	8002638 <WaitingRecord::set_RequestFulfilled#5304>
        {
            using(SmartHandles.InterruptState.Disable())
            {
                WaitingRecord wr;

                while((wr = m_listWaiting.FirstTarget()) != null)
 8004d46:	68e0      	ldr	r0, [r4, #12]
                {
                    wr.RequestFulfilled = false;
 8004d48:	f7fd fc26 	bl	8002598 <KernelList`1::FirstTarget#17986>
        {
            using(SmartHandles.InterruptState.Disable())
            {
                WaitingRecord wr;

                while((wr = m_listWaiting.FirstTarget()) != null)
 8004d4c:	2800      	cmp	r0, #0
 8004d4e:	d1f7      	bne.n	8004d40 <WaitableObject::Dispose#5279+0x18>
                {
                    wr.RequestFulfilled = false;
                }
            }
 8004d50:	9801      	ldr	r0, [sp, #4]
 8004d52:	f00e fed9 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
 8004d56:	b002      	add	sp, #8
 8004d58:	bdb0      	pop	{r4, r5, r7, pc}

08004d5a <WaitableObject::RegisterWait#5280>:
        }

        //--//

        public void RegisterWait( KernelNode< WaitingRecord > node )
        {
 8004d5a:	b580      	push	{r7, lr}
            m_listWaiting.InsertAtTail( node );
 8004d5c:	68c0      	ldr	r0, [r0, #12]
 8004d5e:	f7fd fbc5 	bl	80024ec <KernelList`1::InsertAtTail#17984>
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <WaitableObject::UnregisterWait#5281>:
        }

        public void UnregisterWait( KernelNode< WaitingRecord > node )
        {
            node.RemoveFromList();
 8004d64:	b580      	push	{r7, lr}
 8004d66:	f7fd fbf3 	bl	8002550 <KernelNode`1::RemoveFromList#17998>
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <WaitingRecord::.ctor#5293>:

                wr.Recycle();
            }
        }

        private WaitingRecord()
 8004d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d6e:	b081      	sub	sp, #4
 8004d70:	4604      	mov	r4, r0
 8004d72:	480d      	ldr	r0, [pc, #52]	; (8004da8 <WaitingRecord::.ctor#5293+0x3c>)
        {
            m_linkTowardSource = new KernelNode< WaitingRecord >( this );
 8004d74:	490d      	ldr	r1, [pc, #52]	; (8004dac <WaitingRecord::.ctor#5293+0x40>)
 8004d76:	4478      	add	r0, pc
 8004d78:	180d      	adds	r5, r1, r0
 8004d7a:	490d      	ldr	r1, [pc, #52]	; (8004db0 <WaitingRecord::.ctor#5293+0x44>)
 8004d7c:	180e      	adds	r6, r1, r0
 8004d7e:	4628      	mov	r0, r5
 8004d80:	4631      	mov	r1, r6
 8004d82:	f7fb fdcd 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8004d86:	4621      	mov	r1, r4
 8004d88:	4607      	mov	r7, r0
 8004d8a:	f000 f83d 	bl	8004e08 <KernelNode`1::.ctor#17996>
            m_linkTowardTarget = new KernelNode< WaitingRecord >( this );
 8004d8e:	4628      	mov	r0, r5
 8004d90:	4631      	mov	r1, r6
 8004d92:	60a7      	str	r7, [r4, #8]
 8004d94:	f7fb fdc4 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8004d98:	4621      	mov	r1, r4
 8004d9a:	4605      	mov	r5, r0
 8004d9c:	f000 f834 	bl	8004e08 <KernelNode`1::.ctor#17996>
 8004da0:	60e5      	str	r5, [r4, #12]
 8004da2:	b001      	add	sp, #4
 8004da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004da6:	46c0      	nop			; (mov r8, r8)
 8004da8:	17ffca3a 	.word	0x17ffca3a
 8004dac:	ffffea64 	.word	0xffffea64
 8004db0:	e80096ac 	.word	0xe80096ac

08004db4 <WaitingRecord::Recycle#5297>:
        {
            ThreadManager.Instance.SwitchToWait( this );
        }

        void Recycle()
        {
 8004db4:	b510      	push	{r4, lr}
 8004db6:	4604      	mov	r4, r0
            BugCheck.AssertInterruptsOff();
 8004db8:	f7fd fb6e 	bl	8002498 <BugCheck::AssertInterruptsOff#4945>

            Disconnect();
 8004dbc:	4620      	mov	r0, r4
 8004dbe:	f000 f89f 	bl	8004f00 <WaitingRecord::Disconnect#5298>
 8004dc2:	490e      	ldr	r1, [pc, #56]	; (8004dfc <WaitingRecord::Recycle#5297+0x48>)

            if(s_recycledCount < RecycleLimit)
 8004dc4:	480e      	ldr	r0, [pc, #56]	; (8004e00 <WaitingRecord::Recycle#5297+0x4c>)
 8004dc6:	4479      	add	r1, pc
 8004dc8:	4401      	add	r1, r0
 8004dca:	f8d1 108c 	ldr.w	r1, [r1, #140]	; 0x8c
 8004dce:	291f      	cmp	r1, #31
 8004dd0:	bfc8      	it	gt
 8004dd2:	bd10      	popgt	{r4, pc}
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	f884 1020 	strb.w	r1, [r4, #32]
 8004dda:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
 8004dde:	4909      	ldr	r1, [pc, #36]	; (8004e04 <WaitingRecord::Recycle#5297+0x50>)
 8004de0:	4479      	add	r1, pc
            {
                m_processed = false;
                m_fulfilled = false;

                s_recycledCount++;
 8004de2:	4408      	add	r0, r1
 8004de4:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 8004de8:	3101      	adds	r1, #1
 8004dea:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
                s_recycledList.InsertAtTail( m_linkTowardTarget );
 8004dee:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
 8004df2:	68e1      	ldr	r1, [r4, #12]
 8004df4:	f7fd fb7a 	bl	80024ec <KernelList`1::InsertAtTail#17984>
 8004df8:	bd10      	pop	{r4, pc}
 8004dfa:	46c0      	nop			; (mov r8, r8)
 8004dfc:	17ffc9ea 	.word	0x17ffc9ea
 8004e00:	fffffe3c 	.word	0xfffffe3c
 8004e04:	17ffc9d0 	.word	0x17ffc9d0

08004e08 <KernelNode`1::.ctor#17996>:
 8004e08:	6101      	str	r1, [r0, #16]
 8004e0a:	4770      	bx	lr

08004e0c <WaitingRecord::GetInstance#5294>:
        //

        static WaitingRecord GetInstance( ThreadImpl     source  ,
                                          WaitableObject target  ,
                                          SchedulerTime  timeout )
        {
 8004e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e10:	b082      	sub	sp, #8
 8004e12:	4607      	mov	r7, r0
 8004e14:	481e      	ldr	r0, [pc, #120]	; (8004e90 <WaitingRecord::GetInstance#5294+0x84>)
            BugCheck.AssertInterruptsOn();

            WaitingRecord wr = null;
            
            if(s_recycledCount > 0)
 8004e16:	4d1f      	ldr	r5, [pc, #124]	; (8004e94 <WaitingRecord::GetInstance#5294+0x88>)
 8004e18:	2400      	movs	r4, #0
 8004e1a:	4698      	mov	r8, r3
 8004e1c:	4691      	mov	r9, r2
 8004e1e:	468a      	mov	sl, r1
 8004e20:	9401      	str	r4, [sp, #4]
 8004e22:	4478      	add	r0, pc
 8004e24:	182e      	adds	r6, r5, r0

        static WaitingRecord GetInstance( ThreadImpl     source  ,
                                          WaitableObject target  ,
                                          SchedulerTime  timeout )
        {
            BugCheck.AssertInterruptsOn();
 8004e26:	f7fd ff0e 	bl	8002c46 <BugCheck::AssertInterruptsOn#4946>

            WaitingRecord wr = null;
            
            if(s_recycledCount > 0)
 8004e2a:	f8d6 008c 	ldr.w	r0, [r6, #140]	; 0x8c
 8004e2e:	2801      	cmp	r0, #1
 8004e30:	db19      	blt.n	8004e66 <WaitingRecord::GetInstance#5294+0x5a>
 8004e32:	2001      	movs	r0, #1
 8004e34:	f00e fe68 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
 8004e38:	9400      	str	r4, [sp, #0]
 8004e3a:	e9cd 0000 	strd	r0, r0, [sp]
 8004e3e:	4816      	ldr	r0, [pc, #88]	; (8004e98 <WaitingRecord::GetInstance#5294+0x8c>)
 8004e40:	4478      	add	r0, pc
            {
                using(SmartHandles.InterruptState.Disable())
                {
                    KernelNode< WaitingRecord > node = s_recycledList.ExtractFirstNode();
 8004e42:	4428      	add	r0, r5
 8004e44:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
 8004e48:	f000 f830 	bl	8004eac <KernelList`1::ExtractFirstNode#17989>
 8004e4c:	b140      	cbz	r0, 8004e60 <WaitingRecord::GetInstance#5294+0x54>
 8004e4e:	4913      	ldr	r1, [pc, #76]	; (8004e9c <WaitingRecord::GetInstance#5294+0x90>)
 8004e50:	6904      	ldr	r4, [r0, #16]
 8004e52:	4479      	add	r1, pc
                    if(node != null)
                    {
                        wr = node.Target;

                        s_recycledCount--;
 8004e54:	4429      	add	r1, r5
 8004e56:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8004e5a:	3a01      	subs	r2, #1
 8004e5c:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
                    }
                }
 8004e60:	9801      	ldr	r0, [sp, #4]
 8004e62:	f00e fe51 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
 8004e66:	b954      	cbnz	r4, 8004e7e <WaitingRecord::GetInstance#5294+0x72>
 8004e68:	490d      	ldr	r1, [pc, #52]	; (8004ea0 <WaitingRecord::GetInstance#5294+0x94>)
            }

            if(wr == null)
            {
                wr = new WaitingRecord();
 8004e6a:	480e      	ldr	r0, [pc, #56]	; (8004ea4 <WaitingRecord::GetInstance#5294+0x98>)
 8004e6c:	4a0e      	ldr	r2, [pc, #56]	; (8004ea8 <WaitingRecord::GetInstance#5294+0x9c>)
 8004e6e:	4479      	add	r1, pc
 8004e70:	4408      	add	r0, r1
 8004e72:	4411      	add	r1, r2
 8004e74:	f7fb fd54 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8004e78:	4604      	mov	r4, r0
 8004e7a:	f7ff ff77 	bl	8004d6c <WaitingRecord::.ctor#5293>
 8004e7e:	e9c4 7a04 	strd	r7, sl, [r4, #16]
 8004e82:	e9c4 9806 	strd	r9, r8, [r4, #24]
 8004e86:	4620      	mov	r0, r4
 8004e88:	b002      	add	sp, #8
 8004e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e8e:	46c0      	nop			; (mov r8, r8)
 8004e90:	17ffc98e 	.word	0x17ffc98e
 8004e94:	fffffe3c 	.word	0xfffffe3c
 8004e98:	17ffc970 	.word	0x17ffc970
 8004e9c:	17ffc95e 	.word	0x17ffc95e
 8004ea0:	17ffc942 	.word	0x17ffc942
 8004ea4:	ffffea64 	.word	0xffffea64
 8004ea8:	e800961c 	.word	0xe800961c

08004eac <KernelList`1::ExtractFirstNode#17989>:
        }

        //--//

        public KernelNode< T > ExtractFirstNode()
        {
 8004eac:	b510      	push	{r4, lr}
            KernelNode< T > node = m_head.Next;
 8004eae:	e9d0 1002 	ldrd	r1, r0, [r0, #8]
 8004eb2:	688c      	ldr	r4, [r1, #8]

            if(node != m_tail)
 8004eb4:	4284      	cmp	r4, r0
 8004eb6:	bf02      	ittt	eq
 8004eb8:	2400      	moveq	r4, #0
 8004eba:	4620      	moveq	r0, r4
 8004ebc:	bd10      	popeq	{r4, pc}
            {
                node.RemoveFromList();
 8004ebe:	4620      	mov	r0, r4
 8004ec0:	f7fd fb46 	bl	8002550 <KernelNode`1::RemoveFromList#17998>
 8004ec4:	4620      	mov	r0, r4
 8004ec6:	bd10      	pop	{r4, pc}

08004ec8 <WaitingRecord::Connect#5295>:

            return wr;
        }

        void Connect()
        {
 8004ec8:	b510      	push	{r4, lr}
 8004eca:	4604      	mov	r4, r0
            BugCheck.AssertInterruptsOff();
 8004ecc:	f7fd fae4 	bl	8002498 <BugCheck::AssertInterruptsOff#4945>

            m_target.RegisterWait( m_linkTowardTarget );
 8004ed0:	68e1      	ldr	r1, [r4, #12]
 8004ed2:	6960      	ldr	r0, [r4, #20]
 8004ed4:	f7ff ff41 	bl	8004d5a <WaitableObject::RegisterWait#5280>
            m_source.RegisterWait( m_linkTowardSource );
 8004ed8:	68a1      	ldr	r1, [r4, #8]
 8004eda:	6920      	ldr	r0, [r4, #16]
 8004edc:	f7fd fa7e 	bl	80023dc <Thread::RegisterWait#4190>
 8004ee0:	bd10      	pop	{r4, pc}
 8004ee2:	46c0      	nop			; (mov r8, r8)

08004ee4 <WaitingRecord::Wait#5296>:
        }

        void Wait()
        {
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	4601      	mov	r1, r0
 8004ee8:	4803      	ldr	r0, [pc, #12]	; (8004ef8 <WaitingRecord::Wait#5296+0x14>)
            ThreadManager.Instance.SwitchToWait( this );
 8004eea:	4a04      	ldr	r2, [pc, #16]	; (8004efc <WaitingRecord::Wait#5296+0x18>)
 8004eec:	4478      	add	r0, pc
 8004eee:	4410      	add	r0, r2
 8004ef0:	f7fd feb6 	bl	8002c60 <ThreadManager::SwitchToWait#3333>
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	46c0      	nop			; (mov r8, r8)
 8004ef8:	17ffc8c4 	.word	0x17ffc8c4
 8004efc:	ffffea1c 	.word	0xffffea1c

08004f00 <WaitingRecord::Disconnect#5298>:
                s_recycledList.InsertAtTail( m_linkTowardTarget );
            }
        }

        void Disconnect()
        {
 8004f00:	b510      	push	{r4, lr}
 8004f02:	4604      	mov	r4, r0
            BugCheck.AssertInterruptsOff();
 8004f04:	f7fd fac8 	bl	8002498 <BugCheck::AssertInterruptsOff#4945>

            if(m_linkTowardSource.IsLinked)
 8004f08:	68a0      	ldr	r0, [r4, #8]
 8004f0a:	f000 f813 	bl	8004f34 <KernelNode`1::get_IsLinked#18004>
 8004f0e:	f010 0fff 	tst.w	r0, #255	; 0xff
            {
                m_source.UnregisterWait( m_linkTowardSource );
 8004f12:	bf1c      	itt	ne
 8004f14:	68a0      	ldrne	r0, [r4, #8]
 8004f16:	f7fd faf1 	blne	80024fc <Thread::UnregisterWait#4192>
            }

            if(m_linkTowardTarget.IsLinked)
 8004f1a:	68e0      	ldr	r0, [r4, #12]
 8004f1c:	f000 f80a 	bl	8004f34 <KernelNode`1::get_IsLinked#18004>
 8004f20:	f010 0fff 	tst.w	r0, #255	; 0xff
            {
                m_target.UnregisterWait( m_linkTowardTarget );
 8004f24:	bf1c      	itt	ne
 8004f26:	68e0      	ldrne	r0, [r4, #12]
 8004f28:	f7ff ff1c 	blne	8004d64 <WaitableObject::UnregisterWait#5281>
 8004f2c:	2000      	movs	r0, #0
 8004f2e:	e9c4 0004 	strd	r0, r0, [r4, #16]
 8004f32:	bd10      	pop	{r4, pc}

08004f34 <KernelNode`1::get_IsLinked#18004>:

        public bool IsLinked
        {
            get
            {
                return m_next != null;
 8004f34:	6880      	ldr	r0, [r0, #8]
 8004f36:	2800      	cmp	r0, #0
 8004f38:	bf18      	it	ne
 8004f3a:	2001      	movne	r0, #1
 8004f3c:	4770      	bx	lr

08004f3e <InterruptState::GetMode#5594>:

        //--//

        private ProcessorARMv7M.ISR_NUMBER GetMode( )
        {
            return (ProcessorARMv7M.ISR_NUMBER)(ProcessorARMv7M.CMSIS_STUB_SCB__get_IPSR( ) & 0x1FF);
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	f00e fdc2 	bl	8013ac8 <CMSIS_STUB_SCB__get_IPSR>
 8004f44:	f36f 205f 	bfc	r0, #9, #23
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	46c0      	nop			; (mov r8, r8)

08004f4c <SwapCurrentThreadUnderInterrupt::Dispose#5349>:
        //
        // Helper Methods
        //

        public void Dispose()
        {
 8004f4c:	b570      	push	{r4, r5, r6, lr}
 8004f4e:	4604      	mov	r4, r0
 8004f50:	480c      	ldr	r0, [pc, #48]	; (8004f84 <SwapCurrentThreadUnderInterrupt::Dispose#5349+0x38>)

            ThreadImpl newThread = ThreadImpl.CurrentThread;

            if(newThread != null)
            {
                newThread.ReleasedProcessor();
 8004f52:	4d0d      	ldr	r5, [pc, #52]	; (8004f88 <SwapCurrentThreadUnderInterrupt::Dispose#5349+0x3c>)
 8004f54:	4478      	add	r0, pc
 8004f56:	182e      	adds	r6, r5, r0
        // Helper Methods
        //

        public void Dispose()
        {
            BugCheck.AssertInterruptsOff();
 8004f58:	f7fd fa9e 	bl	8002498 <BugCheck::AssertInterruptsOff#4945>

            ThreadImpl newThread = ThreadImpl.CurrentThread;

            if(newThread != null)
            {
                newThread.ReleasedProcessor();
 8004f5c:	f8d6 00bc 	ldr.w	r0, [r6, #188]	; 0xbc
        {
            BugCheck.AssertInterruptsOff();

            ThreadImpl newThread = ThreadImpl.CurrentThread;

            if(newThread != null)
 8004f60:	2800      	cmp	r0, #0
            {
                newThread.ReleasedProcessor();
 8004f62:	bf18      	it	ne
 8004f64:	f7fd f9be 	blne	80022e4 <Thread::ReleasedProcessor#4187>
            }

            if(m_previousThread != null)
 8004f68:	6820      	ldr	r0, [r4, #0]
 8004f6a:	2800      	cmp	r0, #0
            {
                m_previousThread.AcquiredProcessor();
 8004f6c:	bf1c      	itt	ne
 8004f6e:	6820      	ldrne	r0, [r4, #0]
 8004f70:	f7fd f9f0 	blne	8002354 <Thread::AcquiredProcessor#4188>
 8004f74:	4805      	ldr	r0, [pc, #20]	; (8004f8c <SwapCurrentThreadUnderInterrupt::Dispose#5349+0x40>)
            }

            ThreadImpl.CurrentThread = m_previousThread;
 8004f76:	6821      	ldr	r1, [r4, #0]
 8004f78:	4478      	add	r0, pc
 8004f7a:	4428      	add	r0, r5
 8004f7c:	f8c0 10bc 	str.w	r1, [r0, #188]	; 0xbc
 8004f80:	bd70      	pop	{r4, r5, r6, pc}
 8004f82:	46c0      	nop			; (mov r8, r8)
 8004f84:	17ffc85c 	.word	0x17ffc85c
 8004f88:	fffffe3c 	.word	0xfffffe3c
 8004f8c:	17ffc838 	.word	0x17ffc838

08004f90 <ProcessorARMv7M_VFP::InitializeProcessor#5564>:
        //
        // Helper Methods
        //

        public override void InitializeProcessor( )
        {
 8004f90:	b580      	push	{r7, lr}
            base.InitializeProcessor( );
 8004f92:	f7fe f885 	bl	80030a0 <ProcessorARMv7M::InitializeProcessor#3405>

            DisableLazyStacking( );
 8004f96:	f000 f801 	bl	8004f9c <ProcessorARMv7M_VFP::DisableLazyStacking#5569>
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <ProcessorARMv7M_VFP::DisableLazyStacking#5569>:
            CUSTOM_STUB_SCB__set_FPCCR( value ); 
        }

        protected void DisableLazyStacking()
        {
            uint value = CUSTOM_STUB_SCB__get_FPCCR( );
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	f00e fdd5 	bl	8013b4c <CUSTOM_STUB_SCB__get_FPCCR>

            value &= ~c_FPCCR__LSPEN_ENABLED;
 8004fa2:	f020 4080 	bic.w	r0, r0, #1073741824	; 0x40000000

            CUSTOM_STUB_SCB__set_FPCCR( value ); 
 8004fa6:	f00e fdd7 	bl	8013b58 <CUSTOM_STUB_SCB__set_FPCCR>
 8004faa:	bd80      	pop	{r7, pc}

08004fac <EventWaitableObject::.ctor#5650>:

            //
            // Constructor Methods
            //

            internal EventWaitableObject( EventWaitHandleImpl owner )
 8004fac:	b5b0      	push	{r4, r5, r7, lr}
 8004fae:	460c      	mov	r4, r1
 8004fb0:	4605      	mov	r5, r0
 8004fb2:	f7ff fd93 	bl	8004adc <WaitableObject::.ctor#5275>
 8004fb6:	612c      	str	r4, [r5, #16]
 8004fb8:	bdb0      	pop	{r4, r5, r7, pc}
 8004fba:	46c0      	nop			; (mov r8, r8)

08004fbc <EventWaitableObject::Acquire#5651>:
            //
            // Helper Methods
            //

            public override bool Acquire( SchedulerTime timeout )
            {
 8004fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	4604      	mov	r4, r0
 8004fc2:	2000      	movs	r0, #0
 8004fc4:	4936      	ldr	r1, [pc, #216]	; (80050a0 <EventWaitableObject::Acquire#5651+0xe4>)
 8004fc6:	461d      	mov	r5, r3
 8004fc8:	4616      	mov	r6, r2
 8004fca:	e9cd 0003 	strd	r0, r0, [sp, #12]
 8004fce:	4833      	ldr	r0, [pc, #204]	; (800509c <EventWaitableObject::Acquire#5651+0xe0>)
 8004fd0:	4478      	add	r0, pc
 8004fd2:	4408      	add	r0, r1
 8004fd4:	f8d0 70bc 	ldr.w	r7, [r0, #188]	; 0xbc
 8004fd8:	2f00      	cmp	r7, #0
 8004fda:	4638      	mov	r0, r7
 8004fdc:	bf18      	it	ne
 8004fde:	2001      	movne	r0, #1
                ThreadImpl thisThread = ThreadImpl.CurrentThread;

                BugCheck.Assert( thisThread != null, BugCheck.StopCode.NoCurrentThread );
 8004fe0:	2800      	cmp	r0, #0
 8004fe2:	d057      	beq.n	8005094 <EventWaitableObject::Acquire#5651+0xd8>

                //
                // Let's try to shortcut the acquisition of the event.
                //
                if(m_owner.m_state)
 8004fe4:	6920      	ldr	r0, [r4, #16]
 8004fe6:	7b00      	ldrb	r0, [r0, #12]
 8004fe8:	b1c0      	cbz	r0, 800501c <EventWaitableObject::Acquire#5651+0x60>
 8004fea:	2001      	movs	r0, #1
 8004fec:	f00e fd8c 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
 8004ff0:	2100      	movs	r1, #0
 8004ff2:	9004      	str	r0, [sp, #16]
 8004ff4:	9101      	str	r1, [sp, #4]
 8004ff6:	9001      	str	r0, [sp, #4]
                {
                    using(SmartHandles.InterruptState.Disable())
                    {
                        if(m_owner.m_state)
 8004ff8:	6920      	ldr	r0, [r4, #16]
 8004ffa:	7b00      	ldrb	r0, [r0, #12]
 8004ffc:	b158      	cbz	r0, 8005016 <EventWaitableObject::Acquire#5651+0x5a>
                        {
                            if(m_owner.m_mode == System.Threading.EventResetMode.AutoReset)
 8004ffe:	6920      	ldr	r0, [r4, #16]
 8005000:	6900      	ldr	r0, [r0, #16]
 8005002:	2800      	cmp	r0, #0
                            {
                                m_owner.m_state = false;
 8005004:	bf02      	ittt	eq
 8005006:	6920      	ldreq	r0, [r4, #16]
 8005008:	2100      	moveq	r1, #0
 800500a:	7301      	strbeq	r1, [r0, #12]
                            }

                            return true;
                        }
                    }
 800500c:	9804      	ldr	r0, [sp, #16]
 800500e:	f00e fd7b 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
 8005012:	2401      	movs	r4, #1
 8005014:	e03b      	b.n	800508e <EventWaitableObject::Acquire#5651+0xd2>
 8005016:	9804      	ldr	r0, [sp, #16]
 8005018:	f00e fd76 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
                }

                using(Synchronization.WaitingRecord.Holder holder = Synchronization.WaitingRecord.Holder.Get( thisThread, this, timeout ))
 800501c:	4638      	mov	r0, r7
 800501e:	4621      	mov	r1, r4
 8005020:	4632      	mov	r2, r6
 8005022:	462b      	mov	r3, r5
 8005024:	f7ff fdde 	bl	8004be4 <Holder::Get#5906>
 8005028:	4605      	mov	r5, r0
 800502a:	2600      	movs	r6, #0
 800502c:	2001      	movs	r0, #1
 800502e:	9602      	str	r6, [sp, #8]
 8005030:	f00e fd6a 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
 8005034:	9602      	str	r6, [sp, #8]
 8005036:	e9cd 0002 	strd	r0, r0, [sp, #8]
                {
                    while(true)
                    {
                        using(SmartHandles.InterruptState.Disable())
                        {
                            if(holder.ShouldTryToAcquire)
 800503a:	4628      	mov	r0, r5
 800503c:	f7ff fddd 	bl	8004bfa <Holder::get_ShouldTryToAcquire#5907>
 8005040:	f010 0fff 	tst.w	r0, #255	; 0xff
 8005044:	d002      	beq.n	800504c <EventWaitableObject::Acquire#5651+0x90>
                            {
                                if(m_owner.m_state)
 8005046:	6920      	ldr	r0, [r4, #16]
 8005048:	7b00      	ldrb	r0, [r0, #12]
 800504a:	b990      	cbnz	r0, 8005072 <EventWaitableObject::Acquire#5651+0xb6>
                                    }

                                    return true;
                                }
                            }
                        }
 800504c:	9803      	ldr	r0, [sp, #12]
 800504e:	f00e fd5b 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>

                        if(holder.RequestProcessed)
 8005052:	4628      	mov	r0, r5
 8005054:	f7ff fdde 	bl	8004c14 <Holder::get_RequestProcessed#5908>
 8005058:	f010 0fff 	tst.w	r0, #255	; 0xff
 800505c:	d0e6      	beq.n	800502c <EventWaitableObject::Acquire#5651+0x70>
                        {
                            return holder.RequestFulfilled;
 800505e:	4628      	mov	r0, r5
 8005060:	f7ff fdfb 	bl	8004c5a <Holder::get_RequestFulfilled#5909>
                    }
                }

                using(Synchronization.WaitingRecord.Holder holder = Synchronization.WaitingRecord.Holder.Get( thisThread, this, timeout ))
                {
                    while(true)
 8005064:	2d00      	cmp	r5, #0
                            }
                        }

                        if(holder.RequestProcessed)
                        {
                            return holder.RequestFulfilled;
 8005066:	4604      	mov	r4, r0
                    }
                }

                using(Synchronization.WaitingRecord.Holder holder = Synchronization.WaitingRecord.Holder.Get( thisThread, this, timeout ))
                {
                    while(true)
 8005068:	bf1c      	itt	ne
 800506a:	4628      	movne	r0, r5
 800506c:	f7fd f816 	blne	800209c <Holder::Dispose#5905>
 8005070:	e00d      	b.n	800508e <EventWaitableObject::Acquire#5651+0xd2>
                        {
                            if(holder.ShouldTryToAcquire)
                            {
                                if(m_owner.m_state)
                                {
                                    if(m_owner.m_mode == System.Threading.EventResetMode.AutoReset)
 8005072:	6920      	ldr	r0, [r4, #16]
 8005074:	6900      	ldr	r0, [r0, #16]
 8005076:	2800      	cmp	r0, #0
                                    {
                                        m_owner.m_state = false;
 8005078:	bf02      	ittt	eq
 800507a:	6920      	ldreq	r0, [r4, #16]
 800507c:	2100      	moveq	r1, #0
 800507e:	7301      	strbeq	r1, [r0, #12]
 8005080:	b125      	cbz	r5, 800508c <EventWaitableObject::Acquire#5651+0xd0>
                    }
                }

                using(Synchronization.WaitingRecord.Holder holder = Synchronization.WaitingRecord.Holder.Get( thisThread, this, timeout ))
                {
                    while(true)
 8005082:	4628      	mov	r0, r5
 8005084:	f7fd f80a 	bl	800209c <Holder::Dispose#5905>
 8005088:	2401      	movs	r4, #1
 800508a:	e000      	b.n	800508e <EventWaitableObject::Acquire#5651+0xd2>
 800508c:	2401      	movs	r4, #1
 800508e:	4620      	mov	r0, r4
 8005090:	b005      	add	sp, #20
 8005092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005094:	2004      	movs	r0, #4
 8005096:	f7fb f923 	bl	80002e0 <BugCheck::Raise#4938>
 800509a:	46c0      	nop			; (mov r8, r8)
 800509c:	17ffc7e0 	.word	0x17ffc7e0
 80050a0:	fffffe3c 	.word	0xfffffe3c

080050a4 <EventWaitableObject::Release#5652>:
                    }
                }
            }

            public override void Release()
            {
 80050a4:	b570      	push	{r4, r5, r6, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	2600      	movs	r6, #0
 80050aa:	4604      	mov	r4, r0
 80050ac:	9601      	str	r6, [sp, #4]
 80050ae:	e00f      	b.n	80050d0 <EventWaitableObject::Release#5652+0x2c>
 80050b0:	6905      	ldr	r5, [r0, #16]
 80050b2:	2101      	movs	r1, #1
                            return;
                        }

                        wakeUpThread = wr.Source;

                        wr.RequestFulfilled = true;
 80050b4:	f7fd fac0 	bl	8002638 <WaitingRecord::set_RequestFulfilled#5304>

                        if(m_owner.m_mode == System.Threading.EventResetMode.AutoReset)
 80050b8:	6920      	ldr	r0, [r4, #16]
 80050ba:	6900      	ldr	r0, [r0, #16]
 80050bc:	2800      	cmp	r0, #0
                        {
                            m_owner.m_state = false;
 80050be:	bf04      	itt	eq
 80050c0:	6920      	ldreq	r0, [r4, #16]
 80050c2:	7306      	strbeq	r6, [r0, #12]
                        }
                    }
 80050c4:	9801      	ldr	r0, [sp, #4]
 80050c6:	f00e fd1f 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>

                    wakeUpThread.Wakeup();
 80050ca:	4628      	mov	r0, r5
 80050cc:	f7fd faa6 	bl	800261c <Thread::Wakeup#4195>
 80050d0:	2001      	movs	r0, #1
 80050d2:	9600      	str	r6, [sp, #0]
 80050d4:	f00e fd18 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
 80050d8:	9600      	str	r6, [sp, #0]
 80050da:	e9cd 0000 	strd	r0, r0, [sp]
                {
                    ThreadImpl wakeUpThread;

                    using(SmartHandles.InterruptState.Disable())
                    {
                        if(m_owner.m_state == false)
 80050de:	6920      	ldr	r0, [r4, #16]
 80050e0:	7b00      	ldrb	r0, [r0, #12]
 80050e2:	b120      	cbz	r0, 80050ee <EventWaitableObject::Release#5652+0x4a>
                        {
                            return;
                        }

                        Synchronization.WaitingRecord wr = m_listWaiting.FirstTarget();
 80050e4:	68e0      	ldr	r0, [r4, #12]
 80050e6:	f7fd fa57 	bl	8002598 <KernelList`1::FirstTarget#17986>
                        if(wr == null)
 80050ea:	2800      	cmp	r0, #0
 80050ec:	d1e0      	bne.n	80050b0 <EventWaitableObject::Release#5652+0xc>

                        if(m_owner.m_mode == System.Threading.EventResetMode.AutoReset)
                        {
                            m_owner.m_state = false;
                        }
                    }
 80050ee:	9801      	ldr	r0, [sp, #4]
 80050f0:	f00e fd0a 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
 80050f4:	b002      	add	sp, #8
 80050f6:	bd70      	pop	{r4, r5, r6, pc}

080050f8 <Tracker::.ctor#5727>:

            //
            // Constructor Methods
            //

            internal Tracker( object obj )
 80050f8:	b570      	push	{r4, r5, r6, lr}
 80050fa:	460c      	mov	r4, r1
 80050fc:	4907      	ldr	r1, [pc, #28]	; (800511c <Tracker::.ctor#5727+0x24>)
 80050fe:	4605      	mov	r5, r0
            {
                m_node   = new KernelNode< Tracker >( this );
 8005100:	4807      	ldr	r0, [pc, #28]	; (8005120 <Tracker::.ctor#5727+0x28>)
 8005102:	4a08      	ldr	r2, [pc, #32]	; (8005124 <Tracker::.ctor#5727+0x2c>)
 8005104:	4479      	add	r1, pc
 8005106:	4408      	add	r0, r1
 8005108:	4411      	add	r1, r2
 800510a:	f7fb fc09 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 800510e:	4629      	mov	r1, r5
 8005110:	4606      	mov	r6, r0
 8005112:	f000 f809 	bl	8005128 <KernelNode`1::.ctor#18390>
 8005116:	e9c5 6402 	strd	r6, r4, [r5, #8]
 800511a:	bd70      	pop	{r4, r5, r6, pc}
 800511c:	17ffc6ac 	.word	0x17ffc6ac
 8005120:	ffffea64 	.word	0xffffea64
 8005124:	e800973c 	.word	0xe800973c

08005128 <KernelNode`1::.ctor#18390>:
 8005128:	6101      	str	r1, [r0, #16]
 800512a:	4770      	bx	lr

0800512c <KernelList`1::InsertAtTail#18115>:
        //
        // Helper Methods
        //

        public void InsertAtTail( KernelNode< T > node )
        {
 800512c:	b580      	push	{r7, lr}
            node.InsertBefore( m_tail );
 800512e:	68c2      	ldr	r2, [r0, #12]
 8005130:	4608      	mov	r0, r1
 8005132:	4611      	mov	r1, r2
 8005134:	f003 fc4e 	bl	80089d4 <KernelNode`1::InsertBefore#18391>
 8005138:	bd80      	pop	{r7, pc}

0800513a <KernelList`1::get_StartOfForwardWalk#18121>:

        public KernelNode< T > StartOfForwardWalk
        {
            get
            {
                return m_head.Next;
 800513a:	6880      	ldr	r0, [r0, #8]
 800513c:	6880      	ldr	r0, [r0, #8]
 800513e:	4770      	bx	lr

08005140 <KernelNode`1::get_IsValidForForwardMove#18399>:

        public bool IsValidForForwardMove
        {
            get
            {
                return m_next != null;
 8005140:	6880      	ldr	r0, [r0, #8]
 8005142:	2800      	cmp	r0, #0
 8005144:	bf18      	it	ne
 8005146:	2001      	movne	r0, #1
 8005148:	4770      	bx	lr

0800514a <EmptyManager::InitializeGarbageCollectionManager#5864>:
 800514a:	4770      	bx	lr

0800514c <EmptyManager::NotifyNewObject#5865>:
 800514c:	4770      	bx	lr

0800514e <EmptyManager::Collect#5867>:
 800514e:	2000      	movs	r0, #0
 8005150:	4770      	bx	lr

08005152 <EmptyManager::ThrowOutOfMemory#5869>:
 8005152:	4770      	bx	lr

08005154 <Context::SwitchTo#5935>:
            public override unsafe void SwitchTo( )
            {
                //
                // The long jump selects the current thread's context and sets its EXC_RETURN value
                //
                ProcessorARMv7M.RaiseSupervisorCall( SVC_Code.SupervisorCall__LongJump );
 8005154:	b580      	push	{r7, lr}
 8005156:	2011      	movs	r0, #17
 8005158:	f7fd fffc 	bl	8003154 <ProcessorARMv7M::RaiseSupervisorCall#3408>
 800515c:	200e      	movs	r0, #14
 800515e:	f7fb f8bf 	bl	80002e0 <BugCheck::Raise#4938>

08005162 <Context::Populate#5936>:
                RT.BugCheck.Assert( false, BugCheck.StopCode.IllegalMode );
            }
            
            public override void Populate( )
            {
                BugCheck.Raise( BugCheck.StopCode.InvalidOperation );
 8005162:	b580      	push	{r7, lr}
 8005164:	2017      	movs	r0, #23
 8005166:	f7fb f8bb 	bl	80002e0 <BugCheck::Raise#4938>

0800516a <Context::PopulateFromDelegate#5938>:
            {
                BugCheck.Raise( BugCheck.StopCode.InvalidOperation );
            }

            public unsafe override void PopulateFromDelegate( Delegate dlg, uint[] stack )
            {
 800516a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800516e:	b081      	sub	sp, #4
 8005170:	2600      	movs	r6, #0
 8005172:	460c      	mov	r4, r1
 8005174:	4605      	mov	r5, r0
 8005176:	4617      	mov	r7, r2
 8005178:	9600      	str	r6, [sp, #0]
 800517a:	6860      	ldr	r0, [r4, #4]
 800517c:	69c0      	ldr	r0, [r0, #28]
 800517e:	6981      	ldr	r1, [r0, #24]
 8005180:	4620      	mov	r0, r4
 8005182:	4788      	blx	r1
 8005184:	4680      	mov	r8, r0
                //
                // Save the initial stack pointer
                // In the general case the SP will be at the top of the current frame we are building
                // When we do a LongJump though, or we start the thread first, we will have to use the base stack pointer
                //
                this.SP         = GetFirstStackPointerFromPhysicalStack( stackImpl );
 8005186:	4638      	mov	r0, r7
 8005188:	f000 f82d 	bl	80051e6 <Context::GetFirstStackPointerFromPhysicalStack#5947>
 800518c:	f06f 0902 	mvn.w	r9, #2
 8005190:	e9c5 0902 	strd	r0, r9, [r5, #8]
                this.EXC_RETURN = c_MODE_RETURN__THREAD_PSP;

                //
                // Initial offset from start of stack storage must be at least as large as a frame
                //
                RT.BugCheck.Assert((((int)stackImpl.GetEndDataPointer() - this.SP.ToUInt32()) >= RegistersOnStack.TotalFrameSize),
 8005194:	4638      	mov	r0, r7
 8005196:	f7fb fdcf 	bl	8000d38 <Array::GetEndDataPointer#3878>
 800519a:	68aa      	ldr	r2, [r5, #8]
 800519c:	17c1      	asrs	r1, r0, #31
 800519e:	1a80      	subs	r0, r0, r2
 80051a0:	f161 0100 	sbc.w	r1, r1, #0
 80051a4:	2847      	cmp	r0, #71	; 0x47
 80051a6:	f04f 0000 	mov.w	r0, #0
 80051aa:	bf88      	it	hi
 80051ac:	2001      	movhi	r0, #1
 80051ae:	2900      	cmp	r1, #0
 80051b0:	bfc8      	it	gt
 80051b2:	2601      	movgt	r6, #1
 80051b4:	bf08      	it	eq
 80051b6:	4606      	moveq	r6, r0
 80051b8:	2e00      	cmp	r6, #0
                    BugCheck.StopCode.StackCorruptionDetected
                    );

                RegistersOnStack* firstFrame = PointerToFrame(this.SP);
 80051ba:	bf1f      	itttt	ne
 80051bc:	68a8      	ldrne	r0, [r5, #8]
            //--//

            [RT.Inline]
            internal static unsafe Context.RegistersOnStack* PointerToFrame( UIntPtr SP )
            {
                return (Context.RegistersOnStack*)SP.ToPointer( );
 80051be:	68e1      	ldrne	r1, [r4, #12]
 80051c0:	9100      	strne	r1, [sp, #0]
 80051c2:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
 80051c6:	bf1f      	itttt	ne
 80051c8:	e9c0 1210 	strdne	r1, r2, [r0, #64]	; 0x40
 80051cc:	f8c0 9000 	strne.w	r9, [r0]
 80051d0:	2102      	movne	r1, #2
 80051d2:	6041      	strne	r1, [r0, #4]
 80051d4:	bf1e      	ittt	ne
 80051d6:	f8c0 8028 	strne.w	r8, [r0, #40]	; 0x28
 80051da:	b001      	addne	sp, #4
 80051dc:	e8bd 83f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80051e0:	2015      	movs	r0, #21
 80051e2:	f7fb f87d 	bl	80002e0 <BugCheck::Raise#4938>

080051e6 <Context::GetFirstStackPointerFromPhysicalStack#5947>:
                LongJump( ); 
            }
            
            private unsafe UIntPtr GetFirstStackPointerFromPhysicalStack( ArrayImpl stackImpl )
            {
                return AddressMath.AlignToLowerBoundary(
 80051e6:	b580      	push	{r7, lr}
 80051e8:	f7fb fda6 	bl	8000d38 <Array::GetEndDataPointer#3878>
 80051ec:	3848      	subs	r0, #72	; 0x48
 80051ee:	f020 0007 	bic.w	r0, r0, #7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <Context::Unwind#5940>:
            }
            
#region Tracking Collector and Exceptions  

            public override bool Unwind( )
            {
 80051f4:	b570      	push	{r4, r5, r6, lr}
 80051f6:	4e09      	ldr	r6, [pc, #36]	; (800521c <Context::Unwind#5940+0x28>)
                throw new Exception( "Unwind not implemented" );
 80051f8:	4809      	ldr	r0, [pc, #36]	; (8005220 <Context::Unwind#5940+0x2c>)
 80051fa:	447e      	add	r6, pc
 80051fc:	1984      	adds	r4, r0, r6
 80051fe:	4809      	ldr	r0, [pc, #36]	; (8005224 <Context::Unwind#5940+0x30>)
 8005200:	1981      	adds	r1, r0, r6
 8005202:	4620      	mov	r0, r4
 8005204:	f7fb fb8c 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8005208:	4605      	mov	r5, r0
 800520a:	4807      	ldr	r0, [pc, #28]	; (8005228 <Context::Unwind#5940+0x34>)
 800520c:	1981      	adds	r1, r0, r6
 800520e:	4628      	mov	r0, r5
 8005210:	f000 f80c 	bl	800522c <Exception::.ctor#7330>
 8005214:	4620      	mov	r0, r4
 8005216:	4629      	mov	r1, r5
 8005218:	f7fb fb98 	bl	800094c <TypeSystemManager::Throw#5247>
 800521c:	17ffc5b6 	.word	0x17ffc5b6
 8005220:	ffffea64 	.word	0xffffea64
 8005224:	e80094fc 	.word	0xe80094fc
 8005228:	e80097fc 	.word	0xe80097fc

0800522c <Exception::.ctor#7330>:
 800522c:	6081      	str	r1, [r0, #8]
 800522e:	4770      	bx	lr

08005230 <Context::get_StackPointer#5948>:
            // Access Methods
            //

            public override UIntPtr StackPointer
            {
                get { return this.SP; }
 8005230:	6880      	ldr	r0, [r0, #8]
 8005232:	4770      	bx	lr

08005234 <Context::set_StackPointer#5949>:
 8005234:	6081      	str	r1, [r0, #8]
 8005236:	4770      	bx	lr

08005238 <Context::get_ProgramCounter#5950>:
            public override UIntPtr ProgramCounter
            {
                get
                {
                    //return Registers.PC;
                    return (UIntPtr)0;
 8005238:	b580      	push	{r7, lr}
 800523a:	f7fc fe1d 	bl	8001e78 <UIntPtr::op_Explicit#3040>
 800523e:	bd80      	pop	{r7, pc}

08005240 <Context::set_ProgramCounter#5951>:
 8005240:	4770      	bx	lr

08005242 <Context::SwitchTo#5970>:
            //

            public override void SwitchTo( )
            {
                // The long jump selects the current thread's context and sets its EXC_RETURN value
                ProcessorARMv7M.RaiseSupervisorCall( ProcessorARMv7M.SVC_Code.SupervisorCall__LongJump );
 8005242:	b580      	push	{r7, lr}
 8005244:	2011      	movs	r0, #17
 8005246:	f7fd ff85 	bl	8003154 <ProcessorARMv7M::RaiseSupervisorCall#3408>
 800524a:	200e      	movs	r0, #14
 800524c:	f7fb f848 	bl	80002e0 <BugCheck::Raise#4938>

08005250 <Context::GetFirstStackPointerFromPhysicalStack#5982>:
                LongJump( ); 
            }
            
            private unsafe UIntPtr GetFirstStackPointerFromPhysicalStack( ArrayImpl stackImpl )
            {
                UIntPtr addressOfStackFrame = AddressMath.Decrement(new UIntPtr(stackImpl.GetEndDataPointer()), RegistersOnStackNoFPContext.TotalFrameSize);
 8005250:	b580      	push	{r7, lr}
 8005252:	f7fb fd71 	bl	8000d38 <Array::GetEndDataPointer#3878>
 8005256:	3890      	subs	r0, #144	; 0x90
 8005258:	f020 0007 	bic.w	r0, r0, #7
 800525c:	bd80      	pop	{r7, pc}

0800525e <ArgumentException::.ctor#6355>:
        // Creates a new ArgumentException with its message
        // string set to the empty string.
#if EXCEPTION_STRINGS
        public ArgumentException() : base( Environment.GetResourceString( "Arg_ArgumentException" ) )
#else
        public ArgumentException()
 800525e:	b580      	push	{r7, lr}
 8005260:	f000 f801 	bl	8005266 <SystemException::.ctor#7662>
 8005264:	bd80      	pop	{r7, pc}

08005266 <SystemException::.ctor#7662>:
    public class SystemException : Exception
    {
#if EXCEPTION_STRINGS
        public SystemException() : base( Environment.GetResourceString( "Arg_SystemException" ) )
#else
        public SystemException()
 8005266:	b580      	push	{r7, lr}
 8005268:	f7ff fc30 	bl	8004acc <Exception::.ctor#7329>
 800526c:	bd80      	pop	{r7, pc}

0800526e <SystemException::.ctor#7663>:
#endif
        {
        }

        public SystemException( String message ) : base( message )
 800526e:	b580      	push	{r7, lr}
 8005270:	f7ff ffdc 	bl	800522c <Exception::.ctor#7330>
 8005274:	bd80      	pop	{r7, pc}
 8005276:	46c0      	nop			; (mov r8, r8)

08005278 <Exception::GetMessageFromNativeResources#7337>:
        // See comment on ExceptionMessageKind
////    [ResourceExposure( ResourceScope.None )]
////    [MethodImpl( MethodImplOptions.InternalCall )]
////    internal static extern String GetMessageFromNativeResources( ExceptionMessageKind kind );
        internal static String GetMessageFromNativeResources( ExceptionMessageKind kind )
        {
 8005278:	b580      	push	{r7, lr}
 800527a:	4906      	ldr	r1, [pc, #24]	; (8005294 <Exception::GetMessageFromNativeResources#7337+0x1c>)
            //
            // BUGBUG: This needs to be implemented as an internal call.
            // 
            return kind.ToString();
 800527c:	4806      	ldr	r0, [pc, #24]	; (8005298 <Exception::GetMessageFromNativeResources#7337+0x20>)
 800527e:	4a07      	ldr	r2, [pc, #28]	; (800529c <Exception::GetMessageFromNativeResources#7337+0x24>)
 8005280:	4479      	add	r1, pc
 8005282:	4408      	add	r0, r1
 8005284:	4411      	add	r1, r2
 8005286:	f7fb fb4b 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 800528a:	2103      	movs	r1, #3
 800528c:	6081      	str	r1, [r0, #8]
 800528e:	f7fb fd7d 	bl	8000d8c <Object::ToString#2395>
 8005292:	bd80      	pop	{r7, pc}
 8005294:	17ffc530 	.word	0x17ffc530
 8005298:	ffffea64 	.word	0xffffea64
 800529c:	e8009b0c 	.word	0xe8009b0c

080052a0 <FormatException::.ctor#7338>:
    public class FormatException : SystemException
    {
#if EXCEPTION_STRINGS
        public FormatException() : base( Environment.GetResourceString( "Arg_FormatException" ) )
#else
        public FormatException()
 80052a0:	b580      	push	{r7, lr}
 80052a2:	f7ff ffe0 	bl	8005266 <SystemException::.ctor#7662>
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <InvalidOperationException::.ctor#7417>:
    public class InvalidOperationException : SystemException
    {
#if EXCEPTION_STRINGS
        public InvalidOperationException() : base( Environment.GetResourceString( "Arg_InvalidOperationException" ) )
#else
        public InvalidOperationException()
 80052a8:	b580      	push	{r7, lr}
 80052aa:	f7ff ffdc 	bl	8005266 <SystemException::.ctor#7662>
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <InvalidOperationException::.ctor#7418>:
#endif
        {
        }

        public InvalidOperationException( String message ) : base( message )
 80052b0:	b580      	push	{r7, lr}
 80052b2:	4903      	ldr	r1, [pc, #12]	; (80052c0 <InvalidOperationException::.ctor#7418+0x10>)
 80052b4:	4a03      	ldr	r2, [pc, #12]	; (80052c4 <InvalidOperationException::.ctor#7418+0x14>)
 80052b6:	4479      	add	r1, pc
 80052b8:	4411      	add	r1, r2
 80052ba:	f7ff ffd8 	bl	800526e <SystemException::.ctor#7663>
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	17ffc4fa 	.word	0x17ffc4fa
 80052c4:	e8009e2c 	.word	0xe8009e2c

080052c8 <Number::.ctor#7530>:
    internal class Number
    {
        private int precision;
        private int scale;
        private bool negative;
        private char[] digits = new char[NumberMaxDigits + 1];
 80052c8:	b570      	push	{r4, r5, r6, lr}
 80052ca:	460d      	mov	r5, r1
 80052cc:	4919      	ldr	r1, [pc, #100]	; (8005334 <Number::.ctor#7530+0x6c>)
 80052ce:	4604      	mov	r4, r0
 80052d0:	4819      	ldr	r0, [pc, #100]	; (8005338 <Number::.ctor#7530+0x70>)
 80052d2:	4a1a      	ldr	r2, [pc, #104]	; (800533c <Number::.ctor#7530+0x74>)
 80052d4:	4479      	add	r1, pc
 80052d6:	4408      	add	r0, r1
 80052d8:	4411      	add	r1, r2
 80052da:	2233      	movs	r2, #51	; 0x33
 80052dc:	f7fc f96a 	bl	80015b4 <DefaultTypeSystemManager::AllocateArray#5255>
 80052e0:	6160      	str	r0, [r4, #20]
 80052e2:	200a      	movs	r0, #10
////    }

        private Number( int value )
        {
            this.precision = Int32Precision;
            if(value >= 0)
 80052e4:	2d00      	cmp	r5, #0
 80052e6:	60a0      	str	r0, [r4, #8]
 80052e8:	db02      	blt.n	80052f0 <Number::.ctor#7530+0x28>
 80052ea:	2000      	movs	r0, #0
 80052ec:	7420      	strb	r0, [r4, #16]
 80052ee:	e002      	b.n	80052f6 <Number::.ctor#7530+0x2e>
 80052f0:	2001      	movs	r0, #1
                this.negative = false;
            }
            else
            {
                this.negative = true;
                value = -value;
 80052f2:	426d      	negs	r5, r5
 80052f4:	7420      	strb	r0, [r4, #16]
            }

            int index = Int32ToDecChars( this.digits, Int32Precision, unchecked( (uint)value ), 0 );
 80052f6:	6960      	ldr	r0, [r4, #20]
 80052f8:	210a      	movs	r1, #10
 80052fa:	462a      	mov	r2, r5
 80052fc:	2300      	movs	r3, #0
 80052fe:	2600      	movs	r6, #0
 8005300:	f000 f81e 	bl	8005340 <Number::Int32ToDecChars#7568>
            int digitCount = Int32Precision - index;
            int destIndex = 0;
            this.scale = digitCount;
 8005304:	220c      	movs	r2, #12
                this.negative = true;
                value = -value;
            }

            int index = Int32ToDecChars( this.digits, Int32Precision, unchecked( (uint)value ), 0 );
            int digitCount = Int32Precision - index;
 8005306:	f1c0 010a 	rsb	r1, r0, #10
            int destIndex = 0;
            this.scale = digitCount;
 800530a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 800530e:	60e1      	str	r1, [r4, #12]
 8005310:	e008      	b.n	8005324 <Number::.ctor#7530+0x5c>
            while(digitCount > 0)
            {
                this.digits[destIndex] = this.digits[index];
 8005312:	6962      	ldr	r2, [r4, #20]
                destIndex++;
                index++;
                digitCount--;
 8005314:	3901      	subs	r1, #1
            int digitCount = Int32Precision - index;
            int destIndex = 0;
            this.scale = digitCount;
            while(digitCount > 0)
            {
                this.digits[destIndex] = this.digits[index];
 8005316:	1813      	adds	r3, r2, r0
 8005318:	eb02 0246 	add.w	r2, r2, r6, lsl #1
 800531c:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
                destIndex++;
 8005320:	3601      	adds	r6, #1
 8005322:	8193      	strh	r3, [r2, #12]

            int index = Int32ToDecChars( this.digits, Int32Precision, unchecked( (uint)value ), 0 );
            int digitCount = Int32Precision - index;
            int destIndex = 0;
            this.scale = digitCount;
            while(digitCount > 0)
 8005324:	2901      	cmp	r1, #1
 8005326:	daf4      	bge.n	8005312 <Number::.ctor#7530+0x4a>
                this.digits[destIndex] = this.digits[index];
                destIndex++;
                index++;
                digitCount--;
            }
            this.digits[destIndex] = '\0';
 8005328:	6960      	ldr	r0, [r4, #20]
 800532a:	2100      	movs	r1, #0
 800532c:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8005330:	8181      	strh	r1, [r0, #12]
 8005332:	bd70      	pop	{r4, r5, r6, pc}
 8005334:	17ffc4dc 	.word	0x17ffc4dc
 8005338:	ffffea64 	.word	0xffffea64
 800533c:	e800744c 	.word	0xe800744c

08005340 <Number::Int32ToDecChars#7568>:
        // There's a x86 asm version there too.
        private static int Int32ToDecChars( char[] buffer      ,
                                            int    bufferIndex ,
                                            uint   value       ,
                                            int    digits      )
        {
 8005340:	b5b0      	push	{r4, r5, r7, lr}
 8005342:	f64c 4ccd 	movw	ip, #52429	; 0xcccd
 8005346:	f1a3 0e01 	sub.w	lr, r3, #1
 800534a:	f6cc 4ccc 	movt	ip, #52428	; 0xcccc
 800534e:	e00f      	b.n	8005370 <Number::Int32ToDecChars#7568+0x30>
            while(--digits >= 0 || value != 0)
            {
                buffer[--bufferIndex] = (char)(value % 10 + '0');
                value /= 10;
 8005350:	fba2 450c 	umull	r4, r5, r2, ip
 8005354:	eb00 0341 	add.w	r3, r0, r1, lsl #1
 8005358:	f1ae 0e01 	sub.w	lr, lr, #1
                                            uint   value       ,
                                            int    digits      )
        {
            while(--digits >= 0 || value != 0)
            {
                buffer[--bufferIndex] = (char)(value % 10 + '0');
 800535c:	3901      	subs	r1, #1
                value /= 10;
 800535e:	08ec      	lsrs	r4, r5, #3
                                            uint   value       ,
                                            int    digits      )
        {
            while(--digits >= 0 || value != 0)
            {
                buffer[--bufferIndex] = (char)(value % 10 + '0');
 8005360:	eb04 0584 	add.w	r5, r4, r4, lsl #2
 8005364:	eba2 0245 	sub.w	r2, r2, r5, lsl #1
 8005368:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 800536c:	815a      	strh	r2, [r3, #10]
 800536e:	4622      	mov	r2, r4
        private static int Int32ToDecChars( char[] buffer      ,
                                            int    bufferIndex ,
                                            uint   value       ,
                                            int    digits      )
        {
            while(--digits >= 0 || value != 0)
 8005370:	f1be 3fff 	cmp.w	lr, #4294967295
 8005374:	dcec      	bgt.n	8005350 <Number::Int32ToDecChars#7568+0x10>
 8005376:	2a00      	cmp	r2, #0
 8005378:	bf04      	itt	eq
 800537a:	4608      	moveq	r0, r1
 800537c:	bdb0      	popeq	{r4, r5, r7, pc}
 800537e:	e7e7      	b.n	8005350 <Number::Int32ToDecChars#7568+0x10>

08005380 <Number::.ctor#7531>:
    internal class Number
    {
        private int precision;
        private int scale;
        private bool negative;
        private char[] digits = new char[NumberMaxDigits + 1];
 8005380:	b570      	push	{r4, r5, r6, lr}
 8005382:	460d      	mov	r5, r1
 8005384:	4916      	ldr	r1, [pc, #88]	; (80053e0 <Number::.ctor#7531+0x60>)
 8005386:	4604      	mov	r4, r0
 8005388:	4816      	ldr	r0, [pc, #88]	; (80053e4 <Number::.ctor#7531+0x64>)
 800538a:	4a17      	ldr	r2, [pc, #92]	; (80053e8 <Number::.ctor#7531+0x68>)
 800538c:	4479      	add	r1, pc
 800538e:	4408      	add	r0, r1
 8005390:	4411      	add	r1, r2
 8005392:	2233      	movs	r2, #51	; 0x33
 8005394:	f7fc f90e 	bl	80015b4 <DefaultTypeSystemManager::AllocateArray#5255>
 8005398:	6160      	str	r0, [r4, #20]
 800539a:	200a      	movs	r0, #10
 800539c:	2600      	movs	r6, #0
 800539e:	210a      	movs	r1, #10

        private Number( uint value )
        {
            this.precision = Int32Precision;
            this.negative = false;
            int index = Int32ToDecChars( this.digits, Int32Precision, value, 0 );
 80053a0:	462a      	mov	r2, r5
 80053a2:	2300      	movs	r3, #0
 80053a4:	60a0      	str	r0, [r4, #8]
 80053a6:	7426      	strb	r6, [r4, #16]
 80053a8:	6960      	ldr	r0, [r4, #20]
 80053aa:	f7ff ffc9 	bl	8005340 <Number::Int32ToDecChars#7568>
            int digitCount = Int32Precision - index;
            int destIndex = 0;
            this.scale = digitCount;
 80053ae:	220c      	movs	r2, #12
        private Number( uint value )
        {
            this.precision = Int32Precision;
            this.negative = false;
            int index = Int32ToDecChars( this.digits, Int32Precision, value, 0 );
            int digitCount = Int32Precision - index;
 80053b0:	f1c0 010a 	rsb	r1, r0, #10
            int destIndex = 0;
            this.scale = digitCount;
 80053b4:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 80053b8:	60e1      	str	r1, [r4, #12]
 80053ba:	e008      	b.n	80053ce <Number::.ctor#7531+0x4e>
            while(digitCount > 0)
            {
                this.digits[destIndex] = this.digits[index];
 80053bc:	6962      	ldr	r2, [r4, #20]
                destIndex++;
                index++;
                digitCount--;
 80053be:	3901      	subs	r1, #1
            int digitCount = Int32Precision - index;
            int destIndex = 0;
            this.scale = digitCount;
            while(digitCount > 0)
            {
                this.digits[destIndex] = this.digits[index];
 80053c0:	1813      	adds	r3, r2, r0
 80053c2:	eb02 0246 	add.w	r2, r2, r6, lsl #1
 80053c6:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
                destIndex++;
 80053ca:	3601      	adds	r6, #1
 80053cc:	8193      	strh	r3, [r2, #12]
            this.negative = false;
            int index = Int32ToDecChars( this.digits, Int32Precision, value, 0 );
            int digitCount = Int32Precision - index;
            int destIndex = 0;
            this.scale = digitCount;
            while(digitCount > 0)
 80053ce:	2901      	cmp	r1, #1
 80053d0:	daf4      	bge.n	80053bc <Number::.ctor#7531+0x3c>
                this.digits[destIndex] = this.digits[index];
                destIndex++;
                index++;
                digitCount--;
            }
            this.digits[destIndex] = '\0';
 80053d2:	6960      	ldr	r0, [r4, #20]
 80053d4:	2100      	movs	r1, #0
 80053d6:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 80053da:	8181      	strh	r1, [r0, #12]
 80053dc:	bd70      	pop	{r4, r5, r6, pc}
 80053de:	46c0      	nop			; (mov r8, r8)
 80053e0:	17ffc424 	.word	0x17ffc424
 80053e4:	ffffea64 	.word	0xffffea64
 80053e8:	e800744c 	.word	0xe800744c

080053ec <Number::Get#7536>:
        };
        private static String posNumberFormat = "#";

        // code below depends on seeing the null terminator...
        private static char Get( String str, int i )
        {
 80053ec:	b580      	push	{r7, lr}
 80053ee:	68c2      	ldr	r2, [r0, #12]
            return i < str.Length ? str[i] : '\0';
 80053f0:	4291      	cmp	r1, r2
 80053f2:	bfa4      	itt	ge
 80053f4:	2000      	movge	r0, #0
 80053f6:	bd80      	popge	{r7, pc}
 80053f8:	f7fb fe3e 	bl	8001078 <String::get_Chars#4064>
 80053fc:	b280      	uxth	r0, r0
 80053fe:	bd80      	pop	{r7, pc}

08005400 <Number::ParseFormatSpecifier#7555>:
////        value = 0;
////        return false;
////    }
    
        private static char ParseFormatSpecifier( string format, out int digits )
        {
 8005400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005402:	b081      	sub	sp, #4
 8005404:	4605      	mov	r5, r0
 8005406:	460c      	mov	r4, r1
 8005408:	b3dd      	cbz	r5, 8005482 <Number::ParseFormatSpecifier#7555+0x82>
            {
                int index = 0;
                char c = Get( format, index );
                if(c != 0)
                {
                    if(c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')
 800540a:	4628      	mov	r0, r5
 800540c:	2100      	movs	r1, #0
 800540e:	f7ff ffed 	bl	80053ec <Number::Get#7536>
        {
            if(format != null)
            {
                int index = 0;
                char c = Get( format, index );
                if(c != 0)
 8005412:	b280      	uxth	r0, r0
 8005414:	b3a8      	cbz	r0, 8005482 <Number::ParseFormatSpecifier#7555+0x82>
                {
                    if(c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')
 8005416:	2841      	cmp	r0, #65	; 0x41
 8005418:	db01      	blt.n	800541e <Number::ParseFormatSpecifier#7555+0x1e>
 800541a:	285b      	cmp	r0, #91	; 0x5b
 800541c:	db03      	blt.n	8005426 <Number::ParseFormatSpecifier#7555+0x26>
 800541e:	2861      	cmp	r0, #97	; 0x61
 8005420:	db29      	blt.n	8005476 <Number::ParseFormatSpecifier#7555+0x76>
 8005422:	287a      	cmp	r0, #122	; 0x7a
 8005424:	dc27      	bgt.n	8005476 <Number::ParseFormatSpecifier#7555+0x76>
                        index++;
                        int n = -1;
                        c = Get( format, index );
                        if(c >= '0' && c <= '9')
                        {
                            n = (c - '0');
 8005426:	4628      	mov	r0, r5
 8005428:	2101      	movs	r1, #1
 800542a:	f7ff ffdf 	bl	80053ec <Number::Get#7536>
                    if(c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')
                    {
                        index++;
                        int n = -1;
                        c = Get( format, index );
                        if(c >= '0' && c <= '9')
 800542e:	b286      	uxth	r6, r0
 8005430:	f04f 37ff 	mov.w	r7, #4294967295
 8005434:	2e30      	cmp	r6, #48	; 0x30
 8005436:	db1a      	blt.n	800546e <Number::ParseFormatSpecifier#7555+0x6e>
 8005438:	2e3a      	cmp	r6, #58	; 0x3a
 800543a:	da18      	bge.n	800546e <Number::ParseFormatSpecifier#7555+0x6e>
                        {
                            n = (c - '0');
                            index++;
                            c = Get( format, index );
 800543c:	4628      	mov	r0, r5
 800543e:	2102      	movs	r1, #2
 8005440:	f7ff ffd4 	bl	80053ec <Number::Get#7536>
                        index++;
                        int n = -1;
                        c = Get( format, index );
                        if(c >= '0' && c <= '9')
                        {
                            n = (c - '0');
 8005444:	f1a6 0730 	sub.w	r7, r6, #48	; 0x30
 8005448:	2603      	movs	r6, #3
                            index++;
                            c = Get( format, index );
                            while(c >= '0' && c <= '9')
 800544a:	b281      	uxth	r1, r0
 800544c:	2930      	cmp	r1, #48	; 0x30
 800544e:	db0e      	blt.n	800546e <Number::ParseFormatSpecifier#7555+0x6e>
 8005450:	2939      	cmp	r1, #57	; 0x39
 8005452:	dc0c      	bgt.n	800546e <Number::ParseFormatSpecifier#7555+0x6e>
                            {
                                n = n * 10 + (c - '0');
 8005454:	eb07 0087 	add.w	r0, r7, r7, lsl #2
 8005458:	eb01 0040 	add.w	r0, r1, r0, lsl #1
                                index++;
                                c = Get( format, index );
 800545c:	4631      	mov	r1, r6
                            n = (c - '0');
                            index++;
                            c = Get( format, index );
                            while(c >= '0' && c <= '9')
                            {
                                n = n * 10 + (c - '0');
 800545e:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
                                index++;
                                c = Get( format, index );
 8005462:	4628      	mov	r0, r5
 8005464:	f7ff ffc2 	bl	80053ec <Number::Get#7536>
                                if(n >= 10) break;
 8005468:	3601      	adds	r6, #1
 800546a:	2f09      	cmp	r7, #9
 800546c:	dded      	ble.n	800544a <Number::ParseFormatSpecifier#7555+0x4a>
                            }
                        }
                        if(c == 0)
 800546e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005472:	4208      	tst	r0, r1
 8005474:	d00b      	beq.n	800548e <Number::ParseFormatSpecifier#7555+0x8e>
 8005476:	f04f 30ff 	mov.w	r0, #4294967295
 800547a:	6020      	str	r0, [r4, #0]
 800547c:	2000      	movs	r0, #0
 800547e:	b001      	add	sp, #4
 8005480:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005482:	f04f 30ff 	mov.w	r0, #4294967295
 8005486:	6020      	str	r0, [r4, #0]
 8005488:	2047      	movs	r0, #71	; 0x47
 800548a:	b001      	add	sp, #4
 800548c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                        {
                            digits = n;
                            return Get( format, 0 );
 800548e:	4628      	mov	r0, r5
 8005490:	2100      	movs	r1, #0
 8005492:	6027      	str	r7, [r4, #0]
 8005494:	f7ff ffaa 	bl	80053ec <Number::Get#7536>
 8005498:	b001      	add	sp, #4
 800549a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800549c <Number::ToString#7554>:
        }

        private String ToString( char             format ,
                                 int              digits ,
                                 NumberFormatInfo info   )
        {
 800549c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054a0:	b083      	sub	sp, #12
 80054a2:	4680      	mov	r8, r0
 80054a4:	4689      	mov	r9, r1
            long                      newBufferLen = MIN_BUFFER_SIZE;
            System.Text.StringBuilder sb           = null;
            int                       digCount     = 0;
            char                      ftype        = (char)(format & 0xFFDF);
 80054a6:	f64f 70df 	movw	r0, #65503	; 0xffdf
 80054aa:	469a      	mov	sl, r3
 80054ac:	4693      	mov	fp, r2
 80054ae:	ea00 0009 	and.w	r0, r0, r9

            switch(ftype)
 80054b2:	f1a0 0145 	sub.w	r1, r0, #69	; 0x45
 80054b6:	2902      	cmp	r1, #2
 80054b8:	d00f      	beq.n	80054da <Number::ToString#7554+0x3e>
 80054ba:	2901      	cmp	r1, #1
 80054bc:	d141      	bne.n	8005542 <Number::ToString#7554+0xa6>
            {
                case 'F':
                    if(digits < 0) digits = info.numberDecimalDigits;
 80054be:	f1bb 0f00 	cmp.w	fp, #0
 80054c2:	bfb8      	it	lt
 80054c4:	f8da b058 	ldrlt.w	fp, [sl, #88]	; 0x58

                    if(this.scale < 0)
 80054c8:	f8d8 000c 	ldr.w	r0, [r8, #12]
 80054cc:	2800      	cmp	r0, #0
 80054ce:	db7e      	blt.n	80055ce <Number::ToString#7554+0x132>
                        digCount = 0;
                    else
                        digCount = this.scale + digits;
 80054d0:	f8d8 000c 	ldr.w	r0, [r8, #12]
 80054d4:	eb00 090b 	add.w	r9, r0, fp
 80054d8:	e07b      	b.n	80055d2 <Number::ToString#7554+0x136>
 80054da:	4996      	ldr	r1, [pc, #600]	; (8005734 <Number::ToString#7554+0x298>)
                    // For number and exponent
                    newBufferLen += (info.negativeSign.Length +
                                     info.positiveSign.Length) * 2;
                    newBufferLen += info.numberDecimalSeparator.Length;

                    sb = new System.Text.StringBuilder( (int)newBufferLen );
 80054dc:	4896      	ldr	r0, [pc, #600]	; (8005738 <Number::ToString#7554+0x29c>)
 80054de:	4a97      	ldr	r2, [pc, #604]	; (800573c <Number::ToString#7554+0x2a0>)

                    FormatScientific( sb, digits, format, info );
                    break;

                case 'G':
                    if(digits < 1) digits = this.precision;
 80054e0:	f1bb 0f01 	cmp.w	fp, #1
                    newBufferLen += digits;

                    // For number and exponent
                    newBufferLen += (info.negativeSign.Length +
 80054e4:	f10a 0714 	add.w	r7, sl, #20

                    FormatScientific( sb, digits, format, info );
                    break;

                case 'G':
                    if(digits < 1) digits = this.precision;
 80054e8:	bfb8      	it	lt
 80054ea:	f8d8 b008 	ldrlt.w	fp, [r8, #8]
 80054ee:	4479      	add	r1, pc
                    // For number and exponent
                    newBufferLen += (info.negativeSign.Length +
                                     info.positiveSign.Length) * 2;
                    newBufferLen += info.numberDecimalSeparator.Length;

                    sb = new System.Text.StringBuilder( (int)newBufferLen );
 80054f0:	4408      	add	r0, r1
 80054f2:	4411      	add	r1, r2
                case 'G':
                    if(digits < 1) digits = this.precision;
                    newBufferLen += digits;

                    // For number and exponent
                    newBufferLen += (info.negativeSign.Length +
 80054f4:	cf8c      	ldmia	r7, {r2, r3, r7}
                                     info.positiveSign.Length) * 2;
                    newBufferLen += info.numberDecimalSeparator.Length;
 80054f6:	68fd      	ldr	r5, [r7, #12]
                case 'G':
                    if(digits < 1) digits = this.precision;
                    newBufferLen += digits;

                    // For number and exponent
                    newBufferLen += (info.negativeSign.Length +
 80054f8:	68d6      	ldr	r6, [r2, #12]
 80054fa:	68dc      	ldr	r4, [r3, #12]
                                     info.positiveSign.Length) * 2;
                    newBufferLen += info.numberDecimalSeparator.Length;

                    sb = new System.Text.StringBuilder( (int)newBufferLen );
 80054fc:	f7fb fa10 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8005500:	4607      	mov	r7, r0
                case 'G':
                    if(digits < 1) digits = this.precision;
                    newBufferLen += digits;

                    // For number and exponent
                    newBufferLen += (info.negativeSign.Length +
 8005502:	19a0      	adds	r0, r4, r6
                    FormatScientific( sb, digits, format, info );
                    break;

                case 'G':
                    if(digits < 1) digits = this.precision;
                    newBufferLen += digits;
 8005504:	eb0b 0040 	add.w	r0, fp, r0, lsl #1

                    // For number and exponent
                    newBufferLen += (info.negativeSign.Length +
 8005508:	4428      	add	r0, r5
                                     info.positiveSign.Length) * 2;
                    newBufferLen += info.numberDecimalSeparator.Length;
 800550a:	f100 0169 	add.w	r1, r0, #105	; 0x69

                    sb = new System.Text.StringBuilder( (int)newBufferLen );
 800550e:	4638      	mov	r0, r7
 8005510:	f7fc f972 	bl	80017f8 <StringBuilder::.ctor#8787>

                    RoundNumber( digits );
 8005514:	4640      	mov	r0, r8
 8005516:	4659      	mov	r1, fp
 8005518:	f000 fc6c 	bl	8005df4 <Number::RoundNumber#7570>
                    if(this.negative)
 800551c:	f898 0010 	ldrb.w	r0, [r8, #16]
 8005520:	b120      	cbz	r0, 800552c <Number::ToString#7554+0x90>
                    {
                        sb.Append( info.negativeSign );
 8005522:	f8da 1018 	ldr.w	r1, [sl, #24]
 8005526:	4638      	mov	r0, r7
 8005528:	f000 fd7f 	bl	800602a <StringBuilder::Append#8806>
                    }

                    FormatGeneral( sb, digits, (char)(format - ('G' - 'E')), info );
 800552c:	fa1f f089 	uxth.w	r0, r9
 8005530:	4639      	mov	r1, r7
 8005532:	465a      	mov	r2, fp
 8005534:	f8cd a000 	str.w	sl, [sp]
 8005538:	1e83      	subs	r3, r0, #2
 800553a:	4640      	mov	r0, r8
 800553c:	f000 feae 	bl	800629c <Number::FormatGeneral#7572>
 8005540:	e0e1      	b.n	8005706 <Number::ToString#7554+0x26a>
 8005542:	bba1      	cbnz	r1, 80055ae <Number::ToString#7554+0x112>
 8005544:	497f      	ldr	r1, [pc, #508]	; (8005744 <Number::ToString#7554+0x2a8>)
                    // For number and exponent
                    newBufferLen += (info.negativeSign.Length +
                                     info.positiveSign.Length) * 2;
                    newBufferLen += info.numberDecimalSeparator.Length;

                    sb = new System.Text.StringBuilder( (int)newBufferLen );
 8005546:	487c      	ldr	r0, [pc, #496]	; (8005738 <Number::ToString#7554+0x29c>)
 8005548:	4a7c      	ldr	r2, [pc, #496]	; (800573c <Number::ToString#7554+0x2a0>)
                    digits++;

                    newBufferLen += digits;

                    // For number and exponent
                    newBufferLen += (info.negativeSign.Length +
 800554a:	f10a 0714 	add.w	r7, sl, #20
 800554e:	4479      	add	r1, pc
                                     info.positiveSign.Length) * 2;
                    newBufferLen += info.numberDecimalSeparator.Length;

                    sb = new System.Text.StringBuilder( (int)newBufferLen );
 8005550:	4408      	add	r0, r1
 8005552:	4411      	add	r1, r2
                    digits++;

                    newBufferLen += digits;

                    // For number and exponent
                    newBufferLen += (info.negativeSign.Length +
 8005554:	cf8c      	ldmia	r7, {r2, r3, r7}
                                     info.positiveSign.Length) * 2;
                    newBufferLen += info.numberDecimalSeparator.Length;
 8005556:	68fc      	ldr	r4, [r7, #12]
                    digits++;

                    newBufferLen += digits;

                    // For number and exponent
                    newBufferLen += (info.negativeSign.Length +
 8005558:	68d5      	ldr	r5, [r2, #12]
 800555a:	68de      	ldr	r6, [r3, #12]
                                     info.positiveSign.Length) * 2;
                    newBufferLen += info.numberDecimalSeparator.Length;

                    sb = new System.Text.StringBuilder( (int)newBufferLen );
 800555c:	f7fb f9e0 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
                    RoundNumber( this.scale + digits );
                    FormatNumber( sb, digits, info );
                    break;

                case 'E':
                    if(digits < 0) digits = 6;
 8005560:	f1bb 0f00 	cmp.w	fp, #0
                    // For number and exponent
                    newBufferLen += (info.negativeSign.Length +
                                     info.positiveSign.Length) * 2;
                    newBufferLen += info.numberDecimalSeparator.Length;

                    sb = new System.Text.StringBuilder( (int)newBufferLen );
 8005564:	4607      	mov	r7, r0
                    digits++;

                    newBufferLen += digits;

                    // For number and exponent
                    newBufferLen += (info.negativeSign.Length +
 8005566:	eb06 0005 	add.w	r0, r6, r5
                    RoundNumber( this.scale + digits );
                    FormatNumber( sb, digits, info );
                    break;

                case 'E':
                    if(digits < 0) digits = 6;
 800556a:	bfb8      	it	lt
 800556c:	f04f 0b06 	movlt.w	fp, #6
                    digits++;
 8005570:	f10b 0601 	add.w	r6, fp, #1

                    newBufferLen += digits;
 8005574:	eb06 0040 	add.w	r0, r6, r0, lsl #1

                    // For number and exponent
                    newBufferLen += (info.negativeSign.Length +
 8005578:	4420      	add	r0, r4
                                     info.positiveSign.Length) * 2;
                    newBufferLen += info.numberDecimalSeparator.Length;
 800557a:	f100 0169 	add.w	r1, r0, #105	; 0x69

                    sb = new System.Text.StringBuilder( (int)newBufferLen );
 800557e:	4638      	mov	r0, r7
 8005580:	f7fc f93a 	bl	80017f8 <StringBuilder::.ctor#8787>

                    RoundNumber( digits );
 8005584:	4640      	mov	r0, r8
 8005586:	4631      	mov	r1, r6
 8005588:	f000 fc34 	bl	8005df4 <Number::RoundNumber#7570>
                    if(this.negative)
 800558c:	f898 0010 	ldrb.w	r0, [r8, #16]
 8005590:	b120      	cbz	r0, 800559c <Number::ToString#7554+0x100>
                    {
                        sb.Append( info.negativeSign );
 8005592:	f8da 1018 	ldr.w	r1, [sl, #24]
 8005596:	4638      	mov	r0, r7
 8005598:	f000 fd47 	bl	800602a <StringBuilder::Append#8806>
                    }

                    FormatScientific( sb, digits, format, info );
 800559c:	4640      	mov	r0, r8
 800559e:	4639      	mov	r1, r7
 80055a0:	4632      	mov	r2, r6
 80055a2:	464b      	mov	r3, r9
 80055a4:	f8cd a000 	str.w	sl, [sp]
 80055a8:	f000 fcfc 	bl	8005fa4 <Number::FormatScientific#7573>
 80055ac:	e0ab      	b.n	8005706 <Number::ToString#7554+0x26a>
            long                      newBufferLen = MIN_BUFFER_SIZE;
            System.Text.StringBuilder sb           = null;
            int                       digCount     = 0;
            char                      ftype        = (char)(format & 0xFFDF);

            switch(ftype)
 80055ae:	284e      	cmp	r0, #78	; 0x4e
 80055b0:	d13f      	bne.n	8005632 <Number::ToString#7554+0x196>
                    FormatFixed( sb, digits, null, info.numberDecimalSeparator, null, info );
                    break;

                case 'N':
                    // Since we are using digits in our calculation
                    if(digits < 0) digits = info.numberDecimalDigits;
 80055b2:	f1bb 0f00 	cmp.w	fp, #0
 80055b6:	bfb8      	it	lt
 80055b8:	f8da b058 	ldrlt.w	fp, [sl, #88]	; 0x58

                    if(this.scale < 0)
 80055bc:	f8d8 000c 	ldr.w	r0, [r8, #12]
 80055c0:	2800      	cmp	r0, #0
 80055c2:	db49      	blt.n	8005658 <Number::ToString#7554+0x1bc>
                        digCount = 0;
                    else
                        digCount = this.scale + digits;
 80055c4:	f8d8 000c 	ldr.w	r0, [r8, #12]
 80055c8:	eb00 050b 	add.w	r5, r0, fp
 80055cc:	e045      	b.n	800565a <Number::ToString#7554+0x1be>
 80055ce:	f04f 0900 	mov.w	r9, #0
 80055d2:	495b      	ldr	r1, [pc, #364]	; (8005740 <Number::ToString#7554+0x2a4>)
                    // For number and exponent
                    newBufferLen += info.negativeSign.Length;

                    newBufferLen += info.numberDecimalSeparator.Length;

                    sb = new System.Text.StringBuilder( (int)newBufferLen );
 80055d4:	4858      	ldr	r0, [pc, #352]	; (8005738 <Number::ToString#7554+0x29c>)
 80055d6:	4a59      	ldr	r2, [pc, #356]	; (800573c <Number::ToString#7554+0x2a0>)
 80055d8:	4479      	add	r1, pc
 80055da:	4408      	add	r0, r1
 80055dc:	4411      	add	r1, r2
                        digCount = this.scale + digits;

                    newBufferLen += digCount;

                    // For number and exponent
                    newBufferLen += info.negativeSign.Length;
 80055de:	e9da 2306 	ldrd	r2, r3, [sl, #24]

                    newBufferLen += info.numberDecimalSeparator.Length;
 80055e2:	68dc      	ldr	r4, [r3, #12]
                        digCount = this.scale + digits;

                    newBufferLen += digCount;

                    // For number and exponent
                    newBufferLen += info.negativeSign.Length;
 80055e4:	68d5      	ldr	r5, [r2, #12]

                    newBufferLen += info.numberDecimalSeparator.Length;

                    sb = new System.Text.StringBuilder( (int)newBufferLen );
 80055e6:	f7fb f99b 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 80055ea:	4607      	mov	r7, r0
                    if(this.scale < 0)
                        digCount = 0;
                    else
                        digCount = this.scale + digits;

                    newBufferLen += digCount;
 80055ec:	eb09 0005 	add.w	r0, r9, r5

                    // For number and exponent
                    newBufferLen += info.negativeSign.Length;
 80055f0:	4420      	add	r0, r4

                    newBufferLen += info.numberDecimalSeparator.Length;
 80055f2:	f100 0169 	add.w	r1, r0, #105	; 0x69

                    sb = new System.Text.StringBuilder( (int)newBufferLen );
 80055f6:	4638      	mov	r0, r7
 80055f8:	f7fc f8fe 	bl	80017f8 <StringBuilder::.ctor#8787>

                    RoundNumber( this.scale + digits );
 80055fc:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8005600:	eb00 010b 	add.w	r1, r0, fp
 8005604:	4640      	mov	r0, r8
 8005606:	f000 fbf5 	bl	8005df4 <Number::RoundNumber#7570>
                    if(this.negative)
 800560a:	f898 0010 	ldrb.w	r0, [r8, #16]
 800560e:	b120      	cbz	r0, 800561a <Number::ToString#7554+0x17e>
                    {
                        sb.Append( info.negativeSign );
 8005610:	f8da 1018 	ldr.w	r1, [sl, #24]
 8005614:	4638      	mov	r0, r7
 8005616:	f000 fd08 	bl	800602a <StringBuilder::Append#8806>
                    }
                    FormatFixed( sb, digits, null, info.numberDecimalSeparator, null, info );
 800561a:	f8da 001c 	ldr.w	r0, [sl, #28]
 800561e:	2100      	movs	r1, #0
 8005620:	465a      	mov	r2, fp
 8005622:	2300      	movs	r3, #0
 8005624:	e9cd 0100 	strd	r0, r1, [sp]
 8005628:	4640      	mov	r0, r8
 800562a:	4639      	mov	r1, r7
 800562c:	f000 fd2a 	bl	8006084 <Number::FormatFixed#7575>
 8005630:	e069      	b.n	8005706 <Number::ToString#7554+0x26a>
            long                      newBufferLen = MIN_BUFFER_SIZE;
            System.Text.StringBuilder sb           = null;
            int                       digCount     = 0;
            char                      ftype        = (char)(format & 0xFFDF);

            switch(ftype)
 8005632:	2850      	cmp	r0, #80	; 0x50
 8005634:	d16d      	bne.n	8005712 <Number::ToString#7554+0x276>

                    FormatGeneral( sb, digits, (char)(format - ('G' - 'E')), info );
                    break;

                case 'P':
                    if(digits < 0) digits = info.percentDecimalDigits;
 8005636:	f1bb 0f00 	cmp.w	fp, #0
 800563a:	bfb8      	it	lt
 800563c:	f8da b074 	ldrlt.w	fp, [sl, #116]	; 0x74
                    this.scale += 2;
 8005640:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8005644:	3002      	adds	r0, #2
 8005646:	f8c8 000c 	str.w	r0, [r8, #12]

                    if(this.scale < 0)
 800564a:	2800      	cmp	r0, #0
 800564c:	db2c      	blt.n	80056a8 <Number::ToString#7554+0x20c>
                        digCount = 0;
                    else
                        digCount = this.scale + digits;
 800564e:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8005652:	eb00 090b 	add.w	r9, r0, fp
 8005656:	e029      	b.n	80056ac <Number::ToString#7554+0x210>
 8005658:	2500      	movs	r5, #0
 800565a:	493e      	ldr	r1, [pc, #248]	; (8005754 <Number::ToString#7554+0x2b8>)

                    // For all the grouping sizes
                    newBufferLen += info.numberGroupSeparator.Length * digCount;
                    newBufferLen += info.numberDecimalSeparator.Length;

                    sb = new System.Text.StringBuilder( (int)newBufferLen );
 800565c:	4836      	ldr	r0, [pc, #216]	; (8005738 <Number::ToString#7554+0x29c>)
 800565e:	4a37      	ldr	r2, [pc, #220]	; (800573c <Number::ToString#7554+0x2a0>)
                        digCount = this.scale + digits;

                    newBufferLen += digCount;

                    // For number and exponent
                    newBufferLen += info.negativeSign.Length;
 8005660:	f10a 0718 	add.w	r7, sl, #24
 8005664:	4479      	add	r1, pc

                    // For all the grouping sizes
                    newBufferLen += info.numberGroupSeparator.Length * digCount;
                    newBufferLen += info.numberDecimalSeparator.Length;

                    sb = new System.Text.StringBuilder( (int)newBufferLen );
 8005666:	4408      	add	r0, r1
 8005668:	4411      	add	r1, r2
                        digCount = this.scale + digits;

                    newBufferLen += digCount;

                    // For number and exponent
                    newBufferLen += info.negativeSign.Length;
 800566a:	cf8c      	ldmia	r7, {r2, r3, r7}

                    // For all the grouping sizes
                    newBufferLen += info.numberGroupSeparator.Length * digCount;
                    newBufferLen += info.numberDecimalSeparator.Length;
 800566c:	f8d3 900c 	ldr.w	r9, [r3, #12]

                    // For number and exponent
                    newBufferLen += info.negativeSign.Length;

                    // For all the grouping sizes
                    newBufferLen += info.numberGroupSeparator.Length * digCount;
 8005670:	68fe      	ldr	r6, [r7, #12]
                        digCount = this.scale + digits;

                    newBufferLen += digCount;

                    // For number and exponent
                    newBufferLen += info.negativeSign.Length;
 8005672:	68d4      	ldr	r4, [r2, #12]

                    // For all the grouping sizes
                    newBufferLen += info.numberGroupSeparator.Length * digCount;
                    newBufferLen += info.numberDecimalSeparator.Length;

                    sb = new System.Text.StringBuilder( (int)newBufferLen );
 8005674:	f7fb f954 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8005678:	4607      	mov	r7, r0
                    if(this.scale < 0)
                        digCount = 0;
                    else
                        digCount = this.scale + digits;

                    newBufferLen += digCount;
 800567a:	1928      	adds	r0, r5, r4

                    // For number and exponent
                    newBufferLen += info.negativeSign.Length;
 800567c:	fb06 0005 	mla	r0, r6, r5, r0

                    // For all the grouping sizes
                    newBufferLen += info.numberGroupSeparator.Length * digCount;
 8005680:	4448      	add	r0, r9
                    newBufferLen += info.numberDecimalSeparator.Length;
 8005682:	f100 0169 	add.w	r1, r0, #105	; 0x69

                    sb = new System.Text.StringBuilder( (int)newBufferLen );
 8005686:	4638      	mov	r0, r7
 8005688:	f7fc f8b6 	bl	80017f8 <StringBuilder::.ctor#8787>

                    RoundNumber( this.scale + digits );
 800568c:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8005690:	eb00 010b 	add.w	r1, r0, fp
 8005694:	4640      	mov	r0, r8
 8005696:	f000 fbad 	bl	8005df4 <Number::RoundNumber#7570>
                    FormatNumber( sb, digits, info );
 800569a:	4640      	mov	r0, r8
 800569c:	4639      	mov	r1, r7
 800569e:	465a      	mov	r2, fp
 80056a0:	4653      	mov	r3, sl
 80056a2:	f000 fc35 	bl	8005f10 <Number::FormatNumber#7576>
 80056a6:	e02e      	b.n	8005706 <Number::ToString#7554+0x26a>
 80056a8:	f04f 0900 	mov.w	r9, #0
 80056ac:	4928      	ldr	r1, [pc, #160]	; (8005750 <Number::ToString#7554+0x2b4>)
                    // For all the grouping sizes
                    newBufferLen += info.percentGroupSeparator.Length * digCount;
                    newBufferLen += info.percentDecimalSeparator.Length;
                    newBufferLen += info.percentSymbol.Length;

                    sb = new System.Text.StringBuilder( (int)newBufferLen );
 80056ae:	4822      	ldr	r0, [pc, #136]	; (8005738 <Number::ToString#7554+0x29c>)
 80056b0:	4a22      	ldr	r2, [pc, #136]	; (800573c <Number::ToString#7554+0x2a0>)
 80056b2:	4479      	add	r1, pc
 80056b4:	4408      	add	r0, r1
 80056b6:	4411      	add	r1, r2
                        digCount = this.scale + digits;

                    newBufferLen += digCount;

                    // For number and exponent
                    newBufferLen += info.negativeSign.Length;
 80056b8:	f8da 2018 	ldr.w	r2, [sl, #24]

                    // For all the grouping sizes
                    newBufferLen += info.percentGroupSeparator.Length * digCount;
                    newBufferLen += info.percentDecimalSeparator.Length;
 80056bc:	e9da 3710 	ldrd	r3, r7, [sl, #64]	; 0x40
                    newBufferLen += info.percentSymbol.Length;
 80056c0:	f8da 4048 	ldr.w	r4, [sl, #72]	; 0x48
 80056c4:	68e6      	ldr	r6, [r4, #12]

                    // For number and exponent
                    newBufferLen += info.negativeSign.Length;

                    // For all the grouping sizes
                    newBufferLen += info.percentGroupSeparator.Length * digCount;
 80056c6:	68fc      	ldr	r4, [r7, #12]
                        digCount = this.scale + digits;

                    newBufferLen += digCount;

                    // For number and exponent
                    newBufferLen += info.negativeSign.Length;
 80056c8:	68d5      	ldr	r5, [r2, #12]

                    // For all the grouping sizes
                    newBufferLen += info.percentGroupSeparator.Length * digCount;
                    newBufferLen += info.percentDecimalSeparator.Length;
 80056ca:	9602      	str	r6, [sp, #8]
 80056cc:	68de      	ldr	r6, [r3, #12]
                    newBufferLen += info.percentSymbol.Length;

                    sb = new System.Text.StringBuilder( (int)newBufferLen );
 80056ce:	f7fb f927 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
                    // For number and exponent
                    newBufferLen += info.negativeSign.Length;

                    // For all the grouping sizes
                    newBufferLen += info.percentGroupSeparator.Length * digCount;
                    newBufferLen += info.percentDecimalSeparator.Length;
 80056d2:	9902      	ldr	r1, [sp, #8]
                    newBufferLen += info.percentSymbol.Length;

                    sb = new System.Text.StringBuilder( (int)newBufferLen );
 80056d4:	4607      	mov	r7, r0
                    if(this.scale < 0)
                        digCount = 0;
                    else
                        digCount = this.scale + digits;

                    newBufferLen += digCount;
 80056d6:	eb09 0005 	add.w	r0, r9, r5

                    // For number and exponent
                    newBufferLen += info.negativeSign.Length;
 80056da:	fb04 0009 	mla	r0, r4, r9, r0

                    // For all the grouping sizes
                    newBufferLen += info.percentGroupSeparator.Length * digCount;
 80056de:	4430      	add	r0, r6
                    newBufferLen += info.percentDecimalSeparator.Length;
 80056e0:	4408      	add	r0, r1
                    newBufferLen += info.percentSymbol.Length;
 80056e2:	f100 0169 	add.w	r1, r0, #105	; 0x69

                    sb = new System.Text.StringBuilder( (int)newBufferLen );
 80056e6:	4638      	mov	r0, r7
 80056e8:	f7fc f886 	bl	80017f8 <StringBuilder::.ctor#8787>

                    RoundNumber( this.scale + digits );
 80056ec:	f8d8 000c 	ldr.w	r0, [r8, #12]
 80056f0:	eb00 010b 	add.w	r1, r0, fp
 80056f4:	4640      	mov	r0, r8
 80056f6:	f000 fb7d 	bl	8005df4 <Number::RoundNumber#7570>
                    FormatPercent( sb, digits, info );
 80056fa:	4640      	mov	r0, r8
 80056fc:	4639      	mov	r1, r7
 80056fe:	465a      	mov	r2, fp
 8005700:	4653      	mov	r3, sl
 8005702:	f000 fbb9 	bl	8005e78 <Number::FormatPercent#7577>
                    throw new FormatException();
#endif
                // COMPlusThrow(kFormatException,L"Format_BadFormatSpecifier");
            }

            return sb.ToString();
 8005706:	4638      	mov	r0, r7
 8005708:	f7fc f856 	bl	80017b8 <StringBuilder::ToString#8798>
 800570c:	b003      	add	sp, #12
 800570e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005712:	480d      	ldr	r0, [pc, #52]	; (8005748 <Number::ToString#7554+0x2ac>)

                default:
#if EXCEPTION_STRINGS
                    throw new FormatException( "Format_BadFormatSpecifier" );
#else
                    throw new FormatException();
 8005714:	4908      	ldr	r1, [pc, #32]	; (8005738 <Number::ToString#7554+0x29c>)
 8005716:	4478      	add	r0, pc
 8005718:	180c      	adds	r4, r1, r0
 800571a:	490c      	ldr	r1, [pc, #48]	; (800574c <Number::ToString#7554+0x2b0>)
 800571c:	4401      	add	r1, r0
 800571e:	4620      	mov	r0, r4
 8005720:	f7fb f8fe 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8005724:	4605      	mov	r5, r0
 8005726:	f7ff fdbb 	bl	80052a0 <FormatException::.ctor#7338>
 800572a:	4620      	mov	r0, r4
 800572c:	4629      	mov	r1, r5
 800572e:	f7fb f90d 	bl	800094c <TypeSystemManager::Throw#5247>
 8005732:	46c0      	nop			; (mov r8, r8)
 8005734:	17ffc2c2 	.word	0x17ffc2c2
 8005738:	ffffea64 	.word	0xffffea64
 800573c:	e8007c5c 	.word	0xe8007c5c
 8005740:	17ffc1d8 	.word	0x17ffc1d8
 8005744:	17ffc262 	.word	0x17ffc262
 8005748:	17ffc09a 	.word	0x17ffc09a
 800574c:	e8009c7c 	.word	0xe8009c7c
 8005750:	17ffc0fe 	.word	0x17ffc0fe
 8005754:	17ffc14c 	.word	0x17ffc14c

08005758 <Number::ToStringFormat#7556>:
        }

        // rusa: see also Lightning\Src\VM\COMNumber.cpp::NumberToStringFormat
        private String ToStringFormat( String           format ,
                                       NumberFormatInfo info   )
        {
 8005758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800575c:	b09b      	sub	sp, #108	; 0x6c
 800575e:	4683      	mov	fp, r0
 8005760:	2000      	movs	r0, #0
 8005762:	9208      	str	r2, [sp, #32]
 8005764:	e9cd 0019 	strd	r0, r0, [sp, #100]	; 0x64
 8005768:	e9cd 0017 	strd	r0, r0, [sp, #92]	; 0x5c
 800576c:	e9cd 0015 	strd	r0, r0, [sp, #84]	; 0x54
 8005770:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
 8005774:	f88d 004b 	strb.w	r0, [sp, #75]	; 0x4b
 8005778:	f88d 004a 	strb.w	r0, [sp, #74]	; 0x4a
 800577c:	f88d 0049 	strb.w	r0, [sp, #73]	; 0x49
 8005780:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
 8005784:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
 8005788:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 800578c:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
 8005790:	9119      	str	r1, [sp, #100]	; 0x64
            ToStringFormatState state = new ToStringFormatState();

            state.format        = format;
            state.section       = (this.digits[0] == 0 ? 2 : (this.negative ? 1 : 0));
 8005792:	f8db 0014 	ldr.w	r0, [fp, #20]
 8005796:	8980      	ldrh	r0, [r0, #12]
 8005798:	b128      	cbz	r0, 80057a6 <Number::ToStringFormat#7556+0x4e>
 800579a:	f89b 1010 	ldrb.w	r1, [fp, #16]
 800579e:	2900      	cmp	r1, #0
 80057a0:	bf18      	it	ne
 80057a2:	2101      	movne	r1, #1
 80057a4:	e000      	b.n	80057a8 <Number::ToStringFormat#7556+0x50>
 80057a6:	2102      	movs	r1, #2
 80057a8:	910c      	str	r1, [sp, #48]	; 0x30
            state.sectionOffset = FindSection( state.format, state.section );
 80057aa:	9819      	ldr	r0, [sp, #100]	; 0x64
 80057ac:	f000 fdda 	bl	8006364 <Number::FindSection#7557>
 80057b0:	ac0c      	add	r4, sp, #48	; 0x30
 80057b2:	900d      	str	r0, [sp, #52]	; 0x34
 80057b4:	e001      	b.n	80057ba <Number::ToStringFormat#7556+0x62>
                    if(this.digits[0] == 0)
                    {
                        state.src = FindSection( state.format, 2 );
                        if(state.src != state.sectionOffset)
                        {
                            state.sectionOffset = state.src;
 80057b6:	981a      	ldr	r0, [sp, #104]	; 0x68
 80057b8:	900d      	str	r0, [sp, #52]	; 0x34
            state.section       = (this.digits[0] == 0 ? 2 : (this.negative ? 1 : 0));
            state.sectionOffset = FindSection( state.format, state.section );

            while(true)
            {
                state.Reset();
 80057ba:	4620      	mov	r0, r4
 80057bc:	f000 fe22 	bl	8006404 <ToStringFormatState::Reset#11161>

                char ch = state.DecodeFormat( state.Get() );
 80057c0:	4620      	mov	r0, r4
 80057c2:	f000 fe2e 	bl	8006422 <ToStringFormatState::Get#11165>
 80057c6:	4601      	mov	r1, r0
 80057c8:	4620      	mov	r0, r4
 80057ca:	f000 fe3b 	bl	8006444 <ToStringFormatState::DecodeFormat#11163>

                if(this.digits[0] != 0)
 80057ce:	f8db 0014 	ldr.w	r0, [fp, #20]
 80057d2:	8980      	ldrh	r0, [r0, #12]
 80057d4:	b300      	cbz	r0, 8005818 <Number::ToStringFormat#7556+0xc0>
                {
                    this.scale += state.scaleAdjust;
 80057d6:	f8db 000c 	ldr.w	r0, [fp, #12]
 80057da:	9911      	ldr	r1, [sp, #68]	; 0x44
 80057dc:	4408      	add	r0, r1
 80057de:	f8cb 000c 	str.w	r0, [fp, #12]

                    int pos = (state.scientific ?
 80057e2:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80057e6:	b108      	cbz	r0, 80057ec <Number::ToStringFormat#7556+0x94>
 80057e8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80057ea:	e005      	b.n	80057f8 <Number::ToStringFormat#7556+0xa0>
 80057ec:	f8db 000c 	ldr.w	r0, [fp, #12]
 80057f0:	9910      	ldr	r1, [sp, #64]	; 0x40
 80057f2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80057f4:	4408      	add	r0, r1
 80057f6:	1a81      	subs	r1, r0, r2
                               state.digitCount :
                               (this.scale + state.digitCount - state.decimalPos));

                    this.RoundNumber( pos );
 80057f8:	4658      	mov	r0, fp
 80057fa:	f000 fafb 	bl	8005df4 <Number::RoundNumber#7570>

                    if(this.digits[0] == 0)
 80057fe:	f8db 0014 	ldr.w	r0, [fp, #20]
 8005802:	8980      	ldrh	r0, [r0, #12]
 8005804:	b958      	cbnz	r0, 800581e <Number::ToStringFormat#7556+0xc6>
                    {
                        state.src = FindSection( state.format, 2 );
 8005806:	9819      	ldr	r0, [sp, #100]	; 0x64
 8005808:	2102      	movs	r1, #2
 800580a:	f000 fdab 	bl	8006364 <Number::FindSection#7557>
 800580e:	901a      	str	r0, [sp, #104]	; 0x68
                        if(state.src != state.sectionOffset)
 8005810:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005812:	4288      	cmp	r0, r1
 8005814:	d1cf      	bne.n	80057b6 <Number::ToStringFormat#7556+0x5e>
 8005816:	e002      	b.n	800581e <Number::ToStringFormat#7556+0xc6>
 8005818:	2000      	movs	r0, #0
 800581a:	f88b 0010 	strb.w	r0, [fp, #16]
                    this.negative = false;
                }
                break;
            }

            state.firstDigit = (state.firstDigit < state.decimalPos) ? state.decimalPos - state.firstDigit : 0;
 800581e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005820:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005822:	4288      	cmp	r0, r1
 8005824:	da03      	bge.n	800582e <Number::ToStringFormat#7556+0xd6>
 8005826:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005828:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800582a:	1a08      	subs	r0, r1, r0
 800582c:	e000      	b.n	8005830 <Number::ToStringFormat#7556+0xd8>
 800582e:	2000      	movs	r0, #0
 8005830:	900e      	str	r0, [sp, #56]	; 0x38
            state.lastDigit  = (state.lastDigit  > state.decimalPos) ? state.decimalPos - state. lastDigit : 0;
 8005832:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005834:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005836:	4288      	cmp	r0, r1
 8005838:	dd03      	ble.n	8005842 <Number::ToStringFormat#7556+0xea>
 800583a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800583c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800583e:	1a08      	subs	r0, r1, r0
 8005840:	e000      	b.n	8005844 <Number::ToStringFormat#7556+0xec>
 8005842:	2000      	movs	r0, #0
 8005844:	900f      	str	r0, [sp, #60]	; 0x3c

            int digPos;
            int adjust;

            if(state.scientific)
 8005846:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 800584a:	b120      	cbz	r0, 8005856 <Number::ToStringFormat#7556+0xfe>
            {
                digPos = state.decimalPos;
 800584c:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 8005850:	2000      	movs	r0, #0
 8005852:	900b      	str	r0, [sp, #44]	; 0x2c
 8005854:	e00d      	b.n	8005872 <Number::ToStringFormat#7556+0x11a>
                adjust = 0;
            }
            else
            {
                digPos = (this.scale > state.decimalPos) ? this.scale : state.decimalPos;
 8005856:	f8db 000c 	ldr.w	r0, [fp, #12]
 800585a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800585c:	4288      	cmp	r0, r1
 800585e:	bfd4      	ite	le
 8005860:	f8dd 904c 	ldrle.w	r9, [sp, #76]	; 0x4c
 8005864:	f8db 900c 	ldrgt.w	r9, [fp, #12]
                adjust = this.scale - state.decimalPos;
 8005868:	f8db 000c 	ldr.w	r0, [fp, #12]
 800586c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800586e:	1a40      	subs	r0, r0, r1
 8005870:	900b      	str	r0, [sp, #44]	; 0x2c
            }

            state.src = state.sectionOffset;
 8005872:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005874:	901a      	str	r0, [sp, #104]	; 0x68
            ulong adjustLength   = (adjust > 0) ? (uint)adjust : 0U;
            int   bufferLength   = 125;
            int[] thousandSepPos = null;
            int   thousandSepCtr = -1;

            if(state.thousandSeps != 0)
 8005876:	9816      	ldr	r0, [sp, #88]	; 0x58
 8005878:	b3d8      	cbz	r0, 80058f2 <Number::ToStringFormat#7556+0x19a>
 800587a:	9a08      	ldr	r2, [sp, #32]
 800587c:	f8cd b018 	str.w	fp, [sp, #24]
            {
                int groupSizeLen = info.numberGroupSizes.Length;
 8005880:	6890      	ldr	r0, [r2, #8]
 8005882:	6885      	ldr	r5, [r0, #8]
                if(groupSizeLen == 0)
 8005884:	2d00      	cmp	r5, #0
 8005886:	d07d      	beq.n	8005984 <Number::ToStringFormat#7556+0x22c>
 8005888:	f8df 13fc 	ldr.w	r1, [pc, #1020]	; 8005c88 <Number::ToStringFormat#7556+0x530>
                {
                    state.thousandSeps = 0;
                }
                else
                {
                    thousandSepPos = new int[bufferLength];
 800588c:	f8df b3fc 	ldr.w	fp, [pc, #1020]	; 8005c8c <Number::ToStringFormat#7556+0x534>
 8005890:	f8df 63fc 	ldr.w	r6, [pc, #1020]	; 8005c90 <Number::ToStringFormat#7556+0x538>
 8005894:	4614      	mov	r4, r2
 8005896:	227d      	movs	r2, #125	; 0x7d
 8005898:	4479      	add	r1, pc
 800589a:	eb0b 0001 	add.w	r0, fp, r1
 800589e:	4431      	add	r1, r6
 80058a0:	f7fb fe88 	bl	80015b4 <DefaultTypeSystemManager::AllocateArray#5255>
 80058a4:	9009      	str	r0, [sp, #36]	; 0x24
 80058a6:	980b      	ldr	r0, [sp, #44]	; 0x2c

                    long groupTotalSizeCount = info.numberGroupSizes[0];
                    int  groupSizeIndex      = 0;
                    int  groupSize           = (int)groupTotalSizeCount;
                    int  totalDigits         = digPos + ((adjust < 0) ? adjust : 0);
 80058a8:	464b      	mov	r3, r9
 80058aa:	f04f 0800 	mov.w	r8, #0
 80058ae:	227d      	movs	r2, #125	; 0x7d
 80058b0:	2800      	cmp	r0, #0
 80058b2:	bfb8      	it	lt
 80058b4:	4403      	addlt	r3, r0
                }
                else
                {
                    thousandSepPos = new int[bufferLength];

                    long groupTotalSizeCount = info.numberGroupSizes[0];
 80058b6:	68a0      	ldr	r0, [r4, #8]
 80058b8:	f04f 34ff 	mov.w	r4, #4294967295
 80058bc:	f8d0 a00c 	ldr.w	sl, [r0, #12]
                    int  groupSizeIndex      = 0;
                    int  groupSize           = (int)groupTotalSizeCount;
                    int  totalDigits         = digPos + ((adjust < 0) ? adjust : 0);
                    int  numDigits           = (state.firstDigit > totalDigits) ? state.firstDigit : totalDigits;
 80058c0:	980e      	ldr	r0, [sp, #56]	; 0x38
 80058c2:	4298      	cmp	r0, r3
 80058c4:	ea4f 77ea 	mov.w	r7, sl, asr #31
 80058c8:	bfc8      	it	gt
 80058ca:	9b0e      	ldrgt	r3, [sp, #56]	; 0x38

                    while(numDigits > groupTotalSizeCount)
 80058cc:	17d8      	asrs	r0, r3, #31
 80058ce:	9305      	str	r3, [sp, #20]
                        }

                        thousandSepCtr++;
                        thousandSepPos[thousandSepCtr] = (int)groupTotalSizeCount;

                        if(groupSizeIndex < groupSizeLen - 1)
 80058d0:	900a      	str	r0, [sp, #40]	; 0x28
 80058d2:	1e68      	subs	r0, r5, #1
 80058d4:	9007      	str	r0, [sp, #28]
 80058d6:	f8df 03bc 	ldr.w	r0, [pc, #956]	; 8005c94 <Number::ToStringFormat#7556+0x53c>
 80058da:	4478      	add	r0, pc
                        groupTotalSizeCount += groupSize;
                        if(bufferLength - thousandSepCtr < 10)
                        {
                            bufferLength *= 2;
                            int[] oldThousandSepPos = thousandSepPos;
                            thousandSepPos = new int[bufferLength];
 80058dc:	eb0b 0100 	add.w	r1, fp, r0
 80058e0:	f8dd b018 	ldr.w	fp, [sp, #24]
 80058e4:	4430      	add	r0, r6
 80058e6:	4656      	mov	r6, sl
 80058e8:	9103      	str	r1, [sp, #12]
 80058ea:	9002      	str	r0, [sp, #8]
 80058ec:	f8cd b018 	str.w	fp, [sp, #24]
 80058f0:	e00a      	b.n	8005908 <Number::ToStringFormat#7556+0x1b0>
 80058f2:	f04f 30ff 	mov.w	r0, #4294967295
 80058f6:	900a      	str	r0, [sp, #40]	; 0x28
 80058f8:	2000      	movs	r0, #0
 80058fa:	9009      	str	r0, [sp, #36]	; 0x24
 80058fc:	e04f      	b.n	800599e <Number::ToStringFormat#7556+0x246>
 80058fe:	f10d 0b10 	add.w	fp, sp, #16
 8005902:	9009      	str	r0, [sp, #36]	; 0x24
 8005904:	e89b 080c 	ldmia.w	fp, {r2, r3, fp}
                    int  groupSizeIndex      = 0;
                    int  groupSize           = (int)groupTotalSizeCount;
                    int  totalDigits         = digPos + ((adjust < 0) ? adjust : 0);
                    int  numDigits           = (state.firstDigit > totalDigits) ? state.firstDigit : totalDigits;

                    while(numDigits > groupTotalSizeCount)
 8005908:	1b10      	subs	r0, r2, r4
 800590a:	4553      	cmp	r3, sl
 800590c:	f04f 0100 	mov.w	r1, #0
 8005910:	bf98      	it	ls
 8005912:	2101      	movls	r1, #1
 8005914:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005916:	42bd      	cmp	r5, r7
 8005918:	f04f 0500 	mov.w	r5, #0
 800591c:	bfd8      	it	le
 800591e:	2501      	movle	r5, #1
 8005920:	ebb7 7fe3 	cmp.w	r7, r3, asr #31
 8005924:	bf08      	it	eq
 8005926:	460d      	moveq	r5, r1
 8005928:	bbb5      	cbnz	r5, 8005998 <Number::ToStringFormat#7556+0x240>
 800592a:	b3be      	cbz	r6, 800599c <Number::ToStringFormat#7556+0x244>
 800592c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800592e:	eb01 0184 	add.w	r1, r1, r4, lsl #2
                        if(groupSize == 0)
                        {
                            break;
                        }

                        thousandSepCtr++;
 8005932:	3401      	adds	r4, #1
 8005934:	f8c1 a010 	str.w	sl, [r1, #16]
                        thousandSepPos[thousandSepCtr] = (int)groupTotalSizeCount;

                        if(groupSizeIndex < groupSizeLen - 1)
 8005938:	9907      	ldr	r1, [sp, #28]
 800593a:	4588      	cmp	r8, r1
 800593c:	da06      	bge.n	800594c <Number::ToStringFormat#7556+0x1f4>
                        {
                            groupSizeIndex++;
                            groupSize = info.numberGroupSizes[groupSizeIndex];
 800593e:	9908      	ldr	r1, [sp, #32]
                        thousandSepCtr++;
                        thousandSepPos[thousandSepCtr] = (int)groupTotalSizeCount;

                        if(groupSizeIndex < groupSizeLen - 1)
                        {
                            groupSizeIndex++;
 8005940:	f108 0801 	add.w	r8, r8, #1
                            groupSize = info.numberGroupSizes[groupSizeIndex];
 8005944:	6889      	ldr	r1, [r1, #8]
 8005946:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 800594a:	68ce      	ldr	r6, [r1, #12]
                        }

                        groupTotalSizeCount += groupSize;
 800594c:	eb1a 0a06 	adds.w	sl, sl, r6
 8005950:	f1a0 0001 	sub.w	r0, r0, #1
 8005954:	eb47 77e6 	adc.w	r7, r7, r6, asr #31
                        if(bufferLength - thousandSepCtr < 10)
 8005958:	2809      	cmp	r0, #9
 800595a:	dcd6      	bgt.n	800590a <Number::ToStringFormat#7556+0x1b2>
                        {
                            bufferLength *= 2;
 800595c:	0052      	lsls	r2, r2, #1
                            int[] oldThousandSepPos = thousandSepPos;
                            thousandSepPos = new int[bufferLength];
 800595e:	9204      	str	r2, [sp, #16]
 8005960:	e9dd 1002 	ldrd	r1, r0, [sp, #8]
 8005964:	f7fb fe26 	bl	80015b4 <DefaultTypeSystemManager::AllocateArray#5255>
                            for(int i = 0; i < thousandSepCtr; i++)
 8005968:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800596a:	f100 010c 	add.w	r1, r0, #12
 800596e:	2300      	movs	r3, #0
 8005970:	320c      	adds	r2, #12
 8005972:	e004      	b.n	800597e <Number::ToStringFormat#7556+0x226>
                            {
                                thousandSepPos[i] = oldThousandSepPos[i];
 8005974:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8005978:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
                        if(bufferLength - thousandSepCtr < 10)
                        {
                            bufferLength *= 2;
                            int[] oldThousandSepPos = thousandSepPos;
                            thousandSepPos = new int[bufferLength];
                            for(int i = 0; i < thousandSepCtr; i++)
 800597c:	3301      	adds	r3, #1
 800597e:	42a3      	cmp	r3, r4
 8005980:	dbf8      	blt.n	8005974 <Number::ToStringFormat#7556+0x21c>
 8005982:	e7bc      	b.n	80058fe <Number::ToStringFormat#7556+0x1a6>
 8005984:	2000      	movs	r0, #0
 8005986:	f8dd b018 	ldr.w	fp, [sp, #24]
 800598a:	9016      	str	r0, [sp, #88]	; 0x58
 800598c:	2000      	movs	r0, #0
 800598e:	9009      	str	r0, [sp, #36]	; 0x24
 8005990:	f04f 30ff 	mov.w	r0, #4294967295
 8005994:	900a      	str	r0, [sp, #40]	; 0x28
 8005996:	e002      	b.n	800599e <Number::ToStringFormat#7556+0x246>
 8005998:	940a      	str	r4, [sp, #40]	; 0x28
 800599a:	e000      	b.n	800599e <Number::ToStringFormat#7556+0x246>
 800599c:	940a      	str	r4, [sp, #40]	; 0x28
 800599e:	49be      	ldr	r1, [pc, #760]	; (8005c98 <Number::ToStringFormat#7556+0x540>)

                    adjustLength += (ulong)((thousandSepCtr + 1) * info.numberGroupSeparator.Length);
                }
            }

            System.Text.StringBuilder sb = new System.Text.StringBuilder( 128 );
 80059a0:	48ba      	ldr	r0, [pc, #744]	; (8005c8c <Number::ToStringFormat#7556+0x534>)
 80059a2:	4abe      	ldr	r2, [pc, #760]	; (8005c9c <Number::ToStringFormat#7556+0x544>)
 80059a4:	4479      	add	r1, pc
 80059a6:	4408      	add	r0, r1
 80059a8:	4411      	add	r1, r2
 80059aa:	f7fa ffb9 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 80059ae:	2180      	movs	r1, #128	; 0x80
 80059b0:	4607      	mov	r7, r0
 80059b2:	f7fb ff21 	bl	80017f8 <StringBuilder::.ctor#8787>

            if(this.negative && state.sectionOffset == 0)
 80059b6:	f89b 0010 	ldrb.w	r0, [fp, #16]
 80059ba:	46d8      	mov	r8, fp
 80059bc:	f8dd b020 	ldr.w	fp, [sp, #32]
 80059c0:	b130      	cbz	r0, 80059d0 <Number::ToStringFormat#7556+0x278>
 80059c2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80059c4:	b920      	cbnz	r0, 80059d0 <Number::ToStringFormat#7556+0x278>
            {
                sb.Append( info.negativeSign );
 80059c6:	f8db 1018 	ldr.w	r1, [fp, #24]
 80059ca:	4638      	mov	r0, r7
 80059cc:	f000 fb2d 	bl	800602a <StringBuilder::Append#8806>
 80059d0:	ac0c      	add	r4, sp, #48	; 0x30
            }

            {
                char ch          = state.Get();
 80059d2:	4620      	mov	r0, r4
 80059d4:	f000 fd25 	bl	8006422 <ToStringFormatState::Get#11165>
 80059d8:	4606      	mov	r6, r0
 80059da:	f04f 0a00 	mov.w	sl, #0
 80059de:	f64f 70ff 	movw	r0, #65535	; 0xffff
                int  digitOffset = 0;

                while(ch != 0 && ch != ';')
 80059e2:	4206      	tst	r6, r0
 80059e4:	bf1c      	itt	ne
 80059e6:	b2b5      	uxthne	r5, r6
 80059e8:	2d3b      	cmpne	r5, #59	; 0x3b
 80059ea:	f000 8146 	beq.w	8005c7a <Number::ToStringFormat#7556+0x522>
                {
                    switch(ch)
 80059ee:	2d46      	cmp	r5, #70	; 0x46
 80059f0:	d30b      	bcc.n	8005a0a <Number::ToStringFormat#7556+0x2b2>
 80059f2:	2d5c      	cmp	r5, #92	; 0x5c
 80059f4:	d115      	bne.n	8005a22 <Number::ToStringFormat#7556+0x2ca>
                            {
                                char ch2 = state.Get();

                                if(ch2 != 0)
                                {
                                    sb.Append( ch2 );
 80059f6:	4620      	mov	r0, r4
 80059f8:	f000 fd13 	bl	8006422 <ToStringFormatState::Get#11165>
 80059fc:	4601      	mov	r1, r0
 80059fe:	f64f 70ff 	movw	r0, #65535	; 0xffff

                        case '\\':
                            {
                                char ch2 = state.Get();

                                if(ch2 != 0)
 8005a02:	4201      	tst	r1, r0
 8005a04:	d041      	beq.n	8005a8a <Number::ToStringFormat#7556+0x332>
                                {
                                    sb.Append( ch2 );
 8005a06:	4638      	mov	r0, r7
 8005a08:	e089      	b.n	8005b1e <Number::ToStringFormat#7556+0x3c6>
                char ch          = state.Get();
                int  digitOffset = 0;

                while(ch != 0 && ch != ';')
                {
                    switch(ch)
 8005a0a:	f1a5 0022 	sub.w	r0, r5, #34	; 0x22
 8005a0e:	2805      	cmp	r0, #5
 8005a10:	d91f      	bls.n	8005a52 <Number::ToStringFormat#7556+0x2fa>
 8005a12:	f1a5 002c 	sub.w	r0, r5, #44	; 0x2c
 8005a16:	2804      	cmp	r0, #4
 8005a18:	d932      	bls.n	8005a80 <Number::ToStringFormat#7556+0x328>
 8005a1a:	2d45      	cmp	r5, #69	; 0x45
 8005a1c:	f040 807d 	bne.w	8005b1a <Number::ToStringFormat#7556+0x3c2>
 8005a20:	e002      	b.n	8005a28 <Number::ToStringFormat#7556+0x2d0>
 8005a22:	2d65      	cmp	r5, #101	; 0x65
 8005a24:	f040 806f 	bne.w	8005b06 <Number::ToStringFormat#7556+0x3ae>
                        case 'e':
                            {
                                String sign = null;
                                int    i    = 0;

                                if(state.scientific)
 8005a28:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8005a2c:	2800      	cmp	r0, #0
 8005a2e:	f000 8079 	beq.w	8005b24 <Number::ToStringFormat#7556+0x3cc>
                                {
                                    char ch2 = state.PeekAt( 0 );
 8005a32:	4620      	mov	r0, r4
 8005a34:	2100      	movs	r1, #0
 8005a36:	f000 fdeb 	bl	8006610 <ToStringFormatState::PeekAt#11167>
 8005a3a:	b285      	uxth	r5, r0
                                    else if(ch2 == '+' &&
                                            ch3 == '0')
                                    {
                                        sign = info.positiveSign;
                                    }
                                    else if(ch2 == '-' &&
 8005a3c:	4620      	mov	r0, r4
 8005a3e:	2101      	movs	r1, #1
 8005a40:	f04f 0b01 	mov.w	fp, #1
 8005a44:	f000 fde4 	bl	8006610 <ToStringFormatState::PeekAt#11167>
                                if(state.scientific)
                                {
                                    char ch2 = state.PeekAt( 0 );
                                    char ch3 = state.PeekAt( 1 );

                                    if(ch2 == '0')
 8005a48:	2d30      	cmp	r5, #48	; 0x30
 8005a4a:	f040 8091 	bne.w	8005b70 <Number::ToStringFormat#7556+0x418>
 8005a4e:	2500      	movs	r5, #0
 8005a50:	e09d      	b.n	8005b8e <Number::ToStringFormat#7556+0x436>
 8005a52:	e8df f000 	tbb	[pc, r0]
 8005a56:	2309      	.short	0x2309
 8005a58:	09620362 	.word	0x09620362
                        case '\u2030':
                            sb.Append( info.perMilleSymbol );
                            break;

                        case '%':
                            sb.Append( info.percentSymbol );
 8005a5c:	f8db 1048 	ldr.w	r1, [fp, #72]	; 0x48
 8005a60:	e057      	b.n	8005b12 <Number::ToStringFormat#7556+0x3ba>
                                if(ch2 == 0 || ch2 == ch)
                                {
                                    break;
                                }

                                sb.Append( ch2 );
 8005a62:	4638      	mov	r0, r7
 8005a64:	f000 fda4 	bl	80065b0 <StringBuilder::Append#8820>
 8005a68:	4620      	mov	r0, r4
 8005a6a:	f000 fcda 	bl	8006422 <ToStringFormatState::Get#11165>
 8005a6e:	4601      	mov	r1, r0
 8005a70:	f64f 70ff 	movw	r0, #65535	; 0xffff
                        case '"':
                            while(true)
                            {
                                char ch2 = state.Get();

                                if(ch2 == 0 || ch2 == ch)
 8005a74:	4201      	tst	r1, r0
 8005a76:	bf1c      	itt	ne
 8005a78:	b288      	uxthne	r0, r1
 8005a7a:	42a8      	cmpne	r0, r5
 8005a7c:	d1f1      	bne.n	8005a62 <Number::ToStringFormat#7556+0x30a>
 8005a7e:	e004      	b.n	8005a8a <Number::ToStringFormat#7556+0x332>
 8005a80:	e8df f000 	tbb	[pc, r0]
 8005a84:	4b034b03 	.word	0x4b034b03
 8005a88:	000c      	.short	0x000c
                        default:
                            sb.Append( ch );
                            break;
                    }

                    ch = state.Get();
 8005a8a:	4620      	mov	r0, r4
 8005a8c:	f000 fcc9 	bl	8006422 <ToStringFormatState::Get#11165>
 8005a90:	4606      	mov	r6, r0
 8005a92:	e7a4      	b.n	80059de <Number::ToStringFormat#7556+0x286>
                                            thousandSepCtr--;
                                        }
                                    }

                                    digPos--;
                                    adjust--;
 8005a94:	3d01      	subs	r5, #1
                                            sb.Append( info.numberGroupSeparator );
                                            thousandSepCtr--;
                                        }
                                    }

                                    digPos--;
 8005a96:	f1a9 0901 	sub.w	r9, r9, #1
 8005a9a:	950b      	str	r5, [sp, #44]	; 0x2c
 8005a9c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
                    switch(ch)
                    {
                        case '#':
                        case '0':
                            {
                                while(adjust > 0)
 8005a9e:	2d01      	cmp	r5, #1
 8005aa0:	db53      	blt.n	8005b4a <Number::ToStringFormat#7556+0x3f2>
                                {
                                    sb.Append( this.digits[digitOffset] != 0 ? this.digits[digitOffset++] : '0' );
 8005aa2:	f8d8 0014 	ldr.w	r0, [r8, #20]
 8005aa6:	eb00 004a 	add.w	r0, r0, sl, lsl #1
 8005aaa:	8980      	ldrh	r0, [r0, #12]
 8005aac:	b138      	cbz	r0, 8005abe <Number::ToStringFormat#7556+0x366>
 8005aae:	f8d8 0014 	ldr.w	r0, [r8, #20]
 8005ab2:	eb00 004a 	add.w	r0, r0, sl, lsl #1
 8005ab6:	f10a 0a01 	add.w	sl, sl, #1
 8005aba:	8981      	ldrh	r1, [r0, #12]
 8005abc:	e000      	b.n	8005ac0 <Number::ToStringFormat#7556+0x368>
 8005abe:	2130      	movs	r1, #48	; 0x30
 8005ac0:	4638      	mov	r0, r7
 8005ac2:	f000 fd75 	bl	80065b0 <StringBuilder::Append#8820>
 8005ac6:	f1b9 0f01 	cmp.w	r9, #1
 8005aca:	f04f 0000 	mov.w	r0, #0
 8005ace:	bfc8      	it	gt
 8005ad0:	2001      	movgt	r0, #1

                                    if(state.thousandSeps != 0 &&
 8005ad2:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005ad4:	2900      	cmp	r1, #0
 8005ad6:	bf18      	it	ne
 8005ad8:	2101      	movne	r1, #1
 8005ada:	4201      	tst	r1, r0
 8005adc:	d0da      	beq.n	8005a94 <Number::ToStringFormat#7556+0x33c>
 8005ade:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005ae0:	f1b1 3fff 	cmp.w	r1, #4294967295
 8005ae4:	ddd6      	ble.n	8005a94 <Number::ToStringFormat#7556+0x33c>
                                       digPos             >  1 &&
                                       thousandSepCtr     >= 0  )
                                    {
                                        if(digPos == thousandSepPos[thousandSepCtr] + 1)
 8005ae6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ae8:	460e      	mov	r6, r1
 8005aea:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8005aee:	68c0      	ldr	r0, [r0, #12]
 8005af0:	3001      	adds	r0, #1
 8005af2:	4581      	cmp	r9, r0
 8005af4:	d1ce      	bne.n	8005a94 <Number::ToStringFormat#7556+0x33c>
                                        {
                                            sb.Append( info.numberGroupSeparator );
 8005af6:	f8db 1020 	ldr.w	r1, [fp, #32]
 8005afa:	4638      	mov	r0, r7
 8005afc:	f000 fa95 	bl	800602a <StringBuilder::Append#8806>
                                            thousandSepCtr--;
 8005b00:	3e01      	subs	r6, #1
 8005b02:	960a      	str	r6, [sp, #40]	; 0x28
 8005b04:	e7c6      	b.n	8005a94 <Number::ToStringFormat#7556+0x33c>
                char ch          = state.Get();
                int  digitOffset = 0;

                while(ch != 0 && ch != ';')
                {
                    switch(ch)
 8005b06:	f242 0030 	movw	r0, #8240	; 0x2030
 8005b0a:	4285      	cmp	r5, r0
 8005b0c:	d105      	bne.n	8005b1a <Number::ToStringFormat#7556+0x3c2>

                        case '.':
                            break;

                        case '\u2030':
                            sb.Append( info.perMilleSymbol );
 8005b0e:	f8db 104c 	ldr.w	r1, [fp, #76]	; 0x4c
                            break;

                        case '%':
                            sb.Append( info.percentSymbol );
 8005b12:	4638      	mov	r0, r7
 8005b14:	f000 fa89 	bl	800602a <StringBuilder::Append#8806>
 8005b18:	e7b7      	b.n	8005a8a <Number::ToStringFormat#7556+0x332>
                                }
                                break;
                            }

                        default:
                            sb.Append( ch );
 8005b1a:	4638      	mov	r0, r7
 8005b1c:	4631      	mov	r1, r6
 8005b1e:	f000 fd47 	bl	80065b0 <StringBuilder::Append#8820>
 8005b22:	e7b2      	b.n	8005a8a <Number::ToStringFormat#7556+0x332>
                                    FormatExponent( sb, exp, ch, sign, info.negativeSign, i );
                                    state.scientific = false;
                                }
                                else
                                {
                                    sb.Append( ch );
 8005b24:	4638      	mov	r0, r7
 8005b26:	4631      	mov	r1, r6
 8005b28:	e004      	b.n	8005b34 <Number::ToStringFormat#7556+0x3dc>

                                    while(state.PeekAt( 0 ) != 0)
                                    {
                                        sb.Append( state.Get() );
 8005b2a:	4620      	mov	r0, r4
 8005b2c:	f000 fc79 	bl	8006422 <ToStringFormatState::Get#11165>
 8005b30:	4601      	mov	r1, r0
 8005b32:	4638      	mov	r0, r7
                                    FormatExponent( sb, exp, ch, sign, info.negativeSign, i );
                                    state.scientific = false;
                                }
                                else
                                {
                                    sb.Append( ch );
 8005b34:	f000 fd3c 	bl	80065b0 <StringBuilder::Append#8820>

                                    while(state.PeekAt( 0 ) != 0)
 8005b38:	4620      	mov	r0, r4
 8005b3a:	2100      	movs	r1, #0
 8005b3c:	f000 fd68 	bl	8006610 <ToStringFormatState::PeekAt#11167>
 8005b40:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005b44:	4208      	tst	r0, r1
 8005b46:	d1f0      	bne.n	8005b2a <Number::ToStringFormat#7556+0x3d2>
 8005b48:	e79f      	b.n	8005a8a <Number::ToStringFormat#7556+0x332>

                                    digPos--;
                                    adjust--;
                                }

                                if(adjust < 0)
 8005b4a:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005b4e:	dd4b      	ble.n	8005be8 <Number::ToStringFormat#7556+0x490>
                                    adjust++;
                                    ch = (digPos <= state.firstDigit) ? '0' : '\0';
                                }
                                else
                                {
                                    ch = ((this.digits[digitOffset] != 0) ? this.digits[digitOffset++] : ((digPos > state.lastDigit) ? '0' : '\0'));
 8005b50:	f8d8 0014 	ldr.w	r0, [r8, #20]
 8005b54:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005b56:	eb00 004a 	add.w	r0, r0, sl, lsl #1
 8005b5a:	8980      	ldrh	r0, [r0, #12]
 8005b5c:	2800      	cmp	r0, #0
 8005b5e:	d04b      	beq.n	8005bf8 <Number::ToStringFormat#7556+0x4a0>
 8005b60:	f8d8 0014 	ldr.w	r0, [r8, #20]
 8005b64:	eb00 004a 	add.w	r0, r0, sl, lsl #1
 8005b68:	f10a 0a01 	add.w	sl, sl, #1
 8005b6c:	8986      	ldrh	r6, [r0, #12]
 8005b6e:	e048      	b.n	8005c02 <Number::ToStringFormat#7556+0x4aa>
 8005b70:	b280      	uxth	r0, r0

                                    if(ch2 == '0')
                                    {
                                        i++;
                                    }
                                    else if(ch2 == '+' &&
 8005b72:	2d2b      	cmp	r5, #43	; 0x2b
 8005b74:	bf08      	it	eq
 8005b76:	2830      	cmpeq	r0, #48	; 0x30
 8005b78:	d005      	beq.n	8005b86 <Number::ToStringFormat#7556+0x42e>
                                            ch3 == '0')
                                    {
                                        sign = info.positiveSign;
                                    }
                                    else if(ch2 == '-' &&
 8005b7a:	2d2d      	cmp	r5, #45	; 0x2d
 8005b7c:	bf08      	it	eq
 8005b7e:	2830      	cmpeq	r0, #48	; 0x30
 8005b80:	d174      	bne.n	8005c6c <Number::ToStringFormat#7556+0x514>
 8005b82:	2500      	movs	r5, #0
 8005b84:	e001      	b.n	8005b8a <Number::ToStringFormat#7556+0x432>
                                        i++;
                                    }
                                    else if(ch2 == '+' &&
                                            ch3 == '0')
                                    {
                                        sign = info.positiveSign;
 8005b86:	9808      	ldr	r0, [sp, #32]
 8005b88:	6945      	ldr	r5, [r0, #20]
 8005b8a:	f04f 0b00 	mov.w	fp, #0
                                    {
                                        sb.Append( ch );
                                        break;
                                    }

                                    state.Advance();
 8005b8e:	4620      	mov	r0, r4
 8005b90:	f000 fd4e 	bl	8006630 <ToStringFormatState::Advance#11169>
 8005b94:	e004      	b.n	8005ba0 <Number::ToStringFormat#7556+0x448>

                                    while(state.PeekAt( 0 ) == '0')
                                    {
                                        state.Advance();
 8005b96:	4620      	mov	r0, r4
 8005b98:	f000 fd4a 	bl	8006630 <ToStringFormatState::Advance#11169>
                                        i++;
 8005b9c:	f10b 0b01 	add.w	fp, fp, #1
                                        break;
                                    }

                                    state.Advance();

                                    while(state.PeekAt( 0 ) == '0')
 8005ba0:	4620      	mov	r0, r4
 8005ba2:	2100      	movs	r1, #0
 8005ba4:	f000 fd34 	bl	8006610 <ToStringFormatState::PeekAt#11167>
 8005ba8:	b280      	uxth	r0, r0
 8005baa:	2830      	cmp	r0, #48	; 0x30
 8005bac:	d0f3      	beq.n	8005b96 <Number::ToStringFormat#7556+0x43e>
                                    {
                                        state.Advance();
                                        i++;
                                    }

                                    if(i > 10)
 8005bae:	f1bb 0f0a 	cmp.w	fp, #10
 8005bb2:	bfc8      	it	gt
 8005bb4:	f04f 0b0a 	movgt.w	fp, #10
                                    {
                                        i = 10;
                                    }

                                    int exp = ((this.digits[0] == 0) ? 0 : (this.scale - state.decimalPos));
 8005bb8:	f8d8 0014 	ldr.w	r0, [r8, #20]
 8005bbc:	8980      	ldrh	r0, [r0, #12]
 8005bbe:	b120      	cbz	r0, 8005bca <Number::ToStringFormat#7556+0x472>
 8005bc0:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8005bc4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005bc6:	1a41      	subs	r1, r0, r1
 8005bc8:	e000      	b.n	8005bcc <Number::ToStringFormat#7556+0x474>
 8005bca:	2100      	movs	r1, #0
 8005bcc:	9a08      	ldr	r2, [sp, #32]
 8005bce:	462b      	mov	r3, r5

                                    FormatExponent( sb, exp, ch, sign, info.negativeSign, i );
 8005bd0:	6990      	ldr	r0, [r2, #24]
 8005bd2:	e9cd 0b00 	strd	r0, fp, [sp]
 8005bd6:	4693      	mov	fp, r2
 8005bd8:	4638      	mov	r0, r7
 8005bda:	4632      	mov	r2, r6
 8005bdc:	f000 fd2c 	bl	8006638 <Number::FormatExponent#7571>
 8005be0:	2000      	movs	r0, #0
 8005be2:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
 8005be6:	e750      	b.n	8005a8a <Number::ToStringFormat#7556+0x332>
                                }

                                if(adjust < 0)
                                {
                                    adjust++;
                                    ch = (digPos <= state.firstDigit) ? '0' : '\0';
 8005be8:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005bea:	2600      	movs	r6, #0
                                    adjust--;
                                }

                                if(adjust < 0)
                                {
                                    adjust++;
 8005bec:	3501      	adds	r5, #1
 8005bee:	4581      	cmp	r9, r0
 8005bf0:	bfd8      	it	le
 8005bf2:	2630      	movle	r6, #48	; 0x30
 8005bf4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005bf6:	e004      	b.n	8005c02 <Number::ToStringFormat#7556+0x4aa>
                                    ch = (digPos <= state.firstDigit) ? '0' : '\0';
                                }
                                else
                                {
                                    ch = ((this.digits[digitOffset] != 0) ? this.digits[digitOffset++] : ((digPos > state.lastDigit) ? '0' : '\0'));
 8005bf8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005bfa:	2600      	movs	r6, #0
 8005bfc:	4581      	cmp	r9, r0
 8005bfe:	bfc8      	it	gt
 8005c00:	2630      	movgt	r6, #48	; 0x30
 8005c02:	b376      	cbz	r6, 8005c62 <Number::ToStringFormat#7556+0x50a>
                                }

                                if(ch != 0)
                                {
                                    if(digPos == 0)
 8005c04:	910a      	str	r1, [sp, #40]	; 0x28
 8005c06:	f1b9 0f00 	cmp.w	r9, #0
 8005c0a:	d104      	bne.n	8005c16 <Number::ToStringFormat#7556+0x4be>
                                    {
                                        sb.Append( info.numberDecimalSeparator );
 8005c0c:	f8db 101c 	ldr.w	r1, [fp, #28]
 8005c10:	4638      	mov	r0, r7
 8005c12:	f000 fa0a 	bl	800602a <StringBuilder::Append#8806>
                                    }

                                    sb.Append( ch );
 8005c16:	4638      	mov	r0, r7
 8005c18:	4631      	mov	r1, r6
 8005c1a:	f000 fcc9 	bl	80065b0 <StringBuilder::Append#8820>
 8005c1e:	f1b9 0f01 	cmp.w	r9, #1
 8005c22:	f04f 0000 	mov.w	r0, #0
 8005c26:	bfc8      	it	gt
 8005c28:	2001      	movgt	r0, #1

                                    if(state.thousandSeps != 0 &&
 8005c2a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005c2c:	2900      	cmp	r1, #0
 8005c2e:	bf18      	it	ne
 8005c30:	2101      	movne	r1, #1
 8005c32:	4201      	tst	r1, r0
 8005c34:	d016      	beq.n	8005c64 <Number::ToStringFormat#7556+0x50c>
 8005c36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c38:	2a00      	cmp	r2, #0
 8005c3a:	db13      	blt.n	8005c64 <Number::ToStringFormat#7556+0x50c>
                                       digPos             >  1 &&
                                       thousandSepCtr     >= 0  )
                                    {
                                        if(digPos == thousandSepPos[thousandSepCtr] + 1)
 8005c3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c3e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8005c42:	68c0      	ldr	r0, [r0, #12]
 8005c44:	3001      	adds	r0, #1
 8005c46:	4581      	cmp	r9, r0
 8005c48:	d10c      	bne.n	8005c64 <Number::ToStringFormat#7556+0x50c>
                                        {
                                            sb.Append( info.numberGroupSeparator );
 8005c4a:	f8db 1020 	ldr.w	r1, [fp, #32]
 8005c4e:	4638      	mov	r0, r7
 8005c50:	950b      	str	r5, [sp, #44]	; 0x2c
 8005c52:	4615      	mov	r5, r2
 8005c54:	f000 f9e9 	bl	800602a <StringBuilder::Append#8806>
                                            thousandSepCtr--;
 8005c58:	3d01      	subs	r5, #1
                                        }
                                    }
                                }

                                digPos--;
 8005c5a:	f1a9 0901 	sub.w	r9, r9, #1
 8005c5e:	950a      	str	r5, [sp, #40]	; 0x28
 8005c60:	e713      	b.n	8005a8a <Number::ToStringFormat#7556+0x332>
 8005c62:	910a      	str	r1, [sp, #40]	; 0x28
 8005c64:	950b      	str	r5, [sp, #44]	; 0x2c
 8005c66:	f1a9 0901 	sub.w	r9, r9, #1
 8005c6a:	e70e      	b.n	8005a8a <Number::ToStringFormat#7556+0x332>
                                    {
                                        // Do nothing
                                    }
                                    else
                                    {
                                        sb.Append( ch );
 8005c6c:	4638      	mov	r0, r7
 8005c6e:	4631      	mov	r1, r6
 8005c70:	f000 fc9e 	bl	80065b0 <StringBuilder::Append#8820>
 8005c74:	f8dd b020 	ldr.w	fp, [sp, #32]
 8005c78:	e707      	b.n	8005a8a <Number::ToStringFormat#7556+0x332>

                    ch = state.Get();
                }
            }

            return sb.ToString();
 8005c7a:	4638      	mov	r0, r7
 8005c7c:	f7fb fd9c 	bl	80017b8 <StringBuilder::ToString#8798>
 8005c80:	b01b      	add	sp, #108	; 0x6c
 8005c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c86:	46c0      	nop			; (mov r8, r8)
 8005c88:	17ffbf18 	.word	0x17ffbf18
 8005c8c:	ffffea64 	.word	0xffffea64
 8005c90:	e800741c 	.word	0xe800741c
 8005c94:	17ffbed6 	.word	0x17ffbed6
 8005c98:	17ffbe0c 	.word	0x17ffbe0c
 8005c9c:	e8007c5c 	.word	0xe8007c5c

08005ca0 <Number::Int32ToHexString#7559>:
        }

        private static String Int32ToHexString( uint value,
                                               char hexBase,
                                               int digits )
        {
 8005ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ca2:	b081      	sub	sp, #4
 8005ca4:	460d      	mov	r5, r1
 8005ca6:	4911      	ldr	r1, [pc, #68]	; (8005cec <Number::Int32ToHexString#7559+0x4c>)
 8005ca8:	4614      	mov	r4, r2
 8005caa:	4606      	mov	r6, r0
            char[] buffer = new char[100];
 8005cac:	4810      	ldr	r0, [pc, #64]	; (8005cf0 <Number::Int32ToHexString#7559+0x50>)
 8005cae:	4a11      	ldr	r2, [pc, #68]	; (8005cf4 <Number::Int32ToHexString#7559+0x54>)
 8005cb0:	4479      	add	r1, pc
 8005cb2:	4408      	add	r0, r1
 8005cb4:	4411      	add	r1, r2
 8005cb6:	2264      	movs	r2, #100	; 0x64
 8005cb8:	f7fb fc7c 	bl	80015b4 <DefaultTypeSystemManager::AllocateArray#5255>
            if(digits < 1)
            {
                digits = 1;
 8005cbc:	2c01      	cmp	r4, #1
            }
            int start = Int32ToHexChars( buffer, 100, value, hexBase, digits );
 8005cbe:	4631      	mov	r1, r6
 8005cc0:	462a      	mov	r2, r5

        private static String Int32ToHexString( uint value,
                                               char hexBase,
                                               int digits )
        {
            char[] buffer = new char[100];
 8005cc2:	4607      	mov	r7, r0
            if(digits < 1)
            {
                digits = 1;
 8005cc4:	bfb8      	it	lt
 8005cc6:	2401      	movlt	r4, #1
            }
            int start = Int32ToHexChars( buffer, 100, value, hexBase, digits );
 8005cc8:	4623      	mov	r3, r4
 8005cca:	f000 fcfb 	bl	80066c4 <Number::Int32ToHexChars#7560>
 8005cce:	4604      	mov	r4, r0
            return new string( buffer, start, 100 - start );
 8005cd0:	f1c4 0564 	rsb	r5, r4, #100	; 0x64
 8005cd4:	4628      	mov	r0, r5
 8005cd6:	f7fb f947 	bl	8000f68 <String::FastAllocateString#4058>
 8005cda:	4639      	mov	r1, r7
 8005cdc:	4622      	mov	r2, r4
 8005cde:	462b      	mov	r3, r5
 8005ce0:	4606      	mov	r6, r0
 8005ce2:	f7fb fcf3 	bl	80016cc <String::.ctor#4055>
 8005ce6:	4630      	mov	r0, r6
 8005ce8:	b001      	add	sp, #4
 8005cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cec:	17ffbb00 	.word	0x17ffbb00
 8005cf0:	ffffea64 	.word	0xffffea64
 8005cf4:	e800744c 	.word	0xe800744c

08005cf8 <Number::Int32ToDecString#7558>:
        }

        // markples: see also Lightning\Src\VM\COMNumber.cpp::
        // STRINGREF Int32ToDecStr(int value, int digits, STRINGREF sNegative)
        private static String Int32ToDecString( int value, int digits, String sign )
        {
 8005cf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005cfc:	b081      	sub	sp, #4
 8005cfe:	460c      	mov	r4, r1
 8005d00:	4615      	mov	r5, r2
 8005d02:	4607      	mov	r7, r0
 8005d04:	f04f 0864 	mov.w	r8, #100	; 0x64
            //CQuickBytes buf;

            int bufferLength = 100; // was UINT
            int negLength = 0;
            // wchar* src = NULL;
            if(digits < 1) digits = 1;
 8005d08:	2c01      	cmp	r4, #1
 8005d0a:	bfb8      	it	lt
 8005d0c:	2401      	movlt	r4, #1

            if(value < 0)
 8005d0e:	f1b7 3fff 	cmp.w	r7, #4294967295
 8005d12:	dd02      	ble.n	8005d1a <Number::Int32ToDecString#7558+0x22>
 8005d14:	f04f 0900 	mov.w	r9, #0
 8005d18:	e006      	b.n	8005d28 <Number::Int32ToDecString#7558+0x30>
 8005d1a:	f8d5 900c 	ldr.w	r9, [r5, #12]
            {
                //src = sNegative->GetBuffer();
                negLength = sign.Length;
                if(negLength > 85)
 8005d1e:	f1b9 0f55 	cmp.w	r9, #85	; 0x55
 8005d22:	bfc8      	it	gt
 8005d24:	f109 080f 	addgt.w	r8, r9, #15
 8005d28:	4919      	ldr	r1, [pc, #100]	; (8005d90 <Number::Int32ToDecString#7558+0x98>)
                {
                    bufferLength = negLength + 15; //was implicit C++ cast
                }
            }

            char[] buffer = new char[bufferLength];
 8005d2a:	481a      	ldr	r0, [pc, #104]	; (8005d94 <Number::Int32ToDecString#7558+0x9c>)
 8005d2c:	4a1a      	ldr	r2, [pc, #104]	; (8005d98 <Number::Int32ToDecString#7558+0xa0>)
 8005d2e:	4479      	add	r1, pc
 8005d30:	4408      	add	r0, r1
 8005d32:	4411      	add	r1, r2
 8005d34:	4642      	mov	r2, r8
 8005d36:	f7fb fc3d 	bl	80015b4 <DefaultTypeSystemManager::AllocateArray#5255>
 8005d3a:	4606      	mov	r6, r0
 8005d3c:	2f00      	cmp	r7, #0
 8005d3e:	463a      	mov	r2, r7
            //if (!buffer)
            //    COMPlusThrowOM();

            int p = Int32ToDecChars( buffer, bufferLength, (uint)(value >= 0 ? value : -value), digits );
 8005d40:	4641      	mov	r1, r8
 8005d42:	4623      	mov	r3, r4
 8005d44:	bf48      	it	mi
 8005d46:	427a      	negmi	r2, r7
 8005d48:	4630      	mov	r0, r6
 8005d4a:	f7ff faf9 	bl	8005340 <Number::Int32ToDecChars#7568>
 8005d4e:	4604      	mov	r4, r0
            if(value < 0)
 8005d50:	f1b7 3fff 	cmp.w	r7, #4294967295
 8005d54:	dc0d      	bgt.n	8005d72 <Number::Int32ToDecString#7558+0x7a>
            {
                for(int i = negLength - 1; i >= 0; i--)
 8005d56:	f1a9 0701 	sub.w	r7, r9, #1
 8005d5a:	e008      	b.n	8005d6e <Number::Int32ToDecString#7558+0x76>
                {
                    buffer[--p] = sign[i];
 8005d5c:	4628      	mov	r0, r5
 8005d5e:	4639      	mov	r1, r7
 8005d60:	f7fb f98a 	bl	8001078 <String::get_Chars#4064>
 8005d64:	eb06 0144 	add.w	r1, r6, r4, lsl #1
            //    COMPlusThrowOM();

            int p = Int32ToDecChars( buffer, bufferLength, (uint)(value >= 0 ? value : -value), digits );
            if(value < 0)
            {
                for(int i = negLength - 1; i >= 0; i--)
 8005d68:	3f01      	subs	r7, #1
                {
                    buffer[--p] = sign[i];
 8005d6a:	3c01      	subs	r4, #1
 8005d6c:	8148      	strh	r0, [r1, #10]
            //    COMPlusThrowOM();

            int p = Int32ToDecChars( buffer, bufferLength, (uint)(value >= 0 ? value : -value), digits );
            if(value < 0)
            {
                for(int i = negLength - 1; i >= 0; i--)
 8005d6e:	2f00      	cmp	r7, #0
 8005d70:	daf4      	bge.n	8005d5c <Number::Int32ToDecString#7558+0x64>
                    // *(--p) = *(src+i);
                }
            }

            // _ASSERTE( buffer + bufferLength - p >=0 && buffer <= p);
            return new string( buffer, p, bufferLength - p );
 8005d72:	eba8 0504 	sub.w	r5, r8, r4
 8005d76:	4628      	mov	r0, r5
 8005d78:	f7fb f8f6 	bl	8000f68 <String::FastAllocateString#4058>
 8005d7c:	4631      	mov	r1, r6
 8005d7e:	4622      	mov	r2, r4
 8005d80:	462b      	mov	r3, r5
 8005d82:	4607      	mov	r7, r0
 8005d84:	f7fb fca2 	bl	80016cc <String::.ctor#4055>
 8005d88:	4638      	mov	r0, r7
 8005d8a:	b001      	add	sp, #4
 8005d8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005d90:	17ffba82 	.word	0x17ffba82
 8005d94:	ffffea64 	.word	0xffffea64
 8005d98:	e800744c 	.word	0xe800744c

08005d9c <Number::UInt32ToDecString#7561>:
            }
            return offset;
        }

        private static String UInt32ToDecString( uint value, int digits )
        {
 8005d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d9e:	b081      	sub	sp, #4
 8005da0:	460c      	mov	r4, r1
 8005da2:	4911      	ldr	r1, [pc, #68]	; (8005de8 <Number::UInt32ToDecString#7561+0x4c>)
 8005da4:	4605      	mov	r5, r0
            int bufferLength = 100;
            if(digits < 1) digits = 1;
            char[] buffer = new char[bufferLength];
 8005da6:	4811      	ldr	r0, [pc, #68]	; (8005dec <Number::UInt32ToDecString#7561+0x50>)
 8005da8:	4a11      	ldr	r2, [pc, #68]	; (8005df0 <Number::UInt32ToDecString#7561+0x54>)
 8005daa:	4479      	add	r1, pc
 8005dac:	4408      	add	r0, r1
 8005dae:	4411      	add	r1, r2
 8005db0:	2264      	movs	r2, #100	; 0x64
 8005db2:	f7fb fbff 	bl	80015b4 <DefaultTypeSystemManager::AllocateArray#5255>
        }

        private static String UInt32ToDecString( uint value, int digits )
        {
            int bufferLength = 100;
            if(digits < 1) digits = 1;
 8005db6:	2c01      	cmp	r4, #1
            char[] buffer = new char[bufferLength];
 8005db8:	f04f 0164 	mov.w	r1, #100	; 0x64
            int p = Int32ToDecChars( buffer, bufferLength, value, digits );
 8005dbc:	462a      	mov	r2, r5

        private static String UInt32ToDecString( uint value, int digits )
        {
            int bufferLength = 100;
            if(digits < 1) digits = 1;
            char[] buffer = new char[bufferLength];
 8005dbe:	4606      	mov	r6, r0
        }

        private static String UInt32ToDecString( uint value, int digits )
        {
            int bufferLength = 100;
            if(digits < 1) digits = 1;
 8005dc0:	bfb8      	it	lt
 8005dc2:	2401      	movlt	r4, #1
            char[] buffer = new char[bufferLength];
            int p = Int32ToDecChars( buffer, bufferLength, value, digits );
 8005dc4:	4623      	mov	r3, r4
 8005dc6:	f7ff fabb 	bl	8005340 <Number::Int32ToDecChars#7568>
 8005dca:	4604      	mov	r4, r0
            return new string( buffer, p, bufferLength - p );
 8005dcc:	f1c4 0564 	rsb	r5, r4, #100	; 0x64
 8005dd0:	4628      	mov	r0, r5
 8005dd2:	f7fb f8c9 	bl	8000f68 <String::FastAllocateString#4058>
 8005dd6:	4631      	mov	r1, r6
 8005dd8:	4622      	mov	r2, r4
 8005dda:	462b      	mov	r3, r5
 8005ddc:	4607      	mov	r7, r0
 8005dde:	f7fb fc75 	bl	80016cc <String::.ctor#4055>
 8005de2:	4638      	mov	r0, r7
 8005de4:	b001      	add	sp, #4
 8005de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005de8:	17ffba06 	.word	0x17ffba06
 8005dec:	ffffea64 	.word	0xffffea64
 8005df0:	e800744c 	.word	0xe800744c

08005df4 <Number::RoundNumber#7570>:
        }

        // markples: see also Lightning\Src\VM\COMNumber.cpp::
        // void RoundNumber(NUMBER* number, int pos)
        private void RoundNumber( int pos )
        {
 8005df4:	2200      	movs	r2, #0
 8005df6:	e000      	b.n	8005dfa <Number::RoundNumber#7570+0x6>
            int i = 0;
            while(i < pos && this.digits[i] != 0) i++;
 8005df8:	3201      	adds	r2, #1
 8005dfa:	428a      	cmp	r2, r1
 8005dfc:	da05      	bge.n	8005e0a <Number::RoundNumber#7570+0x16>
 8005dfe:	6943      	ldr	r3, [r0, #20]
 8005e00:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8005e04:	899b      	ldrh	r3, [r3, #12]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d1f6      	bne.n	8005df8 <Number::RoundNumber#7570+0x4>
            if(i == pos && this.digits[i] >= '5')
 8005e0a:	428a      	cmp	r2, r1
 8005e0c:	d107      	bne.n	8005e1e <Number::RoundNumber#7570+0x2a>
 8005e0e:	6941      	ldr	r1, [r0, #20]
 8005e10:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8005e14:	8989      	ldrh	r1, [r1, #12]
 8005e16:	2935      	cmp	r1, #53	; 0x35
 8005e18:	da0b      	bge.n	8005e32 <Number::RoundNumber#7570+0x3e>
 8005e1a:	e000      	b.n	8005e1e <Number::RoundNumber#7570+0x2a>
                    i = 1;
                }
            }
            else
            {
                while(i > 0 && this.digits[i - 1] == '0') i--;
 8005e1c:	3a01      	subs	r2, #1
 8005e1e:	2a01      	cmp	r2, #1
 8005e20:	db1f      	blt.n	8005e62 <Number::RoundNumber#7570+0x6e>
 8005e22:	6941      	ldr	r1, [r0, #20]
 8005e24:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8005e28:	8949      	ldrh	r1, [r1, #10]
 8005e2a:	2930      	cmp	r1, #48	; 0x30
 8005e2c:	d0f6      	beq.n	8005e1c <Number::RoundNumber#7570+0x28>
 8005e2e:	e018      	b.n	8005e62 <Number::RoundNumber#7570+0x6e>
        {
            int i = 0;
            while(i < pos && this.digits[i] != 0) i++;
            if(i == pos && this.digits[i] >= '5')
            {
                while(i > 0 && this.digits[i - 1] == '9') i--;
 8005e30:	3a01      	subs	r2, #1
 8005e32:	2a00      	cmp	r2, #0
 8005e34:	dd05      	ble.n	8005e42 <Number::RoundNumber#7570+0x4e>
 8005e36:	6941      	ldr	r1, [r0, #20]
 8005e38:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8005e3c:	8949      	ldrh	r1, [r1, #10]
 8005e3e:	2939      	cmp	r1, #57	; 0x39
 8005e40:	d0f6      	beq.n	8005e30 <Number::RoundNumber#7570+0x3c>
                if(i > 0)
 8005e42:	2a00      	cmp	r2, #0
 8005e44:	dd06      	ble.n	8005e54 <Number::RoundNumber#7570+0x60>
                {
                    this.digits[i - 1]++;
 8005e46:	6941      	ldr	r1, [r0, #20]
 8005e48:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8005e4c:	894b      	ldrh	r3, [r1, #10]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	814b      	strh	r3, [r1, #10]
 8005e52:	e006      	b.n	8005e62 <Number::RoundNumber#7570+0x6e>
                }
                else
                {
                    this.scale++;
 8005e54:	68c1      	ldr	r1, [r0, #12]
 8005e56:	2231      	movs	r2, #49	; 0x31
 8005e58:	3101      	adds	r1, #1
 8005e5a:	60c1      	str	r1, [r0, #12]
                    this.digits[0] = '1';
 8005e5c:	6941      	ldr	r1, [r0, #20]
 8005e5e:	818a      	strh	r2, [r1, #12]
 8005e60:	2201      	movs	r2, #1
            }
            else
            {
                while(i > 0 && this.digits[i - 1] == '0') i--;
            }
            if(i == 0)
 8005e62:	2a00      	cmp	r2, #0
 8005e64:	bf02      	ittt	eq
 8005e66:	2100      	moveq	r1, #0
 8005e68:	60c1      	streq	r1, [r0, #12]
 8005e6a:	7401      	strbeq	r1, [r0, #16]
            {
                this.scale = 0;
                this.negative = false;
            }
            this.digits[i] = '\0';
 8005e6c:	6940      	ldr	r0, [r0, #20]
 8005e6e:	2100      	movs	r1, #0
 8005e70:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8005e74:	8181      	strh	r1, [r0, #12]
 8005e76:	4770      	bx	lr

08005e78 <Number::FormatPercent#7577>:
        }

        private void FormatPercent( System.Text.StringBuilder sb     ,
                                    int                       digits ,
                                    NumberFormatInfo          info   )
        {
 8005e78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e7c:	b083      	sub	sp, #12
 8005e7e:	4681      	mov	r9, r0
 8005e80:	461c      	mov	r4, r3
 8005e82:	4690      	mov	r8, r2
 8005e84:	460e      	mov	r6, r1
            String fmt      = this.negative ? negPercentFormats[info.percentNegativePattern] :
 8005e86:	f899 0010 	ldrb.w	r0, [r9, #16]
 8005e8a:	b138      	cbz	r0, 8005e9c <Number::FormatPercent#7577+0x24>
 8005e8c:	481f      	ldr	r0, [pc, #124]	; (8005f0c <Number::FormatPercent#7577+0x94>)
 8005e8e:	491e      	ldr	r1, [pc, #120]	; (8005f08 <Number::FormatPercent#7577+0x90>)
 8005e90:	4478      	add	r0, pc
 8005e92:	4408      	add	r0, r1
 8005e94:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8005e96:	f8d0 00b0 	ldr.w	r0, [r0, #176]	; 0xb0
 8005e9a:	e006      	b.n	8005eaa <Number::FormatPercent#7577+0x32>
 8005e9c:	4819      	ldr	r0, [pc, #100]	; (8005f04 <Number::FormatPercent#7577+0x8c>)
 8005e9e:	491a      	ldr	r1, [pc, #104]	; (8005f08 <Number::FormatPercent#7577+0x90>)
 8005ea0:	4478      	add	r0, pc
 8005ea2:	4408      	add	r0, r1
 8005ea4:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8005ea6:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 8005eaa:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8005eae:	2700      	movs	r7, #0
 8005eb0:	68c5      	ldr	r5, [r0, #12]
 8005eb2:	e002      	b.n	8005eba <Number::FormatPercent#7577+0x42>
                    case '-':
                        sb.Append( info.negativeSign );
                        break;

                    case '%':
                        sb.Append( info.percentSymbol );
 8005eb4:	4630      	mov	r0, r6
 8005eb6:	f000 f8b8 	bl	800602a <StringBuilder::Append#8806>
            String fmt      = this.negative ? negPercentFormats[info.percentNegativePattern] :
                                              posPercentFormats[info.percentPositivePattern];
            int    fmtIndex = 0;
            char   ch;

            while((ch = fmt[fmtIndex++]) != 0)
 8005eba:	4628      	mov	r0, r5
 8005ebc:	4639      	mov	r1, r7
 8005ebe:	f7fb f8db 	bl	8001078 <String::get_Chars#4064>
 8005ec2:	b281      	uxth	r1, r0
 8005ec4:	2900      	cmp	r1, #0
 8005ec6:	bf04      	itt	eq
 8005ec8:	b003      	addeq	sp, #12
 8005eca:	e8bd 83f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005ece:	3701      	adds	r7, #1
            {
                switch(ch)
 8005ed0:	2923      	cmp	r1, #35	; 0x23
 8005ed2:	d003      	beq.n	8005edc <Number::FormatPercent#7577+0x64>
 8005ed4:	2925      	cmp	r1, #37	; 0x25
 8005ed6:	d10c      	bne.n	8005ef2 <Number::FormatPercent#7577+0x7a>
                    case '-':
                        sb.Append( info.negativeSign );
                        break;

                    case '%':
                        sb.Append( info.percentSymbol );
 8005ed8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005eda:	e7eb      	b.n	8005eb4 <Number::FormatPercent#7577+0x3c>
            while((ch = fmt[fmtIndex++]) != 0)
            {
                switch(ch)
                {
                    case '#':
                        FormatFixed( sb, digits,
 8005edc:	6923      	ldr	r3, [r4, #16]
 8005ede:	e9d4 0110 	ldrd	r0, r1, [r4, #64]	; 0x40
 8005ee2:	4642      	mov	r2, r8
 8005ee4:	e9cd 0100 	strd	r0, r1, [sp]
 8005ee8:	4648      	mov	r0, r9
 8005eea:	4631      	mov	r1, r6
 8005eec:	f000 f8ca 	bl	8006084 <Number::FormatFixed#7575>
 8005ef0:	e7e3      	b.n	8005eba <Number::FormatPercent#7577+0x42>
 8005ef2:	292d      	cmp	r1, #45	; 0x2d
 8005ef4:	d101      	bne.n	8005efa <Number::FormatPercent#7577+0x82>
                                     info.percentDecimalSeparator,
                                     info.percentGroupSeparator, info );
                        break;

                    case '-':
                        sb.Append( info.negativeSign );
 8005ef6:	69a1      	ldr	r1, [r4, #24]
 8005ef8:	e7dc      	b.n	8005eb4 <Number::FormatPercent#7577+0x3c>
                    case '%':
                        sb.Append( info.percentSymbol );
                        break;

                    default:
                        sb.Append( ch );
 8005efa:	4630      	mov	r0, r6
 8005efc:	f000 fb58 	bl	80065b0 <StringBuilder::Append#8820>
 8005f00:	e7db      	b.n	8005eba <Number::FormatPercent#7577+0x42>
 8005f02:	46c0      	nop			; (mov r8, r8)
 8005f04:	17ffb910 	.word	0x17ffb910
 8005f08:	fffffe3c 	.word	0xfffffe3c
 8005f0c:	17ffb920 	.word	0x17ffb920

08005f10 <Number::FormatNumber#7576>:
        }

        private void FormatNumber( System.Text.StringBuilder sb     ,
                                   int                       digits ,
                                   NumberFormatInfo          info   )
        {
 8005f10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005f14:	b083      	sub	sp, #12
 8005f16:	4681      	mov	r9, r0
 8005f18:	461c      	mov	r4, r3
 8005f1a:	4690      	mov	r8, r2
 8005f1c:	460e      	mov	r6, r1
            String fmt      = this.negative ? negNumberFormats[info.numberNegativePattern] : posNumberFormat;
 8005f1e:	f899 0010 	ldrb.w	r0, [r9, #16]
 8005f22:	b150      	cbz	r0, 8005f3a <Number::FormatNumber#7576+0x2a>
 8005f24:	481e      	ldr	r0, [pc, #120]	; (8005fa0 <Number::FormatNumber#7576+0x90>)
 8005f26:	491d      	ldr	r1, [pc, #116]	; (8005f9c <Number::FormatNumber#7576+0x8c>)
 8005f28:	4478      	add	r0, pc
 8005f2a:	4408      	add	r0, r1
 8005f2c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8005f2e:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
 8005f32:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8005f36:	68c5      	ldr	r5, [r0, #12]
 8005f38:	e005      	b.n	8005f46 <Number::FormatNumber#7576+0x36>
 8005f3a:	4817      	ldr	r0, [pc, #92]	; (8005f98 <Number::FormatNumber#7576+0x88>)
 8005f3c:	4917      	ldr	r1, [pc, #92]	; (8005f9c <Number::FormatNumber#7576+0x8c>)
 8005f3e:	4478      	add	r0, pc
 8005f40:	4408      	add	r0, r1
 8005f42:	f8d0 50b4 	ldr.w	r5, [r0, #180]	; 0xb4
 8005f46:	2700      	movs	r7, #0
 8005f48:	e00a      	b.n	8005f60 <Number::FormatNumber#7576+0x50>
                char ch = fmt[fmtIndex];

                switch(ch)
                {
                    case '#':
                        FormatFixed( sb, digits,
 8005f4a:	68a3      	ldr	r3, [r4, #8]
 8005f4c:	e9d4 0107 	ldrd	r0, r1, [r4, #28]
 8005f50:	4642      	mov	r2, r8
 8005f52:	e9cd 0100 	strd	r0, r1, [sp]
 8005f56:	4648      	mov	r0, r9
 8005f58:	4631      	mov	r1, r6
 8005f5a:	f000 f893 	bl	8006084 <Number::FormatFixed#7575>
                                   NumberFormatInfo          info   )
        {
            String fmt      = this.negative ? negNumberFormats[info.numberNegativePattern] : posNumberFormat;
            int    fmtIndex = 0;

            for(; fmtIndex < fmt.Length; fmtIndex++)
 8005f5e:	3701      	adds	r7, #1
 8005f60:	68e8      	ldr	r0, [r5, #12]
 8005f62:	4287      	cmp	r7, r0
 8005f64:	bfa4      	itt	ge
 8005f66:	b003      	addge	sp, #12
 8005f68:	e8bd 83f0 	ldmiage.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                    case '-':
                        sb.Append( info.negativeSign );
                        break;

                    default:
                        sb.Append( ch );
 8005f6c:	4628      	mov	r0, r5
 8005f6e:	4639      	mov	r1, r7
 8005f70:	f7fb f882 	bl	8001078 <String::get_Chars#4064>
 8005f74:	4601      	mov	r1, r0

            for(; fmtIndex < fmt.Length; fmtIndex++)
            {
                char ch = fmt[fmtIndex];

                switch(ch)
 8005f76:	b288      	uxth	r0, r1
 8005f78:	2823      	cmp	r0, #35	; 0x23
 8005f7a:	d0e6      	beq.n	8005f4a <Number::FormatNumber#7576+0x3a>
 8005f7c:	282d      	cmp	r0, #45	; 0x2d
 8005f7e:	d105      	bne.n	8005f8c <Number::FormatNumber#7576+0x7c>
                                     info.numberDecimalSeparator,
                                     info.numberGroupSeparator, info );
                        break;

                    case '-':
                        sb.Append( info.negativeSign );
 8005f80:	69a1      	ldr	r1, [r4, #24]
 8005f82:	4630      	mov	r0, r6
 8005f84:	f000 f851 	bl	800602a <StringBuilder::Append#8806>
                                   NumberFormatInfo          info   )
        {
            String fmt      = this.negative ? negNumberFormats[info.numberNegativePattern] : posNumberFormat;
            int    fmtIndex = 0;

            for(; fmtIndex < fmt.Length; fmtIndex++)
 8005f88:	3701      	adds	r7, #1
 8005f8a:	e7e9      	b.n	8005f60 <Number::FormatNumber#7576+0x50>
                    case '-':
                        sb.Append( info.negativeSign );
                        break;

                    default:
                        sb.Append( ch );
 8005f8c:	4630      	mov	r0, r6
 8005f8e:	f000 fb0f 	bl	80065b0 <StringBuilder::Append#8820>
                                   NumberFormatInfo          info   )
        {
            String fmt      = this.negative ? negNumberFormats[info.numberNegativePattern] : posNumberFormat;
            int    fmtIndex = 0;

            for(; fmtIndex < fmt.Length; fmtIndex++)
 8005f92:	3701      	adds	r7, #1
 8005f94:	e7e4      	b.n	8005f60 <Number::FormatNumber#7576+0x50>
 8005f96:	46c0      	nop			; (mov r8, r8)
 8005f98:	17ffb872 	.word	0x17ffb872
 8005f9c:	fffffe3c 	.word	0xfffffe3c
 8005fa0:	17ffb888 	.word	0x17ffb888

08005fa4 <Number::FormatScientific#7573>:

        private void FormatScientific( System.Text.StringBuilder sb      ,
                                       int                       digits  ,
                                       char                      expChar ,
                                       NumberFormatInfo          info    )
        {
 8005fa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005fa8:	b083      	sub	sp, #12
 8005faa:	4606      	mov	r6, r0
 8005fac:	4698      	mov	r8, r3
 8005fae:	4617      	mov	r7, r2
 8005fb0:	460d      	mov	r5, r1
            int dig = 0;  // number->digits;

            sb.Append( this.digits[dig] != 0 ? this.digits[dig++] : '0' );
 8005fb2:	6970      	ldr	r0, [r6, #20]
 8005fb4:	8980      	ldrh	r0, [r0, #12]
 8005fb6:	b118      	cbz	r0, 8005fc0 <Number::FormatScientific#7573+0x1c>
 8005fb8:	6970      	ldr	r0, [r6, #20]
 8005fba:	2401      	movs	r4, #1
 8005fbc:	8981      	ldrh	r1, [r0, #12]
 8005fbe:	e001      	b.n	8005fc4 <Number::FormatScientific#7573+0x20>
 8005fc0:	2130      	movs	r1, #48	; 0x30
 8005fc2:	2400      	movs	r4, #0
 8005fc4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8005fc8:	4628      	mov	r0, r5
 8005fca:	f000 faf1 	bl	80065b0 <StringBuilder::Append#8820>

            if(digits != 1)
 8005fce:	2f01      	cmp	r7, #1
 8005fd0:	d008      	beq.n	8005fe4 <Number::FormatScientific#7573+0x40>
            {
                // For E0 we would like to suppress the decimal point
                sb.Append( info.numberDecimalSeparator );
 8005fd2:	f8d9 101c 	ldr.w	r1, [r9, #28]
 8005fd6:	4628      	mov	r0, r5
 8005fd8:	f000 f827 	bl	800602a <StringBuilder::Append#8806>
 8005fdc:	e002      	b.n	8005fe4 <Number::FormatScientific#7573+0x40>
            }

            while(--digits > 0)
            {
                sb.Append( this.digits[dig] != 0 ? this.digits[dig++] : '0' );
 8005fde:	4628      	mov	r0, r5
 8005fe0:	f000 fae6 	bl	80065b0 <StringBuilder::Append#8820>
 8005fe4:	6970      	ldr	r0, [r6, #20]
            {
                // For E0 we would like to suppress the decimal point
                sb.Append( info.numberDecimalSeparator );
            }

            while(--digits > 0)
 8005fe6:	3f01      	subs	r7, #1
 8005fe8:	2f01      	cmp	r7, #1
            {
                sb.Append( this.digits[dig] != 0 ? this.digits[dig++] : '0' );
 8005fea:	f100 000c 	add.w	r0, r0, #12
            {
                // For E0 we would like to suppress the decimal point
                sb.Append( info.numberDecimalSeparator );
            }

            while(--digits > 0)
 8005fee:	db0a      	blt.n	8006006 <Number::FormatScientific#7573+0x62>
            {
                sb.Append( this.digits[dig] != 0 ? this.digits[dig++] : '0' );
 8005ff0:	f830 0014 	ldrh.w	r0, [r0, r4, lsl #1]
 8005ff4:	b128      	cbz	r0, 8006002 <Number::FormatScientific#7573+0x5e>
 8005ff6:	6970      	ldr	r0, [r6, #20]
 8005ff8:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 8005ffc:	3401      	adds	r4, #1
 8005ffe:	8981      	ldrh	r1, [r0, #12]
 8006000:	e7ed      	b.n	8005fde <Number::FormatScientific#7573+0x3a>
 8006002:	2130      	movs	r1, #48	; 0x30
 8006004:	e7eb      	b.n	8005fde <Number::FormatScientific#7573+0x3a>
            }

            int e = this.digits[0] == 0 ? 0 : this.scale - 1;
 8006006:	8800      	ldrh	r0, [r0, #0]
 8006008:	b110      	cbz	r0, 8006010 <Number::FormatScientific#7573+0x6c>
 800600a:	68f0      	ldr	r0, [r6, #12]
 800600c:	1e41      	subs	r1, r0, #1
 800600e:	e000      	b.n	8006012 <Number::FormatScientific#7573+0x6e>
 8006010:	2100      	movs	r1, #0

            FormatExponent( sb, e, expChar, info.positiveSign, info.negativeSign, 3 );
 8006012:	e9d9 3005 	ldrd	r3, r0, [r9, #20]
 8006016:	2203      	movs	r2, #3
 8006018:	e9cd 0200 	strd	r0, r2, [sp]
 800601c:	4628      	mov	r0, r5
 800601e:	4642      	mov	r2, r8
 8006020:	f000 fb0a 	bl	8006638 <Number::FormatExponent#7571>
 8006024:	b003      	add	sp, #12
 8006026:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800602a <StringBuilder::Append#8806>:
            return this;
        }

        // Appends a copy of this string at the end of this string builder.
        public StringBuilder Append( String value )
        {
 800602a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	460d      	mov	r5, r1
 8006032:	4604      	mov	r4, r0
 8006034:	2000      	movs	r0, #0
 8006036:	9001      	str	r0, [sp, #4]
 8006038:	b1fd      	cbz	r5, 800607a <StringBuilder::Append#8806+0x50>
 800603a:	a901      	add	r1, sp, #4
            {
                return this;
            }

            Thread th;
            String currentString = GetThreadSafeString( out th );
 800603c:	4620      	mov	r0, r4
 800603e:	f000 fcb7 	bl	80069b0 <StringBuilder::GetThreadSafeString#8792>
 8006042:	4606      	mov	r6, r0
 8006044:	e9d6 0802 	ldrd	r0, r8, [r6, #8]
 8006048:	68e9      	ldr	r1, [r5, #12]

            int currentLength = currentString.Length;

            int requiredLength = currentLength + value.Length;
 800604a:	eb08 0701 	add.w	r7, r8, r1

            if(NeedsAllocation( currentString, requiredLength ))
 800604e:	4639      	mov	r1, r7
 8006050:	f000 fd26 	bl	8006aa0 <StringBuilder::NeedsAllocation#8808>
 8006054:	f010 0fff 	tst.w	r0, #255	; 0xff
 8006058:	d005      	beq.n	8006066 <StringBuilder::Append#8806+0x3c>
            {
                String newString = GetNewString( currentString, requiredLength );
 800605a:	4620      	mov	r0, r4
 800605c:	4631      	mov	r1, r6
 800605e:	463a      	mov	r2, r7
 8006060:	f000 fd24 	bl	8006aac <StringBuilder::GetNewString#8809>
 8006064:	4606      	mov	r6, r0
                newString.AppendInPlace( value, currentLength );
                ReplaceString( th, newString );
            }
            else
            {
                currentString.AppendInPlace( value, currentLength );
 8006066:	4630      	mov	r0, r6
 8006068:	4629      	mov	r1, r5
 800606a:	4642      	mov	r2, r8
 800606c:	f7fb fe1b 	bl	8001ca6 <String::AppendInPlace#2777>
                ReplaceString( th, currentString );
 8006070:	9901      	ldr	r1, [sp, #4]
 8006072:	4620      	mov	r0, r4
 8006074:	4632      	mov	r2, r6
 8006076:	f000 fd5f 	bl	8006b38 <StringBuilder::ReplaceString#8810>
 800607a:	4620      	mov	r0, r4
 800607c:	b002      	add	sp, #8
 800607e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006082:	46c0      	nop			; (mov r8, r8)

08006084 <Number::FormatFixed#7575>:
                                  int                       digits      ,
                                  int[]                     groupDigits ,
                                  String                    sDecimal    ,
                                  String                    sGroup      ,
                                  NumberFormatInfo          info        )
        {
 8006084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006088:	b087      	sub	sp, #28
 800608a:	4683      	mov	fp, r0
 800608c:	4614      	mov	r4, r2
 800608e:	468a      	mov	sl, r1
            //          int bufferSize = 0;   // the length of the result buffer string.
            int digPos = this.scale;
 8006090:	f8db 800c 	ldr.w	r8, [fp, #12]
 8006094:	f8cd b014 	str.w	fp, [sp, #20]
            int dig = 0; // = number->digits;

            if(digPos > 0)
 8006098:	f1b8 0f01 	cmp.w	r8, #1
 800609c:	db32      	blt.n	8006104 <Number::FormatFixed#7575+0x80>
            {
                if(groupDigits != null)
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d040      	beq.n	8006124 <Number::FormatFixed#7575+0xa0>
 80060a2:	9d11      	ldr	r5, [sp, #68]	; 0x44
                {
                    // index into the groupDigits array.
                    int groupSizeIndex = 0;
                    // the current total of group size.
                    int groupSizeCount = groupDigits[groupSizeIndex];
 80060a4:	f8d3 c008 	ldr.w	ip, [r3, #8]
 80060a8:	f04f 0900 	mov.w	r9, #0
                    // the length of groupDigits array.
                    int groupSizeLen = groupDigits.Length;
                    // the length of the result buffer string.
                    int bufferSize = digPos;
 80060ac:	68ef      	ldr	r7, [r5, #12]
                    int groupSize = 0;

                    //
                    // Find out the size of the string buffer for the result.
                    //
                    if(groupSizeLen != 0) // You can pass in 0 length arrays
 80060ae:	f1bc 0f00 	cmp.w	ip, #0
 80060b2:	d04f      	beq.n	8006154 <Number::FormatFixed#7575+0xd0>
                if(groupDigits != null)
                {
                    // index into the groupDigits array.
                    int groupSizeIndex = 0;
                    // the current total of group size.
                    int groupSizeCount = groupDigits[groupSizeIndex];
 80060b4:	68d8      	ldr	r0, [r3, #12]
                            {
                                break;
                            }

                            bufferSize += groupSeparatorLen;
                            if(groupSizeIndex < groupSizeLen - 1)
 80060b6:	f1ac 0101 	sub.w	r1, ip, #1
 80060ba:	4646      	mov	r6, r8
                    //
                    // Find out the size of the string buffer for the result.
                    //
                    if(groupSizeLen != 0) // You can pass in 0 length arrays
                    {
                        while(digPos > groupSizeCount)
 80060bc:	4580      	cmp	r8, r0
 80060be:	dd27      	ble.n	8006110 <Number::FormatFixed#7575+0x8c>
                        {
                            groupSize = groupDigits[groupSizeIndex];
 80060c0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80060c4:	68d2      	ldr	r2, [r2, #12]
 80060c6:	b31a      	cbz	r2, 8006110 <Number::FormatFixed#7575+0x8c>
                            {
                                break;
                            }

                            bufferSize += groupSeparatorLen;
                            if(groupSizeIndex < groupSizeLen - 1)
 80060c8:	4589      	cmp	r9, r1
 80060ca:	bfb8      	it	lt
 80060cc:	f109 0901 	addlt.w	r9, r9, #1
                            {
                                groupSizeIndex++;
                            }
                            groupSizeCount += groupDigits[groupSizeIndex];
 80060d0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80060d4:	68d2      	ldr	r2, [r2, #12]
 80060d6:	4410      	add	r0, r2
                            if(groupSizeCount < 0 || bufferSize < 0)
 80060d8:	2800      	cmp	r0, #0
                            if(groupSize == 0)
                            {
                                break;
                            }

                            bufferSize += groupSeparatorLen;
 80060da:	bfa4      	itt	ge
 80060dc:	443e      	addge	r6, r7
 80060de:	f1b6 3fff 	cmpge.w	r6, #4294967295
 80060e2:	dceb      	bgt.n	80060bc <Number::FormatFixed#7575+0x38>
 80060e4:	4868      	ldr	r0, [pc, #416]	; (8006288 <Number::FormatFixed#7575+0x204>)
                                groupSizeIndex++;
                            }
                            groupSizeCount += groupDigits[groupSizeIndex];
                            if(groupSizeCount < 0 || bufferSize < 0)
                            {
                                throw new ArgumentOutOfRangeException();
 80060e6:	4969      	ldr	r1, [pc, #420]	; (800628c <Number::FormatFixed#7575+0x208>)
 80060e8:	4478      	add	r0, pc
 80060ea:	180c      	adds	r4, r1, r0
 80060ec:	4968      	ldr	r1, [pc, #416]	; (8006290 <Number::FormatFixed#7575+0x20c>)
 80060ee:	4401      	add	r1, r0
 80060f0:	4620      	mov	r0, r4
 80060f2:	f7fa fc15 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 80060f6:	4605      	mov	r5, r0
 80060f8:	f7fb fa7a 	bl	80015f0 <ArgumentOutOfRangeException::.ctor#6367>
 80060fc:	4620      	mov	r0, r4
 80060fe:	4629      	mov	r1, r5
 8006100:	f7fa fc24 	bl	800094c <TypeSystemManager::Throw#5247>
                    } while(--digPos > 0);
                }
            }
            else
            {
                sb.Append( '0' );
 8006104:	4650      	mov	r0, sl
 8006106:	2130      	movs	r1, #48	; 0x30
 8006108:	f000 fa52 	bl	80065b0 <StringBuilder::Append#8820>
 800610c:	2700      	movs	r7, #0
 800610e:	e091      	b.n	8006234 <Number::FormatFixed#7575+0x1b0>
 8006110:	9706      	str	r7, [sp, #24]
 8006112:	f8cd c00c 	str.w	ip, [sp, #12]
 8006116:	e9cd 4a00 	strd	r4, sl, [sp]
 800611a:	b310      	cbz	r0, 8006162 <Number::FormatFixed#7575+0xde>
                        // If you passed in an array with one
                        // entry as 0, groupSizeCount == 0
                        if(groupSizeCount == 0)
                            groupSize = 0;
                        else
                            groupSize = groupDigits[0];
 800611c:	f8d3 900c 	ldr.w	r9, [r3, #12]
 8006120:	9302      	str	r3, [sp, #8]
 8006122:	e021      	b.n	8006168 <Number::FormatFixed#7575+0xe4>
 8006124:	2700      	movs	r7, #0
                }
                else
                {
                    do
                    {
                        sb.Append( this.digits[dig] != 0 ? this.digits[dig++] : '0' );
 8006126:	f8db 0014 	ldr.w	r0, [fp, #20]
 800612a:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 800612e:	8980      	ldrh	r0, [r0, #12]
 8006130:	b130      	cbz	r0, 8006140 <Number::FormatFixed#7575+0xbc>
 8006132:	f8db 0014 	ldr.w	r0, [fp, #20]
 8006136:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 800613a:	3701      	adds	r7, #1
 800613c:	8981      	ldrh	r1, [r0, #12]
 800613e:	e000      	b.n	8006142 <Number::FormatFixed#7575+0xbe>
 8006140:	2130      	movs	r1, #48	; 0x30
 8006142:	4650      	mov	r0, sl
 8006144:	f000 fa34 	bl	80065b0 <StringBuilder::Append#8820>
                    } while(--digPos > 0);
 8006148:	f1a8 0801 	sub.w	r8, r8, #1
 800614c:	f1b8 0f00 	cmp.w	r8, #0
 8006150:	dce9      	bgt.n	8006126 <Number::FormatFixed#7575+0xa2>
 8006152:	e06f      	b.n	8006234 <Number::FormatFixed#7575+0x1b0>
 8006154:	4646      	mov	r6, r8
 8006156:	9706      	str	r7, [sp, #24]
 8006158:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800615c:	e9cd 4a00 	strd	r4, sl, [sp]
 8006160:	e002      	b.n	8006168 <Number::FormatFixed#7575+0xe4>
 8006162:	9302      	str	r3, [sp, #8]
 8006164:	f04f 0900 	mov.w	r9, #0
                    }

                    groupSizeIndex = 0;

                    int digitCount = 0;
                    int digLength  = (int)wcslen( this.digits, dig );
 8006168:	f8db 0014 	ldr.w	r0, [fp, #20]
 800616c:	f000 fac6 	bl	80066fc <Number::wcslen#7574>
 8006170:	4948      	ldr	r1, [pc, #288]	; (8006294 <Number::FormatFixed#7575+0x210>)
 8006172:	4607      	mov	r7, r0
                    int digStart   = (digPos < digLength) ? digPos : digLength;

                    char[] buffer = new char[bufferSize];
 8006174:	4845      	ldr	r0, [pc, #276]	; (800628c <Number::FormatFixed#7575+0x208>)
 8006176:	4a48      	ldr	r2, [pc, #288]	; (8006298 <Number::FormatFixed#7575+0x214>)
 8006178:	4479      	add	r1, pc
 800617a:	4408      	add	r0, r1
 800617c:	4411      	add	r1, r2
 800617e:	4632      	mov	r2, r6
 8006180:	f7fb fa18 	bl	80015b4 <DefaultTypeSystemManager::AllocateArray#5255>
 8006184:	45b8      	cmp	r8, r7
 8006186:	4604      	mov	r4, r0
                    int    p      = bufferSize - 1;

                    for(int i = digPos - 1; i >= 0; i--)
 8006188:	f1a8 0a01 	sub.w	sl, r8, #1
                    int digitCount = 0;
                    int digLength  = (int)wcslen( this.digits, dig );
                    int digStart   = (digPos < digLength) ? digPos : digLength;

                    char[] buffer = new char[bufferSize];
                    int    p      = bufferSize - 1;
 800618c:	f1a6 0001 	sub.w	r0, r6, #1
 8006190:	f04f 0c00 	mov.w	ip, #0
 8006194:	bfb8      	it	lt
 8006196:	4647      	movlt	r7, r8
                        if(groupSize > 0)
                        {
                            digitCount++;
                            if(digitCount == groupSize && i != 0)
                            {
                                for(int j = groupSeparatorLen - 1; j >= 0; j--)
 8006198:	9906      	ldr	r1, [sp, #24]
 800619a:	3901      	subs	r1, #1
 800619c:	9104      	str	r1, [sp, #16]
 800619e:	2100      	movs	r1, #0
 80061a0:	e002      	b.n	80061a8 <Number::FormatFixed#7575+0x124>
 80061a2:	4610      	mov	r0, r2
                    int digStart   = (digPos < digLength) ? digPos : digLength;

                    char[] buffer = new char[bufferSize];
                    int    p      = bufferSize - 1;

                    for(int i = digPos - 1; i >= 0; i--)
 80061a4:	f1aa 0a01 	sub.w	sl, sl, #1
 80061a8:	f1ba 0f00 	cmp.w	sl, #0
 80061ac:	db3b      	blt.n	8006226 <Number::FormatFixed#7575+0x1a2>
                    {
                        buffer[p--] = (i < digStart) ? this.digits[dig + i] : '0';
 80061ae:	1e42      	subs	r2, r0, #1
 80061b0:	45ba      	cmp	sl, r7
 80061b2:	da05      	bge.n	80061c0 <Number::FormatFixed#7575+0x13c>
 80061b4:	f8db 3014 	ldr.w	r3, [fp, #20]
 80061b8:	eb03 034a 	add.w	r3, r3, sl, lsl #1
 80061bc:	899b      	ldrh	r3, [r3, #12]
 80061be:	e000      	b.n	80061c2 <Number::FormatFixed#7575+0x13e>
 80061c0:	2330      	movs	r3, #48	; 0x30
 80061c2:	eb04 0640 	add.w	r6, r4, r0, lsl #1

                        if(groupSize > 0)
 80061c6:	f1b9 0f01 	cmp.w	r9, #1
 80061ca:	81b3      	strh	r3, [r6, #12]
 80061cc:	dbe9      	blt.n	80061a2 <Number::FormatFixed#7575+0x11e>
                        {
                            digitCount++;
 80061ce:	3101      	adds	r1, #1
                            if(digitCount == groupSize && i != 0)
 80061d0:	4549      	cmp	r1, r9
 80061d2:	d1e6      	bne.n	80061a2 <Number::FormatFixed#7575+0x11e>
 80061d4:	f1ba 0f00 	cmp.w	sl, #0
 80061d8:	d0e3      	beq.n	80061a2 <Number::FormatFixed#7575+0x11e>
 80061da:	9e04      	ldr	r6, [sp, #16]
                            {
                                for(int j = groupSeparatorLen - 1; j >= 0; j--)
 80061dc:	f100 0b05 	add.w	fp, r0, #5
 80061e0:	f8cd c018 	str.w	ip, [sp, #24]
 80061e4:	e008      	b.n	80061f8 <Number::FormatFixed#7575+0x174>
                                {
                                    buffer[p--] = sGroup[j];
 80061e6:	4628      	mov	r0, r5
 80061e8:	4631      	mov	r1, r6
 80061ea:	f7fa ff45 	bl	8001078 <String::get_Chars#4064>
 80061ee:	f824 001b 	strh.w	r0, [r4, fp, lsl #1]
                        if(groupSize > 0)
                        {
                            digitCount++;
                            if(digitCount == groupSize && i != 0)
                            {
                                for(int j = groupSeparatorLen - 1; j >= 0; j--)
 80061f2:	f1ab 0b01 	sub.w	fp, fp, #1
 80061f6:	3e01      	subs	r6, #1
 80061f8:	2e00      	cmp	r6, #0
 80061fa:	daf4      	bge.n	80061e6 <Number::FormatFixed#7575+0x162>
                                {
                                    buffer[p--] = sGroup[j];
                                }

                                if(groupSizeIndex < groupSizeLen - 1)
 80061fc:	9903      	ldr	r1, [sp, #12]
 80061fe:	f8dd c018 	ldr.w	ip, [sp, #24]
                        if(groupSize > 0)
                        {
                            digitCount++;
                            if(digitCount == groupSize && i != 0)
                            {
                                for(int j = groupSeparatorLen - 1; j >= 0; j--)
 8006202:	f1ab 0006 	sub.w	r0, fp, #6
                                {
                                    buffer[p--] = sGroup[j];
                                }

                                if(groupSizeIndex < groupSizeLen - 1)
 8006206:	3901      	subs	r1, #1
 8006208:	458c      	cmp	ip, r1
 800620a:	da06      	bge.n	800621a <Number::FormatFixed#7575+0x196>
                                {
                                    groupSizeIndex++;
                                    groupSize = groupDigits[groupSizeIndex];
 800620c:	9902      	ldr	r1, [sp, #8]
                                    buffer[p--] = sGroup[j];
                                }

                                if(groupSizeIndex < groupSizeLen - 1)
                                {
                                    groupSizeIndex++;
 800620e:	f10c 0c01 	add.w	ip, ip, #1
                                    groupSize = groupDigits[groupSizeIndex];
 8006212:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 8006216:	f8d1 900c 	ldr.w	r9, [r1, #12]
 800621a:	f8dd b014 	ldr.w	fp, [sp, #20]
 800621e:	2100      	movs	r1, #0
                    int digStart   = (digPos < digLength) ? digPos : digLength;

                    char[] buffer = new char[bufferSize];
                    int    p      = bufferSize - 1;

                    for(int i = digPos - 1; i >= 0; i--)
 8006220:	f1aa 0a01 	sub.w	sl, sl, #1
 8006224:	e7c0      	b.n	80061a8 <Number::FormatFixed#7575+0x124>
 8006226:	f8dd a004 	ldr.w	sl, [sp, #4]
                                digitCount = 0;
                            }
                        }
                    }

                    sb.Append( buffer );
 800622a:	4621      	mov	r1, r4
 800622c:	4650      	mov	r0, sl
 800622e:	f000 fa73 	bl	8006718 <StringBuilder::Append#8831>
 8006232:	9c00      	ldr	r4, [sp, #0]
            else
            {
                sb.Append( '0' );
            }

            if(digits > 0)
 8006234:	2c01      	cmp	r4, #1
 8006236:	db24      	blt.n	8006282 <Number::FormatFixed#7575+0x1fe>
 8006238:	9910      	ldr	r1, [sp, #64]	; 0x40
            {
                sb.Append( sDecimal );
 800623a:	4650      	mov	r0, sl
 800623c:	f7ff fef5 	bl	800602a <StringBuilder::Append#8806>
 8006240:	e006      	b.n	8006250 <Number::FormatFixed#7575+0x1cc>

                while(digPos < 0 && digits > 0)
                {
                    sb.Append( '0' );
 8006242:	4650      	mov	r0, sl
 8006244:	2130      	movs	r1, #48	; 0x30
 8006246:	f000 f9b3 	bl	80065b0 <StringBuilder::Append#8820>

                    digPos++;
                    digits--;
 800624a:	3c01      	subs	r4, #1

                while(digPos < 0 && digits > 0)
                {
                    sb.Append( '0' );

                    digPos++;
 800624c:	f108 0801 	add.w	r8, r8, #1

            if(digits > 0)
            {
                sb.Append( sDecimal );

                while(digPos < 0 && digits > 0)
 8006250:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006254:	dc01      	bgt.n	800625a <Number::FormatFixed#7575+0x1d6>
 8006256:	2c00      	cmp	r4, #0
 8006258:	dcf3      	bgt.n	8006242 <Number::FormatFixed#7575+0x1be>
 800625a:	3401      	adds	r4, #1
 800625c:	e00e      	b.n	800627c <Number::FormatFixed#7575+0x1f8>
                    digits--;
                }

                while(digits > 0)
                {
                    char ch = this.digits[dig];
 800625e:	f8db 0014 	ldr.w	r0, [fp, #20]
 8006262:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8006266:	8985      	ldrh	r5, [r0, #12]
                    else
                    {
                        dig++;
                    }

                    sb.Append( ch );
 8006268:	4650      	mov	r0, sl

                while(digits > 0)
                {
                    char ch = this.digits[dig];

                    if(ch == 0)
 800626a:	2d00      	cmp	r5, #0
 800626c:	4629      	mov	r1, r5
 800626e:	bf08      	it	eq
 8006270:	2130      	moveq	r1, #48	; 0x30
                    else
                    {
                        dig++;
                    }

                    sb.Append( ch );
 8006272:	f000 f99d 	bl	80065b0 <StringBuilder::Append#8820>

                while(digits > 0)
                {
                    char ch = this.digits[dig];

                    if(ch == 0)
 8006276:	2d00      	cmp	r5, #0
 8006278:	bf18      	it	ne
 800627a:	3701      	addne	r7, #1
 800627c:	3c01      	subs	r4, #1

                    digPos++;
                    digits--;
                }

                while(digits > 0)
 800627e:	2c00      	cmp	r4, #0
 8006280:	dced      	bgt.n	800625e <Number::FormatFixed#7575+0x1da>
 8006282:	b007      	add	sp, #28
 8006284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006288:	17ffb6c8 	.word	0x17ffb6c8
 800628c:	ffffea64 	.word	0xffffea64
 8006290:	e8007b9c 	.word	0xe8007b9c
 8006294:	17ffb638 	.word	0x17ffb638
 8006298:	e800744c 	.word	0xe800744c

0800629c <Number::FormatGeneral#7572>:

        private void FormatGeneral( System.Text.StringBuilder sb      ,
                                    int                       digits  ,
                                    char                      expChar ,
                                    NumberFormatInfo          info    )
        {
 800629c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062a0:	b082      	sub	sp, #8
 80062a2:	4606      	mov	r6, r0
 80062a4:	2000      	movs	r0, #0
 80062a6:	460d      	mov	r5, r1
 80062a8:	2100      	movs	r1, #0
 80062aa:	4698      	mov	r8, r3
 80062ac:	2400      	movs	r4, #0
            int  digPos     = this.scale;
 80062ae:	68f7      	ldr	r7, [r6, #12]
 80062b0:	4297      	cmp	r7, r2
 80062b2:	bfc8      	it	gt
 80062b4:	2001      	movgt	r0, #1
 80062b6:	f117 0f03 	cmn.w	r7, #3
 80062ba:	bfb8      	it	lt
 80062bc:	2101      	movlt	r1, #1
            bool scientific = false;

            if(digPos > digits || digPos < -3)
 80062be:	ea50 0901 	orrs.w	r9, r0, r1
 80062c2:	bf1c      	itt	ne
 80062c4:	2701      	movne	r7, #1
 80062c6:	f04f 0901 	movne.w	r9, #1
                digPos = 1;
                scientific = true;
            }

            int dig = 0; // number->digits;
            if(digPos > 0)
 80062ca:	2f00      	cmp	r7, #0
 80062cc:	dd12      	ble.n	80062f4 <Number::FormatGeneral#7572+0x58>
            {
                do
                {
                    sb.Append( this.digits[dig] != 0 ? this.digits[dig++] : '0' );
 80062ce:	6970      	ldr	r0, [r6, #20]
 80062d0:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 80062d4:	8980      	ldrh	r0, [r0, #12]
 80062d6:	b128      	cbz	r0, 80062e4 <Number::FormatGeneral#7572+0x48>
 80062d8:	6970      	ldr	r0, [r6, #20]
 80062da:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 80062de:	3401      	adds	r4, #1
 80062e0:	8981      	ldrh	r1, [r0, #12]
 80062e2:	e000      	b.n	80062e6 <Number::FormatGeneral#7572+0x4a>
 80062e4:	2130      	movs	r1, #48	; 0x30
 80062e6:	4628      	mov	r0, r5
 80062e8:	f000 f962 	bl	80065b0 <StringBuilder::Append#8820>
                } while(--digPos > 0);
 80062ec:	3f01      	subs	r7, #1
 80062ee:	2f00      	cmp	r7, #0
 80062f0:	dced      	bgt.n	80062ce <Number::FormatGeneral#7572+0x32>
 80062f2:	e004      	b.n	80062fe <Number::FormatGeneral#7572+0x62>
            }
            else
            {
                sb.Append( '0' );
 80062f4:	4628      	mov	r0, r5
 80062f6:	2130      	movs	r1, #48	; 0x30
 80062f8:	f000 f95a 	bl	80065b0 <StringBuilder::Append#8820>
 80062fc:	2400      	movs	r4, #0
            }

            if(this.digits[dig] != 0)
 80062fe:	6970      	ldr	r0, [r6, #20]
 8006300:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006304:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 8006308:	8980      	ldrh	r0, [r0, #12]
 800630a:	b1d0      	cbz	r0, 8006342 <Number::FormatGeneral#7572+0xa6>
            {
                sb.Append( info.numberDecimalSeparator );
 800630c:	f8da 101c 	ldr.w	r1, [sl, #28]
 8006310:	4628      	mov	r0, r5
 8006312:	f7ff fe8a 	bl	800602a <StringBuilder::Append#8806>
 8006316:	3f01      	subs	r7, #1
 8006318:	e003      	b.n	8006322 <Number::FormatGeneral#7572+0x86>

                while(digPos < 0)
                {
                    sb.Append( '0' );
 800631a:	4628      	mov	r0, r5
 800631c:	2130      	movs	r1, #48	; 0x30
 800631e:	f000 f947 	bl	80065b0 <StringBuilder::Append#8820>
 8006322:	3701      	adds	r7, #1

            if(this.digits[dig] != 0)
            {
                sb.Append( info.numberDecimalSeparator );

                while(digPos < 0)
 8006324:	2f00      	cmp	r7, #0
 8006326:	dbf8      	blt.n	800631a <Number::FormatGeneral#7572+0x7e>
                    digPos++;
                }

                do
                {
                    sb.Append( this.digits[dig++] );
 8006328:	0064      	lsls	r4, r4, #1
 800632a:	6970      	ldr	r0, [r6, #20]
 800632c:	4420      	add	r0, r4
 800632e:	8981      	ldrh	r1, [r0, #12]
 8006330:	4628      	mov	r0, r5
 8006332:	f000 f93d 	bl	80065b0 <StringBuilder::Append#8820>
                } while(this.digits[dig] != 0);
 8006336:	6970      	ldr	r0, [r6, #20]
 8006338:	4420      	add	r0, r4
 800633a:	3402      	adds	r4, #2
 800633c:	89c0      	ldrh	r0, [r0, #14]
 800633e:	2800      	cmp	r0, #0
 8006340:	d1f3      	bne.n	800632a <Number::FormatGeneral#7572+0x8e>
            }

            if(scientific)
 8006342:	f1b9 0f00 	cmp.w	r9, #0
 8006346:	d00a      	beq.n	800635e <Number::FormatGeneral#7572+0xc2>
            {
                FormatExponent( sb, this.scale - 1, expChar, info.positiveSign, info.negativeSign, 2 );
 8006348:	68f0      	ldr	r0, [r6, #12]
 800634a:	e9da 3105 	ldrd	r3, r1, [sl, #20]
 800634e:	2202      	movs	r2, #2
 8006350:	e9cd 1200 	strd	r1, r2, [sp]
 8006354:	1e41      	subs	r1, r0, #1
 8006356:	4628      	mov	r0, r5
 8006358:	4642      	mov	r2, r8
 800635a:	f000 f96d 	bl	8006638 <Number::FormatExponent#7571>
 800635e:	b002      	add	sp, #8
 8006360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006364 <Number::FindSection#7557>:

            return sb.ToString();
        }

        private static int FindSection( String format, int section )
        {
 8006364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006368:	4688      	mov	r8, r1
 800636a:	4605      	mov	r5, r0
            if(section == 0)
 800636c:	f1b8 0f00 	cmp.w	r8, #0
 8006370:	d045      	beq.n	80063fe <Number::FindSection#7557+0x9a>
 8006372:	2400      	movs	r4, #0
                        {
                            src++;
                        }
                        break;
                    case '\\':
                        if(Get( format, src ) != 0)
 8006374:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8006378:	e006      	b.n	8006388 <Number::FindSection#7557+0x24>
 800637a:	4628      	mov	r0, r5
 800637c:	4621      	mov	r1, r4
 800637e:	f7ff f835 	bl	80053ec <Number::Get#7536>
 8006382:	4230      	tst	r0, r6
 8006384:	bf18      	it	ne
 8006386:	3401      	addne	r4, #1
            }

            int src = 0;
            while(true)
            {
                char ch = Get( format, src );
 8006388:	4628      	mov	r0, r5
 800638a:	4621      	mov	r1, r4
 800638c:	f7ff f82e 	bl	80053ec <Number::Get#7536>
 8006390:	4607      	mov	r7, r0
                        {
                            src++;
                        }
                        break;
                    case '\\':
                        if(Get( format, src ) != 0)
 8006392:	3401      	adds	r4, #1
            }

            int src = 0;
            while(true)
            {
                char ch = Get( format, src );
 8006394:	b2b8      	uxth	r0, r7
                src++;
                switch(ch)
 8006396:	2823      	cmp	r0, #35	; 0x23
 8006398:	d306      	bcc.n	80063a8 <Number::FindSection#7557+0x44>
 800639a:	2827      	cmp	r0, #39	; 0x27
 800639c:	d00a      	beq.n	80063b4 <Number::FindSection#7557+0x50>
 800639e:	283b      	cmp	r0, #59	; 0x3b
 80063a0:	d017      	beq.n	80063d2 <Number::FindSection#7557+0x6e>
 80063a2:	285c      	cmp	r0, #92	; 0x5c
 80063a4:	d1f0      	bne.n	8006388 <Number::FindSection#7557+0x24>
 80063a6:	e7e8      	b.n	800637a <Number::FindSection#7557+0x16>
 80063a8:	4237      	tst	r7, r6
 80063aa:	d028      	beq.n	80063fe <Number::FindSection#7557+0x9a>
 80063ac:	2822      	cmp	r0, #34	; 0x22
 80063ae:	d1eb      	bne.n	8006388 <Number::FindSection#7557+0x24>
 80063b0:	e000      	b.n	80063b4 <Number::FindSection#7557+0x50>
                {
                    case '\'':
                    case '"':
                        while(Get( format, src ) != '\0' && Get( format, src ) != ch)
                        {
                            src++;
 80063b2:	3401      	adds	r4, #1
                src++;
                switch(ch)
                {
                    case '\'':
                    case '"':
                        while(Get( format, src ) != '\0' && Get( format, src ) != ch)
 80063b4:	4628      	mov	r0, r5
 80063b6:	4621      	mov	r1, r4
 80063b8:	f7ff f818 	bl	80053ec <Number::Get#7536>
 80063bc:	4230      	tst	r0, r6
 80063be:	d0e3      	beq.n	8006388 <Number::FindSection#7557+0x24>
 80063c0:	4628      	mov	r0, r5
 80063c2:	4621      	mov	r1, r4
 80063c4:	f7ff f812 	bl	80053ec <Number::Get#7536>
 80063c8:	b280      	uxth	r0, r0
 80063ca:	b239      	sxth	r1, r7
 80063cc:	4288      	cmp	r0, r1
 80063ce:	d1f0      	bne.n	80063b2 <Number::FindSection#7557+0x4e>
 80063d0:	e7da      	b.n	8006388 <Number::FindSection#7557+0x24>
                        {
                            src++;
                        }
                        break;
                    case ';':
                        section--;
 80063d2:	f1b8 0801 	subs.w	r8, r8, #1
 80063d6:	d1d7      	bne.n	8006388 <Number::FindSection#7557+0x24>
                        if(section != 0)
                        {
                            break;
                        }
                        if(Get( format, src ) != 0 && Get( format, src ) != ';')
 80063d8:	4628      	mov	r0, r5
 80063da:	4621      	mov	r1, r4
 80063dc:	f7ff f806 	bl	80053ec <Number::Get#7536>
 80063e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80063e4:	4208      	tst	r0, r1
 80063e6:	d00a      	beq.n	80063fe <Number::FindSection#7557+0x9a>
 80063e8:	4628      	mov	r0, r5
 80063ea:	4621      	mov	r1, r4
 80063ec:	f7fe fffe 	bl	80053ec <Number::Get#7536>
 80063f0:	b280      	uxth	r0, r0
 80063f2:	283b      	cmp	r0, #59	; 0x3b
 80063f4:	bf08      	it	eq
 80063f6:	2400      	moveq	r4, #0
 80063f8:	4620      	mov	r0, r4
 80063fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063fe:	2000      	movs	r0, #0
 8006400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006404 <ToStringFormatState::Reset#11161>:
            internal int    src;

            //--/

            internal void Reset()
            {
 8006404:	f04f 31ff 	mov.w	r1, #4294967295
 8006408:	61c1      	str	r1, [r0, #28]
 800640a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800640e:	6081      	str	r1, [r0, #8]
 8006410:	2100      	movs	r1, #0
 8006412:	60c1      	str	r1, [r0, #12]
 8006414:	7601      	strb	r1, [r0, #24]
 8006416:	e9c0 1108 	strd	r1, r1, [r0, #32]
 800641a:	6281      	str	r1, [r0, #40]	; 0x28
                scientific   = false;
                percent      = 0;
                permille     = 0;
                thousandSeps = 0;

                src          = sectionOffset;
 800641c:	6841      	ldr	r1, [r0, #4]
 800641e:	6381      	str	r1, [r0, #56]	; 0x38
 8006420:	4770      	bx	lr

08006422 <ToStringFormatState::Get#11165>:

                return ch;
            }

            internal char Get()
            {
 8006422:	b580      	push	{r7, lr}
                if(src < format.Length)
 8006424:	e9d0 120d 	ldrd	r1, r2, [r0, #52]	; 0x34
 8006428:	68c9      	ldr	r1, [r1, #12]
 800642a:	428a      	cmp	r2, r1
 800642c:	bfa4      	itt	ge
 800642e:	2000      	movge	r0, #0
 8006430:	bd80      	popge	{r7, pc}
                {
                    return format[src++];
 8006432:	e9d0 210d 	ldrd	r2, r1, [r0, #52]	; 0x34
 8006436:	1c4b      	adds	r3, r1, #1
 8006438:	6383      	str	r3, [r0, #56]	; 0x38
 800643a:	4610      	mov	r0, r2
 800643c:	f7fa fe1c 	bl	8001078 <String::get_Chars#4064>
 8006440:	bd80      	pop	{r7, pc}
 8006442:	46c0      	nop			; (mov r8, r8)

08006444 <ToStringFormatState::DecodeFormat#11163>:

                src          = sectionOffset;
            }

            internal char DecodeFormat( char ch )
            {
 8006444:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006448:	b081      	sub	sp, #4
 800644a:	4604      	mov	r4, r0
 800644c:	f04f 32ff 	mov.w	r2, #4294967295
 8006450:	2000      	movs	r0, #0
 8006452:	f64f 75ff 	movw	r5, #65535	; 0xffff
                        case 'E':
                            {
                                char ch2 = PeekAt( 0 );
                                char ch3 = PeekAt( 1 );

                                if(                                 ch2 == '0'  ||
 8006456:	2601      	movs	r6, #1
                thousandPos = -1;
                scaleAdjust = 0;

                while(ch != '\0' && ch != ';')
                {
                    switch(ch)
 8006458:	f242 0930 	movw	r9, #8240	; 0x2030
 800645c:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
 8006460:	6322      	str	r2, [r4, #48]	; 0x30
 8006462:	e9c4 0004 	strd	r0, r0, [r4, #16]
            {
                digitCount  = 0;
                thousandPos = -1;
                scaleAdjust = 0;

                while(ch != '\0' && ch != ';')
 8006466:	4229      	tst	r1, r5
 8006468:	bf1c      	itt	ne
 800646a:	b28f      	uxthne	r7, r1
 800646c:	2f3b      	cmpne	r7, #59	; 0x3b
 800646e:	f000 8084 	beq.w	800657a <ToStringFormatState::DecodeFormat#11163+0x136>
                {
                    switch(ch)
 8006472:	2f31      	cmp	r7, #49	; 0x31
 8006474:	d318      	bcc.n	80064a8 <ToStringFormatState::DecodeFormat#11163+0x64>
 8006476:	2f45      	cmp	r7, #69	; 0x45
 8006478:	d126      	bne.n	80064c8 <ToStringFormatState::DecodeFormat#11163+0x84>
                            }
                            break;

                        case 'E':
                            {
                                char ch2 = PeekAt( 0 );
 800647a:	4620      	mov	r0, r4
 800647c:	2100      	movs	r1, #0
 800647e:	f000 f8c7 	bl	8006610 <ToStringFormatState::PeekAt#11167>
 8006482:	b287      	uxth	r7, r0
                                char ch3 = PeekAt( 1 );

                                if(                                 ch2 == '0'  ||
 8006484:	4620      	mov	r0, r4
 8006486:	2101      	movs	r1, #1
 8006488:	f000 f8c2 	bl	8006610 <ToStringFormatState::PeekAt#11167>
 800648c:	2f30      	cmp	r7, #48	; 0x30
 800648e:	d006      	beq.n	800649e <ToStringFormatState::DecodeFormat#11163+0x5a>
 8006490:	2f2b      	cmp	r7, #43	; 0x2b
 8006492:	d001      	beq.n	8006498 <ToStringFormatState::DecodeFormat#11163+0x54>
 8006494:	2f2d      	cmp	r7, #45	; 0x2d
 8006496:	d128      	bne.n	80064ea <ToStringFormatState::DecodeFormat#11163+0xa6>
 8006498:	b280      	uxth	r0, r0
 800649a:	2830      	cmp	r0, #48	; 0x30
 800649c:	d125      	bne.n	80064ea <ToStringFormatState::DecodeFormat#11163+0xa6>
                                   ((ch2 == '+' || ch2 == '-'  ) && ch3 == '0')  )
                                {
                                    MoveToEnd();
 800649e:	4620      	mov	r0, r4
 80064a0:	f000 fdb6 	bl	8007010 <ToStringFormatState::MoveToEnd#11171>
 80064a4:	7626      	strb	r6, [r4, #24]
 80064a6:	e020      	b.n	80064ea <ToStringFormatState::DecodeFormat#11163+0xa6>
                thousandPos = -1;
                scaleAdjust = 0;

                while(ch != '\0' && ch != ';')
                {
                    switch(ch)
 80064a8:	f1a7 0022 	sub.w	r0, r7, #34	; 0x22
 80064ac:	2805      	cmp	r0, #5
 80064ae:	d917      	bls.n	80064e0 <ToStringFormatState::DecodeFormat#11163+0x9c>
 80064b0:	f1a7 002c 	sub.w	r0, r7, #44	; 0x2c
 80064b4:	2804      	cmp	r0, #4
 80064b6:	d036      	beq.n	8006526 <ToStringFormatState::DecodeFormat#11163+0xe2>
 80064b8:	2802      	cmp	r0, #2
 80064ba:	d13e      	bne.n	800653a <ToStringFormatState::DecodeFormat#11163+0xf6>
                            digitCount++;
                            lastDigit = digitCount;
                            break;

                        case '.':
                            if(decimalPos < 0)
 80064bc:	69e0      	ldr	r0, [r4, #28]
 80064be:	2800      	cmp	r0, #0
                            {
                                decimalPos = digitCount;
 80064c0:	bfbc      	itt	lt
 80064c2:	6920      	ldrlt	r0, [r4, #16]
 80064c4:	61e0      	strlt	r0, [r4, #28]
 80064c6:	e010      	b.n	80064ea <ToStringFormatState::DecodeFormat#11163+0xa6>
                thousandPos = -1;
                scaleAdjust = 0;

                while(ch != '\0' && ch != ';')
                {
                    switch(ch)
 80064c8:	2f5c      	cmp	r7, #92	; 0x5c
 80064ca:	d123      	bne.n	8006514 <ToStringFormatState::DecodeFormat#11163+0xd0>
                                src++;
                            }
                            break;

                        case '\\':
                            if(PeekAt( 0 ) != 0)
 80064cc:	4620      	mov	r0, r4
 80064ce:	2100      	movs	r1, #0
 80064d0:	f000 f89e 	bl	8006610 <ToStringFormatState::PeekAt#11167>
 80064d4:	4228      	tst	r0, r5
                            {
                                src++;
 80064d6:	bf1e      	ittt	ne
 80064d8:	6ba0      	ldrne	r0, [r4, #56]	; 0x38
 80064da:	3001      	addne	r0, #1
 80064dc:	63a0      	strne	r0, [r4, #56]	; 0x38
 80064de:	e004      	b.n	80064ea <ToStringFormatState::DecodeFormat#11163+0xa6>
 80064e0:	e8df f000 	tbb	[pc, r0]
 80064e4:	3f03080e 	.word	0x3f03080e
 80064e8:	0e03      	.short	0x0e03
                                }
                            }
                            break;
                    }

                    ch = Get();
 80064ea:	4620      	mov	r0, r4
 80064ec:	f7ff ff99 	bl	8006422 <ToStringFormatState::Get#11165>
 80064f0:	4601      	mov	r1, r0
 80064f2:	e7b8      	b.n	8006466 <ToStringFormatState::DecodeFormat#11163+0x22>
                while(ch != '\0' && ch != ';')
                {
                    switch(ch)
                    {
                        case '#':
                            digitCount++;
 80064f4:	6920      	ldr	r0, [r4, #16]
 80064f6:	3001      	adds	r0, #1
 80064f8:	e01d      	b.n	8006536 <ToStringFormatState::DecodeFormat#11163+0xf2>
                                   ch2 == ch  )
                                {
                                    break;
                                }

                                src++;
 80064fa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80064fc:	3001      	adds	r0, #1
 80064fe:	63a0      	str	r0, [r4, #56]	; 0x38
                        case '"':
                            while(true)
                            {
                                char ch2 = PeekAt( 0 );

                                if(ch2 == 0  ||
 8006500:	4620      	mov	r0, r4
 8006502:	2100      	movs	r1, #0
 8006504:	f000 f884 	bl	8006610 <ToStringFormatState::PeekAt#11167>
 8006508:	4228      	tst	r0, r5
 800650a:	bf1c      	itt	ne
 800650c:	b280      	uxthne	r0, r0
 800650e:	42b8      	cmpne	r0, r7
 8006510:	d1f3      	bne.n	80064fa <ToStringFormatState::DecodeFormat#11163+0xb6>
 8006512:	e7ea      	b.n	80064ea <ToStringFormatState::DecodeFormat#11163+0xa6>
                thousandPos = -1;
                scaleAdjust = 0;

                while(ch != '\0' && ch != ';')
                {
                    switch(ch)
 8006514:	454f      	cmp	r7, r9
 8006516:	d1e8      	bne.n	80064ea <ToStringFormatState::DecodeFormat#11163+0xa6>
                            percent++;
                            scaleAdjust += 2;
                            break;

                        case '\u2030':
                            permille++;
 8006518:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800651a:	3001      	adds	r0, #1
 800651c:	6260      	str	r0, [r4, #36]	; 0x24
                            scaleAdjust += 3;
 800651e:	6960      	ldr	r0, [r4, #20]
 8006520:	3003      	adds	r0, #3
 8006522:	6160      	str	r0, [r4, #20]
 8006524:	e7e1      	b.n	80064ea <ToStringFormatState::DecodeFormat#11163+0xa6>
                        case '#':
                            digitCount++;
                            break;

                        case '0':
                            if(firstDigit == 0x7FFFFFFF)
 8006526:	68a0      	ldr	r0, [r4, #8]
 8006528:	4540      	cmp	r0, r8
                            {
                                firstDigit = digitCount;
 800652a:	bf04      	itt	eq
 800652c:	6920      	ldreq	r0, [r4, #16]
 800652e:	60a0      	streq	r0, [r4, #8]
                            }
                            digitCount++;
 8006530:	6920      	ldr	r0, [r4, #16]
 8006532:	3001      	adds	r0, #1
 8006534:	60e0      	str	r0, [r4, #12]
 8006536:	6120      	str	r0, [r4, #16]
 8006538:	e7d7      	b.n	80064ea <ToStringFormatState::DecodeFormat#11163+0xa6>
 800653a:	2800      	cmp	r0, #0
 800653c:	d1d5      	bne.n	80064ea <ToStringFormatState::DecodeFormat#11163+0xa6>
                                decimalPos = digitCount;
                            }
                            break;

                        case ',':
                            if(digitCount > 0 && decimalPos < 0)
 800653e:	6920      	ldr	r0, [r4, #16]
 8006540:	2801      	cmp	r0, #1
 8006542:	dbd2      	blt.n	80064ea <ToStringFormatState::DecodeFormat#11163+0xa6>
 8006544:	69e0      	ldr	r0, [r4, #28]
 8006546:	f1b0 3fff 	cmp.w	r0, #4294967295
 800654a:	dcce      	bgt.n	80064ea <ToStringFormatState::DecodeFormat#11163+0xa6>
                            {
                                if(thousandPos >= 0)
 800654c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800654e:	2800      	cmp	r0, #0
 8006550:	db0f      	blt.n	8006572 <ToStringFormatState::DecodeFormat#11163+0x12e>
                                {
                                    if(thousandPos == digitCount)
 8006552:	6920      	ldr	r0, [r4, #16]
 8006554:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006556:	4281      	cmp	r1, r0
 8006558:	d10a      	bne.n	8006570 <ToStringFormatState::DecodeFormat#11163+0x12c>
                                    {
                                        thousandCount++;
 800655a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800655c:	3001      	adds	r0, #1
 800655e:	62e0      	str	r0, [r4, #44]	; 0x2c
 8006560:	e7c3      	b.n	80064ea <ToStringFormatState::DecodeFormat#11163+0xa6>
                                thousandCount = 1;
                            }
                            break;

                        case '%':
                            percent++;
 8006562:	6a20      	ldr	r0, [r4, #32]
 8006564:	3001      	adds	r0, #1
 8006566:	6220      	str	r0, [r4, #32]
                            scaleAdjust += 2;
 8006568:	6960      	ldr	r0, [r4, #20]
 800656a:	3002      	adds	r0, #2
 800656c:	6160      	str	r0, [r4, #20]
 800656e:	e7bc      	b.n	80064ea <ToStringFormatState::DecodeFormat#11163+0xa6>
 8006570:	62a6      	str	r6, [r4, #40]	; 0x28
                                    }

                                    thousandSeps = 1;
                                }

                                thousandPos   = digitCount;
 8006572:	6920      	ldr	r0, [r4, #16]
 8006574:	e9c4 600b 	strd	r6, r0, [r4, #44]	; 0x2c
 8006578:	e7b7      	b.n	80064ea <ToStringFormatState::DecodeFormat#11163+0xa6>
                    }

                    ch = Get();
                }

                if(decimalPos < 0)
 800657a:	69e0      	ldr	r0, [r4, #28]
 800657c:	f1b0 3fff 	cmp.w	r0, #4294967295
                {
                    decimalPos = digitCount;
 8006580:	bfdc      	itt	le
 8006582:	6920      	ldrle	r0, [r4, #16]
 8006584:	61e0      	strle	r0, [r4, #28]
                }

                if(thousandPos >= 0)
 8006586:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8006588:	2800      	cmp	r0, #0
 800658a:	db0e      	blt.n	80065aa <ToStringFormatState::DecodeFormat#11163+0x166>
                {
                    if(thousandPos == decimalPos)
 800658c:	69e0      	ldr	r0, [r4, #28]
 800658e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006590:	4281      	cmp	r1, r0
 8006592:	d108      	bne.n	80065a6 <ToStringFormatState::DecodeFormat#11163+0x162>
                    {
                        scaleAdjust -= thousandCount * 3;
 8006594:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006596:	6960      	ldr	r0, [r4, #20]
 8006598:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800659c:	1a40      	subs	r0, r0, r1
 800659e:	6160      	str	r0, [r4, #20]
 80065a0:	b001      	add	sp, #4
 80065a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80065a6:	2001      	movs	r0, #1
 80065a8:	62a0      	str	r0, [r4, #40]	; 0x28
 80065aa:	b001      	add	sp, #4
 80065ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080065b0 <StringBuilder::Append#8820>:
            return Append( value.ToString( CultureInfo.CurrentCulture ) );
        }

        // Appends a character at the end of this string builder. The capacity is adjusted as needed.
        public StringBuilder Append( char value )
        {
 80065b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065b4:	b082      	sub	sp, #8
 80065b6:	4604      	mov	r4, r0
 80065b8:	2000      	movs	r0, #0
 80065ba:	4688      	mov	r8, r1
 80065bc:	a901      	add	r1, sp, #4
 80065be:	9001      	str	r0, [sp, #4]
            Thread th;
            String currentString = GetThreadSafeString( out th );
 80065c0:	4620      	mov	r0, r4
 80065c2:	f000 f9f5 	bl	80069b0 <StringBuilder::GetThreadSafeString#8792>
 80065c6:	4606      	mov	r6, r0
 80065c8:	e9d6 0702 	ldrd	r0, r7, [r6, #8]

            int currentLength = currentString.Length;
            if(!NeedsAllocation( currentString, currentLength + 1 ))
 80065cc:	1c7d      	adds	r5, r7, #1
 80065ce:	4629      	mov	r1, r5
 80065d0:	f000 fa66 	bl	8006aa0 <StringBuilder::NeedsAllocation#8808>
 80065d4:	f010 0fff 	tst.w	r0, #255	; 0xff
 80065d8:	d00d      	beq.n	80065f6 <StringBuilder::Append#8820+0x46>
                currentString.AppendInPlace( value, currentLength );
                ReplaceString( th, currentString );
                return this;
            }

            String newString = GetNewString( currentString, currentLength + 1 );
 80065da:	4620      	mov	r0, r4
 80065dc:	4631      	mov	r1, r6
 80065de:	462a      	mov	r2, r5
 80065e0:	f000 fa64 	bl	8006aac <StringBuilder::GetNewString#8809>
            newString.AppendInPlace( value, currentLength );
 80065e4:	4641      	mov	r1, r8
 80065e6:	463a      	mov	r2, r7
                currentString.AppendInPlace( value, currentLength );
                ReplaceString( th, currentString );
                return this;
            }

            String newString = GetNewString( currentString, currentLength + 1 );
 80065e8:	4605      	mov	r5, r0
            newString.AppendInPlace( value, currentLength );
 80065ea:	f7fb fb3d 	bl	8001c68 <String::AppendInPlace#2775>
            ReplaceString( th, newString );
 80065ee:	9901      	ldr	r1, [sp, #4]
 80065f0:	4620      	mov	r0, r4
 80065f2:	462a      	mov	r2, r5
 80065f4:	e007      	b.n	8006606 <StringBuilder::Append#8820+0x56>
            String currentString = GetThreadSafeString( out th );

            int currentLength = currentString.Length;
            if(!NeedsAllocation( currentString, currentLength + 1 ))
            {
                currentString.AppendInPlace( value, currentLength );
 80065f6:	4630      	mov	r0, r6
 80065f8:	4641      	mov	r1, r8
 80065fa:	463a      	mov	r2, r7
 80065fc:	f7fb fb34 	bl	8001c68 <String::AppendInPlace#2775>
                ReplaceString( th, currentString );
 8006600:	9901      	ldr	r1, [sp, #4]
 8006602:	4620      	mov	r0, r4
 8006604:	4632      	mov	r2, r6
                return this;
            }

            String newString = GetNewString( currentString, currentLength + 1 );
            newString.AppendInPlace( value, currentLength );
            ReplaceString( th, newString );
 8006606:	f000 fa97 	bl	8006b38 <StringBuilder::ReplaceString#8810>
 800660a:	b002      	add	sp, #8
 800660c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006610 <ToStringFormatState::PeekAt#11167>:
                
                return '\0';
            }

            internal char PeekAt( int offset )
            {
 8006610:	b580      	push	{r7, lr}
                if(src + offset < format.Length)
 8006612:	e9d0 230d 	ldrd	r2, r3, [r0, #52]	; 0x34
 8006616:	68d2      	ldr	r2, [r2, #12]
 8006618:	440b      	add	r3, r1
 800661a:	4293      	cmp	r3, r2
 800661c:	bfa4      	itt	ge
 800661e:	2000      	movge	r0, #0
 8006620:	bd80      	popge	{r7, pc}
                {
                    return format[src+offset];
 8006622:	e9d0 200d 	ldrd	r2, r0, [r0, #52]	; 0x34
 8006626:	4401      	add	r1, r0
 8006628:	4610      	mov	r0, r2
 800662a:	f7fa fd25 	bl	8001078 <String::get_Chars#4064>
 800662e:	bd80      	pop	{r7, pc}

08006630 <ToStringFormatState::Advance#11169>:
                return '\0';
            }

            internal void Advance()
            {
                src++;
 8006630:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8006632:	3101      	adds	r1, #1
 8006634:	6381      	str	r1, [r0, #56]	; 0x38
 8006636:	4770      	bx	lr

08006638 <Number::FormatExponent#7571>:
                                     int                       value      ,
                                     char                      expChar    ,
                                     String                    posSignStr ,
                                     String                    negSignStr ,
                                     int                       minDigits  )
        {
 8006638:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800663c:	b081      	sub	sp, #4
 800663e:	460d      	mov	r5, r1
 8006640:	491d      	ldr	r1, [pc, #116]	; (80066b8 <Number::FormatExponent#7571+0x80>)
 8006642:	4617      	mov	r7, r2
 8006644:	4604      	mov	r4, r0
            char[] digits = new char[11];
 8006646:	481d      	ldr	r0, [pc, #116]	; (80066bc <Number::FormatExponent#7571+0x84>)
 8006648:	4a1d      	ldr	r2, [pc, #116]	; (80066c0 <Number::FormatExponent#7571+0x88>)
 800664a:	4699      	mov	r9, r3
 800664c:	4479      	add	r1, pc
 800664e:	4408      	add	r0, r1
 8006650:	4411      	add	r1, r2
 8006652:	220b      	movs	r2, #11
 8006654:	f7fa ffae 	bl	80015b4 <DefaultTypeSystemManager::AllocateArray#5255>
 8006658:	4606      	mov	r6, r0

            sb.Append( expChar );
 800665a:	4620      	mov	r0, r4
 800665c:	4639      	mov	r1, r7
 800665e:	f7ff ffa7 	bl	80065b0 <StringBuilder::Append#8820>
 8006662:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24

            if(value < 0)
 8006666:	f1b5 3fff 	cmp.w	r5, #4294967295
 800666a:	dd07      	ble.n	800667c <Number::FormatExponent#7571+0x44>
                sb.Append( negSignStr );
                value = -value;
            }
            else
            {
                if(posSignStr != null)
 800666c:	f1b9 0f00 	cmp.w	r9, #0
 8006670:	d009      	beq.n	8006686 <Number::FormatExponent#7571+0x4e>
                {
                    sb.Append( posSignStr );
 8006672:	4620      	mov	r0, r4
 8006674:	4649      	mov	r1, r9
 8006676:	f7ff fcd8 	bl	800602a <StringBuilder::Append#8806>
 800667a:	e004      	b.n	8006686 <Number::FormatExponent#7571+0x4e>
 800667c:	9908      	ldr	r1, [sp, #32]

            sb.Append( expChar );

            if(value < 0)
            {
                sb.Append( negSignStr );
 800667e:	4620      	mov	r0, r4
 8006680:	f7ff fcd3 	bl	800602a <StringBuilder::Append#8806>
                value = -value;
 8006684:	426d      	negs	r5, r5
                    sb.Append( posSignStr );
                }
            }

            // REVIEW: (int) was implicit in C++ code
            int p = Int32ToDecChars( digits, 10, checked( (uint)value ), minDigits );
 8006686:	4630      	mov	r0, r6
 8006688:	210a      	movs	r1, #10
 800668a:	462a      	mov	r2, r5
 800668c:	4643      	mov	r3, r8
 800668e:	f7fe fe57 	bl	8005340 <Number::Int32ToDecChars#7568>

            int i = 10 - p;
 8006692:	f1c0 0509 	rsb	r5, r0, #9
 8006696:	eb06 0040 	add.w	r0, r6, r0, lsl #1
 800669a:	f100 060c 	add.w	r6, r0, #12
            while(--i >= 0)
 800669e:	2d00      	cmp	r5, #0
 80066a0:	bfbc      	itt	lt
 80066a2:	b001      	addlt	sp, #4
 80066a4:	e8bd 83f0 	ldmialt.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            {
                sb.Append( digits[p++] );
 80066a8:	f836 1b02 	ldrh.w	r1, [r6], #2
 80066ac:	4620      	mov	r0, r4
 80066ae:	f7ff ff7f 	bl	80065b0 <StringBuilder::Append#8820>
 80066b2:	3d01      	subs	r5, #1
 80066b4:	e7f3      	b.n	800669e <Number::FormatExponent#7571+0x66>
 80066b6:	46c0      	nop			; (mov r8, r8)
 80066b8:	17ffb164 	.word	0x17ffb164
 80066bc:	ffffea64 	.word	0xffffea64
 80066c0:	e800744c 	.word	0xe800744c

080066c4 <Number::Int32ToHexChars#7560>:
            return new string( buffer, start, 100 - start );
        }

        private static int Int32ToHexChars( char[] buffer, int offset, uint value,
                                           char hexBase, int digits )
        {
 80066c4:	b510      	push	{r4, lr}
 80066c6:	f100 0cd2 	add.w	ip, r0, #210	; 0xd2
 80066ca:	f04f 0e00 	mov.w	lr, #0
 80066ce:	e00b      	b.n	80066e8 <Number::Int32ToHexChars#7560+0x24>
            while(digits > 0 || value != 0)
            {
                digits--;
                uint digit = value & 0xf;
 80066d0:	f001 000f 	and.w	r0, r1, #15
                offset--;
                buffer[offset] = (char)(digit + (digit < 10 ? '0' : hexBase));
 80066d4:	4614      	mov	r4, r2
                value >>= 4;
 80066d6:	0909      	lsrs	r1, r1, #4
            while(digits > 0 || value != 0)
            {
                digits--;
                uint digit = value & 0xf;
                offset--;
                buffer[offset] = (char)(digit + (digit < 10 ? '0' : hexBase));
 80066d8:	280a      	cmp	r0, #10
 80066da:	bf38      	it	cc
 80066dc:	2430      	movcc	r4, #48	; 0x30
 80066de:	4420      	add	r0, r4
 80066e0:	f82c 001e 	strh.w	r0, [ip, lr, lsl #1]
                value >>= 4;
 80066e4:	f1ae 0e01 	sub.w	lr, lr, #1
 80066e8:	eb03 000e 	add.w	r0, r3, lr
        }

        private static int Int32ToHexChars( char[] buffer, int offset, uint value,
                                           char hexBase, int digits )
        {
            while(digits > 0 || value != 0)
 80066ec:	2800      	cmp	r0, #0
 80066ee:	dcef      	bgt.n	80066d0 <Number::Int32ToHexChars#7560+0xc>
 80066f0:	2900      	cmp	r1, #0
 80066f2:	bf04      	itt	eq
 80066f4:	f10e 0064 	addeq.w	r0, lr, #100	; 0x64
 80066f8:	bd10      	popeq	{r4, pc}
 80066fa:	e7e9      	b.n	80066d0 <Number::Int32ToHexChars#7560+0xc>

080066fc <Number::wcslen#7574>:

        // REVIEW: call the real wcslen?
        private static int wcslen( char[] c, int i )
        {
            int j;
            for(j = i; j < c.Length; ++j)
 80066fc:	f100 020c 	add.w	r2, r0, #12
 8006700:	2100      	movs	r1, #0
 8006702:	e000      	b.n	8006706 <Number::wcslen#7574+0xa>
 8006704:	3101      	adds	r1, #1
 8006706:	6883      	ldr	r3, [r0, #8]
 8006708:	4299      	cmp	r1, r3
 800670a:	da03      	bge.n	8006714 <Number::wcslen#7574+0x18>
            {
                if(c[j] == '\0') break;
 800670c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d1f7      	bne.n	8006704 <Number::wcslen#7574+0x8>
 8006714:	4608      	mov	r0, r1
 8006716:	4770      	bx	lr

08006718 <StringBuilder::Append#8831>:
            return Append( value.ToString() );
        }

        // Appends all of the characters in value to the current instance.
        public StringBuilder Append( char[] value )
        {
 8006718:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800671c:	b083      	sub	sp, #12
 800671e:	460d      	mov	r5, r1
 8006720:	4681      	mov	r9, r0
 8006722:	2000      	movs	r0, #0
 8006724:	9002      	str	r0, [sp, #8]
 8006726:	b365      	cbz	r5, 8006782 <StringBuilder::Append#8831+0x6a>
 8006728:	f8d5 8008 	ldr.w	r8, [r5, #8]
 800672c:	a902      	add	r1, sp, #8
            }

            int valueLength = value.Length;

            Thread th;
            String currentString = GetThreadSafeString( out th );
 800672e:	4648      	mov	r0, r9
 8006730:	f000 f93e 	bl	80069b0 <StringBuilder::GetThreadSafeString#8792>
 8006734:	4607      	mov	r7, r0
 8006736:	e9d7 0402 	ldrd	r0, r4, [r7, #8]
 800673a:	68a9      	ldr	r1, [r5, #8]

            int currentLength = currentString.Length;
            int requiredLength = currentLength + value.Length;
 800673c:	1866      	adds	r6, r4, r1
            if(NeedsAllocation( currentString, requiredLength ))
 800673e:	4631      	mov	r1, r6
 8006740:	f000 f9ae 	bl	8006aa0 <StringBuilder::NeedsAllocation#8808>
 8006744:	f010 0fff 	tst.w	r0, #255	; 0xff
 8006748:	d00f      	beq.n	800676a <StringBuilder::Append#8831+0x52>
            {
                String newString = GetNewString( currentString, requiredLength );
 800674a:	4648      	mov	r0, r9
 800674c:	4639      	mov	r1, r7
 800674e:	4632      	mov	r2, r6
 8006750:	f000 f9ac 	bl	8006aac <StringBuilder::GetNewString#8809>
                newString.AppendInPlace( value, 0, valueLength, currentLength );
 8006754:	4629      	mov	r1, r5
 8006756:	2200      	movs	r2, #0
 8006758:	4643      	mov	r3, r8

            int currentLength = currentString.Length;
            int requiredLength = currentLength + value.Length;
            if(NeedsAllocation( currentString, requiredLength ))
            {
                String newString = GetNewString( currentString, requiredLength );
 800675a:	4606      	mov	r6, r0
                newString.AppendInPlace( value, 0, valueLength, currentLength );
 800675c:	9400      	str	r4, [sp, #0]
 800675e:	f7fb fab8 	bl	8001cd2 <String::AppendInPlace#2781>
                ReplaceString( th, newString );
 8006762:	9902      	ldr	r1, [sp, #8]
 8006764:	4648      	mov	r0, r9
 8006766:	4632      	mov	r2, r6
 8006768:	e009      	b.n	800677e <StringBuilder::Append#8831+0x66>
            }
            else
            {
                currentString.AppendInPlace( value, 0, valueLength, currentLength );
 800676a:	4638      	mov	r0, r7
 800676c:	4629      	mov	r1, r5
 800676e:	2200      	movs	r2, #0
 8006770:	4643      	mov	r3, r8
 8006772:	9400      	str	r4, [sp, #0]
 8006774:	f7fb faad 	bl	8001cd2 <String::AppendInPlace#2781>
                ReplaceString( th, currentString );
 8006778:	9902      	ldr	r1, [sp, #8]
 800677a:	4648      	mov	r0, r9
 800677c:	463a      	mov	r2, r7
 800677e:	f000 f9db 	bl	8006b38 <StringBuilder::ReplaceString#8810>
 8006782:	b003      	add	sp, #12
 8006784:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08006788 <ObjectDisposedException::.ctor#7584>:
        // This constructor should only be called by the EE (COMPlusThrow)
        private ObjectDisposedException() : this( null, Environment.GetResourceString( "ObjectDisposed_Generic" ) )
        {
        }

        public ObjectDisposedException( String objectName ) : this( objectName, Environment.GetResourceString( "ObjectDisposed_Generic" ) )
 8006788:	b580      	push	{r7, lr}
 800678a:	f000 f801 	bl	8006790 <ObjectDisposedException::.ctor#7585>
 800678e:	bd80      	pop	{r7, pc}

08006790 <ObjectDisposedException::.ctor#7585>:
        {
        }

        public ObjectDisposedException( String objectName, String message ) : base( message )
 8006790:	b5b0      	push	{r4, r5, r7, lr}
 8006792:	460c      	mov	r4, r1
 8006794:	4605      	mov	r5, r0
 8006796:	f7fe fd8b 	bl	80052b0 <InvalidOperationException::.ctor#7418>
 800679a:	60ec      	str	r4, [r5, #12]
 800679c:	bdb0      	pop	{r4, r5, r7, pc}
 800679e:	46c0      	nop			; (mov r8, r8)

080067a0 <ObjectDisposedException::get_Message#7587>:
        ///    <para>Gets the text for the message for this exception.</para>
        /// </devdoc>
        public override String Message
        {
            get
            {
 80067a0:	b510      	push	{r4, lr}
 80067a2:	4604      	mov	r4, r0
                String name = ObjectName;
 80067a4:	f000 f814 	bl	80067d0 <ObjectDisposedException::get_ObjectName#7588>
 80067a8:	4602      	mov	r2, r0
                if(name == null || name.Length == 0)
 80067aa:	2a00      	cmp	r2, #0
 80067ac:	bf1c      	itt	ne
 80067ae:	68d0      	ldrne	r0, [r2, #12]
 80067b0:	2800      	cmpne	r0, #0
 80067b2:	d101      	bne.n	80067b8 <ObjectDisposedException::get_Message#7587+0x18>
 80067b4:	68a0      	ldr	r0, [r4, #8]
 80067b6:	bd10      	pop	{r4, pc}
 80067b8:	4803      	ldr	r0, [pc, #12]	; (80067c8 <ObjectDisposedException::get_Message#7587+0x28>)
                }

#if EXCEPTION_STRINGS
                return base.Message + Environment.NewLine + String.Format( CultureInfo.CurrentCulture, Environment.GetResourceString( "ObjectDisposed_ObjectName_Name" ), name );
#else
                return base.Message + Environment.NewLine + name;
 80067ba:	4904      	ldr	r1, [pc, #16]	; (80067cc <ObjectDisposedException::get_Message#7587+0x2c>)
 80067bc:	4478      	add	r0, pc
 80067be:	4401      	add	r1, r0
 80067c0:	68a0      	ldr	r0, [r4, #8]
 80067c2:	f7fb fa0f 	bl	8001be4 <String::Concat#2751>
 80067c6:	bd10      	pop	{r4, pc}
 80067c8:	17ffaff4 	.word	0x17ffaff4
 80067cc:	e8009a2c 	.word	0xe8009a2c

080067d0 <ObjectDisposedException::get_ObjectName#7588>:

        public String ObjectName
        {
            get
            {
                if(objectName == null)
 80067d0:	68c1      	ldr	r1, [r0, #12]
 80067d2:	2900      	cmp	r1, #0
                {
                    return String.Empty;
                }

                return objectName;
 80067d4:	bf1c      	itt	ne
 80067d6:	68c0      	ldrne	r0, [r0, #12]
 80067d8:	4770      	bxne	lr
 80067da:	4803      	ldr	r0, [pc, #12]	; (80067e8 <ObjectDisposedException::get_ObjectName#7588+0x18>)
        {
            get
            {
                if(objectName == null)
                {
                    return String.Empty;
 80067dc:	4903      	ldr	r1, [pc, #12]	; (80067ec <ObjectDisposedException::get_ObjectName#7588+0x1c>)
 80067de:	4478      	add	r0, pc
 80067e0:	4408      	add	r0, r1
 80067e2:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
 80067e6:	4770      	bx	lr
 80067e8:	17ffafd2 	.word	0x17ffafd2
 80067ec:	fffffe3c 	.word	0xfffffe3c

080067f0 <OutOfMemoryException::.ctor#7605>:
    using System.Runtime.Serialization;

    [Serializable]
    public class OutOfMemoryException : SystemException
    {
        public OutOfMemoryException() : base( GetMessageFromNativeResources( ExceptionMessageKind.OutOfMemory ) )
 80067f0:	b510      	push	{r4, lr}
 80067f2:	4604      	mov	r4, r0
 80067f4:	f7fe fd40 	bl	8005278 <Exception::GetMessageFromNativeResources#7337>
 80067f8:	4601      	mov	r1, r0
 80067fa:	4620      	mov	r0, r4
 80067fc:	f7fe fd37 	bl	800526e <SystemException::.ctor#7663>
 8006800:	bd10      	pop	{r4, pc}
 8006802:	46c0      	nop			; (mov r8, r8)

08006804 <Type::Equals#7845>:

            return cls;
        }

        public override bool Equals( Object o )
        {
 8006804:	b570      	push	{r4, r5, r6, lr}
 8006806:	4604      	mov	r4, r0
 8006808:	480b      	ldr	r0, [pc, #44]	; (8006838 <Type::Equals#7845+0x34>)
            if(!(o is Type))
 800680a:	4e0c      	ldr	r6, [pc, #48]	; (800683c <Type::Equals#7845+0x38>)
 800680c:	460d      	mov	r5, r1
 800680e:	4478      	add	r0, pc
 8006810:	1831      	adds	r1, r6, r0
 8006812:	4628      	mov	r0, r5
 8006814:	f7fa f97a 	bl	8000b0c <TypeSystemManager::CastToSealedTypeNoThrow#5244>
 8006818:	2800      	cmp	r0, #0
 800681a:	bf04      	itt	eq
 800681c:	2000      	moveq	r0, #0
 800681e:	bd70      	popeq	{r4, r5, r6, pc}
 8006820:	4807      	ldr	r0, [pc, #28]	; (8006840 <Type::Equals#7845+0x3c>)
 8006822:	4478      	add	r0, pc
            {
                return false;
            }

            return Equals( (Type)o );
 8006824:	1831      	adds	r1, r6, r0
 8006826:	4628      	mov	r0, r5
 8006828:	f7fa fa68 	bl	8000cfc <TypeSystemManager::CastToSealedType#5243>
 800682c:	4601      	mov	r1, r0
 800682e:	4620      	mov	r0, r4
 8006830:	f000 f808 	bl	8006844 <Type::Equals#7846>
 8006834:	bd70      	pop	{r4, r5, r6, pc}
 8006836:	46c0      	nop			; (mov r8, r8)
 8006838:	17ffafa2 	.word	0x17ffafa2
 800683c:	e8007bcc 	.word	0xe8007bcc
 8006840:	17ffaf8e 	.word	0x17ffaf8e

08006844 <Type::Equals#7846>:
        }

        public bool Equals( Type o )
        {
 8006844:	b510      	push	{r4, lr}
 8006846:	4288      	cmp	r0, r1
 8006848:	f04f 0400 	mov.w	r4, #0
            if(o == null)
 800684c:	4608      	mov	r0, r1
 800684e:	f04f 0100 	mov.w	r1, #0
 8006852:	bf08      	it	eq
 8006854:	2401      	moveq	r4, #1
 8006856:	f000 f806 	bl	8006866 <Type::op_Equality#7848>
 800685a:	f010 0fff 	tst.w	r0, #255	; 0xff
 800685e:	bf18      	it	ne
 8006860:	2400      	movne	r4, #0
 8006862:	4620      	mov	r0, r4
 8006864:	bd10      	pop	{r4, pc}

08006866 <Type::op_Equality#7848>:
            return base.GetHashCode();
        }

        public static bool operator ==( Type left,
                                        Type right )
        {
 8006866:	b580      	push	{r7, lr}
            if ((object)left == null)
 8006868:	b130      	cbz	r0, 8006878 <Type::op_Equality#7848+0x12>
            {
                return (object)right == null;
            }

            if ((object)right == null)
 800686a:	2900      	cmp	r1, #0
 800686c:	bf04      	itt	eq
 800686e:	2000      	moveq	r0, #0
 8006870:	bd80      	popeq	{r7, pc}
            {
                return false;
            }

            return left.Equals( right );
 8006872:	f7ff ffe7 	bl	8006844 <Type::Equals#7846>
 8006876:	bd80      	pop	{r7, pc}
 8006878:	2000      	movs	r0, #0
 800687a:	2900      	cmp	r1, #0
 800687c:	bf08      	it	eq
 800687e:	2001      	moveq	r0, #1
 8006880:	bd80      	pop	{r7, pc}

08006882 <Type::GetHashCode#7847>:
            //return (this.UnderlyingSystemType == o.UnderlyingSystemType);
            return ( object )this == ( object )o;
        }

        public override int GetHashCode()
        {
 8006882:	b510      	push	{r4, lr}
 8006884:	4604      	mov	r4, r0
            Type SystemType = UnderlyingSystemType;
            if(SystemType != this)
 8006886:	4621      	mov	r1, r4
 8006888:	f000 f80b 	bl	80068a2 <Type::op_Inequality#7849>
 800688c:	f010 0fff 	tst.w	r0, #255	; 0xff
 8006890:	d003      	beq.n	800689a <Type::GetHashCode#7847+0x18>
            {
                return SystemType.GetHashCode();
 8006892:	4620      	mov	r0, r4
 8006894:	f7ff fff5 	bl	8006882 <Type::GetHashCode#7847>
 8006898:	bd10      	pop	{r4, pc}
            }

            return base.GetHashCode();
 800689a:	4620      	mov	r0, r4
 800689c:	f000 f80b 	bl	80068b6 <MemberInfo::GetHashCode#9108>
        }
 80068a0:	bd10      	pop	{r4, pc}

080068a2 <Type::op_Inequality#7849>:
            return left.Equals( right );
        }

        public static bool operator !=( Type left,
                                        Type right )
        {
 80068a2:	b580      	push	{r7, lr}
            return !(left == right);
 80068a4:	f7ff ffdf 	bl	8006866 <Type::op_Equality#7848>
 80068a8:	2100      	movs	r1, #0
 80068aa:	f010 0fff 	tst.w	r0, #255	; 0xff
 80068ae:	bf08      	it	eq
 80068b0:	2101      	moveq	r1, #1
 80068b2:	4608      	mov	r0, r1
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <MemberInfo::GetHashCode#9108>:
            }
            return this.GetHashCode() == obj.GetHashCode();
        }

        public override int GetHashCode()
        {
 80068b6:	b580      	push	{r7, lr}
            return MetadataTokenInternal;
 80068b8:	f000 fa1e 	bl	8006cf8 <MemberInfo::get_MetadataTokenInternal#9116>
 80068bc:	bd80      	pop	{r7, pc}

080068be <EventWaitHandle::Reset#4115>:
 80068be:	2100      	movs	r1, #0
 80068c0:	7301      	strb	r1, [r0, #12]
 80068c2:	4770      	bx	lr

080068c4 <Monitor::Enter#4096>:
        // Helper Methods
        //

        [NoInline]
        public static void Enter( Object obj )
        {
 80068c4:	b580      	push	{r7, lr}
            SyncBlockTable.GetLock( obj ).Acquire();
 80068c6:	f7fd fbe2 	bl	800408e <SyncBlockTable::GetLock#4790>
 80068ca:	f7fe fa1d 	bl	8004d08 <WaitableObject::Acquire#5278>
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <WaitHandle::WaitOne#4111>:

        //--//

        public bool WaitOne( SchedulerTime timeout     ,
                             bool          exitContext )
        {
 80068d0:	b580      	push	{r7, lr}
            return m_handle.Acquire( timeout );
 80068d2:	6841      	ldr	r1, [r0, #4]
 80068d4:	69c9      	ldr	r1, [r1, #28]
 80068d6:	6989      	ldr	r1, [r1, #24]
 80068d8:	4788      	blx	r1
 80068da:	bd80      	pop	{r7, pc}

080068dc <StringBuilder::.ctor#8789>:
        // String.NullString) then the new string builder will also be null 
        // (i.e., it will also represent String.NullString).
        // The maximum number of characters this string may contain is set by capacity.
        // 
        public StringBuilder( String value, int capacity )
            : this( value, 0, ((value != null) ? value.Length : 0), capacity )
 80068dc:	b580      	push	{r7, lr}
 80068de:	4613      	mov	r3, r2
 80068e0:	b119      	cbz	r1, 80068ea <StringBuilder::.ctor#8789+0xe>
 80068e2:	68ca      	ldr	r2, [r1, #12]
 80068e4:	f000 f80a 	bl	80068fc <StringBuilder::.ctor#8790>
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	2200      	movs	r2, #0
 80068ec:	f000 f806 	bl	80068fc <StringBuilder::.ctor#8790>
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <StringBuilder::.ctor#8788>:
        // is a null String (i.e., if it represents String.NullString)
        // then the new string builder will also be null (i.e., it will also represent
        //  String.NullString).
        // 
        public StringBuilder( String value )
            : this( value, DefaultCapacity )
 80068f2:	b580      	push	{r7, lr}
 80068f4:	2210      	movs	r2, #16
 80068f6:	f7ff fff1 	bl	80068dc <StringBuilder::.ctor#8789>
 80068fa:	bd80      	pop	{r7, pc}

080068fc <StringBuilder::.ctor#8790>:
        //
        //
        //  CLASS VARIABLES
        //
        //
        internal Thread m_currentThread = Thread.CurrentThread;
 80068fc:	b5b0      	push	{r4, r5, r7, lr}
 80068fe:	4d24      	ldr	r5, [pc, #144]	; (8006990 <StringBuilder::.ctor#8790+0x94>)
 8006900:	f8df c090 	ldr.w	ip, [pc, #144]	; 8006994 <StringBuilder::.ctor#8790+0x98>
 8006904:	4604      	mov	r4, r0
 8006906:	2000      	movs	r0, #0
        // capacity.  The maximum number of characters is set by capacity.
        // 

        public StringBuilder( String value, int startIndex, int length, int capacity )
        {
            if(capacity < 0)
 8006908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800690c:	447d      	add	r5, pc
 800690e:	4465      	add	r5, ip
 8006910:	f8d5 50bc 	ldr.w	r5, [r5, #188]	; 0xbc
 8006914:	e9c4 5002 	strd	r5, r0, [r4, #8]
 8006918:	6120      	str	r0, [r4, #16]
 800691a:	dd22      	ble.n	8006962 <StringBuilder::.ctor#8790+0x66>
                                                      String.Format( CultureInfo.CurrentCulture, Environment.GetResourceString( "ArgumentOutOfRange_MustBePositive" ), "capacity" ) );
#else
                throw new ArgumentOutOfRangeException();
#endif
            }
            if(length < 0)
 800691c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006920:	dd22      	ble.n	8006968 <StringBuilder::.ctor#8790+0x6c>
 8006922:	481d      	ldr	r0, [pc, #116]	; (8006998 <StringBuilder::.ctor#8790+0x9c>)
#else
                throw new ArgumentOutOfRangeException();
#endif
            }

            if(value == null)
 8006924:	2900      	cmp	r1, #0
 8006926:	4478      	add	r0, pc
            {
                value = String.Empty;
 8006928:	4460      	add	r0, ip
 800692a:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
#else
                throw new ArgumentOutOfRangeException();
#endif
            }

            if(value == null)
 800692e:	bf18      	it	ne
 8006930:	4608      	movne	r0, r1
 8006932:	68c1      	ldr	r1, [r0, #12]
            {
                value = String.Empty;
            }

            if(startIndex > value.Length - length)
 8006934:	1a89      	subs	r1, r1, r2
 8006936:	f1b1 3fff 	cmp.w	r1, #4294967295
 800693a:	dd18      	ble.n	800696e <StringBuilder::.ctor#8790+0x72>
 800693c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000

            m_MaxCapacity = Int32.MaxValue;

            if(capacity == 0)
            {
                capacity = DefaultCapacity;
 8006940:	2b00      	cmp	r3, #0
 8006942:	60e1      	str	r1, [r4, #12]
 8006944:	bf08      	it	eq
 8006946:	2310      	moveq	r3, #16
            }

            while(capacity < length)
 8006948:	4293      	cmp	r3, r2
 800694a:	da04      	bge.n	8006956 <StringBuilder::.ctor#8790+0x5a>
            {
                capacity *= 2;
 800694c:	005b      	lsls	r3, r3, #1
                // If we overflow, we should just use length as capacity. 
                // There is no reason we should throw an exception in this case if the system is able 
                // to allocate the string.
                if(capacity < 0)
 800694e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006952:	dcf9      	bgt.n	8006948 <StringBuilder::.ctor#8790+0x4c>
                    capacity = length;
                    break;
                }
            }

            m_StringValue = String.GetStringForStringBuilder( value, startIndex, length, capacity );
 8006954:	4613      	mov	r3, r2
 8006956:	4611      	mov	r1, r2
 8006958:	461a      	mov	r2, r3
 800695a:	f7fb f9df 	bl	8001d1c <String::GetStringForStringBuilder#2784>
 800695e:	6120      	str	r0, [r4, #16]
 8006960:	bdb0      	pop	{r4, r5, r7, pc}
 8006962:	4812      	ldr	r0, [pc, #72]	; (80069ac <StringBuilder::.ctor#8790+0xb0>)
 8006964:	4478      	add	r0, pc
 8006966:	e004      	b.n	8006972 <StringBuilder::.ctor#8790+0x76>
 8006968:	480f      	ldr	r0, [pc, #60]	; (80069a8 <StringBuilder::.ctor#8790+0xac>)
 800696a:	4478      	add	r0, pc
 800696c:	e001      	b.n	8006972 <StringBuilder::.ctor#8790+0x76>
 800696e:	480b      	ldr	r0, [pc, #44]	; (800699c <StringBuilder::.ctor#8790+0xa0>)
 8006970:	4478      	add	r0, pc
            {
#if EXCEPTION_STRINGS
                throw new ArgumentOutOfRangeException( "capacity",
                                                      String.Format( CultureInfo.CurrentCulture, Environment.GetResourceString( "ArgumentOutOfRange_MustBePositive" ), "capacity" ) );
#else
                throw new ArgumentOutOfRangeException();
 8006972:	490b      	ldr	r1, [pc, #44]	; (80069a0 <StringBuilder::.ctor#8790+0xa4>)
 8006974:	180c      	adds	r4, r1, r0
 8006976:	490b      	ldr	r1, [pc, #44]	; (80069a4 <StringBuilder::.ctor#8790+0xa8>)
 8006978:	4401      	add	r1, r0
 800697a:	4620      	mov	r0, r4
 800697c:	f7f9 ffd0 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8006980:	4605      	mov	r5, r0
 8006982:	f7fa fe35 	bl	80015f0 <ArgumentOutOfRangeException::.ctor#6367>
 8006986:	4620      	mov	r0, r4
 8006988:	4629      	mov	r1, r5
 800698a:	f7f9 ffdf 	bl	800094c <TypeSystemManager::Throw#5247>
 800698e:	46c0      	nop			; (mov r8, r8)
 8006990:	17ffaea4 	.word	0x17ffaea4
 8006994:	fffffe3c 	.word	0xfffffe3c
 8006998:	17ffae8a 	.word	0x17ffae8a
 800699c:	17ffae40 	.word	0x17ffae40
 80069a0:	ffffea64 	.word	0xffffea64
 80069a4:	e8007b9c 	.word	0xe8007b9c
 80069a8:	17ffae46 	.word	0x17ffae46
 80069ac:	17ffae4c 	.word	0x17ffae4c

080069b0 <StringBuilder::GetThreadSafeString#8792>:
////        BCLDebug.Assert( Capacity >= 0 && Capacity <= m_MaxCapacity, "Invalid StringBuilder" );
////        BCLDebug.Assert( m_StringValue != null && Capacity >= m_StringValue.Length, "Invalid StringBuilder" );
////    }

        private String GetThreadSafeString( out Thread th )
        {
 80069b0:	b510      	push	{r4, lr}
 80069b2:	4a0a      	ldr	r2, [pc, #40]	; (80069dc <StringBuilder::GetThreadSafeString#8792+0x2c>)
            // Following two reads (m_StringValue, m_currentThread) needs to happen in order.
            // This is guaranteed by making the fields volatile.     
            // See ReplaceString method for details.

            String temp = m_StringValue;
 80069b4:	4b0a      	ldr	r3, [pc, #40]	; (80069e0 <StringBuilder::GetThreadSafeString#8792+0x30>)
 80069b6:	6904      	ldr	r4, [r0, #16]
 80069b8:	447a      	add	r2, pc
 80069ba:	441a      	add	r2, r3
 80069bc:	f8d2 20bc 	ldr.w	r2, [r2, #188]	; 0xbc
 80069c0:	600a      	str	r2, [r1, #0]
            th = Thread.CurrentThread;
            if(m_currentThread == th)
 80069c2:	6880      	ldr	r0, [r0, #8]
 80069c4:	4290      	cmp	r0, r2
 80069c6:	d007      	beq.n	80069d8 <StringBuilder::GetThreadSafeString#8792+0x28>
                return temp;
            return String.GetStringForStringBuilder( temp, temp.Capacity );
 80069c8:	4620      	mov	r0, r4
 80069ca:	f7fa fe40 	bl	800164e <String::get_Capacity#2670>
 80069ce:	4601      	mov	r1, r0
 80069d0:	4620      	mov	r0, r4
 80069d2:	f7fb f99d 	bl	8001d10 <String::GetStringForStringBuilder#2783>
 80069d6:	4604      	mov	r4, r0
 80069d8:	4620      	mov	r0, r4
 80069da:	bd10      	pop	{r4, pc}
 80069dc:	17ffadf8 	.word	0x17ffadf8
 80069e0:	fffffe3c 	.word	0xfffffe3c

080069e4 <StringBuilder::Append#8804>:
            }
        }

        // Appends a character at the end of this string builder. The capacity is adjusted as needed.
        public StringBuilder Append( char value, int repeatCount )
        {
 80069e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069e8:	b082      	sub	sp, #8
 80069ea:	460d      	mov	r5, r1
 80069ec:	4680      	mov	r8, r0
 80069ee:	2000      	movs	r0, #0
 80069f0:	9001      	str	r0, [sp, #4]
 80069f2:	b35d      	cbz	r5, 8006a4c <StringBuilder::Append#8804+0x68>
            if(repeatCount == 0)
            {
                return this;
            }
            if(repeatCount < 0)
 80069f4:	f1b5 3fff 	cmp.w	r5, #4294967295
 80069f8:	dd2b      	ble.n	8006a52 <StringBuilder::Append#8804+0x6e>
 80069fa:	a901      	add	r1, sp, #4
#endif
            }


            Thread th;
            String currentString = GetThreadSafeString( out th );
 80069fc:	4640      	mov	r0, r8
 80069fe:	f7ff ffd7 	bl	80069b0 <StringBuilder::GetThreadSafeString#8792>
 8006a02:	4606      	mov	r6, r0
 8006a04:	68f7      	ldr	r7, [r6, #12]
            int requiredLength = currentLength + repeatCount;

            if(requiredLength < 0)
                throw new OutOfMemoryException();

            if(!NeedsAllocation( currentString, requiredLength ))
 8006a06:	197c      	adds	r4, r7, r5
            String currentString = GetThreadSafeString( out th );

            int currentLength = currentString.Length;
            int requiredLength = currentLength + repeatCount;

            if(requiredLength < 0)
 8006a08:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006a0c:	dd2e      	ble.n	8006a6c <StringBuilder::Append#8804+0x88>
 8006a0e:	68b0      	ldr	r0, [r6, #8]
                throw new OutOfMemoryException();

            if(!NeedsAllocation( currentString, requiredLength ))
 8006a10:	4621      	mov	r1, r4
 8006a12:	f000 f845 	bl	8006aa0 <StringBuilder::NeedsAllocation#8808>
 8006a16:	f010 0fff 	tst.w	r0, #255	; 0xff
 8006a1a:	d00d      	beq.n	8006a38 <StringBuilder::Append#8804+0x54>
                currentString.AppendInPlace( value, repeatCount, currentLength );
                ReplaceString( th, currentString );
                return this;
            }

            String newString = GetNewString( currentString, requiredLength );
 8006a1c:	4640      	mov	r0, r8
 8006a1e:	4631      	mov	r1, r6
 8006a20:	4622      	mov	r2, r4
 8006a22:	f000 f843 	bl	8006aac <StringBuilder::GetNewString#8809>
            newString.AppendInPlace( value, repeatCount, currentLength );
 8006a26:	4629      	mov	r1, r5
 8006a28:	463a      	mov	r2, r7
                currentString.AppendInPlace( value, repeatCount, currentLength );
                ReplaceString( th, currentString );
                return this;
            }

            String newString = GetNewString( currentString, requiredLength );
 8006a2a:	4604      	mov	r4, r0
            newString.AppendInPlace( value, repeatCount, currentLength );
 8006a2c:	f7fb f926 	bl	8001c7c <String::AppendInPlace#2776>
            ReplaceString( th, newString );
 8006a30:	9901      	ldr	r1, [sp, #4]
 8006a32:	4640      	mov	r0, r8
 8006a34:	4622      	mov	r2, r4
 8006a36:	e007      	b.n	8006a48 <StringBuilder::Append#8804+0x64>
            if(requiredLength < 0)
                throw new OutOfMemoryException();

            if(!NeedsAllocation( currentString, requiredLength ))
            {
                currentString.AppendInPlace( value, repeatCount, currentLength );
 8006a38:	4630      	mov	r0, r6
 8006a3a:	4629      	mov	r1, r5
 8006a3c:	463a      	mov	r2, r7
 8006a3e:	f7fb f91d 	bl	8001c7c <String::AppendInPlace#2776>
                ReplaceString( th, currentString );
 8006a42:	9901      	ldr	r1, [sp, #4]
 8006a44:	4640      	mov	r0, r8
 8006a46:	4632      	mov	r2, r6
                return this;
            }

            String newString = GetNewString( currentString, requiredLength );
            newString.AppendInPlace( value, repeatCount, currentLength );
            ReplaceString( th, newString );
 8006a48:	f000 f876 	bl	8006b38 <StringBuilder::ReplaceString#8810>
 8006a4c:	b002      	add	sp, #8
 8006a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a52:	4811      	ldr	r0, [pc, #68]	; (8006a98 <StringBuilder::Append#8804+0xb4>)
            if(repeatCount < 0)
            {
#if EXCEPTION_STRINGS
                throw new ArgumentOutOfRangeException( "repeatCount", Environment.GetResourceString( "ArgumentOutOfRange_NegativeCount" ) );
#else
                throw new ArgumentOutOfRangeException();
 8006a54:	490e      	ldr	r1, [pc, #56]	; (8006a90 <StringBuilder::Append#8804+0xac>)
 8006a56:	4478      	add	r0, pc
 8006a58:	180c      	adds	r4, r1, r0
 8006a5a:	4910      	ldr	r1, [pc, #64]	; (8006a9c <StringBuilder::Append#8804+0xb8>)
 8006a5c:	4401      	add	r1, r0
 8006a5e:	4620      	mov	r0, r4
 8006a60:	f7f9 ff5e 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8006a64:	4605      	mov	r5, r0
 8006a66:	f7fa fdc3 	bl	80015f0 <ArgumentOutOfRangeException::.ctor#6367>
 8006a6a:	e00b      	b.n	8006a84 <StringBuilder::Append#8804+0xa0>
 8006a6c:	4807      	ldr	r0, [pc, #28]	; (8006a8c <StringBuilder::Append#8804+0xa8>)

            int currentLength = currentString.Length;
            int requiredLength = currentLength + repeatCount;

            if(requiredLength < 0)
                throw new OutOfMemoryException();
 8006a6e:	4908      	ldr	r1, [pc, #32]	; (8006a90 <StringBuilder::Append#8804+0xac>)
 8006a70:	4478      	add	r0, pc
 8006a72:	180c      	adds	r4, r1, r0
 8006a74:	4907      	ldr	r1, [pc, #28]	; (8006a94 <StringBuilder::Append#8804+0xb0>)
 8006a76:	4401      	add	r1, r0
 8006a78:	4620      	mov	r0, r4
 8006a7a:	f7f9 ff51 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8006a7e:	4605      	mov	r5, r0
 8006a80:	f7ff feb6 	bl	80067f0 <OutOfMemoryException::.ctor#7605>
            if(repeatCount < 0)
            {
#if EXCEPTION_STRINGS
                throw new ArgumentOutOfRangeException( "repeatCount", Environment.GetResourceString( "ArgumentOutOfRange_NegativeCount" ) );
#else
                throw new ArgumentOutOfRangeException();
 8006a84:	4620      	mov	r0, r4
 8006a86:	4629      	mov	r1, r5
 8006a88:	f7f9 ff60 	bl	800094c <TypeSystemManager::Throw#5247>
 8006a8c:	17ffad40 	.word	0x17ffad40
 8006a90:	ffffea64 	.word	0xffffea64
 8006a94:	e8009f9c 	.word	0xe8009f9c
 8006a98:	17ffad5a 	.word	0x17ffad5a
 8006a9c:	e8007b9c 	.word	0xe8007b9c

08006aa0 <StringBuilder::NeedsAllocation#8808>:
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	4288      	cmp	r0, r1
 8006aa4:	bfd8      	it	le
 8006aa6:	2201      	movle	r2, #1
 8006aa8:	4610      	mov	r0, r2
 8006aaa:	4770      	bx	lr

08006aac <StringBuilder::GetNewString#8809>:
            //<= accounts for the terminating 0 which we require on strings.
            return (currentString.ArrayLength <= requiredLength);
        }

        private String GetNewString( String currentString, int requiredLength )
        {
 8006aac:	b570      	push	{r4, r5, r6, lr}
 8006aae:	4615      	mov	r5, r2
 8006ab0:	460c      	mov	r4, r1
            int newCapacity;
            int maxCapacity = m_MaxCapacity;

            if(requiredLength < 0)
 8006ab2:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006ab6:	dd12      	ble.n	8006ade <StringBuilder::GetNewString#8809+0x32>
            {
                throw new OutOfMemoryException();
            }

            if(requiredLength > maxCapacity)
 8006ab8:	68c6      	ldr	r6, [r0, #12]
 8006aba:	42b5      	cmp	r5, r6
 8006abc:	dc1c      	bgt.n	8006af8 <StringBuilder::GetNewString#8809+0x4c>
#else
                throw new ArgumentOutOfRangeException();
#endif
            }

            newCapacity = (currentString.Capacity) * 2; // To force a predicatable growth of 160,320 etc. for testing purposes
 8006abe:	4620      	mov	r0, r4
 8006ac0:	f7fa fdc5 	bl	800164e <String::get_Capacity#2670>
 8006ac4:	0041      	lsls	r1, r0, #1

            if(newCapacity < requiredLength)
 8006ac6:	42a9      	cmp	r1, r5
 8006ac8:	bfb8      	it	lt
 8006aca:	4629      	movlt	r1, r5
            {
                newCapacity = requiredLength;
            }

            if(newCapacity > maxCapacity)
 8006acc:	42b1      	cmp	r1, r6
 8006ace:	bfc8      	it	gt
 8006ad0:	4631      	movgt	r1, r6
            {
                newCapacity = maxCapacity;
            }

            if(newCapacity <= 0)
 8006ad2:	2900      	cmp	r1, #0
 8006ad4:	dd13      	ble.n	8006afe <StringBuilder::GetNewString#8809+0x52>
#else
                throw new ArgumentOutOfRangeException();
#endif
            }

            return String.GetStringForStringBuilder( currentString, newCapacity );
 8006ad6:	4620      	mov	r0, r4
 8006ad8:	f7fb f91a 	bl	8001d10 <String::GetStringForStringBuilder#2783>
 8006adc:	bd70      	pop	{r4, r5, r6, pc}
 8006ade:	4814      	ldr	r0, [pc, #80]	; (8006b30 <StringBuilder::GetNewString#8809+0x84>)
            int newCapacity;
            int maxCapacity = m_MaxCapacity;

            if(requiredLength < 0)
            {
                throw new OutOfMemoryException();
 8006ae0:	4910      	ldr	r1, [pc, #64]	; (8006b24 <StringBuilder::GetNewString#8809+0x78>)
 8006ae2:	4478      	add	r0, pc
 8006ae4:	180c      	adds	r4, r1, r0
 8006ae6:	4913      	ldr	r1, [pc, #76]	; (8006b34 <StringBuilder::GetNewString#8809+0x88>)
 8006ae8:	4401      	add	r1, r0
 8006aea:	4620      	mov	r0, r4
 8006aec:	f7f9 ff18 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8006af0:	4605      	mov	r5, r0
 8006af2:	f7ff fe7d 	bl	80067f0 <OutOfMemoryException::.ctor#7605>
 8006af6:	e00e      	b.n	8006b16 <StringBuilder::GetNewString#8809+0x6a>
 8006af8:	480c      	ldr	r0, [pc, #48]	; (8006b2c <StringBuilder::GetNewString#8809+0x80>)
 8006afa:	4478      	add	r0, pc
 8006afc:	e001      	b.n	8006b02 <StringBuilder::GetNewString#8809+0x56>
 8006afe:	4808      	ldr	r0, [pc, #32]	; (8006b20 <StringBuilder::GetNewString#8809+0x74>)
 8006b00:	4478      	add	r0, pc
            if(requiredLength > maxCapacity)
            {
#if EXCEPTION_STRINGS
                throw new ArgumentOutOfRangeException( "requiredLength", Environment.GetResourceString( "ArgumentOutOfRange_SmallCapacity" ) );
#else
                throw new ArgumentOutOfRangeException();
 8006b02:	4908      	ldr	r1, [pc, #32]	; (8006b24 <StringBuilder::GetNewString#8809+0x78>)
 8006b04:	180c      	adds	r4, r1, r0
 8006b06:	4908      	ldr	r1, [pc, #32]	; (8006b28 <StringBuilder::GetNewString#8809+0x7c>)
 8006b08:	4401      	add	r1, r0
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	f7f9 ff08 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8006b10:	4605      	mov	r5, r0
 8006b12:	f7fa fd6d 	bl	80015f0 <ArgumentOutOfRangeException::.ctor#6367>
 8006b16:	4620      	mov	r0, r4
 8006b18:	4629      	mov	r1, r5
 8006b1a:	f7f9 ff17 	bl	800094c <TypeSystemManager::Throw#5247>
 8006b1e:	46c0      	nop			; (mov r8, r8)
 8006b20:	17ffacb0 	.word	0x17ffacb0
 8006b24:	ffffea64 	.word	0xffffea64
 8006b28:	e8007b9c 	.word	0xe8007b9c
 8006b2c:	17ffacb6 	.word	0x17ffacb6
 8006b30:	17ffacce 	.word	0x17ffacce
 8006b34:	e8009f9c 	.word	0xe8009f9c

08006b38 <StringBuilder::ReplaceString#8810>:
 8006b38:	6081      	str	r1, [r0, #8]
 8006b3a:	6102      	str	r2, [r0, #16]
 8006b3c:	4770      	bx	lr
 8006b3e:	46c0      	nop			; (mov r8, r8)

08006b40 <StringBuilder::Append#8805>:
            return this;
        }

        // Appends an array of characters at the end of this string builder. The capacity is adjusted as needed. 
        public StringBuilder Append( char[] value, int startIndex, int charCount )
        {
 8006b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b44:	b082      	sub	sp, #8
 8006b46:	460f      	mov	r7, r1
 8006b48:	4680      	mov	r8, r0
 8006b4a:	2000      	movs	r0, #0
 8006b4c:	461d      	mov	r5, r3
 8006b4e:	4616      	mov	r6, r2
 8006b50:	9001      	str	r0, [sp, #4]
 8006b52:	b36f      	cbz	r7, 8006bb0 <StringBuilder::Append#8805+0x70>
 8006b54:	b37d      	cbz	r5, 8006bb6 <StringBuilder::Append#8805+0x76>
            if(charCount == 0)
            {
                return this;
            }

            if(startIndex < 0)
 8006b56:	f1b6 3fff 	cmp.w	r6, #4294967295
 8006b5a:	dd2f      	ble.n	8006bbc <StringBuilder::Append#8805+0x7c>
                throw new ArgumentOutOfRangeException( "startIndex", Environment.GetResourceString( "ArgumentOutOfRange_GenericPositive" ) );
#else
                throw new ArgumentOutOfRangeException();
#endif
            }
            if(charCount < 0)
 8006b5c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006b60:	dd2f      	ble.n	8006bc2 <StringBuilder::Append#8805+0x82>
 8006b62:	68b8      	ldr	r0, [r7, #8]
                throw new ArgumentOutOfRangeException( "count", Environment.GetResourceString( "ArgumentOutOfRange_GenericPositive" ) );
#else
                throw new ArgumentOutOfRangeException();
#endif
            }
            if(charCount > value.Length - startIndex)
 8006b64:	1b80      	subs	r0, r0, r6
 8006b66:	4285      	cmp	r5, r0
 8006b68:	dc2e      	bgt.n	8006bc8 <StringBuilder::Append#8805+0x88>
 8006b6a:	a901      	add	r1, sp, #4
                throw new ArgumentOutOfRangeException();
#endif
            }

            Thread th;
            String currentString = GetThreadSafeString( out th );
 8006b6c:	4640      	mov	r0, r8
 8006b6e:	f7ff ff1f 	bl	80069b0 <StringBuilder::GetThreadSafeString#8792>
 8006b72:	4604      	mov	r4, r0
 8006b74:	e9d4 0a02 	ldrd	r0, sl, [r4, #8]

            int currentLength = currentString.Length;
            requiredLength = currentLength + charCount;
 8006b78:	eb0a 0905 	add.w	r9, sl, r5
            if(NeedsAllocation( currentString, requiredLength ))
 8006b7c:	4649      	mov	r1, r9
 8006b7e:	f7ff ff8f 	bl	8006aa0 <StringBuilder::NeedsAllocation#8808>
 8006b82:	f010 0fff 	tst.w	r0, #255	; 0xff
 8006b86:	d005      	beq.n	8006b94 <StringBuilder::Append#8805+0x54>
            {
                String newString = GetNewString( currentString, requiredLength );
 8006b88:	4640      	mov	r0, r8
 8006b8a:	4621      	mov	r1, r4
 8006b8c:	464a      	mov	r2, r9
 8006b8e:	f7ff ff8d 	bl	8006aac <StringBuilder::GetNewString#8809>
 8006b92:	4604      	mov	r4, r0
                newString.AppendInPlace( value, startIndex, charCount, currentLength );
                ReplaceString( th, newString );
            }
            else
            {
                currentString.AppendInPlace( value, startIndex, charCount, currentLength );
 8006b94:	4620      	mov	r0, r4
 8006b96:	4639      	mov	r1, r7
 8006b98:	4632      	mov	r2, r6
 8006b9a:	462b      	mov	r3, r5
 8006b9c:	f8cd a000 	str.w	sl, [sp]
 8006ba0:	f7fb f897 	bl	8001cd2 <String::AppendInPlace#2781>
                ReplaceString( th, currentString );
 8006ba4:	9901      	ldr	r1, [sp, #4]
 8006ba6:	4640      	mov	r0, r8
 8006ba8:	4622      	mov	r2, r4
 8006baa:	f7ff ffc5 	bl	8006b38 <StringBuilder::ReplaceString#8810>
 8006bae:	e002      	b.n	8006bb6 <StringBuilder::Append#8805+0x76>
        {
            int requiredLength;

            if(value == null)
            {
                if(startIndex == 0 && charCount == 0)
 8006bb0:	ea56 0005 	orrs.w	r0, r6, r5
 8006bb4:	d115      	bne.n	8006be2 <StringBuilder::Append#8805+0xa2>
 8006bb6:	b002      	add	sp, #8
 8006bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bbc:	4815      	ldr	r0, [pc, #84]	; (8006c14 <StringBuilder::Append#8805+0xd4>)
 8006bbe:	4478      	add	r0, pc
 8006bc0:	e004      	b.n	8006bcc <StringBuilder::Append#8805+0x8c>
 8006bc2:	4813      	ldr	r0, [pc, #76]	; (8006c10 <StringBuilder::Append#8805+0xd0>)
 8006bc4:	4478      	add	r0, pc
 8006bc6:	e001      	b.n	8006bcc <StringBuilder::Append#8805+0x8c>
 8006bc8:	480e      	ldr	r0, [pc, #56]	; (8006c04 <StringBuilder::Append#8805+0xc4>)
 8006bca:	4478      	add	r0, pc
            if(startIndex < 0)
            {
#if EXCEPTION_STRINGS
                throw new ArgumentOutOfRangeException( "startIndex", Environment.GetResourceString( "ArgumentOutOfRange_GenericPositive" ) );
#else
                throw new ArgumentOutOfRangeException();
 8006bcc:	490e      	ldr	r1, [pc, #56]	; (8006c08 <StringBuilder::Append#8805+0xc8>)
 8006bce:	180c      	adds	r4, r1, r0
 8006bd0:	490e      	ldr	r1, [pc, #56]	; (8006c0c <StringBuilder::Append#8805+0xcc>)
 8006bd2:	4401      	add	r1, r0
 8006bd4:	4620      	mov	r0, r4
 8006bd6:	f7f9 fea3 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8006bda:	4605      	mov	r5, r0
 8006bdc:	f7fa fd08 	bl	80015f0 <ArgumentOutOfRangeException::.ctor#6367>
 8006be0:	e00b      	b.n	8006bfa <StringBuilder::Append#8805+0xba>
 8006be2:	480d      	ldr	r0, [pc, #52]	; (8006c18 <StringBuilder::Append#8805+0xd8>)
                    return this;
                }
#if EXCEPTION_STRINGS
                throw new ArgumentNullException( "value" );
#else
                throw new ArgumentNullException();
 8006be4:	4908      	ldr	r1, [pc, #32]	; (8006c08 <StringBuilder::Append#8805+0xc8>)
 8006be6:	4478      	add	r0, pc
 8006be8:	180c      	adds	r4, r1, r0
 8006bea:	490c      	ldr	r1, [pc, #48]	; (8006c1c <StringBuilder::Append#8805+0xdc>)
 8006bec:	4401      	add	r1, r0
 8006bee:	4620      	mov	r0, r4
 8006bf0:	f7f9 fe96 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8006bf4:	4605      	mov	r5, r0
 8006bf6:	f7f9 fea4 	bl	8000942 <ArgumentNullException::.ctor#6362>
            if(startIndex < 0)
            {
#if EXCEPTION_STRINGS
                throw new ArgumentOutOfRangeException( "startIndex", Environment.GetResourceString( "ArgumentOutOfRange_GenericPositive" ) );
#else
                throw new ArgumentOutOfRangeException();
 8006bfa:	4620      	mov	r0, r4
 8006bfc:	4629      	mov	r1, r5
 8006bfe:	f7f9 fea5 	bl	800094c <TypeSystemManager::Throw#5247>
 8006c02:	46c0      	nop			; (mov r8, r8)
 8006c04:	17ffabe6 	.word	0x17ffabe6
 8006c08:	ffffea64 	.word	0xffffea64
 8006c0c:	e8007b9c 	.word	0xe8007b9c
 8006c10:	17ffabec 	.word	0x17ffabec
 8006c14:	17ffabf2 	.word	0x17ffabf2
 8006c18:	17ffabca 	.word	0x17ffabca
 8006c1c:	e80075bc 	.word	0xe80075bc

08006c20 <StringBuilder::Append#8828>:

        // Appends an uint to this string builder. 
        // The capacity is adjusted as needed. 
        [CLSCompliant( false )]
        public StringBuilder Append( uint value )
        {
 8006c20:	b510      	push	{r4, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	4604      	mov	r4, r0
 8006c26:	4808      	ldr	r0, [pc, #32]	; (8006c48 <StringBuilder::Append#8828+0x28>)
 8006c28:	9101      	str	r1, [sp, #4]
            return Append( value.ToString( CultureInfo.CurrentCulture ) );
 8006c2a:	4908      	ldr	r1, [pc, #32]	; (8006c4c <StringBuilder::Append#8828+0x2c>)
 8006c2c:	4478      	add	r0, pc
 8006c2e:	4408      	add	r0, r1
 8006c30:	f8d0 10a8 	ldr.w	r1, [r0, #168]	; 0xa8
 8006c34:	a801      	add	r0, sp, #4
 8006c36:	f7fb f908 	bl	8001e4a <UInt32::ToString#2903>
 8006c3a:	4601      	mov	r1, r0
 8006c3c:	4620      	mov	r0, r4
 8006c3e:	f7ff f9f4 	bl	800602a <StringBuilder::Append#8806>
 8006c42:	b002      	add	sp, #8
 8006c44:	bd10      	pop	{r4, pc}
 8006c46:	46c0      	nop			; (mov r8, r8)
 8006c48:	17ffab84 	.word	0x17ffab84
 8006c4c:	fffffe3c 	.word	0xfffffe3c

08006c50 <StringBuilder::FormatError#8853>:
        {
            return AppendFormat( null, format, args );
        }

        private static void FormatError()
        {
 8006c50:	b5b0      	push	{r4, r5, r7, lr}
 8006c52:	4808      	ldr	r0, [pc, #32]	; (8006c74 <StringBuilder::FormatError#8853+0x24>)
#if EXCEPTION_STRINGS
            throw new FormatException( Environment.GetResourceString( "Format_InvalidString" ) );
#else
            throw new FormatException();
 8006c54:	4908      	ldr	r1, [pc, #32]	; (8006c78 <StringBuilder::FormatError#8853+0x28>)
 8006c56:	4478      	add	r0, pc
 8006c58:	180c      	adds	r4, r1, r0
 8006c5a:	4908      	ldr	r1, [pc, #32]	; (8006c7c <StringBuilder::FormatError#8853+0x2c>)
 8006c5c:	4401      	add	r1, r0
 8006c5e:	4620      	mov	r0, r4
 8006c60:	f7f9 fe5e 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8006c64:	4605      	mov	r5, r0
 8006c66:	f7fe fb1b 	bl	80052a0 <FormatException::.ctor#7338>
 8006c6a:	4620      	mov	r0, r4
 8006c6c:	4629      	mov	r1, r5
 8006c6e:	f7f9 fe6d 	bl	800094c <TypeSystemManager::Throw#5247>
 8006c72:	46c0      	nop			; (mov r8, r8)
 8006c74:	17ffab5a 	.word	0x17ffab5a
 8006c78:	ffffea64 	.word	0xffffea64
 8006c7c:	e8009c7c 	.word	0xe8009c7c

08006c80 <MemberInfo::Equals#9107>:
        }
        #endregion

        #region MemberInfo Overrides
        public override bool Equals( object obj )
        {
 8006c80:	b570      	push	{r4, r5, r6, lr}
 8006c82:	460d      	mov	r5, r1
 8006c84:	4606      	mov	r6, r0
            if (obj == null)
 8006c86:	2d00      	cmp	r5, #0
 8006c88:	bf02      	ittt	eq
 8006c8a:	2400      	moveq	r4, #0
 8006c8c:	4620      	moveq	r0, r4
 8006c8e:	bd70      	popeq	{r4, r5, r6, pc}
 8006c90:	480b      	ldr	r0, [pc, #44]	; (8006cc0 <MemberInfo::Equals#9107+0x40>)
            {
                return false;
            }
            if ((obj is MemberInfo) == false)
 8006c92:	490c      	ldr	r1, [pc, #48]	; (8006cc4 <MemberInfo::Equals#9107+0x44>)
 8006c94:	4478      	add	r0, pc
 8006c96:	4401      	add	r1, r0
 8006c98:	4628      	mov	r0, r5
 8006c9a:	f7fa f9c5 	bl	8001028 <TypeSystemManager::CastToTypeNoThrow#5242>
 8006c9e:	2400      	movs	r4, #0
 8006ca0:	b158      	cbz	r0, 8006cba <MemberInfo::Equals#9107+0x3a>
            {
                return false;
            }
            return this.GetHashCode() == obj.GetHashCode();
 8006ca2:	4630      	mov	r0, r6
 8006ca4:	f7ff fded 	bl	8006882 <Type::GetHashCode#7847>
 8006ca8:	4606      	mov	r6, r0
 8006caa:	6868      	ldr	r0, [r5, #4]
 8006cac:	69c0      	ldr	r0, [r0, #28]
 8006cae:	6941      	ldr	r1, [r0, #20]
 8006cb0:	4628      	mov	r0, r5
 8006cb2:	4788      	blx	r1
 8006cb4:	4286      	cmp	r6, r0
 8006cb6:	bf08      	it	eq
 8006cb8:	2401      	moveq	r4, #1
 8006cba:	4620      	mov	r0, r4
 8006cbc:	bd70      	pop	{r4, r5, r6, pc}
 8006cbe:	46c0      	nop			; (mov r8, r8)
 8006cc0:	17ffab1c 	.word	0x17ffab1c
 8006cc4:	e800a17c 	.word	0xe800a17c

08006cc8 <MemberInfo::get_MetadataToken#9115>:
        #endregion

        public virtual int MetadataToken
        {
            get
            {
 8006cc8:	b5b0      	push	{r4, r5, r7, lr}
 8006cca:	4808      	ldr	r0, [pc, #32]	; (8006cec <MemberInfo::get_MetadataToken#9115+0x24>)
                throw new InvalidOperationException();
 8006ccc:	4908      	ldr	r1, [pc, #32]	; (8006cf0 <MemberInfo::get_MetadataToken#9115+0x28>)
 8006cce:	4478      	add	r0, pc
 8006cd0:	180c      	adds	r4, r1, r0
 8006cd2:	4908      	ldr	r1, [pc, #32]	; (8006cf4 <MemberInfo::get_MetadataToken#9115+0x2c>)
 8006cd4:	4401      	add	r1, r0
 8006cd6:	4620      	mov	r0, r4
 8006cd8:	f7f9 fe22 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8006cdc:	4605      	mov	r5, r0
 8006cde:	f7fe fae3 	bl	80052a8 <InvalidOperationException::.ctor#7417>
 8006ce2:	4620      	mov	r0, r4
 8006ce4:	4629      	mov	r1, r5
 8006ce6:	f7f9 fe31 	bl	800094c <TypeSystemManager::Throw#5247>
 8006cea:	46c0      	nop			; (mov r8, r8)
 8006cec:	17ffaae2 	.word	0x17ffaae2
 8006cf0:	ffffea64 	.word	0xffffea64
 8006cf4:	e800a20c 	.word	0xe800a20c

08006cf8 <MemberInfo::get_MetadataTokenInternal#9116>:
        }

        internal virtual int MetadataTokenInternal
        {
            get
            {
 8006cf8:	b580      	push	{r7, lr}
                return MetadataToken;
 8006cfa:	f7ff ffe5 	bl	8006cc8 <MemberInfo::get_MetadataToken#9115>
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <CultureInfo::GetFormat#9880>:
////        return m_name;
////    }


        public virtual Object GetFormat( Type formatType )
        {
 8006d00:	b510      	push	{r4, lr}
 8006d02:	4604      	mov	r4, r0
 8006d04:	4808      	ldr	r0, [pc, #32]	; (8006d28 <CultureInfo::GetFormat#9880+0x28>)
            if(formatType == typeof( NumberFormatInfo ))
 8006d06:	4a09      	ldr	r2, [pc, #36]	; (8006d2c <CultureInfo::GetFormat#9880+0x2c>)
 8006d08:	4478      	add	r0, pc
 8006d0a:	4402      	add	r2, r0
 8006d0c:	4608      	mov	r0, r1
 8006d0e:	4611      	mov	r1, r2
 8006d10:	f7ff fda9 	bl	8006866 <Type::op_Equality#7848>
 8006d14:	f010 0fff 	tst.w	r0, #255	; 0xff
 8006d18:	bf04      	itt	eq
 8006d1a:	2000      	moveq	r0, #0
 8006d1c:	bd10      	popeq	{r4, pc}
            {
                return NumberFormat;
 8006d1e:	4620      	mov	r0, r4
 8006d20:	f000 f806 	bl	8006d30 <CultureInfo::get_NumberFormat#9881>
 8006d24:	bd10      	pop	{r4, pc}
 8006d26:	46c0      	nop			; (mov r8, r8)
 8006d28:	17ffaaa8 	.word	0x17ffaaa8
 8006d2c:	e800a320 	.word	0xe800a320

08006d30 <CultureInfo::get_NumberFormat#9881>:
////    }
    
        public virtual NumberFormatInfo NumberFormat
        {
            get
            {
 8006d30:	b570      	push	{r4, r5, r6, lr}
 8006d32:	4604      	mov	r4, r0
////            CultureInfo.CheckNeutral( this );
                if(numInfo == null)
 8006d34:	6920      	ldr	r0, [r4, #16]
 8006d36:	b980      	cbnz	r0, 8006d5a <CultureInfo::get_NumberFormat#9881+0x2a>
 8006d38:	4909      	ldr	r1, [pc, #36]	; (8006d60 <CultureInfo::get_NumberFormat#9881+0x30>)
                {
                    NumberFormatInfo temp = new NumberFormatInfo( this.m_cultureTableRecord );
 8006d3a:	480a      	ldr	r0, [pc, #40]	; (8006d64 <CultureInfo::get_NumberFormat#9881+0x34>)
 8006d3c:	4a0a      	ldr	r2, [pc, #40]	; (8006d68 <CultureInfo::get_NumberFormat#9881+0x38>)
 8006d3e:	69a5      	ldr	r5, [r4, #24]
 8006d40:	4479      	add	r1, pc
 8006d42:	4408      	add	r0, r1
 8006d44:	4411      	add	r1, r2
 8006d46:	f7f9 fdeb 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8006d4a:	4629      	mov	r1, r5
 8006d4c:	4606      	mov	r6, r0
 8006d4e:	f000 f813 	bl	8006d78 <NumberFormatInfo::.ctor#10013>
    
                    temp.isReadOnly = m_isReadOnly;
 8006d52:	7a20      	ldrb	r0, [r4, #8]
 8006d54:	f886 007c 	strb.w	r0, [r6, #124]	; 0x7c
 8006d58:	6126      	str	r6, [r4, #16]
    
                    numInfo = temp;
                }
                return (numInfo);
 8006d5a:	6920      	ldr	r0, [r4, #16]
 8006d5c:	bd70      	pop	{r4, r5, r6, pc}
 8006d5e:	46c0      	nop			; (mov r8, r8)
 8006d60:	17ffaa70 	.word	0x17ffaa70
 8006d64:	ffffea64 	.word	0xffffea64
 8006d68:	e800a2fc 	.word	0xe800a2fc

08006d6c <CultureInfo::.ctor#9874>:
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	7201      	strb	r1, [r0, #8]
 8006d70:	e9c0 1103 	strd	r1, r1, [r0, #12]
 8006d74:	6141      	str	r1, [r0, #20]
 8006d76:	4770      	bx	lr

08006d78 <NumberFormatInfo::.ctor#10013>:
        // READTHIS READTHIS READTHIS
        // This class has an exact mapping onto a native structure defined in COMNumber.cpp
        // DO NOT UPDATE THIS WITHOUT UPDATING THAT STRUCTURE. IF YOU ADD BOOL, ADD THEM AT THE END.
        // ALSO MAKE SURE TO UPDATE mscorlib.h in the VM directory to check field offsets.
        // READTHIS READTHIS READTHIS
        internal int[] numberGroupSizes = new int[] { 3 };
 8006d78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006d7c:	b081      	sub	sp, #4
 8006d7e:	4f3f      	ldr	r7, [pc, #252]	; (8006e7c <NumberFormatInfo::.ctor#10013+0x104>)
 8006d80:	4604      	mov	r4, r0
 8006d82:	483f      	ldr	r0, [pc, #252]	; (8006e80 <NumberFormatInfo::.ctor#10013+0x108>)
 8006d84:	2201      	movs	r2, #1
 8006d86:	f04f 0801 	mov.w	r8, #1
 8006d8a:	447f      	add	r7, pc
 8006d8c:	19c5      	adds	r5, r0, r7
 8006d8e:	483d      	ldr	r0, [pc, #244]	; (8006e84 <NumberFormatInfo::.ctor#10013+0x10c>)
 8006d90:	19c6      	adds	r6, r0, r7
 8006d92:	4628      	mov	r0, r5
 8006d94:	4631      	mov	r1, r6
 8006d96:	f7fa fc0d 	bl	80015b4 <DefaultTypeSystemManager::AllocateArray#5255>
 8006d9a:	f04f 0903 	mov.w	r9, #3
        internal int[] currencyGroupSizes = new int[] { 3 };
 8006d9e:	4631      	mov	r1, r6
        // READTHIS READTHIS READTHIS
        // This class has an exact mapping onto a native structure defined in COMNumber.cpp
        // DO NOT UPDATE THIS WITHOUT UPDATING THAT STRUCTURE. IF YOU ADD BOOL, ADD THEM AT THE END.
        // ALSO MAKE SURE TO UPDATE mscorlib.h in the VM directory to check field offsets.
        // READTHIS READTHIS READTHIS
        internal int[] numberGroupSizes = new int[] { 3 };
 8006da0:	2201      	movs	r2, #1
 8006da2:	f8c0 900c 	str.w	r9, [r0, #12]
 8006da6:	60a0      	str	r0, [r4, #8]
        internal int[] currencyGroupSizes = new int[] { 3 };
 8006da8:	4628      	mov	r0, r5
 8006daa:	f7fa fc03 	bl	80015b4 <DefaultTypeSystemManager::AllocateArray#5255>
 8006dae:	f8c0 900c 	str.w	r9, [r0, #12]
 8006db2:	60e0      	str	r0, [r4, #12]
        internal int[] percentGroupSizes = new int[] { 3 };
 8006db4:	4628      	mov	r0, r5
 8006db6:	4631      	mov	r1, r6
        // READTHIS READTHIS READTHIS
        // This class has an exact mapping onto a native structure defined in COMNumber.cpp
        // DO NOT UPDATE THIS WITHOUT UPDATING THAT STRUCTURE. IF YOU ADD BOOL, ADD THEM AT THE END.
        // ALSO MAKE SURE TO UPDATE mscorlib.h in the VM directory to check field offsets.
        // READTHIS READTHIS READTHIS
        internal int[] numberGroupSizes = new int[] { 3 };
 8006db8:	2201      	movs	r2, #1
        internal int[] currencyGroupSizes = new int[] { 3 };
        internal int[] percentGroupSizes = new int[] { 3 };
 8006dba:	f7fa fbfb 	bl	80015b4 <DefaultTypeSystemManager::AllocateArray#5255>
 8006dbe:	f8c0 900c 	str.w	r9, [r0, #12]
 8006dc2:	6120      	str	r0, [r4, #16]
 8006dc4:	4830      	ldr	r0, [pc, #192]	; (8006e88 <NumberFormatInfo::.ctor#10013+0x110>)
 8006dc6:	4933      	ldr	r1, [pc, #204]	; (8006e94 <NumberFormatInfo::.ctor#10013+0x11c>)
 8006dc8:	4a33      	ldr	r2, [pc, #204]	; (8006e98 <NumberFormatInfo::.ctor#10013+0x120>)
 8006dca:	2600      	movs	r6, #0
 8006dcc:	4438      	add	r0, r7
 8006dce:	4439      	add	r1, r7
 8006dd0:	443a      	add	r2, r7
 8006dd2:	6160      	str	r0, [r4, #20]
 8006dd4:	482d      	ldr	r0, [pc, #180]	; (8006e8c <NumberFormatInfo::.ctor#10013+0x114>)
 8006dd6:	4438      	add	r0, r7
 8006dd8:	61a0      	str	r0, [r4, #24]
 8006dda:	482d      	ldr	r0, [pc, #180]	; (8006e90 <NumberFormatInfo::.ctor#10013+0x118>)
 8006ddc:	4438      	add	r0, r7
 8006dde:	61e0      	str	r0, [r4, #28]
 8006de0:	e9c4 1108 	strd	r1, r1, [r4, #32]
 8006de4:	62a0      	str	r0, [r4, #40]	; 0x28
 8006de6:	62e2      	str	r2, [r4, #44]	; 0x2c
 8006de8:	4a2c      	ldr	r2, [pc, #176]	; (8006e9c <NumberFormatInfo::.ctor#10013+0x124>)
 8006dea:	6326      	str	r6, [r4, #48]	; 0x30
 8006dec:	443a      	add	r2, r7
 8006dee:	6362      	str	r2, [r4, #52]	; 0x34
 8006df0:	4a2b      	ldr	r2, [pc, #172]	; (8006ea0 <NumberFormatInfo::.ctor#10013+0x128>)
 8006df2:	443a      	add	r2, r7
 8006df4:	63a2      	str	r2, [r4, #56]	; 0x38
 8006df6:	4a2b      	ldr	r2, [pc, #172]	; (8006ea4 <NumberFormatInfo::.ctor#10013+0x12c>)
 8006df8:	443a      	add	r2, r7
 8006dfa:	e9c4 200f 	strd	r2, r0, [r4, #60]	; 0x3c
 8006dfe:	482a      	ldr	r0, [pc, #168]	; (8006ea8 <NumberFormatInfo::.ctor#10013+0x130>)
 8006e00:	6461      	str	r1, [r4, #68]	; 0x44
        internal String percentGroupSeparator = ",";
        internal String percentSymbol = "%";
        internal String perMilleSymbol = "\u2030";

        [OptionalField( VersionAdded = 2 )]
        internal String[] nativeDigits = { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" };
 8006e02:	220a      	movs	r2, #10
 8006e04:	4438      	add	r0, r7
 8006e06:	64a0      	str	r0, [r4, #72]	; 0x48
 8006e08:	4828      	ldr	r0, [pc, #160]	; (8006eac <NumberFormatInfo::.ctor#10013+0x134>)
 8006e0a:	4438      	add	r0, r7
 8006e0c:	64e0      	str	r0, [r4, #76]	; 0x4c
 8006e0e:	4828      	ldr	r0, [pc, #160]	; (8006eb0 <NumberFormatInfo::.ctor#10013+0x138>)
 8006e10:	19c1      	adds	r1, r0, r7
 8006e12:	4628      	mov	r0, r5
 8006e14:	f7fa fbce 	bl	80015b4 <DefaultTypeSystemManager::AllocateArray#5255>
 8006e18:	4926      	ldr	r1, [pc, #152]	; (8006eb4 <NumberFormatInfo::.ctor#10013+0x13c>)
 8006e1a:	4439      	add	r1, r7
 8006e1c:	60c1      	str	r1, [r0, #12]
 8006e1e:	4926      	ldr	r1, [pc, #152]	; (8006eb8 <NumberFormatInfo::.ctor#10013+0x140>)
 8006e20:	4439      	add	r1, r7
 8006e22:	6101      	str	r1, [r0, #16]
 8006e24:	4925      	ldr	r1, [pc, #148]	; (8006ebc <NumberFormatInfo::.ctor#10013+0x144>)
 8006e26:	4439      	add	r1, r7
 8006e28:	6141      	str	r1, [r0, #20]
 8006e2a:	4925      	ldr	r1, [pc, #148]	; (8006ec0 <NumberFormatInfo::.ctor#10013+0x148>)
 8006e2c:	4439      	add	r1, r7
 8006e2e:	6181      	str	r1, [r0, #24]
 8006e30:	4924      	ldr	r1, [pc, #144]	; (8006ec4 <NumberFormatInfo::.ctor#10013+0x14c>)
 8006e32:	4439      	add	r1, r7
 8006e34:	61c1      	str	r1, [r0, #28]
 8006e36:	4924      	ldr	r1, [pc, #144]	; (8006ec8 <NumberFormatInfo::.ctor#10013+0x150>)
 8006e38:	4439      	add	r1, r7
 8006e3a:	6201      	str	r1, [r0, #32]
 8006e3c:	4923      	ldr	r1, [pc, #140]	; (8006ecc <NumberFormatInfo::.ctor#10013+0x154>)
 8006e3e:	4439      	add	r1, r7
 8006e40:	6241      	str	r1, [r0, #36]	; 0x24
 8006e42:	4923      	ldr	r1, [pc, #140]	; (8006ed0 <NumberFormatInfo::.ctor#10013+0x158>)
 8006e44:	4439      	add	r1, r7
 8006e46:	6281      	str	r1, [r0, #40]	; 0x28
 8006e48:	4922      	ldr	r1, [pc, #136]	; (8006ed4 <NumberFormatInfo::.ctor#10013+0x15c>)
 8006e4a:	4439      	add	r1, r7
 8006e4c:	62c1      	str	r1, [r0, #44]	; 0x2c
 8006e4e:	4922      	ldr	r1, [pc, #136]	; (8006ed8 <NumberFormatInfo::.ctor#10013+0x160>)
 8006e50:	4439      	add	r1, r7
 8006e52:	6301      	str	r1, [r0, #48]	; 0x30
 8006e54:	e9c4 0614 	strd	r0, r6, [r4, #80]	; 0x50
 8006e58:	2002      	movs	r0, #2
 8006e5a:	e9c4 0016 	strd	r0, r0, [r4, #88]	; 0x58
 8006e5e:	e9c4 6618 	strd	r6, r6, [r4, #96]	; 0x60
 8006e62:	e9c4 861a 	strd	r8, r6, [r4, #104]	; 0x68
 8006e66:	e9c4 601c 	strd	r6, r0, [r4, #112]	; 0x70
 8006e6a:	f8c4 8078 	str.w	r8, [r4, #120]	; 0x78
 8006e6e:	f884 607c 	strb.w	r6, [r4, #124]	; 0x7c
 8006e72:	f884 607d 	strb.w	r6, [r4, #125]	; 0x7d
 8006e76:	b001      	add	sp, #4
 8006e78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e7c:	17ffaa26 	.word	0x17ffaa26
 8006e80:	ffffea64 	.word	0xffffea64
 8006e84:	e800741c 	.word	0xe800741c
 8006e88:	e800a32c 	.word	0xe800a32c
 8006e8c:	e800a34c 	.word	0xe800a34c
 8006e90:	e800a36c 	.word	0xe800a36c
 8006e94:	e800a38c 	.word	0xe800a38c
 8006e98:	e800a3ac 	.word	0xe800a3ac
 8006e9c:	e800a3cc 	.word	0xe800a3cc
 8006ea0:	e800a3ec 	.word	0xe800a3ec
 8006ea4:	e800a40c 	.word	0xe800a40c
 8006ea8:	e800a43c 	.word	0xe800a43c
 8006eac:	e800a45c 	.word	0xe800a45c
 8006eb0:	e800747c 	.word	0xe800747c
 8006eb4:	e800a47c 	.word	0xe800a47c
 8006eb8:	e80074ac 	.word	0xe80074ac
 8006ebc:	e800a49c 	.word	0xe800a49c
 8006ec0:	e800a4bc 	.word	0xe800a4bc
 8006ec4:	e800a4dc 	.word	0xe800a4dc
 8006ec8:	e800a4fc 	.word	0xe800a4fc
 8006ecc:	e800a51c 	.word	0xe800a51c
 8006ed0:	e800a53c 	.word	0xe800a53c
 8006ed4:	e800a55c 	.word	0xe800a55c
 8006ed8:	e800a57c 	.word	0xe800a57c

08006edc <NumberFormatInfo::GetFormat#10026>:
////        }
////    }


        public Object GetFormat( Type formatType )
        {
 8006edc:	b510      	push	{r4, lr}
 8006ede:	4604      	mov	r4, r0
 8006ee0:	4806      	ldr	r0, [pc, #24]	; (8006efc <NumberFormatInfo::GetFormat#10026+0x20>)
            return formatType == typeof( NumberFormatInfo ) ? this : null;
 8006ee2:	4a07      	ldr	r2, [pc, #28]	; (8006f00 <NumberFormatInfo::GetFormat#10026+0x24>)
 8006ee4:	4478      	add	r0, pc
 8006ee6:	4402      	add	r2, r0
 8006ee8:	4608      	mov	r0, r1
 8006eea:	4611      	mov	r1, r2
 8006eec:	f7ff fcbb 	bl	8006866 <Type::op_Equality#7848>
 8006ef0:	b2c0      	uxtb	r0, r0
 8006ef2:	2800      	cmp	r0, #0
 8006ef4:	bf08      	it	eq
 8006ef6:	4604      	moveq	r4, r0
 8006ef8:	4620      	mov	r0, r4
 8006efa:	bd10      	pop	{r4, pc}
 8006efc:	17ffa8cc 	.word	0x17ffa8cc
 8006f00:	e800a320 	.word	0xe800a320

08006f04 <BitArray::.ctor#10512>:
        ** Allocates space to hold length bit values. All of the values in the bit
        ** array are set to defaultValue.
        **
        ** Exceptions: ArgumentOutOfRangeException if length < 0.
        =========================================================================*/
        public BitArray( int length, bool defaultValue )
 8006f04:	b510      	push	{r4, lr}
 8006f06:	490e      	ldr	r1, [pc, #56]	; (8006f40 <BitArray::.ctor#10512+0x3c>)
 8006f08:	4604      	mov	r4, r0
#else
                throw new ArgumentOutOfRangeException();
#endif
            }

            m_array  = new int[(length + 31) / 32];
 8006f0a:	480e      	ldr	r0, [pc, #56]	; (8006f44 <BitArray::.ctor#10512+0x40>)
 8006f0c:	4a0e      	ldr	r2, [pc, #56]	; (8006f48 <BitArray::.ctor#10512+0x44>)
 8006f0e:	4479      	add	r1, pc
 8006f10:	4408      	add	r0, r1
 8006f12:	4411      	add	r1, r2
 8006f14:	2208      	movs	r2, #8
 8006f16:	f7fa fb4d 	bl	80015b4 <DefaultTypeSystemManager::AllocateArray#5255>
 8006f1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006f1e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006f22:	2000      	movs	r0, #0
 8006f24:	2100      	movs	r1, #0
 8006f26:	e004      	b.n	8006f32 <BitArray::.ctor#10512+0x2e>
            m_length =          length;

            int fillValue = defaultValue ? unchecked( ((int)0xffffffff) ) : 0;
            for(int i = 0; i < m_array.Length; i++)
            {
                m_array[i] = fillValue;
 8006f28:	68a2      	ldr	r2, [r4, #8]
 8006f2a:	eb02 0281 	add.w	r2, r2, r1, lsl #2

            m_array  = new int[(length + 31) / 32];
            m_length =          length;

            int fillValue = defaultValue ? unchecked( ((int)0xffffffff) ) : 0;
            for(int i = 0; i < m_array.Length; i++)
 8006f2e:	3101      	adds	r1, #1
 8006f30:	60d0      	str	r0, [r2, #12]
 8006f32:	68a2      	ldr	r2, [r4, #8]
 8006f34:	6892      	ldr	r2, [r2, #8]
 8006f36:	4291      	cmp	r1, r2
 8006f38:	dbf6      	blt.n	8006f28 <BitArray::.ctor#10512+0x24>
 8006f3a:	2000      	movs	r0, #0
 8006f3c:	6120      	str	r0, [r4, #16]
 8006f3e:	bd10      	pop	{r4, pc}
 8006f40:	17ffa8a2 	.word	0x17ffa8a2
 8006f44:	ffffea64 	.word	0xffffea64
 8006f48:	e800741c 	.word	0xe800741c

08006f4c <BitArray::Get#10519>:
        **
        ** Exceptions: ArgumentOutOfRangeException if index < 0 or
        **             index >= GetLength().
        =========================================================================*/
        public bool Get( int index )
        {
 8006f4c:	b5b0      	push	{r4, r5, r7, lr}
            if(index < 0 || index >= m_length)
 8006f4e:	f1b1 3fff 	cmp.w	r1, #4294967295
 8006f52:	dd10      	ble.n	8006f76 <BitArray::Get#10519+0x2a>
 8006f54:	68c2      	ldr	r2, [r0, #12]
 8006f56:	4291      	cmp	r1, r2
 8006f58:	da0d      	bge.n	8006f76 <BitArray::Get#10519+0x2a>
#else
                throw new ArgumentOutOfRangeException();
#endif
            }

            return (m_array[index / 32] & (1 << (index % 32))) != 0;
 8006f5a:	6880      	ldr	r0, [r0, #8]
 8006f5c:	f001 021f 	and.w	r2, r1, #31
 8006f60:	1149      	asrs	r1, r1, #5
 8006f62:	2301      	movs	r3, #1
 8006f64:	fa03 f202 	lsl.w	r2, r3, r2
 8006f68:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8006f6c:	68c0      	ldr	r0, [r0, #12]
 8006f6e:	4010      	ands	r0, r2
 8006f70:	bf18      	it	ne
 8006f72:	2001      	movne	r0, #1
 8006f74:	bdb0      	pop	{r4, r5, r7, pc}
 8006f76:	4808      	ldr	r0, [pc, #32]	; (8006f98 <BitArray::Get#10519+0x4c>)
            if(index < 0 || index >= m_length)
            {
#if EXCEPTION_STRINGS
                throw new ArgumentOutOfRangeException( "index", Environment.GetResourceString( "ArgumentOutOfRange_Index" ) );
#else
                throw new ArgumentOutOfRangeException();
 8006f78:	4908      	ldr	r1, [pc, #32]	; (8006f9c <BitArray::Get#10519+0x50>)
 8006f7a:	4478      	add	r0, pc
 8006f7c:	180c      	adds	r4, r1, r0
 8006f7e:	4908      	ldr	r1, [pc, #32]	; (8006fa0 <BitArray::Get#10519+0x54>)
 8006f80:	4401      	add	r1, r0
 8006f82:	4620      	mov	r0, r4
 8006f84:	f7f9 fccc 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8006f88:	4605      	mov	r5, r0
 8006f8a:	f7fa fb31 	bl	80015f0 <ArgumentOutOfRangeException::.ctor#6367>
 8006f8e:	4620      	mov	r0, r4
 8006f90:	4629      	mov	r1, r5
 8006f92:	f7f9 fcdb 	bl	800094c <TypeSystemManager::Throw#5247>
 8006f96:	46c0      	nop			; (mov r8, r8)
 8006f98:	17ffa836 	.word	0x17ffa836
 8006f9c:	ffffea64 	.word	0xffffea64
 8006fa0:	e8007b9c 	.word	0xe8007b9c

08006fa4 <BitArray::Set#10520>:
        **
        ** Exceptions: ArgumentOutOfRangeException if index < 0 or
        **             index >= GetLength().
        =========================================================================*/
        public void Set( int index, bool value )
        {
 8006fa4:	b5b0      	push	{r4, r5, r7, lr}
            if(index < 0 || index >= m_length)
 8006fa6:	f1b1 3fff 	cmp.w	r1, #4294967295
 8006faa:	dd1a      	ble.n	8006fe2 <BitArray::Set#10520+0x3e>
 8006fac:	68c3      	ldr	r3, [r0, #12]
 8006fae:	4299      	cmp	r1, r3
 8006fb0:	da17      	bge.n	8006fe2 <BitArray::Set#10520+0x3e>
#endif
            }

            if(value)
            {
                m_array[index / 32] |= (1 << (index % 32));
 8006fb2:	f001 031f 	and.w	r3, r1, #31
 8006fb6:	2501      	movs	r5, #1
 8006fb8:	1149      	asrs	r1, r1, #5
#else
                throw new ArgumentOutOfRangeException();
#endif
            }

            if(value)
 8006fba:	f012 0fff 	tst.w	r2, #255	; 0xff
            {
                m_array[index / 32] |= (1 << (index % 32));
 8006fbe:	fa05 f303 	lsl.w	r3, r5, r3
 8006fc2:	6885      	ldr	r5, [r0, #8]
 8006fc4:	f105 050c 	add.w	r5, r5, #12
 8006fc8:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
            }
            else
            {
                m_array[index / 32] &= ~(1 << (index % 32));
 8006fcc:	bf0c      	ite	eq
 8006fce:	ea24 0203 	biceq.w	r2, r4, r3
#endif
            }

            if(value)
            {
                m_array[index / 32] |= (1 << (index % 32));
 8006fd2:	ea44 0203 	orrne.w	r2, r4, r3
 8006fd6:	f845 2021 	str.w	r2, [r5, r1, lsl #2]
            else
            {
                m_array[index / 32] &= ~(1 << (index % 32));
            }

            m_version++;
 8006fda:	6901      	ldr	r1, [r0, #16]
 8006fdc:	3101      	adds	r1, #1
 8006fde:	6101      	str	r1, [r0, #16]
 8006fe0:	bdb0      	pop	{r4, r5, r7, pc}
 8006fe2:	4808      	ldr	r0, [pc, #32]	; (8007004 <BitArray::Set#10520+0x60>)
            if(index < 0 || index >= m_length)
            {
#if EXCEPTION_STRINGS
                throw new ArgumentOutOfRangeException( "index", Environment.GetResourceString( "ArgumentOutOfRange_Index" ) );
#else
                throw new ArgumentOutOfRangeException();
 8006fe4:	4908      	ldr	r1, [pc, #32]	; (8007008 <BitArray::Set#10520+0x64>)
 8006fe6:	4478      	add	r0, pc
 8006fe8:	180c      	adds	r4, r1, r0
 8006fea:	4908      	ldr	r1, [pc, #32]	; (800700c <BitArray::Set#10520+0x68>)
 8006fec:	4401      	add	r1, r0
 8006fee:	4620      	mov	r0, r4
 8006ff0:	f7f9 fc96 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8006ff4:	4605      	mov	r5, r0
 8006ff6:	f7fa fafb 	bl	80015f0 <ArgumentOutOfRangeException::.ctor#6367>
 8006ffa:	4620      	mov	r0, r4
 8006ffc:	4629      	mov	r1, r5
 8006ffe:	f7f9 fca5 	bl	800094c <TypeSystemManager::Throw#5247>
 8007002:	46c0      	nop			; (mov r8, r8)
 8007004:	17ffa7ca 	.word	0x17ffa7ca
 8007008:	ffffea64 	.word	0xffffea64
 800700c:	e8007b9c 	.word	0xe8007b9c

08007010 <ToStringFormatState::MoveToEnd#11171>:
                src++;
            }

            private void MoveToEnd()
            {
                src = format.Length;
 8007010:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8007012:	68c9      	ldr	r1, [r1, #12]
 8007014:	6381      	str	r1, [r0, #56]	; 0x38
 8007016:	4770      	bx	lr

08007018 <AssertionViolationException::.ctor#11948>:
    {
        //
        // Constructor Methods
        //

        private AssertionViolationException( string reason ) : base( reason )
 8007018:	b580      	push	{r7, lr}
 800701a:	f7fe f907 	bl	800522c <Exception::.ctor#7330>
 800701e:	bd80      	pop	{r7, pc}

08007020 <AssertionViolationException::Create#11949>:
        {
        }

        public static AssertionViolationException Create(        string   format ,
                                                          params object[] args   )
        {
 8007020:	b5b0      	push	{r4, r5, r7, lr}
 8007022:	f7fa fb8d 	bl	8001740 <String::Format#2743>
 8007026:	4907      	ldr	r1, [pc, #28]	; (8007044 <AssertionViolationException::Create#11949+0x24>)
 8007028:	4604      	mov	r4, r0
            return new AssertionViolationException( String.Format( format, args ) );
 800702a:	4807      	ldr	r0, [pc, #28]	; (8007048 <AssertionViolationException::Create#11949+0x28>)
 800702c:	4a07      	ldr	r2, [pc, #28]	; (800704c <AssertionViolationException::Create#11949+0x2c>)
 800702e:	4479      	add	r1, pc
 8007030:	4408      	add	r0, r1
 8007032:	4411      	add	r1, r2
 8007034:	f7f9 fc74 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8007038:	4621      	mov	r1, r4
 800703a:	4605      	mov	r5, r0
 800703c:	f7ff ffec 	bl	8007018 <AssertionViolationException::.ctor#11948>
 8007040:	4628      	mov	r0, r5
 8007042:	bdb0      	pop	{r4, r5, r7, pc}
 8007044:	17ffa782 	.word	0x17ffa782
 8007048:	ffffea64 	.word	0xffffea64
 800704c:	e800a5fc 	.word	0xe800a5fc

08007050 <ArrayUtility::AppendToNotNullArray#38446>:
            }
        }

        public static T[] AppendToNotNullArray<T>( T[] array   ,
                                                   T   element )
        {
 8007050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007052:	b081      	sub	sp, #4
 8007054:	4606      	mov	r6, r0
 8007056:	460c      	mov	r4, r1
 8007058:	490b      	ldr	r1, [pc, #44]	; (8007088 <ArrayUtility::AppendToNotNullArray#38446+0x38>)
            int len = array.Length;
            T[] res = new T[len+1];
 800705a:	480c      	ldr	r0, [pc, #48]	; (800708c <ArrayUtility::AppendToNotNullArray#38446+0x3c>)
 800705c:	4a0c      	ldr	r2, [pc, #48]	; (8007090 <ArrayUtility::AppendToNotNullArray#38446+0x40>)
 800705e:	68b5      	ldr	r5, [r6, #8]
 8007060:	4479      	add	r1, pc
 8007062:	4408      	add	r0, r1
 8007064:	4411      	add	r1, r2
 8007066:	1c6a      	adds	r2, r5, #1
 8007068:	f7fa faa4 	bl	80015b4 <DefaultTypeSystemManager::AllocateArray#5255>
 800706c:	4607      	mov	r7, r0

            if(len > 0)
 800706e:	2d01      	cmp	r5, #1
 8007070:	db04      	blt.n	800707c <ArrayUtility::AppendToNotNullArray#38446+0x2c>
            {
                Array.Copy( array, res, len );
 8007072:	4630      	mov	r0, r6
 8007074:	4639      	mov	r1, r7
 8007076:	462a      	mov	r2, r5
 8007078:	f7f9 fb80 	bl	800077c <Array::Copy#1563>
            }

            res[len] = element;
 800707c:	eb07 0085 	add.w	r0, r7, r5, lsl #2
 8007080:	60c4      	str	r4, [r0, #12]
 8007082:	4638      	mov	r0, r7
 8007084:	b001      	add	sp, #4
 8007086:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007088:	17ffa750 	.word	0x17ffa750
 800708c:	ffffea64 	.word	0xffffea64
 8007090:	e800a68c 	.word	0xe800a68c

08007094 <ArrayUtility::ArrayEquals#34689>:
            return true;
        }

        public static bool ArrayEquals<T>( T[] s ,
                                           T[] d )
        {
 8007094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007098:	b083      	sub	sp, #12
 800709a:	b108      	cbz	r0, 80070a0 <ArrayUtility::ArrayEquals#34689+0xc>
 800709c:	6882      	ldr	r2, [r0, #8]
 800709e:	e000      	b.n	80070a2 <ArrayUtility::ArrayEquals#34689+0xe>
 80070a0:	2200      	movs	r2, #0
 80070a2:	9200      	str	r2, [sp, #0]
 80070a4:	b109      	cbz	r1, 80070aa <ArrayUtility::ArrayEquals#34689+0x16>
 80070a6:	688a      	ldr	r2, [r1, #8]
 80070a8:	e000      	b.n	80070ac <ArrayUtility::ArrayEquals#34689+0x18>
 80070aa:	2200      	movs	r2, #0
            int sLen = s != null ? s.Length : 0;
            int dLen = d != null ? d.Length : 0;

            if(sLen == dLen)
 80070ac:	9b00      	ldr	r3, [sp, #0]
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d130      	bne.n	8007114 <ArrayUtility::ArrayEquals#34689+0x80>
 80070b2:	f101 040c 	add.w	r4, r1, #12
 80070b6:	491b      	ldr	r1, [pc, #108]	; (8007124 <ArrayUtility::ArrayEquals#34689+0x90>)
            {
                for(int i = 0; i < sLen; i++)
                {
                    if(Object.Equals( s[i], d[i] ) == false)
 80070b8:	4a1b      	ldr	r2, [pc, #108]	; (8007128 <ArrayUtility::ArrayEquals#34689+0x94>)
 80070ba:	300c      	adds	r0, #12
 80070bc:	f04f 37ff 	mov.w	r7, #4294967295
 80070c0:	4479      	add	r1, pc
 80070c2:	eb02 0a01 	add.w	sl, r2, r1
 80070c6:	4a19      	ldr	r2, [pc, #100]	; (800712c <ArrayUtility::ArrayEquals#34689+0x98>)
 80070c8:	eb02 0b01 	add.w	fp, r2, r1
            int sLen = s != null ? s.Length : 0;
            int dLen = d != null ? d.Length : 0;

            if(sLen == dLen)
            {
                for(int i = 0; i < sLen; i++)
 80070cc:	9900      	ldr	r1, [sp, #0]
 80070ce:	3701      	adds	r7, #1
 80070d0:	428f      	cmp	r7, r1
 80070d2:	da23      	bge.n	800711c <ArrayUtility::ArrayEquals#34689+0x88>
 80070d4:	f104 0108 	add.w	r1, r4, #8
 80070d8:	9102      	str	r1, [sp, #8]
 80070da:	f100 0108 	add.w	r1, r0, #8
                {
                    if(Object.Equals( s[i], d[i] ) == false)
 80070de:	9101      	str	r1, [sp, #4]
 80070e0:	e9d0 8900 	ldrd	r8, r9, [r0]
 80070e4:	4650      	mov	r0, sl
 80070e6:	4659      	mov	r1, fp
 80070e8:	f7f9 fc1a 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 80070ec:	4606      	mov	r6, r0
 80070ee:	4650      	mov	r0, sl
 80070f0:	4659      	mov	r1, fp
 80070f2:	e9c6 8902 	strd	r8, r9, [r6, #8]
 80070f6:	e9d4 5400 	ldrd	r5, r4, [r4]
 80070fa:	f7f9 fc11 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 80070fe:	4601      	mov	r1, r0
 8007100:	4630      	mov	r0, r6
 8007102:	e9c1 5402 	strd	r5, r4, [r1, #8]
 8007106:	f7fa f8f5 	bl	80012f4 <Object::Equals#2397>
 800710a:	f010 0fff 	tst.w	r0, #255	; 0xff
 800710e:	e9dd 0401 	ldrd	r0, r4, [sp, #4]
 8007112:	d1db      	bne.n	80070cc <ArrayUtility::ArrayEquals#34689+0x38>
 8007114:	2000      	movs	r0, #0
 8007116:	b003      	add	sp, #12
 8007118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800711c:	2001      	movs	r0, #1
 800711e:	b003      	add	sp, #12
 8007120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007124:	17ffa6f0 	.word	0x17ffa6f0
 8007128:	ffffea64 	.word	0xffffea64
 800712c:	e800a71c 	.word	0xe800a71c

08007130 <Dimension::Equals#51487>:
            [Inline]
            [DisableNullChecks( ApplyRecursively = true )]
            public override void Prologue( string typeFullName,
                                           string methodFullName,
                                           TS.MethodRepresentation.BuildTimeAttributes attribs )
            {
 8007130:	b510      	push	{r4, lr}
 8007132:	4604      	mov	r4, r0
 8007134:	480a      	ldr	r0, [pc, #40]	; (8007160 <Dimension::Equals#51487+0x30>)
 8007136:	4a0b      	ldr	r2, [pc, #44]	; (8007164 <Dimension::Equals#51487+0x34>)
 8007138:	4478      	add	r0, pc
 800713a:	4402      	add	r2, r0
 800713c:	4608      	mov	r0, r1
 800713e:	4611      	mov	r1, r2
 8007140:	f7f9 fce4 	bl	8000b0c <TypeSystemManager::CastToSealedTypeNoThrow#5244>
 8007144:	b150      	cbz	r0, 800715c <Dimension::Equals#51487+0x2c>
 8007146:	6801      	ldr	r1, [r0, #0]
 8007148:	6822      	ldr	r2, [r4, #0]
 800714a:	428a      	cmp	r2, r1
 800714c:	d106      	bne.n	800715c <Dimension::Equals#51487+0x2c>
 800714e:	6841      	ldr	r1, [r0, #4]
 8007150:	6862      	ldr	r2, [r4, #4]
 8007152:	2000      	movs	r0, #0
 8007154:	428a      	cmp	r2, r1
 8007156:	bf08      	it	eq
 8007158:	2001      	moveq	r0, #1
 800715a:	bd10      	pop	{r4, pc}
 800715c:	2000      	movs	r0, #0
 800715e:	bd10      	pop	{r4, pc}
 8007160:	17ffa678 	.word	0x17ffa678
 8007164:	e800b08c 	.word	0xe800b08c

08007168 <BaseRepresentation::EqualsThroughEquivalence#13874>:
                                                       EquivalenceSet set );

        public static bool EqualsThroughEquivalence( BaseRepresentation left  ,
                                                     BaseRepresentation right ,
                                                     EquivalenceSet     set   )
        {
 8007168:	b580      	push	{r7, lr}
 800716a:	4603      	mov	r3, r0
            if(Object.ReferenceEquals( left, right ))
 800716c:	428b      	cmp	r3, r1
 800716e:	bf04      	itt	eq
 8007170:	2001      	moveq	r0, #1
 8007172:	bd80      	popeq	{r7, pc}
            {
                return true;
            }

            if(left != null && right != null)
 8007174:	2b00      	cmp	r3, #0
 8007176:	f04f 0000 	mov.w	r0, #0
 800717a:	bf18      	it	ne
 800717c:	2900      	cmpne	r1, #0
 800717e:	d005      	beq.n	800718c <BaseRepresentation::EqualsThroughEquivalence#13874+0x24>
 8007180:	6858      	ldr	r0, [r3, #4]
            {
                return left.EqualsThroughEquivalence( right, set );
 8007182:	69c0      	ldr	r0, [r0, #28]
 8007184:	f8d0 c018 	ldr.w	ip, [r0, #24]
 8007188:	4618      	mov	r0, r3
 800718a:	47e0      	blx	ip
 800718c:	bd80      	pop	{r7, pc}

0800718e <BaseRepresentation::ArrayEqualsThroughEquivalence#34569>:
        public static bool ArrayEqualsThroughEquivalence<T>( T[]            s      ,
                                                             T[]            d      ,
                                                             int            offset ,
                                                             int            count  ,
                                                             EquivalenceSet set    ) where T : BaseRepresentation
        {
 800718e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007190:	b081      	sub	sp, #4
 8007192:	4614      	mov	r4, r2
 8007194:	b108      	cbz	r0, 800719a <BaseRepresentation::ArrayEqualsThroughEquivalence#34569+0xc>
 8007196:	6885      	ldr	r5, [r0, #8]
 8007198:	e000      	b.n	800719c <BaseRepresentation::ArrayEqualsThroughEquivalence#34569+0xe>
 800719a:	2500      	movs	r5, #0
 800719c:	b109      	cbz	r1, 80071a2 <BaseRepresentation::ArrayEqualsThroughEquivalence#34569+0x14>
 800719e:	688a      	ldr	r2, [r1, #8]
 80071a0:	e000      	b.n	80071a4 <BaseRepresentation::ArrayEqualsThroughEquivalence#34569+0x16>
 80071a2:	2200      	movs	r2, #0
            int sLen = s != null ? s.Length : 0;
            int dLen = d != null ? d.Length : 0;

            if(count < 0)
            {
                if(sLen != dLen)
 80071a4:	4295      	cmp	r5, r2
 80071a6:	d111      	bne.n	80071cc <BaseRepresentation::ArrayEqualsThroughEquivalence#34569+0x3e>
                {
                    return false;
                }
            }

            while(count > 0)
 80071a8:	f100 060c 	add.w	r6, r0, #12
 80071ac:	f101 070c 	add.w	r7, r1, #12
 80071b0:	e002      	b.n	80071b8 <BaseRepresentation::ArrayEqualsThroughEquivalence#34569+0x2a>
                {
                    return false;
                }

                offset++;
                count--;
 80071b2:	3604      	adds	r6, #4
 80071b4:	3704      	adds	r7, #4
 80071b6:	3d01      	subs	r5, #1
                {
                    return false;
                }
            }

            while(count > 0)
 80071b8:	2d01      	cmp	r5, #1
 80071ba:	db0a      	blt.n	80071d2 <BaseRepresentation::ArrayEqualsThroughEquivalence#34569+0x44>
            {
                if(EqualsThroughEquivalence( s[offset], d[offset], set ) == false)
 80071bc:	6839      	ldr	r1, [r7, #0]
 80071be:	6830      	ldr	r0, [r6, #0]
 80071c0:	4622      	mov	r2, r4
 80071c2:	f7ff ffd1 	bl	8007168 <BaseRepresentation::EqualsThroughEquivalence#13874>
 80071c6:	f010 0fff 	tst.w	r0, #255	; 0xff
 80071ca:	d1f2      	bne.n	80071b2 <BaseRepresentation::ArrayEqualsThroughEquivalence#34569+0x24>
 80071cc:	2000      	movs	r0, #0
 80071ce:	b001      	add	sp, #4
 80071d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071d2:	2001      	movs	r0, #1
 80071d4:	b001      	add	sp, #4
 80071d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080071d8 <CodeMap::ResolveAddressToCodeMap#13911>:

        [NoInline]
        [DisableBoundsChecks]
        public static CodeMap ResolveAddressToCodeMap( UIntPtr                address ,
                                                       CodeMap.ReverseIndex[] table   )
        {
 80071d8:	b510      	push	{r4, lr}
 80071da:	b1c9      	cbz	r1, 8007210 <CodeMap::ResolveAddressToCodeMap#13911+0x38>
            if(table != null)
            {
                int low  = 0;
 80071dc:	688a      	ldr	r2, [r1, #8]
 80071de:	f04f 0c00 	mov.w	ip, #0
                int high = table.Length - 2; // The last item is sentinel, so we don't need to check "mid+1 < length".
 80071e2:	f1a2 0e02 	sub.w	lr, r2, #2
 80071e6:	e001      	b.n	80071ec <CodeMap::ResolveAddressToCodeMap#13911+0x14>
                {
                    int mid = (high + low) / 2;

                    if(AddressMath.IsLessThan( address, table[mid].Address ))
                    {
                        high = mid - 1;
 80071e8:	f1a3 0e01 	sub.w	lr, r3, #1
            if(table != null)
            {
                int low  = 0;
                int high = table.Length - 2; // The last item is sentinel, so we don't need to check "mid+1 < length".

                while(low <= high)
 80071ec:	45f4      	cmp	ip, lr
 80071ee:	dc0f      	bgt.n	8007210 <CodeMap::ResolveAddressToCodeMap#13911+0x38>
                {
                    int mid = (high + low) / 2;
 80071f0:	eb0e 020c 	add.w	r2, lr, ip
 80071f4:	1053      	asrs	r3, r2, #1

                    if(AddressMath.IsLessThan( address, table[mid].Address ))
 80071f6:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 80071fa:	68d4      	ldr	r4, [r2, #12]
 80071fc:	42a0      	cmp	r0, r4
 80071fe:	d3f3      	bcc.n	80071e8 <CodeMap::ResolveAddressToCodeMap#13911+0x10>
                    {
                        high = mid - 1;
                    }
                    else if(AddressMath.IsGreaterThanOrEqual( address, table[mid+1].Address ))
 8007200:	6954      	ldr	r4, [r2, #20]
 8007202:	42a0      	cmp	r0, r4
                    {
                        low = mid + 1;
                    }
                    else
                    {
                        return table[mid].Code;
 8007204:	bf3c      	itt	cc
 8007206:	6910      	ldrcc	r0, [r2, #16]
 8007208:	bd10      	popcc	{r4, pc}
                    {
                        high = mid - 1;
                    }
                    else if(AddressMath.IsGreaterThanOrEqual( address, table[mid+1].Address ))
                    {
                        low = mid + 1;
 800720a:	f103 0c01 	add.w	ip, r3, #1
 800720e:	e7ed      	b.n	80071ec <CodeMap::ResolveAddressToCodeMap#13911+0x14>
 8007210:	2000      	movs	r0, #0
 8007212:	bd10      	pop	{r4, pc}

08007214 <Range::Match#15299>:
                return AddressMath.IsInRange( address, this.Start, this.End );
            }

            public CodePointer Match( UIntPtr address   ,
                                      VTable  exception )
            {
 8007214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007216:	b081      	sub	sp, #4
 8007218:	4614      	mov	r4, r2
 800721a:	4605      	mov	r5, r0
                if(Contains( address ))
 800721c:	f000 fbb4 	bl	8007988 <Range::Contains#15297>
 8007220:	f010 0fff 	tst.w	r0, #255	; 0xff
 8007224:	d01a      	beq.n	800725c <Range::Match#15299+0x48>
                {
                    Handler[] handlers = this.Handlers;
 8007226:	68ad      	ldr	r5, [r5, #8]
 8007228:	2600      	movs	r6, #0

                    for(int i = 0; i < handlers.Length; i++)
 800722a:	f105 070c 	add.w	r7, r5, #12
 800722e:	e001      	b.n	8007234 <Range::Match#15299+0x20>
 8007230:	3708      	adds	r7, #8
 8007232:	3601      	adds	r6, #1
 8007234:	68a8      	ldr	r0, [r5, #8]
 8007236:	4286      	cmp	r6, r0
 8007238:	da10      	bge.n	800725c <Range::Match#15299+0x48>
                    {
                        VTable filter = handlers[i].Filter;
 800723a:	6838      	ldr	r0, [r7, #0]
 800723c:	b148      	cbz	r0, 8007252 <Range::Match#15299+0x3e>
 800723e:	42a0      	cmp	r0, r4
 8007240:	d101      	bne.n	8007246 <Range::Match#15299+0x32>
 8007242:	2001      	movs	r0, #1
 8007244:	e002      	b.n	800724c <Range::Match#15299+0x38>
 8007246:	4621      	mov	r1, r4
 8007248:	f7fc f82a 	bl	80032a0 <VTable::CanBeAssignedFrom_Slow#3843>

                        if(filter == null || filter.CanBeAssignedFrom( exception ))
 800724c:	f010 0fff 	tst.w	r0, #255	; 0xff
 8007250:	d0ee      	beq.n	8007230 <Range::Match#15299+0x1c>
                        {
                            return handlers[i].HandlerCode;
 8007252:	eb05 00c6 	add.w	r0, r5, r6, lsl #3
 8007256:	6900      	ldr	r0, [r0, #16]
 8007258:	b001      	add	sp, #4
 800725a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800725c:	2000      	movs	r0, #0
 800725e:	b001      	add	sp, #4
 8007260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007262:	46c0      	nop			; (mov r8, r8)

08007264 <AbstractReferenceTypeRepresentation::ToString#14727>:
        //
        // Debug Methods
        //

        public override String ToString()
        {
 8007264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007266:	b081      	sub	sp, #4
 8007268:	4f10      	ldr	r7, [pc, #64]	; (80072ac <AbstractReferenceTypeRepresentation::ToString#14727+0x48>)
 800726a:	4604      	mov	r4, r0
            System.Text.StringBuilder sb = new System.Text.StringBuilder( "AbstractReferenceTypeRepresentation(" );
 800726c:	4810      	ldr	r0, [pc, #64]	; (80072b0 <AbstractReferenceTypeRepresentation::ToString#14727+0x4c>)
 800726e:	4911      	ldr	r1, [pc, #68]	; (80072b4 <AbstractReferenceTypeRepresentation::ToString#14727+0x50>)
 8007270:	447f      	add	r7, pc
 8007272:	4438      	add	r0, r7
 8007274:	4439      	add	r1, r7
 8007276:	f7f9 fb53 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 800727a:	4605      	mov	r5, r0
 800727c:	480e      	ldr	r0, [pc, #56]	; (80072b8 <AbstractReferenceTypeRepresentation::ToString#14727+0x54>)
 800727e:	19c1      	adds	r1, r0, r7
 8007280:	4628      	mov	r0, r5
 8007282:	f7ff fb36 	bl	80068f2 <StringBuilder::.ctor#8788>
 8007286:	6860      	ldr	r0, [r4, #4]

            PrettyToString( sb, true, false );
 8007288:	4629      	mov	r1, r5
 800728a:	2201      	movs	r2, #1
 800728c:	2300      	movs	r3, #0
 800728e:	69c0      	ldr	r0, [r0, #28]
 8007290:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 8007292:	4620      	mov	r0, r4
 8007294:	47b0      	blx	r6

            sb.Append( ")" );
 8007296:	4809      	ldr	r0, [pc, #36]	; (80072bc <AbstractReferenceTypeRepresentation::ToString#14727+0x58>)
 8007298:	19c1      	adds	r1, r0, r7
 800729a:	4628      	mov	r0, r5
 800729c:	f7fe fec5 	bl	800602a <StringBuilder::Append#8806>

            return sb.ToString();
 80072a0:	4628      	mov	r0, r5
 80072a2:	f7fa fa89 	bl	80017b8 <StringBuilder::ToString#8798>
 80072a6:	b001      	add	sp, #4
 80072a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072aa:	46c0      	nop			; (mov r8, r8)
 80072ac:	17ffa540 	.word	0x17ffa540
 80072b0:	ffffea64 	.word	0xffffea64
 80072b4:	e8007c5c 	.word	0xe8007c5c
 80072b8:	e800a7cc 	.word	0xe800a7cc
 80072bc:	e800a74c 	.word	0xe800a74c

080072c0 <TypeRepresentation::get_IsOpenType#15009>:
        }

        public virtual bool IsOpenType
        {
            get
            {
 80072c0:	b580      	push	{r7, lr}
                if(m_genericContext != null)
 80072c2:	6a01      	ldr	r1, [r0, #32]
 80072c4:	2900      	cmp	r1, #0
 80072c6:	bf04      	itt	eq
 80072c8:	2000      	moveq	r0, #0
 80072ca:	bd80      	popeq	{r7, pc}
                {
                    return m_genericContext.IsOpenType;
 80072cc:	6a00      	ldr	r0, [r0, #32]
 80072ce:	f000 fa63 	bl	8007798 <GenericContext::get_IsOpenType#15551>
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <TypeRepresentation::get_IsDelayedType#15010>:
        }

        public virtual bool IsDelayedType
        {
            get
            {
 80072d4:	b580      	push	{r7, lr}
                if(m_genericContext != null)
 80072d6:	6a01      	ldr	r1, [r0, #32]
 80072d8:	2900      	cmp	r1, #0
 80072da:	bf04      	itt	eq
 80072dc:	2000      	moveq	r0, #0
 80072de:	bd80      	popeq	{r7, pc}
                {
                    return m_genericContext.IsDelayedType;
 80072e0:	6a00      	ldr	r0, [r0, #32]
 80072e2:	f000 fa78 	bl	80077d6 <GenericContext::get_IsDelayedType#15552>
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <BoxedValueTypeRepresentation::EqualsThroughEquivalence#14742>:
        // MetaDataEquality Methods
        //

        public override bool EqualsThroughEquivalence( object         obj ,
                                                       EquivalenceSet set )
        {
 80072e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072ea:	b081      	sub	sp, #4
 80072ec:	4605      	mov	r5, r0
 80072ee:	480d      	ldr	r0, [pc, #52]	; (8007324 <BoxedValueTypeRepresentation::EqualsThroughEquivalence#14742+0x3c>)
            if(obj is BoxedValueTypeRepresentation)
 80072f0:	4f0d      	ldr	r7, [pc, #52]	; (8007328 <BoxedValueTypeRepresentation::EqualsThroughEquivalence#14742+0x40>)
 80072f2:	460e      	mov	r6, r1
 80072f4:	4614      	mov	r4, r2
 80072f6:	4478      	add	r0, pc
 80072f8:	1839      	adds	r1, r7, r0
 80072fa:	4630      	mov	r0, r6
 80072fc:	f7f9 fc06 	bl	8000b0c <TypeSystemManager::CastToSealedTypeNoThrow#5244>
 8007300:	2800      	cmp	r0, #0
 8007302:	bf02      	ittt	eq
 8007304:	2000      	moveq	r0, #0
 8007306:	b001      	addeq	sp, #4
 8007308:	bdf0      	popeq	{r4, r5, r6, r7, pc}
 800730a:	4808      	ldr	r0, [pc, #32]	; (800732c <BoxedValueTypeRepresentation::EqualsThroughEquivalence#14742+0x44>)
 800730c:	4478      	add	r0, pc
            {
                BoxedValueTypeRepresentation other = (BoxedValueTypeRepresentation)obj;
 800730e:	1839      	adds	r1, r7, r0
 8007310:	4630      	mov	r0, r6
 8007312:	f7f9 fcf3 	bl	8000cfc <TypeSystemManager::CastToSealedType#5243>

                return EqualsThroughEquivalence( m_valueType, other.m_valueType, set );
 8007316:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8007318:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800731a:	4622      	mov	r2, r4
 800731c:	f7ff ff24 	bl	8007168 <BaseRepresentation::EqualsThroughEquivalence#13874>
 8007320:	b001      	add	sp, #4
 8007322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007324:	17ffa4ba 	.word	0x17ffa4ba
 8007328:	e800a89c 	.word	0xe800a89c
 800732c:	17ffa4a4 	.word	0x17ffa4a4

08007330 <BoxedValueTypeRepresentation::ToString#14755>:
        //
        // Debug Methods
        //

        public override String ToString()
        {
 8007330:	b570      	push	{r4, r5, r6, lr}
 8007332:	4e0f      	ldr	r6, [pc, #60]	; (8007370 <BoxedValueTypeRepresentation::ToString#14755+0x40>)
 8007334:	4604      	mov	r4, r0
            System.Text.StringBuilder sb = new System.Text.StringBuilder( "BoxedValueTypeRepresentation(" );
 8007336:	480f      	ldr	r0, [pc, #60]	; (8007374 <BoxedValueTypeRepresentation::ToString#14755+0x44>)
 8007338:	490f      	ldr	r1, [pc, #60]	; (8007378 <BoxedValueTypeRepresentation::ToString#14755+0x48>)
 800733a:	447e      	add	r6, pc
 800733c:	4430      	add	r0, r6
 800733e:	4431      	add	r1, r6
 8007340:	f7f9 faee 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8007344:	4605      	mov	r5, r0
 8007346:	480d      	ldr	r0, [pc, #52]	; (800737c <BoxedValueTypeRepresentation::ToString#14755+0x4c>)
 8007348:	1981      	adds	r1, r0, r6
 800734a:	4628      	mov	r0, r5
 800734c:	f7ff fad1 	bl	80068f2 <StringBuilder::.ctor#8788>

            PrettyToString( sb, true, false );
 8007350:	4620      	mov	r0, r4
 8007352:	4629      	mov	r1, r5
 8007354:	2201      	movs	r2, #1
 8007356:	2300      	movs	r3, #0
 8007358:	f000 f832 	bl	80073c0 <BoxedValueTypeRepresentation::PrettyToString#14756>

            sb.Append( ")" );
 800735c:	4808      	ldr	r0, [pc, #32]	; (8007380 <BoxedValueTypeRepresentation::ToString#14755+0x50>)
 800735e:	1981      	adds	r1, r0, r6
 8007360:	4628      	mov	r0, r5
 8007362:	f7fe fe62 	bl	800602a <StringBuilder::Append#8806>

            return sb.ToString();
 8007366:	4628      	mov	r0, r5
 8007368:	f7fa fa26 	bl	80017b8 <StringBuilder::ToString#8798>
 800736c:	bd70      	pop	{r4, r5, r6, pc}
 800736e:	46c0      	nop			; (mov r8, r8)
 8007370:	17ffa476 	.word	0x17ffa476
 8007374:	ffffea64 	.word	0xffffea64
 8007378:	e8007c5c 	.word	0xe8007c5c
 800737c:	e800a8cc 	.word	0xe800a8cc
 8007380:	e800a74c 	.word	0xe800a74c

08007384 <BoxedValueTypeRepresentation::Equals#14743>:

            return false;
        }

        public override bool Equals( object obj )
        {
 8007384:	b580      	push	{r7, lr}
            return this.EqualsThroughEquivalence( obj, null );
 8007386:	2200      	movs	r2, #0
 8007388:	f7ff ffae 	bl	80072e8 <BoxedValueTypeRepresentation::EqualsThroughEquivalence#14742>
 800738c:	bd80      	pop	{r7, pc}

0800738e <BoxedValueTypeRepresentation::GetHashCode#14744>:
        }

        public override int GetHashCode()
        {
 800738e:	b580      	push	{r7, lr}
            return m_valueType.GetHashCode();
 8007390:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8007392:	6841      	ldr	r1, [r0, #4]
 8007394:	69c9      	ldr	r1, [r1, #28]
 8007396:	6949      	ldr	r1, [r1, #20]
 8007398:	4788      	blx	r1
 800739a:	bd80      	pop	{r7, pc}

0800739c <BoxedValueTypeRepresentation::get_ContainedType#14749>:

        public override TypeRepresentation ContainedType
        {
            get
            {
                return m_valueType;
 800739c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800739e:	4770      	bx	lr

080073a0 <BoxedValueTypeRepresentation::get_UnderlyingType#14750>:

        public override TypeRepresentation UnderlyingType
        {
            get
            {
                return m_valueType;
 80073a0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80073a2:	4770      	bx	lr

080073a4 <BoxedValueTypeRepresentation::get_IsOpenType#14751>:
        }

        public override bool IsOpenType
        {
            get
            {
 80073a4:	b580      	push	{r7, lr}
                return m_valueType.IsOpenType;
 80073a6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80073a8:	6841      	ldr	r1, [r0, #4]
 80073aa:	69c9      	ldr	r1, [r1, #28]
 80073ac:	6a49      	ldr	r1, [r1, #36]	; 0x24
 80073ae:	4788      	blx	r1
 80073b0:	bd80      	pop	{r7, pc}

080073b2 <BoxedValueTypeRepresentation::get_IsDelayedType#14752>:
        }

        public override bool IsDelayedType
        {
            get
            {
 80073b2:	b580      	push	{r7, lr}
                return m_valueType.IsDelayedType;
 80073b4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80073b6:	6841      	ldr	r1, [r0, #4]
 80073b8:	69c9      	ldr	r1, [r1, #28]
 80073ba:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80073bc:	4788      	blx	r1
 80073be:	bd80      	pop	{r7, pc}

080073c0 <BoxedValueTypeRepresentation::PrettyToString#14756>:
        }

        internal override void PrettyToString( System.Text.StringBuilder sb                 ,
                                               bool                      fPrefix            ,
                                               bool                      fWithAbbreviations )
        {
 80073c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073c2:	b081      	sub	sp, #4
 80073c4:	4607      	mov	r7, r0
 80073c6:	480a      	ldr	r0, [pc, #40]	; (80073f0 <BoxedValueTypeRepresentation::PrettyToString#14756+0x30>)
 80073c8:	460e      	mov	r6, r1
            sb.Append( "boxed " );
 80073ca:	490a      	ldr	r1, [pc, #40]	; (80073f4 <BoxedValueTypeRepresentation::PrettyToString#14756+0x34>)
 80073cc:	461c      	mov	r4, r3
 80073ce:	4615      	mov	r5, r2
 80073d0:	4478      	add	r0, pc
 80073d2:	4401      	add	r1, r0
 80073d4:	4630      	mov	r0, r6
 80073d6:	f7fe fe28 	bl	800602a <StringBuilder::Append#8806>

            m_valueType.PrettyToString( sb, fPrefix, fWithAbbreviations );
 80073da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80073dc:	462a      	mov	r2, r5
 80073de:	4623      	mov	r3, r4
 80073e0:	6841      	ldr	r1, [r0, #4]
 80073e2:	69c9      	ldr	r1, [r1, #28]
 80073e4:	6acf      	ldr	r7, [r1, #44]	; 0x2c
 80073e6:	4631      	mov	r1, r6
 80073e8:	47b8      	blx	r7
 80073ea:	b001      	add	sp, #4
 80073ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073ee:	46c0      	nop			; (mov r8, r8)
 80073f0:	17ffa3e0 	.word	0x17ffa3e0
 80073f4:	e800a91c 	.word	0xe800a91c

080073f8 <ConcreteReferenceTypeRepresentation::ToString#14759>:
        //
        // Debug Methods
        //

        public override String ToString()
        {
 80073f8:	b570      	push	{r4, r5, r6, lr}
 80073fa:	4e0f      	ldr	r6, [pc, #60]	; (8007438 <ConcreteReferenceTypeRepresentation::ToString#14759+0x40>)
 80073fc:	4604      	mov	r4, r0
            System.Text.StringBuilder sb = new System.Text.StringBuilder( "ConcreteReferenceTypeRepresentation(" );
 80073fe:	480f      	ldr	r0, [pc, #60]	; (800743c <ConcreteReferenceTypeRepresentation::ToString#14759+0x44>)
 8007400:	490f      	ldr	r1, [pc, #60]	; (8007440 <ConcreteReferenceTypeRepresentation::ToString#14759+0x48>)
 8007402:	447e      	add	r6, pc
 8007404:	4430      	add	r0, r6
 8007406:	4431      	add	r1, r6
 8007408:	f7f9 fa8a 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 800740c:	4605      	mov	r5, r0
 800740e:	480d      	ldr	r0, [pc, #52]	; (8007444 <ConcreteReferenceTypeRepresentation::ToString#14759+0x4c>)
 8007410:	1981      	adds	r1, r0, r6
 8007412:	4628      	mov	r0, r5
 8007414:	f7ff fa6d 	bl	80068f2 <StringBuilder::.ctor#8788>

            PrettyToString( sb, true, false );
 8007418:	4620      	mov	r0, r4
 800741a:	4629      	mov	r1, r5
 800741c:	2201      	movs	r2, #1
 800741e:	2300      	movs	r3, #0
 8007420:	f7fb ffe2 	bl	80033e8 <TypeRepresentation::PrettyToString#15025>

            sb.Append( ")" );
 8007424:	4808      	ldr	r0, [pc, #32]	; (8007448 <ConcreteReferenceTypeRepresentation::ToString#14759+0x50>)
 8007426:	1981      	adds	r1, r0, r6
 8007428:	4628      	mov	r0, r5
 800742a:	f7fe fdfe 	bl	800602a <StringBuilder::Append#8806>

            return sb.ToString();
 800742e:	4628      	mov	r0, r5
 8007430:	f7fa f9c2 	bl	80017b8 <StringBuilder::ToString#8798>
 8007434:	bd70      	pop	{r4, r5, r6, pc}
 8007436:	46c0      	nop			; (mov r8, r8)
 8007438:	17ffa3ae 	.word	0x17ffa3ae
 800743c:	ffffea64 	.word	0xffffea64
 8007440:	e8007c5c 	.word	0xe8007c5c
 8007444:	e800a93c 	.word	0xe800a93c
 8007448:	e800a74c 	.word	0xe800a74c

0800744c <EnumerationTypeRepresentation::get_UnderlyingType#14809>:

        public override TypeRepresentation UnderlyingType
        {
            get
            {
                return m_underlyingType;
 800744c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800744e:	4770      	bx	lr

08007450 <EnumerationTypeRepresentation::ToString#14813>:
        //
        // Debug Methods
        //

        public override String ToString()
        {
 8007450:	b570      	push	{r4, r5, r6, lr}
 8007452:	4e0f      	ldr	r6, [pc, #60]	; (8007490 <EnumerationTypeRepresentation::ToString#14813+0x40>)
 8007454:	4604      	mov	r4, r0
            System.Text.StringBuilder sb = new System.Text.StringBuilder( "EnumerationTypeRepresentation(" );
 8007456:	480f      	ldr	r0, [pc, #60]	; (8007494 <EnumerationTypeRepresentation::ToString#14813+0x44>)
 8007458:	490f      	ldr	r1, [pc, #60]	; (8007498 <EnumerationTypeRepresentation::ToString#14813+0x48>)
 800745a:	447e      	add	r6, pc
 800745c:	4430      	add	r0, r6
 800745e:	4431      	add	r1, r6
 8007460:	f7f9 fa5e 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8007464:	4605      	mov	r5, r0
 8007466:	480d      	ldr	r0, [pc, #52]	; (800749c <EnumerationTypeRepresentation::ToString#14813+0x4c>)
 8007468:	1981      	adds	r1, r0, r6
 800746a:	4628      	mov	r0, r5
 800746c:	f7ff fa41 	bl	80068f2 <StringBuilder::.ctor#8788>

            PrettyToString( sb, true, false );
 8007470:	4620      	mov	r0, r4
 8007472:	4629      	mov	r1, r5
 8007474:	2201      	movs	r2, #1
 8007476:	2300      	movs	r3, #0
 8007478:	f7fb ffb6 	bl	80033e8 <TypeRepresentation::PrettyToString#15025>

            sb.Append( ")" );
 800747c:	4808      	ldr	r0, [pc, #32]	; (80074a0 <EnumerationTypeRepresentation::ToString#14813+0x50>)
 800747e:	1981      	adds	r1, r0, r6
 8007480:	4628      	mov	r0, r5
 8007482:	f7fe fdd2 	bl	800602a <StringBuilder::Append#8806>

            return sb.ToString();
 8007486:	4628      	mov	r0, r5
 8007488:	f7fa f996 	bl	80017b8 <StringBuilder::ToString#8798>
 800748c:	bd70      	pop	{r4, r5, r6, pc}
 800748e:	46c0      	nop			; (mov r8, r8)
 8007490:	17ffa356 	.word	0x17ffa356
 8007494:	ffffea64 	.word	0xffffea64
 8007498:	e8007c5c 	.word	0xe8007c5c
 800749c:	e800a99c 	.word	0xe800a99c
 80074a0:	e800a74c 	.word	0xe800a74c

080074a4 <InterfaceTypeRepresentation::ToString#14819>:
        //
        // Debug Methods
        //

        public override String ToString()
        {
 80074a4:	b570      	push	{r4, r5, r6, lr}
 80074a6:	4e0f      	ldr	r6, [pc, #60]	; (80074e4 <InterfaceTypeRepresentation::ToString#14819+0x40>)
 80074a8:	4604      	mov	r4, r0
            System.Text.StringBuilder sb = new System.Text.StringBuilder( "InterfaceTypeRepresentation(" );
 80074aa:	480f      	ldr	r0, [pc, #60]	; (80074e8 <InterfaceTypeRepresentation::ToString#14819+0x44>)
 80074ac:	490f      	ldr	r1, [pc, #60]	; (80074ec <InterfaceTypeRepresentation::ToString#14819+0x48>)
 80074ae:	447e      	add	r6, pc
 80074b0:	4430      	add	r0, r6
 80074b2:	4431      	add	r1, r6
 80074b4:	f7f9 fa34 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 80074b8:	4605      	mov	r5, r0
 80074ba:	480d      	ldr	r0, [pc, #52]	; (80074f0 <InterfaceTypeRepresentation::ToString#14819+0x4c>)
 80074bc:	1981      	adds	r1, r0, r6
 80074be:	4628      	mov	r0, r5
 80074c0:	f7ff fa17 	bl	80068f2 <StringBuilder::.ctor#8788>

            PrettyToString( sb, true, false );
 80074c4:	4620      	mov	r0, r4
 80074c6:	4629      	mov	r1, r5
 80074c8:	2201      	movs	r2, #1
 80074ca:	2300      	movs	r3, #0
 80074cc:	f7fb ff8c 	bl	80033e8 <TypeRepresentation::PrettyToString#15025>

            sb.Append( ")" );
 80074d0:	4808      	ldr	r0, [pc, #32]	; (80074f4 <InterfaceTypeRepresentation::ToString#14819+0x50>)
 80074d2:	1981      	adds	r1, r0, r6
 80074d4:	4628      	mov	r0, r5
 80074d6:	f7fe fda8 	bl	800602a <StringBuilder::Append#8806>

            return sb.ToString();
 80074da:	4628      	mov	r0, r5
 80074dc:	f7fa f96c 	bl	80017b8 <StringBuilder::ToString#8798>
 80074e0:	bd70      	pop	{r4, r5, r6, pc}
 80074e2:	46c0      	nop			; (mov r8, r8)
 80074e4:	17ffa302 	.word	0x17ffa302
 80074e8:	ffffea64 	.word	0xffffea64
 80074ec:	e8007c5c 	.word	0xe8007c5c
 80074f0:	e800a9ec 	.word	0xe800a9ec
 80074f4:	e800a74c 	.word	0xe800a74c

080074f8 <ManagedPointerTypeRepresentation::ToString#14824>:
        //
        // Debug Methods
        //

        public override String ToString()
        {
 80074f8:	b570      	push	{r4, r5, r6, lr}
 80074fa:	4e0f      	ldr	r6, [pc, #60]	; (8007538 <ManagedPointerTypeRepresentation::ToString#14824+0x40>)
 80074fc:	4604      	mov	r4, r0
            System.Text.StringBuilder sb = new System.Text.StringBuilder( "ManagedPointerTypeRepresentation(" );
 80074fe:	480f      	ldr	r0, [pc, #60]	; (800753c <ManagedPointerTypeRepresentation::ToString#14824+0x44>)
 8007500:	490f      	ldr	r1, [pc, #60]	; (8007540 <ManagedPointerTypeRepresentation::ToString#14824+0x48>)
 8007502:	447e      	add	r6, pc
 8007504:	4430      	add	r0, r6
 8007506:	4431      	add	r1, r6
 8007508:	f7f9 fa0a 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 800750c:	4605      	mov	r5, r0
 800750e:	480d      	ldr	r0, [pc, #52]	; (8007544 <ManagedPointerTypeRepresentation::ToString#14824+0x4c>)
 8007510:	1981      	adds	r1, r0, r6
 8007512:	4628      	mov	r0, r5
 8007514:	f7ff f9ed 	bl	80068f2 <StringBuilder::.ctor#8788>

            PrettyToString( sb, true, false );
 8007518:	4620      	mov	r0, r4
 800751a:	4629      	mov	r1, r5
 800751c:	2201      	movs	r2, #1
 800751e:	2300      	movs	r3, #0
 8007520:	f000 f814 	bl	800754c <ManagedPointerTypeRepresentation::PrettyToString#14825>

            sb.Append( ")" );
 8007524:	4808      	ldr	r0, [pc, #32]	; (8007548 <ManagedPointerTypeRepresentation::ToString#14824+0x50>)
 8007526:	1981      	adds	r1, r0, r6
 8007528:	4628      	mov	r0, r5
 800752a:	f7fe fd7e 	bl	800602a <StringBuilder::Append#8806>

            return sb.ToString();
 800752e:	4628      	mov	r0, r5
 8007530:	f7fa f942 	bl	80017b8 <StringBuilder::ToString#8798>
 8007534:	bd70      	pop	{r4, r5, r6, pc}
 8007536:	46c0      	nop			; (mov r8, r8)
 8007538:	17ffa2ae 	.word	0x17ffa2ae
 800753c:	ffffea64 	.word	0xffffea64
 8007540:	e8007c5c 	.word	0xe8007c5c
 8007544:	e800aa3c 	.word	0xe800aa3c
 8007548:	e800a74c 	.word	0xe800a74c

0800754c <ManagedPointerTypeRepresentation::PrettyToString#14825>:
        }

        internal override void PrettyToString( System.Text.StringBuilder sb                 ,
                                               bool                      fPrefix            ,
                                               bool                      fWithAbbreviations )
        {
 800754c:	b510      	push	{r4, lr}
 800754e:	460c      	mov	r4, r1
            base.PrettyToString( sb, fPrefix, fWithAbbreviations );
 8007550:	f000 f80c 	bl	800756c <PointerTypeRepresentation::PrettyToString#14861>
 8007554:	4803      	ldr	r0, [pc, #12]	; (8007564 <ManagedPointerTypeRepresentation::PrettyToString#14825+0x18>)

            sb.Append( "&" );
 8007556:	4904      	ldr	r1, [pc, #16]	; (8007568 <ManagedPointerTypeRepresentation::PrettyToString#14825+0x1c>)
 8007558:	4478      	add	r0, pc
 800755a:	4401      	add	r1, r0
 800755c:	4620      	mov	r0, r4
 800755e:	f7fe fd64 	bl	800602a <StringBuilder::Append#8806>
 8007562:	bd10      	pop	{r4, pc}
 8007564:	17ffa258 	.word	0x17ffa258
 8007568:	e800aa9c 	.word	0xe800aa9c

0800756c <PointerTypeRepresentation::PrettyToString#14861>:
        //

        internal override void PrettyToString( System.Text.StringBuilder sb                 ,
                                               bool                      fPrefix            ,
                                               bool                      fWithAbbreviations )
        {
 800756c:	b580      	push	{r7, lr}
            m_pointerType.PrettyToString( sb, fPrefix, fWithAbbreviations );
 800756e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8007570:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8007574:	f8dc c01c 	ldr.w	ip, [ip, #28]
 8007578:	f8dc c02c 	ldr.w	ip, [ip, #44]	; 0x2c
 800757c:	47e0      	blx	ip
 800757e:	bd80      	pop	{r7, pc}

08007580 <PointerTypeRepresentation::EqualsThroughEquivalence#14845>:
        // MetaDataEquality Methods
        //

        public override bool EqualsThroughEquivalence( object         obj ,
                                                       EquivalenceSet set )
        {
 8007580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007582:	b081      	sub	sp, #4
 8007584:	4604      	mov	r4, r0
 8007586:	4816      	ldr	r0, [pc, #88]	; (80075e0 <PointerTypeRepresentation::EqualsThroughEquivalence#14845+0x60>)
            if(obj is PointerTypeRepresentation)
 8007588:	4f16      	ldr	r7, [pc, #88]	; (80075e4 <PointerTypeRepresentation::EqualsThroughEquivalence#14845+0x64>)
 800758a:	460e      	mov	r6, r1
 800758c:	4615      	mov	r5, r2
 800758e:	4478      	add	r0, pc
 8007590:	1839      	adds	r1, r7, r0
 8007592:	4630      	mov	r0, r6
 8007594:	f7f9 fd48 	bl	8001028 <TypeSystemManager::CastToTypeNoThrow#5242>
 8007598:	b1f8      	cbz	r0, 80075da <PointerTypeRepresentation::EqualsThroughEquivalence#14845+0x5a>
 800759a:	4813      	ldr	r0, [pc, #76]	; (80075e8 <PointerTypeRepresentation::EqualsThroughEquivalence#14845+0x68>)
 800759c:	4478      	add	r0, pc
            {
                PointerTypeRepresentation other = (PointerTypeRepresentation)obj;
 800759e:	1839      	adds	r1, r7, r0
 80075a0:	4630      	mov	r0, r6
 80075a2:	f7fb ffe7 	bl	8003574 <TypeSystemManager::CastToType#5241>
 80075a6:	4606      	mov	r6, r0

                if(EqualsThroughEquivalence( m_pointerType, other.m_pointerType, set ))
 80075a8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80075aa:	462a      	mov	r2, r5
 80075ac:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 80075ae:	f7ff fddb 	bl	8007168 <BaseRepresentation::EqualsThroughEquivalence#13874>
 80075b2:	f010 0fff 	tst.w	r0, #255	; 0xff
 80075b6:	d010      	beq.n	80075da <PointerTypeRepresentation::EqualsThroughEquivalence#14845+0x5a>
                {
                    if(this.GetType() == other.GetType())
 80075b8:	4620      	mov	r0, r4
 80075ba:	f7f9 fe94 	bl	80012e6 <Object::GetType#3988>
 80075be:	4604      	mov	r4, r0
 80075c0:	4630      	mov	r0, r6
 80075c2:	f7f9 fe90 	bl	80012e6 <Object::GetType#3988>
 80075c6:	4601      	mov	r1, r0
 80075c8:	4620      	mov	r0, r4
 80075ca:	f7ff f94c 	bl	8006866 <Type::op_Equality#7848>
 80075ce:	b2c0      	uxtb	r0, r0
 80075d0:	2800      	cmp	r0, #0
 80075d2:	bf18      	it	ne
 80075d4:	2001      	movne	r0, #1
 80075d6:	b001      	add	sp, #4
 80075d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075da:	2000      	movs	r0, #0
 80075dc:	b001      	add	sp, #4
 80075de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075e0:	17ffa222 	.word	0x17ffa222
 80075e4:	e800abec 	.word	0xe800abec
 80075e8:	17ffa214 	.word	0x17ffa214

080075ec <PointerTypeRepresentation::Equals#14846>:

            return false;
        }

        public override bool Equals( object obj )
        {
 80075ec:	b580      	push	{r7, lr}
 80075ee:	6842      	ldr	r2, [r0, #4]
            return this.EqualsThroughEquivalence( obj, null );
 80075f0:	69d2      	ldr	r2, [r2, #28]
 80075f2:	6993      	ldr	r3, [r2, #24]
 80075f4:	2200      	movs	r2, #0
 80075f6:	4798      	blx	r3
 80075f8:	bd80      	pop	{r7, pc}

080075fa <PointerTypeRepresentation::GetHashCode#14847>:
        }

        public override int GetHashCode()
        {
 80075fa:	b580      	push	{r7, lr}
            return m_pointerType.GetHashCode();
 80075fc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80075fe:	6841      	ldr	r1, [r0, #4]
 8007600:	69c9      	ldr	r1, [r1, #28]
 8007602:	6949      	ldr	r1, [r1, #20]
 8007604:	4788      	blx	r1
 8007606:	bd80      	pop	{r7, pc}

08007608 <PointerTypeRepresentation::get_ContainedType#14853>:

        public override TypeRepresentation ContainedType
        {
            get
            {
                return m_pointerType;
 8007608:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800760a:	4770      	bx	lr

0800760c <PointerTypeRepresentation::get_UnderlyingType#14854>:

        public override TypeRepresentation UnderlyingType
        {
            get
            {
                return m_pointerType;
 800760c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800760e:	4770      	bx	lr

08007610 <PointerTypeRepresentation::get_IsOpenType#14855>:
        }

        public override bool IsOpenType
        {
            get
            {
 8007610:	b580      	push	{r7, lr}
                return m_pointerType.IsOpenType;
 8007612:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8007614:	6841      	ldr	r1, [r0, #4]
 8007616:	69c9      	ldr	r1, [r1, #28]
 8007618:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800761a:	4788      	blx	r1
 800761c:	bd80      	pop	{r7, pc}

0800761e <PointerTypeRepresentation::get_IsDelayedType#14856>:
        }

        public override bool IsDelayedType
        {
            get
            {
 800761e:	b580      	push	{r7, lr}
                return m_pointerType.IsDelayedType;
 8007620:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8007622:	6841      	ldr	r1, [r0, #4]
 8007624:	69c9      	ldr	r1, [r1, #28]
 8007626:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8007628:	4788      	blx	r1
 800762a:	bd80      	pop	{r7, pc}

0800762c <ScalarTypeRepresentation::ToString#14881>:
        //
        // Debug Methods
        //

        public override String ToString()
        {
 800762c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800762e:	b081      	sub	sp, #4
 8007630:	4f10      	ldr	r7, [pc, #64]	; (8007674 <ScalarTypeRepresentation::ToString#14881+0x48>)
 8007632:	4604      	mov	r4, r0
            System.Text.StringBuilder sb = new System.Text.StringBuilder( "ScalarTypeRepresentation(" );
 8007634:	4810      	ldr	r0, [pc, #64]	; (8007678 <ScalarTypeRepresentation::ToString#14881+0x4c>)
 8007636:	4911      	ldr	r1, [pc, #68]	; (800767c <ScalarTypeRepresentation::ToString#14881+0x50>)
 8007638:	447f      	add	r7, pc
 800763a:	4438      	add	r0, r7
 800763c:	4439      	add	r1, r7
 800763e:	f7f9 f96f 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8007642:	4605      	mov	r5, r0
 8007644:	480e      	ldr	r0, [pc, #56]	; (8007680 <ScalarTypeRepresentation::ToString#14881+0x54>)
 8007646:	19c1      	adds	r1, r0, r7
 8007648:	4628      	mov	r0, r5
 800764a:	f7ff f952 	bl	80068f2 <StringBuilder::.ctor#8788>
 800764e:	6860      	ldr	r0, [r4, #4]

            PrettyToString( sb, true, false );
 8007650:	4629      	mov	r1, r5
 8007652:	2201      	movs	r2, #1
 8007654:	2300      	movs	r3, #0
 8007656:	69c0      	ldr	r0, [r0, #28]
 8007658:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 800765a:	4620      	mov	r0, r4
 800765c:	47b0      	blx	r6

            sb.Append( ")" );
 800765e:	4809      	ldr	r0, [pc, #36]	; (8007684 <ScalarTypeRepresentation::ToString#14881+0x58>)
 8007660:	19c1      	adds	r1, r0, r7
 8007662:	4628      	mov	r0, r5
 8007664:	f7fe fce1 	bl	800602a <StringBuilder::Append#8806>

            return sb.ToString();
 8007668:	4628      	mov	r0, r5
 800766a:	f7fa f8a5 	bl	80017b8 <StringBuilder::ToString#8798>
 800766e:	b001      	add	sp, #4
 8007670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007672:	46c0      	nop			; (mov r8, r8)
 8007674:	17ffa178 	.word	0x17ffa178
 8007678:	ffffea64 	.word	0xffffea64
 800767c:	e8007c5c 	.word	0xe8007c5c
 8007680:	e800ac1c 	.word	0xe800ac1c
 8007684:	e800a74c 	.word	0xe800a74c

08007688 <TypeRepresentation::EqualsThroughEquivalence#14909>:
        // MetaDataEquality Methods
        //

        public override bool EqualsThroughEquivalence( object         obj ,
                                                       EquivalenceSet set )
        {
 8007688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800768a:	b081      	sub	sp, #4
 800768c:	4604      	mov	r4, r0
 800768e:	482d      	ldr	r0, [pc, #180]	; (8007744 <TypeRepresentation::EqualsThroughEquivalence#14909+0xbc>)
            if(obj is TypeRepresentation)
 8007690:	4f2d      	ldr	r7, [pc, #180]	; (8007748 <TypeRepresentation::EqualsThroughEquivalence#14909+0xc0>)
 8007692:	460e      	mov	r6, r1
 8007694:	4615      	mov	r5, r2
 8007696:	4478      	add	r0, pc
 8007698:	1839      	adds	r1, r7, r0
 800769a:	4630      	mov	r0, r6
 800769c:	f7f9 fcc4 	bl	8001028 <TypeSystemManager::CastToTypeNoThrow#5242>
 80076a0:	2800      	cmp	r0, #0
 80076a2:	d04b      	beq.n	800773c <TypeRepresentation::EqualsThroughEquivalence#14909+0xb4>
 80076a4:	4829      	ldr	r0, [pc, #164]	; (800774c <TypeRepresentation::EqualsThroughEquivalence#14909+0xc4>)
 80076a6:	4478      	add	r0, pc
            {
                TypeRepresentation other = (TypeRepresentation)obj;
 80076a8:	1839      	adds	r1, r7, r0
 80076aa:	4630      	mov	r0, r6
 80076ac:	f7fb ff62 	bl	8003574 <TypeSystemManager::CastToType#5241>
 80076b0:	4606      	mov	r6, r0

                if(                               m_builtinType          == other.m_builtinType            &&
 80076b2:	7a21      	ldrb	r1, [r4, #8]
 80076b4:	7a30      	ldrb	r0, [r6, #8]
 80076b6:	4281      	cmp	r1, r0
 80076b8:	d140      	bne.n	800773c <TypeRepresentation::EqualsThroughEquivalence#14909+0xb4>
 80076ba:	68f0      	ldr	r0, [r6, #12]
 80076bc:	68e1      	ldr	r1, [r4, #12]
 80076be:	4281      	cmp	r1, r0
 80076c0:	d13c      	bne.n	800773c <TypeRepresentation::EqualsThroughEquivalence#14909+0xb4>
 80076c2:	6930      	ldr	r0, [r6, #16]
 80076c4:	6921      	ldr	r1, [r4, #16]
 80076c6:	4281      	cmp	r1, r0
 80076c8:	d138      	bne.n	800773c <TypeRepresentation::EqualsThroughEquivalence#14909+0xb4>
 80076ca:	6971      	ldr	r1, [r6, #20]
 80076cc:	6960      	ldr	r0, [r4, #20]
 80076ce:	f7f9 ff17 	bl	8001500 <String::Equals#2658>
 80076d2:	f010 0fff 	tst.w	r0, #255	; 0xff
 80076d6:	d031      	beq.n	800773c <TypeRepresentation::EqualsThroughEquivalence#14909+0xb4>
 80076d8:	69b1      	ldr	r1, [r6, #24]
 80076da:	69a0      	ldr	r0, [r4, #24]
 80076dc:	f7f9 ff10 	bl	8001500 <String::Equals#2658>
 80076e0:	f010 0fff 	tst.w	r0, #255	; 0xff
 80076e4:	d02a      	beq.n	800773c <TypeRepresentation::EqualsThroughEquivalence#14909+0xb4>
 80076e6:	69f1      	ldr	r1, [r6, #28]
 80076e8:	69e0      	ldr	r0, [r4, #28]
 80076ea:	462a      	mov	r2, r5
 80076ec:	f7ff fd3c 	bl	8007168 <BaseRepresentation::EqualsThroughEquivalence#13874>
 80076f0:	f010 0fff 	tst.w	r0, #255	; 0xff
 80076f4:	d022      	beq.n	800773c <TypeRepresentation::EqualsThroughEquivalence#14909+0xb4>
 80076f6:	4620      	mov	r0, r4
 80076f8:	f000 f83c 	bl	8007774 <TypeRepresentation::get_GenericParameters#14994>
 80076fc:	4607      	mov	r7, r0
 80076fe:	4630      	mov	r0, r6
 8007700:	f000 f838 	bl	8007774 <TypeRepresentation::get_GenericParameters#14994>
 8007704:	4601      	mov	r1, r0
 8007706:	4638      	mov	r0, r7
 8007708:	462a      	mov	r2, r5
 800770a:	f7ff fd40 	bl	800718e <BaseRepresentation::ArrayEqualsThroughEquivalence#34569>
 800770e:	f010 0fff 	tst.w	r0, #255	; 0xff
 8007712:	d013      	beq.n	800773c <TypeRepresentation::EqualsThroughEquivalence#14909+0xb4>
                                                  m_name                 == other.m_name                   &&
                                                  m_namespace            == other.m_namespace              &&
                        EqualsThroughEquivalence( m_enclosingClass       ,  other.m_enclosingClass , set ) &&
                   ArrayEqualsThroughEquivalence( this.GenericParameters ,  other.GenericParameters, set )  )
                {
                    CHECKS.ASSERT( this.GetType() == other.GetType(), "Found two inconsistent TypeRepresentations" );
 8007714:	4620      	mov	r0, r4
 8007716:	f7f9 fde6 	bl	80012e6 <Object::GetType#3988>
 800771a:	4604      	mov	r4, r0
 800771c:	4630      	mov	r0, r6
 800771e:	f7f9 fde2 	bl	80012e6 <Object::GetType#3988>
 8007722:	4601      	mov	r1, r0
 8007724:	4620      	mov	r0, r4
 8007726:	f7ff f89e 	bl	8006866 <Type::op_Equality#7848>
 800772a:	4909      	ldr	r1, [pc, #36]	; (8007750 <TypeRepresentation::EqualsThroughEquivalence#14909+0xc8>)
 800772c:	4a09      	ldr	r2, [pc, #36]	; (8007754 <TypeRepresentation::EqualsThroughEquivalence#14909+0xcc>)
 800772e:	4479      	add	r1, pc
 8007730:	4411      	add	r1, r2
 8007732:	f7fb fe3b 	bl	80033ac <CHECKS::ASSERT#12162>
 8007736:	2001      	movs	r0, #1
 8007738:	b001      	add	sp, #4
 800773a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800773c:	2000      	movs	r0, #0
 800773e:	b001      	add	sp, #4
 8007740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007742:	46c0      	nop			; (mov r8, r8)
 8007744:	17ffa11a 	.word	0x17ffa11a
 8007748:	e800ad5c 	.word	0xe800ad5c
 800774c:	17ffa10a 	.word	0x17ffa10a
 8007750:	17ffa082 	.word	0x17ffa082
 8007754:	e800ad8c 	.word	0xe800ad8c

08007758 <TypeRepresentation::Equals#14910>:

            return false;
        }

        public override bool Equals( object obj )
        {
 8007758:	b580      	push	{r7, lr}
 800775a:	6842      	ldr	r2, [r0, #4]
            return this.EqualsThroughEquivalence( obj, null );
 800775c:	69d2      	ldr	r2, [r2, #28]
 800775e:	6993      	ldr	r3, [r2, #24]
 8007760:	2200      	movs	r2, #0
 8007762:	4798      	blx	r3
 8007764:	bd80      	pop	{r7, pc}

08007766 <TypeRepresentation::GetHashCode#14911>:
        }

        public override int GetHashCode()
        {
 8007766:	b510      	push	{r4, lr}
            return (int)m_builtinType ^
 8007768:	7a04      	ldrb	r4, [r0, #8]
 800776a:	6940      	ldr	r0, [r0, #20]
 800776c:	f7f9 ff45 	bl	80015fa <String::GetHashCode#2667>
 8007770:	4060      	eors	r0, r4
 8007772:	bd10      	pop	{r4, pc}

08007774 <TypeRepresentation::get_GenericParameters#14994>:

        public TypeRepresentation[] GenericParameters
        {
            get
            {
                if(m_genericContext != null)
 8007774:	6a01      	ldr	r1, [r0, #32]
 8007776:	2900      	cmp	r1, #0
                {
                    return m_genericContext.Parameters;
 8007778:	bf1e      	ittt	ne
 800777a:	6a00      	ldrne	r0, [r0, #32]

            public TypeRepresentation[] Parameters
            {
                get
                {
                    return m_parameters;
 800777c:	6880      	ldrne	r0, [r0, #8]
 800777e:	4770      	bxne	lr
 8007780:	4803      	ldr	r0, [pc, #12]	; (8007790 <TypeRepresentation::get_GenericParameters#14994+0x1c>)
                if(m_genericContext != null)
                {
                    return m_genericContext.Parameters;
                }

                return TypeRepresentation.SharedEmptyArray;
 8007782:	4904      	ldr	r1, [pc, #16]	; (8007794 <TypeRepresentation::get_GenericParameters#14994+0x20>)
 8007784:	4478      	add	r0, pc
 8007786:	4408      	add	r0, r1
 8007788:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
 800778c:	4770      	bx	lr
 800778e:	46c0      	nop			; (mov r8, r8)
 8007790:	17ffa02c 	.word	0x17ffa02c
 8007794:	fffffe3c 	.word	0xfffffe3c

08007798 <GenericContext::get_IsOpenType#15551>:
            }

            public bool IsOpenType
            {
                get
                {
 8007798:	b570      	push	{r4, r5, r6, lr}
                    if(m_parametersDefinition != null)
 800779a:	68c1      	ldr	r1, [r0, #12]
 800779c:	2900      	cmp	r1, #0
 800779e:	bf04      	itt	eq
 80077a0:	2000      	moveq	r0, #0
 80077a2:	bd70      	popeq	{r4, r5, r6, pc}
                    {
                        if(m_parameters.Length == 0)
 80077a4:	6881      	ldr	r1, [r0, #8]
 80077a6:	6889      	ldr	r1, [r1, #8]
 80077a8:	b199      	cbz	r1, 80077d2 <GenericContext::get_IsOpenType#15551+0x3a>
                        {
                            return true;
                        }

                        foreach(TypeRepresentation td in m_parameters)
 80077aa:	6884      	ldr	r4, [r0, #8]
 80077ac:	2600      	movs	r6, #0
 80077ae:	f104 050c 	add.w	r5, r4, #12
 80077b2:	e000      	b.n	80077b6 <GenericContext::get_IsOpenType#15551+0x1e>
                        {
                            if(td.IsOpenType)
                            {
                                return true;
                            }
                        }
 80077b4:	3601      	adds	r6, #1
 80077b6:	68a0      	ldr	r0, [r4, #8]
                        if(m_parameters.Length == 0)
                        {
                            return true;
                        }

                        foreach(TypeRepresentation td in m_parameters)
 80077b8:	4286      	cmp	r6, r0
 80077ba:	bfa4      	itt	ge
 80077bc:	2000      	movge	r0, #0
 80077be:	bd70      	popge	{r4, r5, r6, pc}
 80077c0:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 80077c4:	6841      	ldr	r1, [r0, #4]
                        {
                            if(td.IsOpenType)
 80077c6:	69c9      	ldr	r1, [r1, #28]
 80077c8:	6a49      	ldr	r1, [r1, #36]	; 0x24
 80077ca:	4788      	blx	r1
 80077cc:	f010 0fff 	tst.w	r0, #255	; 0xff
 80077d0:	d0f0      	beq.n	80077b4 <GenericContext::get_IsOpenType#15551+0x1c>
 80077d2:	2001      	movs	r0, #1
 80077d4:	bd70      	pop	{r4, r5, r6, pc}

080077d6 <GenericContext::get_IsDelayedType#15552>:
            }

            public bool IsDelayedType
            {
                get
                {
 80077d6:	b570      	push	{r4, r5, r6, lr}
                    if(m_parameters.Length == 0)
 80077d8:	6881      	ldr	r1, [r0, #8]
 80077da:	6889      	ldr	r1, [r1, #8]
 80077dc:	b199      	cbz	r1, 8007806 <GenericContext::get_IsDelayedType#15552+0x30>
                    {
                        return false;
                    }

                    foreach(TypeRepresentation td in m_parameters)
 80077de:	6884      	ldr	r4, [r0, #8]
 80077e0:	2600      	movs	r6, #0
 80077e2:	f104 050c 	add.w	r5, r4, #12
 80077e6:	e00b      	b.n	8007800 <GenericContext::get_IsDelayedType#15552+0x2a>
 80077e8:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 80077ec:	6841      	ldr	r1, [r0, #4]
                    {
                        if(td.IsDelayedType)
 80077ee:	69c9      	ldr	r1, [r1, #28]
 80077f0:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80077f2:	4788      	blx	r1
 80077f4:	f010 0fff 	tst.w	r0, #255	; 0xff
 80077f8:	bf1c      	itt	ne
 80077fa:	2001      	movne	r0, #1
 80077fc:	bd70      	popne	{r4, r5, r6, pc}
                        {
                            return true;
                        }
                    }
 80077fe:	3601      	adds	r6, #1
 8007800:	68a0      	ldr	r0, [r4, #8]
                    if(m_parameters.Length == 0)
                    {
                        return false;
                    }

                    foreach(TypeRepresentation td in m_parameters)
 8007802:	4286      	cmp	r6, r0
 8007804:	dbf0      	blt.n	80077e8 <GenericContext::get_IsDelayedType#15552+0x12>
 8007806:	2000      	movs	r0, #0
 8007808:	bd70      	pop	{r4, r5, r6, pc}
 800780a:	46c0      	nop			; (mov r8, r8)

0800780c <TypeRepresentation::GetAbbreviation#15024>:
        // Debug Methods
        //

        private string GetAbbreviation()
        {
            switch(m_builtinType)
 800780c:	7a00      	ldrb	r0, [r0, #8]
 800780e:	1e41      	subs	r1, r0, #1
 8007810:	291b      	cmp	r1, #27
 8007812:	d817      	bhi.n	8007844 <TypeRepresentation::GetAbbreviation#15024+0x38>
 8007814:	4827      	ldr	r0, [pc, #156]	; (80078b4 <TypeRepresentation::GetAbbreviation#15024+0xa8>)
 8007816:	4a28      	ldr	r2, [pc, #160]	; (80078b8 <TypeRepresentation::GetAbbreviation#15024+0xac>)
 8007818:	4478      	add	r0, pc
 800781a:	4410      	add	r0, r2
 800781c:	e8df f001 	tbb	[pc, r1]
 8007820:	18140e48 	.word	0x18140e48
 8007824:	2824201c 	.word	0x2824201c
 8007828:	3834302c 	.word	0x3834302c
 800782c:	1212403c 	.word	0x1212403c
 8007830:	12121212 	.word	0x12121212
 8007834:	12121212 	.word	0x12121212
 8007838:	44121212 	.word	0x44121212
 800783c:	4839      	ldr	r0, [pc, #228]	; (8007924 <TypeRepresentation::GetAbbreviation#15024+0x118>)
 800783e:	493a      	ldr	r1, [pc, #232]	; (8007928 <TypeRepresentation::GetAbbreviation#15024+0x11c>)
 8007840:	4478      	add	r0, pc
 8007842:	e034      	b.n	80078ae <TypeRepresentation::GetAbbreviation#15024+0xa2>
 8007844:	2000      	movs	r0, #0
 8007846:	4770      	bx	lr
 8007848:	4834      	ldr	r0, [pc, #208]	; (800791c <TypeRepresentation::GetAbbreviation#15024+0x110>)
 800784a:	4935      	ldr	r1, [pc, #212]	; (8007920 <TypeRepresentation::GetAbbreviation#15024+0x114>)
 800784c:	4478      	add	r0, pc
 800784e:	e02e      	b.n	80078ae <TypeRepresentation::GetAbbreviation#15024+0xa2>
 8007850:	4830      	ldr	r0, [pc, #192]	; (8007914 <TypeRepresentation::GetAbbreviation#15024+0x108>)
 8007852:	4931      	ldr	r1, [pc, #196]	; (8007918 <TypeRepresentation::GetAbbreviation#15024+0x10c>)
 8007854:	4478      	add	r0, pc
 8007856:	e02a      	b.n	80078ae <TypeRepresentation::GetAbbreviation#15024+0xa2>
 8007858:	482c      	ldr	r0, [pc, #176]	; (800790c <TypeRepresentation::GetAbbreviation#15024+0x100>)
 800785a:	492d      	ldr	r1, [pc, #180]	; (8007910 <TypeRepresentation::GetAbbreviation#15024+0x104>)
 800785c:	4478      	add	r0, pc
 800785e:	e026      	b.n	80078ae <TypeRepresentation::GetAbbreviation#15024+0xa2>
 8007860:	4828      	ldr	r0, [pc, #160]	; (8007904 <TypeRepresentation::GetAbbreviation#15024+0xf8>)
 8007862:	4929      	ldr	r1, [pc, #164]	; (8007908 <TypeRepresentation::GetAbbreviation#15024+0xfc>)
 8007864:	4478      	add	r0, pc
 8007866:	e022      	b.n	80078ae <TypeRepresentation::GetAbbreviation#15024+0xa2>
 8007868:	4824      	ldr	r0, [pc, #144]	; (80078fc <TypeRepresentation::GetAbbreviation#15024+0xf0>)
 800786a:	4925      	ldr	r1, [pc, #148]	; (8007900 <TypeRepresentation::GetAbbreviation#15024+0xf4>)
 800786c:	4478      	add	r0, pc
 800786e:	e01e      	b.n	80078ae <TypeRepresentation::GetAbbreviation#15024+0xa2>
 8007870:	4820      	ldr	r0, [pc, #128]	; (80078f4 <TypeRepresentation::GetAbbreviation#15024+0xe8>)
 8007872:	4921      	ldr	r1, [pc, #132]	; (80078f8 <TypeRepresentation::GetAbbreviation#15024+0xec>)
 8007874:	4478      	add	r0, pc
 8007876:	e01a      	b.n	80078ae <TypeRepresentation::GetAbbreviation#15024+0xa2>
 8007878:	481c      	ldr	r0, [pc, #112]	; (80078ec <TypeRepresentation::GetAbbreviation#15024+0xe0>)
 800787a:	491d      	ldr	r1, [pc, #116]	; (80078f0 <TypeRepresentation::GetAbbreviation#15024+0xe4>)
 800787c:	4478      	add	r0, pc
 800787e:	e016      	b.n	80078ae <TypeRepresentation::GetAbbreviation#15024+0xa2>
 8007880:	4818      	ldr	r0, [pc, #96]	; (80078e4 <TypeRepresentation::GetAbbreviation#15024+0xd8>)
 8007882:	4919      	ldr	r1, [pc, #100]	; (80078e8 <TypeRepresentation::GetAbbreviation#15024+0xdc>)
 8007884:	4478      	add	r0, pc
 8007886:	e012      	b.n	80078ae <TypeRepresentation::GetAbbreviation#15024+0xa2>
 8007888:	4814      	ldr	r0, [pc, #80]	; (80078dc <TypeRepresentation::GetAbbreviation#15024+0xd0>)
 800788a:	4915      	ldr	r1, [pc, #84]	; (80078e0 <TypeRepresentation::GetAbbreviation#15024+0xd4>)
 800788c:	4478      	add	r0, pc
 800788e:	e00e      	b.n	80078ae <TypeRepresentation::GetAbbreviation#15024+0xa2>
 8007890:	4810      	ldr	r0, [pc, #64]	; (80078d4 <TypeRepresentation::GetAbbreviation#15024+0xc8>)
 8007892:	4911      	ldr	r1, [pc, #68]	; (80078d8 <TypeRepresentation::GetAbbreviation#15024+0xcc>)
 8007894:	4478      	add	r0, pc
 8007896:	e00a      	b.n	80078ae <TypeRepresentation::GetAbbreviation#15024+0xa2>
 8007898:	480c      	ldr	r0, [pc, #48]	; (80078cc <TypeRepresentation::GetAbbreviation#15024+0xc0>)
 800789a:	490d      	ldr	r1, [pc, #52]	; (80078d0 <TypeRepresentation::GetAbbreviation#15024+0xc4>)
 800789c:	4478      	add	r0, pc
 800789e:	e006      	b.n	80078ae <TypeRepresentation::GetAbbreviation#15024+0xa2>
 80078a0:	4808      	ldr	r0, [pc, #32]	; (80078c4 <TypeRepresentation::GetAbbreviation#15024+0xb8>)
 80078a2:	4909      	ldr	r1, [pc, #36]	; (80078c8 <TypeRepresentation::GetAbbreviation#15024+0xbc>)
 80078a4:	4478      	add	r0, pc
 80078a6:	e002      	b.n	80078ae <TypeRepresentation::GetAbbreviation#15024+0xa2>
 80078a8:	4804      	ldr	r0, [pc, #16]	; (80078bc <TypeRepresentation::GetAbbreviation#15024+0xb0>)
 80078aa:	4905      	ldr	r1, [pc, #20]	; (80078c0 <TypeRepresentation::GetAbbreviation#15024+0xb4>)
 80078ac:	4478      	add	r0, pc
 80078ae:	4408      	add	r0, r1
 80078b0:	4770      	bx	lr
 80078b2:	46c0      	nop			; (mov r8, r8)
 80078b4:	17ff9f98 	.word	0x17ff9f98
 80078b8:	e800adfc 	.word	0xe800adfc
 80078bc:	17ff9f04 	.word	0x17ff9f04
 80078c0:	e800afbc 	.word	0xe800afbc
 80078c4:	17ff9f0c 	.word	0x17ff9f0c
 80078c8:	e800af9c 	.word	0xe800af9c
 80078cc:	17ff9f14 	.word	0x17ff9f14
 80078d0:	e800af7c 	.word	0xe800af7c
 80078d4:	17ff9f1c 	.word	0x17ff9f1c
 80078d8:	e800af5c 	.word	0xe800af5c
 80078dc:	17ff9f24 	.word	0x17ff9f24
 80078e0:	e800af3c 	.word	0xe800af3c
 80078e4:	17ff9f2c 	.word	0x17ff9f2c
 80078e8:	e800af1c 	.word	0xe800af1c
 80078ec:	17ff9f34 	.word	0x17ff9f34
 80078f0:	e800aefc 	.word	0xe800aefc
 80078f4:	17ff9f3c 	.word	0x17ff9f3c
 80078f8:	e800aedc 	.word	0xe800aedc
 80078fc:	17ff9f44 	.word	0x17ff9f44
 8007900:	e800aebc 	.word	0xe800aebc
 8007904:	17ff9f4c 	.word	0x17ff9f4c
 8007908:	e800ae9c 	.word	0xe800ae9c
 800790c:	17ff9f54 	.word	0x17ff9f54
 8007910:	e800ae7c 	.word	0xe800ae7c
 8007914:	17ff9f5c 	.word	0x17ff9f5c
 8007918:	e800ae5c 	.word	0xe800ae5c
 800791c:	17ff9f64 	.word	0x17ff9f64
 8007920:	e800ae3c 	.word	0xe800ae3c
 8007924:	17ff9f70 	.word	0x17ff9f70
 8007928:	e800ae1c 	.word	0xe800ae1c

0800792c <ValueTypeRepresentation::ToString#15041>:
        //
        // Debug Methods
        //

        public override String ToString()
        {
 800792c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800792e:	b081      	sub	sp, #4
 8007930:	4f10      	ldr	r7, [pc, #64]	; (8007974 <ValueTypeRepresentation::ToString#15041+0x48>)
 8007932:	4604      	mov	r4, r0
            System.Text.StringBuilder sb = new System.Text.StringBuilder( "ValueTypeRepresentation(" );
 8007934:	4810      	ldr	r0, [pc, #64]	; (8007978 <ValueTypeRepresentation::ToString#15041+0x4c>)
 8007936:	4911      	ldr	r1, [pc, #68]	; (800797c <ValueTypeRepresentation::ToString#15041+0x50>)
 8007938:	447f      	add	r7, pc
 800793a:	4438      	add	r0, r7
 800793c:	4439      	add	r1, r7
 800793e:	f7f8 ffef 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8007942:	4605      	mov	r5, r0
 8007944:	480e      	ldr	r0, [pc, #56]	; (8007980 <ValueTypeRepresentation::ToString#15041+0x54>)
 8007946:	19c1      	adds	r1, r0, r7
 8007948:	4628      	mov	r0, r5
 800794a:	f7fe ffd2 	bl	80068f2 <StringBuilder::.ctor#8788>
 800794e:	6860      	ldr	r0, [r4, #4]

            PrettyToString( sb, true, false );
 8007950:	4629      	mov	r1, r5
 8007952:	2201      	movs	r2, #1
 8007954:	2300      	movs	r3, #0
 8007956:	69c0      	ldr	r0, [r0, #28]
 8007958:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 800795a:	4620      	mov	r0, r4
 800795c:	47b0      	blx	r6

            sb.Append( ")" );
 800795e:	4809      	ldr	r0, [pc, #36]	; (8007984 <ValueTypeRepresentation::ToString#15041+0x58>)
 8007960:	19c1      	adds	r1, r0, r7
 8007962:	4628      	mov	r0, r5
 8007964:	f7fe fb61 	bl	800602a <StringBuilder::Append#8806>

            return sb.ToString();
 8007968:	4628      	mov	r0, r5
 800796a:	f7f9 ff25 	bl	80017b8 <StringBuilder::ToString#8798>
 800796e:	b001      	add	sp, #4
 8007970:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007972:	46c0      	nop			; (mov r8, r8)
 8007974:	17ff9e78 	.word	0x17ff9e78
 8007978:	ffffea64 	.word	0xffffea64
 800797c:	e8007c5c 	.word	0xe8007c5c
 8007980:	e800affc 	.word	0xe800affc
 8007984:	e800a74c 	.word	0xe800a74c

08007988 <Range::Contains#15297>:
                return false;
            }

            public bool Contains( UIntPtr address )
            {
                return AddressMath.IsInRange( address, this.Start, this.End );
 8007988:	e9d0 2300 	ldrd	r2, r3, [r0]
 800798c:	2000      	movs	r0, #0
 800798e:	4299      	cmp	r1, r3
 8007990:	bf38      	it	cc
 8007992:	2001      	movcc	r0, #1
 8007994:	428a      	cmp	r2, r1
 8007996:	bf88      	it	hi
 8007998:	2000      	movhi	r0, #0
 800799a:	4770      	bx	lr

0800799c <ValueChangedHandler::Invoke#16523>:
 800799c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079a0:	460d      	mov	r5, r1
 80079a2:	6901      	ldr	r1, [r0, #16]
 80079a4:	4690      	mov	r8, r2
 80079a6:	b181      	cbz	r1, 80079ca <ValueChangedHandler::Invoke#16523+0x2e>
 80079a8:	688f      	ldr	r7, [r1, #8]
 80079aa:	f101 060c 	add.w	r6, r1, #12
 80079ae:	2400      	movs	r4, #0
 80079b0:	42bc      	cmp	r4, r7
 80079b2:	bfa8      	it	ge
 80079b4:	e8bd 81f0 	ldmiage.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079b8:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 80079bc:	4642      	mov	r2, r8
 80079be:	e9d1 0302 	ldrd	r0, r3, [r1, #8]
 80079c2:	4629      	mov	r1, r5
 80079c4:	4798      	blx	r3
 80079c6:	3401      	adds	r4, #1
 80079c8:	e7f2      	b.n	80079b0 <ValueChangedHandler::Invoke#16523+0x14>
 80079ca:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
 80079ce:	4642      	mov	r2, r8
 80079d0:	4608      	mov	r0, r1
 80079d2:	4629      	mov	r1, r5
 80079d4:	4798      	blx	r3
 80079d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080079da <GpioPin::set_Direction#16535>:
            get
            {
                return m_pinDirection;
            }
            set
            {
 80079da:	b580      	push	{r7, lr}
 80079dc:	6081      	str	r1, [r0, #8]
                m_pinDirection = value;
                SetPinDirection(value);
 80079de:	f000 f801 	bl	80079e4 <GpioPin::SetPinDirection#17058>
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <GpioPin::SetPinDirection#17058>:
                tmp_gpio_mode(m_gpio, pinMode);
            }
        }

        protected override void SetPinDirection(Llilum.PinDirection pinDirection)
        {
 80079e4:	b580      	push	{r7, lr}
            unsafe
            {
                tmp_gpio_dir(m_gpio, pinDirection);
 80079e6:	69c0      	ldr	r0, [r0, #28]
 80079e8:	f00c fa6e 	bl	8013ec8 <tmp_gpio_dir>
 80079ec:	bd80      	pop	{r7, pc}

080079ee <GpioPin::set_Mode#16537>:
            get
            {
                return m_pinMode;
            }
            set
            {
 80079ee:	b580      	push	{r7, lr}
 80079f0:	60c1      	str	r1, [r0, #12]
                m_pinMode = value;
                SetPinMode(value);
 80079f2:	f000 f801 	bl	80079f8 <GpioPin::SetPinMode#17057>
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <GpioPin::SetPinMode#17057>:
                tmp_gpio_write(m_gpio, value);
            }
        }

        protected override void SetPinMode(Llilum.PinMode pinMode)
        {
 80079f8:	b580      	push	{r7, lr}
            unsafe
            {
                tmp_gpio_mode(m_gpio, pinMode);
 80079fa:	69c0      	ldr	r0, [r0, #28]
 80079fc:	f00c fa72 	bl	8013ee4 <tmp_gpio_mode>
 8007a00:	bd80      	pop	{r7, pc}

08007a02 <GpioPin::set_ActivePinEdge#16539>:
            get
            {
                return m_activePinEdge;
            }
            set
            {
 8007a02:	b580      	push	{r7, lr}
 8007a04:	2101      	movs	r1, #1
 8007a06:	6101      	str	r1, [r0, #16]
 8007a08:	2101      	movs	r1, #1
                m_activePinEdge = value;
                SetActivePinEdge(value);
 8007a0a:	f000 f801 	bl	8007a10 <GpioPin::SetActivePinEdge#17059>
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <GpioPin::SetActivePinEdge#17059>:
                tmp_gpio_dir(m_gpio, pinDirection);
            }
        }

        protected override void SetActivePinEdge(Llilum.PinEdge pinEdge)
        {
 8007a10:	b5b0      	push	{r4, r5, r7, lr}
 8007a12:	4604      	mov	r4, r0
            unsafe
            {
                switch ( pinEdge )
 8007a14:	1e48      	subs	r0, r1, #1
 8007a16:	2802      	cmp	r0, #2
 8007a18:	d005      	beq.n	8007a26 <GpioPin::SetActivePinEdge#17059+0x16>
 8007a1a:	2801      	cmp	r0, #1
 8007a1c:	d10e      	bne.n	8007a3c <GpioPin::SetActivePinEdge#17059+0x2c>
                    case Llilum.PinEdge.BothEdges:
                        tmp_gpio_irq_set(m_gpioIrq, (int)MbedGpioIrq.IRQ_RISE, 1);
                        tmp_gpio_irq_set(m_gpioIrq, (int)MbedGpioIrq.IRQ_FALL, 1);
                        break;
                    case Llilum.PinEdge.FallingEdge:
                        tmp_gpio_irq_set(m_gpioIrq, (int)MbedGpioIrq.IRQ_RISE, 0);
 8007a1e:	6a20      	ldr	r0, [r4, #32]
 8007a20:	2101      	movs	r1, #1
 8007a22:	2200      	movs	r2, #0
 8007a24:	e002      	b.n	8007a2c <GpioPin::SetActivePinEdge#17059+0x1c>
            unsafe
            {
                switch ( pinEdge )
                {
                    case Llilum.PinEdge.BothEdges:
                        tmp_gpio_irq_set(m_gpioIrq, (int)MbedGpioIrq.IRQ_RISE, 1);
 8007a26:	6a20      	ldr	r0, [r4, #32]
 8007a28:	2101      	movs	r1, #1
 8007a2a:	2201      	movs	r2, #1
                        tmp_gpio_irq_set(m_gpioIrq, (int)MbedGpioIrq.IRQ_FALL, 1);
                        break;
                    case Llilum.PinEdge.FallingEdge:
                        tmp_gpio_irq_set(m_gpioIrq, (int)MbedGpioIrq.IRQ_RISE, 0);
 8007a2c:	f00c fa8a 	bl	8013f44 <tmp_gpio_irq_set>
                        tmp_gpio_irq_set(m_gpioIrq, (int)MbedGpioIrq.IRQ_FALL, 1);
 8007a30:	6a20      	ldr	r0, [r4, #32]
 8007a32:	2102      	movs	r1, #2
                    case Llilum.PinEdge.BothEdges:
                        tmp_gpio_irq_set(m_gpioIrq, (int)MbedGpioIrq.IRQ_RISE, 1);
                        tmp_gpio_irq_set(m_gpioIrq, (int)MbedGpioIrq.IRQ_FALL, 1);
                        break;
                    case Llilum.PinEdge.FallingEdge:
                        tmp_gpio_irq_set(m_gpioIrq, (int)MbedGpioIrq.IRQ_RISE, 0);
 8007a34:	2201      	movs	r2, #1
                        tmp_gpio_irq_set(m_gpioIrq, (int)MbedGpioIrq.IRQ_FALL, 1);
                        break;
                    case Llilum.PinEdge.RisingEdge:
                        tmp_gpio_irq_set(m_gpioIrq, (int)MbedGpioIrq.IRQ_RISE, 1);
                        tmp_gpio_irq_set(m_gpioIrq, (int)MbedGpioIrq.IRQ_FALL, 0);
 8007a36:	f00c fa85 	bl	8013f44 <tmp_gpio_irq_set>
 8007a3a:	bdb0      	pop	{r4, r5, r7, pc}
 8007a3c:	b950      	cbnz	r0, 8007a54 <GpioPin::SetActivePinEdge#17059+0x44>
                    case Llilum.PinEdge.FallingEdge:
                        tmp_gpio_irq_set(m_gpioIrq, (int)MbedGpioIrq.IRQ_RISE, 0);
                        tmp_gpio_irq_set(m_gpioIrq, (int)MbedGpioIrq.IRQ_FALL, 1);
                        break;
                    case Llilum.PinEdge.RisingEdge:
                        tmp_gpio_irq_set(m_gpioIrq, (int)MbedGpioIrq.IRQ_RISE, 1);
 8007a3e:	6a20      	ldr	r0, [r4, #32]
 8007a40:	2101      	movs	r1, #1
 8007a42:	2201      	movs	r2, #1
 8007a44:	f00c fa7e 	bl	8013f44 <tmp_gpio_irq_set>
                        tmp_gpio_irq_set(m_gpioIrq, (int)MbedGpioIrq.IRQ_FALL, 0);
 8007a48:	6a20      	ldr	r0, [r4, #32]
 8007a4a:	2102      	movs	r1, #2
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	f00c fa79 	bl	8013f44 <tmp_gpio_irq_set>
 8007a52:	bdb0      	pop	{r4, r5, r7, pc}
 8007a54:	4807      	ldr	r0, [pc, #28]	; (8007a74 <GpioPin::SetActivePinEdge#17059+0x64>)
                        break;
                    default:
                        throw new NotSupportedException();
 8007a56:	4908      	ldr	r1, [pc, #32]	; (8007a78 <GpioPin::SetActivePinEdge#17059+0x68>)
 8007a58:	4478      	add	r0, pc
 8007a5a:	180c      	adds	r4, r1, r0
 8007a5c:	4907      	ldr	r1, [pc, #28]	; (8007a7c <GpioPin::SetActivePinEdge#17059+0x6c>)
 8007a5e:	4401      	add	r1, r0
 8007a60:	4620      	mov	r0, r4
 8007a62:	f7f8 ff5d 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8007a66:	4605      	mov	r5, r0
 8007a68:	f7f8 ffaa 	bl	80009c0 <NotSupportedException::.ctor#7487>
 8007a6c:	4620      	mov	r0, r4
 8007a6e:	4629      	mov	r1, r5
 8007a70:	f7f8 ff6c 	bl	800094c <TypeSystemManager::Throw#5247>
 8007a74:	17ff9d58 	.word	0x17ff9d58
 8007a78:	ffffea64 	.word	0xffffea64
 8007a7c:	e800764c 	.word	0xe800764c

08007a80 <GpioPin::TryCreateGpioPin#16546>:
        protected abstract void SetActivePinEdge(PinEdge pinEdge);

        public abstract void Write(int value);

        public static GpioPin TryCreateGpioPin(int pinNumber)
        {
 8007a80:	b510      	push	{r4, lr}

            // Set default values
            newPin.Direction = PinDirection.Input;
            newPin.Mode = PinMode.PullNone;

            return newPin;
 8007a82:	f000 f811 	bl	8007aa8 <GpioPin::TryAcquireGpioPin#4232>
 8007a86:	4604      	mov	r4, r0
        public abstract void Write(int value);

        public static GpioPin TryCreateGpioPin(int pinNumber)
        {
            GpioPin newPin = TryAcquireGpioPin(pinNumber);
            if(newPin == null)
 8007a88:	2c00      	cmp	r4, #0
 8007a8a:	bf02      	ittt	eq
 8007a8c:	2400      	moveq	r4, #0
 8007a8e:	4620      	moveq	r0, r4
 8007a90:	bd10      	popeq	{r4, pc}
            {
                return null;
            }

            // Set default values
            newPin.Direction = PinDirection.Input;
 8007a92:	4620      	mov	r0, r4
 8007a94:	2100      	movs	r1, #0
 8007a96:	f7ff ffa0 	bl	80079da <GpioPin::set_Direction#16535>
            newPin.Mode = PinMode.PullNone;
 8007a9a:	4620      	mov	r0, r4
 8007a9c:	2102      	movs	r1, #2
 8007a9e:	f7ff ffa6 	bl	80079ee <GpioPin::set_Mode#16537>
 8007aa2:	4620      	mov	r0, r4
 8007aa4:	bd10      	pop	{r4, pc}
 8007aa6:	46c0      	nop			; (mov r8, r8)

08007aa8 <GpioPin::TryAcquireGpioPin#4232>:

    [ExtendClass(typeof(GpioPin), NoConstructors = true)]
    class GpioPinImpl
    {
        public static GpioPin TryAcquireGpioPin(int pinNumber)
        {
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	4601      	mov	r1, r0
 8007aac:	4803      	ldr	r0, [pc, #12]	; (8007abc <GpioPin::TryAcquireGpioPin#4232+0x14>)
            return GpioProvider.Instance.CreateGpioPin(pinNumber);
 8007aae:	4a04      	ldr	r2, [pc, #16]	; (8007ac0 <GpioPin::TryAcquireGpioPin#4232+0x18>)
 8007ab0:	4478      	add	r0, pc
 8007ab2:	4410      	add	r0, r2
 8007ab4:	f000 f810 	bl	8007ad8 <GpioProvider::CreateGpioPin#17185>
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	46c0      	nop			; (mov r8, r8)
 8007abc:	17ff9d00 	.word	0x17ff9d00
 8007ac0:	ffffeb28 	.word	0xffffeb28

08007ac4 <GpioPin::SendEventInternal#16547>:

            return newPin;
        }

        protected void SendEventInternal(PinEdge pinEdge)
        {
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	460a      	mov	r2, r1
 8007ac8:	4601      	mov	r1, r0
            m_evt?.Invoke(this, pinEdge);
 8007aca:	6948      	ldr	r0, [r1, #20]
 8007acc:	2800      	cmp	r0, #0
 8007ace:	bf18      	it	ne
 8007ad0:	f7ff ff64 	blne	800799c <ValueChangedHandler::Invoke#16523>
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	46c0      	nop			; (mov r8, r8)

08007ad8 <GpioProvider::CreateGpioPin#17185>:
    using Runtime = Microsoft.Zelig.Runtime;

    public abstract class GpioProvider : Runtime.GpioProvider
    {
        public sealed override Framework.GpioPin CreateGpioPin(int pinNumber)
        {
 8007ad8:	b5b0      	push	{r4, r5, r7, lr}
 8007ada:	460c      	mov	r4, r1
 8007adc:	4910      	ldr	r1, [pc, #64]	; (8007b20 <GpioProvider::CreateGpioPin#17185+0x48>)
            if (!Runtime.HardwareProvider.Instance.TryReservePins(pinNumber))
 8007ade:	4d11      	ldr	r5, [pc, #68]	; (8007b24 <GpioProvider::CreateGpioPin#17185+0x4c>)
 8007ae0:	4a11      	ldr	r2, [pc, #68]	; (8007b28 <GpioProvider::CreateGpioPin#17185+0x50>)
 8007ae2:	4479      	add	r1, pc
 8007ae4:	1868      	adds	r0, r5, r1
 8007ae6:	4411      	add	r1, r2
 8007ae8:	2201      	movs	r2, #1
 8007aea:	f7f9 fd63 	bl	80015b4 <DefaultTypeSystemManager::AllocateArray#5255>
 8007aee:	60c4      	str	r4, [r0, #12]
 8007af0:	f7fb ff7c 	bl	80039ec <HardwareProvider::TryReservePins#4542>
 8007af4:	f010 0fff 	tst.w	r0, #255	; 0xff
 8007af8:	bf02      	ittt	eq
 8007afa:	2500      	moveq	r5, #0
 8007afc:	4628      	moveq	r0, r5
 8007afe:	bdb0      	popeq	{r4, r5, r7, pc}
 8007b00:	490a      	ldr	r1, [pc, #40]	; (8007b2c <GpioProvider::CreateGpioPin#17185+0x54>)
            {
                return null;
            }
            return new GpioPin(pinNumber);
 8007b02:	4a0b      	ldr	r2, [pc, #44]	; (8007b30 <GpioProvider::CreateGpioPin#17185+0x58>)
 8007b04:	4479      	add	r1, pc
 8007b06:	1868      	adds	r0, r5, r1
 8007b08:	4411      	add	r1, r2
 8007b0a:	f7f8 ff09 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8007b0e:	4605      	mov	r5, r0
 8007b10:	f7fc f89e 	bl	8003c50 <Tracker::Allocate#5728>
 8007b14:	4628      	mov	r0, r5
 8007b16:	4621      	mov	r1, r4
 8007b18:	f000 fb34 	bl	8008184 <GpioPin::.ctor#17052>
 8007b1c:	4628      	mov	r0, r5
 8007b1e:	bdb0      	pop	{r4, r5, r7, pc}
 8007b20:	17ff9cce 	.word	0x17ff9cce
 8007b24:	ffffea64 	.word	0xffffea64
 8007b28:	e800741c 	.word	0xe800741c
 8007b2c:	17ff9cac 	.word	0x17ff9cac
 8007b30:	e800b69c 	.word	0xe800b69c

08007b34 <DefaultPinProvider::.ctor#16689>:
    internal class DefaultPinProvider : IGpioPinProvider
    {
        private Llilum.GpioPin m_gpioPin;
        private TypedEventHandler<GpioPin, GpioPinValueChangedEventArgs> m_evt;

        internal DefaultPinProvider(int pinNumber)
 8007b34:	b5b0      	push	{r4, r5, r7, lr}
 8007b36:	4604      	mov	r4, r0
            Llilum.GpioPin newPin = Llilum.GpioPin.TryCreateGpioPin(pinNumber);
            if (newPin == null)
            {
                throw new ArgumentException();
            }
            m_gpioPin = newPin;
 8007b38:	4608      	mov	r0, r1
 8007b3a:	f7ff ffa1 	bl	8007a80 <GpioPin::TryCreateGpioPin#16546>
        private TypedEventHandler<GpioPin, GpioPinValueChangedEventArgs> m_evt;

        internal DefaultPinProvider(int pinNumber)
        {
            Llilum.GpioPin newPin = Llilum.GpioPin.TryCreateGpioPin(pinNumber);
            if (newPin == null)
 8007b3e:	2800      	cmp	r0, #0
 8007b40:	bf1c      	itt	ne
 8007b42:	60a0      	strne	r0, [r4, #8]
 8007b44:	bdb0      	popne	{r4, r5, r7, pc}
 8007b46:	4808      	ldr	r0, [pc, #32]	; (8007b68 <DefaultPinProvider::.ctor#16689+0x34>)
            {
                throw new ArgumentException();
 8007b48:	4908      	ldr	r1, [pc, #32]	; (8007b6c <DefaultPinProvider::.ctor#16689+0x38>)
 8007b4a:	4478      	add	r0, pc
 8007b4c:	180c      	adds	r4, r1, r0
 8007b4e:	4908      	ldr	r1, [pc, #32]	; (8007b70 <DefaultPinProvider::.ctor#16689+0x3c>)
 8007b50:	4401      	add	r1, r0
 8007b52:	4620      	mov	r0, r4
 8007b54:	f7f8 fee4 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8007b58:	4605      	mov	r5, r0
 8007b5a:	f7fd fb80 	bl	800525e <ArgumentException::.ctor#6355>
 8007b5e:	4620      	mov	r0, r4
 8007b60:	4629      	mov	r1, r5
 8007b62:	f7f8 fef3 	bl	800094c <TypeSystemManager::Throw#5247>
 8007b66:	46c0      	nop			; (mov r8, r8)
 8007b68:	17ff9c66 	.word	0x17ff9c66
 8007b6c:	ffffea64 	.word	0xffffea64
 8007b70:	e800842c 	.word	0xe800842c

08007b74 <DefaultPinProvider::Dispose#16694>:
                return GpioSharingMode.Exclusive;
            }
        }

        public void Dispose()
        {
 8007b74:	b580      	push	{r7, lr}
            m_gpioPin.Dispose();
 8007b76:	6880      	ldr	r0, [r0, #8]
 8007b78:	f000 f801 	bl	8007b7e <GpioPin::Dispose#17062>
 8007b7c:	bd80      	pop	{r7, pc}

08007b7e <GpioPin::Dispose#17062>:
                tmp_gpio_irq_disable(m_gpioIrq);
            }
        }

        public override void Dispose()
        {
 8007b7e:	b510      	push	{r4, lr}
 8007b80:	4604      	mov	r4, r0
            unsafe
            {
                if (m_gpio != null)
 8007b82:	69e0      	ldr	r0, [r4, #28]
 8007b84:	2800      	cmp	r0, #0
 8007b86:	bf08      	it	eq
 8007b88:	bd10      	popeq	{r4, pc}
                {
                    Dispose(true);
 8007b8a:	4620      	mov	r0, r4
 8007b8c:	f000 fba4 	bl	80082d8 <GpioPin::Dispose#17063>
 8007b90:	2000      	movs	r0, #0
 8007b92:	61e0      	str	r0, [r4, #28]
                    m_gpio = null;
 8007b94:	4620      	mov	r0, r4
 8007b96:	f7fc f88d 	bl	8003cb4 <Tracker::SetFinalizationFlag#5729>
 8007b9a:	bd10      	pop	{r4, pc}

08007b9c <DefaultPinProvider::SetPinDriveMode#16701>:
        {
            return (m_gpioPin.Read() == 0) ? GpioPinValue.Low : GpioPinValue.High;
        }

        public void SetPinDriveMode(GpioDriveMode driveMode)
        {
 8007b9c:	b5b0      	push	{r4, r5, r7, lr}
 8007b9e:	4604      	mov	r4, r0
            switch (driveMode)
 8007ba0:	2903      	cmp	r1, #3
 8007ba2:	d81b      	bhi.n	8007bdc <DefaultPinProvider::SetPinDriveMode#16701+0x40>
 8007ba4:	e8df f001 	tbb	[pc, r1]
 8007ba8:	110e0502 	.word	0x110e0502
            {
                case GpioDriveMode.Input:
                    m_gpioPin.Mode = Llilum.PinMode.PullNone;
 8007bac:	68a0      	ldr	r0, [r4, #8]
 8007bae:	2102      	movs	r1, #2
 8007bb0:	e00d      	b.n	8007bce <DefaultPinProvider::SetPinDriveMode#16701+0x32>
                    m_gpioPin.Direction = Llilum.PinDirection.Input;
                    break;

                case GpioDriveMode.Output:
                    m_gpioPin.Mode = Llilum.PinMode.PullDefault;
 8007bb2:	68a0      	ldr	r0, [r4, #8]
 8007bb4:	2103      	movs	r1, #3
 8007bb6:	f7ff ff1a 	bl	80079ee <GpioPin::set_Mode#16537>
                    m_gpioPin.Direction = Llilum.PinDirection.Output;
 8007bba:	68a0      	ldr	r0, [r4, #8]
 8007bbc:	2101      	movs	r1, #1
 8007bbe:	f7ff ff0c 	bl	80079da <GpioPin::set_Direction#16535>
 8007bc2:	bdb0      	pop	{r4, r5, r7, pc}
                    break;

                case GpioDriveMode.InputPullUp:
                    m_gpioPin.Mode = Llilum.PinMode.PullUp;
 8007bc4:	68a0      	ldr	r0, [r4, #8]
 8007bc6:	2100      	movs	r1, #0
 8007bc8:	e001      	b.n	8007bce <DefaultPinProvider::SetPinDriveMode#16701+0x32>
                    m_gpioPin.Direction = Llilum.PinDirection.Input;
                    break;

                case GpioDriveMode.InputPullDown:
                    m_gpioPin.Mode = Llilum.PinMode.PullDown;
 8007bca:	68a0      	ldr	r0, [r4, #8]
 8007bcc:	2103      	movs	r1, #3
        public void SetPinDriveMode(GpioDriveMode driveMode)
        {
            switch (driveMode)
            {
                case GpioDriveMode.Input:
                    m_gpioPin.Mode = Llilum.PinMode.PullNone;
 8007bce:	f7ff ff0e 	bl	80079ee <GpioPin::set_Mode#16537>
                    m_gpioPin.Direction = Llilum.PinDirection.Input;
 8007bd2:	68a0      	ldr	r0, [r4, #8]
 8007bd4:	2100      	movs	r1, #0
                    break;

                case GpioDriveMode.Output:
                    m_gpioPin.Mode = Llilum.PinMode.PullDefault;
                    m_gpioPin.Direction = Llilum.PinDirection.Output;
 8007bd6:	f7ff ff00 	bl	80079da <GpioPin::set_Direction#16535>
 8007bda:	bdb0      	pop	{r4, r5, r7, pc}
 8007bdc:	4807      	ldr	r0, [pc, #28]	; (8007bfc <DefaultPinProvider::SetPinDriveMode#16701+0x60>)
                case GpioDriveMode.InputPullDown:
                    m_gpioPin.Mode = Llilum.PinMode.PullDown;
                    m_gpioPin.Direction = Llilum.PinDirection.Input;
                    break;
                default:
                    throw new NotSupportedException();
 8007bde:	4908      	ldr	r1, [pc, #32]	; (8007c00 <DefaultPinProvider::SetPinDriveMode#16701+0x64>)
 8007be0:	4478      	add	r0, pc
 8007be2:	180c      	adds	r4, r1, r0
 8007be4:	4907      	ldr	r1, [pc, #28]	; (8007c04 <DefaultPinProvider::SetPinDriveMode#16701+0x68>)
 8007be6:	4401      	add	r1, r0
 8007be8:	4620      	mov	r0, r4
 8007bea:	f7f8 fe99 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8007bee:	4605      	mov	r5, r0
 8007bf0:	f7f8 fee6 	bl	80009c0 <NotSupportedException::.ctor#7487>
 8007bf4:	4620      	mov	r0, r4
 8007bf6:	4629      	mov	r1, r5
 8007bf8:	f7f8 fea8 	bl	800094c <TypeSystemManager::Throw#5247>
 8007bfc:	17ff9bd0 	.word	0x17ff9bd0
 8007c00:	ffffea64 	.word	0xffffea64
 8007c04:	e800764c 	.word	0xe800764c

08007c08 <DefaultPinProvider::Write#16702>:
            }
        }

        public void Write(GpioPinValue value)
        {
 8007c08:	b580      	push	{r7, lr}
            m_gpioPin.Write((int)value);
 8007c0a:	6880      	ldr	r0, [r0, #8]
 8007c0c:	69c0      	ldr	r0, [r0, #28]
 8007c0e:	f00c f92d 	bl	8013e6c <tmp_gpio_write>
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <GpioController::OpenPin#16708>:
        ///     documentation for your circuit board.</param>
        /// <param name="sharingMode">The mode in which you want to open the GPIO pin, which determines whether other
        ///     connections to the pin can be opened while you have the pin open.</param>
        /// <returns>The opened GPIO pin.</returns>
        public GpioPin OpenPin(int pinNumber, GpioSharingMode sharingMode)
        {
 8007c14:	b5b0      	push	{r4, r5, r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	2100      	movs	r1, #0
 8007c1a:	466a      	mov	r2, sp
 8007c1c:	9101      	str	r1, [sp, #4]
 8007c1e:	2101      	movs	r1, #1
 8007c20:	9100      	str	r1, [sp, #0]
 8007c22:	a901      	add	r1, sp, #4
            GpioPin pin = null;
            GpioOpenStatus status = GpioOpenStatus.PinUnavailable;

            if(!TryOpenPin(pinNumber, sharingMode, out pin, out status))
 8007c24:	f000 f81c 	bl	8007c60 <GpioController::TryOpenPin#16709>
 8007c28:	f010 0fff 	tst.w	r0, #255	; 0xff
            {
                throw new InvalidOperationException();
            }
            
            return pin;
        }
 8007c2c:	bf1e      	ittt	ne
 8007c2e:	9801      	ldrne	r0, [sp, #4]
 8007c30:	b002      	addne	sp, #8
 8007c32:	bdb0      	popne	{r4, r5, r7, pc}
 8007c34:	4807      	ldr	r0, [pc, #28]	; (8007c54 <GpioController::OpenPin#16708+0x40>)
            GpioPin pin = null;
            GpioOpenStatus status = GpioOpenStatus.PinUnavailable;

            if(!TryOpenPin(pinNumber, sharingMode, out pin, out status))
            {
                throw new InvalidOperationException();
 8007c36:	4908      	ldr	r1, [pc, #32]	; (8007c58 <GpioController::OpenPin#16708+0x44>)
 8007c38:	4478      	add	r0, pc
 8007c3a:	180c      	adds	r4, r1, r0
 8007c3c:	4907      	ldr	r1, [pc, #28]	; (8007c5c <GpioController::OpenPin#16708+0x48>)
 8007c3e:	4401      	add	r1, r0
 8007c40:	4620      	mov	r0, r4
 8007c42:	f7f8 fe6d 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8007c46:	4605      	mov	r5, r0
 8007c48:	f7fd fb2e 	bl	80052a8 <InvalidOperationException::.ctor#7417>
 8007c4c:	4620      	mov	r0, r4
 8007c4e:	4629      	mov	r1, r5
 8007c50:	f7f8 fe7c 	bl	800094c <TypeSystemManager::Throw#5247>
 8007c54:	17ff9b78 	.word	0x17ff9b78
 8007c58:	ffffea64 	.word	0xffffea64
 8007c5c:	e800a20c 	.word	0xe800a20c

08007c60 <GpioController::TryOpenPin#16709>:
        /// <param name="pin">The opened GPIO pin if the open status is GpioOpenStatus.Success; otherwise null.</param>
        /// <param name="status">An enumeration value that indicates either that the attempt to open the GPIO pin
        ///     succeeded, or the reason that the attempt to open the GPIO pin failed.</param>
        /// <returns>True if the pin could be opened; otherwise false.</returns>
        public bool TryOpenPin(int pinNumber, GpioSharingMode sharingMode, out GpioPin pin, out GpioOpenStatus status)
        {
 8007c60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007c64:	b081      	sub	sp, #4
 8007c66:	4f19      	ldr	r7, [pc, #100]	; (8007ccc <GpioController::TryOpenPin#16709+0x6c>)
 8007c68:	4681      	mov	r9, r0
            // Following a builder-like pattern to avoid try-catch on new operator, and having 
            // to call ReleasePin in the catch case
            pin = new GpioPin();
 8007c6a:	4819      	ldr	r0, [pc, #100]	; (8007cd0 <GpioController::TryOpenPin#16709+0x70>)
 8007c6c:	460d      	mov	r5, r1
 8007c6e:	4690      	mov	r8, r2
 8007c70:	447f      	add	r7, pc
 8007c72:	19c6      	adds	r6, r0, r7
 8007c74:	4817      	ldr	r0, [pc, #92]	; (8007cd4 <GpioController::TryOpenPin#16709+0x74>)
 8007c76:	19c1      	adds	r1, r0, r7
 8007c78:	4630      	mov	r0, r6
 8007c7a:	f7f8 fe51 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8007c7e:	4604      	mov	r4, r0
 8007c80:	f7fb ffe6 	bl	8003c50 <Tracker::Allocate#5728>
 8007c84:	4620      	mov	r0, r4
 8007c86:	f000 f838 	bl	8007cfa <GpioPin::.ctor#16727>

            // Call to the kernel and get the object that implements the pin functions
            IGpioPinProvider provider = new DefaultPinProvider(pinNumber);
 8007c8a:	4813      	ldr	r0, [pc, #76]	; (8007cd8 <GpioController::TryOpenPin#16709+0x78>)
 8007c8c:	602c      	str	r4, [r5, #0]
 8007c8e:	19c1      	adds	r1, r0, r7
 8007c90:	4630      	mov	r0, r6
 8007c92:	f7f8 fe45 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8007c96:	4649      	mov	r1, r9
 8007c98:	4606      	mov	r6, r0
 8007c9a:	f7ff ff4b 	bl	8007b34 <DefaultPinProvider::.ctor#16689>

            if(provider == null)
            {
                pin.Dispose();
 8007c9e:	6828      	ldr	r0, [r5, #0]
 8007ca0:	b14e      	cbz	r6, 8007cb6 <GpioController::TryOpenPin#16709+0x56>
                status = GpioOpenStatus.PinUnavailable;
                return false;
            }

            // We were able to get a pin provider. Set it here
            pin.PinProvider = provider;
 8007ca2:	4631      	mov	r1, r6
 8007ca4:	f000 f82e 	bl	8007d04 <GpioPin::set_PinProvider#16735>
 8007ca8:	2000      	movs	r0, #0
 8007caa:	f8c8 0000 	str.w	r0, [r8]
 8007cae:	2001      	movs	r0, #1
 8007cb0:	b001      	add	sp, #4
 8007cb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            // Call to the kernel and get the object that implements the pin functions
            IGpioPinProvider provider = new DefaultPinProvider(pinNumber);

            if(provider == null)
            {
                pin.Dispose();
 8007cb6:	f000 f811 	bl	8007cdc <GpioPin::Dispose#16741>
 8007cba:	2000      	movs	r0, #0
 8007cbc:	2101      	movs	r1, #1
 8007cbe:	6028      	str	r0, [r5, #0]
 8007cc0:	f8c8 1000 	str.w	r1, [r8]
 8007cc4:	b001      	add	sp, #4
 8007cc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007cca:	46c0      	nop			; (mov r8, r8)
 8007ccc:	17ff9b40 	.word	0x17ff9b40
 8007cd0:	ffffea64 	.word	0xffffea64
 8007cd4:	e800b14c 	.word	0xe800b14c
 8007cd8:	e800b26c 	.word	0xe800b26c

08007cdc <GpioPin::Dispose#16741>:

        /// <summary>
        /// Closes the general-purpose I/O (GPIO) pin and releases the resources associated with it.
        /// </summary>
        public void Dispose()
        {
 8007cdc:	b510      	push	{r4, lr}
 8007cde:	4604      	mov	r4, r0
            if (_provider != null)
 8007ce0:	68a0      	ldr	r0, [r4, #8]
 8007ce2:	2800      	cmp	r0, #0
 8007ce4:	bf08      	it	eq
 8007ce6:	bd10      	popeq	{r4, pc}
            {
                Dispose(true);
 8007ce8:	4620      	mov	r0, r4
 8007cea:	f000 f82f 	bl	8007d4c <GpioPin::Dispose#16743>
 8007cee:	2000      	movs	r0, #0
 8007cf0:	60a0      	str	r0, [r4, #8]
                _provider = null;
 8007cf2:	4620      	mov	r0, r4
 8007cf4:	f7fb ffde 	bl	8003cb4 <Tracker::SetFinalizationFlag#5729>
 8007cf8:	bd10      	pop	{r4, pc}

08007cfa <GpioPin::.ctor#16727>:
 8007cfa:	2100      	movs	r1, #0
 8007cfc:	e9c0 1103 	strd	r1, r1, [r0, #12]
 8007d00:	6141      	str	r1, [r0, #20]
 8007d02:	4770      	bx	lr

08007d04 <GpioPin::set_PinProvider#16735>:
 8007d04:	6081      	str	r1, [r0, #8]
 8007d06:	4770      	bx	lr

08007d08 <GpioPin::ThrowIfDisposed#16744>:
                }
            }
        }

        private void ThrowIfDisposed()
        {
 8007d08:	b570      	push	{r4, r5, r6, lr}
            if (_provider == null)
 8007d0a:	6881      	ldr	r1, [r0, #8]
 8007d0c:	2900      	cmp	r1, #0
 8007d0e:	bf18      	it	ne
 8007d10:	bd70      	popne	{r4, r5, r6, pc}
            {
                throw new ObjectDisposedException(this.GetType().FullName);
 8007d12:	f7f9 fae8 	bl	80012e6 <Object::GetType#3988>
 8007d16:	f7f9 fb8e 	bl	8001436 <RuntimeType::get_FullName#3271>
 8007d1a:	4604      	mov	r4, r0
 8007d1c:	4808      	ldr	r0, [pc, #32]	; (8007d40 <GpioPin::ThrowIfDisposed#16744+0x38>)
 8007d1e:	4909      	ldr	r1, [pc, #36]	; (8007d44 <GpioPin::ThrowIfDisposed#16744+0x3c>)
 8007d20:	4478      	add	r0, pc
 8007d22:	180d      	adds	r5, r1, r0
 8007d24:	4908      	ldr	r1, [pc, #32]	; (8007d48 <GpioPin::ThrowIfDisposed#16744+0x40>)
 8007d26:	4401      	add	r1, r0
 8007d28:	4628      	mov	r0, r5
 8007d2a:	f7f8 fdf9 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8007d2e:	4621      	mov	r1, r4
 8007d30:	4606      	mov	r6, r0
 8007d32:	f7fe fd29 	bl	8006788 <ObjectDisposedException::.ctor#7584>
 8007d36:	4628      	mov	r0, r5
 8007d38:	4631      	mov	r1, r6
 8007d3a:	f7f8 fe07 	bl	800094c <TypeSystemManager::Throw#5247>
 8007d3e:	46c0      	nop			; (mov r8, r8)
 8007d40:	17ff9a90 	.word	0x17ff9a90
 8007d44:	ffffea64 	.word	0xffffea64
 8007d48:	e800b38c 	.word	0xe800b38c

08007d4c <GpioPin::Dispose#16743>:
        /// <summary>
        /// Releases internal resources held by the GPIO pin.
        /// </summary>
        /// <param name="disposing">True if called from Dispose, false if called from the finalizer.</param>
        private void Dispose(bool disposing)
        {
 8007d4c:	b510      	push	{r4, lr}
            if (disposing)
            {
                if (_provider != null)
 8007d4e:	6881      	ldr	r1, [r0, #8]
 8007d50:	2900      	cmp	r1, #0
 8007d52:	bf08      	it	eq
 8007d54:	bd10      	popeq	{r4, pc}
 8007d56:	4906      	ldr	r1, [pc, #24]	; (8007d70 <GpioPin::Dispose#16743+0x24>)
                {
                    _provider.Dispose();
 8007d58:	6884      	ldr	r4, [r0, #8]
 8007d5a:	4a06      	ldr	r2, [pc, #24]	; (8007d74 <GpioPin::Dispose#16743+0x28>)
 8007d5c:	4479      	add	r1, pc
 8007d5e:	4620      	mov	r0, r4
 8007d60:	4411      	add	r1, r2
 8007d62:	f7fb fa87 	bl	8003274 <VTable::GetInterface#3839>
 8007d66:	68c1      	ldr	r1, [r0, #12]
 8007d68:	4620      	mov	r0, r4
 8007d6a:	4788      	blx	r1
 8007d6c:	bd10      	pop	{r4, pc}
 8007d6e:	46c0      	nop			; (mov r8, r8)
 8007d70:	17ff9a54 	.word	0x17ff9a54
 8007d74:	e8007e5c 	.word	0xe8007e5c

08007d78 <LedToggler::.ctor#16839>:
 8007d78:	6081      	str	r1, [r0, #8]
 8007d7a:	4770      	bx	lr

08007d7c <LedToggler::get_PinCount#16841>:

        public int PinCount
        {
            get
            {
                return _pins.Length;
 8007d7c:	6880      	ldr	r0, [r0, #8]
 8007d7e:	6880      	ldr	r0, [r0, #8]
 8007d80:	4770      	bx	lr

08007d82 <LedToggler::set_Item#16843>:
            get
            {
                return _pins[key].Read();
            }
            set
            {
 8007d82:	b580      	push	{r7, lr}
                _pins[key].Write(value);
 8007d84:	6880      	ldr	r0, [r0, #8]
 8007d86:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8007d8a:	4611      	mov	r1, r2
 8007d8c:	68c0      	ldr	r0, [r0, #12]
 8007d8e:	f7fb fcf1 	bl	8003774 <GpioPin::Write#16737>
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <Memory::RequestMemoryPool#16869>:
    //--//

    public static class Memory
    {
        public static unsafe byte* RequestMemoryPool( uint* size )
        {
 8007d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d96:	b081      	sub	sp, #4
 8007d98:	4604      	mov	r4, r0
            {
                mem = malloc( (uint)requestSize ); 

                if(mem == null)
                {
                    requestSize -= requestSize / 10;
 8007d9a:	f64c 46cd 	movw	r6, #52429	; 0xcccd
 8007d9e:	6825      	ldr	r5, [r4, #0]
 8007da0:	f6cc 46cc 	movt	r6, #52428	; 0xcccc
 8007da4:	f1b5 3fff 	cmp.w	r5, #4294967295
 8007da8:	bfd8      	it	le
 8007daa:	f06f 4500 	mvnle.w	r5, #2147483648	; 0x80000000
 8007dae:	fba5 0706 	umull	r0, r7, r5, r6
            // never try and allocate more than than half of the address space
            //
            int requestSize = (int)System.Math.Min(*size, System.UInt32.MaxValue / 2);
            do
            {
                mem = malloc( (uint)requestSize ); 
 8007db2:	4628      	mov	r0, r5
 8007db4:	f00e ff0e 	bl	8016bd4 <malloc>

                if(mem == null)
 8007db8:	2800      	cmp	r0, #0
 8007dba:	bf08      	it	eq
 8007dbc:	eba5 05d7 	subeq.w	r5, r5, r7, lsr #3
 8007dc0:	d101      	bne.n	8007dc6 <Memory::RequestMemoryPool#16869+0x32>
 8007dc2:	2d00      	cmp	r5, #0
 8007dc4:	dcf3      	bgt.n	8007dae <Memory::RequestMemoryPool#16869+0x1a>
 8007dc6:	6025      	str	r5, [r4, #0]
 8007dc8:	b001      	add	sp, #4
 8007dca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007dcc <Memory::FreeMemoryPool#16870>:
            return mem;
        }

        
        public static unsafe void FreeMemoryPool( byte* mem )
        {
 8007dcc:	b580      	push	{r7, lr}
            if(mem != null)
 8007dce:	2800      	cmp	r0, #0
            {
                free( mem );
 8007dd0:	bf18      	it	ne
 8007dd2:	f00e ff07 	blne	8016be4 <free>
 8007dd6:	bd80      	pop	{r7, pc}

08007dd8 <Timer::read_us#16884>:

        /** Get the time passed in micro-seconds
         */

        public int read_us()
        {
 8007dd8:	b510      	push	{r4, lr}
            return _time + slicetime();
 8007dda:	6904      	ldr	r4, [r0, #16]
 8007ddc:	f000 f802 	bl	8007de4 <Timer::slicetime#16885>
 8007de0:	4420      	add	r0, r4
 8007de2:	bd10      	pop	{r4, pc}

08007de4 <Timer::slicetime#16885>:
        }

        private int slicetime()
        {
 8007de4:	b510      	push	{r4, lr}
 8007de6:	4604      	mov	r4, r0
            if (_running)
 8007de8:	7a20      	ldrb	r0, [r4, #8]
 8007dea:	2800      	cmp	r0, #0
 8007dec:	bf04      	itt	eq
 8007dee:	2000      	moveq	r0, #0
 8007df0:	bd10      	popeq	{r4, pc}
            {
                return (int)(UsTicker.us_ticker_read() - _start);
 8007df2:	f00e fa77 	bl	80162e4 <us_ticker_read>
 8007df6:	68e1      	ldr	r1, [r4, #12]
 8007df8:	1a40      	subs	r0, r0, r1
 8007dfa:	bd10      	pop	{r4, pc}

08007dfc <Context::.ctor#16920>:
 8007dfc:	4770      	bx	lr

08007dfe <Memory::InitializeMemory#16932>:
 8007dfe:	4770      	bx	lr

08007e00 <Peripherals::Activate#17232>:
            CMSIS.NVIC.SetPriority( ProcessorARMv7M.IRQn_Type.PendSV_IRQn , ProcessorARMv7M.c_Priority__PendSV ); 
        }
        
        public override void Activate()
        {
            CMSIS.Drivers.InterruptController.Instance.Initialize();
 8007e00:	b580      	push	{r7, lr}
 8007e02:	f000 fb13 	bl	800842c <InterruptController::Initialize#17345>
            CMSIS.Drivers.ContextSwitchTimer.Instance.Initialize();
 8007e06:	f000 fb57 	bl	80084b8 <ContextSwitchTimer::Initialize#17368>
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <SystemTimer::Initialize#17011>:
        private unsafe TimerEventImpl*  m_timerEvent;
        //--//
        //private static Timer            s_guard;

        public void Initialize()
        {
 8007e0c:	b5b0      	push	{r4, r5, r7, lr}
 8007e0e:	4d11      	ldr	r5, [pc, #68]	; (8007e54 <SystemTimer::Initialize#17011+0x48>)
            m_timers      = new RT.KernelList<Timer>();
 8007e10:	4811      	ldr	r0, [pc, #68]	; (8007e58 <SystemTimer::Initialize#17011+0x4c>)
 8007e12:	4912      	ldr	r1, [pc, #72]	; (8007e5c <SystemTimer::Initialize#17011+0x50>)
 8007e14:	447d      	add	r5, pc
 8007e16:	4428      	add	r0, r5
 8007e18:	4429      	add	r1, r5
 8007e1a:	f7f8 fd81 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8007e1e:	4604      	mov	r4, r0
 8007e20:	f000 f8a6 	bl	8007f70 <KernelList`1::.ctor#23577>
 8007e24:	480e      	ldr	r0, [pc, #56]	; (8007e60 <SystemTimer::Initialize#17011+0x54>)
 8007e26:	4405      	add	r5, r0
 8007e28:	2000      	movs	r0, #0
 8007e2a:	e9c5 4002 	strd	r4, r0, [r5, #8]
 8007e2e:	6128      	str	r0, [r5, #16]
            m_accumulator = 0;
            

            // This call sets up the timer handler to call SystemTimer_Handler/ProcessTimeout
            tmp_sys_timer_init();
 8007e30:	f00c f918 	bl	8014064 <tmp_sys_timer_init>
        public uint Counter
        {
            [RT.Inline]
            get
            {
                return tmp_sys_timer_read();
 8007e34:	f00c f906 	bl	8014044 <tmp_sys_timer_read>
 8007e38:	6168      	str	r0, [r5, #20]
            // Bug: https://msmcu.visualstudio.com/DefaultCollection/LLILUM/_workitems#id=287&fullScreen=false
            unsafe
            {
                fixed (TimerEventImpl** timer_ptr = &m_timerEvent)
                {
                    tmp_timer_event_alloc(timer_ptr);
 8007e3a:	f105 0018 	add.w	r0, r5, #24
 8007e3e:	f00c f8f3 	bl	8014028 <tmp_timer_event_alloc>
                }
            }
            
            CMSIS.NVIC.SetPriority( (RT.TargetPlatform.ARMv7.ProcessorARMv7M.IRQn_Type)Board.Instance.GetSystemTimerIRQNumber(), RT.TargetPlatform.ARMv7.ProcessorARMv7M.c_Priority__SystemTimer );
 8007e42:	2032      	movs	r0, #50	; 0x32
 8007e44:	2107      	movs	r1, #7
 8007e46:	f7fb fd77 	bl	8003938 <NVIC::SetPriority#17280>
            //
            //s_guard = CreateTimer( (timer, currentTime) => { timer.RelativeTimeout = QuarterCycle;  }  );
            //s_guard.RelativeTimeout = QuarterCycle; 

            // no need to Refresh because guard cuases a refresh already
            Refresh();
 8007e4a:	4628      	mov	r0, r5
 8007e4c:	f000 f8bc 	bl	8007fc8 <SystemTimer::Refresh#17018>
 8007e50:	bdb0      	pop	{r4, r5, r7, pc}
 8007e52:	46c0      	nop			; (mov r8, r8)
 8007e54:	17ff999c 	.word	0x17ff999c
 8007e58:	ffffea64 	.word	0xffffea64
 8007e5c:	e800b4ac 	.word	0xe800b4ac
 8007e60:	ffffeb0c 	.word	0xffffeb0c

08007e64 <Peripherals::ReadPerformanceCounter#16935>:
 8007e64:	b580      	push	{r7, lr}
 8007e66:	f00c f8ed 	bl	8014044 <tmp_sys_timer_read>
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <ThreadManager::Activate#17328>:
        //
        // Extensibility 
        //
        
        public override void Activate()
        {
 8007e6c:	b570      	push	{r4, r5, r6, lr}
 8007e6e:	4604      	mov	r4, r0
            //
            // Activate the quantum timer, when the Idle Thread will run will enable execptions, 
            // thus letting the context switching to start 
            //
            RT.BugCheck.AssertInterruptsOff( );
 8007e70:	f7fa fb12 	bl	8002498 <BugCheck::AssertInterruptsOff#4945>
 8007e74:	4e0a      	ldr	r6, [pc, #40]	; (8007ea0 <ThreadManager::Activate#17328+0x34>)

            m_SysTickTimer = Drivers.ContextSwitchTimer.Instance.CreateTimer( TimeQuantumExpired );
 8007e76:	480b      	ldr	r0, [pc, #44]	; (8007ea4 <ThreadManager::Activate#17328+0x38>)
 8007e78:	490b      	ldr	r1, [pc, #44]	; (8007ea8 <ThreadManager::Activate#17328+0x3c>)
 8007e7a:	447e      	add	r6, pc
 8007e7c:	4430      	add	r0, r6
 8007e7e:	4431      	add	r1, r6
 8007e80:	f7f8 fd4e 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8007e84:	4605      	mov	r5, r0
 8007e86:	4809      	ldr	r0, [pc, #36]	; (8007eac <ThreadManager::Activate#17328+0x40>)
 8007e88:	4621      	mov	r1, r4
 8007e8a:	1982      	adds	r2, r0, r6
 8007e8c:	4628      	mov	r0, r5
 8007e8e:	f7f9 fa26 	bl	80012de <MulticastDelegate::.ctor#4919>
 8007e92:	4628      	mov	r0, r5
 8007e94:	f000 fb98 	bl	80085c8 <ContextSwitchTimer::CreateTimer#17370>
 8007e98:	6420      	str	r0, [r4, #64]	; 0x40
            m_SysTickTimer.Schedule();
 8007e9a:	f000 fba5 	bl	80085e8 <SysTickTimer::Schedule#17432>
 8007e9e:	bd70      	pop	{r4, r5, r6, pc}
 8007ea0:	17ff9936 	.word	0x17ff9936
 8007ea4:	ffffea64 	.word	0xffffea64
 8007ea8:	e800b7bc 	.word	0xe800b7bc
 8007eac:	e8006e0b 	.word	0xe8006e0b

08007eb0 <Callback::Invoke#17202>:
 8007eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007eb4:	468a      	mov	sl, r1
 8007eb6:	6901      	ldr	r1, [r0, #16]
 8007eb8:	4698      	mov	r8, r3
 8007eba:	4691      	mov	r9, r2
 8007ebc:	b189      	cbz	r1, 8007ee2 <Callback::Invoke#17202+0x32>
 8007ebe:	688c      	ldr	r4, [r1, #8]
 8007ec0:	f101 070c 	add.w	r7, r1, #12
 8007ec4:	2500      	movs	r5, #0
 8007ec6:	42a5      	cmp	r5, r4
 8007ec8:	bfa8      	it	ge
 8007eca:	e8bd 87f0 	ldmiage.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ece:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
 8007ed2:	464a      	mov	r2, r9
 8007ed4:	4643      	mov	r3, r8
 8007ed6:	e9d1 0602 	ldrd	r0, r6, [r1, #8]
 8007eda:	4651      	mov	r1, sl
 8007edc:	47b0      	blx	r6
 8007ede:	3501      	adds	r5, #1
 8007ee0:	e7f1      	b.n	8007ec6 <Callback::Invoke#17202+0x16>
 8007ee2:	e9d0 1702 	ldrd	r1, r7, [r0, #8]
 8007ee6:	464a      	mov	r2, r9
 8007ee8:	4643      	mov	r3, r8
 8007eea:	4608      	mov	r0, r1
 8007eec:	4651      	mov	r1, sl
 8007eee:	47b8      	blx	r7
 8007ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007ef4 <ThreadManager::WaitExpired#16999>:
        }

        //--//

        private void WaitExpired( Drivers.SystemTimer.Timer sysTickTimer, ulong currentTime )
        {
 8007ef4:	b510      	push	{r4, lr}
 8007ef6:	4604      	mov	r4, r0
            WaitExpired( RT.SchedulerTime.FromUnits( currentTime ) );
 8007ef8:	4610      	mov	r0, r2
 8007efa:	4619      	mov	r1, r3
 8007efc:	f7fc fbd5 	bl	80046aa <SchedulerTime::FromUnits#5146>
 8007f00:	4602      	mov	r2, r0
 8007f02:	4620      	mov	r0, r4
 8007f04:	460b      	mov	r3, r1
 8007f06:	f7fa ff8f 	bl	8002e28 <ThreadManager::WaitExpired#3348>
 8007f0a:	bd10      	pop	{r4, pc}

08007f0c <SystemTimer::CreateTimer#17012>:
        /// Create a new Timer and return to the user
        /// </summary>
        /// <param name="callback">Handler to run on timer expiration</param>
        /// <returns>New Timer instance</returns>
        public Timer CreateTimer(Callback callback)
        {
 8007f0c:	b5b0      	push	{r4, r5, r7, lr}
 8007f0e:	4907      	ldr	r1, [pc, #28]	; (8007f2c <SystemTimer::CreateTimer#17012+0x20>)
 8007f10:	4604      	mov	r4, r0
            return new Timer(this, callback);
 8007f12:	4807      	ldr	r0, [pc, #28]	; (8007f30 <SystemTimer::CreateTimer#17012+0x24>)
 8007f14:	4a07      	ldr	r2, [pc, #28]	; (8007f34 <SystemTimer::CreateTimer#17012+0x28>)
 8007f16:	4479      	add	r1, pc
 8007f18:	4408      	add	r0, r1
 8007f1a:	4411      	add	r1, r2
 8007f1c:	f7f8 fd00 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8007f20:	4621      	mov	r1, r4
 8007f22:	4605      	mov	r5, r0
 8007f24:	f000 f878 	bl	8008018 <Timer::.ctor#17210>
 8007f28:	4628      	mov	r0, r5
 8007f2a:	bdb0      	pop	{r4, r5, r7, pc}
 8007f2c:	17ff989a 	.word	0x17ff989a
 8007f30:	ffffea64 	.word	0xffffea64
 8007f34:	e800b53c 	.word	0xe800b53c

08007f38 <InterruptController::Activate#17346>:
            m_interruptThread = new System.Threading.Thread(DispatchInterrupts);
            m_interruptThread.Priority = System.Threading.ThreadPriority.Highest;
        }

        public void Activate()
        {
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	4804      	ldr	r0, [pc, #16]	; (8007f4c <InterruptController::Activate#17346+0x14>)
            m_interruptThread.Start();
 8007f3c:	4904      	ldr	r1, [pc, #16]	; (8007f50 <InterruptController::Activate#17346+0x18>)
 8007f3e:	4478      	add	r0, pc
 8007f40:	4408      	add	r0, r1
 8007f42:	68c0      	ldr	r0, [r0, #12]
 8007f44:	f7fa f846 	bl	8001fd4 <Thread::Start#4177>
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	46c0      	nop			; (mov r8, r8)
 8007f4c:	17ff9872 	.word	0x17ff9872
 8007f50:	ffffeaec 	.word	0xffffeaec

08007f54 <Timer::Cancel#17211>:
            //
            // Helper Methods
            //

            public void Cancel()
            {
 8007f54:	b580      	push	{r7, lr}
 8007f56:	4601      	mov	r1, r0
                m_owner.Deregister(this);
 8007f58:	6908      	ldr	r0, [r1, #16]
 8007f5a:	f000 f8fc 	bl	8008156 <SystemTimer::Deregister#17021>
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <Timer::set_Timeout#17215>:
                get
                {
                    return m_timeout;
                }
                set
                {
 8007f60:	b580      	push	{r7, lr}
 8007f62:	4601      	mov	r1, r0
 8007f64:	e9c1 2305 	strd	r2, r3, [r1, #20]
                    m_timeout = value;
                    m_owner.Register(this);
 8007f68:	6908      	ldr	r0, [r1, #16]
 8007f6a:	f000 f8b6 	bl	80080da <SystemTimer::Register#17020>
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <KernelList`1::.ctor#23577>:

        //
        // Constructor Methods
        //

        public KernelList()
 8007f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f72:	b081      	sub	sp, #4
 8007f74:	4604      	mov	r4, r0
 8007f76:	4811      	ldr	r0, [pc, #68]	; (8007fbc <KernelList`1::.ctor#23577+0x4c>)
        {
            m_head = new KernelNode< T >( default(T) );
 8007f78:	4911      	ldr	r1, [pc, #68]	; (8007fc0 <KernelList`1::.ctor#23577+0x50>)
 8007f7a:	4478      	add	r0, pc
 8007f7c:	180d      	adds	r5, r1, r0
 8007f7e:	4911      	ldr	r1, [pc, #68]	; (8007fc4 <KernelList`1::.ctor#23577+0x54>)
 8007f80:	180e      	adds	r6, r1, r0
 8007f82:	4628      	mov	r0, r5
 8007f84:	4631      	mov	r1, r6
 8007f86:	f7f8 fccb 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8007f8a:	2100      	movs	r1, #0
 8007f8c:	4607      	mov	r7, r0
 8007f8e:	f000 fa38 	bl	8008402 <KernelNode`1::.ctor#23590>
            m_tail = new KernelNode< T >( default(T) );
 8007f92:	4628      	mov	r0, r5
 8007f94:	4631      	mov	r1, r6
 8007f96:	60a7      	str	r7, [r4, #8]
 8007f98:	f7f8 fcc2 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8007f9c:	2100      	movs	r1, #0
 8007f9e:	4605      	mov	r5, r0
 8007fa0:	f000 fa2f 	bl	8008402 <KernelNode`1::.ctor#23590>
 8007fa4:	60e5      	str	r5, [r4, #12]

            m_head.Next     = m_tail;
 8007fa6:	4629      	mov	r1, r5
 8007fa8:	68a0      	ldr	r0, [r4, #8]
 8007faa:	f000 fd20 	bl	80089ee <KernelNode`1::set_Next#23602>
            m_tail.Previous = m_head;
 8007fae:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 8007fb2:	f000 fd1e 	bl	80089f2 <KernelNode`1::set_Previous#23604>
 8007fb6:	b001      	add	sp, #4
 8007fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fba:	46c0      	nop			; (mov r8, r8)
 8007fbc:	17ff9836 	.word	0x17ff9836
 8007fc0:	ffffea64 	.word	0xffffea64
 8007fc4:	e800b72c 	.word	0xe800b72c

08007fc8 <SystemTimer::Refresh#17018>:
        
        /// <summary>
        /// Reload the next expiring timer, if there is one. Otherwise, reload QuarterCycle
        /// </summary>
        private void Refresh()
        {
 8007fc8:	b570      	push	{r4, r5, r6, lr}
 8007fca:	4606      	mov	r6, r0
            ulong absTimeout;

            Timer target = m_timers.FirstTarget();
 8007fcc:	68b0      	ldr	r0, [r6, #8]
 8007fce:	f000 f861 	bl	8008094 <KernelList`1::FirstTarget#23580>
 8007fd2:	4605      	mov	r5, r0
            {
                absTimeout = target.Timeout;
            }
            else
            {
                absTimeout = c_QuarterCycle + now;
 8007fd4:	4630      	mov	r0, r6
 8007fd6:	f7fc fb83 	bl	80046e0 <SystemTimer::get_CurrentTime#17013>

            Timer target = m_timers.FirstTarget();
                
            ulong now = this.CurrentTime;

            if(target != null)
 8007fda:	b115      	cbz	r5, 8007fe2 <SystemTimer::Refresh#17018+0x1a>
            /// </summary>
            public ulong Timeout
            {
                get
                {
                    return m_timeout;
 8007fdc:	e9d5 2305 	ldrd	r2, r3, [r5, #20]
 8007fe0:	e004      	b.n	8007fec <SystemTimer::Refresh#17018+0x24>
            {
                absTimeout = target.Timeout;
            }
            else
            {
                absTimeout = c_QuarterCycle + now;
 8007fe2:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8007fe6:	1812      	adds	r2, r2, r0
 8007fe8:	f141 0300 	adc.w	r3, r1, #0
 8007fec:	4290      	cmp	r0, r2
 8007fee:	f04f 0400 	mov.w	r4, #0
 8007ff2:	f04f 0500 	mov.w	r5, #0
 8007ff6:	bf88      	it	hi
 8007ff8:	2401      	movhi	r4, #1
 8007ffa:	4299      	cmp	r1, r3
 8007ffc:	bf88      	it	hi
 8007ffe:	2501      	movhi	r5, #1
 8008000:	bf08      	it	eq
 8008002:	4625      	moveq	r5, r4
            // 
            // Timeout in the past? Trigger the match immediately by loading 1 
            // Timeout too far in the future? Generate match for 
            // a fraction of largest counter value, so we have time to handle wrap-arounds 
            // 
            Reload((now > absTimeout) ? 1 : (absTimeout - now));
 8008004:	1a12      	subs	r2, r2, r0
 8008006:	4630      	mov	r0, r6
 8008008:	418b      	sbcs	r3, r1
 800800a:	2d00      	cmp	r5, #0
 800800c:	bf1c      	itt	ne
 800800e:	2201      	movne	r2, #1
 8008010:	2300      	movne	r3, #0
 8008012:	f000 f847 	bl	80080a4 <SystemTimer::Reload#17019>
 8008016:	bd70      	pop	{r4, r5, r6, pc}

08008018 <Timer::.ctor#17210>:

            //
            // Constructor Methods
            //

            internal Timer(SystemTimer owner, Callback callback)
 8008018:	b570      	push	{r4, r5, r6, lr}
 800801a:	460c      	mov	r4, r1
 800801c:	4909      	ldr	r1, [pc, #36]	; (8008044 <Timer::.ctor#17210+0x2c>)
 800801e:	4605      	mov	r5, r0
 8008020:	4809      	ldr	r0, [pc, #36]	; (8008048 <Timer::.ctor#17210+0x30>)
            {
                m_owner = owner;
                m_node = new RT.KernelNode<Timer>(this);
 8008022:	4a0b      	ldr	r2, [pc, #44]	; (8008050 <Timer::.ctor#17210+0x38>)
 8008024:	4479      	add	r1, pc
 8008026:	4408      	add	r0, r1
 8008028:	6128      	str	r0, [r5, #16]
 800802a:	4808      	ldr	r0, [pc, #32]	; (800804c <Timer::.ctor#17210+0x34>)
 800802c:	4408      	add	r0, r1
 800802e:	4411      	add	r1, r2
 8008030:	f7f8 fc76 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8008034:	4629      	mov	r1, r5
 8008036:	4606      	mov	r6, r0
 8008038:	f000 f9e3 	bl	8008402 <KernelNode`1::.ctor#23590>
 800803c:	e9c5 4602 	strd	r4, r6, [r5, #8]
 8008040:	bd70      	pop	{r4, r5, r6, pc}
 8008042:	46c0      	nop			; (mov r8, r8)
 8008044:	17ff978c 	.word	0x17ff978c
 8008048:	ffffeb0c 	.word	0xffffeb0c
 800804c:	ffffea64 	.word	0xffffea64
 8008050:	e800b72c 	.word	0xe800b72c

08008054 <SystemTimer::TimeSinceAccumulatorUpdate#17022>:
        private uint TimeSinceAccumulatorUpdate( uint current )
        {
            // If the current timer value is greater than last accumulator update,
            // the counter is still going up. Otherwise, the timer hit its max value
            // and started counting from 0
            return (current >= m_lastAccumulatorUpdate) ?
 8008054:	6942      	ldr	r2, [r0, #20]
 8008056:	1a88      	subs	r0, r1, r2
 8008058:	ea6f 0202 	mvn.w	r2, r2
 800805c:	bf38      	it	cc
 800805e:	1850      	addcc	r0, r2, r1
 8008060:	4770      	bx	lr

08008062 <KernelList`1::get_StartOfForwardWalk#23584>:

        public KernelNode< T > StartOfForwardWalk
        {
            get
            {
                return m_head.Next;
 8008062:	6880      	ldr	r0, [r0, #8]
 8008064:	6880      	ldr	r0, [r0, #8]
 8008066:	4770      	bx	lr

08008068 <KernelNode`1::get_IsValidForForwardMove#23599>:
 8008068:	6880      	ldr	r0, [r0, #8]
 800806a:	2800      	cmp	r0, #0
 800806c:	bf18      	it	ne
 800806e:	2001      	movne	r0, #1
 8008070:	4770      	bx	lr

08008072 <KernelNode`1::RemoveFromList#23592>:
            this.ConnectToNext( place );
        }

        public void RemoveFromList()
        {
            if(m_next != null)
 8008072:	6881      	ldr	r1, [r0, #8]
 8008074:	2900      	cmp	r1, #0
        //--//

        [Inline]
        private void RemoveFromList_NoClear()
        {
            KernelNode< T > next = m_next;
 8008076:	bf1e      	ittt	ne
 8008078:	e9d0 1202 	ldrdne	r1, r2, [r0, #8]
 800807c:	60ca      	strne	r2, [r1, #12]
 800807e:	6091      	strne	r1, [r2, #8]
 8008080:	2100      	movs	r1, #0
 8008082:	e9c0 1102 	strd	r1, r1, [r0, #8]
 8008086:	4770      	bx	lr

08008088 <Timer::Invoke#17212>:
            /// <summary>
            /// Call to the Timer handler
            /// </summary>
            /// <param name="currentTime">Time in ticks</param>
            internal void Invoke(ulong currentTime)
            {
 8008088:	b580      	push	{r7, lr}
 800808a:	4601      	mov	r1, r0
                m_callback(this, currentTime);
 800808c:	6888      	ldr	r0, [r1, #8]
 800808e:	f7ff ff0f 	bl	8007eb0 <Callback::Invoke#17202>
 8008092:	bd80      	pop	{r7, pc}

08008094 <KernelList`1::FirstTarget#23580>:
            return null;
        }

        public T FirstTarget()
        {
            KernelNode< T > node = m_head.Next;
 8008094:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
 8008098:	6888      	ldr	r0, [r1, #8]

            if(node != m_tail)
 800809a:	4290      	cmp	r0, r2
 800809c:	bf14      	ite	ne
 800809e:	6900      	ldrne	r0, [r0, #16]
 80080a0:	2000      	moveq	r0, #0
 80080a2:	4770      	bx	lr

080080a4 <SystemTimer::Reload#17019>:
        /// <summary>
        /// Place the timer closest to expiration on the mbed queue
        /// </summary>
        /// <param name="remainder"></param>
        private void Reload(ulong remainder)
        {
 80080a4:	b570      	push	{r4, r5, r6, lr}
 80080a6:	4606      	mov	r6, r0
 80080a8:	461c      	mov	r4, r3
 80080aa:	4615      	mov	r5, r2
            // This is guaranteed to fit in a uint
            uint trimmed = (uint)Math.Min(remainder, c_QuarterCycle);

            unsafe
            {
                tmp_sys_timer_remove_event(m_timerEvent);
 80080ac:	69b0      	ldr	r0, [r6, #24]
 80080ae:	f00b fffb 	bl	80140a8 <tmp_sys_timer_remove_event>
 80080b2:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 80080b6:	f04f 0100 	mov.w	r1, #0
 80080ba:	f04f 0000 	mov.w	r0, #0
 80080be:	bf38      	it	cc
 80080c0:	2101      	movcc	r1, #1
 80080c2:	2c00      	cmp	r4, #0
 80080c4:	bf18      	it	ne
 80080c6:	4601      	movne	r1, r0
 80080c8:	2900      	cmp	r1, #0
 80080ca:	bf08      	it	eq
 80080cc:	f06f 4540 	mvneq.w	r5, #3221225472	; 0xc0000000
                tmp_sys_timer_insert_event(m_timerEvent, trimmed);
 80080d0:	69b0      	ldr	r0, [r6, #24]
 80080d2:	4629      	mov	r1, r5
 80080d4:	f00b ffd4 	bl	8014080 <tmp_sys_timer_insert_event>
 80080d8:	bd70      	pop	{r4, r5, r6, pc}

080080da <SystemTimer::Register#17020>:
        /// <summary>
        /// Add the timer to the queue in the chronologically apropriate position
        /// </summary>
        /// <param name="timer">Timer to add</param>
        private void Register(Timer timer)
        {
 80080da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080de:	460e      	mov	r6, r1
 80080e0:	4680      	mov	r8, r0

            internal RT.KernelNode<Timer> Node
            {
                get
                {
                    return m_node;
 80080e2:	68f5      	ldr	r5, [r6, #12]
        /// <param name="timer">Timer to add</param>
        private void Register(Timer timer)
        {
            RT.KernelNode<Timer> node = timer.Node;

            node.RemoveFromList();
 80080e4:	4628      	mov	r0, r5
 80080e6:	f7ff ffc4 	bl	8008072 <KernelNode`1::RemoveFromList#23592>

            ulong timeout = timer.Timeout;

            RT.KernelNode<Timer> node2 = m_timers.StartOfForwardWalk;
 80080ea:	f8d8 0008 	ldr.w	r0, [r8, #8]
            /// </summary>
            public ulong Timeout
            {
                get
                {
                    return m_timeout;
 80080ee:	e9d6 7405 	ldrd	r7, r4, [r6, #20]

            node.RemoveFromList();

            ulong timeout = timer.Timeout;

            RT.KernelNode<Timer> node2 = m_timers.StartOfForwardWalk;
 80080f2:	f7ff ffb6 	bl	8008062 <KernelList`1::get_StartOfForwardWalk#23584>
 80080f6:	4606      	mov	r6, r0
 80080f8:	e000      	b.n	80080fc <SystemTimer::Register#17020+0x22>
 80080fa:	68b6      	ldr	r6, [r6, #8]

            while (node2.IsValidForForwardMove)
 80080fc:	4630      	mov	r0, r6
 80080fe:	f7ff ffb3 	bl	8008068 <KernelNode`1::get_IsValidForForwardMove#23599>
 8008102:	f010 0fff 	tst.w	r0, #255	; 0xff
 8008106:	d010      	beq.n	800812a <SystemTimer::Register#17020+0x50>
 8008108:	6930      	ldr	r0, [r6, #16]
            /// </summary>
            public ulong Timeout
            {
                get
                {
                    return m_timeout;
 800810a:	6981      	ldr	r1, [r0, #24]
 800810c:	6940      	ldr	r0, [r0, #20]

            RT.KernelNode<Timer> node2 = m_timers.StartOfForwardWalk;

            while (node2.IsValidForForwardMove)
            {
                if (node2.Target.Timeout > timeout)
 800810e:	42b8      	cmp	r0, r7
 8008110:	f04f 0000 	mov.w	r0, #0
 8008114:	bf98      	it	ls
 8008116:	2001      	movls	r0, #1
 8008118:	42a1      	cmp	r1, r4
 800811a:	f04f 0100 	mov.w	r1, #0
 800811e:	bf98      	it	ls
 8008120:	2101      	movls	r1, #1
 8008122:	bf08      	it	eq
 8008124:	4601      	moveq	r1, r0
 8008126:	2900      	cmp	r1, #0
 8008128:	d1e7      	bne.n	80080fa <SystemTimer::Register#17020+0x20>
                }

                node2 = node2.Next;
            }

            node.InsertBefore(node2);
 800812a:	4628      	mov	r0, r5
 800812c:	4631      	mov	r1, r6
 800812e:	f000 f805 	bl	800813c <KernelNode`1::InsertBefore#23591>

            Refresh();
 8008132:	4640      	mov	r0, r8
 8008134:	f7ff ff48 	bl	8007fc8 <SystemTimer::Refresh#17018>
 8008138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800813c <KernelNode`1::InsertBefore#23591>:
        // Helper Methods
        //

        public void InsertBefore( KernelNode< T > place )
        {
            if(m_next != null)
 800813c:	6882      	ldr	r2, [r0, #8]
 800813e:	2a00      	cmp	r2, #0
        //--//

        [Inline]
        private void RemoveFromList_NoClear()
        {
            KernelNode< T > next = m_next;
 8008140:	bf1e      	ittt	ne
 8008142:	e9d0 2302 	ldrdne	r2, r3, [r0, #8]
 8008146:	60d3      	strne	r3, [r2, #12]
 8008148:	609a      	strne	r2, [r3, #8]
            if(m_next != null)
            {
                RemoveFromList_NoClear();
            }

            KernelNode< T > prev = place.m_previous;
 800814a:	68ca      	ldr	r2, [r1, #12]
 800814c:	6090      	str	r0, [r2, #8]
 800814e:	e9c0 1202 	strd	r1, r2, [r0, #8]
 8008152:	60c8      	str	r0, [r1, #12]
 8008154:	4770      	bx	lr

08008156 <SystemTimer::Deregister#17021>:
        /// <summary>
        /// Remove the timer from the queue
        /// </summary>
        /// <param name="timer">Timer to be removed</param>
        private void Deregister(Timer timer)
        {
 8008156:	b5b0      	push	{r4, r5, r7, lr}

            internal RT.KernelNode<Timer> Node
            {
                get
                {
                    return m_node;
 8008158:	68cd      	ldr	r5, [r1, #12]
 800815a:	4604      	mov	r4, r0
        /// <param name="timer">Timer to be removed</param>
        private void Deregister(Timer timer)
        {
            var node = timer.Node;

            if (node.IsLinked)
 800815c:	4628      	mov	r0, r5
 800815e:	f000 f80b 	bl	8008178 <KernelNode`1::get_IsLinked#23598>
 8008162:	f010 0fff 	tst.w	r0, #255	; 0xff
 8008166:	bf08      	it	eq
 8008168:	bdb0      	popeq	{r4, r5, r7, pc}
            {
                node.RemoveFromList();
 800816a:	4628      	mov	r0, r5
 800816c:	f7ff ff81 	bl	8008072 <KernelNode`1::RemoveFromList#23592>

                Refresh();
 8008170:	4620      	mov	r0, r4
 8008172:	f7ff ff29 	bl	8007fc8 <SystemTimer::Refresh#17018>
 8008176:	bdb0      	pop	{r4, r5, r7, pc}

08008178 <KernelNode`1::get_IsLinked#23598>:

        public bool IsLinked
        {
            get
            {
                return m_next != null;
 8008178:	6880      	ldr	r0, [r0, #8]
 800817a:	2800      	cmp	r0, #0
 800817c:	bf18      	it	ne
 800817e:	2001      	movne	r0, #1
 8008180:	4770      	bx	lr
 8008182:	46c0      	nop			; (mov r8, r8)

08008184 <GpioPin::.ctor#17052>:
        private readonly int                           m_pinNumber;
        private unsafe GpioImpl*                       m_gpio;
        private unsafe GpioIrqImpl*                    m_gpioIrq;
        private M3.Drivers.InterruptController.Handler m_handler;

        internal GpioPin(int pinNumber)
 8008184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008186:	b081      	sub	sp, #4
 8008188:	4604      	mov	r4, r0
        {
            m_pinNumber = pinNumber;

            unsafe
            {
                fixed (GpioImpl** gpio_ptr = &m_gpio)
 800818a:	f104 001c 	add.w	r0, r4, #28
 800818e:	61a1      	str	r1, [r4, #24]
                {
                    tmp_gpio_alloc_init(gpio_ptr, m_pinNumber);
 8008190:	f00b fe78 	bl	8013e84 <tmp_gpio_alloc_init>
                }

                fixed (GpioIrqImpl** ppIrq = &m_gpioIrq)
 8008194:	f104 0020 	add.w	r0, r4, #32
                {
                    tmp_gpio_irq_alloc(ppIrq);
 8008198:	f00b feb2 	bl	8013f00 <tmp_gpio_irq_alloc>
                }

                // Default to Rising edge
                ActivePinEdge = Llilum.PinEdge.RisingEdge;
 800819c:	4620      	mov	r0, r4
 800819e:	f7ff fc30 	bl	8007a02 <GpioPin::set_ActivePinEdge#16539>
 80081a2:	4f0e      	ldr	r7, [pc, #56]	; (80081dc <GpioPin::.ctor#17052+0x58>)
            }

            m_handler = M3.Drivers.InterruptController.Handler.Create(
 80081a4:	480e      	ldr	r0, [pc, #56]	; (80081e0 <GpioPin::.ctor#17052+0x5c>)
 80081a6:	69a1      	ldr	r1, [r4, #24]
 80081a8:	447f      	add	r7, pc
 80081aa:	4438      	add	r0, r7
 80081ac:	f000 f820 	bl	80081f0 <GpioProvider::GetGpioPinIRQNumber#17516>
 80081b0:	490d      	ldr	r1, [pc, #52]	; (80081e8 <GpioPin::.ctor#17052+0x64>)
 80081b2:	4605      	mov	r5, r0
 80081b4:	480b      	ldr	r0, [pc, #44]	; (80081e4 <GpioPin::.ctor#17052+0x60>)
 80081b6:	4438      	add	r0, r7
 80081b8:	4439      	add	r1, r7
 80081ba:	f7f8 fbb1 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 80081be:	4606      	mov	r6, r0
 80081c0:	480a      	ldr	r0, [pc, #40]	; (80081ec <GpioPin::.ctor#17052+0x68>)
 80081c2:	4621      	mov	r1, r4
 80081c4:	19c2      	adds	r2, r0, r7
 80081c6:	4630      	mov	r0, r6
 80081c8:	f7f9 f889 	bl	80012de <MulticastDelegate::.ctor#4919>
 80081cc:	4628      	mov	r0, r5
 80081ce:	4631      	mov	r1, r6
 80081d0:	f000 f864 	bl	800829c <Handler::Create#17408>
 80081d4:	6260      	str	r0, [r4, #36]	; 0x24
 80081d6:	b001      	add	sp, #4
 80081d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081da:	46c0      	nop			; (mov r8, r8)
 80081dc:	17ff9608 	.word	0x17ff9608
 80081e0:	ffffeb28 	.word	0xffffeb28
 80081e4:	ffffea64 	.word	0xffffea64
 80081e8:	e800b5cc 	.word	0xe800b5cc
 80081ec:	e8006ad1 	.word	0xe8006ad1

080081f0 <GpioProvider::GetGpioPinIRQNumber#17516>:
    using Chipset = CortexM4OnMBED;

    public sealed class GpioProvider : Chipset.HardwareModel.GpioProvider
    {
        public override int GetGpioPinIRQNumber(int pinNumber)
        {
 80081f0:	b5b0      	push	{r4, r5, r7, lr}
            PinName pin = (PinName)pinNumber;

            if (PinName.PA_0 <= pin && pin < PinName.PJ_15)
 80081f2:	299f      	cmp	r1, #159	; 0x9f
 80081f4:	d20a      	bcs.n	800820c <GpioProvider::GetGpioPinIRQNumber#17516+0x1c>
            {
                switch ((int) pin & 0x0F)
 80081f6:	f001 000f 	and.w	r0, r1, #15
 80081fa:	280f      	cmp	r0, #15
 80081fc:	d806      	bhi.n	800820c <GpioProvider::GetGpioPinIRQNumber#17516+0x1c>
 80081fe:	490e      	ldr	r1, [pc, #56]	; (8008238 <GpioProvider::GetGpioPinIRQNumber#17516+0x48>)
 8008200:	4a0e      	ldr	r2, [pc, #56]	; (800823c <GpioProvider::GetGpioPinIRQNumber#17516+0x4c>)
 8008202:	4479      	add	r1, pc
 8008204:	4411      	add	r1, r2
 8008206:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800820a:	bdb0      	pop	{r4, r5, r7, pc}
 800820c:	4807      	ldr	r0, [pc, #28]	; (800822c <GpioProvider::GetGpioPinIRQNumber#17516+0x3c>)
                        return (int)IRQn.EXTI15_10_IRQn;
                }


            }
            throw new NotSupportedException();
 800820e:	4908      	ldr	r1, [pc, #32]	; (8008230 <GpioProvider::GetGpioPinIRQNumber#17516+0x40>)
 8008210:	4478      	add	r0, pc
 8008212:	180c      	adds	r4, r1, r0
 8008214:	4907      	ldr	r1, [pc, #28]	; (8008234 <GpioProvider::GetGpioPinIRQNumber#17516+0x44>)
 8008216:	4401      	add	r1, r0
 8008218:	4620      	mov	r0, r4
 800821a:	f7f8 fb81 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 800821e:	4605      	mov	r5, r0
 8008220:	f7f8 fbce 	bl	80009c0 <NotSupportedException::.ctor#7487>
 8008224:	4620      	mov	r0, r4
 8008226:	4629      	mov	r1, r5
 8008228:	f7f8 fb90 	bl	800094c <TypeSystemManager::Throw#5247>
 800822c:	17ff95a0 	.word	0x17ff95a0
 8008230:	ffffea64 	.word	0xffffea64
 8008234:	e800764c 	.word	0xe800764c
 8008238:	17ff95ae 	.word	0x17ff95ae
 800823c:	e801b57c 	.word	0xe801b57c

08008240 <Callback::Invoke#17394>:
 8008240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008244:	468a      	mov	sl, r1
 8008246:	6901      	ldr	r1, [r0, #16]
 8008248:	4698      	mov	r8, r3
 800824a:	4691      	mov	r9, r2
 800824c:	b189      	cbz	r1, 8008272 <Callback::Invoke#17394+0x32>
 800824e:	688c      	ldr	r4, [r1, #8]
 8008250:	f101 070c 	add.w	r7, r1, #12
 8008254:	2500      	movs	r5, #0
 8008256:	42a5      	cmp	r5, r4
 8008258:	bfa8      	it	ge
 800825a:	e8bd 87f0 	ldmiage.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800825e:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
 8008262:	464a      	mov	r2, r9
 8008264:	4643      	mov	r3, r8
 8008266:	e9d1 0602 	ldrd	r0, r6, [r1, #8]
 800826a:	4651      	mov	r1, sl
 800826c:	47b0      	blx	r6
 800826e:	3501      	adds	r5, #1
 8008270:	e7f1      	b.n	8008256 <Callback::Invoke#17394+0x16>
 8008272:	e9d0 1702 	ldrd	r1, r7, [r0, #8]
 8008276:	464a      	mov	r2, r9
 8008278:	4643      	mov	r3, r8
 800827a:	4608      	mov	r0, r1
 800827c:	4651      	mov	r1, sl
 800827e:	47b8      	blx	r7
 8008280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008284 <GpioPin::HandleGpioInterrupt#17064>:
                Runtime.HardwareProvider.Instance.ReleasePins(m_pinNumber);
            }
        }

        private void HandleGpioInterrupt(M3.Drivers.InterruptController.InterruptData data)
        {
 8008284:	b580      	push	{r7, lr}
 8008286:	b084      	sub	sp, #16
 8008288:	f10d 0c04 	add.w	ip, sp, #4
 800828c:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
            SendEventInternal((Llilum.PinEdge)data.Context);
 8008290:	9901      	ldr	r1, [sp, #4]
 8008292:	f7ff fc17 	bl	8007ac4 <GpioPin::SendEventInternal#16547>
 8008296:	b004      	add	sp, #16
 8008298:	bd80      	pop	{r7, pc}
 800829a:	46c0      	nop			; (mov r8, r8)

0800829c <Handler::Create#17408>:

            public static Handler Create( ProcessorARMv7M.IRQn_Type index    ,
                                          InterruptPriority         priority ,
                                          InterruptSettings         settings ,
                                          Callback                  callback )
            {
 800829c:	b570      	push	{r4, r5, r6, lr}
 800829e:	460c      	mov	r4, r1
 80082a0:	4907      	ldr	r1, [pc, #28]	; (80082c0 <Handler::Create#17408+0x24>)
 80082a2:	4605      	mov	r5, r0
                return new Handler( index, priority, settings, callback );
 80082a4:	4807      	ldr	r0, [pc, #28]	; (80082c4 <Handler::Create#17408+0x28>)
 80082a6:	4a08      	ldr	r2, [pc, #32]	; (80082c8 <Handler::Create#17408+0x2c>)
 80082a8:	4479      	add	r1, pc
 80082aa:	4408      	add	r0, r1
 80082ac:	4411      	add	r1, r2
 80082ae:	f7f8 fb37 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 80082b2:	4629      	mov	r1, r5
 80082b4:	4622      	mov	r2, r4
 80082b6:	4606      	mov	r6, r0
 80082b8:	f000 fb12 	bl	80088e0 <Handler::.ctor#17407>
 80082bc:	4630      	mov	r0, r6
 80082be:	bd70      	pop	{r4, r5, r6, pc}
 80082c0:	17ff9508 	.word	0x17ff9508
 80082c4:	ffffea64 	.word	0xffffea64
 80082c8:	e800bb0c 	.word	0xe800bb0c

080082cc <GpioPin::Write#17056>:
                return tmp_gpio_read(m_gpio);
            }
        }

        public override void Write(int value)
        {
 80082cc:	b580      	push	{r7, lr}
            unsafe
            {
                tmp_gpio_write(m_gpio, value);
 80082ce:	69c0      	ldr	r0, [r0, #28]
 80082d0:	f00b fdcc 	bl	8013e6c <tmp_gpio_write>
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	46c0      	nop			; (mov r8, r8)

080082d8 <GpioPin::Dispose#17063>:
                }
            }
        }

        private void Dispose(bool disposing)
        {
 80082d8:	b5b0      	push	{r4, r5, r7, lr}
 80082da:	b082      	sub	sp, #8
 80082dc:	2500      	movs	r5, #0
 80082de:	4604      	mov	r4, r0
 80082e0:	9501      	str	r5, [sp, #4]
            unsafe
            {
                tmp_gpio_irq_uninit(m_gpioIrq);
 80082e2:	6a20      	ldr	r0, [r4, #32]
 80082e4:	f00b fe24 	bl	8013f30 <tmp_gpio_irq_uninit>
                tmp_gpio_free(m_gpio);
 80082e8:	69e0      	ldr	r0, [r4, #28]
 80082ea:	f00b fde3 	bl	8013eb4 <tmp_gpio_free>
                tmp_gpio_irq_free(m_gpioIrq);
 80082ee:	6a20      	ldr	r0, [r4, #32]
 80082f0:	f00b fe14 	bl	8013f1c <tmp_gpio_irq_free>
 80082f4:	2001      	movs	r0, #1
 80082f6:	f00b fc07 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
 80082fa:	9500      	str	r5, [sp, #0]
 80082fc:	e9cd 0000 	strd	r0, r0, [sp]
            }

            using (Runtime.SmartHandles.InterruptState.Disable())
            {
                M3.Drivers.InterruptController.Instance.Deregister(m_handler);
 8008300:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008302:	f000 f819 	bl	8008338 <InterruptController::Deregister#17350>
            }
 8008306:	9801      	ldr	r0, [sp, #4]
 8008308:	f00b fbfe 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
 800830c:	4907      	ldr	r1, [pc, #28]	; (800832c <GpioPin::Dispose#17063+0x54>)

            if (disposing)
            {
                Runtime.HardwareProvider.Instance.ReleasePins(m_pinNumber);
 800830e:	4808      	ldr	r0, [pc, #32]	; (8008330 <GpioPin::Dispose#17063+0x58>)
 8008310:	4a08      	ldr	r2, [pc, #32]	; (8008334 <GpioPin::Dispose#17063+0x5c>)
 8008312:	4479      	add	r1, pc
 8008314:	4408      	add	r0, r1
 8008316:	4411      	add	r1, r2
        {
            unsafe
            {
                tmp_gpio_irq_uninit(m_gpioIrq);
                tmp_gpio_free(m_gpio);
                tmp_gpio_irq_free(m_gpioIrq);
 8008318:	2201      	movs	r2, #1
                M3.Drivers.InterruptController.Instance.Deregister(m_handler);
            }

            if (disposing)
            {
                Runtime.HardwareProvider.Instance.ReleasePins(m_pinNumber);
 800831a:	f7f9 f94b 	bl	80015b4 <DefaultTypeSystemManager::AllocateArray#5255>
 800831e:	69a1      	ldr	r1, [r4, #24]
 8008320:	60c1      	str	r1, [r0, #12]
 8008322:	f7fb fc29 	bl	8003b78 <HardwareProvider::ReleasePins#4543>
 8008326:	b002      	add	sp, #8
 8008328:	bdb0      	pop	{r4, r5, r7, pc}
 800832a:	46c0      	nop			; (mov r8, r8)
 800832c:	17ff949e 	.word	0x17ff949e
 8008330:	ffffea64 	.word	0xffffea64
 8008334:	e800741c 	.word	0xe800741c

08008338 <InterruptController::Deregister#17350>:

            Deregister( hnd );
        }

        public void Deregister( Handler hnd )
        {
 8008338:	b510      	push	{r4, lr}
 800833a:	4604      	mov	r4, r0
            RT.BugCheck.AssertInterruptsOff();
 800833c:	f7fa f8ac 	bl	8002498 <BugCheck::AssertInterruptsOff#4945>

            hnd.m_node.RemoveFromList();
 8008340:	69a0      	ldr	r0, [r4, #24]
 8008342:	f000 f9d9 	bl	80086f8 <KernelNode`1::RemoveFromList#23653>
 8008346:	bd10      	pop	{r4, pc}

08008348 <HandleGpioInterrupt>:
            IRQ_FALL = 2,
        }

        [Runtime.ExportedMethod]
        private static void HandleGpioInterrupt(uint id, MbedGpioIrq evt)
        {
 8008348:	b510      	push	{r4, lr}
 800834a:	b086      	sub	sp, #24
 800834c:	2400      	movs	r4, #0
 800834e:	2901      	cmp	r1, #1
 8008350:	9405      	str	r4, [sp, #20]
 8008352:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8008356:	e9cd 4004 	strd	r4, r0, [sp, #16]
 800835a:	bf18      	it	ne
 800835c:	2102      	movne	r1, #2
 800835e:	2001      	movs	r0, #1
 8008360:	e9cd 1403 	strd	r1, r4, [sp, #12]
            M3.Drivers.InterruptController.InterruptData data;

            data.Handler = MBED.InterruptController.CastAsInterruptHandler((UIntPtr)id);
            data.Context = evt == MbedGpioIrq.IRQ_RISE ? (uint)Llilum.PinEdge.RisingEdge : (uint)Llilum.PinEdge.FallingEdge;
            data.Subcontext = 0;
 8008364:	f00b fbd0 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
 8008368:	9401      	str	r4, [sp, #4]
 800836a:	e9cd 0001 	strd	r0, r0, [sp, #4]

            using (Runtime.SmartHandles.InterruptState.Disable())
            {
                M3.Drivers.InterruptController.Instance.PostInterrupt(data);
 800836e:	aa03      	add	r2, sp, #12
 8008370:	ca07      	ldmia	r2, {r0, r1, r2}
 8008372:	f000 f805 	bl	8008380 <InterruptController::PostInterrupt#17358>
            }
 8008376:	9802      	ldr	r0, [sp, #8]
 8008378:	f00b fbc6 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
 800837c:	b006      	add	sp, #24
 800837e:	bd10      	pop	{r4, pc}

08008380 <InterruptController::PostInterrupt#17358>:
        public void ContinueUnderNormalInterrupt( RT.Peripherals.Continuation dlg )
        {
        }

        public void PostInterrupt(InterruptData interruptData)
        {
 8008380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008382:	b081      	sub	sp, #4
 8008384:	4606      	mov	r6, r0
 8008386:	4808      	ldr	r0, [pc, #32]	; (80083a8 <InterruptController::PostInterrupt#17358+0x28>)
 8008388:	460d      	mov	r5, r1
            RT.BugCheck.AssertInterruptsOff();

            m_interrupts.EnqueueNonblocking(interruptData);
 800838a:	4908      	ldr	r1, [pc, #32]	; (80083ac <InterruptController::PostInterrupt#17358+0x2c>)
 800838c:	4614      	mov	r4, r2
 800838e:	4478      	add	r0, pc
 8008390:	180f      	adds	r7, r1, r0
        {
        }

        public void PostInterrupt(InterruptData interruptData)
        {
            RT.BugCheck.AssertInterruptsOff();
 8008392:	f7fa f881 	bl	8002498 <BugCheck::AssertInterruptsOff#4945>

            m_interrupts.EnqueueNonblocking(interruptData);
 8008396:	6938      	ldr	r0, [r7, #16]
 8008398:	4631      	mov	r1, r6
 800839a:	462a      	mov	r2, r5
 800839c:	4623      	mov	r3, r4
 800839e:	f000 f9c8 	bl	8008732 <KernelCircularBuffer`1::EnqueueNonblocking#23632>
 80083a2:	b001      	add	sp, #4
 80083a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083a6:	46c0      	nop			; (mov r8, r8)
 80083a8:	17ff9422 	.word	0x17ff9422
 80083ac:	ffffeaec 	.word	0xffffeaec

080083b0 <HandleSerialPortInterrupt>:
        [TS.GenerateUnsafeCast()]
        private extern static SerialPortInterruptHandler CastAsSerialPortInterruptHandler(UIntPtr ptr);

        [RT.ExportedMethod]
        private static void HandleSerialPortInterrupt(uint id, MbedSerialPortIrq evt)
        {
 80083b0:	b580      	push	{r7, lr}
            SerialPortInterruptHandler hnd = CastAsSerialPortInterruptHandler((UIntPtr)id);

            if( hnd != null )
 80083b2:	2800      	cmp	r0, #0
            {
                hnd(evt);
 80083b4:	bf18      	it	ne
 80083b6:	f000 f801 	blne	80083bc <SerialPortInterruptHandler::Invoke#17224>
 80083ba:	bd80      	pop	{r7, pc}

080083bc <SerialPortInterruptHandler::Invoke#17224>:
 80083bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083be:	b081      	sub	sp, #4
 80083c0:	460c      	mov	r4, r1
 80083c2:	6901      	ldr	r1, [r0, #16]
 80083c4:	b171      	cbz	r1, 80083e4 <SerialPortInterruptHandler::Invoke#17224+0x28>
 80083c6:	688e      	ldr	r6, [r1, #8]
 80083c8:	f101 050c 	add.w	r5, r1, #12
 80083cc:	2700      	movs	r7, #0
 80083ce:	e006      	b.n	80083de <SerialPortInterruptHandler::Invoke#17224+0x22>
 80083d0:	f855 1027 	ldr.w	r1, [r5, r7, lsl #2]
 80083d4:	e9d1 0202 	ldrd	r0, r2, [r1, #8]
 80083d8:	4621      	mov	r1, r4
 80083da:	4790      	blx	r2
 80083dc:	3701      	adds	r7, #1
 80083de:	42b7      	cmp	r7, r6
 80083e0:	dbf6      	blt.n	80083d0 <SerialPortInterruptHandler::Invoke#17224+0x14>
 80083e2:	e004      	b.n	80083ee <SerialPortInterruptHandler::Invoke#17224+0x32>
 80083e4:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
 80083e8:	4608      	mov	r0, r1
 80083ea:	4621      	mov	r1, r4
 80083ec:	4790      	blx	r2
 80083ee:	b001      	add	sp, #4
 80083f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080083f2 <Board::PinToIndex#17464>:
            }
        }
        
        public override int PinToIndex( int pin )
        {
            int port = pin >> Board.GPIO_PORT_SHIFT;
 80083f2:	1308      	asrs	r0, r1, #12
            int portIndex = pin & 0x000000FF;
 80083f4:	b2c9      	uxtb	r1, r1

            return ( port * 32 ) + portIndex;
 80083f6:	eb01 1040 	add.w	r0, r1, r0, lsl #5
 80083fa:	4770      	bx	lr

080083fc <HardwareProvider::get_InvalidPin#17179>:
 80083fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008400:	4770      	bx	lr

08008402 <KernelNode`1::.ctor#23590>:
 8008402:	6101      	str	r1, [r0, #16]
 8008404:	4770      	bx	lr

08008406 <Peripherals::Initialize#17231>:
        // Helper Methods
        //

        public override void Initialize()
        {
            RT.BugCheck.AssertInterruptsOff();
 8008406:	b580      	push	{r7, lr}
 8008408:	f7fa f846 	bl	8002498 <BugCheck::AssertInterruptsOff#4945>
            //CMSIS.NVIC.SetPriority( ProcessorARMv7M.IRQn_Type.UsageFault_IRQn      , ProcessorARMv7M.c_Priority__NeverDisabled ); 
            
            //
            // System exceptions 
            //
            CMSIS.NVIC.SetPriority( ProcessorARMv7M.IRQn_Type.SVCall_IRQn , ProcessorARMv7M.c_Priority__SVCCall ); 
 800840c:	f06f 0004 	mvn.w	r0, #4
 8008410:	2105      	movs	r1, #5
 8008412:	f7fb fa91 	bl	8003938 <NVIC::SetPriority#17280>
            CMSIS.NVIC.SetPriority( ProcessorARMv7M.IRQn_Type.SysTick_IRQn, ProcessorARMv7M.c_Priority__SysTick ); 
 8008416:	f04f 30ff 	mov.w	r0, #4294967295
 800841a:	2107      	movs	r1, #7
 800841c:	f7fb fa8c 	bl	8003938 <NVIC::SetPriority#17280>
            CMSIS.NVIC.SetPriority( ProcessorARMv7M.IRQn_Type.PendSV_IRQn , ProcessorARMv7M.c_Priority__PendSV ); 
 8008420:	f06f 0001 	mvn.w	r0, #1
 8008424:	210e      	movs	r1, #14
 8008426:	f7fb fa87 	bl	8003938 <NVIC::SetPriority#17280>
 800842a:	bd80      	pop	{r7, pc}

0800842c <InterruptController::Initialize#17345>:
        //
        // Helper Methods
        //

        public void Initialize()
        {
 800842c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800842e:	b081      	sub	sp, #4
 8008430:	4f19      	ldr	r7, [pc, #100]	; (8008498 <InterruptController::Initialize#17345+0x6c>)
            m_handlers = new RT.KernelList< Handler >();
 8008432:	481a      	ldr	r0, [pc, #104]	; (800849c <InterruptController::Initialize#17345+0x70>)
 8008434:	447f      	add	r7, pc
 8008436:	19c4      	adds	r4, r0, r7
 8008438:	4819      	ldr	r0, [pc, #100]	; (80084a0 <InterruptController::Initialize#17345+0x74>)
 800843a:	19c1      	adds	r1, r0, r7
 800843c:	4620      	mov	r0, r4
 800843e:	f7f8 fa6f 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8008442:	4606      	mov	r6, r0
 8008444:	f000 f8e2 	bl	800860c <KernelList`1::.ctor#23609>
 8008448:	4816      	ldr	r0, [pc, #88]	; (80084a4 <InterruptController::Initialize#17345+0x78>)
 800844a:	19c5      	adds	r5, r0, r7
            m_interrupts = new RT.KernelCircularBuffer<InterruptData>(32);
 800844c:	4816      	ldr	r0, [pc, #88]	; (80084a8 <InterruptController::Initialize#17345+0x7c>)
 800844e:	60ae      	str	r6, [r5, #8]
 8008450:	19c1      	adds	r1, r0, r7
 8008452:	4620      	mov	r0, r4
 8008454:	f7f8 fa64 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8008458:	4606      	mov	r6, r0
 800845a:	f000 f903 	bl	8008664 <KernelCircularBuffer`1::.ctor#23628>
            m_interruptThread = new System.Threading.Thread(DispatchInterrupts);
 800845e:	4813      	ldr	r0, [pc, #76]	; (80084ac <InterruptController::Initialize#17345+0x80>)
 8008460:	612e      	str	r6, [r5, #16]
 8008462:	19c1      	adds	r1, r0, r7
 8008464:	4620      	mov	r0, r4
 8008466:	f7f8 fa5b 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 800846a:	4606      	mov	r6, r0
 800846c:	4810      	ldr	r0, [pc, #64]	; (80084b0 <InterruptController::Initialize#17345+0x84>)
 800846e:	4629      	mov	r1, r5
 8008470:	19c2      	adds	r2, r0, r7
 8008472:	4630      	mov	r0, r6
 8008474:	f7f8 ff33 	bl	80012de <MulticastDelegate::.ctor#4919>
 8008478:	480e      	ldr	r0, [pc, #56]	; (80084b4 <InterruptController::Initialize#17345+0x88>)
 800847a:	19c1      	adds	r1, r0, r7
 800847c:	4620      	mov	r0, r4
 800847e:	f7f8 fa4f 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8008482:	4631      	mov	r1, r6
 8008484:	4604      	mov	r4, r0
 8008486:	f7f9 fd01 	bl	8001e8c <Thread::.ctor#4175>
            m_interruptThread.Priority = System.Threading.ThreadPriority.Highest;
 800848a:	4620      	mov	r0, r4
 800848c:	2104      	movs	r1, #4
 800848e:	60ec      	str	r4, [r5, #12]
 8008490:	f7f9 fe02 	bl	8002098 <Thread::set_Priority#4212>
 8008494:	b001      	add	sp, #4
 8008496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008498:	17ff937c 	.word	0x17ff937c
 800849c:	ffffea64 	.word	0xffffea64
 80084a0:	e800b84c 	.word	0xe800b84c
 80084a4:	ffffeaec 	.word	0xffffeaec
 80084a8:	e800b8dc 	.word	0xe800b8dc
 80084ac:	e80081ac 	.word	0xe80081ac
 80084b0:	e8006f15 	.word	0xe8006f15
 80084b4:	e800823c 	.word	0xe800823c

080084b8 <ContextSwitchTimer::Initialize#17368>:
        //
        // Helper Methods
        //

        public void Initialize()
        {
 80084b8:	b5b0      	push	{r4, r5, r7, lr}
 80084ba:	4910      	ldr	r1, [pc, #64]	; (80084fc <ContextSwitchTimer::Initialize#17368+0x44>)
 80084bc:	4810      	ldr	r0, [pc, #64]	; (8008500 <ContextSwitchTimer::Initialize#17368+0x48>)
            m_sysTick      = CMSIS.SysTick.Instance;
            m_SysTickTimer = new SysTickTimer( this );
 80084be:	4a13      	ldr	r2, [pc, #76]	; (800850c <ContextSwitchTimer::Initialize#17368+0x54>)
 80084c0:	4479      	add	r1, pc
 80084c2:	1845      	adds	r5, r0, r1
 80084c4:	480f      	ldr	r0, [pc, #60]	; (8008504 <ContextSwitchTimer::Initialize#17368+0x4c>)
 80084c6:	4408      	add	r0, r1
 80084c8:	60a8      	str	r0, [r5, #8]
 80084ca:	480f      	ldr	r0, [pc, #60]	; (8008508 <ContextSwitchTimer::Initialize#17368+0x50>)
 80084cc:	4408      	add	r0, r1
 80084ce:	4411      	add	r1, r2
 80084d0:	f7f8 fa26 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 80084d4:	4604      	mov	r4, r0
 80084d6:	f000 f985 	bl	80087e4 <SysTickTimer::.ctor#17423>
 80084da:	2000      	movs	r0, #0
 80084dc:	e9c5 4003 	strd	r4, r0, [r5, #12]
 80084e0:	e9c5 0005 	strd	r0, r0, [r5, #20]
            m_latestMatch  = 0;

            //--//

            // Reset HW, stop all SysTick interrupts 
            Disable( m_SysTickTimer );
 80084e4:	f000 f982 	bl	80087ec <ContextSwitchTimer::Disable#17377>
 80084e8:	f64e 3000 	movw	r0, #60160	; 0xeb00
 80084ec:	f2c0 0041 	movt	r0, #65	; 0x41
 80084f0:	61e8      	str	r0, [r5, #28]
 80084f2:	2001      	movs	r0, #1
 80084f4:	f885 0020 	strb.w	r0, [r5, #32]
 80084f8:	bdb0      	pop	{r4, r5, r7, pc}
 80084fa:	46c0      	nop			; (mov r8, r8)
 80084fc:	17ff92f0 	.word	0x17ff92f0
 8008500:	ffffeabc 	.word	0xffffeabc
 8008504:	ffffeaa8 	.word	0xffffeaa8
 8008508:	ffffea64 	.word	0xffffea64
 800850c:	e800b96c 	.word	0xe800b96c

08008510 <Peripherals::CauseInterrupt#17235>:
 8008510:	b580      	push	{r7, lr}
 8008512:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8008516:	f7fa fc1b 	bl	8002d50 <ProcessorARMv7M::RaiseSystemHandler#3407>
 800851a:	bd80      	pop	{r7, pc}

0800851c <Peripherals::WaitForInterrupt#17237>:
 800851c:	b580      	push	{r7, lr}
 800851e:	f00b fb5f 	bl	8013be0 <CMSIS_STUB_POWER_WaitForEvent>
 8008522:	e7fc      	b.n	800851e <Peripherals::WaitForInterrupt#17237+0x2>

08008524 <InterruptController::ProcessInterrupt#17351>:

        //--//

        public void ProcessInterrupt()
        {
            ProcessInterrupt( false );
 8008524:	b580      	push	{r7, lr}
 8008526:	f000 f8f2 	bl	800870e <InterruptController::ProcessInterrupt#17353>
 800852a:	bd80      	pop	{r7, pc}

0800852c <InterruptController::ProcessFastInterrupt#17352>:
        }

////    [RT.MemoryRequirements( RT.MemoryAttributes.Unpaged )]
        public void ProcessFastInterrupt()
        {
            ProcessInterrupt( true );
 800852c:	b580      	push	{r7, lr}
 800852e:	f000 f8ee 	bl	800870e <InterruptController::ProcessInterrupt#17353>
 8008532:	bd80      	pop	{r7, pc}

08008534 <Peripherals::ReadPerformanceCounter#17241>:
        [RT.Inline]
        [RT.DisableNullChecks()]
        public override uint ReadPerformanceCounter()
        {
            // TODO: use a different timer
            return Drivers.ContextSwitchTimer.Instance.CurrentTimeRaw;
 8008534:	b580      	push	{r7, lr}
 8008536:	f000 f801 	bl	800853c <ContextSwitchTimer::get_CurrentTimeRaw#17372>
 800853a:	bd80      	pop	{r7, pc}

0800853c <ContextSwitchTimer::get_CurrentTimeRaw#17372>:
        private uint CounterValue
        {
            [RT.Inline]
            get
            {
                return m_sysTick.Counter;
 800853c:	b580      	push	{r7, lr}
 800853e:	f00b fddf 	bl	8014100 <CMSIS_STUB_SysTick_GetVAL>
 8008542:	bd80      	pop	{r7, pc}

08008544 <Storage::InitializeStorage#17245>:
 8008544:	4770      	bx	lr

08008546 <SysTick::get_TenMillisecondsCalibrationValue#17309>:

        public uint TenMillisecondsCalibrationValue
        {
            get
            {
                return CMSIS_STUB_SysTick_GetCALIB( ) & SYST_CALIB__TENMS___MASK;
 8008546:	b580      	push	{r7, lr}
 8008548:	f00b fdf0 	bl	801412c <CMSIS_STUB_SysTick_GetCALIB>
 800854c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8008550:	bd80      	pop	{r7, pc}

08008552 <SysTick::get_HasRef#17310>:

        public bool HasRef
        {
            get
            {
                return ((CMSIS_STUB_SysTick_GetCALIB() & SYST_CALIB__NOREF__MASK) == SYST_CALIB__NOREF__HASREF);
 8008552:	b580      	push	{r7, lr}
 8008554:	f00b fdea 	bl	801412c <CMSIS_STUB_SysTick_GetCALIB>
 8008558:	2100      	movs	r1, #0
 800855a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800855e:	bf08      	it	eq
 8008560:	2101      	moveq	r1, #1
 8008562:	4608      	mov	r0, r1
 8008564:	bd80      	pop	{r7, pc}

08008566 <SysTick::get_IsPrecise#17311>:

        public bool IsPrecise
        {
            get
            {
                return  (CMSIS_STUB_SysTick_GetCALIB() & SYST_CALIB__SKEW__MASK) == SYST_CALIB__SKEW__PRECISE;
 8008566:	b580      	push	{r7, lr}
 8008568:	f00b fde0 	bl	801412c <CMSIS_STUB_SysTick_GetCALIB>
 800856c:	2100      	movs	r1, #0
 800856e:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008572:	bf08      	it	eq
 8008574:	2101      	moveq	r1, #1
 8008576:	4608      	mov	r0, r1
 8008578:	bd80      	pop	{r7, pc}

0800857a <Callback::Invoke#17417>:
 800857a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800857e:	468a      	mov	sl, r1
 8008580:	6901      	ldr	r1, [r0, #16]
 8008582:	4698      	mov	r8, r3
 8008584:	4691      	mov	r9, r2
 8008586:	b189      	cbz	r1, 80085ac <Callback::Invoke#17417+0x32>
 8008588:	688c      	ldr	r4, [r1, #8]
 800858a:	f101 070c 	add.w	r7, r1, #12
 800858e:	2500      	movs	r5, #0
 8008590:	42a5      	cmp	r5, r4
 8008592:	bfa8      	it	ge
 8008594:	e8bd 87f0 	ldmiage.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008598:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
 800859c:	464a      	mov	r2, r9
 800859e:	4643      	mov	r3, r8
 80085a0:	e9d1 0602 	ldrd	r0, r6, [r1, #8]
 80085a4:	4651      	mov	r1, sl
 80085a6:	47b0      	blx	r6
 80085a8:	3501      	adds	r5, #1
 80085aa:	e7f1      	b.n	8008590 <Callback::Invoke#17417+0x16>
 80085ac:	e9d0 1702 	ldrd	r1, r7, [r0, #8]
 80085b0:	464a      	mov	r2, r9
 80085b2:	4643      	mov	r3, r8
 80085b4:	4608      	mov	r0, r1
 80085b6:	4651      	mov	r1, sl
 80085b8:	47b8      	blx	r7
 80085ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080085be <ThreadManager::TimeQuantumExpired#17333>:
        }
        
        //--//

        private void TimeQuantumExpired( Drivers.ContextSwitchTimer.SysTickTimer sysTickTimer, ulong currentTime )
        {
 80085be:	b580      	push	{r7, lr}
            TimeQuantumExpired();
 80085c0:	f000 f81c 	bl	80085fc <ThreadManager::TimeQuantumExpired#17332>
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	46c0      	nop			; (mov r8, r8)

080085c8 <ContextSwitchTimer::CreateTimer#17370>:
            //
            return ( ( ( ( GetCoreClockMhz( ) * GetFactoryCalibrationValue( ) ) / 100 ) - 1 ) * ms) / 10; 
        }

        public SysTickTimer CreateTimer( Callback callback )
        {
 80085c8:	b510      	push	{r4, lr}
 80085ca:	4601      	mov	r1, r0
 80085cc:	4804      	ldr	r0, [pc, #16]	; (80085e0 <ContextSwitchTimer::CreateTimer#17370+0x18>)
            m_SysTickTimer.Expired = callback;
 80085ce:	4a05      	ldr	r2, [pc, #20]	; (80085e4 <ContextSwitchTimer::CreateTimer#17370+0x1c>)
 80085d0:	4478      	add	r0, pc
 80085d2:	1814      	adds	r4, r2, r0
 80085d4:	68e0      	ldr	r0, [r4, #12]
 80085d6:	f000 f940 	bl	800885a <SysTickTimer::set_Expired#17426>

            return m_SysTickTimer;
 80085da:	68e0      	ldr	r0, [r4, #12]
 80085dc:	bd10      	pop	{r4, pc}
 80085de:	46c0      	nop			; (mov r8, r8)
 80085e0:	17ff91e0 	.word	0x17ff91e0
 80085e4:	ffffeabc 	.word	0xffffeabc

080085e8 <SysTickTimer::Schedule#17432>:
                    m_owner.Enable( this );
                }
            }

            public void Schedule()
            {
 80085e8:	b580      	push	{r7, lr}
                this.RelativeTimeout = m_owner.m_reload20ms;
 80085ea:	6881      	ldr	r1, [r0, #8]
 80085ec:	69c9      	ldr	r1, [r1, #28]
 80085ee:	f000 f9a1 	bl	8008934 <SysTickTimer::set_RelativeTimeout#17431>
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <SysTickTimer::Cancel#17427>:
                    m_callback = value;
                }
            }

            public void Cancel()
            {
 80085f4:	b580      	push	{r7, lr}
                m_owner.Disable( this );
 80085f6:	f000 f8f9 	bl	80087ec <ContextSwitchTimer::Disable#17377>
 80085fa:	bd80      	pop	{r7, pc}

080085fc <ThreadManager::TimeQuantumExpired#17332>:

            m_SysTickTimer.RelativeTimeout = (uint)timeout;
        }
        
        public override void TimeQuantumExpired()
        {
 80085fc:	b580      	push	{r7, lr}
            //
            // this will cause the reschedule
            //
            base.TimeQuantumExpired( );
 80085fe:	f7fa fb6d 	bl	8002cdc <ThreadManager::TimeQuantumExpired#3335>
 8008602:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8008606:	f7fa fba3 	bl	8002d50 <ProcessorARMv7M::RaiseSystemHandler#3407>
 800860a:	bd80      	pop	{r7, pc}

0800860c <KernelList`1::.ctor#23609>:

        //
        // Constructor Methods
        //

        public KernelList()
 800860c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800860e:	b081      	sub	sp, #4
 8008610:	4604      	mov	r4, r0
 8008612:	4811      	ldr	r0, [pc, #68]	; (8008658 <KernelList`1::.ctor#23609+0x4c>)
        {
            m_head = new KernelNode< T >( default(T) );
 8008614:	4911      	ldr	r1, [pc, #68]	; (800865c <KernelList`1::.ctor#23609+0x50>)
 8008616:	4478      	add	r0, pc
 8008618:	180d      	adds	r5, r1, r0
 800861a:	4911      	ldr	r1, [pc, #68]	; (8008660 <KernelList`1::.ctor#23609+0x54>)
 800861c:	180e      	adds	r6, r1, r0
 800861e:	4628      	mov	r0, r5
 8008620:	4631      	mov	r1, r6
 8008622:	f7f8 f97d 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8008626:	2100      	movs	r1, #0
 8008628:	4607      	mov	r7, r0
 800862a:	f000 f975 	bl	8008918 <KernelNode`1::.ctor#23651>
            m_tail = new KernelNode< T >( default(T) );
 800862e:	4628      	mov	r0, r5
 8008630:	4631      	mov	r1, r6
 8008632:	60a7      	str	r7, [r4, #8]
 8008634:	f7f8 f974 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8008638:	2100      	movs	r1, #0
 800863a:	4605      	mov	r5, r0
 800863c:	f000 f96c 	bl	8008918 <KernelNode`1::.ctor#23651>
 8008640:	60e5      	str	r5, [r4, #12]

            m_head.Next     = m_tail;
 8008642:	4629      	mov	r1, r5
 8008644:	68a0      	ldr	r0, [r4, #8]
 8008646:	f000 f9d6 	bl	80089f6 <KernelNode`1::set_Next#23663>
            m_tail.Previous = m_head;
 800864a:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 800864e:	f000 f9d4 	bl	80089fa <KernelNode`1::set_Previous#23665>
 8008652:	b001      	add	sp, #4
 8008654:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008656:	46c0      	nop			; (mov r8, r8)
 8008658:	17ff919a 	.word	0x17ff919a
 800865c:	ffffea64 	.word	0xffffea64
 8008660:	e800ba7c 	.word	0xe800ba7c

08008664 <KernelCircularBuffer`1::.ctor#23628>:

        //
        // Constructor Methods
        //

        public KernelCircularBuffer( int size )
 8008664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008666:	b081      	sub	sp, #4
 8008668:	4e13      	ldr	r6, [pc, #76]	; (80086b8 <KernelCircularBuffer`1::.ctor#23628+0x54>)
 800866a:	4604      	mov	r4, r0
 800866c:	2020      	movs	r0, #32
 800866e:	2220      	movs	r2, #32
 8008670:	60a0      	str	r0, [r4, #8]
        {
            m_size        = size;
            m_array       = new T[size];
 8008672:	4812      	ldr	r0, [pc, #72]	; (80086bc <KernelCircularBuffer`1::.ctor#23628+0x58>)
 8008674:	447e      	add	r6, pc
 8008676:	1985      	adds	r5, r0, r6
 8008678:	4811      	ldr	r0, [pc, #68]	; (80086c0 <KernelCircularBuffer`1::.ctor#23628+0x5c>)
 800867a:	1981      	adds	r1, r0, r6
 800867c:	4628      	mov	r0, r5
 800867e:	f7f8 ff99 	bl	80015b4 <DefaultTypeSystemManager::AllocateArray#5255>
 8008682:	60e0      	str	r0, [r4, #12]
            m_writerEvent = new ManualResetEvent( true  );
 8008684:	480f      	ldr	r0, [pc, #60]	; (80086c4 <KernelCircularBuffer`1::.ctor#23628+0x60>)
 8008686:	4406      	add	r6, r0
 8008688:	4628      	mov	r0, r5
 800868a:	4631      	mov	r1, r6
 800868c:	f7f8 f948 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8008690:	2101      	movs	r1, #1
 8008692:	4607      	mov	r7, r0
 8008694:	f7fb fba4 	bl	8003de0 <ManualResetEvent::.ctor#8005>
            m_readerEvent = new ManualResetEvent( false );
 8008698:	4628      	mov	r0, r5
 800869a:	4631      	mov	r1, r6
 800869c:	6127      	str	r7, [r4, #16]
 800869e:	f7f8 f93f 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 80086a2:	2100      	movs	r1, #0
 80086a4:	4605      	mov	r5, r0
 80086a6:	2600      	movs	r6, #0
 80086a8:	f7fb fb9a 	bl	8003de0 <ManualResetEvent::.ctor#8005>
 80086ac:	e9c4 5605 	strd	r5, r6, [r4, #20]
 80086b0:	e9c4 6607 	strd	r6, r6, [r4, #28]
 80086b4:	b001      	add	sp, #4
 80086b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086b8:	17ff913c 	.word	0x17ff913c
 80086bc:	ffffea64 	.word	0xffffea64
 80086c0:	e800bbec 	.word	0xe800bbec
 80086c4:	e800914c 	.word	0xe800914c

080086c8 <InterruptController::DispatchInterrupts#17359>:

            m_interrupts.EnqueueNonblocking(interruptData);
        }

        private void DispatchInterrupts()
        {
 80086c8:	b510      	push	{r4, lr}
 80086ca:	b084      	sub	sp, #16
 80086cc:	4604      	mov	r4, r0
 80086ce:	2000      	movs	r0, #0
 80086d0:	9003      	str	r0, [sp, #12]
 80086d2:	e9cd 0001 	strd	r0, r0, [sp, #4]
 80086d6:	e005      	b.n	80086e4 <InterruptController::DispatchInterrupts#17359+0x1c>
            {
               InterruptData intr = m_interrupts.DequeueBlocking();

                if (intr.Handler != null)
                {
                    intr.Handler.Invoke( intr );
 80086d8:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
 80086dc:	9803      	ldr	r0, [sp, #12]
 80086de:	4603      	mov	r3, r0
 80086e0:	f000 f81e 	bl	8008720 <Handler::Invoke#17411>

        private void DispatchInterrupts()
        {
            while (true)
            {
               InterruptData intr = m_interrupts.DequeueBlocking();
 80086e4:	6920      	ldr	r0, [r4, #16]
 80086e6:	f000 f853 	bl	8008790 <KernelCircularBuffer`1::DequeueBlocking#23635>
 80086ea:	ab01      	add	r3, sp, #4
 80086ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}

                if (intr.Handler != null)
 80086f0:	9803      	ldr	r0, [sp, #12]
 80086f2:	2800      	cmp	r0, #0
 80086f4:	d0f6      	beq.n	80086e4 <InterruptController::DispatchInterrupts#17359+0x1c>
 80086f6:	e7ef      	b.n	80086d8 <InterruptController::DispatchInterrupts#17359+0x10>

080086f8 <KernelNode`1::RemoveFromList#23653>:
            this.ConnectToNext( place );
        }

        public void RemoveFromList()
        {
            if(m_next != null)
 80086f8:	6881      	ldr	r1, [r0, #8]
 80086fa:	2900      	cmp	r1, #0
        //--//

        [Inline]
        private void RemoveFromList_NoClear()
        {
            KernelNode< T > next = m_next;
 80086fc:	bf1e      	ittt	ne
 80086fe:	e9d0 1202 	ldrdne	r1, r2, [r0, #8]
 8008702:	60ca      	strne	r2, [r1, #12]
 8008704:	6091      	strne	r1, [r2, #8]
 8008706:	2100      	movs	r1, #0
 8008708:	e9c0 1102 	strd	r1, r1, [r0, #8]
 800870c:	4770      	bx	lr

0800870e <InterruptController::ProcessInterrupt#17353>:
 800870e:	b083      	sub	sp, #12
 8008710:	2000      	movs	r0, #0
 8008712:	9002      	str	r0, [sp, #8]
 8008714:	e9cd 0000 	strd	r0, r0, [sp]
 8008718:	e9cd 0000 	strd	r0, r0, [sp]
 800871c:	b003      	add	sp, #12
 800871e:	4770      	bx	lr

08008720 <Handler::Invoke#17411>:
            {
                NVIC.DisableInterrupt( m_index );
            }

            public void Invoke( InterruptData interruptData )
            {
 8008720:	b580      	push	{r7, lr}
                m_callback( interruptData );
 8008722:	6940      	ldr	r0, [r0, #20]
 8008724:	f7ff fd8c 	bl	8008240 <Callback::Invoke#17394>
 8008728:	bd80      	pop	{r7, pc}

0800872a <InterruptController::GetNextActiveInterupt#17354>:
 800872a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800872e:	4770      	bx	lr

08008730 <InterruptController::ClearInterrupt#17355>:
 8008730:	4770      	bx	lr

08008732 <KernelCircularBuffer`1::EnqueueNonblocking#23632>:
        }

        //--//

        public bool EnqueueNonblocking( T val )
        {
 8008732:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008734:	b081      	sub	sp, #4
 8008736:	461d      	mov	r5, r3
 8008738:	4616      	mov	r6, r2
 800873a:	460f      	mov	r7, r1
 800873c:	4604      	mov	r4, r0
            BugCheck.AssertInterruptsOff();
 800873e:	f7f9 feab 	bl	8002498 <BugCheck::AssertInterruptsOff#4945>
        public bool IsFull
        {
            [Inline]
            get
            {
                return m_count == m_size;
 8008742:	68a0      	ldr	r0, [r4, #8]
 8008744:	69a1      	ldr	r1, [r4, #24]

        public bool EnqueueNonblocking( T val )
        {
            BugCheck.AssertInterruptsOff();

            if(this.IsFull)
 8008746:	4281      	cmp	r1, r0
 8008748:	bf02      	ittt	eq
 800874a:	2000      	moveq	r0, #0
 800874c:	b001      	addeq	sp, #4
 800874e:	bdf0      	popeq	{r4, r5, r6, r7, pc}
        public bool IsEmpty
        {
            [Inline]
            get
            {
                return m_count == 0;
 8008750:	69a0      	ldr	r0, [r4, #24]
 8008752:	b910      	cbnz	r0, 800875a <KernelCircularBuffer`1::EnqueueNonblocking#23632+0x28>
                return false;
            }

            if(this.IsEmpty)
            {
                m_readerEvent.Set();
 8008754:	6960      	ldr	r0, [r4, #20]
 8008756:	f7f9 ffee 	bl	8002736 <EventWaitHandle::Set#4116>
            }

            int pos = m_writerPos;
 800875a:	69e1      	ldr	r1, [r4, #28]

            m_array[pos] = val;
 800875c:	68e0      	ldr	r0, [r4, #12]
 800875e:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8008762:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8008766:	e9c0 7603 	strd	r7, r6, [r0, #12]
 800876a:	6145      	str	r5, [r0, #20]
        //--//

        [Inline]
        private int NextPosition( int val )
        {
            val = val + 1;
 800876c:	1c48      	adds	r0, r1, #1

            if(val == m_size)
 800876e:	68a1      	ldr	r1, [r4, #8]
            {
                return 0;
 8008770:	4288      	cmp	r0, r1
 8008772:	bf08      	it	eq
 8008774:	2000      	moveq	r0, #0
 8008776:	61e0      	str	r0, [r4, #28]
            int pos = m_writerPos;

            m_array[pos] = val;

            m_writerPos = NextPosition( pos );
            m_count++;
 8008778:	69a0      	ldr	r0, [r4, #24]
 800877a:	3001      	adds	r0, #1
 800877c:	61a0      	str	r0, [r4, #24]
        public bool IsFull
        {
            [Inline]
            get
            {
                return m_count == m_size;
 800877e:	68a1      	ldr	r1, [r4, #8]
            m_array[pos] = val;

            m_writerPos = NextPosition( pos );
            m_count++;

            if(this.IsFull)
 8008780:	4288      	cmp	r0, r1
            {
                m_writerEvent.Reset();
 8008782:	bf04      	itt	eq
 8008784:	6920      	ldreq	r0, [r4, #16]
 8008786:	f7fe f89a 	bleq	80068be <EventWaitHandle::Reset#4115>
 800878a:	2001      	movs	r0, #1
 800878c:	b001      	add	sp, #4
 800878e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008790 <KernelCircularBuffer`1::DequeueBlocking#23635>:
                m_writerEvent.WaitOne();
            }
        }

        public T DequeueBlocking()
        {
 8008790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008792:	b085      	sub	sp, #20
 8008794:	2700      	movs	r7, #0
 8008796:	4604      	mov	r4, r0
 8008798:	e9cd 7703 	strd	r7, r7, [sp, #12]
 800879c:	e9cd 7701 	strd	r7, r7, [sp, #4]
            BugCheck.AssertInterruptsOn();
 80087a0:	f7fa fa51 	bl	8002c46 <BugCheck::AssertInterruptsOn#4946>
 80087a4:	ad02      	add	r5, sp, #8
 80087a6:	e007      	b.n	80087b8 <KernelCircularBuffer`1::DequeueBlocking#23635+0x28>
                if(fReceived)
                {
                    return val;
                }

                m_readerEvent.WaitOne();
 80087a8:	6960      	ldr	r0, [r4, #20]
 80087aa:	2200      	movs	r2, #0
 80087ac:	6841      	ldr	r1, [r0, #4]
 80087ae:	69c9      	ldr	r1, [r1, #28]
 80087b0:	698b      	ldr	r3, [r1, #24]
 80087b2:	f04f 31ff 	mov.w	r1, #4294967295
 80087b6:	4798      	blx	r3
 80087b8:	2001      	movs	r0, #1
 80087ba:	9700      	str	r7, [sp, #0]
 80087bc:	f00b f9a4 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>
 80087c0:	9700      	str	r7, [sp, #0]
 80087c2:	e9cd 0000 	strd	r0, r0, [sp]
                bool fReceived;
                T    val;

                using(SmartHandles.InterruptState.Disable())
                {
                    fReceived = DequeueNonblocking( out val );
 80087c6:	4620      	mov	r0, r4
 80087c8:	4629      	mov	r1, r5
 80087ca:	f000 f918 	bl	80089fe <KernelCircularBuffer`1::DequeueNonblocking#23633>
 80087ce:	4606      	mov	r6, r0
                }
 80087d0:	9801      	ldr	r0, [sp, #4]
 80087d2:	f00b f999 	bl	8013b08 <CMSIS_STUB_SCB__set_BASEPRI>

                if(fReceived)
 80087d6:	f016 0fff 	tst.w	r6, #255	; 0xff
 80087da:	d0e5      	beq.n	80087a8 <KernelCircularBuffer`1::DequeueBlocking#23635+0x18>
                    return val;
                }

                m_readerEvent.WaitOne();
            }
        }
 80087dc:	aa02      	add	r2, sp, #8
 80087de:	ca07      	ldmia	r2, {r0, r1, r2}
 80087e0:	b005      	add	sp, #20
 80087e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080087e4 <SysTickTimer::.ctor#17423>:

            //
            // Constructor Methods
            //

            internal SysTickTimer( ContextSwitchTimer owner ) : this( owner, null )
 80087e4:	b580      	push	{r7, lr}
 80087e6:	f000 f899 	bl	800891c <SysTickTimer::.ctor#17424>
 80087ea:	bd80      	pop	{r7, pc}

080087ec <ContextSwitchTimer::Disable#17377>:
            // set match
            SetMatchAndStart( sysTickTimer.RelativeTimeout );
        }

        private void Disable( SysTickTimer sysTickTimer )
        {
 80087ec:	b580      	push	{r7, lr}
 80087ee:	f00b fc69 	bl	80140c4 <CMSIS_STUB_SysTick_GetCTRL>
 80087f2:	f020 0001 	bic.w	r0, r0, #1
 80087f6:	f00b fc6b 	bl	80140d0 <CMSIS_STUB_SysTick_SetCTRL>
 80087fa:	bd80      	pop	{r7, pc}

080087fc <ContextSwitchTimer::GetTicksForQuantumValue#17369>:

            m_enabled = true;
        }

        protected virtual uint GetTicksForQuantumValue( uint ms )
        {
 80087fc:	b5b0      	push	{r4, r5, r7, lr}
 80087fe:	460c      	mov	r4, r1
        }
        
        [RT.Inline]
        private bool HasRef( )
        {
            return m_sysTick.HasRef;
 8008800:	f7ff fea7 	bl	8008552 <SysTick::get_HasRef#17310>
            //
            // We use SysTick and handle wrap around for values larger than 24 bit precision
            // We will assume the device can be programmed with teh calibration value from factory settings
            // TODO: need to add logic to handle the case where we cannot count in the calibration value
            //
            RT.BugCheck.Assert( HasRef() && IsPrecise(), RT.BugCheck.StopCode.FailedBootstrap );
 8008804:	f010 0fff 	tst.w	r0, #255	; 0xff
 8008808:	d003      	beq.n	8008812 <ContextSwitchTimer::GetTicksForQuantumValue#17369+0x16>
        }

        [RT.Inline]
        private bool IsPrecise( )
        {
            return m_sysTick.IsPrecise;
 800880a:	f7ff feac 	bl	8008566 <SysTick::get_IsPrecise#17311>
        }
 800880e:	b2c0      	uxtb	r0, r0
 8008810:	e000      	b.n	8008814 <ContextSwitchTimer::GetTicksForQuantumValue#17369+0x18>
 8008812:	2000      	movs	r0, #0
 8008814:	b1f0      	cbz	r0, 8008854 <ContextSwitchTimer::GetTicksForQuantumValue#17369+0x58>
        }

        [RT.Inline]
        private uint GetCoreClockMhz( )
        {
            return (uint)( m_sysTick.SystemCoreClock / 1000000 ); 
 8008816:	f00b f935 	bl	8013a84 <CMSIS_STUB_CLOCK__GetSystemCoreClock>
 800881a:	f64d 6183 	movw	r1, #56963	; 0xde83
 800881e:	f2c4 311b 	movt	r1, #17179	; 0x431b
 8008822:	fba0 0101 	umull	r0, r1, r0, r1
 8008826:	0c8d      	lsrs	r5, r1, #18
        }

        [RT.Inline]
        private uint GetFactoryCalibrationValue( )
        {
            return m_sysTick.TenMillisecondsCalibrationValue;
 8008828:	f7ff fe8d 	bl	8008546 <SysTick::get_TenMillisecondsCalibrationValue#17309>
            RT.BugCheck.Assert( HasRef() && IsPrecise(), RT.BugCheck.StopCode.FailedBootstrap );

            //
            // match = (coreclock / 100) - 1 ) * 2
            //
            return ( ( ( ( GetCoreClockMhz( ) * GetFactoryCalibrationValue( ) ) / 100 ) - 1 ) * ms) / 10; 
 800882c:	f248 511f 	movw	r1, #34079	; 0x851f
 8008830:	4368      	muls	r0, r5
 8008832:	f2c5 11eb 	movt	r1, #20971	; 0x51eb
 8008836:	fba0 0101 	umull	r0, r1, r0, r1
 800883a:	f04f 30ff 	mov.w	r0, #4294967295
 800883e:	eb00 1051 	add.w	r0, r0, r1, lsr #5
 8008842:	f64c 41cd 	movw	r1, #52429	; 0xcccd
 8008846:	4360      	muls	r0, r4
 8008848:	f6cc 41cc 	movt	r1, #52428	; 0xcccc
 800884c:	fba0 0101 	umull	r0, r1, r0, r1
 8008850:	08c8      	lsrs	r0, r1, #3
 8008852:	bdb0      	pop	{r4, r5, r7, pc}
 8008854:	2010      	movs	r0, #16
 8008856:	f7f7 fd43 	bl	80002e0 <BugCheck::Raise#4938>

0800885a <SysTickTimer::set_Expired#17426>:
 800885a:	6101      	str	r1, [r0, #16]
 800885c:	4770      	bx	lr

0800885e <SysTickTimer::Invoke#17429>:
            }

            //--//
            
            internal void Invoke( ulong currentTime )
            {
 800885e:	b580      	push	{r7, lr}
 8008860:	4601      	mov	r1, r0
                m_callback( this, currentTime );
 8008862:	6908      	ldr	r0, [r1, #16]
 8008864:	f7ff fe89 	bl	800857a <Callback::Invoke#17417>
 8008868:	bd80      	pop	{r7, pc}

0800886a <ContextSwitchTimer::Enable#17376>:
        //
        // Timer behavior
        //

        private void Enable( SysTickTimer sysTickTimer )
        {
 800886a:	b570      	push	{r4, r5, r6, lr}
 800886c:	4605      	mov	r5, r0
 800886e:	2000      	movs	r0, #0
 8008870:	460c      	mov	r4, r1
 8008872:	2600      	movs	r6, #0
        }

        [RT.Inline]
        private void ResetAndClear( )
        {
            m_sysTick.ResetAndClear();
 8008874:	f00b fc4c 	bl	8014110 <CMSIS_STUB_SysTick_SetVAL>
            
            public uint RelativeTimeout
            {
                get
                {
                    return m_timeout;
 8008878:	68e0      	ldr	r0, [r4, #12]
 800887a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800887e:	61a8      	str	r0, [r5, #24]
 8008880:	bf38      	it	cc
 8008882:	2601      	movcc	r6, #1
            m_latestMatch = match;

            // 
            // Restarting causes the match value to be picked up
            // 
            m_sysTick.Match   = match;
 8008884:	b146      	cbz	r6, 8008898 <ContextSwitchTimer::Enable#17376+0x2e>
 8008886:	f00b fc2d 	bl	80140e4 <CMSIS_STUB_SysTick_SetLOAD>
            m_sysTick.Counter = 0;
 800888a:	2000      	movs	r0, #0
 800888c:	f00b fc40 	bl	8014110 <CMSIS_STUB_SysTick_SetVAL>
 8008890:	2007      	movs	r0, #7
 8008892:	f00b fc1d 	bl	80140d0 <CMSIS_STUB_SysTick_SetCTRL>
 8008896:	bd70      	pop	{r4, r5, r6, pc}
 8008898:	2009      	movs	r0, #9
 800889a:	f7f7 fd21 	bl	80002e0 <BugCheck::Raise#4938>
 800889e:	46c0      	nop			; (mov r8, r8)

080088a0 <InterruptData::Equals#51500>:
 80088a0:	b510      	push	{r4, lr}
 80088a2:	4604      	mov	r4, r0
 80088a4:	480c      	ldr	r0, [pc, #48]	; (80088d8 <InterruptData::Equals#51500+0x38>)
 80088a6:	4a0d      	ldr	r2, [pc, #52]	; (80088dc <InterruptData::Equals#51500+0x3c>)
 80088a8:	4478      	add	r0, pc
 80088aa:	4402      	add	r2, r0
 80088ac:	4608      	mov	r0, r1
 80088ae:	4611      	mov	r1, r2
 80088b0:	f7f8 f92c 	bl	8000b0c <TypeSystemManager::CastToSealedTypeNoThrow#5244>
 80088b4:	b170      	cbz	r0, 80088d4 <InterruptData::Equals#51500+0x34>
 80088b6:	6801      	ldr	r1, [r0, #0]
 80088b8:	6822      	ldr	r2, [r4, #0]
 80088ba:	428a      	cmp	r2, r1
 80088bc:	d10a      	bne.n	80088d4 <InterruptData::Equals#51500+0x34>
 80088be:	6841      	ldr	r1, [r0, #4]
 80088c0:	6862      	ldr	r2, [r4, #4]
 80088c2:	428a      	cmp	r2, r1
 80088c4:	d106      	bne.n	80088d4 <InterruptData::Equals#51500+0x34>
 80088c6:	6881      	ldr	r1, [r0, #8]
 80088c8:	68a2      	ldr	r2, [r4, #8]
 80088ca:	2000      	movs	r0, #0
 80088cc:	428a      	cmp	r2, r1
 80088ce:	bf08      	it	eq
 80088d0:	2001      	moveq	r0, #1
 80088d2:	bd10      	pop	{r4, pc}
 80088d4:	2000      	movs	r0, #0
 80088d6:	bd10      	pop	{r4, pc}
 80088d8:	17ff8f08 	.word	0x17ff8f08
 80088dc:	e800b9ec 	.word	0xe800b9ec

080088e0 <Handler::.ctor#17407>:
            //

            private Handler( ProcessorARMv7M.IRQn_Type index    ,
                             InterruptPriority         priority ,
                             InterruptSettings         settings ,
                             Callback                  callback )
 80088e0:	b5b0      	push	{r4, r5, r7, lr}
 80088e2:	4604      	mov	r4, r0
 80088e4:	207f      	movs	r0, #127	; 0x7f
 80088e6:	2306      	movs	r3, #6
 80088e8:	e9c4 1002 	strd	r1, r0, [r4, #8]
 80088ec:	4907      	ldr	r1, [pc, #28]	; (800890c <Handler::.ctor#17407+0x2c>)
 80088ee:	e9c4 3204 	strd	r3, r2, [r4, #16]
                m_index    = index;
                m_priority = priority;
                m_settings = settings;
                m_callback = callback;

                m_node     = new RT.KernelNode< Handler >( this );
 80088f2:	4807      	ldr	r0, [pc, #28]	; (8008910 <Handler::.ctor#17407+0x30>)
 80088f4:	4a07      	ldr	r2, [pc, #28]	; (8008914 <Handler::.ctor#17407+0x34>)
 80088f6:	4479      	add	r1, pc
 80088f8:	4408      	add	r0, r1
 80088fa:	4411      	add	r1, r2
 80088fc:	f7f8 f810 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8008900:	4621      	mov	r1, r4
 8008902:	4605      	mov	r5, r0
 8008904:	f000 f808 	bl	8008918 <KernelNode`1::.ctor#23651>
 8008908:	61a5      	str	r5, [r4, #24]
 800890a:	bdb0      	pop	{r4, r5, r7, pc}
 800890c:	17ff8eba 	.word	0x17ff8eba
 8008910:	ffffea64 	.word	0xffffea64
 8008914:	e800ba7c 	.word	0xe800ba7c

08008918 <KernelNode`1::.ctor#23651>:
 8008918:	6101      	str	r1, [r0, #16]
 800891a:	4770      	bx	lr

0800891c <SysTickTimer::.ctor#17424>:
 800891c:	4903      	ldr	r1, [pc, #12]	; (800892c <SysTickTimer::.ctor#17424+0x10>)
 800891e:	4a04      	ldr	r2, [pc, #16]	; (8008930 <SysTickTimer::.ctor#17424+0x14>)
 8008920:	4479      	add	r1, pc
 8008922:	4411      	add	r1, r2
 8008924:	6081      	str	r1, [r0, #8]
 8008926:	2100      	movs	r1, #0
 8008928:	6101      	str	r1, [r0, #16]
 800892a:	4770      	bx	lr
 800892c:	17ff8e90 	.word	0x17ff8e90
 8008930:	ffffeabc 	.word	0xffffeabc

08008934 <SysTickTimer::set_RelativeTimeout#17431>:
                {
                    return m_timeout;
                }

                set
                {
 8008934:	b580      	push	{r7, lr}
 8008936:	4602      	mov	r2, r0
 8008938:	60d1      	str	r1, [r2, #12]
                    m_timeout = value;

                    m_owner.Enable( this );
 800893a:	4611      	mov	r1, r2
 800893c:	6890      	ldr	r0, [r2, #8]
 800893e:	f7ff ff94 	bl	800886a <ContextSwitchTimer::Enable#17376>
 8008942:	bd80      	pop	{r7, pc}

08008944 <Board::get_NCPin#17463>:
 8008944:	f04f 30ff 	mov.w	r0, #4294967295
 8008948:	4770      	bx	lr

0800894a <Board::GetSystemTimerIRQNumber#17467>:
 800894a:	2032      	movs	r0, #50	; 0x32
 800894c:	4770      	bx	lr

0800894e <Device::get_ManagedHeapSize#17473>:
 800894e:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8008952:	4770      	bx	lr

08008954 <Processor::InitializeProcessor#17509>:
        // Helper methods
        //

        [RT.Inline]
        public override void InitializeProcessor()
        {
 8008954:	b580      	push	{r7, lr}
            base.InitializeProcessor();
 8008956:	f7fa ffd5 	bl	8003904 <Processor::InitializeProcessor#17454>

        //--//

        private unsafe void DisableMPU()
        {
            CUSTOM_STUB_DISCO_F746NG_DisableMPU();
 800895a:	f00b f98d 	bl	8013c78 <CUSTOM_STUB_DISCO_F746NG_DisableMPU>
 800895e:	bd80      	pop	{r7, pc}

08008960 <Processor::AllocateProcessorContext#17510>:
            DisableMPU();
        }

        [RT.Inline]
        public override Microsoft.Zelig.Runtime.Processor.Context AllocateProcessorContext()
        {
 8008960:	b510      	push	{r4, lr}
 8008962:	4906      	ldr	r1, [pc, #24]	; (800897c <Processor::AllocateProcessorContext#17510+0x1c>)
            return new Context();
 8008964:	4806      	ldr	r0, [pc, #24]	; (8008980 <Processor::AllocateProcessorContext#17510+0x20>)
 8008966:	4a07      	ldr	r2, [pc, #28]	; (8008984 <Processor::AllocateProcessorContext#17510+0x24>)
 8008968:	4479      	add	r1, pc
 800896a:	4408      	add	r0, r1
 800896c:	4411      	add	r1, r2
 800896e:	f7f7 ffd7 	bl	8000920 <DefaultTypeSystemManager::AllocateObject#5253>
 8008972:	4604      	mov	r4, r0
 8008974:	f7f9 fc18 	bl	80021a8 <Context::.ctor#17523>
 8008978:	4620      	mov	r0, r4
 800897a:	bd10      	pop	{r4, pc}
 800897c:	17ff8e48 	.word	0x17ff8e48
 8008980:	ffffea64 	.word	0xffffea64
 8008984:	e8007f6c 	.word	0xe8007f6c

08008988 <ThreadManager::get_DefaultStackSize#17514>:
 8008988:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800898c:	4770      	bx	lr

0800898e <ContextSwitchTimer::GetTicksForQuantumValue#17518>:
    public sealed class ContextSwitchTimer : Chipset.ContextSwitchTimer
    {
        protected override uint GetTicksForQuantumValue( uint ms )
        {
            // DISCO_F746NG uses the Core clock (216Mhz) for SysTick 
            return (uint)( RT.Configuration.CoreClockFrequency / 1000 ) * ms; 
 800898e:	f644 30c0 	movw	r0, #19392	; 0x4bc0
 8008992:	f2c0 0003 	movt	r0, #3
 8008996:	4348      	muls	r0, r1
 8008998:	4770      	bx	lr

0800899a <KernelNode`1::set_Next#17842>:
 800899a:	6081      	str	r1, [r0, #8]
 800899c:	4770      	bx	lr

0800899e <KernelNode`1::set_Previous#17844>:
 800899e:	60c1      	str	r1, [r0, #12]
 80089a0:	4770      	bx	lr

080089a2 <KernelNode`1::set_Next#18296>:
 80089a2:	6081      	str	r1, [r0, #8]
 80089a4:	4770      	bx	lr

080089a6 <KernelNode`1::set_Previous#18298>:
 80089a6:	60c1      	str	r1, [r0, #12]
 80089a8:	4770      	bx	lr

080089aa <KernelNode`1::InsertBefore#18285>:
        // Helper Methods
        //

        public void InsertBefore( KernelNode< T > place )
        {
            if(m_next != null)
 80089aa:	6882      	ldr	r2, [r0, #8]
 80089ac:	2a00      	cmp	r2, #0
        //--//

        [Inline]
        private void RemoveFromList_NoClear()
        {
            KernelNode< T > next = m_next;
 80089ae:	bf1e      	ittt	ne
 80089b0:	e9d0 2302 	ldrdne	r2, r3, [r0, #8]
 80089b4:	60d3      	strne	r3, [r2, #12]
 80089b6:	609a      	strne	r2, [r3, #8]
            if(m_next != null)
            {
                RemoveFromList_NoClear();
            }

            KernelNode< T > prev = place.m_previous;
 80089b8:	68ca      	ldr	r2, [r1, #12]
 80089ba:	6090      	str	r0, [r2, #8]
 80089bc:	e9c0 1202 	strd	r1, r2, [r0, #8]
 80089c0:	60c8      	str	r0, [r1, #12]
 80089c2:	4770      	bx	lr

080089c4 <KernelNode`1::set_Next#18008>:
 80089c4:	6081      	str	r1, [r0, #8]
 80089c6:	4770      	bx	lr

080089c8 <KernelNode`1::set_Previous#18010>:
 80089c8:	60c1      	str	r1, [r0, #12]
 80089ca:	4770      	bx	lr

080089cc <KernelNode`1::set_Next#18402>:
 80089cc:	6081      	str	r1, [r0, #8]
 80089ce:	4770      	bx	lr

080089d0 <KernelNode`1::set_Previous#18404>:
 80089d0:	60c1      	str	r1, [r0, #12]
 80089d2:	4770      	bx	lr

080089d4 <KernelNode`1::InsertBefore#18391>:
        // Helper Methods
        //

        public void InsertBefore( KernelNode< T > place )
        {
            if(m_next != null)
 80089d4:	6882      	ldr	r2, [r0, #8]
 80089d6:	2a00      	cmp	r2, #0
        //--//

        [Inline]
        private void RemoveFromList_NoClear()
        {
            KernelNode< T > next = m_next;
 80089d8:	bf1e      	ittt	ne
 80089da:	e9d0 2302 	ldrdne	r2, r3, [r0, #8]
 80089de:	60d3      	strne	r3, [r2, #12]
 80089e0:	609a      	strne	r2, [r3, #8]
            if(m_next != null)
            {
                RemoveFromList_NoClear();
            }

            KernelNode< T > prev = place.m_previous;
 80089e2:	68ca      	ldr	r2, [r1, #12]
 80089e4:	6090      	str	r0, [r2, #8]
 80089e6:	e9c0 1202 	strd	r1, r2, [r0, #8]
 80089ea:	60c8      	str	r0, [r1, #12]
 80089ec:	4770      	bx	lr

080089ee <KernelNode`1::set_Next#23602>:
 80089ee:	6081      	str	r1, [r0, #8]
 80089f0:	4770      	bx	lr

080089f2 <KernelNode`1::set_Previous#23604>:
 80089f2:	60c1      	str	r1, [r0, #12]
 80089f4:	4770      	bx	lr

080089f6 <KernelNode`1::set_Next#23663>:
 80089f6:	6081      	str	r1, [r0, #8]
 80089f8:	4770      	bx	lr

080089fa <KernelNode`1::set_Previous#23665>:
 80089fa:	60c1      	str	r1, [r0, #12]
 80089fc:	4770      	bx	lr

080089fe <KernelCircularBuffer`1::DequeueNonblocking#23633>:

            return true;
        }

        public bool DequeueNonblocking( out T val )
        {
 80089fe:	b5b0      	push	{r4, r5, r7, lr}
 8008a00:	460d      	mov	r5, r1
 8008a02:	4604      	mov	r4, r0
            BugCheck.AssertInterruptsOff();
 8008a04:	f7f9 fd48 	bl	8002498 <BugCheck::AssertInterruptsOff#4945>
        public bool IsEmpty
        {
            [Inline]
            get
            {
                return m_count == 0;
 8008a08:	69a0      	ldr	r0, [r4, #24]

        public bool DequeueNonblocking( out T val )
        {
            BugCheck.AssertInterruptsOff();

            if(this.IsEmpty)
 8008a0a:	2800      	cmp	r0, #0
 8008a0c:	bf04      	itt	eq
 8008a0e:	2000      	moveq	r0, #0
 8008a10:	bdb0      	popeq	{r4, r5, r7, pc}
        public bool IsFull
        {
            [Inline]
            get
            {
                return m_count == m_size;
 8008a12:	68a0      	ldr	r0, [r4, #8]
 8008a14:	69a1      	ldr	r1, [r4, #24]
                val = default(T);

                return false;
            }

            if(this.IsFull)
 8008a16:	4281      	cmp	r1, r0
            {
                m_writerEvent.Set();
 8008a18:	bf04      	itt	eq
 8008a1a:	6920      	ldreq	r0, [r4, #16]
 8008a1c:	f7f9 fe8b 	bleq	8002736 <EventWaitHandle::Set#4116>
            }

            int pos = m_readerPos;
 8008a20:	6a21      	ldr	r1, [r4, #32]

            val = m_array[pos];
 8008a22:	68e0      	ldr	r0, [r4, #12]
 8008a24:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8008a28:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8008a2c:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8008a30:	6940      	ldr	r0, [r0, #20]
 8008a32:	e9c5 2300 	strd	r2, r3, [r5]
 8008a36:	60a8      	str	r0, [r5, #8]
        //--//

        [Inline]
        private int NextPosition( int val )
        {
            val = val + 1;
 8008a38:	1c48      	adds	r0, r1, #1

            if(val == m_size)
 8008a3a:	68a1      	ldr	r1, [r4, #8]
            {
                return 0;
 8008a3c:	4288      	cmp	r0, r1
 8008a3e:	bf08      	it	eq
 8008a40:	2000      	moveq	r0, #0
 8008a42:	6220      	str	r0, [r4, #32]
            int pos = m_readerPos;

            val = m_array[pos];

            m_readerPos = NextPosition( pos );
            m_count--;
 8008a44:	69a0      	ldr	r0, [r4, #24]
 8008a46:	3801      	subs	r0, #1
 8008a48:	61a0      	str	r0, [r4, #24]
 8008a4a:	d102      	bne.n	8008a52 <KernelCircularBuffer`1::DequeueNonblocking#23633+0x54>

            if(this.IsEmpty)
            {
                m_readerEvent.Reset();
 8008a4c:	6960      	ldr	r0, [r4, #20]
 8008a4e:	f7fd ff36 	bl	80068be <EventWaitHandle::Reset#4115>
 8008a52:	2001      	movs	r0, #1
 8008a54:	bdb0      	pop	{r4, r5, r7, pc}
 8008a56:	46c0      	nop			; (mov r8, r8)
 8008a58:	46c0      	nop			; (mov r8, r8)
 8008a5a:	46c0      	nop			; (mov r8, r8)
 8008a5c:	46c0      	nop			; (mov r8, r8)
 8008a5e:	46c0      	nop			; (mov r8, r8)

08008a60 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1>:
 8008a60:	0004 0000 8c80 0800 0008 0000 0002 0000     ................
 8008a70:	d3d0 0800 93a4 0800 ab44 abab d400 0800     ........D.......
 8008a80:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08008a90 <System.String_2>:
 8008a90:	0004 0000 8a60 0800 000b 0000 000b 0000     ....`...........
 8008aa0:	0043 0046 0053 0052 003d 0030 0078 0025     C.F.S.R.=.0.x.%.
 8008ab0:	0030 0038 0078 46c0 46c0 46c0 46c0 46c0     0.8.x..F.F.F.F.F

08008ac0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_3>:
 8008ac0:	0004 0000 8c80 0800 0040 0000 0000 0000     ........@.......
 8008ad0:	d420 0800 d44c 0800 ab44 abab d460 0800      ...L...D...`...
 8008ae0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08008af0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_5>:
 8008af0:	0004 0000 8c80 0800 0000 0000 0000 0000     ................
 8008b00:	d4d0 0800 d4fc 0800 ab44 abab d510 0800     ........D.......
 8008b10:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08008b20 <Microsoft.Zelig.Runtime.TypeSystem.VTable_7>:
 8008b20:	0004 0000 8c80 0800 00c4 0000 0000 0000     ................
 8008b30:	d550 0800 d57c 0800 ab44 abab d590 0800     P...|...D.......
 8008b40:	8d64 0800                                   d...

08008b44 <Microsoft.CortexM3OnMBED.Memory_9>:
 8008b44:	0004 0000 d5e0 0800 d634 0800               ........4...

08008b50 <Microsoft.Zelig.DISCO_F746NG.Device_15>:
 8008b50:	0004 0000 d730 0800                         ....0...

08008b58 <Microsoft.Zelig.DISCO_F746NG.Processor_20>:
 8008b58:	0004 0000 d820 0800                         .... ...

08008b60 <Microsoft.Zelig.Runtime.TargetPlatform.ARMv7.ProcessorARMv7M.MethodWrapper_24>:
 8008b60:	0004 0000 d8b0 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

08008b70 <Microsoft.Zelig.Runtime.TypeSystem.VTable_25>:
 8008b70:	0004 0000 8c80 0800 0004 0000 0004 0000     ................
 8008b80:	d8e0 0800 d910 0800 abc6 abab d920 0800     ............ ...
 8008b90:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08008ba0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_28>:
 8008ba0:	0004 0000 8c80 0800 0004 0000 0004 0000     ................
 8008bb0:	d940 0800 d970 0800 abc6 abab d980 0800     @...p...........
 8008bc0:	8d64 0800                                   d...

08008bc4 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation[]_29>:
 8008bc4:	0004 0000 8ba0 0800 0000 0000               ............

08008bd0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_30>:
 8008bd0:	0004 0000 8c80 0800 0004 0000 0004 0000     ................
 8008be0:	d9a0 0800 d9d0 0800 abc6 abab d9e0 0800     ................
 8008bf0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08008c00 <Microsoft.Zelig.Runtime.TypeSystem.VTable_32>:
 8008c00:	0004 0000 8c80 0800 0004 0000 0002 0000     ................
 8008c10:	da00 0800 da30 0800 abc6 abab da40 0800     ....0.......@...
 8008c20:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08008c30 <Microsoft.Zelig.Runtime.TypeSystem.VTable_34>:
 8008c30:	0004 0000 8c80 0800 0004 0000 0004 0000     ................
 8008c40:	da60 0800 da90 0800 abc6 abab daa0 0800     `...............
 8008c50:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08008c60 <System.String_35>:
 8008c60:	0004 0000 8a60 0800 0001 0000 0001 0000     ....`...........
 8008c70:	0031 46c0 46c0 46c0 46c0 46c0 46c0 46c0     1..F.F.F.F.F.F.F

08008c80 <Microsoft.Zelig.Runtime.TypeSystem.VTable_40>:
 8008c80:	0004 0000 8c80 0800 001c 0000 0000 0000     ................
 8008c90:	dac0 0800 daec 0800 ab44 abab db00 0800     ........D.......
 8008ca0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08008cb0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_41>:
 8008cb0:	0004 0000 db20 0800 ab12 abab 2001 0010     .... ........ ..
 8008cc0:	0000 0000 db50 0800 db90 0800 0000 0000     ....P...........
 8008cd0:	0000 0000 9b80 0800 8d70 0800               ........p...

08008cdc <System.RuntimeType_42>:
 8008cdc:	0004 0000 9380 0800 8d70 0800 46c0 46c0     ........p....F.F
 8008cec:	46c0 46c0                                   .F.F

08008cf0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_43>:
 8008cf0:	0004 0000 8c80 0800 0004 0000 0004 0000     ................
 8008d00:	dbb0 0800 dbe0 0800 abc6 abab dbf0 0800     ................
 8008d10:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08008d20 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_44>:
 8008d20:	0004 0000 8cf0 0800 0004 0000 08e1 0800     ................
 8008d30:	08ed 0800 08f9 0800 0901 0800 46c0 46c0     .............F.F

08008d40 <Microsoft.Zelig.Runtime.TypeSystem.VTable_45>:
 8008d40:	0004 0000 8c80 0800 0004 0000 0008 0000     ................
 8008d50:	dc10 0800 dc40 0800 abc6 abab dc50 0800     ....@.......P...
 8008d60:	8d64 0800                                   d...

08008d64 <Microsoft.Zelig.Runtime.TypeSystem.VTable.InterfaceMap[]_46>:
 8008d64:	0004 0000 8d40 0800 0000 0000               ....@.......

08008d70 <Microsoft.Zelig.Runtime.TypeSystem.VTable_47>:
 8008d70:	0004 0000 8c80 0800 0008 0000 0000 0000     ................
 8008d80:	8cb0 0800 8cdc 0800 ab44 abab 8d20 0800     ........D... ...
 8008d90:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08008da0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_48>:
 8008da0:	0004 0000 db20 0800 ab12 abab 2001 0010     .... ........ ..
 8008db0:	0000 0000 dc70 0800 db90 0800 0000 0000     ....p...........
 8008dc0:	0000 0000 dcb0 0800 8e00 0800               ............

08008dcc <System.RuntimeType_49>:
 8008dcc:	0004 0000 9380 0800 8e00 0800 46c0 46c0     .............F.F
 8008ddc:	46c0 46c0                                   .F.F

08008de0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_50>:
 8008de0:	0004 0000 8cf0 0800 0004 0000 08e1 0800     ................
 8008df0:	08ed 0800 08f9 0800 09bd 0800 46c0 46c0     .............F.F

08008e00 <Microsoft.Zelig.Runtime.TypeSystem.VTable_51>:
 8008e00:	0004 0000 8c80 0800 0004 0000 0000 0000     ................
 8008e10:	8da0 0800 8dcc 0800 ab44 abab 8de0 0800     ........D.......
 8008e20:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08008e30 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_52>:
 8008e30:	0004 0000 db20 0800 ab12 abab 2101 0010     .... ........!..
 8008e40:	0000 0000 dce0 0800 db90 0800 0000 0000     ................
 8008e50:	0000 0000 dcb0 0800 8e90 0800               ............

08008e5c <System.RuntimeType_53>:
 8008e5c:	0004 0000 9380 0800 8e90 0800 46c0 46c0     .............F.F
 8008e6c:	46c0 46c0                                   .F.F

08008e70 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_54>:
 8008e70:	0004 0000 8cf0 0800 0004 0000 08e1 0800     ................
 8008e80:	08ed 0800 08f9 0800 09bd 0800 46c0 46c0     .............F.F

08008e90 <Microsoft.Zelig.Runtime.TypeSystem.VTable_55>:
 8008e90:	0004 0000 8c80 0800 0004 0000 0000 0000     ................
 8008ea0:	8e30 0800 8e5c 0800 ab44 abab 8e70 0800     0...\...D...p...
 8008eb0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08008ec0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_56>:
 8008ec0:	0004 0000 db20 0800 ab12 abab 0101 0010     .... ...........
 8008ed0:	0000 0000 dd20 0800 dd80 0800 0000 0000     .... ...........
 8008ee0:	0000 0000 a1a0 0800 8f40 0800               ........@...

08008eec <System.RuntimeType_57>:
 8008eec:	0004 0000 9380 0800 8f40 0800 46c0 46c0     ........@....F.F
 8008efc:	46c0 46c0                                   .F.F

08008f00 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_58>:
 8008f00:	0004 0000 8cf0 0800 000a 0000 09e1 0800     ................
 8008f10:	0a35 0800 0a43 0800 0a51 0800 0a99 0800     5...C...Q.......
 8008f20:	0a9d 0800 0a9f 0800 0aad 0800 0abd 0800     ................
 8008f30:	0ae9 0800 46c0 46c0 46c0 46c0 46c0 46c0     .....F.F.F.F.F.F

08008f40 <Microsoft.Zelig.Runtime.TypeSystem.VTable_59>:
 8008f40:	0004 0000 8c80 0800 0028 0000 0000 0000     ........(.......
 8008f50:	8ec0 0800 8eec 0800 ab44 abab 8f00 0800     ........D.......
 8008f60:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08008f70 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_60>:
 8008f70:	0004 0000 db20 0800 ab12 abab 0101 0010     .... ...........
 8008f80:	0000 0000 dde0 0800 dd80 0800 0000 0000     ................
 8008f90:	0000 0000 a1a0 0800 8ff0 0800               ............

08008f9c <System.RuntimeType_61>:
 8008f9c:	0004 0000 9380 0800 8ff0 0800 46c0 46c0     .............F.F
 8008fac:	46c0 46c0                                   .F.F

08008fb0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_62>:
 8008fb0:	0004 0000 8cf0 0800 000a 0000 0b1d 0800     ................
 8008fc0:	0b71 0800 0b7b 0800 0b85 0800 0a99 0800     q...{...........
 8008fd0:	0a9d 0800 0a9f 0800 0aad 0800 0be1 0800     ................
 8008fe0:	0cb5 0800 46c0 46c0 46c0 46c0 46c0 46c0     .....F.F.F.F.F.F

08008ff0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_63>:
 8008ff0:	0004 0000 8c80 0800 0030 0000 0000 0000     ........0.......
 8009000:	8f70 0800 8f9c 0800 ab44 abab 8fb0 0800     p.......D.......
 8009010:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08009020 <Microsoft.Zelig.Runtime.TypeSystem.BoxedValueTypeRepresentation_64>:
 8009020:	0004 0000 c050 0800 ab05 abab 2109 0010     ....P........!..
	...
 8009044:	de40 0800 9080 0800 de70 0800               @.......p...

08009050 <System.RuntimeType_65>:
 8009050:	0004 0000 9380 0800 9080 0800 46c0 46c0     .............F.F

08009060 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_66>:
 8009060:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 8009070:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

08009080 <Microsoft.Zelig.Runtime.TypeSystem.VTable_67>:
 8009080:	0004 0000 8c80 0800 0001 0000 0000 0000     ................
 8009090:	9020 0800 9050 0800 ab00 abab 9060 0800      ...P.......`...
 80090a0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

080090b0 <Microsoft.Zelig.Runtime.TypeSystem.BoxedValueTypeRepresentation_68>:
 80090b0:	0004 0000 c050 0800 ab03 abab 2109 0010     ....P........!..
	...
 80090d4:	de40 0800 9110 0800 dea0 0800               @...........

080090e0 <System.RuntimeType_69>:
 80090e0:	0004 0000 9380 0800 9110 0800 46c0 46c0     .............F.F

080090f0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_70>:
 80090f0:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 8009100:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

08009110 <Microsoft.Zelig.Runtime.TypeSystem.VTable_71>:
 8009110:	0004 0000 8c80 0800 0002 0000 0000 0000     ................
 8009120:	90b0 0800 90e0 0800 ab00 abab 90f0 0800     ................
 8009130:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08009140 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_72>:
 8009140:	0004 0000 ded0 0800 ab12 abab 2081 0010     ............. ..
 8009150:	0000 0000 df00 0800 db90 0800 0000 0000     ................
 8009160:	0000 0000 a5e0 0800 91a0 0800               ............

0800916c <System.RuntimeType_73>:
 800916c:	0004 0000 9380 0800 91a0 0800 46c0 46c0     .............F.F
 800917c:	46c0 46c0                                   .F.F

08009180 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_74>:
 8009180:	0004 0000 8cf0 0800 0004 0000 0d8d 0800     ................
 8009190:	0fb9 0800 101b 0800 1025 0800 46c0 46c0     ........%....F.F

080091a0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_75>:
 80091a0:	0004 0000 8c80 0800 0008 0000 0000 0000     ................
 80091b0:	9140 0800 916c 0800 ab44 abab 9180 0800     @...l...D.......
 80091c0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

080091d0 <Microsoft.Zelig.Runtime.TypeSystem.BoxedValueTypeRepresentation_76>:
 80091d0:	0004 0000 c050 0800 ab08 abab 2109 0010     ....P........!..
	...
 80091f4:	de40 0800 9230 0800 df20 0800               @...0... ...

08009200 <System.RuntimeType_77>:
 8009200:	0004 0000 9380 0800 9230 0800 46c0 46c0     ........0....F.F

08009210 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_78>:
 8009210:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 8009220:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

08009230 <Microsoft.Zelig.Runtime.TypeSystem.VTable_79>:
 8009230:	0004 0000 8c80 0800 0004 0000 0000 0000     ................
 8009240:	91d0 0800 9200 0800 ab00 abab 9210 0800     ................
 8009250:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08009260 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_80>:
 8009260:	0004 0000 ded0 0800 ab12 abab 2081 0010     ............. ..
 8009270:	0000 0000 df50 0800 db90 0800 0000 0000     ....P...........
 8009280:	0000 0000 9140 0800 92c0 0800               ....@.......

0800928c <System.RuntimeType_81>:
 800928c:	0004 0000 9380 0800 92c0 0800 46c0 46c0     .............F.F
 800929c:	46c0 46c0                                   .F.F

080092a0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_82>:
 80092a0:	0004 0000 8cf0 0800 0004 0000 0d8d 0800     ................
 80092b0:	11f5 0800 1249 0800 1283 0800 46c0 46c0     ....I........F.F

080092c0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_83>:
 80092c0:	0004 0000 8c80 0800 000c 0000 0000 0000     ................
 80092d0:	9260 0800 928c 0800 ab44 abab 92a0 0800     `.......D.......
 80092e0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

080092f0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_84>:
 80092f0:	0004 0000 db20 0800 ab12 abab 2001 0010     .... ........ ..
 8009300:	0000 0000 df90 0800 db90 0800 0000 0000     ................
 8009310:	0000 0000 9b80 0800 9350 0800               ........P...

0800931c <System.RuntimeType_85>:
 800931c:	0004 0000 9380 0800 9350 0800 46c0 46c0     ........P....F.F
 800932c:	46c0 46c0                                   .F.F

08009330 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_86>:
 8009330:	0004 0000 8cf0 0800 0004 0000 08e1 0800     ................
 8009340:	08ed 0800 08f9 0800 0901 0800 46c0 46c0     .............F.F

08009350 <Microsoft.Zelig.Runtime.TypeSystem.VTable_87>:
 8009350:	0004 0000 8c80 0800 0008 0000 0000 0000     ................
 8009360:	92f0 0800 931c 0800 ab44 abab 9330 0800     ........D...0...
 8009370:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08009380 <Microsoft.Zelig.Runtime.TypeSystem.VTable_88>:
 8009380:	0004 0000 8c80 0800 0004 0000 0000 0000     ................
 8009390:	dfe0 0800 e00c 0800 ab44 abab e020 0800     ........D... ...
 80093a0:	8d64 0800                                   d...

080093a4 <System.RuntimeType_89>:
 80093a4:	0004 0000 9380 0800 8a60 0800               ........`...

080093b0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_90>:
 80093b0:	0004 0000 db20 0800 ab12 abab 2101 0010     .... ........!..
 80093c0:	0000 0000 e050 0800 e080 0800 0000 0000     ....P...........
 80093d0:	0000 0000 a5e0 0800 9410 0800               ............

080093dc <System.RuntimeType_91>:
 80093dc:	0004 0000 9380 0800 9410 0800 46c0 46c0     .............F.F
 80093ec:	46c0 46c0                                   .F.F

080093f0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_92>:
 80093f0:	0004 0000 8cf0 0800 0003 0000 17b9 0800     ................
 8009400:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

08009410 <Microsoft.Zelig.Runtime.TypeSystem.VTable_93>:
 8009410:	0004 0000 8c80 0800 000c 0000 0000 0000     ................
 8009420:	93b0 0800 93dc 0800 ab44 abab 93f0 0800     ........D.......
 8009430:	8d64 0800                                   d...

08009434 <System.String_94>:
 8009434:	0004 0000 8a60 0800 0000 0000 0000 0000     ....`...........
 8009444:	46c0 46c0 46c0 46c0 46c0 46c0               .F.F.F.F.F.F

08009450 <System.Char[]_95>:
 8009450:	0004 0000 8c00 0800 0019 0000 0009 000a     ................
 8009460:	000b 000c 000d 0020 0085 00a0 1680 2000     ...... ........ 
 8009470:	2001 2002 2003 2004 2005 2006 2007 2008     . . . . . . . . 
 8009480:	2009 200a 200b 2028 2029 3000 feff 46c0     . . . ( ) .0...F

08009490 <Microsoft.Zelig.Runtime.TypeSystem.BoxedValueTypeRepresentation_100>:
 8009490:	0004 0000 c050 0800 ab09 abab 2109 0010     ....P........!..
	...
 80094b4:	de40 0800 94f0 0800 e0b0 0800               @...........

080094c0 <System.RuntimeType_101>:
 80094c0:	0004 0000 9380 0800 94f0 0800 46c0 46c0     .............F.F

080094d0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_102>:
 80094d0:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 80094e0:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

080094f0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_103>:
 80094f0:	0004 0000 8c80 0800 0004 0000 0000 0000     ................
 8009500:	9490 0800 94c0 0800 ab00 abab 94d0 0800     ................
 8009510:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08009520 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_104>:
 8009520:	0004 0000 db20 0800 ab12 abab 2001 0010     .... ........ ..
 8009530:	0000 0000 e0e0 0800 e120 0800 0000 0000     ........ .......
 8009540:	0000 0000 dcb0 0800 9580 0800               ............

0800954c <System.RuntimeType_105>:
 800954c:	0004 0000 9380 0800 9580 0800 46c0 46c0     .............F.F
 800955c:	46c0 46c0                                   .F.F

08009560 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_106>:
 8009560:	0004 0000 8cf0 0800 0004 0000 08e1 0800     ................
 8009570:	08ed 0800 08f9 0800 09bd 0800 46c0 46c0     .............F.F

08009580 <Microsoft.Zelig.Runtime.TypeSystem.VTable_107>:
 8009580:	0004 0000 8c80 0800 0004 0000 0000 0000     ................
 8009590:	9520 0800 954c 0800 ab44 abab 9560 0800      ...L...D...`...
 80095a0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

080095b0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_108>:
 80095b0:	0004 0000 db20 0800 ab12 abab 0002 0010     .... ...........
 80095c0:	0000 0000 e150 0800 9434 0800 ad70 0800     ....P...4...p...
 80095d0:	0000 0000 a5e0 0800 9670 0800               ........p...

080095dc <System.RuntimeType_109>:
 80095dc:	0004 0000 9380 0800 9670 0800 46c0 46c0     ........p....F.F
 80095ec:	46c0 46c0                                   .F.F

080095f0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_110>:
 80095f0:	0004 0000 8cf0 0800 0004 0000 0d8d 0800     ................
 8009600:	08ed 0800 08f9 0800 209d 0800 46c0 46c0     ......... ...F.F

08009610 <Microsoft.Zelig.Runtime.TypeSystem.VTable_111>:
 8009610:	0004 0000 8c80 0800 0000 0000 0000 0000     ................
 8009620:	e170 0800 e19c 0800 ab43 abab e1a8 0800     p.......C.......
 8009630:	e1d0 0800                                   ....

08009634 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_112>:
 8009634:	0004 0000 8cf0 0800 0001 0000 209d 0800     ............. ..
 8009644:	46c0 46c0 46c0 46c0 46c0 46c0               .F.F.F.F.F.F

08009650 <Microsoft.Zelig.Runtime.TypeSystem.VTable.InterfaceMap[]_113>:
 8009650:	0004 0000 8d40 0800 0001 0000 9610 0800     ....@...........
 8009660:	9634 0800 46c0 46c0 46c0 46c0 46c0 46c0     4....F.F.F.F.F.F

08009670 <Microsoft.Zelig.Runtime.TypeSystem.VTable_114>:
 8009670:	0004 0000 8c80 0800 0014 0000 0000 0000     ................
 8009680:	95b0 0800 95dc 0800 ab44 abab 95f0 0800     ........D.......
 8009690:	9650 0800 46c0 46c0 46c0 46c0 46c0 46c0     P....F.F.F.F.F.F

080096a0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_115>:
 80096a0:	0004 0000 db20 0800 ab12 abab 0002 0010     .... ...........
 80096b0:	0000 0000 e1f0 0800 9434 0800 e210 0800     ........4.......
 80096c0:	0000 0000 e240 0800 9720 0800               ....@... ...

080096cc <System.RuntimeType_116>:
 80096cc:	0004 0000 9380 0800 9720 0800 46c0 46c0     ........ ....F.F
 80096dc:	46c0 46c0                                   .F.F

080096e0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_117>:
 80096e0:	0004 0000 8cf0 0800 000b 0000 0d8d 0800     ................
 80096f0:	08ed 0800 08f9 0800 20cd 0800 20d5 0800     ......... ... ..
 8009700:	2151 0800 2189 0800 2197 0800 219b 0800     Q!...!...!...!..
 8009710:	219f 0800 21a7 0800 46c0 46c0 46c0 46c0     .!...!...F.F.F.F

08009720 <Microsoft.Zelig.Runtime.TypeSystem.VTable_118>:
 8009720:	0004 0000 8c80 0800 0009 0000 0000 0000     ................
 8009730:	96a0 0800 96cc 0800 ab44 abab 96e0 0800     ........D.......
 8009740:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08009750 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_119>:
 8009750:	0004 0000 db20 0800 ab12 abab 0101 0010     .... ...........
 8009760:	0000 0000 e270 0800 e2a0 0800 0000 0000     ....p...........
 8009770:	e2e0 0800 a5e0 0800 97b0 0800               ............

0800977c <System.RuntimeType_120>:
 800977c:	0004 0000 9380 0800 97b0 0800 46c0 46c0     .............F.F
 800978c:	46c0 46c0                                   .F.F

08009790 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_121>:
 8009790:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 80097a0:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

080097b0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_122>:
 80097b0:	0004 0000 8c80 0800 000c 0000 0000 0000     ................
 80097c0:	9750 0800 977c 0800 ab44 abab 9790 0800     P...|...D.......
 80097d0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

080097e0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_123>:
 80097e0:	0004 0000 db20 0800 ab12 abab 0101 0010     .... ...........
 80097f0:	0000 0000 e2f0 0800 e2a0 0800 0000 0000     ................
 8009800:	e318 0800 a5e0 0800 9840 0800               ........@...

0800980c <System.RuntimeType_124>:
 800980c:	0004 0000 9380 0800 9840 0800 46c0 46c0     ........@....F.F
 800981c:	46c0 46c0                                   .F.F

08009820 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_125>:
 8009820:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 8009830:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

08009840 <Microsoft.Zelig.Runtime.TypeSystem.VTable_126>:
 8009840:	0004 0000 8c80 0800 0008 0000 0000 0000     ................
 8009850:	97e0 0800 980c 0800 ab44 abab 9820 0800     ........D... ...
 8009860:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08009870 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_127>:
 8009870:	0004 0000 db20 0800 ab12 abab 0101 0010     .... ...........
 8009880:	0000 0000 e2f0 0800 e2a0 0800 0000 0000     ................
 8009890:	e328 0800 a5e0 0800 98d0 0800               (...........

0800989c <System.RuntimeType_128>:
 800989c:	0004 0000 9380 0800 98d0 0800 46c0 46c0     .............F.F
 80098ac:	46c0 46c0                                   .F.F

080098b0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_129>:
 80098b0:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 80098c0:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

080098d0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_130>:
 80098d0:	0004 0000 8c80 0800 0008 0000 0000 0000     ................
 80098e0:	9870 0800 989c 0800 ab44 abab 98b0 0800     p.......D.......
 80098f0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08009900 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_131>:
 8009900:	0004 0000 db20 0800 ab12 abab 0101 0000     .... ...........
 8009910:	0000 0000 e340 0800 e120 0800 0000 0000     ....@... .......
 8009920:	0000 0000 9260 0800 9960 0800               ....`...`...

0800992c <System.RuntimeType_132>:
 800992c:	0004 0000 9380 0800 9960 0800 46c0 46c0     ........`....F.F
 800993c:	46c0 46c0                                   .F.F

08009940 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_133>:
 8009940:	0004 0000 8cf0 0800 0005 0000 0d8d 0800     ................
 8009950:	11f5 0800 1249 0800 1283 0800 2265 0800     ....I.......e"..

08009960 <Microsoft.Zelig.Runtime.TypeSystem.VTable_134>:
 8009960:	0004 0000 8c80 0800 000c 0000 0000 0000     ................
 8009970:	9900 0800 992c 0800 ab44 abab 9940 0800     ....,...D...@...
 8009980:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08009990 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_145>:
 8009990:	0004 0000 db20 0800 ab12 abab 0101 0010     .... ...........
 80099a0:	0000 0000 e370 0800 e120 0800 0000 0000     ....p... .......
 80099b0:	0000 0000 e390 0800 99f0 0800               ............

080099bc <System.RuntimeType_146>:
 80099bc:	0004 0000 9380 0800 99f0 0800 46c0 46c0     .............F.F
 80099cc:	46c0 46c0                                   .F.F

080099d0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_147>:
 80099d0:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 80099e0:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

080099f0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_148>:
 80099f0:	0004 0000 8c80 0800 0048 0000 0000 0000     ........H.......
 8009a00:	9990 0800 99bc 0800 ab44 abab 99d0 0800     ........D.......
 8009a10:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08009a20 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_149>:
 8009a20:	0004 0000 db20 0800 ab12 abab 0101 0010     .... ...........
 8009a30:	0000 0000 e2f0 0800 e2a0 0800 0000 0000     ................
 8009a40:	e3bc 0800 a5e0 0800 9a80 0800               ............

08009a4c <System.RuntimeType_150>:
 8009a4c:	0004 0000 9380 0800 9a80 0800 46c0 46c0     .............F.F
 8009a5c:	46c0 46c0                                   .F.F

08009a60 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_151>:
 8009a60:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 8009a70:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

08009a80 <Microsoft.Zelig.Runtime.TypeSystem.VTable_152>:
 8009a80:	0004 0000 8c80 0800 0008 0000 0000 0000     ................
 8009a90:	9a20 0800 9a4c 0800 ab44 abab 9a60 0800      ...L...D...`...
 8009aa0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08009ab0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_154>:
 8009ab0:	0004 0000 db20 0800 ab12 abab 0001 0014     .... ...........
 8009ac0:	0000 0000 e3d0 0800 e120 0800 0000 0000     ........ .......
 8009ad0:	0000 0000 e400 0800 9b50 0800               ........P...

08009adc <System.RuntimeType_155>:
 8009adc:	0004 0000 9380 0800 9b50 0800 46c0 46c0     ........P....F.F
 8009aec:	46c0 46c0                                   .F.F

08009af0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_156>:
 8009af0:	0004 0000 8cf0 0800 0006 0000 0d8d 0800     ................
 8009b00:	08ed 0800 08f9 0800 2a37 0800 2a4d 0800     ........7*..M*..
 8009b10:	2a5f 0800                                   _*..

08009b14 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_157>:
 8009b14:	0004 0000 8cf0 0800 0001 0000 2a85 0800     .............*..
 8009b24:	46c0 46c0 46c0 46c0 46c0 46c0               .F.F.F.F.F.F

08009b30 <Microsoft.Zelig.Runtime.TypeSystem.VTable.InterfaceMap[]_158>:
 8009b30:	0004 0000 8d40 0800 0001 0000 9610 0800     ....@...........
 8009b40:	9b14 0800 46c0 46c0 46c0 46c0 46c0 46c0     .....F.F.F.F.F.F

08009b50 <Microsoft.Zelig.Runtime.TypeSystem.VTable_159>:
 8009b50:	0004 0000 8c80 0800 000c 0000 0000 0000     ................
 8009b60:	9ab0 0800 9adc 0800 ab44 abab 9af0 0800     ........D.......
 8009b70:	9b30 0800 46c0 46c0 46c0 46c0 46c0 46c0     0....F.F.F.F.F.F

08009b80 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_160>:
 8009b80:	0004 0000 db20 0800 ab12 abab 2001 0010     .... ........ ..
 8009b90:	0000 0000 e430 0800 db90 0800 0000 0000     ....0...........
 8009ba0:	0000 0000 dcb0 0800 9be0 0800               ............

08009bac <System.RuntimeType_161>:
 8009bac:	0004 0000 9380 0800 9be0 0800 46c0 46c0     .............F.F
 8009bbc:	46c0 46c0                                   .F.F

08009bc0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_162>:
 8009bc0:	0004 0000 8cf0 0800 0004 0000 08e1 0800     ................
 8009bd0:	08ed 0800 08f9 0800 0901 0800 46c0 46c0     .............F.F

08009be0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_163>:
 8009be0:	0004 0000 8c80 0800 0008 0000 0000 0000     ................
 8009bf0:	9b80 0800 9bac 0800 ab44 abab 9bc0 0800     ........D.......
 8009c00:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08009c10 <System.String_164>:
 8009c10:	0004 0000 8a60 0800 002f 0000 002f 0000     ....`.../.../...
 8009c20:	0052 0065 0071 0075 0065 0073 0074 0020     R.e.q.u.e.s.t. .
 8009c30:	0053 0056 0043 0020 0064 006f 0065 0073     S.V.C. .d.o.e.s.
 8009c40:	0020 006e 006f 0074 0020 0065 0078 0069      .n.o.t. .e.x.i.
 8009c50:	0073 0074 0073 0020 006f 0072 0020 0069     s.t.s. .o.r. .i.
 8009c60:	0073 0020 006e 006f 0074 0020 0073 0075     s. .n.o.t. .s.u.
 8009c70:	0070 0070 006f 0072 0074 0065 0064 46c0     p.p.o.r.t.e.d..F

08009c80 <System.String_165>:
 8009c80:	0004 0000 8a60 0800 000c 0000 000c 0000     ....`...........
 8009c90:	0043 0046 0053 0052 0020 003d 0030 0078     C.F.S.R. .=.0.x.
 8009ca0:	0025 0030 0038 0078 46c0 46c0 46c0 46c0     %.0.8.x..F.F.F.F

08009cb0 <System.String_166>:
 8009cb0:	0004 0000 8a60 0800 000c 0000 000c 0000     ....`...........
 8009cc0:	004d 004d 0046 0041 0052 003d 0030 0078     M.M.F.A.R.=.0.x.
 8009cd0:	0025 0030 0038 0078 46c0 46c0 46c0 46c0     %.0.8.x..F.F.F.F

08009ce0 <System.String_167>:
 8009ce0:	0004 0000 8a60 0800 000c 0000 000c 0000     ....`...........
 8009cf0:	0050 0043 0020 0020 0020 003d 0030 0078     P.C. . . .=.0.x.
 8009d00:	0025 0030 0038 0078 46c0 46c0 46c0 46c0     %.0.8.x..F.F.F.F

08009d10 <System.String_168>:
 8009d10:	0004 0000 8a60 0800 000b 0000 000b 0000     ....`...........
 8009d20:	0042 0046 0041 0052 003d 0030 0078 0025     B.F.A.R.=.0.x.%.
 8009d30:	0030 0038 0078 46c0 46c0 46c0 46c0 46c0     0.8.x..F.F.F.F.F

08009d40 <System.String_169>:
 8009d40:	0004 0000 8a60 0800 000b 0000 000b 0000     ....`...........
 8009d50:	0050 0043 0020 0020 003d 0030 0078 0025     P.C. . .=.0.x.%.
 8009d60:	0030 0038 0078 46c0 46c0 46c0 46c0 46c0     0.8.x..F.F.F.F.F

08009d70 <System.String_170>:
 8009d70:	0004 0000 8a60 0800 004a 0000 004a 0000     ....`...J...J...
 8009d80:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 8009d90:	0074 002e 005a 0065 006c 0069 0067 002e     t...Z.e.l.i.g...
 8009da0:	0052 0075 006e 0074 0069 006d 0065 002e     R.u.n.t.i.m.e...
 8009db0:	0054 0061 0072 0067 0065 0074 0050 006c     T.a.r.g.e.t.P.l.
 8009dc0:	0061 0074 0066 006f 0072 006d 002e 0041     a.t.f.o.r.m...A.
 8009dd0:	0052 004d 0076 0037 002e 0050 0072 006f     R.M.v.7...P.r.o.
 8009de0:	0063 0065 0073 0073 006f 0072 0041 0052     c.e.s.s.o.r.A.R.
 8009df0:	004d 0076 0037 004d 002e 004d 0065 0074     M.v.7.M...M.e.t.
 8009e00:	0068 006f 0064 0057 0072 0061 0070 0070     h.o.d.W.r.a.p.p.
 8009e10:	0065 0072 46c0 46c0 46c0 46c0 46c0 46c0     e.r..F.F.F.F.F.F

08009e20 <System.String_171>:
 8009e20:	0004 0000 8a60 0800 00b4 0000 00b4 0000     ....`...........
 8009e30:	0076 006f 0069 0064 0020 004d 0069 0063     v.o.i.d. .M.i.c.
 8009e40:	0072 006f 0073 006f 0066 0074 002e 005a     r.o.s.o.f.t...Z.
 8009e50:	0065 006c 0069 0067 002e 0052 0075 006e     e.l.i.g...R.u.n.
 8009e60:	0074 0069 006d 0065 002e 0054 0061 0072     t.i.m.e...T.a.r.
 8009e70:	0067 0065 0074 0050 006c 0061 0074 0066     g.e.t.P.l.a.t.f.
 8009e80:	006f 0072 006d 002e 0041 0052 004d 0076     o.r.m...A.R.M.v.
 8009e90:	0037 002e 0050 0072 006f 0063 0065 0073     7...P.r.o.c.e.s.
 8009ea0:	0073 006f 0072 0041 0052 004d 0076 0037     s.o.r.A.R.M.v.7.
 8009eb0:	004d 002e 004d 0065 0074 0068 006f 0064     M...M.e.t.h.o.d.
 8009ec0:	0057 0072 0061 0070 0070 0065 0072 003a     W.r.a.p.p.e.r.:.
 8009ed0:	003a 0050 0072 006f 006c 006f 0067 0075     :.P.r.o.l.o.g.u.
 8009ee0:	0065 0028 0073 0074 0072 0069 006e 0067     e.(.s.t.r.i.n.g.
 8009ef0:	002c 0073 0074 0072 0069 006e 0067 002c     ,.s.t.r.i.n.g.,.
 8009f00:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 8009f10:	0074 002e 005a 0065 006c 0069 0067 002e     t...Z.e.l.i.g...
 8009f20:	0052 0075 006e 0074 0069 006d 0065 002e     R.u.n.t.i.m.e...
 8009f30:	0054 0079 0070 0065 0053 0079 0073 0074     T.y.p.e.S.y.s.t.
 8009f40:	0065 006d 002e 004d 0065 0074 0068 006f     e.m...M.e.t.h.o.
 8009f50:	0064 0052 0065 0070 0072 0065 0073 0065     d.R.e.p.r.e.s.e.
 8009f60:	006e 0074 0061 0074 0069 006f 006e 002e     n.t.a.t.i.o.n...
 8009f70:	0042 0075 0069 006c 0064 0054 0069 006d     B.u.i.l.d.T.i.m.
 8009f80:	0065 0041 0074 0074 0072 0069 0062 0075     e.A.t.t.r.i.b.u.
 8009f90:	0074 0065 0073 0029 46c0 46c0 46c0 46c0     t.e.s.)..F.F.F.F

08009fa0 <System.String_172>:
 8009fa0:	0004 0000 8a60 0800 00b4 0000 00b4 0000     ....`...........
 8009fb0:	0076 006f 0069 0064 0020 004d 0069 0063     v.o.i.d. .M.i.c.
 8009fc0:	0072 006f 0073 006f 0066 0074 002e 005a     r.o.s.o.f.t...Z.
 8009fd0:	0065 006c 0069 0067 002e 0052 0075 006e     e.l.i.g...R.u.n.
 8009fe0:	0074 0069 006d 0065 002e 0054 0061 0072     t.i.m.e...T.a.r.
 8009ff0:	0067 0065 0074 0050 006c 0061 0074 0066     g.e.t.P.l.a.t.f.
 800a000:	006f 0072 006d 002e 0041 0052 004d 0076     o.r.m...A.R.M.v.
 800a010:	0037 002e 0050 0072 006f 0063 0065 0073     7...P.r.o.c.e.s.
 800a020:	0073 006f 0072 0041 0052 004d 0076 0037     s.o.r.A.R.M.v.7.
 800a030:	004d 002e 004d 0065 0074 0068 006f 0064     M...M.e.t.h.o.d.
 800a040:	0057 0072 0061 0070 0070 0065 0072 003a     W.r.a.p.p.e.r.:.
 800a050:	003a 0045 0070 0069 006c 006f 0067 0075     :.E.p.i.l.o.g.u.
 800a060:	0065 0028 0073 0074 0072 0069 006e 0067     e.(.s.t.r.i.n.g.
 800a070:	002c 0073 0074 0072 0069 006e 0067 002c     ,.s.t.r.i.n.g.,.
 800a080:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 800a090:	0074 002e 005a 0065 006c 0069 0067 002e     t...Z.e.l.i.g...
 800a0a0:	0052 0075 006e 0074 0069 006d 0065 002e     R.u.n.t.i.m.e...
 800a0b0:	0054 0079 0070 0065 0053 0079 0073 0074     T.y.p.e.S.y.s.t.
 800a0c0:	0065 006d 002e 004d 0065 0074 0068 006f     e.m...M.e.t.h.o.
 800a0d0:	0064 0052 0065 0070 0072 0065 0073 0065     d.R.e.p.r.e.s.e.
 800a0e0:	006e 0074 0061 0074 0069 006f 006e 002e     n.t.a.t.i.o.n...
 800a0f0:	0042 0075 0069 006c 0064 0054 0069 006d     B.u.i.l.d.T.i.m.
 800a100:	0065 0041 0074 0074 0072 0069 0062 0075     e.A.t.t.r.i.b.u.
 800a110:	0074 0065 0073 0029 46c0 46c0 46c0 46c0     t.e.s.)..F.F.F.F

0800a120 <System.String_173>:
 800a120:	0004 0000 8a60 0800 0033 0000 0033 0000     ....`...3...3...
 800a130:	0046 006f 0075 006e 0064 0020 0061 0072     F.o.u.n.d. .a.r.
 800a140:	0072 0061 0079 0020 0074 0068 0061 0074     r.a.y. .t.h.a.t.
 800a150:	0020 0064 006f 0065 0073 0020 006e 006f      .d.o.e.s. .n.o.
 800a160:	0074 0020 0069 006e 0068 0065 0072 0069     t. .i.n.h.e.r.i.
 800a170:	0074 0020 0066 0072 006f 006d 0020 0053     t. .f.r.o.m. .S.
 800a180:	0079 0073 0074 0065 006d 002e 0041 0072     y.s.t.e.m...A.r.
 800a190:	0072 0061 0079 46c0 46c0 46c0 46c0 46c0     r.a.y..F.F.F.F.F

0800a1a0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_174>:
 800a1a0:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 800a1b0:	0000 0000 e470 0800 dd80 0800 0000 0000     ....p...........
 800a1c0:	0000 0000 e4c0 0800 a220 0800               ........ ...

0800a1cc <System.RuntimeType_175>:
 800a1cc:	0004 0000 9380 0800 a220 0800 46c0 46c0     ........ ....F.F
 800a1dc:	46c0 46c0                                   .F.F

0800a1e0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_176>:
 800a1e0:	0004 0000 8cf0 0800 000a 0000 0d8d 0800     ................
 800a1f0:	0a35 0800 0a43 0800 0a51 0800 0a99 0800     5...C...Q.......
 800a200:	0a9d 0800 0a9f 0800 0aad 0800 33e9 0800     .............3..
 800a210:	0000 0000 46c0 46c0 46c0 46c0 46c0 46c0     .....F.F.F.F.F.F

0800a220 <Microsoft.Zelig.Runtime.TypeSystem.VTable_177>:
 800a220:	0004 0000 8c80 0800 0028 0000 0000 0000     ........(.......
 800a230:	a1a0 0800 a1cc 0800 ab44 abab a1e0 0800     ........D.......
 800a240:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800a250 <System.String_178>:
 800a250:	0004 0000 8a60 0800 000b 0000 000b 0000     ....`...........
 800a260:	0056 0054 0061 0062 006c 0065 0028 007b     V.T.a.b.l.e.(.{.
 800a270:	0030 007d 0029 46c0 46c0 46c0 46c0 46c0     0.}.)..F.F.F.F.F

0800a280 <Microsoft.Zelig.Runtime.TypeSystem.SzArrayReferenceTypeRepresentation_179>:
 800a280:	0004 0000 8f40 0800 ab1d abab 0000 0000     ....@...........
	...
 800a2a4:	e4f0 0800 a2e0 0800 c870 0800               ........p...

0800a2b0 <System.RuntimeType_180>:
 800a2b0:	0004 0000 9380 0800 a2e0 0800 46c0 46c0     .............F.F

0800a2c0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_181>:
 800a2c0:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 800a2d0:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

0800a2e0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_182>:
 800a2e0:	0004 0000 8c80 0800 0004 0000 0004 0000     ................
 800a2f0:	a280 0800 a2b0 0800 abc6 abab a2c0 0800     ................
 800a300:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800a310 <Microsoft.Zelig.Runtime.TypeSystem.SzArrayReferenceTypeRepresentation_183>:
 800a310:	0004 0000 8f40 0800 ab1d abab 0000 0000     ....@...........
	...
 800a334:	e4f0 0800 a370 0800 e520 0800               ....p... ...

0800a340 <System.RuntimeType_184>:
 800a340:	0004 0000 9380 0800 a370 0800 46c0 46c0     ........p....F.F

0800a350 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_185>:
 800a350:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 800a360:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

0800a370 <Microsoft.Zelig.Runtime.TypeSystem.VTable_186>:
 800a370:	0004 0000 8c80 0800 0004 0000 0004 0000     ................
 800a380:	a310 0800 a340 0800 abc6 abab a350 0800     ....@.......P...
 800a390:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800a3a0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_187>:
 800a3a0:	0004 0000 db20 0800 ab12 abab 0000 0010     .... ...........
 800a3b0:	0000 0000 e550 0800 e590 0800 0000 0000     ....P...........
 800a3c0:	0000 0000 e520 0800 a400 0800               .... .......

0800a3cc <System.RuntimeType_188>:
 800a3cc:	0004 0000 9380 0800 a400 0800 46c0 46c0     .............F.F
 800a3dc:	46c0 46c0                                   .F.F

0800a3e0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_189>:
 800a3e0:	0004 0000 8cf0 0800 0004 0000 0d8d 0800     ................
 800a3f0:	08ed 0800 08f9 0800 3655 0800 46c0 46c0     ........U6...F.F

0800a400 <Microsoft.Zelig.Runtime.TypeSystem.VTable_190>:
 800a400:	0004 0000 8c80 0800 0004 0000 0000 0000     ................
 800a410:	a3a0 0800 a3cc 0800 ab44 abab a3e0 0800     ........D.......
 800a420:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800a430 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_191>:
 800a430:	0004 0000 db20 0800 ab12 abab 0000 0010     .... ...........
 800a440:	0000 0000 e5e0 0800 e590 0800 0000 0000     ................
 800a450:	0000 0000 e520 0800 a490 0800               .... .......

0800a45c <System.RuntimeType_192>:
 800a45c:	0004 0000 9380 0800 a490 0800 46c0 46c0     .............F.F
 800a46c:	46c0 46c0                                   .F.F

0800a470 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_193>:
 800a470:	0004 0000 8cf0 0800 0004 0000 0d8d 0800     ................
 800a480:	08ed 0800 08f9 0800 369d 0800 46c0 46c0     .........6...F.F

0800a490 <Microsoft.Zelig.Runtime.TypeSystem.VTable_194>:
 800a490:	0004 0000 8c80 0800 0004 0000 0000 0000     ................
 800a4a0:	a430 0800 a45c 0800 ab44 abab a470 0800     0...\...D...p...
 800a4b0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800a4c0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_195>:
 800a4c0:	0004 0000 db20 0800 ab12 abab 0000 0010     .... ...........
 800a4d0:	0000 0000 e620 0800 e590 0800 0000 0000     .... ...........
 800a4e0:	0000 0000 e520 0800 a520 0800               .... ... ...

0800a4ec <System.RuntimeType_196>:
 800a4ec:	0004 0000 9380 0800 a520 0800 46c0 46c0     ........ ....F.F
 800a4fc:	46c0 46c0                                   .F.F

0800a500 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_197>:
 800a500:	0004 0000 8cf0 0800 0004 0000 0d8d 0800     ................
 800a510:	08ed 0800 08f9 0800 36dd 0800 46c0 46c0     .........6...F.F

0800a520 <Microsoft.Zelig.Runtime.TypeSystem.VTable_198>:
 800a520:	0004 0000 8c80 0800 0004 0000 0000 0000     ................
 800a530:	a4c0 0800 a4ec 0800 ab44 abab a500 0800     ........D.......
 800a540:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800a550 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_199>:
 800a550:	0004 0000 db20 0800 ab12 abab 0001 0010     .... ...........
 800a560:	0000 0000 e660 0800 e680 0800 0000 0000     ....`...........
 800a570:	0000 0000 a5e0 0800 a5b0 0800               ............

0800a57c <System.RuntimeType_200>:
 800a57c:	0004 0000 9380 0800 a5b0 0800 46c0 46c0     .............F.F
 800a58c:	46c0 46c0                                   .F.F

0800a590 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_201>:
 800a590:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 800a5a0:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

0800a5b0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_202>:
 800a5b0:	0004 0000 8c80 0800 000c 0000 0000 0000     ................
 800a5c0:	a550 0800 a57c 0800 ab44 abab a590 0800     P...|...D.......
 800a5d0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800a5e0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_203>:
 800a5e0:	0004 0000 db20 0800 ab1c abab 0001 0010     .... ...........
 800a5f0:	0000 0000 e6d0 0800 db90 0800 0000 0000     ................
	...
 800a608:	a640 0800                                   @...

0800a60c <System.RuntimeType_204>:
 800a60c:	0004 0000 9380 0800 a640 0800 46c0 46c0     ........@....F.F
 800a61c:	46c0 46c0                                   .F.F

0800a620 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_205>:
 800a620:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 800a630:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

0800a640 <Microsoft.Zelig.Runtime.TypeSystem.VTable_206>:
 800a640:	0004 0000 8c80 0800 0000 0000 0000 0000     ................
 800a650:	a5e0 0800 a60c 0800 ab44 abab a620 0800     ........D... ...
 800a660:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800a670 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_207>:
 800a670:	0004 0000 db20 0800 ab12 abab 2101 0010     .... ........!..
 800a680:	0000 0000 e6f0 0800 e710 0800 0000 0000     ................
 800a690:	0000 0000 a5e0 0800 a6d0 0800               ............

0800a69c <System.RuntimeType_208>:
 800a69c:	0004 0000 9380 0800 a6d0 0800 46c0 46c0     .............F.F
 800a6ac:	46c0 46c0                                   .F.F

0800a6b0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_209>:
 800a6b0:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 800a6c0:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

0800a6d0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_210>:
 800a6d0:	0004 0000 8c80 0800 000c 0000 0000 0000     ................
 800a6e0:	a670 0800 a69c 0800 ab44 abab a6b0 0800     p.......D.......
 800a6f0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800a700 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_211>:
 800a700:	0004 0000 db20 0800 ab12 abab 0101 0010     .... ...........
 800a710:	0000 0000 e2f0 0800 e2a0 0800 0000 0000     ................
 800a720:	e744 0800 a5e0 0800 a760 0800               D.......`...

0800a72c <System.RuntimeType_212>:
 800a72c:	0004 0000 9380 0800 a760 0800 46c0 46c0     ........`....F.F
 800a73c:	46c0 46c0                                   .F.F

0800a740 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_213>:
 800a740:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 800a750:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

0800a760 <Microsoft.Zelig.Runtime.TypeSystem.VTable_214>:
 800a760:	0004 0000 8c80 0800 0008 0000 0000 0000     ................
 800a770:	a700 0800 a72c 0800 ab44 abab a740 0800     ....,...D...@...
 800a780:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800a790 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_215>:
 800a790:	0004 0000 db20 0800 ab12 abab 0101 0014     .... ...........
 800a7a0:	0000 0000 e760 0800 e120 0800 0000 0000     ....`... .......
 800a7b0:	0000 0000 9ab0 0800 a830 0800               ........0...

0800a7bc <System.RuntimeType_216>:
 800a7bc:	0004 0000 9380 0800 a830 0800 46c0 46c0     ........0....F.F
 800a7cc:	46c0 46c0                                   .F.F

0800a7d0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_217>:
 800a7d0:	0004 0000 8cf0 0800 0006 0000 0d8d 0800     ................
 800a7e0:	08ed 0800 08f9 0800 2a37 0800 2a4d 0800     ........7*..M*..
 800a7f0:	2a5f 0800                                   _*..

0800a7f4 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_218>:
 800a7f4:	0004 0000 8cf0 0800 0001 0000 2a85 0800     .............*..
 800a804:	46c0 46c0 46c0 46c0 46c0 46c0               .F.F.F.F.F.F

0800a810 <Microsoft.Zelig.Runtime.TypeSystem.VTable.InterfaceMap[]_219>:
 800a810:	0004 0000 8d40 0800 0001 0000 9610 0800     ....@...........
 800a820:	a7f4 0800 46c0 46c0 46c0 46c0 46c0 46c0     .....F.F.F.F.F.F

0800a830 <Microsoft.Zelig.Runtime.TypeSystem.VTable_220>:
 800a830:	0004 0000 8c80 0800 000c 0000 0000 0000     ................
 800a840:	a790 0800 a7bc 0800 ab44 abab a7d0 0800     ........D.......
 800a850:	a810 0800 46c0 46c0 46c0 46c0 46c0 46c0     .....F.F.F.F.F.F

0800a860 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_221>:
 800a860:	0004 0000 db20 0800 ab12 abab 0101 0014     .... ...........
 800a870:	0000 0000 e790 0800 e120 0800 0000 0000     ........ .......
 800a880:	0000 0000 9ab0 0800 a900 0800               ............

0800a88c <System.RuntimeType_222>:
 800a88c:	0004 0000 9380 0800 a900 0800 46c0 46c0     .............F.F
 800a89c:	46c0 46c0                                   .F.F

0800a8a0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_223>:
 800a8a0:	0004 0000 8cf0 0800 0006 0000 0d8d 0800     ................
 800a8b0:	08ed 0800 08f9 0800 2a37 0800 2a4d 0800     ........7*..M*..
 800a8c0:	2a5f 0800                                   _*..

0800a8c4 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_224>:
 800a8c4:	0004 0000 8cf0 0800 0001 0000 2a85 0800     .............*..
 800a8d4:	46c0 46c0 46c0 46c0 46c0 46c0               .F.F.F.F.F.F

0800a8e0 <Microsoft.Zelig.Runtime.TypeSystem.VTable.InterfaceMap[]_225>:
 800a8e0:	0004 0000 8d40 0800 0001 0000 9610 0800     ....@...........
 800a8f0:	a8c4 0800 46c0 46c0 46c0 46c0 46c0 46c0     .....F.F.F.F.F.F

0800a900 <Microsoft.Zelig.Runtime.TypeSystem.VTable_226>:
 800a900:	0004 0000 8c80 0800 000c 0000 0000 0000     ................
 800a910:	a860 0800 a88c 0800 ab44 abab a8a0 0800     `.......D.......
 800a920:	a8e0 0800 46c0 46c0 46c0 46c0 46c0 46c0     .....F.F.F.F.F.F

0800a930 <Microsoft.Zelig.Runtime.TypeSystem.SzArrayReferenceTypeRepresentation_227>:
 800a930:	0004 0000 8f40 0800 ab1d abab 0000 0000     ....@...........
	...
 800a954:	e4f0 0800 a990 0800 a9c0 0800               ............

0800a960 <System.RuntimeType_228>:
 800a960:	0004 0000 9380 0800 a990 0800 46c0 46c0     .............F.F

0800a970 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_229>:
 800a970:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 800a980:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

0800a990 <Microsoft.Zelig.Runtime.TypeSystem.VTable_230>:
 800a990:	0004 0000 8c80 0800 0004 0000 0004 0000     ................
 800a9a0:	a930 0800 a960 0800 abc6 abab a970 0800     0...`.......p...
 800a9b0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800a9c0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_231>:
 800a9c0:	0004 0000 db20 0800 ab12 abab 0000 0010     .... ...........
 800a9d0:	0000 0000 e7c0 0800 e2a0 0800 0000 0000     ................
 800a9e0:	0000 0000 a5e0 0800 aa20 0800               ........ ...

0800a9ec <System.RuntimeType_232>:
 800a9ec:	0004 0000 9380 0800 aa20 0800 46c0 46c0     ........ ....F.F
 800a9fc:	46c0 46c0                                   .F.F

0800aa00 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_233>:
 800aa00:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 800aa10:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

0800aa20 <Microsoft.Zelig.Runtime.TypeSystem.VTable_234>:
 800aa20:	0004 0000 8c80 0800 001c 0000 0000 0000     ................
 800aa30:	a9c0 0800 a9ec 0800 ab44 abab aa00 0800     ........D.......
 800aa40:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800aa50 <Microsoft.Zelig.Runtime.TypeSystem.VTable_235>:
 800aa50:	0004 0000 8c80 0800 0004 0000 0001 0000     ................
 800aa60:	e7f0 0800 aa74 0800 abc6 abab e820 0800     ....t....... ...
 800aa70:	8d64 0800                                   d...

0800aa74 <System.RuntimeType_236>:
 800aa74:	0004 0000 9380 0800 aa50 0800               ........P...

0800aa80 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_237>:
 800aa80:	0004 0000 db20 0800 ab12 abab 2001 0010     .... ........ ..
 800aa90:	0000 0000 e840 0800 db90 0800 0000 0000     ....@...........
 800aaa0:	0000 0000 dcb0 0800 aae0 0800               ............

0800aaac <System.RuntimeType_238>:
 800aaac:	0004 0000 9380 0800 aae0 0800 46c0 46c0     .............F.F
 800aabc:	46c0 46c0                                   .F.F

0800aac0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_239>:
 800aac0:	0004 0000 8cf0 0800 0004 0000 08e1 0800     ................
 800aad0:	08ed 0800 08f9 0800 09bd 0800 46c0 46c0     .............F.F

0800aae0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_240>:
 800aae0:	0004 0000 8c80 0800 0004 0000 0000 0000     ................
 800aaf0:	aa80 0800 aaac 0800 ab44 abab aac0 0800     ........D.......
 800ab00:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800ab10 <System.String_241>:
 800ab10:	0004 0000 8a60 0800 0041 0000 0041 0000     ....`...A...A...
 800ab20:	0021 0021 0021 0020 0020 0020 0020 0020     !.!.!. . . . . .
 800ab30:	0020 0020 0020 0020 0020 0020 0020 0020      . . . . . . . .
 800ab40:	0020 0020 0020 0020 0020 0020 0020 0020      . . . . . . . .
 800ab50:	0020 0020 0057 0041 0052 004e 0049 004e      . .W.A.R.N.I.N.
 800ab60:	0047 0020 0020 0020 0020 0020 0020 0020     G. . . . . . . .
 800ab70:	0020 0020 0020 0020 0020 0020 0020 0020      . . . . . . . .
 800ab80:	0020 0020 0020 0020 0020 0020 0020 0020      . . . . . . . .
 800ab90:	0020 0020 0020 0020 0020 0020 0021 0021      . . . . . .!.!.
 800aba0:	0021 46c0 46c0 46c0 46c0 46c0 46c0 46c0     !..F.F.F.F.F.F.F

0800abb0 <System.String_242>:
 800abb0:	0004 0000 8a60 0800 0041 0000 0041 0000     ....`...A...A...
 800abc0:	0021 0021 0021 0020 0054 0068 0072 006f     !.!.!. .T.h.r.o.
 800abd0:	0077 0069 006e 0067 0020 0045 0078 0063     w.i.n.g. .E.x.c.
 800abe0:	0065 0070 0074 0069 006f 006e 0073 0020     e.p.t.i.o.n.s. .
 800abf0:	0069 0073 0020 006e 006f 0074 0020 0079     i.s. .n.o.t. .y.
 800ac00:	0065 0074 0020 0073 0075 0070 0070 006f     e.t. .s.u.p.p.o.
 800ac10:	0072 0074 0065 0064 0020 0066 006f 0072     r.t.e.d. .f.o.r.
 800ac20:	0020 004c 004c 0056 004d 0020 0043 006f      .L.L.V.M. .C.o.
 800ac30:	0064 0065 0047 0065 006e 0020 0021 0021     d.e.G.e.n. .!.!.
 800ac40:	0021 46c0 46c0 46c0 46c0 46c0 46c0 46c0     !..F.F.F.F.F.F.F

0800ac50 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_243>:
 800ac50:	0004 0000 db20 0800 ab12 abab 2001 0010     .... ........ ..
 800ac60:	0000 0000 e880 0800 db90 0800 0000 0000     ................
 800ac70:	0000 0000 a5e0 0800 acb0 0800               ............

0800ac7c <System.RuntimeType_244>:
 800ac7c:	0004 0000 9380 0800 acb0 0800 46c0 46c0     .............F.F
 800ac8c:	46c0 46c0                                   .F.F

0800ac90 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_245>:
 800ac90:	0004 0000 8cf0 0800 0004 0000 08e1 0800     ................
 800aca0:	08ed 0800 08f9 0800 09bd 0800 46c0 46c0     .............F.F

0800acb0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_246>:
 800acb0:	0004 0000 8c80 0800 0004 0000 0000 0000     ................
 800acc0:	ac50 0800 ac7c 0800 ab44 abab ac90 0800     P...|...D.......
 800acd0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800ace0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_247>:
 800ace0:	0004 0000 db20 0800 ab12 abab 0101 0010     .... ...........
 800acf0:	0000 0000 e270 0800 e2a0 0800 0000 0000     ....p...........
 800ad00:	e8a4 0800 a5e0 0800 ad40 0800               ........@...

0800ad0c <System.RuntimeType_248>:
 800ad0c:	0004 0000 9380 0800 ad40 0800 46c0 46c0     ........@....F.F
 800ad1c:	46c0 46c0                                   .F.F

0800ad20 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_249>:
 800ad20:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 800ad30:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

0800ad40 <Microsoft.Zelig.Runtime.TypeSystem.VTable_250>:
 800ad40:	0004 0000 8c80 0800 000c 0000 0000 0000     ................
 800ad50:	ace0 0800 ad0c 0800 ab44 abab ad20 0800     ........D... ...
 800ad60:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800ad70 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_251>:
 800ad70:	0004 0000 db20 0800 ab12 abab 0101 0000     .... ...........
 800ad80:	0000 0000 e8c0 0800 e8f0 0800 0000 0000     ................
 800ad90:	0000 0000 a5e0 0800 add0 0800               ............

0800ad9c <System.RuntimeType_252>:
 800ad9c:	0004 0000 9380 0800 add0 0800 46c0 46c0     .............F.F
 800adac:	46c0 46c0                                   .F.F

0800adb0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_253>:
 800adb0:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 800adc0:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

0800add0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_254>:
 800add0:	0004 0000 8c80 0800 001a 0000 0000 0000     ................
 800ade0:	ad70 0800 ad9c 0800 ab44 abab adb0 0800     p.......D.......
 800adf0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800ae00 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_255>:
 800ae00:	0004 0000 db20 0800 ab12 abab 0101 0010     .... ...........
 800ae10:	0000 0000 e270 0800 e2a0 0800 0000 0000     ....p...........
 800ae20:	e950 0800 a5e0 0800 ae60 0800               P.......`...

0800ae2c <System.RuntimeType_256>:
 800ae2c:	0004 0000 9380 0800 ae60 0800 46c0 46c0     ........`....F.F
 800ae3c:	46c0 46c0                                   .F.F

0800ae40 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_257>:
 800ae40:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 800ae50:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

0800ae60 <Microsoft.Zelig.Runtime.TypeSystem.VTable_258>:
 800ae60:	0004 0000 8c80 0800 000c 0000 0000 0000     ................
 800ae70:	ae00 0800 ae2c 0800 ab44 abab ae40 0800     ....,...D...@...
 800ae80:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800ae90 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_267>:
 800ae90:	0004 0000 db20 0800 ab12 abab 0101 0010     .... ...........
 800aea0:	0000 0000 e270 0800 e2a0 0800 0000 0000     ....p...........
 800aeb0:	e960 0800 a5e0 0800 aef0 0800               `...........

0800aebc <System.RuntimeType_268>:
 800aebc:	0004 0000 9380 0800 aef0 0800 46c0 46c0     .............F.F
 800aecc:	46c0 46c0                                   .F.F

0800aed0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_269>:
 800aed0:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 800aee0:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

0800aef0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_270>:
 800aef0:	0004 0000 8c80 0800 000c 0000 0000 0000     ................
 800af00:	ae90 0800 aebc 0800 ab44 abab aed0 0800     ........D.......
 800af10:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800af20 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_271>:
 800af20:	0004 0000 db20 0800 ab12 abab 0005 0010     .... ...........
 800af30:	0000 0000 e970 0800 9434 0800 e990 0800     ....p...4.......
 800af40:	0000 0000 a5e0 0800 af80 0800               ............

0800af4c <System.RuntimeType_272>:
 800af4c:	0004 0000 9380 0800 af80 0800 46c0 46c0     .............F.F
 800af5c:	46c0 46c0                                   .F.F

0800af60 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_273>:
 800af60:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 800af70:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

0800af80 <Microsoft.Zelig.Runtime.TypeSystem.VTable_274>:
 800af80:	0004 0000 8c80 0800 0009 0000 0000 0000     ................
 800af90:	af20 0800 af4c 0800 ab44 abab af60 0800      ...L...D...`...
 800afa0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800afb0 <System.String_275>:
 800afb0:	0004 0000 8a60 0800 0016 0000 0016 0000     ....`...........
 800afc0:	0055 006e 0077 0069 006e 0064 0020 006e     U.n.w.i.n.d. .n.
 800afd0:	006f 0074 0020 0069 006d 0070 006c 0065     o.t. .i.m.p.l.e.
 800afe0:	006d 0065 006e 0074 0065 0064 46c0 46c0     m.e.n.t.e.d..F.F

0800aff0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_276>:
 800aff0:	0004 0000 ded0 0800 ab12 abab 0082 0010     ................
 800b000:	0000 0000 e1f0 0800 9434 0800 e9c0 0800     ........4.......
 800b010:	0000 0000 e9f0 0800 b070 0800               ........p...

0800b01c <System.RuntimeType_277>:
 800b01c:	0004 0000 9380 0800 b070 0800 46c0 46c0     ........p....F.F
 800b02c:	46c0 46c0                                   .F.F

0800b030 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_278>:
 800b030:	0004 0000 8cf0 0800 000b 0000 0d8d 0800     ................
 800b040:	08ed 0800 08f9 0800 5163 0800 516b 0800     ........cQ..kQ..
 800b050:	51f5 0800 5155 0800 5231 0800 5235 0800     .Q..UQ..1R..5R..
 800b060:	5239 0800 5241 0800 46c0 46c0 46c0 46c0     9R..AR...F.F.F.F

0800b070 <Microsoft.Zelig.Runtime.TypeSystem.VTable_279>:
 800b070:	0004 0000 8c80 0800 0008 0000 0000 0000     ................
 800b080:	aff0 0800 b01c 0800 ab44 abab b030 0800     ........D...0...
 800b090:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800b0a0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_284>:
 800b0a0:	0004 0000 db20 0800 ab12 abab 0101 0010     .... ...........
 800b0b0:	0000 0000 ea50 0800 e8f0 0800 0000 0000     ....P...........
 800b0c0:	0000 0000 a5e0 0800 b100 0800               ............

0800b0cc <System.RuntimeType_285>:
 800b0cc:	0004 0000 9380 0800 b100 0800 46c0 46c0     .............F.F
 800b0dc:	46c0 46c0                                   .F.F

0800b0e0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_286>:
 800b0e0:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 800b0f0:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

0800b100 <Microsoft.Zelig.Runtime.TypeSystem.VTable_287>:
 800b100:	0004 0000 8c80 0800 0008 0000 0000 0000     ................
 800b110:	b0a0 0800 b0cc 0800 ab44 abab b0e0 0800     ........D.......
 800b120:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800b130 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_288>:
 800b130:	0004 0000 db20 0800 ab12 abab 0101 0010     .... ...........
 800b140:	0000 0000 ea80 0800 e8f0 0800 0000 0000     ................
 800b150:	0000 0000 eab0 0800 b190 0800               ............

0800b15c <System.RuntimeType_289>:
 800b15c:	0004 0000 9380 0800 b190 0800 46c0 46c0     .............F.F
 800b16c:	46c0 46c0                                   .F.F

0800b170 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_290>:
 800b170:	0004 0000 8cf0 0800 0005 0000 0d8d 0800     ................
 800b180:	08ed 0800 08f9 0800 4b25 0800 4c65 0800     ........%K..eL..

0800b190 <Microsoft.Zelig.Runtime.TypeSystem.VTable_291>:
 800b190:	0004 0000 8c80 0800 0010 0000 0000 0000     ................
 800b1a0:	b130 0800 b15c 0800 ab44 abab b170 0800     0...\...D...p...
 800b1b0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800b1c0 <System.String_292>:
 800b1c0:	0004 0000 8a60 0800 0001 0000 0001 0000     ....`...........
 800b1d0:	0020 46c0 46c0 46c0 46c0 46c0 46c0 46c0      ..F.F.F.F.F.F.F

0800b1e0 <System.String_293>:
 800b1e0:	0004 0000 8a60 0800 0002 0000 0002 0000     ....`...........
 800b1f0:	000d 000a 46c0 46c0 46c0 46c0 46c0 46c0     .....F.F.F.F.F.F

0800b200 <Microsoft.Zelig.Runtime.TypeSystem.EnumerationTypeRepresentation_294>:
 800b200:	0004 0000 eae0 0800 ab11 abab 0105 0000     ................
 800b210:	0000 0000 eb10 0800 9434 0800 ac50 0800     ........4...P...
 800b220:	0000 0000 eb50 0800 b2c0 0800 df20 0800     ....P....... ...

0800b230 <System.RuntimeType_295>:
 800b230:	0004 0000 9380 0800 b2c0 0800 46c0 46c0     .............F.F

0800b240 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_296>:
 800b240:	0004 0000 8cf0 0800 0004 0000 0d8d 0800     ................
 800b250:	08ed 0800 08f9 0800 106d 0800 46c0 46c0     ........m....F.F

0800b260 <Microsoft.Zelig.Runtime.TypeSystem.VTable_297>:
 800b260:	0004 0000 8c80 0800 0000 0000 0000 0000     ................
 800b270:	eb80 0800 ebac 0800 ab43 abab ebb8 0800     ........C.......
 800b280:	ebe0 0800                                   ....

0800b284 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_298>:
 800b284:	0004 0000 8cf0 0800 0001 0000 106d 0800     ............m...
 800b294:	46c0 46c0 46c0 46c0 46c0 46c0               .F.F.F.F.F.F

0800b2a0 <Microsoft.Zelig.Runtime.TypeSystem.VTable.InterfaceMap[]_299>:
 800b2a0:	0004 0000 8d40 0800 0001 0000 b260 0800     ....@.......`...
 800b2b0:	b284 0800 46c0 46c0 46c0 46c0 46c0 46c0     .....F.F.F.F.F.F

0800b2c0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_300>:
 800b2c0:	0004 0000 8c80 0800 0004 0000 0000 0000     ................
 800b2d0:	b200 0800 b230 0800 ab21 abab b240 0800     ....0...!...@...
 800b2e0:	b2a0 0800 46c0 46c0 46c0 46c0 46c0 46c0     .....F.F.F.F.F.F

0800b2f0 <System.String_301>:
 800b2f0:	0004 0000 8a60 0800 0019 0000 0019 0000     ....`...........
 800b300:	0041 0072 0067 005f 004e 006f 0074 0053     A.r.g._.N.o.t.S.
 800b310:	0075 0070 0070 006f 0072 0074 0065 0064     u.p.p.o.r.t.e.d.
 800b320:	0045 0078 0063 0065 0070 0074 0069 006f     E.x.c.e.p.t.i.o.
 800b330:	006e 46c0 46c0 46c0 46c0 46c0 46c0 46c0     n..F.F.F.F.F.F.F

0800b340 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_302>:
 800b340:	0004 0000 db20 0800 ab12 abab 0000 0010     .... ...........
 800b350:	0000 0000 ec00 0800 db90 0800 0000 0000     ................
 800b360:	0000 0000 a5e0 0800 b3a0 0800               ............

0800b36c <System.RuntimeType_303>:
 800b36c:	0004 0000 9380 0800 b3a0 0800 46c0 46c0     .............F.F
 800b37c:	46c0 46c0                                   .F.F

0800b380 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_304>:
 800b380:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 800b390:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

0800b3a0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_305>:
 800b3a0:	0004 0000 8c80 0800 0010 0000 0000 0000     ................
 800b3b0:	b340 0800 b36c 0800 ab44 abab b380 0800     @...l...D.......
 800b3c0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800b3d0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_306>:
 800b3d0:	0004 0000 db20 0800 ab12 abab 2001 0010     .... ........ ..
 800b3e0:	0000 0000 ec20 0800 db90 0800 0000 0000     .... ...........
 800b3f0:	0000 0000 dcb0 0800 b430 0800               ........0...

0800b3fc <System.RuntimeType_307>:
 800b3fc:	0004 0000 9380 0800 b430 0800 46c0 46c0     ........0....F.F
 800b40c:	46c0 46c0                                   .F.F

0800b410 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_308>:
 800b410:	0004 0000 8cf0 0800 0004 0000 08e1 0800     ................
 800b420:	08ed 0800 08f9 0800 09bd 0800 46c0 46c0     .............F.F

0800b430 <Microsoft.Zelig.Runtime.TypeSystem.VTable_309>:
 800b430:	0004 0000 8c80 0800 0004 0000 0000 0000     ................
 800b440:	b3d0 0800 b3fc 0800 ab44 abab b410 0800     ........D.......
 800b450:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800b460 <System.String_310>:
 800b460:	0004 0000 8a60 0800 0003 0000 0003 0000     ....`...........
 800b470:	0023 0020 0025 46c0 46c0 46c0 46c0 46c0     #. .%..F.F.F.F.F

0800b480 <System.String_311>:
 800b480:	0004 0000 8a60 0800 0002 0000 0002 0000     ....`...........
 800b490:	0023 0025 46c0 46c0 46c0 46c0 46c0 46c0     #.%..F.F.F.F.F.F

0800b4a0 <System.String_312>:
 800b4a0:	0004 0000 8a60 0800 0002 0000 0002 0000     ....`...........
 800b4b0:	0025 0023 46c0 46c0 46c0 46c0 46c0 46c0     %.#..F.F.F.F.F.F

0800b4c0 <System.String_313>:
 800b4c0:	0004 0000 8a60 0800 0004 0000 0004 0000     ....`...........
 800b4d0:	002d 0023 0020 0025 46c0 46c0 46c0 46c0     -.#. .%..F.F.F.F

0800b4e0 <System.String_314>:
 800b4e0:	0004 0000 8a60 0800 0003 0000 0003 0000     ....`...........
 800b4f0:	002d 0023 0025 46c0 46c0 46c0 46c0 46c0     -.#.%..F.F.F.F.F

0800b500 <System.String_315>:
 800b500:	0004 0000 8a60 0800 0003 0000 0003 0000     ....`...........
 800b510:	002d 0025 0023 46c0 46c0 46c0 46c0 46c0     -.%.#..F.F.F.F.F

0800b520 <System.String_316>:
 800b520:	0004 0000 8a60 0800 0003 0000 0003 0000     ....`...........
 800b530:	0028 0023 0029 46c0 46c0 46c0 46c0 46c0     (.#.)..F.F.F.F.F

0800b540 <System.String_317>:
 800b540:	0004 0000 8a60 0800 0002 0000 0002 0000     ....`...........
 800b550:	002d 0023 46c0 46c0 46c0 46c0 46c0 46c0     -.#..F.F.F.F.F.F

0800b560 <System.String_318>:
 800b560:	0004 0000 8a60 0800 0003 0000 0003 0000     ....`...........
 800b570:	002d 0020 0023 46c0 46c0 46c0 46c0 46c0     -. .#..F.F.F.F.F

0800b580 <System.String_319>:
 800b580:	0004 0000 8a60 0800 0002 0000 0002 0000     ....`...........
 800b590:	0023 002d 46c0 46c0 46c0 46c0 46c0 46c0     #.-..F.F.F.F.F.F

0800b5a0 <System.String_320>:
 800b5a0:	0004 0000 8a60 0800 0003 0000 0003 0000     ....`...........
 800b5b0:	0023 0020 002d 46c0 46c0 46c0 46c0 46c0     #. .-..F.F.F.F.F

0800b5c0 <System.String_321>:
 800b5c0:	0004 0000 8a60 0800 0001 0000 0001 0000     ....`...........
 800b5d0:	0023 46c0 46c0 46c0 46c0 46c0 46c0 46c0     #..F.F.F.F.F.F.F

0800b5e0 <System.String_322>:
 800b5e0:	0004 0000 8a60 0800 0016 0000 0016 0000     ....`...........
 800b5f0:	004f 0062 006a 0065 0063 0074 0044 0069     O.b.j.e.c.t.D.i.
 800b600:	0073 0070 006f 0073 0065 0064 005f 0047     s.p.o.s.e.d._.G.
 800b610:	0065 006e 0065 0072 0069 0063 46c0 46c0     e.n.e.r.i.c..F.F

0800b620 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_323>:
 800b620:	0004 0000 db20 0800 ab12 abab 0104 0010     .... ...........
 800b630:	0000 0000 ec50 0800 9434 0800 9ab0 0800     ....P...4.......
 800b640:	0000 0000 eab0 0800 b680 0800               ............

0800b64c <System.RuntimeType_324>:
 800b64c:	0004 0000 9380 0800 b680 0800 46c0 46c0     .............F.F
 800b65c:	46c0 46c0                                   .F.F

0800b660 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_325>:
 800b660:	0004 0000 8cf0 0800 0005 0000 0d8d 0800     ................
 800b670:	08ed 0800 08f9 0800 4fbd 0800 50a5 0800     .........O...P..

0800b680 <Microsoft.Zelig.Runtime.TypeSystem.VTable_326>:
 800b680:	0004 0000 8c80 0800 000c 0000 0000 0000     ................
 800b690:	b620 0800 b64c 0800 ab44 abab b660 0800      ...L...D...`...
 800b6a0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800b6b0 <System.String_327>:
 800b6b0:	0004 0000 8a60 0800 0018 0000 0018 0000     ....`...........
 800b6c0:	0041 0072 0067 005f 0054 0068 0072 0065     A.r.g._.T.h.r.e.
 800b6d0:	0061 0064 0053 0074 0061 0074 0065 0045     a.d.S.t.a.t.e.E.
 800b6e0:	0078 0063 0065 0070 0074 0069 006f 006e     x.c.e.p.t.i.o.n.

0800b6f0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_328>:
 800b6f0:	0004 0000 db20 0800 ab12 abab 2001 0010     .... ........ ..
 800b700:	0000 0000 ec90 0800 db90 0800 0000 0000     ................
 800b710:	0000 0000 dcb0 0800 b750 0800               ........P...

0800b71c <System.RuntimeType_329>:
 800b71c:	0004 0000 9380 0800 b750 0800 46c0 46c0     ........P....F.F
 800b72c:	46c0 46c0                                   .F.F

0800b730 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_330>:
 800b730:	0004 0000 8cf0 0800 0004 0000 08e1 0800     ................
 800b740:	08ed 0800 08f9 0800 09bd 0800 46c0 46c0     .............F.F

0800b750 <Microsoft.Zelig.Runtime.TypeSystem.VTable_331>:
 800b750:	0004 0000 8c80 0800 0004 0000 0000 0000     ................
 800b760:	b6f0 0800 b71c 0800 ab44 abab b730 0800     ........D...0...
 800b770:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800b780 <Microsoft.Zelig.Runtime.TypeSystem.SzArrayReferenceTypeRepresentation_332>:
 800b780:	0004 0000 8f40 0800 ab1d abab 0000 0000     ....@...........
	...
 800b7a4:	e4f0 0800 b7e0 0800 a5e0 0800               ............

0800b7b0 <System.RuntimeType_333>:
 800b7b0:	0004 0000 9380 0800 b7e0 0800 46c0 46c0     .............F.F

0800b7c0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_334>:
 800b7c0:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 800b7d0:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

0800b7e0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_335>:
 800b7e0:	0004 0000 8c80 0800 0004 0000 0004 0000     ................
 800b7f0:	b780 0800 b7b0 0800 abc6 abab b7c0 0800     ................
 800b800:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800b810 <Microsoft.Zelig.Runtime.TypeSystem.InterfaceTypeRepresentation_343>:
 800b810:	0004 0000 ecd0 0800 ab12 abab 00a1 0000     ................
 800b820:	0000 0000 ed00 0800 db90 0800 0000 0000     ................
	...
 800b838:	b860 0800                                   `...

0800b83c <System.RuntimeType_344>:
 800b83c:	0004 0000 9380 0800 b860 0800               ........`...

0800b848 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_345>:
 800b848:	0004 0000 8cf0 0800 0001 0000 0000 0000     ................
 800b858:	46c0 46c0 46c0 46c0                         .F.F.F.F

0800b860 <Microsoft.Zelig.Runtime.TypeSystem.VTable_346>:
 800b860:	0004 0000 8c80 0800 0000 0000 0000 0000     ................
 800b870:	b810 0800 b83c 0800 ab43 abab b848 0800     ....<...C...H...
 800b880:	b8a0 0800                                   ....

0800b884 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_347>:
 800b884:	0004 0000 8cf0 0800 0001 0000 0000 0000     ................
 800b894:	46c0 46c0 46c0 46c0 46c0 46c0               .F.F.F.F.F.F

0800b8a0 <Microsoft.Zelig.Runtime.TypeSystem.VTable.InterfaceMap[]_348>:
 800b8a0:	0004 0000 8d40 0800 0001 0000 b860 0800     ....@.......`...
 800b8b0:	b884 0800 46c0 46c0 46c0 46c0 46c0 46c0     .....F.F.F.F.F.F

0800b8c0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_350>:
 800b8c0:	0004 0000 ded0 0800 ab12 abab 2081 0010     ............. ..
 800b8d0:	0000 0000 ed30 0800 ed60 0800 0000 0000     ....0...`.......
 800b8e0:	0000 0000 a5e0 0800 b930 0800               ........0...

0800b8ec <System.RuntimeType_351>:
 800b8ec:	0004 0000 9380 0800 b930 0800 46c0 46c0     ........0....F.F
 800b8fc:	46c0 46c0                                   .F.F

0800b900 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_352>:
 800b900:	0004 0000 8cf0 0800 0006 0000 0d8d 0800     ................
 800b910:	6c81 0800 68b7 0800 0000 0000 6cc9 0800     .l...h.......l..
 800b920:	6cf9 0800 46c0 46c0 46c0 46c0 46c0 46c0     .l...F.F.F.F.F.F

0800b930 <Microsoft.Zelig.Runtime.TypeSystem.VTable_353>:
 800b930:	0004 0000 8c80 0800 0000 0000 0000 0000     ................
 800b940:	b8c0 0800 b8ec 0800 ab44 abab b900 0800     ........D.......
 800b950:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800b960 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_354>:
 800b960:	0004 0000 db20 0800 ab12 abab 2001 0010     .... ........ ..
 800b970:	0000 0000 eda0 0800 db90 0800 0000 0000     ................
 800b980:	0000 0000 dcb0 0800 b9c0 0800               ............

0800b98c <System.RuntimeType_355>:
 800b98c:	0004 0000 9380 0800 b9c0 0800 46c0 46c0     .............F.F
 800b99c:	46c0 46c0                                   .F.F

0800b9a0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_356>:
 800b9a0:	0004 0000 8cf0 0800 0004 0000 08e1 0800     ................
 800b9b0:	08ed 0800 08f9 0800 09bd 0800 46c0 46c0     .............F.F

0800b9c0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_357>:
 800b9c0:	0004 0000 8c80 0800 0004 0000 0000 0000     ................
 800b9d0:	b960 0800 b98c 0800 ab44 abab b9a0 0800     `.......D.......
 800b9e0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800b9f0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_358>:
 800b9f0:	0004 0000 db20 0800 ab12 abab 2001 0000     .... ........ ..
 800ba00:	0000 0000 edf0 0800 ee20 0800 0000 0000     ........ .......
 800ba10:	0000 0000 a5e0 0800 ba80 0800               ............

0800ba1c <System.RuntimeType_359>:
 800ba1c:	0004 0000 9380 0800 ba80 0800 46c0 46c0     .............F.F
 800ba2c:	46c0 46c0                                   .F.F

0800ba30 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_360>:
 800ba30:	0004 0000 8cf0 0800 0005 0000 0d8d 0800     ................
 800ba40:	08ed 0800 08f9 0800 6d01 0800 6d31 0800     .........m..1m..

0800ba50 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_361>:
 800ba50:	0004 0000 8cf0 0800 0001 0000 6d01 0800     .............m..

0800ba60 <Microsoft.Zelig.Runtime.TypeSystem.VTable.InterfaceMap[]_362>:
 800ba60:	0004 0000 8d40 0800 0001 0000 b860 0800     ....@.......`...
 800ba70:	ba50 0800 46c0 46c0 46c0 46c0 46c0 46c0     P....F.F.F.F.F.F

0800ba80 <Microsoft.Zelig.Runtime.TypeSystem.VTable_363>:
 800ba80:	0004 0000 8c80 0800 0015 0000 0000 0000     ................
 800ba90:	b9f0 0800 ba1c 0800 ab44 abab ba30 0800     ........D...0...
 800baa0:	ba60 0800 46c0 46c0 46c0 46c0 46c0 46c0     `....F.F.F.F.F.F

0800bab0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_364>:
 800bab0:	0004 0000 8c80 0800 0076 0000 0000 0000     ........v.......
 800bac0:	ee60 0800 bad4 0800 ab44 abab ee90 0800     `.......D.......
 800bad0:	eec0 0800                                   ....

0800bad4 <System.RuntimeType_365>:
 800bad4:	0004 0000 9380 0800 bab0 0800               ............

0800bae0 <System.String_366>:
 800bae0:	0004 0000 8a60 0800 0001 0000 0001 0000     ....`...........
 800baf0:	002b 46c0 46c0 46c0 46c0 46c0 46c0 46c0     +..F.F.F.F.F.F.F

0800bb00 <System.String_367>:
 800bb00:	0004 0000 8a60 0800 0001 0000 0001 0000     ....`...........
 800bb10:	002d 46c0 46c0 46c0 46c0 46c0 46c0 46c0     -..F.F.F.F.F.F.F

0800bb20 <System.String_368>:
 800bb20:	0004 0000 8a60 0800 0001 0000 0001 0000     ....`...........
 800bb30:	002e 46c0 46c0 46c0 46c0 46c0 46c0 46c0     ...F.F.F.F.F.F.F

0800bb40 <System.String_369>:
 800bb40:	0004 0000 8a60 0800 0001 0000 0001 0000     ....`...........
 800bb50:	002c 46c0 46c0 46c0 46c0 46c0 46c0 46c0     ,..F.F.F.F.F.F.F

0800bb60 <System.String_370>:
 800bb60:	0004 0000 8a60 0800 0001 0000 0001 0000     ....`...........
 800bb70:	00a4 46c0 46c0 46c0 46c0 46c0 46c0 46c0     ...F.F.F.F.F.F.F

0800bb80 <System.String_371>:
 800bb80:	0004 0000 8a60 0800 0003 0000 0003 0000     ....`...........
 800bb90:	004e 0061 004e 46c0 46c0 46c0 46c0 46c0     N.a.N..F.F.F.F.F

0800bba0 <System.String_372>:
 800bba0:	0004 0000 8a60 0800 0008 0000 0008 0000     ....`...........
 800bbb0:	0049 006e 0066 0069 006e 0069 0074 0079     I.n.f.i.n.i.t.y.

0800bbc0 <System.String_373>:
 800bbc0:	0004 0000 8a60 0800 0009 0000 0009 0000     ....`...........
 800bbd0:	002d 0049 006e 0066 0069 006e 0069 0074     -.I.n.f.i.n.i.t.
 800bbe0:	0079 46c0 46c0 46c0 46c0 46c0 46c0 46c0     y..F.F.F.F.F.F.F

0800bbf0 <System.String_374>:
 800bbf0:	0004 0000 8a60 0800 0001 0000 0001 0000     ....`...........
 800bc00:	0025 46c0 46c0 46c0 46c0 46c0 46c0 46c0     %..F.F.F.F.F.F.F

0800bc10 <System.String_375>:
 800bc10:	0004 0000 8a60 0800 0001 0000 0001 0000     ....`...........
 800bc20:	2030 46c0 46c0 46c0 46c0 46c0 46c0 46c0     0 .F.F.F.F.F.F.F

0800bc30 <System.String_376>:
 800bc30:	0004 0000 8a60 0800 0001 0000 0001 0000     ....`...........
 800bc40:	0030 46c0 46c0 46c0 46c0 46c0 46c0 46c0     0..F.F.F.F.F.F.F

0800bc50 <System.String_377>:
 800bc50:	0004 0000 8a60 0800 0001 0000 0001 0000     ....`...........
 800bc60:	0032 46c0 46c0 46c0 46c0 46c0 46c0 46c0     2..F.F.F.F.F.F.F

0800bc70 <System.String_378>:
 800bc70:	0004 0000 8a60 0800 0001 0000 0001 0000     ....`...........
 800bc80:	0033 46c0 46c0 46c0 46c0 46c0 46c0 46c0     3..F.F.F.F.F.F.F

0800bc90 <System.String_379>:
 800bc90:	0004 0000 8a60 0800 0001 0000 0001 0000     ....`...........
 800bca0:	0034 46c0 46c0 46c0 46c0 46c0 46c0 46c0     4..F.F.F.F.F.F.F

0800bcb0 <System.String_380>:
 800bcb0:	0004 0000 8a60 0800 0001 0000 0001 0000     ....`...........
 800bcc0:	0035 46c0 46c0 46c0 46c0 46c0 46c0 46c0     5..F.F.F.F.F.F.F

0800bcd0 <System.String_381>:
 800bcd0:	0004 0000 8a60 0800 0001 0000 0001 0000     ....`...........
 800bce0:	0036 46c0 46c0 46c0 46c0 46c0 46c0 46c0     6..F.F.F.F.F.F.F

0800bcf0 <System.String_382>:
 800bcf0:	0004 0000 8a60 0800 0001 0000 0001 0000     ....`...........
 800bd00:	0037 46c0 46c0 46c0 46c0 46c0 46c0 46c0     7..F.F.F.F.F.F.F

0800bd10 <System.String_383>:
 800bd10:	0004 0000 8a60 0800 0001 0000 0001 0000     ....`...........
 800bd20:	0038 46c0 46c0 46c0 46c0 46c0 46c0 46c0     8..F.F.F.F.F.F.F

0800bd30 <System.String_384>:
 800bd30:	0004 0000 8a60 0800 0001 0000 0001 0000     ....`...........
 800bd40:	0039 46c0 46c0 46c0 46c0 46c0 46c0 46c0     9..F.F.F.F.F.F.F

0800bd50 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_389>:
 800bd50:	0004 0000 db20 0800 ab12 abab 0001 0010     .... ...........
 800bd60:	0000 0000 eee0 0800 ef30 0800 0000 0000     ........0.......
 800bd70:	0000 0000 ac50 0800 bdb0 0800               ....P.......

0800bd7c <System.RuntimeType_390>:
 800bd7c:	0004 0000 9380 0800 bdb0 0800 46c0 46c0     .............F.F
 800bd8c:	46c0 46c0                                   .F.F

0800bd90 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_391>:
 800bd90:	0004 0000 8cf0 0800 0004 0000 08e1 0800     ................
 800bda0:	08ed 0800 08f9 0800 09bd 0800 46c0 46c0     .............F.F

0800bdb0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_392>:
 800bdb0:	0004 0000 8c80 0800 0004 0000 0000 0000     ................
 800bdc0:	bd50 0800 bd7c 0800 ab44 abab bd90 0800     P...|...D.......
 800bdd0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800bde0 <Microsoft.Zelig.Runtime.TypeSystem.SzArrayReferenceTypeRepresentation_393>:
 800bde0:	0004 0000 8f40 0800 ab1d abab 0000 0000     ....@...........
	...
 800be04:	e4f0 0800 be40 0800 a930 0800               ....@...0...

0800be10 <System.RuntimeType_394>:
 800be10:	0004 0000 9380 0800 be40 0800 46c0 46c0     ........@....F.F

0800be20 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_395>:
 800be20:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 800be30:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

0800be40 <Microsoft.Zelig.Runtime.TypeSystem.VTable_396>:
 800be40:	0004 0000 8c80 0800 0004 0000 0004 0000     ................
 800be50:	bde0 0800 be10 0800 abc6 abab be20 0800     ............ ...
 800be60:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800be70 <Microsoft.Zelig.Runtime.TypeSystem.ValueTypeRepresentation_397>:
 800be70:	0004 0000 ef60 0800 ab11 abab 010a 0010     ....`...........
 800be80:	0000 0000 ef90 0800 9434 0800 8f70 0800     ........4...p...
 800be90:	0000 0000 de40 0800 bed0 0800               ....@.......

0800be9c <System.RuntimeType_398>:
 800be9c:	0004 0000 9380 0800 bed0 0800 46c0 46c0     .............F.F
 800beac:	46c0 46c0                                   .F.F

0800beb0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_399>:
 800beb0:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 800bec0:	7131 0800 08f9 0800 46c0 46c0 46c0 46c0     1q.......F.F.F.F

0800bed0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_400>:
 800bed0:	0004 0000 8c80 0800 0008 0000 0000 0000     ................
 800bee0:	be70 0800 be9c 0800 ab22 abab beb0 0800     p.......".......
 800bef0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800bf00 <System.String_418>:
 800bf00:	0004 0000 8a60 0800 0001 0000 0001 0000     ....`...........
 800bf10:	0029 46c0 46c0 46c0 46c0 46c0 46c0 46c0     )..F.F.F.F.F.F.F

0800bf20 <System.String_419>:
 800bf20:	0004 0000 8a60 0800 0001 0000 0001 0000     ....`...........
 800bf30:	003c 46c0 46c0 46c0 46c0 46c0 46c0 46c0     <..F.F.F.F.F.F.F

0800bf40 <System.String_420>:
 800bf40:	0004 0000 8a60 0800 0001 0000 0001 0000     ....`...........
 800bf50:	003e 46c0 46c0 46c0 46c0 46c0 46c0 46c0     >..F.F.F.F.F.F.F

0800bf60 <System.String_422>:
 800bf60:	0004 0000 8a60 0800 0008 0000 0008 0000     ....`...........
 800bf70:	0067 0065 006e 0065 0072 0069 0063 0020     g.e.n.e.r.i.c. .

0800bf80 <System.String_423>:
 800bf80:	0004 0000 8a60 0800 0024 0000 0024 0000     ....`...$...$...
 800bf90:	0041 0062 0073 0074 0072 0061 0063 0074     A.b.s.t.r.a.c.t.
 800bfa0:	0052 0065 0066 0065 0072 0065 006e 0063     R.e.f.e.r.e.n.c.
 800bfb0:	0065 0054 0079 0070 0065 0052 0065 0070     e.T.y.p.e.R.e.p.
 800bfc0:	0072 0065 0073 0065 006e 0074 0061 0074     r.e.s.e.n.t.a.t.
 800bfd0:	0069 006f 006e 0028 46c0 46c0 46c0 46c0     i.o.n.(..F.F.F.F

0800bfe0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_424>:
 800bfe0:	0004 0000 db20 0800 ab12 abab 0101 0010     .... ...........
 800bff0:	0000 0000 eff0 0800 dd80 0800 0000 0000     ................
 800c000:	0000 0000 e4c0 0800 c050 0800               ........P...

0800c00c <System.RuntimeType_425>:
 800c00c:	0004 0000 9380 0800 c050 0800 46c0 46c0     ........P....F.F
 800c01c:	46c0 46c0                                   .F.F

0800c020 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_426>:
 800c020:	0004 0000 8cf0 0800 0009 0000 7331 0800     ............1s..
 800c030:	7385 0800 738f 0800 72e9 0800 739d 0800     .s...s...r...s..
 800c040:	73a1 0800 73a5 0800 73b3 0800 73c1 0800     .s...s...s...s..

0800c050 <Microsoft.Zelig.Runtime.TypeSystem.VTable_427>:
 800c050:	0004 0000 8c80 0800 0028 0000 0000 0000     ........(.......
 800c060:	bfe0 0800 c00c 0800 ab44 abab c020 0800     ........D... ...
 800c070:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800c080 <System.String_428>:
 800c080:	0004 0000 8a60 0800 001d 0000 001d 0000     ....`...........
 800c090:	0042 006f 0078 0065 0064 0056 0061 006c     B.o.x.e.d.V.a.l.
 800c0a0:	0075 0065 0054 0079 0070 0065 0052 0065     u.e.T.y.p.e.R.e.
 800c0b0:	0070 0072 0065 0073 0065 006e 0074 0061     p.r.e.s.e.n.t.a.
 800c0c0:	0074 0069 006f 006e 0028 46c0 46c0 46c0     t.i.o.n.(..F.F.F

0800c0d0 <System.String_429>:
 800c0d0:	0004 0000 8a60 0800 0006 0000 0006 0000     ....`...........
 800c0e0:	0062 006f 0078 0065 0064 0020 46c0 46c0     b.o.x.e.d. ..F.F

0800c0f0 <System.String_430>:
 800c0f0:	0004 0000 8a60 0800 0024 0000 0024 0000     ....`...$...$...
 800c100:	0043 006f 006e 0063 0072 0065 0074 0065     C.o.n.c.r.e.t.e.
 800c110:	0052 0065 0066 0065 0072 0065 006e 0063     R.e.f.e.r.e.n.c.
 800c120:	0065 0054 0079 0070 0065 0052 0065 0070     e.T.y.p.e.R.e.p.
 800c130:	0072 0065 0073 0065 006e 0074 0061 0074     r.e.s.e.n.t.a.t.
 800c140:	0069 006f 006e 0028 46c0 46c0 46c0 46c0     i.o.n.(..F.F.F.F

0800c150 <System.String_438>:
 800c150:	0004 0000 8a60 0800 001e 0000 001e 0000     ....`...........
 800c160:	0045 006e 0075 006d 0065 0072 0061 0074     E.n.u.m.e.r.a.t.
 800c170:	0069 006f 006e 0054 0079 0070 0065 0052     i.o.n.T.y.p.e.R.
 800c180:	0065 0070 0072 0065 0073 0065 006e 0074     e.p.r.e.s.e.n.t.
 800c190:	0061 0074 0069 006f 006e 0028 46c0 46c0     a.t.i.o.n.(..F.F

0800c1a0 <System.String_439>:
 800c1a0:	0004 0000 8a60 0800 001c 0000 001c 0000     ....`...........
 800c1b0:	0049 006e 0074 0065 0072 0066 0061 0063     I.n.t.e.r.f.a.c.
 800c1c0:	0065 0054 0079 0070 0065 0052 0065 0070     e.T.y.p.e.R.e.p.
 800c1d0:	0072 0065 0073 0065 006e 0074 0061 0074     r.e.s.e.n.t.a.t.
 800c1e0:	0069 006f 006e 0028 46c0 46c0 46c0 46c0     i.o.n.(..F.F.F.F

0800c1f0 <System.String_440>:
 800c1f0:	0004 0000 8a60 0800 0021 0000 0021 0000     ....`...!...!...
 800c200:	004d 0061 006e 0061 0067 0065 0064 0050     M.a.n.a.g.e.d.P.
 800c210:	006f 0069 006e 0074 0065 0072 0054 0079     o.i.n.t.e.r.T.y.
 800c220:	0070 0065 0052 0065 0070 0072 0065 0073     p.e.R.e.p.r.e.s.
 800c230:	0065 006e 0074 0061 0074 0069 006f 006e     e.n.t.a.t.i.o.n.
 800c240:	0028 46c0 46c0 46c0 46c0 46c0 46c0 46c0     (..F.F.F.F.F.F.F

0800c250 <System.String_441>:
 800c250:	0004 0000 8a60 0800 0001 0000 0001 0000     ....`...........
 800c260:	0026 46c0 46c0 46c0 46c0 46c0 46c0 46c0     &..F.F.F.F.F.F.F

0800c270 <System.String_442>:
 800c270:	0004 0000 8a60 0800 0026 0000 0026 0000     ....`...&...&...
 800c280:	004d 0075 006c 0074 0069 0041 0072 0072     M.u.l.t.i.A.r.r.
 800c290:	0061 0079 0052 0065 0066 0065 0072 0065     a.y.R.e.f.e.r.e.
 800c2a0:	006e 0063 0065 0054 0079 0070 0065 0052     n.c.e.T.y.p.e.R.
 800c2b0:	0065 0070 0072 0065 0073 0065 006e 0074     e.p.r.e.s.e.n.t.
 800c2c0:	0061 0074 0069 006f 006e 0028 46c0 46c0     a.t.i.o.n.(..F.F

0800c2d0 <System.String_443>:
 800c2d0:	0004 0000 8a60 0800 0001 0000 0001 0000     ....`...........
 800c2e0:	005b 46c0 46c0 46c0 46c0 46c0 46c0 46c0     [..F.F.F.F.F.F.F

0800c2f0 <System.String_444>:
 800c2f0:	0004 0000 8a60 0800 0001 0000 0001 0000     ....`...........
 800c300:	005d 46c0 46c0 46c0 46c0 46c0 46c0 46c0     ]..F.F.F.F.F.F.F

0800c310 <System.String_445>:
 800c310:	0004 0000 8a60 0800 0002 0000 0002 0000     ....`...........
 800c320:	002e 002e 46c0 46c0 46c0 46c0 46c0 46c0     .....F.F.F.F.F.F

0800c330 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_446>:
 800c330:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 800c340:	0000 0000 f040 0800 dd80 0800 0000 0000     ....@...........
 800c350:	0000 0000 c4a0 0800 c3a0 0800               ............

0800c35c <System.RuntimeType_447>:
 800c35c:	0004 0000 9380 0800 c3a0 0800 46c0 46c0     .............F.F
 800c36c:	46c0 46c0                                   .F.F

0800c370 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_448>:
 800c370:	0004 0000 8cf0 0800 0009 0000 0d8d 0800     ................
 800c380:	75ed 0800 75fb 0800 7581 0800 7609 0800     .u...u...u...v..
 800c390:	760d 0800 7611 0800 761f 0800 756d 0800     .v...v...v..mu..

0800c3a0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_449>:
 800c3a0:	0004 0000 8c80 0800 0028 0000 0000 0000     ........(.......
 800c3b0:	c330 0800 c35c 0800 ab44 abab c370 0800     0...\...D...p...
 800c3c0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800c3d0 <System.String_450>:
 800c3d0:	0004 0000 8a60 0800 0019 0000 0019 0000     ....`...........
 800c3e0:	0053 0063 0061 006c 0061 0072 0054 0079     S.c.a.l.a.r.T.y.
 800c3f0:	0070 0065 0052 0065 0070 0072 0065 0073     p.e.R.e.p.r.e.s.
 800c400:	0065 006e 0074 0061 0074 0069 006f 006e     e.n.t.a.t.i.o.n.
 800c410:	0028 46c0 46c0 46c0 46c0 46c0 46c0 46c0     (..F.F.F.F.F.F.F

0800c420 <System.String_451>:
 800c420:	0004 0000 8a60 0800 0023 0000 0023 0000     ....`...#...#...
 800c430:	0053 007a 0041 0072 0072 0061 0079 0052     S.z.A.r.r.a.y.R.
 800c440:	0065 0066 0065 0072 0065 006e 0063 0065     e.f.e.r.e.n.c.e.
 800c450:	0054 0079 0070 0065 0052 0065 0070 0072     T.y.p.e.R.e.p.r.
 800c460:	0065 0073 0065 006e 0074 0061 0074 0069     e.s.e.n.t.a.t.i.
 800c470:	006f 006e 0028 46c0 46c0 46c0 46c0 46c0     o.n.(..F.F.F.F.F

0800c480 <System.String_452>:
 800c480:	0004 0000 8a60 0800 0002 0000 0002 0000     ....`...........
 800c490:	005b 005d 46c0 46c0 46c0 46c0 46c0 46c0     [.]..F.F.F.F.F.F

0800c4a0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_453>:
 800c4a0:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 800c4b0:	0000 0000 f090 0800 dd80 0800 0000 0000     ................
 800c4c0:	0000 0000 efc0 0800 c510 0800               ............

0800c4cc <System.RuntimeType_454>:
 800c4cc:	0004 0000 9380 0800 c510 0800 46c0 46c0     .............F.F
 800c4dc:	46c0 46c0                                   .F.F

0800c4e0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_455>:
 800c4e0:	0004 0000 8cf0 0800 0009 0000 0d8d 0800     ................
 800c4f0:	7759 0800 7767 0800 7689 0800 35b1 0800     Yw..gw...v...5..
 800c500:	0a9d 0800 72c1 0800 72d5 0800 33e9 0800     .....r...r...3..

0800c510 <Microsoft.Zelig.Runtime.TypeSystem.VTable_456>:
 800c510:	0004 0000 8c80 0800 0024 0000 0000 0000     ........$.......
 800c520:	c4a0 0800 c4cc 0800 ab44 abab c4e0 0800     ........D.......
 800c530:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800c540 <System.String_457>:
 800c540:	0004 0000 8a60 0800 002a 0000 002a 0000     ....`...*...*...
 800c550:	0046 006f 0075 006e 0064 0020 0074 0077     F.o.u.n.d. .t.w.
 800c560:	006f 0020 0069 006e 0063 006f 006e 0073     o. .i.n.c.o.n.s.
 800c570:	0069 0073 0074 0065 006e 0074 0020 0054     i.s.t.e.n.t. .T.
 800c580:	0079 0070 0065 0052 0065 0070 0072 0065     y.p.e.R.e.p.r.e.
 800c590:	0073 0065 006e 0074 0061 0074 0069 006f     s.e.n.t.a.t.i.o.
 800c5a0:	006e 0073 46c0 46c0 46c0 46c0 46c0 46c0     n.s..F.F.F.F.F.F

0800c5b0 <System.String_458>:
 800c5b0:	0004 0000 8a60 0800 0004 0000 0004 0000     ....`...........
 800c5c0:	0076 006f 0069 0064 46c0 46c0 46c0 46c0     v.o.i.d..F.F.F.F

0800c5d0 <System.String_459>:
 800c5d0:	0004 0000 8a60 0800 0004 0000 0004 0000     ....`...........
 800c5e0:	0062 006f 006f 006c 46c0 46c0 46c0 46c0     b.o.o.l..F.F.F.F

0800c5f0 <System.String_460>:
 800c5f0:	0004 0000 8a60 0800 0004 0000 0004 0000     ....`...........
 800c600:	0063 0068 0061 0072 46c0 46c0 46c0 46c0     c.h.a.r..F.F.F.F

0800c610 <System.String_461>:
 800c610:	0004 0000 8a60 0800 0005 0000 0005 0000     ....`...........
 800c620:	0073 0062 0079 0074 0065 46c0 46c0 46c0     s.b.y.t.e..F.F.F

0800c630 <System.String_462>:
 800c630:	0004 0000 8a60 0800 0004 0000 0004 0000     ....`...........
 800c640:	0062 0079 0074 0065 46c0 46c0 46c0 46c0     b.y.t.e..F.F.F.F

0800c650 <System.String_463>:
 800c650:	0004 0000 8a60 0800 0005 0000 0005 0000     ....`...........
 800c660:	0073 0068 006f 0072 0074 46c0 46c0 46c0     s.h.o.r.t..F.F.F

0800c670 <System.String_464>:
 800c670:	0004 0000 8a60 0800 0006 0000 0006 0000     ....`...........
 800c680:	0075 0073 0068 006f 0072 0074 46c0 46c0     u.s.h.o.r.t..F.F

0800c690 <System.String_465>:
 800c690:	0004 0000 8a60 0800 0003 0000 0003 0000     ....`...........
 800c6a0:	0069 006e 0074 46c0 46c0 46c0 46c0 46c0     i.n.t..F.F.F.F.F

0800c6b0 <System.String_466>:
 800c6b0:	0004 0000 8a60 0800 0004 0000 0004 0000     ....`...........
 800c6c0:	0075 0069 006e 0074 46c0 46c0 46c0 46c0     u.i.n.t..F.F.F.F

0800c6d0 <System.String_467>:
 800c6d0:	0004 0000 8a60 0800 0004 0000 0004 0000     ....`...........
 800c6e0:	006c 006f 006e 0067 46c0 46c0 46c0 46c0     l.o.n.g..F.F.F.F

0800c6f0 <System.String_468>:
 800c6f0:	0004 0000 8a60 0800 0005 0000 0005 0000     ....`...........
 800c700:	0075 006c 006f 006e 0067 46c0 46c0 46c0     u.l.o.n.g..F.F.F

0800c710 <System.String_469>:
 800c710:	0004 0000 8a60 0800 0005 0000 0005 0000     ....`...........
 800c720:	0066 006c 006f 0061 0074 46c0 46c0 46c0     f.l.o.a.t..F.F.F

0800c730 <System.String_470>:
 800c730:	0004 0000 8a60 0800 0006 0000 0006 0000     ....`...........
 800c740:	0064 006f 0075 0062 006c 0065 46c0 46c0     d.o.u.b.l.e..F.F

0800c750 <System.String_471>:
 800c750:	0004 0000 8a60 0800 0006 0000 0006 0000     ....`...........
 800c760:	0073 0074 0072 0069 006e 0067 46c0 46c0     s.t.r.i.n.g..F.F

0800c770 <System.String_472>:
 800c770:	0004 0000 8a60 0800 0006 0000 0006 0000     ....`...........
 800c780:	006f 0062 006a 0065 0063 0074 46c0 46c0     o.b.j.e.c.t..F.F

0800c790 <System.String_473>:
 800c790:	0004 0000 8a60 0800 0008 0000 0008 0000     ....`...........
 800c7a0:	0064 0065 006c 0061 0079 0065 0064 0020     d.e.l.a.y.e.d. .

0800c7b0 <System.String_475>:
 800c7b0:	0004 0000 8a60 0800 0018 0000 0018 0000     ....`...........
 800c7c0:	0056 0061 006c 0075 0065 0054 0079 0070     V.a.l.u.e.T.y.p.
 800c7d0:	0065 0052 0065 0070 0072 0065 0073 0065     e.R.e.p.r.e.s.e.
 800c7e0:	006e 0074 0061 0074 0069 006f 006e 0028     n.t.a.t.i.o.n.(.

0800c7f0 <Microsoft.Zelig.Runtime.TypeSystem.ManagedPointerTypeRepresentation_476>:
 800c7f0:	0004 0000 ea20 0800 ab10 abab 0000 0000     .... ...........
	...
 800c818:	c840 0800 be70 0800                         @...p...

0800c820 <System.RuntimeType_477>:
 800c820:	0004 0000 9380 0800 c840 0800               ........@...

0800c82c <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_478>:
 800c82c:	0004 0000 8cf0 0800 0000 0000 46c0 46c0     .............F.F
 800c83c:	46c0 46c0                                   .F.F

0800c840 <Microsoft.Zelig.Runtime.TypeSystem.VTable_479>:
 800c840:	0004 0000 8c80 0800 0004 0000 0000 0000     ................
 800c850:	c7f0 0800 c820 0800 ab00 abab c82c 0800     .... .......,...
 800c860:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800c870 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_480>:
 800c870:	0004 0000 db20 0800 ab12 abab 0101 0010     .... ...........
 800c880:	0000 0000 f0d0 0800 f0f0 0800 0000 0000     ................
 800c890:	0000 0000 a5e0 0800 c900 0800               ............

0800c89c <System.RuntimeType_481>:
 800c89c:	0004 0000 9380 0800 c900 0800 46c0 46c0     .............F.F
 800c8ac:	46c0 46c0                                   .F.F

0800c8b0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_482>:
 800c8b0:	0004 0000 8cf0 0800 0004 0000 0d8d 0800     ................
 800c8c0:	08ed 0800 08f9 0800 7cdd 0800               .........|..

0800c8cc <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_483>:
 800c8cc:	0004 0000 8cf0 0800 0001 0000 7cdd 0800     .............|..
 800c8dc:	46c0 46c0                                   .F.F

0800c8e0 <Microsoft.Zelig.Runtime.TypeSystem.VTable.InterfaceMap[]_484>:
 800c8e0:	0004 0000 8d40 0800 0001 0000 9610 0800     ....@...........
 800c8f0:	c8cc 0800 46c0 46c0 46c0 46c0 46c0 46c0     .....F.F.F.F.F.F

0800c900 <Microsoft.Zelig.Runtime.TypeSystem.VTable_485>:
 800c900:	0004 0000 8c80 0800 0010 0000 0000 0000     ................
 800c910:	c870 0800 c89c 0800 ab44 abab c8b0 0800     p.......D.......
 800c920:	c8e0 0800 46c0 46c0 46c0 46c0 46c0 46c0     .....F.F.F.F.F.F

0800c930 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_486>:
 800c930:	0004 0000 db20 0800 ab12 abab 0000 0010     .... ...........
 800c940:	0000 0000 f130 0800 f0f0 0800 0000 0000     ....0...........
 800c950:	0000 0000 a5e0 0800 ca20 0800               ........ ...

0800c95c <System.RuntimeType_487>:
 800c95c:	0004 0000 9380 0800 ca20 0800 46c0 46c0     ........ ....F.F
 800c96c:	46c0 46c0                                   .F.F

0800c970 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_488>:
 800c970:	0004 0000 8cf0 0800 0006 0000 0d8d 0800     ................
 800c980:	08ed 0800 08f9 0800 7b75 0800 7b9d 0800     ........u{...{..
 800c990:	7c09 0800                                   .|..

0800c994 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_489>:
 800c994:	0004 0000 8cf0 0800 0001 0000 7b75 0800     ............u{..
 800c9a4:	46c0 46c0 46c0 46c0 46c0 46c0               .F.F.F.F.F.F

0800c9b0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_490>:
 800c9b0:	0004 0000 8c80 0800 0000 0000 0000 0000     ................
 800c9c0:	f170 0800 f19c 0800 ab43 abab f1b0 0800     p.......C.......
 800c9d0:	f1f0 0800 46c0 46c0 46c0 46c0 46c0 46c0     .....F.F.F.F.F.F

0800c9e0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_491>:
 800c9e0:	0004 0000 8cf0 0800 0002 0000 7c09 0800     .............|..
 800c9f0:	7b9d 0800 46c0 46c0 46c0 46c0 46c0 46c0     .{...F.F.F.F.F.F

0800ca00 <Microsoft.Zelig.Runtime.TypeSystem.VTable.InterfaceMap[]_492>:
 800ca00:	0004 0000 8d40 0800 0002 0000 9610 0800     ....@...........
 800ca10:	c994 0800 c9b0 0800 c9e0 0800 46c0 46c0     .............F.F

0800ca20 <Microsoft.Zelig.Runtime.TypeSystem.VTable_493>:
 800ca20:	0004 0000 8c80 0800 0004 0000 0000 0000     ................
 800ca30:	c930 0800 c95c 0800 ab44 abab c970 0800     0...\...D...p...
 800ca40:	ca00 0800 46c0 46c0 46c0 46c0 46c0 46c0     .....F.F.F.F.F.F

0800ca50 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_494>:
 800ca50:	0004 0000 db20 0800 ab12 abab 0101 0010     .... ...........
 800ca60:	0000 0000 f210 0800 f0f0 0800 0000 0000     ................
 800ca70:	0000 0000 a5e0 0800 cab0 0800               ............

0800ca7c <System.RuntimeType_495>:
 800ca7c:	0004 0000 9380 0800 cab0 0800 46c0 46c0     .............F.F
 800ca8c:	46c0 46c0                                   .F.F

0800ca90 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_496>:
 800ca90:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 800caa0:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

0800cab0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_497>:
 800cab0:	0004 0000 8c80 0800 0000 0000 0000 0000     ................
 800cac0:	ca50 0800 ca7c 0800 ab44 abab ca90 0800     P...|...D.......
 800cad0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800cae0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_498>:
 800cae0:	0004 0000 db20 0800 ab12 abab 2001 0010     .... ........ ..
 800caf0:	0000 0000 f240 0800 db90 0800 0000 0000     ....@...........
 800cb00:	0000 0000 b960 0800 cb40 0800               ....`...@...

0800cb0c <System.RuntimeType_499>:
 800cb0c:	0004 0000 9380 0800 cb40 0800 46c0 46c0     ........@....F.F
 800cb1c:	46c0 46c0                                   .F.F

0800cb20 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_500>:
 800cb20:	0004 0000 8cf0 0800 0004 0000 08e1 0800     ................
 800cb30:	08ed 0800 08f9 0800 67a1 0800 46c0 46c0     .........g...F.F

0800cb40 <Microsoft.Zelig.Runtime.TypeSystem.VTable_501>:
 800cb40:	0004 0000 8c80 0800 0008 0000 0000 0000     ................
 800cb50:	cae0 0800 cb0c 0800 ab44 abab cb20 0800     ........D... ...
 800cb60:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800cb70 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_502>:
 800cb70:	0004 0000 db20 0800 ab12 abab 0102 0000     .... ...........
 800cb80:	0000 0000 f280 0800 9434 0800 f2a0 0800     ........4.......
 800cb90:	0000 0000 9260 0800 cbd0 0800               ....`.......

0800cb9c <System.RuntimeType_503>:
 800cb9c:	0004 0000 9380 0800 cbd0 0800 46c0 46c0     .............F.F
 800cbac:	46c0 46c0                                   .F.F

0800cbb0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_504>:
 800cbb0:	0004 0000 8cf0 0800 0005 0000 0d8d 0800     ................
 800cbc0:	11f5 0800 1249 0800 1283 0800 7eb1 0800     ....I........~..

0800cbd0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_505>:
 800cbd0:	0004 0000 8c80 0800 000c 0000 0000 0000     ................
 800cbe0:	cb70 0800 cb9c 0800 ab44 abab cbb0 0800     p.......D.......
 800cbf0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800cc00 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_507>:
 800cc00:	0004 0000 db20 0800 ab12 abab 0101 0010     .... ...........
 800cc10:	0000 0000 e2f0 0800 e2a0 0800 0000 0000     ................
 800cc20:	f2cc 0800 a5e0 0800 cc60 0800               ........`...

0800cc2c <System.RuntimeType_508>:
 800cc2c:	0004 0000 9380 0800 cc60 0800 46c0 46c0     ........`....F.F
 800cc3c:	46c0 46c0                                   .F.F

0800cc40 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_509>:
 800cc40:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 800cc50:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

0800cc60 <Microsoft.Zelig.Runtime.TypeSystem.VTable_510>:
 800cc60:	0004 0000 8c80 0800 0008 0000 0000 0000     ................
 800cc70:	cc00 0800 cc2c 0800 ab44 abab cc40 0800     ....,...D...@...
 800cc80:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800cc90 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_511>:
 800cc90:	0004 0000 db20 0800 ab12 abab 0002 0010     .... ...........
 800cca0:	0000 0000 e660 0800 9434 0800 f2a0 0800     ....`...4.......
 800ccb0:	0000 0000 a5e0 0800 ccf0 0800               ............

0800ccbc <System.RuntimeType_512>:
 800ccbc:	0004 0000 9380 0800 ccf0 0800 46c0 46c0     .............F.F
 800cccc:	46c0 46c0                                   .F.F

0800ccd0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_513>:
 800ccd0:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 800cce0:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

0800ccf0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_514>:
 800ccf0:	0004 0000 8c80 0800 0014 0000 0000 0000     ................
 800cd00:	cc90 0800 ccbc 0800 ab44 abab ccd0 0800     ........D.......
 800cd10:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800cd20 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_515>:
 800cd20:	0004 0000 db20 0800 ab12 abab 0102 0000     .... ...........
 800cd30:	0000 0000 f280 0800 9434 0800 f2e0 0800     ........4.......
 800cd40:	0000 0000 9260 0800 cd80 0800               ....`.......

0800cd4c <System.RuntimeType_516>:
 800cd4c:	0004 0000 9380 0800 cd80 0800 46c0 46c0     .............F.F
 800cd5c:	46c0 46c0                                   .F.F

0800cd60 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_517>:
 800cd60:	0004 0000 8cf0 0800 0005 0000 0d8d 0800     ................
 800cd70:	11f5 0800 1249 0800 1283 0800 8241 0800     ....I.......A...

0800cd80 <Microsoft.Zelig.Runtime.TypeSystem.VTable_518>:
 800cd80:	0004 0000 8c80 0800 000c 0000 0000 0000     ................
 800cd90:	cd20 0800 cd4c 0800 ab44 abab cd60 0800      ...L...D...`...
 800cda0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800cdb0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_524>:
 800cdb0:	0004 0000 db20 0800 ab12 abab 0001 0010     .... ...........
 800cdc0:	0000 0000 f0d0 0800 f310 0800 0000 0000     ................
 800cdd0:	0000 0000 f370 0800 ce50 0800               ....p...P...

0800cddc <System.RuntimeType_525>:
 800cddc:	0004 0000 9380 0800 ce50 0800 46c0 46c0     ........P....F.F
 800cdec:	46c0 46c0                                   .F.F

0800cdf0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_526>:
 800cdf0:	0004 0000 8cf0 0800 0008 0000 0d8d 0800     ................
 800ce00:	08ed 0800 08f9 0800 7b7f 0800 79f9 0800     .........{...y..
 800ce10:	79e5 0800 7a11 0800 82cd 0800               .y...z......

0800ce1c <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_527>:
 800ce1c:	0004 0000 8cf0 0800 0001 0000 7b7f 0800     .............{..
 800ce2c:	46c0 46c0                                   .F.F

0800ce30 <Microsoft.Zelig.Runtime.TypeSystem.VTable.InterfaceMap[]_528>:
 800ce30:	0004 0000 8d40 0800 0001 0000 9610 0800     ....@...........
 800ce40:	ce1c 0800 46c0 46c0 46c0 46c0 46c0 46c0     .....F.F.F.F.F.F

0800ce50 <Microsoft.Zelig.Runtime.TypeSystem.VTable_529>:
 800ce50:	0004 0000 8c80 0800 0020 0000 0000 0000     ........ .......
 800ce60:	cdb0 0800 cddc 0800 ab44 abab cdf0 0800     ........D.......
 800ce70:	ce30 0800 46c0 46c0 46c0 46c0 46c0 46c0     0....F.F.F.F.F.F

0800ce80 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_530>:
 800ce80:	0004 0000 db20 0800 ab12 abab 0101 0010     .... ...........
 800ce90:	0000 0000 e270 0800 e2a0 0800 0000 0000     ....p...........
 800cea0:	f39c 0800 a5e0 0800 cee0 0800               ............

0800ceac <System.RuntimeType_531>:
 800ceac:	0004 0000 9380 0800 cee0 0800 46c0 46c0     .............F.F
 800cebc:	46c0 46c0                                   .F.F

0800cec0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_532>:
 800cec0:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 800ced0:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

0800cee0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_533>:
 800cee0:	0004 0000 8c80 0800 000c 0000 0000 0000     ................
 800cef0:	ce80 0800 ceac 0800 ab44 abab cec0 0800     ........D.......
 800cf00:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800cf10 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_534>:
 800cf10:	0004 0000 db20 0800 ab12 abab 0102 0000     .... ...........
 800cf20:	0000 0000 f280 0800 9434 0800 f3b0 0800     ........4.......
 800cf30:	0000 0000 9260 0800 cf70 0800               ....`...p...

0800cf3c <System.RuntimeType_535>:
 800cf3c:	0004 0000 9380 0800 cf70 0800 46c0 46c0     ........p....F.F
 800cf4c:	46c0 46c0                                   .F.F

0800cf50 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_536>:
 800cf50:	0004 0000 8cf0 0800 0005 0000 0d8d 0800     ................
 800cf60:	11f5 0800 1249 0800 1283 0800 857b 0800     ....I.......{...

0800cf70 <Microsoft.Zelig.Runtime.TypeSystem.VTable_537>:
 800cf70:	0004 0000 8c80 0800 000c 0000 0000 0000     ................
 800cf80:	cf10 0800 cf3c 0800 ab44 abab cf50 0800     ....<...D...P...
 800cf90:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800cfa0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_539>:
 800cfa0:	0004 0000 db20 0800 ab12 abab 0101 0010     .... ...........
 800cfb0:	0000 0000 e2f0 0800 e2a0 0800 0000 0000     ................
 800cfc0:	f3dc 0800 a5e0 0800 d000 0800               ............

0800cfcc <System.RuntimeType_540>:
 800cfcc:	0004 0000 9380 0800 d000 0800 46c0 46c0     .............F.F
 800cfdc:	46c0 46c0                                   .F.F

0800cfe0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_541>:
 800cfe0:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 800cff0:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

0800d000 <Microsoft.Zelig.Runtime.TypeSystem.VTable_542>:
 800d000:	0004 0000 8c80 0800 0008 0000 0000 0000     ................
 800d010:	cfa0 0800 cfcc 0800 ab44 abab cfe0 0800     ........D.......
 800d020:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800d030 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_543>:
 800d030:	0004 0000 db20 0800 ab12 abab 0101 0010     .... ...........
 800d040:	0000 0000 f3f0 0800 e2a0 0800 0000 0000     ................
 800d050:	f42c 0800 a5e0 0800 d090 0800               ,...........

0800d05c <System.RuntimeType_544>:
 800d05c:	0004 0000 9380 0800 d090 0800 46c0 46c0     .............F.F
 800d06c:	46c0 46c0                                   .F.F

0800d070 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_545>:
 800d070:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 800d080:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

0800d090 <Microsoft.Zelig.Runtime.TypeSystem.VTable_546>:
 800d090:	0004 0000 8c80 0800 001c 0000 0000 0000     ................
 800d0a0:	d030 0800 d05c 0800 ab44 abab d070 0800     0...\...D...p...
 800d0b0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800d0c0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_548>:
 800d0c0:	0004 0000 db20 0800 ab12 abab 0002 0010     .... ...........
 800d0d0:	0000 0000 f440 0800 9434 0800 f3b0 0800     ....@...4.......
 800d0e0:	0000 0000 a5e0 0800 d120 0800               ........ ...

0800d0ec <System.RuntimeType_549>:
 800d0ec:	0004 0000 9380 0800 d120 0800 46c0 46c0     ........ ....F.F
 800d0fc:	46c0 46c0                                   .F.F

0800d100 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_550>:
 800d100:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 800d110:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

0800d120 <Microsoft.Zelig.Runtime.TypeSystem.VTable_551>:
 800d120:	0004 0000 8c80 0800 000c 0000 0000 0000     ................
 800d130:	d0c0 0800 d0ec 0800 ab44 abab d100 0800     ........D.......
 800d140:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800d150 <Microsoft.Zelig.Runtime.TypeSystem.ManagedPointerTypeRepresentation_552>:
 800d150:	0004 0000 ea20 0800 ab10 abab 0000 0000     .... ...........
	...
 800d178:	d1a0 0800 f470 0800                         ....p...

0800d180 <System.RuntimeType_553>:
 800d180:	0004 0000 9380 0800 d1a0 0800               ............

0800d18c <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_554>:
 800d18c:	0004 0000 8cf0 0800 0000 0000 46c0 46c0     .............F.F
 800d19c:	46c0 46c0                                   .F.F

0800d1a0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_555>:
 800d1a0:	0004 0000 8c80 0800 0004 0000 0000 0000     ................
 800d1b0:	d150 0800 d180 0800 ab00 abab d18c 0800     P...............
 800d1c0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800d1d0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_556>:
 800d1d0:	0004 0000 db20 0800 ab12 abab 0101 0010     .... ...........
 800d1e0:	0000 0000 e270 0800 e2a0 0800 0000 0000     ....p...........
 800d1f0:	f49c 0800 a5e0 0800 d230 0800               ........0...

0800d1fc <System.RuntimeType_557>:
 800d1fc:	0004 0000 9380 0800 d230 0800 46c0 46c0     ........0....F.F
 800d20c:	46c0 46c0                                   .F.F

0800d210 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_558>:
 800d210:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 800d220:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

0800d230 <Microsoft.Zelig.Runtime.TypeSystem.VTable_559>:
 800d230:	0004 0000 8c80 0800 000c 0000 0000 0000     ................
 800d240:	d1d0 0800 d1fc 0800 ab44 abab d210 0800     ........D.......
 800d250:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800d260 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_560>:
 800d260:	0004 0000 db20 0800 ab12 abab 0002 0010     .... ...........
 800d270:	0000 0000 f4b0 0800 9434 0800 f2e0 0800     ........4.......
 800d280:	0000 0000 a5e0 0800 d2c0 0800               ............

0800d28c <System.RuntimeType_561>:
 800d28c:	0004 0000 9380 0800 d2c0 0800 46c0 46c0     .............F.F
 800d29c:	46c0 46c0                                   .F.F

0800d2a0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_562>:
 800d2a0:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 800d2b0:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

0800d2c0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_563>:
 800d2c0:	0004 0000 8c80 0800 0014 0000 0000 0000     ................
 800d2d0:	d260 0800 d28c 0800 ab44 abab d2a0 0800     `.......D.......
 800d2e0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800d2f0 <System.String_564>:
 800d2f0:	0004 0000 8a60 0800 001f 0000 001f 0000     ....`...........
 800d300:	0043 0061 006e 006e 006f 0074 0020 0062     C.a.n.n.o.t. .b.
 800d310:	006f 006f 0074 0073 0074 0072 0061 0070     o.o.t.s.t.r.a.p.
 800d320:	0020 0069 006e 0020 0054 0068 0072 0065      .i.n. .T.h.r.e.
 800d330:	0061 0064 0020 006d 006f 0064 0065 46c0     a.d. .m.o.d.e..F

0800d340 <Microsoft.Zelig.Runtime.TypeSystem.SzArrayReferenceTypeRepresentation_566>:
 800d340:	0004 0000 8f40 0800 ab1d abab 0000 0000     ....@...........
	...
 800d364:	e4f0 0800 d3a0 0800 f470 0800               ........p...

0800d370 <System.RuntimeType_567>:
 800d370:	0004 0000 9380 0800 d3a0 0800 46c0 46c0     .............F.F

0800d380 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_568>:
 800d380:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 800d390:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

0800d3a0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_569>:
 800d3a0:	0004 0000 8c80 0800 0004 0000 000c 0000     ................
 800d3b0:	d340 0800 d370 0800 abc6 abab d380 0800     @...p...........
 800d3c0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800d3d0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_570>:
 800d3d0:	0004 0000 db20 0800 ab0e abab 2101 0010     .... ........!..
 800d3e0:	0000 0000 f4d0 0800 db90 0800 0000 0000     ................
 800d3f0:	0000 0000 a5e0 0800 8a60 0800 46c0 46c0     ........`....F.F

0800d400 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_571>:
 800d400:	0004 0000 8cf0 0800 0003 0000 173d 0800     ............=...
 800d410:	14d1 0800 15fb 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

0800d420 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_572>:
 800d420:	0004 0000 db20 0800 ab12 abab 0101 0010     .... ...........
 800d430:	0000 0000 f4f0 0800 f520 0800 0000 0000     ........ .......
 800d440:	0000 0000 f570 0800 8ac0 0800               ....p.......

0800d44c <System.RuntimeType_573>:
 800d44c:	0004 0000 9380 0800 8ac0 0800 46c0 46c0     .............F.F
 800d45c:	46c0 46c0                                   .F.F

0800d460 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_574>:
 800d460:	0004 0000 8cf0 0800 0016 0000 0d8d 0800     ................
 800d470:	08ed 0800 08f9 0800 8989 0800 3983 0800     .............9..
 800d480:	3993 0800 39a9 0800 38f5 0800 202d 0800     .9...9...8..- ..
 800d490:	22b9 0800 271b 0800 2385 0800 2c61 0800     ."...'...#..a,..
 800d4a0:	2655 0800 85fd 0800 2cf7 0800 2cef 0800     U&.......,...,..
 800d4b0:	2e81 0800 2d47 0800 2d3d 0800 476f 0800     ....G-..=-..oG..
 800d4c0:	4773 0800 46c0 46c0 46c0 46c0 46c0 46c0     sG...F.F.F.F.F.F

0800d4d0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_575>:
 800d4d0:	0004 0000 db20 0800 ab12 abab 0001 0010     .... ...........
 800d4e0:	0000 0000 f5a0 0800 f5e0 0800 0000 0000     ................
 800d4f0:	0000 0000 f620 0800 8af0 0800               .... .......

0800d4fc <System.RuntimeType_576>:
 800d4fc:	0004 0000 9380 0800 8af0 0800 46c0 46c0     .............F.F
 800d50c:	46c0 46c0                                   .F.F

0800d510 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_577>:
 800d510:	0004 0000 8cf0 0800 000a 0000 0d8d 0800     ................
 800d520:	08ed 0800 08f9 0800 398b 0800 0921 0800     .........9..!...
 800d530:	4265 0800 15b5 0800 1655 0800 094d 0800     eB......U...M...
 800d540:	0549 0800 46c0 46c0 46c0 46c0 46c0 46c0     I....F.F.F.F.F.F

0800d550 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_578>:
 800d550:	0004 0000 db20 0800 ab12 abab 0001 0010     .... ...........
 800d560:	0000 0000 f650 0800 dd80 0800 0000 0000     ....P...........
 800d570:	0000 0000 a5e0 0800 8b20 0800               ........ ...

0800d57c <System.RuntimeType_579>:
 800d57c:	0004 0000 9380 0800 8b20 0800 46c0 46c0     ........ ....F.F
 800d58c:	46c0 46c0                                   .F.F

0800d590 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_580>:
 800d590:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 800d5a0:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

0800d5b0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_581>:
 800d5b0:	0004 0000 8c80 0800 0000 0000 0000 0000     ................
 800d5c0:	f680 0800 f6ac 0800 ab44 abab f6c0 0800     ........D.......
 800d5d0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800d5e0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_582>:
 800d5e0:	0004 0000 8c80 0800 0004 0000 0000 0000     ................
 800d5f0:	f6e0 0800 f70c 0800 ab44 abab f720 0800     ........D... ...
 800d600:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800d610 <Microsoft.Zelig.Runtime.TypeSystem.VTable_583>:
 800d610:	0004 0000 8c80 0800 0004 0000 0004 0000     ................
 800d620:	f740 0800 f770 0800 abc6 abab f780 0800     @...p...........
 800d630:	8d64 0800                                   d...

0800d634 <Microsoft.Zelig.Runtime.Memory.Range[]_584>:
 800d634:	0004 0000 d610 0800 0000 0000               ............

0800d640 <Microsoft.Zelig.Runtime.TypeSystem.VTable_585>:
 800d640:	0004 0000 8c80 0800 0014 0000 0000 0000     ................
 800d650:	f7a0 0800 f7cc 0800 ab44 abab f7e0 0800     ........D.......
 800d660:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800d670 <Microsoft.Zelig.Runtime.TypeSystem.VTable_586>:
 800d670:	0004 0000 8c80 0800 0000 0000 0000 0000     ................
 800d680:	f810 0800 f83c 0800 ab44 abab f850 0800     ....<...D...P...
 800d690:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800d6a0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_587>:
 800d6a0:	0004 0000 8c80 0800 0000 0000 0000 0000     ................
 800d6b0:	f890 0800 f8bc 0800 ab44 abab f8d0 0800     ........D.......
 800d6c0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800d6d0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_588>:
 800d6d0:	0004 0000 8c80 0800 0000 0000 0000 0000     ................
 800d6e0:	f8f0 0800 f91c 0800 ab44 abab f930 0800     ........D...0...
 800d6f0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800d700 <Microsoft.Zelig.Runtime.TypeSystem.VTable_589>:
 800d700:	0004 0000 8c80 0800 0000 0000 0000 0000     ................
 800d710:	f950 0800 f97c 0800 ab44 abab f990 0800     P...|...D.......
 800d720:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800d730 <Microsoft.Zelig.Runtime.TypeSystem.VTable_590>:
 800d730:	0004 0000 8c80 0800 0000 0000 0000 0000     ................
 800d740:	f9c0 0800 f9ec 0800 ab44 abab fa00 0800     ........D.......
 800d750:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800d760 <Microsoft.Zelig.Runtime.TypeSystem.VTable_591>:
 800d760:	0004 0000 8c80 0800 0019 0000 0000 0000     ................
 800d770:	fa30 0800 fa5c 0800 ab44 abab fa70 0800     0...\...D...p...
 800d780:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800d790 <Microsoft.Zelig.Runtime.TypeSystem.VTable_592>:
 800d790:	0004 0000 8c80 0800 000c 0000 0000 0000     ................
 800d7a0:	fa90 0800 fabc 0800 ab44 abab fad0 0800     ........D.......
 800d7b0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800d7c0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_593>:
 800d7c0:	0004 0000 8c80 0800 0014 0000 0000 0000     ................
 800d7d0:	faf0 0800 fb1c 0800 ab44 abab fb30 0800     ........D...0...
 800d7e0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800d7f0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_594>:
 800d7f0:	0004 0000 8c80 0800 0000 0000 0000 0000     ................
 800d800:	fb50 0800 fb7c 0800 ab44 abab fb90 0800     P...|...D.......
 800d810:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800d820 <Microsoft.Zelig.Runtime.TypeSystem.VTable_595>:
 800d820:	0004 0000 8c80 0800 0000 0000 0000 0000     ................
 800d830:	e210 0800 fbb0 0800 ab44 abab fbc0 0800     ........D.......
 800d840:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800d850 <Microsoft.Zelig.Runtime.TypeSystem.VTable_596>:
 800d850:	0004 0000 8c80 0800 0000 0000 0000 0000     ................
 800d860:	fbf0 0800 fc1c 0800 ab44 abab fc30 0800     ........D...0...
 800d870:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800d880 <Microsoft.Zelig.Runtime.TypeSystem.VTable_597>:
 800d880:	0004 0000 8c80 0800 0010 0000 0000 0000     ................
 800d890:	fc60 0800 fc8c 0800 ab44 abab fca0 0800     `.......D.......
 800d8a0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800d8b0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_598>:
 800d8b0:	0004 0000 8c80 0800 0000 0000 0000 0000     ................
 800d8c0:	fcc0 0800 fcec 0800 ab44 abab fd00 0800     ........D.......
 800d8d0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800d8e0 <Microsoft.Zelig.Runtime.TypeSystem.SzArrayReferenceTypeRepresentation_599>:
 800d8e0:	0004 0000 8f40 0800 ab1d abab 0000 0000     ....@...........
	...
 800d904:	e4f0 0800 8b70 0800 e0b0 0800               ....p.......

0800d910 <System.RuntimeType_600>:
 800d910:	0004 0000 9380 0800 8b70 0800 46c0 46c0     ........p....F.F

0800d920 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_601>:
 800d920:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 800d930:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

0800d940 <Microsoft.Zelig.Runtime.TypeSystem.SzArrayReferenceTypeRepresentation_602>:
 800d940:	0004 0000 8f40 0800 ab1d abab 0000 0000     ....@...........
	...
 800d964:	e4f0 0800 8ba0 0800 c4a0 0800               ............

0800d970 <System.RuntimeType_603>:
 800d970:	0004 0000 9380 0800 8ba0 0800 46c0 46c0     .............F.F

0800d980 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_604>:
 800d980:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 800d990:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

0800d9a0 <Microsoft.Zelig.Runtime.TypeSystem.SzArrayReferenceTypeRepresentation_605>:
 800d9a0:	0004 0000 8f40 0800 ab1d abab 0000 0000     ....@...........
	...
 800d9c4:	e4f0 0800 8bd0 0800 df20 0800               ........ ...

0800d9d0 <System.RuntimeType_606>:
 800d9d0:	0004 0000 9380 0800 8bd0 0800 46c0 46c0     .............F.F

0800d9e0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_607>:
 800d9e0:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 800d9f0:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

0800da00 <Microsoft.Zelig.Runtime.TypeSystem.SzArrayReferenceTypeRepresentation_608>:
 800da00:	0004 0000 8f40 0800 ab1d abab 0000 0000     ....@...........
	...
 800da24:	e4f0 0800 8c00 0800 dea0 0800               ............

0800da30 <System.RuntimeType_609>:
 800da30:	0004 0000 9380 0800 8c00 0800 46c0 46c0     .............F.F

0800da40 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_610>:
 800da40:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 800da50:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

0800da60 <Microsoft.Zelig.Runtime.TypeSystem.SzArrayReferenceTypeRepresentation_611>:
 800da60:	0004 0000 8f40 0800 ab1d abab 0000 0000     ....@...........
	...
 800da84:	e4f0 0800 8c30 0800 d3d0 0800               ....0.......

0800da90 <System.RuntimeType_612>:
 800da90:	0004 0000 9380 0800 8c30 0800 46c0 46c0     ........0....F.F

0800daa0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_613>:
 800daa0:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 800dab0:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

0800dac0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_614>:
 800dac0:	0004 0000 db20 0800 ab12 abab 0101 0010     .... ...........
 800dad0:	0000 0000 fd30 0800 dd80 0800 0000 0000     ....0...........
 800dae0:	0000 0000 a5e0 0800 8c80 0800               ............

0800daec <System.RuntimeType_615>:
 800daec:	0004 0000 9380 0800 8c80 0800 46c0 46c0     .............F.F
 800dafc:	46c0 46c0                                   .F.F

0800db00 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_616>:
 800db00:	0004 0000 8cf0 0800 0003 0000 35d9 0800     .............5..
 800db10:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

0800db20 <Microsoft.Zelig.Runtime.TypeSystem.VTable_617>:
 800db20:	0004 0000 8c80 0800 0024 0000 0000 0000     ........$.......
 800db30:	fd50 0800 fd7c 0800 ab44 abab fd90 0800     P...|...D.......
 800db40:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800db50 <System.String_618>:
 800db50:	0004 0000 8a60 0800 0015 0000 0015 0000     ....`...........
 800db60:	0041 0072 0067 0075 006d 0065 006e 0074     A.r.g.u.m.e.n.t.
 800db70:	004e 0075 006c 006c 0045 0078 0063 0065     N.u.l.l.E.x.c.e.
 800db80:	0070 0074 0069 006f 006e 46c0 46c0 46c0     p.t.i.o.n..F.F.F

0800db90 <System.String_619>:
 800db90:	0004 0000 8a60 0800 0006 0000 0006 0000     ....`...........
 800dba0:	0053 0079 0073 0074 0065 006d 46c0 46c0     S.y.s.t.e.m..F.F

0800dbb0 <Microsoft.Zelig.Runtime.TypeSystem.SzArrayReferenceTypeRepresentation_620>:
 800dbb0:	0004 0000 8f40 0800 ab1d abab 0000 0000     ....@...........
	...
 800dbd4:	e4f0 0800 8cf0 0800 fdc0 0800               ............

0800dbe0 <System.RuntimeType_621>:
 800dbe0:	0004 0000 9380 0800 8cf0 0800 46c0 46c0     .............F.F

0800dbf0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_622>:
 800dbf0:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 800dc00:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

0800dc10 <Microsoft.Zelig.Runtime.TypeSystem.SzArrayReferenceTypeRepresentation_623>:
 800dc10:	0004 0000 8f40 0800 ab1d abab 0000 0000     ....@...........
	...
 800dc34:	e4f0 0800 8d40 0800 fdf0 0800               ....@.......

0800dc40 <System.RuntimeType_624>:
 800dc40:	0004 0000 9380 0800 8d40 0800 46c0 46c0     ........@....F.F

0800dc50 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_625>:
 800dc50:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 800dc60:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

0800dc70 <System.String_626>:
 800dc70:	0004 0000 8a60 0800 0015 0000 0015 0000     ....`...........
 800dc80:	004e 006f 0074 0053 0075 0070 0070 006f     N.o.t.S.u.p.p.o.
 800dc90:	0072 0074 0065 0064 0045 0078 0063 0065     r.t.e.d.E.x.c.e.
 800dca0:	0070 0074 0069 006f 006e 46c0 46c0 46c0     p.t.i.o.n..F.F.F

0800dcb0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_627>:
 800dcb0:	0004 0000 db20 0800 ab12 abab 2001 0010     .... ........ ..
 800dcc0:	0000 0000 fe20 0800 db90 0800 0000 0000     .... ...........
 800dcd0:	0000 0000 ac50 0800 fe50 0800 46c0 46c0     ....P...P....F.F

0800dce0 <System.String_628>:
 800dce0:	0004 0000 8a60 0800 0018 0000 0018 0000     ....`...........
 800dcf0:	0049 006e 0064 0065 0078 004f 0075 0074     I.n.d.e.x.O.u.t.
 800dd00:	004f 0066 0052 0061 006e 0067 0065 0045     O.f.R.a.n.g.e.E.
 800dd10:	0078 0063 0065 0070 0074 0069 006f 006e     x.c.e.p.t.i.o.n.

0800dd20 <System.String_629>:
 800dd20:	0004 0000 8a60 0800 0022 0000 0022 0000     ....`..."..."...
 800dd30:	0053 007a 0041 0072 0072 0061 0079 0052     S.z.A.r.r.a.y.R.
 800dd40:	0065 0066 0065 0072 0065 006e 0063 0065     e.f.e.r.e.n.c.e.
 800dd50:	0054 0079 0070 0065 0052 0065 0070 0072     T.y.p.e.R.e.p.r.
 800dd60:	0065 0073 0065 006e 0074 0061 0074 0069     e.s.e.n.t.a.t.i.
 800dd70:	006f 006e 46c0 46c0 46c0 46c0 46c0 46c0     o.n..F.F.F.F.F.F

0800dd80 <System.String_630>:
 800dd80:	0004 0000 8a60 0800 0022 0000 0022 0000     ....`..."..."...
 800dd90:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 800dda0:	0074 002e 005a 0065 006c 0069 0067 002e     t...Z.e.l.i.g...
 800ddb0:	0052 0075 006e 0074 0069 006d 0065 002e     R.u.n.t.i.m.e...
 800ddc0:	0054 0079 0070 0065 0053 0079 0073 0074     T.y.p.e.S.y.s.t.
 800ddd0:	0065 006d 46c0 46c0 46c0 46c0 46c0 46c0     e.m..F.F.F.F.F.F

0800dde0 <System.String_631>:
 800dde0:	0004 0000 8a60 0800 0025 0000 0025 0000     ....`...%...%...
 800ddf0:	004d 0075 006c 0074 0069 0041 0072 0072     M.u.l.t.i.A.r.r.
 800de00:	0061 0079 0052 0065 0066 0065 0072 0065     a.y.R.e.f.e.r.e.
 800de10:	006e 0063 0065 0054 0079 0070 0065 0052     n.c.e.T.y.p.e.R.
 800de20:	0065 0070 0072 0065 0073 0065 006e 0074     e.p.r.e.s.e.n.t.
 800de30:	0061 0074 0069 006f 006e 46c0 46c0 46c0     a.t.i.o.n..F.F.F

0800de40 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_632>:
 800de40:	0004 0000 ded0 0800 ab11 abab 2081 0010     ............. ..
 800de50:	0000 0000 fe80 0800 db90 0800 0000 0000     ................
 800de60:	0000 0000 a5e0 0800 feb0 0800 46c0 46c0     .............F.F

0800de70 <Microsoft.Zelig.Runtime.TypeSystem.ScalarTypeRepresentation_633>:
 800de70:	0004 0000 fee0 0800 ab05 abab 2109 0010     .............!..
 800de80:	0000 0000 ff10 0800 db90 0800 0000 0000     ................
 800de90:	0000 0000 de40 0800 ff30 0800 46c0 46c0     ....@...0....F.F

0800dea0 <Microsoft.Zelig.Runtime.TypeSystem.ScalarTypeRepresentation_634>:
 800dea0:	0004 0000 fee0 0800 ab03 abab 2109 0010     .............!..
 800deb0:	0000 0000 ff60 0800 db90 0800 0000 0000     ....`...........
 800dec0:	0000 0000 de40 0800 ff80 0800 46c0 46c0     ....@........F.F

0800ded0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_635>:
 800ded0:	0004 0000 8c80 0800 0024 0000 0000 0000     ........$.......
 800dee0:	ffb0 0800 ffdc 0800 ab44 abab fff0 0800     ........D.......
 800def0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800df00 <System.String_636>:
 800df00:	0004 0000 8a60 0800 0008 0000 0008 0000     ....`...........
 800df10:	0044 0065 006c 0065 0067 0061 0074 0065     D.e.l.e.g.a.t.e.

0800df20 <Microsoft.Zelig.Runtime.TypeSystem.ScalarTypeRepresentation_637>:
 800df20:	0004 0000 fee0 0800 ab08 abab 2109 0010     .............!..
 800df30:	0000 0000 0020 0801 db90 0800 0000 0000     .... ...........
 800df40:	0000 0000 de40 0800 0040 0801 46c0 46c0     ....@...@....F.F

0800df50 <System.String_638>:
 800df50:	0004 0000 8a60 0800 0011 0000 0011 0000     ....`...........
 800df60:	004d 0075 006c 0074 0069 0063 0061 0073     M.u.l.t.i.c.a.s.
 800df70:	0074 0044 0065 006c 0065 0067 0061 0074     t.D.e.l.e.g.a.t.
 800df80:	0065 46c0 46c0 46c0 46c0 46c0 46c0 46c0     e..F.F.F.F.F.F.F

0800df90 <System.String_639>:
 800df90:	0004 0000 8a60 0800 001b 0000 001b 0000     ....`...........
 800dfa0:	0041 0072 0067 0075 006d 0065 006e 0074     A.r.g.u.m.e.n.t.
 800dfb0:	004f 0075 0074 004f 0066 0052 0061 006e     O.u.t.O.f.R.a.n.
 800dfc0:	0067 0065 0045 0078 0063 0065 0070 0074     g.e.E.x.c.e.p.t.
 800dfd0:	0069 006f 006e 46c0 46c0 46c0 46c0 46c0     i.o.n..F.F.F.F.F

0800dfe0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_640>:
 800dfe0:	0004 0000 db20 0800 ab12 abab 2000 0010     .... ........ ..
 800dff0:	0000 0000 0070 0801 db90 0800 0000 0000     ....p...........
 800e000:	0000 0000 00a0 0801 9380 0800               ............

0800e00c <System.RuntimeType_641>:
 800e00c:	0004 0000 9380 0800 9380 0800 46c0 46c0     .............F.F
 800e01c:	46c0 46c0                                   .F.F

0800e020 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_642>:
 800e020:	0004 0000 8cf0 0800 0009 0000 12ed 0800     ................
 800e030:	6805 0800 6883 0800 1485 0800 6cc9 0800     .h...h.......l..
 800e040:	6cf9 0800 1431 0800 1437 0800 1435 0800     .l..1...7...5...

0800e050 <System.String_643>:
 800e050:	0004 0000 8a60 0800 000d 0000 000d 0000     ....`...........
 800e060:	0053 0074 0072 0069 006e 0067 0042 0075     S.t.r.i.n.g.B.u.
 800e070:	0069 006c 0064 0065 0072 46c0 46c0 46c0     i.l.d.e.r..F.F.F

0800e080 <System.String_644>:
 800e080:	0004 0000 8a60 0800 000b 0000 000b 0000     ....`...........
 800e090:	0053 0079 0073 0074 0065 006d 002e 0054     S.y.s.t.e.m...T.
 800e0a0:	0065 0078 0074 46c0 46c0 46c0 46c0 46c0     e.x.t..F.F.F.F.F

0800e0b0 <Microsoft.Zelig.Runtime.TypeSystem.ScalarTypeRepresentation_646>:
 800e0b0:	0004 0000 fee0 0800 ab09 abab 2109 0010     .............!..
 800e0c0:	0000 0000 00d0 0801 db90 0800 0000 0000     ................
 800e0d0:	0000 0000 de40 0800 00f0 0801 46c0 46c0     ....@........F.F

0800e0e0 <System.String_647>:
 800e0e0:	0004 0000 8a60 0800 0014 0000 0014 0000     ....`...........
 800e0f0:	0054 0068 0072 0065 0061 0064 0053 0074     T.h.r.e.a.d.S.t.
 800e100:	0061 0074 0065 0045 0078 0063 0065 0070     a.t.e.E.x.c.e.p.
 800e110:	0074 0069 006f 006e 46c0 46c0 46c0 46c0     t.i.o.n..F.F.F.F

0800e120 <System.String_648>:
 800e120:	0004 0000 8a60 0800 0010 0000 0010 0000     ....`...........
 800e130:	0053 0079 0073 0074 0065 006d 002e 0054     S.y.s.t.e.m...T.
 800e140:	0068 0072 0065 0061 0064 0069 006e 0067     h.r.e.a.d.i.n.g.

0800e150 <System.String_649>:
 800e150:	0004 0000 8a60 0800 0006 0000 0006 0000     ....`...........
 800e160:	0048 006f 006c 0064 0065 0072 46c0 46c0     H.o.l.d.e.r..F.F

0800e170 <Microsoft.Zelig.Runtime.TypeSystem.InterfaceTypeRepresentation_650>:
 800e170:	0004 0000 ecd0 0800 ab12 abab 00a1 0000     ................
 800e180:	0000 0000 0120 0801 db90 0800 0000 0000     .... ...........
	...
 800e198:	9610 0800                                   ....

0800e19c <System.RuntimeType_651>:
 800e19c:	0004 0000 9380 0800 9610 0800               ............

0800e1a8 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_652>:
 800e1a8:	0004 0000 8cf0 0800 0001 0000 0000 0000     ................

0800e1b8 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_653>:
 800e1b8:	0004 0000 8cf0 0800 0001 0000 0000 0000     ................
 800e1c8:	46c0 46c0 46c0 46c0                         .F.F.F.F

0800e1d0 <Microsoft.Zelig.Runtime.TypeSystem.VTable.InterfaceMap[]_654>:
 800e1d0:	0004 0000 8d40 0800 0001 0000 9610 0800     ....@...........
 800e1e0:	e1b8 0800 46c0 46c0 46c0 46c0 46c0 46c0     .....F.F.F.F.F.F

0800e1f0 <System.String_655>:
 800e1f0:	0004 0000 8a60 0800 0007 0000 0007 0000     ....`...........
 800e200:	0043 006f 006e 0074 0065 0078 0074 46c0     C.o.n.t.e.x.t..F

0800e210 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_656>:
 800e210:	0004 0000 db20 0800 ab12 abab 0101 0010     .... ...........
 800e220:	0000 0000 0150 0801 f520 0800 0000 0000     ....P... .......
 800e230:	0000 0000 0180 0801 d820 0800 46c0 46c0     ........ ....F.F

0800e240 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_657>:
 800e240:	0004 0000 ded0 0800 ab12 abab 0082 0010     ................
 800e250:	0000 0000 e1f0 0800 9434 0800 0180 0801     ........4.......
 800e260:	0000 0000 01b0 0801 01e0 0801 46c0 46c0     .............F.F

0800e270 <System.String_658>:
 800e270:	0004 0000 8a60 0800 000c 0000 000c 0000     ....`...........
 800e280:	004b 0065 0072 006e 0065 006c 004e 006f     K.e.r.n.e.l.N.o.
 800e290:	0064 0065 0060 0031 46c0 46c0 46c0 46c0     d.e.`.1..F.F.F.F

0800e2a0 <System.String_659>:
 800e2a0:	0004 0000 8a60 0800 0017 0000 0017 0000     ....`...........
 800e2b0:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 800e2c0:	0074 002e 005a 0065 006c 0069 0067 002e     t...Z.e.l.i.g...
 800e2d0:	0052 0075 006e 0074 0069 006d 0065 46c0     R.u.n.t.i.m.e..F

0800e2e0 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation.GenericContext_660>:
 800e2e0:	0004 0000 0210 0801 0234 0801 0000 0000     ........4.......

0800e2f0 <System.String_661>:
 800e2f0:	0004 0000 8a60 0800 000c 0000 000c 0000     ....`...........
 800e300:	004b 0065 0072 006e 0065 006c 004c 0069     K.e.r.n.e.l.L.i.
 800e310:	0073 0074 0060 0031                         s.t.`.1.

0800e318 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation.GenericContext_662>:
 800e318:	0004 0000 0210 0801 0244 0801 0000 0000     ........D.......

0800e328 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation.GenericContext_663>:
 800e328:	0004 0000 0210 0801 0254 0801 0000 0000     ........T.......
 800e338:	46c0 46c0 46c0 46c0                         .F.F.F.F

0800e340 <System.String_664>:
 800e340:	0004 0000 8a60 0800 000b 0000 000b 0000     ....`...........
 800e350:	0054 0068 0072 0065 0061 0064 0053 0074     T.h.r.e.a.d.S.t.
 800e360:	0061 0072 0074 46c0 46c0 46c0 46c0 46c0     a.r.t..F.F.F.F.F

0800e370 <System.String_668>:
 800e370:	0004 0000 8a60 0800 0006 0000 0006 0000     ....`...........
 800e380:	0054 0068 0072 0065 0061 0064 46c0 46c0     T.h.r.e.a.d..F.F

0800e390 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_669>:
 800e390:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 800e3a0:	0000 0000 0270 0801 02b0 0801 0000 0000     ....p...........
 800e3b0:	0000 0000 a5e0 0800 0310 0801               ............

0800e3bc <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation.GenericContext_670>:
 800e3bc:	0004 0000 0210 0801 0334 0801 0000 0000     ........4.......
 800e3cc:	46c0 46c0                                   .F.F

0800e3d0 <System.String_671>:
 800e3d0:	0004 0000 8a60 0800 000f 0000 000f 0000     ....`...........
 800e3e0:	0045 0076 0065 006e 0074 0057 0061 0069     E.v.e.n.t.W.a.i.
 800e3f0:	0074 0048 0061 006e 0064 006c 0065 46c0     t.H.a.n.d.l.e..F

0800e400 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_672>:
 800e400:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 800e410:	0000 0000 0350 0801 e120 0800 0000 0000     ....P... .......
 800e420:	0000 0000 0380 0801 03b0 0801 46c0 46c0     .............F.F

0800e430 <System.String_673>:
 800e430:	0004 0000 8a60 0800 0011 0000 0011 0000     ....`...........
 800e440:	0041 0072 0067 0075 006d 0065 006e 0074     A.r.g.u.m.e.n.t.
 800e450:	0045 0078 0063 0065 0070 0074 0069 006f     E.x.c.e.p.t.i.o.
 800e460:	006e 46c0 46c0 46c0 46c0 46c0 46c0 46c0     n..F.F.F.F.F.F.F

0800e470 <System.String_674>:
 800e470:	0004 0000 8a60 0800 0020 0000 0020 0000     ....`... ... ...
 800e480:	0041 0072 0072 0061 0079 0052 0065 0066     A.r.r.a.y.R.e.f.
 800e490:	0065 0072 0065 006e 0063 0065 0054 0079     e.r.e.n.c.e.T.y.
 800e4a0:	0070 0065 0052 0065 0070 0072 0065 0073     p.e.R.e.p.r.e.s.
 800e4b0:	0065 006e 0074 0061 0074 0069 006f 006e     e.n.t.a.t.i.o.n.

0800e4c0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_675>:
 800e4c0:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 800e4d0:	0000 0000 03e0 0801 dd80 0800 0000 0000     ................
 800e4e0:	0000 0000 c4a0 0800 0430 0801 46c0 46c0     ........0....F.F

0800e4f0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_676>:
 800e4f0:	0004 0000 ded0 0800 ab1d abab 2081 0010     ............. ..
 800e500:	0000 0000 0460 0801 db90 0800 0000 0000     ....`...........
 800e510:	0000 0000 a5e0 0800 0480 0801 46c0 46c0     .............F.F

0800e520 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_677>:
 800e520:	0004 0000 ded0 0800 ab12 abab 0080 0010     ................
 800e530:	0000 0000 04b0 0801 e590 0800 0000 0000     ................
 800e540:	0000 0000 a5e0 0800 04e0 0801 46c0 46c0     .............F.F

0800e550 <System.String_678>:
 800e550:	0004 0000 8a60 0800 0016 0000 0016 0000     ....`...........
 800e560:	004c 0065 0064 0054 006f 0067 0067 006c     L.e.d.T.o.g.g.l.
 800e570:	0065 0072 0053 0069 006d 0075 006c 0074     e.r.S.i.m.u.l.t.
 800e580:	0061 006e 0065 006f 0075 0073 46c0 46c0     a.n.e.o.u.s..F.F

0800e590 <System.String_679>:
 800e590:	0004 0000 8a60 0800 0020 0000 0020 0000     ....`... ... ...
 800e5a0:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 800e5b0:	0074 002e 005a 0065 006c 0069 0067 002e     t...Z.e.l.i.g...
 800e5c0:	0054 0065 0073 0074 002e 006d 0062 0065     T.e.s.t...m.b.e.
 800e5d0:	0064 002e 0053 0069 006d 0070 006c 0065     d...S.i.m.p.l.e.

0800e5e0 <System.String_680>:
 800e5e0:	0004 0000 8a60 0800 0014 0000 0014 0000     ....`...........
 800e5f0:	004c 0065 0064 0054 006f 0067 0067 006c     L.e.d.T.o.g.g.l.
 800e600:	0065 0072 0053 0065 0071 0075 0065 006e     e.r.S.e.q.u.e.n.
 800e610:	0074 0069 0061 006c 46c0 46c0 46c0 46c0     t.i.a.l..F.F.F.F

0800e620 <System.String_681>:
 800e620:	0004 0000 8a60 0800 0013 0000 0013 0000     ....`...........
 800e630:	004c 0065 0064 0054 006f 0067 0067 006c     L.e.d.T.o.g.g.l.
 800e640:	0065 0072 0041 006c 0074 0065 0072 006e     e.r.A.l.t.e.r.n.
 800e650:	0061 0074 0065 46c0 46c0 46c0 46c0 46c0     a.t.e..F.F.F.F.F

0800e660 <System.String_682>:
 800e660:	0004 0000 8a60 0800 0005 0000 0005 0000     ....`...........
 800e670:	0054 0069 006d 0065 0072 46c0 46c0 46c0     T.i.m.e.r..F.F.F

0800e680 <System.String_683>:
 800e680:	0004 0000 8a60 0800 001c 0000 001c 0000     ....`...........
 800e690:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 800e6a0:	0074 002e 005a 0065 006c 0069 0067 002e     t...Z.e.l.i.g...
 800e6b0:	0053 0075 0070 0070 006f 0072 0074 002e     S.u.p.p.o.r.t...
 800e6c0:	006d 0062 0065 0064 46c0 46c0 46c0 46c0     m.b.e.d..F.F.F.F

0800e6d0 <System.String_684>:
 800e6d0:	0004 0000 8a60 0800 0006 0000 0006 0000     ....`...........
 800e6e0:	004f 0062 006a 0065 0063 0074 46c0 46c0     O.b.j.e.c.t..F.F

0800e6f0 <System.String_685>:
 800e6f0:	0004 0000 8a60 0800 0008 0000 0008 0000     ....`...........
 800e700:	0042 0069 0074 0041 0072 0072 0061 0079     B.i.t.A.r.r.a.y.

0800e710 <System.String_686>:
 800e710:	0004 0000 8a60 0800 0012 0000 0012 0000     ....`...........
 800e720:	0053 0079 0073 0074 0065 006d 002e 0043     S.y.s.t.e.m...C.
 800e730:	006f 006c 006c 0065 0063 0074 0069 006f     o.l.l.e.c.t.i.o.
 800e740:	006e 0073                                   n.s.

0800e744 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation.GenericContext_687>:
 800e744:	0004 0000 0210 0801 0504 0801 0000 0000     ................
 800e754:	46c0 46c0 46c0 46c0 46c0 46c0               .F.F.F.F.F.F

0800e760 <System.String_688>:
 800e760:	0004 0000 8a60 0800 000e 0000 000e 0000     ....`...........
 800e770:	0041 0075 0074 006f 0052 0065 0073 0065     A.u.t.o.R.e.s.e.
 800e780:	0074 0045 0076 0065 006e 0074 46c0 46c0     t.E.v.e.n.t..F.F

0800e790 <System.String_689>:
 800e790:	0004 0000 8a60 0800 0010 0000 0010 0000     ....`...........
 800e7a0:	004d 0061 006e 0075 0061 006c 0052 0065     M.a.n.u.a.l.R.e.
 800e7b0:	0073 0065 0074 0045 0076 0065 006e 0074     s.e.t.E.v.e.n.t.

0800e7c0 <System.String_690>:
 800e7c0:	0004 0000 8a60 0800 0009 0000 0009 0000     ....`...........
 800e7d0:	0053 0079 006e 0063 0042 006c 006f 0063     S.y.n.c.B.l.o.c.
 800e7e0:	006b 46c0 46c0 46c0 46c0 46c0 46c0 46c0     k..F.F.F.F.F.F.F

0800e7f0 <Microsoft.Zelig.Runtime.TypeSystem.SzArrayReferenceTypeRepresentation_691>:
 800e7f0:	0004 0000 8f40 0800 ab1d abab 0000 0000     ....@...........
	...
 800e814:	e4f0 0800 aa50 0800 de70 0800               ....P...p...

0800e820 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_692>:
 800e820:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 800e830:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

0800e840 <System.String_693>:
 800e840:	0004 0000 8a60 0800 0014 0000 0014 0000     ....`...........
 800e850:	0049 006e 0076 0061 006c 0069 0064 0043     I.n.v.a.l.i.d.C.
 800e860:	0061 0073 0074 0045 0078 0063 0065 0070     a.s.t.E.x.c.e.p.
 800e870:	0074 0069 006f 006e 46c0 46c0 46c0 46c0     t.i.o.n..F.F.F.F

0800e880 <System.String_694>:
 800e880:	0004 0000 8a60 0800 0009 0000 0009 0000     ....`...........
 800e890:	0045 0078 0063 0065 0070 0074 0069 006f     E.x.c.e.p.t.i.o.
 800e8a0:	006e 46c0                                   n..F

0800e8a4 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation.GenericContext_695>:
 800e8a4:	0004 0000 0210 0801 0514 0801 0000 0000     ................
 800e8b4:	46c0 46c0 46c0 46c0 46c0 46c0               .F.F.F.F.F.F

0800e8c0 <System.String_696>:
 800e8c0:	0004 0000 8a60 0800 000d 0000 000d 0000     ....`...........
 800e8d0:	0057 0061 0069 0074 0069 006e 0067 0052     W.a.i.t.i.n.g.R.
 800e8e0:	0065 0063 006f 0072 0064 46c0 46c0 46c0     e.c.o.r.d..F.F.F

0800e8f0 <System.String_697>:
 800e8f0:	0004 0000 8a60 0800 0027 0000 0027 0000     ....`...'...'...
 800e900:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 800e910:	0074 002e 005a 0065 006c 0069 0067 002e     t...Z.e.l.i.g...
 800e920:	0052 0075 006e 0074 0069 006d 0065 002e     R.u.n.t.i.m.e...
 800e930:	0053 0079 006e 0063 0068 0072 006f 006e     S.y.n.c.h.r.o.n.
 800e940:	0069 007a 0061 0074 0069 006f 006e 46c0     i.z.a.t.i.o.n..F

0800e950 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation.GenericContext_698>:
 800e950:	0004 0000 0210 0801 0524 0801 0000 0000     ........$.......

0800e960 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation.GenericContext_701>:
 800e960:	0004 0000 0210 0801 0534 0801 0000 0000     ........4.......

0800e970 <System.String_702>:
 800e970:	0004 0000 8a60 0800 0007 0000 0007 0000     ....`...........
 800e980:	0054 0072 0061 0063 006b 0065 0072 46c0     T.r.a.c.k.e.r..F

0800e990 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_703>:
 800e990:	0004 0000 db20 0800 ab12 abab 0001 0010     .... ...........
 800e9a0:	0000 0000 0550 0801 e2a0 0800 0000 0000     ....P...........
 800e9b0:	0000 0000 a5e0 0800 0580 0801 46c0 46c0     .............F.F

0800e9c0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_704>:
 800e9c0:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 800e9d0:	0000 0000 05b0 0801 05e0 0801 0000 0000     ................
 800e9e0:	0000 0000 0650 0801 0680 0801 46c0 46c0     ....P........F.F

0800e9f0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_705>:
 800e9f0:	0004 0000 ded0 0800 ab12 abab 0082 0010     ................
 800ea00:	0001 0000 e1f0 0800 9434 0800 0650 0801     ........4...P...
 800ea10:	0000 0000 a5e0 0800 06b0 0801 46c0 46c0     .............F.F

0800ea20 <Microsoft.Zelig.Runtime.TypeSystem.VTable_706>:
 800ea20:	0004 0000 8c80 0800 0028 0000 0000 0000     ........(.......
 800ea30:	06e0 0801 070c 0801 ab44 abab 0720 0801     ........D... ...
 800ea40:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800ea50 <System.String_708>:
 800ea50:	0004 0000 8a60 0800 0009 0000 0009 0000     ....`...........
 800ea60:	0059 0069 0065 006c 0064 004c 006f 0063     Y.i.e.l.d.L.o.c.
 800ea70:	006b 46c0 46c0 46c0 46c0 46c0 46c0 46c0     k..F.F.F.F.F.F.F

0800ea80 <System.String_709>:
 800ea80:	0004 0000 8a60 0800 000f 0000 000f 0000     ....`...........
 800ea90:	0043 0072 0069 0074 0069 0063 0061 006c     C.r.i.t.i.c.a.l.
 800eaa0:	0053 0065 0063 0074 0069 006f 006e 46c0     S.e.c.t.i.o.n..F

0800eab0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_710>:
 800eab0:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 800eac0:	0000 0000 0750 0801 e8f0 0800 0000 0000     ....P...........
 800ead0:	0000 0000 a5e0 0800 0780 0801 46c0 46c0     .............F.F

0800eae0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_711>:
 800eae0:	0004 0000 8c80 0800 0028 0000 0000 0000     ........(.......
 800eaf0:	07b0 0801 07dc 0801 ab44 abab 07f0 0801     ........D.......
 800eb00:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800eb10 <System.String_712>:
 800eb10:	0004 0000 8a60 0800 0014 0000 0014 0000     ....`...........
 800eb20:	0045 0078 0063 0065 0070 0074 0069 006f     E.x.c.e.p.t.i.o.
 800eb30:	006e 004d 0065 0073 0073 0061 0067 0065     n.M.e.s.s.a.g.e.
 800eb40:	004b 0069 006e 0064 46c0 46c0 46c0 46c0     K.i.n.d..F.F.F.F

0800eb50 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_713>:
 800eb50:	0004 0000 db20 0800 ab11 abab 2081 0010     .... ........ ..
 800eb60:	0000 0000 0820 0801 db90 0800 0000 0000     .... ...........
 800eb70:	0000 0000 de40 0800 0840 0801 46c0 46c0     ....@...@....F.F

0800eb80 <Microsoft.Zelig.Runtime.TypeSystem.InterfaceTypeRepresentation_714>:
 800eb80:	0004 0000 ecd0 0800 ab12 abab 00a1 0000     ................
 800eb90:	0000 0000 0870 0801 db90 0800 0000 0000     ....p...........
	...
 800eba8:	b260 0800                                   `...

0800ebac <System.RuntimeType_715>:
 800ebac:	0004 0000 9380 0800 b260 0800               ........`...

0800ebb8 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_716>:
 800ebb8:	0004 0000 8cf0 0800 0001 0000 0000 0000     ................

0800ebc8 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_717>:
 800ebc8:	0004 0000 8cf0 0800 0001 0000 0000 0000     ................
 800ebd8:	46c0 46c0 46c0 46c0                         .F.F.F.F

0800ebe0 <Microsoft.Zelig.Runtime.TypeSystem.VTable.InterfaceMap[]_718>:
 800ebe0:	0004 0000 8d40 0800 0001 0000 b260 0800     ....@.......`...
 800ebf0:	ebc8 0800 46c0 46c0 46c0 46c0 46c0 46c0     .....F.F.F.F.F.F

0800ec00 <System.String_719>:
 800ec00:	0004 0000 8a60 0800 0006 0000 0006 0000     ....`...........
 800ec10:	004e 0075 006d 0062 0065 0072 46c0 46c0     N.u.m.b.e.r..F.F

0800ec20 <System.String_720>:
 800ec20:	0004 0000 8a60 0800 000f 0000 000f 0000     ....`...........
 800ec30:	0046 006f 0072 006d 0061 0074 0045 0078     F.o.r.m.a.t.E.x.
 800ec40:	0063 0065 0070 0074 0069 006f 006e 46c0     c.e.p.t.i.o.n..F

0800ec50 <System.String_721>:
 800ec50:	0004 0000 8a60 0800 0013 0000 0013 0000     ....`...........
 800ec60:	0045 0076 0065 006e 0074 0057 0061 0069     E.v.e.n.t.W.a.i.
 800ec70:	0074 0061 0062 006c 0065 004f 0062 006a     t.a.b.l.e.O.b.j.
 800ec80:	0065 0063 0074 46c0 46c0 46c0 46c0 46c0     e.c.t..F.F.F.F.F

0800ec90 <System.String_722>:
 800ec90:	0004 0000 8a60 0800 0014 0000 0014 0000     ....`...........
 800eca0:	004f 0075 0074 004f 0066 004d 0065 006d     O.u.t.O.f.M.e.m.
 800ecb0:	006f 0072 0079 0045 0078 0063 0065 0070     o.r.y.E.x.c.e.p.
 800ecc0:	0074 0069 006f 006e 46c0 46c0 46c0 46c0     t.i.o.n..F.F.F.F

0800ecd0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_723>:
 800ecd0:	0004 0000 8c80 0800 0024 0000 0000 0000     ........$.......
 800ece0:	08a0 0801 08cc 0801 ab44 abab 08e0 0801     ........D.......
 800ecf0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800ed00 <System.String_725>:
 800ed00:	0004 0000 8a60 0800 000f 0000 000f 0000     ....`...........
 800ed10:	0049 0046 006f 0072 006d 0061 0074 0050     I.F.o.r.m.a.t.P.
 800ed20:	0072 006f 0076 0069 0064 0065 0072 46c0     r.o.v.i.d.e.r..F

0800ed30 <System.String_726>:
 800ed30:	0004 0000 8a60 0800 000a 0000 000a 0000     ....`...........
 800ed40:	004d 0065 006d 0062 0065 0072 0049 006e     M.e.m.b.e.r.I.n.
 800ed50:	0066 006f 46c0 46c0 46c0 46c0 46c0 46c0     f.o..F.F.F.F.F.F

0800ed60 <System.String_727>:
 800ed60:	0004 0000 8a60 0800 0011 0000 0011 0000     ....`...........
 800ed70:	0053 0079 0073 0074 0065 006d 002e 0052     S.y.s.t.e.m...R.
 800ed80:	0065 0066 006c 0065 0063 0074 0069 006f     e.f.l.e.c.t.i.o.
 800ed90:	006e 46c0 46c0 46c0 46c0 46c0 46c0 46c0     n..F.F.F.F.F.F.F

0800eda0 <System.String_728>:
 800eda0:	0004 0000 8a60 0800 0019 0000 0019 0000     ....`...........
 800edb0:	0049 006e 0076 0061 006c 0069 0064 004f     I.n.v.a.l.i.d.O.
 800edc0:	0070 0065 0072 0061 0074 0069 006f 006e     p.e.r.a.t.i.o.n.
 800edd0:	0045 0078 0063 0065 0070 0074 0069 006f     E.x.c.e.p.t.i.o.
 800ede0:	006e 46c0 46c0 46c0 46c0 46c0 46c0 46c0     n..F.F.F.F.F.F.F

0800edf0 <System.String_729>:
 800edf0:	0004 0000 8a60 0800 000b 0000 000b 0000     ....`...........
 800ee00:	0043 0075 006c 0074 0075 0072 0065 0049     C.u.l.t.u.r.e.I.
 800ee10:	006e 0066 006f 46c0 46c0 46c0 46c0 46c0     n.f.o..F.F.F.F.F

0800ee20 <System.String_730>:
 800ee20:	0004 0000 8a60 0800 0014 0000 0014 0000     ....`...........
 800ee30:	0053 0079 0073 0074 0065 006d 002e 0047     S.y.s.t.e.m...G.
 800ee40:	006c 006f 0062 0061 006c 0069 007a 0061     l.o.b.a.l.i.z.a.
 800ee50:	0074 0069 006f 006e 46c0 46c0 46c0 46c0     t.i.o.n..F.F.F.F

0800ee60 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_731>:
 800ee60:	0004 0000 db20 0800 ab12 abab 0101 0010     .... ...........
 800ee70:	0000 0000 0910 0801 ee20 0800 0000 0000     ........ .......
 800ee80:	0000 0000 a5e0 0800 bab0 0800 46c0 46c0     .............F.F

0800ee90 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_732>:
 800ee90:	0004 0000 8cf0 0800 0004 0000 0d8d 0800     ................
 800eea0:	08ed 0800 08f9 0800 6edd 0800               .........n..

0800eeac <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_733>:
 800eeac:	0004 0000 8cf0 0800 0001 0000 6edd 0800     .............n..
 800eebc:	46c0 46c0                                   .F.F

0800eec0 <Microsoft.Zelig.Runtime.TypeSystem.VTable.InterfaceMap[]_734>:
 800eec0:	0004 0000 8d40 0800 0001 0000 b860 0800     ....@.......`...
 800eed0:	eeac 0800 46c0 46c0 46c0 46c0 46c0 46c0     .....F.F.F.F.F.F

0800eee0 <System.String_736>:
 800eee0:	0004 0000 8a60 0800 001b 0000 001b 0000     ....`...........
 800eef0:	0041 0073 0073 0065 0072 0074 0069 006f     A.s.s.e.r.t.i.o.
 800ef00:	006e 0056 0069 006f 006c 0061 0074 0069     n.V.i.o.l.a.t.i.
 800ef10:	006f 006e 0045 0078 0063 0065 0070 0074     o.n.E.x.c.e.p.t.
 800ef20:	0069 006f 006e 46c0 46c0 46c0 46c0 46c0     i.o.n..F.F.F.F.F

0800ef30 <System.String_737>:
 800ef30:	0004 0000 8a60 0800 000f 0000 000f 0000     ....`...........
 800ef40:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 800ef50:	0074 002e 005a 0065 006c 0069 0067 46c0     t...Z.e.l.i.g..F

0800ef60 <Microsoft.Zelig.Runtime.TypeSystem.VTable_738>:
 800ef60:	0004 0000 8c80 0800 0024 0000 0000 0000     ........$.......
 800ef70:	0940 0801 096c 0801 ab44 abab 0980 0801     @...l...D.......
 800ef80:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800ef90 <System.String_739>:
 800ef90:	0004 0000 8a60 0800 0009 0000 0009 0000     ....`...........
 800efa0:	0044 0069 006d 0065 006e 0073 0069 006f     D.i.m.e.n.s.i.o.
 800efb0:	006e 46c0 46c0 46c0 46c0 46c0 46c0 46c0     n..F.F.F.F.F.F.F

0800efc0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_742>:
 800efc0:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 800efd0:	0000 0000 09b0 0801 dd80 0800 0000 0000     ................
 800efe0:	0000 0000 a5e0 0800 09f0 0801 46c0 46c0     .............F.F

0800eff0 <System.String_744>:
 800eff0:	0004 0000 8a60 0800 001c 0000 001c 0000     ....`...........
 800f000:	0042 006f 0078 0065 0064 0056 0061 006c     B.o.x.e.d.V.a.l.
 800f010:	0075 0065 0054 0079 0070 0065 0052 0065     u.e.T.y.p.e.R.e.
 800f020:	0070 0072 0065 0073 0065 006e 0074 0061     p.r.e.s.e.n.t.a.
 800f030:	0074 0069 006f 006e 46c0 46c0 46c0 46c0     t.i.o.n..F.F.F.F

0800f040 <System.String_746>:
 800f040:	0004 0000 8a60 0800 0019 0000 0019 0000     ....`...........
 800f050:	0050 006f 0069 006e 0074 0065 0072 0054     P.o.i.n.t.e.r.T.
 800f060:	0079 0070 0065 0052 0065 0070 0072 0065     y.p.e.R.e.p.r.e.
 800f070:	0073 0065 006e 0074 0061 0074 0069 006f     s.e.n.t.a.t.i.o.
 800f080:	006e 46c0 46c0 46c0 46c0 46c0 46c0 46c0     n..F.F.F.F.F.F.F

0800f090 <System.String_747>:
 800f090:	0004 0000 8a60 0800 0012 0000 0012 0000     ....`...........
 800f0a0:	0054 0079 0070 0065 0052 0065 0070 0072     T.y.p.e.R.e.p.r.
 800f0b0:	0065 0073 0065 006e 0074 0061 0074 0069     e.s.e.n.t.a.t.i.
 800f0c0:	006f 006e 46c0 46c0 46c0 46c0 46c0 46c0     o.n..F.F.F.F.F.F

0800f0d0 <System.String_748>:
 800f0d0:	0004 0000 8a60 0800 0007 0000 0007 0000     ....`...........
 800f0e0:	0047 0070 0069 006f 0050 0069 006e 46c0     G.p.i.o.P.i.n..F

0800f0f0 <System.String_749>:
 800f0f0:	0004 0000 8a60 0800 0014 0000 0014 0000     ....`...........
 800f100:	0057 0069 006e 0064 006f 0077 0073 002e     W.i.n.d.o.w.s...
 800f110:	0044 0065 0076 0069 0063 0065 0073 002e     D.e.v.i.c.e.s...
 800f120:	0047 0070 0069 006f 46c0 46c0 46c0 46c0     G.p.i.o..F.F.F.F

0800f130 <System.String_750>:
 800f130:	0004 0000 8a60 0800 0012 0000 0012 0000     ....`...........
 800f140:	0044 0065 0066 0061 0075 006c 0074 0050     D.e.f.a.u.l.t.P.
 800f150:	0069 006e 0050 0072 006f 0076 0069 0064     i.n.P.r.o.v.i.d.
 800f160:	0065 0072 46c0 46c0 46c0 46c0 46c0 46c0     e.r..F.F.F.F.F.F

0800f170 <Microsoft.Zelig.Runtime.TypeSystem.InterfaceTypeRepresentation_751>:
 800f170:	0004 0000 ecd0 0800 ab12 abab 00a1 0000     ................
 800f180:	0000 0000 0a20 0801 0a50 0801 0000 0000     .... ...P.......
	...
 800f198:	c9b0 0800                                   ....

0800f19c <System.RuntimeType_752>:
 800f19c:	0004 0000 9380 0800 c9b0 0800 46c0 46c0     .............F.F
 800f1ac:	46c0 46c0                                   .F.F

0800f1b0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_753>:
 800f1b0:	0004 0000 8cf0 0800 0002 0000 0000 0000     ................
 800f1c0:	0000 0000 46c0 46c0 46c0 46c0 46c0 46c0     .....F.F.F.F.F.F

0800f1d0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_754>:
 800f1d0:	0004 0000 8cf0 0800 0002 0000 0000 0000     ................
 800f1e0:	0000 0000 46c0 46c0 46c0 46c0 46c0 46c0     .....F.F.F.F.F.F

0800f1f0 <Microsoft.Zelig.Runtime.TypeSystem.VTable.InterfaceMap[]_755>:
 800f1f0:	0004 0000 8d40 0800 0001 0000 c9b0 0800     ....@...........
 800f200:	f1d0 0800 46c0 46c0 46c0 46c0 46c0 46c0     .....F.F.F.F.F.F

0800f210 <System.String_756>:
 800f210:	0004 0000 8a60 0800 000e 0000 000e 0000     ....`...........
 800f220:	0047 0070 0069 006f 0043 006f 006e 0074     G.p.i.o.C.o.n.t.
 800f230:	0072 006f 006c 006c 0065 0072 46c0 46c0     r.o.l.l.e.r..F.F

0800f240 <System.String_757>:
 800f240:	0004 0000 8a60 0800 0017 0000 0017 0000     ....`...........
 800f250:	004f 0062 006a 0065 0063 0074 0044 0069     O.b.j.e.c.t.D.i.
 800f260:	0073 0070 006f 0073 0065 0064 0045 0078     s.p.o.s.e.d.E.x.
 800f270:	0063 0065 0070 0074 0069 006f 006e 46c0     c.e.p.t.i.o.n..F

0800f280 <System.String_758>:
 800f280:	0004 0000 8a60 0800 0008 0000 0008 0000     ....`...........
 800f290:	0043 0061 006c 006c 0062 0061 0063 006b     C.a.l.l.b.a.c.k.

0800f2a0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_759>:
 800f2a0:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 800f2b0:	0000 0000 0aa0 0801 0ad0 0801 0000 0000     ................
 800f2c0:	0000 0000 a5e0 0800 0b20 0801               ........ ...

0800f2cc <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation.GenericContext_760>:
 800f2cc:	0004 0000 0210 0801 0b44 0801 0000 0000     ........D.......
 800f2dc:	46c0 46c0                                   .F.F

0800f2e0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_761>:
 800f2e0:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 800f2f0:	0000 0000 0b60 0801 0ba0 0801 0000 0000     ....`...........
 800f300:	0000 0000 a5e0 0800 0c10 0801 46c0 46c0     .............F.F

0800f310 <System.String_763>:
 800f310:	0004 0000 8a60 0800 0026 0000 0026 0000     ....`...&...&...
 800f320:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 800f330:	0074 002e 0043 006f 0072 0074 0065 0078     t...C.o.r.t.e.x.
 800f340:	004d 0033 004f 006e 004d 0042 0045 0044     M.3.O.n.M.B.E.D.
 800f350:	002e 0048 0061 0072 0064 0077 0061 0072     ..H.a.r.d.w.a.r.
 800f360:	0065 004d 006f 0064 0065 006c 46c0 46c0     e.M.o.d.e.l..F.F

0800f370 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_764>:
 800f370:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 800f380:	0000 0000 f0d0 0800 0c40 0801 0000 0000     ........@.......
 800f390:	0000 0000 a5e0 0800 0c90 0801               ............

0800f39c <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation.GenericContext_765>:
 800f39c:	0004 0000 0210 0801 0cb4 0801 0000 0000     ................
 800f3ac:	46c0 46c0                                   .F.F

0800f3b0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_766>:
 800f3b0:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 800f3c0:	0000 0000 0cd0 0801 0ba0 0801 0000 0000     ................
 800f3d0:	0000 0000 a5e0 0800 0d10 0801               ............

0800f3dc <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation.GenericContext_767>:
 800f3dc:	0004 0000 0210 0801 0d34 0801 0000 0000     ........4.......
 800f3ec:	46c0 46c0                                   .F.F

0800f3f0 <System.String_768>:
 800f3f0:	0004 0000 8a60 0800 0016 0000 0016 0000     ....`...........
 800f400:	004b 0065 0072 006e 0065 006c 0043 0069     K.e.r.n.e.l.C.i.
 800f410:	0072 0063 0075 006c 0061 0072 0042 0075     r.c.u.l.a.r.B.u.
 800f420:	0066 0066 0065 0072 0060 0031               f.f.e.r.`.1.

0800f42c <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation.GenericContext_769>:
 800f42c:	0004 0000 0210 0801 0d44 0801 0000 0000     ........D.......
 800f43c:	46c0 46c0                                   .F.F

0800f440 <System.String_770>:
 800f440:	0004 0000 8a60 0800 000c 0000 000c 0000     ....`...........
 800f450:	0053 0079 0073 0054 0069 0063 006b 0054     S.y.s.T.i.c.k.T.
 800f460:	0069 006d 0065 0072 46c0 46c0 46c0 46c0     i.m.e.r..F.F.F.F

0800f470 <Microsoft.Zelig.Runtime.TypeSystem.ValueTypeRepresentation_771>:
 800f470:	0004 0000 ef60 0800 ab11 abab 010a 0010     ....`...........
 800f480:	0000 0000 0d60 0801 9434 0800 f2e0 0800     ....`...4.......
 800f490:	0000 0000 de40 0800 0d90 0801               ....@.......

0800f49c <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation.GenericContext_772>:
 800f49c:	0004 0000 0210 0801 0db4 0801 0000 0000     ................
 800f4ac:	46c0 46c0                                   .F.F

0800f4b0 <System.String_773>:
 800f4b0:	0004 0000 8a60 0800 0007 0000 0007 0000     ....`...........
 800f4c0:	0048 0061 006e 0064 006c 0065 0072 46c0     H.a.n.d.l.e.r..F

0800f4d0 <System.String_774>:
 800f4d0:	0004 0000 8a60 0800 0006 0000 0006 0000     ....`...........
 800f4e0:	0053 0074 0072 0069 006e 0067 46c0 46c0     S.t.r.i.n.g..F.F

0800f4f0 <System.String_775>:
 800f4f0:	0004 0000 8a60 0800 000d 0000 000d 0000     ....`...........
 800f500:	0054 0068 0072 0065 0061 0064 004d 0061     T.h.r.e.a.d.M.a.
 800f510:	006e 0061 0067 0065 0072 46c0 46c0 46c0     n.a.g.e.r..F.F.F

0800f520 <System.String_776>:
 800f520:	0004 0000 8a60 0800 001c 0000 001c 0000     ....`...........
 800f530:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 800f540:	0074 002e 005a 0065 006c 0069 0067 002e     t...Z.e.l.i.g...
 800f550:	0044 0049 0053 0043 004f 005f 0046 0037     D.I.S.C.O._.F.7.
 800f560:	0034 0036 004e 0047 46c0 46c0 46c0 46c0     4.6.N.G..F.F.F.F

0800f570 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_777>:
 800f570:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 800f580:	0000 0000 f4f0 0800 0dd0 0801 0000 0000     ................
 800f590:	0000 0000 0e10 0801 0e40 0801 46c0 46c0     ........@....F.F

0800f5a0 <System.String_778>:
 800f5a0:	0004 0000 8a60 0800 0011 0000 0011 0000     ....`...........
 800f5b0:	0054 0079 0070 0065 0053 0079 0073 0074     T.y.p.e.S.y.s.t.
 800f5c0:	0065 006d 004d 0061 006e 0061 0067 0065     e.m.M.a.n.a.g.e.
 800f5d0:	0072 46c0 46c0 46c0 46c0 46c0 46c0 46c0     r..F.F.F.F.F.F.F

0800f5e0 <System.String_779>:
 800f5e0:	0004 0000 8a60 0800 0018 0000 0018 0000     ....`...........
 800f5f0:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 800f600:	0074 002e 0043 006f 0072 0074 0065 0078     t...C.o.r.t.e.x.
 800f610:	004d 0033 004f 006e 004d 0042 0045 0044     M.3.O.n.M.B.E.D.

0800f620 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_780>:
 800f620:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 800f630:	0000 0000 f5a0 0800 0e70 0801 0000 0000     ........p.......
 800f640:	0000 0000 0ec0 0801 0ef0 0801 46c0 46c0     .............F.F

0800f650 <System.String_781>:
 800f650:	0004 0000 8a60 0800 000a 0000 000a 0000     ....`...........
 800f660:	0047 006c 006f 0062 0061 006c 0052 006f     G.l.o.b.a.l.R.o.
 800f670:	006f 0074 46c0 46c0 46c0 46c0 46c0 46c0     o.t..F.F.F.F.F.F

0800f680 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_782>:
 800f680:	0004 0000 db20 0800 ab12 abab 0001 0010     .... ...........
 800f690:	0000 0000 0f20 0801 f310 0800 0000 0000     .... ...........
 800f6a0:	0000 0000 0f50 0801 d5b0 0800               ....P.......

0800f6ac <System.RuntimeType_783>:
 800f6ac:	0004 0000 9380 0800 d5b0 0800 46c0 46c0     .............F.F
 800f6bc:	46c0 46c0                                   .F.F

0800f6c0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_784>:
 800f6c0:	0004 0000 8cf0 0800 0005 0000 0d8d 0800     ................
 800f6d0:	08ed 0800 08f9 0800 3b51 0800 83fd 0800     ........Q;......

0800f6e0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_785>:
 800f6e0:	0004 0000 db20 0800 ab12 abab 0001 0010     .... ...........
 800f6f0:	0000 0000 0f80 0801 f5e0 0800 0000 0000     ................
 800f700:	0000 0000 0fa0 0801 d5e0 0800               ............

0800f70c <System.RuntimeType_786>:
 800f70c:	0004 0000 9380 0800 d5e0 0800 46c0 46c0     .............F.F
 800f71c:	46c0 46c0                                   .F.F

0800f720 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_787>:
 800f720:	0004 0000 8cf0 0800 0004 0000 0d8d 0800     ................
 800f730:	08ed 0800 08f9 0800 7dff 0800 46c0 46c0     .........}...F.F

0800f740 <Microsoft.Zelig.Runtime.TypeSystem.SzArrayReferenceTypeRepresentation_788>:
 800f740:	0004 0000 8f40 0800 ab1d abab 0000 0000     ....@...........
	...
 800f764:	e4f0 0800 d610 0800 0fd0 0801               ............

0800f770 <System.RuntimeType_789>:
 800f770:	0004 0000 9380 0800 d610 0800 46c0 46c0     .............F.F

0800f780 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_790>:
 800f780:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 800f790:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

0800f7a0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_791>:
 800f7a0:	0004 0000 db20 0800 ab12 abab 0001 0010     .... ...........
 800f7b0:	0000 0000 1000 0801 f5e0 0800 0000 0000     ................
 800f7c0:	0000 0000 1030 0801 d640 0800               ....0...@...

0800f7cc <System.RuntimeType_792>:
 800f7cc:	0004 0000 9380 0800 d640 0800 46c0 46c0     ........@....F.F
 800f7dc:	46c0 46c0                                   .F.F

0800f7e0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_793>:
 800f7e0:	0004 0000 8cf0 0800 0008 0000 0d8d 0800     ................
 800f7f0:	08ed 0800 08f9 0800 3941 0800 397b 0800     ........A9..{9..
 800f800:	44ff 0800 4513 0800 4529 0800 46c0 46c0     .D...E..)E...F.F

0800f810 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_794>:
 800f810:	0004 0000 db20 0800 ab12 abab 0001 0010     .... ...........
 800f820:	0000 0000 1060 0801 f5e0 0800 0000 0000     ....`...........
 800f830:	0000 0000 1090 0801 d670 0800               ........p...

0800f83c <System.RuntimeType_795>:
 800f83c:	0004 0000 9380 0800 d670 0800 46c0 46c0     ........p....F.F
 800f84c:	46c0 46c0                                   .F.F

0800f850 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_796>:
 800f850:	0004 0000 8cf0 0800 000a 0000 0d8d 0800     ................
 800f860:	08ed 0800 08f9 0800 8407 0800 399b 0800     .............9..
 800f870:	8511 0800 851d 0800 062d 0800 0661 0800     ........-...a...
 800f880:	7e65 0800 46c0 46c0 46c0 46c0 46c0 46c0     e~...F.F.F.F.F.F

0800f890 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_797>:
 800f890:	0004 0000 db20 0800 ab12 abab 0001 0010     .... ...........
 800f8a0:	0000 0000 10c0 0801 f5e0 0800 0000 0000     ................
 800f8b0:	0000 0000 10e0 0801 d6a0 0800               ............

0800f8bc <System.RuntimeType_798>:
 800f8bc:	0004 0000 9380 0800 d6a0 0800 46c0 46c0     .............F.F
 800f8cc:	46c0 46c0                                   .F.F

0800f8d0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_799>:
 800f8d0:	0004 0000 8cf0 0800 0004 0000 0d8d 0800     ................
 800f8e0:	08ed 0800 08f9 0800 8545 0800 46c0 46c0     ........E....F.F

0800f8f0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_800>:
 800f8f0:	0004 0000 db20 0800 ab12 abab 0001 0010     .... ...........
 800f900:	0000 0000 1110 0801 1130 0801 0000 0000     ........0.......
 800f910:	0000 0000 a5e0 0800 d6d0 0800               ............

0800f91c <System.RuntimeType_801>:
 800f91c:	0004 0000 9380 0800 d6d0 0800 46c0 46c0     .............F.F
 800f92c:	46c0 46c0                                   .F.F

0800f930 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_802>:
 800f930:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 800f940:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

0800f950 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_803>:
 800f950:	0004 0000 db20 0800 ab12 abab 0101 0010     .... ...........
 800f960:	0000 0000 1190 0801 f520 0800 0000 0000     ........ .......
 800f970:	0000 0000 11b0 0801 d700 0800               ............

0800f97c <System.RuntimeType_804>:
 800f97c:	0004 0000 9380 0800 d700 0800 46c0 46c0     .............F.F
 800f98c:	46c0 46c0                                   .F.F

0800f990 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_805>:
 800f990:	0004 0000 8cf0 0800 0006 0000 0d8d 0800     ................
 800f9a0:	08ed 0800 08f9 0800 83f3 0800 8945 0800     ............E...
 800f9b0:	894b 0800 46c0 46c0 46c0 46c0 46c0 46c0     K....F.F.F.F.F.F

0800f9c0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_806>:
 800f9c0:	0004 0000 db20 0800 ab12 abab 0101 0010     .... ...........
 800f9d0:	0000 0000 11e0 0801 f520 0800 0000 0000     ........ .......
 800f9e0:	0000 0000 1200 0801 d730 0800               ........0...

0800f9ec <System.RuntimeType_807>:
 800f9ec:	0004 0000 9380 0800 d730 0800 46c0 46c0     ........0....F.F
 800f9fc:	46c0 46c0                                   .F.F

0800fa00 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_808>:
 800fa00:	0004 0000 8cf0 0800 0008 0000 0d8d 0800     ................
 800fa10:	08ed 0800 08f9 0800 4601 0800 4639 0800     .........F..9F..
 800fa20:	464d 0800 3881 0800 894f 0800 46c0 46c0     MF...8..O....F.F

0800fa30 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_809>:
 800fa30:	0004 0000 db20 0800 ab12 abab 0101 0010     .... ...........
 800fa40:	0000 0000 0cd0 0801 1230 0801 0000 0000     ........0.......
 800fa50:	0000 0000 f3b0 0800 d760 0800               ........`...

0800fa5c <System.RuntimeType_810>:
 800fa5c:	0004 0000 9380 0800 d760 0800 46c0 46c0     ........`....F.F
 800fa6c:	46c0 46c0                                   .F.F

0800fa70 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_811>:
 800fa70:	0004 0000 8cf0 0800 0004 0000 0d8d 0800     ................
 800fa80:	08ed 0800 08f9 0800 898f 0800 46c0 46c0     .............F.F

0800fa90 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_812>:
 800fa90:	0004 0000 db20 0800 ab12 abab 0101 0010     .... ...........
 800faa0:	0000 0000 0b60 0801 1230 0801 0000 0000     ....`...0.......
 800fab0:	0000 0000 1290 0801 d790 0800               ............

0800fabc <System.RuntimeType_813>:
 800fabc:	0004 0000 9380 0800 d790 0800 46c0 46c0     .............F.F
 800facc:	46c0 46c0                                   .F.F

0800fad0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_814>:
 800fad0:	0004 0000 8cf0 0800 0005 0000 0d8d 0800     ................
 800fae0:	08ed 0800 08f9 0800 872b 0800 8731 0800     ........+...1...

0800faf0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_815>:
 800faf0:	0004 0000 db20 0800 ab12 abab 0101 0010     .... ...........
 800fb00:	0000 0000 0aa0 0801 1230 0801 0000 0000     ........0.......
 800fb10:	0000 0000 12c0 0801 d7c0 0800               ............

0800fb1c <System.RuntimeType_816>:
 800fb1c:	0004 0000 9380 0800 d7c0 0800 46c0 46c0     .............F.F
 800fb2c:	46c0 46c0                                   .F.F

0800fb30 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_817>:
 800fb30:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 800fb40:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

0800fb50 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_818>:
 800fb50:	0004 0000 db20 0800 ab12 abab 0101 0010     .... ...........
 800fb60:	0000 0000 12f0 0801 1320 0801 0000 0000     ........ .......
 800fb70:	0000 0000 13b0 0801 d7f0 0800               ............

0800fb7c <System.RuntimeType_819>:
 800fb7c:	0004 0000 9380 0800 d7f0 0800 46c0 46c0     .............F.F
 800fb8c:	46c0 46c0                                   .F.F

0800fb90 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_820>:
 800fb90:	0004 0000 8cf0 0800 0005 0000 0d8d 0800     ................
 800fba0:	08ed 0800 08f9 0800 81f1 0800 7ad9 0800     .............z..

0800fbb0 <System.RuntimeType_821>:
 800fbb0:	0004 0000 9380 0800 d820 0800 46c0 46c0     ........ ....F.F

0800fbc0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_822>:
 800fbc0:	0004 0000 8cf0 0800 0007 0000 0d8d 0800     ................
 800fbd0:	08ed 0800 08f9 0800 8955 0800 8961 0800     ........U...a...
 800fbe0:	31b5 0800 31c7 0800 46c0 46c0 46c0 46c0     .1...1...F.F.F.F

0800fbf0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_823>:
 800fbf0:	0004 0000 db20 0800 ab12 abab 0003 0010     .... ...........
 800fc00:	0000 0000 13e0 0801 9434 0800 1410 0801     ........4.......
 800fc10:	0000 0000 1410 0801 d850 0800               ........P...

0800fc1c <System.RuntimeType_824>:
 800fc1c:	0004 0000 9380 0800 d850 0800 46c0 46c0     ........P....F.F
 800fc2c:	46c0 46c0                                   .F.F

0800fc30 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_825>:
 800fc30:	0004 0000 8cf0 0800 0007 0000 0d8d 0800     ................
 800fc40:	08ed 0800 08f9 0800 514b 0800 514d 0800     ........KQ..MQ..
 800fc50:	514f 0800 5153 0800 46c0 46c0 46c0 46c0     OQ..SQ...F.F.F.F

0800fc60 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_826>:
 800fc60:	0004 0000 db20 0800 ab12 abab 0001 0010     .... ...........
 800fc70:	0000 0000 1440 0801 e2a0 0800 0000 0000     ....@...........
 800fc80:	0000 0000 a5e0 0800 d880 0800               ............

0800fc8c <System.RuntimeType_827>:
 800fc8c:	0004 0000 9380 0800 d880 0800 46c0 46c0     .............F.F
 800fc9c:	46c0 46c0                                   .F.F

0800fca0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_828>:
 800fca0:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 800fcb0:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

0800fcc0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_829>:
 800fcc0:	0004 0000 db20 0800 ab12 abab 0102 0010     .... ...........
 800fcd0:	0000 0000 1470 0801 9434 0800 e9c0 0800     ....p...4.......
 800fce0:	0000 0000 14a0 0801 d8b0 0800               ............

0800fcec <System.RuntimeType_830>:
 800fcec:	0004 0000 9380 0800 d8b0 0800 46c0 46c0     .............F.F
 800fcfc:	46c0 46c0                                   .F.F

0800fd00 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_831>:
 800fd00:	0004 0000 8cf0 0800 0007 0000 0d8d 0800     ................
 800fd10:	08ed 0800 08f9 0800 3205 0800 3235 0800     .........2..52..
 800fd20:	3239 0800 3269 0800 46c0 46c0 46c0 46c0     92..i2...F.F.F.F

0800fd30 <System.String_832>:
 800fd30:	0004 0000 8a60 0800 0006 0000 0006 0000     ....`...........
 800fd40:	0056 0054 0061 0062 006c 0065 46c0 46c0     V.T.a.b.l.e..F.F

0800fd50 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_833>:
 800fd50:	0004 0000 db20 0800 ab12 abab 0101 0010     .... ...........
 800fd60:	0000 0000 14d0 0801 dd80 0800 0000 0000     ................
 800fd70:	0000 0000 e4c0 0800 db20 0800               ........ ...

0800fd7c <System.RuntimeType_834>:
 800fd7c:	0004 0000 9380 0800 db20 0800 46c0 46c0     ........ ....F.F
 800fd8c:	46c0 46c0                                   .F.F

0800fd90 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_835>:
 800fd90:	0004 0000 8cf0 0800 0009 0000 73f9 0800     .............s..
 800fda0:	7759 0800 7767 0800 7689 0800 35b1 0800     Yw..gw...v...5..
 800fdb0:	0a9d 0800 72c1 0800 72d5 0800 33e9 0800     .....r...r...3..

0800fdc0 <Microsoft.Zelig.Runtime.TypeSystem.ValueTypeRepresentation_836>:
 800fdc0:	0004 0000 ef60 0800 ab11 abab 0109 0010     ....`...........
 800fdd0:	0000 0000 1530 0801 dd80 0800 0000 0000     ....0...........
 800fde0:	0000 0000 de40 0800 1560 0801 46c0 46c0     ....@...`....F.F

0800fdf0 <Microsoft.Zelig.Runtime.TypeSystem.ValueTypeRepresentation_837>:
 800fdf0:	0004 0000 ef60 0800 ab11 abab 010a 0010     ....`...........
 800fe00:	0000 0000 1590 0801 9434 0800 dac0 0800     ........4.......
 800fe10:	0000 0000 de40 0800 15c0 0801 46c0 46c0     ....@........F.F

0800fe20 <System.String_838>:
 800fe20:	0004 0000 8a60 0800 000f 0000 000f 0000     ....`...........
 800fe30:	0053 0079 0073 0074 0065 006d 0045 0078     S.y.s.t.e.m.E.x.
 800fe40:	0063 0065 0070 0074 0069 006f 006e 46c0     c.e.p.t.i.o.n..F

0800fe50 <Microsoft.Zelig.Runtime.TypeSystem.VTable_839>:
 800fe50:	0004 0000 8c80 0800 0004 0000 0000 0000     ................
 800fe60:	dcb0 0800 15e4 0801 ab44 abab 15f0 0801     ........D.......
 800fe70:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800fe80 <System.String_840>:
 800fe80:	0004 0000 8a60 0800 0009 0000 0009 0000     ....`...........
 800fe90:	0056 0061 006c 0075 0065 0054 0079 0070     V.a.l.u.e.T.y.p.
 800fea0:	0065 46c0 46c0 46c0 46c0 46c0 46c0 46c0     e..F.F.F.F.F.F.F

0800feb0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_841>:
 800feb0:	0004 0000 8c80 0800 0000 0000 0000 0000     ................
 800fec0:	de40 0800 160c 0801 ab44 abab 1620 0801     @.......D... ...
 800fed0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800fee0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_842>:
 800fee0:	0004 0000 8c80 0800 0024 0000 0000 0000     ........$.......
 800fef0:	1640 0801 166c 0801 ab44 abab 1680 0801     @...l...D.......
 800ff00:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800ff10 <System.String_843>:
 800ff10:	0004 0000 8a60 0800 0004 0000 0004 0000     ....`...........
 800ff20:	0042 0079 0074 0065 46c0 46c0 46c0 46c0     B.y.t.e..F.F.F.F

0800ff30 <Microsoft.Zelig.Runtime.TypeSystem.VTable_844>:
 800ff30:	0004 0000 8c80 0800 0001 0000 0000 0000     ................
 800ff40:	de70 0800 16b0 0801 ab21 abab 16c0 0801     p.......!.......
 800ff50:	16f0 0801 46c0 46c0 46c0 46c0 46c0 46c0     .....F.F.F.F.F.F

0800ff60 <System.String_845>:
 800ff60:	0004 0000 8a60 0800 0004 0000 0004 0000     ....`...........
 800ff70:	0043 0068 0061 0072 46c0 46c0 46c0 46c0     C.h.a.r..F.F.F.F

0800ff80 <Microsoft.Zelig.Runtime.TypeSystem.VTable_846>:
 800ff80:	0004 0000 8c80 0800 0002 0000 0000 0000     ................
 800ff90:	dea0 0800 1704 0801 ab21 abab 1710 0801     ........!.......
 800ffa0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

0800ffb0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_847>:
 800ffb0:	0004 0000 db20 0800 ab12 abab 0001 0010     .... ...........
 800ffc0:	0000 0000 1730 0801 dd80 0800 0000 0000     ....0...........
 800ffd0:	0000 0000 e4c0 0800 ded0 0800               ............

0800ffdc <System.RuntimeType_848>:
 800ffdc:	0004 0000 9380 0800 ded0 0800 46c0 46c0     .............F.F
 800ffec:	46c0 46c0                                   .F.F

0800fff0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_849>:
 800fff0:	0004 0000 8cf0 0800 0009 0000 7265 0800     ............er..
 8010000:	7759 0800 7767 0800 7689 0800 35b1 0800     Yw..gw...v...5..
 8010010:	0a9d 0800 72c1 0800 72d5 0800 33e9 0800     .....r...r...3..

08010020 <System.String_850>:
 8010020:	0004 0000 8a60 0800 0005 0000 0005 0000     ....`...........
 8010030:	0049 006e 0074 0033 0032 46c0 46c0 46c0     I.n.t.3.2..F.F.F

08010040 <Microsoft.Zelig.Runtime.TypeSystem.VTable_851>:
 8010040:	0004 0000 8c80 0800 0004 0000 0000 0000     ................
 8010050:	df20 0800 1788 0801 ab21 abab 17a0 0801      .......!.......
 8010060:	17d0 0801 46c0 46c0 46c0 46c0 46c0 46c0     .....F.F.F.F.F.F

08010070 <System.String_852>:
 8010070:	0004 0000 8a60 0800 000b 0000 000b 0000     ....`...........
 8010080:	0052 0075 006e 0074 0069 006d 0065 0054     R.u.n.t.i.m.e.T.
 8010090:	0079 0070 0065 46c0 46c0 46c0 46c0 46c0     y.p.e..F.F.F.F.F

080100a0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_853>:
 80100a0:	0004 0000 ded0 0800 ab12 abab 2081 0010     ............. ..
 80100b0:	0000 0000 17f0 0801 db90 0800 0000 0000     ................
 80100c0:	0000 0000 b8c0 0800 1810 0801 46c0 46c0     .............F.F

080100d0 <System.String_856>:
 80100d0:	0004 0000 8a60 0800 0006 0000 0006 0000     ....`...........
 80100e0:	0055 0049 006e 0074 0033 0032 46c0 46c0     U.I.n.t.3.2..F.F

080100f0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_857>:
 80100f0:	0004 0000 8c80 0800 0004 0000 0000 0000     ................
 8010100:	e0b0 0800 1834 0801 ab21 abab 1840 0801     ....4...!...@...
 8010110:	1880 0801 46c0 46c0 46c0 46c0 46c0 46c0     .....F.F.F.F.F.F

08010120 <System.String_858>:
 8010120:	0004 0000 8a60 0800 000b 0000 000b 0000     ....`...........
 8010130:	0049 0044 0069 0073 0070 006f 0073 0061     I.D.i.s.p.o.s.a.
 8010140:	0062 006c 0065 46c0 46c0 46c0 46c0 46c0     b.l.e..F.F.F.F.F

08010150 <System.String_859>:
 8010150:	0004 0000 8a60 0800 0009 0000 0009 0000     ....`...........
 8010160:	0050 0072 006f 0063 0065 0073 0073 006f     P.r.o.c.e.s.s.o.
 8010170:	0072 46c0 46c0 46c0 46c0 46c0 46c0 46c0     r..F.F.F.F.F.F.F

08010180 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_860>:
 8010180:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 8010190:	0000 0000 0150 0801 0dd0 0801 0000 0000     ....P...........
 80101a0:	0000 0000 18a0 0801 18d0 0801 46c0 46c0     .............F.F

080101b0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_861>:
 80101b0:	0004 0000 ded0 0800 ab12 abab 0082 0010     ................
 80101c0:	0000 0000 e1f0 0800 9434 0800 18a0 0801     ........4.......
 80101d0:	0000 0000 1900 0801 1930 0801 46c0 46c0     ........0....F.F

080101e0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_862>:
 80101e0:	0004 0000 8c80 0800 0009 0000 0000 0000     ................
 80101f0:	e240 0800 1954 0801 ab44 abab 1960 0801     @...T...D...`...
 8010200:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08010210 <Microsoft.Zelig.Runtime.TypeSystem.VTable_863>:
 8010210:	0004 0000 8c80 0800 0008 0000 0000 0000     ................
 8010220:	19a0 0801 19cc 0801 ab44 abab 19e0 0801     ........D.......
 8010230:	8d64 0800                                   d...

08010234 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation[]_864>:
 8010234:	0004 0000 8ba0 0800 0001 0000 9990 0800     ................

08010244 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation[]_865>:
 8010244:	0004 0000 8ba0 0800 0001 0000 eab0 0800     ................

08010254 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation[]_866>:
 8010254:	0004 0000 8ba0 0800 0001 0000 ad70 0800     ............p...
 8010264:	46c0 46c0 46c0 46c0 46c0 46c0               .F.F.F.F.F.F

08010270 <System.String_869>:
 8010270:	0004 0000 8a60 0800 0017 0000 0017 0000     ....`...........
 8010280:	0043 0072 0069 0074 0069 0063 0061 006c     C.r.i.t.i.c.a.l.
 8010290:	0046 0069 006e 0061 006c 0069 007a 0065     F.i.n.a.l.i.z.e.
 80102a0:	0072 004f 0062 006a 0065 0063 0074 46c0     r.O.b.j.e.c.t..F

080102b0 <System.String_870>:
 80102b0:	0004 0000 8a60 0800 0023 0000 0023 0000     ....`...#...#...
 80102c0:	0053 0079 0073 0074 0065 006d 002e 0052     S.y.s.t.e.m...R.
 80102d0:	0075 006e 0074 0069 006d 0065 002e 0043     u.n.t.i.m.e...C.
 80102e0:	006f 006e 0073 0074 0072 0061 0069 006e     o.n.s.t.r.a.i.n.
 80102f0:	0065 0064 0045 0078 0065 0063 0075 0074     e.d.E.x.e.c.u.t.
 8010300:	0069 006f 006e 46c0 46c0 46c0 46c0 46c0     i.o.n..F.F.F.F.F

08010310 <Microsoft.Zelig.Runtime.TypeSystem.VTable_871>:
 8010310:	0004 0000 8c80 0800 0000 0000 0000 0000     ................
 8010320:	e390 0800 19f8 0801 ab44 abab 1a10 0801     ........D.......
 8010330:	8d64 0800                                   d...

08010334 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation[]_872>:
 8010334:	0004 0000 8ba0 0800 0001 0000 9990 0800     ................
 8010344:	46c0 46c0 46c0 46c0 46c0 46c0               .F.F.F.F.F.F

08010350 <System.String_873>:
 8010350:	0004 0000 8a60 0800 000a 0000 000a 0000     ....`...........
 8010360:	0057 0061 0069 0074 0048 0061 006e 0064     W.a.i.t.H.a.n.d.
 8010370:	006c 0065 46c0 46c0 46c0 46c0 46c0 46c0     l.e..F.F.F.F.F.F

08010380 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_874>:
 8010380:	0004 0000 ded0 0800 ab12 abab 2081 0010     ............. ..
 8010390:	0000 0000 1a30 0801 db90 0800 0000 0000     ....0...........
 80103a0:	0000 0000 a5e0 0800 1a70 0801 46c0 46c0     ........p....F.F

080103b0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_875>:
 80103b0:	0004 0000 8c80 0800 0004 0000 0000 0000     ................
 80103c0:	e400 0800 1a94 0801 ab44 abab 1aa0 0801     ........D.......
 80103d0:	1ae0 0801 46c0 46c0 46c0 46c0 46c0 46c0     .....F.F.F.F.F.F

080103e0 <System.String_876>:
 80103e0:	0004 0000 8a60 0800 001b 0000 001b 0000     ....`...........
 80103f0:	0052 0065 0066 0065 0072 0065 006e 0063     R.e.f.e.r.e.n.c.
 8010400:	0065 0054 0079 0070 0065 0052 0065 0070     e.T.y.p.e.R.e.p.
 8010410:	0072 0065 0073 0065 006e 0074 0061 0074     r.e.s.e.n.t.a.t.
 8010420:	0069 006f 006e 46c0 46c0 46c0 46c0 46c0     i.o.n..F.F.F.F.F

08010430 <Microsoft.Zelig.Runtime.TypeSystem.VTable_877>:
 8010430:	0004 0000 8c80 0800 0024 0000 0000 0000     ........$.......
 8010440:	e4c0 0800 1af4 0801 ab44 abab 1b00 0801     ........D.......
 8010450:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08010460 <System.String_878>:
 8010460:	0004 0000 8a60 0800 0005 0000 0005 0000     ....`...........
 8010470:	0041 0072 0072 0061 0079 46c0 46c0 46c0     A.r.r.a.y..F.F.F

08010480 <Microsoft.Zelig.Runtime.TypeSystem.VTable_879>:
 8010480:	0004 0000 8c80 0800 0004 0000 0000 0000     ................
 8010490:	e4f0 0800 1b30 0801 ab44 abab 1b40 0801     ....0...D...@...
 80104a0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

080104b0 <System.String_880>:
 80104b0:	0004 0000 8a60 0800 000a 0000 000a 0000     ....`...........
 80104c0:	004c 0065 0064 0054 006f 0067 0067 006c     L.e.d.T.o.g.g.l.
 80104d0:	0065 0072 46c0 46c0 46c0 46c0 46c0 46c0     e.r..F.F.F.F.F.F

080104e0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_881>:
 80104e0:	0004 0000 8c80 0800 0004 0000 0000 0000     ................
 80104f0:	e520 0800 1b58 0801 ab44 abab 1b70 0801      ...X...D...p...
 8010500:	8d64 0800                                   d...

08010504 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation[]_882>:
 8010504:	0004 0000 8ba0 0800 0001 0000 af20 0800     ............ ...

08010514 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation[]_883>:
 8010514:	0004 0000 8ba0 0800 0001 0000 eab0 0800     ................

08010524 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation[]_884>:
 8010524:	0004 0000 8ba0 0800 0001 0000 ad70 0800     ............p...

08010534 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation[]_885>:
 8010534:	0004 0000 8ba0 0800 0001 0000 af20 0800     ............ ...
 8010544:	46c0 46c0 46c0 46c0 46c0 46c0               .F.F.F.F.F.F

08010550 <System.String_886>:
 8010550:	0004 0000 8a60 0800 0009 0000 0009 0000     ....`...........
 8010560:	0046 0069 006e 0061 006c 0069 007a 0065     F.i.n.a.l.i.z.e.
 8010570:	0072 46c0 46c0 46c0 46c0 46c0 46c0 46c0     r..F.F.F.F.F.F.F

08010580 <Microsoft.Zelig.Runtime.TypeSystem.VTable_887>:
 8010580:	0004 0000 8c80 0800 0000 0000 0000 0000     ................
 8010590:	e990 0800 1b8c 0801 ab44 abab 1ba0 0801     ........D.......
 80105a0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

080105b0 <System.String_888>:
 80105b0:	0004 0000 8a60 0800 000f 0000 000f 0000     ....`...........
 80105c0:	0050 0072 006f 0063 0065 0073 0073 006f     P.r.o.c.e.s.s.o.
 80105d0:	0072 0041 0052 004d 0076 0037 004d 46c0     r.A.R.M.v.7.M..F

080105e0 <System.String_889>:
 80105e0:	0004 0000 8a60 0800 002c 0000 002c 0000     ....`...,...,...
 80105f0:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 8010600:	0074 002e 005a 0065 006c 0069 0067 002e     t...Z.e.l.i.g...
 8010610:	0052 0075 006e 0074 0069 006d 0065 002e     R.u.n.t.i.m.e...
 8010620:	0054 0061 0072 0067 0065 0074 0050 006c     T.a.r.g.e.t.P.l.
 8010630:	0061 0074 0066 006f 0072 006d 002e 0041     a.t.f.o.r.m...A.
 8010640:	0052 004d 0076 0037 46c0 46c0 46c0 46c0     R.M.v.7..F.F.F.F

08010650 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_890>:
 8010650:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 8010660:	0003 0000 0150 0801 e2a0 0800 0000 0000     ....P...........
 8010670:	0000 0000 a5e0 0800 1bc0 0801 46c0 46c0     .............F.F

08010680 <Microsoft.Zelig.Runtime.TypeSystem.VTable_891>:
 8010680:	0004 0000 8c80 0800 0000 0000 0000 0000     ................
 8010690:	e9c0 0800 1be4 0801 ab44 abab 1bf0 0801     ........D.......
 80106a0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

080106b0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_892>:
 80106b0:	0004 0000 8c80 0800 0000 0000 0000 0000     ................
 80106c0:	e9f0 0800 1c18 0801 ab44 abab 1c30 0801     ........D...0...
 80106d0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

080106e0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_893>:
 80106e0:	0004 0000 db20 0800 ab12 abab 0101 0010     .... ...........
 80106f0:	0000 0000 1c70 0801 dd80 0800 0000 0000     ....p...........
 8010700:	0000 0000 c330 0800 ea20 0800               ....0... ...

0801070c <System.RuntimeType_894>:
 801070c:	0004 0000 9380 0800 ea20 0800 46c0 46c0     ........ ....F.F
 801071c:	46c0 46c0                                   .F.F

08010720 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_895>:
 8010720:	0004 0000 8cf0 0800 0009 0000 74f9 0800     .............t..
 8010730:	75ed 0800 75fb 0800 7581 0800 7609 0800     .u...u...u...v..
 8010740:	760d 0800 7611 0800 761f 0800 754d 0800     .v...v...v..Mu..

08010750 <System.String_898>:
 8010750:	0004 0000 8a60 0800 000e 0000 000e 0000     ....`...........
 8010760:	0057 0061 0069 0074 0061 0062 006c 0065     W.a.i.t.a.b.l.e.
 8010770:	004f 0062 006a 0065 0063 0074 46c0 46c0     O.b.j.e.c.t..F.F

08010780 <Microsoft.Zelig.Runtime.TypeSystem.VTable_899>:
 8010780:	0004 0000 8c80 0800 0008 0000 0000 0000     ................
 8010790:	eab0 0800 1cc0 0801 ab44 abab 1cd0 0801     ........D.......
 80107a0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

080107b0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_900>:
 80107b0:	0004 0000 db20 0800 ab12 abab 0101 0010     .... ...........
 80107c0:	0000 0000 1cf0 0801 dd80 0800 0000 0000     ................
 80107d0:	0000 0000 1640 0801 eae0 0800               ....@.......

080107dc <System.RuntimeType_901>:
 80107dc:	0004 0000 9380 0800 eae0 0800 46c0 46c0     .............F.F
 80107ec:	46c0 46c0                                   .F.F

080107f0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_902>:
 80107f0:	0004 0000 8cf0 0800 0009 0000 7451 0800     ............Qt..
 8010800:	7759 0800 7767 0800 7689 0800 35b1 0800     Yw..gw...v...5..
 8010810:	744d 0800 72c1 0800 72d5 0800 33e9 0800     Mt...r...r...3..

08010820 <System.String_903>:
 8010820:	0004 0000 8a60 0800 0004 0000 0004 0000     ....`...........
 8010830:	0045 006e 0075 006d 46c0 46c0 46c0 46c0     E.n.u.m..F.F.F.F

08010840 <Microsoft.Zelig.Runtime.TypeSystem.VTable_904>:
 8010840:	0004 0000 8c80 0800 0000 0000 0000 0000     ................
 8010850:	eb50 0800 1d3c 0801 ab44 abab 1d50 0801     P...<...D...P...
 8010860:	1d80 0801 46c0 46c0 46c0 46c0 46c0 46c0     .....F.F.F.F.F.F

08010870 <System.String_905>:
 8010870:	0004 0000 8a60 0800 000c 0000 000c 0000     ....`...........
 8010880:	0049 0046 006f 0072 006d 0061 0074 0074     I.F.o.r.m.a.t.t.
 8010890:	0061 0062 006c 0065 46c0 46c0 46c0 46c0     a.b.l.e..F.F.F.F

080108a0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_906>:
 80108a0:	0004 0000 db20 0800 ab12 abab 0101 0010     .... ...........
 80108b0:	0000 0000 1da0 0801 dd80 0800 0000 0000     ................
 80108c0:	0000 0000 ffb0 0800 ecd0 0800               ............

080108cc <System.RuntimeType_907>:
 80108cc:	0004 0000 9380 0800 ecd0 0800 46c0 46c0     .............F.F
 80108dc:	46c0 46c0                                   .F.F

080108e0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_908>:
 80108e0:	0004 0000 8cf0 0800 0009 0000 74a5 0800     .............t..
 80108f0:	7759 0800 7767 0800 7689 0800 35b1 0800     Yw..gw...v...5..
 8010900:	0a9d 0800 72c1 0800 72d5 0800 33e9 0800     .....r...r...3..

08010910 <System.String_909>:
 8010910:	0004 0000 8a60 0800 0010 0000 0010 0000     ....`...........
 8010920:	004e 0075 006d 0062 0065 0072 0046 006f     N.u.m.b.e.r.F.o.
 8010930:	0072 006d 0061 0074 0049 006e 0066 006f     r.m.a.t.I.n.f.o.

08010940 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_912>:
 8010940:	0004 0000 db20 0800 ab12 abab 0001 0010     .... ...........
 8010950:	0000 0000 1df0 0801 dd80 0800 0000 0000     ................
 8010960:	0000 0000 c4a0 0800 ef60 0800               ........`...

0801096c <System.RuntimeType_913>:
 801096c:	0004 0000 9380 0800 ef60 0800 46c0 46c0     ........`....F.F
 801097c:	46c0 46c0                                   .F.F

08010980 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_914>:
 8010980:	0004 0000 8cf0 0800 0009 0000 792d 0800     ............-y..
 8010990:	7759 0800 7767 0800 7689 0800 35b1 0800     Yw..gw...v...5..
 80109a0:	0a9d 0800 72c1 0800 72d5 0800 33e9 0800     .....r...r...3..

080109b0 <System.String_915>:
 80109b0:	0004 0000 8a60 0800 0012 0000 0012 0000     ....`...........
 80109c0:	0042 0061 0073 0065 0052 0065 0070 0072     B.a.s.e.R.e.p.r.
 80109d0:	0065 0073 0065 006e 0074 0061 0074 0069     e.s.e.n.t.a.t.i.
 80109e0:	006f 006e 46c0 46c0 46c0 46c0 46c0 46c0     o.n..F.F.F.F.F.F

080109f0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_916>:
 80109f0:	0004 0000 8c80 0800 0000 0000 0000 0000     ................
 8010a00:	efc0 0800 1e30 0801 ab44 abab 1e40 0801     ....0...D...@...
 8010a10:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08010a20 <System.String_917>:
 8010a20:	0004 0000 8a60 0800 0010 0000 0010 0000     ....`...........
 8010a30:	0049 0047 0070 0069 006f 0050 0069 006e     I.G.p.i.o.P.i.n.
 8010a40:	0050 0072 006f 0076 0069 0064 0065 0072     P.r.o.v.i.d.e.r.

08010a50 <System.String_918>:
 8010a50:	0004 0000 8a60 0800 001d 0000 001d 0000     ....`...........
 8010a60:	0057 0069 006e 0064 006f 0077 0073 002e     W.i.n.d.o.w.s...
 8010a70:	0044 0065 0076 0069 0063 0065 0073 002e     D.e.v.i.c.e.s...
 8010a80:	0047 0070 0069 006f 002e 0050 0072 006f     G.p.i.o...P.r.o.
 8010a90:	0076 0069 0064 0065 0072 46c0 46c0 46c0     v.i.d.e.r..F.F.F

08010aa0 <System.String_919>:
 8010aa0:	0004 0000 8a60 0800 000b 0000 000b 0000     ....`...........
 8010ab0:	0053 0079 0073 0074 0065 006d 0054 0069     S.y.s.t.e.m.T.i.
 8010ac0:	006d 0065 0072 46c0 46c0 46c0 46c0 46c0     m.e.r..F.F.F.F.F

08010ad0 <System.String_920>:
 8010ad0:	0004 0000 8a60 0800 0020 0000 0020 0000     ....`... ... ...
 8010ae0:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 8010af0:	0074 002e 0043 006f 0072 0074 0065 0078     t...C.o.r.t.e.x.
 8010b00:	004d 0033 004f 006e 004d 0042 0045 0044     M.3.O.n.M.B.E.D.
 8010b10:	002e 0044 0072 0069 0076 0065 0072 0073     ..D.r.i.v.e.r.s.

08010b20 <Microsoft.Zelig.Runtime.TypeSystem.VTable_921>:
 8010b20:	0004 0000 8c80 0800 0014 0000 0000 0000     ................
 8010b30:	f2a0 0800 1e5c 0801 ab44 abab 1e70 0801     ....\...D...p...
 8010b40:	8d64 0800                                   d...

08010b44 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation[]_922>:
 8010b44:	0004 0000 8ba0 0800 0001 0000 cc90 0800     ................
 8010b54:	46c0 46c0 46c0 46c0 46c0 46c0               .F.F.F.F.F.F

08010b60 <System.String_923>:
 8010b60:	0004 0000 8a60 0800 0013 0000 0013 0000     ....`...........
 8010b70:	0049 006e 0074 0065 0072 0072 0075 0070     I.n.t.e.r.r.u.p.
 8010b80:	0074 0043 006f 006e 0074 0072 006f 006c     t.C.o.n.t.r.o.l.
 8010b90:	006c 0065 0072 46c0 46c0 46c0 46c0 46c0     l.e.r..F.F.F.F.F

08010ba0 <System.String_924>:
 8010ba0:	0004 0000 8a60 0800 002f 0000 002f 0000     ....`.../.../...
 8010bb0:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 8010bc0:	0074 002e 0044 0065 0076 0069 0063 0065     t...D.e.v.i.c.e.
 8010bd0:	004d 006f 0064 0065 006c 0073 002e 0043     M.o.d.e.l.s...C.
 8010be0:	0068 0069 0070 0073 0065 0074 002e 0043     h.i.p.s.e.t...C.
 8010bf0:	006f 0072 0074 0065 0078 004d 0033 002e     o.r.t.e.x.M.3...
 8010c00:	0044 0072 0069 0076 0065 0072 0073 46c0     D.r.i.v.e.r.s..F

08010c10 <Microsoft.Zelig.Runtime.TypeSystem.VTable_925>:
 8010c10:	0004 0000 8c80 0800 000c 0000 0000 0000     ................
 8010c20:	f2e0 0800 1e88 0801 ab44 abab 1ea0 0801     ........D.......
 8010c30:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08010c40 <System.String_928>:
 8010c40:	0004 0000 8a60 0800 001d 0000 001d 0000     ....`...........
 8010c50:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 8010c60:	0074 002e 004c 006c 0069 006c 0075 006d     t...L.l.i.l.u.m.
 8010c70:	002e 0044 0065 0076 0069 0063 0065 0073     ..D.e.v.i.c.e.s.
 8010c80:	002e 0047 0070 0069 006f 46c0 46c0 46c0     ..G.p.i.o..F.F.F

08010c90 <Microsoft.Zelig.Runtime.TypeSystem.VTable_929>:
 8010c90:	0004 0000 8c80 0800 0010 0000 0000 0000     ................
 8010ca0:	f370 0800 1ec0 0801 ab44 abab 1ed0 0801     p.......D.......
 8010cb0:	1f10 0801                                   ....

08010cb4 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation[]_930>:
 8010cb4:	0004 0000 8ba0 0800 0001 0000 cc90 0800     ................
 8010cc4:	46c0 46c0 46c0 46c0 46c0 46c0               .F.F.F.F.F.F

08010cd0 <System.String_931>:
 8010cd0:	0004 0000 8a60 0800 0012 0000 0012 0000     ....`...........
 8010ce0:	0043 006f 006e 0074 0065 0078 0074 0053     C.o.n.t.e.x.t.S.
 8010cf0:	0077 0069 0074 0063 0068 0054 0069 006d     w.i.t.c.h.T.i.m.
 8010d00:	0065 0072 46c0 46c0 46c0 46c0 46c0 46c0     e.r..F.F.F.F.F.F

08010d10 <Microsoft.Zelig.Runtime.TypeSystem.VTable_932>:
 8010d10:	0004 0000 8c80 0800 0019 0000 0000 0000     ................
 8010d20:	f3b0 0800 1f24 0801 ab44 abab 1f30 0801     ....$...D...0...
 8010d30:	8d64 0800                                   d...

08010d34 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation[]_933>:
 8010d34:	0004 0000 8ba0 0800 0001 0000 d260 0800     ............`...

08010d44 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation[]_934>:
 8010d44:	0004 0000 8ba0 0800 0001 0000 f470 0800     ............p...
 8010d54:	46c0 46c0 46c0 46c0 46c0 46c0               .F.F.F.F.F.F

08010d60 <System.String_935>:
 8010d60:	0004 0000 8a60 0800 000d 0000 000d 0000     ....`...........
 8010d70:	0049 006e 0074 0065 0072 0072 0075 0070     I.n.t.e.r.r.u.p.
 8010d80:	0074 0044 0061 0074 0061 46c0 46c0 46c0     t.D.a.t.a..F.F.F

08010d90 <Microsoft.Zelig.Runtime.TypeSystem.VTable_936>:
 8010d90:	0004 0000 8c80 0800 000c 0000 0000 0000     ................
 8010da0:	f470 0800 1f4c 0801 ab22 abab 1f60 0801     p...L..."...`...
 8010db0:	8d64 0800                                   d...

08010db4 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation[]_937>:
 8010db4:	0004 0000 8ba0 0800 0001 0000 d260 0800     ............`...
 8010dc4:	46c0 46c0 46c0 46c0 46c0 46c0               .F.F.F.F.F.F

08010dd0 <System.String_938>:
 8010dd0:	0004 0000 8a60 0800 0018 0000 0018 0000     ....`...........
 8010de0:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 8010df0:	0074 002e 0043 006f 0072 0074 0065 0078     t...C.o.r.t.e.x.
 8010e00:	004d 0034 004f 006e 004d 0042 0045 0044     M.4.O.n.M.B.E.D.

08010e10 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_939>:
 8010e10:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 8010e20:	0000 0000 f4f0 0800 f5e0 0800 0000 0000     ................
 8010e30:	0000 0000 1f80 0801 1fb0 0801 46c0 46c0     .............F.F

08010e40 <Microsoft.Zelig.Runtime.TypeSystem.VTable_940>:
 8010e40:	0004 0000 8c80 0800 0040 0000 0000 0000     ........@.......
 8010e50:	f570 0800 1fd4 0801 ab44 abab 1fe0 0801     p.......D.......
 8010e60:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08010e70 <System.String_941>:
 8010e70:	0004 0000 8a60 0800 001d 0000 001d 0000     ....`...........
 8010e80:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 8010e90:	0074 002e 0043 006f 0072 0074 0065 0078     t...C.o.r.t.e.x.
 8010ea0:	004d 0033 004f 006e 0043 004d 0053 0049     M.3.O.n.C.M.S.I.
 8010eb0:	0053 0043 006f 0072 0065 46c0 46c0 46c0     S.C.o.r.e..F.F.F

08010ec0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_942>:
 8010ec0:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 8010ed0:	0000 0000 2050 0801 e2a0 0800 0000 0000     ....P ..........
 8010ee0:	0000 0000 2090 0801 20c0 0801 46c0 46c0     ..... ... ...F.F

08010ef0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_943>:
 8010ef0:	0004 0000 8c80 0800 0000 0000 0000 0000     ................
 8010f00:	f620 0800 20e4 0801 ab44 abab 20f0 0801      .... ..D.... ..
 8010f10:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08010f20 <System.String_944>:
 8010f20:	0004 0000 8a60 0800 0010 0000 0010 0000     ....`...........
 8010f30:	0048 0061 0072 0064 0077 0061 0072 0065     H.a.r.d.w.a.r.e.
 8010f40:	0050 0072 006f 0076 0069 0064 0065 0072     P.r.o.v.i.d.e.r.

08010f50 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_945>:
 8010f50:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 8010f60:	0000 0000 0f20 0801 0e70 0801 0000 0000     .... ...p.......
 8010f70:	0000 0000 2130 0801 2160 0801 46c0 46c0     ....0!..`!...F.F

08010f80 <System.String_946>:
 8010f80:	0004 0000 8a60 0800 0006 0000 0006 0000     ....`...........
 8010f90:	004d 0065 006d 006f 0072 0079 46c0 46c0     M.e.m.o.r.y..F.F

08010fa0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_947>:
 8010fa0:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 8010fb0:	0000 0000 0f80 0801 0e70 0801 0000 0000     ........p.......
 8010fc0:	0000 0000 2190 0801 21c0 0801 46c0 46c0     .....!...!...F.F

08010fd0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_948>:
 8010fd0:	0004 0000 db20 0800 ab12 abab 0002 0010     .... ...........
 8010fe0:	0000 0000 21f0 0801 9434 0800 2190 0801     .....!..4....!..
 8010ff0:	0000 0000 a5e0 0800 2210 0801 46c0 46c0     ........."...F.F

08011000 <System.String_949>:
 8011000:	0004 0000 8a60 0800 000d 0000 000d 0000     ....`...........
 8011010:	004d 0065 006d 006f 0072 0079 004d 0061     M.e.m.o.r.y.M.a.
 8011020:	006e 0061 0067 0065 0072 46c0 46c0 46c0     n.a.g.e.r..F.F.F

08011030 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_950>:
 8011030:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 8011040:	0000 0000 1000 0801 0e70 0801 0000 0000     ........p.......
 8011050:	0000 0000 2240 0801 2270 0801 46c0 46c0     ....@"..p"...F.F

08011060 <System.String_951>:
 8011060:	0004 0000 8a60 0800 000b 0000 000b 0000     ....`...........
 8011070:	0050 0065 0072 0069 0070 0068 0065 0072     P.e.r.i.p.h.e.r.
 8011080:	0061 006c 0073 46c0 46c0 46c0 46c0 46c0     a.l.s..F.F.F.F.F

08011090 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_952>:
 8011090:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 80110a0:	0000 0000 1060 0801 0e70 0801 0000 0000     ....`...p.......
 80110b0:	0000 0000 22a0 0801 22d0 0801 46c0 46c0     ....."..."...F.F

080110c0 <System.String_953>:
 80110c0:	0004 0000 8a60 0800 0007 0000 0007 0000     ....`...........
 80110d0:	0053 0074 006f 0072 0061 0067 0065 46c0     S.t.o.r.a.g.e..F

080110e0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_954>:
 80110e0:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 80110f0:	0000 0000 10c0 0801 0e70 0801 0000 0000     ........p.......
 8011100:	0000 0000 2300 0801 2330 0801 46c0 46c0     .....#..0#...F.F

08011110 <System.String_955>:
 8011110:	0004 0000 8a60 0800 0007 0000 0007 0000     ....`...........
 8011120:	0053 0079 0073 0054 0069 0063 006b 46c0     S.y.s.T.i.c.k..F

08011130 <System.String_956>:
 8011130:	0004 0000 8a60 0800 0027 0000 0027 0000     ....`...'...'...
 8011140:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 8011150:	0074 002e 0044 0065 0076 0069 0063 0065     t...D.e.v.i.c.e.
 8011160:	004d 006f 0064 0065 006c 0073 002e 0043     M.o.d.e.l.s...C.
 8011170:	0068 0069 0070 0073 0065 0074 002e 0043     h.i.p.s.e.t...C.
 8011180:	006f 0072 0074 0065 0078 004d 0033 46c0     o.r.t.e.x.M.3..F

08011190 <System.String_957>:
 8011190:	0004 0000 8a60 0800 0005 0000 0005 0000     ....`...........
 80111a0:	0042 006f 0061 0072 0064 46c0 46c0 46c0     B.o.a.r.d..F.F.F

080111b0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_958>:
 80111b0:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 80111c0:	0000 0000 1190 0801 0dd0 0801 0000 0000     ................
 80111d0:	0000 0000 2360 0801 2390 0801 46c0 46c0     ....`#...#...F.F

080111e0 <System.String_959>:
 80111e0:	0004 0000 8a60 0800 0006 0000 0006 0000     ....`...........
 80111f0:	0044 0065 0076 0069 0063 0065 46c0 46c0     D.e.v.i.c.e..F.F

08011200 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_960>:
 8011200:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 8011210:	0000 0000 11e0 0801 0dd0 0801 0000 0000     ................
 8011220:	0000 0000 23c0 0801 23f0 0801 46c0 46c0     .....#...#...F.F

08011230 <System.String_961>:
 8011230:	0004 0000 8a60 0800 0024 0000 0024 0000     ....`...$...$...
 8011240:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 8011250:	0074 002e 005a 0065 006c 0069 0067 002e     t...Z.e.l.i.g...
 8011260:	0044 0049 0053 0043 004f 005f 0046 0037     D.I.S.C.O._.F.7.
 8011270:	0034 0036 004e 0047 002e 0044 0072 0069     4.6.N.G...D.r.i.
 8011280:	0076 0065 0072 0073 46c0 46c0 46c0 46c0     v.e.r.s..F.F.F.F

08011290 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_962>:
 8011290:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 80112a0:	0000 0000 0b60 0801 2420 0801 0000 0000     ....`... $......
 80112b0:	0000 0000 2470 0801 24a0 0801 46c0 46c0     ....p$...$...F.F

080112c0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_963>:
 80112c0:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 80112d0:	0000 0000 0aa0 0801 2420 0801 0000 0000     ........ $......
 80112e0:	0000 0000 f2a0 0800 24d0 0801 46c0 46c0     .........$...F.F

080112f0 <System.String_964>:
 80112f0:	0004 0000 8a60 0800 000c 0000 000c 0000     ....`...........
 8011300:	0047 0070 0069 006f 0050 0072 006f 0076     G.p.i.o.P.r.o.v.
 8011310:	0069 0064 0065 0072 46c0 46c0 46c0 46c0     i.d.e.r..F.F.F.F

08011320 <System.String_965>:
 8011320:	0004 0000 8a60 0800 003c 0000 003c 0000     ....`...<...<...
 8011330:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 8011340:	0074 002e 005a 0065 006c 0069 0067 002e     t...Z.e.l.i.g...
 8011350:	0044 0049 0053 0043 004f 005f 0046 0037     D.I.S.C.O._.F.7.
 8011360:	0034 0036 004e 0047 002e 0048 0061 0072     4.6.N.G...H.a.r.
 8011370:	0064 0077 0061 0072 0065 004d 006f 0064     d.w.a.r.e.M.o.d.
 8011380:	0065 006c 002e 0048 0061 0072 0064 0077     e.l...H.a.r.d.w.
 8011390:	0061 0072 0065 0050 0072 006f 0076 0069     a.r.e.P.r.o.v.i.
 80113a0:	0064 0065 0072 0073 46c0 46c0 46c0 46c0     d.e.r.s..F.F.F.F

080113b0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_966>:
 80113b0:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 80113c0:	0000 0000 12f0 0801 2500 0801 0000 0000     .........%......
 80113d0:	0000 0000 2560 0801 2590 0801 46c0 46c0     ....`%...%...F.F

080113e0 <System.String_967>:
 80113e0:	0004 0000 8a60 0800 000c 0000 000c 0000     ....`...........
 80113f0:	0045 006d 0070 0074 0079 004d 0061 006e     E.m.p.t.y.M.a.n.
 8011400:	0061 0067 0065 0072 46c0 46c0 46c0 46c0     a.g.e.r..F.F.F.F

08011410 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_968>:
 8011410:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 8011420:	0003 0000 25c0 0801 e2a0 0800 0000 0000     .....%..........
 8011430:	0000 0000 a5e0 0800 2600 0801 46c0 46c0     .........&...F.F

08011440 <System.String_969>:
 8011440:	0004 0000 8a60 0800 000e 0000 000e 0000     ....`...........
 8011450:	0053 0079 006e 0063 0042 006c 006f 0063     S.y.n.c.B.l.o.c.
 8011460:	006b 0054 0061 0062 006c 0065 46c0 46c0     k.T.a.b.l.e..F.F

08011470 <System.String_970>:
 8011470:	0004 0000 8a60 0800 000d 0000 000d 0000     ....`...........
 8011480:	004d 0065 0074 0068 006f 0064 0057 0072     M.e.t.h.o.d.W.r.
 8011490:	0061 0070 0070 0065 0072 46c0 46c0 46c0     a.p.p.e.r..F.F.F

080114a0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_971>:
 80114a0:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 80114b0:	0000 0000 2630 0801 e2a0 0800 0000 0000     ....0&..........
 80114c0:	0000 0000 a5e0 0800 2670 0801 46c0 46c0     ........p&...F.F

080114d0 <System.String_972>:
 80114d0:	0004 0000 8a60 0800 0023 0000 0023 0000     ....`...#...#...
 80114e0:	0043 006f 006e 0063 0072 0065 0074 0065     C.o.n.c.r.e.t.e.
 80114f0:	0052 0065 0066 0065 0072 0065 006e 0063     R.e.f.e.r.e.n.c.
 8011500:	0065 0054 0079 0070 0065 0052 0065 0070     e.T.y.p.e.R.e.p.
 8011510:	0072 0065 0073 0065 006e 0074 0061 0074     r.e.s.e.n.t.a.t.
 8011520:	0069 006f 006e 46c0 46c0 46c0 46c0 46c0     i.o.n..F.F.F.F.F

08011530 <System.String_973>:
 8011530:	0004 0000 8a60 0800 000b 0000 000b 0000     ....`...........
 8011540:	0043 006f 0064 0065 0050 006f 0069 006e     C.o.d.e.P.o.i.n.
 8011550:	0074 0065 0072 46c0 46c0 46c0 46c0 46c0     t.e.r..F.F.F.F.F

08011560 <Microsoft.Zelig.Runtime.TypeSystem.VTable_974>:
 8011560:	0004 0000 8c80 0800 0004 0000 0000 0000     ................
 8011570:	fdc0 0800 2694 0801 ab22 abab 26a0 0801     .....&.."....&..
 8011580:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08011590 <System.String_975>:
 8011590:	0004 0000 8a60 0800 000c 0000 000c 0000     ....`...........
 80115a0:	0049 006e 0074 0065 0072 0066 0061 0063     I.n.t.e.r.f.a.c.
 80115b0:	0065 004d 0061 0070 46c0 46c0 46c0 46c0     e.M.a.p..F.F.F.F

080115c0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_976>:
 80115c0:	0004 0000 8c80 0800 0008 0000 0000 0000     ................
 80115d0:	fdf0 0800 26b8 0801 ab22 abab 26d0 0801     .....&.."....&..
 80115e0:	8d64 0800                                   d...

080115e4 <System.RuntimeType_977>:
 80115e4:	0004 0000 9380 0800 fe50 0800               ........P...

080115f0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_978>:
 80115f0:	0004 0000 8cf0 0800 0004 0000 08e1 0800     ................
 8011600:	08ed 0800 08f9 0800 09bd 0800               ............

0801160c <System.RuntimeType_979>:
 801160c:	0004 0000 9380 0800 feb0 0800 46c0 46c0     .............F.F
 801161c:	46c0 46c0                                   .F.F

08011620 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_980>:
 8011620:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 8011630:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

08011640 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_981>:
 8011640:	0004 0000 db20 0800 ab12 abab 0001 0010     .... ...........
 8011650:	0000 0000 26f0 0801 dd80 0800 0000 0000     .....&..........
 8011660:	0000 0000 0940 0801 fee0 0800               ....@.......

0801166c <System.RuntimeType_982>:
 801166c:	0004 0000 9380 0800 fee0 0800 46c0 46c0     .............F.F
 801167c:	46c0 46c0                                   .F.F

08011680 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_983>:
 8011680:	0004 0000 8cf0 0800 0009 0000 762d 0800     ............-v..
 8011690:	7759 0800 7767 0800 7689 0800 35b1 0800     Yw..gw...v...5..
 80116a0:	0a9d 0800 72c1 0800 72d5 0800 33e9 0800     .....r...r...3..

080116b0 <System.RuntimeType_984>:
 80116b0:	0004 0000 9380 0800 ff30 0800 46c0 46c0     ........0....F.F

080116c0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_985>:
 80116c0:	0004 0000 8cf0 0800 0004 0000 0d9d 0800     ................
 80116d0:	0d49 0800 0d99 0800 0e31 0800               I.......1...

080116dc <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_986>:
 80116dc:	0004 0000 8cf0 0800 0001 0000 0e31 0800     ............1...
 80116ec:	46c0 46c0                                   .F.F

080116f0 <Microsoft.Zelig.Runtime.TypeSystem.VTable.InterfaceMap[]_987>:
 80116f0:	0004 0000 8d40 0800 0001 0000 b260 0800     ....@.......`...
 8011700:	16dc 0801                                   ....

08011704 <System.RuntimeType_988>:
 8011704:	0004 0000 9380 0800 ff80 0800               ............

08011710 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_989>:
 8011710:	0004 0000 8cf0 0800 0003 0000 0f49 0800     ............I...
 8011720:	0f05 0800 0efd 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

08011730 <System.String_990>:
 8011730:	0004 0000 8a60 0800 0023 0000 0023 0000     ....`...#...#...
 8011740:	0041 0062 0073 0074 0072 0061 0063 0074     A.b.s.t.r.a.c.t.
 8011750:	0052 0065 0066 0065 0072 0065 006e 0063     R.e.f.e.r.e.n.c.
 8011760:	0065 0054 0079 0070 0065 0052 0065 0070     e.T.y.p.e.R.e.p.
 8011770:	0072 0065 0073 0065 006e 0074 0061 0074     r.e.s.e.n.t.a.t.
 8011780:	0069 006f 006e 46c0                         i.o.n..F

08011788 <System.RuntimeType_991>:
 8011788:	0004 0000 9380 0800 0040 0801 46c0 46c0     ........@....F.F
 8011798:	46c0 46c0 46c0 46c0                         .F.F.F.F

080117a0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_992>:
 80117a0:	0004 0000 8cf0 0800 0005 0000 11b9 0800     ................
 80117b0:	1171 0800 11b5 0800 11cb 0800 11dd 0800     q...............

080117c0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_993>:
 80117c0:	0004 0000 8cf0 0800 0001 0000 11dd 0800     ................

080117d0 <Microsoft.Zelig.Runtime.TypeSystem.VTable.InterfaceMap[]_994>:
 80117d0:	0004 0000 8d40 0800 0001 0000 b260 0800     ....@.......`...
 80117e0:	17c0 0801 46c0 46c0 46c0 46c0 46c0 46c0     .....F.F.F.F.F.F

080117f0 <System.String_995>:
 80117f0:	0004 0000 8a60 0800 0004 0000 0004 0000     ....`...........
 8011800:	0054 0079 0070 0065 46c0 46c0 46c0 46c0     T.y.p.e..F.F.F.F

08011810 <Microsoft.Zelig.Runtime.TypeSystem.VTable_996>:
 8011810:	0004 0000 8c80 0800 0000 0000 0000 0000     ................
 8011820:	00a0 0801 2730 0801 ab44 abab 2740 0801     ....0'..D...@'..
 8011830:	8d64 0800                                   d...

08011834 <System.RuntimeType_1001>:
 8011834:	0004 0000 9380 0800 00f0 0801               ............

08011840 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1002>:
 8011840:	0004 0000 8cf0 0800 0006 0000 1e39 0800     ............9...
 8011850:	1df1 0800 1e35 0800 1dd9 0800 1e4b 0800     ....5.......K...
 8011860:	1e5d 0800                                   ]...

08011864 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1003>:
 8011864:	0004 0000 8cf0 0800 0001 0000 1e5d 0800     ............]...
 8011874:	46c0 46c0 46c0 46c0 46c0 46c0               .F.F.F.F.F.F

08011880 <Microsoft.Zelig.Runtime.TypeSystem.VTable.InterfaceMap[]_1004>:
 8011880:	0004 0000 8d40 0800 0001 0000 b260 0800     ....@.......`...
 8011890:	1864 0801 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

080118a0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1005>:
 80118a0:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 80118b0:	0000 0000 0150 0801 2770 0801 0000 0000     ....P...p'......
 80118c0:	0000 0000 27c0 0801 27f0 0801 46c0 46c0     .....'...'...F.F

080118d0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1006>:
 80118d0:	0004 0000 8c80 0800 0000 0000 0000 0000     ................
 80118e0:	0180 0801 2814 0801 ab44 abab 2820 0801     .....(..D... (..
 80118f0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08011900 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1007>:
 8011900:	0004 0000 ded0 0800 ab12 abab 0082 0010     ................
 8011910:	0000 0000 e1f0 0800 9434 0800 2850 0801     ........4...P(..
 8011920:	0000 0000 e9f0 0800 2880 0801 46c0 46c0     .........(...F.F

08011930 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1008>:
 8011930:	0004 0000 8c80 0800 0009 0000 0000 0000     ................
 8011940:	01b0 0801 28a4 0801 ab44 abab 28b0 0801     .....(..D....(..
 8011950:	8d64 0800                                   d...

08011954 <System.RuntimeType_1009>:
 8011954:	0004 0000 9380 0800 01e0 0801               ............

08011960 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1010>:
 8011960:	0004 0000 8cf0 0800 000b 0000 0d8d 0800     ................
 8011970:	08ed 0800 08f9 0800 20cd 0800 20d5 0800     ......... ... ..
 8011980:	2151 0800 5243 0800 2197 0800 219b 0800     Q!..CR...!...!..
 8011990:	219f 0800 21a7 0800 46c0 46c0 46c0 46c0     .!...!...F.F.F.F

080119a0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_1011>:
 80119a0:	0004 0000 db20 0800 ab12 abab 0102 0010     .... ...........
 80119b0:	0000 0000 28f0 0801 9434 0800 c4a0 0800     .....(..4.......
 80119c0:	0000 0000 a5e0 0800 0210 0801               ............

080119cc <System.RuntimeType_1012>:
 80119cc:	0004 0000 9380 0800 0210 0801 46c0 46c0     .............F.F
 80119dc:	46c0 46c0                                   .F.F

080119e0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1013>:
 80119e0:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 80119f0:	08ed 0800 08f9 0800                         ........

080119f8 <System.RuntimeType_1016>:
 80119f8:	0004 0000 9380 0800 0310 0801 46c0 46c0     .............F.F
 8011a08:	46c0 46c0 46c0 46c0                         .F.F.F.F

08011a10 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1017>:
 8011a10:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 8011a20:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

08011a30 <System.String_1018>:
 8011a30:	0004 0000 8a60 0800 0012 0000 0012 0000     ....`...........
 8011a40:	004d 0061 0072 0073 0068 0061 006c 0042     M.a.r.s.h.a.l.B.
 8011a50:	0079 0052 0065 0066 004f 0062 006a 0065     y.R.e.f.O.b.j.e.
 8011a60:	0063 0074 46c0 46c0 46c0 46c0 46c0 46c0     c.t..F.F.F.F.F.F

08011a70 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1019>:
 8011a70:	0004 0000 8c80 0800 0000 0000 0000 0000     ................
 8011a80:	0380 0801 291c 0801 ab44 abab 2930 0801     .....)..D...0)..
 8011a90:	8d64 0800                                   d...

08011a94 <System.RuntimeType_1020>:
 8011a94:	0004 0000 9380 0800 03b0 0801               ............

08011aa0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1021>:
 8011aa0:	0004 0000 8cf0 0800 0006 0000 0d8d 0800     ................
 8011ab0:	08ed 0800 08f9 0800 2a37 0800 2a4d 0800     ........7*..M*..
 8011ac0:	2a5f 0800                                   _*..

08011ac4 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1022>:
 8011ac4:	0004 0000 8cf0 0800 0001 0000 2a85 0800     .............*..
 8011ad4:	46c0 46c0 46c0 46c0 46c0 46c0               .F.F.F.F.F.F

08011ae0 <Microsoft.Zelig.Runtime.TypeSystem.VTable.InterfaceMap[]_1023>:
 8011ae0:	0004 0000 8d40 0800 0001 0000 9610 0800     ....@...........
 8011af0:	1ac4 0801                                   ....

08011af4 <System.RuntimeType_1024>:
 8011af4:	0004 0000 9380 0800 0430 0801               ........0...

08011b00 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1025>:
 8011b00:	0004 0000 8cf0 0800 0009 0000 0d8d 0800     ................
 8011b10:	7759 0800 7767 0800 7689 0800 35b1 0800     Yw..gw...v...5..
 8011b20:	0a9d 0800 72c1 0800 72d5 0800 33e9 0800     .....r...r...3..

08011b30 <System.RuntimeType_1026>:
 8011b30:	0004 0000 9380 0800 0480 0801 46c0 46c0     .............F.F

08011b40 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1027>:
 8011b40:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 8011b50:	08ed 0800 08f9 0800                         ........

08011b58 <System.RuntimeType_1028>:
 8011b58:	0004 0000 9380 0800 04e0 0801 46c0 46c0     .............F.F
 8011b68:	46c0 46c0 46c0 46c0                         .F.F.F.F

08011b70 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1029>:
 8011b70:	0004 0000 8cf0 0800 0004 0000 0d8d 0800     ................
 8011b80:	08ed 0800 08f9 0800 0000 0000               ............

08011b8c <System.RuntimeType_1030>:
 8011b8c:	0004 0000 9380 0800 0580 0801 46c0 46c0     .............F.F
 8011b9c:	46c0 46c0                                   .F.F

08011ba0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1031>:
 8011ba0:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 8011bb0:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

08011bc0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1032>:
 8011bc0:	0004 0000 8c80 0800 0000 0000 0000 0000     ................
 8011bd0:	0650 0801 2948 0801 ab44 abab 2960 0801     P...H)..D...`)..
 8011be0:	8d64 0800                                   d...

08011be4 <System.RuntimeType_1033>:
 8011be4:	0004 0000 9380 0800 0680 0801               ............

08011bf0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1034>:
 8011bf0:	0004 0000 8cf0 0800 0007 0000 0d8d 0800     ................
 8011c00:	08ed 0800 08f9 0800 30a1 0800 0000 0000     .........0......
 8011c10:	31b5 0800 31c7 0800                         .1...1..

08011c18 <System.RuntimeType_1035>:
 8011c18:	0004 0000 9380 0800 06b0 0801 46c0 46c0     .............F.F
 8011c28:	46c0 46c0 46c0 46c0                         .F.F.F.F

08011c30 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1036>:
 8011c30:	0004 0000 8cf0 0800 000b 0000 0d8d 0800     ................
 8011c40:	08ed 0800 08f9 0800 0000 0000 0000 0000     ................
	...
 8011c68:	46c0 46c0 46c0 46c0                         .F.F.F.F

08011c70 <System.String_1037>:
 8011c70:	0004 0000 8a60 0800 0020 0000 0020 0000     ....`... ... ...
 8011c80:	004d 0061 006e 0061 0067 0065 0064 0050     M.a.n.a.g.e.d.P.
 8011c90:	006f 0069 006e 0074 0065 0072 0054 0079     o.i.n.t.e.r.T.y.
 8011ca0:	0070 0065 0052 0065 0070 0072 0065 0073     p.e.R.e.p.r.e.s.
 8011cb0:	0065 006e 0074 0061 0074 0069 006f 006e     e.n.t.a.t.i.o.n.

08011cc0 <System.RuntimeType_1040>:
 8011cc0:	0004 0000 9380 0800 0780 0801 46c0 46c0     .............F.F

08011cd0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1041>:
 8011cd0:	0004 0000 8cf0 0800 0005 0000 0d8d 0800     ................
 8011ce0:	08ed 0800 08f9 0800 0000 0000 0000 0000     ................

08011cf0 <System.String_1042>:
 8011cf0:	0004 0000 8a60 0800 001d 0000 001d 0000     ....`...........
 8011d00:	0045 006e 0075 006d 0065 0072 0061 0074     E.n.u.m.e.r.a.t.
 8011d10:	0069 006f 006e 0054 0079 0070 0065 0052     i.o.n.T.y.p.e.R.
 8011d20:	0065 0070 0072 0065 0073 0065 006e 0074     e.p.r.e.s.e.n.t.
 8011d30:	0061 0074 0069 006f 006e 46c0               a.t.i.o.n..F

08011d3c <System.RuntimeType_1043>:
 8011d3c:	0004 0000 9380 0800 0840 0801 46c0 46c0     ........@....F.F
 8011d4c:	46c0 46c0                                   .F.F

08011d50 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1044>:
 8011d50:	0004 0000 8cf0 0800 0004 0000 0d8d 0800     ................
 8011d60:	08ed 0800 08f9 0800 106d 0800               ........m...

08011d6c <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1045>:
 8011d6c:	0004 0000 8cf0 0800 0001 0000 106d 0800     ............m...
 8011d7c:	46c0 46c0                                   .F.F

08011d80 <Microsoft.Zelig.Runtime.TypeSystem.VTable.InterfaceMap[]_1046>:
 8011d80:	0004 0000 8d40 0800 0001 0000 b260 0800     ....@.......`...
 8011d90:	1d6c 0801 46c0 46c0 46c0 46c0 46c0 46c0     l....F.F.F.F.F.F

08011da0 <System.String_1047>:
 8011da0:	0004 0000 8a60 0800 001b 0000 001b 0000     ....`...........
 8011db0:	0049 006e 0074 0065 0072 0066 0061 0063     I.n.t.e.r.f.a.c.
 8011dc0:	0065 0054 0079 0070 0065 0052 0065 0070     e.T.y.p.e.R.e.p.
 8011dd0:	0072 0065 0073 0065 006e 0074 0061 0074     r.e.s.e.n.t.a.t.
 8011de0:	0069 006f 006e 46c0 46c0 46c0 46c0 46c0     i.o.n..F.F.F.F.F

08011df0 <System.String_1050>:
 8011df0:	0004 0000 8a60 0800 0017 0000 0017 0000     ....`...........
 8011e00:	0056 0061 006c 0075 0065 0054 0079 0070     V.a.l.u.e.T.y.p.
 8011e10:	0065 0052 0065 0070 0072 0065 0073 0065     e.R.e.p.r.e.s.e.
 8011e20:	006e 0074 0061 0074 0069 006f 006e 46c0     n.t.a.t.i.o.n..F

08011e30 <System.RuntimeType_1051>:
 8011e30:	0004 0000 9380 0800 09f0 0801 46c0 46c0     .............F.F

08011e40 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1052>:
 8011e40:	0004 0000 8cf0 0800 0004 0000 0d8d 0800     ................
 8011e50:	08ed 0800 08f9 0800 0000 0000               ............

08011e5c <System.RuntimeType_1053>:
 8011e5c:	0004 0000 9380 0800 0b20 0801 46c0 46c0     ........ ....F.F
 8011e6c:	46c0 46c0                                   .F.F

08011e70 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1054>:
 8011e70:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 8011e80:	08ed 0800 08f9 0800                         ........

08011e88 <System.RuntimeType_1055>:
 8011e88:	0004 0000 9380 0800 0c10 0801 46c0 46c0     .............F.F
 8011e98:	46c0 46c0 46c0 46c0                         .F.F.F.F

08011ea0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1056>:
 8011ea0:	0004 0000 8cf0 0800 0005 0000 0d8d 0800     ................
 8011eb0:	08ed 0800 08f9 0800 872b 0800 8731 0800     ........+...1...

08011ec0 <System.RuntimeType_1059>:
 8011ec0:	0004 0000 9380 0800 0c90 0801 46c0 46c0     .............F.F

08011ed0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1060>:
 8011ed0:	0004 0000 8cf0 0800 0008 0000 0d8d 0800     ................
 8011ee0:	08ed 0800 08f9 0800 0000 0000 0000 0000     ................
	...

08011efc <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1061>:
 8011efc:	0004 0000 8cf0 0800 0001 0000 0000 0000     ................
 8011f0c:	46c0 46c0                                   .F.F

08011f10 <Microsoft.Zelig.Runtime.TypeSystem.VTable.InterfaceMap[]_1062>:
 8011f10:	0004 0000 8d40 0800 0001 0000 9610 0800     ....@...........
 8011f20:	1efc 0801                                   ....

08011f24 <System.RuntimeType_1063>:
 8011f24:	0004 0000 9380 0800 0d10 0801               ............

08011f30 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1064>:
 8011f30:	0004 0000 8cf0 0800 0004 0000 0d8d 0800     ................
 8011f40:	08ed 0800 08f9 0800 87fd 0800               ............

08011f4c <System.RuntimeType_1065>:
 8011f4c:	0004 0000 9380 0800 0d90 0801 46c0 46c0     .............F.F
 8011f5c:	46c0 46c0                                   .F.F

08011f60 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1066>:
 8011f60:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 8011f70:	88a1 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

08011f80 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1067>:
 8011f80:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 8011f90:	0000 0000 f4f0 0800 0e70 0801 0000 0000     ........p.......
 8011fa0:	0000 0000 2990 0801 29c0 0801 46c0 46c0     .....)...)...F.F

08011fb0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1068>:
 8011fb0:	0004 0000 8c80 0800 0040 0000 0000 0000     ........@.......
 8011fc0:	0e10 0801 29e4 0801 ab44 abab 29f0 0801     .....)..D....)..
 8011fd0:	8d64 0800                                   d...

08011fd4 <System.RuntimeType_1069>:
 8011fd4:	0004 0000 9380 0800 0e40 0801               ........@...

08011fe0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1070>:
 8011fe0:	0004 0000 8cf0 0800 0016 0000 0d8d 0800     ................
 8011ff0:	08ed 0800 08f9 0800 2871 0800 3983 0800     ........q(...9..
 8012000:	3993 0800 39a9 0800 38f5 0800 202d 0800     .9...9...8..- ..
 8012010:	22b9 0800 271b 0800 2385 0800 2c61 0800     ."...'...#..a,..
 8012020:	2655 0800 85fd 0800 2cf7 0800 2cef 0800     U&.......,...,..
 8012030:	2e81 0800 2d47 0800 2d3d 0800 476f 0800     ....G-..=-..oG..
 8012040:	4773 0800 46c0 46c0 46c0 46c0 46c0 46c0     sG...F.F.F.F.F.F

08012050 <System.String_1071>:
 8012050:	0004 0000 8a60 0800 0018 0000 0018 0000     ....`...........
 8012060:	0044 0065 0066 0061 0075 006c 0074 0054     D.e.f.a.u.l.t.T.
 8012070:	0079 0070 0065 0053 0079 0073 0074 0065     y.p.e.S.y.s.t.e.
 8012080:	006d 004d 0061 006e 0061 0067 0065 0072     m.M.a.n.a.g.e.r.

08012090 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1072>:
 8012090:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 80120a0:	0003 0000 f5a0 0800 e2a0 0800 0000 0000     ................
 80120b0:	0000 0000 a5e0 0800 2a60 0801 46c0 46c0     ........`*...F.F

080120c0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1073>:
 80120c0:	0004 0000 8c80 0800 0000 0000 0000 0000     ................
 80120d0:	0ec0 0801 2a84 0801 ab44 abab 2a90 0801     .....*..D....*..
 80120e0:	8d64 0800                                   d...

080120e4 <System.RuntimeType_1074>:
 80120e4:	0004 0000 9380 0800 0ef0 0801               ............

080120f0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1075>:
 80120f0:	0004 0000 8cf0 0800 000a 0000 0d8d 0800     ................
 8012100:	08ed 0800 08f9 0800 398b 0800 0921 0800     .........9..!...
 8012110:	4265 0800 15b5 0800 1655 0800 094d 0800     eB......U...M...
 8012120:	0549 0800 46c0 46c0 46c0 46c0 46c0 46c0     I....F.F.F.F.F.F

08012130 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1076>:
 8012130:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 8012140:	0003 0000 0f20 0801 e2a0 0800 0000 0000     .... ...........
 8012150:	0000 0000 a5e0 0800 2ad0 0801 46c0 46c0     .........*...F.F

08012160 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1077>:
 8012160:	0004 0000 8c80 0800 0000 0000 0000 0000     ................
 8012170:	0f50 0801 2af4 0801 ab44 abab 2b00 0801     P....*..D....+..
 8012180:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08012190 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1078>:
 8012190:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 80121a0:	0003 0000 0f80 0801 e2a0 0800 0000 0000     ................
 80121b0:	0000 0000 a5e0 0800 2b20 0801 46c0 46c0     ........ +...F.F

080121c0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1079>:
 80121c0:	0004 0000 8c80 0800 0004 0000 0000 0000     ................
 80121d0:	0fa0 0801 2b44 0801 ab44 abab 2b50 0801     ....D+..D...P+..
 80121e0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

080121f0 <System.String_1080>:
 80121f0:	0004 0000 8a60 0800 0005 0000 0005 0000     ....`...........
 8012200:	0052 0061 006e 0067 0065 46c0 46c0 46c0     R.a.n.g.e..F.F.F

08012210 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1081>:
 8012210:	0004 0000 8c80 0800 0010 0000 0000 0000     ................
 8012220:	0fd0 0801 2b6c 0801 ab44 abab 2b80 0801     ....l+..D....+..
 8012230:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08012240 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1082>:
 8012240:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 8012250:	0000 0000 2ba0 0801 e2a0 0800 0000 0000     .....+..........
 8012260:	0000 0000 2be0 0801 2c10 0801 46c0 46c0     .....+...,...F.F

08012270 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1083>:
 8012270:	0004 0000 8c80 0800 000c 0000 0000 0000     ................
 8012280:	1030 0801 2c34 0801 ab44 abab 2c40 0801     0...4,..D...@,..
 8012290:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

080122a0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1084>:
 80122a0:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 80122b0:	0003 0000 1060 0801 e2a0 0800 0000 0000     ....`...........
 80122c0:	0000 0000 a5e0 0800 2c70 0801 46c0 46c0     ........p,...F.F

080122d0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1085>:
 80122d0:	0004 0000 8c80 0800 0000 0000 0000 0000     ................
 80122e0:	1090 0801 2c94 0801 ab44 abab 2ca0 0801     .....,..D....,..
 80122f0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08012300 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1086>:
 8012300:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 8012310:	0003 0000 10c0 0801 e2a0 0800 0000 0000     ................
 8012320:	0000 0000 a5e0 0800 2ce0 0801 46c0 46c0     .........,...F.F

08012330 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1087>:
 8012330:	0004 0000 8c80 0800 0000 0000 0000 0000     ................
 8012340:	10e0 0801 2d04 0801 ab44 abab 2d10 0801     .....-..D....-..
 8012350:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08012360 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1088>:
 8012360:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 8012370:	0000 0000 1190 0801 f5e0 0800 0000 0000     ................
 8012380:	0000 0000 2d30 0801 2d60 0801 46c0 46c0     ....0-..`-...F.F

08012390 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1089>:
 8012390:	0004 0000 8c80 0800 0000 0000 0000 0000     ................
 80123a0:	11b0 0801 2d84 0801 ab44 abab 2d90 0801     .....-..D....-..
 80123b0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

080123c0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1090>:
 80123c0:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 80123d0:	0000 0000 11e0 0801 f5e0 0800 0000 0000     ................
 80123e0:	0000 0000 2dc0 0801 2df0 0801 46c0 46c0     .....-...-...F.F

080123f0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1091>:
 80123f0:	0004 0000 8c80 0800 0000 0000 0000 0000     ................
 8012400:	1200 0801 2e14 0801 ab44 abab 2e20 0801     ........D... ...
 8012410:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08012420 <System.String_1092>:
 8012420:	0004 0000 8a60 0800 0020 0000 0020 0000     ....`... ... ...
 8012430:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 8012440:	0074 002e 0043 006f 0072 0074 0065 0078     t...C.o.r.t.e.x.
 8012450:	004d 0034 004f 006e 004d 0042 0045 0044     M.4.O.n.M.B.E.D.
 8012460:	002e 0044 0072 0069 0076 0065 0072 0073     ..D.r.i.v.e.r.s.

08012470 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1093>:
 8012470:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 8012480:	0000 0000 0b60 0801 0ad0 0801 0000 0000     ....`...........
 8012490:	0000 0000 2e50 0801 2e80 0801 46c0 46c0     ....P........F.F

080124a0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1094>:
 80124a0:	0004 0000 8c80 0800 000c 0000 0000 0000     ................
 80124b0:	1290 0801 2ea4 0801 ab44 abab 2eb0 0801     ........D.......
 80124c0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

080124d0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1095>:
 80124d0:	0004 0000 8c80 0800 0014 0000 0000 0000     ................
 80124e0:	12c0 0801 2ed0 0801 ab44 abab 2ee0 0801     ........D.......
 80124f0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08012500 <System.String_1096>:
 8012500:	0004 0000 8a60 0800 0026 0000 0026 0000     ....`...&...&...
 8012510:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 8012520:	0074 002e 0043 006f 0072 0074 0065 0078     t...C.o.r.t.e.x.
 8012530:	004d 0034 004f 006e 004d 0042 0045 0044     M.4.O.n.M.B.E.D.
 8012540:	002e 0048 0061 0072 0064 0077 0061 0072     ..H.a.r.d.w.a.r.
 8012550:	0065 004d 006f 0064 0065 006c 46c0 46c0     e.M.o.d.e.l..F.F

08012560 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1097>:
 8012560:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 8012570:	0000 0000 12f0 0801 f310 0800 0000 0000     ................
 8012580:	0000 0000 2f00 0801 2f30 0801 46c0 46c0     ...../..0/...F.F

08012590 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1098>:
 8012590:	0004 0000 8c80 0800 0000 0000 0000 0000     ................
 80125a0:	13b0 0801 2f54 0801 ab44 abab 2f60 0801     ....T/..D...`/..
 80125b0:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

080125c0 <System.String_1099>:
 80125c0:	0004 0000 8a60 0800 0018 0000 0018 0000     ....`...........
 80125d0:	0047 0061 0072 0062 0061 0067 0065 0043     G.a.r.b.a.g.e.C.
 80125e0:	006f 006c 006c 0065 0063 0074 0069 006f     o.l.l.e.c.t.i.o.
 80125f0:	006e 004d 0061 006e 0061 0067 0065 0072     n.M.a.n.a.g.e.r.

08012600 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1100>:
 8012600:	0004 0000 8c80 0800 0000 0000 0000 0000     ................
 8012610:	1410 0801 2f80 0801 ab44 abab 2f90 0801     ...../..D..../..
 8012620:	8d64 0800 46c0 46c0 46c0 46c0 46c0 46c0     d....F.F.F.F.F.F

08012630 <System.String_1101>:
 8012630:	0004 0000 8a60 0800 0015 0000 0015 0000     ....`...........
 8012640:	0041 0062 0073 0074 0072 0061 0063 0074     A.b.s.t.r.a.c.t.
 8012650:	004d 0065 0074 0068 006f 0064 0057 0072     M.e.t.h.o.d.W.r.
 8012660:	0061 0070 0070 0065 0072 46c0 46c0 46c0     a.p.p.e.r..F.F.F

08012670 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1102>:
 8012670:	0004 0000 8c80 0800 0000 0000 0000 0000     ................
 8012680:	14a0 0801 2fb8 0801 ab44 abab 2fd0 0801     ...../..D..../..
 8012690:	8d64 0800                                   d...

08012694 <System.RuntimeType_1103>:
 8012694:	0004 0000 9380 0800 1560 0801               ........`...

080126a0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1104>:
 80126a0:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 80126b0:	08ed 0800 08f9 0800                         ........

080126b8 <System.RuntimeType_1105>:
 80126b8:	0004 0000 9380 0800 15c0 0801 46c0 46c0     .............F.F
 80126c8:	46c0 46c0 46c0 46c0                         .F.F.F.F

080126d0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1106>:
 80126d0:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 80126e0:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

080126f0 <System.String_1107>:
 80126f0:	0004 0000 8a60 0800 0018 0000 0018 0000     ....`...........
 8012700:	0053 0063 0061 006c 0061 0072 0054 0079     S.c.a.l.a.r.T.y.
 8012710:	0070 0065 0052 0065 0070 0072 0065 0073     p.e.R.e.p.r.e.s.
 8012720:	0065 006e 0074 0061 0074 0069 006f 006e     e.n.t.a.t.i.o.n.

08012730 <System.RuntimeType_1108>:
 8012730:	0004 0000 9380 0800 1810 0801 46c0 46c0     .............F.F

08012740 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1109>:
 8012740:	0004 0000 8cf0 0800 0009 0000 0d8d 0800     ................
 8012750:	6805 0800 6883 0800 0000 0000 6cc9 0800     .h...h.......l..
 8012760:	6cf9 0800 0000 0000 0000 0000 0000 0000     .l..............

08012770 <System.String_1110>:
 8012770:	0004 0000 8a60 0800 001d 0000 001d 0000     ....`...........
 8012780:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 8012790:	0074 002e 0043 006f 0072 0074 0065 0078     t...C.o.r.t.e.x.
 80127a0:	004d 0034 004f 006e 0043 004d 0053 0049     M.4.O.n.C.M.S.I.
 80127b0:	0053 0043 006f 0072 0065 46c0 46c0 46c0     S.C.o.r.e..F.F.F

080127c0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1111>:
 80127c0:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 80127d0:	0000 0000 0150 0801 3000 0801 0000 0000     ....P....0......
 80127e0:	0000 0000 2850 0801 3060 0801 46c0 46c0     ....P(..`0...F.F

080127f0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1112>:
 80127f0:	0004 0000 8c80 0800 0000 0000 0000 0000     ................
 8012800:	18a0 0801 3084 0801 ab44 abab 3090 0801     .....0..D....0..
 8012810:	8d64 0800                                   d...

08012814 <System.RuntimeType_1113>:
 8012814:	0004 0000 9380 0800 18d0 0801               ............

08012820 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1114>:
 8012820:	0004 0000 8cf0 0800 0007 0000 0d8d 0800     ................
 8012830:	08ed 0800 08f9 0800 3905 0800 0000 0000     .........9......
 8012840:	31b5 0800 31c7 0800 46c0 46c0 46c0 46c0     .1...1...F.F.F.F

08012850 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1115>:
 8012850:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 8012860:	0000 0000 30c0 0801 05e0 0801 0000 0000     .....0..........
 8012870:	0000 0000 e9c0 0800 3100 0801 46c0 46c0     .........1...F.F

08012880 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1116>:
 8012880:	0004 0000 8c80 0800 0009 0000 0000 0000     ................
 8012890:	1900 0801 3124 0801 ab44 abab 3130 0801     ....$1..D...01..
 80128a0:	8d64 0800                                   d...

080128a4 <System.RuntimeType_1117>:
 80128a4:	0004 0000 9380 0800 1930 0801               ........0...

080128b0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1118>:
 80128b0:	0004 0000 8cf0 0800 000b 0000 0d8d 0800     ................
 80128c0:	08ed 0800 08f9 0800 20cd 0800 20d5 0800     ......... ... ..
 80128d0:	2151 0800 5243 0800 2197 0800 219b 0800     Q!..CR...!...!..
 80128e0:	219f 0800 21a7 0800 46c0 46c0 46c0 46c0     .!...!...F.F.F.F

080128f0 <System.String_1119>:
 80128f0:	0004 0000 8a60 0800 000e 0000 000e 0000     ....`...........
 8012900:	0047 0065 006e 0065 0072 0069 0063 0043     G.e.n.e.r.i.c.C.
 8012910:	006f 006e 0074 0065 0078 0074               o.n.t.e.x.t.

0801291c <System.RuntimeType_1120>:
 801291c:	0004 0000 9380 0800 1a70 0801 46c0 46c0     ........p....F.F
 801292c:	46c0 46c0                                   .F.F

08012930 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1121>:
 8012930:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 8012940:	08ed 0800 08f9 0800                         ........

08012948 <System.RuntimeType_1122>:
 8012948:	0004 0000 9380 0800 1bc0 0801 46c0 46c0     .............F.F
 8012958:	46c0 46c0 46c0 46c0                         .F.F.F.F

08012960 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1123>:
 8012960:	0004 0000 8cf0 0800 0007 0000 0d8d 0800     ................
 8012970:	08ed 0800 08f9 0800 0000 0000 0000 0000     ................
	...
 8012988:	46c0 46c0 46c0 46c0                         .F.F.F.F

08012990 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1124>:
 8012990:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 80129a0:	0000 0000 f4f0 0800 3170 0801 0000 0000     ........p1......
 80129b0:	0000 0000 31e0 0801 3210 0801 46c0 46c0     .....1...2...F.F

080129c0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1125>:
 80129c0:	0004 0000 8c80 0800 003c 0000 0000 0000     ........<.......
 80129d0:	1f80 0801 3234 0801 ab44 abab 3240 0801     ....42..D...@2..
 80129e0:	8d64 0800                                   d...

080129e4 <System.RuntimeType_1126>:
 80129e4:	0004 0000 9380 0800 1fb0 0801               ............

080129f0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1127>:
 80129f0:	0004 0000 8cf0 0800 0016 0000 0d8d 0800     ................
 8012a00:	08ed 0800 08f9 0800 2871 0800 3983 0800     ........q(...9..
 8012a10:	3993 0800 39a9 0800 38f5 0800 202d 0800     .9...9...8..- ..
 8012a20:	22b9 0800 271b 0800 2385 0800 2c61 0800     ."...'...#..a,..
 8012a30:	2655 0800 85fd 0800 2cf7 0800 2cef 0800     U&.......,...,..
 8012a40:	2e81 0800 2d47 0800 2d3d 0800 476f 0800     ....G-..=-..oG..
 8012a50:	4773 0800 46c0 46c0 46c0 46c0 46c0 46c0     sG...F.F.F.F.F.F

08012a60 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1128>:
 8012a60:	0004 0000 8c80 0800 0000 0000 0000 0000     ................
 8012a70:	2090 0801 32a4 0801 ab44 abab 32b0 0801     . ...2..D....2..
 8012a80:	8d64 0800                                   d...

08012a84 <System.RuntimeType_1129>:
 8012a84:	0004 0000 9380 0800 20c0 0801               ......... ..

08012a90 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1130>:
 8012a90:	0004 0000 8cf0 0800 000a 0000 0d8d 0800     ................
 8012aa0:	08ed 0800 08f9 0800 398b 0800 0921 0800     .........9..!...
 8012ab0:	4265 0800 15b5 0800 1655 0800 094d 0800     eB......U...M...
 8012ac0:	0549 0800 46c0 46c0 46c0 46c0 46c0 46c0     I....F.F.F.F.F.F

08012ad0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1131>:
 8012ad0:	0004 0000 8c80 0800 0000 0000 0000 0000     ................
 8012ae0:	2130 0801 32e4 0801 ab44 abab 32f0 0801     0!...2..D....2..
 8012af0:	8d64 0800                                   d...

08012af4 <System.RuntimeType_1132>:
 8012af4:	0004 0000 9380 0800 2160 0801               ........`!..

08012b00 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1133>:
 8012b00:	0004 0000 8cf0 0800 0005 0000 0d8d 0800     ................
 8012b10:	08ed 0800 08f9 0800 0000 0000 0000 0000     ................

08012b20 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1134>:
 8012b20:	0004 0000 8c80 0800 0004 0000 0000 0000     ................
 8012b30:	2190 0801 3310 0801 ab44 abab 3320 0801     .!...3..D... 3..
 8012b40:	8d64 0800                                   d...

08012b44 <System.RuntimeType_1135>:
 8012b44:	0004 0000 9380 0800 21c0 0801               .........!..

08012b50 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1136>:
 8012b50:	0004 0000 8cf0 0800 0004 0000 0d8d 0800     ................
 8012b60:	08ed 0800 08f9 0800 0000 0000               ............

08012b6c <System.RuntimeType_1137>:
 8012b6c:	0004 0000 9380 0800 2210 0801 46c0 46c0     ........."...F.F
 8012b7c:	46c0 46c0                                   .F.F

08012b80 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1138>:
 8012b80:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 8012b90:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

08012ba0 <System.String_1139>:
 8012ba0:	0004 0000 8a60 0800 0013 0000 0013 0000     ....`...........
 8012bb0:	004c 0069 006e 0065 0061 0072 004d 0065     L.i.n.e.a.r.M.e.
 8012bc0:	006d 006f 0072 0079 004d 0061 006e 0061     m.o.r.y.M.a.n.a.
 8012bd0:	0067 0065 0072 46c0 46c0 46c0 46c0 46c0     g.e.r..F.F.F.F.F

08012be0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1140>:
 8012be0:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 8012bf0:	0003 0000 1000 0801 e2a0 0800 0000 0000     ................
 8012c00:	0000 0000 a5e0 0800 3340 0801 46c0 46c0     ........@3...F.F

08012c10 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1141>:
 8012c10:	0004 0000 8c80 0800 000c 0000 0000 0000     ................
 8012c20:	2240 0801 3364 0801 ab44 abab 3370 0801     @"..d3..D...p3..
 8012c30:	8d64 0800                                   d...

08012c34 <System.RuntimeType_1142>:
 8012c34:	0004 0000 9380 0800 2270 0801               ........p"..

08012c40 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1143>:
 8012c40:	0004 0000 8cf0 0800 0008 0000 0d8d 0800     ................
 8012c50:	08ed 0800 08f9 0800 44b5 0800 397b 0800     .........D..{9..
 8012c60:	44ff 0800 4513 0800 4529 0800 46c0 46c0     .D...E..)E...F.F

08012c70 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1144>:
 8012c70:	0004 0000 8c80 0800 0000 0000 0000 0000     ................
 8012c80:	22a0 0801 339c 0801 ab44 abab 33b0 0801     ."...3..D....3..
 8012c90:	8d64 0800                                   d...

08012c94 <System.RuntimeType_1145>:
 8012c94:	0004 0000 9380 0800 22d0 0801               ........."..

08012ca0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1146>:
 8012ca0:	0004 0000 8cf0 0800 000a 0000 0d8d 0800     ................
 8012cb0:	08ed 0800 08f9 0800 8407 0800 7e01 0800     .............~..
 8012cc0:	8511 0800 851d 0800 062d 0800 0661 0800     ........-...a...
 8012cd0:	8535 0800 46c0 46c0 46c0 46c0 46c0 46c0     5....F.F.F.F.F.F

08012ce0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1147>:
 8012ce0:	0004 0000 8c80 0800 0000 0000 0000 0000     ................
 8012cf0:	2300 0801 33e4 0801 ab44 abab 33f0 0801     .#...3..D....3..
 8012d00:	8d64 0800                                   d...

08012d04 <System.RuntimeType_1148>:
 8012d04:	0004 0000 9380 0800 2330 0801               ........0#..

08012d10 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1149>:
 8012d10:	0004 0000 8cf0 0800 0004 0000 0d8d 0800     ................
 8012d20:	08ed 0800 08f9 0800 8545 0800 46c0 46c0     ........E....F.F

08012d30 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1150>:
 8012d30:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 8012d40:	0000 0000 1190 0801 0e70 0801 0000 0000     ........p.......
 8012d50:	0000 0000 3410 0801 3440 0801 46c0 46c0     .....4..@4...F.F

08012d60 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1151>:
 8012d60:	0004 0000 8c80 0800 0000 0000 0000 0000     ................
 8012d70:	2360 0801 3464 0801 ab44 abab 3470 0801     `#..d4..D...p4..
 8012d80:	8d64 0800                                   d...

08012d84 <System.RuntimeType_1152>:
 8012d84:	0004 0000 9380 0800 2390 0801               .........#..

08012d90 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1153>:
 8012d90:	0004 0000 8cf0 0800 0006 0000 0d8d 0800     ................
 8012da0:	08ed 0800 08f9 0800 0000 0000 0000 0000     ................
 8012db0:	0000 0000 46c0 46c0 46c0 46c0 46c0 46c0     .....F.F.F.F.F.F

08012dc0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1154>:
 8012dc0:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 8012dd0:	0000 0000 11e0 0801 0e70 0801 0000 0000     ........p.......
 8012de0:	0000 0000 34a0 0801 34d0 0801 46c0 46c0     .....4...4...F.F

08012df0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1155>:
 8012df0:	0004 0000 8c80 0800 0000 0000 0000 0000     ................
 8012e00:	23c0 0801 34f4 0801 ab44 abab 3500 0801     .#...4..D....5..
 8012e10:	8d64 0800                                   d...

08012e14 <System.RuntimeType_1156>:
 8012e14:	0004 0000 9380 0800 23f0 0801               .........#..

08012e20 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1157>:
 8012e20:	0004 0000 8cf0 0800 0008 0000 0d8d 0800     ................
 8012e30:	08ed 0800 08f9 0800 4601 0800 4639 0800     .........F..9F..
 8012e40:	464d 0800 3e05 0800 3e19 0800 46c0 46c0     MF...>...>...F.F

08012e50 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1158>:
 8012e50:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 8012e60:	0000 0000 0b60 0801 3530 0801 0000 0000     ....`...05......
 8012e70:	0000 0000 f2e0 0800 3590 0801 46c0 46c0     .........5...F.F

08012e80 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1159>:
 8012e80:	0004 0000 8c80 0800 000c 0000 0000 0000     ................
 8012e90:	2470 0801 35b4 0801 ab44 abab 35c0 0801     p$...5..D....5..
 8012ea0:	8d64 0800                                   d...

08012ea4 <System.RuntimeType_1160>:
 8012ea4:	0004 0000 9380 0800 24a0 0801               .........$..

08012eb0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1161>:
 8012eb0:	0004 0000 8cf0 0800 0005 0000 0d8d 0800     ................
 8012ec0:	08ed 0800 08f9 0800 872b 0800 8731 0800     ........+...1...

08012ed0 <System.RuntimeType_1162>:
 8012ed0:	0004 0000 9380 0800 24d0 0801 46c0 46c0     .........$...F.F

08012ee0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1163>:
 8012ee0:	0004 0000 8cf0 0800 0003 0000 0d8d 0800     ................
 8012ef0:	08ed 0800 08f9 0800 46c0 46c0 46c0 46c0     .........F.F.F.F

08012f00 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1164>:
 8012f00:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 8012f10:	0003 0000 12f0 0801 e2a0 0800 0000 0000     ................
 8012f20:	0000 0000 a5e0 0800 35e0 0801 46c0 46c0     .........5...F.F

08012f30 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1165>:
 8012f30:	0004 0000 8c80 0800 0000 0000 0000 0000     ................
 8012f40:	2560 0801 3604 0801 ab44 abab 3610 0801     `%...6..D....6..
 8012f50:	8d64 0800                                   d...

08012f54 <System.RuntimeType_1166>:
 8012f54:	0004 0000 9380 0800 2590 0801               .........%..

08012f60 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1167>:
 8012f60:	0004 0000 8cf0 0800 0005 0000 0d8d 0800     ................
 8012f70:	08ed 0800 08f9 0800 0000 0000 7ad9 0800     .............z..

08012f80 <System.RuntimeType_1168>:
 8012f80:	0004 0000 9380 0800 2600 0801 46c0 46c0     .........&...F.F

08012f90 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1169>:
 8012f90:	0004 0000 8cf0 0800 0007 0000 0d8d 0800     ................
 8012fa0:	08ed 0800 08f9 0800 0000 0000 0000 0000     ................
	...

08012fb8 <System.RuntimeType_1170>:
 8012fb8:	0004 0000 9380 0800 2670 0801 46c0 46c0     ........p&...F.F
 8012fc8:	46c0 46c0 46c0 46c0                         .F.F.F.F

08012fd0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1171>:
 8012fd0:	0004 0000 8cf0 0800 0007 0000 0d8d 0800     ................
 8012fe0:	08ed 0800 08f9 0800 0000 0000 0000 0000     ................
	...
 8012ff8:	46c0 46c0 46c0 46c0                         .F.F.F.F

08013000 <System.String_1172>:
 8013000:	0004 0000 8a60 0800 0027 0000 0027 0000     ....`...'...'...
 8013010:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 8013020:	0074 002e 0044 0065 0076 0069 0063 0065     t...D.e.v.i.c.e.
 8013030:	004d 006f 0064 0065 006c 0073 002e 0043     M.o.d.e.l.s...C.
 8013040:	0068 0069 0070 0073 0065 0074 002e 0043     h.i.p.s.e.t...C.
 8013050:	006f 0072 0074 0065 0078 004d 0034 46c0     o.r.t.e.x.M.4..F

08013060 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1173>:
 8013060:	0004 0000 8c80 0800 0000 0000 0000 0000     ................
 8013070:	27c0 0801 3630 0801 ab44 abab 3640 0801     .'..06..D...@6..
 8013080:	8d64 0800                                   d...

08013084 <System.RuntimeType_1174>:
 8013084:	0004 0000 9380 0800 27f0 0801               .........'..

08013090 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1175>:
 8013090:	0004 0000 8cf0 0800 0007 0000 0d8d 0800     ................
 80130a0:	08ed 0800 08f9 0800 3905 0800 0000 0000     .........9......
 80130b0:	31b5 0800 31c7 0800 46c0 46c0 46c0 46c0     .1...1...F.F.F.F

080130c0 <System.String_1176>:
 80130c0:	0004 0000 8a60 0800 0013 0000 0013 0000     ....`...........
 80130d0:	0050 0072 006f 0063 0065 0073 0073 006f     P.r.o.c.e.s.s.o.
 80130e0:	0072 0041 0052 004d 0076 0037 004d 005f     r.A.R.M.v.7.M._.
 80130f0:	0056 0046 0050 46c0 46c0 46c0 46c0 46c0     V.F.P..F.F.F.F.F

08013100 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1177>:
 8013100:	0004 0000 8c80 0800 0000 0000 0000 0000     ................
 8013110:	2850 0801 3668 0801 ab44 abab 3680 0801     P(..h6..D....6..
 8013120:	8d64 0800                                   d...

08013124 <System.RuntimeType_1178>:
 8013124:	0004 0000 9380 0800 2880 0801               .........(..

08013130 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1179>:
 8013130:	0004 0000 8cf0 0800 000b 0000 0d8d 0800     ................
 8013140:	08ed 0800 08f9 0800 20cd 0800 20d5 0800     ......... ... ..
 8013150:	2151 0800 5243 0800 2197 0800 219b 0800     Q!..CR...!...!..
 8013160:	219f 0800 21a7 0800 46c0 46c0 46c0 46c0     .!...!...F.F.F.F

08013170 <System.String_1180>:
 8013170:	0004 0000 8a60 0800 002f 0000 002f 0000     ....`.../.../...
 8013180:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 8013190:	0074 002e 0044 0065 0076 0069 0063 0065     t...D.e.v.i.c.e.
 80131a0:	004d 006f 0064 0065 006c 0073 002e 0043     M.o.d.e.l.s...C.
 80131b0:	0068 0069 0070 0073 0065 0074 002e 0043     h.i.p.s.e.t...C.
 80131c0:	006f 0072 0074 0065 0078 004d 0033 002e     o.r.t.e.x.M.3...
 80131d0:	0052 0075 006e 0074 0069 006d 0065 46c0     R.u.n.t.i.m.e..F

080131e0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1181>:
 80131e0:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 80131f0:	0000 0000 36b0 0801 e2a0 0800 0000 0000     .....6..........
 8013200:	0000 0000 36f0 0801 3720 0801 46c0 46c0     .....6.. 7...F.F

08013210 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1182>:
 8013210:	0004 0000 8c80 0800 003c 0000 0000 0000     ........<.......
 8013220:	2990 0801 3744 0801 ab44 abab 3750 0801     .)..D7..D...P7..
 8013230:	8d64 0800                                   d...

08013234 <System.RuntimeType_1183>:
 8013234:	0004 0000 9380 0800 29c0 0801               .........)..

08013240 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1184>:
 8013240:	0004 0000 8cf0 0800 0016 0000 0d8d 0800     ................
 8013250:	08ed 0800 08f9 0800 2871 0800 3983 0800     ........q(...9..
 8013260:	3993 0800 7e6d 0800 38f5 0800 202d 0800     .9..m~...8..- ..
 8013270:	22b9 0800 271b 0800 2385 0800 2c61 0800     ."...'...#..a,..
 8013280:	2655 0800 85fd 0800 2cf7 0800 2cef 0800     U&.......,...,..
 8013290:	0000 0000 2d47 0800 2d3d 0800 476f 0800     ....G-..=-..oG..
 80132a0:	4773 0800                                   sG..

080132a4 <System.RuntimeType_1185>:
 80132a4:	0004 0000 9380 0800 2a60 0801               ........`*..

080132b0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1186>:
 80132b0:	0004 0000 8cf0 0800 000a 0000 0d8d 0800     ................
 80132c0:	08ed 0800 08f9 0800 398b 0800 0000 0000     .........9......
	...
 80132dc:	094d 0800 0549 0800                         M...I...

080132e4 <System.RuntimeType_1187>:
 80132e4:	0004 0000 9380 0800 2ad0 0801               .........*..

080132f0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1188>:
 80132f0:	0004 0000 8cf0 0800 0005 0000 0d8d 0800     ................
 8013300:	08ed 0800 08f9 0800 0000 0000 0000 0000     ................

08013310 <System.RuntimeType_1189>:
 8013310:	0004 0000 9380 0800 2b20 0801 46c0 46c0     ........ +...F.F

08013320 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1190>:
 8013320:	0004 0000 8cf0 0800 0004 0000 0d8d 0800     ................
 8013330:	08ed 0800 08f9 0800 0000 0000 46c0 46c0     .............F.F

08013340 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1191>:
 8013340:	0004 0000 8c80 0800 000c 0000 0000 0000     ................
 8013350:	2be0 0801 37b4 0801 ab44 abab 37c0 0801     .+...7..D....7..
 8013360:	8d64 0800                                   d...

08013364 <System.RuntimeType_1192>:
 8013364:	0004 0000 9380 0800 2c10 0801               .........,..

08013370 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1193>:
 8013370:	0004 0000 8cf0 0800 0008 0000 0d8d 0800     ................
 8013380:	08ed 0800 08f9 0800 44b5 0800 397b 0800     .........D..{9..
 8013390:	44ff 0800 4513 0800 4529 0800               .D...E..)E..

0801339c <System.RuntimeType_1194>:
 801339c:	0004 0000 9380 0800 2c70 0801 46c0 46c0     ........p,...F.F
 80133ac:	46c0 46c0                                   .F.F

080133b0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1195>:
 80133b0:	0004 0000 8cf0 0800 000a 0000 0d8d 0800     ................
 80133c0:	08ed 0800 08f9 0800 0000 0000 0000 0000     ................
	...

080133e4 <System.RuntimeType_1196>:
 80133e4:	0004 0000 9380 0800 2ce0 0801               .........,..

080133f0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1197>:
 80133f0:	0004 0000 8cf0 0800 0004 0000 0d8d 0800     ................
 8013400:	08ed 0800 08f9 0800 0000 0000 46c0 46c0     .............F.F

08013410 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1198>:
 8013410:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 8013420:	0000 0000 1190 0801 1130 0801 0000 0000     ........0.......
 8013430:	0000 0000 a5e0 0800 37f0 0801 46c0 46c0     .........7...F.F

08013440 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1199>:
 8013440:	0004 0000 8c80 0800 0000 0000 0000 0000     ................
 8013450:	2d30 0801 3814 0801 ab44 abab 3820 0801     0-...8..D... 8..
 8013460:	8d64 0800                                   d...

08013464 <System.RuntimeType_1200>:
 8013464:	0004 0000 9380 0800 2d60 0801               ........`-..

08013470 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1201>:
 8013470:	0004 0000 8cf0 0800 0006 0000 0d8d 0800     ................
 8013480:	08ed 0800 08f9 0800 0000 0000 0000 0000     ................
 8013490:	0000 0000 46c0 46c0 46c0 46c0 46c0 46c0     .....F.F.F.F.F.F

080134a0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1202>:
 80134a0:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 80134b0:	0003 0000 11e0 0801 e2a0 0800 0000 0000     ................
 80134c0:	0000 0000 a5e0 0800 3850 0801 46c0 46c0     ........P8...F.F

080134d0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1203>:
 80134d0:	0004 0000 8c80 0800 0000 0000 0000 0000     ................
 80134e0:	2dc0 0801 3874 0801 ab44 abab 3880 0801     .-..t8..D....8..
 80134f0:	8d64 0800                                   d...

080134f4 <System.RuntimeType_1204>:
 80134f4:	0004 0000 9380 0800 2df0 0801               .........-..

08013500 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1205>:
 8013500:	0004 0000 8cf0 0800 0008 0000 0d8d 0800     ................
 8013510:	08ed 0800 08f9 0800 4601 0800 4639 0800     .........F..9F..
 8013520:	464d 0800 3e05 0800 3e19 0800 46c0 46c0     MF...>...>...F.F

08013530 <System.String_1206>:
 8013530:	0004 0000 8a60 0800 0025 0000 0025 0000     ....`...%...%...
 8013540:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 8013550:	0074 002e 0043 006f 0072 0074 0065 0078     t...C.o.r.t.e.x.
 8013560:	004d 0033 004f 006e 0043 004d 0053 0049     M.3.O.n.C.M.S.I.
 8013570:	0053 0043 006f 0072 0065 002e 0044 0072     S.C.o.r.e...D.r.
 8013580:	0069 0076 0065 0072 0073 46c0 46c0 46c0     i.v.e.r.s..F.F.F

08013590 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1207>:
 8013590:	0004 0000 8c80 0800 000c 0000 0000 0000     ................
 80135a0:	2e50 0801 38ac 0801 ab44 abab 38c0 0801     P....8..D....8..
 80135b0:	8d64 0800                                   d...

080135b4 <System.RuntimeType_1208>:
 80135b4:	0004 0000 9380 0800 2e80 0801               ............

080135c0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1209>:
 80135c0:	0004 0000 8cf0 0800 0005 0000 0d8d 0800     ................
 80135d0:	08ed 0800 08f9 0800 872b 0800 8731 0800     ........+...1...

080135e0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1210>:
 80135e0:	0004 0000 8c80 0800 0000 0000 0000 0000     ................
 80135f0:	2f00 0801 38e0 0801 ab44 abab 38f0 0801     ./...8..D....8..
 8013600:	8d64 0800                                   d...

08013604 <System.RuntimeType_1211>:
 8013604:	0004 0000 9380 0800 2f30 0801               ........0/..

08013610 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1212>:
 8013610:	0004 0000 8cf0 0800 0005 0000 0d8d 0800     ................
 8013620:	08ed 0800 08f9 0800 0000 0000 7ad9 0800     .............z..

08013630 <System.RuntimeType_1213>:
 8013630:	0004 0000 9380 0800 3060 0801 46c0 46c0     ........`0...F.F

08013640 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1214>:
 8013640:	0004 0000 8cf0 0800 0007 0000 0d8d 0800     ................
 8013650:	08ed 0800 08f9 0800 3905 0800 0000 0000     .........9......
 8013660:	31b5 0800 31c7 0800                         .1...1..

08013668 <System.RuntimeType_1215>:
 8013668:	0004 0000 9380 0800 3100 0801 46c0 46c0     .........1...F.F
 8013678:	46c0 46c0 46c0 46c0                         .F.F.F.F

08013680 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1216>:
 8013680:	0004 0000 8cf0 0800 0007 0000 0d8d 0800     ................
 8013690:	08ed 0800 08f9 0800 4f91 0800 0000 0000     .........O......
 80136a0:	31b5 0800 31c7 0800 46c0 46c0 46c0 46c0     .1...1...F.F.F.F

080136b0 <System.String_1217>:
 80136b0:	0004 0000 8a60 0800 0012 0000 0012 0000     ....`...........
 80136c0:	0041 0052 004d 0076 0037 0054 0068 0072     A.R.M.v.7.T.h.r.
 80136d0:	0065 0061 0064 004d 0061 006e 0061 0067     e.a.d.M.a.n.a.g.
 80136e0:	0065 0072 46c0 46c0 46c0 46c0 46c0 46c0     e.r..F.F.F.F.F.F

080136f0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1218>:
 80136f0:	0004 0000 ded0 0800 ab12 abab 0081 0010     ................
 8013700:	0003 0000 f4f0 0800 e2a0 0800 0000 0000     ................
 8013710:	0000 0000 a5e0 0800 3910 0801 46c0 46c0     .........9...F.F

08013720 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1219>:
 8013720:	0004 0000 8c80 0800 0038 0000 0000 0000     ........8.......
 8013730:	31e0 0801 3934 0801 ab44 abab 3940 0801     .1..49..D...@9..
 8013740:	8d64 0800                                   d...

08013744 <System.RuntimeType_1220>:
 8013744:	0004 0000 9380 0800 3210 0801               .........2..

08013750 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1221>:
 8013750:	0004 0000 8cf0 0800 0016 0000 0d8d 0800     ................
 8013760:	08ed 0800 08f9 0800 2871 0800 3983 0800     ........q(...9..
 8013770:	3993 0800 7e6d 0800 38f5 0800 202d 0800     .9..m~...8..- ..
 8013780:	22b9 0800 271b 0800 2385 0800 2c61 0800     ."...'...#..a,..
 8013790:	2655 0800 85fd 0800 2cf7 0800 2cef 0800     U&.......,...,..
 80137a0:	0000 0000 2d47 0800 2d3d 0800 476f 0800     ....G-..=-..oG..
 80137b0:	4773 0800                                   sG..

080137b4 <System.RuntimeType_1222>:
 80137b4:	0004 0000 9380 0800 3340 0801               ........@3..

080137c0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1223>:
 80137c0:	0004 0000 8cf0 0800 0008 0000 0d8d 0800     ................
 80137d0:	08ed 0800 08f9 0800 44bd 0800 4765 0800     .........D..eG..
 80137e0:	44ff 0800 4513 0800 0000 0000 46c0 46c0     .D...E.......F.F

080137f0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1224>:
 80137f0:	0004 0000 8c80 0800 0000 0000 0000 0000     ................
 8013800:	3410 0801 39a4 0801 ab44 abab 39b0 0801     .4...9..D....9..
 8013810:	8d64 0800                                   d...

08013814 <System.RuntimeType_1225>:
 8013814:	0004 0000 9380 0800 3440 0801               ........@4..

08013820 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1226>:
 8013820:	0004 0000 8cf0 0800 0006 0000 0d8d 0800     ................
 8013830:	08ed 0800 08f9 0800 0000 0000 0000 0000     ................
 8013840:	0000 0000 46c0 46c0 46c0 46c0 46c0 46c0     .....F.F.F.F.F.F

08013850 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1227>:
 8013850:	0004 0000 8c80 0800 0000 0000 0000 0000     ................
 8013860:	34a0 0801 39d4 0801 ab44 abab 39e0 0801     .4...9..D....9..
 8013870:	8d64 0800                                   d...

08013874 <System.RuntimeType_1228>:
 8013874:	0004 0000 9380 0800 34d0 0801               .........4..

08013880 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1229>:
 8013880:	0004 0000 8cf0 0800 0008 0000 0d8d 0800     ................
 8013890:	08ed 0800 08f9 0800 3ded 0800 3e01 0800     .........=...>..
 80138a0:	3e03 0800 3e05 0800 3e19 0800               .>...>...>..

080138ac <System.RuntimeType_1230>:
 80138ac:	0004 0000 9380 0800 3590 0801 46c0 46c0     .........5...F.F
 80138bc:	46c0 46c0                                   .F.F

080138c0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1231>:
 80138c0:	0004 0000 8cf0 0800 0005 0000 0d8d 0800     ................
 80138d0:	08ed 0800 08f9 0800 872b 0800 8731 0800     ........+...1...

080138e0 <System.RuntimeType_1232>:
 80138e0:	0004 0000 9380 0800 35e0 0801 46c0 46c0     .........5...F.F

080138f0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1233>:
 80138f0:	0004 0000 8cf0 0800 0004 0000 0d8d 0800     ................
 8013900:	08ed 0800 08f9 0800 0000 0000 46c0 46c0     .............F.F

08013910 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1234>:
 8013910:	0004 0000 8c80 0800 0034 0000 0000 0000     ........4.......
 8013920:	36f0 0801 3a0c 0801 ab44 abab 3a20 0801     .6...:..D... :..
 8013930:	8d64 0800                                   d...

08013934 <System.RuntimeType_1235>:
 8013934:	0004 0000 9380 0800 3720 0801               ........ 7..

08013940 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1236>:
 8013940:	0004 0000 8cf0 0800 0016 0000 0d8d 0800     ................
 8013950:	08ed 0800 08f9 0800 2871 0800 2879 0800     ........q(..y(..
 8013960:	4767 0800 2ad9 0800 38f5 0800 202d 0800     gG...*...8..- ..
 8013970:	22b9 0800 271b 0800 2385 0800 2c61 0800     ."...'...#..a,..
 8013980:	2655 0800 2cdd 0800 2cf7 0800 2cef 0800     U&...,...,...,..
	...
 801399c:	476f 0800 4773 0800                         oG..sG..

080139a4 <System.RuntimeType_1237>:
 80139a4:	0004 0000 9380 0800 37f0 0801               .........7..

080139b0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1238>:
 80139b0:	0004 0000 8cf0 0800 0006 0000 0d8d 0800     ................
 80139c0:	08ed 0800 08f9 0800 0000 0000 0000 0000     ................
 80139d0:	0000 0000                                   ....

080139d4 <System.RuntimeType_1239>:
 80139d4:	0004 0000 9380 0800 3850 0801               ........P8..

080139e0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1240>:
 80139e0:	0004 0000 8cf0 0800 0008 0000 0d8d 0800     ................
 80139f0:	08ed 0800 08f9 0800 3ded 0800 3e01 0800     .........=...>..
 8013a00:	3e03 0800 3e05 0800 3e19 0800               .>...>...>..

08013a0c <System.RuntimeType_1241>:
 8013a0c:	0004 0000 9380 0800 3910 0801 46c0 46c0     .........9...F.F
 8013a1c:	46c0 46c0                                   .F.F

08013a20 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1242>:
 8013a20:	0004 0000 8cf0 0800 0016 0000 0d8d 0800     ................
 8013a30:	08ed 0800 08f9 0800 2871 0800 2879 0800     ........q(..y(..
 8013a40:	28fd 0800 2ad9 0800 2adb 0800 202d 0800     .(...*...*..- ..
 8013a50:	2bd9 0800 271b 0800 2385 0800 2c61 0800     .+...'...#..a,..
 8013a60:	2655 0800 2cdd 0800 2cf7 0800 2cef 0800     U&...,...,...,..
	...

08013a84 <CMSIS_STUB_CLOCK__GetSystemCoreClock>:

extern "C"
{
	/*__STATIC_INLINE*/ uint32_t CMSIS_STUB_CLOCK__GetSystemCoreClock()
	{
		return SystemCoreClock;
 8013a84:	4b01      	ldr	r3, [pc, #4]	; (8013a8c <CMSIS_STUB_CLOCK__GetSystemCoreClock+0x8>)
 8013a86:	681b      	ldr	r3, [r3, #0]
	}
 8013a88:	4618      	mov	r0, r3
 8013a8a:	4770      	bx	lr
 8013a8c:	200016c0 	.word	0x200016c0

08013a90 <HAL_MPU_Disable>:
  * @retval None
  */
__STATIC_INLINE void HAL_MPU_Disable(void)
{
  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8013a90:	4a06      	ldr	r2, [pc, #24]	; (8013aac <HAL_MPU_Disable+0x1c>)
 8013a92:	4b06      	ldr	r3, [pc, #24]	; (8013aac <HAL_MPU_Disable+0x1c>)
 8013a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013a9a:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU */
  MPU->CTRL  &= ~MPU_CTRL_ENABLE_Msk;
 8013a9c:	4a04      	ldr	r2, [pc, #16]	; (8013ab0 <HAL_MPU_Disable+0x20>)
 8013a9e:	4b04      	ldr	r3, [pc, #16]	; (8013ab0 <HAL_MPU_Disable+0x20>)
 8013aa0:	685b      	ldr	r3, [r3, #4]
 8013aa2:	f023 0301 	bic.w	r3, r3, #1
 8013aa6:	6053      	str	r3, [r2, #4]
}
 8013aa8:	4770      	bx	lr
 8013aaa:	bf00      	nop
 8013aac:	e000ed00 	.word	0xe000ed00
 8013ab0:	e000ed90 	.word	0xe000ed90

08013ab4 <CMSIS_STUB_SCB__get_CONTROL>:
    //
    // System Control Block 
    //

    /*__STATIC_INLINE*/ uint32_t CMSIS_STUB_SCB__get_CONTROL()
    {
 8013ab4:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8013ab6:	f3ef 8314 	mrs	r3, CONTROL
 8013aba:	9301      	str	r3, [sp, #4]
  return(result);
 8013abc:	9b01      	ldr	r3, [sp, #4]
        return __get_CONTROL();
 8013abe:	bf00      	nop
    }
 8013ac0:	4618      	mov	r0, r3
 8013ac2:	b002      	add	sp, #8
 8013ac4:	4770      	bx	lr
 8013ac6:	bf00      	nop

08013ac8 <CMSIS_STUB_SCB__get_IPSR>:
        __set_CONTROL(control);
        __ISB(); // always emit a barrier 
    }

    /*__STATIC_INLINE*/ uint32_t CMSIS_STUB_SCB__get_IPSR()
    {
 8013ac8:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013aca:	f3ef 8305 	mrs	r3, IPSR
 8013ace:	9301      	str	r3, [sp, #4]
  return(result);
 8013ad0:	9b01      	ldr	r3, [sp, #4]
        return __get_IPSR();
 8013ad2:	bf00      	nop
    }
 8013ad4:	4618      	mov	r0, r3
 8013ad6:	b002      	add	sp, #8
 8013ad8:	4770      	bx	lr
 8013ada:	bf00      	nop

08013adc <CMSIS_STUB_SCB__set_PSP>:
    {
        return __get_PSP();
    }

    /*__STATIC_INLINE*/ void CMSIS_STUB_SCB__set_PSP(uint32_t topOfProcStack)
    {
 8013adc:	b084      	sub	sp, #16
 8013ade:	9001      	str	r0, [sp, #4]
 8013ae0:	9b01      	ldr	r3, [sp, #4]
 8013ae2:	9303      	str	r3, [sp, #12]

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8013ae4:	9b03      	ldr	r3, [sp, #12]
 8013ae6:	f383 8809 	msr	PSP, r3
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
 8013aea:	f3bf 8f6f 	isb	sy
        __set_PSP(topOfProcStack);
        __ISB(); // always emit a barrier 
    }
 8013aee:	b004      	add	sp, #16
 8013af0:	4770      	bx	lr
 8013af2:	bf00      	nop

08013af4 <CMSIS_STUB_SCB__get_BASEPRI>:
        __disable_fault_irq();
        __ISB();
    }

    /*__STATIC_INLINE*/ uint32_t  CMSIS_STUB_SCB__get_BASEPRI()
    {
 8013af4:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
 8013af6:	f3ef 8312 	mrs	r3, BASEPRI_MAX
 8013afa:	9301      	str	r3, [sp, #4]
  return(result);
 8013afc:	9b01      	ldr	r3, [sp, #4]
        return __get_BASEPRI() >> (8 - __NVIC_PRIO_BITS);
 8013afe:	091b      	lsrs	r3, r3, #4
    }
 8013b00:	4618      	mov	r0, r3
 8013b02:	b002      	add	sp, #8
 8013b04:	4770      	bx	lr
 8013b06:	bf00      	nop

08013b08 <CMSIS_STUB_SCB__set_BASEPRI>:

    /*__STATIC_INLINE*/ uint32_t CMSIS_STUB_SCB__set_BASEPRI(uint32_t basePri)
    {
 8013b08:	b410      	push	{r4}
 8013b0a:	b087      	sub	sp, #28
 8013b0c:	9001      	str	r0, [sp, #4]
 8013b0e:	2301      	movs	r3, #1
 8013b10:	9305      	str	r3, [sp, #20]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013b12:	9b05      	ldr	r3, [sp, #20]
 8013b14:	f383 8810 	msr	PRIMASK, r3
 8013b18:	f3bf 8f6f 	isb	sy
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
 8013b1c:	f3ef 8312 	mrs	r3, BASEPRI_MAX
 8013b20:	9304      	str	r3, [sp, #16]
  return(result);
 8013b22:	9b04      	ldr	r3, [sp, #16]
        __set_PRIMASK(1);
        __ISB();
        register uint32_t prev = __get_BASEPRI() >> (8 - __NVIC_PRIO_BITS);
 8013b24:	091c      	lsrs	r4, r3, #4
        __set_BASEPRI(basePri << (8 - __NVIC_PRIO_BITS));
 8013b26:	9b01      	ldr	r3, [sp, #4]
 8013b28:	011b      	lsls	r3, r3, #4
 8013b2a:	9303      	str	r3, [sp, #12]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8013b2c:	9b03      	ldr	r3, [sp, #12]
 8013b2e:	f383 8811 	msr	BASEPRI, r3
 8013b32:	2300      	movs	r3, #0
 8013b34:	9302      	str	r3, [sp, #8]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013b36:	9b02      	ldr	r3, [sp, #8]
 8013b38:	f383 8810 	msr	PRIMASK, r3
 8013b3c:	f3bf 8f6f 	isb	sy
        __set_PRIMASK(0);
        __ISB();
        return prev;
 8013b40:	4623      	mov	r3, r4
    }
 8013b42:	4618      	mov	r0, r3
 8013b44:	b007      	add	sp, #28
 8013b46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013b4a:	4770      	bx	lr

08013b4c <CUSTOM_STUB_SCB__get_FPCCR>:
#endif /* (__CORTEX_M == 0x04) */


    /*__STATIC_INLINE*/ uint32_t CUSTOM_STUB_SCB__get_FPCCR()
    {
        return *((uint32_t volatile *)0xE000EF34);
 8013b4c:	4b01      	ldr	r3, [pc, #4]	; (8013b54 <CUSTOM_STUB_SCB__get_FPCCR+0x8>)
 8013b4e:	681b      	ldr	r3, [r3, #0]
    }
 8013b50:	4618      	mov	r0, r3
 8013b52:	4770      	bx	lr
 8013b54:	e000ef34 	.word	0xe000ef34

08013b58 <CUSTOM_STUB_SCB__set_FPCCR>:

    /*__STATIC_INLINE*/ void CUSTOM_STUB_SCB__set_FPCCR(uint32_t fpscr)
    {
 8013b58:	b082      	sub	sp, #8
 8013b5a:	9001      	str	r0, [sp, #4]
        *((uint32_t volatile *)0xE000EF34) = fpscr;
 8013b5c:	4a02      	ldr	r2, [pc, #8]	; (8013b68 <CUSTOM_STUB_SCB__set_FPCCR+0x10>)
 8013b5e:	9b01      	ldr	r3, [sp, #4]
 8013b60:	6013      	str	r3, [r2, #0]
    }
 8013b62:	b002      	add	sp, #8
 8013b64:	4770      	bx	lr
 8013b66:	bf00      	nop
 8013b68:	e000ef34 	.word	0xe000ef34

08013b6c <CUSTOM_STUB_SCB_get_CCR>:
    // CCR
    //

	/*__STATIC_INLINE*/ uint32_t CUSTOM_STUB_SCB_get_CCR()
	{
		return *((uint32_t volatile *)0xE000ED14);
 8013b6c:	4b01      	ldr	r3, [pc, #4]	; (8013b74 <CUSTOM_STUB_SCB_get_CCR+0x8>)
 8013b6e:	681b      	ldr	r3, [r3, #0]
	}
 8013b70:	4618      	mov	r0, r3
 8013b72:	4770      	bx	lr
 8013b74:	e000ed14 	.word	0xe000ed14

08013b78 <CUSTOM_STUB_SCB_set_CCR>:

    /*__STATIC_INLINE*/ void CUSTOM_STUB_SCB_set_CCR(uint32_t value)
    {
 8013b78:	b082      	sub	sp, #8
 8013b7a:	9001      	str	r0, [sp, #4]
        *((uint32_t volatile *)0xE000ED14) = value;
 8013b7c:	4a02      	ldr	r2, [pc, #8]	; (8013b88 <CUSTOM_STUB_SCB_set_CCR+0x10>)
 8013b7e:	9b01      	ldr	r3, [sp, #4]
 8013b80:	6013      	str	r3, [r2, #0]
    }
 8013b82:	b002      	add	sp, #8
 8013b84:	4770      	bx	lr
 8013b86:	bf00      	nop
 8013b88:	e000ed14 	.word	0xe000ed14

08013b8c <CUSTOM_STUB_SCB_SHCRS_EnableSystemHandler>:
    //
    // System Handlers
    // 

    /*__STATIC_INLINE*/ void CUSTOM_STUB_SCB_SHCRS_EnableSystemHandler(uint32_t ex)
    {
 8013b8c:	b084      	sub	sp, #16
 8013b8e:	9001      	str	r0, [sp, #4]
        uint32_t SHCRS = *((uint32_t volatile *)0xE000ED24);
 8013b90:	4b05      	ldr	r3, [pc, #20]	; (8013ba8 <CUSTOM_STUB_SCB_SHCRS_EnableSystemHandler+0x1c>)
 8013b92:	681b      	ldr	r3, [r3, #0]
 8013b94:	9303      	str	r3, [sp, #12]

        SHCRS |= ex;
 8013b96:	9a03      	ldr	r2, [sp, #12]
 8013b98:	9b01      	ldr	r3, [sp, #4]
 8013b9a:	4313      	orrs	r3, r2
 8013b9c:	9303      	str	r3, [sp, #12]

        *((uint32_t volatile *)0xE000ED24) = SHCRS;
 8013b9e:	4a02      	ldr	r2, [pc, #8]	; (8013ba8 <CUSTOM_STUB_SCB_SHCRS_EnableSystemHandler+0x1c>)
 8013ba0:	9b03      	ldr	r3, [sp, #12]
 8013ba2:	6013      	str	r3, [r2, #0]

    }
 8013ba4:	b004      	add	sp, #16
 8013ba6:	4770      	bx	lr
 8013ba8:	e000ed24 	.word	0xe000ed24

08013bac <CUSTOM_STUB_SCB_ICSR_RaiseSystemException>:

        *((uint32_t volatile *)0xE000ED24) = SHCRS;
    }

    /*__STATIC_INLINE*/ void CUSTOM_STUB_SCB_ICSR_RaiseSystemException(uint32_t ex)
    {
 8013bac:	b084      	sub	sp, #16
 8013bae:	9001      	str	r0, [sp, #4]
        //
        // Set/Clears system handlers in ICSR register of SCB. 
        // CMSIS does not allow using NVIC api to set/clear System Handlers. 
        //
        uint32_t ICSR = *((uint32_t volatile *)0xE000ED04);
 8013bb0:	4b05      	ldr	r3, [pc, #20]	; (8013bc8 <CUSTOM_STUB_SCB_ICSR_RaiseSystemException+0x1c>)
 8013bb2:	681b      	ldr	r3, [r3, #0]
 8013bb4:	9303      	str	r3, [sp, #12]

        ICSR |= ex;
 8013bb6:	9a03      	ldr	r2, [sp, #12]
 8013bb8:	9b01      	ldr	r3, [sp, #4]
 8013bba:	4313      	orrs	r3, r2
 8013bbc:	9303      	str	r3, [sp, #12]

        *((uint32_t volatile *)0xE000ED04) = ICSR;
 8013bbe:	4a02      	ldr	r2, [pc, #8]	; (8013bc8 <CUSTOM_STUB_SCB_ICSR_RaiseSystemException+0x1c>)
 8013bc0:	9b03      	ldr	r3, [sp, #12]
 8013bc2:	6013      	str	r3, [r2, #0]
    }
 8013bc4:	b004      	add	sp, #16
 8013bc6:	4770      	bx	lr
 8013bc8:	e000ed04 	.word	0xe000ed04

08013bcc <CUSTOM_STUB_SCB_SCR_SetSystemControlRegister>:
    {
        return __get_IPSR() & 0x000000FF;
    }

    /*__STATIC_INLINE*/ void CUSTOM_STUB_SCB_SCR_SetSystemControlRegister(uint32_t scr)
    {
 8013bcc:	b082      	sub	sp, #8
 8013bce:	9001      	str	r0, [sp, #4]
        *((uint32_t volatile *)0xE000ED10) = scr;
 8013bd0:	4a02      	ldr	r2, [pc, #8]	; (8013bdc <CUSTOM_STUB_SCB_SCR_SetSystemControlRegister+0x10>)
 8013bd2:	9b01      	ldr	r3, [sp, #4]
 8013bd4:	6013      	str	r3, [r2, #0]
    }
 8013bd6:	b002      	add	sp, #8
 8013bd8:	4770      	bx	lr
 8013bda:	bf00      	nop
 8013bdc:	e000ed10 	.word	0xe000ed10

08013be0 <CMSIS_STUB_POWER_WaitForEvent>:
    Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
 8013be0:	bf20      	wfe
    }

    /*__STATIC_INLINE*/ void CMSIS_STUB_POWER_WaitForEvent()
    {
        __WFE();
    }
 8013be2:	4770      	bx	lr
 8013be4:	0000      	movs	r0, r0
	...

08013be8 <CUSTOM_STUB_RaiseSupervisorCallForLongJump>:
        __WFI();
    }
    
    /*__STATIC_INLINE*/ __attribute__((naked)) __attribute__((aligned(8))) void CUSTOM_STUB_RaiseSupervisorCallForLongJump()
    {
        __ASM volatile ("svc #17");
 8013be8:	df11      	svc	17
 8013bea:	bf00      	nop
 8013bec:	0000      	movs	r0, r0
	...

08013bf0 <CUSTOM_STUB_RaiseSupervisorCallForStartThreads>:
    }

    /*__STATIC_INLINE*/ __attribute__((naked)) __attribute__((aligned(8))) void CUSTOM_STUB_RaiseSupervisorCallForStartThreads()
    {
        __ASM volatile ("svc #18");
 8013bf0:	df12      	svc	18
 8013bf2:	bf00      	nop
 8013bf4:	0000      	movs	r0, r0
	...

08013bf8 <CUSTOM_STUB_RaiseSupervisorCallForRetireThread>:
    }

    /*__STATIC_INLINE*/ __attribute__((naked)) __attribute__((aligned(8))) void CUSTOM_STUB_RaiseSupervisorCallForRetireThread()
    {
        __ASM volatile ("svc #19");
 8013bf8:	df13      	svc	19
 8013bfa:	bf00      	nop

08013bfc <PendSV_Handler>:
    // point context is active 
    //

    __attribute__((naked)) void PendSV_Handler(void)
    {
        __ASM volatile ("MRS      R0, PSP");                 // Save current process stack pointer value into R0
 8013bfc:	f3ef 8009 	mrs	r0, PSP

#if __FPU_USED != 0
        __ASM volatile ("ANDS     R1, LR, #0x10");           // When bit 4 in LR is zero (0), we need to stack FP registers as well 
 8013c00:	f01e 0110 	ands.w	r1, lr, #16
        __ASM volatile ("CMP      R1, #0");                  // R1 is the second parameter of PendSV_Handler_Zelig_VFP_FullFPContext
 8013c04:	2900      	cmp	r1, #0
        __ASM volatile ("IT       EQ");
 8013c06:	bf08      	it	eq
        __ASM volatile ("VSTMDBEQ R0!, {S16-S31}");
 8013c08:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
#endif

        __ASM volatile ("MOV      R2, LR");                  // Save LR and CONTROL, to save the status and privilege/stack mode
 8013c0c:	4672      	mov	r2, lr
        __ASM volatile ("MRS      R3, CONTROL");
 8013c0e:	f3ef 8314 	mrs	r3, CONTROL

        __ASM volatile ("STMDB    R0!, {R2-R11}");           // Stack the SW stack frame, a total of 10 registers, including R2/3
 8013c12:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}

#if __FPU_USED != 0
        PendSV_Handler_Zelig_VFP();
 8013c16:	f7ec fcc7 	bl	80005a8 <PendSV_Handler_Zelig_VFP>
#else
        PendSV_Handler_Zelig();                              // Perform context switch, practically setting the stack pointer for the next task
#endif

        __ASM volatile ("LDMIA    R0!, {R2-R11}");           // Unstack the next tasks state
 8013c1a:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}

        __ASM volatile ("MOV      LR, R2");                  // Restore LR and CONTROL, to restore the status and privilege/stack mode
 8013c1e:	4696      	mov	lr, r2
        __ASM volatile ("MSR      CONTROL, R3");
 8013c20:	f383 8814 	msr	CONTROL, r3
        __ASM volatile ("ISB");                              // architectural recommendation, always use ISB after updating control register
 8013c24:	f3bf 8f6f 	isb	sy

#if __FPU_USED != 0
        __ASM volatile ("ANDS     R1, LR, #0x10");               // When bit 4 in LR is zero (0), we need to stack FP registers as well 
 8013c28:	f01e 0110 	ands.w	r1, lr, #16
        __ASM volatile ("CMP      R1, #0");
 8013c2c:	2900      	cmp	r1, #0
        __ASM volatile ("IT       EQ");
 8013c2e:	bf08      	it	eq
        __ASM volatile ("VLDMIAEQ R0!, {S16-S31}");
 8013c30:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
#endif

        __ASM volatile ("MSR      PSP, R0");                 // update stack pointer to correct location after unstacking 
 8013c34:	f380 8809 	msr	PSP, r0

        __ASM volatile ("BX       LR");
 8013c38:	4770      	bx	lr
 8013c3a:	bf00      	nop

08013c3c <CUSTOM_STUB_SetExcReturn>:
    // Initialized to crash, as the Thread Manager needs to set it right
    //
    uint32_t svc_exc_return = 0xDEADBEEF; 

    void CUSTOM_STUB_SetExcReturn(uint32_t ret)
    {
 8013c3c:	b082      	sub	sp, #8
 8013c3e:	9001      	str	r0, [sp, #4]
        svc_exc_return = ret; 
 8013c40:	4a02      	ldr	r2, [pc, #8]	; (8013c4c <CUSTOM_STUB_SetExcReturn+0x10>)
 8013c42:	9b01      	ldr	r3, [sp, #4]
 8013c44:	6013      	str	r3, [r2, #0]
    }
 8013c46:	b002      	add	sp, #8
 8013c48:	4770      	bx	lr
 8013c4a:	bf00      	nop
 8013c4c:	200016bc 	.word	0x200016bc

08013c50 <SVC_Handler>:

    __attribute__((naked)) void SVC_Handler(void)
    {    
        __ASM volatile ("TST    LR, #0x4");                 // Test bit 3 to use decide which stack pointer we are coming from 
 8013c50:	f01e 0f04 	tst.w	lr, #4
        __ASM volatile ("ITE    EQ");        
 8013c54:	bf0c      	ite	eq
        __ASM volatile ("MRSEQ  R0, msp");
 8013c56:	f3ef 8008 	mrseq	r0, MSP
        __ASM volatile ("MRSNE  R0, psp");
 8013c5a:	f3ef 8009 	mrsne	r0, PSP

        __ASM volatile ("MOV    R1, %0" : /*output*/ : "r"(&svc_exc_return) );
 8013c5e:	4b05      	ldr	r3, [pc, #20]	; (8013c74 <SVC_Handler+0x24>)
 8013c60:	4619      	mov	r1, r3
        __ASM volatile ("STR    LR, [R1]");
 8013c62:	f8c1 e000 	str.w	lr, [r1]

#if __FPU_USED != 0
        SVC_Handler_Zelig_VFP_NoFPContext();
 8013c66:	f7ec fc76 	bl	8000556 <SVC_Handler_Zelig_VFP_NoFPContext>
#else
        SVC_Handler_Zelig();
#endif

        __ASM volatile ("MOV    R1, %0" : /*output*/ : "r"(&svc_exc_return));
 8013c6a:	4b02      	ldr	r3, [pc, #8]	; (8013c74 <SVC_Handler+0x24>)
 8013c6c:	4619      	mov	r1, r3
        __ASM volatile ("LDR    LR, [R1]");
 8013c6e:	f8d1 e000 	ldr.w	lr, [r1]

        __ASM volatile ("BX     LR");
 8013c72:	4770      	bx	lr
 8013c74:	200016bc 	.word	0x200016bc

08013c78 <CUSTOM_STUB_DISCO_F746NG_DisableMPU>:
    }
	
	void CUSTOM_STUB_DISCO_F746NG_DisableMPU()
    {
 8013c78:	b508      	push	{r3, lr}
#if TARGET_DISCO_F746NG
		HAL_MPU_Disable();
 8013c7a:	f7ff ff09 	bl	8013a90 <HAL_MPU_Disable>
#endif
	}
 8013c7e:	bd08      	pop	{r3, pc}

08013c80 <Break>:
        __builtin_trap();
    }

    void Break()
    {
        asm("bkpt");
 8013c80:	be00      	bkpt	0x0000
    }
 8013c82:	4770      	bx	lr

08013c84 <Breakpoint>:

    // placing this outside the BreakPoint() function to avoid compiler unused var warning
    volatile uint32_t valueToWatch;
    void Breakpoint(unsigned n)
    {
 8013c84:	b500      	push	{lr}
 8013c86:	b083      	sub	sp, #12
 8013c88:	9001      	str	r0, [sp, #4]
        valueToWatch = n;
 8013c8a:	4a04      	ldr	r2, [pc, #16]	; (8013c9c <Breakpoint+0x18>)
 8013c8c:	9b01      	ldr	r3, [sp, #4]
 8013c8e:	6013      	str	r3, [r2, #0]

        Break();
 8013c90:	f7ff fff6 	bl	8013c80 <Break>
    }
 8013c94:	b003      	add	sp, #12
 8013c96:	f85d fb04 	ldr.w	pc, [sp], #4
 8013c9a:	bf00      	nop
 8013c9c:	200017dc 	.word	0x200017dc

08013ca0 <Nop>:

    void Nop()
    {
        asm("nop");
 8013ca0:	bf00      	nop
    }
 8013ca2:	4770      	bx	lr

08013ca4 <ConvertToCharString>:
    //

#define MAXLOGSTRINGSIZE 256

    void ConvertToCharString(char* output, const uint16_t* input, const uint32_t length)
    {
 8013ca4:	b086      	sub	sp, #24
 8013ca6:	9003      	str	r0, [sp, #12]
 8013ca8:	9102      	str	r1, [sp, #8]
 8013caa:	9201      	str	r2, [sp, #4]
        for (unsigned i = 0; i < length; i++)
 8013cac:	2300      	movs	r3, #0
 8013cae:	9305      	str	r3, [sp, #20]
 8013cb0:	e016      	b.n	8013ce0 <ConvertToCharString+0x3c>
        {
            uint16_t ch = input[i];
 8013cb2:	9b05      	ldr	r3, [sp, #20]
 8013cb4:	005b      	lsls	r3, r3, #1
 8013cb6:	9a02      	ldr	r2, [sp, #8]
 8013cb8:	4413      	add	r3, r2
 8013cba:	881b      	ldrh	r3, [r3, #0]
 8013cbc:	f8ad 3012 	strh.w	r3, [sp, #18]
            output[i] = (ch > 0xFF) ? '?' : (char)ch;
 8013cc0:	9a03      	ldr	r2, [sp, #12]
 8013cc2:	9b05      	ldr	r3, [sp, #20]
 8013cc4:	4413      	add	r3, r2
 8013cc6:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8013cca:	2aff      	cmp	r2, #255	; 0xff
 8013ccc:	d803      	bhi.n	8013cd6 <ConvertToCharString+0x32>
 8013cce:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8013cd2:	b2d2      	uxtb	r2, r2
 8013cd4:	e000      	b.n	8013cd8 <ConvertToCharString+0x34>
 8013cd6:	223f      	movs	r2, #63	; 0x3f
 8013cd8:	701a      	strb	r2, [r3, #0]

#define MAXLOGSTRINGSIZE 256

    void ConvertToCharString(char* output, const uint16_t* input, const uint32_t length)
    {
        for (unsigned i = 0; i < length; i++)
 8013cda:	9b05      	ldr	r3, [sp, #20]
 8013cdc:	3301      	adds	r3, #1
 8013cde:	9305      	str	r3, [sp, #20]
 8013ce0:	9a05      	ldr	r2, [sp, #20]
 8013ce2:	9b01      	ldr	r3, [sp, #4]
 8013ce4:	429a      	cmp	r2, r3
 8013ce6:	d3e4      	bcc.n	8013cb2 <ConvertToCharString+0xe>
        {
            uint16_t ch = input[i];
            output[i] = (ch > 0xFF) ? '?' : (char)ch;
        }
    }
 8013ce8:	b006      	add	sp, #24
 8013cea:	4770      	bx	lr

08013cec <DebugLogPrint>:

    void DebugLogPrint(char* message)
    {
 8013cec:	b082      	sub	sp, #8
 8013cee:	9001      	str	r0, [sp, #4]
            printf "DebugLog: %s\n", message
            cont
            end

        */
    }
 8013cf0:	b002      	add	sp, #8
 8013cf2:	4770      	bx	lr

08013cf4 <DebugLog0>:

    void DebugLog0(uint16_t* message, uint32_t length)
    {
 8013cf4:	b500      	push	{lr}
 8013cf6:	b0c3      	sub	sp, #268	; 0x10c
 8013cf8:	ab01      	add	r3, sp, #4
 8013cfa:	6018      	str	r0, [r3, #0]
 8013cfc:	466b      	mov	r3, sp
 8013cfe:	6019      	str	r1, [r3, #0]
        char buffer[MAXLOGSTRINGSIZE];
        if (length < MAXLOGSTRINGSIZE)
 8013d00:	466b      	mov	r3, sp
 8013d02:	681b      	ldr	r3, [r3, #0]
 8013d04:	2bff      	cmp	r3, #255	; 0xff
 8013d06:	d812      	bhi.n	8013d2e <DebugLog0+0x3a>
        {
            ConvertToCharString(buffer, message, length);
 8013d08:	a902      	add	r1, sp, #8
 8013d0a:	aa01      	add	r2, sp, #4
 8013d0c:	466b      	mov	r3, sp
 8013d0e:	4608      	mov	r0, r1
 8013d10:	6811      	ldr	r1, [r2, #0]
 8013d12:	681a      	ldr	r2, [r3, #0]
 8013d14:	f7ff ffc6 	bl	8013ca4 <ConvertToCharString>
            buffer[length] = '\0';
 8013d18:	aa02      	add	r2, sp, #8
 8013d1a:	466b      	mov	r3, sp
 8013d1c:	681b      	ldr	r3, [r3, #0]
 8013d1e:	4413      	add	r3, r2
 8013d20:	2200      	movs	r2, #0
 8013d22:	701a      	strb	r2, [r3, #0]

            DebugLogPrint(buffer);
 8013d24:	ab02      	add	r3, sp, #8
 8013d26:	4618      	mov	r0, r3
 8013d28:	f7ff ffe0 	bl	8013cec <DebugLogPrint>
 8013d2c:	e002      	b.n	8013d34 <DebugLog0+0x40>
        }
        else
        {
            DebugLogPrint((char*)"ERROR: MAXLOGSTRINGSIZE exceeded");
 8013d2e:	4803      	ldr	r0, [pc, #12]	; (8013d3c <DebugLog0+0x48>)
 8013d30:	f7ff ffdc 	bl	8013cec <DebugLogPrint>
        }
    }
 8013d34:	b043      	add	sp, #268	; 0x10c
 8013d36:	f85d fb04 	ldr.w	pc, [sp], #4
 8013d3a:	bf00      	nop
 8013d3c:	0801cd74 	.word	0x0801cd74

08013d40 <DebugLog1>:

    void DebugLog1(uint16_t* message, uint32_t length, int32_t p1)
    {
 8013d40:	b500      	push	{lr}
 8013d42:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 8013d46:	ab03      	add	r3, sp, #12
 8013d48:	6018      	str	r0, [r3, #0]
 8013d4a:	ab02      	add	r3, sp, #8
 8013d4c:	6019      	str	r1, [r3, #0]
 8013d4e:	ab01      	add	r3, sp, #4
 8013d50:	601a      	str	r2, [r3, #0]
        char buffer[MAXLOGSTRINGSIZE];
        if (length < MAXLOGSTRINGSIZE)
 8013d52:	ab02      	add	r3, sp, #8
 8013d54:	681b      	ldr	r3, [r3, #0]
 8013d56:	2bff      	cmp	r3, #255	; 0xff
 8013d58:	d81b      	bhi.n	8013d92 <DebugLog1+0x52>
        {
            ConvertToCharString(buffer, message, length);
 8013d5a:	a904      	add	r1, sp, #16
 8013d5c:	aa03      	add	r2, sp, #12
 8013d5e:	ab02      	add	r3, sp, #8
 8013d60:	4608      	mov	r0, r1
 8013d62:	6811      	ldr	r1, [r2, #0]
 8013d64:	681a      	ldr	r2, [r3, #0]
 8013d66:	f7ff ff9d 	bl	8013ca4 <ConvertToCharString>
            buffer[length] = '\0';
 8013d6a:	aa04      	add	r2, sp, #16
 8013d6c:	ab02      	add	r3, sp, #8
 8013d6e:	681b      	ldr	r3, [r3, #0]
 8013d70:	4413      	add	r3, r2
 8013d72:	2200      	movs	r2, #0
 8013d74:	701a      	strb	r2, [r3, #0]
            {
                char buffer2[MAXLOGSTRINGSIZE];
                snprintf(buffer2, MAXLOGSTRINGSIZE, buffer, p1);
 8013d76:	a944      	add	r1, sp, #272	; 0x110
 8013d78:	aa04      	add	r2, sp, #16
 8013d7a:	ab01      	add	r3, sp, #4
 8013d7c:	4608      	mov	r0, r1
 8013d7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013d82:	681b      	ldr	r3, [r3, #0]
 8013d84:	f004 f812 	bl	8017dac <sniprintf>
                DebugLogPrint(buffer2);
 8013d88:	ab44      	add	r3, sp, #272	; 0x110
 8013d8a:	4618      	mov	r0, r3
 8013d8c:	f7ff ffae 	bl	8013cec <DebugLogPrint>
 8013d90:	e002      	b.n	8013d98 <DebugLog1+0x58>
            }
        }
        else
        {
            DebugLogPrint((char*)"ERROR: MAXLOGSTRINGSIZE exceeded");
 8013d92:	4803      	ldr	r0, [pc, #12]	; (8013da0 <DebugLog1+0x60>)
 8013d94:	f7ff ffaa 	bl	8013cec <DebugLogPrint>
        }
    }
 8013d98:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
 8013d9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8013da0:	0801cd74 	.word	0x0801cd74

08013da4 <CUSTOM_STUB_DebuggerConnected>:
    // Faults and Diagnostic
    //

    uint32_t CUSTOM_STUB_DebuggerConnected()
    {
        return (CoreDebug->DHCSR & 0x00000001); 
 8013da4:	4b02      	ldr	r3, [pc, #8]	; (8013db0 <CUSTOM_STUB_DebuggerConnected+0xc>)
 8013da6:	681b      	ldr	r3, [r3, #0]
 8013da8:	f003 0301 	and.w	r3, r3, #1
    }
 8013dac:	4618      	mov	r0, r3
 8013dae:	4770      	bx	lr
 8013db0:	e000edf0 	.word	0xe000edf0

08013db4 <CUSTOM_STUB_SCB__get_CFSR>:
        return 0;
    }

    uint32_t CUSTOM_STUB_SCB__get_CFSR()
    {
        return *((uint32_t volatile *)0xE000ED28);
 8013db4:	4b01      	ldr	r3, [pc, #4]	; (8013dbc <CUSTOM_STUB_SCB__get_CFSR+0x8>)
 8013db6:	681b      	ldr	r3, [r3, #0]
    }
 8013db8:	4618      	mov	r0, r3
 8013dba:	4770      	bx	lr
 8013dbc:	e000ed28 	.word	0xe000ed28

08013dc0 <CUSTOM_STUB_SCB__get_HFSR>:

    uint32_t CUSTOM_STUB_SCB__get_HFSR()
    {
        return *((uint32_t volatile *)0xE000ED2C);
 8013dc0:	4b01      	ldr	r3, [pc, #4]	; (8013dc8 <CUSTOM_STUB_SCB__get_HFSR+0x8>)
 8013dc2:	681b      	ldr	r3, [r3, #0]
    }
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	4770      	bx	lr
 8013dc8:	e000ed2c 	.word	0xe000ed2c

08013dcc <CUSTOM_STUB_SCB__get_MMFAR>:

    uint32_t CUSTOM_STUB_SCB__get_MMFAR()
    {
        return *((uint32_t volatile *)0xE000ED34);
 8013dcc:	4b01      	ldr	r3, [pc, #4]	; (8013dd4 <CUSTOM_STUB_SCB__get_MMFAR+0x8>)
 8013dce:	681b      	ldr	r3, [r3, #0]
    }
 8013dd0:	4618      	mov	r0, r3
 8013dd2:	4770      	bx	lr
 8013dd4:	e000ed34 	.word	0xe000ed34

08013dd8 <CUSTOM_STUB_SCB__get_BFAR>:

    uint32_t CUSTOM_STUB_SCB__get_BFAR()
    {
        return *((uint32_t volatile *)0xE000ED38);
 8013dd8:	4b01      	ldr	r3, [pc, #4]	; (8013de0 <CUSTOM_STUB_SCB__get_BFAR+0x8>)
 8013dda:	681b      	ldr	r3, [r3, #0]
    }
 8013ddc:	4618      	mov	r0, r3
 8013dde:	4770      	bx	lr
 8013de0:	e000ed38 	.word	0xe000ed38

08013de4 <MemManage_Handler>:
    
    //--//

    __attribute__((naked)) void MemManage_Handler(void)
    {
        __ASM volatile ("TST    LR, #0x4");                 // Test bit 3 to use decide which stack pointer we are coming from 
 8013de4:	f01e 0f04 	tst.w	lr, #4
        __ASM volatile ("ITE    EQ");
 8013de8:	bf0c      	ite	eq
        __ASM volatile ("MRSEQ  R0, msp");
 8013dea:	f3ef 8008 	mrseq	r0, MSP
        __ASM volatile ("MRSNE  R0, psp");
 8013dee:	f3ef 8009 	mrsne	r0, PSP

        MemManage_Handler_Zelig();
 8013df2:	f7ec fa83 	bl	80002fc <MemManage_Handler_Zelig>

        __ASM volatile ("BX     LR");
 8013df6:	4770      	bx	lr

08013df8 <BusFault_Handler>:
    }

    __attribute__((naked)) void BusFault_Handler(void)
    {
        __ASM volatile ("TST    LR, #0x4");                 // Test bit 3 to use decide which stack pointer we are coming from 
 8013df8:	f01e 0f04 	tst.w	lr, #4
        __ASM volatile ("ITE    EQ");
 8013dfc:	bf0c      	ite	eq
        __ASM volatile ("MRSEQ  R0, msp");
 8013dfe:	f3ef 8008 	mrseq	r0, MSP
        __ASM volatile ("MRSNE  R0, psp");
 8013e02:	f3ef 8009 	mrsne	r0, PSP

        BusFault_Handler_Zelig(); 
 8013e06:	f7ec fad5 	bl	80003b4 <BusFault_Handler_Zelig>

        __ASM volatile ("BX     LR");
 8013e0a:	4770      	bx	lr

08013e0c <UsageFault_Handler>:
    }

    __attribute__((naked)) void UsageFault_Handler(void)
    {
        __ASM volatile ("TST    LR, #0x4");                 // Test bit 3 to use decide which stack pointer we are coming from 
 8013e0c:	f01e 0f04 	tst.w	lr, #4
        __ASM volatile ("ITE    EQ");
 8013e10:	bf0c      	ite	eq
        __ASM volatile ("MRSEQ  R0, msp");
 8013e12:	f3ef 8008 	mrseq	r0, MSP
        __ASM volatile ("MRSNE  R0, psp");
 8013e16:	f3ef 8009 	mrsne	r0, PSP

        UsageFault_Handler_Zelig();
 8013e1a:	f7ec faa9 	bl	8000370 <UsageFault_Handler_Zelig>

        __ASM volatile ("BX     LR");
 8013e1e:	4770      	bx	lr

08013e20 <gpio_write>:
    __IO uint32_t *reg_in;
    __IO uint32_t *reg_set_clr;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
 8013e20:	b500      	push	{lr}
 8013e22:	b083      	sub	sp, #12
 8013e24:	9001      	str	r0, [sp, #4]
 8013e26:	9100      	str	r1, [sp, #0]
    MBED_ASSERT(obj->pin != (PinName)NC);
 8013e28:	9b01      	ldr	r3, [sp, #4]
 8013e2a:	881b      	ldrh	r3, [r3, #0]
 8013e2c:	b21b      	sxth	r3, r3
 8013e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e32:	d104      	bne.n	8013e3e <gpio_write+0x1e>
 8013e34:	480b      	ldr	r0, [pc, #44]	; (8013e64 <gpio_write+0x44>)
 8013e36:	490c      	ldr	r1, [pc, #48]	; (8013e68 <gpio_write+0x48>)
 8013e38:	2234      	movs	r2, #52	; 0x34
 8013e3a:	f002 fa89 	bl	8016350 <mbed_assert_internal>
    if (value) {
 8013e3e:	9b00      	ldr	r3, [sp, #0]
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d005      	beq.n	8013e50 <gpio_write+0x30>
        *obj->reg_set_clr = obj->mask;
 8013e44:	9b01      	ldr	r3, [sp, #4]
 8013e46:	68db      	ldr	r3, [r3, #12]
 8013e48:	9a01      	ldr	r2, [sp, #4]
 8013e4a:	6852      	ldr	r2, [r2, #4]
 8013e4c:	601a      	str	r2, [r3, #0]
 8013e4e:	e005      	b.n	8013e5c <gpio_write+0x3c>
    } else {
        *obj->reg_set_clr = obj->mask << 16;
 8013e50:	9b01      	ldr	r3, [sp, #4]
 8013e52:	68db      	ldr	r3, [r3, #12]
 8013e54:	9a01      	ldr	r2, [sp, #4]
 8013e56:	6852      	ldr	r2, [r2, #4]
 8013e58:	0412      	lsls	r2, r2, #16
 8013e5a:	601a      	str	r2, [r3, #0]
    }
}
 8013e5c:	b003      	add	sp, #12
 8013e5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8013e62:	bf00      	nop
 8013e64:	0801cd98 	.word	0x0801cd98
 8013e68:	0801cdb0 	.word	0x0801cdb0

08013e6c <tmp_gpio_write>:

extern "C"
{

	void tmp_gpio_write(gpio_t *obj, int32_t value)
	{
 8013e6c:	b500      	push	{lr}
 8013e6e:	b083      	sub	sp, #12
 8013e70:	9001      	str	r0, [sp, #4]
 8013e72:	9100      	str	r1, [sp, #0]
		gpio_write(obj, value);
 8013e74:	9801      	ldr	r0, [sp, #4]
 8013e76:	9900      	ldr	r1, [sp, #0]
 8013e78:	f7ff ffd2 	bl	8013e20 <gpio_write>
	}
 8013e7c:	b003      	add	sp, #12
 8013e7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8013e82:	bf00      	nop

08013e84 <tmp_gpio_alloc_init>:
	{
		return gpio_read(obj);
	}

	void tmp_gpio_alloc_init(gpio_t **obj, int32_t pinNumber)
	{
 8013e84:	b500      	push	{lr}
 8013e86:	b083      	sub	sp, #12
 8013e88:	9001      	str	r0, [sp, #4]
 8013e8a:	9100      	str	r1, [sp, #0]
		*obj = (gpio_t*)calloc(sizeof(gpio_t), 1);
 8013e8c:	2010      	movs	r0, #16
 8013e8e:	2101      	movs	r1, #1
 8013e90:	f002 fcce 	bl	8016830 <calloc>
 8013e94:	4603      	mov	r3, r0
 8013e96:	461a      	mov	r2, r3
 8013e98:	9b01      	ldr	r3, [sp, #4]
 8013e9a:	601a      	str	r2, [r3, #0]
		gpio_init_in(*obj, (PinName)pinNumber);
 8013e9c:	9b01      	ldr	r3, [sp, #4]
 8013e9e:	681a      	ldr	r2, [r3, #0]
 8013ea0:	9b00      	ldr	r3, [sp, #0]
 8013ea2:	b29b      	uxth	r3, r3
 8013ea4:	b21b      	sxth	r3, r3
 8013ea6:	4610      	mov	r0, r2
 8013ea8:	4619      	mov	r1, r3
 8013eaa:	f002 fa91 	bl	80163d0 <gpio_init_in>
	}
 8013eae:	b003      	add	sp, #12
 8013eb0:	f85d fb04 	ldr.w	pc, [sp], #4

08013eb4 <tmp_gpio_free>:

	void tmp_gpio_free(gpio_t *obj)
	{
 8013eb4:	b500      	push	{lr}
 8013eb6:	b083      	sub	sp, #12
 8013eb8:	9001      	str	r0, [sp, #4]
		free(obj);
 8013eba:	9801      	ldr	r0, [sp, #4]
 8013ebc:	f002 fe92 	bl	8016be4 <free>
	}
 8013ec0:	b003      	add	sp, #12
 8013ec2:	f85d fb04 	ldr.w	pc, [sp], #4
 8013ec6:	bf00      	nop

08013ec8 <tmp_gpio_dir>:

	void tmp_gpio_dir(gpio_t *obj, int32_t dir)
	{
 8013ec8:	b500      	push	{lr}
 8013eca:	b083      	sub	sp, #12
 8013ecc:	9001      	str	r0, [sp, #4]
 8013ece:	9100      	str	r1, [sp, #0]
		gpio_dir(obj, (PinDirection)dir);
 8013ed0:	9b00      	ldr	r3, [sp, #0]
 8013ed2:	b2db      	uxtb	r3, r3
 8013ed4:	9801      	ldr	r0, [sp, #4]
 8013ed6:	4619      	mov	r1, r3
 8013ed8:	f001 fdac 	bl	8015a34 <gpio_dir>
	}
 8013edc:	b003      	add	sp, #12
 8013ede:	f85d fb04 	ldr.w	pc, [sp], #4
 8013ee2:	bf00      	nop

08013ee4 <tmp_gpio_mode>:

	void tmp_gpio_mode(gpio_t *obj, int32_t mode)
	{
 8013ee4:	b500      	push	{lr}
 8013ee6:	b083      	sub	sp, #12
 8013ee8:	9001      	str	r0, [sp, #4]
 8013eea:	9100      	str	r1, [sp, #0]
		gpio_mode(obj, (PinMode)mode);
 8013eec:	9b00      	ldr	r3, [sp, #0]
 8013eee:	b2db      	uxtb	r3, r3
 8013ef0:	9801      	ldr	r0, [sp, #4]
 8013ef2:	4619      	mov	r1, r3
 8013ef4:	f001 fd8c 	bl	8015a10 <gpio_mode>
	}
 8013ef8:	b003      	add	sp, #12
 8013efa:	f85d fb04 	ldr.w	pc, [sp], #4
 8013efe:	bf00      	nop

08013f00 <tmp_gpio_irq_alloc>:

	void tmp_gpio_irq_alloc(gpio_irq_t **obj)
	{
 8013f00:	b500      	push	{lr}
 8013f02:	b083      	sub	sp, #12
 8013f04:	9001      	str	r0, [sp, #4]
		*obj = (gpio_irq_t*)calloc(sizeof(gpio_irq_t), 1);
 8013f06:	2010      	movs	r0, #16
 8013f08:	2101      	movs	r1, #1
 8013f0a:	f002 fc91 	bl	8016830 <calloc>
 8013f0e:	4603      	mov	r3, r0
 8013f10:	461a      	mov	r2, r3
 8013f12:	9b01      	ldr	r3, [sp, #4]
 8013f14:	601a      	str	r2, [r3, #0]
	}
 8013f16:	b003      	add	sp, #12
 8013f18:	f85d fb04 	ldr.w	pc, [sp], #4

08013f1c <tmp_gpio_irq_free>:

	void tmp_gpio_irq_free(gpio_irq_t *obj)
	{
 8013f1c:	b500      	push	{lr}
 8013f1e:	b083      	sub	sp, #12
 8013f20:	9001      	str	r0, [sp, #4]
		free(obj);
 8013f22:	9801      	ldr	r0, [sp, #4]
 8013f24:	f002 fe5e 	bl	8016be4 <free>
	}
 8013f28:	b003      	add	sp, #12
 8013f2a:	f85d fb04 	ldr.w	pc, [sp], #4
 8013f2e:	bf00      	nop

08013f30 <tmp_gpio_irq_uninit>:
	{
		return gpio_irq_init(obj, ( PinName )pin, ( gpio_irq_handler )HandleGpioInterrupt, id);
	}

	void tmp_gpio_irq_uninit(gpio_irq_t *obj)
	{
 8013f30:	b500      	push	{lr}
 8013f32:	b083      	sub	sp, #12
 8013f34:	9001      	str	r0, [sp, #4]
		gpio_irq_free(obj);
 8013f36:	9801      	ldr	r0, [sp, #4]
 8013f38:	f001 fda8 	bl	8015a8c <gpio_irq_free>
	}
 8013f3c:	b003      	add	sp, #12
 8013f3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8013f42:	bf00      	nop

08013f44 <tmp_gpio_irq_set>:

	void tmp_gpio_irq_set(gpio_irq_t *obj, int32_t edge, uint32_t enable)
	{
 8013f44:	b500      	push	{lr}
 8013f46:	b085      	sub	sp, #20
 8013f48:	9003      	str	r0, [sp, #12]
 8013f4a:	9102      	str	r1, [sp, #8]
 8013f4c:	9201      	str	r2, [sp, #4]
        gpio_irq_set(obj, (gpio_irq_event)edge, enable);
 8013f4e:	9b02      	ldr	r3, [sp, #8]
 8013f50:	b2db      	uxtb	r3, r3
 8013f52:	9803      	ldr	r0, [sp, #12]
 8013f54:	4619      	mov	r1, r3
 8013f56:	9a01      	ldr	r2, [sp, #4]
 8013f58:	f001 fdde 	bl	8015b18 <gpio_irq_set>
    }
 8013f5c:	b005      	add	sp, #20
 8013f5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8013f62:	bf00      	nop

08013f64 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8013f64:	b084      	sub	sp, #16
 8013f66:	9001      	str	r0, [sp, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8013f68:	9b01      	ldr	r3, [sp, #4]
 8013f6a:	f003 0307 	and.w	r3, r3, #7
 8013f6e:	9303      	str	r3, [sp, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8013f70:	4b0a      	ldr	r3, [pc, #40]	; (8013f9c <NVIC_SetPriorityGrouping+0x38>)
 8013f72:	68db      	ldr	r3, [r3, #12]
 8013f74:	9302      	str	r3, [sp, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 8013f76:	9a02      	ldr	r2, [sp, #8]
 8013f78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8013f7c:	4013      	ands	r3, r2
 8013f7e:	9302      	str	r3, [sp, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
 8013f80:	9b03      	ldr	r3, [sp, #12]
 8013f82:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8013f84:	9b02      	ldr	r3, [sp, #8]
 8013f86:	4313      	orrs	r3, r2
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
 8013f88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8013f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013f90:	9302      	str	r3, [sp, #8]
  SCB->AIRCR =  reg_value;
 8013f92:	4a02      	ldr	r2, [pc, #8]	; (8013f9c <NVIC_SetPriorityGrouping+0x38>)
 8013f94:	9b02      	ldr	r3, [sp, #8]
 8013f96:	60d3      	str	r3, [r2, #12]
}
 8013f98:	b004      	add	sp, #16
 8013f9a:	4770      	bx	lr
 8013f9c:	e000ed00 	.word	0xe000ed00

08013fa0 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8013fa0:	b082      	sub	sp, #8
 8013fa2:	4603      	mov	r3, r0
 8013fa4:	9100      	str	r1, [sp, #0]
 8013fa6:	f88d 3007 	strb.w	r3, [sp, #7]
  if((int32_t)IRQn < 0) {
 8013faa:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	da0c      	bge.n	8013fcc <NVIC_SetPriority+0x2c>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013fb2:	490c      	ldr	r1, [pc, #48]	; (8013fe4 <NVIC_SetPriority+0x44>)
 8013fb4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013fb8:	f003 030f 	and.w	r3, r3, #15
 8013fbc:	3b04      	subs	r3, #4
 8013fbe:	9a00      	ldr	r2, [sp, #0]
 8013fc0:	b2d2      	uxtb	r2, r2
 8013fc2:	0112      	lsls	r2, r2, #4
 8013fc4:	b2d2      	uxtb	r2, r2
 8013fc6:	440b      	add	r3, r1
 8013fc8:	761a      	strb	r2, [r3, #24]
 8013fca:	e009      	b.n	8013fe0 <NVIC_SetPriority+0x40>
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013fcc:	4906      	ldr	r1, [pc, #24]	; (8013fe8 <NVIC_SetPriority+0x48>)
 8013fce:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8013fd2:	9a00      	ldr	r2, [sp, #0]
 8013fd4:	b2d2      	uxtb	r2, r2
 8013fd6:	0112      	lsls	r2, r2, #4
 8013fd8:	b2d2      	uxtb	r2, r2
 8013fda:	440b      	add	r3, r1
 8013fdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 8013fe0:	b002      	add	sp, #8
 8013fe2:	4770      	bx	lr
 8013fe4:	e000ed00 	.word	0xe000ed00
 8013fe8:	e000e100 	.word	0xe000e100

08013fec <CMSIS_STUB_NVIC_SetPriorityGrouping>:
	//
	// NVIC
	//

	/*__STATIC_INLINE*/ void CMSIS_STUB_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
	{
 8013fec:	b500      	push	{lr}
 8013fee:	b083      	sub	sp, #12
 8013ff0:	9001      	str	r0, [sp, #4]
		NVIC_SetPriorityGrouping(PriorityGroup);
 8013ff2:	9801      	ldr	r0, [sp, #4]
 8013ff4:	f7ff ffb6 	bl	8013f64 <NVIC_SetPriorityGrouping>
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
 8013ff8:	f3bf 8f6f 	isb	sy
		__ISB(); // always emit a barrier 
	}
 8013ffc:	b003      	add	sp, #12
 8013ffe:	f85d fb04 	ldr.w	pc, [sp], #4
 8014002:	bf00      	nop

08014004 <CMSIS_STUB_NVIC_SetPriority>:
	{
		return NVIC_GetActive(IRQn);
	}

	/*__STATIC_INLINE*/ void CMSIS_STUB_NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
	{
 8014004:	b500      	push	{lr}
 8014006:	b083      	sub	sp, #12
 8014008:	4603      	mov	r3, r0
 801400a:	9100      	str	r1, [sp, #0]
 801400c:	f88d 3007 	strb.w	r3, [sp, #7]
		NVIC_SetPriority(IRQn, priority);
 8014010:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8014014:	4618      	mov	r0, r3
 8014016:	9900      	ldr	r1, [sp, #0]
 8014018:	f7ff ffc2 	bl	8013fa0 <NVIC_SetPriority>
 801401c:	f3bf 8f6f 	isb	sy
		__ISB(); // always emit a barrier 
	}
 8014020:	b003      	add	sp, #12
 8014022:	f85d fb04 	ldr.w	pc, [sp], #4
 8014026:	bf00      	nop

08014028 <tmp_timer_event_alloc>:
{

	extern void SystemTimer_Handler(uint32_t id);

	void tmp_timer_event_alloc(ticker_event_t** obj)
	{
 8014028:	b500      	push	{lr}
 801402a:	b083      	sub	sp, #12
 801402c:	9001      	str	r0, [sp, #4]
		*obj = (ticker_event_t*)calloc(sizeof(ticker_event_t), 1);
 801402e:	200c      	movs	r0, #12
 8014030:	2101      	movs	r1, #1
 8014032:	f002 fbfd 	bl	8016830 <calloc>
 8014036:	4603      	mov	r3, r0
 8014038:	461a      	mov	r2, r3
 801403a:	9b01      	ldr	r3, [sp, #4]
 801403c:	601a      	str	r2, [r3, #0]
	}
 801403e:	b003      	add	sp, #12
 8014040:	f85d fb04 	ldr.w	pc, [sp], #4

08014044 <tmp_sys_timer_read>:

	uint32_t tmp_sys_timer_read()
	{
 8014044:	b508      	push	{r3, lr}
		return us_ticker_read();
 8014046:	f002 f94d 	bl	80162e4 <us_ticker_read>
 801404a:	4603      	mov	r3, r0
	}
 801404c:	4618      	mov	r0, r3
 801404e:	bd08      	pop	{r3, pc}

08014050 <tmp_interrupt_handler>:

	// This is used to call back into the Kernel using a WellKnownMethod
	void tmp_interrupt_handler(uint32_t id)
	{
 8014050:	b500      	push	{lr}
 8014052:	b083      	sub	sp, #12
 8014054:	9001      	str	r0, [sp, #4]
		SystemTimer_Handler(id);
 8014056:	9801      	ldr	r0, [sp, #4]
 8014058:	f7ec fb09 	bl	800066e <SystemTimer_Handler>
	}
 801405c:	b003      	add	sp, #12
 801405e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014062:	bf00      	nop

08014064 <tmp_sys_timer_init>:

	void tmp_sys_timer_init()
	{
 8014064:	b508      	push	{r3, lr}
		us_ticker_init();
 8014066:	f002 f927 	bl	80162b8 <us_ticker_init>

		ticker_set_handler(get_us_ticker_data(), tmp_interrupt_handler);
 801406a:	f002 fb3d 	bl	80166e8 <get_us_ticker_data>
 801406e:	4603      	mov	r3, r0
 8014070:	4618      	mov	r0, r3
 8014072:	4902      	ldr	r1, [pc, #8]	; (801407c <tmp_sys_timer_init+0x18>)
 8014074:	f002 fa6c 	bl	8016550 <ticker_set_handler>
	}
 8014078:	bd08      	pop	{r3, pc}
 801407a:	bf00      	nop
 801407c:	08014051 	.word	0x08014051

08014080 <tmp_sys_timer_insert_event>:

	void tmp_sys_timer_insert_event(ticker_event_t* tick_event, uint32_t relativeTimeout)
	{
 8014080:	b510      	push	{r4, lr}
 8014082:	b082      	sub	sp, #8
 8014084:	9001      	str	r0, [sp, #4]
 8014086:	9100      	str	r1, [sp, #0]
		// We can leave the id as 0 since it is only used for timer event identification
		// And we keep track of that ourselves

		ticker_insert_event(get_us_ticker_data(), tick_event, us_ticker_read() + relativeTimeout, 0);
 8014088:	f002 fb2e 	bl	80166e8 <get_us_ticker_data>
 801408c:	4604      	mov	r4, r0
 801408e:	f002 f929 	bl	80162e4 <us_ticker_read>
 8014092:	4602      	mov	r2, r0
 8014094:	9b00      	ldr	r3, [sp, #0]
 8014096:	4413      	add	r3, r2
 8014098:	4620      	mov	r0, r4
 801409a:	9901      	ldr	r1, [sp, #4]
 801409c:	461a      	mov	r2, r3
 801409e:	2300      	movs	r3, #0
 80140a0:	f002 faaa 	bl	80165f8 <ticker_insert_event>
	}
 80140a4:	b002      	add	sp, #8
 80140a6:	bd10      	pop	{r4, pc}

080140a8 <tmp_sys_timer_remove_event>:

	void tmp_sys_timer_remove_event(ticker_event_t* tick_event)
	{
 80140a8:	b500      	push	{lr}
 80140aa:	b083      	sub	sp, #12
 80140ac:	9001      	str	r0, [sp, #4]
		// We can leave the id as 0 since it is only used for timer event identification
		// And we keep track of that ourselves

		ticker_remove_event(get_us_ticker_data(), tick_event);
 80140ae:	f002 fb1b 	bl	80166e8 <get_us_ticker_data>
 80140b2:	4603      	mov	r3, r0
 80140b4:	4618      	mov	r0, r3
 80140b6:	9901      	ldr	r1, [sp, #4]
 80140b8:	f002 fad8 	bl	801666c <ticker_remove_event>
	}
 80140bc:	b003      	add	sp, #12
 80140be:	f85d fb04 	ldr.w	pc, [sp], #4
 80140c2:	bf00      	nop

080140c4 <CMSIS_STUB_SysTick_GetCTRL>:
	//////	#define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration struct       */
	//////

	/*__STATIC_INLINE*/ uint32_t CMSIS_STUB_SysTick_GetCTRL()
	{
		return SysTick->CTRL;
 80140c4:	4b01      	ldr	r3, [pc, #4]	; (80140cc <CMSIS_STUB_SysTick_GetCTRL+0x8>)
 80140c6:	681b      	ldr	r3, [r3, #0]
	}
 80140c8:	4618      	mov	r0, r3
 80140ca:	4770      	bx	lr
 80140cc:	e000e010 	.word	0xe000e010

080140d0 <CMSIS_STUB_SysTick_SetCTRL>:

	/*__STATIC_INLINE*/ void CMSIS_STUB_SysTick_SetCTRL(uint32_t value)
	{
 80140d0:	b082      	sub	sp, #8
 80140d2:	9001      	str	r0, [sp, #4]
		SysTick->CTRL = value;
 80140d4:	4a02      	ldr	r2, [pc, #8]	; (80140e0 <CMSIS_STUB_SysTick_SetCTRL+0x10>)
 80140d6:	9b01      	ldr	r3, [sp, #4]
 80140d8:	6013      	str	r3, [r2, #0]
	}
 80140da:	b002      	add	sp, #8
 80140dc:	4770      	bx	lr
 80140de:	bf00      	nop
 80140e0:	e000e010 	.word	0xe000e010

080140e4 <CMSIS_STUB_SysTick_SetLOAD>:
	{
		return SysTick->LOAD & 0x00FFFFFF;
	}

	/*__STATIC_INLINE*/ void CMSIS_STUB_SysTick_SetLOAD(uint32_t value)
	{
 80140e4:	b082      	sub	sp, #8
 80140e6:	9001      	str	r0, [sp, #4]
		SysTick->LOAD |= value & 0x00FFFFFF;
 80140e8:	4904      	ldr	r1, [pc, #16]	; (80140fc <CMSIS_STUB_SysTick_SetLOAD+0x18>)
 80140ea:	4b04      	ldr	r3, [pc, #16]	; (80140fc <CMSIS_STUB_SysTick_SetLOAD+0x18>)
 80140ec:	685a      	ldr	r2, [r3, #4]
 80140ee:	9b01      	ldr	r3, [sp, #4]
 80140f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80140f4:	4313      	orrs	r3, r2
 80140f6:	604b      	str	r3, [r1, #4]
	}
 80140f8:	b002      	add	sp, #8
 80140fa:	4770      	bx	lr
 80140fc:	e000e010 	.word	0xe000e010

08014100 <CMSIS_STUB_SysTick_GetVAL>:

	/*__STATIC_INLINE*/ uint32_t CMSIS_STUB_SysTick_GetVAL()
	{
		return SysTick->VAL & 0x00FFFFFF;
 8014100:	4b02      	ldr	r3, [pc, #8]	; (801410c <CMSIS_STUB_SysTick_GetVAL+0xc>)
 8014102:	689b      	ldr	r3, [r3, #8]
 8014104:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	}
 8014108:	4618      	mov	r0, r3
 801410a:	4770      	bx	lr
 801410c:	e000e010 	.word	0xe000e010

08014110 <CMSIS_STUB_SysTick_SetVAL>:

	/*__STATIC_INLINE*/ void CMSIS_STUB_SysTick_SetVAL(uint32_t value)
	{
 8014110:	b082      	sub	sp, #8
 8014112:	9001      	str	r0, [sp, #4]
		SysTick->VAL |= value & 0x00FFFFFF;
 8014114:	4904      	ldr	r1, [pc, #16]	; (8014128 <CMSIS_STUB_SysTick_SetVAL+0x18>)
 8014116:	4b04      	ldr	r3, [pc, #16]	; (8014128 <CMSIS_STUB_SysTick_SetVAL+0x18>)
 8014118:	689a      	ldr	r2, [r3, #8]
 801411a:	9b01      	ldr	r3, [sp, #4]
 801411c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8014120:	4313      	orrs	r3, r2
 8014122:	608b      	str	r3, [r1, #8]
	}
 8014124:	b002      	add	sp, #8
 8014126:	4770      	bx	lr
 8014128:	e000e010 	.word	0xe000e010

0801412c <CMSIS_STUB_SysTick_GetCALIB>:

	/*__STATIC_INLINE*/ uint32_t CMSIS_STUB_SysTick_GetCALIB()
	{
		return SysTick->CALIB;
 801412c:	4b01      	ldr	r3, [pc, #4]	; (8014134 <CMSIS_STUB_SysTick_GetCALIB+0x8>)
 801412e:	68db      	ldr	r3, [r3, #12]
	}
 8014130:	4618      	mov	r0, r3
 8014132:	4770      	bx	lr
 8014134:	e000e010 	.word	0xe000e010

08014138 <SysTick_Handler>:

    extern void SysTick_Handler_Zelig();

    __attribute__((naked)) void SysTick_Handler(void)
    {
        __ASM volatile ("STR       LR, [SP, #-4]!");                // Save LR to stack
 8014138:	f84d ed04 	str.w	lr, [sp, #-4]!

        SysTick_Handler_Zelig();
 801413c:	f7ec faf2 	bl	8000724 <SysTick_Handler_Zelig>

        __ASM volatile ("LDR       LR, [SP], #4");                  // Restore LR from stack
 8014140:	f85d eb04 	ldr.w	lr, [sp], #4
        __ASM volatile ("BX        LR");
 8014144:	4770      	bx	lr
 8014146:	bf00      	nop

08014148 <Reset_Handler>:
 8014148:	f8df d030 	ldr.w	sp, [pc, #48]	; 801417c <LoopFillZerobss+0x10>
 801414c:	2100      	movs	r1, #0
 801414e:	e003      	b.n	8014158 <LoopCopyDataInit>

08014150 <CopyDataInit>:
 8014150:	4b0b      	ldr	r3, [pc, #44]	; (8014180 <LoopFillZerobss+0x14>)
 8014152:	585b      	ldr	r3, [r3, r1]
 8014154:	5043      	str	r3, [r0, r1]
 8014156:	3104      	adds	r1, #4

08014158 <LoopCopyDataInit>:
 8014158:	480a      	ldr	r0, [pc, #40]	; (8014184 <LoopFillZerobss+0x18>)
 801415a:	4b0b      	ldr	r3, [pc, #44]	; (8014188 <LoopFillZerobss+0x1c>)
 801415c:	1842      	adds	r2, r0, r1
 801415e:	429a      	cmp	r2, r3
 8014160:	d3f6      	bcc.n	8014150 <CopyDataInit>
 8014162:	4a0a      	ldr	r2, [pc, #40]	; (801418c <LoopFillZerobss+0x20>)
 8014164:	e002      	b.n	801416c <LoopFillZerobss>

08014166 <FillZerobss>:
 8014166:	2300      	movs	r3, #0
 8014168:	f842 3b04 	str.w	r3, [r2], #4

0801416c <LoopFillZerobss>:
 801416c:	4b08      	ldr	r3, [pc, #32]	; (8014190 <LoopFillZerobss+0x24>)
 801416e:	429a      	cmp	r2, r3
 8014170:	d3f9      	bcc.n	8014166 <FillZerobss>
 8014172:	f000 f8e1 	bl	8014338 <SystemInit>
 8014176:	f7ec f855 	bl	8000224 <_mainCRTStartup>
 801417a:	4770      	bx	lr
 801417c:	20050000 	.word	0x20050000
 8014180:	0801d510 	.word	0x0801d510
 8014184:	200001d0 	.word	0x200001d0
 8014188:	200017b4 	.word	0x200017b4
 801418c:	200017c0 	.word	0x200017c0
 8014190:	20001c1c 	.word	0x20001c1c

08014194 <ADC_IRQHandler>:
 8014194:	e7fe      	b.n	8014194 <ADC_IRQHandler>
	...

08014198 <SetSysClock_PLL_HSE>:
 8014198:	4b20      	ldr	r3, [pc, #128]	; (801421c <SetSysClock_PLL_HSE+0x84>)
 801419a:	2101      	movs	r1, #1
 801419c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801419e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80141a2:	b570      	push	{r4, r5, r6, lr}
 80141a4:	641a      	str	r2, [r3, #64]	; 0x40
 80141a6:	b092      	sub	sp, #72	; 0x48
 80141a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80141aa:	9106      	str	r1, [sp, #24]
 80141ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80141b0:	9300      	str	r3, [sp, #0]
 80141b2:	9b00      	ldr	r3, [sp, #0]
 80141b4:	b9b0      	cbnz	r0, 80141e4 <SetSysClock_PLL_HSE+0x4c>
 80141b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80141ba:	9307      	str	r3, [sp, #28]
 80141bc:	2402      	movs	r4, #2
 80141be:	f44f 0580 	mov.w	r5, #4194304	; 0x400000
 80141c2:	2119      	movs	r1, #25
 80141c4:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 80141c8:	2309      	movs	r3, #9
 80141ca:	a806      	add	r0, sp, #24
 80141cc:	940c      	str	r4, [sp, #48]	; 0x30
 80141ce:	9410      	str	r4, [sp, #64]	; 0x40
 80141d0:	950d      	str	r5, [sp, #52]	; 0x34
 80141d2:	910e      	str	r1, [sp, #56]	; 0x38
 80141d4:	920f      	str	r2, [sp, #60]	; 0x3c
 80141d6:	9311      	str	r3, [sp, #68]	; 0x44
 80141d8:	f000 faba 	bl	8014750 <HAL_RCC_OscConfig>
 80141dc:	b130      	cbz	r0, 80141ec <SetSysClock_PLL_HSE+0x54>
 80141de:	2000      	movs	r0, #0
 80141e0:	b012      	add	sp, #72	; 0x48
 80141e2:	bd70      	pop	{r4, r5, r6, pc}
 80141e4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80141e8:	9307      	str	r3, [sp, #28]
 80141ea:	e7e7      	b.n	80141bc <SetSysClock_PLL_HSE+0x24>
 80141ec:	f000 fe5e 	bl	8014eac <HAL_PWREx_EnableOverDrive>
 80141f0:	4603      	mov	r3, r0
 80141f2:	2800      	cmp	r0, #0
 80141f4:	d1f3      	bne.n	80141de <SetSysClock_PLL_HSE+0x46>
 80141f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80141fa:	260f      	movs	r6, #15
 80141fc:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
 8014200:	a801      	add	r0, sp, #4
 8014202:	2107      	movs	r1, #7
 8014204:	9402      	str	r4, [sp, #8]
 8014206:	9303      	str	r3, [sp, #12]
 8014208:	9601      	str	r6, [sp, #4]
 801420a:	9504      	str	r5, [sp, #16]
 801420c:	9205      	str	r2, [sp, #20]
 801420e:	f000 fcb3 	bl	8014b78 <HAL_RCC_ClockConfig>
 8014212:	fab0 f080 	clz	r0, r0
 8014216:	0940      	lsrs	r0, r0, #5
 8014218:	b012      	add	sp, #72	; 0x48
 801421a:	bd70      	pop	{r4, r5, r6, pc}
 801421c:	40023800 	.word	0x40023800

08014220 <SetSysClock_PLL_HSI>:
 8014220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014222:	b093      	sub	sp, #76	; 0x4c
 8014224:	f3bf 8f4f 	dsb	sy
 8014228:	f3bf 8f6f 	isb	sy
 801422c:	483a      	ldr	r0, [pc, #232]	; (8014318 <SetSysClock_PLL_HSI+0xf8>)
 801422e:	2200      	movs	r2, #0
 8014230:	f8c0 2250 	str.w	r2, [r0, #592]	; 0x250
 8014234:	6943      	ldr	r3, [r0, #20]
 8014236:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801423a:	6143      	str	r3, [r0, #20]
 801423c:	f3bf 8f4f 	dsb	sy
 8014240:	f3bf 8f6f 	isb	sy
 8014244:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
 8014248:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 801424c:	f3c3 364e 	ubfx	r6, r3, #13, #15
 8014250:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
 8014254:	fabe f48e 	clz	r4, lr
 8014258:	f3bf 8f4f 	dsb	sy
 801425c:	f003 0307 	and.w	r3, r3, #7
 8014260:	f004 041f 	and.w	r4, r4, #31
 8014264:	1d1f      	adds	r7, r3, #4
 8014266:	fa06 f107 	lsl.w	r1, r6, r7
 801426a:	4673      	mov	r3, lr
 801426c:	fa03 f204 	lsl.w	r2, r3, r4
 8014270:	3b01      	subs	r3, #1
 8014272:	4d29      	ldr	r5, [pc, #164]	; (8014318 <SetSysClock_PLL_HSI+0xf8>)
 8014274:	430a      	orrs	r2, r1
 8014276:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
 801427a:	1c5a      	adds	r2, r3, #1
 801427c:	d1f6      	bne.n	801426c <SetSysClock_PLL_HSI+0x4c>
 801427e:	f116 36ff 	adds.w	r6, r6, #4294967295
 8014282:	d2f0      	bcs.n	8014266 <SetSysClock_PLL_HSI+0x46>
 8014284:	f3bf 8f4f 	dsb	sy
 8014288:	696b      	ldr	r3, [r5, #20]
 801428a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801428e:	616b      	str	r3, [r5, #20]
 8014290:	f3bf 8f4f 	dsb	sy
 8014294:	f3bf 8f6f 	isb	sy
 8014298:	4b20      	ldr	r3, [pc, #128]	; (801431c <SetSysClock_PLL_HSI+0xfc>)
 801429a:	2500      	movs	r5, #0
 801429c:	2110      	movs	r1, #16
 801429e:	2402      	movs	r4, #2
 80142a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80142a2:	f04f 0c03 	mov.w	ip, #3
 80142a6:	f04f 0e01 	mov.w	lr, #1
 80142aa:	f44f 77d8 	mov.w	r7, #432	; 0x1b0
 80142ae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80142b2:	2609      	movs	r6, #9
 80142b4:	a806      	add	r0, sp, #24
 80142b6:	641a      	str	r2, [r3, #64]	; 0x40
 80142b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80142ba:	f8cd c018 	str.w	ip, [sp, #24]
 80142be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80142c2:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 80142c6:	970f      	str	r7, [sp, #60]	; 0x3c
 80142c8:	9300      	str	r3, [sp, #0]
 80142ca:	9b00      	ldr	r3, [sp, #0]
 80142cc:	9611      	str	r6, [sp, #68]	; 0x44
 80142ce:	9507      	str	r5, [sp, #28]
 80142d0:	950d      	str	r5, [sp, #52]	; 0x34
 80142d2:	910a      	str	r1, [sp, #40]	; 0x28
 80142d4:	910e      	str	r1, [sp, #56]	; 0x38
 80142d6:	940c      	str	r4, [sp, #48]	; 0x30
 80142d8:	9410      	str	r4, [sp, #64]	; 0x40
 80142da:	f000 fa39 	bl	8014750 <HAL_RCC_OscConfig>
 80142de:	b110      	cbz	r0, 80142e6 <SetSysClock_PLL_HSI+0xc6>
 80142e0:	2000      	movs	r0, #0
 80142e2:	b013      	add	sp, #76	; 0x4c
 80142e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80142e6:	f000 fde1 	bl	8014eac <HAL_PWREx_EnableOverDrive>
 80142ea:	4603      	mov	r3, r0
 80142ec:	2800      	cmp	r0, #0
 80142ee:	d1f7      	bne.n	80142e0 <SetSysClock_PLL_HSI+0xc0>
 80142f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80142f4:	260f      	movs	r6, #15
 80142f6:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
 80142fa:	a801      	add	r0, sp, #4
 80142fc:	2107      	movs	r1, #7
 80142fe:	9402      	str	r4, [sp, #8]
 8014300:	9303      	str	r3, [sp, #12]
 8014302:	9601      	str	r6, [sp, #4]
 8014304:	9504      	str	r5, [sp, #16]
 8014306:	9205      	str	r2, [sp, #20]
 8014308:	f000 fc36 	bl	8014b78 <HAL_RCC_ClockConfig>
 801430c:	fab0 f080 	clz	r0, r0
 8014310:	0940      	lsrs	r0, r0, #5
 8014312:	b013      	add	sp, #76	; 0x4c
 8014314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014316:	bf00      	nop
 8014318:	e000ed00 	.word	0xe000ed00
 801431c:	40023800 	.word	0x40023800

08014320 <SetSysClock>:
 8014320:	b508      	push	{r3, lr}
 8014322:	2000      	movs	r0, #0
 8014324:	f7ff ff38 	bl	8014198 <SetSysClock_PLL_HSE>
 8014328:	b100      	cbz	r0, 801432c <SetSysClock+0xc>
 801432a:	bd08      	pop	{r3, pc}
 801432c:	f7ff ff78 	bl	8014220 <SetSysClock_PLL_HSI>
 8014330:	2800      	cmp	r0, #0
 8014332:	d1fa      	bne.n	801432a <SetSysClock+0xa>
 8014334:	e7fe      	b.n	8014334 <SetSysClock+0x14>
 8014336:	bf00      	nop

08014338 <SystemInit>:
 8014338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801433a:	4b31      	ldr	r3, [pc, #196]	; (8014400 <SystemInit+0xc8>)
 801433c:	2500      	movs	r5, #0
 801433e:	4a31      	ldr	r2, [pc, #196]	; (8014404 <SystemInit+0xcc>)
 8014340:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
 8014344:	6819      	ldr	r1, [r3, #0]
 8014346:	4f30      	ldr	r7, [pc, #192]	; (8014408 <SystemInit+0xd0>)
 8014348:	f041 0101 	orr.w	r1, r1, #1
 801434c:	4c2f      	ldr	r4, [pc, #188]	; (801440c <SystemInit+0xd4>)
 801434e:	4830      	ldr	r0, [pc, #192]	; (8014410 <SystemInit+0xd8>)
 8014350:	6019      	str	r1, [r3, #0]
 8014352:	609d      	str	r5, [r3, #8]
 8014354:	f8d3 e000 	ldr.w	lr, [r3]
 8014358:	492e      	ldr	r1, [pc, #184]	; (8014414 <SystemInit+0xdc>)
 801435a:	ea0e 0202 	and.w	r2, lr, r2
 801435e:	601a      	str	r2, [r3, #0]
 8014360:	605f      	str	r7, [r3, #4]
 8014362:	681a      	ldr	r2, [r3, #0]
 8014364:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8014368:	601a      	str	r2, [r3, #0]
 801436a:	60dd      	str	r5, [r3, #12]
 801436c:	60a6      	str	r6, [r4, #8]
 801436e:	6001      	str	r1, [r0, #0]
 8014370:	f000 fdda 	bl	8014f28 <HAL_Init>
 8014374:	f3bf 8f4f 	dsb	sy
 8014378:	f3bf 8f6f 	isb	sy
 801437c:	f8c4 5250 	str.w	r5, [r4, #592]	; 0x250
 8014380:	6963      	ldr	r3, [r4, #20]
 8014382:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014386:	6163      	str	r3, [r4, #20]
 8014388:	f3bf 8f4f 	dsb	sy
 801438c:	f3bf 8f6f 	isb	sy
 8014390:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
 8014394:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8014398:	f3c3 364e 	ubfx	r6, r3, #13, #15
 801439c:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
 80143a0:	fabe f58e 	clz	r5, lr
 80143a4:	f3bf 8f4f 	dsb	sy
 80143a8:	f003 0307 	and.w	r3, r3, #7
 80143ac:	f005 051f 	and.w	r5, r5, #31
 80143b0:	4620      	mov	r0, r4
 80143b2:	1d1f      	adds	r7, r3, #4
 80143b4:	fa06 f107 	lsl.w	r1, r6, r7
 80143b8:	4673      	mov	r3, lr
 80143ba:	fa03 f205 	lsl.w	r2, r3, r5
 80143be:	3b01      	subs	r3, #1
 80143c0:	4c12      	ldr	r4, [pc, #72]	; (801440c <SystemInit+0xd4>)
 80143c2:	430a      	orrs	r2, r1
 80143c4:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
 80143c8:	1c5a      	adds	r2, r3, #1
 80143ca:	d1f6      	bne.n	80143ba <SystemInit+0x82>
 80143cc:	f116 36ff 	adds.w	r6, r6, #4294967295
 80143d0:	d2f0      	bcs.n	80143b4 <SystemInit+0x7c>
 80143d2:	f3bf 8f4f 	dsb	sy
 80143d6:	6963      	ldr	r3, [r4, #20]
 80143d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80143dc:	6163      	str	r3, [r4, #20]
 80143de:	f3bf 8f4f 	dsb	sy
 80143e2:	f3bf 8f6f 	isb	sy
 80143e6:	f7ff ff9b 	bl	8014320 <SetSysClock>
 80143ea:	4b05      	ldr	r3, [pc, #20]	; (8014400 <SystemInit+0xc8>)
 80143ec:	6a1a      	ldr	r2, [r3, #32]
 80143ee:	f042 0208 	orr.w	r2, r2, #8
 80143f2:	621a      	str	r2, [r3, #32]
 80143f4:	6a1a      	ldr	r2, [r3, #32]
 80143f6:	f022 0208 	bic.w	r2, r2, #8
 80143fa:	621a      	str	r2, [r3, #32]
 80143fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80143fe:	bf00      	nop
 8014400:	40023800 	.word	0x40023800
 8014404:	fef6ffff 	.word	0xfef6ffff
 8014408:	24003010 	.word	0x24003010
 801440c:	e000ed00 	.word	0xe000ed00
 8014410:	200016c0 	.word	0x200016c0
 8014414:	00f42400 	.word	0x00f42400

08014418 <mbed_die>:
#include "gpio_api.h"
#include "wait_api.h"
#include "toolchain.h"
#include "mbed_interface.h"

WEAK void mbed_die(void) {
 8014418:	b508      	push	{r3, lr}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 801441a:	b672      	cpsid	i
        gpio_write(&led_2, 0);
        gpio_write(&led_3, 0);
        gpio_write(&led_4, 1);
#endif

        wait_ms(150);
 801441c:	2096      	movs	r0, #150	; 0x96
 801441e:	f002 f971 	bl	8016704 <wait_ms>
        gpio_write(&led_2, 1);
        gpio_write(&led_3, 1);
        gpio_write(&led_4, 0);
#endif

        wait_ms(150);
 8014422:	2096      	movs	r0, #150	; 0x96
 8014424:	f002 f96e 	bl	8016704 <wait_ms>
    }
 8014428:	e7f8      	b.n	801441c <mbed_die+0x4>
 801442a:	bf00      	nop

0801442c <NVIC_SetVector>:
 801442c:	4a0f      	ldr	r2, [pc, #60]	; (801446c <NVIC_SetVector+0x40>)
 801442e:	b430      	push	{r4, r5}
 8014430:	6893      	ldr	r3, [r2, #8]
 8014432:	6894      	ldr	r4, [r2, #8]
 8014434:	461a      	mov	r2, r3
 8014436:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
 801443a:	d004      	beq.n	8014446 <NVIC_SetVector+0x1a>
 801443c:	3010      	adds	r0, #16
 801443e:	bc30      	pop	{r4, r5}
 8014440:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
 8014444:	4770      	bx	lr
 8014446:	f503 75e4 	add.w	r5, r3, #456	; 0x1c8
 801444a:	4a09      	ldr	r2, [pc, #36]	; (8014470 <NVIC_SetVector+0x44>)
 801444c:	f853 4b04 	ldr.w	r4, [r3], #4
 8014450:	42ab      	cmp	r3, r5
 8014452:	f842 4f04 	str.w	r4, [r2, #4]!
 8014456:	d1f9      	bne.n	801444c <NVIC_SetVector+0x20>
 8014458:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 801445c:	4c03      	ldr	r4, [pc, #12]	; (801446c <NVIC_SetVector+0x40>)
 801445e:	3010      	adds	r0, #16
 8014460:	461a      	mov	r2, r3
 8014462:	60a3      	str	r3, [r4, #8]
 8014464:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
 8014468:	bc30      	pop	{r4, r5}
 801446a:	4770      	bx	lr
 801446c:	e000ed00 	.word	0xe000ed00
 8014470:	1ffffffc 	.word	0x1ffffffc

08014474 <_ZL11init_serialv>:
#if DEVICE_SERIAL
extern int stdio_uart_inited;
extern serial_t stdio_uart;
#endif

static void init_serial() {
 8014474:	b508      	push	{r3, lr}
#if DEVICE_SERIAL
    if (stdio_uart_inited) return;
 8014476:	4b05      	ldr	r3, [pc, #20]	; (801448c <_ZL11init_serialv+0x18>)
 8014478:	681b      	ldr	r3, [r3, #0]
 801447a:	2b00      	cmp	r3, #0
 801447c:	d000      	beq.n	8014480 <_ZL11init_serialv+0xc>
 801447e:	e004      	b.n	801448a <_ZL11init_serialv+0x16>
    serial_init(&stdio_uart, STDIO_UART_TX, STDIO_UART_RX);
 8014480:	4803      	ldr	r0, [pc, #12]	; (8014490 <_ZL11init_serialv+0x1c>)
 8014482:	2109      	movs	r1, #9
 8014484:	2217      	movs	r2, #23
 8014486:	f001 fd87 	bl	8015f98 <serial_init>
#endif
}
 801448a:	bd08      	pop	{r3, pc}
 801448c:	20001afc 	.word	0x20001afc
 8014490:	20001bfc 	.word	0x20001bfc

08014494 <_close>:
    filehandles[fh_i] = res;

    return fh_i + 3; // +3 as filehandles 0-2 are stdin/out/err
}

extern "C" int PREFIX(_close)(FILEHANDLE fh) {
 8014494:	b500      	push	{lr}
 8014496:	b085      	sub	sp, #20
 8014498:	9001      	str	r0, [sp, #4]
    if (fh < 3) return 0;
 801449a:	9b01      	ldr	r3, [sp, #4]
 801449c:	2b02      	cmp	r3, #2
 801449e:	dc01      	bgt.n	80144a4 <_close+0x10>
 80144a0:	2300      	movs	r3, #0
 80144a2:	e018      	b.n	80144d6 <_close+0x42>

    FileHandle* fhc = filehandles[fh-3];
 80144a4:	9b01      	ldr	r3, [sp, #4]
 80144a6:	3b03      	subs	r3, #3
 80144a8:	4a0d      	ldr	r2, [pc, #52]	; (80144e0 <_close+0x4c>)
 80144aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80144ae:	9303      	str	r3, [sp, #12]
    filehandles[fh-3] = NULL;
 80144b0:	9b01      	ldr	r3, [sp, #4]
 80144b2:	3b03      	subs	r3, #3
 80144b4:	4a0a      	ldr	r2, [pc, #40]	; (80144e0 <_close+0x4c>)
 80144b6:	2100      	movs	r1, #0
 80144b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    if (fhc == NULL) return -1;
 80144bc:	9b03      	ldr	r3, [sp, #12]
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d102      	bne.n	80144c8 <_close+0x34>
 80144c2:	f04f 33ff 	mov.w	r3, #4294967295
 80144c6:	e006      	b.n	80144d6 <_close+0x42>

    return fhc->close();
 80144c8:	9b03      	ldr	r3, [sp, #12]
 80144ca:	681b      	ldr	r3, [r3, #0]
 80144cc:	3304      	adds	r3, #4
 80144ce:	681b      	ldr	r3, [r3, #0]
 80144d0:	9803      	ldr	r0, [sp, #12]
 80144d2:	4798      	blx	r3
 80144d4:	4603      	mov	r3, r0
}
 80144d6:	4618      	mov	r0, r3
 80144d8:	b005      	add	sp, #20
 80144da:	f85d fb04 	ldr.w	pc, [sp], #4
 80144de:	bf00      	nop
 80144e0:	200017e0 	.word	0x200017e0

080144e4 <_write>:

#if defined(__ICCARM__)
extern "C" size_t    __write (int        fh, const unsigned char *buffer, size_t length) {
#else
extern "C" int PREFIX(_write)(FILEHANDLE fh, const unsigned char *buffer, unsigned int length, int mode) {
 80144e4:	b500      	push	{lr}
 80144e6:	b089      	sub	sp, #36	; 0x24
 80144e8:	9003      	str	r0, [sp, #12]
 80144ea:	9102      	str	r1, [sp, #8]
 80144ec:	9201      	str	r2, [sp, #4]
 80144ee:	9300      	str	r3, [sp, #0]
#endif
    int n; // n is the number of bytes written
    if (fh < 3) {
 80144f0:	9b03      	ldr	r3, [sp, #12]
 80144f2:	2b02      	cmp	r3, #2
 80144f4:	dc1a      	bgt.n	801452c <_write+0x48>
#if DEVICE_SERIAL
        if (!stdio_uart_inited) init_serial();
 80144f6:	4b1a      	ldr	r3, [pc, #104]	; (8014560 <_write+0x7c>)
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d101      	bne.n	8014502 <_write+0x1e>
 80144fe:	f7ff ffb9 	bl	8014474 <_ZL11init_serialv>
        for (unsigned int i = 0; i < length; i++) {
 8014502:	2300      	movs	r3, #0
 8014504:	9306      	str	r3, [sp, #24]
 8014506:	e00a      	b.n	801451e <_write+0x3a>
            serial_putc(&stdio_uart, buffer[i]);
 8014508:	9a02      	ldr	r2, [sp, #8]
 801450a:	9b06      	ldr	r3, [sp, #24]
 801450c:	4413      	add	r3, r2
 801450e:	781b      	ldrb	r3, [r3, #0]
 8014510:	4814      	ldr	r0, [pc, #80]	; (8014564 <_write+0x80>)
 8014512:	4619      	mov	r1, r3
 8014514:	f001 fe8a 	bl	801622c <serial_putc>
#endif
    int n; // n is the number of bytes written
    if (fh < 3) {
#if DEVICE_SERIAL
        if (!stdio_uart_inited) init_serial();
        for (unsigned int i = 0; i < length; i++) {
 8014518:	9b06      	ldr	r3, [sp, #24]
 801451a:	3301      	adds	r3, #1
 801451c:	9306      	str	r3, [sp, #24]
 801451e:	9a06      	ldr	r2, [sp, #24]
 8014520:	9b01      	ldr	r3, [sp, #4]
 8014522:	429a      	cmp	r2, r3
 8014524:	d3f0      	bcc.n	8014508 <_write+0x24>
            serial_putc(&stdio_uart, buffer[i]);
        }
#endif
        n = length;
 8014526:	9b01      	ldr	r3, [sp, #4]
 8014528:	9307      	str	r3, [sp, #28]
 801452a:	e013      	b.n	8014554 <_write+0x70>
    } else {
        FileHandle* fhc = filehandles[fh-3];
 801452c:	9b03      	ldr	r3, [sp, #12]
 801452e:	3b03      	subs	r3, #3
 8014530:	4a0d      	ldr	r2, [pc, #52]	; (8014568 <_write+0x84>)
 8014532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014536:	9305      	str	r3, [sp, #20]
        if (fhc == NULL) return -1;
 8014538:	9b05      	ldr	r3, [sp, #20]
 801453a:	2b00      	cmp	r3, #0
 801453c:	d102      	bne.n	8014544 <_write+0x60>
 801453e:	f04f 33ff 	mov.w	r3, #4294967295
 8014542:	e008      	b.n	8014556 <_write+0x72>

        n = fhc->write(buffer, length);
 8014544:	9b05      	ldr	r3, [sp, #20]
 8014546:	681b      	ldr	r3, [r3, #0]
 8014548:	681b      	ldr	r3, [r3, #0]
 801454a:	9805      	ldr	r0, [sp, #20]
 801454c:	9902      	ldr	r1, [sp, #8]
 801454e:	9a01      	ldr	r2, [sp, #4]
 8014550:	4798      	blx	r3
 8014552:	9007      	str	r0, [sp, #28]
    }
#ifdef __ARMCC_VERSION
    return length-n;
#else
    return n;
 8014554:	9b07      	ldr	r3, [sp, #28]
#endif
}
 8014556:	4618      	mov	r0, r3
 8014558:	b009      	add	sp, #36	; 0x24
 801455a:	f85d fb04 	ldr.w	pc, [sp], #4
 801455e:	bf00      	nop
 8014560:	20001afc 	.word	0x20001afc
 8014564:	20001bfc 	.word	0x20001bfc
 8014568:	200017e0 	.word	0x200017e0

0801456c <_read>:

#if defined(__ICCARM__)
extern "C" size_t    __read (int        fh, unsigned char *buffer, size_t       length) {
#else
extern "C" int PREFIX(_read)(FILEHANDLE fh, unsigned char *buffer, unsigned int length, int mode) {
 801456c:	b500      	push	{lr}
 801456e:	b087      	sub	sp, #28
 8014570:	9003      	str	r0, [sp, #12]
 8014572:	9102      	str	r1, [sp, #8]
 8014574:	9201      	str	r2, [sp, #4]
 8014576:	9300      	str	r3, [sp, #0]
#endif
    int n; // n is the number of bytes read
    if (fh < 3) {
 8014578:	9b03      	ldr	r3, [sp, #12]
 801457a:	2b02      	cmp	r3, #2
 801457c:	dc0f      	bgt.n	801459e <_read+0x32>
        // only read a character at a time from stdin
#if DEVICE_SERIAL
        if (!stdio_uart_inited) init_serial();
 801457e:	4b15      	ldr	r3, [pc, #84]	; (80145d4 <_read+0x68>)
 8014580:	681b      	ldr	r3, [r3, #0]
 8014582:	2b00      	cmp	r3, #0
 8014584:	d101      	bne.n	801458a <_read+0x1e>
 8014586:	f7ff ff75 	bl	8014474 <_ZL11init_serialv>
        *buffer = serial_getc(&stdio_uart);
 801458a:	4813      	ldr	r0, [pc, #76]	; (80145d8 <_read+0x6c>)
 801458c:	f001 fe38 	bl	8016200 <serial_getc>
 8014590:	4603      	mov	r3, r0
 8014592:	b2da      	uxtb	r2, r3
 8014594:	9b02      	ldr	r3, [sp, #8]
 8014596:	701a      	strb	r2, [r3, #0]
#endif
        n = 1;
 8014598:	2301      	movs	r3, #1
 801459a:	9305      	str	r3, [sp, #20]
 801459c:	e014      	b.n	80145c8 <_read+0x5c>
    } else {
        FileHandle* fhc = filehandles[fh-3];
 801459e:	9b03      	ldr	r3, [sp, #12]
 80145a0:	3b03      	subs	r3, #3
 80145a2:	4a0e      	ldr	r2, [pc, #56]	; (80145dc <_read+0x70>)
 80145a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80145a8:	9304      	str	r3, [sp, #16]
        if (fhc == NULL) return -1;
 80145aa:	9b04      	ldr	r3, [sp, #16]
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d102      	bne.n	80145b6 <_read+0x4a>
 80145b0:	f04f 33ff 	mov.w	r3, #4294967295
 80145b4:	e009      	b.n	80145ca <_read+0x5e>

        n = fhc->read(buffer, length);
 80145b6:	9b04      	ldr	r3, [sp, #16]
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	3308      	adds	r3, #8
 80145bc:	681b      	ldr	r3, [r3, #0]
 80145be:	9804      	ldr	r0, [sp, #16]
 80145c0:	9902      	ldr	r1, [sp, #8]
 80145c2:	9a01      	ldr	r2, [sp, #4]
 80145c4:	4798      	blx	r3
 80145c6:	9005      	str	r0, [sp, #20]
    }
#ifdef __ARMCC_VERSION
    return length-n;
#else
    return n;
 80145c8:	9b05      	ldr	r3, [sp, #20]
#endif
}
 80145ca:	4618      	mov	r0, r3
 80145cc:	b007      	add	sp, #28
 80145ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80145d2:	bf00      	nop
 80145d4:	20001afc 	.word	0x20001afc
 80145d8:	20001bfc 	.word	0x20001bfc
 80145dc:	200017e0 	.word	0x200017e0

080145e0 <_isatty>:
#ifdef __ARMCC_VERSION
extern "C" int PREFIX(_istty)(FILEHANDLE fh)
#else
extern "C" int _isatty(FILEHANDLE fh)
#endif
{
 80145e0:	b500      	push	{lr}
 80145e2:	b085      	sub	sp, #20
 80145e4:	9001      	str	r0, [sp, #4]
    /* stdin, stdout and stderr should be tty */
    if (fh < 3) return 1;
 80145e6:	9b01      	ldr	r3, [sp, #4]
 80145e8:	2b02      	cmp	r3, #2
 80145ea:	dc01      	bgt.n	80145f0 <_isatty+0x10>
 80145ec:	2301      	movs	r3, #1
 80145ee:	e012      	b.n	8014616 <_isatty+0x36>

    FileHandle* fhc = filehandles[fh-3];
 80145f0:	9b01      	ldr	r3, [sp, #4]
 80145f2:	3b03      	subs	r3, #3
 80145f4:	4a0a      	ldr	r2, [pc, #40]	; (8014620 <_isatty+0x40>)
 80145f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80145fa:	9303      	str	r3, [sp, #12]
    if (fhc == NULL) return -1;
 80145fc:	9b03      	ldr	r3, [sp, #12]
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d102      	bne.n	8014608 <_isatty+0x28>
 8014602:	f04f 33ff 	mov.w	r3, #4294967295
 8014606:	e006      	b.n	8014616 <_isatty+0x36>

    return fhc->isatty();
 8014608:	9b03      	ldr	r3, [sp, #12]
 801460a:	681b      	ldr	r3, [r3, #0]
 801460c:	330c      	adds	r3, #12
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	9803      	ldr	r0, [sp, #12]
 8014612:	4798      	blx	r3
 8014614:	4603      	mov	r3, r0
}
 8014616:	4618      	mov	r0, r3
 8014618:	b005      	add	sp, #20
 801461a:	f85d fb04 	ldr.w	pc, [sp], #4
 801461e:	bf00      	nop
 8014620:	200017e0 	.word	0x200017e0

08014624 <_lseek>:
#elif defined(__ICCARM__)
long __lseek(int fh, long offset, int whence)
#else
int _lseek(FILEHANDLE fh, int offset, int whence)
#endif
{
 8014624:	b500      	push	{lr}
 8014626:	b087      	sub	sp, #28
 8014628:	9003      	str	r0, [sp, #12]
 801462a:	9102      	str	r1, [sp, #8]
 801462c:	9201      	str	r2, [sp, #4]
    if (fh < 3) return 0;
 801462e:	9b03      	ldr	r3, [sp, #12]
 8014630:	2b02      	cmp	r3, #2
 8014632:	dc01      	bgt.n	8014638 <_lseek+0x14>
 8014634:	2300      	movs	r3, #0
 8014636:	e014      	b.n	8014662 <_lseek+0x3e>

    FileHandle* fhc = filehandles[fh-3];
 8014638:	9b03      	ldr	r3, [sp, #12]
 801463a:	3b03      	subs	r3, #3
 801463c:	4a0b      	ldr	r2, [pc, #44]	; (801466c <_lseek+0x48>)
 801463e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014642:	9305      	str	r3, [sp, #20]
    if (fhc == NULL) return -1;
 8014644:	9b05      	ldr	r3, [sp, #20]
 8014646:	2b00      	cmp	r3, #0
 8014648:	d102      	bne.n	8014650 <_lseek+0x2c>
 801464a:	f04f 33ff 	mov.w	r3, #4294967295
 801464e:	e008      	b.n	8014662 <_lseek+0x3e>

#if defined(__ARMCC_VERSION)
    return fhc->lseek(position, SEEK_SET);
#else
    return fhc->lseek(offset, whence);
 8014650:	9b05      	ldr	r3, [sp, #20]
 8014652:	681b      	ldr	r3, [r3, #0]
 8014654:	3310      	adds	r3, #16
 8014656:	681b      	ldr	r3, [r3, #0]
 8014658:	9805      	ldr	r0, [sp, #20]
 801465a:	9902      	ldr	r1, [sp, #8]
 801465c:	9a01      	ldr	r2, [sp, #4]
 801465e:	4798      	blx	r3
 8014660:	4603      	mov	r3, r0
#endif
}
 8014662:	4618      	mov	r0, r3
 8014664:	b007      	add	sp, #28
 8014666:	f85d fb04 	ldr.w	pc, [sp], #4
 801466a:	bf00      	nop
 801466c:	200017e0 	.word	0x200017e0

08014670 <_fstat>:
}
#endif


#if !defined(__ARMCC_VERSION) && !defined(__ICCARM__)
extern "C" int _fstat(int fd, struct stat *st) {
 8014670:	b500      	push	{lr}
 8014672:	b083      	sub	sp, #12
 8014674:	9001      	str	r0, [sp, #4]
 8014676:	9100      	str	r1, [sp, #0]
    if ((STDOUT_FILENO == fd) || (STDERR_FILENO == fd) || (STDIN_FILENO == fd)) {
 8014678:	9b01      	ldr	r3, [sp, #4]
 801467a:	2b01      	cmp	r3, #1
 801467c:	d005      	beq.n	801468a <_fstat+0x1a>
 801467e:	9b01      	ldr	r3, [sp, #4]
 8014680:	2b02      	cmp	r3, #2
 8014682:	d002      	beq.n	801468a <_fstat+0x1a>
 8014684:	9b01      	ldr	r3, [sp, #4]
 8014686:	2b00      	cmp	r3, #0
 8014688:	d105      	bne.n	8014696 <_fstat+0x26>
        st->st_mode = S_IFCHR;
 801468a:	9b00      	ldr	r3, [sp, #0]
 801468c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8014690:	605a      	str	r2, [r3, #4]
        return  0;
 8014692:	2300      	movs	r3, #0
 8014694:	e006      	b.n	80146a4 <_fstat+0x34>
    }

    errno = EBADF;
 8014696:	f002 f8d5 	bl	8016844 <__errno>
 801469a:	4602      	mov	r2, r0
 801469c:	2309      	movs	r3, #9
 801469e:	6013      	str	r3, [r2, #0]
    return -1;
 80146a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80146a4:	4618      	mov	r0, r3
 80146a6:	b003      	add	sp, #12
 80146a8:	f85d fb04 	ldr.w	pc, [sp], #4

080146ac <mbed_main>:
// mbed_main(), it is not meant for user code, but for the SDK itself to perform
// initializations before main() is called.

extern "C" WEAK void mbed_main(void);
extern "C" WEAK void mbed_main(void) {
}
 80146ac:	4770      	bx	lr
 80146ae:	bf00      	nop

080146b0 <mbed_sdk_init>:

extern "C" WEAK void mbed_sdk_init(void);
extern "C" WEAK void mbed_sdk_init(void) {
}
 80146b0:	4770      	bx	lr
 80146b2:	bf00      	nop

080146b4 <__wrap_main>:
    return $Super$$main();
}
#elif defined(TOOLCHAIN_GCC)
extern "C" int __real_main(void);

extern "C" int __wrap_main(void) {
 80146b4:	b508      	push	{r3, lr}
    mbed_sdk_init();
 80146b6:	f7ff fffb 	bl	80146b0 <mbed_sdk_init>
    mbed_main();
 80146ba:	f7ff fff7 	bl	80146ac <mbed_main>
    return __real_main();
 80146be:	f7eb feb3 	bl	8000428 <main>
 80146c2:	4603      	mov	r3, r0
}
 80146c4:	4618      	mov	r0, r3
 80146c6:	bd08      	pop	{r3, pc}

080146c8 <_sbrk>:

// For ARM7 only
register unsigned char * stack_ptr __asm ("sp");

// Dynamic memory allocation related syscall.
extern "C" caddr_t _sbrk(int incr) {
 80146c8:	b410      	push	{r4}
 80146ca:	b085      	sub	sp, #20
 80146cc:	9001      	str	r0, [sp, #4]
    static unsigned char* heap = (unsigned char*)&__end__;
    unsigned char*        prev_heap = heap;
 80146ce:	4b12      	ldr	r3, [pc, #72]	; (8014718 <_sbrk+0x50>)
 80146d0:	681b      	ldr	r3, [r3, #0]
 80146d2:	9303      	str	r3, [sp, #12]
    unsigned char*        new_heap = heap + incr;
 80146d4:	4b10      	ldr	r3, [pc, #64]	; (8014718 <_sbrk+0x50>)
 80146d6:	681a      	ldr	r2, [r3, #0]
 80146d8:	9b01      	ldr	r3, [sp, #4]
 80146da:	4413      	add	r3, r2
 80146dc:	9302      	str	r3, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 80146de:	f3ef 8308 	mrs	r3, MSP
 80146e2:	461c      	mov	r4, r3
  return(result);
 80146e4:	4623      	mov	r3, r4
#if defined(TARGET_ARM7)
    if (new_heap >= stack_ptr) {
#elif defined(TARGET_CORTEX_A)
    if (new_heap >= (unsigned char*)&__HeapLimit) {     /* __HeapLimit is end of heap section */
#else
    if (new_heap >= (unsigned char*)__get_MSP()) {
 80146e6:	461a      	mov	r2, r3
 80146e8:	9b02      	ldr	r3, [sp, #8]
 80146ea:	429a      	cmp	r2, r3
 80146ec:	bf94      	ite	ls
 80146ee:	2301      	movls	r3, #1
 80146f0:	2300      	movhi	r3, #0
 80146f2:	b2db      	uxtb	r3, r3
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d005      	beq.n	8014704 <_sbrk+0x3c>
#endif
        errno = ENOMEM;
 80146f8:	4b08      	ldr	r3, [pc, #32]	; (801471c <_sbrk+0x54>)
 80146fa:	220c      	movs	r2, #12
 80146fc:	601a      	str	r2, [r3, #0]
        return (caddr_t)-1;
 80146fe:	f04f 33ff 	mov.w	r3, #4294967295
 8014702:	e003      	b.n	801470c <_sbrk+0x44>
    }

    heap = new_heap;
 8014704:	4a04      	ldr	r2, [pc, #16]	; (8014718 <_sbrk+0x50>)
 8014706:	9b02      	ldr	r3, [sp, #8]
 8014708:	6013      	str	r3, [r2, #0]
    return (caddr_t) prev_heap;
 801470a:	9b03      	ldr	r3, [sp, #12]
}
 801470c:	4618      	mov	r0, r3
 801470e:	b005      	add	sp, #20
 8014710:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014714:	4770      	bx	lr
 8014716:	bf00      	nop
 8014718:	200016c4 	.word	0x200016c4
 801471c:	20001c18 	.word	0x20001c18

08014720 <_exit>:

#ifdef TOOLCHAIN_GCC_CW
// TODO: Ideally, we would like to define directly "_ExitProcess"
extern "C" void mbed_exit(int return_code) {
#elif defined TOOLCHAIN_GCC_ARM
extern "C" void _exit(int return_code) {
 8014720:	b500      	push	{lr}
 8014722:	b083      	sub	sp, #12
 8014724:	9001      	str	r0, [sp, #4]
namespace std {
extern "C" void exit(int return_code) {
#endif

#if DEVICE_STDIO_MESSAGES
    fflush(stdout);
 8014726:	4b09      	ldr	r3, [pc, #36]	; (801474c <_exit+0x2c>)
 8014728:	681b      	ldr	r3, [r3, #0]
 801472a:	689b      	ldr	r3, [r3, #8]
 801472c:	4618      	mov	r0, r3
 801472e:	f002 f951 	bl	80169d4 <fflush>
    fflush(stderr);
 8014732:	4b06      	ldr	r3, [pc, #24]	; (801474c <_exit+0x2c>)
 8014734:	681b      	ldr	r3, [r3, #0]
 8014736:	68db      	ldr	r3, [r3, #12]
 8014738:	4618      	mov	r0, r3
 801473a:	f002 f94b 	bl	80169d4 <fflush>
#if DEVICE_SEMIHOST
    if (mbed_interface_connected()) {
        semihost_exit();
    }
#endif
    if (return_code) {
 801473e:	9b01      	ldr	r3, [sp, #4]
 8014740:	2b00      	cmp	r3, #0
 8014742:	d001      	beq.n	8014748 <_exit+0x28>
        mbed_die();
 8014744:	f7ff fe68 	bl	8014418 <mbed_die>

#ifdef TOOLCHAIN_GCC_CW
// TODO: Ideally, we would like to define directly "_ExitProcess"
extern "C" void mbed_exit(int return_code) {
#elif defined TOOLCHAIN_GCC_ARM
extern "C" void _exit(int return_code) {
 8014748:	e7fe      	b.n	8014748 <_exit+0x28>
 801474a:	bf00      	nop
 801474c:	20001768 	.word	0x20001768

08014750 <HAL_RCC_OscConfig>:
 8014750:	6803      	ldr	r3, [r0, #0]
 8014752:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014754:	07de      	lsls	r6, r3, #31
 8014756:	b085      	sub	sp, #20
 8014758:	4605      	mov	r5, r0
 801475a:	d551      	bpl.n	8014800 <HAL_RCC_OscConfig+0xb0>
 801475c:	49a9      	ldr	r1, [pc, #676]	; (8014a04 <HAL_RCC_OscConfig+0x2b4>)
 801475e:	688a      	ldr	r2, [r1, #8]
 8014760:	f002 020c 	and.w	r2, r2, #12
 8014764:	2a04      	cmp	r2, #4
 8014766:	f000 8130 	beq.w	80149ca <HAL_RCC_OscConfig+0x27a>
 801476a:	688a      	ldr	r2, [r1, #8]
 801476c:	f002 020c 	and.w	r2, r2, #12
 8014770:	2a08      	cmp	r2, #8
 8014772:	f000 8126 	beq.w	80149c2 <HAL_RCC_OscConfig+0x272>
 8014776:	4ba3      	ldr	r3, [pc, #652]	; (8014a04 <HAL_RCC_OscConfig+0x2b4>)
 8014778:	681a      	ldr	r2, [r3, #0]
 801477a:	461c      	mov	r4, r3
 801477c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8014780:	601a      	str	r2, [r3, #0]
 8014782:	681a      	ldr	r2, [r3, #0]
 8014784:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8014788:	601a      	str	r2, [r3, #0]
 801478a:	681a      	ldr	r2, [r3, #0]
 801478c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8014790:	601a      	str	r2, [r3, #0]
 8014792:	f000 fbe3 	bl	8014f5c <HAL_GetTick>
 8014796:	4606      	mov	r6, r0
 8014798:	e006      	b.n	80147a8 <HAL_RCC_OscConfig+0x58>
 801479a:	f000 fbdf 	bl	8014f5c <HAL_GetTick>
 801479e:	1b80      	subs	r0, r0, r6
 80147a0:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 80147a4:	f200 80fc 	bhi.w	80149a0 <HAL_RCC_OscConfig+0x250>
 80147a8:	6823      	ldr	r3, [r4, #0]
 80147aa:	4a96      	ldr	r2, [pc, #600]	; (8014a04 <HAL_RCC_OscConfig+0x2b4>)
 80147ac:	0399      	lsls	r1, r3, #14
 80147ae:	d4f4      	bmi.n	801479a <HAL_RCC_OscConfig+0x4a>
 80147b0:	6813      	ldr	r3, [r2, #0]
 80147b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80147b6:	6013      	str	r3, [r2, #0]
 80147b8:	686b      	ldr	r3, [r5, #4]
 80147ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80147be:	f000 814c 	beq.w	8014a5a <HAL_RCC_OscConfig+0x30a>
 80147c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80147c6:	f000 81aa 	beq.w	8014b1e <HAL_RCC_OscConfig+0x3ce>
 80147ca:	6811      	ldr	r1, [r2, #0]
 80147cc:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80147d0:	6011      	str	r1, [r2, #0]
 80147d2:	6811      	ldr	r1, [r2, #0]
 80147d4:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80147d8:	6011      	str	r1, [r2, #0]
 80147da:	2b00      	cmp	r3, #0
 80147dc:	f040 8145 	bne.w	8014a6a <HAL_RCC_OscConfig+0x31a>
 80147e0:	4614      	mov	r4, r2
 80147e2:	f000 fbbb 	bl	8014f5c <HAL_GetTick>
 80147e6:	4606      	mov	r6, r0
 80147e8:	e006      	b.n	80147f8 <HAL_RCC_OscConfig+0xa8>
 80147ea:	f000 fbb7 	bl	8014f5c <HAL_GetTick>
 80147ee:	1b80      	subs	r0, r0, r6
 80147f0:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 80147f4:	f200 80d4 	bhi.w	80149a0 <HAL_RCC_OscConfig+0x250>
 80147f8:	6823      	ldr	r3, [r4, #0]
 80147fa:	039b      	lsls	r3, r3, #14
 80147fc:	d4f5      	bmi.n	80147ea <HAL_RCC_OscConfig+0x9a>
 80147fe:	682b      	ldr	r3, [r5, #0]
 8014800:	079f      	lsls	r7, r3, #30
 8014802:	d532      	bpl.n	801486a <HAL_RCC_OscConfig+0x11a>
 8014804:	4a7f      	ldr	r2, [pc, #508]	; (8014a04 <HAL_RCC_OscConfig+0x2b4>)
 8014806:	6891      	ldr	r1, [r2, #8]
 8014808:	f011 0f0c 	tst.w	r1, #12
 801480c:	f000 80cf 	beq.w	80149ae <HAL_RCC_OscConfig+0x25e>
 8014810:	6891      	ldr	r1, [r2, #8]
 8014812:	f001 010c 	and.w	r1, r1, #12
 8014816:	2908      	cmp	r1, #8
 8014818:	f000 80c5 	beq.w	80149a6 <HAL_RCC_OscConfig+0x256>
 801481c:	68eb      	ldr	r3, [r5, #12]
 801481e:	2b00      	cmp	r3, #0
 8014820:	f000 8107 	beq.w	8014a32 <HAL_RCC_OscConfig+0x2e2>
 8014824:	4b77      	ldr	r3, [pc, #476]	; (8014a04 <HAL_RCC_OscConfig+0x2b4>)
 8014826:	681a      	ldr	r2, [r3, #0]
 8014828:	461c      	mov	r4, r3
 801482a:	f042 0201 	orr.w	r2, r2, #1
 801482e:	601a      	str	r2, [r3, #0]
 8014830:	f000 fb94 	bl	8014f5c <HAL_GetTick>
 8014834:	4606      	mov	r6, r0
 8014836:	e005      	b.n	8014844 <HAL_RCC_OscConfig+0xf4>
 8014838:	f000 fb90 	bl	8014f5c <HAL_GetTick>
 801483c:	1b80      	subs	r0, r0, r6
 801483e:	2864      	cmp	r0, #100	; 0x64
 8014840:	f200 80ae 	bhi.w	80149a0 <HAL_RCC_OscConfig+0x250>
 8014844:	6823      	ldr	r3, [r4, #0]
 8014846:	4a6f      	ldr	r2, [pc, #444]	; (8014a04 <HAL_RCC_OscConfig+0x2b4>)
 8014848:	0798      	lsls	r0, r3, #30
 801484a:	d5f5      	bpl.n	8014838 <HAL_RCC_OscConfig+0xe8>
 801484c:	6811      	ldr	r1, [r2, #0]
 801484e:	23f8      	movs	r3, #248	; 0xf8
 8014850:	fa93 f3a3 	rbit	r3, r3
 8014854:	fab3 f383 	clz	r3, r3
 8014858:	b2db      	uxtb	r3, r3
 801485a:	6928      	ldr	r0, [r5, #16]
 801485c:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 8014860:	4098      	lsls	r0, r3
 8014862:	ea40 0301 	orr.w	r3, r0, r1
 8014866:	6013      	str	r3, [r2, #0]
 8014868:	682b      	ldr	r3, [r5, #0]
 801486a:	071a      	lsls	r2, r3, #28
 801486c:	d421      	bmi.n	80148b2 <HAL_RCC_OscConfig+0x162>
 801486e:	075c      	lsls	r4, r3, #29
 8014870:	d438      	bmi.n	80148e4 <HAL_RCC_OscConfig+0x194>
 8014872:	69aa      	ldr	r2, [r5, #24]
 8014874:	b1d2      	cbz	r2, 80148ac <HAL_RCC_OscConfig+0x15c>
 8014876:	4b63      	ldr	r3, [pc, #396]	; (8014a04 <HAL_RCC_OscConfig+0x2b4>)
 8014878:	6899      	ldr	r1, [r3, #8]
 801487a:	f001 010c 	and.w	r1, r1, #12
 801487e:	2908      	cmp	r1, #8
 8014880:	f000 809c 	beq.w	80149bc <HAL_RCC_OscConfig+0x26c>
 8014884:	2a02      	cmp	r2, #2
 8014886:	681a      	ldr	r2, [r3, #0]
 8014888:	461c      	mov	r4, r3
 801488a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 801488e:	601a      	str	r2, [r3, #0]
 8014890:	f000 80fa 	beq.w	8014a88 <HAL_RCC_OscConfig+0x338>
 8014894:	f000 fb62 	bl	8014f5c <HAL_GetTick>
 8014898:	4605      	mov	r5, r0
 801489a:	e004      	b.n	80148a6 <HAL_RCC_OscConfig+0x156>
 801489c:	f000 fb5e 	bl	8014f5c <HAL_GetTick>
 80148a0:	1b40      	subs	r0, r0, r5
 80148a2:	2864      	cmp	r0, #100	; 0x64
 80148a4:	d87c      	bhi.n	80149a0 <HAL_RCC_OscConfig+0x250>
 80148a6:	6823      	ldr	r3, [r4, #0]
 80148a8:	019b      	lsls	r3, r3, #6
 80148aa:	d4f7      	bmi.n	801489c <HAL_RCC_OscConfig+0x14c>
 80148ac:	2000      	movs	r0, #0
 80148ae:	b005      	add	sp, #20
 80148b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148b2:	696b      	ldr	r3, [r5, #20]
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	f000 8092 	beq.w	80149de <HAL_RCC_OscConfig+0x28e>
 80148ba:	4b52      	ldr	r3, [pc, #328]	; (8014a04 <HAL_RCC_OscConfig+0x2b4>)
 80148bc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80148be:	461c      	mov	r4, r3
 80148c0:	f042 0201 	orr.w	r2, r2, #1
 80148c4:	675a      	str	r2, [r3, #116]	; 0x74
 80148c6:	f000 fb49 	bl	8014f5c <HAL_GetTick>
 80148ca:	4606      	mov	r6, r0
 80148cc:	e004      	b.n	80148d8 <HAL_RCC_OscConfig+0x188>
 80148ce:	f000 fb45 	bl	8014f5c <HAL_GetTick>
 80148d2:	1b80      	subs	r0, r0, r6
 80148d4:	2864      	cmp	r0, #100	; 0x64
 80148d6:	d863      	bhi.n	80149a0 <HAL_RCC_OscConfig+0x250>
 80148d8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80148da:	079b      	lsls	r3, r3, #30
 80148dc:	d5f7      	bpl.n	80148ce <HAL_RCC_OscConfig+0x17e>
 80148de:	682b      	ldr	r3, [r5, #0]
 80148e0:	075c      	lsls	r4, r3, #29
 80148e2:	d5c6      	bpl.n	8014872 <HAL_RCC_OscConfig+0x122>
 80148e4:	4a47      	ldr	r2, [pc, #284]	; (8014a04 <HAL_RCC_OscConfig+0x2b4>)
 80148e6:	4b48      	ldr	r3, [pc, #288]	; (8014a08 <HAL_RCC_OscConfig+0x2b8>)
 80148e8:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80148ea:	461c      	mov	r4, r3
 80148ec:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80148f0:	6411      	str	r1, [r2, #64]	; 0x40
 80148f2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80148f4:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80148f8:	9203      	str	r2, [sp, #12]
 80148fa:	9a03      	ldr	r2, [sp, #12]
 80148fc:	681a      	ldr	r2, [r3, #0]
 80148fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8014902:	601a      	str	r2, [r3, #0]
 8014904:	f000 fb2a 	bl	8014f5c <HAL_GetTick>
 8014908:	4606      	mov	r6, r0
 801490a:	e004      	b.n	8014916 <HAL_RCC_OscConfig+0x1c6>
 801490c:	f000 fb26 	bl	8014f5c <HAL_GetTick>
 8014910:	1b80      	subs	r0, r0, r6
 8014912:	2864      	cmp	r0, #100	; 0x64
 8014914:	d844      	bhi.n	80149a0 <HAL_RCC_OscConfig+0x250>
 8014916:	6823      	ldr	r3, [r4, #0]
 8014918:	05d8      	lsls	r0, r3, #23
 801491a:	d5f7      	bpl.n	801490c <HAL_RCC_OscConfig+0x1bc>
 801491c:	4b39      	ldr	r3, [pc, #228]	; (8014a04 <HAL_RCC_OscConfig+0x2b4>)
 801491e:	f241 3788 	movw	r7, #5000	; 0x1388
 8014922:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8014924:	461c      	mov	r4, r3
 8014926:	f022 0201 	bic.w	r2, r2, #1
 801492a:	671a      	str	r2, [r3, #112]	; 0x70
 801492c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801492e:	f022 0204 	bic.w	r2, r2, #4
 8014932:	671a      	str	r2, [r3, #112]	; 0x70
 8014934:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8014936:	f022 0201 	bic.w	r2, r2, #1
 801493a:	671a      	str	r2, [r3, #112]	; 0x70
 801493c:	f000 fb0e 	bl	8014f5c <HAL_GetTick>
 8014940:	4606      	mov	r6, r0
 8014942:	e004      	b.n	801494e <HAL_RCC_OscConfig+0x1fe>
 8014944:	f000 fb0a 	bl	8014f5c <HAL_GetTick>
 8014948:	1b80      	subs	r0, r0, r6
 801494a:	42b8      	cmp	r0, r7
 801494c:	d828      	bhi.n	80149a0 <HAL_RCC_OscConfig+0x250>
 801494e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8014950:	4a2c      	ldr	r2, [pc, #176]	; (8014a04 <HAL_RCC_OscConfig+0x2b4>)
 8014952:	0799      	lsls	r1, r3, #30
 8014954:	d4f6      	bmi.n	8014944 <HAL_RCC_OscConfig+0x1f4>
 8014956:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8014958:	f023 0301 	bic.w	r3, r3, #1
 801495c:	6713      	str	r3, [r2, #112]	; 0x70
 801495e:	68ab      	ldr	r3, [r5, #8]
 8014960:	2b01      	cmp	r3, #1
 8014962:	f000 80e5 	beq.w	8014b30 <HAL_RCC_OscConfig+0x3e0>
 8014966:	2b05      	cmp	r3, #5
 8014968:	f000 80fa 	beq.w	8014b60 <HAL_RCC_OscConfig+0x410>
 801496c:	6f11      	ldr	r1, [r2, #112]	; 0x70
 801496e:	f021 0104 	bic.w	r1, r1, #4
 8014972:	6711      	str	r1, [r2, #112]	; 0x70
 8014974:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8014976:	f021 0101 	bic.w	r1, r1, #1
 801497a:	6711      	str	r1, [r2, #112]	; 0x70
 801497c:	2b00      	cmp	r3, #0
 801497e:	f040 80df 	bne.w	8014b40 <HAL_RCC_OscConfig+0x3f0>
 8014982:	4614      	mov	r4, r2
 8014984:	f241 3688 	movw	r6, #5000	; 0x1388
 8014988:	f000 fae8 	bl	8014f5c <HAL_GetTick>
 801498c:	4607      	mov	r7, r0
 801498e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8014990:	0798      	lsls	r0, r3, #30
 8014992:	f57f af6e 	bpl.w	8014872 <HAL_RCC_OscConfig+0x122>
 8014996:	f000 fae1 	bl	8014f5c <HAL_GetTick>
 801499a:	1bc0      	subs	r0, r0, r7
 801499c:	42b0      	cmp	r0, r6
 801499e:	d9f6      	bls.n	801498e <HAL_RCC_OscConfig+0x23e>
 80149a0:	2003      	movs	r0, #3
 80149a2:	b005      	add	sp, #20
 80149a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80149a6:	6852      	ldr	r2, [r2, #4]
 80149a8:	0256      	lsls	r6, r2, #9
 80149aa:	f53f af37 	bmi.w	801481c <HAL_RCC_OscConfig+0xcc>
 80149ae:	4a15      	ldr	r2, [pc, #84]	; (8014a04 <HAL_RCC_OscConfig+0x2b4>)
 80149b0:	6812      	ldr	r2, [r2, #0]
 80149b2:	0794      	lsls	r4, r2, #30
 80149b4:	d52a      	bpl.n	8014a0c <HAL_RCC_OscConfig+0x2bc>
 80149b6:	68ea      	ldr	r2, [r5, #12]
 80149b8:	2a01      	cmp	r2, #1
 80149ba:	d027      	beq.n	8014a0c <HAL_RCC_OscConfig+0x2bc>
 80149bc:	2001      	movs	r0, #1
 80149be:	b005      	add	sp, #20
 80149c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80149c2:	684a      	ldr	r2, [r1, #4]
 80149c4:	0254      	lsls	r4, r2, #9
 80149c6:	f57f aed6 	bpl.w	8014776 <HAL_RCC_OscConfig+0x26>
 80149ca:	4a0e      	ldr	r2, [pc, #56]	; (8014a04 <HAL_RCC_OscConfig+0x2b4>)
 80149cc:	6812      	ldr	r2, [r2, #0]
 80149ce:	0390      	lsls	r0, r2, #14
 80149d0:	f57f af16 	bpl.w	8014800 <HAL_RCC_OscConfig+0xb0>
 80149d4:	686a      	ldr	r2, [r5, #4]
 80149d6:	2a00      	cmp	r2, #0
 80149d8:	f47f af12 	bne.w	8014800 <HAL_RCC_OscConfig+0xb0>
 80149dc:	e7ee      	b.n	80149bc <HAL_RCC_OscConfig+0x26c>
 80149de:	4b09      	ldr	r3, [pc, #36]	; (8014a04 <HAL_RCC_OscConfig+0x2b4>)
 80149e0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80149e2:	461c      	mov	r4, r3
 80149e4:	f022 0201 	bic.w	r2, r2, #1
 80149e8:	675a      	str	r2, [r3, #116]	; 0x74
 80149ea:	f000 fab7 	bl	8014f5c <HAL_GetTick>
 80149ee:	4606      	mov	r6, r0
 80149f0:	e004      	b.n	80149fc <HAL_RCC_OscConfig+0x2ac>
 80149f2:	f000 fab3 	bl	8014f5c <HAL_GetTick>
 80149f6:	1b80      	subs	r0, r0, r6
 80149f8:	2864      	cmp	r0, #100	; 0x64
 80149fa:	d8d1      	bhi.n	80149a0 <HAL_RCC_OscConfig+0x250>
 80149fc:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80149fe:	079f      	lsls	r7, r3, #30
 8014a00:	d4f7      	bmi.n	80149f2 <HAL_RCC_OscConfig+0x2a2>
 8014a02:	e76c      	b.n	80148de <HAL_RCC_OscConfig+0x18e>
 8014a04:	40023800 	.word	0x40023800
 8014a08:	40007000 	.word	0x40007000
 8014a0c:	4c59      	ldr	r4, [pc, #356]	; (8014b74 <HAL_RCC_OscConfig+0x424>)
 8014a0e:	22f8      	movs	r2, #248	; 0xf8
 8014a10:	6821      	ldr	r1, [r4, #0]
 8014a12:	fa92 f2a2 	rbit	r2, r2
 8014a16:	fab2 f282 	clz	r2, r2
 8014a1a:	b2d2      	uxtb	r2, r2
 8014a1c:	6928      	ldr	r0, [r5, #16]
 8014a1e:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 8014a22:	4090      	lsls	r0, r2
 8014a24:	ea40 0201 	orr.w	r2, r0, r1
 8014a28:	6022      	str	r2, [r4, #0]
 8014a2a:	071a      	lsls	r2, r3, #28
 8014a2c:	f57f af1f 	bpl.w	801486e <HAL_RCC_OscConfig+0x11e>
 8014a30:	e73f      	b.n	80148b2 <HAL_RCC_OscConfig+0x162>
 8014a32:	4b50      	ldr	r3, [pc, #320]	; (8014b74 <HAL_RCC_OscConfig+0x424>)
 8014a34:	681a      	ldr	r2, [r3, #0]
 8014a36:	461c      	mov	r4, r3
 8014a38:	f022 0201 	bic.w	r2, r2, #1
 8014a3c:	601a      	str	r2, [r3, #0]
 8014a3e:	f000 fa8d 	bl	8014f5c <HAL_GetTick>
 8014a42:	4606      	mov	r6, r0
 8014a44:	e004      	b.n	8014a50 <HAL_RCC_OscConfig+0x300>
 8014a46:	f000 fa89 	bl	8014f5c <HAL_GetTick>
 8014a4a:	1b80      	subs	r0, r0, r6
 8014a4c:	2864      	cmp	r0, #100	; 0x64
 8014a4e:	d8a7      	bhi.n	80149a0 <HAL_RCC_OscConfig+0x250>
 8014a50:	6823      	ldr	r3, [r4, #0]
 8014a52:	0799      	lsls	r1, r3, #30
 8014a54:	d4f7      	bmi.n	8014a46 <HAL_RCC_OscConfig+0x2f6>
 8014a56:	682b      	ldr	r3, [r5, #0]
 8014a58:	e707      	b.n	801486a <HAL_RCC_OscConfig+0x11a>
 8014a5a:	6813      	ldr	r3, [r2, #0]
 8014a5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8014a60:	6013      	str	r3, [r2, #0]
 8014a62:	6813      	ldr	r3, [r2, #0]
 8014a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014a68:	6013      	str	r3, [r2, #0]
 8014a6a:	f000 fa77 	bl	8014f5c <HAL_GetTick>
 8014a6e:	4c41      	ldr	r4, [pc, #260]	; (8014b74 <HAL_RCC_OscConfig+0x424>)
 8014a70:	4606      	mov	r6, r0
 8014a72:	e005      	b.n	8014a80 <HAL_RCC_OscConfig+0x330>
 8014a74:	f000 fa72 	bl	8014f5c <HAL_GetTick>
 8014a78:	1b80      	subs	r0, r0, r6
 8014a7a:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8014a7e:	d88f      	bhi.n	80149a0 <HAL_RCC_OscConfig+0x250>
 8014a80:	6823      	ldr	r3, [r4, #0]
 8014a82:	039a      	lsls	r2, r3, #14
 8014a84:	d5f6      	bpl.n	8014a74 <HAL_RCC_OscConfig+0x324>
 8014a86:	e6ba      	b.n	80147fe <HAL_RCC_OscConfig+0xae>
 8014a88:	f000 fa68 	bl	8014f5c <HAL_GetTick>
 8014a8c:	4606      	mov	r6, r0
 8014a8e:	e004      	b.n	8014a9a <HAL_RCC_OscConfig+0x34a>
 8014a90:	f000 fa64 	bl	8014f5c <HAL_GetTick>
 8014a94:	1b80      	subs	r0, r0, r6
 8014a96:	2864      	cmp	r0, #100	; 0x64
 8014a98:	d882      	bhi.n	80149a0 <HAL_RCC_OscConfig+0x250>
 8014a9a:	6823      	ldr	r3, [r4, #0]
 8014a9c:	4a35      	ldr	r2, [pc, #212]	; (8014b74 <HAL_RCC_OscConfig+0x424>)
 8014a9e:	0199      	lsls	r1, r3, #6
 8014aa0:	d4f6      	bmi.n	8014a90 <HAL_RCC_OscConfig+0x340>
 8014aa2:	f647 74c0 	movw	r4, #32704	; 0x7fc0
 8014aa6:	fa94 f4a4 	rbit	r4, r4
 8014aaa:	fab4 f484 	clz	r4, r4
 8014aae:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8014ab2:	fa91 f1a1 	rbit	r1, r1
 8014ab6:	fab1 f181 	clz	r1, r1
 8014aba:	f04f 6070 	mov.w	r0, #251658240	; 0xf000000
 8014abe:	fa90 f0a0 	rbit	r0, r0
 8014ac2:	fab0 f080 	clz	r0, r0
 8014ac6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8014ac8:	b2e4      	uxtb	r4, r4
 8014aca:	6a2e      	ldr	r6, [r5, #32]
 8014acc:	b2c9      	uxtb	r1, r1
 8014ace:	9301      	str	r3, [sp, #4]
 8014ad0:	b2c0      	uxtb	r0, r0
 8014ad2:	69eb      	ldr	r3, [r5, #28]
 8014ad4:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8014ad6:	431e      	orrs	r6, r3
 8014ad8:	9b01      	ldr	r3, [sp, #4]
 8014ada:	6aed      	ldr	r5, [r5, #44]	; 0x2c
 8014adc:	fa07 f404 	lsl.w	r4, r7, r4
 8014ae0:	085b      	lsrs	r3, r3, #1
 8014ae2:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8014ae6:	fa05 f000 	lsl.w	r0, r5, r0
 8014aea:	3b01      	subs	r3, #1
 8014aec:	ea46 0504 	orr.w	r5, r6, r4
 8014af0:	4614      	mov	r4, r2
 8014af2:	408b      	lsls	r3, r1
 8014af4:	432b      	orrs	r3, r5
 8014af6:	4303      	orrs	r3, r0
 8014af8:	6053      	str	r3, [r2, #4]
 8014afa:	6813      	ldr	r3, [r2, #0]
 8014afc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8014b00:	6013      	str	r3, [r2, #0]
 8014b02:	f000 fa2b 	bl	8014f5c <HAL_GetTick>
 8014b06:	4605      	mov	r5, r0
 8014b08:	e005      	b.n	8014b16 <HAL_RCC_OscConfig+0x3c6>
 8014b0a:	f000 fa27 	bl	8014f5c <HAL_GetTick>
 8014b0e:	1b40      	subs	r0, r0, r5
 8014b10:	2864      	cmp	r0, #100	; 0x64
 8014b12:	f63f af45 	bhi.w	80149a0 <HAL_RCC_OscConfig+0x250>
 8014b16:	6823      	ldr	r3, [r4, #0]
 8014b18:	019a      	lsls	r2, r3, #6
 8014b1a:	d5f6      	bpl.n	8014b0a <HAL_RCC_OscConfig+0x3ba>
 8014b1c:	e6c6      	b.n	80148ac <HAL_RCC_OscConfig+0x15c>
 8014b1e:	6813      	ldr	r3, [r2, #0]
 8014b20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8014b24:	6013      	str	r3, [r2, #0]
 8014b26:	6813      	ldr	r3, [r2, #0]
 8014b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014b2c:	6013      	str	r3, [r2, #0]
 8014b2e:	e79c      	b.n	8014a6a <HAL_RCC_OscConfig+0x31a>
 8014b30:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8014b32:	f023 0304 	bic.w	r3, r3, #4
 8014b36:	6713      	str	r3, [r2, #112]	; 0x70
 8014b38:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8014b3a:	f043 0301 	orr.w	r3, r3, #1
 8014b3e:	6713      	str	r3, [r2, #112]	; 0x70
 8014b40:	f000 fa0c 	bl	8014f5c <HAL_GetTick>
 8014b44:	4c0b      	ldr	r4, [pc, #44]	; (8014b74 <HAL_RCC_OscConfig+0x424>)
 8014b46:	4607      	mov	r7, r0
 8014b48:	f241 3688 	movw	r6, #5000	; 0x1388
 8014b4c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8014b4e:	079b      	lsls	r3, r3, #30
 8014b50:	f53f ae8f 	bmi.w	8014872 <HAL_RCC_OscConfig+0x122>
 8014b54:	f000 fa02 	bl	8014f5c <HAL_GetTick>
 8014b58:	1bc0      	subs	r0, r0, r7
 8014b5a:	42b0      	cmp	r0, r6
 8014b5c:	d9f6      	bls.n	8014b4c <HAL_RCC_OscConfig+0x3fc>
 8014b5e:	e71f      	b.n	80149a0 <HAL_RCC_OscConfig+0x250>
 8014b60:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8014b62:	f043 0304 	orr.w	r3, r3, #4
 8014b66:	6713      	str	r3, [r2, #112]	; 0x70
 8014b68:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8014b6a:	f043 0301 	orr.w	r3, r3, #1
 8014b6e:	6713      	str	r3, [r2, #112]	; 0x70
 8014b70:	e7e6      	b.n	8014b40 <HAL_RCC_OscConfig+0x3f0>
 8014b72:	bf00      	nop
 8014b74:	40023800 	.word	0x40023800

08014b78 <HAL_RCC_ClockConfig>:
 8014b78:	4a6c      	ldr	r2, [pc, #432]	; (8014d2c <HAL_RCC_ClockConfig+0x1b4>)
 8014b7a:	6813      	ldr	r3, [r2, #0]
 8014b7c:	f003 030f 	and.w	r3, r3, #15
 8014b80:	428b      	cmp	r3, r1
 8014b82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b86:	460c      	mov	r4, r1
 8014b88:	4605      	mov	r5, r0
 8014b8a:	d20c      	bcs.n	8014ba6 <HAL_RCC_ClockConfig+0x2e>
 8014b8c:	6813      	ldr	r3, [r2, #0]
 8014b8e:	f023 030f 	bic.w	r3, r3, #15
 8014b92:	430b      	orrs	r3, r1
 8014b94:	6013      	str	r3, [r2, #0]
 8014b96:	6813      	ldr	r3, [r2, #0]
 8014b98:	f003 030f 	and.w	r3, r3, #15
 8014b9c:	428b      	cmp	r3, r1
 8014b9e:	d058      	beq.n	8014c52 <HAL_RCC_ClockConfig+0xda>
 8014ba0:	2001      	movs	r0, #1
 8014ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ba6:	6803      	ldr	r3, [r0, #0]
 8014ba8:	079a      	lsls	r2, r3, #30
 8014baa:	d506      	bpl.n	8014bba <HAL_RCC_ClockConfig+0x42>
 8014bac:	4860      	ldr	r0, [pc, #384]	; (8014d30 <HAL_RCC_ClockConfig+0x1b8>)
 8014bae:	68aa      	ldr	r2, [r5, #8]
 8014bb0:	6881      	ldr	r1, [r0, #8]
 8014bb2:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8014bb6:	430a      	orrs	r2, r1
 8014bb8:	6082      	str	r2, [r0, #8]
 8014bba:	07df      	lsls	r7, r3, #31
 8014bbc:	d524      	bpl.n	8014c08 <HAL_RCC_ClockConfig+0x90>
 8014bbe:	686b      	ldr	r3, [r5, #4]
 8014bc0:	4a5b      	ldr	r2, [pc, #364]	; (8014d30 <HAL_RCC_ClockConfig+0x1b8>)
 8014bc2:	2b01      	cmp	r3, #1
 8014bc4:	6812      	ldr	r2, [r2, #0]
 8014bc6:	f000 808a 	beq.w	8014cde <HAL_RCC_ClockConfig+0x166>
 8014bca:	2b02      	cmp	r3, #2
 8014bcc:	f000 808e 	beq.w	8014cec <HAL_RCC_ClockConfig+0x174>
 8014bd0:	0791      	lsls	r1, r2, #30
 8014bd2:	d5e5      	bpl.n	8014ba0 <HAL_RCC_ClockConfig+0x28>
 8014bd4:	4e56      	ldr	r6, [pc, #344]	; (8014d30 <HAL_RCC_ClockConfig+0x1b8>)
 8014bd6:	f241 3888 	movw	r8, #5000	; 0x1388
 8014bda:	68b2      	ldr	r2, [r6, #8]
 8014bdc:	f022 0203 	bic.w	r2, r2, #3
 8014be0:	4313      	orrs	r3, r2
 8014be2:	60b3      	str	r3, [r6, #8]
 8014be4:	f000 f9ba 	bl	8014f5c <HAL_GetTick>
 8014be8:	686b      	ldr	r3, [r5, #4]
 8014bea:	4607      	mov	r7, r0
 8014bec:	2b01      	cmp	r3, #1
 8014bee:	d065      	beq.n	8014cbc <HAL_RCC_ClockConfig+0x144>
 8014bf0:	2b02      	cmp	r3, #2
 8014bf2:	d105      	bne.n	8014c00 <HAL_RCC_ClockConfig+0x88>
 8014bf4:	e06d      	b.n	8014cd2 <HAL_RCC_ClockConfig+0x15a>
 8014bf6:	f000 f9b1 	bl	8014f5c <HAL_GetTick>
 8014bfa:	1bc0      	subs	r0, r0, r7
 8014bfc:	4540      	cmp	r0, r8
 8014bfe:	d872      	bhi.n	8014ce6 <HAL_RCC_ClockConfig+0x16e>
 8014c00:	68b3      	ldr	r3, [r6, #8]
 8014c02:	f013 0f0c 	tst.w	r3, #12
 8014c06:	d1f6      	bne.n	8014bf6 <HAL_RCC_ClockConfig+0x7e>
 8014c08:	4a48      	ldr	r2, [pc, #288]	; (8014d2c <HAL_RCC_ClockConfig+0x1b4>)
 8014c0a:	6813      	ldr	r3, [r2, #0]
 8014c0c:	f023 030f 	bic.w	r3, r3, #15
 8014c10:	4323      	orrs	r3, r4
 8014c12:	6013      	str	r3, [r2, #0]
 8014c14:	6813      	ldr	r3, [r2, #0]
 8014c16:	f003 030f 	and.w	r3, r3, #15
 8014c1a:	42a3      	cmp	r3, r4
 8014c1c:	d1c0      	bne.n	8014ba0 <HAL_RCC_ClockConfig+0x28>
 8014c1e:	682b      	ldr	r3, [r5, #0]
 8014c20:	075a      	lsls	r2, r3, #29
 8014c22:	d506      	bpl.n	8014c32 <HAL_RCC_ClockConfig+0xba>
 8014c24:	4842      	ldr	r0, [pc, #264]	; (8014d30 <HAL_RCC_ClockConfig+0x1b8>)
 8014c26:	68ea      	ldr	r2, [r5, #12]
 8014c28:	6881      	ldr	r1, [r0, #8]
 8014c2a:	f421 51e0 	bic.w	r1, r1, #7168	; 0x1c00
 8014c2e:	430a      	orrs	r2, r1
 8014c30:	6082      	str	r2, [r0, #8]
 8014c32:	071b      	lsls	r3, r3, #28
 8014c34:	d507      	bpl.n	8014c46 <HAL_RCC_ClockConfig+0xce>
 8014c36:	4a3e      	ldr	r2, [pc, #248]	; (8014d30 <HAL_RCC_ClockConfig+0x1b8>)
 8014c38:	6929      	ldr	r1, [r5, #16]
 8014c3a:	6893      	ldr	r3, [r2, #8]
 8014c3c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8014c40:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8014c44:	6093      	str	r3, [r2, #8]
 8014c46:	200f      	movs	r0, #15
 8014c48:	f000 fd5e 	bl	8015708 <HAL_InitTick>
 8014c4c:	2000      	movs	r0, #0
 8014c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c52:	6803      	ldr	r3, [r0, #0]
 8014c54:	079f      	lsls	r7, r3, #30
 8014c56:	d506      	bpl.n	8014c66 <HAL_RCC_ClockConfig+0xee>
 8014c58:	4835      	ldr	r0, [pc, #212]	; (8014d30 <HAL_RCC_ClockConfig+0x1b8>)
 8014c5a:	68aa      	ldr	r2, [r5, #8]
 8014c5c:	6881      	ldr	r1, [r0, #8]
 8014c5e:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8014c62:	430a      	orrs	r2, r1
 8014c64:	6082      	str	r2, [r0, #8]
 8014c66:	07de      	lsls	r6, r3, #31
 8014c68:	d5da      	bpl.n	8014c20 <HAL_RCC_ClockConfig+0xa8>
 8014c6a:	686b      	ldr	r3, [r5, #4]
 8014c6c:	4a30      	ldr	r2, [pc, #192]	; (8014d30 <HAL_RCC_ClockConfig+0x1b8>)
 8014c6e:	2b01      	cmp	r3, #1
 8014c70:	6812      	ldr	r2, [r2, #0]
 8014c72:	d058      	beq.n	8014d26 <HAL_RCC_ClockConfig+0x1ae>
 8014c74:	2b02      	cmp	r3, #2
 8014c76:	d053      	beq.n	8014d20 <HAL_RCC_ClockConfig+0x1a8>
 8014c78:	0791      	lsls	r1, r2, #30
 8014c7a:	d591      	bpl.n	8014ba0 <HAL_RCC_ClockConfig+0x28>
 8014c7c:	4c2c      	ldr	r4, [pc, #176]	; (8014d30 <HAL_RCC_ClockConfig+0x1b8>)
 8014c7e:	f241 3788 	movw	r7, #5000	; 0x1388
 8014c82:	68a2      	ldr	r2, [r4, #8]
 8014c84:	f022 0203 	bic.w	r2, r2, #3
 8014c88:	4313      	orrs	r3, r2
 8014c8a:	60a3      	str	r3, [r4, #8]
 8014c8c:	f000 f966 	bl	8014f5c <HAL_GetTick>
 8014c90:	686b      	ldr	r3, [r5, #4]
 8014c92:	4606      	mov	r6, r0
 8014c94:	2b01      	cmp	r3, #1
 8014c96:	d032      	beq.n	8014cfe <HAL_RCC_ClockConfig+0x186>
 8014c98:	2b02      	cmp	r3, #2
 8014c9a:	d105      	bne.n	8014ca8 <HAL_RCC_ClockConfig+0x130>
 8014c9c:	e03a      	b.n	8014d14 <HAL_RCC_ClockConfig+0x19c>
 8014c9e:	f000 f95d 	bl	8014f5c <HAL_GetTick>
 8014ca2:	1b80      	subs	r0, r0, r6
 8014ca4:	42b8      	cmp	r0, r7
 8014ca6:	d81e      	bhi.n	8014ce6 <HAL_RCC_ClockConfig+0x16e>
 8014ca8:	68a3      	ldr	r3, [r4, #8]
 8014caa:	f013 0f0c 	tst.w	r3, #12
 8014cae:	d1f6      	bne.n	8014c9e <HAL_RCC_ClockConfig+0x126>
 8014cb0:	e7b5      	b.n	8014c1e <HAL_RCC_ClockConfig+0xa6>
 8014cb2:	f000 f953 	bl	8014f5c <HAL_GetTick>
 8014cb6:	1bc0      	subs	r0, r0, r7
 8014cb8:	4540      	cmp	r0, r8
 8014cba:	d814      	bhi.n	8014ce6 <HAL_RCC_ClockConfig+0x16e>
 8014cbc:	68b3      	ldr	r3, [r6, #8]
 8014cbe:	f003 030c 	and.w	r3, r3, #12
 8014cc2:	2b04      	cmp	r3, #4
 8014cc4:	d1f5      	bne.n	8014cb2 <HAL_RCC_ClockConfig+0x13a>
 8014cc6:	e79f      	b.n	8014c08 <HAL_RCC_ClockConfig+0x90>
 8014cc8:	f000 f948 	bl	8014f5c <HAL_GetTick>
 8014ccc:	1bc0      	subs	r0, r0, r7
 8014cce:	4540      	cmp	r0, r8
 8014cd0:	d809      	bhi.n	8014ce6 <HAL_RCC_ClockConfig+0x16e>
 8014cd2:	68b3      	ldr	r3, [r6, #8]
 8014cd4:	f003 030c 	and.w	r3, r3, #12
 8014cd8:	2b08      	cmp	r3, #8
 8014cda:	d1f5      	bne.n	8014cc8 <HAL_RCC_ClockConfig+0x150>
 8014cdc:	e794      	b.n	8014c08 <HAL_RCC_ClockConfig+0x90>
 8014cde:	0396      	lsls	r6, r2, #14
 8014ce0:	f53f af78 	bmi.w	8014bd4 <HAL_RCC_ClockConfig+0x5c>
 8014ce4:	e75c      	b.n	8014ba0 <HAL_RCC_ClockConfig+0x28>
 8014ce6:	2003      	movs	r0, #3
 8014ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014cec:	0190      	lsls	r0, r2, #6
 8014cee:	f53f af71 	bmi.w	8014bd4 <HAL_RCC_ClockConfig+0x5c>
 8014cf2:	e755      	b.n	8014ba0 <HAL_RCC_ClockConfig+0x28>
 8014cf4:	f000 f932 	bl	8014f5c <HAL_GetTick>
 8014cf8:	1b80      	subs	r0, r0, r6
 8014cfa:	42b8      	cmp	r0, r7
 8014cfc:	d8f3      	bhi.n	8014ce6 <HAL_RCC_ClockConfig+0x16e>
 8014cfe:	68a3      	ldr	r3, [r4, #8]
 8014d00:	f003 030c 	and.w	r3, r3, #12
 8014d04:	2b04      	cmp	r3, #4
 8014d06:	d1f5      	bne.n	8014cf4 <HAL_RCC_ClockConfig+0x17c>
 8014d08:	e789      	b.n	8014c1e <HAL_RCC_ClockConfig+0xa6>
 8014d0a:	f000 f927 	bl	8014f5c <HAL_GetTick>
 8014d0e:	1b80      	subs	r0, r0, r6
 8014d10:	42b8      	cmp	r0, r7
 8014d12:	d8e8      	bhi.n	8014ce6 <HAL_RCC_ClockConfig+0x16e>
 8014d14:	68a3      	ldr	r3, [r4, #8]
 8014d16:	f003 030c 	and.w	r3, r3, #12
 8014d1a:	2b08      	cmp	r3, #8
 8014d1c:	d1f5      	bne.n	8014d0a <HAL_RCC_ClockConfig+0x192>
 8014d1e:	e77e      	b.n	8014c1e <HAL_RCC_ClockConfig+0xa6>
 8014d20:	0190      	lsls	r0, r2, #6
 8014d22:	d4ab      	bmi.n	8014c7c <HAL_RCC_ClockConfig+0x104>
 8014d24:	e73c      	b.n	8014ba0 <HAL_RCC_ClockConfig+0x28>
 8014d26:	0394      	lsls	r4, r2, #14
 8014d28:	d4a8      	bmi.n	8014c7c <HAL_RCC_ClockConfig+0x104>
 8014d2a:	e739      	b.n	8014ba0 <HAL_RCC_ClockConfig+0x28>
 8014d2c:	40023c00 	.word	0x40023c00
 8014d30:	40023800 	.word	0x40023800

08014d34 <HAL_RCC_GetSysClockFreq>:
 8014d34:	4923      	ldr	r1, [pc, #140]	; (8014dc4 <HAL_RCC_GetSysClockFreq+0x90>)
 8014d36:	688b      	ldr	r3, [r1, #8]
 8014d38:	f003 030c 	and.w	r3, r3, #12
 8014d3c:	2b04      	cmp	r3, #4
 8014d3e:	d02d      	beq.n	8014d9c <HAL_RCC_GetSysClockFreq+0x68>
 8014d40:	2b08      	cmp	r3, #8
 8014d42:	d129      	bne.n	8014d98 <HAL_RCC_GetSysClockFreq+0x64>
 8014d44:	684a      	ldr	r2, [r1, #4]
 8014d46:	b430      	push	{r4, r5}
 8014d48:	684d      	ldr	r5, [r1, #4]
 8014d4a:	f002 043f 	and.w	r4, r2, #63	; 0x3f
 8014d4e:	684b      	ldr	r3, [r1, #4]
 8014d50:	026a      	lsls	r2, r5, #9
 8014d52:	d425      	bmi.n	8014da0 <HAL_RCC_GetSysClockFreq+0x6c>
 8014d54:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8014d58:	fa91 f1a1 	rbit	r1, r1
 8014d5c:	fab1 f181 	clz	r1, r1
 8014d60:	f647 70c0 	movw	r0, #32704	; 0x7fc0
 8014d64:	4a18      	ldr	r2, [pc, #96]	; (8014dc8 <HAL_RCC_GetSysClockFreq+0x94>)
 8014d66:	b2c9      	uxtb	r1, r1
 8014d68:	4018      	ands	r0, r3
 8014d6a:	fbb2 f2f4 	udiv	r2, r2, r4
 8014d6e:	40c8      	lsrs	r0, r1
 8014d70:	fb02 f300 	mul.w	r3, r2, r0
 8014d74:	4913      	ldr	r1, [pc, #76]	; (8014dc4 <HAL_RCC_GetSysClockFreq+0x90>)
 8014d76:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8014d7a:	6848      	ldr	r0, [r1, #4]
 8014d7c:	fa92 f2a2 	rbit	r2, r2
 8014d80:	fab2 f282 	clz	r2, r2
 8014d84:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8014d88:	b2d2      	uxtb	r2, r2
 8014d8a:	40d0      	lsrs	r0, r2
 8014d8c:	3001      	adds	r0, #1
 8014d8e:	0040      	lsls	r0, r0, #1
 8014d90:	bc30      	pop	{r4, r5}
 8014d92:	fbb3 f0f0 	udiv	r0, r3, r0
 8014d96:	4770      	bx	lr
 8014d98:	480b      	ldr	r0, [pc, #44]	; (8014dc8 <HAL_RCC_GetSysClockFreq+0x94>)
 8014d9a:	4770      	bx	lr
 8014d9c:	480b      	ldr	r0, [pc, #44]	; (8014dcc <HAL_RCC_GetSysClockFreq+0x98>)
 8014d9e:	4770      	bx	lr
 8014da0:	f647 75c0 	movw	r5, #32704	; 0x7fc0
 8014da4:	fa95 f5a5 	rbit	r5, r5
 8014da8:	fab5 f585 	clz	r5, r5
 8014dac:	f647 70c0 	movw	r0, #32704	; 0x7fc0
 8014db0:	4906      	ldr	r1, [pc, #24]	; (8014dcc <HAL_RCC_GetSysClockFreq+0x98>)
 8014db2:	b2ed      	uxtb	r5, r5
 8014db4:	4018      	ands	r0, r3
 8014db6:	fbb1 f2f4 	udiv	r2, r1, r4
 8014dba:	40e8      	lsrs	r0, r5
 8014dbc:	fb02 f300 	mul.w	r3, r2, r0
 8014dc0:	e7d8      	b.n	8014d74 <HAL_RCC_GetSysClockFreq+0x40>
 8014dc2:	bf00      	nop
 8014dc4:	40023800 	.word	0x40023800
 8014dc8:	00f42400 	.word	0x00f42400
 8014dcc:	017d7840 	.word	0x017d7840

08014dd0 <HAL_RCC_GetHCLKFreq>:
 8014dd0:	b508      	push	{r3, lr}
 8014dd2:	f7ff ffaf 	bl	8014d34 <HAL_RCC_GetSysClockFreq>
 8014dd6:	4a09      	ldr	r2, [pc, #36]	; (8014dfc <HAL_RCC_GetHCLKFreq+0x2c>)
 8014dd8:	23f0      	movs	r3, #240	; 0xf0
 8014dda:	6892      	ldr	r2, [r2, #8]
 8014ddc:	fa93 f3a3 	rbit	r3, r3
 8014de0:	fab3 f383 	clz	r3, r3
 8014de4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8014de8:	b2db      	uxtb	r3, r3
 8014dea:	4905      	ldr	r1, [pc, #20]	; (8014e00 <HAL_RCC_GetHCLKFreq+0x30>)
 8014dec:	fa22 f303 	lsr.w	r3, r2, r3
 8014df0:	4a04      	ldr	r2, [pc, #16]	; (8014e04 <HAL_RCC_GetHCLKFreq+0x34>)
 8014df2:	5ccb      	ldrb	r3, [r1, r3]
 8014df4:	40d8      	lsrs	r0, r3
 8014df6:	6010      	str	r0, [r2, #0]
 8014df8:	bd08      	pop	{r3, pc}
 8014dfa:	bf00      	nop
 8014dfc:	40023800 	.word	0x40023800
 8014e00:	0801ce04 	.word	0x0801ce04
 8014e04:	200016c0 	.word	0x200016c0

08014e08 <HAL_RCC_GetPCLK1Freq>:
 8014e08:	b508      	push	{r3, lr}
 8014e0a:	f7ff ffe1 	bl	8014dd0 <HAL_RCC_GetHCLKFreq>
 8014e0e:	4a08      	ldr	r2, [pc, #32]	; (8014e30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8014e10:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8014e14:	6892      	ldr	r2, [r2, #8]
 8014e16:	fa93 f3a3 	rbit	r3, r3
 8014e1a:	fab3 f383 	clz	r3, r3
 8014e1e:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8014e22:	b2db      	uxtb	r3, r3
 8014e24:	4903      	ldr	r1, [pc, #12]	; (8014e34 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8014e26:	fa22 f303 	lsr.w	r3, r2, r3
 8014e2a:	5ccb      	ldrb	r3, [r1, r3]
 8014e2c:	40d8      	lsrs	r0, r3
 8014e2e:	bd08      	pop	{r3, pc}
 8014e30:	40023800 	.word	0x40023800
 8014e34:	0801ce04 	.word	0x0801ce04

08014e38 <HAL_RCC_GetPCLK2Freq>:
 8014e38:	b508      	push	{r3, lr}
 8014e3a:	f7ff ffc9 	bl	8014dd0 <HAL_RCC_GetHCLKFreq>
 8014e3e:	4a08      	ldr	r2, [pc, #32]	; (8014e60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8014e40:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8014e44:	6892      	ldr	r2, [r2, #8]
 8014e46:	fa93 f3a3 	rbit	r3, r3
 8014e4a:	fab3 f383 	clz	r3, r3
 8014e4e:	f402 4260 	and.w	r2, r2, #57344	; 0xe000
 8014e52:	b2db      	uxtb	r3, r3
 8014e54:	4903      	ldr	r1, [pc, #12]	; (8014e64 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8014e56:	fa22 f303 	lsr.w	r3, r2, r3
 8014e5a:	5ccb      	ldrb	r3, [r1, r3]
 8014e5c:	40d8      	lsrs	r0, r3
 8014e5e:	bd08      	pop	{r3, pc}
 8014e60:	40023800 	.word	0x40023800
 8014e64:	0801ce04 	.word	0x0801ce04

08014e68 <HAL_RCC_GetClockConfig>:
 8014e68:	4b0e      	ldr	r3, [pc, #56]	; (8014ea4 <HAL_RCC_GetClockConfig+0x3c>)
 8014e6a:	220f      	movs	r2, #15
 8014e6c:	6002      	str	r2, [r0, #0]
 8014e6e:	689a      	ldr	r2, [r3, #8]
 8014e70:	f002 0203 	and.w	r2, r2, #3
 8014e74:	6042      	str	r2, [r0, #4]
 8014e76:	689a      	ldr	r2, [r3, #8]
 8014e78:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8014e7c:	6082      	str	r2, [r0, #8]
 8014e7e:	689a      	ldr	r2, [r3, #8]
 8014e80:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8014e84:	60c2      	str	r2, [r0, #12]
 8014e86:	689b      	ldr	r3, [r3, #8]
 8014e88:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8014e8c:	b410      	push	{r4}
 8014e8e:	08db      	lsrs	r3, r3, #3
 8014e90:	4c05      	ldr	r4, [pc, #20]	; (8014ea8 <HAL_RCC_GetClockConfig+0x40>)
 8014e92:	6103      	str	r3, [r0, #16]
 8014e94:	6823      	ldr	r3, [r4, #0]
 8014e96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014e9a:	f003 030f 	and.w	r3, r3, #15
 8014e9e:	600b      	str	r3, [r1, #0]
 8014ea0:	4770      	bx	lr
 8014ea2:	bf00      	nop
 8014ea4:	40023800 	.word	0x40023800
 8014ea8:	40023c00 	.word	0x40023c00

08014eac <HAL_PWREx_EnableOverDrive>:
 8014eac:	4a1b      	ldr	r2, [pc, #108]	; (8014f1c <HAL_PWREx_EnableOverDrive+0x70>)
 8014eae:	4b1c      	ldr	r3, [pc, #112]	; (8014f20 <HAL_PWREx_EnableOverDrive+0x74>)
 8014eb0:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8014eb2:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8014eb6:	b530      	push	{r4, r5, lr}
 8014eb8:	6411      	str	r1, [r2, #64]	; 0x40
 8014eba:	b083      	sub	sp, #12
 8014ebc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8014ebe:	461c      	mov	r4, r3
 8014ec0:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8014ec4:	9201      	str	r2, [sp, #4]
 8014ec6:	9a01      	ldr	r2, [sp, #4]
 8014ec8:	681a      	ldr	r2, [r3, #0]
 8014eca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8014ece:	601a      	str	r2, [r3, #0]
 8014ed0:	f000 f844 	bl	8014f5c <HAL_GetTick>
 8014ed4:	4605      	mov	r5, r0
 8014ed6:	e005      	b.n	8014ee4 <HAL_PWREx_EnableOverDrive+0x38>
 8014ed8:	f000 f840 	bl	8014f5c <HAL_GetTick>
 8014edc:	1b40      	subs	r0, r0, r5
 8014ede:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8014ee2:	d818      	bhi.n	8014f16 <HAL_PWREx_EnableOverDrive+0x6a>
 8014ee4:	6863      	ldr	r3, [r4, #4]
 8014ee6:	4a0e      	ldr	r2, [pc, #56]	; (8014f20 <HAL_PWREx_EnableOverDrive+0x74>)
 8014ee8:	03d9      	lsls	r1, r3, #15
 8014eea:	d5f5      	bpl.n	8014ed8 <HAL_PWREx_EnableOverDrive+0x2c>
 8014eec:	6813      	ldr	r3, [r2, #0]
 8014eee:	4614      	mov	r4, r2
 8014ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014ef4:	6013      	str	r3, [r2, #0]
 8014ef6:	f000 f831 	bl	8014f5c <HAL_GetTick>
 8014efa:	4605      	mov	r5, r0
 8014efc:	e005      	b.n	8014f0a <HAL_PWREx_EnableOverDrive+0x5e>
 8014efe:	f000 f82d 	bl	8014f5c <HAL_GetTick>
 8014f02:	1b40      	subs	r0, r0, r5
 8014f04:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8014f08:	d805      	bhi.n	8014f16 <HAL_PWREx_EnableOverDrive+0x6a>
 8014f0a:	6863      	ldr	r3, [r4, #4]
 8014f0c:	039b      	lsls	r3, r3, #14
 8014f0e:	d5f6      	bpl.n	8014efe <HAL_PWREx_EnableOverDrive+0x52>
 8014f10:	2000      	movs	r0, #0
 8014f12:	b003      	add	sp, #12
 8014f14:	bd30      	pop	{r4, r5, pc}
 8014f16:	2003      	movs	r0, #3
 8014f18:	b003      	add	sp, #12
 8014f1a:	bd30      	pop	{r4, r5, pc}
 8014f1c:	40023800 	.word	0x40023800
 8014f20:	40007000 	.word	0x40007000

08014f24 <HAL_MspInit>:
 8014f24:	4770      	bx	lr
 8014f26:	bf00      	nop

08014f28 <HAL_Init>:
 8014f28:	4a07      	ldr	r2, [pc, #28]	; (8014f48 <HAL_Init+0x20>)
 8014f2a:	2003      	movs	r0, #3
 8014f2c:	b508      	push	{r3, lr}
 8014f2e:	6813      	ldr	r3, [r2, #0]
 8014f30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8014f34:	6013      	str	r3, [r2, #0]
 8014f36:	f000 f817 	bl	8014f68 <HAL_NVIC_SetPriorityGrouping>
 8014f3a:	200f      	movs	r0, #15
 8014f3c:	f000 fbe4 	bl	8015708 <HAL_InitTick>
 8014f40:	f7ff fff0 	bl	8014f24 <HAL_MspInit>
 8014f44:	2000      	movs	r0, #0
 8014f46:	bd08      	pop	{r3, pc}
 8014f48:	40023c00 	.word	0x40023c00

08014f4c <HAL_IncTick>:
 8014f4c:	4a02      	ldr	r2, [pc, #8]	; (8014f58 <HAL_IncTick+0xc>)
 8014f4e:	6813      	ldr	r3, [r2, #0]
 8014f50:	3301      	adds	r3, #1
 8014f52:	6013      	str	r3, [r2, #0]
 8014f54:	4770      	bx	lr
 8014f56:	bf00      	nop
 8014f58:	200018e0 	.word	0x200018e0

08014f5c <HAL_GetTick>:
 8014f5c:	4b01      	ldr	r3, [pc, #4]	; (8014f64 <HAL_GetTick+0x8>)
 8014f5e:	6818      	ldr	r0, [r3, #0]
 8014f60:	4770      	bx	lr
 8014f62:	bf00      	nop
 8014f64:	200018e0 	.word	0x200018e0

08014f68 <HAL_NVIC_SetPriorityGrouping>:
 8014f68:	4907      	ldr	r1, [pc, #28]	; (8014f88 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8014f6a:	f64f 02ff 	movw	r2, #63743	; 0xf8ff
 8014f6e:	4b07      	ldr	r3, [pc, #28]	; (8014f8c <HAL_NVIC_SetPriorityGrouping+0x24>)
 8014f70:	f000 0007 	and.w	r0, r0, #7
 8014f74:	b410      	push	{r4}
 8014f76:	68cc      	ldr	r4, [r1, #12]
 8014f78:	4022      	ands	r2, r4
 8014f7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014f7e:	4313      	orrs	r3, r2
 8014f80:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8014f84:	60cb      	str	r3, [r1, #12]
 8014f86:	4770      	bx	lr
 8014f88:	e000ed00 	.word	0xe000ed00
 8014f8c:	05fa0000 	.word	0x05fa0000

08014f90 <HAL_GPIO_Init>:
 8014f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f94:	2300      	movs	r3, #0
 8014f96:	b083      	sub	sp, #12
 8014f98:	f8df 8230 	ldr.w	r8, [pc, #560]	; 80151cc <HAL_GPIO_Init+0x23c>
 8014f9c:	f8d1 c000 	ldr.w	ip, [r1]
 8014fa0:	f8df 922c 	ldr.w	r9, [pc, #556]	; 80151d0 <HAL_GPIO_Init+0x240>
 8014fa4:	f8df e22c 	ldr.w	lr, [pc, #556]	; 80151d4 <HAL_GPIO_Init+0x244>
 8014fa8:	e003      	b.n	8014fb2 <HAL_GPIO_Init+0x22>
 8014faa:	3301      	adds	r3, #1
 8014fac:	2b10      	cmp	r3, #16
 8014fae:	f000 80ae 	beq.w	801510e <HAL_GPIO_Init+0x17e>
 8014fb2:	2201      	movs	r2, #1
 8014fb4:	409a      	lsls	r2, r3
 8014fb6:	ea02 040c 	and.w	r4, r2, ip
 8014fba:	4294      	cmp	r4, r2
 8014fbc:	d1f5      	bne.n	8014faa <HAL_GPIO_Init+0x1a>
 8014fbe:	684d      	ldr	r5, [r1, #4]
 8014fc0:	f025 0710 	bic.w	r7, r5, #16
 8014fc4:	2f02      	cmp	r7, #2
 8014fc6:	f040 80a5 	bne.w	8015114 <HAL_GPIO_Init+0x184>
 8014fca:	08df      	lsrs	r7, r3, #3
 8014fcc:	f003 0a07 	and.w	sl, r3, #7
 8014fd0:	f04f 0b0f 	mov.w	fp, #15
 8014fd4:	690a      	ldr	r2, [r1, #16]
 8014fd6:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8014fda:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8014fde:	6a3e      	ldr	r6, [r7, #32]
 8014fe0:	fa0b fb0a 	lsl.w	fp, fp, sl
 8014fe4:	fa02 f20a 	lsl.w	r2, r2, sl
 8014fe8:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 8014fec:	ea26 060b 	bic.w	r6, r6, fp
 8014ff0:	f04f 0b03 	mov.w	fp, #3
 8014ff4:	4332      	orrs	r2, r6
 8014ff6:	fa0b fb0a 	lsl.w	fp, fp, sl
 8014ffa:	f005 0603 	and.w	r6, r5, #3
 8014ffe:	623a      	str	r2, [r7, #32]
 8015000:	ea6f 020b 	mvn.w	r2, fp
 8015004:	6807      	ldr	r7, [r0, #0]
 8015006:	fa06 f60a 	lsl.w	r6, r6, sl
 801500a:	4017      	ands	r7, r2
 801500c:	433e      	orrs	r6, r7
 801500e:	6006      	str	r6, [r0, #0]
 8015010:	6886      	ldr	r6, [r0, #8]
 8015012:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8015016:	ea02 0b06 	and.w	fp, r2, r6
 801501a:	68ce      	ldr	r6, [r1, #12]
 801501c:	409f      	lsls	r7, r3
 801501e:	fa06 f60a 	lsl.w	r6, r6, sl
 8015022:	ea4b 0606 	orr.w	r6, fp, r6
 8015026:	6086      	str	r6, [r0, #8]
 8015028:	6846      	ldr	r6, [r0, #4]
 801502a:	ea26 0604 	bic.w	r6, r6, r4
 801502e:	4337      	orrs	r7, r6
 8015030:	6047      	str	r7, [r0, #4]
 8015032:	68c7      	ldr	r7, [r0, #12]
 8015034:	688e      	ldr	r6, [r1, #8]
 8015036:	403a      	ands	r2, r7
 8015038:	fa06 f60a 	lsl.w	r6, r6, sl
 801503c:	4316      	orrs	r6, r2
 801503e:	00ea      	lsls	r2, r5, #3
 8015040:	60c6      	str	r6, [r0, #12]
 8015042:	d5b2      	bpl.n	8014faa <HAL_GPIO_Init+0x1a>
 8015044:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 8015048:	f023 0b03 	bic.w	fp, r3, #3
 801504c:	4f58      	ldr	r7, [pc, #352]	; (80151b0 <HAL_GPIO_Init+0x220>)
 801504e:	f003 0203 	and.w	r2, r3, #3
 8015052:	f446 4a80 	orr.w	sl, r6, #16384	; 0x4000
 8015056:	260f      	movs	r6, #15
 8015058:	445f      	add	r7, fp
 801505a:	0092      	lsls	r2, r2, #2
 801505c:	f8c8 a044 	str.w	sl, [r8, #68]	; 0x44
 8015060:	4548      	cmp	r0, r9
 8015062:	f8d8 a044 	ldr.w	sl, [r8, #68]	; 0x44
 8015066:	fa06 f602 	lsl.w	r6, r6, r2
 801506a:	f40a 4a80 	and.w	sl, sl, #16384	; 0x4000
 801506e:	f8cd a004 	str.w	sl, [sp, #4]
 8015072:	f8dd a004 	ldr.w	sl, [sp, #4]
 8015076:	f8d7 a008 	ldr.w	sl, [r7, #8]
 801507a:	ea2a 0b06 	bic.w	fp, sl, r6
 801507e:	d068      	beq.n	8015152 <HAL_GPIO_Init+0x1c2>
 8015080:	4e4c      	ldr	r6, [pc, #304]	; (80151b4 <HAL_GPIO_Init+0x224>)
 8015082:	42b0      	cmp	r0, r6
 8015084:	d067      	beq.n	8015156 <HAL_GPIO_Init+0x1c6>
 8015086:	4e4c      	ldr	r6, [pc, #304]	; (80151b8 <HAL_GPIO_Init+0x228>)
 8015088:	42b0      	cmp	r0, r6
 801508a:	d069      	beq.n	8015160 <HAL_GPIO_Init+0x1d0>
 801508c:	4e4b      	ldr	r6, [pc, #300]	; (80151bc <HAL_GPIO_Init+0x22c>)
 801508e:	42b0      	cmp	r0, r6
 8015090:	d06b      	beq.n	801516a <HAL_GPIO_Init+0x1da>
 8015092:	4e4b      	ldr	r6, [pc, #300]	; (80151c0 <HAL_GPIO_Init+0x230>)
 8015094:	42b0      	cmp	r0, r6
 8015096:	d072      	beq.n	801517e <HAL_GPIO_Init+0x1ee>
 8015098:	4e4a      	ldr	r6, [pc, #296]	; (80151c4 <HAL_GPIO_Init+0x234>)
 801509a:	42b0      	cmp	r0, r6
 801509c:	d074      	beq.n	8015188 <HAL_GPIO_Init+0x1f8>
 801509e:	4e4a      	ldr	r6, [pc, #296]	; (80151c8 <HAL_GPIO_Init+0x238>)
 80150a0:	42b0      	cmp	r0, r6
 80150a2:	d076      	beq.n	8015192 <HAL_GPIO_Init+0x202>
 80150a4:	f8df a130 	ldr.w	sl, [pc, #304]	; 80151d8 <HAL_GPIO_Init+0x248>
 80150a8:	4550      	cmp	r0, sl
 80150aa:	d077      	beq.n	801519c <HAL_GPIO_Init+0x20c>
 80150ac:	f8df a12c 	ldr.w	sl, [pc, #300]	; 80151dc <HAL_GPIO_Init+0x24c>
 80150b0:	4550      	cmp	r0, sl
 80150b2:	d078      	beq.n	80151a6 <HAL_GPIO_Init+0x216>
 80150b4:	f8df a128 	ldr.w	sl, [pc, #296]	; 80151e0 <HAL_GPIO_Init+0x250>
 80150b8:	4550      	cmp	r0, sl
 80150ba:	d05b      	beq.n	8015174 <HAL_GPIO_Init+0x1e4>
 80150bc:	f04f 0a0a 	mov.w	sl, #10
 80150c0:	fa0a f202 	lsl.w	r2, sl, r2
 80150c4:	ea42 020b 	orr.w	r2, r2, fp
 80150c8:	43e6      	mvns	r6, r4
 80150ca:	60ba      	str	r2, [r7, #8]
 80150cc:	03ef      	lsls	r7, r5, #15
 80150ce:	f8de 2000 	ldr.w	r2, [lr]
 80150d2:	d43c      	bmi.n	801514e <HAL_GPIO_Init+0x1be>
 80150d4:	4032      	ands	r2, r6
 80150d6:	03af      	lsls	r7, r5, #14
 80150d8:	f8ce 2000 	str.w	r2, [lr]
 80150dc:	f8de 2004 	ldr.w	r2, [lr, #4]
 80150e0:	d433      	bmi.n	801514a <HAL_GPIO_Init+0x1ba>
 80150e2:	4032      	ands	r2, r6
 80150e4:	02ef      	lsls	r7, r5, #11
 80150e6:	f8ce 2004 	str.w	r2, [lr, #4]
 80150ea:	f8de 2008 	ldr.w	r2, [lr, #8]
 80150ee:	d42a      	bmi.n	8015146 <HAL_GPIO_Init+0x1b6>
 80150f0:	4032      	ands	r2, r6
 80150f2:	02ad      	lsls	r5, r5, #10
 80150f4:	f8ce 2008 	str.w	r2, [lr, #8]
 80150f8:	f8de 200c 	ldr.w	r2, [lr, #12]
 80150fc:	d421      	bmi.n	8015142 <HAL_GPIO_Init+0x1b2>
 80150fe:	ea06 0402 	and.w	r4, r6, r2
 8015102:	3301      	adds	r3, #1
 8015104:	f8ce 400c 	str.w	r4, [lr, #12]
 8015108:	2b10      	cmp	r3, #16
 801510a:	f47f af52 	bne.w	8014fb2 <HAL_GPIO_Init+0x22>
 801510e:	b003      	add	sp, #12
 8015110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015114:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 8015118:	2203      	movs	r2, #3
 801511a:	f8d0 b000 	ldr.w	fp, [r0]
 801511e:	3f01      	subs	r7, #1
 8015120:	ea05 0602 	and.w	r6, r5, r2
 8015124:	fa02 f20a 	lsl.w	r2, r2, sl
 8015128:	2f01      	cmp	r7, #1
 801512a:	ea6f 0202 	mvn.w	r2, r2
 801512e:	fa06 f60a 	lsl.w	r6, r6, sl
 8015132:	ea02 0b0b 	and.w	fp, r2, fp
 8015136:	ea4b 0606 	orr.w	r6, fp, r6
 801513a:	6006      	str	r6, [r0, #0]
 801513c:	f63f af79 	bhi.w	8015032 <HAL_GPIO_Init+0xa2>
 8015140:	e766      	b.n	8015010 <HAL_GPIO_Init+0x80>
 8015142:	4314      	orrs	r4, r2
 8015144:	e7dd      	b.n	8015102 <HAL_GPIO_Init+0x172>
 8015146:	4322      	orrs	r2, r4
 8015148:	e7d3      	b.n	80150f2 <HAL_GPIO_Init+0x162>
 801514a:	4322      	orrs	r2, r4
 801514c:	e7ca      	b.n	80150e4 <HAL_GPIO_Init+0x154>
 801514e:	4322      	orrs	r2, r4
 8015150:	e7c1      	b.n	80150d6 <HAL_GPIO_Init+0x146>
 8015152:	2200      	movs	r2, #0
 8015154:	e7b6      	b.n	80150c4 <HAL_GPIO_Init+0x134>
 8015156:	f04f 0a01 	mov.w	sl, #1
 801515a:	fa0a f202 	lsl.w	r2, sl, r2
 801515e:	e7b1      	b.n	80150c4 <HAL_GPIO_Init+0x134>
 8015160:	f04f 0a02 	mov.w	sl, #2
 8015164:	fa0a f202 	lsl.w	r2, sl, r2
 8015168:	e7ac      	b.n	80150c4 <HAL_GPIO_Init+0x134>
 801516a:	f04f 0a03 	mov.w	sl, #3
 801516e:	fa0a f202 	lsl.w	r2, sl, r2
 8015172:	e7a7      	b.n	80150c4 <HAL_GPIO_Init+0x134>
 8015174:	f04f 0a09 	mov.w	sl, #9
 8015178:	fa0a f202 	lsl.w	r2, sl, r2
 801517c:	e7a2      	b.n	80150c4 <HAL_GPIO_Init+0x134>
 801517e:	f04f 0a04 	mov.w	sl, #4
 8015182:	fa0a f202 	lsl.w	r2, sl, r2
 8015186:	e79d      	b.n	80150c4 <HAL_GPIO_Init+0x134>
 8015188:	f04f 0a05 	mov.w	sl, #5
 801518c:	fa0a f202 	lsl.w	r2, sl, r2
 8015190:	e798      	b.n	80150c4 <HAL_GPIO_Init+0x134>
 8015192:	f04f 0a06 	mov.w	sl, #6
 8015196:	fa0a f202 	lsl.w	r2, sl, r2
 801519a:	e793      	b.n	80150c4 <HAL_GPIO_Init+0x134>
 801519c:	f04f 0a07 	mov.w	sl, #7
 80151a0:	fa0a f202 	lsl.w	r2, sl, r2
 80151a4:	e78e      	b.n	80150c4 <HAL_GPIO_Init+0x134>
 80151a6:	f04f 0a08 	mov.w	sl, #8
 80151aa:	fa0a f202 	lsl.w	r2, sl, r2
 80151ae:	e789      	b.n	80150c4 <HAL_GPIO_Init+0x134>
 80151b0:	40013800 	.word	0x40013800
 80151b4:	40020400 	.word	0x40020400
 80151b8:	40020800 	.word	0x40020800
 80151bc:	40020c00 	.word	0x40020c00
 80151c0:	40021000 	.word	0x40021000
 80151c4:	40021400 	.word	0x40021400
 80151c8:	40021800 	.word	0x40021800
 80151cc:	40023800 	.word	0x40023800
 80151d0:	40020000 	.word	0x40020000
 80151d4:	40013c00 	.word	0x40013c00
 80151d8:	40021c00 	.word	0x40021c00
 80151dc:	40022000 	.word	0x40022000
 80151e0:	40022400 	.word	0x40022400

080151e4 <HAL_UART_MspInit>:
 80151e4:	4770      	bx	lr
 80151e6:	bf00      	nop

080151e8 <UART_WaitOnFlagUntilTimeout>:
 80151e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151ec:	4617      	mov	r7, r2
 80151ee:	4606      	mov	r6, r0
 80151f0:	460c      	mov	r4, r1
 80151f2:	461d      	mov	r5, r3
 80151f4:	f7ff feb2 	bl	8014f5c <HAL_GetTick>
 80151f8:	4680      	mov	r8, r0
 80151fa:	b98f      	cbnz	r7, 8015220 <UART_WaitOnFlagUntilTimeout+0x38>
 80151fc:	6833      	ldr	r3, [r6, #0]
 80151fe:	e001      	b.n	8015204 <UART_WaitOnFlagUntilTimeout+0x1c>
 8015200:	1c69      	adds	r1, r5, #1
 8015202:	d118      	bne.n	8015236 <UART_WaitOnFlagUntilTimeout+0x4e>
 8015204:	69da      	ldr	r2, [r3, #28]
 8015206:	4022      	ands	r2, r4
 8015208:	42a2      	cmp	r2, r4
 801520a:	d1f9      	bne.n	8015200 <UART_WaitOnFlagUntilTimeout+0x18>
 801520c:	2000      	movs	r0, #0
 801520e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015212:	b1c5      	cbz	r5, 8015246 <UART_WaitOnFlagUntilTimeout+0x5e>
 8015214:	f7ff fea2 	bl	8014f5c <HAL_GetTick>
 8015218:	ebc8 0000 	rsb	r0, r8, r0
 801521c:	4285      	cmp	r5, r0
 801521e:	d911      	bls.n	8015244 <UART_WaitOnFlagUntilTimeout+0x5c>
 8015220:	6833      	ldr	r3, [r6, #0]
 8015222:	e001      	b.n	8015228 <UART_WaitOnFlagUntilTimeout+0x40>
 8015224:	1c6a      	adds	r2, r5, #1
 8015226:	d1f4      	bne.n	8015212 <UART_WaitOnFlagUntilTimeout+0x2a>
 8015228:	69da      	ldr	r2, [r3, #28]
 801522a:	4022      	ands	r2, r4
 801522c:	42a2      	cmp	r2, r4
 801522e:	d0f9      	beq.n	8015224 <UART_WaitOnFlagUntilTimeout+0x3c>
 8015230:	2000      	movs	r0, #0
 8015232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015236:	b135      	cbz	r5, 8015246 <UART_WaitOnFlagUntilTimeout+0x5e>
 8015238:	f7ff fe90 	bl	8014f5c <HAL_GetTick>
 801523c:	ebc8 0000 	rsb	r0, r8, r0
 8015240:	4285      	cmp	r5, r0
 8015242:	d8db      	bhi.n	80151fc <UART_WaitOnFlagUntilTimeout+0x14>
 8015244:	6833      	ldr	r3, [r6, #0]
 8015246:	681a      	ldr	r2, [r3, #0]
 8015248:	2401      	movs	r4, #1
 801524a:	2100      	movs	r1, #0
 801524c:	2003      	movs	r0, #3
 801524e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8015252:	601a      	str	r2, [r3, #0]
 8015254:	681a      	ldr	r2, [r3, #0]
 8015256:	f022 0220 	bic.w	r2, r2, #32
 801525a:	601a      	str	r2, [r3, #0]
 801525c:	681a      	ldr	r2, [r3, #0]
 801525e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8015262:	601a      	str	r2, [r3, #0]
 8015264:	689a      	ldr	r2, [r3, #8]
 8015266:	f022 0201 	bic.w	r2, r2, #1
 801526a:	609a      	str	r2, [r3, #8]
 801526c:	f886 4069 	strb.w	r4, [r6, #105]	; 0x69
 8015270:	f886 1068 	strb.w	r1, [r6, #104]	; 0x68
 8015274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015278 <UART_SetConfig>:
 8015278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801527a:	4605      	mov	r5, r0
 801527c:	4aa4      	ldr	r2, [pc, #656]	; (8015510 <UART_SetConfig+0x298>)
 801527e:	48a5      	ldr	r0, [pc, #660]	; (8015514 <UART_SetConfig+0x29c>)
 8015280:	68a9      	ldr	r1, [r5, #8]
 8015282:	692e      	ldr	r6, [r5, #16]
 8015284:	682c      	ldr	r4, [r5, #0]
 8015286:	696b      	ldr	r3, [r5, #20]
 8015288:	430e      	orrs	r6, r1
 801528a:	6827      	ldr	r7, [r4, #0]
 801528c:	4284      	cmp	r4, r0
 801528e:	69e9      	ldr	r1, [r5, #28]
 8015290:	ea43 0306 	orr.w	r3, r3, r6
 8015294:	ea02 0207 	and.w	r2, r2, r7
 8015298:	6a2f      	ldr	r7, [r5, #32]
 801529a:	ea43 0301 	orr.w	r3, r3, r1
 801529e:	68ee      	ldr	r6, [r5, #12]
 80152a0:	ea42 0203 	orr.w	r2, r2, r3
 80152a4:	69ab      	ldr	r3, [r5, #24]
 80152a6:	6022      	str	r2, [r4, #0]
 80152a8:	ea47 0203 	orr.w	r2, r7, r3
 80152ac:	6863      	ldr	r3, [r4, #4]
 80152ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80152b2:	ea43 0306 	orr.w	r3, r3, r6
 80152b6:	6063      	str	r3, [r4, #4]
 80152b8:	68a3      	ldr	r3, [r4, #8]
 80152ba:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80152be:	ea43 0302 	orr.w	r3, r3, r2
 80152c2:	60a3      	str	r3, [r4, #8]
 80152c4:	d04c      	beq.n	8015360 <UART_SetConfig+0xe8>
 80152c6:	4b94      	ldr	r3, [pc, #592]	; (8015518 <UART_SetConfig+0x2a0>)
 80152c8:	429c      	cmp	r4, r3
 80152ca:	f000 80c9 	beq.w	8015460 <UART_SetConfig+0x1e8>
 80152ce:	4b93      	ldr	r3, [pc, #588]	; (801551c <UART_SetConfig+0x2a4>)
 80152d0:	429c      	cmp	r4, r3
 80152d2:	f000 8097 	beq.w	8015404 <UART_SetConfig+0x18c>
 80152d6:	4b92      	ldr	r3, [pc, #584]	; (8015520 <UART_SetConfig+0x2a8>)
 80152d8:	429c      	cmp	r4, r3
 80152da:	d023      	beq.n	8015324 <UART_SetConfig+0xac>
 80152dc:	4b91      	ldr	r3, [pc, #580]	; (8015524 <UART_SetConfig+0x2ac>)
 80152de:	429c      	cmp	r4, r3
 80152e0:	d00f      	beq.n	8015302 <UART_SetConfig+0x8a>
 80152e2:	4b91      	ldr	r3, [pc, #580]	; (8015528 <UART_SetConfig+0x2b0>)
 80152e4:	429c      	cmp	r4, r3
 80152e6:	d05d      	beq.n	80153a4 <UART_SetConfig+0x12c>
 80152e8:	4b90      	ldr	r3, [pc, #576]	; (801552c <UART_SetConfig+0x2b4>)
 80152ea:	429c      	cmp	r4, r3
 80152ec:	d07b      	beq.n	80153e6 <UART_SetConfig+0x16e>
 80152ee:	4b90      	ldr	r3, [pc, #576]	; (8015530 <UART_SetConfig+0x2b8>)
 80152f0:	429c      	cmp	r4, r3
 80152f2:	f000 80f9 	beq.w	80154e8 <UART_SetConfig+0x270>
 80152f6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80152fa:	d02c      	beq.n	8015356 <UART_SetConfig+0xde>
 80152fc:	2101      	movs	r1, #1
 80152fe:	4608      	mov	r0, r1
 8015300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015302:	f503 33f4 	add.w	r3, r3, #124928	; 0x1e800
 8015306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801530a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801530e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015312:	d071      	beq.n	80153f8 <UART_SetConfig+0x180>
 8015314:	d90f      	bls.n	8015336 <UART_SetConfig+0xbe>
 8015316:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801531a:	d07e      	beq.n	801541a <UART_SetConfig+0x1a2>
 801531c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8015320:	d057      	beq.n	80153d2 <UART_SetConfig+0x15a>
 8015322:	e7e8      	b.n	80152f6 <UART_SetConfig+0x7e>
 8015324:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8015328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801532c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8015330:	2b40      	cmp	r3, #64	; 0x40
 8015332:	d061      	beq.n	80153f8 <UART_SetConfig+0x180>
 8015334:	d849      	bhi.n	80153ca <UART_SetConfig+0x152>
 8015336:	2b00      	cmp	r3, #0
 8015338:	d1dd      	bne.n	80152f6 <UART_SetConfig+0x7e>
 801533a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 801533e:	f000 80bb 	beq.w	80154b8 <UART_SetConfig+0x240>
 8015342:	f7ff fd61 	bl	8014e08 <HAL_RCC_GetPCLK1Freq>
 8015346:	686b      	ldr	r3, [r5, #4]
 8015348:	2100      	movs	r1, #0
 801534a:	fbb0 f0f3 	udiv	r0, r0, r3
 801534e:	b280      	uxth	r0, r0
 8015350:	60e0      	str	r0, [r4, #12]
 8015352:	4608      	mov	r0, r1
 8015354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015356:	2300      	movs	r3, #0
 8015358:	2101      	movs	r1, #1
 801535a:	60e3      	str	r3, [r4, #12]
 801535c:	4608      	mov	r0, r1
 801535e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015360:	4b74      	ldr	r3, [pc, #464]	; (8015534 <UART_SetConfig+0x2bc>)
 8015362:	4a75      	ldr	r2, [pc, #468]	; (8015538 <UART_SetConfig+0x2c0>)
 8015364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015368:	f003 0303 	and.w	r3, r3, #3
 801536c:	5cd3      	ldrb	r3, [r2, r3]
 801536e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8015372:	d05e      	beq.n	8015432 <UART_SetConfig+0x1ba>
 8015374:	2b08      	cmp	r3, #8
 8015376:	d8c1      	bhi.n	80152fc <UART_SetConfig+0x84>
 8015378:	a201      	add	r2, pc, #4	; (adr r2, 8015380 <UART_SetConfig+0x108>)
 801537a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801537e:	bf00      	nop
 8015380:	08015343 	.word	0x08015343
 8015384:	080153c5 	.word	0x080153c5
 8015388:	08015421 	.word	0x08015421
 801538c:	080152fd 	.word	0x080152fd
 8015390:	080153ff 	.word	0x080153ff
 8015394:	080152fd 	.word	0x080152fd
 8015398:	080152fd 	.word	0x080152fd
 801539c:	080152fd 	.word	0x080152fd
 80153a0:	080153d9 	.word	0x080153d9
 80153a4:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
 80153a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80153ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80153b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80153b4:	d020      	beq.n	80153f8 <UART_SetConfig+0x180>
 80153b6:	f200 808b 	bhi.w	80154d0 <UART_SetConfig+0x258>
 80153ba:	2b00      	cmp	r3, #0
 80153bc:	d19b      	bne.n	80152f6 <UART_SetConfig+0x7e>
 80153be:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80153c2:	d076      	beq.n	80154b2 <UART_SetConfig+0x23a>
 80153c4:	f7ff fd38 	bl	8014e38 <HAL_RCC_GetPCLK2Freq>
 80153c8:	e7bd      	b.n	8015346 <UART_SetConfig+0xce>
 80153ca:	2b80      	cmp	r3, #128	; 0x80
 80153cc:	d025      	beq.n	801541a <UART_SetConfig+0x1a2>
 80153ce:	2bc0      	cmp	r3, #192	; 0xc0
 80153d0:	d191      	bne.n	80152f6 <UART_SetConfig+0x7e>
 80153d2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80153d6:	d04c      	beq.n	8015472 <UART_SetConfig+0x1fa>
 80153d8:	686a      	ldr	r2, [r5, #4]
 80153da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80153de:	2100      	movs	r1, #0
 80153e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80153e4:	e7b9      	b.n	801535a <UART_SetConfig+0xe2>
 80153e6:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 80153ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80153ee:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80153f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80153f6:	d162      	bne.n	80154be <UART_SetConfig+0x246>
 80153f8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80153fc:	d046      	beq.n	801548c <UART_SetConfig+0x214>
 80153fe:	f7ff fc99 	bl	8014d34 <HAL_RCC_GetSysClockFreq>
 8015402:	e7a0      	b.n	8015346 <UART_SetConfig+0xce>
 8015404:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8015408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801540c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8015410:	2b10      	cmp	r3, #16
 8015412:	d0f1      	beq.n	80153f8 <UART_SetConfig+0x180>
 8015414:	d98f      	bls.n	8015336 <UART_SetConfig+0xbe>
 8015416:	2b20      	cmp	r3, #32
 8015418:	d162      	bne.n	80154e0 <UART_SetConfig+0x268>
 801541a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 801541e:	d044      	beq.n	80154aa <UART_SetConfig+0x232>
 8015420:	686a      	ldr	r2, [r5, #4]
 8015422:	2100      	movs	r1, #0
 8015424:	4b45      	ldr	r3, [pc, #276]	; (801553c <UART_SetConfig+0x2c4>)
 8015426:	4608      	mov	r0, r1
 8015428:	fbb3 f3f2 	udiv	r3, r3, r2
 801542c:	b29b      	uxth	r3, r3
 801542e:	60e3      	str	r3, [r4, #12]
 8015430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015432:	2b08      	cmp	r3, #8
 8015434:	d88f      	bhi.n	8015356 <UART_SetConfig+0xde>
 8015436:	a201      	add	r2, pc, #4	; (adr r2, 801543c <UART_SetConfig+0x1c4>)
 8015438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801543c:	080154b9 	.word	0x080154b9
 8015440:	080154b3 	.word	0x080154b3
 8015444:	080154ab 	.word	0x080154ab
 8015448:	08015357 	.word	0x08015357
 801544c:	0801548d 	.word	0x0801548d
 8015450:	08015357 	.word	0x08015357
 8015454:	08015357 	.word	0x08015357
 8015458:	08015357 	.word	0x08015357
 801545c:	08015473 	.word	0x08015473
 8015460:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8015464:	4a36      	ldr	r2, [pc, #216]	; (8015540 <UART_SetConfig+0x2c8>)
 8015466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801546a:	f003 030c 	and.w	r3, r3, #12
 801546e:	5cd3      	ldrb	r3, [r2, r3]
 8015470:	e77d      	b.n	801536e <UART_SetConfig+0xf6>
 8015472:	686a      	ldr	r2, [r5, #4]
 8015474:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8015478:	2100      	movs	r1, #0
 801547a:	fbb3 f2f2 	udiv	r2, r3, r2
 801547e:	b292      	uxth	r2, r2
 8015480:	f3c2 0342 	ubfx	r3, r2, #1, #3
 8015484:	f022 020f 	bic.w	r2, r2, #15
 8015488:	4313      	orrs	r3, r2
 801548a:	e766      	b.n	801535a <UART_SetConfig+0xe2>
 801548c:	f7ff fc52 	bl	8014d34 <HAL_RCC_GetSysClockFreq>
 8015490:	686a      	ldr	r2, [r5, #4]
 8015492:	0040      	lsls	r0, r0, #1
 8015494:	682c      	ldr	r4, [r5, #0]
 8015496:	2100      	movs	r1, #0
 8015498:	fbb0 f2f2 	udiv	r2, r0, r2
 801549c:	b292      	uxth	r2, r2
 801549e:	f3c2 0342 	ubfx	r3, r2, #1, #3
 80154a2:	f022 020f 	bic.w	r2, r2, #15
 80154a6:	4313      	orrs	r3, r2
 80154a8:	e757      	b.n	801535a <UART_SetConfig+0xe2>
 80154aa:	686a      	ldr	r2, [r5, #4]
 80154ac:	2100      	movs	r1, #0
 80154ae:	4b25      	ldr	r3, [pc, #148]	; (8015544 <UART_SetConfig+0x2cc>)
 80154b0:	e7e3      	b.n	801547a <UART_SetConfig+0x202>
 80154b2:	f7ff fcc1 	bl	8014e38 <HAL_RCC_GetPCLK2Freq>
 80154b6:	e7eb      	b.n	8015490 <UART_SetConfig+0x218>
 80154b8:	f7ff fca6 	bl	8014e08 <HAL_RCC_GetPCLK1Freq>
 80154bc:	e7e8      	b.n	8015490 <UART_SetConfig+0x218>
 80154be:	f67f af3a 	bls.w	8015336 <UART_SetConfig+0xbe>
 80154c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80154c6:	d0a8      	beq.n	801541a <UART_SetConfig+0x1a2>
 80154c8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80154cc:	d081      	beq.n	80153d2 <UART_SetConfig+0x15a>
 80154ce:	e712      	b.n	80152f6 <UART_SetConfig+0x7e>
 80154d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80154d4:	d0a1      	beq.n	801541a <UART_SetConfig+0x1a2>
 80154d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80154da:	f43f af7a 	beq.w	80153d2 <UART_SetConfig+0x15a>
 80154de:	e70a      	b.n	80152f6 <UART_SetConfig+0x7e>
 80154e0:	2b30      	cmp	r3, #48	; 0x30
 80154e2:	f43f af76 	beq.w	80153d2 <UART_SetConfig+0x15a>
 80154e6:	e706      	b.n	80152f6 <UART_SetConfig+0x7e>
 80154e8:	f503 33de 	add.w	r3, r3, #113664	; 0x1bc00
 80154ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80154f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80154f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80154f8:	f43f af7e 	beq.w	80153f8 <UART_SetConfig+0x180>
 80154fc:	f67f af1b 	bls.w	8015336 <UART_SetConfig+0xbe>
 8015500:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015504:	d089      	beq.n	801541a <UART_SetConfig+0x1a2>
 8015506:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801550a:	f43f af62 	beq.w	80153d2 <UART_SetConfig+0x15a>
 801550e:	e6f2      	b.n	80152f6 <UART_SetConfig+0x7e>
 8015510:	efff69f3 	.word	0xefff69f3
 8015514:	40011000 	.word	0x40011000
 8015518:	40004400 	.word	0x40004400
 801551c:	40004800 	.word	0x40004800
 8015520:	40004c00 	.word	0x40004c00
 8015524:	40005000 	.word	0x40005000
 8015528:	40011400 	.word	0x40011400
 801552c:	40007800 	.word	0x40007800
 8015530:	40007c00 	.word	0x40007c00
 8015534:	40023800 	.word	0x40023800
 8015538:	0801ce24 	.word	0x0801ce24
 801553c:	00f42400 	.word	0x00f42400
 8015540:	0801ce14 	.word	0x0801ce14
 8015544:	01e84800 	.word	0x01e84800

08015548 <UART_AdvFeatureConfig>:
 8015548:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801554a:	07da      	lsls	r2, r3, #31
 801554c:	b410      	push	{r4}
 801554e:	d506      	bpl.n	801555e <UART_AdvFeatureConfig+0x16>
 8015550:	6804      	ldr	r4, [r0, #0]
 8015552:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8015554:	6861      	ldr	r1, [r4, #4]
 8015556:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
 801555a:	430a      	orrs	r2, r1
 801555c:	6062      	str	r2, [r4, #4]
 801555e:	079c      	lsls	r4, r3, #30
 8015560:	d506      	bpl.n	8015570 <UART_AdvFeatureConfig+0x28>
 8015562:	6804      	ldr	r4, [r0, #0]
 8015564:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8015566:	6861      	ldr	r1, [r4, #4]
 8015568:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 801556c:	430a      	orrs	r2, r1
 801556e:	6062      	str	r2, [r4, #4]
 8015570:	0759      	lsls	r1, r3, #29
 8015572:	d506      	bpl.n	8015582 <UART_AdvFeatureConfig+0x3a>
 8015574:	6804      	ldr	r4, [r0, #0]
 8015576:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8015578:	6861      	ldr	r1, [r4, #4]
 801557a:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 801557e:	430a      	orrs	r2, r1
 8015580:	6062      	str	r2, [r4, #4]
 8015582:	071a      	lsls	r2, r3, #28
 8015584:	d506      	bpl.n	8015594 <UART_AdvFeatureConfig+0x4c>
 8015586:	6804      	ldr	r4, [r0, #0]
 8015588:	6b42      	ldr	r2, [r0, #52]	; 0x34
 801558a:	6861      	ldr	r1, [r4, #4]
 801558c:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8015590:	430a      	orrs	r2, r1
 8015592:	6062      	str	r2, [r4, #4]
 8015594:	06dc      	lsls	r4, r3, #27
 8015596:	d506      	bpl.n	80155a6 <UART_AdvFeatureConfig+0x5e>
 8015598:	6804      	ldr	r4, [r0, #0]
 801559a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 801559c:	68a1      	ldr	r1, [r4, #8]
 801559e:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 80155a2:	430a      	orrs	r2, r1
 80155a4:	60a2      	str	r2, [r4, #8]
 80155a6:	0699      	lsls	r1, r3, #26
 80155a8:	d506      	bpl.n	80155b8 <UART_AdvFeatureConfig+0x70>
 80155aa:	6804      	ldr	r4, [r0, #0]
 80155ac:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80155ae:	68a1      	ldr	r1, [r4, #8]
 80155b0:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 80155b4:	430a      	orrs	r2, r1
 80155b6:	60a2      	str	r2, [r4, #8]
 80155b8:	065a      	lsls	r2, r3, #25
 80155ba:	d50a      	bpl.n	80155d2 <UART_AdvFeatureConfig+0x8a>
 80155bc:	6801      	ldr	r1, [r0, #0]
 80155be:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80155c0:	684a      	ldr	r2, [r1, #4]
 80155c2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80155c6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80155ca:	ea42 0204 	orr.w	r2, r2, r4
 80155ce:	604a      	str	r2, [r1, #4]
 80155d0:	d00b      	beq.n	80155ea <UART_AdvFeatureConfig+0xa2>
 80155d2:	061b      	lsls	r3, r3, #24
 80155d4:	d506      	bpl.n	80155e4 <UART_AdvFeatureConfig+0x9c>
 80155d6:	6801      	ldr	r1, [r0, #0]
 80155d8:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80155da:	684b      	ldr	r3, [r1, #4]
 80155dc:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80155e0:	4313      	orrs	r3, r2
 80155e2:	604b      	str	r3, [r1, #4]
 80155e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80155e8:	4770      	bx	lr
 80155ea:	684c      	ldr	r4, [r1, #4]
 80155ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80155ee:	f424 04c0 	bic.w	r4, r4, #6291456	; 0x600000
 80155f2:	4322      	orrs	r2, r4
 80155f4:	604a      	str	r2, [r1, #4]
 80155f6:	e7ec      	b.n	80155d2 <UART_AdvFeatureConfig+0x8a>

080155f8 <UART_CheckIdleState>:
 80155f8:	2200      	movs	r2, #0
 80155fa:	6803      	ldr	r3, [r0, #0]
 80155fc:	b510      	push	{r4, lr}
 80155fe:	66c2      	str	r2, [r0, #108]	; 0x6c
 8015600:	4604      	mov	r4, r0
 8015602:	6819      	ldr	r1, [r3, #0]
 8015604:	0709      	lsls	r1, r1, #28
 8015606:	d40a      	bmi.n	801561e <UART_CheckIdleState+0x26>
 8015608:	681b      	ldr	r3, [r3, #0]
 801560a:	075b      	lsls	r3, r3, #29
 801560c:	d410      	bmi.n	8015630 <UART_CheckIdleState+0x38>
 801560e:	2300      	movs	r3, #0
 8015610:	2201      	movs	r2, #1
 8015612:	4618      	mov	r0, r3
 8015614:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
 8015618:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 801561c:	bd10      	pop	{r4, pc}
 801561e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8015622:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8015626:	f7ff fddf 	bl	80151e8 <UART_WaitOnFlagUntilTimeout>
 801562a:	b168      	cbz	r0, 8015648 <UART_CheckIdleState+0x50>
 801562c:	2003      	movs	r0, #3
 801562e:	bd10      	pop	{r4, pc}
 8015630:	4620      	mov	r0, r4
 8015632:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8015636:	2200      	movs	r2, #0
 8015638:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801563c:	f7ff fdd4 	bl	80151e8 <UART_WaitOnFlagUntilTimeout>
 8015640:	2800      	cmp	r0, #0
 8015642:	d0e4      	beq.n	801560e <UART_CheckIdleState+0x16>
 8015644:	2003      	movs	r0, #3
 8015646:	bd10      	pop	{r4, pc}
 8015648:	6823      	ldr	r3, [r4, #0]
 801564a:	e7dd      	b.n	8015608 <UART_CheckIdleState+0x10>

0801564c <HAL_UART_Init>:
 801564c:	b390      	cbz	r0, 80156b4 <HAL_UART_Init+0x68>
 801564e:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8015652:	b510      	push	{r4, lr}
 8015654:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8015658:	4604      	mov	r4, r0
 801565a:	b303      	cbz	r3, 801569e <HAL_UART_Init+0x52>
 801565c:	6822      	ldr	r2, [r4, #0]
 801565e:	2302      	movs	r3, #2
 8015660:	4620      	mov	r0, r4
 8015662:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8015666:	6813      	ldr	r3, [r2, #0]
 8015668:	f023 0301 	bic.w	r3, r3, #1
 801566c:	6013      	str	r3, [r2, #0]
 801566e:	f7ff fe03 	bl	8015278 <UART_SetConfig>
 8015672:	2801      	cmp	r0, #1
 8015674:	d01c      	beq.n	80156b0 <HAL_UART_Init+0x64>
 8015676:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015678:	b9b3      	cbnz	r3, 80156a8 <HAL_UART_Init+0x5c>
 801567a:	6823      	ldr	r3, [r4, #0]
 801567c:	4620      	mov	r0, r4
 801567e:	685a      	ldr	r2, [r3, #4]
 8015680:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8015684:	605a      	str	r2, [r3, #4]
 8015686:	689a      	ldr	r2, [r3, #8]
 8015688:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801568c:	609a      	str	r2, [r3, #8]
 801568e:	681a      	ldr	r2, [r3, #0]
 8015690:	f042 0201 	orr.w	r2, r2, #1
 8015694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015698:	601a      	str	r2, [r3, #0]
 801569a:	f7ff bfad 	b.w	80155f8 <UART_CheckIdleState>
 801569e:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
 80156a2:	f7ff fd9f 	bl	80151e4 <HAL_UART_MspInit>
 80156a6:	e7d9      	b.n	801565c <HAL_UART_Init+0x10>
 80156a8:	4620      	mov	r0, r4
 80156aa:	f7ff ff4d 	bl	8015548 <UART_AdvFeatureConfig>
 80156ae:	e7e4      	b.n	801567a <HAL_UART_Init+0x2e>
 80156b0:	2001      	movs	r0, #1
 80156b2:	bd10      	pop	{r4, pc}
 80156b4:	2001      	movs	r0, #1
 80156b6:	4770      	bx	lr

080156b8 <timer_irq_handler>:
 80156b8:	b570      	push	{r4, r5, r6, lr}
 80156ba:	4c11      	ldr	r4, [pc, #68]	; (8015700 <timer_irq_handler+0x48>)
 80156bc:	6823      	ldr	r3, [r4, #0]
 80156be:	68da      	ldr	r2, [r3, #12]
 80156c0:	0791      	lsls	r1, r2, #30
 80156c2:	d415      	bmi.n	80156f0 <timer_irq_handler+0x38>
 80156c4:	68da      	ldr	r2, [r3, #12]
 80156c6:	0752      	lsls	r2, r2, #29
 80156c8:	d509      	bpl.n	80156de <timer_irq_handler+0x26>
 80156ca:	f06f 0204 	mvn.w	r2, #4
 80156ce:	4e0d      	ldr	r6, [pc, #52]	; (8015704 <timer_irq_handler+0x4c>)
 80156d0:	611a      	str	r2, [r3, #16]
 80156d2:	6832      	ldr	r2, [r6, #0]
 80156d4:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80156d6:	1aaa      	subs	r2, r5, r2
 80156d8:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80156dc:	d200      	bcs.n	80156e0 <timer_irq_handler+0x28>
 80156de:	bd70      	pop	{r4, r5, r6, pc}
 80156e0:	f7ff fc34 	bl	8014f4c <HAL_IncTick>
 80156e4:	6823      	ldr	r3, [r4, #0]
 80156e6:	f505 727a 	add.w	r2, r5, #1000	; 0x3e8
 80156ea:	6035      	str	r5, [r6, #0]
 80156ec:	639a      	str	r2, [r3, #56]	; 0x38
 80156ee:	bd70      	pop	{r4, r5, r6, pc}
 80156f0:	f06f 0202 	mvn.w	r2, #2
 80156f4:	611a      	str	r2, [r3, #16]
 80156f6:	f000 fffd 	bl	80166f4 <us_ticker_irq_handler>
 80156fa:	6823      	ldr	r3, [r4, #0]
 80156fc:	e7e2      	b.n	80156c4 <timer_irq_handler+0xc>
 80156fe:	bf00      	nop
 8015700:	20001b50 	.word	0x20001b50
 8015704:	200018e4 	.word	0x200018e4

08015708 <HAL_InitTick>:
 8015708:	b530      	push	{r4, r5, lr}
 801570a:	b089      	sub	sp, #36	; 0x24
 801570c:	4c29      	ldr	r4, [pc, #164]	; (80157b4 <HAL_InitTick+0xac>)
 801570e:	f04f 35ff 	mov.w	r5, #4294967295
 8015712:	a901      	add	r1, sp, #4
 8015714:	a803      	add	r0, sp, #12
 8015716:	f7ff fba7 	bl	8014e68 <HAL_RCC_GetClockConfig>
 801571a:	f7ff fb75 	bl	8014e08 <HAL_RCC_GetPCLK1Freq>
 801571e:	4b26      	ldr	r3, [pc, #152]	; (80157b8 <HAL_InitTick+0xb0>)
 8015720:	9001      	str	r0, [sp, #4]
 8015722:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8015724:	60e5      	str	r5, [r4, #12]
 8015726:	f042 0208 	orr.w	r2, r2, #8
 801572a:	4924      	ldr	r1, [pc, #144]	; (80157bc <HAL_InitTick+0xb4>)
 801572c:	641a      	str	r2, [r3, #64]	; 0x40
 801572e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8015730:	f002 0208 	and.w	r2, r2, #8
 8015734:	9202      	str	r2, [sp, #8]
 8015736:	9a02      	ldr	r2, [sp, #8]
 8015738:	6a1a      	ldr	r2, [r3, #32]
 801573a:	f042 0208 	orr.w	r2, r2, #8
 801573e:	621a      	str	r2, [r3, #32]
 8015740:	6a1a      	ldr	r2, [r3, #32]
 8015742:	f022 0208 	bic.w	r2, r2, #8
 8015746:	621a      	str	r2, [r3, #32]
 8015748:	9b06      	ldr	r3, [sp, #24]
 801574a:	6021      	str	r1, [r4, #0]
 801574c:	b35b      	cbz	r3, 80157a6 <HAL_InitTick+0x9e>
 801574e:	0040      	lsls	r0, r0, #1
 8015750:	4b1b      	ldr	r3, [pc, #108]	; (80157c0 <HAL_InitTick+0xb8>)
 8015752:	fba3 3000 	umull	r3, r0, r3, r0
 8015756:	0c80      	lsrs	r0, r0, #18
 8015758:	3801      	subs	r0, #1
 801575a:	6060      	str	r0, [r4, #4]
 801575c:	2500      	movs	r5, #0
 801575e:	4815      	ldr	r0, [pc, #84]	; (80157b4 <HAL_InitTick+0xac>)
 8015760:	6125      	str	r5, [r4, #16]
 8015762:	60a5      	str	r5, [r4, #8]
 8015764:	6165      	str	r5, [r4, #20]
 8015766:	f000 f8e1 	bl	801592c <HAL_TIM_OC_Init>
 801576a:	2032      	movs	r0, #50	; 0x32
 801576c:	4915      	ldr	r1, [pc, #84]	; (80157c4 <HAL_InitTick+0xbc>)
 801576e:	f7fe fe5d 	bl	801442c <NVIC_SetVector>
 8015772:	4b15      	ldr	r3, [pc, #84]	; (80157c8 <HAL_InitTick+0xc0>)
 8015774:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8015778:	4629      	mov	r1, r5
 801577a:	480e      	ldr	r0, [pc, #56]	; (80157b4 <HAL_InitTick+0xac>)
 801577c:	605a      	str	r2, [r3, #4]
 801577e:	f000 f829 	bl	80157d4 <HAL_TIM_OC_Start>
 8015782:	2104      	movs	r1, #4
 8015784:	480b      	ldr	r0, [pc, #44]	; (80157b4 <HAL_InitTick+0xac>)
 8015786:	f000 f825 	bl	80157d4 <HAL_TIM_OC_Start>
 801578a:	6823      	ldr	r3, [r4, #0]
 801578c:	4c0f      	ldr	r4, [pc, #60]	; (80157cc <HAL_InitTick+0xc4>)
 801578e:	4628      	mov	r0, r5
 8015790:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015792:	f502 717a 	add.w	r1, r2, #1000	; 0x3e8
 8015796:	6022      	str	r2, [r4, #0]
 8015798:	6399      	str	r1, [r3, #56]	; 0x38
 801579a:	68da      	ldr	r2, [r3, #12]
 801579c:	f042 0204 	orr.w	r2, r2, #4
 80157a0:	60da      	str	r2, [r3, #12]
 80157a2:	b009      	add	sp, #36	; 0x24
 80157a4:	bd30      	pop	{r4, r5, pc}
 80157a6:	4b06      	ldr	r3, [pc, #24]	; (80157c0 <HAL_InitTick+0xb8>)
 80157a8:	fba3 3000 	umull	r3, r0, r3, r0
 80157ac:	0c80      	lsrs	r0, r0, #18
 80157ae:	4428      	add	r0, r5
 80157b0:	6060      	str	r0, [r4, #4]
 80157b2:	e7d3      	b.n	801575c <HAL_InitTick+0x54>
 80157b4:	20001b50 	.word	0x20001b50
 80157b8:	40023800 	.word	0x40023800
 80157bc:	40000c00 	.word	0x40000c00
 80157c0:	431bde83 	.word	0x431bde83
 80157c4:	080156b9 	.word	0x080156b9
 80157c8:	e000e100 	.word	0xe000e100
 80157cc:	200018e4 	.word	0x200018e4

080157d0 <HAL_TIM_OC_MspInit>:
 80157d0:	4770      	bx	lr
 80157d2:	bf00      	nop

080157d4 <HAL_TIM_OC_Start>:
 80157d4:	6803      	ldr	r3, [r0, #0]
 80157d6:	2201      	movs	r2, #1
 80157d8:	6a18      	ldr	r0, [r3, #32]
 80157da:	408a      	lsls	r2, r1
 80157dc:	ea20 0002 	bic.w	r0, r0, r2
 80157e0:	b410      	push	{r4}
 80157e2:	6218      	str	r0, [r3, #32]
 80157e4:	4c0b      	ldr	r4, [pc, #44]	; (8015814 <HAL_TIM_OC_Start+0x40>)
 80157e6:	6a19      	ldr	r1, [r3, #32]
 80157e8:	42a3      	cmp	r3, r4
 80157ea:	ea42 0201 	orr.w	r2, r2, r1
 80157ee:	621a      	str	r2, [r3, #32]
 80157f0:	d00a      	beq.n	8015808 <HAL_TIM_OC_Start+0x34>
 80157f2:	4a09      	ldr	r2, [pc, #36]	; (8015818 <HAL_TIM_OC_Start+0x44>)
 80157f4:	4293      	cmp	r3, r2
 80157f6:	d007      	beq.n	8015808 <HAL_TIM_OC_Start+0x34>
 80157f8:	681a      	ldr	r2, [r3, #0]
 80157fa:	2000      	movs	r0, #0
 80157fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015800:	f042 0201 	orr.w	r2, r2, #1
 8015804:	601a      	str	r2, [r3, #0]
 8015806:	4770      	bx	lr
 8015808:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801580a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801580e:	645a      	str	r2, [r3, #68]	; 0x44
 8015810:	e7f2      	b.n	80157f8 <HAL_TIM_OC_Start+0x24>
 8015812:	bf00      	nop
 8015814:	40010400 	.word	0x40010400
 8015818:	40010000 	.word	0x40010000

0801581c <TIM_Base_SetConfig>:
 801581c:	4a3b      	ldr	r2, [pc, #236]	; (801590c <TIM_Base_SetConfig+0xf0>)
 801581e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8015822:	6803      	ldr	r3, [r0, #0]
 8015824:	b470      	push	{r4, r5, r6}
 8015826:	eba0 0602 	sub.w	r6, r0, r2
 801582a:	fab6 f686 	clz	r6, r6
 801582e:	ea4f 1656 	mov.w	r6, r6, lsr #5
 8015832:	d04c      	beq.n	80158ce <TIM_Base_SetConfig+0xb2>
 8015834:	2e00      	cmp	r6, #0
 8015836:	d14a      	bne.n	80158ce <TIM_Base_SetConfig+0xb2>
 8015838:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 801583c:	4290      	cmp	r0, r2
 801583e:	d00d      	beq.n	801585c <TIM_Base_SetConfig+0x40>
 8015840:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8015844:	4290      	cmp	r0, r2
 8015846:	d009      	beq.n	801585c <TIM_Base_SetConfig+0x40>
 8015848:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801584c:	4c30      	ldr	r4, [pc, #192]	; (8015910 <TIM_Base_SetConfig+0xf4>)
 801584e:	4290      	cmp	r0, r2
 8015850:	bf18      	it	ne
 8015852:	42a0      	cmpne	r0, r4
 8015854:	bf0c      	ite	eq
 8015856:	2201      	moveq	r2, #1
 8015858:	2200      	movne	r2, #0
 801585a:	d111      	bne.n	8015880 <TIM_Base_SetConfig+0x64>
 801585c:	4a2c      	ldr	r2, [pc, #176]	; (8015910 <TIM_Base_SetConfig+0xf4>)
 801585e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015862:	4c2c      	ldr	r4, [pc, #176]	; (8015914 <TIM_Base_SetConfig+0xf8>)
 8015864:	1a82      	subs	r2, r0, r2
 8015866:	684d      	ldr	r5, [r1, #4]
 8015868:	42a0      	cmp	r0, r4
 801586a:	fab2 f282 	clz	r2, r2
 801586e:	ea43 0305 	orr.w	r3, r3, r5
 8015872:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8015876:	d033      	beq.n	80158e0 <TIM_Base_SetConfig+0xc4>
 8015878:	f5a4 6480 	sub.w	r4, r4, #1024	; 0x400
 801587c:	42a0      	cmp	r0, r4
 801587e:	d02f      	beq.n	80158e0 <TIM_Base_SetConfig+0xc4>
 8015880:	4c25      	ldr	r4, [pc, #148]	; (8015918 <TIM_Base_SetConfig+0xfc>)
 8015882:	42a0      	cmp	r0, r4
 8015884:	bf14      	ite	ne
 8015886:	4614      	movne	r4, r2
 8015888:	f042 0401 	orreq.w	r4, r2, #1
 801588c:	bb44      	cbnz	r4, 80158e0 <TIM_Base_SetConfig+0xc4>
 801588e:	4a23      	ldr	r2, [pc, #140]	; (801591c <TIM_Base_SetConfig+0x100>)
 8015890:	4d23      	ldr	r5, [pc, #140]	; (8015920 <TIM_Base_SetConfig+0x104>)
 8015892:	4290      	cmp	r0, r2
 8015894:	bf18      	it	ne
 8015896:	42a8      	cmpne	r0, r5
 8015898:	bf0c      	ite	eq
 801589a:	2201      	moveq	r2, #1
 801589c:	2200      	movne	r2, #0
 801589e:	d031      	beq.n	8015904 <TIM_Base_SetConfig+0xe8>
 80158a0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80158a4:	4c1f      	ldr	r4, [pc, #124]	; (8015924 <TIM_Base_SetConfig+0x108>)
 80158a6:	42a0      	cmp	r0, r4
 80158a8:	bf18      	it	ne
 80158aa:	42a8      	cmpne	r0, r5
 80158ac:	d018      	beq.n	80158e0 <TIM_Base_SetConfig+0xc4>
 80158ae:	4a1e      	ldr	r2, [pc, #120]	; (8015928 <TIM_Base_SetConfig+0x10c>)
 80158b0:	4290      	cmp	r0, r2
 80158b2:	d029      	beq.n	8015908 <TIM_Base_SetConfig+0xec>
 80158b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80158b8:	4290      	cmp	r0, r2
 80158ba:	d025      	beq.n	8015908 <TIM_Base_SetConfig+0xec>
 80158bc:	688c      	ldr	r4, [r1, #8]
 80158be:	680a      	ldr	r2, [r1, #0]
 80158c0:	6003      	str	r3, [r0, #0]
 80158c2:	62c4      	str	r4, [r0, #44]	; 0x2c
 80158c4:	6282      	str	r2, [r0, #40]	; 0x28
 80158c6:	2301      	movs	r3, #1
 80158c8:	bc70      	pop	{r4, r5, r6}
 80158ca:	6143      	str	r3, [r0, #20]
 80158cc:	4770      	bx	lr
 80158ce:	684a      	ldr	r2, [r1, #4]
 80158d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80158d4:	4c0e      	ldr	r4, [pc, #56]	; (8015910 <TIM_Base_SetConfig+0xf4>)
 80158d6:	4313      	orrs	r3, r2
 80158d8:	1b02      	subs	r2, r0, r4
 80158da:	fab2 f282 	clz	r2, r2
 80158de:	0952      	lsrs	r2, r2, #5
 80158e0:	68cc      	ldr	r4, [r1, #12]
 80158e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80158e6:	688d      	ldr	r5, [r1, #8]
 80158e8:	431c      	orrs	r4, r3
 80158ea:	680b      	ldr	r3, [r1, #0]
 80158ec:	6004      	str	r4, [r0, #0]
 80158ee:	62c5      	str	r5, [r0, #44]	; 0x2c
 80158f0:	6283      	str	r3, [r0, #40]	; 0x28
 80158f2:	b90a      	cbnz	r2, 80158f8 <TIM_Base_SetConfig+0xdc>
 80158f4:	2e00      	cmp	r6, #0
 80158f6:	d0e6      	beq.n	80158c6 <TIM_Base_SetConfig+0xaa>
 80158f8:	690b      	ldr	r3, [r1, #16]
 80158fa:	6303      	str	r3, [r0, #48]	; 0x30
 80158fc:	2301      	movs	r3, #1
 80158fe:	bc70      	pop	{r4, r5, r6}
 8015900:	6143      	str	r3, [r0, #20]
 8015902:	4770      	bx	lr
 8015904:	4622      	mov	r2, r4
 8015906:	e7eb      	b.n	80158e0 <TIM_Base_SetConfig+0xc4>
 8015908:	2200      	movs	r2, #0
 801590a:	e7e9      	b.n	80158e0 <TIM_Base_SetConfig+0xc4>
 801590c:	40010000 	.word	0x40010000
 8015910:	40010400 	.word	0x40010400
 8015914:	40000800 	.word	0x40000800
 8015918:	40000c00 	.word	0x40000c00
 801591c:	40014400 	.word	0x40014400
 8015920:	40014000 	.word	0x40014000
 8015924:	40001800 	.word	0x40001800
 8015928:	40001c00 	.word	0x40001c00

0801592c <HAL_TIM_OC_Init>:
 801592c:	b1c0      	cbz	r0, 8015960 <HAL_TIM_OC_Init+0x34>
 801592e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8015932:	b510      	push	{r4, lr}
 8015934:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8015938:	4604      	mov	r4, r0
 801593a:	b163      	cbz	r3, 8015956 <HAL_TIM_OC_Init+0x2a>
 801593c:	4621      	mov	r1, r4
 801593e:	2302      	movs	r3, #2
 8015940:	f851 0b04 	ldr.w	r0, [r1], #4
 8015944:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8015948:	f7ff ff68 	bl	801581c <TIM_Base_SetConfig>
 801594c:	2301      	movs	r3, #1
 801594e:	2000      	movs	r0, #0
 8015950:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8015954:	bd10      	pop	{r4, pc}
 8015956:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
 801595a:	f7ff ff39 	bl	80157d0 <HAL_TIM_OC_MspInit>
 801595e:	e7ed      	b.n	801593c <HAL_TIM_OC_Init+0x10>
 8015960:	2001      	movs	r0, #1
 8015962:	4770      	bx	lr

08015964 <gpio_set>:
#include "mbed_error.h"

extern uint32_t Set_GPIO_Clock(uint32_t port_idx);

uint32_t gpio_set(PinName pin)
{
 8015964:	b500      	push	{lr}
 8015966:	b083      	sub	sp, #12
 8015968:	4603      	mov	r3, r0
 801596a:	f8ad 3006 	strh.w	r3, [sp, #6]
    MBED_ASSERT(pin != (PinName)NC);
 801596e:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8015972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015976:	d104      	bne.n	8015982 <gpio_set+0x1e>
 8015978:	480a      	ldr	r0, [pc, #40]	; (80159a4 <gpio_set+0x40>)
 801597a:	490b      	ldr	r1, [pc, #44]	; (80159a8 <gpio_set+0x44>)
 801597c:	2227      	movs	r2, #39	; 0x27
 801597e:	f000 fce7 	bl	8016350 <mbed_assert_internal>

    pin_function(pin, STM_PIN_DATA(STM_MODE_INPUT, GPIO_NOPULL, 0));
 8015982:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8015986:	4618      	mov	r0, r3
 8015988:	2100      	movs	r1, #0
 801598a:	f000 fa2d 	bl	8015de8 <pin_function>
    return (uint32_t)(1 << ((uint32_t)pin & 0xF)); // Return the pin mask
 801598e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8015992:	f003 030f 	and.w	r3, r3, #15
 8015996:	2201      	movs	r2, #1
 8015998:	fa02 f303 	lsl.w	r3, r2, r3
}
 801599c:	4618      	mov	r0, r3
 801599e:	b003      	add	sp, #12
 80159a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80159a4:	0801ce28 	.word	0x0801ce28
 80159a8:	0801ce3c 	.word	0x0801ce3c

080159ac <gpio_init>:

void gpio_init(gpio_t *obj, PinName pin)
{
 80159ac:	b500      	push	{lr}
 80159ae:	b087      	sub	sp, #28
 80159b0:	9001      	str	r0, [sp, #4]
 80159b2:	460b      	mov	r3, r1
 80159b4:	f8ad 3002 	strh.w	r3, [sp, #2]
    obj->pin = pin;
 80159b8:	9b01      	ldr	r3, [sp, #4]
 80159ba:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80159be:	801a      	strh	r2, [r3, #0]
    if (pin == (PinName)NC)
 80159c0:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80159c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80159c8:	d100      	bne.n	80159cc <gpio_init+0x20>
        return;
 80159ca:	e01d      	b.n	8015a08 <gpio_init+0x5c>

    uint32_t port_index = STM_PORT(pin);
 80159cc:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80159d0:	091b      	lsrs	r3, r3, #4
 80159d2:	f003 030f 	and.w	r3, r3, #15
 80159d6:	9305      	str	r3, [sp, #20]

    // Enable GPIO clock
    uint32_t gpio_add = Set_GPIO_Clock(port_index);
 80159d8:	9805      	ldr	r0, [sp, #20]
 80159da:	f000 f91b 	bl	8015c14 <Set_GPIO_Clock>
 80159de:	9004      	str	r0, [sp, #16]
    GPIO_TypeDef *gpio = (GPIO_TypeDef *)gpio_add;
 80159e0:	9b04      	ldr	r3, [sp, #16]
 80159e2:	9303      	str	r3, [sp, #12]

    // Fill GPIO object structure for future use
    obj->mask        = gpio_set(pin);
 80159e4:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80159e8:	4618      	mov	r0, r3
 80159ea:	f7ff ffbb 	bl	8015964 <gpio_set>
 80159ee:	4602      	mov	r2, r0
 80159f0:	9b01      	ldr	r3, [sp, #4]
 80159f2:	605a      	str	r2, [r3, #4]
    obj->reg_in      = &gpio->IDR;
 80159f4:	9b03      	ldr	r3, [sp, #12]
 80159f6:	f103 0210 	add.w	r2, r3, #16
 80159fa:	9b01      	ldr	r3, [sp, #4]
 80159fc:	609a      	str	r2, [r3, #8]
    obj->reg_set_clr = &gpio->BSRR;
 80159fe:	9b03      	ldr	r3, [sp, #12]
 8015a00:	f103 0218 	add.w	r2, r3, #24
 8015a04:	9b01      	ldr	r3, [sp, #4]
 8015a06:	60da      	str	r2, [r3, #12]
}
 8015a08:	b007      	add	sp, #28
 8015a0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8015a0e:	bf00      	nop

08015a10 <gpio_mode>:

void gpio_mode(gpio_t *obj, PinMode mode)
{
 8015a10:	b500      	push	{lr}
 8015a12:	b083      	sub	sp, #12
 8015a14:	9001      	str	r0, [sp, #4]
 8015a16:	460b      	mov	r3, r1
 8015a18:	f88d 3003 	strb.w	r3, [sp, #3]
    pin_mode(obj->pin, mode);
 8015a1c:	9b01      	ldr	r3, [sp, #4]
 8015a1e:	881b      	ldrh	r3, [r3, #0]
 8015a20:	b21a      	sxth	r2, r3
 8015a22:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8015a26:	4610      	mov	r0, r2
 8015a28:	4619      	mov	r1, r3
 8015a2a:	f000 fa2b 	bl	8015e84 <pin_mode>
}
 8015a2e:	b003      	add	sp, #12
 8015a30:	f85d fb04 	ldr.w	pc, [sp], #4

08015a34 <gpio_dir>:

void gpio_dir(gpio_t *obj, PinDirection direction)
{
 8015a34:	b500      	push	{lr}
 8015a36:	b083      	sub	sp, #12
 8015a38:	9001      	str	r0, [sp, #4]
 8015a3a:	460b      	mov	r3, r1
 8015a3c:	f88d 3003 	strb.w	r3, [sp, #3]
    MBED_ASSERT(obj->pin != (PinName)NC);
 8015a40:	9b01      	ldr	r3, [sp, #4]
 8015a42:	881b      	ldrh	r3, [r3, #0]
 8015a44:	b21b      	sxth	r3, r3
 8015a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a4a:	d104      	bne.n	8015a56 <gpio_dir+0x22>
 8015a4c:	480d      	ldr	r0, [pc, #52]	; (8015a84 <gpio_dir+0x50>)
 8015a4e:	490e      	ldr	r1, [pc, #56]	; (8015a88 <gpio_dir+0x54>)
 8015a50:	2246      	movs	r2, #70	; 0x46
 8015a52:	f000 fc7d 	bl	8016350 <mbed_assert_internal>
    if (direction == PIN_OUTPUT) {
 8015a56:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8015a5a:	2b01      	cmp	r3, #1
 8015a5c:	d107      	bne.n	8015a6e <gpio_dir+0x3a>
        pin_function(obj->pin, STM_PIN_DATA(STM_MODE_OUTPUT_PP, GPIO_NOPULL, 0));
 8015a5e:	9b01      	ldr	r3, [sp, #4]
 8015a60:	881b      	ldrh	r3, [r3, #0]
 8015a62:	b21b      	sxth	r3, r3
 8015a64:	4618      	mov	r0, r3
 8015a66:	2101      	movs	r1, #1
 8015a68:	f000 f9be 	bl	8015de8 <pin_function>
 8015a6c:	e006      	b.n	8015a7c <gpio_dir+0x48>
    } else { // PIN_INPUT
        pin_function(obj->pin, STM_PIN_DATA(STM_MODE_INPUT, GPIO_NOPULL, 0));
 8015a6e:	9b01      	ldr	r3, [sp, #4]
 8015a70:	881b      	ldrh	r3, [r3, #0]
 8015a72:	b21b      	sxth	r3, r3
 8015a74:	4618      	mov	r0, r3
 8015a76:	2100      	movs	r1, #0
 8015a78:	f000 f9b6 	bl	8015de8 <pin_function>
    }
}
 8015a7c:	b003      	add	sp, #12
 8015a7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8015a82:	bf00      	nop
 8015a84:	0801ce8c 	.word	0x0801ce8c
 8015a88:	0801ce3c 	.word	0x0801ce3c

08015a8c <gpio_irq_free>:

    return 0;
}

void gpio_irq_free(gpio_irq_t *obj)
{
 8015a8c:	b500      	push	{lr}
 8015a8e:	b087      	sub	sp, #28
 8015a90:	9001      	str	r0, [sp, #4]
    gpio_channel_t *gpio_channel = &channels[obj->irq_index];
 8015a92:	9b01      	ldr	r3, [sp, #4]
 8015a94:	685b      	ldr	r3, [r3, #4]
 8015a96:	224c      	movs	r2, #76	; 0x4c
 8015a98:	fb02 f303 	mul.w	r3, r2, r3
 8015a9c:	4a1c      	ldr	r2, [pc, #112]	; (8015b10 <gpio_irq_free+0x84>)
 8015a9e:	4413      	add	r3, r2
 8015aa0:	9305      	str	r3, [sp, #20]
    uint32_t pin_index  = STM_PIN(obj->pin);
 8015aa2:	9b01      	ldr	r3, [sp, #4]
 8015aa4:	899b      	ldrh	r3, [r3, #12]
 8015aa6:	b29b      	uxth	r3, r3
 8015aa8:	f003 030f 	and.w	r3, r3, #15
 8015aac:	9304      	str	r3, [sp, #16]
    uint32_t gpio_idx = pin_base_nr[pin_index];
 8015aae:	4a19      	ldr	r2, [pc, #100]	; (8015b14 <gpio_irq_free+0x88>)
 8015ab0:	9b04      	ldr	r3, [sp, #16]
 8015ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015ab6:	9303      	str	r3, [sp, #12]

    gpio_channel->pin_mask &= ~(1 << gpio_idx);
 8015ab8:	9b05      	ldr	r3, [sp, #20]
 8015aba:	681b      	ldr	r3, [r3, #0]
 8015abc:	9a03      	ldr	r2, [sp, #12]
 8015abe:	2101      	movs	r1, #1
 8015ac0:	fa01 f202 	lsl.w	r2, r1, r2
 8015ac4:	43d2      	mvns	r2, r2
 8015ac6:	401a      	ands	r2, r3
 8015ac8:	9b05      	ldr	r3, [sp, #20]
 8015aca:	601a      	str	r2, [r3, #0]
    gpio_channel->channel_ids[gpio_idx] = 0;
 8015acc:	9a05      	ldr	r2, [sp, #20]
 8015ace:	9b03      	ldr	r3, [sp, #12]
 8015ad0:	009b      	lsls	r3, r3, #2
 8015ad2:	4413      	add	r3, r2
 8015ad4:	2200      	movs	r2, #0
 8015ad6:	605a      	str	r2, [r3, #4]
    gpio_channel->channel_gpio[gpio_idx] = 0;
 8015ad8:	9a05      	ldr	r2, [sp, #20]
 8015ada:	9b03      	ldr	r3, [sp, #12]
 8015adc:	3306      	adds	r3, #6
 8015ade:	009b      	lsls	r3, r3, #2
 8015ae0:	4413      	add	r3, r2
 8015ae2:	2200      	movs	r2, #0
 8015ae4:	605a      	str	r2, [r3, #4]
    gpio_channel->channel_pin[gpio_idx] = 0;
 8015ae6:	9a05      	ldr	r2, [sp, #20]
 8015ae8:	9b03      	ldr	r3, [sp, #12]
 8015aea:	330c      	adds	r3, #12
 8015aec:	009b      	lsls	r3, r3, #2
 8015aee:	4413      	add	r3, r2
 8015af0:	2200      	movs	r2, #0
 8015af2:	605a      	str	r2, [r3, #4]

    // Disable EXTI line
    pin_function(obj->pin, STM_PIN_DATA(STM_MODE_INPUT, GPIO_NOPULL, 0));
 8015af4:	9b01      	ldr	r3, [sp, #4]
 8015af6:	899b      	ldrh	r3, [r3, #12]
 8015af8:	b21b      	sxth	r3, r3
 8015afa:	4618      	mov	r0, r3
 8015afc:	2100      	movs	r1, #0
 8015afe:	f000 f973 	bl	8015de8 <pin_function>
    obj->event = EDGE_NONE;
 8015b02:	9b01      	ldr	r3, [sp, #4]
 8015b04:	2200      	movs	r2, #0
 8015b06:	609a      	str	r2, [r3, #8]
}
 8015b08:	b007      	add	sp, #28
 8015b0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8015b0e:	bf00      	nop
 8015b10:	200018e8 	.word	0x200018e8
 8015b14:	200016c8 	.word	0x200016c8

08015b18 <gpio_irq_set>:

void gpio_irq_set(gpio_irq_t *obj, gpio_irq_event event, uint32_t enable)
{
 8015b18:	b500      	push	{lr}
 8015b1a:	b087      	sub	sp, #28
 8015b1c:	9003      	str	r0, [sp, #12]
 8015b1e:	460b      	mov	r3, r1
 8015b20:	9201      	str	r2, [sp, #4]
 8015b22:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32_t mode = STM_MODE_IT_EVT_RESET;
 8015b26:	230c      	movs	r3, #12
 8015b28:	9305      	str	r3, [sp, #20]
    uint32_t pull = GPIO_NOPULL;
 8015b2a:	2300      	movs	r3, #0
 8015b2c:	9304      	str	r3, [sp, #16]

    if (enable) {
 8015b2e:	9b01      	ldr	r3, [sp, #4]
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	d02e      	beq.n	8015b92 <gpio_irq_set+0x7a>
        if (event == IRQ_RISE) {
 8015b34:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8015b38:	2b01      	cmp	r3, #1
 8015b3a:	d112      	bne.n	8015b62 <gpio_irq_set+0x4a>
            if ((obj->event == EDGE_FALL) || (obj->event == EDGE_BOTH)) {
 8015b3c:	9b03      	ldr	r3, [sp, #12]
 8015b3e:	689b      	ldr	r3, [r3, #8]
 8015b40:	2b02      	cmp	r3, #2
 8015b42:	d003      	beq.n	8015b4c <gpio_irq_set+0x34>
 8015b44:	9b03      	ldr	r3, [sp, #12]
 8015b46:	689b      	ldr	r3, [r3, #8]
 8015b48:	2b03      	cmp	r3, #3
 8015b4a:	d105      	bne.n	8015b58 <gpio_irq_set+0x40>
                mode = STM_MODE_IT_RISING_FALLING;
 8015b4c:	2308      	movs	r3, #8
 8015b4e:	9305      	str	r3, [sp, #20]
                obj->event = EDGE_BOTH;
 8015b50:	9b03      	ldr	r3, [sp, #12]
 8015b52:	2203      	movs	r2, #3
 8015b54:	609a      	str	r2, [r3, #8]
 8015b56:	e004      	b.n	8015b62 <gpio_irq_set+0x4a>
            } else { // NONE or RISE
                mode = STM_MODE_IT_RISING;
 8015b58:	2306      	movs	r3, #6
 8015b5a:	9305      	str	r3, [sp, #20]
                obj->event = EDGE_RISE;
 8015b5c:	9b03      	ldr	r3, [sp, #12]
 8015b5e:	2201      	movs	r2, #1
 8015b60:	609a      	str	r2, [r3, #8]
            }
        }
        if (event == IRQ_FALL) {
 8015b62:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8015b66:	2b02      	cmp	r3, #2
 8015b68:	d141      	bne.n	8015bee <gpio_irq_set+0xd6>
            if ((obj->event == EDGE_RISE) || (obj->event == EDGE_BOTH)) {
 8015b6a:	9b03      	ldr	r3, [sp, #12]
 8015b6c:	689b      	ldr	r3, [r3, #8]
 8015b6e:	2b01      	cmp	r3, #1
 8015b70:	d003      	beq.n	8015b7a <gpio_irq_set+0x62>
 8015b72:	9b03      	ldr	r3, [sp, #12]
 8015b74:	689b      	ldr	r3, [r3, #8]
 8015b76:	2b03      	cmp	r3, #3
 8015b78:	d105      	bne.n	8015b86 <gpio_irq_set+0x6e>
                mode = STM_MODE_IT_RISING_FALLING;
 8015b7a:	2308      	movs	r3, #8
 8015b7c:	9305      	str	r3, [sp, #20]
                obj->event = EDGE_BOTH;
 8015b7e:	9b03      	ldr	r3, [sp, #12]
 8015b80:	2203      	movs	r2, #3
 8015b82:	609a      	str	r2, [r3, #8]
 8015b84:	e033      	b.n	8015bee <gpio_irq_set+0xd6>
            } else { // NONE or FALL
                mode = STM_MODE_IT_FALLING;
 8015b86:	2307      	movs	r3, #7
 8015b88:	9305      	str	r3, [sp, #20]
                obj->event = EDGE_FALL;
 8015b8a:	9b03      	ldr	r3, [sp, #12]
 8015b8c:	2202      	movs	r2, #2
 8015b8e:	609a      	str	r2, [r3, #8]
 8015b90:	e02d      	b.n	8015bee <gpio_irq_set+0xd6>
            }
        }
    } else { // Disable
        if (event == IRQ_RISE) {
 8015b92:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8015b96:	2b01      	cmp	r3, #1
 8015b98:	d112      	bne.n	8015bc0 <gpio_irq_set+0xa8>
            if ((obj->event == EDGE_FALL) || (obj->event == EDGE_BOTH)) {
 8015b9a:	9b03      	ldr	r3, [sp, #12]
 8015b9c:	689b      	ldr	r3, [r3, #8]
 8015b9e:	2b02      	cmp	r3, #2
 8015ba0:	d003      	beq.n	8015baa <gpio_irq_set+0x92>
 8015ba2:	9b03      	ldr	r3, [sp, #12]
 8015ba4:	689b      	ldr	r3, [r3, #8]
 8015ba6:	2b03      	cmp	r3, #3
 8015ba8:	d105      	bne.n	8015bb6 <gpio_irq_set+0x9e>
                mode = STM_MODE_IT_FALLING;
 8015baa:	2307      	movs	r3, #7
 8015bac:	9305      	str	r3, [sp, #20]
                obj->event = EDGE_FALL;
 8015bae:	9b03      	ldr	r3, [sp, #12]
 8015bb0:	2202      	movs	r2, #2
 8015bb2:	609a      	str	r2, [r3, #8]
 8015bb4:	e004      	b.n	8015bc0 <gpio_irq_set+0xa8>
            } else { // NONE or RISE
                mode = STM_MODE_IT_EVT_RESET;
 8015bb6:	230c      	movs	r3, #12
 8015bb8:	9305      	str	r3, [sp, #20]
                obj->event = EDGE_NONE;
 8015bba:	9b03      	ldr	r3, [sp, #12]
 8015bbc:	2200      	movs	r2, #0
 8015bbe:	609a      	str	r2, [r3, #8]
            }
        }
        if (event == IRQ_FALL) {
 8015bc0:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8015bc4:	2b02      	cmp	r3, #2
 8015bc6:	d112      	bne.n	8015bee <gpio_irq_set+0xd6>
            if ((obj->event == EDGE_RISE) || (obj->event == EDGE_BOTH)) {
 8015bc8:	9b03      	ldr	r3, [sp, #12]
 8015bca:	689b      	ldr	r3, [r3, #8]
 8015bcc:	2b01      	cmp	r3, #1
 8015bce:	d003      	beq.n	8015bd8 <gpio_irq_set+0xc0>
 8015bd0:	9b03      	ldr	r3, [sp, #12]
 8015bd2:	689b      	ldr	r3, [r3, #8]
 8015bd4:	2b03      	cmp	r3, #3
 8015bd6:	d105      	bne.n	8015be4 <gpio_irq_set+0xcc>
                mode = STM_MODE_IT_RISING;
 8015bd8:	2306      	movs	r3, #6
 8015bda:	9305      	str	r3, [sp, #20]
                obj->event = EDGE_RISE;
 8015bdc:	9b03      	ldr	r3, [sp, #12]
 8015bde:	2201      	movs	r2, #1
 8015be0:	609a      	str	r2, [r3, #8]
 8015be2:	e004      	b.n	8015bee <gpio_irq_set+0xd6>
            } else { // NONE or FALL
                mode = STM_MODE_IT_EVT_RESET;
 8015be4:	230c      	movs	r3, #12
 8015be6:	9305      	str	r3, [sp, #20]
                obj->event = EDGE_NONE;
 8015be8:	9b03      	ldr	r3, [sp, #12]
 8015bea:	2200      	movs	r2, #0
 8015bec:	609a      	str	r2, [r3, #8]
            }
        }
    }

    pin_function(obj->pin, STM_PIN_DATA(mode, pull, 0));
 8015bee:	9b03      	ldr	r3, [sp, #12]
 8015bf0:	8999      	ldrh	r1, [r3, #12]
 8015bf2:	9b05      	ldr	r3, [sp, #20]
 8015bf4:	f003 020f 	and.w	r2, r3, #15
 8015bf8:	9b04      	ldr	r3, [sp, #16]
 8015bfa:	f003 0307 	and.w	r3, r3, #7
 8015bfe:	011b      	lsls	r3, r3, #4
 8015c00:	4313      	orrs	r3, r2
 8015c02:	461a      	mov	r2, r3
 8015c04:	b20b      	sxth	r3, r1
 8015c06:	4618      	mov	r0, r3
 8015c08:	4611      	mov	r1, r2
 8015c0a:	f000 f8ed 	bl	8015de8 <pin_function>
}
 8015c0e:	b007      	add	sp, #28
 8015c10:	f85d fb04 	ldr.w	pc, [sp], #4

08015c14 <Set_GPIO_Clock>:
    0x10000000  // 12 = Reset GPIO_MODE_IT_EVT
};

// Enable GPIO clock and return GPIO base address
uint32_t Set_GPIO_Clock(uint32_t port_idx)
{
 8015c14:	b500      	push	{lr}
 8015c16:	b08f      	sub	sp, #60	; 0x3c
 8015c18:	9001      	str	r0, [sp, #4]
    uint32_t gpio_add = 0;
 8015c1a:	2300      	movs	r3, #0
 8015c1c:	930d      	str	r3, [sp, #52]	; 0x34
    switch (port_idx) {
 8015c1e:	9b01      	ldr	r3, [sp, #4]
 8015c20:	2b0a      	cmp	r3, #10
 8015c22:	f200 80be 	bhi.w	8015da2 <Set_GPIO_Clock+0x18e>
 8015c26:	a201      	add	r2, pc, #4	; (adr r2, 8015c2c <Set_GPIO_Clock+0x18>)
 8015c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c2c:	08015c59 	.word	0x08015c59
 8015c30:	08015c77 	.word	0x08015c77
 8015c34:	08015c95 	.word	0x08015c95
 8015c38:	08015cb3 	.word	0x08015cb3
 8015c3c:	08015cd1 	.word	0x08015cd1
 8015c40:	08015cef 	.word	0x08015cef
 8015c44:	08015d0d 	.word	0x08015d0d
 8015c48:	08015d2b 	.word	0x08015d2b
 8015c4c:	08015d49 	.word	0x08015d49
 8015c50:	08015d67 	.word	0x08015d67
 8015c54:	08015d85 	.word	0x08015d85
        case PortA:
            gpio_add = GPIOA_BASE;
 8015c58:	4b56      	ldr	r3, [pc, #344]	; (8015db4 <Set_GPIO_Clock+0x1a0>)
 8015c5a:	930d      	str	r3, [sp, #52]	; 0x34
            __GPIOA_CLK_ENABLE();
 8015c5c:	4a56      	ldr	r2, [pc, #344]	; (8015db8 <Set_GPIO_Clock+0x1a4>)
 8015c5e:	4b56      	ldr	r3, [pc, #344]	; (8015db8 <Set_GPIO_Clock+0x1a4>)
 8015c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c62:	f043 0301 	orr.w	r3, r3, #1
 8015c66:	6313      	str	r3, [r2, #48]	; 0x30
 8015c68:	4b53      	ldr	r3, [pc, #332]	; (8015db8 <Set_GPIO_Clock+0x1a4>)
 8015c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c6c:	f003 0301 	and.w	r3, r3, #1
 8015c70:	930c      	str	r3, [sp, #48]	; 0x30
 8015c72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            break;
 8015c74:	e099      	b.n	8015daa <Set_GPIO_Clock+0x196>
        case PortB:
            gpio_add = GPIOB_BASE;
 8015c76:	4b51      	ldr	r3, [pc, #324]	; (8015dbc <Set_GPIO_Clock+0x1a8>)
 8015c78:	930d      	str	r3, [sp, #52]	; 0x34
            __GPIOB_CLK_ENABLE();
 8015c7a:	4a4f      	ldr	r2, [pc, #316]	; (8015db8 <Set_GPIO_Clock+0x1a4>)
 8015c7c:	4b4e      	ldr	r3, [pc, #312]	; (8015db8 <Set_GPIO_Clock+0x1a4>)
 8015c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c80:	f043 0302 	orr.w	r3, r3, #2
 8015c84:	6313      	str	r3, [r2, #48]	; 0x30
 8015c86:	4b4c      	ldr	r3, [pc, #304]	; (8015db8 <Set_GPIO_Clock+0x1a4>)
 8015c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c8a:	f003 0302 	and.w	r3, r3, #2
 8015c8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8015c90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            break;
 8015c92:	e08a      	b.n	8015daa <Set_GPIO_Clock+0x196>
        case PortC:
            gpio_add = GPIOC_BASE;
 8015c94:	4b4a      	ldr	r3, [pc, #296]	; (8015dc0 <Set_GPIO_Clock+0x1ac>)
 8015c96:	930d      	str	r3, [sp, #52]	; 0x34
            __GPIOC_CLK_ENABLE();
 8015c98:	4a47      	ldr	r2, [pc, #284]	; (8015db8 <Set_GPIO_Clock+0x1a4>)
 8015c9a:	4b47      	ldr	r3, [pc, #284]	; (8015db8 <Set_GPIO_Clock+0x1a4>)
 8015c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c9e:	f043 0304 	orr.w	r3, r3, #4
 8015ca2:	6313      	str	r3, [r2, #48]	; 0x30
 8015ca4:	4b44      	ldr	r3, [pc, #272]	; (8015db8 <Set_GPIO_Clock+0x1a4>)
 8015ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ca8:	f003 0304 	and.w	r3, r3, #4
 8015cac:	930a      	str	r3, [sp, #40]	; 0x28
 8015cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            break;
 8015cb0:	e07b      	b.n	8015daa <Set_GPIO_Clock+0x196>
#if defined GPIOD_BASE
        case PortD:
            gpio_add = GPIOD_BASE;
 8015cb2:	4b44      	ldr	r3, [pc, #272]	; (8015dc4 <Set_GPIO_Clock+0x1b0>)
 8015cb4:	930d      	str	r3, [sp, #52]	; 0x34
            __GPIOD_CLK_ENABLE();
 8015cb6:	4a40      	ldr	r2, [pc, #256]	; (8015db8 <Set_GPIO_Clock+0x1a4>)
 8015cb8:	4b3f      	ldr	r3, [pc, #252]	; (8015db8 <Set_GPIO_Clock+0x1a4>)
 8015cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015cbc:	f043 0308 	orr.w	r3, r3, #8
 8015cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8015cc2:	4b3d      	ldr	r3, [pc, #244]	; (8015db8 <Set_GPIO_Clock+0x1a4>)
 8015cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015cc6:	f003 0308 	and.w	r3, r3, #8
 8015cca:	9309      	str	r3, [sp, #36]	; 0x24
 8015ccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
            break;
 8015cce:	e06c      	b.n	8015daa <Set_GPIO_Clock+0x196>
#endif
#if defined GPIOE_BASE
        case PortE:
            gpio_add = GPIOE_BASE;
 8015cd0:	4b3d      	ldr	r3, [pc, #244]	; (8015dc8 <Set_GPIO_Clock+0x1b4>)
 8015cd2:	930d      	str	r3, [sp, #52]	; 0x34
            __GPIOE_CLK_ENABLE();
 8015cd4:	4a38      	ldr	r2, [pc, #224]	; (8015db8 <Set_GPIO_Clock+0x1a4>)
 8015cd6:	4b38      	ldr	r3, [pc, #224]	; (8015db8 <Set_GPIO_Clock+0x1a4>)
 8015cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015cda:	f043 0310 	orr.w	r3, r3, #16
 8015cde:	6313      	str	r3, [r2, #48]	; 0x30
 8015ce0:	4b35      	ldr	r3, [pc, #212]	; (8015db8 <Set_GPIO_Clock+0x1a4>)
 8015ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ce4:	f003 0310 	and.w	r3, r3, #16
 8015ce8:	9308      	str	r3, [sp, #32]
 8015cea:	9b08      	ldr	r3, [sp, #32]
            break;
 8015cec:	e05d      	b.n	8015daa <Set_GPIO_Clock+0x196>
#endif
#if defined GPIOF_BASE
        case PortF:
            gpio_add = GPIOF_BASE;
 8015cee:	4b37      	ldr	r3, [pc, #220]	; (8015dcc <Set_GPIO_Clock+0x1b8>)
 8015cf0:	930d      	str	r3, [sp, #52]	; 0x34
            __GPIOF_CLK_ENABLE();
 8015cf2:	4a31      	ldr	r2, [pc, #196]	; (8015db8 <Set_GPIO_Clock+0x1a4>)
 8015cf4:	4b30      	ldr	r3, [pc, #192]	; (8015db8 <Set_GPIO_Clock+0x1a4>)
 8015cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015cf8:	f043 0320 	orr.w	r3, r3, #32
 8015cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8015cfe:	4b2e      	ldr	r3, [pc, #184]	; (8015db8 <Set_GPIO_Clock+0x1a4>)
 8015d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d02:	f003 0320 	and.w	r3, r3, #32
 8015d06:	9307      	str	r3, [sp, #28]
 8015d08:	9b07      	ldr	r3, [sp, #28]
            break;
 8015d0a:	e04e      	b.n	8015daa <Set_GPIO_Clock+0x196>
#endif
#if defined GPIOG_BASE
        case PortG:
            gpio_add = GPIOG_BASE;
 8015d0c:	4b30      	ldr	r3, [pc, #192]	; (8015dd0 <Set_GPIO_Clock+0x1bc>)
 8015d0e:	930d      	str	r3, [sp, #52]	; 0x34
            __GPIOG_CLK_ENABLE();
 8015d10:	4a29      	ldr	r2, [pc, #164]	; (8015db8 <Set_GPIO_Clock+0x1a4>)
 8015d12:	4b29      	ldr	r3, [pc, #164]	; (8015db8 <Set_GPIO_Clock+0x1a4>)
 8015d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015d1a:	6313      	str	r3, [r2, #48]	; 0x30
 8015d1c:	4b26      	ldr	r3, [pc, #152]	; (8015db8 <Set_GPIO_Clock+0x1a4>)
 8015d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015d24:	9306      	str	r3, [sp, #24]
 8015d26:	9b06      	ldr	r3, [sp, #24]
            break;
 8015d28:	e03f      	b.n	8015daa <Set_GPIO_Clock+0x196>
#endif
#if defined GPIOH_BASE
        case PortH:
            gpio_add = GPIOH_BASE;
 8015d2a:	4b2a      	ldr	r3, [pc, #168]	; (8015dd4 <Set_GPIO_Clock+0x1c0>)
 8015d2c:	930d      	str	r3, [sp, #52]	; 0x34
            __GPIOH_CLK_ENABLE();
 8015d2e:	4a22      	ldr	r2, [pc, #136]	; (8015db8 <Set_GPIO_Clock+0x1a4>)
 8015d30:	4b21      	ldr	r3, [pc, #132]	; (8015db8 <Set_GPIO_Clock+0x1a4>)
 8015d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015d38:	6313      	str	r3, [r2, #48]	; 0x30
 8015d3a:	4b1f      	ldr	r3, [pc, #124]	; (8015db8 <Set_GPIO_Clock+0x1a4>)
 8015d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015d42:	9305      	str	r3, [sp, #20]
 8015d44:	9b05      	ldr	r3, [sp, #20]
            break;
 8015d46:	e030      	b.n	8015daa <Set_GPIO_Clock+0x196>
#endif
#if defined GPIOI_BASE
        case PortI:
            gpio_add = GPIOI_BASE;
 8015d48:	4b23      	ldr	r3, [pc, #140]	; (8015dd8 <Set_GPIO_Clock+0x1c4>)
 8015d4a:	930d      	str	r3, [sp, #52]	; 0x34
            __GPIOI_CLK_ENABLE();
 8015d4c:	4a1a      	ldr	r2, [pc, #104]	; (8015db8 <Set_GPIO_Clock+0x1a4>)
 8015d4e:	4b1a      	ldr	r3, [pc, #104]	; (8015db8 <Set_GPIO_Clock+0x1a4>)
 8015d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015d56:	6313      	str	r3, [r2, #48]	; 0x30
 8015d58:	4b17      	ldr	r3, [pc, #92]	; (8015db8 <Set_GPIO_Clock+0x1a4>)
 8015d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015d60:	9304      	str	r3, [sp, #16]
 8015d62:	9b04      	ldr	r3, [sp, #16]
            break;
 8015d64:	e021      	b.n	8015daa <Set_GPIO_Clock+0x196>
#endif
#if defined GPIOJ_BASE
        case PortJ:
            gpio_add = GPIOJ_BASE;
 8015d66:	4b1d      	ldr	r3, [pc, #116]	; (8015ddc <Set_GPIO_Clock+0x1c8>)
 8015d68:	930d      	str	r3, [sp, #52]	; 0x34
            __GPIOJ_CLK_ENABLE();
 8015d6a:	4a13      	ldr	r2, [pc, #76]	; (8015db8 <Set_GPIO_Clock+0x1a4>)
 8015d6c:	4b12      	ldr	r3, [pc, #72]	; (8015db8 <Set_GPIO_Clock+0x1a4>)
 8015d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8015d74:	6313      	str	r3, [r2, #48]	; 0x30
 8015d76:	4b10      	ldr	r3, [pc, #64]	; (8015db8 <Set_GPIO_Clock+0x1a4>)
 8015d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8015d7e:	9303      	str	r3, [sp, #12]
 8015d80:	9b03      	ldr	r3, [sp, #12]
            break;
 8015d82:	e012      	b.n	8015daa <Set_GPIO_Clock+0x196>
#endif
#if defined GPIOK_BASE
        case PortK:
            gpio_add = GPIOK_BASE;
 8015d84:	4b16      	ldr	r3, [pc, #88]	; (8015de0 <Set_GPIO_Clock+0x1cc>)
 8015d86:	930d      	str	r3, [sp, #52]	; 0x34
            __GPIOK_CLK_ENABLE();
 8015d88:	4a0b      	ldr	r2, [pc, #44]	; (8015db8 <Set_GPIO_Clock+0x1a4>)
 8015d8a:	4b0b      	ldr	r3, [pc, #44]	; (8015db8 <Set_GPIO_Clock+0x1a4>)
 8015d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8015d92:	6313      	str	r3, [r2, #48]	; 0x30
 8015d94:	4b08      	ldr	r3, [pc, #32]	; (8015db8 <Set_GPIO_Clock+0x1a4>)
 8015d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015d9c:	9302      	str	r3, [sp, #8]
 8015d9e:	9b02      	ldr	r3, [sp, #8]
            break;
 8015da0:	e003      	b.n	8015daa <Set_GPIO_Clock+0x196>
#endif
        default:
            error("Pinmap error: wrong port number.");
 8015da2:	4810      	ldr	r0, [pc, #64]	; (8015de4 <Set_GPIO_Clock+0x1d0>)
 8015da4:	f000 fae0 	bl	8016368 <error>
            break;
 8015da8:	bf00      	nop
    }
    return gpio_add;
 8015daa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
}
 8015dac:	4618      	mov	r0, r3
 8015dae:	b00f      	add	sp, #60	; 0x3c
 8015db0:	f85d fb04 	ldr.w	pc, [sp], #4
 8015db4:	40020000 	.word	0x40020000
 8015db8:	40023800 	.word	0x40023800
 8015dbc:	40020400 	.word	0x40020400
 8015dc0:	40020800 	.word	0x40020800
 8015dc4:	40020c00 	.word	0x40020c00
 8015dc8:	40021000 	.word	0x40021000
 8015dcc:	40021400 	.word	0x40021400
 8015dd0:	40021800 	.word	0x40021800
 8015dd4:	40021c00 	.word	0x40021c00
 8015dd8:	40022000 	.word	0x40022000
 8015ddc:	40022400 	.word	0x40022400
 8015de0:	40022800 	.word	0x40022800
 8015de4:	0801ced8 	.word	0x0801ced8

08015de8 <pin_function>:

/**
 * Configure pin (mode, speed, output type and pull-up/pull-down)
 */
void pin_function(PinName pin, int data)
{
 8015de8:	b500      	push	{lr}
 8015dea:	b08f      	sub	sp, #60	; 0x3c
 8015dec:	4603      	mov	r3, r0
 8015dee:	9100      	str	r1, [sp, #0]
 8015df0:	f8ad 3006 	strh.w	r3, [sp, #6]
    MBED_ASSERT(pin != (PinName)NC);
 8015df4:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8015df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015dfc:	d104      	bne.n	8015e08 <pin_function+0x20>
 8015dfe:	481e      	ldr	r0, [pc, #120]	; (8015e78 <pin_function+0x90>)
 8015e00:	491e      	ldr	r1, [pc, #120]	; (8015e7c <pin_function+0x94>)
 8015e02:	2281      	movs	r2, #129	; 0x81
 8015e04:	f000 faa4 	bl	8016350 <mbed_assert_internal>
    // Get the pin informations
    uint32_t mode  = STM_PIN_MODE(data);
 8015e08:	9b00      	ldr	r3, [sp, #0]
 8015e0a:	f003 030f 	and.w	r3, r3, #15
 8015e0e:	930d      	str	r3, [sp, #52]	; 0x34
    uint32_t pupd  = STM_PIN_PUPD(data);
 8015e10:	9b00      	ldr	r3, [sp, #0]
 8015e12:	111b      	asrs	r3, r3, #4
 8015e14:	f003 0307 	and.w	r3, r3, #7
 8015e18:	930c      	str	r3, [sp, #48]	; 0x30
    uint32_t afnum = STM_PIN_AFNUM(data);
 8015e1a:	9b00      	ldr	r3, [sp, #0]
 8015e1c:	11db      	asrs	r3, r3, #7
 8015e1e:	f003 030f 	and.w	r3, r3, #15
 8015e22:	930b      	str	r3, [sp, #44]	; 0x2c

    uint32_t port_index = STM_PORT(pin);
 8015e24:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8015e28:	091b      	lsrs	r3, r3, #4
 8015e2a:	f003 030f 	and.w	r3, r3, #15
 8015e2e:	930a      	str	r3, [sp, #40]	; 0x28
    uint32_t pin_index  = STM_PIN(pin);
 8015e30:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8015e34:	f003 030f 	and.w	r3, r3, #15
 8015e38:	9309      	str	r3, [sp, #36]	; 0x24

    // Enable GPIO clock
    uint32_t gpio_add = Set_GPIO_Clock(port_index);
 8015e3a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015e3c:	f7ff feea 	bl	8015c14 <Set_GPIO_Clock>
 8015e40:	9008      	str	r0, [sp, #32]
    GPIO_TypeDef *gpio = (GPIO_TypeDef *)gpio_add;
 8015e42:	9b08      	ldr	r3, [sp, #32]
 8015e44:	9307      	str	r3, [sp, #28]

    // Configure GPIO
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.Pin       = (uint32_t)(1 << pin_index);
 8015e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e48:	2201      	movs	r2, #1
 8015e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8015e4e:	9302      	str	r3, [sp, #8]
    GPIO_InitStructure.Mode      = gpio_mode[mode];
 8015e50:	4a0b      	ldr	r2, [pc, #44]	; (8015e80 <pin_function+0x98>)
 8015e52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015e58:	9303      	str	r3, [sp, #12]
    GPIO_InitStructure.Pull      = pupd;
 8015e5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015e5c:	9304      	str	r3, [sp, #16]
    GPIO_InitStructure.Speed     = GPIO_SPEED_HIGH;
 8015e5e:	2303      	movs	r3, #3
 8015e60:	9305      	str	r3, [sp, #20]
    GPIO_InitStructure.Alternate = afnum;
 8015e62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015e64:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(gpio, &GPIO_InitStructure);
 8015e66:	ab02      	add	r3, sp, #8
 8015e68:	9807      	ldr	r0, [sp, #28]
 8015e6a:	4619      	mov	r1, r3
 8015e6c:	f7ff f890 	bl	8014f90 <HAL_GPIO_Init>
    //
    //}
    //if ((pin == PA_15) || (pin == PB_3) || (pin == PB_4)) {
    //
    //}
}
 8015e70:	b00f      	add	sp, #60	; 0x3c
 8015e72:	f85d fb04 	ldr.w	pc, [sp], #4
 8015e76:	bf00      	nop
 8015e78:	0801cefc 	.word	0x0801cefc
 8015e7c:	0801cf10 	.word	0x0801cf10
 8015e80:	0801cea4 	.word	0x0801cea4

08015e84 <pin_mode>:

/**
 * Configure pin pull-up/pull-down
 */
void pin_mode(PinName pin, PinMode mode)
{
 8015e84:	b500      	push	{lr}
 8015e86:	b089      	sub	sp, #36	; 0x24
 8015e88:	4603      	mov	r3, r0
 8015e8a:	460a      	mov	r2, r1
 8015e8c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015e90:	4613      	mov	r3, r2
 8015e92:	f88d 3005 	strb.w	r3, [sp, #5]
    MBED_ASSERT(pin != (PinName)NC);
 8015e96:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8015e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e9e:	d104      	bne.n	8015eaa <pin_mode+0x26>
 8015ea0:	481a      	ldr	r0, [pc, #104]	; (8015f0c <pin_mode+0x88>)
 8015ea2:	491b      	ldr	r1, [pc, #108]	; (8015f10 <pin_mode+0x8c>)
 8015ea4:	22a6      	movs	r2, #166	; 0xa6
 8015ea6:	f000 fa53 	bl	8016350 <mbed_assert_internal>
    uint32_t port_index = STM_PORT(pin);
 8015eaa:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8015eae:	091b      	lsrs	r3, r3, #4
 8015eb0:	f003 030f 	and.w	r3, r3, #15
 8015eb4:	9306      	str	r3, [sp, #24]
    uint32_t pin_index  = STM_PIN(pin);
 8015eb6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8015eba:	f003 030f 	and.w	r3, r3, #15
 8015ebe:	9305      	str	r3, [sp, #20]

    // Enable GPIO clock
    uint32_t gpio_add = Set_GPIO_Clock(port_index);
 8015ec0:	9806      	ldr	r0, [sp, #24]
 8015ec2:	f7ff fea7 	bl	8015c14 <Set_GPIO_Clock>
 8015ec6:	9004      	str	r0, [sp, #16]
    GPIO_TypeDef *gpio = (GPIO_TypeDef *)gpio_add;
 8015ec8:	9b04      	ldr	r3, [sp, #16]
 8015eca:	9303      	str	r3, [sp, #12]

    // Configure pull-up/pull-down resistors
    uint32_t pupd = (uint32_t)mode;
 8015ecc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8015ed0:	9307      	str	r3, [sp, #28]
    if (pupd > 2)
 8015ed2:	9b07      	ldr	r3, [sp, #28]
 8015ed4:	2b02      	cmp	r3, #2
 8015ed6:	d901      	bls.n	8015edc <pin_mode+0x58>
        pupd = 0; // Open-drain = No pull-up/No pull-down
 8015ed8:	2300      	movs	r3, #0
 8015eda:	9307      	str	r3, [sp, #28]
    gpio->PUPDR &= (uint32_t)(~(GPIO_PUPDR_PUPDR0 << (pin_index * 2)));
 8015edc:	9b03      	ldr	r3, [sp, #12]
 8015ede:	68da      	ldr	r2, [r3, #12]
 8015ee0:	9b05      	ldr	r3, [sp, #20]
 8015ee2:	005b      	lsls	r3, r3, #1
 8015ee4:	4619      	mov	r1, r3
 8015ee6:	2303      	movs	r3, #3
 8015ee8:	408b      	lsls	r3, r1
 8015eea:	43db      	mvns	r3, r3
 8015eec:	401a      	ands	r2, r3
 8015eee:	9b03      	ldr	r3, [sp, #12]
 8015ef0:	60da      	str	r2, [r3, #12]
    gpio->PUPDR |= (uint32_t)(pupd << (pin_index * 2));
 8015ef2:	9b03      	ldr	r3, [sp, #12]
 8015ef4:	68da      	ldr	r2, [r3, #12]
 8015ef6:	9b05      	ldr	r3, [sp, #20]
 8015ef8:	005b      	lsls	r3, r3, #1
 8015efa:	4619      	mov	r1, r3
 8015efc:	9b07      	ldr	r3, [sp, #28]
 8015efe:	408b      	lsls	r3, r1
 8015f00:	431a      	orrs	r2, r3
 8015f02:	9b03      	ldr	r3, [sp, #12]
 8015f04:	60da      	str	r2, [r3, #12]

}
 8015f06:	b009      	add	sp, #36	; 0x24
 8015f08:	f85d fb04 	ldr.w	pc, [sp], #4
 8015f0c:	0801cefc 	.word	0x0801cefc
 8015f10:	0801cf10 	.word	0x0801cf10

08015f14 <init_uart>:

int stdio_uart_inited = 0;
serial_t stdio_uart;

static void init_uart(serial_t *obj)
{
 8015f14:	b500      	push	{lr}
 8015f16:	b083      	sub	sp, #12
 8015f18:	9001      	str	r0, [sp, #4]
    UartHandle.Instance = (USART_TypeDef *)(obj->uart);
 8015f1a:	9b01      	ldr	r3, [sp, #4]
 8015f1c:	681b      	ldr	r3, [r3, #0]
 8015f1e:	461a      	mov	r2, r3
 8015f20:	4b1b      	ldr	r3, [pc, #108]	; (8015f90 <init_uart+0x7c>)
 8015f22:	601a      	str	r2, [r3, #0]

    UartHandle.Init.BaudRate   = obj->baudrate;
 8015f24:	9b01      	ldr	r3, [sp, #4]
 8015f26:	689b      	ldr	r3, [r3, #8]
 8015f28:	4a19      	ldr	r2, [pc, #100]	; (8015f90 <init_uart+0x7c>)
 8015f2a:	6053      	str	r3, [r2, #4]
    UartHandle.Init.WordLength = obj->databits;
 8015f2c:	9b01      	ldr	r3, [sp, #4]
 8015f2e:	68db      	ldr	r3, [r3, #12]
 8015f30:	4a17      	ldr	r2, [pc, #92]	; (8015f90 <init_uart+0x7c>)
 8015f32:	6093      	str	r3, [r2, #8]
    UartHandle.Init.StopBits   = obj->stopbits;
 8015f34:	9b01      	ldr	r3, [sp, #4]
 8015f36:	691b      	ldr	r3, [r3, #16]
 8015f38:	4a15      	ldr	r2, [pc, #84]	; (8015f90 <init_uart+0x7c>)
 8015f3a:	60d3      	str	r3, [r2, #12]
    UartHandle.Init.Parity     = obj->parity;
 8015f3c:	9b01      	ldr	r3, [sp, #4]
 8015f3e:	695b      	ldr	r3, [r3, #20]
 8015f40:	4a13      	ldr	r2, [pc, #76]	; (8015f90 <init_uart+0x7c>)
 8015f42:	6113      	str	r3, [r2, #16]
    UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8015f44:	4b12      	ldr	r3, [pc, #72]	; (8015f90 <init_uart+0x7c>)
 8015f46:	2200      	movs	r2, #0
 8015f48:	619a      	str	r2, [r3, #24]

    if (obj->pin_rx == NC) {
 8015f4a:	9b01      	ldr	r3, [sp, #4]
 8015f4c:	8b5b      	ldrh	r3, [r3, #26]
 8015f4e:	b21b      	sxth	r3, r3
 8015f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f54:	d103      	bne.n	8015f5e <init_uart+0x4a>
        UartHandle.Init.Mode = UART_MODE_TX;
 8015f56:	4b0e      	ldr	r3, [pc, #56]	; (8015f90 <init_uart+0x7c>)
 8015f58:	2208      	movs	r2, #8
 8015f5a:	615a      	str	r2, [r3, #20]
 8015f5c:	e00c      	b.n	8015f78 <init_uart+0x64>
    } else if (obj->pin_tx == NC) {
 8015f5e:	9b01      	ldr	r3, [sp, #4]
 8015f60:	8b1b      	ldrh	r3, [r3, #24]
 8015f62:	b21b      	sxth	r3, r3
 8015f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f68:	d103      	bne.n	8015f72 <init_uart+0x5e>
        UartHandle.Init.Mode = UART_MODE_RX;
 8015f6a:	4b09      	ldr	r3, [pc, #36]	; (8015f90 <init_uart+0x7c>)
 8015f6c:	2204      	movs	r2, #4
 8015f6e:	615a      	str	r2, [r3, #20]
 8015f70:	e002      	b.n	8015f78 <init_uart+0x64>
    } else {
        UartHandle.Init.Mode = UART_MODE_TX_RX;
 8015f72:	4b07      	ldr	r3, [pc, #28]	; (8015f90 <init_uart+0x7c>)
 8015f74:	220c      	movs	r2, #12
 8015f76:	615a      	str	r2, [r3, #20]
    }

    if (HAL_UART_Init(&UartHandle) != HAL_OK) {
 8015f78:	4805      	ldr	r0, [pc, #20]	; (8015f90 <init_uart+0x7c>)
 8015f7a:	f7ff fb67 	bl	801564c <HAL_UART_Init>
 8015f7e:	4603      	mov	r3, r0
 8015f80:	2b00      	cmp	r3, #0
 8015f82:	d002      	beq.n	8015f8a <init_uart+0x76>
        error("Cannot initialize UART");
 8015f84:	4803      	ldr	r0, [pc, #12]	; (8015f94 <init_uart+0x80>)
 8015f86:	f000 f9ef 	bl	8016368 <error>
    }
}
 8015f8a:	b003      	add	sp, #12
 8015f8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8015f90:	20001b8c 	.word	0x20001b8c
 8015f94:	0801cf60 	.word	0x0801cf60

08015f98 <serial_init>:

void serial_init(serial_t *obj, PinName tx, PinName rx)
{
 8015f98:	b500      	push	{lr}
 8015f9a:	b08d      	sub	sp, #52	; 0x34
 8015f9c:	9001      	str	r0, [sp, #4]
 8015f9e:	460b      	mov	r3, r1
 8015fa0:	f8ad 3002 	strh.w	r3, [sp, #2]
 8015fa4:	4613      	mov	r3, r2
 8015fa6:	f8ad 3000 	strh.w	r3, [sp]
    // Determine the UART to use (UART_1, UART_2, ...)
    UARTName uart_tx = (UARTName)pinmap_peripheral(tx, PinMap_UART_TX);
 8015faa:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8015fae:	4618      	mov	r0, r3
 8015fb0:	4984      	ldr	r1, [pc, #528]	; (80161c4 <serial_init+0x22c>)
 8015fb2:	f000 faa7 	bl	8016504 <pinmap_peripheral>
 8015fb6:	900b      	str	r0, [sp, #44]	; 0x2c
    UARTName uart_rx = (UARTName)pinmap_peripheral(rx, PinMap_UART_RX);
 8015fb8:	f9bd 3000 	ldrsh.w	r3, [sp]
 8015fbc:	4618      	mov	r0, r3
 8015fbe:	4982      	ldr	r1, [pc, #520]	; (80161c8 <serial_init+0x230>)
 8015fc0:	f000 faa0 	bl	8016504 <pinmap_peripheral>
 8015fc4:	900a      	str	r0, [sp, #40]	; 0x28

    // Get the peripheral name (UART_1, UART_2, ...) from the pin and assign it to the object
    obj->uart = (UARTName)pinmap_merge(uart_tx, uart_rx);
 8015fc6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8015fc8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015fca:	f000 fa5b 	bl	8016484 <pinmap_merge>
 8015fce:	4602      	mov	r2, r0
 8015fd0:	9b01      	ldr	r3, [sp, #4]
 8015fd2:	601a      	str	r2, [r3, #0]
    MBED_ASSERT(obj->uart != (UARTName)NC);
 8015fd4:	9b01      	ldr	r3, [sp, #4]
 8015fd6:	681b      	ldr	r3, [r3, #0]
 8015fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015fdc:	d104      	bne.n	8015fe8 <serial_init+0x50>
 8015fde:	487b      	ldr	r0, [pc, #492]	; (80161cc <serial_init+0x234>)
 8015fe0:	497b      	ldr	r1, [pc, #492]	; (80161d0 <serial_init+0x238>)
 8015fe2:	2253      	movs	r2, #83	; 0x53
 8015fe4:	f000 f9b4 	bl	8016350 <mbed_assert_internal>

    // Enable USART clock
    switch (obj->uart) {
 8015fe8:	9b01      	ldr	r3, [sp, #4]
 8015fea:	681b      	ldr	r3, [r3, #0]
 8015fec:	4a79      	ldr	r2, [pc, #484]	; (80161d4 <serial_init+0x23c>)
 8015fee:	4293      	cmp	r3, r2
 8015ff0:	d05d      	beq.n	80160ae <serial_init+0x116>
 8015ff2:	4a78      	ldr	r2, [pc, #480]	; (80161d4 <serial_init+0x23c>)
 8015ff4:	4293      	cmp	r3, r2
 8015ff6:	d809      	bhi.n	801600c <serial_init+0x74>
 8015ff8:	4a77      	ldr	r2, [pc, #476]	; (80161d8 <serial_init+0x240>)
 8015ffa:	4293      	cmp	r3, r2
 8015ffc:	d037      	beq.n	801606e <serial_init+0xd6>
 8015ffe:	4a77      	ldr	r2, [pc, #476]	; (80161dc <serial_init+0x244>)
 8016000:	4293      	cmp	r3, r2
 8016002:	d044      	beq.n	801608e <serial_init+0xf6>
 8016004:	4a76      	ldr	r2, [pc, #472]	; (80161e0 <serial_init+0x248>)
 8016006:	4293      	cmp	r3, r2
 8016008:	d021      	beq.n	801604e <serial_init+0xb6>
 801600a:	e090      	b.n	801612e <serial_init+0x196>
 801600c:	4a75      	ldr	r2, [pc, #468]	; (80161e4 <serial_init+0x24c>)
 801600e:	4293      	cmp	r3, r2
 8016010:	d07d      	beq.n	801610e <serial_init+0x176>
 8016012:	4a74      	ldr	r2, [pc, #464]	; (80161e4 <serial_init+0x24c>)
 8016014:	4293      	cmp	r3, r2
 8016016:	d803      	bhi.n	8016020 <serial_init+0x88>
 8016018:	4a73      	ldr	r2, [pc, #460]	; (80161e8 <serial_init+0x250>)
 801601a:	4293      	cmp	r3, r2
 801601c:	d067      	beq.n	80160ee <serial_init+0x156>
 801601e:	e086      	b.n	801612e <serial_init+0x196>
 8016020:	4a72      	ldr	r2, [pc, #456]	; (80161ec <serial_init+0x254>)
 8016022:	4293      	cmp	r3, r2
 8016024:	d003      	beq.n	801602e <serial_init+0x96>
 8016026:	4a72      	ldr	r2, [pc, #456]	; (80161f0 <serial_init+0x258>)
 8016028:	4293      	cmp	r3, r2
 801602a:	d050      	beq.n	80160ce <serial_init+0x136>
 801602c:	e07f      	b.n	801612e <serial_init+0x196>
        case UART_1:
            __USART1_CLK_ENABLE();
 801602e:	4a71      	ldr	r2, [pc, #452]	; (80161f4 <serial_init+0x25c>)
 8016030:	4b70      	ldr	r3, [pc, #448]	; (80161f4 <serial_init+0x25c>)
 8016032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016034:	f043 0310 	orr.w	r3, r3, #16
 8016038:	6453      	str	r3, [r2, #68]	; 0x44
 801603a:	4b6e      	ldr	r3, [pc, #440]	; (80161f4 <serial_init+0x25c>)
 801603c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801603e:	f003 0310 	and.w	r3, r3, #16
 8016042:	9309      	str	r3, [sp, #36]	; 0x24
 8016044:	9b09      	ldr	r3, [sp, #36]	; 0x24
            obj->index = 0;
 8016046:	9b01      	ldr	r3, [sp, #4]
 8016048:	2200      	movs	r2, #0
 801604a:	605a      	str	r2, [r3, #4]
            break;
 801604c:	e06f      	b.n	801612e <serial_init+0x196>
        case UART_2:
            __USART2_CLK_ENABLE();
 801604e:	4a69      	ldr	r2, [pc, #420]	; (80161f4 <serial_init+0x25c>)
 8016050:	4b68      	ldr	r3, [pc, #416]	; (80161f4 <serial_init+0x25c>)
 8016052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8016058:	6413      	str	r3, [r2, #64]	; 0x40
 801605a:	4b66      	ldr	r3, [pc, #408]	; (80161f4 <serial_init+0x25c>)
 801605c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801605e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016062:	9308      	str	r3, [sp, #32]
 8016064:	9b08      	ldr	r3, [sp, #32]
            obj->index = 1;
 8016066:	9b01      	ldr	r3, [sp, #4]
 8016068:	2201      	movs	r2, #1
 801606a:	605a      	str	r2, [r3, #4]
            break;
 801606c:	e05f      	b.n	801612e <serial_init+0x196>
#if defined(USART3_BASE)
        case UART_3:
            __USART3_CLK_ENABLE();
 801606e:	4a61      	ldr	r2, [pc, #388]	; (80161f4 <serial_init+0x25c>)
 8016070:	4b60      	ldr	r3, [pc, #384]	; (80161f4 <serial_init+0x25c>)
 8016072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016074:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8016078:	6413      	str	r3, [r2, #64]	; 0x40
 801607a:	4b5e      	ldr	r3, [pc, #376]	; (80161f4 <serial_init+0x25c>)
 801607c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801607e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8016082:	9307      	str	r3, [sp, #28]
 8016084:	9b07      	ldr	r3, [sp, #28]
            obj->index = 2;
 8016086:	9b01      	ldr	r3, [sp, #4]
 8016088:	2202      	movs	r2, #2
 801608a:	605a      	str	r2, [r3, #4]
            break;
 801608c:	e04f      	b.n	801612e <serial_init+0x196>
#endif
#if defined(UART4_BASE)
        case UART_4:
            __UART4_CLK_ENABLE();
 801608e:	4a59      	ldr	r2, [pc, #356]	; (80161f4 <serial_init+0x25c>)
 8016090:	4b58      	ldr	r3, [pc, #352]	; (80161f4 <serial_init+0x25c>)
 8016092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016094:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8016098:	6413      	str	r3, [r2, #64]	; 0x40
 801609a:	4b56      	ldr	r3, [pc, #344]	; (80161f4 <serial_init+0x25c>)
 801609c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801609e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80160a2:	9306      	str	r3, [sp, #24]
 80160a4:	9b06      	ldr	r3, [sp, #24]
            obj->index = 3;
 80160a6:	9b01      	ldr	r3, [sp, #4]
 80160a8:	2203      	movs	r2, #3
 80160aa:	605a      	str	r2, [r3, #4]
            break;
 80160ac:	e03f      	b.n	801612e <serial_init+0x196>
#endif
#if defined(UART5_BASE)
        case UART_5:
            __UART5_CLK_ENABLE();
 80160ae:	4a51      	ldr	r2, [pc, #324]	; (80161f4 <serial_init+0x25c>)
 80160b0:	4b50      	ldr	r3, [pc, #320]	; (80161f4 <serial_init+0x25c>)
 80160b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80160b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80160b8:	6413      	str	r3, [r2, #64]	; 0x40
 80160ba:	4b4e      	ldr	r3, [pc, #312]	; (80161f4 <serial_init+0x25c>)
 80160bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80160be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80160c2:	9305      	str	r3, [sp, #20]
 80160c4:	9b05      	ldr	r3, [sp, #20]
            obj->index = 4;
 80160c6:	9b01      	ldr	r3, [sp, #4]
 80160c8:	2204      	movs	r2, #4
 80160ca:	605a      	str	r2, [r3, #4]
            break;
 80160cc:	e02f      	b.n	801612e <serial_init+0x196>
#endif
        case UART_6:
            __USART6_CLK_ENABLE();
 80160ce:	4a49      	ldr	r2, [pc, #292]	; (80161f4 <serial_init+0x25c>)
 80160d0:	4b48      	ldr	r3, [pc, #288]	; (80161f4 <serial_init+0x25c>)
 80160d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80160d4:	f043 0320 	orr.w	r3, r3, #32
 80160d8:	6453      	str	r3, [r2, #68]	; 0x44
 80160da:	4b46      	ldr	r3, [pc, #280]	; (80161f4 <serial_init+0x25c>)
 80160dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80160de:	f003 0320 	and.w	r3, r3, #32
 80160e2:	9304      	str	r3, [sp, #16]
 80160e4:	9b04      	ldr	r3, [sp, #16]
            obj->index = 5;
 80160e6:	9b01      	ldr	r3, [sp, #4]
 80160e8:	2205      	movs	r2, #5
 80160ea:	605a      	str	r2, [r3, #4]
            break;
 80160ec:	e01f      	b.n	801612e <serial_init+0x196>
#if defined(UART7_BASE)
        case UART_7:
            __UART7_CLK_ENABLE();
 80160ee:	4a41      	ldr	r2, [pc, #260]	; (80161f4 <serial_init+0x25c>)
 80160f0:	4b40      	ldr	r3, [pc, #256]	; (80161f4 <serial_init+0x25c>)
 80160f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80160f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80160f8:	6413      	str	r3, [r2, #64]	; 0x40
 80160fa:	4b3e      	ldr	r3, [pc, #248]	; (80161f4 <serial_init+0x25c>)
 80160fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80160fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8016102:	9303      	str	r3, [sp, #12]
 8016104:	9b03      	ldr	r3, [sp, #12]
            obj->index = 6;
 8016106:	9b01      	ldr	r3, [sp, #4]
 8016108:	2206      	movs	r2, #6
 801610a:	605a      	str	r2, [r3, #4]
            break;
 801610c:	e00f      	b.n	801612e <serial_init+0x196>
#endif
#if defined(UART8_BASE)
        case UART_8:
            __UART8_CLK_ENABLE();
 801610e:	4a39      	ldr	r2, [pc, #228]	; (80161f4 <serial_init+0x25c>)
 8016110:	4b38      	ldr	r3, [pc, #224]	; (80161f4 <serial_init+0x25c>)
 8016112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016114:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8016118:	6413      	str	r3, [r2, #64]	; 0x40
 801611a:	4b36      	ldr	r3, [pc, #216]	; (80161f4 <serial_init+0x25c>)
 801611c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801611e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8016122:	9302      	str	r3, [sp, #8]
 8016124:	9b02      	ldr	r3, [sp, #8]
            obj->index = 7;
 8016126:	9b01      	ldr	r3, [sp, #4]
 8016128:	2207      	movs	r2, #7
 801612a:	605a      	str	r2, [r3, #4]
            break;
 801612c:	bf00      	nop
#endif
    }

    // Configure the UART pins
    pinmap_pinout(tx, PinMap_UART_TX);
 801612e:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8016132:	4618      	mov	r0, r3
 8016134:	4923      	ldr	r1, [pc, #140]	; (80161c4 <serial_init+0x22c>)
 8016136:	f000 f971 	bl	801641c <pinmap_pinout>
    pinmap_pinout(rx, PinMap_UART_RX);
 801613a:	f9bd 3000 	ldrsh.w	r3, [sp]
 801613e:	4618      	mov	r0, r3
 8016140:	4921      	ldr	r1, [pc, #132]	; (80161c8 <serial_init+0x230>)
 8016142:	f000 f96b 	bl	801641c <pinmap_pinout>
    if (tx != NC) {
 8016146:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801614a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801614e:	d005      	beq.n	801615c <serial_init+0x1c4>
        pin_mode(tx, PullUp);
 8016150:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8016154:	4618      	mov	r0, r3
 8016156:	2101      	movs	r1, #1
 8016158:	f7ff fe94 	bl	8015e84 <pin_mode>
    }
    if (rx != NC) {
 801615c:	f9bd 3000 	ldrsh.w	r3, [sp]
 8016160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016164:	d005      	beq.n	8016172 <serial_init+0x1da>
        pin_mode(rx, PullUp);
 8016166:	f9bd 3000 	ldrsh.w	r3, [sp]
 801616a:	4618      	mov	r0, r3
 801616c:	2101      	movs	r1, #1
 801616e:	f7ff fe89 	bl	8015e84 <pin_mode>
    }

    // Configure UART
    obj->baudrate = 9600;
 8016172:	9b01      	ldr	r3, [sp, #4]
 8016174:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8016178:	609a      	str	r2, [r3, #8]
    obj->databits = UART_WORDLENGTH_8B;
 801617a:	9b01      	ldr	r3, [sp, #4]
 801617c:	2200      	movs	r2, #0
 801617e:	60da      	str	r2, [r3, #12]
    obj->stopbits = UART_STOPBITS_1;
 8016180:	9b01      	ldr	r3, [sp, #4]
 8016182:	2200      	movs	r2, #0
 8016184:	611a      	str	r2, [r3, #16]
    obj->parity   = UART_PARITY_NONE;
 8016186:	9b01      	ldr	r3, [sp, #4]
 8016188:	2200      	movs	r2, #0
 801618a:	615a      	str	r2, [r3, #20]

    obj->pin_tx = tx;
 801618c:	9b01      	ldr	r3, [sp, #4]
 801618e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8016192:	831a      	strh	r2, [r3, #24]
    obj->pin_rx = rx;
 8016194:	9b01      	ldr	r3, [sp, #4]
 8016196:	f8bd 2000 	ldrh.w	r2, [sp]
 801619a:	835a      	strh	r2, [r3, #26]

    init_uart(obj);
 801619c:	9801      	ldr	r0, [sp, #4]
 801619e:	f7ff feb9 	bl	8015f14 <init_uart>

    // For stdio management
    if (obj->uart == STDIO_UART) {
 80161a2:	9b01      	ldr	r3, [sp, #4]
 80161a4:	681b      	ldr	r3, [r3, #0]
 80161a6:	4a11      	ldr	r2, [pc, #68]	; (80161ec <serial_init+0x254>)
 80161a8:	4293      	cmp	r3, r2
 80161aa:	d107      	bne.n	80161bc <serial_init+0x224>
        stdio_uart_inited = 1;
 80161ac:	4b12      	ldr	r3, [pc, #72]	; (80161f8 <serial_init+0x260>)
 80161ae:	2201      	movs	r2, #1
 80161b0:	601a      	str	r2, [r3, #0]
        memcpy(&stdio_uart, obj, sizeof(serial_t));
 80161b2:	4812      	ldr	r0, [pc, #72]	; (80161fc <serial_init+0x264>)
 80161b4:	9901      	ldr	r1, [sp, #4]
 80161b6:	221c      	movs	r2, #28
 80161b8:	f000 fd2b 	bl	8016c12 <memcpy>
    }
}
 80161bc:	b00d      	add	sp, #52	; 0x34
 80161be:	f85d fb04 	ldr.w	pc, [sp], #4
 80161c2:	bf00      	nop
 80161c4:	0801d0a0 	.word	0x0801d0a0
 80161c8:	0801d0dc 	.word	0x0801d0dc
 80161cc:	0801cf78 	.word	0x0801cf78
 80161d0:	0801cf94 	.word	0x0801cf94
 80161d4:	40005000 	.word	0x40005000
 80161d8:	40004800 	.word	0x40004800
 80161dc:	40004c00 	.word	0x40004c00
 80161e0:	40004400 	.word	0x40004400
 80161e4:	40007c00 	.word	0x40007c00
 80161e8:	40007800 	.word	0x40007800
 80161ec:	40011000 	.word	0x40011000
 80161f0:	40011400 	.word	0x40011400
 80161f4:	40023800 	.word	0x40023800
 80161f8:	20001afc 	.word	0x20001afc
 80161fc:	20001bfc 	.word	0x20001bfc

08016200 <serial_getc>:
/******************************************************************************
 * READ/WRITE
 ******************************************************************************/

int serial_getc(serial_t *obj)
{
 8016200:	b500      	push	{lr}
 8016202:	b085      	sub	sp, #20
 8016204:	9001      	str	r0, [sp, #4]
    USART_TypeDef *uart = (USART_TypeDef *)(obj->uart);
 8016206:	9b01      	ldr	r3, [sp, #4]
 8016208:	681b      	ldr	r3, [r3, #0]
 801620a:	9303      	str	r3, [sp, #12]
    while (!serial_readable(obj));
 801620c:	bf00      	nop
 801620e:	9801      	ldr	r0, [sp, #4]
 8016210:	f000 f822 	bl	8016258 <serial_readable>
 8016214:	4603      	mov	r3, r0
 8016216:	2b00      	cmp	r3, #0
 8016218:	d0f9      	beq.n	801620e <serial_getc+0xe>
    return (int)(uart->RDR & 0x1FF);
 801621a:	9b03      	ldr	r3, [sp, #12]
 801621c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801621e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8016222:	4618      	mov	r0, r3
 8016224:	b005      	add	sp, #20
 8016226:	f85d fb04 	ldr.w	pc, [sp], #4
 801622a:	bf00      	nop

0801622c <serial_putc>:

void serial_putc(serial_t *obj, int c)
{
 801622c:	b500      	push	{lr}
 801622e:	b085      	sub	sp, #20
 8016230:	9001      	str	r0, [sp, #4]
 8016232:	9100      	str	r1, [sp, #0]
    USART_TypeDef *uart = (USART_TypeDef *)(obj->uart);
 8016234:	9b01      	ldr	r3, [sp, #4]
 8016236:	681b      	ldr	r3, [r3, #0]
 8016238:	9303      	str	r3, [sp, #12]
    while (!serial_writable(obj));
 801623a:	bf00      	nop
 801623c:	9801      	ldr	r0, [sp, #4]
 801623e:	f000 f823 	bl	8016288 <serial_writable>
 8016242:	4603      	mov	r3, r0
 8016244:	2b00      	cmp	r3, #0
 8016246:	d0f9      	beq.n	801623c <serial_putc+0x10>
    uart->TDR = (uint32_t)(c & 0x1FF);
 8016248:	9b00      	ldr	r3, [sp, #0]
 801624a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801624e:	9b03      	ldr	r3, [sp, #12]
 8016250:	629a      	str	r2, [r3, #40]	; 0x28
}
 8016252:	b005      	add	sp, #20
 8016254:	f85d fb04 	ldr.w	pc, [sp], #4

08016258 <serial_readable>:

int serial_readable(serial_t *obj)
{
 8016258:	b084      	sub	sp, #16
 801625a:	9001      	str	r0, [sp, #4]
    int status;
    UartHandle.Instance = (USART_TypeDef *)(obj->uart);
 801625c:	9b01      	ldr	r3, [sp, #4]
 801625e:	681b      	ldr	r3, [r3, #0]
 8016260:	461a      	mov	r2, r3
 8016262:	4b08      	ldr	r3, [pc, #32]	; (8016284 <serial_readable+0x2c>)
 8016264:	601a      	str	r2, [r3, #0]
    // Check if data is received
    status = ((__HAL_UART_GET_FLAG(&UartHandle, UART_FLAG_RXNE) != RESET) ? 1 : 0);
 8016266:	4b07      	ldr	r3, [pc, #28]	; (8016284 <serial_readable+0x2c>)
 8016268:	681b      	ldr	r3, [r3, #0]
 801626a:	69db      	ldr	r3, [r3, #28]
 801626c:	f003 0320 	and.w	r3, r3, #32
 8016270:	2b00      	cmp	r3, #0
 8016272:	bf14      	ite	ne
 8016274:	2301      	movne	r3, #1
 8016276:	2300      	moveq	r3, #0
 8016278:	b2db      	uxtb	r3, r3
 801627a:	9303      	str	r3, [sp, #12]
    return status;
 801627c:	9b03      	ldr	r3, [sp, #12]
}
 801627e:	4618      	mov	r0, r3
 8016280:	b004      	add	sp, #16
 8016282:	4770      	bx	lr
 8016284:	20001b8c 	.word	0x20001b8c

08016288 <serial_writable>:

int serial_writable(serial_t *obj)
{
 8016288:	b084      	sub	sp, #16
 801628a:	9001      	str	r0, [sp, #4]
    int status;
    UartHandle.Instance = (USART_TypeDef *)(obj->uart);
 801628c:	9b01      	ldr	r3, [sp, #4]
 801628e:	681b      	ldr	r3, [r3, #0]
 8016290:	461a      	mov	r2, r3
 8016292:	4b08      	ldr	r3, [pc, #32]	; (80162b4 <serial_writable+0x2c>)
 8016294:	601a      	str	r2, [r3, #0]
    // Check if data is transmitted
    status = ((__HAL_UART_GET_FLAG(&UartHandle, UART_FLAG_TXE) != RESET) ? 1 : 0);
 8016296:	4b07      	ldr	r3, [pc, #28]	; (80162b4 <serial_writable+0x2c>)
 8016298:	681b      	ldr	r3, [r3, #0]
 801629a:	69db      	ldr	r3, [r3, #28]
 801629c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	bf14      	ite	ne
 80162a4:	2301      	movne	r3, #1
 80162a6:	2300      	moveq	r3, #0
 80162a8:	b2db      	uxtb	r3, r3
 80162aa:	9303      	str	r3, [sp, #12]
    return status;
 80162ac:	9b03      	ldr	r3, [sp, #12]
}
 80162ae:	4618      	mov	r0, r3
 80162b0:	b004      	add	sp, #16
 80162b2:	4770      	bx	lr
 80162b4:	20001b8c 	.word	0x20001b8c

080162b8 <us_ticker_init>:

static TIM_HandleTypeDef TimMasterHandle;
static int us_ticker_inited = 0;

void us_ticker_init(void)
{
 80162b8:	b508      	push	{r3, lr}
    if (us_ticker_inited) return;
 80162ba:	4b07      	ldr	r3, [pc, #28]	; (80162d8 <us_ticker_init+0x20>)
 80162bc:	681b      	ldr	r3, [r3, #0]
 80162be:	2b00      	cmp	r3, #0
 80162c0:	d000      	beq.n	80162c4 <us_ticker_init+0xc>
 80162c2:	e008      	b.n	80162d6 <us_ticker_init+0x1e>
    us_ticker_inited = 1;
 80162c4:	4b04      	ldr	r3, [pc, #16]	; (80162d8 <us_ticker_init+0x20>)
 80162c6:	2201      	movs	r2, #1
 80162c8:	601a      	str	r2, [r3, #0]

    TimMasterHandle.Instance = TIM_MST;
 80162ca:	4b04      	ldr	r3, [pc, #16]	; (80162dc <us_ticker_init+0x24>)
 80162cc:	4a04      	ldr	r2, [pc, #16]	; (80162e0 <us_ticker_init+0x28>)
 80162ce:	601a      	str	r2, [r3, #0]

    HAL_InitTick(0); // The passed value is not used
 80162d0:	2000      	movs	r0, #0
 80162d2:	f7ff fa19 	bl	8015708 <HAL_InitTick>
}
 80162d6:	bd08      	pop	{r3, pc}
 80162d8:	20001b3c 	.word	0x20001b3c
 80162dc:	20001b00 	.word	0x20001b00
 80162e0:	40000c00 	.word	0x40000c00

080162e4 <us_ticker_read>:

uint32_t us_ticker_read()
{
 80162e4:	b508      	push	{r3, lr}
    if (!us_ticker_inited) us_ticker_init();
 80162e6:	4b05      	ldr	r3, [pc, #20]	; (80162fc <us_ticker_read+0x18>)
 80162e8:	681b      	ldr	r3, [r3, #0]
 80162ea:	2b00      	cmp	r3, #0
 80162ec:	d101      	bne.n	80162f2 <us_ticker_read+0xe>
 80162ee:	f7ff ffe3 	bl	80162b8 <us_ticker_init>
    return TIM_MST->CNT;
 80162f2:	4b03      	ldr	r3, [pc, #12]	; (8016300 <us_ticker_read+0x1c>)
 80162f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80162f6:	4618      	mov	r0, r3
 80162f8:	bd08      	pop	{r3, pc}
 80162fa:	bf00      	nop
 80162fc:	20001b3c 	.word	0x20001b3c
 8016300:	40000c00 	.word	0x40000c00

08016304 <us_ticker_set_interrupt>:

void us_ticker_set_interrupt(timestamp_t timestamp)
{
 8016304:	b082      	sub	sp, #8
 8016306:	9001      	str	r0, [sp, #4]
    // Set new output compare value
    __HAL_TIM_SetCompare(&TimMasterHandle, TIM_CHANNEL_1, (uint32_t)timestamp);
 8016308:	4b06      	ldr	r3, [pc, #24]	; (8016324 <us_ticker_set_interrupt+0x20>)
 801630a:	681b      	ldr	r3, [r3, #0]
 801630c:	9a01      	ldr	r2, [sp, #4]
 801630e:	635a      	str	r2, [r3, #52]	; 0x34
    // Enable IT
    __HAL_TIM_ENABLE_IT(&TimMasterHandle, TIM_IT_CC1);
 8016310:	4b04      	ldr	r3, [pc, #16]	; (8016324 <us_ticker_set_interrupt+0x20>)
 8016312:	681b      	ldr	r3, [r3, #0]
 8016314:	4a03      	ldr	r2, [pc, #12]	; (8016324 <us_ticker_set_interrupt+0x20>)
 8016316:	6812      	ldr	r2, [r2, #0]
 8016318:	68d2      	ldr	r2, [r2, #12]
 801631a:	f042 0202 	orr.w	r2, r2, #2
 801631e:	60da      	str	r2, [r3, #12]
}
 8016320:	b002      	add	sp, #8
 8016322:	4770      	bx	lr
 8016324:	20001b00 	.word	0x20001b00

08016328 <us_ticker_disable_interrupt>:

void us_ticker_disable_interrupt(void)
{
    __HAL_TIM_DISABLE_IT(&TimMasterHandle, TIM_IT_CC1);
 8016328:	4b04      	ldr	r3, [pc, #16]	; (801633c <us_ticker_disable_interrupt+0x14>)
 801632a:	681b      	ldr	r3, [r3, #0]
 801632c:	4a03      	ldr	r2, [pc, #12]	; (801633c <us_ticker_disable_interrupt+0x14>)
 801632e:	6812      	ldr	r2, [r2, #0]
 8016330:	68d2      	ldr	r2, [r2, #12]
 8016332:	f022 0202 	bic.w	r2, r2, #2
 8016336:	60da      	str	r2, [r3, #12]
}
 8016338:	4770      	bx	lr
 801633a:	bf00      	nop
 801633c:	20001b00 	.word	0x20001b00

08016340 <us_ticker_clear_interrupt>:

void us_ticker_clear_interrupt(void)
{
    __HAL_TIM_CLEAR_IT(&TimMasterHandle, TIM_IT_CC1);
 8016340:	4b02      	ldr	r3, [pc, #8]	; (801634c <us_ticker_clear_interrupt+0xc>)
 8016342:	681b      	ldr	r3, [r3, #0]
 8016344:	f06f 0202 	mvn.w	r2, #2
 8016348:	611a      	str	r2, [r3, #16]
}
 801634a:	4770      	bx	lr
 801634c:	20001b00 	.word	0x20001b00

08016350 <mbed_assert_internal>:
 8016350:	b430      	push	{r4, r5}
 8016352:	4605      	mov	r5, r0
 8016354:	460c      	mov	r4, r1
 8016356:	4613      	mov	r3, r2
 8016358:	4802      	ldr	r0, [pc, #8]	; (8016364 <mbed_assert_internal+0x14>)
 801635a:	4629      	mov	r1, r5
 801635c:	4622      	mov	r2, r4
 801635e:	bc30      	pop	{r4, r5}
 8016360:	f000 b802 	b.w	8016368 <error>
 8016364:	0801cfe8 	.word	0x0801cfe8

08016368 <error>:
#include "mbed_error.h"
#if DEVICE_STDIO_MESSAGES
#include <stdio.h>
#endif

WEAK void error(const char* format, ...) {
 8016368:	b40f      	push	{r0, r1, r2, r3}
 801636a:	b500      	push	{lr}
 801636c:	b083      	sub	sp, #12
#if DEVICE_STDIO_MESSAGES
    va_list arg;
    va_start(arg, format);
 801636e:	ab05      	add	r3, sp, #20
 8016370:	9301      	str	r3, [sp, #4]
    vfprintf(stderr, format, arg);
 8016372:	4b05      	ldr	r3, [pc, #20]	; (8016388 <error+0x20>)
 8016374:	681b      	ldr	r3, [r3, #0]
 8016376:	68db      	ldr	r3, [r3, #12]
 8016378:	4618      	mov	r0, r3
 801637a:	9904      	ldr	r1, [sp, #16]
 801637c:	9a01      	ldr	r2, [sp, #4]
 801637e:	f000 fe33 	bl	8016fe8 <vfiprintf>
    va_end(arg);
#endif
    exit(1);
 8016382:	2001      	movs	r0, #1
 8016384:	f000 fa64 	bl	8016850 <exit>
 8016388:	20001768 	.word	0x20001768

0801638c <_gpio_init_in>:
 * limitations under the License.
 */
#include "gpio_api.h"

static inline void _gpio_init_in(gpio_t* gpio, PinName pin, PinMode mode)
{
 801638c:	b500      	push	{lr}
 801638e:	b083      	sub	sp, #12
 8016390:	9001      	str	r0, [sp, #4]
 8016392:	460b      	mov	r3, r1
 8016394:	f8ad 3002 	strh.w	r3, [sp, #2]
 8016398:	4613      	mov	r3, r2
 801639a:	f88d 3001 	strb.w	r3, [sp, #1]
    gpio_init(gpio, pin);
 801639e:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80163a2:	9801      	ldr	r0, [sp, #4]
 80163a4:	4619      	mov	r1, r3
 80163a6:	f7ff fb01 	bl	80159ac <gpio_init>
    if (pin != NC) {
 80163aa:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80163ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80163b2:	d009      	beq.n	80163c8 <_gpio_init_in+0x3c>
        gpio_dir(gpio, PIN_INPUT);
 80163b4:	9801      	ldr	r0, [sp, #4]
 80163b6:	2100      	movs	r1, #0
 80163b8:	f7ff fb3c 	bl	8015a34 <gpio_dir>
        gpio_mode(gpio, mode);
 80163bc:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80163c0:	9801      	ldr	r0, [sp, #4]
 80163c2:	4619      	mov	r1, r3
 80163c4:	f7ff fb24 	bl	8015a10 <gpio_mode>
    }
}
 80163c8:	b003      	add	sp, #12
 80163ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80163ce:	bf00      	nop

080163d0 <gpio_init_in>:
        gpio_dir(gpio, PIN_OUTPUT);
        gpio_mode(gpio, mode);
    }
}

void gpio_init_in(gpio_t* gpio, PinName pin) {
 80163d0:	b500      	push	{lr}
 80163d2:	b083      	sub	sp, #12
 80163d4:	9001      	str	r0, [sp, #4]
 80163d6:	460b      	mov	r3, r1
 80163d8:	f8ad 3002 	strh.w	r3, [sp, #2]
    gpio_init_in_ex(gpio, pin, PullDefault);
 80163dc:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80163e0:	9801      	ldr	r0, [sp, #4]
 80163e2:	4619      	mov	r1, r3
 80163e4:	2200      	movs	r2, #0
 80163e6:	f000 f803 	bl	80163f0 <gpio_init_in_ex>
}
 80163ea:	b003      	add	sp, #12
 80163ec:	f85d fb04 	ldr.w	pc, [sp], #4

080163f0 <gpio_init_in_ex>:

void gpio_init_in_ex(gpio_t* gpio, PinName pin, PinMode mode) {
 80163f0:	b500      	push	{lr}
 80163f2:	b083      	sub	sp, #12
 80163f4:	9001      	str	r0, [sp, #4]
 80163f6:	460b      	mov	r3, r1
 80163f8:	f8ad 3002 	strh.w	r3, [sp, #2]
 80163fc:	4613      	mov	r3, r2
 80163fe:	f88d 3001 	strb.w	r3, [sp, #1]
    _gpio_init_in(gpio, pin, mode);
 8016402:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 8016406:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801640a:	9801      	ldr	r0, [sp, #4]
 801640c:	4611      	mov	r1, r2
 801640e:	461a      	mov	r2, r3
 8016410:	f7ff ffbc 	bl	801638c <_gpio_init_in>
}
 8016414:	b003      	add	sp, #12
 8016416:	f85d fb04 	ldr.w	pc, [sp], #4
 801641a:	bf00      	nop

0801641c <pinmap_pinout>:
 * limitations under the License.
 */
#include "pinmap.h"
#include "mbed_error.h"

void pinmap_pinout(PinName pin, const PinMap *map) {
 801641c:	b500      	push	{lr}
 801641e:	b083      	sub	sp, #12
 8016420:	4603      	mov	r3, r0
 8016422:	9100      	str	r1, [sp, #0]
 8016424:	f8ad 3006 	strh.w	r3, [sp, #6]
    if (pin == NC)
 8016428:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801642c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016430:	d100      	bne.n	8016434 <pinmap_pinout+0x18>
        return;
 8016432:	e022      	b.n	801647a <pinmap_pinout+0x5e>

    while (map->pin != NC) {
 8016434:	e018      	b.n	8016468 <pinmap_pinout+0x4c>
        if (map->pin == pin) {
 8016436:	9b00      	ldr	r3, [sp, #0]
 8016438:	881b      	ldrh	r3, [r3, #0]
 801643a:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801643e:	b21b      	sxth	r3, r3
 8016440:	429a      	cmp	r2, r3
 8016442:	d10e      	bne.n	8016462 <pinmap_pinout+0x46>
            pin_function(pin, map->function);
 8016444:	9b00      	ldr	r3, [sp, #0]
 8016446:	689b      	ldr	r3, [r3, #8]
 8016448:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801644c:	4610      	mov	r0, r2
 801644e:	4619      	mov	r1, r3
 8016450:	f7ff fcca 	bl	8015de8 <pin_function>

            pin_mode(pin, PullNone);
 8016454:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8016458:	4618      	mov	r0, r3
 801645a:	2100      	movs	r1, #0
 801645c:	f7ff fd12 	bl	8015e84 <pin_mode>
            return;
 8016460:	e00b      	b.n	801647a <pinmap_pinout+0x5e>
        }
        map++;
 8016462:	9b00      	ldr	r3, [sp, #0]
 8016464:	330c      	adds	r3, #12
 8016466:	9300      	str	r3, [sp, #0]

void pinmap_pinout(PinName pin, const PinMap *map) {
    if (pin == NC)
        return;

    while (map->pin != NC) {
 8016468:	9b00      	ldr	r3, [sp, #0]
 801646a:	881b      	ldrh	r3, [r3, #0]
 801646c:	b21b      	sxth	r3, r3
 801646e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016472:	d1e0      	bne.n	8016436 <pinmap_pinout+0x1a>
            pin_mode(pin, PullNone);
            return;
        }
        map++;
    }
    error("could not pinout");
 8016474:	4802      	ldr	r0, [pc, #8]	; (8016480 <pinmap_pinout+0x64>)
 8016476:	f7ff ff77 	bl	8016368 <error>
}
 801647a:	b003      	add	sp, #12
 801647c:	f85d fb04 	ldr.w	pc, [sp], #4
 8016480:	0801d01c 	.word	0x0801d01c

08016484 <pinmap_merge>:

uint32_t pinmap_merge(uint32_t a, uint32_t b) {
 8016484:	b500      	push	{lr}
 8016486:	b083      	sub	sp, #12
 8016488:	9001      	str	r0, [sp, #4]
 801648a:	9100      	str	r1, [sp, #0]
    // both are the same (inc both NC)
    if (a == b)
 801648c:	9a01      	ldr	r2, [sp, #4]
 801648e:	9b00      	ldr	r3, [sp, #0]
 8016490:	429a      	cmp	r2, r3
 8016492:	d101      	bne.n	8016498 <pinmap_merge+0x14>
        return a;
 8016494:	9b01      	ldr	r3, [sp, #4]
 8016496:	e010      	b.n	80164ba <pinmap_merge+0x36>

    // one (or both) is not connected
    if (a == (uint32_t)NC)
 8016498:	9b01      	ldr	r3, [sp, #4]
 801649a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801649e:	d101      	bne.n	80164a4 <pinmap_merge+0x20>
        return b;
 80164a0:	9b00      	ldr	r3, [sp, #0]
 80164a2:	e00a      	b.n	80164ba <pinmap_merge+0x36>
    if (b == (uint32_t)NC)
 80164a4:	9b00      	ldr	r3, [sp, #0]
 80164a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80164aa:	d101      	bne.n	80164b0 <pinmap_merge+0x2c>
        return a;
 80164ac:	9b01      	ldr	r3, [sp, #4]
 80164ae:	e004      	b.n	80164ba <pinmap_merge+0x36>

    // mis-match error case
    error("pinmap mis-match");
 80164b0:	4804      	ldr	r0, [pc, #16]	; (80164c4 <pinmap_merge+0x40>)
 80164b2:	f7ff ff59 	bl	8016368 <error>
    return (uint32_t)NC;
 80164b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80164ba:	4618      	mov	r0, r3
 80164bc:	b003      	add	sp, #12
 80164be:	f85d fb04 	ldr.w	pc, [sp], #4
 80164c2:	bf00      	nop
 80164c4:	0801d030 	.word	0x0801d030

080164c8 <pinmap_find_peripheral>:

uint32_t pinmap_find_peripheral(PinName pin, const PinMap* map) {
 80164c8:	b082      	sub	sp, #8
 80164ca:	4603      	mov	r3, r0
 80164cc:	9100      	str	r1, [sp, #0]
 80164ce:	f8ad 3006 	strh.w	r3, [sp, #6]
    while (map->pin != NC) {
 80164d2:	e00c      	b.n	80164ee <pinmap_find_peripheral+0x26>
        if (map->pin == pin)
 80164d4:	9b00      	ldr	r3, [sp, #0]
 80164d6:	881b      	ldrh	r3, [r3, #0]
 80164d8:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 80164dc:	b21b      	sxth	r3, r3
 80164de:	429a      	cmp	r2, r3
 80164e0:	d102      	bne.n	80164e8 <pinmap_find_peripheral+0x20>
            return map->peripheral;
 80164e2:	9b00      	ldr	r3, [sp, #0]
 80164e4:	685b      	ldr	r3, [r3, #4]
 80164e6:	e00a      	b.n	80164fe <pinmap_find_peripheral+0x36>
        map++;
 80164e8:	9b00      	ldr	r3, [sp, #0]
 80164ea:	330c      	adds	r3, #12
 80164ec:	9300      	str	r3, [sp, #0]
    error("pinmap mis-match");
    return (uint32_t)NC;
}

uint32_t pinmap_find_peripheral(PinName pin, const PinMap* map) {
    while (map->pin != NC) {
 80164ee:	9b00      	ldr	r3, [sp, #0]
 80164f0:	881b      	ldrh	r3, [r3, #0]
 80164f2:	b21b      	sxth	r3, r3
 80164f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80164f8:	d1ec      	bne.n	80164d4 <pinmap_find_peripheral+0xc>
        if (map->pin == pin)
            return map->peripheral;
        map++;
    }
    return (uint32_t)NC;
 80164fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80164fe:	4618      	mov	r0, r3
 8016500:	b002      	add	sp, #8
 8016502:	4770      	bx	lr

08016504 <pinmap_peripheral>:

uint32_t pinmap_peripheral(PinName pin, const PinMap* map) {
 8016504:	b500      	push	{lr}
 8016506:	b085      	sub	sp, #20
 8016508:	4603      	mov	r3, r0
 801650a:	9100      	str	r1, [sp, #0]
 801650c:	f8ad 3006 	strh.w	r3, [sp, #6]
    uint32_t peripheral = (uint32_t)NC;
 8016510:	f04f 33ff 	mov.w	r3, #4294967295
 8016514:	9303      	str	r3, [sp, #12]

    if (pin == (PinName)NC)
 8016516:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801651a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801651e:	d102      	bne.n	8016526 <pinmap_peripheral+0x22>
        return (uint32_t)NC;
 8016520:	f04f 33ff 	mov.w	r3, #4294967295
 8016524:	e00e      	b.n	8016544 <pinmap_peripheral+0x40>
    peripheral = pinmap_find_peripheral(pin, map);
 8016526:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801652a:	4618      	mov	r0, r3
 801652c:	9900      	ldr	r1, [sp, #0]
 801652e:	f7ff ffcb 	bl	80164c8 <pinmap_find_peripheral>
 8016532:	9003      	str	r0, [sp, #12]
    if ((uint32_t)NC == peripheral) // no mapping available
 8016534:	9b03      	ldr	r3, [sp, #12]
 8016536:	f1b3 3fff 	cmp.w	r3, #4294967295
 801653a:	d102      	bne.n	8016542 <pinmap_peripheral+0x3e>
        error("pinmap not found for peripheral");
 801653c:	4803      	ldr	r0, [pc, #12]	; (801654c <pinmap_peripheral+0x48>)
 801653e:	f7ff ff13 	bl	8016368 <error>
    return peripheral;
 8016542:	9b03      	ldr	r3, [sp, #12]
}
 8016544:	4618      	mov	r0, r3
 8016546:	b005      	add	sp, #20
 8016548:	f85d fb04 	ldr.w	pc, [sp], #4
 801654c:	0801d044 	.word	0x0801d044

08016550 <ticker_set_handler>:
 */
#include <stddef.h>
#include "ticker_api.h"
#include "cmsis.h"

void ticker_set_handler(const ticker_data_t *const data, ticker_event_handler handler) {
 8016550:	b500      	push	{lr}
 8016552:	b083      	sub	sp, #12
 8016554:	9001      	str	r0, [sp, #4]
 8016556:	9100      	str	r1, [sp, #0]
    data->interface->init();
 8016558:	9b01      	ldr	r3, [sp, #4]
 801655a:	681b      	ldr	r3, [r3, #0]
 801655c:	681b      	ldr	r3, [r3, #0]
 801655e:	4798      	blx	r3

    data->queue->event_handler = handler;
 8016560:	9b01      	ldr	r3, [sp, #4]
 8016562:	685b      	ldr	r3, [r3, #4]
 8016564:	9a00      	ldr	r2, [sp, #0]
 8016566:	601a      	str	r2, [r3, #0]
}
 8016568:	b003      	add	sp, #12
 801656a:	f85d fb04 	ldr.w	pc, [sp], #4
 801656e:	bf00      	nop

08016570 <ticker_irq_handler>:

void ticker_irq_handler(const ticker_data_t *const data) {
 8016570:	b510      	push	{r4, lr}
 8016572:	b084      	sub	sp, #16
 8016574:	9001      	str	r0, [sp, #4]
    data->interface->clear_interrupt();
 8016576:	9b01      	ldr	r3, [sp, #4]
 8016578:	681b      	ldr	r3, [r3, #0]
 801657a:	68db      	ldr	r3, [r3, #12]
 801657c:	4798      	blx	r3

    /* Go through all the pending TimerEvents */
    while (1) {
        if (data->queue->head == NULL) {
 801657e:	9b01      	ldr	r3, [sp, #4]
 8016580:	685b      	ldr	r3, [r3, #4]
 8016582:	685b      	ldr	r3, [r3, #4]
 8016584:	2b00      	cmp	r3, #0
 8016586:	d104      	bne.n	8016592 <ticker_irq_handler+0x22>
            // There are no more TimerEvents left, so disable matches.
            data->interface->disable_interrupt();
 8016588:	9b01      	ldr	r3, [sp, #4]
 801658a:	681b      	ldr	r3, [r3, #0]
 801658c:	689b      	ldr	r3, [r3, #8]
 801658e:	4798      	blx	r3
            return;
 8016590:	e02f      	b.n	80165f2 <ticker_irq_handler+0x82>
        }

        if ((int)(data->queue->head->timestamp - data->interface->read()) <= 0) {
 8016592:	9b01      	ldr	r3, [sp, #4]
 8016594:	685b      	ldr	r3, [r3, #4]
 8016596:	685b      	ldr	r3, [r3, #4]
 8016598:	681c      	ldr	r4, [r3, #0]
 801659a:	9b01      	ldr	r3, [sp, #4]
 801659c:	681b      	ldr	r3, [r3, #0]
 801659e:	685b      	ldr	r3, [r3, #4]
 80165a0:	4798      	blx	r3
 80165a2:	4603      	mov	r3, r0
 80165a4:	1ae3      	subs	r3, r4, r3
 80165a6:	2b00      	cmp	r3, #0
 80165a8:	dc18      	bgt.n	80165dc <ticker_irq_handler+0x6c>
            // This event was in the past:
            //      point to the following one and execute its handler
            ticker_event_t *p = data->queue->head;
 80165aa:	9b01      	ldr	r3, [sp, #4]
 80165ac:	685b      	ldr	r3, [r3, #4]
 80165ae:	685b      	ldr	r3, [r3, #4]
 80165b0:	9303      	str	r3, [sp, #12]
            data->queue->head = data->queue->head->next;
 80165b2:	9b01      	ldr	r3, [sp, #4]
 80165b4:	685b      	ldr	r3, [r3, #4]
 80165b6:	9a01      	ldr	r2, [sp, #4]
 80165b8:	6852      	ldr	r2, [r2, #4]
 80165ba:	6852      	ldr	r2, [r2, #4]
 80165bc:	6892      	ldr	r2, [r2, #8]
 80165be:	605a      	str	r2, [r3, #4]
            if (data->queue->event_handler != NULL) {
 80165c0:	9b01      	ldr	r3, [sp, #4]
 80165c2:	685b      	ldr	r3, [r3, #4]
 80165c4:	681b      	ldr	r3, [r3, #0]
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d007      	beq.n	80165da <ticker_irq_handler+0x6a>
                (*data->queue->event_handler)(p->id); // NOTE: the handler can set new events
 80165ca:	9b01      	ldr	r3, [sp, #4]
 80165cc:	685b      	ldr	r3, [r3, #4]
 80165ce:	681b      	ldr	r3, [r3, #0]
 80165d0:	9a03      	ldr	r2, [sp, #12]
 80165d2:	6852      	ldr	r2, [r2, #4]
 80165d4:	4610      	mov	r0, r2
 80165d6:	4798      	blx	r3
 80165d8:	e00a      	b.n	80165f0 <ticker_irq_handler+0x80>
 80165da:	e009      	b.n	80165f0 <ticker_irq_handler+0x80>
            /* Note: We continue back to examining the head because calling the
             * event handler may have altered the chain of pending events. */
        } else {
            // This event and the following ones in the list are in the future:
            //      set it as next interrupt and return
            data->interface->set_interrupt(data->queue->head->timestamp);
 80165dc:	9b01      	ldr	r3, [sp, #4]
 80165de:	681b      	ldr	r3, [r3, #0]
 80165e0:	691b      	ldr	r3, [r3, #16]
 80165e2:	9a01      	ldr	r2, [sp, #4]
 80165e4:	6852      	ldr	r2, [r2, #4]
 80165e6:	6852      	ldr	r2, [r2, #4]
 80165e8:	6812      	ldr	r2, [r2, #0]
 80165ea:	4610      	mov	r0, r2
 80165ec:	4798      	blx	r3
            return;
 80165ee:	e000      	b.n	80165f2 <ticker_irq_handler+0x82>
        }
    }
 80165f0:	e7c5      	b.n	801657e <ticker_irq_handler+0xe>
}
 80165f2:	b004      	add	sp, #16
 80165f4:	bd10      	pop	{r4, pc}
 80165f6:	bf00      	nop

080165f8 <ticker_insert_event>:

void ticker_insert_event(const ticker_data_t *const data, ticker_event_t *obj, timestamp_t timestamp, uint32_t id) {
 80165f8:	b500      	push	{lr}
 80165fa:	b087      	sub	sp, #28
 80165fc:	9003      	str	r0, [sp, #12]
 80165fe:	9102      	str	r1, [sp, #8]
 8016600:	9201      	str	r2, [sp, #4]
 8016602:	9300      	str	r3, [sp, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8016604:	b672      	cpsid	i
    /* disable interrupts for the duration of the function */
    __disable_irq();

    // initialise our data
    obj->timestamp = timestamp;
 8016606:	9b02      	ldr	r3, [sp, #8]
 8016608:	9a01      	ldr	r2, [sp, #4]
 801660a:	601a      	str	r2, [r3, #0]
    obj->id = id;
 801660c:	9b02      	ldr	r3, [sp, #8]
 801660e:	9a00      	ldr	r2, [sp, #0]
 8016610:	605a      	str	r2, [r3, #4]

    /* Go through the list until we either reach the end, or find
       an element this should come before (which is possibly the
       head). */
    ticker_event_t *prev = NULL, *p = data->queue->head;
 8016612:	2300      	movs	r3, #0
 8016614:	9305      	str	r3, [sp, #20]
 8016616:	9b03      	ldr	r3, [sp, #12]
 8016618:	685b      	ldr	r3, [r3, #4]
 801661a:	685b      	ldr	r3, [r3, #4]
 801661c:	9304      	str	r3, [sp, #16]
    while (p != NULL) {
 801661e:	e00b      	b.n	8016638 <ticker_insert_event+0x40>
        /* check if we come before p */
        if ((int)(timestamp - p->timestamp) < 0) {
 8016620:	9b04      	ldr	r3, [sp, #16]
 8016622:	681b      	ldr	r3, [r3, #0]
 8016624:	9a01      	ldr	r2, [sp, #4]
 8016626:	1ad3      	subs	r3, r2, r3
 8016628:	2b00      	cmp	r3, #0
 801662a:	da00      	bge.n	801662e <ticker_insert_event+0x36>
            break;
 801662c:	e007      	b.n	801663e <ticker_insert_event+0x46>
        }
        /* go to the next element */
        prev = p;
 801662e:	9b04      	ldr	r3, [sp, #16]
 8016630:	9305      	str	r3, [sp, #20]
        p = p->next;
 8016632:	9b04      	ldr	r3, [sp, #16]
 8016634:	689b      	ldr	r3, [r3, #8]
 8016636:	9304      	str	r3, [sp, #16]

    /* Go through the list until we either reach the end, or find
       an element this should come before (which is possibly the
       head). */
    ticker_event_t *prev = NULL, *p = data->queue->head;
    while (p != NULL) {
 8016638:	9b04      	ldr	r3, [sp, #16]
 801663a:	2b00      	cmp	r3, #0
 801663c:	d1f0      	bne.n	8016620 <ticker_insert_event+0x28>
        /* go to the next element */
        prev = p;
        p = p->next;
    }
    /* if prev is NULL we're at the head */
    if (prev == NULL) {
 801663e:	9b05      	ldr	r3, [sp, #20]
 8016640:	2b00      	cmp	r3, #0
 8016642:	d109      	bne.n	8016658 <ticker_insert_event+0x60>
        data->queue->head = obj;
 8016644:	9b03      	ldr	r3, [sp, #12]
 8016646:	685b      	ldr	r3, [r3, #4]
 8016648:	9a02      	ldr	r2, [sp, #8]
 801664a:	605a      	str	r2, [r3, #4]
        data->interface->set_interrupt(timestamp);
 801664c:	9b03      	ldr	r3, [sp, #12]
 801664e:	681b      	ldr	r3, [r3, #0]
 8016650:	691b      	ldr	r3, [r3, #16]
 8016652:	9801      	ldr	r0, [sp, #4]
 8016654:	4798      	blx	r3
 8016656:	e002      	b.n	801665e <ticker_insert_event+0x66>
    } else {
        prev->next = obj;
 8016658:	9b05      	ldr	r3, [sp, #20]
 801665a:	9a02      	ldr	r2, [sp, #8]
 801665c:	609a      	str	r2, [r3, #8]
    }
    /* if we're at the end p will be NULL, which is correct */
    obj->next = p;
 801665e:	9b02      	ldr	r3, [sp, #8]
 8016660:	9a04      	ldr	r2, [sp, #16]
 8016662:	609a      	str	r2, [r3, #8]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8016664:	b662      	cpsie	i

    __enable_irq();
}
 8016666:	b007      	add	sp, #28
 8016668:	f85d fb04 	ldr.w	pc, [sp], #4

0801666c <ticker_remove_event>:

void ticker_remove_event(const ticker_data_t *const data, ticker_event_t *obj) {
 801666c:	b500      	push	{lr}
 801666e:	b085      	sub	sp, #20
 8016670:	9001      	str	r0, [sp, #4]
 8016672:	9100      	str	r1, [sp, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8016674:	b672      	cpsid	i
    __disable_irq();

    // remove this object from the list
    if (data->queue->head == obj) {
 8016676:	9b01      	ldr	r3, [sp, #4]
 8016678:	685b      	ldr	r3, [r3, #4]
 801667a:	685a      	ldr	r2, [r3, #4]
 801667c:	9b00      	ldr	r3, [sp, #0]
 801667e:	429a      	cmp	r2, r3
 8016680:	d118      	bne.n	80166b4 <ticker_remove_event+0x48>
        // first in the list, so just drop me
        data->queue->head = obj->next;
 8016682:	9b01      	ldr	r3, [sp, #4]
 8016684:	685b      	ldr	r3, [r3, #4]
 8016686:	9a00      	ldr	r2, [sp, #0]
 8016688:	6892      	ldr	r2, [r2, #8]
 801668a:	605a      	str	r2, [r3, #4]
        if (data->queue->head == NULL) {
 801668c:	9b01      	ldr	r3, [sp, #4]
 801668e:	685b      	ldr	r3, [r3, #4]
 8016690:	685b      	ldr	r3, [r3, #4]
 8016692:	2b00      	cmp	r3, #0
 8016694:	d104      	bne.n	80166a0 <ticker_remove_event+0x34>
            data->interface->disable_interrupt();
 8016696:	9b01      	ldr	r3, [sp, #4]
 8016698:	681b      	ldr	r3, [r3, #0]
 801669a:	689b      	ldr	r3, [r3, #8]
 801669c:	4798      	blx	r3
 801669e:	e01e      	b.n	80166de <ticker_remove_event+0x72>
        } else {
            data->interface->set_interrupt(data->queue->head->timestamp);
 80166a0:	9b01      	ldr	r3, [sp, #4]
 80166a2:	681b      	ldr	r3, [r3, #0]
 80166a4:	691b      	ldr	r3, [r3, #16]
 80166a6:	9a01      	ldr	r2, [sp, #4]
 80166a8:	6852      	ldr	r2, [r2, #4]
 80166aa:	6852      	ldr	r2, [r2, #4]
 80166ac:	6812      	ldr	r2, [r2, #0]
 80166ae:	4610      	mov	r0, r2
 80166b0:	4798      	blx	r3
 80166b2:	e014      	b.n	80166de <ticker_remove_event+0x72>
        }
    } else {
        // find the object before me, then drop me
        ticker_event_t* p = data->queue->head;
 80166b4:	9b01      	ldr	r3, [sp, #4]
 80166b6:	685b      	ldr	r3, [r3, #4]
 80166b8:	685b      	ldr	r3, [r3, #4]
 80166ba:	9303      	str	r3, [sp, #12]
        while (p != NULL) {
 80166bc:	e00c      	b.n	80166d8 <ticker_remove_event+0x6c>
            if (p->next == obj) {
 80166be:	9b03      	ldr	r3, [sp, #12]
 80166c0:	689a      	ldr	r2, [r3, #8]
 80166c2:	9b00      	ldr	r3, [sp, #0]
 80166c4:	429a      	cmp	r2, r3
 80166c6:	d104      	bne.n	80166d2 <ticker_remove_event+0x66>
                p->next = obj->next;
 80166c8:	9b00      	ldr	r3, [sp, #0]
 80166ca:	689a      	ldr	r2, [r3, #8]
 80166cc:	9b03      	ldr	r3, [sp, #12]
 80166ce:	609a      	str	r2, [r3, #8]
                break;
 80166d0:	e005      	b.n	80166de <ticker_remove_event+0x72>
            }
            p = p->next;
 80166d2:	9b03      	ldr	r3, [sp, #12]
 80166d4:	689b      	ldr	r3, [r3, #8]
 80166d6:	9303      	str	r3, [sp, #12]
            data->interface->set_interrupt(data->queue->head->timestamp);
        }
    } else {
        // find the object before me, then drop me
        ticker_event_t* p = data->queue->head;
        while (p != NULL) {
 80166d8:	9b03      	ldr	r3, [sp, #12]
 80166da:	2b00      	cmp	r3, #0
 80166dc:	d1ef      	bne.n	80166be <ticker_remove_event+0x52>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80166de:	b662      	cpsie	i
            p = p->next;
        }
    }

    __enable_irq();
}
 80166e0:	b005      	add	sp, #20
 80166e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80166e6:	bf00      	nop

080166e8 <get_us_ticker_data>:
    .queue = &events,
};

const ticker_data_t* get_us_ticker_data(void)
{
    return &us_data;
 80166e8:	4b01      	ldr	r3, [pc, #4]	; (80166f0 <get_us_ticker_data+0x8>)
}
 80166ea:	4618      	mov	r0, r3
 80166ec:	4770      	bx	lr
 80166ee:	bf00      	nop
 80166f0:	0801d098 	.word	0x0801d098

080166f4 <us_ticker_irq_handler>:

void us_ticker_irq_handler(void)
{
 80166f4:	b508      	push	{r3, lr}
    ticker_irq_handler(&us_data);
 80166f6:	4802      	ldr	r0, [pc, #8]	; (8016700 <us_ticker_irq_handler+0xc>)
 80166f8:	f7ff ff3a 	bl	8016570 <ticker_irq_handler>
}
 80166fc:	bd08      	pop	{r3, pc}
 80166fe:	bf00      	nop
 8016700:	0801d098 	.word	0x0801d098

08016704 <wait_ms>:

void wait(float s) {
    wait_us(s * 1000000.0f);
}

void wait_ms(int ms) {
 8016704:	b500      	push	{lr}
 8016706:	b083      	sub	sp, #12
 8016708:	9001      	str	r0, [sp, #4]
    wait_us(ms * 1000);
 801670a:	9b01      	ldr	r3, [sp, #4]
 801670c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8016710:	fb02 f303 	mul.w	r3, r2, r3
 8016714:	4618      	mov	r0, r3
 8016716:	f000 f803 	bl	8016720 <wait_us>
}
 801671a:	b003      	add	sp, #12
 801671c:	f85d fb04 	ldr.w	pc, [sp], #4

08016720 <wait_us>:

void wait_us(int us) {
 8016720:	b500      	push	{lr}
 8016722:	b085      	sub	sp, #20
 8016724:	9001      	str	r0, [sp, #4]
    uint32_t start = us_ticker_read();
 8016726:	f7ff fddd 	bl	80162e4 <us_ticker_read>
 801672a:	9003      	str	r0, [sp, #12]
    while ((us_ticker_read() - start) < (uint32_t)us);
 801672c:	bf00      	nop
 801672e:	f7ff fdd9 	bl	80162e4 <us_ticker_read>
 8016732:	4602      	mov	r2, r0
 8016734:	9b03      	ldr	r3, [sp, #12]
 8016736:	1ad2      	subs	r2, r2, r3
 8016738:	9b01      	ldr	r3, [sp, #4]
 801673a:	429a      	cmp	r2, r3
 801673c:	d3f7      	bcc.n	801672e <wait_us+0xe>
}
 801673e:	b005      	add	sp, #20
 8016740:	f85d fb04 	ldr.w	pc, [sp], #4

08016744 <abort>:
 8016744:	b508      	push	{r3, lr}
 8016746:	2006      	movs	r0, #6
 8016748:	f001 fb14 	bl	8017d74 <raise>
 801674c:	2001      	movs	r0, #1
 801674e:	f7fd ffe7 	bl	8014720 <_exit>

08016752 <__aeabi_memclr>:
 8016752:	2200      	movs	r2, #0
 8016754:	f000 b81f 	b.w	8016796 <__aeabi_memset>

08016758 <__aeabi_memcpy>:
 8016758:	f000 ba5b 	b.w	8016c12 <memcpy>

0801675c <__aeabi_memmove>:
 801675c:	4288      	cmp	r0, r1
 801675e:	b410      	push	{r4}
 8016760:	d90d      	bls.n	801677e <__aeabi_memmove+0x22>
 8016762:	188b      	adds	r3, r1, r2
 8016764:	4298      	cmp	r0, r3
 8016766:	d20a      	bcs.n	801677e <__aeabi_memmove+0x22>
 8016768:	1881      	adds	r1, r0, r2
 801676a:	b132      	cbz	r2, 801677a <__aeabi_memmove+0x1e>
 801676c:	1a9a      	subs	r2, r3, r2
 801676e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016772:	429a      	cmp	r2, r3
 8016774:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8016778:	d1f9      	bne.n	801676e <__aeabi_memmove+0x12>
 801677a:	bc10      	pop	{r4}
 801677c:	4770      	bx	lr
 801677e:	2a00      	cmp	r2, #0
 8016780:	d0fb      	beq.n	801677a <__aeabi_memmove+0x1e>
 8016782:	440a      	add	r2, r1
 8016784:	1e43      	subs	r3, r0, #1
 8016786:	f811 4b01 	ldrb.w	r4, [r1], #1
 801678a:	428a      	cmp	r2, r1
 801678c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016790:	d1f9      	bne.n	8016786 <__aeabi_memmove+0x2a>
 8016792:	bc10      	pop	{r4}
 8016794:	4770      	bx	lr

08016796 <__aeabi_memset>:
 8016796:	b470      	push	{r4, r5, r6}
 8016798:	0784      	lsls	r4, r0, #30
 801679a:	d046      	beq.n	801682a <__aeabi_memset+0x94>
 801679c:	1e4c      	subs	r4, r1, #1
 801679e:	2900      	cmp	r1, #0
 80167a0:	d041      	beq.n	8016826 <__aeabi_memset+0x90>
 80167a2:	b2d5      	uxtb	r5, r2
 80167a4:	4603      	mov	r3, r0
 80167a6:	e002      	b.n	80167ae <__aeabi_memset+0x18>
 80167a8:	1e61      	subs	r1, r4, #1
 80167aa:	b3e4      	cbz	r4, 8016826 <__aeabi_memset+0x90>
 80167ac:	460c      	mov	r4, r1
 80167ae:	f803 5b01 	strb.w	r5, [r3], #1
 80167b2:	0799      	lsls	r1, r3, #30
 80167b4:	d1f8      	bne.n	80167a8 <__aeabi_memset+0x12>
 80167b6:	2c03      	cmp	r4, #3
 80167b8:	d92e      	bls.n	8016818 <__aeabi_memset+0x82>
 80167ba:	b2d5      	uxtb	r5, r2
 80167bc:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80167c0:	2c0f      	cmp	r4, #15
 80167c2:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80167c6:	d919      	bls.n	80167fc <__aeabi_memset+0x66>
 80167c8:	4626      	mov	r6, r4
 80167ca:	f103 0110 	add.w	r1, r3, #16
 80167ce:	3e10      	subs	r6, #16
 80167d0:	2e0f      	cmp	r6, #15
 80167d2:	f841 5c10 	str.w	r5, [r1, #-16]
 80167d6:	f841 5c0c 	str.w	r5, [r1, #-12]
 80167da:	f841 5c08 	str.w	r5, [r1, #-8]
 80167de:	f841 5c04 	str.w	r5, [r1, #-4]
 80167e2:	f101 0110 	add.w	r1, r1, #16
 80167e6:	d8f2      	bhi.n	80167ce <__aeabi_memset+0x38>
 80167e8:	f1a4 0110 	sub.w	r1, r4, #16
 80167ec:	f021 010f 	bic.w	r1, r1, #15
 80167f0:	f004 040f 	and.w	r4, r4, #15
 80167f4:	3110      	adds	r1, #16
 80167f6:	2c03      	cmp	r4, #3
 80167f8:	440b      	add	r3, r1
 80167fa:	d90d      	bls.n	8016818 <__aeabi_memset+0x82>
 80167fc:	461e      	mov	r6, r3
 80167fe:	4621      	mov	r1, r4
 8016800:	3904      	subs	r1, #4
 8016802:	2903      	cmp	r1, #3
 8016804:	f846 5b04 	str.w	r5, [r6], #4
 8016808:	d8fa      	bhi.n	8016800 <__aeabi_memset+0x6a>
 801680a:	1f21      	subs	r1, r4, #4
 801680c:	f021 0103 	bic.w	r1, r1, #3
 8016810:	3104      	adds	r1, #4
 8016812:	440b      	add	r3, r1
 8016814:	f004 0403 	and.w	r4, r4, #3
 8016818:	b12c      	cbz	r4, 8016826 <__aeabi_memset+0x90>
 801681a:	b2d2      	uxtb	r2, r2
 801681c:	441c      	add	r4, r3
 801681e:	f803 2b01 	strb.w	r2, [r3], #1
 8016822:	42a3      	cmp	r3, r4
 8016824:	d1fb      	bne.n	801681e <__aeabi_memset+0x88>
 8016826:	bc70      	pop	{r4, r5, r6}
 8016828:	4770      	bx	lr
 801682a:	460c      	mov	r4, r1
 801682c:	4603      	mov	r3, r0
 801682e:	e7c2      	b.n	80167b6 <__aeabi_memset+0x20>

08016830 <calloc>:
 8016830:	460a      	mov	r2, r1
 8016832:	4903      	ldr	r1, [pc, #12]	; (8016840 <calloc+0x10>)
 8016834:	4603      	mov	r3, r0
 8016836:	6808      	ldr	r0, [r1, #0]
 8016838:	4619      	mov	r1, r3
 801683a:	f000 b9fd 	b.w	8016c38 <_calloc_r>
 801683e:	bf00      	nop
 8016840:	20001768 	.word	0x20001768

08016844 <__errno>:
 8016844:	4b01      	ldr	r3, [pc, #4]	; (801684c <__errno+0x8>)
 8016846:	6818      	ldr	r0, [r3, #0]
 8016848:	4770      	bx	lr
 801684a:	bf00      	nop
 801684c:	20001768 	.word	0x20001768

08016850 <exit>:
 8016850:	b508      	push	{r3, lr}
 8016852:	4b07      	ldr	r3, [pc, #28]	; (8016870 <exit+0x20>)
 8016854:	4604      	mov	r4, r0
 8016856:	b113      	cbz	r3, 801685e <exit+0xe>
 8016858:	2100      	movs	r1, #0
 801685a:	f3af 8000 	nop.w
 801685e:	4b05      	ldr	r3, [pc, #20]	; (8016874 <exit+0x24>)
 8016860:	6818      	ldr	r0, [r3, #0]
 8016862:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016864:	b103      	cbz	r3, 8016868 <exit+0x18>
 8016866:	4798      	blx	r3
 8016868:	4620      	mov	r0, r4
 801686a:	f7fd ff59 	bl	8014720 <_exit>
 801686e:	bf00      	nop
 8016870:	00000000 	.word	0x00000000
 8016874:	0801d170 	.word	0x0801d170

08016878 <__sflush_r>:
 8016878:	898a      	ldrh	r2, [r1, #12]
 801687a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801687e:	4605      	mov	r5, r0
 8016880:	0710      	lsls	r0, r2, #28
 8016882:	460c      	mov	r4, r1
 8016884:	d457      	bmi.n	8016936 <__sflush_r+0xbe>
 8016886:	684b      	ldr	r3, [r1, #4]
 8016888:	2b00      	cmp	r3, #0
 801688a:	dc02      	bgt.n	8016892 <__sflush_r+0x1a>
 801688c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801688e:	2b00      	cmp	r3, #0
 8016890:	dd18      	ble.n	80168c4 <__sflush_r+0x4c>
 8016892:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016894:	b1b6      	cbz	r6, 80168c4 <__sflush_r+0x4c>
 8016896:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 801689a:	2300      	movs	r3, #0
 801689c:	b292      	uxth	r2, r2
 801689e:	682f      	ldr	r7, [r5, #0]
 80168a0:	602b      	str	r3, [r5, #0]
 80168a2:	b10a      	cbz	r2, 80168a8 <__sflush_r+0x30>
 80168a4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80168a6:	e010      	b.n	80168ca <__sflush_r+0x52>
 80168a8:	6a21      	ldr	r1, [r4, #32]
 80168aa:	4628      	mov	r0, r5
 80168ac:	2301      	movs	r3, #1
 80168ae:	47b0      	blx	r6
 80168b0:	1c41      	adds	r1, r0, #1
 80168b2:	4602      	mov	r2, r0
 80168b4:	d109      	bne.n	80168ca <__sflush_r+0x52>
 80168b6:	682b      	ldr	r3, [r5, #0]
 80168b8:	b13b      	cbz	r3, 80168ca <__sflush_r+0x52>
 80168ba:	2b1d      	cmp	r3, #29
 80168bc:	d001      	beq.n	80168c2 <__sflush_r+0x4a>
 80168be:	2b16      	cmp	r3, #22
 80168c0:	d147      	bne.n	8016952 <__sflush_r+0xda>
 80168c2:	602f      	str	r7, [r5, #0]
 80168c4:	2000      	movs	r0, #0
 80168c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80168ca:	89a3      	ldrh	r3, [r4, #12]
 80168cc:	075b      	lsls	r3, r3, #29
 80168ce:	d505      	bpl.n	80168dc <__sflush_r+0x64>
 80168d0:	6863      	ldr	r3, [r4, #4]
 80168d2:	1ad2      	subs	r2, r2, r3
 80168d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80168d6:	b10b      	cbz	r3, 80168dc <__sflush_r+0x64>
 80168d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80168da:	1ad2      	subs	r2, r2, r3
 80168dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80168de:	6a21      	ldr	r1, [r4, #32]
 80168e0:	2300      	movs	r3, #0
 80168e2:	4628      	mov	r0, r5
 80168e4:	47b0      	blx	r6
 80168e6:	1c46      	adds	r6, r0, #1
 80168e8:	89a3      	ldrh	r3, [r4, #12]
 80168ea:	d105      	bne.n	80168f8 <__sflush_r+0x80>
 80168ec:	682a      	ldr	r2, [r5, #0]
 80168ee:	b11a      	cbz	r2, 80168f8 <__sflush_r+0x80>
 80168f0:	2a1d      	cmp	r2, #29
 80168f2:	d001      	beq.n	80168f8 <__sflush_r+0x80>
 80168f4:	2a16      	cmp	r2, #22
 80168f6:	d119      	bne.n	801692c <__sflush_r+0xb4>
 80168f8:	2200      	movs	r2, #0
 80168fa:	6062      	str	r2, [r4, #4]
 80168fc:	04d9      	lsls	r1, r3, #19
 80168fe:	6922      	ldr	r2, [r4, #16]
 8016900:	6022      	str	r2, [r4, #0]
 8016902:	d504      	bpl.n	801690e <__sflush_r+0x96>
 8016904:	1c42      	adds	r2, r0, #1
 8016906:	d101      	bne.n	801690c <__sflush_r+0x94>
 8016908:	682b      	ldr	r3, [r5, #0]
 801690a:	b903      	cbnz	r3, 801690e <__sflush_r+0x96>
 801690c:	6560      	str	r0, [r4, #84]	; 0x54
 801690e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016910:	602f      	str	r7, [r5, #0]
 8016912:	2900      	cmp	r1, #0
 8016914:	d0d6      	beq.n	80168c4 <__sflush_r+0x4c>
 8016916:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801691a:	4299      	cmp	r1, r3
 801691c:	d002      	beq.n	8016924 <__sflush_r+0xac>
 801691e:	4628      	mov	r0, r5
 8016920:	f000 f998 	bl	8016c54 <_free_r>
 8016924:	2000      	movs	r0, #0
 8016926:	6360      	str	r0, [r4, #52]	; 0x34
 8016928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801692c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016930:	81a3      	strh	r3, [r4, #12]
 8016932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016936:	690f      	ldr	r7, [r1, #16]
 8016938:	2f00      	cmp	r7, #0
 801693a:	d0c3      	beq.n	80168c4 <__sflush_r+0x4c>
 801693c:	0793      	lsls	r3, r2, #30
 801693e:	680e      	ldr	r6, [r1, #0]
 8016940:	bf08      	it	eq
 8016942:	694b      	ldreq	r3, [r1, #20]
 8016944:	600f      	str	r7, [r1, #0]
 8016946:	bf18      	it	ne
 8016948:	2300      	movne	r3, #0
 801694a:	ebc7 0806 	rsb	r8, r7, r6
 801694e:	608b      	str	r3, [r1, #8]
 8016950:	e012      	b.n	8016978 <__sflush_r+0x100>
 8016952:	89a3      	ldrh	r3, [r4, #12]
 8016954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016958:	81a3      	strh	r3, [r4, #12]
 801695a:	f04f 30ff 	mov.w	r0, #4294967295
 801695e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016962:	4628      	mov	r0, r5
 8016964:	6a21      	ldr	r1, [r4, #32]
 8016966:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016968:	463a      	mov	r2, r7
 801696a:	4643      	mov	r3, r8
 801696c:	47b0      	blx	r6
 801696e:	2800      	cmp	r0, #0
 8016970:	ddef      	ble.n	8016952 <__sflush_r+0xda>
 8016972:	4407      	add	r7, r0
 8016974:	ebc0 0808 	rsb	r8, r0, r8
 8016978:	f1b8 0f00 	cmp.w	r8, #0
 801697c:	dcf1      	bgt.n	8016962 <__sflush_r+0xea>
 801697e:	e7a1      	b.n	80168c4 <__sflush_r+0x4c>

08016980 <_fflush_r>:
 8016980:	b538      	push	{r3, r4, r5, lr}
 8016982:	690b      	ldr	r3, [r1, #16]
 8016984:	4605      	mov	r5, r0
 8016986:	460c      	mov	r4, r1
 8016988:	b1db      	cbz	r3, 80169c2 <_fflush_r+0x42>
 801698a:	b118      	cbz	r0, 8016994 <_fflush_r+0x14>
 801698c:	6983      	ldr	r3, [r0, #24]
 801698e:	b90b      	cbnz	r3, 8016994 <_fflush_r+0x14>
 8016990:	f000 f872 	bl	8016a78 <__sinit>
 8016994:	4b0c      	ldr	r3, [pc, #48]	; (80169c8 <_fflush_r+0x48>)
 8016996:	429c      	cmp	r4, r3
 8016998:	d101      	bne.n	801699e <_fflush_r+0x1e>
 801699a:	686c      	ldr	r4, [r5, #4]
 801699c:	e008      	b.n	80169b0 <_fflush_r+0x30>
 801699e:	4b0b      	ldr	r3, [pc, #44]	; (80169cc <_fflush_r+0x4c>)
 80169a0:	429c      	cmp	r4, r3
 80169a2:	d101      	bne.n	80169a8 <_fflush_r+0x28>
 80169a4:	68ac      	ldr	r4, [r5, #8]
 80169a6:	e003      	b.n	80169b0 <_fflush_r+0x30>
 80169a8:	4b09      	ldr	r3, [pc, #36]	; (80169d0 <_fflush_r+0x50>)
 80169aa:	429c      	cmp	r4, r3
 80169ac:	bf08      	it	eq
 80169ae:	68ec      	ldreq	r4, [r5, #12]
 80169b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80169b4:	b12b      	cbz	r3, 80169c2 <_fflush_r+0x42>
 80169b6:	4628      	mov	r0, r5
 80169b8:	4621      	mov	r1, r4
 80169ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80169be:	f7ff bf5b 	b.w	8016878 <__sflush_r>
 80169c2:	2000      	movs	r0, #0
 80169c4:	bd38      	pop	{r3, r4, r5, pc}
 80169c6:	bf00      	nop
 80169c8:	0801d10c 	.word	0x0801d10c
 80169cc:	0801d12c 	.word	0x0801d12c
 80169d0:	0801d14c 	.word	0x0801d14c

080169d4 <fflush>:
 80169d4:	4601      	mov	r1, r0
 80169d6:	b920      	cbnz	r0, 80169e2 <fflush+0xe>
 80169d8:	4b04      	ldr	r3, [pc, #16]	; (80169ec <fflush+0x18>)
 80169da:	4905      	ldr	r1, [pc, #20]	; (80169f0 <fflush+0x1c>)
 80169dc:	6818      	ldr	r0, [r3, #0]
 80169de:	f000 b8b5 	b.w	8016b4c <_fwalk_reent>
 80169e2:	4b04      	ldr	r3, [pc, #16]	; (80169f4 <fflush+0x20>)
 80169e4:	6818      	ldr	r0, [r3, #0]
 80169e6:	f7ff bfcb 	b.w	8016980 <_fflush_r>
 80169ea:	bf00      	nop
 80169ec:	0801d170 	.word	0x0801d170
 80169f0:	08016981 	.word	0x08016981
 80169f4:	20001768 	.word	0x20001768

080169f8 <_cleanup_r>:
 80169f8:	4901      	ldr	r1, [pc, #4]	; (8016a00 <_cleanup_r+0x8>)
 80169fa:	f000 b8a7 	b.w	8016b4c <_fwalk_reent>
 80169fe:	bf00      	nop
 8016a00:	08016981 	.word	0x08016981

08016a04 <std.isra.0>:
 8016a04:	2300      	movs	r3, #0
 8016a06:	b510      	push	{r4, lr}
 8016a08:	4604      	mov	r4, r0
 8016a0a:	6003      	str	r3, [r0, #0]
 8016a0c:	6043      	str	r3, [r0, #4]
 8016a0e:	6083      	str	r3, [r0, #8]
 8016a10:	8181      	strh	r1, [r0, #12]
 8016a12:	6643      	str	r3, [r0, #100]	; 0x64
 8016a14:	81c2      	strh	r2, [r0, #14]
 8016a16:	6103      	str	r3, [r0, #16]
 8016a18:	6143      	str	r3, [r0, #20]
 8016a1a:	6183      	str	r3, [r0, #24]
 8016a1c:	4619      	mov	r1, r3
 8016a1e:	305c      	adds	r0, #92	; 0x5c
 8016a20:	2208      	movs	r2, #8
 8016a22:	f000 f901 	bl	8016c28 <memset>
 8016a26:	4b05      	ldr	r3, [pc, #20]	; (8016a3c <std.isra.0+0x38>)
 8016a28:	6263      	str	r3, [r4, #36]	; 0x24
 8016a2a:	4b05      	ldr	r3, [pc, #20]	; (8016a40 <std.isra.0+0x3c>)
 8016a2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8016a2e:	4b05      	ldr	r3, [pc, #20]	; (8016a44 <std.isra.0+0x40>)
 8016a30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016a32:	4b05      	ldr	r3, [pc, #20]	; (8016a48 <std.isra.0+0x44>)
 8016a34:	6224      	str	r4, [r4, #32]
 8016a36:	6323      	str	r3, [r4, #48]	; 0x30
 8016a38:	bd10      	pop	{r4, pc}
 8016a3a:	bf00      	nop
 8016a3c:	08017e59 	.word	0x08017e59
 8016a40:	08017e7b 	.word	0x08017e7b
 8016a44:	08017eb3 	.word	0x08017eb3
 8016a48:	08017ed7 	.word	0x08017ed7

08016a4c <__sfmoreglue>:
 8016a4c:	b570      	push	{r4, r5, r6, lr}
 8016a4e:	2368      	movs	r3, #104	; 0x68
 8016a50:	1e4d      	subs	r5, r1, #1
 8016a52:	435d      	muls	r5, r3
 8016a54:	460e      	mov	r6, r1
 8016a56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016a5a:	f000 f93f 	bl	8016cdc <_malloc_r>
 8016a5e:	4604      	mov	r4, r0
 8016a60:	b140      	cbz	r0, 8016a74 <__sfmoreglue+0x28>
 8016a62:	2100      	movs	r1, #0
 8016a64:	e880 0042 	stmia.w	r0, {r1, r6}
 8016a68:	300c      	adds	r0, #12
 8016a6a:	60a0      	str	r0, [r4, #8]
 8016a6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016a70:	f000 f8da 	bl	8016c28 <memset>
 8016a74:	4620      	mov	r0, r4
 8016a76:	bd70      	pop	{r4, r5, r6, pc}

08016a78 <__sinit>:
 8016a78:	6983      	ldr	r3, [r0, #24]
 8016a7a:	b510      	push	{r4, lr}
 8016a7c:	4604      	mov	r4, r0
 8016a7e:	bb33      	cbnz	r3, 8016ace <__sinit+0x56>
 8016a80:	6483      	str	r3, [r0, #72]	; 0x48
 8016a82:	64c3      	str	r3, [r0, #76]	; 0x4c
 8016a84:	6503      	str	r3, [r0, #80]	; 0x50
 8016a86:	4b12      	ldr	r3, [pc, #72]	; (8016ad0 <__sinit+0x58>)
 8016a88:	4a12      	ldr	r2, [pc, #72]	; (8016ad4 <__sinit+0x5c>)
 8016a8a:	681b      	ldr	r3, [r3, #0]
 8016a8c:	6282      	str	r2, [r0, #40]	; 0x28
 8016a8e:	4298      	cmp	r0, r3
 8016a90:	bf04      	itt	eq
 8016a92:	2301      	moveq	r3, #1
 8016a94:	6183      	streq	r3, [r0, #24]
 8016a96:	f000 f81f 	bl	8016ad8 <__sfp>
 8016a9a:	6060      	str	r0, [r4, #4]
 8016a9c:	4620      	mov	r0, r4
 8016a9e:	f000 f81b 	bl	8016ad8 <__sfp>
 8016aa2:	60a0      	str	r0, [r4, #8]
 8016aa4:	4620      	mov	r0, r4
 8016aa6:	f000 f817 	bl	8016ad8 <__sfp>
 8016aaa:	2104      	movs	r1, #4
 8016aac:	60e0      	str	r0, [r4, #12]
 8016aae:	2200      	movs	r2, #0
 8016ab0:	6860      	ldr	r0, [r4, #4]
 8016ab2:	f7ff ffa7 	bl	8016a04 <std.isra.0>
 8016ab6:	68a0      	ldr	r0, [r4, #8]
 8016ab8:	2109      	movs	r1, #9
 8016aba:	2201      	movs	r2, #1
 8016abc:	f7ff ffa2 	bl	8016a04 <std.isra.0>
 8016ac0:	68e0      	ldr	r0, [r4, #12]
 8016ac2:	2112      	movs	r1, #18
 8016ac4:	2202      	movs	r2, #2
 8016ac6:	f7ff ff9d 	bl	8016a04 <std.isra.0>
 8016aca:	2301      	movs	r3, #1
 8016acc:	61a3      	str	r3, [r4, #24]
 8016ace:	bd10      	pop	{r4, pc}
 8016ad0:	0801d170 	.word	0x0801d170
 8016ad4:	080169f9 	.word	0x080169f9

08016ad8 <__sfp>:
 8016ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ada:	4b1b      	ldr	r3, [pc, #108]	; (8016b48 <__sfp+0x70>)
 8016adc:	681e      	ldr	r6, [r3, #0]
 8016ade:	69b3      	ldr	r3, [r6, #24]
 8016ae0:	4607      	mov	r7, r0
 8016ae2:	b913      	cbnz	r3, 8016aea <__sfp+0x12>
 8016ae4:	4630      	mov	r0, r6
 8016ae6:	f7ff ffc7 	bl	8016a78 <__sinit>
 8016aea:	3648      	adds	r6, #72	; 0x48
 8016aec:	68b4      	ldr	r4, [r6, #8]
 8016aee:	6873      	ldr	r3, [r6, #4]
 8016af0:	3b01      	subs	r3, #1
 8016af2:	d404      	bmi.n	8016afe <__sfp+0x26>
 8016af4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016af8:	b175      	cbz	r5, 8016b18 <__sfp+0x40>
 8016afa:	3468      	adds	r4, #104	; 0x68
 8016afc:	e7f8      	b.n	8016af0 <__sfp+0x18>
 8016afe:	6833      	ldr	r3, [r6, #0]
 8016b00:	b92b      	cbnz	r3, 8016b0e <__sfp+0x36>
 8016b02:	4638      	mov	r0, r7
 8016b04:	2104      	movs	r1, #4
 8016b06:	f7ff ffa1 	bl	8016a4c <__sfmoreglue>
 8016b0a:	6030      	str	r0, [r6, #0]
 8016b0c:	b108      	cbz	r0, 8016b12 <__sfp+0x3a>
 8016b0e:	6836      	ldr	r6, [r6, #0]
 8016b10:	e7ec      	b.n	8016aec <__sfp+0x14>
 8016b12:	230c      	movs	r3, #12
 8016b14:	603b      	str	r3, [r7, #0]
 8016b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016b18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016b1c:	81e3      	strh	r3, [r4, #14]
 8016b1e:	2301      	movs	r3, #1
 8016b20:	81a3      	strh	r3, [r4, #12]
 8016b22:	6665      	str	r5, [r4, #100]	; 0x64
 8016b24:	6025      	str	r5, [r4, #0]
 8016b26:	60a5      	str	r5, [r4, #8]
 8016b28:	6065      	str	r5, [r4, #4]
 8016b2a:	6125      	str	r5, [r4, #16]
 8016b2c:	6165      	str	r5, [r4, #20]
 8016b2e:	61a5      	str	r5, [r4, #24]
 8016b30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016b34:	4629      	mov	r1, r5
 8016b36:	2208      	movs	r2, #8
 8016b38:	f000 f876 	bl	8016c28 <memset>
 8016b3c:	6365      	str	r5, [r4, #52]	; 0x34
 8016b3e:	63a5      	str	r5, [r4, #56]	; 0x38
 8016b40:	64a5      	str	r5, [r4, #72]	; 0x48
 8016b42:	64e5      	str	r5, [r4, #76]	; 0x4c
 8016b44:	4620      	mov	r0, r4
 8016b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016b48:	0801d170 	.word	0x0801d170

08016b4c <_fwalk_reent>:
 8016b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016b50:	4680      	mov	r8, r0
 8016b52:	4689      	mov	r9, r1
 8016b54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016b58:	2600      	movs	r6, #0
 8016b5a:	b194      	cbz	r4, 8016b82 <_fwalk_reent+0x36>
 8016b5c:	68a5      	ldr	r5, [r4, #8]
 8016b5e:	6867      	ldr	r7, [r4, #4]
 8016b60:	3f01      	subs	r7, #1
 8016b62:	d40c      	bmi.n	8016b7e <_fwalk_reent+0x32>
 8016b64:	89ab      	ldrh	r3, [r5, #12]
 8016b66:	2b01      	cmp	r3, #1
 8016b68:	d907      	bls.n	8016b7a <_fwalk_reent+0x2e>
 8016b6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016b6e:	3301      	adds	r3, #1
 8016b70:	d003      	beq.n	8016b7a <_fwalk_reent+0x2e>
 8016b72:	4640      	mov	r0, r8
 8016b74:	4629      	mov	r1, r5
 8016b76:	47c8      	blx	r9
 8016b78:	4306      	orrs	r6, r0
 8016b7a:	3568      	adds	r5, #104	; 0x68
 8016b7c:	e7f0      	b.n	8016b60 <_fwalk_reent+0x14>
 8016b7e:	6824      	ldr	r4, [r4, #0]
 8016b80:	e7eb      	b.n	8016b5a <_fwalk_reent+0xe>
 8016b82:	4630      	mov	r0, r6
 8016b84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08016b88 <__libc_init_array>:
 8016b88:	b570      	push	{r4, r5, r6, lr}
 8016b8a:	4b0e      	ldr	r3, [pc, #56]	; (8016bc4 <__libc_init_array+0x3c>)
 8016b8c:	4c0e      	ldr	r4, [pc, #56]	; (8016bc8 <__libc_init_array+0x40>)
 8016b8e:	1ae4      	subs	r4, r4, r3
 8016b90:	10a4      	asrs	r4, r4, #2
 8016b92:	2500      	movs	r5, #0
 8016b94:	461e      	mov	r6, r3
 8016b96:	42a5      	cmp	r5, r4
 8016b98:	d004      	beq.n	8016ba4 <__libc_init_array+0x1c>
 8016b9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016b9e:	4798      	blx	r3
 8016ba0:	3501      	adds	r5, #1
 8016ba2:	e7f8      	b.n	8016b96 <__libc_init_array+0xe>
 8016ba4:	f006 f8b2 	bl	801cd0c <_init>
 8016ba8:	4c08      	ldr	r4, [pc, #32]	; (8016bcc <__libc_init_array+0x44>)
 8016baa:	4b09      	ldr	r3, [pc, #36]	; (8016bd0 <__libc_init_array+0x48>)
 8016bac:	1ae4      	subs	r4, r4, r3
 8016bae:	10a4      	asrs	r4, r4, #2
 8016bb0:	2500      	movs	r5, #0
 8016bb2:	461e      	mov	r6, r3
 8016bb4:	42a5      	cmp	r5, r4
 8016bb6:	d004      	beq.n	8016bc2 <__libc_init_array+0x3a>
 8016bb8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016bbc:	4798      	blx	r3
 8016bbe:	3501      	adds	r5, #1
 8016bc0:	e7f8      	b.n	8016bb4 <__libc_init_array+0x2c>
 8016bc2:	bd70      	pop	{r4, r5, r6, pc}
 8016bc4:	200017a8 	.word	0x200017a8
 8016bc8:	200017a8 	.word	0x200017a8
 8016bcc:	200017ac 	.word	0x200017ac
 8016bd0:	200017a8 	.word	0x200017a8

08016bd4 <malloc>:
 8016bd4:	4b02      	ldr	r3, [pc, #8]	; (8016be0 <malloc+0xc>)
 8016bd6:	4601      	mov	r1, r0
 8016bd8:	6818      	ldr	r0, [r3, #0]
 8016bda:	f000 b87f 	b.w	8016cdc <_malloc_r>
 8016bde:	bf00      	nop
 8016be0:	20001768 	.word	0x20001768

08016be4 <free>:
 8016be4:	4b02      	ldr	r3, [pc, #8]	; (8016bf0 <free+0xc>)
 8016be6:	4601      	mov	r1, r0
 8016be8:	6818      	ldr	r0, [r3, #0]
 8016bea:	f000 b833 	b.w	8016c54 <_free_r>
 8016bee:	bf00      	nop
 8016bf0:	20001768 	.word	0x20001768

08016bf4 <memchr>:
 8016bf4:	b510      	push	{r4, lr}
 8016bf6:	b2c9      	uxtb	r1, r1
 8016bf8:	4402      	add	r2, r0
 8016bfa:	4290      	cmp	r0, r2
 8016bfc:	4603      	mov	r3, r0
 8016bfe:	d006      	beq.n	8016c0e <memchr+0x1a>
 8016c00:	781c      	ldrb	r4, [r3, #0]
 8016c02:	428c      	cmp	r4, r1
 8016c04:	f100 0001 	add.w	r0, r0, #1
 8016c08:	d1f7      	bne.n	8016bfa <memchr+0x6>
 8016c0a:	4618      	mov	r0, r3
 8016c0c:	bd10      	pop	{r4, pc}
 8016c0e:	2000      	movs	r0, #0
 8016c10:	bd10      	pop	{r4, pc}

08016c12 <memcpy>:
 8016c12:	b510      	push	{r4, lr}
 8016c14:	1e43      	subs	r3, r0, #1
 8016c16:	440a      	add	r2, r1
 8016c18:	4291      	cmp	r1, r2
 8016c1a:	d004      	beq.n	8016c26 <memcpy+0x14>
 8016c1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016c20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016c24:	e7f8      	b.n	8016c18 <memcpy+0x6>
 8016c26:	bd10      	pop	{r4, pc}

08016c28 <memset>:
 8016c28:	4402      	add	r2, r0
 8016c2a:	4603      	mov	r3, r0
 8016c2c:	4293      	cmp	r3, r2
 8016c2e:	d002      	beq.n	8016c36 <memset+0xe>
 8016c30:	f803 1b01 	strb.w	r1, [r3], #1
 8016c34:	e7fa      	b.n	8016c2c <memset+0x4>
 8016c36:	4770      	bx	lr

08016c38 <_calloc_r>:
 8016c38:	b538      	push	{r3, r4, r5, lr}
 8016c3a:	fb02 f401 	mul.w	r4, r2, r1
 8016c3e:	4621      	mov	r1, r4
 8016c40:	f000 f84c 	bl	8016cdc <_malloc_r>
 8016c44:	4605      	mov	r5, r0
 8016c46:	b118      	cbz	r0, 8016c50 <_calloc_r+0x18>
 8016c48:	2100      	movs	r1, #0
 8016c4a:	4622      	mov	r2, r4
 8016c4c:	f7ff ffec 	bl	8016c28 <memset>
 8016c50:	4628      	mov	r0, r5
 8016c52:	bd38      	pop	{r3, r4, r5, pc}

08016c54 <_free_r>:
 8016c54:	b530      	push	{r4, r5, lr}
 8016c56:	2900      	cmp	r1, #0
 8016c58:	d03d      	beq.n	8016cd6 <_free_r+0x82>
 8016c5a:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8016c5e:	1f0b      	subs	r3, r1, #4
 8016c60:	491d      	ldr	r1, [pc, #116]	; (8016cd8 <_free_r+0x84>)
 8016c62:	2a00      	cmp	r2, #0
 8016c64:	bfb8      	it	lt
 8016c66:	189b      	addlt	r3, r3, r2
 8016c68:	680a      	ldr	r2, [r1, #0]
 8016c6a:	460c      	mov	r4, r1
 8016c6c:	b912      	cbnz	r2, 8016c74 <_free_r+0x20>
 8016c6e:	605a      	str	r2, [r3, #4]
 8016c70:	600b      	str	r3, [r1, #0]
 8016c72:	bd30      	pop	{r4, r5, pc}
 8016c74:	4293      	cmp	r3, r2
 8016c76:	d20d      	bcs.n	8016c94 <_free_r+0x40>
 8016c78:	6819      	ldr	r1, [r3, #0]
 8016c7a:	1858      	adds	r0, r3, r1
 8016c7c:	4290      	cmp	r0, r2
 8016c7e:	bf01      	itttt	eq
 8016c80:	585a      	ldreq	r2, [r3, r1]
 8016c82:	1852      	addeq	r2, r2, r1
 8016c84:	601a      	streq	r2, [r3, #0]
 8016c86:	6842      	ldreq	r2, [r0, #4]
 8016c88:	605a      	str	r2, [r3, #4]
 8016c8a:	6023      	str	r3, [r4, #0]
 8016c8c:	bd30      	pop	{r4, r5, pc}
 8016c8e:	4299      	cmp	r1, r3
 8016c90:	d803      	bhi.n	8016c9a <_free_r+0x46>
 8016c92:	460a      	mov	r2, r1
 8016c94:	6851      	ldr	r1, [r2, #4]
 8016c96:	2900      	cmp	r1, #0
 8016c98:	d1f9      	bne.n	8016c8e <_free_r+0x3a>
 8016c9a:	6814      	ldr	r4, [r2, #0]
 8016c9c:	1915      	adds	r5, r2, r4
 8016c9e:	429d      	cmp	r5, r3
 8016ca0:	d10a      	bne.n	8016cb8 <_free_r+0x64>
 8016ca2:	681b      	ldr	r3, [r3, #0]
 8016ca4:	4423      	add	r3, r4
 8016ca6:	18d0      	adds	r0, r2, r3
 8016ca8:	4288      	cmp	r0, r1
 8016caa:	6013      	str	r3, [r2, #0]
 8016cac:	d113      	bne.n	8016cd6 <_free_r+0x82>
 8016cae:	6808      	ldr	r0, [r1, #0]
 8016cb0:	4403      	add	r3, r0
 8016cb2:	6013      	str	r3, [r2, #0]
 8016cb4:	684b      	ldr	r3, [r1, #4]
 8016cb6:	e00d      	b.n	8016cd4 <_free_r+0x80>
 8016cb8:	d902      	bls.n	8016cc0 <_free_r+0x6c>
 8016cba:	230c      	movs	r3, #12
 8016cbc:	6003      	str	r3, [r0, #0]
 8016cbe:	bd30      	pop	{r4, r5, pc}
 8016cc0:	681c      	ldr	r4, [r3, #0]
 8016cc2:	1918      	adds	r0, r3, r4
 8016cc4:	4288      	cmp	r0, r1
 8016cc6:	bf04      	itt	eq
 8016cc8:	6808      	ldreq	r0, [r1, #0]
 8016cca:	6849      	ldreq	r1, [r1, #4]
 8016ccc:	6059      	str	r1, [r3, #4]
 8016cce:	bf04      	itt	eq
 8016cd0:	1900      	addeq	r0, r0, r4
 8016cd2:	6018      	streq	r0, [r3, #0]
 8016cd4:	6053      	str	r3, [r2, #4]
 8016cd6:	bd30      	pop	{r4, r5, pc}
 8016cd8:	20001b4c 	.word	0x20001b4c

08016cdc <_malloc_r>:
 8016cdc:	b570      	push	{r4, r5, r6, lr}
 8016cde:	1ccc      	adds	r4, r1, #3
 8016ce0:	f024 0403 	bic.w	r4, r4, #3
 8016ce4:	3408      	adds	r4, #8
 8016ce6:	2c0c      	cmp	r4, #12
 8016ce8:	bf38      	it	cc
 8016cea:	240c      	movcc	r4, #12
 8016cec:	2c00      	cmp	r4, #0
 8016cee:	4606      	mov	r6, r0
 8016cf0:	da03      	bge.n	8016cfa <_malloc_r+0x1e>
 8016cf2:	230c      	movs	r3, #12
 8016cf4:	6033      	str	r3, [r6, #0]
 8016cf6:	2000      	movs	r0, #0
 8016cf8:	bd70      	pop	{r4, r5, r6, pc}
 8016cfa:	428c      	cmp	r4, r1
 8016cfc:	d3f9      	bcc.n	8016cf2 <_malloc_r+0x16>
 8016cfe:	4a20      	ldr	r2, [pc, #128]	; (8016d80 <_malloc_r+0xa4>)
 8016d00:	6813      	ldr	r3, [r2, #0]
 8016d02:	4610      	mov	r0, r2
 8016d04:	4619      	mov	r1, r3
 8016d06:	b1a1      	cbz	r1, 8016d32 <_malloc_r+0x56>
 8016d08:	680a      	ldr	r2, [r1, #0]
 8016d0a:	1b12      	subs	r2, r2, r4
 8016d0c:	d40e      	bmi.n	8016d2c <_malloc_r+0x50>
 8016d0e:	2a0b      	cmp	r2, #11
 8016d10:	d903      	bls.n	8016d1a <_malloc_r+0x3e>
 8016d12:	600a      	str	r2, [r1, #0]
 8016d14:	188b      	adds	r3, r1, r2
 8016d16:	508c      	str	r4, [r1, r2]
 8016d18:	e01f      	b.n	8016d5a <_malloc_r+0x7e>
 8016d1a:	428b      	cmp	r3, r1
 8016d1c:	bf0d      	iteet	eq
 8016d1e:	685a      	ldreq	r2, [r3, #4]
 8016d20:	684a      	ldrne	r2, [r1, #4]
 8016d22:	605a      	strne	r2, [r3, #4]
 8016d24:	6002      	streq	r2, [r0, #0]
 8016d26:	bf18      	it	ne
 8016d28:	460b      	movne	r3, r1
 8016d2a:	e016      	b.n	8016d5a <_malloc_r+0x7e>
 8016d2c:	460b      	mov	r3, r1
 8016d2e:	6849      	ldr	r1, [r1, #4]
 8016d30:	e7e9      	b.n	8016d06 <_malloc_r+0x2a>
 8016d32:	4d14      	ldr	r5, [pc, #80]	; (8016d84 <_malloc_r+0xa8>)
 8016d34:	682b      	ldr	r3, [r5, #0]
 8016d36:	b91b      	cbnz	r3, 8016d40 <_malloc_r+0x64>
 8016d38:	4630      	mov	r0, r6
 8016d3a:	f000 ffdf 	bl	8017cfc <_sbrk_r>
 8016d3e:	6028      	str	r0, [r5, #0]
 8016d40:	4630      	mov	r0, r6
 8016d42:	4621      	mov	r1, r4
 8016d44:	f000 ffda 	bl	8017cfc <_sbrk_r>
 8016d48:	1c42      	adds	r2, r0, #1
 8016d4a:	4603      	mov	r3, r0
 8016d4c:	d0d1      	beq.n	8016cf2 <_malloc_r+0x16>
 8016d4e:	1cc5      	adds	r5, r0, #3
 8016d50:	f025 0503 	bic.w	r5, r5, #3
 8016d54:	4285      	cmp	r5, r0
 8016d56:	d10a      	bne.n	8016d6e <_malloc_r+0x92>
 8016d58:	601c      	str	r4, [r3, #0]
 8016d5a:	f103 000b 	add.w	r0, r3, #11
 8016d5e:	1d1a      	adds	r2, r3, #4
 8016d60:	f020 0007 	bic.w	r0, r0, #7
 8016d64:	1a82      	subs	r2, r0, r2
 8016d66:	d00a      	beq.n	8016d7e <_malloc_r+0xa2>
 8016d68:	4251      	negs	r1, r2
 8016d6a:	5099      	str	r1, [r3, r2]
 8016d6c:	bd70      	pop	{r4, r5, r6, pc}
 8016d6e:	4630      	mov	r0, r6
 8016d70:	1ae9      	subs	r1, r5, r3
 8016d72:	f000 ffc3 	bl	8017cfc <_sbrk_r>
 8016d76:	3001      	adds	r0, #1
 8016d78:	d0bb      	beq.n	8016cf2 <_malloc_r+0x16>
 8016d7a:	462b      	mov	r3, r5
 8016d7c:	e7ec      	b.n	8016d58 <_malloc_r+0x7c>
 8016d7e:	bd70      	pop	{r4, r5, r6, pc}
 8016d80:	20001b4c 	.word	0x20001b4c
 8016d84:	20001b48 	.word	0x20001b48

08016d88 <__sfputc_r>:
 8016d88:	6893      	ldr	r3, [r2, #8]
 8016d8a:	3b01      	subs	r3, #1
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	b510      	push	{r4, lr}
 8016d90:	6093      	str	r3, [r2, #8]
 8016d92:	da09      	bge.n	8016da8 <__sfputc_r+0x20>
 8016d94:	6994      	ldr	r4, [r2, #24]
 8016d96:	42a3      	cmp	r3, r4
 8016d98:	db02      	blt.n	8016da0 <__sfputc_r+0x18>
 8016d9a:	b2cb      	uxtb	r3, r1
 8016d9c:	2b0a      	cmp	r3, #10
 8016d9e:	d103      	bne.n	8016da8 <__sfputc_r+0x20>
 8016da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016da4:	f001 bf8c 	b.w	8018cc0 <__swbuf_r>
 8016da8:	6813      	ldr	r3, [r2, #0]
 8016daa:	1c58      	adds	r0, r3, #1
 8016dac:	6010      	str	r0, [r2, #0]
 8016dae:	7019      	strb	r1, [r3, #0]
 8016db0:	b2c8      	uxtb	r0, r1
 8016db2:	bd10      	pop	{r4, pc}

08016db4 <__sfputs_r>:
 8016db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016db6:	4606      	mov	r6, r0
 8016db8:	460f      	mov	r7, r1
 8016dba:	4614      	mov	r4, r2
 8016dbc:	18d5      	adds	r5, r2, r3
 8016dbe:	42ac      	cmp	r4, r5
 8016dc0:	d008      	beq.n	8016dd4 <__sfputs_r+0x20>
 8016dc2:	4630      	mov	r0, r6
 8016dc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016dc8:	463a      	mov	r2, r7
 8016dca:	f7ff ffdd 	bl	8016d88 <__sfputc_r>
 8016dce:	1c43      	adds	r3, r0, #1
 8016dd0:	d1f5      	bne.n	8016dbe <__sfputs_r+0xa>
 8016dd2:	e000      	b.n	8016dd6 <__sfputs_r+0x22>
 8016dd4:	2000      	movs	r0, #0
 8016dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016dd8 <_vfiprintf_r>:
 8016dd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016ddc:	b09d      	sub	sp, #116	; 0x74
 8016dde:	460d      	mov	r5, r1
 8016de0:	4690      	mov	r8, r2
 8016de2:	9303      	str	r3, [sp, #12]
 8016de4:	4606      	mov	r6, r0
 8016de6:	b118      	cbz	r0, 8016df0 <_vfiprintf_r+0x18>
 8016de8:	6983      	ldr	r3, [r0, #24]
 8016dea:	b90b      	cbnz	r3, 8016df0 <_vfiprintf_r+0x18>
 8016dec:	f7ff fe44 	bl	8016a78 <__sinit>
 8016df0:	4b75      	ldr	r3, [pc, #468]	; (8016fc8 <_vfiprintf_r+0x1f0>)
 8016df2:	429d      	cmp	r5, r3
 8016df4:	d101      	bne.n	8016dfa <_vfiprintf_r+0x22>
 8016df6:	6875      	ldr	r5, [r6, #4]
 8016df8:	e008      	b.n	8016e0c <_vfiprintf_r+0x34>
 8016dfa:	4b74      	ldr	r3, [pc, #464]	; (8016fcc <_vfiprintf_r+0x1f4>)
 8016dfc:	429d      	cmp	r5, r3
 8016dfe:	d101      	bne.n	8016e04 <_vfiprintf_r+0x2c>
 8016e00:	68b5      	ldr	r5, [r6, #8]
 8016e02:	e003      	b.n	8016e0c <_vfiprintf_r+0x34>
 8016e04:	4b72      	ldr	r3, [pc, #456]	; (8016fd0 <_vfiprintf_r+0x1f8>)
 8016e06:	429d      	cmp	r5, r3
 8016e08:	bf08      	it	eq
 8016e0a:	68f5      	ldreq	r5, [r6, #12]
 8016e0c:	89ab      	ldrh	r3, [r5, #12]
 8016e0e:	071c      	lsls	r4, r3, #28
 8016e10:	d50a      	bpl.n	8016e28 <_vfiprintf_r+0x50>
 8016e12:	692b      	ldr	r3, [r5, #16]
 8016e14:	b143      	cbz	r3, 8016e28 <_vfiprintf_r+0x50>
 8016e16:	2300      	movs	r3, #0
 8016e18:	9309      	str	r3, [sp, #36]	; 0x24
 8016e1a:	2320      	movs	r3, #32
 8016e1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016e20:	2330      	movs	r3, #48	; 0x30
 8016e22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016e26:	e041      	b.n	8016eac <_vfiprintf_r+0xd4>
 8016e28:	4630      	mov	r0, r6
 8016e2a:	4629      	mov	r1, r5
 8016e2c:	f001 ffae 	bl	8018d8c <__swsetup_r>
 8016e30:	2800      	cmp	r0, #0
 8016e32:	d0f0      	beq.n	8016e16 <_vfiprintf_r+0x3e>
 8016e34:	f04f 30ff 	mov.w	r0, #4294967295
 8016e38:	e0c2      	b.n	8016fc0 <_vfiprintf_r+0x1e8>
 8016e3a:	9a03      	ldr	r2, [sp, #12]
 8016e3c:	1d11      	adds	r1, r2, #4
 8016e3e:	6812      	ldr	r2, [r2, #0]
 8016e40:	9103      	str	r1, [sp, #12]
 8016e42:	2a00      	cmp	r2, #0
 8016e44:	bfbb      	ittet	lt
 8016e46:	4252      	neglt	r2, r2
 8016e48:	f043 0302 	orrlt.w	r3, r3, #2
 8016e4c:	9207      	strge	r2, [sp, #28]
 8016e4e:	9207      	strlt	r2, [sp, #28]
 8016e50:	bfb8      	it	lt
 8016e52:	9304      	strlt	r3, [sp, #16]
 8016e54:	3401      	adds	r4, #1
 8016e56:	7823      	ldrb	r3, [r4, #0]
 8016e58:	2b2e      	cmp	r3, #46	; 0x2e
 8016e5a:	d07b      	beq.n	8016f54 <_vfiprintf_r+0x17c>
 8016e5c:	f8df 8180 	ldr.w	r8, [pc, #384]	; 8016fe0 <_vfiprintf_r+0x208>
 8016e60:	7821      	ldrb	r1, [r4, #0]
 8016e62:	4640      	mov	r0, r8
 8016e64:	2203      	movs	r2, #3
 8016e66:	f7ff fec5 	bl	8016bf4 <memchr>
 8016e6a:	b138      	cbz	r0, 8016e7c <_vfiprintf_r+0xa4>
 8016e6c:	9a04      	ldr	r2, [sp, #16]
 8016e6e:	ebc8 0000 	rsb	r0, r8, r0
 8016e72:	2340      	movs	r3, #64	; 0x40
 8016e74:	4083      	lsls	r3, r0
 8016e76:	4313      	orrs	r3, r2
 8016e78:	9304      	str	r3, [sp, #16]
 8016e7a:	3401      	adds	r4, #1
 8016e7c:	7821      	ldrb	r1, [r4, #0]
 8016e7e:	4855      	ldr	r0, [pc, #340]	; (8016fd4 <_vfiprintf_r+0x1fc>)
 8016e80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016e84:	2206      	movs	r2, #6
 8016e86:	f104 0801 	add.w	r8, r4, #1
 8016e8a:	f7ff feb3 	bl	8016bf4 <memchr>
 8016e8e:	2800      	cmp	r0, #0
 8016e90:	f000 8085 	beq.w	8016f9e <_vfiprintf_r+0x1c6>
 8016e94:	4b50      	ldr	r3, [pc, #320]	; (8016fd8 <_vfiprintf_r+0x200>)
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	d178      	bne.n	8016f8c <_vfiprintf_r+0x1b4>
 8016e9a:	9b03      	ldr	r3, [sp, #12]
 8016e9c:	3307      	adds	r3, #7
 8016e9e:	f023 0307 	bic.w	r3, r3, #7
 8016ea2:	3308      	adds	r3, #8
 8016ea4:	9303      	str	r3, [sp, #12]
 8016ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ea8:	443b      	add	r3, r7
 8016eaa:	9309      	str	r3, [sp, #36]	; 0x24
 8016eac:	4643      	mov	r3, r8
 8016eae:	461c      	mov	r4, r3
 8016eb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016eb4:	b91a      	cbnz	r2, 8016ebe <_vfiprintf_r+0xe6>
 8016eb6:	ebb4 0908 	subs.w	r9, r4, r8
 8016eba:	d00e      	beq.n	8016eda <_vfiprintf_r+0x102>
 8016ebc:	e002      	b.n	8016ec4 <_vfiprintf_r+0xec>
 8016ebe:	2a25      	cmp	r2, #37	; 0x25
 8016ec0:	d1f5      	bne.n	8016eae <_vfiprintf_r+0xd6>
 8016ec2:	e7f8      	b.n	8016eb6 <_vfiprintf_r+0xde>
 8016ec4:	4630      	mov	r0, r6
 8016ec6:	4629      	mov	r1, r5
 8016ec8:	4642      	mov	r2, r8
 8016eca:	464b      	mov	r3, r9
 8016ecc:	f7ff ff72 	bl	8016db4 <__sfputs_r>
 8016ed0:	3001      	adds	r0, #1
 8016ed2:	d070      	beq.n	8016fb6 <_vfiprintf_r+0x1de>
 8016ed4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ed6:	444b      	add	r3, r9
 8016ed8:	9309      	str	r3, [sp, #36]	; 0x24
 8016eda:	7823      	ldrb	r3, [r4, #0]
 8016edc:	2b00      	cmp	r3, #0
 8016ede:	d06a      	beq.n	8016fb6 <_vfiprintf_r+0x1de>
 8016ee0:	2300      	movs	r3, #0
 8016ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8016ee6:	9304      	str	r3, [sp, #16]
 8016ee8:	9307      	str	r3, [sp, #28]
 8016eea:	9205      	str	r2, [sp, #20]
 8016eec:	9306      	str	r3, [sp, #24]
 8016eee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016ef2:	931a      	str	r3, [sp, #104]	; 0x68
 8016ef4:	f104 0801 	add.w	r8, r4, #1
 8016ef8:	4644      	mov	r4, r8
 8016efa:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 8016fe4 <_vfiprintf_r+0x20c>
 8016efe:	7821      	ldrb	r1, [r4, #0]
 8016f00:	4648      	mov	r0, r9
 8016f02:	2205      	movs	r2, #5
 8016f04:	f7ff fe76 	bl	8016bf4 <memchr>
 8016f08:	f108 0801 	add.w	r8, r8, #1
 8016f0c:	9b04      	ldr	r3, [sp, #16]
 8016f0e:	b130      	cbz	r0, 8016f1e <_vfiprintf_r+0x146>
 8016f10:	ebc9 0000 	rsb	r0, r9, r0
 8016f14:	2201      	movs	r2, #1
 8016f16:	4082      	lsls	r2, r0
 8016f18:	4313      	orrs	r3, r2
 8016f1a:	9304      	str	r3, [sp, #16]
 8016f1c:	e7ec      	b.n	8016ef8 <_vfiprintf_r+0x120>
 8016f1e:	06d8      	lsls	r0, r3, #27
 8016f20:	bf44      	itt	mi
 8016f22:	2220      	movmi	r2, #32
 8016f24:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016f28:	0719      	lsls	r1, r3, #28
 8016f2a:	bf44      	itt	mi
 8016f2c:	222b      	movmi	r2, #43	; 0x2b
 8016f2e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016f32:	7822      	ldrb	r2, [r4, #0]
 8016f34:	2a2a      	cmp	r2, #42	; 0x2a
 8016f36:	d080      	beq.n	8016e3a <_vfiprintf_r+0x62>
 8016f38:	9907      	ldr	r1, [sp, #28]
 8016f3a:	4623      	mov	r3, r4
 8016f3c:	461c      	mov	r4, r3
 8016f3e:	3301      	adds	r3, #1
 8016f40:	7822      	ldrb	r2, [r4, #0]
 8016f42:	3a30      	subs	r2, #48	; 0x30
 8016f44:	2a09      	cmp	r2, #9
 8016f46:	d803      	bhi.n	8016f50 <_vfiprintf_r+0x178>
 8016f48:	200a      	movs	r0, #10
 8016f4a:	fb00 2101 	mla	r1, r0, r1, r2
 8016f4e:	e7f5      	b.n	8016f3c <_vfiprintf_r+0x164>
 8016f50:	9107      	str	r1, [sp, #28]
 8016f52:	e780      	b.n	8016e56 <_vfiprintf_r+0x7e>
 8016f54:	7863      	ldrb	r3, [r4, #1]
 8016f56:	2b2a      	cmp	r3, #42	; 0x2a
 8016f58:	d10a      	bne.n	8016f70 <_vfiprintf_r+0x198>
 8016f5a:	9b03      	ldr	r3, [sp, #12]
 8016f5c:	1d1a      	adds	r2, r3, #4
 8016f5e:	681b      	ldr	r3, [r3, #0]
 8016f60:	9203      	str	r2, [sp, #12]
 8016f62:	2b00      	cmp	r3, #0
 8016f64:	bfb8      	it	lt
 8016f66:	f04f 33ff 	movlt.w	r3, #4294967295
 8016f6a:	3402      	adds	r4, #2
 8016f6c:	9305      	str	r3, [sp, #20]
 8016f6e:	e775      	b.n	8016e5c <_vfiprintf_r+0x84>
 8016f70:	1c61      	adds	r1, r4, #1
 8016f72:	2200      	movs	r2, #0
 8016f74:	460c      	mov	r4, r1
 8016f76:	3101      	adds	r1, #1
 8016f78:	7823      	ldrb	r3, [r4, #0]
 8016f7a:	3b30      	subs	r3, #48	; 0x30
 8016f7c:	2b09      	cmp	r3, #9
 8016f7e:	d803      	bhi.n	8016f88 <_vfiprintf_r+0x1b0>
 8016f80:	200a      	movs	r0, #10
 8016f82:	fb00 3202 	mla	r2, r0, r2, r3
 8016f86:	e7f5      	b.n	8016f74 <_vfiprintf_r+0x19c>
 8016f88:	9205      	str	r2, [sp, #20]
 8016f8a:	e767      	b.n	8016e5c <_vfiprintf_r+0x84>
 8016f8c:	ab03      	add	r3, sp, #12
 8016f8e:	9300      	str	r3, [sp, #0]
 8016f90:	4630      	mov	r0, r6
 8016f92:	a904      	add	r1, sp, #16
 8016f94:	462a      	mov	r2, r5
 8016f96:	4b11      	ldr	r3, [pc, #68]	; (8016fdc <_vfiprintf_r+0x204>)
 8016f98:	f000 f8c4 	bl	8017124 <_printf_float>
 8016f9c:	e007      	b.n	8016fae <_vfiprintf_r+0x1d6>
 8016f9e:	ab03      	add	r3, sp, #12
 8016fa0:	9300      	str	r3, [sp, #0]
 8016fa2:	4630      	mov	r0, r6
 8016fa4:	a904      	add	r1, sp, #16
 8016fa6:	462a      	mov	r2, r5
 8016fa8:	4b0c      	ldr	r3, [pc, #48]	; (8016fdc <_vfiprintf_r+0x204>)
 8016faa:	f000 fb77 	bl	801769c <_printf_i>
 8016fae:	1c42      	adds	r2, r0, #1
 8016fb0:	4607      	mov	r7, r0
 8016fb2:	f47f af78 	bne.w	8016ea6 <_vfiprintf_r+0xce>
 8016fb6:	89ab      	ldrh	r3, [r5, #12]
 8016fb8:	065b      	lsls	r3, r3, #25
 8016fba:	f53f af3b 	bmi.w	8016e34 <_vfiprintf_r+0x5c>
 8016fbe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016fc0:	b01d      	add	sp, #116	; 0x74
 8016fc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016fc6:	bf00      	nop
 8016fc8:	0801d10c 	.word	0x0801d10c
 8016fcc:	0801d12c 	.word	0x0801d12c
 8016fd0:	0801d14c 	.word	0x0801d14c
 8016fd4:	0801d17e 	.word	0x0801d17e
 8016fd8:	08017125 	.word	0x08017125
 8016fdc:	08016db5 	.word	0x08016db5
 8016fe0:	0801d17a 	.word	0x0801d17a
 8016fe4:	0801d174 	.word	0x0801d174

08016fe8 <vfiprintf>:
 8016fe8:	b530      	push	{r4, r5, lr}
 8016fea:	4613      	mov	r3, r2
 8016fec:	4a04      	ldr	r2, [pc, #16]	; (8017000 <vfiprintf+0x18>)
 8016fee:	4605      	mov	r5, r0
 8016ff0:	460c      	mov	r4, r1
 8016ff2:	6810      	ldr	r0, [r2, #0]
 8016ff4:	4629      	mov	r1, r5
 8016ff6:	4622      	mov	r2, r4
 8016ff8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016ffc:	f7ff beec 	b.w	8016dd8 <_vfiprintf_r>
 8017000:	20001768 	.word	0x20001768

08017004 <__cvt>:
 8017004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017008:	b088      	sub	sp, #32
 801700a:	2b00      	cmp	r3, #0
 801700c:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801700e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8017010:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8017012:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8017016:	461d      	mov	r5, r3
 8017018:	bfb8      	it	lt
 801701a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801701e:	f027 0720 	bic.w	r7, r7, #32
 8017022:	bfb6      	itet	lt
 8017024:	461d      	movlt	r5, r3
 8017026:	2300      	movge	r3, #0
 8017028:	232d      	movlt	r3, #45	; 0x2d
 801702a:	4614      	mov	r4, r2
 801702c:	bfb8      	it	lt
 801702e:	4614      	movlt	r4, r2
 8017030:	2f46      	cmp	r7, #70	; 0x46
 8017032:	700b      	strb	r3, [r1, #0]
 8017034:	d003      	beq.n	801703e <__cvt+0x3a>
 8017036:	2f45      	cmp	r7, #69	; 0x45
 8017038:	d103      	bne.n	8017042 <__cvt+0x3e>
 801703a:	3601      	adds	r6, #1
 801703c:	e001      	b.n	8017042 <__cvt+0x3e>
 801703e:	2303      	movs	r3, #3
 8017040:	e000      	b.n	8017044 <__cvt+0x40>
 8017042:	2302      	movs	r3, #2
 8017044:	e88d 0448 	stmia.w	sp, {r3, r6, sl}
 8017048:	ab06      	add	r3, sp, #24
 801704a:	9303      	str	r3, [sp, #12]
 801704c:	ab07      	add	r3, sp, #28
 801704e:	9304      	str	r3, [sp, #16]
 8017050:	4622      	mov	r2, r4
 8017052:	462b      	mov	r3, r5
 8017054:	f001 ffa4 	bl	8018fa0 <_dtoa_r>
 8017058:	2f47      	cmp	r7, #71	; 0x47
 801705a:	4680      	mov	r8, r0
 801705c:	d102      	bne.n	8017064 <__cvt+0x60>
 801705e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017060:	07db      	lsls	r3, r3, #31
 8017062:	d526      	bpl.n	80170b2 <__cvt+0xae>
 8017064:	2f46      	cmp	r7, #70	; 0x46
 8017066:	eb08 0906 	add.w	r9, r8, r6
 801706a:	d111      	bne.n	8017090 <__cvt+0x8c>
 801706c:	f898 3000 	ldrb.w	r3, [r8]
 8017070:	2b30      	cmp	r3, #48	; 0x30
 8017072:	d10a      	bne.n	801708a <__cvt+0x86>
 8017074:	4620      	mov	r0, r4
 8017076:	4629      	mov	r1, r5
 8017078:	2200      	movs	r2, #0
 801707a:	2300      	movs	r3, #0
 801707c:	f004 faa6 	bl	801b5cc <__aeabi_dcmpeq>
 8017080:	b918      	cbnz	r0, 801708a <__cvt+0x86>
 8017082:	f1c6 0601 	rsb	r6, r6, #1
 8017086:	f8ca 6000 	str.w	r6, [sl]
 801708a:	f8da 3000 	ldr.w	r3, [sl]
 801708e:	4499      	add	r9, r3
 8017090:	4620      	mov	r0, r4
 8017092:	4629      	mov	r1, r5
 8017094:	2200      	movs	r2, #0
 8017096:	2300      	movs	r3, #0
 8017098:	f004 fa98 	bl	801b5cc <__aeabi_dcmpeq>
 801709c:	b108      	cbz	r0, 80170a2 <__cvt+0x9e>
 801709e:	f8cd 901c 	str.w	r9, [sp, #28]
 80170a2:	9b07      	ldr	r3, [sp, #28]
 80170a4:	454b      	cmp	r3, r9
 80170a6:	d204      	bcs.n	80170b2 <__cvt+0xae>
 80170a8:	1c5a      	adds	r2, r3, #1
 80170aa:	9207      	str	r2, [sp, #28]
 80170ac:	2230      	movs	r2, #48	; 0x30
 80170ae:	701a      	strb	r2, [r3, #0]
 80170b0:	e7f7      	b.n	80170a2 <__cvt+0x9e>
 80170b2:	9b07      	ldr	r3, [sp, #28]
 80170b4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80170b6:	ebc8 0303 	rsb	r3, r8, r3
 80170ba:	4640      	mov	r0, r8
 80170bc:	6013      	str	r3, [r2, #0]
 80170be:	b008      	add	sp, #32
 80170c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080170c4 <__exponent>:
 80170c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80170c6:	4603      	mov	r3, r0
 80170c8:	2900      	cmp	r1, #0
 80170ca:	bfb8      	it	lt
 80170cc:	4249      	neglt	r1, r1
 80170ce:	f803 2b02 	strb.w	r2, [r3], #2
 80170d2:	bfb4      	ite	lt
 80170d4:	222d      	movlt	r2, #45	; 0x2d
 80170d6:	222b      	movge	r2, #43	; 0x2b
 80170d8:	2909      	cmp	r1, #9
 80170da:	7042      	strb	r2, [r0, #1]
 80170dc:	dd19      	ble.n	8017112 <__exponent+0x4e>
 80170de:	f10d 0407 	add.w	r4, sp, #7
 80170e2:	4626      	mov	r6, r4
 80170e4:	220a      	movs	r2, #10
 80170e6:	fb91 f5f2 	sdiv	r5, r1, r2
 80170ea:	fb02 1115 	mls	r1, r2, r5, r1
 80170ee:	3130      	adds	r1, #48	; 0x30
 80170f0:	2d09      	cmp	r5, #9
 80170f2:	f804 1d01 	strb.w	r1, [r4, #-1]!
 80170f6:	4629      	mov	r1, r5
 80170f8:	dcf4      	bgt.n	80170e4 <__exponent+0x20>
 80170fa:	3130      	adds	r1, #48	; 0x30
 80170fc:	1e65      	subs	r5, r4, #1
 80170fe:	f804 1c01 	strb.w	r1, [r4, #-1]
 8017102:	42b5      	cmp	r5, r6
 8017104:	461a      	mov	r2, r3
 8017106:	d20a      	bcs.n	801711e <__exponent+0x5a>
 8017108:	f815 2b01 	ldrb.w	r2, [r5], #1
 801710c:	f803 2b01 	strb.w	r2, [r3], #1
 8017110:	e7f7      	b.n	8017102 <__exponent+0x3e>
 8017112:	2430      	movs	r4, #48	; 0x30
 8017114:	461a      	mov	r2, r3
 8017116:	4421      	add	r1, r4
 8017118:	f802 4b02 	strb.w	r4, [r2], #2
 801711c:	7059      	strb	r1, [r3, #1]
 801711e:	1a10      	subs	r0, r2, r0
 8017120:	b002      	add	sp, #8
 8017122:	bd70      	pop	{r4, r5, r6, pc}

08017124 <_printf_float>:
 8017124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017128:	b091      	sub	sp, #68	; 0x44
 801712a:	468b      	mov	fp, r1
 801712c:	4615      	mov	r5, r2
 801712e:	461e      	mov	r6, r3
 8017130:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8017132:	4604      	mov	r4, r0
 8017134:	f003 f804 	bl	801a140 <_localeconv_r>
 8017138:	f8d0 a000 	ldr.w	sl, [r0]
 801713c:	4650      	mov	r0, sl
 801713e:	f000 fece 	bl	8017ede <strlen>
 8017142:	2300      	movs	r3, #0
 8017144:	930e      	str	r3, [sp, #56]	; 0x38
 8017146:	683b      	ldr	r3, [r7, #0]
 8017148:	9009      	str	r0, [sp, #36]	; 0x24
 801714a:	3307      	adds	r3, #7
 801714c:	f023 0307 	bic.w	r3, r3, #7
 8017150:	f103 0208 	add.w	r2, r3, #8
 8017154:	f89b 8018 	ldrb.w	r8, [fp, #24]
 8017158:	603a      	str	r2, [r7, #0]
 801715a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801715e:	e9cb 2312 	strd	r2, r3, [fp, #72]	; 0x48
 8017162:	e9db 0112 	ldrd	r0, r1, [fp, #72]	; 0x48
 8017166:	f000 fd9f 	bl	8017ca8 <__fpclassifyd>
 801716a:	2801      	cmp	r0, #1
 801716c:	e9db 0112 	ldrd	r0, r1, [fp, #72]	; 0x48
 8017170:	d119      	bne.n	80171a6 <_printf_float+0x82>
 8017172:	2200      	movs	r2, #0
 8017174:	2300      	movs	r3, #0
 8017176:	f004 fa33 	bl	801b5e0 <__aeabi_dcmplt>
 801717a:	b110      	cbz	r0, 8017182 <_printf_float+0x5e>
 801717c:	232d      	movs	r3, #45	; 0x2d
 801717e:	f88b 3043 	strb.w	r3, [fp, #67]	; 0x43
 8017182:	4ba0      	ldr	r3, [pc, #640]	; (8017404 <_printf_float+0x2e0>)
 8017184:	4fa0      	ldr	r7, [pc, #640]	; (8017408 <_printf_float+0x2e4>)
 8017186:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801718a:	bf88      	it	hi
 801718c:	461f      	movhi	r7, r3
 801718e:	2303      	movs	r3, #3
 8017190:	f8cb 3010 	str.w	r3, [fp, #16]
 8017194:	f8db 3000 	ldr.w	r3, [fp]
 8017198:	f023 0304 	bic.w	r3, r3, #4
 801719c:	f8cb 3000 	str.w	r3, [fp]
 80171a0:	f04f 0900 	mov.w	r9, #0
 80171a4:	e0a1      	b.n	80172ea <_printf_float+0x1c6>
 80171a6:	f000 fd7f 	bl	8017ca8 <__fpclassifyd>
 80171aa:	f8db 3000 	ldr.w	r3, [fp]
 80171ae:	b948      	cbnz	r0, 80171c4 <_printf_float+0xa0>
 80171b0:	4a96      	ldr	r2, [pc, #600]	; (801740c <_printf_float+0x2e8>)
 80171b2:	4f97      	ldr	r7, [pc, #604]	; (8017410 <_printf_float+0x2ec>)
 80171b4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80171b8:	bf88      	it	hi
 80171ba:	4617      	movhi	r7, r2
 80171bc:	2203      	movs	r2, #3
 80171be:	f8cb 2010 	str.w	r2, [fp, #16]
 80171c2:	e7e9      	b.n	8017198 <_printf_float+0x74>
 80171c4:	f8db 2004 	ldr.w	r2, [fp, #4]
 80171c8:	ed9b 7b12 	vldr	d7, [fp, #72]	; 0x48
 80171cc:	1c57      	adds	r7, r2, #1
 80171ce:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80171d2:	d101      	bne.n	80171d8 <_printf_float+0xb4>
 80171d4:	2206      	movs	r2, #6
 80171d6:	e009      	b.n	80171ec <_printf_float+0xc8>
 80171d8:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80171dc:	d002      	beq.n	80171e4 <_printf_float+0xc0>
 80171de:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80171e2:	d105      	bne.n	80171f0 <_printf_float+0xcc>
 80171e4:	2a00      	cmp	r2, #0
 80171e6:	f040 81c7 	bne.w	8017578 <_printf_float+0x454>
 80171ea:	2201      	movs	r2, #1
 80171ec:	f8cb 2004 	str.w	r2, [fp, #4]
 80171f0:	f8db 2004 	ldr.w	r2, [fp, #4]
 80171f4:	f8cd 8010 	str.w	r8, [sp, #16]
 80171f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80171fc:	e88d 000c 	stmia.w	sp, {r2, r3}
 8017200:	f8cb 3000 	str.w	r3, [fp]
 8017204:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8017208:	9302      	str	r3, [sp, #8]
 801720a:	ab0d      	add	r3, sp, #52	; 0x34
 801720c:	9303      	str	r3, [sp, #12]
 801720e:	ab0e      	add	r3, sp, #56	; 0x38
 8017210:	9305      	str	r3, [sp, #20]
 8017212:	2300      	movs	r3, #0
 8017214:	9306      	str	r3, [sp, #24]
 8017216:	4620      	mov	r0, r4
 8017218:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801721c:	f7ff fef2 	bl	8017004 <__cvt>
 8017220:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8017224:	2b47      	cmp	r3, #71	; 0x47
 8017226:	4607      	mov	r7, r0
 8017228:	d10a      	bne.n	8017240 <_printf_float+0x11c>
 801722a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801722c:	1cd8      	adds	r0, r3, #3
 801722e:	db03      	blt.n	8017238 <_printf_float+0x114>
 8017230:	f8db 2004 	ldr.w	r2, [fp, #4]
 8017234:	4293      	cmp	r3, r2
 8017236:	dd37      	ble.n	80172a8 <_printf_float+0x184>
 8017238:	f1a8 0802 	sub.w	r8, r8, #2
 801723c:	fa5f f888 	uxtb.w	r8, r8
 8017240:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8017244:	990d      	ldr	r1, [sp, #52]	; 0x34
 8017246:	d815      	bhi.n	8017274 <_printf_float+0x150>
 8017248:	3901      	subs	r1, #1
 801724a:	4642      	mov	r2, r8
 801724c:	f10b 0050 	add.w	r0, fp, #80	; 0x50
 8017250:	910d      	str	r1, [sp, #52]	; 0x34
 8017252:	f7ff ff37 	bl	80170c4 <__exponent>
 8017256:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017258:	1883      	adds	r3, r0, r2
 801725a:	2a01      	cmp	r2, #1
 801725c:	4681      	mov	r9, r0
 801725e:	f8cb 3010 	str.w	r3, [fp, #16]
 8017262:	dc03      	bgt.n	801726c <_printf_float+0x148>
 8017264:	f8db 2000 	ldr.w	r2, [fp]
 8017268:	07d1      	lsls	r1, r2, #31
 801726a:	d538      	bpl.n	80172de <_printf_float+0x1ba>
 801726c:	3301      	adds	r3, #1
 801726e:	f8cb 3010 	str.w	r3, [fp, #16]
 8017272:	e034      	b.n	80172de <_printf_float+0x1ba>
 8017274:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8017278:	d118      	bne.n	80172ac <_printf_float+0x188>
 801727a:	2900      	cmp	r1, #0
 801727c:	f8db 3004 	ldr.w	r3, [fp, #4]
 8017280:	dd09      	ble.n	8017296 <_printf_float+0x172>
 8017282:	f8cb 1010 	str.w	r1, [fp, #16]
 8017286:	b91b      	cbnz	r3, 8017290 <_printf_float+0x16c>
 8017288:	f8db 2000 	ldr.w	r2, [fp]
 801728c:	07d2      	lsls	r2, r2, #31
 801728e:	d521      	bpl.n	80172d4 <_printf_float+0x1b0>
 8017290:	3301      	adds	r3, #1
 8017292:	440b      	add	r3, r1
 8017294:	e01c      	b.n	80172d0 <_printf_float+0x1ac>
 8017296:	b91b      	cbnz	r3, 80172a0 <_printf_float+0x17c>
 8017298:	f8db 2000 	ldr.w	r2, [fp]
 801729c:	07d0      	lsls	r0, r2, #31
 801729e:	d501      	bpl.n	80172a4 <_printf_float+0x180>
 80172a0:	3302      	adds	r3, #2
 80172a2:	e015      	b.n	80172d0 <_printf_float+0x1ac>
 80172a4:	2301      	movs	r3, #1
 80172a6:	e013      	b.n	80172d0 <_printf_float+0x1ac>
 80172a8:	f04f 0867 	mov.w	r8, #103	; 0x67
 80172ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80172ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80172b0:	4293      	cmp	r3, r2
 80172b2:	db07      	blt.n	80172c4 <_printf_float+0x1a0>
 80172b4:	f8db 2000 	ldr.w	r2, [fp]
 80172b8:	f8cb 3010 	str.w	r3, [fp, #16]
 80172bc:	07d1      	lsls	r1, r2, #31
 80172be:	d509      	bpl.n	80172d4 <_printf_float+0x1b0>
 80172c0:	3301      	adds	r3, #1
 80172c2:	e005      	b.n	80172d0 <_printf_float+0x1ac>
 80172c4:	2b00      	cmp	r3, #0
 80172c6:	bfd4      	ite	le
 80172c8:	f1c3 0302 	rsble	r3, r3, #2
 80172cc:	2301      	movgt	r3, #1
 80172ce:	4413      	add	r3, r2
 80172d0:	f8cb 3010 	str.w	r3, [fp, #16]
 80172d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80172d6:	f8cb 3058 	str.w	r3, [fp, #88]	; 0x58
 80172da:	f04f 0900 	mov.w	r9, #0
 80172de:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80172e2:	b113      	cbz	r3, 80172ea <_printf_float+0x1c6>
 80172e4:	232d      	movs	r3, #45	; 0x2d
 80172e6:	f88b 3043 	strb.w	r3, [fp, #67]	; 0x43
 80172ea:	9600      	str	r6, [sp, #0]
 80172ec:	4620      	mov	r0, r4
 80172ee:	4659      	mov	r1, fp
 80172f0:	aa0f      	add	r2, sp, #60	; 0x3c
 80172f2:	462b      	mov	r3, r5
 80172f4:	f000 f95c 	bl	80175b0 <_printf_common>
 80172f8:	3001      	adds	r0, #1
 80172fa:	d102      	bne.n	8017302 <_printf_float+0x1de>
 80172fc:	f04f 30ff 	mov.w	r0, #4294967295
 8017300:	e152      	b.n	80175a8 <_printf_float+0x484>
 8017302:	f8db 3000 	ldr.w	r3, [fp]
 8017306:	055a      	lsls	r2, r3, #21
 8017308:	d405      	bmi.n	8017316 <_printf_float+0x1f2>
 801730a:	4620      	mov	r0, r4
 801730c:	4629      	mov	r1, r5
 801730e:	463a      	mov	r2, r7
 8017310:	f8db 3010 	ldr.w	r3, [fp, #16]
 8017314:	e108      	b.n	8017528 <_printf_float+0x404>
 8017316:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 801731a:	f240 80d0 	bls.w	80174be <_printf_float+0x39a>
 801731e:	e9db 0112 	ldrd	r0, r1, [fp, #72]	; 0x48
 8017322:	2200      	movs	r2, #0
 8017324:	2300      	movs	r3, #0
 8017326:	f004 f951 	bl	801b5cc <__aeabi_dcmpeq>
 801732a:	b350      	cbz	r0, 8017382 <_printf_float+0x25e>
 801732c:	4620      	mov	r0, r4
 801732e:	4629      	mov	r1, r5
 8017330:	4a38      	ldr	r2, [pc, #224]	; (8017414 <_printf_float+0x2f0>)
 8017332:	2301      	movs	r3, #1
 8017334:	47b0      	blx	r6
 8017336:	3001      	adds	r0, #1
 8017338:	d0e0      	beq.n	80172fc <_printf_float+0x1d8>
 801733a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801733c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801733e:	429a      	cmp	r2, r3
 8017340:	db09      	blt.n	8017356 <_printf_float+0x232>
 8017342:	f8db 3000 	ldr.w	r3, [fp]
 8017346:	07d8      	lsls	r0, r3, #31
 8017348:	d405      	bmi.n	8017356 <_printf_float+0x232>
 801734a:	f8db 3000 	ldr.w	r3, [fp]
 801734e:	079f      	lsls	r7, r3, #30
 8017350:	f100 8110 	bmi.w	8017574 <_printf_float+0x450>
 8017354:	e107      	b.n	8017566 <_printf_float+0x442>
 8017356:	4620      	mov	r0, r4
 8017358:	4629      	mov	r1, r5
 801735a:	4652      	mov	r2, sl
 801735c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801735e:	47b0      	blx	r6
 8017360:	3001      	adds	r0, #1
 8017362:	d0cb      	beq.n	80172fc <_printf_float+0x1d8>
 8017364:	2700      	movs	r7, #0
 8017366:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017368:	3b01      	subs	r3, #1
 801736a:	429f      	cmp	r7, r3
 801736c:	daed      	bge.n	801734a <_printf_float+0x226>
 801736e:	4620      	mov	r0, r4
 8017370:	4629      	mov	r1, r5
 8017372:	f10b 021a 	add.w	r2, fp, #26
 8017376:	2301      	movs	r3, #1
 8017378:	47b0      	blx	r6
 801737a:	3001      	adds	r0, #1
 801737c:	d0be      	beq.n	80172fc <_printf_float+0x1d8>
 801737e:	3701      	adds	r7, #1
 8017380:	e7f1      	b.n	8017366 <_printf_float+0x242>
 8017382:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017384:	2b00      	cmp	r3, #0
 8017386:	dc29      	bgt.n	80173dc <_printf_float+0x2b8>
 8017388:	4620      	mov	r0, r4
 801738a:	4629      	mov	r1, r5
 801738c:	4a21      	ldr	r2, [pc, #132]	; (8017414 <_printf_float+0x2f0>)
 801738e:	2301      	movs	r3, #1
 8017390:	47b0      	blx	r6
 8017392:	3001      	adds	r0, #1
 8017394:	d0b2      	beq.n	80172fc <_printf_float+0x1d8>
 8017396:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017398:	b92b      	cbnz	r3, 80173a6 <_printf_float+0x282>
 801739a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801739c:	b91b      	cbnz	r3, 80173a6 <_printf_float+0x282>
 801739e:	f8db 3000 	ldr.w	r3, [fp]
 80173a2:	07d9      	lsls	r1, r3, #31
 80173a4:	d5d1      	bpl.n	801734a <_printf_float+0x226>
 80173a6:	4620      	mov	r0, r4
 80173a8:	4629      	mov	r1, r5
 80173aa:	4652      	mov	r2, sl
 80173ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80173ae:	47b0      	blx	r6
 80173b0:	3001      	adds	r0, #1
 80173b2:	d0a3      	beq.n	80172fc <_printf_float+0x1d8>
 80173b4:	f04f 0800 	mov.w	r8, #0
 80173b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80173ba:	425b      	negs	r3, r3
 80173bc:	4598      	cmp	r8, r3
 80173be:	4620      	mov	r0, r4
 80173c0:	4629      	mov	r1, r5
 80173c2:	da08      	bge.n	80173d6 <_printf_float+0x2b2>
 80173c4:	f10b 021a 	add.w	r2, fp, #26
 80173c8:	2301      	movs	r3, #1
 80173ca:	47b0      	blx	r6
 80173cc:	3001      	adds	r0, #1
 80173ce:	d095      	beq.n	80172fc <_printf_float+0x1d8>
 80173d0:	f108 0801 	add.w	r8, r8, #1
 80173d4:	e7f0      	b.n	80173b8 <_printf_float+0x294>
 80173d6:	463a      	mov	r2, r7
 80173d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80173da:	e0a5      	b.n	8017528 <_printf_float+0x404>
 80173dc:	f8db 2058 	ldr.w	r2, [fp, #88]	; 0x58
 80173e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80173e2:	429a      	cmp	r2, r3
 80173e4:	bfa8      	it	ge
 80173e6:	461a      	movge	r2, r3
 80173e8:	2a00      	cmp	r2, #0
 80173ea:	4691      	mov	r9, r2
 80173ec:	dc02      	bgt.n	80173f4 <_printf_float+0x2d0>
 80173ee:	f04f 0800 	mov.w	r8, #0
 80173f2:	e01c      	b.n	801742e <_printf_float+0x30a>
 80173f4:	4620      	mov	r0, r4
 80173f6:	4629      	mov	r1, r5
 80173f8:	463a      	mov	r2, r7
 80173fa:	464b      	mov	r3, r9
 80173fc:	47b0      	blx	r6
 80173fe:	3001      	adds	r0, #1
 8017400:	d1f5      	bne.n	80173ee <_printf_float+0x2ca>
 8017402:	e77b      	b.n	80172fc <_printf_float+0x1d8>
 8017404:	0801d189 	.word	0x0801d189
 8017408:	0801d185 	.word	0x0801d185
 801740c:	0801d191 	.word	0x0801d191
 8017410:	0801d18d 	.word	0x0801d18d
 8017414:	0801d195 	.word	0x0801d195
 8017418:	4620      	mov	r0, r4
 801741a:	4629      	mov	r1, r5
 801741c:	f10b 021a 	add.w	r2, fp, #26
 8017420:	2301      	movs	r3, #1
 8017422:	47b0      	blx	r6
 8017424:	3001      	adds	r0, #1
 8017426:	f43f af69 	beq.w	80172fc <_printf_float+0x1d8>
 801742a:	f108 0801 	add.w	r8, r8, #1
 801742e:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 8017432:	f1b9 0f00 	cmp.w	r9, #0
 8017436:	bfac      	ite	ge
 8017438:	ebc9 0203 	rsbge	r2, r9, r3
 801743c:	461a      	movlt	r2, r3
 801743e:	4590      	cmp	r8, r2
 8017440:	dbea      	blt.n	8017418 <_printf_float+0x2f4>
 8017442:	eb07 0803 	add.w	r8, r7, r3
 8017446:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017448:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801744a:	429a      	cmp	r2, r3
 801744c:	db10      	blt.n	8017470 <_printf_float+0x34c>
 801744e:	f8db 3000 	ldr.w	r3, [fp]
 8017452:	07da      	lsls	r2, r3, #31
 8017454:	d40c      	bmi.n	8017470 <_printf_float+0x34c>
 8017456:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017458:	4417      	add	r7, r2
 801745a:	ebc8 0307 	rsb	r3, r8, r7
 801745e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8017460:	1bd2      	subs	r2, r2, r7
 8017462:	4293      	cmp	r3, r2
 8017464:	bfa8      	it	ge
 8017466:	4613      	movge	r3, r2
 8017468:	2b00      	cmp	r3, #0
 801746a:	461f      	mov	r7, r3
 801746c:	dc08      	bgt.n	8017480 <_printf_float+0x35c>
 801746e:	e00e      	b.n	801748e <_printf_float+0x36a>
 8017470:	4620      	mov	r0, r4
 8017472:	4629      	mov	r1, r5
 8017474:	4652      	mov	r2, sl
 8017476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017478:	47b0      	blx	r6
 801747a:	3001      	adds	r0, #1
 801747c:	d1eb      	bne.n	8017456 <_printf_float+0x332>
 801747e:	e73d      	b.n	80172fc <_printf_float+0x1d8>
 8017480:	4620      	mov	r0, r4
 8017482:	4629      	mov	r1, r5
 8017484:	4642      	mov	r2, r8
 8017486:	47b0      	blx	r6
 8017488:	3001      	adds	r0, #1
 801748a:	f43f af37 	beq.w	80172fc <_printf_float+0x1d8>
 801748e:	f04f 0800 	mov.w	r8, #0
 8017492:	e00a      	b.n	80174aa <_printf_float+0x386>
 8017494:	4620      	mov	r0, r4
 8017496:	4629      	mov	r1, r5
 8017498:	f10b 021a 	add.w	r2, fp, #26
 801749c:	2301      	movs	r3, #1
 801749e:	47b0      	blx	r6
 80174a0:	3001      	adds	r0, #1
 80174a2:	f43f af2b 	beq.w	80172fc <_printf_float+0x1d8>
 80174a6:	f108 0801 	add.w	r8, r8, #1
 80174aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80174ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80174ae:	2f00      	cmp	r7, #0
 80174b0:	eba3 0302 	sub.w	r3, r3, r2
 80174b4:	bfa8      	it	ge
 80174b6:	1bdb      	subge	r3, r3, r7
 80174b8:	4598      	cmp	r8, r3
 80174ba:	dbeb      	blt.n	8017494 <_printf_float+0x370>
 80174bc:	e745      	b.n	801734a <_printf_float+0x226>
 80174be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80174c0:	2a01      	cmp	r2, #1
 80174c2:	dc01      	bgt.n	80174c8 <_printf_float+0x3a4>
 80174c4:	07db      	lsls	r3, r3, #31
 80174c6:	d536      	bpl.n	8017536 <_printf_float+0x412>
 80174c8:	4620      	mov	r0, r4
 80174ca:	4629      	mov	r1, r5
 80174cc:	463a      	mov	r2, r7
 80174ce:	2301      	movs	r3, #1
 80174d0:	47b0      	blx	r6
 80174d2:	3001      	adds	r0, #1
 80174d4:	f43f af12 	beq.w	80172fc <_printf_float+0x1d8>
 80174d8:	4620      	mov	r0, r4
 80174da:	4629      	mov	r1, r5
 80174dc:	4652      	mov	r2, sl
 80174de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80174e0:	47b0      	blx	r6
 80174e2:	3001      	adds	r0, #1
 80174e4:	f43f af0a 	beq.w	80172fc <_printf_float+0x1d8>
 80174e8:	e9db 0112 	ldrd	r0, r1, [fp, #72]	; 0x48
 80174ec:	2200      	movs	r2, #0
 80174ee:	2300      	movs	r3, #0
 80174f0:	f004 f86c 	bl	801b5cc <__aeabi_dcmpeq>
 80174f4:	b9e8      	cbnz	r0, 8017532 <_printf_float+0x40e>
 80174f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80174f8:	4620      	mov	r0, r4
 80174fa:	4629      	mov	r1, r5
 80174fc:	1c7a      	adds	r2, r7, #1
 80174fe:	3b01      	subs	r3, #1
 8017500:	e01d      	b.n	801753e <_printf_float+0x41a>
 8017502:	4620      	mov	r0, r4
 8017504:	4629      	mov	r1, r5
 8017506:	f10b 021a 	add.w	r2, fp, #26
 801750a:	2301      	movs	r3, #1
 801750c:	47b0      	blx	r6
 801750e:	3001      	adds	r0, #1
 8017510:	f43f aef4 	beq.w	80172fc <_printf_float+0x1d8>
 8017514:	3701      	adds	r7, #1
 8017516:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017518:	3b01      	subs	r3, #1
 801751a:	429f      	cmp	r7, r3
 801751c:	dbf1      	blt.n	8017502 <_printf_float+0x3de>
 801751e:	4620      	mov	r0, r4
 8017520:	4629      	mov	r1, r5
 8017522:	f10b 0250 	add.w	r2, fp, #80	; 0x50
 8017526:	464b      	mov	r3, r9
 8017528:	47b0      	blx	r6
 801752a:	3001      	adds	r0, #1
 801752c:	f47f af0d 	bne.w	801734a <_printf_float+0x226>
 8017530:	e6e4      	b.n	80172fc <_printf_float+0x1d8>
 8017532:	2700      	movs	r7, #0
 8017534:	e7ef      	b.n	8017516 <_printf_float+0x3f2>
 8017536:	4620      	mov	r0, r4
 8017538:	4629      	mov	r1, r5
 801753a:	463a      	mov	r2, r7
 801753c:	2301      	movs	r3, #1
 801753e:	47b0      	blx	r6
 8017540:	3001      	adds	r0, #1
 8017542:	d1ec      	bne.n	801751e <_printf_float+0x3fa>
 8017544:	e6da      	b.n	80172fc <_printf_float+0x1d8>
 8017546:	4620      	mov	r0, r4
 8017548:	4629      	mov	r1, r5
 801754a:	f10b 0219 	add.w	r2, fp, #25
 801754e:	2301      	movs	r3, #1
 8017550:	47b0      	blx	r6
 8017552:	3001      	adds	r0, #1
 8017554:	f43f aed2 	beq.w	80172fc <_printf_float+0x1d8>
 8017558:	3701      	adds	r7, #1
 801755a:	f8db 300c 	ldr.w	r3, [fp, #12]
 801755e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017560:	1a9b      	subs	r3, r3, r2
 8017562:	429f      	cmp	r7, r3
 8017564:	dbef      	blt.n	8017546 <_printf_float+0x422>
 8017566:	f8db 000c 	ldr.w	r0, [fp, #12]
 801756a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801756c:	4298      	cmp	r0, r3
 801756e:	bfb8      	it	lt
 8017570:	4618      	movlt	r0, r3
 8017572:	e019      	b.n	80175a8 <_printf_float+0x484>
 8017574:	2700      	movs	r7, #0
 8017576:	e7f0      	b.n	801755a <_printf_float+0x436>
 8017578:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801757c:	e88d 000c 	stmia.w	sp, {r2, r3}
 8017580:	f8cb 3000 	str.w	r3, [fp]
 8017584:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8017588:	9302      	str	r3, [sp, #8]
 801758a:	ab0d      	add	r3, sp, #52	; 0x34
 801758c:	9303      	str	r3, [sp, #12]
 801758e:	ab0e      	add	r3, sp, #56	; 0x38
 8017590:	9305      	str	r3, [sp, #20]
 8017592:	2300      	movs	r3, #0
 8017594:	9306      	str	r3, [sp, #24]
 8017596:	f8cd 8010 	str.w	r8, [sp, #16]
 801759a:	4620      	mov	r0, r4
 801759c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80175a0:	f7ff fd30 	bl	8017004 <__cvt>
 80175a4:	4607      	mov	r7, r0
 80175a6:	e640      	b.n	801722a <_printf_float+0x106>
 80175a8:	b011      	add	sp, #68	; 0x44
 80175aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175ae:	bf00      	nop

080175b0 <_printf_common>:
 80175b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80175b4:	4691      	mov	r9, r2
 80175b6:	461f      	mov	r7, r3
 80175b8:	688a      	ldr	r2, [r1, #8]
 80175ba:	690b      	ldr	r3, [r1, #16]
 80175bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80175c0:	4293      	cmp	r3, r2
 80175c2:	bfb8      	it	lt
 80175c4:	4613      	movlt	r3, r2
 80175c6:	f8c9 3000 	str.w	r3, [r9]
 80175ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80175ce:	4606      	mov	r6, r0
 80175d0:	460c      	mov	r4, r1
 80175d2:	b112      	cbz	r2, 80175da <_printf_common+0x2a>
 80175d4:	3301      	adds	r3, #1
 80175d6:	f8c9 3000 	str.w	r3, [r9]
 80175da:	6823      	ldr	r3, [r4, #0]
 80175dc:	0699      	lsls	r1, r3, #26
 80175de:	bf42      	ittt	mi
 80175e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80175e4:	3302      	addmi	r3, #2
 80175e6:	f8c9 3000 	strmi.w	r3, [r9]
 80175ea:	6825      	ldr	r5, [r4, #0]
 80175ec:	f015 0506 	ands.w	r5, r5, #6
 80175f0:	d01c      	beq.n	801762c <_printf_common+0x7c>
 80175f2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80175f6:	6822      	ldr	r2, [r4, #0]
 80175f8:	3300      	adds	r3, #0
 80175fa:	bf18      	it	ne
 80175fc:	2301      	movne	r3, #1
 80175fe:	0692      	lsls	r2, r2, #26
 8017600:	d51f      	bpl.n	8017642 <_printf_common+0x92>
 8017602:	18e1      	adds	r1, r4, r3
 8017604:	1c5a      	adds	r2, r3, #1
 8017606:	2030      	movs	r0, #48	; 0x30
 8017608:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801760c:	4422      	add	r2, r4
 801760e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017612:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017616:	3302      	adds	r3, #2
 8017618:	e013      	b.n	8017642 <_printf_common+0x92>
 801761a:	4630      	mov	r0, r6
 801761c:	4639      	mov	r1, r7
 801761e:	f104 0219 	add.w	r2, r4, #25
 8017622:	2301      	movs	r3, #1
 8017624:	47c0      	blx	r8
 8017626:	3001      	adds	r0, #1
 8017628:	d007      	beq.n	801763a <_printf_common+0x8a>
 801762a:	3501      	adds	r5, #1
 801762c:	68e3      	ldr	r3, [r4, #12]
 801762e:	f8d9 2000 	ldr.w	r2, [r9]
 8017632:	1a9b      	subs	r3, r3, r2
 8017634:	429d      	cmp	r5, r3
 8017636:	dbf0      	blt.n	801761a <_printf_common+0x6a>
 8017638:	e7db      	b.n	80175f2 <_printf_common+0x42>
 801763a:	f04f 30ff 	mov.w	r0, #4294967295
 801763e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017642:	4630      	mov	r0, r6
 8017644:	4639      	mov	r1, r7
 8017646:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801764a:	47c0      	blx	r8
 801764c:	3001      	adds	r0, #1
 801764e:	d0f4      	beq.n	801763a <_printf_common+0x8a>
 8017650:	6822      	ldr	r2, [r4, #0]
 8017652:	f8d9 5000 	ldr.w	r5, [r9]
 8017656:	68e3      	ldr	r3, [r4, #12]
 8017658:	f002 0206 	and.w	r2, r2, #6
 801765c:	2a04      	cmp	r2, #4
 801765e:	bf08      	it	eq
 8017660:	1b5d      	subeq	r5, r3, r5
 8017662:	6922      	ldr	r2, [r4, #16]
 8017664:	68a3      	ldr	r3, [r4, #8]
 8017666:	bf0c      	ite	eq
 8017668:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801766c:	2500      	movne	r5, #0
 801766e:	4293      	cmp	r3, r2
 8017670:	bfc4      	itt	gt
 8017672:	1a9b      	subgt	r3, r3, r2
 8017674:	18ed      	addgt	r5, r5, r3
 8017676:	f04f 0900 	mov.w	r9, #0
 801767a:	45a9      	cmp	r9, r5
 801767c:	da0a      	bge.n	8017694 <_printf_common+0xe4>
 801767e:	4630      	mov	r0, r6
 8017680:	4639      	mov	r1, r7
 8017682:	f104 021a 	add.w	r2, r4, #26
 8017686:	2301      	movs	r3, #1
 8017688:	47c0      	blx	r8
 801768a:	3001      	adds	r0, #1
 801768c:	d0d5      	beq.n	801763a <_printf_common+0x8a>
 801768e:	f109 0901 	add.w	r9, r9, #1
 8017692:	e7f2      	b.n	801767a <_printf_common+0xca>
 8017694:	2000      	movs	r0, #0
 8017696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0801769c <_printf_i>:
 801769c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80176a0:	460c      	mov	r4, r1
 80176a2:	4617      	mov	r7, r2
 80176a4:	7e22      	ldrb	r2, [r4, #24]
 80176a6:	2a6e      	cmp	r2, #110	; 0x6e
 80176a8:	4698      	mov	r8, r3
 80176aa:	4606      	mov	r6, r0
 80176ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80176ae:	f101 0143 	add.w	r1, r1, #67	; 0x43
 80176b2:	f000 80af 	beq.w	8017814 <_printf_i+0x178>
 80176b6:	d812      	bhi.n	80176de <_printf_i+0x42>
 80176b8:	2a63      	cmp	r2, #99	; 0x63
 80176ba:	d023      	beq.n	8017704 <_printf_i+0x68>
 80176bc:	d80a      	bhi.n	80176d4 <_printf_i+0x38>
 80176be:	2a00      	cmp	r2, #0
 80176c0:	f000 80bc 	beq.w	801783c <_printf_i+0x1a0>
 80176c4:	2a58      	cmp	r2, #88	; 0x58
 80176c6:	f040 80cb 	bne.w	8017860 <_printf_i+0x1c4>
 80176ca:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80176ce:	f8df e204 	ldr.w	lr, [pc, #516]	; 80178d4 <_printf_i+0x238>
 80176d2:	e057      	b.n	8017784 <_printf_i+0xe8>
 80176d4:	2a64      	cmp	r2, #100	; 0x64
 80176d6:	d01e      	beq.n	8017716 <_printf_i+0x7a>
 80176d8:	2a69      	cmp	r2, #105	; 0x69
 80176da:	d01c      	beq.n	8017716 <_printf_i+0x7a>
 80176dc:	e0c0      	b.n	8017860 <_printf_i+0x1c4>
 80176de:	2a73      	cmp	r2, #115	; 0x73
 80176e0:	f000 80b0 	beq.w	8017844 <_printf_i+0x1a8>
 80176e4:	d809      	bhi.n	80176fa <_printf_i+0x5e>
 80176e6:	2a6f      	cmp	r2, #111	; 0x6f
 80176e8:	d02e      	beq.n	8017748 <_printf_i+0xac>
 80176ea:	2a70      	cmp	r2, #112	; 0x70
 80176ec:	f040 80b8 	bne.w	8017860 <_printf_i+0x1c4>
 80176f0:	6822      	ldr	r2, [r4, #0]
 80176f2:	f042 0220 	orr.w	r2, r2, #32
 80176f6:	6022      	str	r2, [r4, #0]
 80176f8:	e03f      	b.n	801777a <_printf_i+0xde>
 80176fa:	2a75      	cmp	r2, #117	; 0x75
 80176fc:	d024      	beq.n	8017748 <_printf_i+0xac>
 80176fe:	2a78      	cmp	r2, #120	; 0x78
 8017700:	d03b      	beq.n	801777a <_printf_i+0xde>
 8017702:	e0ad      	b.n	8017860 <_printf_i+0x1c4>
 8017704:	681a      	ldr	r2, [r3, #0]
 8017706:	1d11      	adds	r1, r2, #4
 8017708:	6019      	str	r1, [r3, #0]
 801770a:	6813      	ldr	r3, [r2, #0]
 801770c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017710:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017714:	e0a8      	b.n	8017868 <_printf_i+0x1cc>
 8017716:	6820      	ldr	r0, [r4, #0]
 8017718:	681a      	ldr	r2, [r3, #0]
 801771a:	f010 0f80 	tst.w	r0, #128	; 0x80
 801771e:	d002      	beq.n	8017726 <_printf_i+0x8a>
 8017720:	1d10      	adds	r0, r2, #4
 8017722:	6018      	str	r0, [r3, #0]
 8017724:	e008      	b.n	8017738 <_printf_i+0x9c>
 8017726:	f010 0f40 	tst.w	r0, #64	; 0x40
 801772a:	f102 0004 	add.w	r0, r2, #4
 801772e:	6018      	str	r0, [r3, #0]
 8017730:	d002      	beq.n	8017738 <_printf_i+0x9c>
 8017732:	f9b2 3000 	ldrsh.w	r3, [r2]
 8017736:	e000      	b.n	801773a <_printf_i+0x9e>
 8017738:	6813      	ldr	r3, [r2, #0]
 801773a:	2b00      	cmp	r3, #0
 801773c:	da3e      	bge.n	80177bc <_printf_i+0x120>
 801773e:	222d      	movs	r2, #45	; 0x2d
 8017740:	425b      	negs	r3, r3
 8017742:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8017746:	e039      	b.n	80177bc <_printf_i+0x120>
 8017748:	6820      	ldr	r0, [r4, #0]
 801774a:	681a      	ldr	r2, [r3, #0]
 801774c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8017750:	d002      	beq.n	8017758 <_printf_i+0xbc>
 8017752:	1d10      	adds	r0, r2, #4
 8017754:	6018      	str	r0, [r3, #0]
 8017756:	e007      	b.n	8017768 <_printf_i+0xcc>
 8017758:	f010 0f40 	tst.w	r0, #64	; 0x40
 801775c:	f102 0004 	add.w	r0, r2, #4
 8017760:	6018      	str	r0, [r3, #0]
 8017762:	d001      	beq.n	8017768 <_printf_i+0xcc>
 8017764:	8813      	ldrh	r3, [r2, #0]
 8017766:	e000      	b.n	801776a <_printf_i+0xce>
 8017768:	6813      	ldr	r3, [r2, #0]
 801776a:	7e22      	ldrb	r2, [r4, #24]
 801776c:	f8df e164 	ldr.w	lr, [pc, #356]	; 80178d4 <_printf_i+0x238>
 8017770:	2a6f      	cmp	r2, #111	; 0x6f
 8017772:	bf0c      	ite	eq
 8017774:	2208      	moveq	r2, #8
 8017776:	220a      	movne	r2, #10
 8017778:	e01c      	b.n	80177b4 <_printf_i+0x118>
 801777a:	2278      	movs	r2, #120	; 0x78
 801777c:	f8df e158 	ldr.w	lr, [pc, #344]	; 80178d8 <_printf_i+0x23c>
 8017780:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8017784:	6822      	ldr	r2, [r4, #0]
 8017786:	6818      	ldr	r0, [r3, #0]
 8017788:	f012 0f80 	tst.w	r2, #128	; 0x80
 801778c:	f100 0504 	add.w	r5, r0, #4
 8017790:	601d      	str	r5, [r3, #0]
 8017792:	d103      	bne.n	801779c <_printf_i+0x100>
 8017794:	0655      	lsls	r5, r2, #25
 8017796:	d501      	bpl.n	801779c <_printf_i+0x100>
 8017798:	8803      	ldrh	r3, [r0, #0]
 801779a:	e000      	b.n	801779e <_printf_i+0x102>
 801779c:	6803      	ldr	r3, [r0, #0]
 801779e:	07d0      	lsls	r0, r2, #31
 80177a0:	bf44      	itt	mi
 80177a2:	f042 0220 	orrmi.w	r2, r2, #32
 80177a6:	6022      	strmi	r2, [r4, #0]
 80177a8:	b91b      	cbnz	r3, 80177b2 <_printf_i+0x116>
 80177aa:	6822      	ldr	r2, [r4, #0]
 80177ac:	f022 0220 	bic.w	r2, r2, #32
 80177b0:	6022      	str	r2, [r4, #0]
 80177b2:	2210      	movs	r2, #16
 80177b4:	2000      	movs	r0, #0
 80177b6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80177ba:	e002      	b.n	80177c2 <_printf_i+0x126>
 80177bc:	f8df e114 	ldr.w	lr, [pc, #276]	; 80178d4 <_printf_i+0x238>
 80177c0:	220a      	movs	r2, #10
 80177c2:	6865      	ldr	r5, [r4, #4]
 80177c4:	60a5      	str	r5, [r4, #8]
 80177c6:	2d00      	cmp	r5, #0
 80177c8:	bfa2      	ittt	ge
 80177ca:	6820      	ldrge	r0, [r4, #0]
 80177cc:	f020 0004 	bicge.w	r0, r0, #4
 80177d0:	6020      	strge	r0, [r4, #0]
 80177d2:	b903      	cbnz	r3, 80177d6 <_printf_i+0x13a>
 80177d4:	b165      	cbz	r5, 80177f0 <_printf_i+0x154>
 80177d6:	460d      	mov	r5, r1
 80177d8:	fbb3 f0f2 	udiv	r0, r3, r2
 80177dc:	fb02 3310 	mls	r3, r2, r0, r3
 80177e0:	f81e 3003 	ldrb.w	r3, [lr, r3]
 80177e4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80177e8:	4603      	mov	r3, r0
 80177ea:	2800      	cmp	r0, #0
 80177ec:	d1f4      	bne.n	80177d8 <_printf_i+0x13c>
 80177ee:	e000      	b.n	80177f2 <_printf_i+0x156>
 80177f0:	460d      	mov	r5, r1
 80177f2:	2a08      	cmp	r2, #8
 80177f4:	d10b      	bne.n	801780e <_printf_i+0x172>
 80177f6:	6823      	ldr	r3, [r4, #0]
 80177f8:	07da      	lsls	r2, r3, #31
 80177fa:	d508      	bpl.n	801780e <_printf_i+0x172>
 80177fc:	6923      	ldr	r3, [r4, #16]
 80177fe:	6862      	ldr	r2, [r4, #4]
 8017800:	429a      	cmp	r2, r3
 8017802:	bfde      	ittt	le
 8017804:	2330      	movle	r3, #48	; 0x30
 8017806:	f805 3c01 	strble.w	r3, [r5, #-1]
 801780a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801780e:	1b49      	subs	r1, r1, r5
 8017810:	6121      	str	r1, [r4, #16]
 8017812:	e02e      	b.n	8017872 <_printf_i+0x1d6>
 8017814:	6825      	ldr	r5, [r4, #0]
 8017816:	681a      	ldr	r2, [r3, #0]
 8017818:	6960      	ldr	r0, [r4, #20]
 801781a:	f015 0f80 	tst.w	r5, #128	; 0x80
 801781e:	d003      	beq.n	8017828 <_printf_i+0x18c>
 8017820:	1d15      	adds	r5, r2, #4
 8017822:	601d      	str	r5, [r3, #0]
 8017824:	6813      	ldr	r3, [r2, #0]
 8017826:	e008      	b.n	801783a <_printf_i+0x19e>
 8017828:	f015 0f40 	tst.w	r5, #64	; 0x40
 801782c:	f102 0504 	add.w	r5, r2, #4
 8017830:	601d      	str	r5, [r3, #0]
 8017832:	6813      	ldr	r3, [r2, #0]
 8017834:	d001      	beq.n	801783a <_printf_i+0x19e>
 8017836:	8018      	strh	r0, [r3, #0]
 8017838:	e000      	b.n	801783c <_printf_i+0x1a0>
 801783a:	6018      	str	r0, [r3, #0]
 801783c:	2300      	movs	r3, #0
 801783e:	6123      	str	r3, [r4, #16]
 8017840:	460d      	mov	r5, r1
 8017842:	e016      	b.n	8017872 <_printf_i+0x1d6>
 8017844:	681a      	ldr	r2, [r3, #0]
 8017846:	1d11      	adds	r1, r2, #4
 8017848:	6019      	str	r1, [r3, #0]
 801784a:	6815      	ldr	r5, [r2, #0]
 801784c:	6862      	ldr	r2, [r4, #4]
 801784e:	4628      	mov	r0, r5
 8017850:	2100      	movs	r1, #0
 8017852:	f7ff f9cf 	bl	8016bf4 <memchr>
 8017856:	b108      	cbz	r0, 801785c <_printf_i+0x1c0>
 8017858:	1b40      	subs	r0, r0, r5
 801785a:	6060      	str	r0, [r4, #4]
 801785c:	6863      	ldr	r3, [r4, #4]
 801785e:	e004      	b.n	801786a <_printf_i+0x1ce>
 8017860:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017864:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8017868:	2301      	movs	r3, #1
 801786a:	6123      	str	r3, [r4, #16]
 801786c:	2300      	movs	r3, #0
 801786e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017872:	f8cd 8000 	str.w	r8, [sp]
 8017876:	4630      	mov	r0, r6
 8017878:	4621      	mov	r1, r4
 801787a:	aa03      	add	r2, sp, #12
 801787c:	463b      	mov	r3, r7
 801787e:	f7ff fe97 	bl	80175b0 <_printf_common>
 8017882:	3001      	adds	r0, #1
 8017884:	d102      	bne.n	801788c <_printf_i+0x1f0>
 8017886:	f04f 30ff 	mov.w	r0, #4294967295
 801788a:	e01f      	b.n	80178cc <_printf_i+0x230>
 801788c:	4630      	mov	r0, r6
 801788e:	4639      	mov	r1, r7
 8017890:	462a      	mov	r2, r5
 8017892:	6923      	ldr	r3, [r4, #16]
 8017894:	47c0      	blx	r8
 8017896:	3001      	adds	r0, #1
 8017898:	d0f5      	beq.n	8017886 <_printf_i+0x1ea>
 801789a:	6823      	ldr	r3, [r4, #0]
 801789c:	079b      	lsls	r3, r3, #30
 801789e:	d405      	bmi.n	80178ac <_printf_i+0x210>
 80178a0:	68e0      	ldr	r0, [r4, #12]
 80178a2:	9b03      	ldr	r3, [sp, #12]
 80178a4:	4298      	cmp	r0, r3
 80178a6:	bfb8      	it	lt
 80178a8:	4618      	movlt	r0, r3
 80178aa:	e00f      	b.n	80178cc <_printf_i+0x230>
 80178ac:	2500      	movs	r5, #0
 80178ae:	68e3      	ldr	r3, [r4, #12]
 80178b0:	9a03      	ldr	r2, [sp, #12]
 80178b2:	1a9b      	subs	r3, r3, r2
 80178b4:	429d      	cmp	r5, r3
 80178b6:	daf3      	bge.n	80178a0 <_printf_i+0x204>
 80178b8:	4630      	mov	r0, r6
 80178ba:	4639      	mov	r1, r7
 80178bc:	f104 0219 	add.w	r2, r4, #25
 80178c0:	2301      	movs	r3, #1
 80178c2:	47c0      	blx	r8
 80178c4:	3001      	adds	r0, #1
 80178c6:	d0de      	beq.n	8017886 <_printf_i+0x1ea>
 80178c8:	3501      	adds	r5, #1
 80178ca:	e7f0      	b.n	80178ae <_printf_i+0x212>
 80178cc:	b004      	add	sp, #16
 80178ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80178d2:	bf00      	nop
 80178d4:	0801d197 	.word	0x0801d197
 80178d8:	0801d1a8 	.word	0x0801d1a8

080178dc <_scanf_float>:
 80178dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178e0:	4699      	mov	r9, r3
 80178e2:	688b      	ldr	r3, [r1, #8]
 80178e4:	4615      	mov	r5, r2
 80178e6:	1e5a      	subs	r2, r3, #1
 80178e8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80178ec:	bf81      	itttt	hi
 80178ee:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80178f2:	eb03 0c02 	addhi.w	ip, r3, r2
 80178f6:	f240 135d 	movwhi	r3, #349	; 0x15d
 80178fa:	608b      	strhi	r3, [r1, #8]
 80178fc:	680b      	ldr	r3, [r1, #0]
 80178fe:	460f      	mov	r7, r1
 8017900:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8017904:	b087      	sub	sp, #28
 8017906:	f847 3b1c 	str.w	r3, [r7], #28
 801790a:	f04f 0b00 	mov.w	fp, #0
 801790e:	4606      	mov	r6, r0
 8017910:	460c      	mov	r4, r1
 8017912:	bf98      	it	ls
 8017914:	f04f 0c00 	movls.w	ip, #0
 8017918:	46b8      	mov	r8, r7
 801791a:	465a      	mov	r2, fp
 801791c:	f8cd b00c 	str.w	fp, [sp, #12]
 8017920:	f8cd b008 	str.w	fp, [sp, #8]
 8017924:	46da      	mov	sl, fp
 8017926:	f8cd b004 	str.w	fp, [sp, #4]
 801792a:	68a1      	ldr	r1, [r4, #8]
 801792c:	2900      	cmp	r1, #0
 801792e:	f000 80ec 	beq.w	8017b0a <_scanf_float+0x22e>
 8017932:	682b      	ldr	r3, [r5, #0]
 8017934:	781b      	ldrb	r3, [r3, #0]
 8017936:	2b49      	cmp	r3, #73	; 0x49
 8017938:	d070      	beq.n	8017a1c <_scanf_float+0x140>
 801793a:	d816      	bhi.n	801796a <_scanf_float+0x8e>
 801793c:	2b39      	cmp	r3, #57	; 0x39
 801793e:	d80d      	bhi.n	801795c <_scanf_float+0x80>
 8017940:	2b31      	cmp	r3, #49	; 0x31
 8017942:	d240      	bcs.n	80179c6 <_scanf_float+0xea>
 8017944:	2b2d      	cmp	r3, #45	; 0x2d
 8017946:	d046      	beq.n	80179d6 <_scanf_float+0xfa>
 8017948:	d802      	bhi.n	8017950 <_scanf_float+0x74>
 801794a:	2b2b      	cmp	r3, #43	; 0x2b
 801794c:	d043      	beq.n	80179d6 <_scanf_float+0xfa>
 801794e:	e0dc      	b.n	8017b0a <_scanf_float+0x22e>
 8017950:	2b2e      	cmp	r3, #46	; 0x2e
 8017952:	f000 8092 	beq.w	8017a7a <_scanf_float+0x19e>
 8017956:	2b30      	cmp	r3, #48	; 0x30
 8017958:	d023      	beq.n	80179a2 <_scanf_float+0xc6>
 801795a:	e0d6      	b.n	8017b0a <_scanf_float+0x22e>
 801795c:	2b45      	cmp	r3, #69	; 0x45
 801795e:	f000 8095 	beq.w	8017a8c <_scanf_float+0x1b0>
 8017962:	2b46      	cmp	r3, #70	; 0x46
 8017964:	d077      	beq.n	8017a56 <_scanf_float+0x17a>
 8017966:	2b41      	cmp	r3, #65	; 0x41
 8017968:	e00c      	b.n	8017984 <_scanf_float+0xa8>
 801796a:	2b65      	cmp	r3, #101	; 0x65
 801796c:	f000 808e 	beq.w	8017a8c <_scanf_float+0x1b0>
 8017970:	d80a      	bhi.n	8017988 <_scanf_float+0xac>
 8017972:	2b54      	cmp	r3, #84	; 0x54
 8017974:	d075      	beq.n	8017a62 <_scanf_float+0x186>
 8017976:	d802      	bhi.n	801797e <_scanf_float+0xa2>
 8017978:	2b4e      	cmp	r3, #78	; 0x4e
 801797a:	d034      	beq.n	80179e6 <_scanf_float+0x10a>
 801797c:	e0c5      	b.n	8017b0a <_scanf_float+0x22e>
 801797e:	2b59      	cmp	r3, #89	; 0x59
 8017980:	d075      	beq.n	8017a6e <_scanf_float+0x192>
 8017982:	2b61      	cmp	r3, #97	; 0x61
 8017984:	d046      	beq.n	8017a14 <_scanf_float+0x138>
 8017986:	e0c0      	b.n	8017b0a <_scanf_float+0x22e>
 8017988:	2b6e      	cmp	r3, #110	; 0x6e
 801798a:	d02c      	beq.n	80179e6 <_scanf_float+0x10a>
 801798c:	d804      	bhi.n	8017998 <_scanf_float+0xbc>
 801798e:	2b66      	cmp	r3, #102	; 0x66
 8017990:	d061      	beq.n	8017a56 <_scanf_float+0x17a>
 8017992:	2b69      	cmp	r3, #105	; 0x69
 8017994:	d042      	beq.n	8017a1c <_scanf_float+0x140>
 8017996:	e0b8      	b.n	8017b0a <_scanf_float+0x22e>
 8017998:	2b74      	cmp	r3, #116	; 0x74
 801799a:	d062      	beq.n	8017a62 <_scanf_float+0x186>
 801799c:	2b79      	cmp	r3, #121	; 0x79
 801799e:	d066      	beq.n	8017a6e <_scanf_float+0x192>
 80179a0:	e0b3      	b.n	8017b0a <_scanf_float+0x22e>
 80179a2:	6820      	ldr	r0, [r4, #0]
 80179a4:	f410 7f80 	tst.w	r0, #256	; 0x100
 80179a8:	d00d      	beq.n	80179c6 <_scanf_float+0xea>
 80179aa:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80179ae:	6020      	str	r0, [r4, #0]
 80179b0:	f10a 0a01 	add.w	sl, sl, #1
 80179b4:	f1bc 0f00 	cmp.w	ip, #0
 80179b8:	f000 808a 	beq.w	8017ad0 <_scanf_float+0x1f4>
 80179bc:	3101      	adds	r1, #1
 80179be:	f10c 3cff 	add.w	ip, ip, #4294967295
 80179c2:	60a1      	str	r1, [r4, #8]
 80179c4:	e084      	b.n	8017ad0 <_scanf_float+0x1f4>
 80179c6:	eb12 0f0b 	cmn.w	r2, fp
 80179ca:	f040 809e 	bne.w	8017b0a <_scanf_float+0x22e>
 80179ce:	6821      	ldr	r1, [r4, #0]
 80179d0:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80179d4:	e005      	b.n	80179e2 <_scanf_float+0x106>
 80179d6:	6821      	ldr	r1, [r4, #0]
 80179d8:	0608      	lsls	r0, r1, #24
 80179da:	f140 8096 	bpl.w	8017b0a <_scanf_float+0x22e>
 80179de:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80179e2:	6021      	str	r1, [r4, #0]
 80179e4:	e070      	b.n	8017ac8 <_scanf_float+0x1ec>
 80179e6:	b96a      	cbnz	r2, 8017a04 <_scanf_float+0x128>
 80179e8:	f1ba 0f00 	cmp.w	sl, #0
 80179ec:	d10c      	bne.n	8017a08 <_scanf_float+0x12c>
 80179ee:	6821      	ldr	r1, [r4, #0]
 80179f0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80179f4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80179f8:	d106      	bne.n	8017a08 <_scanf_float+0x12c>
 80179fa:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80179fe:	6021      	str	r1, [r4, #0]
 8017a00:	2201      	movs	r2, #1
 8017a02:	e061      	b.n	8017ac8 <_scanf_float+0x1ec>
 8017a04:	2a02      	cmp	r2, #2
 8017a06:	d05e      	beq.n	8017ac6 <_scanf_float+0x1ea>
 8017a08:	f1bb 0f01 	cmp.w	fp, #1
 8017a0c:	d01e      	beq.n	8017a4c <_scanf_float+0x170>
 8017a0e:	f1bb 0f04 	cmp.w	fp, #4
 8017a12:	e01a      	b.n	8017a4a <_scanf_float+0x16e>
 8017a14:	2a01      	cmp	r2, #1
 8017a16:	d178      	bne.n	8017b0a <_scanf_float+0x22e>
 8017a18:	2202      	movs	r2, #2
 8017a1a:	e055      	b.n	8017ac8 <_scanf_float+0x1ec>
 8017a1c:	f1bb 0f00 	cmp.w	fp, #0
 8017a20:	d10e      	bne.n	8017a40 <_scanf_float+0x164>
 8017a22:	f1ba 0f00 	cmp.w	sl, #0
 8017a26:	d173      	bne.n	8017b10 <_scanf_float+0x234>
 8017a28:	6821      	ldr	r1, [r4, #0]
 8017a2a:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8017a2e:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8017a32:	d171      	bne.n	8017b18 <_scanf_float+0x23c>
 8017a34:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8017a38:	6021      	str	r1, [r4, #0]
 8017a3a:	f04f 0b01 	mov.w	fp, #1
 8017a3e:	e043      	b.n	8017ac8 <_scanf_float+0x1ec>
 8017a40:	f1bb 0f03 	cmp.w	fp, #3
 8017a44:	d002      	beq.n	8017a4c <_scanf_float+0x170>
 8017a46:	f1bb 0f05 	cmp.w	fp, #5
 8017a4a:	d15e      	bne.n	8017b0a <_scanf_float+0x22e>
 8017a4c:	f10b 0b01 	add.w	fp, fp, #1
 8017a50:	fa5f fb8b 	uxtb.w	fp, fp
 8017a54:	e038      	b.n	8017ac8 <_scanf_float+0x1ec>
 8017a56:	f1bb 0f02 	cmp.w	fp, #2
 8017a5a:	d156      	bne.n	8017b0a <_scanf_float+0x22e>
 8017a5c:	f04f 0b03 	mov.w	fp, #3
 8017a60:	e032      	b.n	8017ac8 <_scanf_float+0x1ec>
 8017a62:	f1bb 0f06 	cmp.w	fp, #6
 8017a66:	d150      	bne.n	8017b0a <_scanf_float+0x22e>
 8017a68:	f04f 0b07 	mov.w	fp, #7
 8017a6c:	e02c      	b.n	8017ac8 <_scanf_float+0x1ec>
 8017a6e:	f1bb 0f07 	cmp.w	fp, #7
 8017a72:	d14a      	bne.n	8017b0a <_scanf_float+0x22e>
 8017a74:	f04f 0b08 	mov.w	fp, #8
 8017a78:	e026      	b.n	8017ac8 <_scanf_float+0x1ec>
 8017a7a:	6821      	ldr	r1, [r4, #0]
 8017a7c:	0588      	lsls	r0, r1, #22
 8017a7e:	d544      	bpl.n	8017b0a <_scanf_float+0x22e>
 8017a80:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8017a84:	6021      	str	r1, [r4, #0]
 8017a86:	f8cd a004 	str.w	sl, [sp, #4]
 8017a8a:	e01d      	b.n	8017ac8 <_scanf_float+0x1ec>
 8017a8c:	6821      	ldr	r1, [r4, #0]
 8017a8e:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8017a92:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8017a96:	d004      	beq.n	8017aa2 <_scanf_float+0x1c6>
 8017a98:	0548      	lsls	r0, r1, #21
 8017a9a:	d536      	bpl.n	8017b0a <_scanf_float+0x22e>
 8017a9c:	f1ba 0f00 	cmp.w	sl, #0
 8017aa0:	d03a      	beq.n	8017b18 <_scanf_float+0x23c>
 8017aa2:	0588      	lsls	r0, r1, #22
 8017aa4:	bf5c      	itt	pl
 8017aa6:	9801      	ldrpl	r0, [sp, #4]
 8017aa8:	f8cd 800c 	strpl.w	r8, [sp, #12]
 8017aac:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8017ab0:	bf58      	it	pl
 8017ab2:	ebc0 000a 	rsbpl	r0, r0, sl
 8017ab6:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8017aba:	bf58      	it	pl
 8017abc:	9002      	strpl	r0, [sp, #8]
 8017abe:	6021      	str	r1, [r4, #0]
 8017ac0:	f04f 0a00 	mov.w	sl, #0
 8017ac4:	e000      	b.n	8017ac8 <_scanf_float+0x1ec>
 8017ac6:	2203      	movs	r2, #3
 8017ac8:	f888 3000 	strb.w	r3, [r8]
 8017acc:	f108 0801 	add.w	r8, r8, #1
 8017ad0:	68a3      	ldr	r3, [r4, #8]
 8017ad2:	3b01      	subs	r3, #1
 8017ad4:	60a3      	str	r3, [r4, #8]
 8017ad6:	6923      	ldr	r3, [r4, #16]
 8017ad8:	3301      	adds	r3, #1
 8017ada:	6123      	str	r3, [r4, #16]
 8017adc:	686b      	ldr	r3, [r5, #4]
 8017ade:	3b01      	subs	r3, #1
 8017ae0:	2b00      	cmp	r3, #0
 8017ae2:	606b      	str	r3, [r5, #4]
 8017ae4:	dd03      	ble.n	8017aee <_scanf_float+0x212>
 8017ae6:	682b      	ldr	r3, [r5, #0]
 8017ae8:	3301      	adds	r3, #1
 8017aea:	602b      	str	r3, [r5, #0]
 8017aec:	e71d      	b.n	801792a <_scanf_float+0x4e>
 8017aee:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017af2:	9205      	str	r2, [sp, #20]
 8017af4:	4630      	mov	r0, r6
 8017af6:	4629      	mov	r1, r5
 8017af8:	f8cd c010 	str.w	ip, [sp, #16]
 8017afc:	4798      	blx	r3
 8017afe:	f8dd c010 	ldr.w	ip, [sp, #16]
 8017b02:	9a05      	ldr	r2, [sp, #20]
 8017b04:	2800      	cmp	r0, #0
 8017b06:	f43f af10 	beq.w	801792a <_scanf_float+0x4e>
 8017b0a:	f1ba 0f00 	cmp.w	sl, #0
 8017b0e:	d003      	beq.n	8017b18 <_scanf_float+0x23c>
 8017b10:	6823      	ldr	r3, [r4, #0]
 8017b12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8017b16:	6023      	str	r3, [r4, #0]
 8017b18:	3a01      	subs	r2, #1
 8017b1a:	2a01      	cmp	r2, #1
 8017b1c:	d80e      	bhi.n	8017b3c <_scanf_float+0x260>
 8017b1e:	45b8      	cmp	r8, r7
 8017b20:	d90a      	bls.n	8017b38 <_scanf_float+0x25c>
 8017b22:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017b26:	f818 1d01 	ldrb.w	r1, [r8, #-1]!
 8017b2a:	4630      	mov	r0, r6
 8017b2c:	462a      	mov	r2, r5
 8017b2e:	4798      	blx	r3
 8017b30:	6923      	ldr	r3, [r4, #16]
 8017b32:	3b01      	subs	r3, #1
 8017b34:	6123      	str	r3, [r4, #16]
 8017b36:	e7f2      	b.n	8017b1e <_scanf_float+0x242>
 8017b38:	2501      	movs	r5, #1
 8017b3a:	e0ae      	b.n	8017c9a <_scanf_float+0x3be>
 8017b3c:	f10b 33ff 	add.w	r3, fp, #4294967295
 8017b40:	2b06      	cmp	r3, #6
 8017b42:	d822      	bhi.n	8017b8a <_scanf_float+0x2ae>
 8017b44:	f1bb 0f02 	cmp.w	fp, #2
 8017b48:	d912      	bls.n	8017b70 <_scanf_float+0x294>
 8017b4a:	f1ab 0b03 	sub.w	fp, fp, #3
 8017b4e:	fa5f fb8b 	uxtb.w	fp, fp
 8017b52:	ebcb 0b08 	rsb	fp, fp, r8
 8017b56:	45d8      	cmp	r8, fp
 8017b58:	d017      	beq.n	8017b8a <_scanf_float+0x2ae>
 8017b5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017b5e:	f818 1d01 	ldrb.w	r1, [r8, #-1]!
 8017b62:	4630      	mov	r0, r6
 8017b64:	462a      	mov	r2, r5
 8017b66:	4798      	blx	r3
 8017b68:	6923      	ldr	r3, [r4, #16]
 8017b6a:	3b01      	subs	r3, #1
 8017b6c:	6123      	str	r3, [r4, #16]
 8017b6e:	e7f2      	b.n	8017b56 <_scanf_float+0x27a>
 8017b70:	45b8      	cmp	r8, r7
 8017b72:	d9e1      	bls.n	8017b38 <_scanf_float+0x25c>
 8017b74:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017b78:	f818 1d01 	ldrb.w	r1, [r8, #-1]!
 8017b7c:	4630      	mov	r0, r6
 8017b7e:	462a      	mov	r2, r5
 8017b80:	4798      	blx	r3
 8017b82:	6923      	ldr	r3, [r4, #16]
 8017b84:	3b01      	subs	r3, #1
 8017b86:	6123      	str	r3, [r4, #16]
 8017b88:	e7f2      	b.n	8017b70 <_scanf_float+0x294>
 8017b8a:	6823      	ldr	r3, [r4, #0]
 8017b8c:	05da      	lsls	r2, r3, #23
 8017b8e:	d52c      	bpl.n	8017bea <_scanf_float+0x30e>
 8017b90:	055b      	lsls	r3, r3, #21
 8017b92:	d50c      	bpl.n	8017bae <_scanf_float+0x2d2>
 8017b94:	45b8      	cmp	r8, r7
 8017b96:	d9cf      	bls.n	8017b38 <_scanf_float+0x25c>
 8017b98:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017b9c:	f818 1d01 	ldrb.w	r1, [r8, #-1]!
 8017ba0:	4630      	mov	r0, r6
 8017ba2:	462a      	mov	r2, r5
 8017ba4:	4798      	blx	r3
 8017ba6:	6923      	ldr	r3, [r4, #16]
 8017ba8:	3b01      	subs	r3, #1
 8017baa:	6123      	str	r3, [r4, #16]
 8017bac:	e7f2      	b.n	8017b94 <_scanf_float+0x2b8>
 8017bae:	f818 1c01 	ldrb.w	r1, [r8, #-1]
 8017bb2:	6923      	ldr	r3, [r4, #16]
 8017bb4:	2965      	cmp	r1, #101	; 0x65
 8017bb6:	f103 33ff 	add.w	r3, r3, #4294967295
 8017bba:	f108 3bff 	add.w	fp, r8, #4294967295
 8017bbe:	6123      	str	r3, [r4, #16]
 8017bc0:	d00d      	beq.n	8017bde <_scanf_float+0x302>
 8017bc2:	2945      	cmp	r1, #69	; 0x45
 8017bc4:	d00b      	beq.n	8017bde <_scanf_float+0x302>
 8017bc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017bca:	4630      	mov	r0, r6
 8017bcc:	462a      	mov	r2, r5
 8017bce:	4798      	blx	r3
 8017bd0:	6923      	ldr	r3, [r4, #16]
 8017bd2:	f818 1c02 	ldrb.w	r1, [r8, #-2]
 8017bd6:	3b01      	subs	r3, #1
 8017bd8:	f1a8 0b02 	sub.w	fp, r8, #2
 8017bdc:	6123      	str	r3, [r4, #16]
 8017bde:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017be2:	4630      	mov	r0, r6
 8017be4:	462a      	mov	r2, r5
 8017be6:	4798      	blx	r3
 8017be8:	46d8      	mov	r8, fp
 8017bea:	6825      	ldr	r5, [r4, #0]
 8017bec:	f015 0510 	ands.w	r5, r5, #16
 8017bf0:	d152      	bne.n	8017c98 <_scanf_float+0x3bc>
 8017bf2:	f888 5000 	strb.w	r5, [r8]
 8017bf6:	6823      	ldr	r3, [r4, #0]
 8017bf8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8017bfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017c00:	d105      	bne.n	8017c0e <_scanf_float+0x332>
 8017c02:	9b01      	ldr	r3, [sp, #4]
 8017c04:	ebc3 030a 	rsb	r3, r3, sl
 8017c08:	425a      	negs	r2, r3
 8017c0a:	b96b      	cbnz	r3, 8017c28 <_scanf_float+0x34c>
 8017c0c:	e016      	b.n	8017c3c <_scanf_float+0x360>
 8017c0e:	9b02      	ldr	r3, [sp, #8]
 8017c10:	b1a3      	cbz	r3, 8017c3c <_scanf_float+0x360>
 8017c12:	9b03      	ldr	r3, [sp, #12]
 8017c14:	462a      	mov	r2, r5
 8017c16:	1c59      	adds	r1, r3, #1
 8017c18:	4630      	mov	r0, r6
 8017c1a:	230a      	movs	r3, #10
 8017c1c:	f000 ffca 	bl	8018bb4 <_strtol_r>
 8017c20:	9b02      	ldr	r3, [sp, #8]
 8017c22:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8017c26:	1ac2      	subs	r2, r0, r3
 8017c28:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8017c2c:	4598      	cmp	r8, r3
 8017c2e:	bf28      	it	cs
 8017c30:	f504 78b7 	addcs.w	r8, r4, #366	; 0x16e
 8017c34:	4640      	mov	r0, r8
 8017c36:	491b      	ldr	r1, [pc, #108]	; (8017ca4 <_scanf_float+0x3c8>)
 8017c38:	f000 f8ea 	bl	8017e10 <siprintf>
 8017c3c:	4630      	mov	r0, r6
 8017c3e:	4639      	mov	r1, r7
 8017c40:	2200      	movs	r2, #0
 8017c42:	f000 f9a5 	bl	8017f90 <_strtod_r>
 8017c46:	6822      	ldr	r2, [r4, #0]
 8017c48:	f8d9 3000 	ldr.w	r3, [r9]
 8017c4c:	f012 0f02 	tst.w	r2, #2
 8017c50:	4606      	mov	r6, r0
 8017c52:	460f      	mov	r7, r1
 8017c54:	d003      	beq.n	8017c5e <_scanf_float+0x382>
 8017c56:	1d1a      	adds	r2, r3, #4
 8017c58:	f8c9 2000 	str.w	r2, [r9]
 8017c5c:	e006      	b.n	8017c6c <_scanf_float+0x390>
 8017c5e:	f012 0f04 	tst.w	r2, #4
 8017c62:	f103 0204 	add.w	r2, r3, #4
 8017c66:	f8c9 2000 	str.w	r2, [r9]
 8017c6a:	d003      	beq.n	8017c74 <_scanf_float+0x398>
 8017c6c:	681b      	ldr	r3, [r3, #0]
 8017c6e:	e9c3 6700 	strd	r6, r7, [r3]
 8017c72:	e00d      	b.n	8017c90 <_scanf_float+0x3b4>
 8017c74:	f8d3 8000 	ldr.w	r8, [r3]
 8017c78:	f000 f816 	bl	8017ca8 <__fpclassifyd>
 8017c7c:	b910      	cbnz	r0, 8017c84 <_scanf_float+0x3a8>
 8017c7e:	f000 f84d 	bl	8017d1c <nanf>
 8017c82:	e003      	b.n	8017c8c <_scanf_float+0x3b0>
 8017c84:	4630      	mov	r0, r6
 8017c86:	4639      	mov	r1, r7
 8017c88:	f003 fd1a 	bl	801b6c0 <__aeabi_d2f>
 8017c8c:	f8c8 0000 	str.w	r0, [r8]
 8017c90:	68e3      	ldr	r3, [r4, #12]
 8017c92:	3301      	adds	r3, #1
 8017c94:	60e3      	str	r3, [r4, #12]
 8017c96:	e000      	b.n	8017c9a <_scanf_float+0x3be>
 8017c98:	2500      	movs	r5, #0
 8017c9a:	4628      	mov	r0, r5
 8017c9c:	b007      	add	sp, #28
 8017c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ca2:	bf00      	nop
 8017ca4:	0801d1b9 	.word	0x0801d1b9

08017ca8 <__fpclassifyd>:
 8017ca8:	460a      	mov	r2, r1
 8017caa:	f031 4100 	bics.w	r1, r1, #2147483648	; 0x80000000
 8017cae:	b510      	push	{r4, lr}
 8017cb0:	4603      	mov	r3, r0
 8017cb2:	d01b      	beq.n	8017cec <__fpclassifyd+0x44>
 8017cb4:	480f      	ldr	r0, [pc, #60]	; (8017cf4 <__fpclassifyd+0x4c>)
 8017cb6:	f5a2 1480 	sub.w	r4, r2, #1048576	; 0x100000
 8017cba:	4284      	cmp	r4, r0
 8017cbc:	d910      	bls.n	8017ce0 <__fpclassifyd+0x38>
 8017cbe:	f102 42ff 	add.w	r2, r2, #2139095040	; 0x7f800000
 8017cc2:	480c      	ldr	r0, [pc, #48]	; (8017cf4 <__fpclassifyd+0x4c>)
 8017cc4:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 8017cc8:	4282      	cmp	r2, r0
 8017cca:	d909      	bls.n	8017ce0 <__fpclassifyd+0x38>
 8017ccc:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8017cd0:	d308      	bcc.n	8017ce4 <__fpclassifyd+0x3c>
 8017cd2:	4a09      	ldr	r2, [pc, #36]	; (8017cf8 <__fpclassifyd+0x50>)
 8017cd4:	4291      	cmp	r1, r2
 8017cd6:	d107      	bne.n	8017ce8 <__fpclassifyd+0x40>
 8017cd8:	fab3 f083 	clz	r0, r3
 8017cdc:	0940      	lsrs	r0, r0, #5
 8017cde:	bd10      	pop	{r4, pc}
 8017ce0:	2004      	movs	r0, #4
 8017ce2:	bd10      	pop	{r4, pc}
 8017ce4:	2003      	movs	r0, #3
 8017ce6:	bd10      	pop	{r4, pc}
 8017ce8:	2000      	movs	r0, #0
 8017cea:	bd10      	pop	{r4, pc}
 8017cec:	2800      	cmp	r0, #0
 8017cee:	d1e6      	bne.n	8017cbe <__fpclassifyd+0x16>
 8017cf0:	2002      	movs	r0, #2
 8017cf2:	bd10      	pop	{r4, pc}
 8017cf4:	7fdfffff 	.word	0x7fdfffff
 8017cf8:	7ff00000 	.word	0x7ff00000

08017cfc <_sbrk_r>:
 8017cfc:	b538      	push	{r3, r4, r5, lr}
 8017cfe:	4c06      	ldr	r4, [pc, #24]	; (8017d18 <_sbrk_r+0x1c>)
 8017d00:	2300      	movs	r3, #0
 8017d02:	4605      	mov	r5, r0
 8017d04:	4608      	mov	r0, r1
 8017d06:	6023      	str	r3, [r4, #0]
 8017d08:	f7fc fcde 	bl	80146c8 <_sbrk>
 8017d0c:	1c43      	adds	r3, r0, #1
 8017d0e:	d102      	bne.n	8017d16 <_sbrk_r+0x1a>
 8017d10:	6823      	ldr	r3, [r4, #0]
 8017d12:	b103      	cbz	r3, 8017d16 <_sbrk_r+0x1a>
 8017d14:	602b      	str	r3, [r5, #0]
 8017d16:	bd38      	pop	{r3, r4, r5, pc}
 8017d18:	20001c18 	.word	0x20001c18

08017d1c <nanf>:
 8017d1c:	4800      	ldr	r0, [pc, #0]	; (8017d20 <nanf+0x4>)
 8017d1e:	4770      	bx	lr
 8017d20:	7fc00000 	.word	0x7fc00000

08017d24 <_raise_r>:
 8017d24:	291f      	cmp	r1, #31
 8017d26:	b538      	push	{r3, r4, r5, lr}
 8017d28:	4604      	mov	r4, r0
 8017d2a:	460d      	mov	r5, r1
 8017d2c:	d904      	bls.n	8017d38 <_raise_r+0x14>
 8017d2e:	2316      	movs	r3, #22
 8017d30:	6003      	str	r3, [r0, #0]
 8017d32:	f04f 30ff 	mov.w	r0, #4294967295
 8017d36:	bd38      	pop	{r3, r4, r5, pc}
 8017d38:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017d3a:	b112      	cbz	r2, 8017d42 <_raise_r+0x1e>
 8017d3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017d40:	b94b      	cbnz	r3, 8017d56 <_raise_r+0x32>
 8017d42:	4620      	mov	r0, r4
 8017d44:	f000 f830 	bl	8017da8 <_getpid_r>
 8017d48:	462a      	mov	r2, r5
 8017d4a:	4601      	mov	r1, r0
 8017d4c:	4620      	mov	r0, r4
 8017d4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017d52:	f000 b817 	b.w	8017d84 <_kill_r>
 8017d56:	2b01      	cmp	r3, #1
 8017d58:	d00a      	beq.n	8017d70 <_raise_r+0x4c>
 8017d5a:	1c59      	adds	r1, r3, #1
 8017d5c:	d103      	bne.n	8017d66 <_raise_r+0x42>
 8017d5e:	2316      	movs	r3, #22
 8017d60:	6003      	str	r3, [r0, #0]
 8017d62:	2001      	movs	r0, #1
 8017d64:	bd38      	pop	{r3, r4, r5, pc}
 8017d66:	2400      	movs	r4, #0
 8017d68:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017d6c:	4628      	mov	r0, r5
 8017d6e:	4798      	blx	r3
 8017d70:	2000      	movs	r0, #0
 8017d72:	bd38      	pop	{r3, r4, r5, pc}

08017d74 <raise>:
 8017d74:	4b02      	ldr	r3, [pc, #8]	; (8017d80 <raise+0xc>)
 8017d76:	4601      	mov	r1, r0
 8017d78:	6818      	ldr	r0, [r3, #0]
 8017d7a:	f7ff bfd3 	b.w	8017d24 <_raise_r>
 8017d7e:	bf00      	nop
 8017d80:	20001768 	.word	0x20001768

08017d84 <_kill_r>:
 8017d84:	b538      	push	{r3, r4, r5, lr}
 8017d86:	4c07      	ldr	r4, [pc, #28]	; (8017da4 <_kill_r+0x20>)
 8017d88:	2300      	movs	r3, #0
 8017d8a:	4605      	mov	r5, r0
 8017d8c:	4608      	mov	r0, r1
 8017d8e:	4611      	mov	r1, r2
 8017d90:	6023      	str	r3, [r4, #0]
 8017d92:	f004 ffb3 	bl	801ccfc <_kill>
 8017d96:	1c43      	adds	r3, r0, #1
 8017d98:	d102      	bne.n	8017da0 <_kill_r+0x1c>
 8017d9a:	6823      	ldr	r3, [r4, #0]
 8017d9c:	b103      	cbz	r3, 8017da0 <_kill_r+0x1c>
 8017d9e:	602b      	str	r3, [r5, #0]
 8017da0:	bd38      	pop	{r3, r4, r5, pc}
 8017da2:	bf00      	nop
 8017da4:	20001c18 	.word	0x20001c18

08017da8 <_getpid_r>:
 8017da8:	f004 bfa0 	b.w	801ccec <_getpid>

08017dac <sniprintf>:
 8017dac:	b40c      	push	{r2, r3}
 8017dae:	b530      	push	{r4, r5, lr}
 8017db0:	4b16      	ldr	r3, [pc, #88]	; (8017e0c <sniprintf+0x60>)
 8017db2:	1e0c      	subs	r4, r1, #0
 8017db4:	b09d      	sub	sp, #116	; 0x74
 8017db6:	681d      	ldr	r5, [r3, #0]
 8017db8:	da04      	bge.n	8017dc4 <sniprintf+0x18>
 8017dba:	238b      	movs	r3, #139	; 0x8b
 8017dbc:	602b      	str	r3, [r5, #0]
 8017dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8017dc2:	e01e      	b.n	8017e02 <sniprintf+0x56>
 8017dc4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8017dc8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017dcc:	bf14      	ite	ne
 8017dce:	f104 33ff 	addne.w	r3, r4, #4294967295
 8017dd2:	4623      	moveq	r3, r4
 8017dd4:	9304      	str	r3, [sp, #16]
 8017dd6:	9307      	str	r3, [sp, #28]
 8017dd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017ddc:	9002      	str	r0, [sp, #8]
 8017dde:	9006      	str	r0, [sp, #24]
 8017de0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017de4:	4628      	mov	r0, r5
 8017de6:	ab21      	add	r3, sp, #132	; 0x84
 8017de8:	a902      	add	r1, sp, #8
 8017dea:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017dec:	9301      	str	r3, [sp, #4]
 8017dee:	f002 fe9d 	bl	801ab2c <_svfiprintf_r>
 8017df2:	1c43      	adds	r3, r0, #1
 8017df4:	bfbc      	itt	lt
 8017df6:	238b      	movlt	r3, #139	; 0x8b
 8017df8:	602b      	strlt	r3, [r5, #0]
 8017dfa:	b114      	cbz	r4, 8017e02 <sniprintf+0x56>
 8017dfc:	9b02      	ldr	r3, [sp, #8]
 8017dfe:	2200      	movs	r2, #0
 8017e00:	701a      	strb	r2, [r3, #0]
 8017e02:	b01d      	add	sp, #116	; 0x74
 8017e04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017e08:	b002      	add	sp, #8
 8017e0a:	4770      	bx	lr
 8017e0c:	20001768 	.word	0x20001768

08017e10 <siprintf>:
 8017e10:	b40e      	push	{r1, r2, r3}
 8017e12:	b500      	push	{lr}
 8017e14:	b09c      	sub	sp, #112	; 0x70
 8017e16:	f44f 7102 	mov.w	r1, #520	; 0x208
 8017e1a:	f8ad 1014 	strh.w	r1, [sp, #20]
 8017e1e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017e22:	9104      	str	r1, [sp, #16]
 8017e24:	9107      	str	r1, [sp, #28]
 8017e26:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017e2a:	ab1d      	add	r3, sp, #116	; 0x74
 8017e2c:	f8ad 1016 	strh.w	r1, [sp, #22]
 8017e30:	4908      	ldr	r1, [pc, #32]	; (8017e54 <siprintf+0x44>)
 8017e32:	f853 2b04 	ldr.w	r2, [r3], #4
 8017e36:	9002      	str	r0, [sp, #8]
 8017e38:	9006      	str	r0, [sp, #24]
 8017e3a:	6808      	ldr	r0, [r1, #0]
 8017e3c:	9301      	str	r3, [sp, #4]
 8017e3e:	a902      	add	r1, sp, #8
 8017e40:	f002 fe74 	bl	801ab2c <_svfiprintf_r>
 8017e44:	9b02      	ldr	r3, [sp, #8]
 8017e46:	2200      	movs	r2, #0
 8017e48:	701a      	strb	r2, [r3, #0]
 8017e4a:	b01c      	add	sp, #112	; 0x70
 8017e4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017e50:	b003      	add	sp, #12
 8017e52:	4770      	bx	lr
 8017e54:	20001768 	.word	0x20001768

08017e58 <__sread>:
 8017e58:	b510      	push	{r4, lr}
 8017e5a:	460c      	mov	r4, r1
 8017e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017e60:	f002 ff56 	bl	801ad10 <_read_r>
 8017e64:	2800      	cmp	r0, #0
 8017e66:	bfab      	itete	ge
 8017e68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017e6a:	89a3      	ldrhlt	r3, [r4, #12]
 8017e6c:	181b      	addge	r3, r3, r0
 8017e6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017e72:	bfac      	ite	ge
 8017e74:	6563      	strge	r3, [r4, #84]	; 0x54
 8017e76:	81a3      	strhlt	r3, [r4, #12]
 8017e78:	bd10      	pop	{r4, pc}

08017e7a <__swrite>:
 8017e7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e7e:	461d      	mov	r5, r3
 8017e80:	898b      	ldrh	r3, [r1, #12]
 8017e82:	05db      	lsls	r3, r3, #23
 8017e84:	4607      	mov	r7, r0
 8017e86:	460c      	mov	r4, r1
 8017e88:	4616      	mov	r6, r2
 8017e8a:	d505      	bpl.n	8017e98 <__swrite+0x1e>
 8017e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017e90:	2200      	movs	r2, #0
 8017e92:	2302      	movs	r3, #2
 8017e94:	f002 f958 	bl	801a148 <_lseek_r>
 8017e98:	89a3      	ldrh	r3, [r4, #12]
 8017e9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017e9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017ea2:	81a3      	strh	r3, [r4, #12]
 8017ea4:	4638      	mov	r0, r7
 8017ea6:	4632      	mov	r2, r6
 8017ea8:	462b      	mov	r3, r5
 8017eaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017eae:	f000 bf5b 	b.w	8018d68 <_write_r>

08017eb2 <__sseek>:
 8017eb2:	b510      	push	{r4, lr}
 8017eb4:	460c      	mov	r4, r1
 8017eb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017eba:	f002 f945 	bl	801a148 <_lseek_r>
 8017ebe:	1c43      	adds	r3, r0, #1
 8017ec0:	89a3      	ldrh	r3, [r4, #12]
 8017ec2:	bf15      	itete	ne
 8017ec4:	6560      	strne	r0, [r4, #84]	; 0x54
 8017ec6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017eca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017ece:	81a3      	strheq	r3, [r4, #12]
 8017ed0:	bf18      	it	ne
 8017ed2:	81a3      	strhne	r3, [r4, #12]
 8017ed4:	bd10      	pop	{r4, pc}

08017ed6 <__sclose>:
 8017ed6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017eda:	f000 bfc3 	b.w	8018e64 <_close_r>

08017ede <strlen>:
 8017ede:	4603      	mov	r3, r0
 8017ee0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017ee4:	2a00      	cmp	r2, #0
 8017ee6:	d1fb      	bne.n	8017ee0 <strlen+0x2>
 8017ee8:	1a18      	subs	r0, r3, r0
 8017eea:	3801      	subs	r0, #1
 8017eec:	4770      	bx	lr

08017eee <strncmp>:
 8017eee:	b570      	push	{r4, r5, r6, lr}
 8017ef0:	b1aa      	cbz	r2, 8017f1e <strncmp+0x30>
 8017ef2:	1e45      	subs	r5, r0, #1
 8017ef4:	3901      	subs	r1, #1
 8017ef6:	786b      	ldrb	r3, [r5, #1]
 8017ef8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017efc:	42a3      	cmp	r3, r4
 8017efe:	f105 0601 	add.w	r6, r5, #1
 8017f02:	d106      	bne.n	8017f12 <strncmp+0x24>
 8017f04:	f06f 0401 	mvn.w	r4, #1
 8017f08:	1b64      	subs	r4, r4, r5
 8017f0a:	4414      	add	r4, r2
 8017f0c:	42e0      	cmn	r0, r4
 8017f0e:	d102      	bne.n	8017f16 <strncmp+0x28>
 8017f10:	461c      	mov	r4, r3
 8017f12:	1b18      	subs	r0, r3, r4
 8017f14:	bd70      	pop	{r4, r5, r6, pc}
 8017f16:	4635      	mov	r5, r6
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	d1ec      	bne.n	8017ef6 <strncmp+0x8>
 8017f1c:	e7f8      	b.n	8017f10 <strncmp+0x22>
 8017f1e:	4610      	mov	r0, r2
 8017f20:	bd70      	pop	{r4, r5, r6, pc}

08017f22 <match>:
 8017f22:	b530      	push	{r4, r5, lr}
 8017f24:	6803      	ldr	r3, [r0, #0]
 8017f26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017f2a:	3301      	adds	r3, #1
 8017f2c:	b14c      	cbz	r4, 8017f42 <match+0x20>
 8017f2e:	781a      	ldrb	r2, [r3, #0]
 8017f30:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8017f34:	2d19      	cmp	r5, #25
 8017f36:	bf98      	it	ls
 8017f38:	3220      	addls	r2, #32
 8017f3a:	42a2      	cmp	r2, r4
 8017f3c:	d0f3      	beq.n	8017f26 <match+0x4>
 8017f3e:	2000      	movs	r0, #0
 8017f40:	bd30      	pop	{r4, r5, pc}
 8017f42:	6003      	str	r3, [r0, #0]
 8017f44:	2001      	movs	r0, #1
 8017f46:	bd30      	pop	{r4, r5, pc}

08017f48 <sulp>:
 8017f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f4c:	460f      	mov	r7, r1
 8017f4e:	4690      	mov	r8, r2
 8017f50:	f002 fc42 	bl	801a7d8 <__ulp>
 8017f54:	4604      	mov	r4, r0
 8017f56:	460d      	mov	r5, r1
 8017f58:	f1b8 0f00 	cmp.w	r8, #0
 8017f5c:	d011      	beq.n	8017f82 <sulp+0x3a>
 8017f5e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8017f62:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8017f66:	2b00      	cmp	r3, #0
 8017f68:	dd0b      	ble.n	8017f82 <sulp+0x3a>
 8017f6a:	051b      	lsls	r3, r3, #20
 8017f6c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8017f70:	2400      	movs	r4, #0
 8017f72:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8017f76:	4622      	mov	r2, r4
 8017f78:	462b      	mov	r3, r5
 8017f7a:	f003 f8bf 	bl	801b0fc <__aeabi_dmul>
 8017f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f82:	4620      	mov	r0, r4
 8017f84:	4629      	mov	r1, r5
 8017f86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f8a:	0000      	movs	r0, r0
 8017f8c:	0000      	movs	r0, r0
	...

08017f90 <_strtod_r>:
 8017f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f94:	b09f      	sub	sp, #124	; 0x7c
 8017f96:	2300      	movs	r3, #0
 8017f98:	4683      	mov	fp, r0
 8017f9a:	468a      	mov	sl, r1
 8017f9c:	9216      	str	r2, [sp, #88]	; 0x58
 8017f9e:	931a      	str	r3, [sp, #104]	; 0x68
 8017fa0:	f04f 0800 	mov.w	r8, #0
 8017fa4:	f04f 0900 	mov.w	r9, #0
 8017fa8:	9119      	str	r1, [sp, #100]	; 0x64
 8017faa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017fac:	781a      	ldrb	r2, [r3, #0]
 8017fae:	2a0d      	cmp	r2, #13
 8017fb0:	d805      	bhi.n	8017fbe <_strtod_r+0x2e>
 8017fb2:	2a09      	cmp	r2, #9
 8017fb4:	d213      	bcs.n	8017fde <_strtod_r+0x4e>
 8017fb6:	2a00      	cmp	r2, #0
 8017fb8:	f000 81be 	beq.w	8018338 <_strtod_r+0x3a8>
 8017fbc:	e012      	b.n	8017fe4 <_strtod_r+0x54>
 8017fbe:	2a2b      	cmp	r2, #43	; 0x2b
 8017fc0:	d006      	beq.n	8017fd0 <_strtod_r+0x40>
 8017fc2:	2a2d      	cmp	r2, #45	; 0x2d
 8017fc4:	d002      	beq.n	8017fcc <_strtod_r+0x3c>
 8017fc6:	2a20      	cmp	r2, #32
 8017fc8:	d10c      	bne.n	8017fe4 <_strtod_r+0x54>
 8017fca:	e008      	b.n	8017fde <_strtod_r+0x4e>
 8017fcc:	2201      	movs	r2, #1
 8017fce:	e000      	b.n	8017fd2 <_strtod_r+0x42>
 8017fd0:	2200      	movs	r2, #0
 8017fd2:	9209      	str	r2, [sp, #36]	; 0x24
 8017fd4:	1c5a      	adds	r2, r3, #1
 8017fd6:	9219      	str	r2, [sp, #100]	; 0x64
 8017fd8:	785b      	ldrb	r3, [r3, #1]
 8017fda:	b92b      	cbnz	r3, 8017fe8 <_strtod_r+0x58>
 8017fdc:	e1ac      	b.n	8018338 <_strtod_r+0x3a8>
 8017fde:	3301      	adds	r3, #1
 8017fe0:	9319      	str	r3, [sp, #100]	; 0x64
 8017fe2:	e7e2      	b.n	8017faa <_strtod_r+0x1a>
 8017fe4:	2300      	movs	r3, #0
 8017fe6:	9309      	str	r3, [sp, #36]	; 0x24
 8017fe8:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8017fea:	7823      	ldrb	r3, [r4, #0]
 8017fec:	2b30      	cmp	r3, #48	; 0x30
 8017fee:	d15c      	bne.n	80180aa <_strtod_r+0x11a>
 8017ff0:	7863      	ldrb	r3, [r4, #1]
 8017ff2:	2b58      	cmp	r3, #88	; 0x58
 8017ff4:	d001      	beq.n	8017ffa <_strtod_r+0x6a>
 8017ff6:	2b78      	cmp	r3, #120	; 0x78
 8017ff8:	d14c      	bne.n	8018094 <_strtod_r+0x104>
 8017ffa:	ab1a      	add	r3, sp, #104	; 0x68
 8017ffc:	9300      	str	r3, [sp, #0]
 8017ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018000:	9301      	str	r3, [sp, #4]
 8018002:	4658      	mov	r0, fp
 8018004:	a919      	add	r1, sp, #100	; 0x64
 8018006:	4ab1      	ldr	r2, [pc, #708]	; (80182cc <_strtod_r+0x33c>)
 8018008:	ab1b      	add	r3, sp, #108	; 0x6c
 801800a:	f001 fdd8 	bl	8019bbe <__gethex>
 801800e:	f010 0607 	ands.w	r6, r0, #7
 8018012:	4605      	mov	r5, r0
 8018014:	f000 859b 	beq.w	8018b4e <_strtod_r+0xbbe>
 8018018:	2e06      	cmp	r6, #6
 801801a:	d105      	bne.n	8018028 <_strtod_r+0x98>
 801801c:	3401      	adds	r4, #1
 801801e:	2300      	movs	r3, #0
 8018020:	9419      	str	r4, [sp, #100]	; 0x64
 8018022:	9309      	str	r3, [sp, #36]	; 0x24
 8018024:	f000 bd93 	b.w	8018b4e <_strtod_r+0xbbe>
 8018028:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801802a:	b13a      	cbz	r2, 801803c <_strtod_r+0xac>
 801802c:	a81c      	add	r0, sp, #112	; 0x70
 801802e:	2135      	movs	r1, #53	; 0x35
 8018030:	f002 fcc0 	bl	801a9b4 <__copybits>
 8018034:	4658      	mov	r0, fp
 8018036:	991a      	ldr	r1, [sp, #104]	; 0x68
 8018038:	f002 f936 	bl	801a2a8 <_Bfree>
 801803c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801803e:	2e06      	cmp	r6, #6
 8018040:	d821      	bhi.n	8018086 <_strtod_r+0xf6>
 8018042:	e8df f006 	tbb	[pc, r6]
 8018046:	0d04      	.short	0x0d04
 8018048:	0d1c1708 	.word	0x0d1c1708
 801804c:	04          	.byte	0x04
 801804d:	00          	.byte	0x00
 801804e:	f04f 0900 	mov.w	r9, #0
 8018052:	46c8      	mov	r8, r9
 8018054:	e017      	b.n	8018086 <_strtod_r+0xf6>
 8018056:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 801805a:	f8dd 9074 	ldr.w	r9, [sp, #116]	; 0x74
 801805e:	e012      	b.n	8018086 <_strtod_r+0xf6>
 8018060:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018062:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8018066:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801806a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801806e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8018072:	e008      	b.n	8018086 <_strtod_r+0xf6>
 8018074:	f8df 9258 	ldr.w	r9, [pc, #600]	; 80182d0 <_strtod_r+0x340>
 8018078:	f04f 0800 	mov.w	r8, #0
 801807c:	e003      	b.n	8018086 <_strtod_r+0xf6>
 801807e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8018082:	f04f 38ff 	mov.w	r8, #4294967295
 8018086:	0729      	lsls	r1, r5, #28
 8018088:	f140 8561 	bpl.w	8018b4e <_strtod_r+0xbbe>
 801808c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8018090:	f000 bd5d 	b.w	8018b4e <_strtod_r+0xbbe>
 8018094:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018096:	1c5a      	adds	r2, r3, #1
 8018098:	9219      	str	r2, [sp, #100]	; 0x64
 801809a:	785b      	ldrb	r3, [r3, #1]
 801809c:	2b30      	cmp	r3, #48	; 0x30
 801809e:	d0f9      	beq.n	8018094 <_strtod_r+0x104>
 80180a0:	2b00      	cmp	r3, #0
 80180a2:	f000 8554 	beq.w	8018b4e <_strtod_r+0xbbe>
 80180a6:	2301      	movs	r3, #1
 80180a8:	e000      	b.n	80180ac <_strtod_r+0x11c>
 80180aa:	2300      	movs	r3, #0
 80180ac:	2600      	movs	r6, #0
 80180ae:	9304      	str	r3, [sp, #16]
 80180b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80180b2:	9305      	str	r3, [sp, #20]
 80180b4:	9603      	str	r6, [sp, #12]
 80180b6:	4635      	mov	r5, r6
 80180b8:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80180ba:	7827      	ldrb	r7, [r4, #0]
 80180bc:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80180c0:	b2da      	uxtb	r2, r3
 80180c2:	2a09      	cmp	r2, #9
 80180c4:	d810      	bhi.n	80180e8 <_strtod_r+0x158>
 80180c6:	2d08      	cmp	r5, #8
 80180c8:	bfd8      	it	le
 80180ca:	9903      	ldrle	r1, [sp, #12]
 80180cc:	f04f 020a 	mov.w	r2, #10
 80180d0:	bfd8      	it	le
 80180d2:	fb02 3301 	mlale	r3, r2, r1, r3
 80180d6:	f104 0401 	add.w	r4, r4, #1
 80180da:	bfd4      	ite	le
 80180dc:	9303      	strle	r3, [sp, #12]
 80180de:	fb02 3606 	mlagt	r6, r2, r6, r3
 80180e2:	3501      	adds	r5, #1
 80180e4:	9419      	str	r4, [sp, #100]	; 0x64
 80180e6:	e7e7      	b.n	80180b8 <_strtod_r+0x128>
 80180e8:	4658      	mov	r0, fp
 80180ea:	f002 f829 	bl	801a140 <_localeconv_r>
 80180ee:	6801      	ldr	r1, [r0, #0]
 80180f0:	9102      	str	r1, [sp, #8]
 80180f2:	4658      	mov	r0, fp
 80180f4:	f002 f824 	bl	801a140 <_localeconv_r>
 80180f8:	6800      	ldr	r0, [r0, #0]
 80180fa:	f7ff fef0 	bl	8017ede <strlen>
 80180fe:	9902      	ldr	r1, [sp, #8]
 8018100:	4602      	mov	r2, r0
 8018102:	4620      	mov	r0, r4
 8018104:	f7ff fef3 	bl	8017eee <strncmp>
 8018108:	b128      	cbz	r0, 8018116 <_strtod_r+0x186>
 801810a:	2000      	movs	r0, #0
 801810c:	463b      	mov	r3, r7
 801810e:	462c      	mov	r4, r5
 8018110:	9002      	str	r0, [sp, #8]
 8018112:	4607      	mov	r7, r0
 8018114:	e05d      	b.n	80181d2 <_strtod_r+0x242>
 8018116:	9002      	str	r0, [sp, #8]
 8018118:	4658      	mov	r0, fp
 801811a:	f002 f811 	bl	801a140 <_localeconv_r>
 801811e:	6800      	ldr	r0, [r0, #0]
 8018120:	f7ff fedd 	bl	8017ede <strlen>
 8018124:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018126:	9902      	ldr	r1, [sp, #8]
 8018128:	181a      	adds	r2, r3, r0
 801812a:	9219      	str	r2, [sp, #100]	; 0x64
 801812c:	5c1b      	ldrb	r3, [r3, r0]
 801812e:	2d00      	cmp	r5, #0
 8018130:	d147      	bne.n	80181c2 <_strtod_r+0x232>
 8018132:	4628      	mov	r0, r5
 8018134:	2b30      	cmp	r3, #48	; 0x30
 8018136:	d105      	bne.n	8018144 <_strtod_r+0x1b4>
 8018138:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801813a:	1c5a      	adds	r2, r3, #1
 801813c:	9219      	str	r2, [sp, #100]	; 0x64
 801813e:	3001      	adds	r0, #1
 8018140:	785b      	ldrb	r3, [r3, #1]
 8018142:	e7f7      	b.n	8018134 <_strtod_r+0x1a4>
 8018144:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8018148:	2a08      	cmp	r2, #8
 801814a:	d848      	bhi.n	80181de <_strtod_r+0x24e>
 801814c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801814e:	9002      	str	r0, [sp, #8]
 8018150:	2000      	movs	r0, #0
 8018152:	9205      	str	r2, [sp, #20]
 8018154:	4604      	mov	r4, r0
 8018156:	3b30      	subs	r3, #48	; 0x30
 8018158:	f100 0101 	add.w	r1, r0, #1
 801815c:	d02b      	beq.n	80181b6 <_strtod_r+0x226>
 801815e:	9a02      	ldr	r2, [sp, #8]
 8018160:	440a      	add	r2, r1
 8018162:	9202      	str	r2, [sp, #8]
 8018164:	1907      	adds	r7, r0, r4
 8018166:	4621      	mov	r1, r4
 8018168:	42b9      	cmp	r1, r7
 801816a:	d013      	beq.n	8018194 <_strtod_r+0x204>
 801816c:	3101      	adds	r1, #1
 801816e:	f101 3eff 	add.w	lr, r1, #4294967295
 8018172:	f1be 0f08 	cmp.w	lr, #8
 8018176:	dc06      	bgt.n	8018186 <_strtod_r+0x1f6>
 8018178:	9a03      	ldr	r2, [sp, #12]
 801817a:	f04f 0e0a 	mov.w	lr, #10
 801817e:	fb0e f202 	mul.w	r2, lr, r2
 8018182:	9203      	str	r2, [sp, #12]
 8018184:	e7f0      	b.n	8018168 <_strtod_r+0x1d8>
 8018186:	2910      	cmp	r1, #16
 8018188:	bfdc      	itt	le
 801818a:	f04f 0e0a 	movle.w	lr, #10
 801818e:	fb0e f606 	mulle.w	r6, lr, r6
 8018192:	e7e9      	b.n	8018168 <_strtod_r+0x1d8>
 8018194:	4420      	add	r0, r4
 8018196:	2808      	cmp	r0, #8
 8018198:	f100 0401 	add.w	r4, r0, #1
 801819c:	dc05      	bgt.n	80181aa <_strtod_r+0x21a>
 801819e:	9a03      	ldr	r2, [sp, #12]
 80181a0:	210a      	movs	r1, #10
 80181a2:	fb01 3302 	mla	r3, r1, r2, r3
 80181a6:	9303      	str	r3, [sp, #12]
 80181a8:	e004      	b.n	80181b4 <_strtod_r+0x224>
 80181aa:	2c10      	cmp	r4, #16
 80181ac:	bfdc      	itt	le
 80181ae:	210a      	movle	r1, #10
 80181b0:	fb01 3606 	mlale	r6, r1, r6, r3
 80181b4:	2100      	movs	r1, #0
 80181b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80181b8:	1c58      	adds	r0, r3, #1
 80181ba:	9019      	str	r0, [sp, #100]	; 0x64
 80181bc:	785b      	ldrb	r3, [r3, #1]
 80181be:	4608      	mov	r0, r1
 80181c0:	e002      	b.n	80181c8 <_strtod_r+0x238>
 80181c2:	462c      	mov	r4, r5
 80181c4:	4608      	mov	r0, r1
 80181c6:	9102      	str	r1, [sp, #8]
 80181c8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80181cc:	2909      	cmp	r1, #9
 80181ce:	d9c2      	bls.n	8018156 <_strtod_r+0x1c6>
 80181d0:	2701      	movs	r7, #1
 80181d2:	2b65      	cmp	r3, #101	; 0x65
 80181d4:	d001      	beq.n	80181da <_strtod_r+0x24a>
 80181d6:	2b45      	cmp	r3, #69	; 0x45
 80181d8:	d160      	bne.n	801829c <_strtod_r+0x30c>
 80181da:	b974      	cbnz	r4, 80181fa <_strtod_r+0x26a>
 80181dc:	e005      	b.n	80181ea <_strtod_r+0x25a>
 80181de:	2b65      	cmp	r3, #101	; 0x65
 80181e0:	f040 84c3 	bne.w	8018b6a <_strtod_r+0xbda>
 80181e4:	2300      	movs	r3, #0
 80181e6:	9302      	str	r3, [sp, #8]
 80181e8:	2701      	movs	r7, #1
 80181ea:	b928      	cbnz	r0, 80181f8 <_strtod_r+0x268>
 80181ec:	9b04      	ldr	r3, [sp, #16]
 80181ee:	2b00      	cmp	r3, #0
 80181f0:	f000 80a2 	beq.w	8018338 <_strtod_r+0x3a8>
 80181f4:	4604      	mov	r4, r0
 80181f6:	e000      	b.n	80181fa <_strtod_r+0x26a>
 80181f8:	2400      	movs	r4, #0
 80181fa:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 80181fe:	f10a 0301 	add.w	r3, sl, #1
 8018202:	9319      	str	r3, [sp, #100]	; 0x64
 8018204:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8018208:	2b2b      	cmp	r3, #43	; 0x2b
 801820a:	d007      	beq.n	801821c <_strtod_r+0x28c>
 801820c:	2b2d      	cmp	r3, #45	; 0x2d
 801820e:	d002      	beq.n	8018216 <_strtod_r+0x286>
 8018210:	f04f 0c00 	mov.w	ip, #0
 8018214:	e009      	b.n	801822a <_strtod_r+0x29a>
 8018216:	f04f 0c01 	mov.w	ip, #1
 801821a:	e001      	b.n	8018220 <_strtod_r+0x290>
 801821c:	f04f 0c00 	mov.w	ip, #0
 8018220:	f10a 0302 	add.w	r3, sl, #2
 8018224:	9319      	str	r3, [sp, #100]	; 0x64
 8018226:	f89a 3002 	ldrb.w	r3, [sl, #2]
 801822a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801822e:	2909      	cmp	r1, #9
 8018230:	d832      	bhi.n	8018298 <_strtod_r+0x308>
 8018232:	4619      	mov	r1, r3
 8018234:	2930      	cmp	r1, #48	; 0x30
 8018236:	d104      	bne.n	8018242 <_strtod_r+0x2b2>
 8018238:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801823a:	1c59      	adds	r1, r3, #1
 801823c:	9119      	str	r1, [sp, #100]	; 0x64
 801823e:	7859      	ldrb	r1, [r3, #1]
 8018240:	e7f8      	b.n	8018234 <_strtod_r+0x2a4>
 8018242:	f1a1 0e31 	sub.w	lr, r1, #49	; 0x31
 8018246:	f1be 0f08 	cmp.w	lr, #8
 801824a:	460b      	mov	r3, r1
 801824c:	d826      	bhi.n	801829c <_strtod_r+0x30c>
 801824e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018250:	9306      	str	r3, [sp, #24]
 8018252:	3930      	subs	r1, #48	; 0x30
 8018254:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018256:	f103 0e01 	add.w	lr, r3, #1
 801825a:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64
 801825e:	785b      	ldrb	r3, [r3, #1]
 8018260:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8018264:	2a09      	cmp	r2, #9
 8018266:	d805      	bhi.n	8018274 <_strtod_r+0x2e4>
 8018268:	f04f 0e0a 	mov.w	lr, #10
 801826c:	fb0e 3101 	mla	r1, lr, r1, r3
 8018270:	3930      	subs	r1, #48	; 0x30
 8018272:	e7ef      	b.n	8018254 <_strtod_r+0x2c4>
 8018274:	9a06      	ldr	r2, [sp, #24]
 8018276:	ebc2 0e0e 	rsb	lr, r2, lr
 801827a:	f1be 0f08 	cmp.w	lr, #8
 801827e:	f644 6e1f 	movw	lr, #19999	; 0x4e1f
 8018282:	dc03      	bgt.n	801828c <_strtod_r+0x2fc>
 8018284:	4571      	cmp	r1, lr
 8018286:	bfa8      	it	ge
 8018288:	4671      	movge	r1, lr
 801828a:	e000      	b.n	801828e <_strtod_r+0x2fe>
 801828c:	4671      	mov	r1, lr
 801828e:	f1bc 0f00 	cmp.w	ip, #0
 8018292:	d004      	beq.n	801829e <_strtod_r+0x30e>
 8018294:	4249      	negs	r1, r1
 8018296:	e002      	b.n	801829e <_strtod_r+0x30e>
 8018298:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
 801829c:	2100      	movs	r1, #0
 801829e:	2c00      	cmp	r4, #0
 80182a0:	d154      	bne.n	801834c <_strtod_r+0x3bc>
 80182a2:	2800      	cmp	r0, #0
 80182a4:	f040 8453 	bne.w	8018b4e <_strtod_r+0xbbe>
 80182a8:	9a04      	ldr	r2, [sp, #16]
 80182aa:	2a00      	cmp	r2, #0
 80182ac:	f040 844f 	bne.w	8018b4e <_strtod_r+0xbbe>
 80182b0:	2f00      	cmp	r7, #0
 80182b2:	d141      	bne.n	8018338 <_strtod_r+0x3a8>
 80182b4:	2b4e      	cmp	r3, #78	; 0x4e
 80182b6:	d020      	beq.n	80182fa <_strtod_r+0x36a>
 80182b8:	dc02      	bgt.n	80182c0 <_strtod_r+0x330>
 80182ba:	2b49      	cmp	r3, #73	; 0x49
 80182bc:	d00a      	beq.n	80182d4 <_strtod_r+0x344>
 80182be:	e03b      	b.n	8018338 <_strtod_r+0x3a8>
 80182c0:	2b69      	cmp	r3, #105	; 0x69
 80182c2:	d007      	beq.n	80182d4 <_strtod_r+0x344>
 80182c4:	2b6e      	cmp	r3, #110	; 0x6e
 80182c6:	d018      	beq.n	80182fa <_strtod_r+0x36a>
 80182c8:	e036      	b.n	8018338 <_strtod_r+0x3a8>
 80182ca:	bf00      	nop
 80182cc:	0801d200 	.word	0x0801d200
 80182d0:	7ff00000 	.word	0x7ff00000
 80182d4:	a819      	add	r0, sp, #100	; 0x64
 80182d6:	49a6      	ldr	r1, [pc, #664]	; (8018570 <_strtod_r+0x5e0>)
 80182d8:	f7ff fe23 	bl	8017f22 <match>
 80182dc:	b360      	cbz	r0, 8018338 <_strtod_r+0x3a8>
 80182de:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80182e0:	49a4      	ldr	r1, [pc, #656]	; (8018574 <_strtod_r+0x5e4>)
 80182e2:	3b01      	subs	r3, #1
 80182e4:	a819      	add	r0, sp, #100	; 0x64
 80182e6:	9319      	str	r3, [sp, #100]	; 0x64
 80182e8:	f7ff fe1b 	bl	8017f22 <match>
 80182ec:	b910      	cbnz	r0, 80182f4 <_strtod_r+0x364>
 80182ee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80182f0:	3301      	adds	r3, #1
 80182f2:	9319      	str	r3, [sp, #100]	; 0x64
 80182f4:	f8df 9294 	ldr.w	r9, [pc, #660]	; 801858c <_strtod_r+0x5fc>
 80182f8:	e01a      	b.n	8018330 <_strtod_r+0x3a0>
 80182fa:	a819      	add	r0, sp, #100	; 0x64
 80182fc:	499e      	ldr	r1, [pc, #632]	; (8018578 <_strtod_r+0x5e8>)
 80182fe:	f7ff fe10 	bl	8017f22 <match>
 8018302:	b1c8      	cbz	r0, 8018338 <_strtod_r+0x3a8>
 8018304:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018306:	781b      	ldrb	r3, [r3, #0]
 8018308:	2b28      	cmp	r3, #40	; 0x28
 801830a:	d10f      	bne.n	801832c <_strtod_r+0x39c>
 801830c:	a819      	add	r0, sp, #100	; 0x64
 801830e:	499b      	ldr	r1, [pc, #620]	; (801857c <_strtod_r+0x5ec>)
 8018310:	aa1c      	add	r2, sp, #112	; 0x70
 8018312:	f001 fe8b 	bl	801a02c <__hexnan>
 8018316:	2805      	cmp	r0, #5
 8018318:	d108      	bne.n	801832c <_strtod_r+0x39c>
 801831a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801831c:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8018320:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8018324:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8018328:	f000 bc11 	b.w	8018b4e <_strtod_r+0xbbe>
 801832c:	f8df 9260 	ldr.w	r9, [pc, #608]	; 8018590 <_strtod_r+0x600>
 8018330:	f04f 0800 	mov.w	r8, #0
 8018334:	f000 bc0b 	b.w	8018b4e <_strtod_r+0xbbe>
 8018338:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801833a:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
 801833e:	2b00      	cmp	r3, #0
 8018340:	f000 8410 	beq.w	8018b64 <_strtod_r+0xbd4>
 8018344:	2300      	movs	r3, #0
 8018346:	9309      	str	r3, [sp, #36]	; 0x24
 8018348:	f000 bc03 	b.w	8018b52 <_strtod_r+0xbc2>
 801834c:	9b02      	ldr	r3, [sp, #8]
 801834e:	9803      	ldr	r0, [sp, #12]
 8018350:	1acb      	subs	r3, r1, r3
 8018352:	2d00      	cmp	r5, #0
 8018354:	bf14      	ite	ne
 8018356:	46aa      	movne	sl, r5
 8018358:	46a2      	moveq	sl, r4
 801835a:	2c10      	cmp	r4, #16
 801835c:	4625      	mov	r5, r4
 801835e:	9304      	str	r3, [sp, #16]
 8018360:	bfa8      	it	ge
 8018362:	2510      	movge	r5, #16
 8018364:	f002 fe54 	bl	801b010 <__aeabi_ui2d>
 8018368:	2d09      	cmp	r5, #9
 801836a:	4680      	mov	r8, r0
 801836c:	4689      	mov	r9, r1
 801836e:	dd13      	ble.n	8018398 <_strtod_r+0x408>
 8018370:	4b83      	ldr	r3, [pc, #524]	; (8018580 <_strtod_r+0x5f0>)
 8018372:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8018376:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801837a:	f002 febf 	bl	801b0fc <__aeabi_dmul>
 801837e:	4680      	mov	r8, r0
 8018380:	4630      	mov	r0, r6
 8018382:	4689      	mov	r9, r1
 8018384:	f002 fe44 	bl	801b010 <__aeabi_ui2d>
 8018388:	4602      	mov	r2, r0
 801838a:	460b      	mov	r3, r1
 801838c:	4640      	mov	r0, r8
 801838e:	4649      	mov	r1, r9
 8018390:	f002 fd02 	bl	801ad98 <__adddf3>
 8018394:	4680      	mov	r8, r0
 8018396:	4689      	mov	r9, r1
 8018398:	2c0f      	cmp	r4, #15
 801839a:	dc37      	bgt.n	801840c <_strtod_r+0x47c>
 801839c:	9b04      	ldr	r3, [sp, #16]
 801839e:	2b00      	cmp	r3, #0
 80183a0:	f000 83d5 	beq.w	8018b4e <_strtod_r+0xbbe>
 80183a4:	dd24      	ble.n	80183f0 <_strtod_r+0x460>
 80183a6:	2b16      	cmp	r3, #22
 80183a8:	dc07      	bgt.n	80183ba <_strtod_r+0x42a>
 80183aa:	4a75      	ldr	r2, [pc, #468]	; (8018580 <_strtod_r+0x5f0>)
 80183ac:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80183b0:	e9d2 0100 	ldrd	r0, r1, [r2]
 80183b4:	464b      	mov	r3, r9
 80183b6:	4642      	mov	r2, r8
 80183b8:	e015      	b.n	80183e6 <_strtod_r+0x456>
 80183ba:	9a04      	ldr	r2, [sp, #16]
 80183bc:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80183c0:	429a      	cmp	r2, r3
 80183c2:	dc23      	bgt.n	801840c <_strtod_r+0x47c>
 80183c4:	4d6e      	ldr	r5, [pc, #440]	; (8018580 <_strtod_r+0x5f0>)
 80183c6:	f1c4 040f 	rsb	r4, r4, #15
 80183ca:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80183ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80183d2:	4642      	mov	r2, r8
 80183d4:	464b      	mov	r3, r9
 80183d6:	f002 fe91 	bl	801b0fc <__aeabi_dmul>
 80183da:	9b04      	ldr	r3, [sp, #16]
 80183dc:	1b1c      	subs	r4, r3, r4
 80183de:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80183e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80183e6:	f002 fe89 	bl	801b0fc <__aeabi_dmul>
 80183ea:	4680      	mov	r8, r0
 80183ec:	4689      	mov	r9, r1
 80183ee:	e3ae      	b.n	8018b4e <_strtod_r+0xbbe>
 80183f0:	9b04      	ldr	r3, [sp, #16]
 80183f2:	f113 0f16 	cmn.w	r3, #22
 80183f6:	db09      	blt.n	801840c <_strtod_r+0x47c>
 80183f8:	4a61      	ldr	r2, [pc, #388]	; (8018580 <_strtod_r+0x5f0>)
 80183fa:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80183fe:	4640      	mov	r0, r8
 8018400:	4649      	mov	r1, r9
 8018402:	e9d2 2300 	ldrd	r2, r3, [r2]
 8018406:	f002 ffa3 	bl	801b350 <__aeabi_ddiv>
 801840a:	e7ee      	b.n	80183ea <_strtod_r+0x45a>
 801840c:	9b04      	ldr	r3, [sp, #16]
 801840e:	1b65      	subs	r5, r4, r5
 8018410:	441d      	add	r5, r3
 8018412:	2d00      	cmp	r5, #0
 8018414:	dd54      	ble.n	80184c0 <_strtod_r+0x530>
 8018416:	f015 020f 	ands.w	r2, r5, #15
 801841a:	d00a      	beq.n	8018432 <_strtod_r+0x4a2>
 801841c:	4b58      	ldr	r3, [pc, #352]	; (8018580 <_strtod_r+0x5f0>)
 801841e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018422:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018426:	4642      	mov	r2, r8
 8018428:	464b      	mov	r3, r9
 801842a:	f002 fe67 	bl	801b0fc <__aeabi_dmul>
 801842e:	4680      	mov	r8, r0
 8018430:	4689      	mov	r9, r1
 8018432:	f035 050f 	bics.w	r5, r5, #15
 8018436:	f000 80b1 	beq.w	801859c <_strtod_r+0x60c>
 801843a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 801843e:	dd0b      	ble.n	8018458 <_strtod_r+0x4c8>
 8018440:	2400      	movs	r4, #0
 8018442:	46a2      	mov	sl, r4
 8018444:	9405      	str	r4, [sp, #20]
 8018446:	9403      	str	r4, [sp, #12]
 8018448:	2322      	movs	r3, #34	; 0x22
 801844a:	f8cb 3000 	str.w	r3, [fp]
 801844e:	f8df 913c 	ldr.w	r9, [pc, #316]	; 801858c <_strtod_r+0x5fc>
 8018452:	f04f 0800 	mov.w	r8, #0
 8018456:	e180      	b.n	801875a <_strtod_r+0x7ca>
 8018458:	4649      	mov	r1, r9
 801845a:	f8df 9138 	ldr.w	r9, [pc, #312]	; 8018594 <_strtod_r+0x604>
 801845e:	112d      	asrs	r5, r5, #4
 8018460:	4640      	mov	r0, r8
 8018462:	2700      	movs	r7, #0
 8018464:	464e      	mov	r6, r9
 8018466:	2d01      	cmp	r5, #1
 8018468:	dd0a      	ble.n	8018480 <_strtod_r+0x4f0>
 801846a:	07ea      	lsls	r2, r5, #31
 801846c:	d503      	bpl.n	8018476 <_strtod_r+0x4e6>
 801846e:	e9d9 2300 	ldrd	r2, r3, [r9]
 8018472:	f002 fe43 	bl	801b0fc <__aeabi_dmul>
 8018476:	3701      	adds	r7, #1
 8018478:	106d      	asrs	r5, r5, #1
 801847a:	f109 0908 	add.w	r9, r9, #8
 801847e:	e7f2      	b.n	8018466 <_strtod_r+0x4d6>
 8018480:	4680      	mov	r8, r0
 8018482:	f1a1 7954 	sub.w	r9, r1, #55574528	; 0x3500000
 8018486:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
 801848a:	4642      	mov	r2, r8
 801848c:	464b      	mov	r3, r9
 801848e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8018492:	f002 fe33 	bl	801b0fc <__aeabi_dmul>
 8018496:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801849a:	4689      	mov	r9, r1
 801849c:	460a      	mov	r2, r1
 801849e:	0d1b      	lsrs	r3, r3, #20
 80184a0:	4938      	ldr	r1, [pc, #224]	; (8018584 <_strtod_r+0x5f4>)
 80184a2:	051b      	lsls	r3, r3, #20
 80184a4:	428b      	cmp	r3, r1
 80184a6:	4680      	mov	r8, r0
 80184a8:	d8ca      	bhi.n	8018440 <_strtod_r+0x4b0>
 80184aa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80184ae:	428b      	cmp	r3, r1
 80184b0:	bf86      	itte	hi
 80184b2:	f8df 90e4 	ldrhi.w	r9, [pc, #228]	; 8018598 <_strtod_r+0x608>
 80184b6:	f04f 38ff 	movhi.w	r8, #4294967295
 80184ba:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80184be:	e06d      	b.n	801859c <_strtod_r+0x60c>
 80184c0:	d06c      	beq.n	801859c <_strtod_r+0x60c>
 80184c2:	426d      	negs	r5, r5
 80184c4:	f015 020f 	ands.w	r2, r5, #15
 80184c8:	d00a      	beq.n	80184e0 <_strtod_r+0x550>
 80184ca:	4b2d      	ldr	r3, [pc, #180]	; (8018580 <_strtod_r+0x5f0>)
 80184cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80184d0:	4640      	mov	r0, r8
 80184d2:	4649      	mov	r1, r9
 80184d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80184d8:	f002 ff3a 	bl	801b350 <__aeabi_ddiv>
 80184dc:	4680      	mov	r8, r0
 80184de:	4689      	mov	r9, r1
 80184e0:	112d      	asrs	r5, r5, #4
 80184e2:	d05b      	beq.n	801859c <_strtod_r+0x60c>
 80184e4:	2d1f      	cmp	r5, #31
 80184e6:	dd04      	ble.n	80184f2 <_strtod_r+0x562>
 80184e8:	2400      	movs	r4, #0
 80184ea:	46a2      	mov	sl, r4
 80184ec:	9405      	str	r4, [sp, #20]
 80184ee:	9403      	str	r4, [sp, #12]
 80184f0:	e12c      	b.n	801874c <_strtod_r+0x7bc>
 80184f2:	f015 0f10 	tst.w	r5, #16
 80184f6:	bf0c      	ite	eq
 80184f8:	2300      	moveq	r3, #0
 80184fa:	236a      	movne	r3, #106	; 0x6a
 80184fc:	4e22      	ldr	r6, [pc, #136]	; (8018588 <_strtod_r+0x5f8>)
 80184fe:	9302      	str	r3, [sp, #8]
 8018500:	4640      	mov	r0, r8
 8018502:	4649      	mov	r1, r9
 8018504:	2d00      	cmp	r5, #0
 8018506:	dd08      	ble.n	801851a <_strtod_r+0x58a>
 8018508:	07eb      	lsls	r3, r5, #31
 801850a:	d503      	bpl.n	8018514 <_strtod_r+0x584>
 801850c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8018510:	f002 fdf4 	bl	801b0fc <__aeabi_dmul>
 8018514:	106d      	asrs	r5, r5, #1
 8018516:	3608      	adds	r6, #8
 8018518:	e7f4      	b.n	8018504 <_strtod_r+0x574>
 801851a:	9b02      	ldr	r3, [sp, #8]
 801851c:	4680      	mov	r8, r0
 801851e:	4689      	mov	r9, r1
 8018520:	b1eb      	cbz	r3, 801855e <_strtod_r+0x5ce>
 8018522:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8018526:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801852a:	2b00      	cmp	r3, #0
 801852c:	460a      	mov	r2, r1
 801852e:	dd16      	ble.n	801855e <_strtod_r+0x5ce>
 8018530:	2b1f      	cmp	r3, #31
 8018532:	dd0e      	ble.n	8018552 <_strtod_r+0x5c2>
 8018534:	2b34      	cmp	r3, #52	; 0x34
 8018536:	bfde      	ittt	le
 8018538:	3b20      	suble	r3, #32
 801853a:	f04f 31ff 	movle.w	r1, #4294967295
 801853e:	fa01 f303 	lslle.w	r3, r1, r3
 8018542:	f04f 0800 	mov.w	r8, #0
 8018546:	bfcc      	ite	gt
 8018548:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801854c:	ea03 0902 	andle.w	r9, r3, r2
 8018550:	e005      	b.n	801855e <_strtod_r+0x5ce>
 8018552:	f04f 32ff 	mov.w	r2, #4294967295
 8018556:	fa02 f303 	lsl.w	r3, r2, r3
 801855a:	ea03 0800 	and.w	r8, r3, r0
 801855e:	4640      	mov	r0, r8
 8018560:	4649      	mov	r1, r9
 8018562:	2200      	movs	r2, #0
 8018564:	2300      	movs	r3, #0
 8018566:	f003 f831 	bl	801b5cc <__aeabi_dcmpeq>
 801856a:	2800      	cmp	r0, #0
 801856c:	d1bc      	bne.n	80184e8 <_strtod_r+0x558>
 801856e:	e017      	b.n	80185a0 <_strtod_r+0x610>
 8018570:	0801d18a 	.word	0x0801d18a
 8018574:	0801d318 	.word	0x0801d318
 8018578:	0801d192 	.word	0x0801d192
 801857c:	0801d1c0 	.word	0x0801d1c0
 8018580:	0801d330 	.word	0x0801d330
 8018584:	7ca00000 	.word	0x7ca00000
 8018588:	0801d1d8 	.word	0x0801d1d8
 801858c:	7ff00000 	.word	0x7ff00000
 8018590:	fff80000 	.word	0xfff80000
 8018594:	0801d3f8 	.word	0x0801d3f8
 8018598:	7fefffff 	.word	0x7fefffff
 801859c:	2300      	movs	r3, #0
 801859e:	9302      	str	r3, [sp, #8]
 80185a0:	9b03      	ldr	r3, [sp, #12]
 80185a2:	9300      	str	r3, [sp, #0]
 80185a4:	4658      	mov	r0, fp
 80185a6:	9905      	ldr	r1, [sp, #20]
 80185a8:	4652      	mov	r2, sl
 80185aa:	4623      	mov	r3, r4
 80185ac:	f001 fed1 	bl	801a352 <__s2b>
 80185b0:	9005      	str	r0, [sp, #20]
 80185b2:	2800      	cmp	r0, #0
 80185b4:	f43f af44 	beq.w	8018440 <_strtod_r+0x4b0>
 80185b8:	9a04      	ldr	r2, [sp, #16]
 80185ba:	9b04      	ldr	r3, [sp, #16]
 80185bc:	2a00      	cmp	r2, #0
 80185be:	f1c3 0300 	rsb	r3, r3, #0
 80185c2:	f04f 0400 	mov.w	r4, #0
 80185c6:	bfa8      	it	ge
 80185c8:	2300      	movge	r3, #0
 80185ca:	9312      	str	r3, [sp, #72]	; 0x48
 80185cc:	46a2      	mov	sl, r4
 80185ce:	9b05      	ldr	r3, [sp, #20]
 80185d0:	4658      	mov	r0, fp
 80185d2:	6859      	ldr	r1, [r3, #4]
 80185d4:	f001 fe33 	bl	801a23e <_Balloc>
 80185d8:	9003      	str	r0, [sp, #12]
 80185da:	2800      	cmp	r0, #0
 80185dc:	f43f af34 	beq.w	8018448 <_strtod_r+0x4b8>
 80185e0:	9b05      	ldr	r3, [sp, #20]
 80185e2:	691a      	ldr	r2, [r3, #16]
 80185e4:	9b05      	ldr	r3, [sp, #20]
 80185e6:	3202      	adds	r2, #2
 80185e8:	f103 010c 	add.w	r1, r3, #12
 80185ec:	0092      	lsls	r2, r2, #2
 80185ee:	300c      	adds	r0, #12
 80185f0:	f7fe fb0f 	bl	8016c12 <memcpy>
 80185f4:	ab1b      	add	r3, sp, #108	; 0x6c
 80185f6:	9300      	str	r3, [sp, #0]
 80185f8:	ab1c      	add	r3, sp, #112	; 0x70
 80185fa:	9301      	str	r3, [sp, #4]
 80185fc:	4658      	mov	r0, fp
 80185fe:	4642      	mov	r2, r8
 8018600:	464b      	mov	r3, r9
 8018602:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8018606:	f002 f95a 	bl	801a8be <__d2b>
 801860a:	901a      	str	r0, [sp, #104]	; 0x68
 801860c:	2800      	cmp	r0, #0
 801860e:	f43f af1b 	beq.w	8018448 <_strtod_r+0x4b8>
 8018612:	4658      	mov	r0, fp
 8018614:	2101      	movs	r1, #1
 8018616:	f001 ff29 	bl	801a46c <__i2b>
 801861a:	4682      	mov	sl, r0
 801861c:	2800      	cmp	r0, #0
 801861e:	f43f af13 	beq.w	8018448 <_strtod_r+0x4b8>
 8018622:	9b04      	ldr	r3, [sp, #16]
 8018624:	9902      	ldr	r1, [sp, #8]
 8018626:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8018628:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801862c:	9308      	str	r3, [sp, #32]
 801862e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018630:	2b00      	cmp	r3, #0
 8018632:	bfad      	iteet	ge
 8018634:	9a12      	ldrge	r2, [sp, #72]	; 0x48
 8018636:	9a08      	ldrlt	r2, [sp, #32]
 8018638:	9e12      	ldrlt	r6, [sp, #72]	; 0x48
 801863a:	18d6      	addge	r6, r2, r3
 801863c:	bfb8      	it	lt
 801863e:	1ad2      	sublt	r2, r2, r3
 8018640:	eba3 0301 	sub.w	r3, r3, r1
 8018644:	442b      	add	r3, r5
 8018646:	f46f 717f 	mvn.w	r1, #1020	; 0x3fc
 801864a:	bfa8      	it	ge
 801864c:	9a08      	ldrge	r2, [sp, #32]
 801864e:	428b      	cmp	r3, r1
 8018650:	f1c5 0536 	rsb	r5, r5, #54	; 0x36
 8018654:	f280 8086 	bge.w	8018764 <_strtod_r+0x7d4>
 8018658:	1ac9      	subs	r1, r1, r3
 801865a:	291f      	cmp	r1, #31
 801865c:	eba5 0501 	sub.w	r5, r5, r1
 8018660:	bfc8      	it	gt
 8018662:	49b3      	ldrgt	r1, [pc, #716]	; (8018930 <_strtod_r+0x9a0>)
 8018664:	f04f 0001 	mov.w	r0, #1
 8018668:	bfd5      	itete	le
 801866a:	fa00 f301 	lslle.w	r3, r0, r1
 801866e:	1ac9      	subgt	r1, r1, r3
 8018670:	9313      	strle	r3, [sp, #76]	; 0x4c
 8018672:	fa00 f301 	lslgt.w	r3, r0, r1
 8018676:	bfd9      	ittee	le
 8018678:	2300      	movle	r3, #0
 801867a:	9306      	strle	r3, [sp, #24]
 801867c:	9306      	strgt	r3, [sp, #24]
 801867e:	9013      	strgt	r0, [sp, #76]	; 0x4c
 8018680:	1977      	adds	r7, r6, r5
 8018682:	9b02      	ldr	r3, [sp, #8]
 8018684:	42b7      	cmp	r7, r6
 8018686:	4415      	add	r5, r2
 8018688:	441d      	add	r5, r3
 801868a:	463b      	mov	r3, r7
 801868c:	bfa8      	it	ge
 801868e:	4633      	movge	r3, r6
 8018690:	42ab      	cmp	r3, r5
 8018692:	bfa8      	it	ge
 8018694:	462b      	movge	r3, r5
 8018696:	2b00      	cmp	r3, #0
 8018698:	bfc2      	ittt	gt
 801869a:	1aff      	subgt	r7, r7, r3
 801869c:	1aed      	subgt	r5, r5, r3
 801869e:	1af6      	subgt	r6, r6, r3
 80186a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80186a2:	2b00      	cmp	r3, #0
 80186a4:	d163      	bne.n	801876e <_strtod_r+0x7de>
 80186a6:	2f00      	cmp	r7, #0
 80186a8:	dc7a      	bgt.n	80187a0 <_strtod_r+0x810>
 80186aa:	9b08      	ldr	r3, [sp, #32]
 80186ac:	2b00      	cmp	r3, #0
 80186ae:	f040 8081 	bne.w	80187b4 <_strtod_r+0x824>
 80186b2:	2d00      	cmp	r5, #0
 80186b4:	f300 8088 	bgt.w	80187c8 <_strtod_r+0x838>
 80186b8:	2e00      	cmp	r6, #0
 80186ba:	f300 808f 	bgt.w	80187dc <_strtod_r+0x84c>
 80186be:	4658      	mov	r0, fp
 80186c0:	991a      	ldr	r1, [sp, #104]	; 0x68
 80186c2:	9a03      	ldr	r2, [sp, #12]
 80186c4:	f002 f829 	bl	801a71a <__mdiff>
 80186c8:	4604      	mov	r4, r0
 80186ca:	2800      	cmp	r0, #0
 80186cc:	f43f aebc 	beq.w	8018448 <_strtod_r+0x4b8>
 80186d0:	68c3      	ldr	r3, [r0, #12]
 80186d2:	9308      	str	r3, [sp, #32]
 80186d4:	2300      	movs	r3, #0
 80186d6:	60c3      	str	r3, [r0, #12]
 80186d8:	4651      	mov	r1, sl
 80186da:	f002 f802 	bl	801a6e2 <__mcmp>
 80186de:	2800      	cmp	r0, #0
 80186e0:	f280 808a 	bge.w	80187f8 <_strtod_r+0x868>
 80186e4:	9b08      	ldr	r3, [sp, #32]
 80186e6:	2b00      	cmp	r3, #0
 80186e8:	f040 820a 	bne.w	8018b00 <_strtod_r+0xb70>
 80186ec:	f1b8 0f00 	cmp.w	r8, #0
 80186f0:	f040 8206 	bne.w	8018b00 <_strtod_r+0xb70>
 80186f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80186f8:	2b00      	cmp	r3, #0
 80186fa:	f040 8201 	bne.w	8018b00 <_strtod_r+0xb70>
 80186fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8018702:	0d1b      	lsrs	r3, r3, #20
 8018704:	051b      	lsls	r3, r3, #20
 8018706:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801870a:	f240 81f9 	bls.w	8018b00 <_strtod_r+0xb70>
 801870e:	6963      	ldr	r3, [r4, #20]
 8018710:	2b00      	cmp	r3, #0
 8018712:	d06d      	beq.n	80187f0 <_strtod_r+0x860>
 8018714:	4621      	mov	r1, r4
 8018716:	2201      	movs	r2, #1
 8018718:	4658      	mov	r0, fp
 801871a:	f001 ff8f 	bl	801a63c <__lshift>
 801871e:	4651      	mov	r1, sl
 8018720:	4604      	mov	r4, r0
 8018722:	f001 ffde 	bl	801a6e2 <__mcmp>
 8018726:	2800      	cmp	r0, #0
 8018728:	f340 81ea 	ble.w	8018b00 <_strtod_r+0xb70>
 801872c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8018730:	9a02      	ldr	r2, [sp, #8]
 8018732:	0d1b      	lsrs	r3, r3, #20
 8018734:	051b      	lsls	r3, r3, #20
 8018736:	2a00      	cmp	r2, #0
 8018738:	f000 808d 	beq.w	8018856 <_strtod_r+0x8c6>
 801873c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8018740:	f300 8089 	bgt.w	8018856 <_strtod_r+0x8c6>
 8018744:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 8018748:	f300 81dc 	bgt.w	8018b04 <_strtod_r+0xb74>
 801874c:	2322      	movs	r3, #34	; 0x22
 801874e:	f04f 0800 	mov.w	r8, #0
 8018752:	f04f 0900 	mov.w	r9, #0
 8018756:	f8cb 3000 	str.w	r3, [fp]
 801875a:	9b05      	ldr	r3, [sp, #20]
 801875c:	2b00      	cmp	r3, #0
 801875e:	f040 81e2 	bne.w	8018b26 <_strtod_r+0xb96>
 8018762:	e1f4      	b.n	8018b4e <_strtod_r+0xbbe>
 8018764:	2300      	movs	r3, #0
 8018766:	9306      	str	r3, [sp, #24]
 8018768:	2301      	movs	r3, #1
 801876a:	9313      	str	r3, [sp, #76]	; 0x4c
 801876c:	e788      	b.n	8018680 <_strtod_r+0x6f0>
 801876e:	4651      	mov	r1, sl
 8018770:	4658      	mov	r0, fp
 8018772:	461a      	mov	r2, r3
 8018774:	f001 ff14 	bl	801a5a0 <__pow5mult>
 8018778:	4682      	mov	sl, r0
 801877a:	2800      	cmp	r0, #0
 801877c:	f43f ae64 	beq.w	8018448 <_strtod_r+0x4b8>
 8018780:	4658      	mov	r0, fp
 8018782:	4651      	mov	r1, sl
 8018784:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8018786:	f001 fe7a 	bl	801a47e <__multiply>
 801878a:	9017      	str	r0, [sp, #92]	; 0x5c
 801878c:	2800      	cmp	r0, #0
 801878e:	f43f ae5b 	beq.w	8018448 <_strtod_r+0x4b8>
 8018792:	4658      	mov	r0, fp
 8018794:	991a      	ldr	r1, [sp, #104]	; 0x68
 8018796:	f001 fd87 	bl	801a2a8 <_Bfree>
 801879a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801879c:	931a      	str	r3, [sp, #104]	; 0x68
 801879e:	e782      	b.n	80186a6 <_strtod_r+0x716>
 80187a0:	4658      	mov	r0, fp
 80187a2:	991a      	ldr	r1, [sp, #104]	; 0x68
 80187a4:	463a      	mov	r2, r7
 80187a6:	f001 ff49 	bl	801a63c <__lshift>
 80187aa:	901a      	str	r0, [sp, #104]	; 0x68
 80187ac:	2800      	cmp	r0, #0
 80187ae:	f47f af7c 	bne.w	80186aa <_strtod_r+0x71a>
 80187b2:	e649      	b.n	8018448 <_strtod_r+0x4b8>
 80187b4:	4658      	mov	r0, fp
 80187b6:	9903      	ldr	r1, [sp, #12]
 80187b8:	9a08      	ldr	r2, [sp, #32]
 80187ba:	f001 fef1 	bl	801a5a0 <__pow5mult>
 80187be:	9003      	str	r0, [sp, #12]
 80187c0:	2800      	cmp	r0, #0
 80187c2:	f47f af76 	bne.w	80186b2 <_strtod_r+0x722>
 80187c6:	e63f      	b.n	8018448 <_strtod_r+0x4b8>
 80187c8:	4658      	mov	r0, fp
 80187ca:	9903      	ldr	r1, [sp, #12]
 80187cc:	462a      	mov	r2, r5
 80187ce:	f001 ff35 	bl	801a63c <__lshift>
 80187d2:	9003      	str	r0, [sp, #12]
 80187d4:	2800      	cmp	r0, #0
 80187d6:	f47f af6f 	bne.w	80186b8 <_strtod_r+0x728>
 80187da:	e635      	b.n	8018448 <_strtod_r+0x4b8>
 80187dc:	4651      	mov	r1, sl
 80187de:	4658      	mov	r0, fp
 80187e0:	4632      	mov	r2, r6
 80187e2:	f001 ff2b 	bl	801a63c <__lshift>
 80187e6:	4682      	mov	sl, r0
 80187e8:	2800      	cmp	r0, #0
 80187ea:	f47f af68 	bne.w	80186be <_strtod_r+0x72e>
 80187ee:	e62b      	b.n	8018448 <_strtod_r+0x4b8>
 80187f0:	6923      	ldr	r3, [r4, #16]
 80187f2:	2b01      	cmp	r3, #1
 80187f4:	dc8e      	bgt.n	8018714 <_strtod_r+0x784>
 80187f6:	e183      	b.n	8018b00 <_strtod_r+0xb70>
 80187f8:	d162      	bne.n	80188c0 <_strtod_r+0x930>
 80187fa:	9a08      	ldr	r2, [sp, #32]
 80187fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018800:	b322      	cbz	r2, 801884c <_strtod_r+0x8bc>
 8018802:	494c      	ldr	r1, [pc, #304]	; (8018934 <_strtod_r+0x9a4>)
 8018804:	428b      	cmp	r3, r1
 8018806:	464a      	mov	r2, r9
 8018808:	d12e      	bne.n	8018868 <_strtod_r+0x8d8>
 801880a:	9b02      	ldr	r3, [sp, #8]
 801880c:	4641      	mov	r1, r8
 801880e:	b163      	cbz	r3, 801882a <_strtod_r+0x89a>
 8018810:	4b49      	ldr	r3, [pc, #292]	; (8018938 <_strtod_r+0x9a8>)
 8018812:	4013      	ands	r3, r2
 8018814:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8018818:	d807      	bhi.n	801882a <_strtod_r+0x89a>
 801881a:	0d1b      	lsrs	r3, r3, #20
 801881c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8018820:	f04f 30ff 	mov.w	r0, #4294967295
 8018824:	fa00 f303 	lsl.w	r3, r0, r3
 8018828:	e001      	b.n	801882e <_strtod_r+0x89e>
 801882a:	f04f 33ff 	mov.w	r3, #4294967295
 801882e:	4299      	cmp	r1, r3
 8018830:	d11a      	bne.n	8018868 <_strtod_r+0x8d8>
 8018832:	4b42      	ldr	r3, [pc, #264]	; (801893c <_strtod_r+0x9ac>)
 8018834:	429a      	cmp	r2, r3
 8018836:	d102      	bne.n	801883e <_strtod_r+0x8ae>
 8018838:	3101      	adds	r1, #1
 801883a:	f43f ae05 	beq.w	8018448 <_strtod_r+0x4b8>
 801883e:	4b3e      	ldr	r3, [pc, #248]	; (8018938 <_strtod_r+0x9a8>)
 8018840:	4013      	ands	r3, r2
 8018842:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8018846:	f04f 0800 	mov.w	r8, #0
 801884a:	e159      	b.n	8018b00 <_strtod_r+0xb70>
 801884c:	b963      	cbnz	r3, 8018868 <_strtod_r+0x8d8>
 801884e:	f1b8 0f00 	cmp.w	r8, #0
 8018852:	d109      	bne.n	8018868 <_strtod_r+0x8d8>
 8018854:	e76a      	b.n	801872c <_strtod_r+0x79c>
 8018856:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801885a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801885e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8018862:	f04f 38ff 	mov.w	r8, #4294967295
 8018866:	e14b      	b.n	8018b00 <_strtod_r+0xb70>
 8018868:	9b06      	ldr	r3, [sp, #24]
 801886a:	b113      	cbz	r3, 8018872 <_strtod_r+0x8e2>
 801886c:	ea13 0f09 	tst.w	r3, r9
 8018870:	e002      	b.n	8018878 <_strtod_r+0x8e8>
 8018872:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018874:	ea13 0f08 	tst.w	r3, r8
 8018878:	f000 8142 	beq.w	8018b00 <_strtod_r+0xb70>
 801887c:	9b08      	ldr	r3, [sp, #32]
 801887e:	9a02      	ldr	r2, [sp, #8]
 8018880:	4640      	mov	r0, r8
 8018882:	4649      	mov	r1, r9
 8018884:	b153      	cbz	r3, 801889c <_strtod_r+0x90c>
 8018886:	f7ff fb5f 	bl	8017f48 <sulp>
 801888a:	4602      	mov	r2, r0
 801888c:	460b      	mov	r3, r1
 801888e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018892:	f002 fa81 	bl	801ad98 <__adddf3>
 8018896:	4680      	mov	r8, r0
 8018898:	4689      	mov	r9, r1
 801889a:	e131      	b.n	8018b00 <_strtod_r+0xb70>
 801889c:	f7ff fb54 	bl	8017f48 <sulp>
 80188a0:	4602      	mov	r2, r0
 80188a2:	460b      	mov	r3, r1
 80188a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80188a8:	f002 fa74 	bl	801ad94 <__aeabi_dsub>
 80188ac:	2200      	movs	r2, #0
 80188ae:	2300      	movs	r3, #0
 80188b0:	4680      	mov	r8, r0
 80188b2:	4689      	mov	r9, r1
 80188b4:	f002 fe8a 	bl	801b5cc <__aeabi_dcmpeq>
 80188b8:	2800      	cmp	r0, #0
 80188ba:	f47f af47 	bne.w	801874c <_strtod_r+0x7bc>
 80188be:	e11f      	b.n	8018b00 <_strtod_r+0xb70>
 80188c0:	4620      	mov	r0, r4
 80188c2:	4651      	mov	r1, sl
 80188c4:	f002 f84d 	bl	801a962 <__ratio>
 80188c8:	2200      	movs	r2, #0
 80188ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80188ce:	4606      	mov	r6, r0
 80188d0:	460f      	mov	r7, r1
 80188d2:	f002 fe8f 	bl	801b5f4 <__aeabi_dcmple>
 80188d6:	2800      	cmp	r0, #0
 80188d8:	d041      	beq.n	801895e <_strtod_r+0x9ce>
 80188da:	9b08      	ldr	r3, [sp, #32]
 80188dc:	b113      	cbz	r3, 80188e4 <_strtod_r+0x954>
 80188de:	2200      	movs	r2, #0
 80188e0:	4b17      	ldr	r3, [pc, #92]	; (8018940 <_strtod_r+0x9b0>)
 80188e2:	e00f      	b.n	8018904 <_strtod_r+0x974>
 80188e4:	f1b8 0f00 	cmp.w	r8, #0
 80188e8:	d103      	bne.n	80188f2 <_strtod_r+0x962>
 80188ea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80188ee:	b93b      	cbnz	r3, 8018900 <_strtod_r+0x970>
 80188f0:	e00d      	b.n	801890e <_strtod_r+0x97e>
 80188f2:	f1b8 0f01 	cmp.w	r8, #1
 80188f6:	d103      	bne.n	8018900 <_strtod_r+0x970>
 80188f8:	f1b9 0f00 	cmp.w	r9, #0
 80188fc:	f43f af26 	beq.w	801874c <_strtod_r+0x7bc>
 8018900:	4b10      	ldr	r3, [pc, #64]	; (8018944 <_strtod_r+0x9b4>)
 8018902:	2200      	movs	r2, #0
 8018904:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018908:	2600      	movs	r6, #0
 801890a:	4f0d      	ldr	r7, [pc, #52]	; (8018940 <_strtod_r+0x9b0>)
 801890c:	e03c      	b.n	8018988 <_strtod_r+0x9f8>
 801890e:	4630      	mov	r0, r6
 8018910:	4639      	mov	r1, r7
 8018912:	2200      	movs	r2, #0
 8018914:	4b0a      	ldr	r3, [pc, #40]	; (8018940 <_strtod_r+0x9b0>)
 8018916:	f002 fe63 	bl	801b5e0 <__aeabi_dcmplt>
 801891a:	b9b8      	cbnz	r0, 801894c <_strtod_r+0x9bc>
 801891c:	4630      	mov	r0, r6
 801891e:	4639      	mov	r1, r7
 8018920:	2200      	movs	r2, #0
 8018922:	4b09      	ldr	r3, [pc, #36]	; (8018948 <_strtod_r+0x9b8>)
 8018924:	f002 fbea 	bl	801b0fc <__aeabi_dmul>
 8018928:	4606      	mov	r6, r0
 801892a:	460f      	mov	r7, r1
 801892c:	e010      	b.n	8018950 <_strtod_r+0x9c0>
 801892e:	bf00      	nop
 8018930:	fffffbe3 	.word	0xfffffbe3
 8018934:	000fffff 	.word	0x000fffff
 8018938:	7ff00000 	.word	0x7ff00000
 801893c:	7fefffff 	.word	0x7fefffff
 8018940:	3ff00000 	.word	0x3ff00000
 8018944:	bff00000 	.word	0xbff00000
 8018948:	3fe00000 	.word	0x3fe00000
 801894c:	4f94      	ldr	r7, [pc, #592]	; (8018ba0 <_strtod_r+0xc10>)
 801894e:	2600      	movs	r6, #0
 8018950:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8018954:	9614      	str	r6, [sp, #80]	; 0x50
 8018956:	9315      	str	r3, [sp, #84]	; 0x54
 8018958:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801895c:	e012      	b.n	8018984 <_strtod_r+0x9f4>
 801895e:	4630      	mov	r0, r6
 8018960:	4639      	mov	r1, r7
 8018962:	4b8f      	ldr	r3, [pc, #572]	; (8018ba0 <_strtod_r+0xc10>)
 8018964:	2200      	movs	r2, #0
 8018966:	f002 fbc9 	bl	801b0fc <__aeabi_dmul>
 801896a:	9b08      	ldr	r3, [sp, #32]
 801896c:	4606      	mov	r6, r0
 801896e:	460f      	mov	r7, r1
 8018970:	b923      	cbnz	r3, 801897c <_strtod_r+0x9ec>
 8018972:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018976:	900e      	str	r0, [sp, #56]	; 0x38
 8018978:	930f      	str	r3, [sp, #60]	; 0x3c
 801897a:	e001      	b.n	8018980 <_strtod_r+0x9f0>
 801897c:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
 8018980:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8018984:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018988:	f029 4500 	bic.w	r5, r9, #2147483648	; 0x80000000
 801898c:	0d2d      	lsrs	r5, r5, #20
 801898e:	4b85      	ldr	r3, [pc, #532]	; (8018ba4 <_strtod_r+0xc14>)
 8018990:	052d      	lsls	r5, r5, #20
 8018992:	429d      	cmp	r5, r3
 8018994:	d12d      	bne.n	80189f2 <_strtod_r+0xa62>
 8018996:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801899a:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801899e:	4640      	mov	r0, r8
 80189a0:	4649      	mov	r1, r9
 80189a2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80189a6:	f001 ff17 	bl	801a7d8 <__ulp>
 80189aa:	4602      	mov	r2, r0
 80189ac:	460b      	mov	r3, r1
 80189ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80189b2:	f002 fba3 	bl	801b0fc <__aeabi_dmul>
 80189b6:	4602      	mov	r2, r0
 80189b8:	460b      	mov	r3, r1
 80189ba:	4640      	mov	r0, r8
 80189bc:	4649      	mov	r1, r9
 80189be:	f002 f9eb 	bl	801ad98 <__adddf3>
 80189c2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80189c6:	0d1b      	lsrs	r3, r3, #20
 80189c8:	4a77      	ldr	r2, [pc, #476]	; (8018ba8 <_strtod_r+0xc18>)
 80189ca:	051b      	lsls	r3, r3, #20
 80189cc:	4293      	cmp	r3, r2
 80189ce:	4680      	mov	r8, r0
 80189d0:	d90c      	bls.n	80189ec <_strtod_r+0xa5c>
 80189d2:	4b76      	ldr	r3, [pc, #472]	; (8018bac <_strtod_r+0xc1c>)
 80189d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80189d6:	429a      	cmp	r2, r3
 80189d8:	d103      	bne.n	80189e2 <_strtod_r+0xa52>
 80189da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80189dc:	3301      	adds	r3, #1
 80189de:	f43f ad33 	beq.w	8018448 <_strtod_r+0x4b8>
 80189e2:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8018bac <_strtod_r+0xc1c>
 80189e6:	f04f 38ff 	mov.w	r8, #4294967295
 80189ea:	e078      	b.n	8018ade <_strtod_r+0xb4e>
 80189ec:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 80189f0:	e03d      	b.n	8018a6e <_strtod_r+0xade>
 80189f2:	9b02      	ldr	r3, [sp, #8]
 80189f4:	b33b      	cbz	r3, 8018a46 <_strtod_r+0xab6>
 80189f6:	f1b5 6fd4 	cmp.w	r5, #111149056	; 0x6a00000
 80189fa:	d824      	bhi.n	8018a46 <_strtod_r+0xab6>
 80189fc:	4630      	mov	r0, r6
 80189fe:	4639      	mov	r1, r7
 8018a00:	a35f      	add	r3, pc, #380	; (adr r3, 8018b80 <_strtod_r+0xbf0>)
 8018a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a06:	f002 fdf5 	bl	801b5f4 <__aeabi_dcmple>
 8018a0a:	b1b8      	cbz	r0, 8018a3c <_strtod_r+0xaac>
 8018a0c:	4639      	mov	r1, r7
 8018a0e:	4630      	mov	r0, r6
 8018a10:	f002 fe36 	bl	801b680 <__aeabi_d2uiz>
 8018a14:	2800      	cmp	r0, #0
 8018a16:	bf08      	it	eq
 8018a18:	2001      	moveq	r0, #1
 8018a1a:	f002 faf9 	bl	801b010 <__aeabi_ui2d>
 8018a1e:	9b08      	ldr	r3, [sp, #32]
 8018a20:	4606      	mov	r6, r0
 8018a22:	460f      	mov	r7, r1
 8018a24:	b923      	cbnz	r3, 8018a30 <_strtod_r+0xaa0>
 8018a26:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018a2a:	9010      	str	r0, [sp, #64]	; 0x40
 8018a2c:	9311      	str	r3, [sp, #68]	; 0x44
 8018a2e:	e001      	b.n	8018a34 <_strtod_r+0xaa4>
 8018a30:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8018a34:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8018a38:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018a3c:	9b07      	ldr	r3, [sp, #28]
 8018a3e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8018a42:	1b5b      	subs	r3, r3, r5
 8018a44:	9307      	str	r3, [sp, #28]
 8018a46:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018a4a:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8018a4e:	f001 fec3 	bl	801a7d8 <__ulp>
 8018a52:	4602      	mov	r2, r0
 8018a54:	460b      	mov	r3, r1
 8018a56:	4640      	mov	r0, r8
 8018a58:	4649      	mov	r1, r9
 8018a5a:	f002 fb4f 	bl	801b0fc <__aeabi_dmul>
 8018a5e:	4602      	mov	r2, r0
 8018a60:	460b      	mov	r3, r1
 8018a62:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018a66:	f002 f997 	bl	801ad98 <__adddf3>
 8018a6a:	4680      	mov	r8, r0
 8018a6c:	4689      	mov	r9, r1
 8018a6e:	9b02      	ldr	r3, [sp, #8]
 8018a70:	bbab      	cbnz	r3, 8018ade <_strtod_r+0xb4e>
 8018a72:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8018a76:	0d1b      	lsrs	r3, r3, #20
 8018a78:	051b      	lsls	r3, r3, #20
 8018a7a:	429d      	cmp	r5, r3
 8018a7c:	d12f      	bne.n	8018ade <_strtod_r+0xb4e>
 8018a7e:	4639      	mov	r1, r7
 8018a80:	4630      	mov	r0, r6
 8018a82:	f8cd 9018 	str.w	r9, [sp, #24]
 8018a86:	f002 fdd3 	bl	801b630 <__aeabi_d2iz>
 8018a8a:	f002 fad1 	bl	801b030 <__aeabi_i2d>
 8018a8e:	460b      	mov	r3, r1
 8018a90:	4602      	mov	r2, r0
 8018a92:	4639      	mov	r1, r7
 8018a94:	4630      	mov	r0, r6
 8018a96:	f002 f97d 	bl	801ad94 <__aeabi_dsub>
 8018a9a:	9b08      	ldr	r3, [sp, #32]
 8018a9c:	f8dd c018 	ldr.w	ip, [sp, #24]
 8018aa0:	4606      	mov	r6, r0
 8018aa2:	460f      	mov	r7, r1
 8018aa4:	b92b      	cbnz	r3, 8018ab2 <_strtod_r+0xb22>
 8018aa6:	f1b8 0f00 	cmp.w	r8, #0
 8018aaa:	d102      	bne.n	8018ab2 <_strtod_r+0xb22>
 8018aac:	f3cc 0313 	ubfx	r3, ip, #0, #20
 8018ab0:	b17b      	cbz	r3, 8018ad2 <_strtod_r+0xb42>
 8018ab2:	4630      	mov	r0, r6
 8018ab4:	4639      	mov	r1, r7
 8018ab6:	a334      	add	r3, pc, #208	; (adr r3, 8018b88 <_strtod_r+0xbf8>)
 8018ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018abc:	f002 fd90 	bl	801b5e0 <__aeabi_dcmplt>
 8018ac0:	bb88      	cbnz	r0, 8018b26 <_strtod_r+0xb96>
 8018ac2:	4630      	mov	r0, r6
 8018ac4:	4639      	mov	r1, r7
 8018ac6:	a332      	add	r3, pc, #200	; (adr r3, 8018b90 <_strtod_r+0xc00>)
 8018ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018acc:	f002 fda6 	bl	801b61c <__aeabi_dcmpgt>
 8018ad0:	e004      	b.n	8018adc <_strtod_r+0xb4c>
 8018ad2:	a331      	add	r3, pc, #196	; (adr r3, 8018b98 <_strtod_r+0xc08>)
 8018ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ad8:	f002 fd82 	bl	801b5e0 <__aeabi_dcmplt>
 8018adc:	bb18      	cbnz	r0, 8018b26 <_strtod_r+0xb96>
 8018ade:	4658      	mov	r0, fp
 8018ae0:	991a      	ldr	r1, [sp, #104]	; 0x68
 8018ae2:	f001 fbe1 	bl	801a2a8 <_Bfree>
 8018ae6:	4658      	mov	r0, fp
 8018ae8:	9903      	ldr	r1, [sp, #12]
 8018aea:	f001 fbdd 	bl	801a2a8 <_Bfree>
 8018aee:	4658      	mov	r0, fp
 8018af0:	4651      	mov	r1, sl
 8018af2:	f001 fbd9 	bl	801a2a8 <_Bfree>
 8018af6:	4658      	mov	r0, fp
 8018af8:	4621      	mov	r1, r4
 8018afa:	f001 fbd5 	bl	801a2a8 <_Bfree>
 8018afe:	e566      	b.n	80185ce <_strtod_r+0x63e>
 8018b00:	9b02      	ldr	r3, [sp, #8]
 8018b02:	b183      	cbz	r3, 8018b26 <_strtod_r+0xb96>
 8018b04:	4b2a      	ldr	r3, [pc, #168]	; (8018bb0 <_strtod_r+0xc20>)
 8018b06:	930d      	str	r3, [sp, #52]	; 0x34
 8018b08:	2300      	movs	r3, #0
 8018b0a:	930c      	str	r3, [sp, #48]	; 0x30
 8018b0c:	4640      	mov	r0, r8
 8018b0e:	4649      	mov	r1, r9
 8018b10:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8018b14:	f002 faf2 	bl	801b0fc <__aeabi_dmul>
 8018b18:	4680      	mov	r8, r0
 8018b1a:	4689      	mov	r9, r1
 8018b1c:	b919      	cbnz	r1, 8018b26 <_strtod_r+0xb96>
 8018b1e:	b910      	cbnz	r0, 8018b26 <_strtod_r+0xb96>
 8018b20:	2322      	movs	r3, #34	; 0x22
 8018b22:	f8cb 3000 	str.w	r3, [fp]
 8018b26:	4658      	mov	r0, fp
 8018b28:	991a      	ldr	r1, [sp, #104]	; 0x68
 8018b2a:	f001 fbbd 	bl	801a2a8 <_Bfree>
 8018b2e:	4658      	mov	r0, fp
 8018b30:	9903      	ldr	r1, [sp, #12]
 8018b32:	f001 fbb9 	bl	801a2a8 <_Bfree>
 8018b36:	4658      	mov	r0, fp
 8018b38:	4651      	mov	r1, sl
 8018b3a:	f001 fbb5 	bl	801a2a8 <_Bfree>
 8018b3e:	4658      	mov	r0, fp
 8018b40:	9905      	ldr	r1, [sp, #20]
 8018b42:	f001 fbb1 	bl	801a2a8 <_Bfree>
 8018b46:	4658      	mov	r0, fp
 8018b48:	4621      	mov	r1, r4
 8018b4a:	f001 fbad 	bl	801a2a8 <_Bfree>
 8018b4e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018b50:	b113      	cbz	r3, 8018b58 <_strtod_r+0xbc8>
 8018b52:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8018b54:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018b56:	6013      	str	r3, [r2, #0]
 8018b58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018b5a:	b11b      	cbz	r3, 8018b64 <_strtod_r+0xbd4>
 8018b5c:	4640      	mov	r0, r8
 8018b5e:	f109 4100 	add.w	r1, r9, #2147483648	; 0x80000000
 8018b62:	e007      	b.n	8018b74 <_strtod_r+0xbe4>
 8018b64:	4640      	mov	r0, r8
 8018b66:	4649      	mov	r1, r9
 8018b68:	e004      	b.n	8018b74 <_strtod_r+0xbe4>
 8018b6a:	2400      	movs	r4, #0
 8018b6c:	9402      	str	r4, [sp, #8]
 8018b6e:	2701      	movs	r7, #1
 8018b70:	f7ff bb31 	b.w	80181d6 <_strtod_r+0x246>
 8018b74:	b01f      	add	sp, #124	; 0x7c
 8018b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b7a:	bf00      	nop
 8018b7c:	f3af 8000 	nop.w
 8018b80:	ffc00000 	.word	0xffc00000
 8018b84:	41dfffff 	.word	0x41dfffff
 8018b88:	94a03595 	.word	0x94a03595
 8018b8c:	3fdfffff 	.word	0x3fdfffff
 8018b90:	35afe535 	.word	0x35afe535
 8018b94:	3fe00000 	.word	0x3fe00000
 8018b98:	94a03595 	.word	0x94a03595
 8018b9c:	3fcfffff 	.word	0x3fcfffff
 8018ba0:	3fe00000 	.word	0x3fe00000
 8018ba4:	7fe00000 	.word	0x7fe00000
 8018ba8:	7c9fffff 	.word	0x7c9fffff
 8018bac:	7fefffff 	.word	0x7fefffff
 8018bb0:	39500000 	.word	0x39500000

08018bb4 <_strtol_r>:
 8018bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018bb8:	4c40      	ldr	r4, [pc, #256]	; (8018cbc <_strtol_r+0x108>)
 8018bba:	f8d4 9000 	ldr.w	r9, [r4]
 8018bbe:	460f      	mov	r7, r1
 8018bc0:	463d      	mov	r5, r7
 8018bc2:	f815 eb01 	ldrb.w	lr, [r5], #1
 8018bc6:	eb09 040e 	add.w	r4, r9, lr
 8018bca:	7866      	ldrb	r6, [r4, #1]
 8018bcc:	f006 0408 	and.w	r4, r6, #8
 8018bd0:	f004 06ff 	and.w	r6, r4, #255	; 0xff
 8018bd4:	b10c      	cbz	r4, 8018bda <_strtol_r+0x26>
 8018bd6:	462f      	mov	r7, r5
 8018bd8:	e7f2      	b.n	8018bc0 <_strtol_r+0xc>
 8018bda:	4674      	mov	r4, lr
 8018bdc:	2c2d      	cmp	r4, #45	; 0x2d
 8018bde:	d103      	bne.n	8018be8 <_strtol_r+0x34>
 8018be0:	1cbd      	adds	r5, r7, #2
 8018be2:	787c      	ldrb	r4, [r7, #1]
 8018be4:	2601      	movs	r6, #1
 8018be6:	e003      	b.n	8018bf0 <_strtol_r+0x3c>
 8018be8:	2c2b      	cmp	r4, #43	; 0x2b
 8018bea:	bf04      	itt	eq
 8018bec:	787c      	ldrbeq	r4, [r7, #1]
 8018bee:	1cbd      	addeq	r5, r7, #2
 8018bf0:	b113      	cbz	r3, 8018bf8 <_strtol_r+0x44>
 8018bf2:	2b10      	cmp	r3, #16
 8018bf4:	d10a      	bne.n	8018c0c <_strtol_r+0x58>
 8018bf6:	e05a      	b.n	8018cae <_strtol_r+0xfa>
 8018bf8:	2c30      	cmp	r4, #48	; 0x30
 8018bfa:	d156      	bne.n	8018caa <_strtol_r+0xf6>
 8018bfc:	782c      	ldrb	r4, [r5, #0]
 8018bfe:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8018c02:	2c58      	cmp	r4, #88	; 0x58
 8018c04:	d14c      	bne.n	8018ca0 <_strtol_r+0xec>
 8018c06:	786c      	ldrb	r4, [r5, #1]
 8018c08:	2310      	movs	r3, #16
 8018c0a:	3502      	adds	r5, #2
 8018c0c:	2e00      	cmp	r6, #0
 8018c0e:	bf14      	ite	ne
 8018c10:	f04f 4800 	movne.w	r8, #2147483648	; 0x80000000
 8018c14:	f06f 4800 	mvneq.w	r8, #2147483648	; 0x80000000
 8018c18:	2700      	movs	r7, #0
 8018c1a:	fbb8 faf3 	udiv	sl, r8, r3
 8018c1e:	46be      	mov	lr, r7
 8018c20:	fb03 881a 	mls	r8, r3, sl, r8
 8018c24:	eb09 0c04 	add.w	ip, r9, r4
 8018c28:	f89c c001 	ldrb.w	ip, [ip, #1]
 8018c2c:	f01c 0f04 	tst.w	ip, #4
 8018c30:	d001      	beq.n	8018c36 <_strtol_r+0x82>
 8018c32:	3c30      	subs	r4, #48	; 0x30
 8018c34:	e00b      	b.n	8018c4e <_strtol_r+0x9a>
 8018c36:	f01c 0c03 	ands.w	ip, ip, #3
 8018c3a:	d01b      	beq.n	8018c74 <_strtol_r+0xc0>
 8018c3c:	f1bc 0f01 	cmp.w	ip, #1
 8018c40:	bf0c      	ite	eq
 8018c42:	f04f 0c37 	moveq.w	ip, #55	; 0x37
 8018c46:	f04f 0c57 	movne.w	ip, #87	; 0x57
 8018c4a:	ebcc 0404 	rsb	r4, ip, r4
 8018c4e:	429c      	cmp	r4, r3
 8018c50:	da10      	bge.n	8018c74 <_strtol_r+0xc0>
 8018c52:	f1b7 3fff 	cmp.w	r7, #4294967295
 8018c56:	d00a      	beq.n	8018c6e <_strtol_r+0xba>
 8018c58:	45d6      	cmp	lr, sl
 8018c5a:	d806      	bhi.n	8018c6a <_strtol_r+0xb6>
 8018c5c:	d101      	bne.n	8018c62 <_strtol_r+0xae>
 8018c5e:	4544      	cmp	r4, r8
 8018c60:	dc03      	bgt.n	8018c6a <_strtol_r+0xb6>
 8018c62:	fb03 4e0e 	mla	lr, r3, lr, r4
 8018c66:	2701      	movs	r7, #1
 8018c68:	e001      	b.n	8018c6e <_strtol_r+0xba>
 8018c6a:	f04f 37ff 	mov.w	r7, #4294967295
 8018c6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018c72:	e7d7      	b.n	8018c24 <_strtol_r+0x70>
 8018c74:	1c7c      	adds	r4, r7, #1
 8018c76:	4673      	mov	r3, lr
 8018c78:	d10a      	bne.n	8018c90 <_strtol_r+0xdc>
 8018c7a:	2e00      	cmp	r6, #0
 8018c7c:	f04f 0122 	mov.w	r1, #34	; 0x22
 8018c80:	bf14      	ite	ne
 8018c82:	f04f 4300 	movne.w	r3, #2147483648	; 0x80000000
 8018c86:	f06f 4300 	mvneq.w	r3, #2147483648	; 0x80000000
 8018c8a:	6001      	str	r1, [r0, #0]
 8018c8c:	b92a      	cbnz	r2, 8018c9a <_strtol_r+0xe6>
 8018c8e:	e011      	b.n	8018cb4 <_strtol_r+0x100>
 8018c90:	b10e      	cbz	r6, 8018c96 <_strtol_r+0xe2>
 8018c92:	f1ce 0300 	rsb	r3, lr, #0
 8018c96:	b16a      	cbz	r2, 8018cb4 <_strtol_r+0x100>
 8018c98:	b107      	cbz	r7, 8018c9c <_strtol_r+0xe8>
 8018c9a:	1e69      	subs	r1, r5, #1
 8018c9c:	6011      	str	r1, [r2, #0]
 8018c9e:	e009      	b.n	8018cb4 <_strtol_r+0x100>
 8018ca0:	2430      	movs	r4, #48	; 0x30
 8018ca2:	2b00      	cmp	r3, #0
 8018ca4:	d1b2      	bne.n	8018c0c <_strtol_r+0x58>
 8018ca6:	2308      	movs	r3, #8
 8018ca8:	e7b0      	b.n	8018c0c <_strtol_r+0x58>
 8018caa:	230a      	movs	r3, #10
 8018cac:	e7ae      	b.n	8018c0c <_strtol_r+0x58>
 8018cae:	2c30      	cmp	r4, #48	; 0x30
 8018cb0:	d1ac      	bne.n	8018c0c <_strtol_r+0x58>
 8018cb2:	e7a3      	b.n	8018bfc <_strtol_r+0x48>
 8018cb4:	4618      	mov	r0, r3
 8018cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018cba:	bf00      	nop
 8018cbc:	2000176c 	.word	0x2000176c

08018cc0 <__swbuf_r>:
 8018cc0:	b570      	push	{r4, r5, r6, lr}
 8018cc2:	460d      	mov	r5, r1
 8018cc4:	4614      	mov	r4, r2
 8018cc6:	4606      	mov	r6, r0
 8018cc8:	b118      	cbz	r0, 8018cd2 <__swbuf_r+0x12>
 8018cca:	6983      	ldr	r3, [r0, #24]
 8018ccc:	b90b      	cbnz	r3, 8018cd2 <__swbuf_r+0x12>
 8018cce:	f7fd fed3 	bl	8016a78 <__sinit>
 8018cd2:	4b22      	ldr	r3, [pc, #136]	; (8018d5c <__swbuf_r+0x9c>)
 8018cd4:	429c      	cmp	r4, r3
 8018cd6:	d101      	bne.n	8018cdc <__swbuf_r+0x1c>
 8018cd8:	6874      	ldr	r4, [r6, #4]
 8018cda:	e008      	b.n	8018cee <__swbuf_r+0x2e>
 8018cdc:	4b20      	ldr	r3, [pc, #128]	; (8018d60 <__swbuf_r+0xa0>)
 8018cde:	429c      	cmp	r4, r3
 8018ce0:	d101      	bne.n	8018ce6 <__swbuf_r+0x26>
 8018ce2:	68b4      	ldr	r4, [r6, #8]
 8018ce4:	e003      	b.n	8018cee <__swbuf_r+0x2e>
 8018ce6:	4b1f      	ldr	r3, [pc, #124]	; (8018d64 <__swbuf_r+0xa4>)
 8018ce8:	429c      	cmp	r4, r3
 8018cea:	bf08      	it	eq
 8018cec:	68f4      	ldreq	r4, [r6, #12]
 8018cee:	69a3      	ldr	r3, [r4, #24]
 8018cf0:	60a3      	str	r3, [r4, #8]
 8018cf2:	89a3      	ldrh	r3, [r4, #12]
 8018cf4:	071a      	lsls	r2, r3, #28
 8018cf6:	d509      	bpl.n	8018d0c <__swbuf_r+0x4c>
 8018cf8:	6923      	ldr	r3, [r4, #16]
 8018cfa:	b13b      	cbz	r3, 8018d0c <__swbuf_r+0x4c>
 8018cfc:	6823      	ldr	r3, [r4, #0]
 8018cfe:	6920      	ldr	r0, [r4, #16]
 8018d00:	1a18      	subs	r0, r3, r0
 8018d02:	6963      	ldr	r3, [r4, #20]
 8018d04:	4298      	cmp	r0, r3
 8018d06:	b2ed      	uxtb	r5, r5
 8018d08:	db0f      	blt.n	8018d2a <__swbuf_r+0x6a>
 8018d0a:	e008      	b.n	8018d1e <__swbuf_r+0x5e>
 8018d0c:	4630      	mov	r0, r6
 8018d0e:	4621      	mov	r1, r4
 8018d10:	f000 f83c 	bl	8018d8c <__swsetup_r>
 8018d14:	2800      	cmp	r0, #0
 8018d16:	d0f1      	beq.n	8018cfc <__swbuf_r+0x3c>
 8018d18:	f04f 30ff 	mov.w	r0, #4294967295
 8018d1c:	bd70      	pop	{r4, r5, r6, pc}
 8018d1e:	4630      	mov	r0, r6
 8018d20:	4621      	mov	r1, r4
 8018d22:	f7fd fe2d 	bl	8016980 <_fflush_r>
 8018d26:	2800      	cmp	r0, #0
 8018d28:	d1f6      	bne.n	8018d18 <__swbuf_r+0x58>
 8018d2a:	68a3      	ldr	r3, [r4, #8]
 8018d2c:	3b01      	subs	r3, #1
 8018d2e:	60a3      	str	r3, [r4, #8]
 8018d30:	6823      	ldr	r3, [r4, #0]
 8018d32:	1c5a      	adds	r2, r3, #1
 8018d34:	6022      	str	r2, [r4, #0]
 8018d36:	701d      	strb	r5, [r3, #0]
 8018d38:	6963      	ldr	r3, [r4, #20]
 8018d3a:	3001      	adds	r0, #1
 8018d3c:	4298      	cmp	r0, r3
 8018d3e:	d004      	beq.n	8018d4a <__swbuf_r+0x8a>
 8018d40:	89a3      	ldrh	r3, [r4, #12]
 8018d42:	07db      	lsls	r3, r3, #31
 8018d44:	d507      	bpl.n	8018d56 <__swbuf_r+0x96>
 8018d46:	2d0a      	cmp	r5, #10
 8018d48:	d105      	bne.n	8018d56 <__swbuf_r+0x96>
 8018d4a:	4630      	mov	r0, r6
 8018d4c:	4621      	mov	r1, r4
 8018d4e:	f7fd fe17 	bl	8016980 <_fflush_r>
 8018d52:	2800      	cmp	r0, #0
 8018d54:	d1e0      	bne.n	8018d18 <__swbuf_r+0x58>
 8018d56:	4628      	mov	r0, r5
 8018d58:	bd70      	pop	{r4, r5, r6, pc}
 8018d5a:	bf00      	nop
 8018d5c:	0801d10c 	.word	0x0801d10c
 8018d60:	0801d12c 	.word	0x0801d12c
 8018d64:	0801d14c 	.word	0x0801d14c

08018d68 <_write_r>:
 8018d68:	b538      	push	{r3, r4, r5, lr}
 8018d6a:	4c07      	ldr	r4, [pc, #28]	; (8018d88 <_write_r+0x20>)
 8018d6c:	4605      	mov	r5, r0
 8018d6e:	2000      	movs	r0, #0
 8018d70:	6020      	str	r0, [r4, #0]
 8018d72:	4608      	mov	r0, r1
 8018d74:	4611      	mov	r1, r2
 8018d76:	461a      	mov	r2, r3
 8018d78:	f7fb fbb4 	bl	80144e4 <_write>
 8018d7c:	1c43      	adds	r3, r0, #1
 8018d7e:	d102      	bne.n	8018d86 <_write_r+0x1e>
 8018d80:	6823      	ldr	r3, [r4, #0]
 8018d82:	b103      	cbz	r3, 8018d86 <_write_r+0x1e>
 8018d84:	602b      	str	r3, [r5, #0]
 8018d86:	bd38      	pop	{r3, r4, r5, pc}
 8018d88:	20001c18 	.word	0x20001c18

08018d8c <__swsetup_r>:
 8018d8c:	4b31      	ldr	r3, [pc, #196]	; (8018e54 <__swsetup_r+0xc8>)
 8018d8e:	b570      	push	{r4, r5, r6, lr}
 8018d90:	681d      	ldr	r5, [r3, #0]
 8018d92:	4606      	mov	r6, r0
 8018d94:	460c      	mov	r4, r1
 8018d96:	b125      	cbz	r5, 8018da2 <__swsetup_r+0x16>
 8018d98:	69ab      	ldr	r3, [r5, #24]
 8018d9a:	b913      	cbnz	r3, 8018da2 <__swsetup_r+0x16>
 8018d9c:	4628      	mov	r0, r5
 8018d9e:	f7fd fe6b 	bl	8016a78 <__sinit>
 8018da2:	4b2d      	ldr	r3, [pc, #180]	; (8018e58 <__swsetup_r+0xcc>)
 8018da4:	429c      	cmp	r4, r3
 8018da6:	d101      	bne.n	8018dac <__swsetup_r+0x20>
 8018da8:	686c      	ldr	r4, [r5, #4]
 8018daa:	e008      	b.n	8018dbe <__swsetup_r+0x32>
 8018dac:	4b2b      	ldr	r3, [pc, #172]	; (8018e5c <__swsetup_r+0xd0>)
 8018dae:	429c      	cmp	r4, r3
 8018db0:	d101      	bne.n	8018db6 <__swsetup_r+0x2a>
 8018db2:	68ac      	ldr	r4, [r5, #8]
 8018db4:	e003      	b.n	8018dbe <__swsetup_r+0x32>
 8018db6:	4b2a      	ldr	r3, [pc, #168]	; (8018e60 <__swsetup_r+0xd4>)
 8018db8:	429c      	cmp	r4, r3
 8018dba:	bf08      	it	eq
 8018dbc:	68ec      	ldreq	r4, [r5, #12]
 8018dbe:	89a3      	ldrh	r3, [r4, #12]
 8018dc0:	b29a      	uxth	r2, r3
 8018dc2:	0711      	lsls	r1, r2, #28
 8018dc4:	d41d      	bmi.n	8018e02 <__swsetup_r+0x76>
 8018dc6:	06d5      	lsls	r5, r2, #27
 8018dc8:	d402      	bmi.n	8018dd0 <__swsetup_r+0x44>
 8018dca:	2209      	movs	r2, #9
 8018dcc:	6032      	str	r2, [r6, #0]
 8018dce:	e038      	b.n	8018e42 <__swsetup_r+0xb6>
 8018dd0:	0750      	lsls	r0, r2, #29
 8018dd2:	d512      	bpl.n	8018dfa <__swsetup_r+0x6e>
 8018dd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018dd6:	b141      	cbz	r1, 8018dea <__swsetup_r+0x5e>
 8018dd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018ddc:	4299      	cmp	r1, r3
 8018dde:	d002      	beq.n	8018de6 <__swsetup_r+0x5a>
 8018de0:	4630      	mov	r0, r6
 8018de2:	f7fd ff37 	bl	8016c54 <_free_r>
 8018de6:	2300      	movs	r3, #0
 8018de8:	6363      	str	r3, [r4, #52]	; 0x34
 8018dea:	89a3      	ldrh	r3, [r4, #12]
 8018dec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018df0:	81a3      	strh	r3, [r4, #12]
 8018df2:	2300      	movs	r3, #0
 8018df4:	6063      	str	r3, [r4, #4]
 8018df6:	6923      	ldr	r3, [r4, #16]
 8018df8:	6023      	str	r3, [r4, #0]
 8018dfa:	89a3      	ldrh	r3, [r4, #12]
 8018dfc:	f043 0308 	orr.w	r3, r3, #8
 8018e00:	81a3      	strh	r3, [r4, #12]
 8018e02:	6923      	ldr	r3, [r4, #16]
 8018e04:	b94b      	cbnz	r3, 8018e1a <__swsetup_r+0x8e>
 8018e06:	89a3      	ldrh	r3, [r4, #12]
 8018e08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018e0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018e10:	d003      	beq.n	8018e1a <__swsetup_r+0x8e>
 8018e12:	4630      	mov	r0, r6
 8018e14:	4621      	mov	r1, r4
 8018e16:	f001 f9a9 	bl	801a16c <__smakebuf_r>
 8018e1a:	89a3      	ldrh	r3, [r4, #12]
 8018e1c:	f013 0201 	ands.w	r2, r3, #1
 8018e20:	d005      	beq.n	8018e2e <__swsetup_r+0xa2>
 8018e22:	2200      	movs	r2, #0
 8018e24:	60a2      	str	r2, [r4, #8]
 8018e26:	6962      	ldr	r2, [r4, #20]
 8018e28:	4252      	negs	r2, r2
 8018e2a:	61a2      	str	r2, [r4, #24]
 8018e2c:	e003      	b.n	8018e36 <__swsetup_r+0xaa>
 8018e2e:	0799      	lsls	r1, r3, #30
 8018e30:	bf58      	it	pl
 8018e32:	6962      	ldrpl	r2, [r4, #20]
 8018e34:	60a2      	str	r2, [r4, #8]
 8018e36:	6922      	ldr	r2, [r4, #16]
 8018e38:	b94a      	cbnz	r2, 8018e4e <__swsetup_r+0xc2>
 8018e3a:	f003 0080 	and.w	r0, r3, #128	; 0x80
 8018e3e:	b280      	uxth	r0, r0
 8018e40:	b130      	cbz	r0, 8018e50 <__swsetup_r+0xc4>
 8018e42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018e46:	81a3      	strh	r3, [r4, #12]
 8018e48:	f04f 30ff 	mov.w	r0, #4294967295
 8018e4c:	bd70      	pop	{r4, r5, r6, pc}
 8018e4e:	2000      	movs	r0, #0
 8018e50:	bd70      	pop	{r4, r5, r6, pc}
 8018e52:	bf00      	nop
 8018e54:	20001768 	.word	0x20001768
 8018e58:	0801d10c 	.word	0x0801d10c
 8018e5c:	0801d12c 	.word	0x0801d12c
 8018e60:	0801d14c 	.word	0x0801d14c

08018e64 <_close_r>:
 8018e64:	b538      	push	{r3, r4, r5, lr}
 8018e66:	4c06      	ldr	r4, [pc, #24]	; (8018e80 <_close_r+0x1c>)
 8018e68:	2300      	movs	r3, #0
 8018e6a:	4605      	mov	r5, r0
 8018e6c:	4608      	mov	r0, r1
 8018e6e:	6023      	str	r3, [r4, #0]
 8018e70:	f7fb fb10 	bl	8014494 <_close>
 8018e74:	1c43      	adds	r3, r0, #1
 8018e76:	d102      	bne.n	8018e7e <_close_r+0x1a>
 8018e78:	6823      	ldr	r3, [r4, #0]
 8018e7a:	b103      	cbz	r3, 8018e7e <_close_r+0x1a>
 8018e7c:	602b      	str	r3, [r5, #0]
 8018e7e:	bd38      	pop	{r3, r4, r5, pc}
 8018e80:	20001c18 	.word	0x20001c18

08018e84 <quorem>:
 8018e84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e88:	6903      	ldr	r3, [r0, #16]
 8018e8a:	690c      	ldr	r4, [r1, #16]
 8018e8c:	42a3      	cmp	r3, r4
 8018e8e:	4680      	mov	r8, r0
 8018e90:	f2c0 8081 	blt.w	8018f96 <quorem+0x112>
 8018e94:	3c01      	subs	r4, #1
 8018e96:	f101 0714 	add.w	r7, r1, #20
 8018e9a:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8018e9e:	f100 0614 	add.w	r6, r0, #20
 8018ea2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8018ea6:	eb06 030e 	add.w	r3, r6, lr
 8018eaa:	9301      	str	r3, [sp, #4]
 8018eac:	3501      	adds	r5, #1
 8018eae:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 8018eb2:	fbb3 f5f5 	udiv	r5, r3, r5
 8018eb6:	eb07 090e 	add.w	r9, r7, lr
 8018eba:	b3c5      	cbz	r5, 8018f2e <quorem+0xaa>
 8018ebc:	f04f 0a00 	mov.w	sl, #0
 8018ec0:	4638      	mov	r0, r7
 8018ec2:	46b4      	mov	ip, r6
 8018ec4:	46d3      	mov	fp, sl
 8018ec6:	f850 3b04 	ldr.w	r3, [r0], #4
 8018eca:	b29a      	uxth	r2, r3
 8018ecc:	0c1b      	lsrs	r3, r3, #16
 8018ece:	fb02 a205 	mla	r2, r2, r5, sl
 8018ed2:	436b      	muls	r3, r5
 8018ed4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8018ed8:	b292      	uxth	r2, r2
 8018eda:	ebc2 020b 	rsb	r2, r2, fp
 8018ede:	f8bc b000 	ldrh.w	fp, [ip]
 8018ee2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018ee6:	fa12 f28b 	uxtah	r2, r2, fp
 8018eea:	fa1f fb83 	uxth.w	fp, r3
 8018eee:	f8dc 3000 	ldr.w	r3, [ip]
 8018ef2:	ebcb 4313 	rsb	r3, fp, r3, lsr #16
 8018ef6:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8018efa:	b292      	uxth	r2, r2
 8018efc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8018f00:	4548      	cmp	r0, r9
 8018f02:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8018f06:	f84c 2b04 	str.w	r2, [ip], #4
 8018f0a:	d9dc      	bls.n	8018ec6 <quorem+0x42>
 8018f0c:	f856 300e 	ldr.w	r3, [r6, lr]
 8018f10:	b96b      	cbnz	r3, 8018f2e <quorem+0xaa>
 8018f12:	9b01      	ldr	r3, [sp, #4]
 8018f14:	3b04      	subs	r3, #4
 8018f16:	42b3      	cmp	r3, r6
 8018f18:	461a      	mov	r2, r3
 8018f1a:	d802      	bhi.n	8018f22 <quorem+0x9e>
 8018f1c:	f8c8 4010 	str.w	r4, [r8, #16]
 8018f20:	e005      	b.n	8018f2e <quorem+0xaa>
 8018f22:	6812      	ldr	r2, [r2, #0]
 8018f24:	3b04      	subs	r3, #4
 8018f26:	2a00      	cmp	r2, #0
 8018f28:	d1f8      	bne.n	8018f1c <quorem+0x98>
 8018f2a:	3c01      	subs	r4, #1
 8018f2c:	e7f3      	b.n	8018f16 <quorem+0x92>
 8018f2e:	4640      	mov	r0, r8
 8018f30:	f001 fbd7 	bl	801a6e2 <__mcmp>
 8018f34:	2800      	cmp	r0, #0
 8018f36:	db2c      	blt.n	8018f92 <quorem+0x10e>
 8018f38:	3501      	adds	r5, #1
 8018f3a:	4630      	mov	r0, r6
 8018f3c:	f04f 0e00 	mov.w	lr, #0
 8018f40:	f857 1b04 	ldr.w	r1, [r7], #4
 8018f44:	f8d0 c000 	ldr.w	ip, [r0]
 8018f48:	b28a      	uxth	r2, r1
 8018f4a:	ebc2 030e 	rsb	r3, r2, lr
 8018f4e:	0c09      	lsrs	r1, r1, #16
 8018f50:	fa13 f38c 	uxtah	r3, r3, ip
 8018f54:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
 8018f58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018f5c:	b29b      	uxth	r3, r3
 8018f5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018f62:	454f      	cmp	r7, r9
 8018f64:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8018f68:	f840 3b04 	str.w	r3, [r0], #4
 8018f6c:	d9e8      	bls.n	8018f40 <quorem+0xbc>
 8018f6e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8018f72:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8018f76:	b962      	cbnz	r2, 8018f92 <quorem+0x10e>
 8018f78:	3b04      	subs	r3, #4
 8018f7a:	42b3      	cmp	r3, r6
 8018f7c:	461a      	mov	r2, r3
 8018f7e:	d802      	bhi.n	8018f86 <quorem+0x102>
 8018f80:	f8c8 4010 	str.w	r4, [r8, #16]
 8018f84:	e005      	b.n	8018f92 <quorem+0x10e>
 8018f86:	6812      	ldr	r2, [r2, #0]
 8018f88:	3b04      	subs	r3, #4
 8018f8a:	2a00      	cmp	r2, #0
 8018f8c:	d1f8      	bne.n	8018f80 <quorem+0xfc>
 8018f8e:	3c01      	subs	r4, #1
 8018f90:	e7f3      	b.n	8018f7a <quorem+0xf6>
 8018f92:	4628      	mov	r0, r5
 8018f94:	e000      	b.n	8018f98 <quorem+0x114>
 8018f96:	2000      	movs	r0, #0
 8018f98:	b003      	add	sp, #12
 8018f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08018fa0 <_dtoa_r>:
 8018fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fa4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018fa6:	b097      	sub	sp, #92	; 0x5c
 8018fa8:	4682      	mov	sl, r0
 8018faa:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8018fac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018fb0:	b945      	cbnz	r5, 8018fc4 <_dtoa_r+0x24>
 8018fb2:	2010      	movs	r0, #16
 8018fb4:	f7fd fe0e 	bl	8016bd4 <malloc>
 8018fb8:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 8018fbc:	6045      	str	r5, [r0, #4]
 8018fbe:	6085      	str	r5, [r0, #8]
 8018fc0:	6005      	str	r5, [r0, #0]
 8018fc2:	60c5      	str	r5, [r0, #12]
 8018fc4:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8018fc8:	6819      	ldr	r1, [r3, #0]
 8018fca:	b159      	cbz	r1, 8018fe4 <_dtoa_r+0x44>
 8018fcc:	685a      	ldr	r2, [r3, #4]
 8018fce:	604a      	str	r2, [r1, #4]
 8018fd0:	2301      	movs	r3, #1
 8018fd2:	4093      	lsls	r3, r2
 8018fd4:	608b      	str	r3, [r1, #8]
 8018fd6:	4650      	mov	r0, sl
 8018fd8:	f001 f966 	bl	801a2a8 <_Bfree>
 8018fdc:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8018fe0:	2200      	movs	r2, #0
 8018fe2:	601a      	str	r2, [r3, #0]
 8018fe4:	9b03      	ldr	r3, [sp, #12]
 8018fe6:	4aa2      	ldr	r2, [pc, #648]	; (8019270 <_dtoa_r+0x2d0>)
 8018fe8:	2b00      	cmp	r3, #0
 8018fea:	bfbf      	itttt	lt
 8018fec:	2301      	movlt	r3, #1
 8018fee:	6023      	strlt	r3, [r4, #0]
 8018ff0:	9b03      	ldrlt	r3, [sp, #12]
 8018ff2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8018ff6:	bfb8      	it	lt
 8018ff8:	9303      	strlt	r3, [sp, #12]
 8018ffa:	9f03      	ldr	r7, [sp, #12]
 8018ffc:	bfa4      	itt	ge
 8018ffe:	2300      	movge	r3, #0
 8019000:	6023      	strge	r3, [r4, #0]
 8019002:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 8019006:	0d1b      	lsrs	r3, r3, #20
 8019008:	051b      	lsls	r3, r3, #20
 801900a:	4293      	cmp	r3, r2
 801900c:	d11d      	bne.n	801904a <_dtoa_r+0xaa>
 801900e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8019010:	f242 730f 	movw	r3, #9999	; 0x270f
 8019014:	6013      	str	r3, [r2, #0]
 8019016:	9b02      	ldr	r3, [sp, #8]
 8019018:	b943      	cbnz	r3, 801902c <_dtoa_r+0x8c>
 801901a:	4a96      	ldr	r2, [pc, #600]	; (8019274 <_dtoa_r+0x2d4>)
 801901c:	4b96      	ldr	r3, [pc, #600]	; (8019278 <_dtoa_r+0x2d8>)
 801901e:	f3c7 0013 	ubfx	r0, r7, #0, #20
 8019022:	2800      	cmp	r0, #0
 8019024:	bf14      	ite	ne
 8019026:	4618      	movne	r0, r3
 8019028:	4610      	moveq	r0, r2
 801902a:	e000      	b.n	801902e <_dtoa_r+0x8e>
 801902c:	4892      	ldr	r0, [pc, #584]	; (8019278 <_dtoa_r+0x2d8>)
 801902e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019030:	2b00      	cmp	r3, #0
 8019032:	f000 8573 	beq.w	8019b1c <_dtoa_r+0xb7c>
 8019036:	78c3      	ldrb	r3, [r0, #3]
 8019038:	b113      	cbz	r3, 8019040 <_dtoa_r+0xa0>
 801903a:	f100 0308 	add.w	r3, r0, #8
 801903e:	e000      	b.n	8019042 <_dtoa_r+0xa2>
 8019040:	1cc3      	adds	r3, r0, #3
 8019042:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8019044:	6013      	str	r3, [r2, #0]
 8019046:	f000 bd69 	b.w	8019b1c <_dtoa_r+0xb7c>
 801904a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801904e:	2200      	movs	r2, #0
 8019050:	4620      	mov	r0, r4
 8019052:	4629      	mov	r1, r5
 8019054:	2300      	movs	r3, #0
 8019056:	f002 fab9 	bl	801b5cc <__aeabi_dcmpeq>
 801905a:	4680      	mov	r8, r0
 801905c:	b158      	cbz	r0, 8019076 <_dtoa_r+0xd6>
 801905e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8019060:	2301      	movs	r3, #1
 8019062:	6013      	str	r3, [r2, #0]
 8019064:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019066:	2b00      	cmp	r3, #0
 8019068:	f000 8546 	beq.w	8019af8 <_dtoa_r+0xb58>
 801906c:	4883      	ldr	r0, [pc, #524]	; (801927c <_dtoa_r+0x2dc>)
 801906e:	6018      	str	r0, [r3, #0]
 8019070:	3801      	subs	r0, #1
 8019072:	f000 bd53 	b.w	8019b1c <_dtoa_r+0xb7c>
 8019076:	ab15      	add	r3, sp, #84	; 0x54
 8019078:	9300      	str	r3, [sp, #0]
 801907a:	ab14      	add	r3, sp, #80	; 0x50
 801907c:	9301      	str	r3, [sp, #4]
 801907e:	4650      	mov	r0, sl
 8019080:	4622      	mov	r2, r4
 8019082:	462b      	mov	r3, r5
 8019084:	f001 fc1b 	bl	801a8be <__d2b>
 8019088:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801908c:	9007      	str	r0, [sp, #28]
 801908e:	b15e      	cbz	r6, 80190a8 <_dtoa_r+0x108>
 8019090:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8019094:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8019098:	4620      	mov	r0, r4
 801909a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801909e:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 80190a2:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80190a6:	e01d      	b.n	80190e4 <_dtoa_r+0x144>
 80190a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80190aa:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80190ac:	441e      	add	r6, r3
 80190ae:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 80190b2:	429e      	cmp	r6, r3
 80190b4:	bfad      	iteet	ge
 80190b6:	9a02      	ldrge	r2, [sp, #8]
 80190b8:	4b71      	ldrlt	r3, [pc, #452]	; (8019280 <_dtoa_r+0x2e0>)
 80190ba:	9a02      	ldrlt	r2, [sp, #8]
 80190bc:	f206 4312 	addwge	r3, r6, #1042	; 0x412
 80190c0:	bfa3      	ittte	ge
 80190c2:	fa22 f003 	lsrge.w	r0, r2, r3
 80190c6:	4b6f      	ldrge	r3, [pc, #444]	; (8019284 <_dtoa_r+0x2e4>)
 80190c8:	1b9b      	subge	r3, r3, r6
 80190ca:	1b9b      	sublt	r3, r3, r6
 80190cc:	bfaa      	itet	ge
 80190ce:	409f      	lslge	r7, r3
 80190d0:	fa02 f003 	lsllt.w	r0, r2, r3
 80190d4:	4338      	orrge	r0, r7
 80190d6:	f001 ff9b 	bl	801b010 <__aeabi_ui2d>
 80190da:	2301      	movs	r3, #1
 80190dc:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80190e0:	3e01      	subs	r6, #1
 80190e2:	9313      	str	r3, [sp, #76]	; 0x4c
 80190e4:	2200      	movs	r2, #0
 80190e6:	4b68      	ldr	r3, [pc, #416]	; (8019288 <_dtoa_r+0x2e8>)
 80190e8:	f001 fe54 	bl	801ad94 <__aeabi_dsub>
 80190ec:	a35a      	add	r3, pc, #360	; (adr r3, 8019258 <_dtoa_r+0x2b8>)
 80190ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190f2:	f002 f803 	bl	801b0fc <__aeabi_dmul>
 80190f6:	a35a      	add	r3, pc, #360	; (adr r3, 8019260 <_dtoa_r+0x2c0>)
 80190f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190fc:	f001 fe4c 	bl	801ad98 <__adddf3>
 8019100:	4604      	mov	r4, r0
 8019102:	4630      	mov	r0, r6
 8019104:	460d      	mov	r5, r1
 8019106:	f001 ff93 	bl	801b030 <__aeabi_i2d>
 801910a:	a357      	add	r3, pc, #348	; (adr r3, 8019268 <_dtoa_r+0x2c8>)
 801910c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019110:	f001 fff4 	bl	801b0fc <__aeabi_dmul>
 8019114:	4602      	mov	r2, r0
 8019116:	460b      	mov	r3, r1
 8019118:	4620      	mov	r0, r4
 801911a:	4629      	mov	r1, r5
 801911c:	f001 fe3c 	bl	801ad98 <__adddf3>
 8019120:	4604      	mov	r4, r0
 8019122:	460d      	mov	r5, r1
 8019124:	f002 fa84 	bl	801b630 <__aeabi_d2iz>
 8019128:	4629      	mov	r1, r5
 801912a:	4683      	mov	fp, r0
 801912c:	2200      	movs	r2, #0
 801912e:	4620      	mov	r0, r4
 8019130:	2300      	movs	r3, #0
 8019132:	f002 fa55 	bl	801b5e0 <__aeabi_dcmplt>
 8019136:	b158      	cbz	r0, 8019150 <_dtoa_r+0x1b0>
 8019138:	4658      	mov	r0, fp
 801913a:	f001 ff79 	bl	801b030 <__aeabi_i2d>
 801913e:	4602      	mov	r2, r0
 8019140:	460b      	mov	r3, r1
 8019142:	4620      	mov	r0, r4
 8019144:	4629      	mov	r1, r5
 8019146:	f002 fa41 	bl	801b5cc <__aeabi_dcmpeq>
 801914a:	b908      	cbnz	r0, 8019150 <_dtoa_r+0x1b0>
 801914c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019150:	f1bb 0f16 	cmp.w	fp, #22
 8019154:	d80d      	bhi.n	8019172 <_dtoa_r+0x1d2>
 8019156:	4b4d      	ldr	r3, [pc, #308]	; (801928c <_dtoa_r+0x2ec>)
 8019158:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801915c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019160:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019164:	f002 fa5a 	bl	801b61c <__aeabi_dcmpgt>
 8019168:	b130      	cbz	r0, 8019178 <_dtoa_r+0x1d8>
 801916a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801916e:	2300      	movs	r3, #0
 8019170:	e000      	b.n	8019174 <_dtoa_r+0x1d4>
 8019172:	2301      	movs	r3, #1
 8019174:	9312      	str	r3, [sp, #72]	; 0x48
 8019176:	e000      	b.n	801917a <_dtoa_r+0x1da>
 8019178:	9012      	str	r0, [sp, #72]	; 0x48
 801917a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801917c:	1b9e      	subs	r6, r3, r6
 801917e:	1e73      	subs	r3, r6, #1
 8019180:	930a      	str	r3, [sp, #40]	; 0x28
 8019182:	bf45      	ittet	mi
 8019184:	425b      	negmi	r3, r3
 8019186:	9309      	strmi	r3, [sp, #36]	; 0x24
 8019188:	2300      	movpl	r3, #0
 801918a:	2300      	movmi	r3, #0
 801918c:	bf4c      	ite	mi
 801918e:	930a      	strmi	r3, [sp, #40]	; 0x28
 8019190:	9309      	strpl	r3, [sp, #36]	; 0x24
 8019192:	f1bb 0f00 	cmp.w	fp, #0
 8019196:	db07      	blt.n	80191a8 <_dtoa_r+0x208>
 8019198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801919a:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 801919e:	445b      	add	r3, fp
 80191a0:	930a      	str	r3, [sp, #40]	; 0x28
 80191a2:	2300      	movs	r3, #0
 80191a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80191a6:	e008      	b.n	80191ba <_dtoa_r+0x21a>
 80191a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80191aa:	ebcb 0303 	rsb	r3, fp, r3
 80191ae:	9309      	str	r3, [sp, #36]	; 0x24
 80191b0:	f1cb 0300 	rsb	r3, fp, #0
 80191b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80191b6:	2300      	movs	r3, #0
 80191b8:	930d      	str	r3, [sp, #52]	; 0x34
 80191ba:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80191bc:	2b09      	cmp	r3, #9
 80191be:	d828      	bhi.n	8019212 <_dtoa_r+0x272>
 80191c0:	2b05      	cmp	r3, #5
 80191c2:	bfc4      	itt	gt
 80191c4:	3b04      	subgt	r3, #4
 80191c6:	9320      	strgt	r3, [sp, #128]	; 0x80
 80191c8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80191ca:	f1a3 0302 	sub.w	r3, r3, #2
 80191ce:	bfcc      	ite	gt
 80191d0:	2500      	movgt	r5, #0
 80191d2:	2501      	movle	r5, #1
 80191d4:	2b03      	cmp	r3, #3
 80191d6:	d821      	bhi.n	801921c <_dtoa_r+0x27c>
 80191d8:	e8df f003 	tbb	[pc, r3]
 80191dc:	10040e02 	.word	0x10040e02
 80191e0:	2300      	movs	r3, #0
 80191e2:	e000      	b.n	80191e6 <_dtoa_r+0x246>
 80191e4:	2301      	movs	r3, #1
 80191e6:	930c      	str	r3, [sp, #48]	; 0x30
 80191e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80191ea:	2b00      	cmp	r3, #0
 80191ec:	dc20      	bgt.n	8019230 <_dtoa_r+0x290>
 80191ee:	2301      	movs	r3, #1
 80191f0:	9306      	str	r3, [sp, #24]
 80191f2:	9305      	str	r3, [sp, #20]
 80191f4:	461a      	mov	r2, r3
 80191f6:	e019      	b.n	801922c <_dtoa_r+0x28c>
 80191f8:	2300      	movs	r3, #0
 80191fa:	e000      	b.n	80191fe <_dtoa_r+0x25e>
 80191fc:	2301      	movs	r3, #1
 80191fe:	930c      	str	r3, [sp, #48]	; 0x30
 8019200:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019202:	445b      	add	r3, fp
 8019204:	9306      	str	r3, [sp, #24]
 8019206:	3301      	adds	r3, #1
 8019208:	2b01      	cmp	r3, #1
 801920a:	9305      	str	r3, [sp, #20]
 801920c:	bfb8      	it	lt
 801920e:	2301      	movlt	r3, #1
 8019210:	e011      	b.n	8019236 <_dtoa_r+0x296>
 8019212:	2501      	movs	r5, #1
 8019214:	2300      	movs	r3, #0
 8019216:	9320      	str	r3, [sp, #128]	; 0x80
 8019218:	950c      	str	r5, [sp, #48]	; 0x30
 801921a:	e001      	b.n	8019220 <_dtoa_r+0x280>
 801921c:	2301      	movs	r3, #1
 801921e:	930c      	str	r3, [sp, #48]	; 0x30
 8019220:	f04f 33ff 	mov.w	r3, #4294967295
 8019224:	9306      	str	r3, [sp, #24]
 8019226:	9305      	str	r3, [sp, #20]
 8019228:	2200      	movs	r2, #0
 801922a:	2312      	movs	r3, #18
 801922c:	9221      	str	r2, [sp, #132]	; 0x84
 801922e:	e002      	b.n	8019236 <_dtoa_r+0x296>
 8019230:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019232:	9306      	str	r3, [sp, #24]
 8019234:	9305      	str	r3, [sp, #20]
 8019236:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 801923a:	2200      	movs	r2, #0
 801923c:	6062      	str	r2, [r4, #4]
 801923e:	2104      	movs	r1, #4
 8019240:	f101 0214 	add.w	r2, r1, #20
 8019244:	429a      	cmp	r2, r3
 8019246:	d823      	bhi.n	8019290 <_dtoa_r+0x2f0>
 8019248:	6862      	ldr	r2, [r4, #4]
 801924a:	3201      	adds	r2, #1
 801924c:	6062      	str	r2, [r4, #4]
 801924e:	0049      	lsls	r1, r1, #1
 8019250:	e7f6      	b.n	8019240 <_dtoa_r+0x2a0>
 8019252:	bf00      	nop
 8019254:	f3af 8000 	nop.w
 8019258:	636f4361 	.word	0x636f4361
 801925c:	3fd287a7 	.word	0x3fd287a7
 8019260:	8b60c8b3 	.word	0x8b60c8b3
 8019264:	3fc68a28 	.word	0x3fc68a28
 8019268:	509f79fb 	.word	0x509f79fb
 801926c:	3fd34413 	.word	0x3fd34413
 8019270:	7ff00000 	.word	0x7ff00000
 8019274:	0801d315 	.word	0x0801d315
 8019278:	0801d31e 	.word	0x0801d31e
 801927c:	0801d196 	.word	0x0801d196
 8019280:	fffffbee 	.word	0xfffffbee
 8019284:	fffffc0e 	.word	0xfffffc0e
 8019288:	3ff80000 	.word	0x3ff80000
 801928c:	0801d330 	.word	0x0801d330
 8019290:	4650      	mov	r0, sl
 8019292:	6861      	ldr	r1, [r4, #4]
 8019294:	f000 ffd3 	bl	801a23e <_Balloc>
 8019298:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 801929c:	6020      	str	r0, [r4, #0]
 801929e:	681b      	ldr	r3, [r3, #0]
 80192a0:	9308      	str	r3, [sp, #32]
 80192a2:	9b05      	ldr	r3, [sp, #20]
 80192a4:	2b0e      	cmp	r3, #14
 80192a6:	f200 814b 	bhi.w	8019540 <_dtoa_r+0x5a0>
 80192aa:	2d00      	cmp	r5, #0
 80192ac:	f000 8148 	beq.w	8019540 <_dtoa_r+0x5a0>
 80192b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80192b4:	f1bb 0f00 	cmp.w	fp, #0
 80192b8:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80192bc:	dd31      	ble.n	8019322 <_dtoa_r+0x382>
 80192be:	4ab3      	ldr	r2, [pc, #716]	; (801958c <_dtoa_r+0x5ec>)
 80192c0:	f00b 030f 	and.w	r3, fp, #15
 80192c4:	ea4f 172b 	mov.w	r7, fp, asr #4
 80192c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80192cc:	06f8      	lsls	r0, r7, #27
 80192ce:	e9d3 4500 	ldrd	r4, r5, [r3]
 80192d2:	d50c      	bpl.n	80192ee <_dtoa_r+0x34e>
 80192d4:	4bae      	ldr	r3, [pc, #696]	; (8019590 <_dtoa_r+0x5f0>)
 80192d6:	ec51 0b17 	vmov	r0, r1, d7
 80192da:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80192de:	f002 f837 	bl	801b350 <__aeabi_ddiv>
 80192e2:	f007 070f 	and.w	r7, r7, #15
 80192e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80192ea:	2603      	movs	r6, #3
 80192ec:	e000      	b.n	80192f0 <_dtoa_r+0x350>
 80192ee:	2602      	movs	r6, #2
 80192f0:	f8df 829c 	ldr.w	r8, [pc, #668]	; 8019590 <_dtoa_r+0x5f0>
 80192f4:	b177      	cbz	r7, 8019314 <_dtoa_r+0x374>
 80192f6:	07f9      	lsls	r1, r7, #31
 80192f8:	d508      	bpl.n	801930c <_dtoa_r+0x36c>
 80192fa:	4620      	mov	r0, r4
 80192fc:	4629      	mov	r1, r5
 80192fe:	e9d8 2300 	ldrd	r2, r3, [r8]
 8019302:	f001 fefb 	bl	801b0fc <__aeabi_dmul>
 8019306:	3601      	adds	r6, #1
 8019308:	4604      	mov	r4, r0
 801930a:	460d      	mov	r5, r1
 801930c:	107f      	asrs	r7, r7, #1
 801930e:	f108 0808 	add.w	r8, r8, #8
 8019312:	e7ef      	b.n	80192f4 <_dtoa_r+0x354>
 8019314:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019318:	4622      	mov	r2, r4
 801931a:	462b      	mov	r3, r5
 801931c:	f002 f818 	bl	801b350 <__aeabi_ddiv>
 8019320:	e01b      	b.n	801935a <_dtoa_r+0x3ba>
 8019322:	f1cb 0400 	rsb	r4, fp, #0
 8019326:	b1dc      	cbz	r4, 8019360 <_dtoa_r+0x3c0>
 8019328:	4b98      	ldr	r3, [pc, #608]	; (801958c <_dtoa_r+0x5ec>)
 801932a:	4d99      	ldr	r5, [pc, #612]	; (8019590 <_dtoa_r+0x5f0>)
 801932c:	f004 020f 	and.w	r2, r4, #15
 8019330:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019334:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8019338:	e9d3 2300 	ldrd	r2, r3, [r3]
 801933c:	f001 fede 	bl	801b0fc <__aeabi_dmul>
 8019340:	1124      	asrs	r4, r4, #4
 8019342:	2602      	movs	r6, #2
 8019344:	b14c      	cbz	r4, 801935a <_dtoa_r+0x3ba>
 8019346:	07e2      	lsls	r2, r4, #31
 8019348:	d504      	bpl.n	8019354 <_dtoa_r+0x3b4>
 801934a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801934e:	3601      	adds	r6, #1
 8019350:	f001 fed4 	bl	801b0fc <__aeabi_dmul>
 8019354:	1064      	asrs	r4, r4, #1
 8019356:	3508      	adds	r5, #8
 8019358:	e7f4      	b.n	8019344 <_dtoa_r+0x3a4>
 801935a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801935e:	e000      	b.n	8019362 <_dtoa_r+0x3c2>
 8019360:	2602      	movs	r6, #2
 8019362:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019364:	b1db      	cbz	r3, 801939e <_dtoa_r+0x3fe>
 8019366:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801936a:	2200      	movs	r2, #0
 801936c:	4620      	mov	r0, r4
 801936e:	4629      	mov	r1, r5
 8019370:	4b88      	ldr	r3, [pc, #544]	; (8019594 <_dtoa_r+0x5f4>)
 8019372:	f002 f935 	bl	801b5e0 <__aeabi_dcmplt>
 8019376:	b190      	cbz	r0, 801939e <_dtoa_r+0x3fe>
 8019378:	9b05      	ldr	r3, [sp, #20]
 801937a:	b183      	cbz	r3, 801939e <_dtoa_r+0x3fe>
 801937c:	9b06      	ldr	r3, [sp, #24]
 801937e:	2b00      	cmp	r3, #0
 8019380:	f340 80da 	ble.w	8019538 <_dtoa_r+0x598>
 8019384:	4629      	mov	r1, r5
 8019386:	4620      	mov	r0, r4
 8019388:	2200      	movs	r2, #0
 801938a:	4b83      	ldr	r3, [pc, #524]	; (8019598 <_dtoa_r+0x5f8>)
 801938c:	f001 feb6 	bl	801b0fc <__aeabi_dmul>
 8019390:	f10b 37ff 	add.w	r7, fp, #4294967295
 8019394:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019398:	3601      	adds	r6, #1
 801939a:	9d06      	ldr	r5, [sp, #24]
 801939c:	e001      	b.n	80193a2 <_dtoa_r+0x402>
 801939e:	9d05      	ldr	r5, [sp, #20]
 80193a0:	465f      	mov	r7, fp
 80193a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80193a6:	4630      	mov	r0, r6
 80193a8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80193ac:	f001 fe40 	bl	801b030 <__aeabi_i2d>
 80193b0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80193b4:	f001 fea2 	bl	801b0fc <__aeabi_dmul>
 80193b8:	2200      	movs	r2, #0
 80193ba:	4b78      	ldr	r3, [pc, #480]	; (801959c <_dtoa_r+0x5fc>)
 80193bc:	f001 fcec 	bl	801ad98 <__adddf3>
 80193c0:	4680      	mov	r8, r0
 80193c2:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 80193c6:	b9cd      	cbnz	r5, 80193fc <_dtoa_r+0x45c>
 80193c8:	2200      	movs	r2, #0
 80193ca:	4b75      	ldr	r3, [pc, #468]	; (80195a0 <_dtoa_r+0x600>)
 80193cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80193d0:	f001 fce0 	bl	801ad94 <__aeabi_dsub>
 80193d4:	4642      	mov	r2, r8
 80193d6:	464b      	mov	r3, r9
 80193d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80193dc:	f002 f91e 	bl	801b61c <__aeabi_dcmpgt>
 80193e0:	2800      	cmp	r0, #0
 80193e2:	f040 8246 	bne.w	8019872 <_dtoa_r+0x8d2>
 80193e6:	4642      	mov	r2, r8
 80193e8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80193ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80193f0:	f002 f8f6 	bl	801b5e0 <__aeabi_dcmplt>
 80193f4:	2800      	cmp	r0, #0
 80193f6:	f040 8236 	bne.w	8019866 <_dtoa_r+0x8c6>
 80193fa:	e09d      	b.n	8019538 <_dtoa_r+0x598>
 80193fc:	4b63      	ldr	r3, [pc, #396]	; (801958c <_dtoa_r+0x5ec>)
 80193fe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019400:	1e6a      	subs	r2, r5, #1
 8019402:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019406:	2900      	cmp	r1, #0
 8019408:	d049      	beq.n	801949e <_dtoa_r+0x4fe>
 801940a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801940e:	2000      	movs	r0, #0
 8019410:	4964      	ldr	r1, [pc, #400]	; (80195a4 <_dtoa_r+0x604>)
 8019412:	f001 ff9d 	bl	801b350 <__aeabi_ddiv>
 8019416:	4642      	mov	r2, r8
 8019418:	464b      	mov	r3, r9
 801941a:	f001 fcbb 	bl	801ad94 <__aeabi_dsub>
 801941e:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8019422:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019426:	9c08      	ldr	r4, [sp, #32]
 8019428:	4649      	mov	r1, r9
 801942a:	4640      	mov	r0, r8
 801942c:	f002 f900 	bl	801b630 <__aeabi_d2iz>
 8019430:	4606      	mov	r6, r0
 8019432:	f001 fdfd 	bl	801b030 <__aeabi_i2d>
 8019436:	4602      	mov	r2, r0
 8019438:	460b      	mov	r3, r1
 801943a:	4640      	mov	r0, r8
 801943c:	4649      	mov	r1, r9
 801943e:	f001 fca9 	bl	801ad94 <__aeabi_dsub>
 8019442:	3630      	adds	r6, #48	; 0x30
 8019444:	f804 6b01 	strb.w	r6, [r4], #1
 8019448:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801944c:	4680      	mov	r8, r0
 801944e:	4689      	mov	r9, r1
 8019450:	f002 f8c6 	bl	801b5e0 <__aeabi_dcmplt>
 8019454:	2800      	cmp	r0, #0
 8019456:	f040 8340 	bne.w	8019ada <_dtoa_r+0xb3a>
 801945a:	4642      	mov	r2, r8
 801945c:	464b      	mov	r3, r9
 801945e:	2000      	movs	r0, #0
 8019460:	494c      	ldr	r1, [pc, #304]	; (8019594 <_dtoa_r+0x5f4>)
 8019462:	f001 fc97 	bl	801ad94 <__aeabi_dsub>
 8019466:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801946a:	f002 f8b9 	bl	801b5e0 <__aeabi_dcmplt>
 801946e:	2800      	cmp	r0, #0
 8019470:	f040 80d3 	bne.w	801961a <_dtoa_r+0x67a>
 8019474:	9b08      	ldr	r3, [sp, #32]
 8019476:	1ae3      	subs	r3, r4, r3
 8019478:	42ab      	cmp	r3, r5
 801947a:	da5d      	bge.n	8019538 <_dtoa_r+0x598>
 801947c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019480:	2200      	movs	r2, #0
 8019482:	4b45      	ldr	r3, [pc, #276]	; (8019598 <_dtoa_r+0x5f8>)
 8019484:	f001 fe3a 	bl	801b0fc <__aeabi_dmul>
 8019488:	2200      	movs	r2, #0
 801948a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801948e:	4b42      	ldr	r3, [pc, #264]	; (8019598 <_dtoa_r+0x5f8>)
 8019490:	4640      	mov	r0, r8
 8019492:	4649      	mov	r1, r9
 8019494:	f001 fe32 	bl	801b0fc <__aeabi_dmul>
 8019498:	4680      	mov	r8, r0
 801949a:	4689      	mov	r9, r1
 801949c:	e7c4      	b.n	8019428 <_dtoa_r+0x488>
 801949e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80194a2:	4642      	mov	r2, r8
 80194a4:	464b      	mov	r3, r9
 80194a6:	f001 fe29 	bl	801b0fc <__aeabi_dmul>
 80194aa:	9b08      	ldr	r3, [sp, #32]
 80194ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80194b0:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 80194b4:	195c      	adds	r4, r3, r5
 80194b6:	461d      	mov	r5, r3
 80194b8:	4649      	mov	r1, r9
 80194ba:	4640      	mov	r0, r8
 80194bc:	f002 f8b8 	bl	801b630 <__aeabi_d2iz>
 80194c0:	4606      	mov	r6, r0
 80194c2:	f001 fdb5 	bl	801b030 <__aeabi_i2d>
 80194c6:	3630      	adds	r6, #48	; 0x30
 80194c8:	4602      	mov	r2, r0
 80194ca:	460b      	mov	r3, r1
 80194cc:	4640      	mov	r0, r8
 80194ce:	4649      	mov	r1, r9
 80194d0:	f001 fc60 	bl	801ad94 <__aeabi_dsub>
 80194d4:	f805 6b01 	strb.w	r6, [r5], #1
 80194d8:	42a5      	cmp	r5, r4
 80194da:	4680      	mov	r8, r0
 80194dc:	4689      	mov	r9, r1
 80194de:	d124      	bne.n	801952a <_dtoa_r+0x58a>
 80194e0:	2200      	movs	r2, #0
 80194e2:	4b30      	ldr	r3, [pc, #192]	; (80195a4 <_dtoa_r+0x604>)
 80194e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80194e8:	f001 fc56 	bl	801ad98 <__adddf3>
 80194ec:	4602      	mov	r2, r0
 80194ee:	460b      	mov	r3, r1
 80194f0:	4640      	mov	r0, r8
 80194f2:	4649      	mov	r1, r9
 80194f4:	f002 f892 	bl	801b61c <__aeabi_dcmpgt>
 80194f8:	2800      	cmp	r0, #0
 80194fa:	f040 808e 	bne.w	801961a <_dtoa_r+0x67a>
 80194fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019502:	2000      	movs	r0, #0
 8019504:	4927      	ldr	r1, [pc, #156]	; (80195a4 <_dtoa_r+0x604>)
 8019506:	f001 fc45 	bl	801ad94 <__aeabi_dsub>
 801950a:	4602      	mov	r2, r0
 801950c:	460b      	mov	r3, r1
 801950e:	4640      	mov	r0, r8
 8019510:	4649      	mov	r1, r9
 8019512:	f002 f865 	bl	801b5e0 <__aeabi_dcmplt>
 8019516:	b178      	cbz	r0, 8019538 <_dtoa_r+0x598>
 8019518:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 801951c:	2b30      	cmp	r3, #48	; 0x30
 801951e:	f104 32ff 	add.w	r2, r4, #4294967295
 8019522:	f040 82da 	bne.w	8019ada <_dtoa_r+0xb3a>
 8019526:	4614      	mov	r4, r2
 8019528:	e7f6      	b.n	8019518 <_dtoa_r+0x578>
 801952a:	2200      	movs	r2, #0
 801952c:	4b1a      	ldr	r3, [pc, #104]	; (8019598 <_dtoa_r+0x5f8>)
 801952e:	f001 fde5 	bl	801b0fc <__aeabi_dmul>
 8019532:	4680      	mov	r8, r0
 8019534:	4689      	mov	r9, r1
 8019536:	e7bf      	b.n	80194b8 <_dtoa_r+0x518>
 8019538:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801953c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8019540:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019542:	2b00      	cmp	r3, #0
 8019544:	f2c0 808b 	blt.w	801965e <_dtoa_r+0x6be>
 8019548:	f1bb 0f0e 	cmp.w	fp, #14
 801954c:	f300 8087 	bgt.w	801965e <_dtoa_r+0x6be>
 8019550:	4b0e      	ldr	r3, [pc, #56]	; (801958c <_dtoa_r+0x5ec>)
 8019552:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8019556:	e9d3 6700 	ldrd	r6, r7, [r3]
 801955a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801955c:	2b00      	cmp	r3, #0
 801955e:	da23      	bge.n	80195a8 <_dtoa_r+0x608>
 8019560:	9b05      	ldr	r3, [sp, #20]
 8019562:	2b00      	cmp	r3, #0
 8019564:	dc20      	bgt.n	80195a8 <_dtoa_r+0x608>
 8019566:	f040 817d 	bne.w	8019864 <_dtoa_r+0x8c4>
 801956a:	4630      	mov	r0, r6
 801956c:	2200      	movs	r2, #0
 801956e:	4b0c      	ldr	r3, [pc, #48]	; (80195a0 <_dtoa_r+0x600>)
 8019570:	4639      	mov	r1, r7
 8019572:	f001 fdc3 	bl	801b0fc <__aeabi_dmul>
 8019576:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801957a:	f002 f845 	bl	801b608 <__aeabi_dcmpge>
 801957e:	9d05      	ldr	r5, [sp, #20]
 8019580:	462e      	mov	r6, r5
 8019582:	2800      	cmp	r0, #0
 8019584:	f040 8170 	bne.w	8019868 <_dtoa_r+0x8c8>
 8019588:	e175      	b.n	8019876 <_dtoa_r+0x8d6>
 801958a:	bf00      	nop
 801958c:	0801d330 	.word	0x0801d330
 8019590:	0801d3f8 	.word	0x0801d3f8
 8019594:	3ff00000 	.word	0x3ff00000
 8019598:	40240000 	.word	0x40240000
 801959c:	401c0000 	.word	0x401c0000
 80195a0:	40140000 	.word	0x40140000
 80195a4:	3fe00000 	.word	0x3fe00000
 80195a8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80195ac:	9c08      	ldr	r4, [sp, #32]
 80195ae:	4632      	mov	r2, r6
 80195b0:	463b      	mov	r3, r7
 80195b2:	4640      	mov	r0, r8
 80195b4:	4649      	mov	r1, r9
 80195b6:	f001 fecb 	bl	801b350 <__aeabi_ddiv>
 80195ba:	f002 f839 	bl	801b630 <__aeabi_d2iz>
 80195be:	4605      	mov	r5, r0
 80195c0:	f001 fd36 	bl	801b030 <__aeabi_i2d>
 80195c4:	4632      	mov	r2, r6
 80195c6:	463b      	mov	r3, r7
 80195c8:	f001 fd98 	bl	801b0fc <__aeabi_dmul>
 80195cc:	460b      	mov	r3, r1
 80195ce:	4602      	mov	r2, r0
 80195d0:	4649      	mov	r1, r9
 80195d2:	4640      	mov	r0, r8
 80195d4:	f001 fbde 	bl	801ad94 <__aeabi_dsub>
 80195d8:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 80195dc:	9b08      	ldr	r3, [sp, #32]
 80195de:	f804 eb01 	strb.w	lr, [r4], #1
 80195e2:	ebc3 0e04 	rsb	lr, r3, r4
 80195e6:	9b05      	ldr	r3, [sp, #20]
 80195e8:	459e      	cmp	lr, r3
 80195ea:	d12b      	bne.n	8019644 <_dtoa_r+0x6a4>
 80195ec:	4602      	mov	r2, r0
 80195ee:	460b      	mov	r3, r1
 80195f0:	f001 fbd2 	bl	801ad98 <__adddf3>
 80195f4:	4632      	mov	r2, r6
 80195f6:	463b      	mov	r3, r7
 80195f8:	4680      	mov	r8, r0
 80195fa:	4689      	mov	r9, r1
 80195fc:	f002 f80e 	bl	801b61c <__aeabi_dcmpgt>
 8019600:	b970      	cbnz	r0, 8019620 <_dtoa_r+0x680>
 8019602:	4640      	mov	r0, r8
 8019604:	4649      	mov	r1, r9
 8019606:	4632      	mov	r2, r6
 8019608:	463b      	mov	r3, r7
 801960a:	f001 ffdf 	bl	801b5cc <__aeabi_dcmpeq>
 801960e:	2800      	cmp	r0, #0
 8019610:	f000 8264 	beq.w	8019adc <_dtoa_r+0xb3c>
 8019614:	07eb      	lsls	r3, r5, #31
 8019616:	d403      	bmi.n	8019620 <_dtoa_r+0x680>
 8019618:	e260      	b.n	8019adc <_dtoa_r+0xb3c>
 801961a:	46bb      	mov	fp, r7
 801961c:	e000      	b.n	8019620 <_dtoa_r+0x680>
 801961e:	461c      	mov	r4, r3
 8019620:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8019624:	2a39      	cmp	r2, #57	; 0x39
 8019626:	f104 33ff 	add.w	r3, r4, #4294967295
 801962a:	d107      	bne.n	801963c <_dtoa_r+0x69c>
 801962c:	9a08      	ldr	r2, [sp, #32]
 801962e:	4293      	cmp	r3, r2
 8019630:	d1f5      	bne.n	801961e <_dtoa_r+0x67e>
 8019632:	2330      	movs	r3, #48	; 0x30
 8019634:	7013      	strb	r3, [r2, #0]
 8019636:	f10b 0b01 	add.w	fp, fp, #1
 801963a:	4613      	mov	r3, r2
 801963c:	781a      	ldrb	r2, [r3, #0]
 801963e:	3201      	adds	r2, #1
 8019640:	701a      	strb	r2, [r3, #0]
 8019642:	e24b      	b.n	8019adc <_dtoa_r+0xb3c>
 8019644:	2200      	movs	r2, #0
 8019646:	4ba4      	ldr	r3, [pc, #656]	; (80198d8 <_dtoa_r+0x938>)
 8019648:	f001 fd58 	bl	801b0fc <__aeabi_dmul>
 801964c:	2200      	movs	r2, #0
 801964e:	2300      	movs	r3, #0
 8019650:	4680      	mov	r8, r0
 8019652:	4689      	mov	r9, r1
 8019654:	f001 ffba 	bl	801b5cc <__aeabi_dcmpeq>
 8019658:	2800      	cmp	r0, #0
 801965a:	d0a8      	beq.n	80195ae <_dtoa_r+0x60e>
 801965c:	e23e      	b.n	8019adc <_dtoa_r+0xb3c>
 801965e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019660:	2a00      	cmp	r2, #0
 8019662:	d032      	beq.n	80196ca <_dtoa_r+0x72a>
 8019664:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8019666:	2a01      	cmp	r2, #1
 8019668:	dc0a      	bgt.n	8019680 <_dtoa_r+0x6e0>
 801966a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801966c:	b112      	cbz	r2, 8019674 <_dtoa_r+0x6d4>
 801966e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8019672:	e002      	b.n	801967a <_dtoa_r+0x6da>
 8019674:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019676:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801967a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801967c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801967e:	e018      	b.n	80196b2 <_dtoa_r+0x712>
 8019680:	9b05      	ldr	r3, [sp, #20]
 8019682:	1e5d      	subs	r5, r3, #1
 8019684:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019686:	42ab      	cmp	r3, r5
 8019688:	bfbf      	itttt	lt
 801968a:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 801968c:	950b      	strlt	r5, [sp, #44]	; 0x2c
 801968e:	1aea      	sublt	r2, r5, r3
 8019690:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8019692:	bfb6      	itet	lt
 8019694:	189b      	addlt	r3, r3, r2
 8019696:	1b5d      	subge	r5, r3, r5
 8019698:	930d      	strlt	r3, [sp, #52]	; 0x34
 801969a:	9b05      	ldr	r3, [sp, #20]
 801969c:	bfb8      	it	lt
 801969e:	2500      	movlt	r5, #0
 80196a0:	2b00      	cmp	r3, #0
 80196a2:	bfb9      	ittee	lt
 80196a4:	9b09      	ldrlt	r3, [sp, #36]	; 0x24
 80196a6:	9a05      	ldrlt	r2, [sp, #20]
 80196a8:	9c09      	ldrge	r4, [sp, #36]	; 0x24
 80196aa:	9b05      	ldrge	r3, [sp, #20]
 80196ac:	bfbc      	itt	lt
 80196ae:	1a9c      	sublt	r4, r3, r2
 80196b0:	2300      	movlt	r3, #0
 80196b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80196b4:	441a      	add	r2, r3
 80196b6:	9209      	str	r2, [sp, #36]	; 0x24
 80196b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80196ba:	4650      	mov	r0, sl
 80196bc:	441a      	add	r2, r3
 80196be:	2101      	movs	r1, #1
 80196c0:	920a      	str	r2, [sp, #40]	; 0x28
 80196c2:	f000 fed3 	bl	801a46c <__i2b>
 80196c6:	4606      	mov	r6, r0
 80196c8:	e002      	b.n	80196d0 <_dtoa_r+0x730>
 80196ca:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80196cc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80196ce:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80196d0:	b164      	cbz	r4, 80196ec <_dtoa_r+0x74c>
 80196d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80196d4:	2b00      	cmp	r3, #0
 80196d6:	dd09      	ble.n	80196ec <_dtoa_r+0x74c>
 80196d8:	42a3      	cmp	r3, r4
 80196da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80196dc:	bfa8      	it	ge
 80196de:	4623      	movge	r3, r4
 80196e0:	1ad2      	subs	r2, r2, r3
 80196e2:	9209      	str	r2, [sp, #36]	; 0x24
 80196e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80196e6:	1ae4      	subs	r4, r4, r3
 80196e8:	1ad3      	subs	r3, r2, r3
 80196ea:	930a      	str	r3, [sp, #40]	; 0x28
 80196ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80196ee:	2b00      	cmp	r3, #0
 80196f0:	dd20      	ble.n	8019734 <_dtoa_r+0x794>
 80196f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80196f4:	b1c3      	cbz	r3, 8019728 <_dtoa_r+0x788>
 80196f6:	2d00      	cmp	r5, #0
 80196f8:	dd10      	ble.n	801971c <_dtoa_r+0x77c>
 80196fa:	4631      	mov	r1, r6
 80196fc:	462a      	mov	r2, r5
 80196fe:	4650      	mov	r0, sl
 8019700:	f000 ff4e 	bl	801a5a0 <__pow5mult>
 8019704:	4606      	mov	r6, r0
 8019706:	4631      	mov	r1, r6
 8019708:	9a07      	ldr	r2, [sp, #28]
 801970a:	4650      	mov	r0, sl
 801970c:	f000 feb7 	bl	801a47e <__multiply>
 8019710:	9907      	ldr	r1, [sp, #28]
 8019712:	4607      	mov	r7, r0
 8019714:	4650      	mov	r0, sl
 8019716:	f000 fdc7 	bl	801a2a8 <_Bfree>
 801971a:	9707      	str	r7, [sp, #28]
 801971c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801971e:	1b5a      	subs	r2, r3, r5
 8019720:	d008      	beq.n	8019734 <_dtoa_r+0x794>
 8019722:	4650      	mov	r0, sl
 8019724:	9907      	ldr	r1, [sp, #28]
 8019726:	e002      	b.n	801972e <_dtoa_r+0x78e>
 8019728:	9907      	ldr	r1, [sp, #28]
 801972a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801972c:	4650      	mov	r0, sl
 801972e:	f000 ff37 	bl	801a5a0 <__pow5mult>
 8019732:	9007      	str	r0, [sp, #28]
 8019734:	4650      	mov	r0, sl
 8019736:	2101      	movs	r1, #1
 8019738:	f000 fe98 	bl	801a46c <__i2b>
 801973c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801973e:	2b00      	cmp	r3, #0
 8019740:	4605      	mov	r5, r0
 8019742:	dd0a      	ble.n	801975a <_dtoa_r+0x7ba>
 8019744:	4629      	mov	r1, r5
 8019746:	461a      	mov	r2, r3
 8019748:	4650      	mov	r0, sl
 801974a:	f000 ff29 	bl	801a5a0 <__pow5mult>
 801974e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019750:	2b01      	cmp	r3, #1
 8019752:	4605      	mov	r5, r0
 8019754:	dd04      	ble.n	8019760 <_dtoa_r+0x7c0>
 8019756:	2700      	movs	r7, #0
 8019758:	e01b      	b.n	8019792 <_dtoa_r+0x7f2>
 801975a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801975c:	2b01      	cmp	r3, #1
 801975e:	dc13      	bgt.n	8019788 <_dtoa_r+0x7e8>
 8019760:	9b02      	ldr	r3, [sp, #8]
 8019762:	b98b      	cbnz	r3, 8019788 <_dtoa_r+0x7e8>
 8019764:	9b03      	ldr	r3, [sp, #12]
 8019766:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801976a:	b97b      	cbnz	r3, 801978c <_dtoa_r+0x7ec>
 801976c:	9b03      	ldr	r3, [sp, #12]
 801976e:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 8019772:	0d3f      	lsrs	r7, r7, #20
 8019774:	053f      	lsls	r7, r7, #20
 8019776:	b157      	cbz	r7, 801978e <_dtoa_r+0x7ee>
 8019778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801977a:	3301      	adds	r3, #1
 801977c:	9309      	str	r3, [sp, #36]	; 0x24
 801977e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019780:	3301      	adds	r3, #1
 8019782:	930a      	str	r3, [sp, #40]	; 0x28
 8019784:	2701      	movs	r7, #1
 8019786:	e002      	b.n	801978e <_dtoa_r+0x7ee>
 8019788:	2700      	movs	r7, #0
 801978a:	e000      	b.n	801978e <_dtoa_r+0x7ee>
 801978c:	9f02      	ldr	r7, [sp, #8]
 801978e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019790:	b143      	cbz	r3, 80197a4 <_dtoa_r+0x804>
 8019792:	692b      	ldr	r3, [r5, #16]
 8019794:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8019798:	6918      	ldr	r0, [r3, #16]
 801979a:	f000 fe1a 	bl	801a3d2 <__hi0bits>
 801979e:	f1c0 0020 	rsb	r0, r0, #32
 80197a2:	e000      	b.n	80197a6 <_dtoa_r+0x806>
 80197a4:	2001      	movs	r0, #1
 80197a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80197a8:	4418      	add	r0, r3
 80197aa:	f010 001f 	ands.w	r0, r0, #31
 80197ae:	d008      	beq.n	80197c2 <_dtoa_r+0x822>
 80197b0:	f1c0 0320 	rsb	r3, r0, #32
 80197b4:	2b04      	cmp	r3, #4
 80197b6:	dd02      	ble.n	80197be <_dtoa_r+0x81e>
 80197b8:	f1c0 001c 	rsb	r0, r0, #28
 80197bc:	e002      	b.n	80197c4 <_dtoa_r+0x824>
 80197be:	d008      	beq.n	80197d2 <_dtoa_r+0x832>
 80197c0:	4618      	mov	r0, r3
 80197c2:	301c      	adds	r0, #28
 80197c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80197c6:	4403      	add	r3, r0
 80197c8:	9309      	str	r3, [sp, #36]	; 0x24
 80197ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80197cc:	4403      	add	r3, r0
 80197ce:	4404      	add	r4, r0
 80197d0:	930a      	str	r3, [sp, #40]	; 0x28
 80197d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80197d4:	2b00      	cmp	r3, #0
 80197d6:	dd05      	ble.n	80197e4 <_dtoa_r+0x844>
 80197d8:	4650      	mov	r0, sl
 80197da:	9907      	ldr	r1, [sp, #28]
 80197dc:	461a      	mov	r2, r3
 80197de:	f000 ff2d 	bl	801a63c <__lshift>
 80197e2:	9007      	str	r0, [sp, #28]
 80197e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80197e6:	2b00      	cmp	r3, #0
 80197e8:	dd05      	ble.n	80197f6 <_dtoa_r+0x856>
 80197ea:	4629      	mov	r1, r5
 80197ec:	4650      	mov	r0, sl
 80197ee:	461a      	mov	r2, r3
 80197f0:	f000 ff24 	bl	801a63c <__lshift>
 80197f4:	4605      	mov	r5, r0
 80197f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80197f8:	b1eb      	cbz	r3, 8019836 <_dtoa_r+0x896>
 80197fa:	9807      	ldr	r0, [sp, #28]
 80197fc:	4629      	mov	r1, r5
 80197fe:	f000 ff70 	bl	801a6e2 <__mcmp>
 8019802:	2800      	cmp	r0, #0
 8019804:	da17      	bge.n	8019836 <_dtoa_r+0x896>
 8019806:	2300      	movs	r3, #0
 8019808:	4650      	mov	r0, sl
 801980a:	9907      	ldr	r1, [sp, #28]
 801980c:	220a      	movs	r2, #10
 801980e:	f000 fd62 	bl	801a2d6 <__multadd>
 8019812:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019814:	9007      	str	r0, [sp, #28]
 8019816:	f10b 3bff 	add.w	fp, fp, #4294967295
 801981a:	2b00      	cmp	r3, #0
 801981c:	f000 8170 	beq.w	8019b00 <_dtoa_r+0xb60>
 8019820:	4631      	mov	r1, r6
 8019822:	2300      	movs	r3, #0
 8019824:	4650      	mov	r0, sl
 8019826:	220a      	movs	r2, #10
 8019828:	f000 fd55 	bl	801a2d6 <__multadd>
 801982c:	9b06      	ldr	r3, [sp, #24]
 801982e:	2b00      	cmp	r3, #0
 8019830:	4606      	mov	r6, r0
 8019832:	dc33      	bgt.n	801989c <_dtoa_r+0x8fc>
 8019834:	e16d      	b.n	8019b12 <_dtoa_r+0xb72>
 8019836:	9b05      	ldr	r3, [sp, #20]
 8019838:	2b00      	cmp	r3, #0
 801983a:	dc26      	bgt.n	801988a <_dtoa_r+0x8ea>
 801983c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801983e:	2b02      	cmp	r3, #2
 8019840:	dd23      	ble.n	801988a <_dtoa_r+0x8ea>
 8019842:	9b05      	ldr	r3, [sp, #20]
 8019844:	9306      	str	r3, [sp, #24]
 8019846:	9b06      	ldr	r3, [sp, #24]
 8019848:	b973      	cbnz	r3, 8019868 <_dtoa_r+0x8c8>
 801984a:	4629      	mov	r1, r5
 801984c:	2205      	movs	r2, #5
 801984e:	4650      	mov	r0, sl
 8019850:	f000 fd41 	bl	801a2d6 <__multadd>
 8019854:	4605      	mov	r5, r0
 8019856:	4629      	mov	r1, r5
 8019858:	9807      	ldr	r0, [sp, #28]
 801985a:	f000 ff42 	bl	801a6e2 <__mcmp>
 801985e:	2800      	cmp	r0, #0
 8019860:	dc09      	bgt.n	8019876 <_dtoa_r+0x8d6>
 8019862:	e001      	b.n	8019868 <_dtoa_r+0x8c8>
 8019864:	2500      	movs	r5, #0
 8019866:	462e      	mov	r6, r5
 8019868:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801986a:	9c08      	ldr	r4, [sp, #32]
 801986c:	ea6f 0b03 	mvn.w	fp, r3
 8019870:	e008      	b.n	8019884 <_dtoa_r+0x8e4>
 8019872:	46bb      	mov	fp, r7
 8019874:	462e      	mov	r6, r5
 8019876:	9b08      	ldr	r3, [sp, #32]
 8019878:	9a08      	ldr	r2, [sp, #32]
 801987a:	1c5c      	adds	r4, r3, #1
 801987c:	2331      	movs	r3, #49	; 0x31
 801987e:	7013      	strb	r3, [r2, #0]
 8019880:	f10b 0b01 	add.w	fp, fp, #1
 8019884:	46b1      	mov	r9, r6
 8019886:	2600      	movs	r6, #0
 8019888:	e114      	b.n	8019ab4 <_dtoa_r+0xb14>
 801988a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801988c:	b923      	cbnz	r3, 8019898 <_dtoa_r+0x8f8>
 801988e:	9b05      	ldr	r3, [sp, #20]
 8019890:	9306      	str	r3, [sp, #24]
 8019892:	9f08      	ldr	r7, [sp, #32]
 8019894:	9c07      	ldr	r4, [sp, #28]
 8019896:	e0cc      	b.n	8019a32 <_dtoa_r+0xa92>
 8019898:	9b05      	ldr	r3, [sp, #20]
 801989a:	9306      	str	r3, [sp, #24]
 801989c:	2c00      	cmp	r4, #0
 801989e:	dd05      	ble.n	80198ac <_dtoa_r+0x90c>
 80198a0:	4631      	mov	r1, r6
 80198a2:	4650      	mov	r0, sl
 80198a4:	4622      	mov	r2, r4
 80198a6:	f000 fec9 	bl	801a63c <__lshift>
 80198aa:	4606      	mov	r6, r0
 80198ac:	b1b7      	cbz	r7, 80198dc <_dtoa_r+0x93c>
 80198ae:	6871      	ldr	r1, [r6, #4]
 80198b0:	4650      	mov	r0, sl
 80198b2:	f000 fcc4 	bl	801a23e <_Balloc>
 80198b6:	6932      	ldr	r2, [r6, #16]
 80198b8:	3202      	adds	r2, #2
 80198ba:	4604      	mov	r4, r0
 80198bc:	f106 010c 	add.w	r1, r6, #12
 80198c0:	0092      	lsls	r2, r2, #2
 80198c2:	300c      	adds	r0, #12
 80198c4:	f7fd f9a5 	bl	8016c12 <memcpy>
 80198c8:	4650      	mov	r0, sl
 80198ca:	4621      	mov	r1, r4
 80198cc:	2201      	movs	r2, #1
 80198ce:	f000 feb5 	bl	801a63c <__lshift>
 80198d2:	4681      	mov	r9, r0
 80198d4:	e003      	b.n	80198de <_dtoa_r+0x93e>
 80198d6:	bf00      	nop
 80198d8:	40240000 	.word	0x40240000
 80198dc:	46b1      	mov	r9, r6
 80198de:	9f08      	ldr	r7, [sp, #32]
 80198e0:	9c07      	ldr	r4, [sp, #28]
 80198e2:	4629      	mov	r1, r5
 80198e4:	4620      	mov	r0, r4
 80198e6:	f7ff facd 	bl	8018e84 <quorem>
 80198ea:	4631      	mov	r1, r6
 80198ec:	9009      	str	r0, [sp, #36]	; 0x24
 80198ee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80198f2:	4620      	mov	r0, r4
 80198f4:	f000 fef5 	bl	801a6e2 <__mcmp>
 80198f8:	464a      	mov	r2, r9
 80198fa:	9005      	str	r0, [sp, #20]
 80198fc:	4629      	mov	r1, r5
 80198fe:	4650      	mov	r0, sl
 8019900:	f000 ff0b 	bl	801a71a <__mdiff>
 8019904:	68c2      	ldr	r2, [r0, #12]
 8019906:	4603      	mov	r3, r0
 8019908:	b93a      	cbnz	r2, 801991a <_dtoa_r+0x97a>
 801990a:	4619      	mov	r1, r3
 801990c:	4620      	mov	r0, r4
 801990e:	9307      	str	r3, [sp, #28]
 8019910:	f000 fee7 	bl	801a6e2 <__mcmp>
 8019914:	9b07      	ldr	r3, [sp, #28]
 8019916:	4602      	mov	r2, r0
 8019918:	e000      	b.n	801991c <_dtoa_r+0x97c>
 801991a:	2201      	movs	r2, #1
 801991c:	4650      	mov	r0, sl
 801991e:	4619      	mov	r1, r3
 8019920:	9207      	str	r2, [sp, #28]
 8019922:	f000 fcc1 	bl	801a2a8 <_Bfree>
 8019926:	9a07      	ldr	r2, [sp, #28]
 8019928:	b9a2      	cbnz	r2, 8019954 <_dtoa_r+0x9b4>
 801992a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801992c:	b993      	cbnz	r3, 8019954 <_dtoa_r+0x9b4>
 801992e:	9b02      	ldr	r3, [sp, #8]
 8019930:	f003 0301 	and.w	r3, r3, #1
 8019934:	b973      	cbnz	r3, 8019954 <_dtoa_r+0x9b4>
 8019936:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801993a:	463b      	mov	r3, r7
 801993c:	9407      	str	r4, [sp, #28]
 801993e:	d040      	beq.n	80199c2 <_dtoa_r+0xa22>
 8019940:	9b05      	ldr	r3, [sp, #20]
 8019942:	2b00      	cmp	r3, #0
 8019944:	bfc8      	it	gt
 8019946:	9b09      	ldrgt	r3, [sp, #36]	; 0x24
 8019948:	f107 0401 	add.w	r4, r7, #1
 801994c:	bfc8      	it	gt
 801994e:	f103 0831 	addgt.w	r8, r3, #49	; 0x31
 8019952:	e03d      	b.n	80199d0 <_dtoa_r+0xa30>
 8019954:	9b05      	ldr	r3, [sp, #20]
 8019956:	2b00      	cmp	r3, #0
 8019958:	da04      	bge.n	8019964 <_dtoa_r+0x9c4>
 801995a:	2a00      	cmp	r2, #0
 801995c:	46c4      	mov	ip, r8
 801995e:	9407      	str	r4, [sp, #28]
 8019960:	dc08      	bgt.n	8019974 <_dtoa_r+0x9d4>
 8019962:	e021      	b.n	80199a8 <_dtoa_r+0xa08>
 8019964:	d124      	bne.n	80199b0 <_dtoa_r+0xa10>
 8019966:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019968:	bb13      	cbnz	r3, 80199b0 <_dtoa_r+0xa10>
 801996a:	9b02      	ldr	r3, [sp, #8]
 801996c:	f003 0301 	and.w	r3, r3, #1
 8019970:	b9f3      	cbnz	r3, 80199b0 <_dtoa_r+0xa10>
 8019972:	e7f2      	b.n	801995a <_dtoa_r+0x9ba>
 8019974:	4621      	mov	r1, r4
 8019976:	2201      	movs	r2, #1
 8019978:	4650      	mov	r0, sl
 801997a:	9705      	str	r7, [sp, #20]
 801997c:	f8cd 8008 	str.w	r8, [sp, #8]
 8019980:	f000 fe5c 	bl	801a63c <__lshift>
 8019984:	4629      	mov	r1, r5
 8019986:	9007      	str	r0, [sp, #28]
 8019988:	f000 feab 	bl	801a6e2 <__mcmp>
 801998c:	2800      	cmp	r0, #0
 801998e:	f8dd c008 	ldr.w	ip, [sp, #8]
 8019992:	9b05      	ldr	r3, [sp, #20]
 8019994:	dc03      	bgt.n	801999e <_dtoa_r+0x9fe>
 8019996:	d107      	bne.n	80199a8 <_dtoa_r+0xa08>
 8019998:	f018 0f01 	tst.w	r8, #1
 801999c:	d004      	beq.n	80199a8 <_dtoa_r+0xa08>
 801999e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80199a2:	d00e      	beq.n	80199c2 <_dtoa_r+0xa22>
 80199a4:	f108 0c01 	add.w	ip, r8, #1
 80199a8:	1c7c      	adds	r4, r7, #1
 80199aa:	f887 c000 	strb.w	ip, [r7]
 80199ae:	e081      	b.n	8019ab4 <_dtoa_r+0xb14>
 80199b0:	2a00      	cmp	r2, #0
 80199b2:	f107 0201 	add.w	r2, r7, #1
 80199b6:	dd0e      	ble.n	80199d6 <_dtoa_r+0xa36>
 80199b8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80199bc:	463b      	mov	r3, r7
 80199be:	9407      	str	r4, [sp, #28]
 80199c0:	d103      	bne.n	80199ca <_dtoa_r+0xa2a>
 80199c2:	2239      	movs	r2, #57	; 0x39
 80199c4:	3701      	adds	r7, #1
 80199c6:	701a      	strb	r2, [r3, #0]
 80199c8:	e057      	b.n	8019a7a <_dtoa_r+0xada>
 80199ca:	4614      	mov	r4, r2
 80199cc:	f108 0801 	add.w	r8, r8, #1
 80199d0:	f887 8000 	strb.w	r8, [r7]
 80199d4:	e06e      	b.n	8019ab4 <_dtoa_r+0xb14>
 80199d6:	9b08      	ldr	r3, [sp, #32]
 80199d8:	f802 8c01 	strb.w	r8, [r2, #-1]
 80199dc:	1ad3      	subs	r3, r2, r3
 80199de:	4617      	mov	r7, r2
 80199e0:	9a06      	ldr	r2, [sp, #24]
 80199e2:	4293      	cmp	r3, r2
 80199e4:	d03a      	beq.n	8019a5c <_dtoa_r+0xabc>
 80199e6:	4621      	mov	r1, r4
 80199e8:	220a      	movs	r2, #10
 80199ea:	2300      	movs	r3, #0
 80199ec:	4650      	mov	r0, sl
 80199ee:	f000 fc72 	bl	801a2d6 <__multadd>
 80199f2:	454e      	cmp	r6, r9
 80199f4:	4604      	mov	r4, r0
 80199f6:	4631      	mov	r1, r6
 80199f8:	4650      	mov	r0, sl
 80199fa:	f04f 020a 	mov.w	r2, #10
 80199fe:	f04f 0300 	mov.w	r3, #0
 8019a02:	d104      	bne.n	8019a0e <_dtoa_r+0xa6e>
 8019a04:	f000 fc67 	bl	801a2d6 <__multadd>
 8019a08:	4606      	mov	r6, r0
 8019a0a:	4681      	mov	r9, r0
 8019a0c:	e769      	b.n	80198e2 <_dtoa_r+0x942>
 8019a0e:	f000 fc62 	bl	801a2d6 <__multadd>
 8019a12:	4649      	mov	r1, r9
 8019a14:	4606      	mov	r6, r0
 8019a16:	220a      	movs	r2, #10
 8019a18:	4650      	mov	r0, sl
 8019a1a:	2300      	movs	r3, #0
 8019a1c:	f000 fc5b 	bl	801a2d6 <__multadd>
 8019a20:	4681      	mov	r9, r0
 8019a22:	e75e      	b.n	80198e2 <_dtoa_r+0x942>
 8019a24:	4621      	mov	r1, r4
 8019a26:	4650      	mov	r0, sl
 8019a28:	220a      	movs	r2, #10
 8019a2a:	2300      	movs	r3, #0
 8019a2c:	f000 fc53 	bl	801a2d6 <__multadd>
 8019a30:	4604      	mov	r4, r0
 8019a32:	4620      	mov	r0, r4
 8019a34:	4629      	mov	r1, r5
 8019a36:	f7ff fa25 	bl	8018e84 <quorem>
 8019a3a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8019a3e:	f807 8b01 	strb.w	r8, [r7], #1
 8019a42:	9b08      	ldr	r3, [sp, #32]
 8019a44:	9a06      	ldr	r2, [sp, #24]
 8019a46:	1afb      	subs	r3, r7, r3
 8019a48:	4293      	cmp	r3, r2
 8019a4a:	dbeb      	blt.n	8019a24 <_dtoa_r+0xa84>
 8019a4c:	9b08      	ldr	r3, [sp, #32]
 8019a4e:	2a01      	cmp	r2, #1
 8019a50:	bfac      	ite	ge
 8019a52:	189b      	addge	r3, r3, r2
 8019a54:	3301      	addlt	r3, #1
 8019a56:	46b1      	mov	r9, r6
 8019a58:	461f      	mov	r7, r3
 8019a5a:	2600      	movs	r6, #0
 8019a5c:	4621      	mov	r1, r4
 8019a5e:	2201      	movs	r2, #1
 8019a60:	4650      	mov	r0, sl
 8019a62:	f000 fdeb 	bl	801a63c <__lshift>
 8019a66:	4629      	mov	r1, r5
 8019a68:	9007      	str	r0, [sp, #28]
 8019a6a:	f000 fe3a 	bl	801a6e2 <__mcmp>
 8019a6e:	2800      	cmp	r0, #0
 8019a70:	dc03      	bgt.n	8019a7a <_dtoa_r+0xada>
 8019a72:	d116      	bne.n	8019aa2 <_dtoa_r+0xb02>
 8019a74:	f018 0f01 	tst.w	r8, #1
 8019a78:	d013      	beq.n	8019aa2 <_dtoa_r+0xb02>
 8019a7a:	463c      	mov	r4, r7
 8019a7c:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8019a80:	2b39      	cmp	r3, #57	; 0x39
 8019a82:	f104 32ff 	add.w	r2, r4, #4294967295
 8019a86:	d109      	bne.n	8019a9c <_dtoa_r+0xafc>
 8019a88:	9b08      	ldr	r3, [sp, #32]
 8019a8a:	429a      	cmp	r2, r3
 8019a8c:	d104      	bne.n	8019a98 <_dtoa_r+0xaf8>
 8019a8e:	f10b 0b01 	add.w	fp, fp, #1
 8019a92:	2331      	movs	r3, #49	; 0x31
 8019a94:	9a08      	ldr	r2, [sp, #32]
 8019a96:	e002      	b.n	8019a9e <_dtoa_r+0xafe>
 8019a98:	4614      	mov	r4, r2
 8019a9a:	e7ef      	b.n	8019a7c <_dtoa_r+0xadc>
 8019a9c:	3301      	adds	r3, #1
 8019a9e:	7013      	strb	r3, [r2, #0]
 8019aa0:	e008      	b.n	8019ab4 <_dtoa_r+0xb14>
 8019aa2:	463c      	mov	r4, r7
 8019aa4:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8019aa8:	2b30      	cmp	r3, #48	; 0x30
 8019aaa:	f104 32ff 	add.w	r2, r4, #4294967295
 8019aae:	d101      	bne.n	8019ab4 <_dtoa_r+0xb14>
 8019ab0:	4614      	mov	r4, r2
 8019ab2:	e7f7      	b.n	8019aa4 <_dtoa_r+0xb04>
 8019ab4:	4650      	mov	r0, sl
 8019ab6:	4629      	mov	r1, r5
 8019ab8:	f000 fbf6 	bl	801a2a8 <_Bfree>
 8019abc:	f1b9 0f00 	cmp.w	r9, #0
 8019ac0:	d00c      	beq.n	8019adc <_dtoa_r+0xb3c>
 8019ac2:	b12e      	cbz	r6, 8019ad0 <_dtoa_r+0xb30>
 8019ac4:	454e      	cmp	r6, r9
 8019ac6:	d003      	beq.n	8019ad0 <_dtoa_r+0xb30>
 8019ac8:	4650      	mov	r0, sl
 8019aca:	4631      	mov	r1, r6
 8019acc:	f000 fbec 	bl	801a2a8 <_Bfree>
 8019ad0:	4650      	mov	r0, sl
 8019ad2:	4649      	mov	r1, r9
 8019ad4:	f000 fbe8 	bl	801a2a8 <_Bfree>
 8019ad8:	e000      	b.n	8019adc <_dtoa_r+0xb3c>
 8019ada:	46bb      	mov	fp, r7
 8019adc:	4650      	mov	r0, sl
 8019ade:	9907      	ldr	r1, [sp, #28]
 8019ae0:	f000 fbe2 	bl	801a2a8 <_Bfree>
 8019ae4:	2300      	movs	r3, #0
 8019ae6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8019ae8:	7023      	strb	r3, [r4, #0]
 8019aea:	f10b 0301 	add.w	r3, fp, #1
 8019aee:	6013      	str	r3, [r2, #0]
 8019af0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019af2:	b11b      	cbz	r3, 8019afc <_dtoa_r+0xb5c>
 8019af4:	601c      	str	r4, [r3, #0]
 8019af6:	e001      	b.n	8019afc <_dtoa_r+0xb5c>
 8019af8:	480a      	ldr	r0, [pc, #40]	; (8019b24 <_dtoa_r+0xb84>)
 8019afa:	e00f      	b.n	8019b1c <_dtoa_r+0xb7c>
 8019afc:	9808      	ldr	r0, [sp, #32]
 8019afe:	e00d      	b.n	8019b1c <_dtoa_r+0xb7c>
 8019b00:	9b06      	ldr	r3, [sp, #24]
 8019b02:	2b00      	cmp	r3, #0
 8019b04:	f73f aec5 	bgt.w	8019892 <_dtoa_r+0x8f2>
 8019b08:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019b0a:	2b02      	cmp	r3, #2
 8019b0c:	f73f ae9b 	bgt.w	8019846 <_dtoa_r+0x8a6>
 8019b10:	e6bf      	b.n	8019892 <_dtoa_r+0x8f2>
 8019b12:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019b14:	2b02      	cmp	r3, #2
 8019b16:	f73f ae96 	bgt.w	8019846 <_dtoa_r+0x8a6>
 8019b1a:	e6bf      	b.n	801989c <_dtoa_r+0x8fc>
 8019b1c:	b017      	add	sp, #92	; 0x5c
 8019b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b22:	bf00      	nop
 8019b24:	0801d195 	.word	0x0801d195

08019b28 <rshift>:
 8019b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019b2a:	6906      	ldr	r6, [r0, #16]
 8019b2c:	114b      	asrs	r3, r1, #5
 8019b2e:	42b3      	cmp	r3, r6
 8019b30:	f100 0514 	add.w	r5, r0, #20
 8019b34:	da27      	bge.n	8019b86 <rshift+0x5e>
 8019b36:	f011 011f 	ands.w	r1, r1, #31
 8019b3a:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 8019b3e:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8019b42:	d101      	bne.n	8019b48 <rshift+0x20>
 8019b44:	4629      	mov	r1, r5
 8019b46:	e016      	b.n	8019b76 <rshift+0x4e>
 8019b48:	1d14      	adds	r4, r2, #4
 8019b4a:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 8019b4e:	f1c1 0e20 	rsb	lr, r1, #32
 8019b52:	40ca      	lsrs	r2, r1
 8019b54:	462b      	mov	r3, r5
 8019b56:	42b4      	cmp	r4, r6
 8019b58:	d209      	bcs.n	8019b6e <rshift+0x46>
 8019b5a:	6827      	ldr	r7, [r4, #0]
 8019b5c:	fa07 f70e 	lsl.w	r7, r7, lr
 8019b60:	433a      	orrs	r2, r7
 8019b62:	f843 2b04 	str.w	r2, [r3], #4
 8019b66:	f854 2b04 	ldr.w	r2, [r4], #4
 8019b6a:	40ca      	lsrs	r2, r1
 8019b6c:	e7f3      	b.n	8019b56 <rshift+0x2e>
 8019b6e:	601a      	str	r2, [r3, #0]
 8019b70:	b152      	cbz	r2, 8019b88 <rshift+0x60>
 8019b72:	3304      	adds	r3, #4
 8019b74:	e008      	b.n	8019b88 <rshift+0x60>
 8019b76:	42b2      	cmp	r2, r6
 8019b78:	460b      	mov	r3, r1
 8019b7a:	d205      	bcs.n	8019b88 <rshift+0x60>
 8019b7c:	f852 3b04 	ldr.w	r3, [r2], #4
 8019b80:	f841 3b04 	str.w	r3, [r1], #4
 8019b84:	e7f7      	b.n	8019b76 <rshift+0x4e>
 8019b86:	462b      	mov	r3, r5
 8019b88:	1b5b      	subs	r3, r3, r5
 8019b8a:	109b      	asrs	r3, r3, #2
 8019b8c:	6103      	str	r3, [r0, #16]
 8019b8e:	b903      	cbnz	r3, 8019b92 <rshift+0x6a>
 8019b90:	6143      	str	r3, [r0, #20]
 8019b92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019b94 <__hexdig_fun>:
 8019b94:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8019b98:	2b09      	cmp	r3, #9
 8019b9a:	d801      	bhi.n	8019ba0 <__hexdig_fun+0xc>
 8019b9c:	3820      	subs	r0, #32
 8019b9e:	e00a      	b.n	8019bb6 <__hexdig_fun+0x22>
 8019ba0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8019ba4:	2b05      	cmp	r3, #5
 8019ba6:	d801      	bhi.n	8019bac <__hexdig_fun+0x18>
 8019ba8:	3847      	subs	r0, #71	; 0x47
 8019baa:	e004      	b.n	8019bb6 <__hexdig_fun+0x22>
 8019bac:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8019bb0:	2b05      	cmp	r3, #5
 8019bb2:	d802      	bhi.n	8019bba <__hexdig_fun+0x26>
 8019bb4:	3827      	subs	r0, #39	; 0x27
 8019bb6:	b2c0      	uxtb	r0, r0
 8019bb8:	4770      	bx	lr
 8019bba:	2000      	movs	r0, #0
 8019bbc:	4770      	bx	lr

08019bbe <__gethex>:
 8019bbe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019bc2:	b089      	sub	sp, #36	; 0x24
 8019bc4:	468a      	mov	sl, r1
 8019bc6:	4691      	mov	r9, r2
 8019bc8:	9304      	str	r3, [sp, #16]
 8019bca:	9001      	str	r0, [sp, #4]
 8019bcc:	f000 fab8 	bl	801a140 <_localeconv_r>
 8019bd0:	6803      	ldr	r3, [r0, #0]
 8019bd2:	9302      	str	r3, [sp, #8]
 8019bd4:	4618      	mov	r0, r3
 8019bd6:	f7fe f982 	bl	8017ede <strlen>
 8019bda:	9b02      	ldr	r3, [sp, #8]
 8019bdc:	9000      	str	r0, [sp, #0]
 8019bde:	4403      	add	r3, r0
 8019be0:	2600      	movs	r6, #0
 8019be2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8019be6:	9305      	str	r3, [sp, #20]
 8019be8:	f8da 3000 	ldr.w	r3, [sl]
 8019bec:	3302      	adds	r3, #2
 8019bee:	4698      	mov	r8, r3
 8019bf0:	f813 0b01 	ldrb.w	r0, [r3], #1
 8019bf4:	2830      	cmp	r0, #48	; 0x30
 8019bf6:	d101      	bne.n	8019bfc <__gethex+0x3e>
 8019bf8:	3601      	adds	r6, #1
 8019bfa:	e7f8      	b.n	8019bee <__gethex+0x30>
 8019bfc:	f7ff ffca 	bl	8019b94 <__hexdig_fun>
 8019c00:	4604      	mov	r4, r0
 8019c02:	b9e8      	cbnz	r0, 8019c40 <__gethex+0x82>
 8019c04:	4640      	mov	r0, r8
 8019c06:	9902      	ldr	r1, [sp, #8]
 8019c08:	9a00      	ldr	r2, [sp, #0]
 8019c0a:	f7fe f970 	bl	8017eee <strncmp>
 8019c0e:	2800      	cmp	r0, #0
 8019c10:	d137      	bne.n	8019c82 <__gethex+0xc4>
 8019c12:	9b00      	ldr	r3, [sp, #0]
 8019c14:	f818 0003 	ldrb.w	r0, [r8, r3]
 8019c18:	eb08 0703 	add.w	r7, r8, r3
 8019c1c:	f7ff ffba 	bl	8019b94 <__hexdig_fun>
 8019c20:	b388      	cbz	r0, 8019c86 <__gethex+0xc8>
 8019c22:	463b      	mov	r3, r7
 8019c24:	7818      	ldrb	r0, [r3, #0]
 8019c26:	2830      	cmp	r0, #48	; 0x30
 8019c28:	4698      	mov	r8, r3
 8019c2a:	f103 0301 	add.w	r3, r3, #1
 8019c2e:	d0f9      	beq.n	8019c24 <__gethex+0x66>
 8019c30:	f7ff ffb0 	bl	8019b94 <__hexdig_fun>
 8019c34:	463c      	mov	r4, r7
 8019c36:	fab0 f580 	clz	r5, r0
 8019c3a:	2601      	movs	r6, #1
 8019c3c:	096d      	lsrs	r5, r5, #5
 8019c3e:	e001      	b.n	8019c44 <__gethex+0x86>
 8019c40:	2500      	movs	r5, #0
 8019c42:	462c      	mov	r4, r5
 8019c44:	46c3      	mov	fp, r8
 8019c46:	465f      	mov	r7, fp
 8019c48:	f10b 0b01 	add.w	fp, fp, #1
 8019c4c:	7838      	ldrb	r0, [r7, #0]
 8019c4e:	f7ff ffa1 	bl	8019b94 <__hexdig_fun>
 8019c52:	2800      	cmp	r0, #0
 8019c54:	d1f7      	bne.n	8019c46 <__gethex+0x88>
 8019c56:	4638      	mov	r0, r7
 8019c58:	9902      	ldr	r1, [sp, #8]
 8019c5a:	9a00      	ldr	r2, [sp, #0]
 8019c5c:	f7fe f947 	bl	8017eee <strncmp>
 8019c60:	b958      	cbnz	r0, 8019c7a <__gethex+0xbc>
 8019c62:	b95c      	cbnz	r4, 8019c7c <__gethex+0xbe>
 8019c64:	9b00      	ldr	r3, [sp, #0]
 8019c66:	18fc      	adds	r4, r7, r3
 8019c68:	46a3      	mov	fp, r4
 8019c6a:	465f      	mov	r7, fp
 8019c6c:	f10b 0b01 	add.w	fp, fp, #1
 8019c70:	7838      	ldrb	r0, [r7, #0]
 8019c72:	f7ff ff8f 	bl	8019b94 <__hexdig_fun>
 8019c76:	2800      	cmp	r0, #0
 8019c78:	d1f7      	bne.n	8019c6a <__gethex+0xac>
 8019c7a:	b134      	cbz	r4, 8019c8a <__gethex+0xcc>
 8019c7c:	1be4      	subs	r4, r4, r7
 8019c7e:	00a4      	lsls	r4, r4, #2
 8019c80:	e003      	b.n	8019c8a <__gethex+0xcc>
 8019c82:	4647      	mov	r7, r8
 8019c84:	e000      	b.n	8019c88 <__gethex+0xca>
 8019c86:	4604      	mov	r4, r0
 8019c88:	2501      	movs	r5, #1
 8019c8a:	783b      	ldrb	r3, [r7, #0]
 8019c8c:	2b50      	cmp	r3, #80	; 0x50
 8019c8e:	d001      	beq.n	8019c94 <__gethex+0xd6>
 8019c90:	2b70      	cmp	r3, #112	; 0x70
 8019c92:	d130      	bne.n	8019cf6 <__gethex+0x138>
 8019c94:	787b      	ldrb	r3, [r7, #1]
 8019c96:	2b2b      	cmp	r3, #43	; 0x2b
 8019c98:	d006      	beq.n	8019ca8 <__gethex+0xea>
 8019c9a:	2b2d      	cmp	r3, #45	; 0x2d
 8019c9c:	d002      	beq.n	8019ca4 <__gethex+0xe6>
 8019c9e:	1c7a      	adds	r2, r7, #1
 8019ca0:	2300      	movs	r3, #0
 8019ca2:	e003      	b.n	8019cac <__gethex+0xee>
 8019ca4:	2301      	movs	r3, #1
 8019ca6:	e000      	b.n	8019caa <__gethex+0xec>
 8019ca8:	2300      	movs	r3, #0
 8019caa:	1cba      	adds	r2, r7, #2
 8019cac:	7810      	ldrb	r0, [r2, #0]
 8019cae:	9306      	str	r3, [sp, #24]
 8019cb0:	9203      	str	r2, [sp, #12]
 8019cb2:	f7ff ff6f 	bl	8019b94 <__hexdig_fun>
 8019cb6:	1e41      	subs	r1, r0, #1
 8019cb8:	b2c9      	uxtb	r1, r1
 8019cba:	2918      	cmp	r1, #24
 8019cbc:	9a03      	ldr	r2, [sp, #12]
 8019cbe:	9b06      	ldr	r3, [sp, #24]
 8019cc0:	d819      	bhi.n	8019cf6 <__gethex+0x138>
 8019cc2:	f1a0 0b10 	sub.w	fp, r0, #16
 8019cc6:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8019cca:	9306      	str	r3, [sp, #24]
 8019ccc:	9203      	str	r2, [sp, #12]
 8019cce:	9207      	str	r2, [sp, #28]
 8019cd0:	f7ff ff60 	bl	8019b94 <__hexdig_fun>
 8019cd4:	1e41      	subs	r1, r0, #1
 8019cd6:	b2c9      	uxtb	r1, r1
 8019cd8:	2918      	cmp	r1, #24
 8019cda:	9a03      	ldr	r2, [sp, #12]
 8019cdc:	9b06      	ldr	r3, [sp, #24]
 8019cde:	d805      	bhi.n	8019cec <__gethex+0x12e>
 8019ce0:	210a      	movs	r1, #10
 8019ce2:	fb01 0b0b 	mla	fp, r1, fp, r0
 8019ce6:	f1ab 0b10 	sub.w	fp, fp, #16
 8019cea:	e7ec      	b.n	8019cc6 <__gethex+0x108>
 8019cec:	b10b      	cbz	r3, 8019cf2 <__gethex+0x134>
 8019cee:	f1cb 0b00 	rsb	fp, fp, #0
 8019cf2:	445c      	add	r4, fp
 8019cf4:	e000      	b.n	8019cf8 <__gethex+0x13a>
 8019cf6:	463a      	mov	r2, r7
 8019cf8:	f8ca 2000 	str.w	r2, [sl]
 8019cfc:	b125      	cbz	r5, 8019d08 <__gethex+0x14a>
 8019cfe:	2e00      	cmp	r6, #0
 8019d00:	bf14      	ite	ne
 8019d02:	2000      	movne	r0, #0
 8019d04:	2006      	moveq	r0, #6
 8019d06:	e17c      	b.n	801a002 <__gethex+0x444>
 8019d08:	ebc8 0307 	rsb	r3, r8, r7
 8019d0c:	3b01      	subs	r3, #1
 8019d0e:	4629      	mov	r1, r5
 8019d10:	2b07      	cmp	r3, #7
 8019d12:	dd02      	ble.n	8019d1a <__gethex+0x15c>
 8019d14:	3101      	adds	r1, #1
 8019d16:	105b      	asrs	r3, r3, #1
 8019d18:	e7fa      	b.n	8019d10 <__gethex+0x152>
 8019d1a:	9801      	ldr	r0, [sp, #4]
 8019d1c:	f000 fa8f 	bl	801a23e <_Balloc>
 8019d20:	f04f 0a00 	mov.w	sl, #0
 8019d24:	f100 0b14 	add.w	fp, r0, #20
 8019d28:	4605      	mov	r5, r0
 8019d2a:	465e      	mov	r6, fp
 8019d2c:	46d4      	mov	ip, sl
 8019d2e:	4547      	cmp	r7, r8
 8019d30:	d937      	bls.n	8019da2 <__gethex+0x1e4>
 8019d32:	1e7b      	subs	r3, r7, #1
 8019d34:	9303      	str	r3, [sp, #12]
 8019d36:	9a05      	ldr	r2, [sp, #20]
 8019d38:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8019d3c:	4293      	cmp	r3, r2
 8019d3e:	d009      	beq.n	8019d54 <__gethex+0x196>
 8019d40:	f1bc 0f20 	cmp.w	ip, #32
 8019d44:	d11a      	bne.n	8019d7c <__gethex+0x1be>
 8019d46:	f8c6 a000 	str.w	sl, [r6]
 8019d4a:	f04f 0a00 	mov.w	sl, #0
 8019d4e:	3604      	adds	r6, #4
 8019d50:	46d4      	mov	ip, sl
 8019d52:	e013      	b.n	8019d7c <__gethex+0x1be>
 8019d54:	9b00      	ldr	r3, [sp, #0]
 8019d56:	9a03      	ldr	r2, [sp, #12]
 8019d58:	f1c3 0301 	rsb	r3, r3, #1
 8019d5c:	4413      	add	r3, r2
 8019d5e:	4543      	cmp	r3, r8
 8019d60:	d3ee      	bcc.n	8019d40 <__gethex+0x182>
 8019d62:	4618      	mov	r0, r3
 8019d64:	9902      	ldr	r1, [sp, #8]
 8019d66:	9a00      	ldr	r2, [sp, #0]
 8019d68:	f8cd c01c 	str.w	ip, [sp, #28]
 8019d6c:	9306      	str	r3, [sp, #24]
 8019d6e:	f7fe f8be 	bl	8017eee <strncmp>
 8019d72:	9b06      	ldr	r3, [sp, #24]
 8019d74:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8019d78:	b188      	cbz	r0, 8019d9e <__gethex+0x1e0>
 8019d7a:	e7e1      	b.n	8019d40 <__gethex+0x182>
 8019d7c:	f817 0c01 	ldrb.w	r0, [r7, #-1]
 8019d80:	f8cd c018 	str.w	ip, [sp, #24]
 8019d84:	f7ff ff06 	bl	8019b94 <__hexdig_fun>
 8019d88:	f8dd c018 	ldr.w	ip, [sp, #24]
 8019d8c:	9b03      	ldr	r3, [sp, #12]
 8019d8e:	f000 000f 	and.w	r0, r0, #15
 8019d92:	fa00 f00c 	lsl.w	r0, r0, ip
 8019d96:	ea4a 0a00 	orr.w	sl, sl, r0
 8019d9a:	f10c 0c04 	add.w	ip, ip, #4
 8019d9e:	461f      	mov	r7, r3
 8019da0:	e7c5      	b.n	8019d2e <__gethex+0x170>
 8019da2:	f846 ab04 	str.w	sl, [r6], #4
 8019da6:	ebcb 0606 	rsb	r6, fp, r6
 8019daa:	10b0      	asrs	r0, r6, #2
 8019dac:	6128      	str	r0, [r5, #16]
 8019dae:	0147      	lsls	r7, r0, #5
 8019db0:	4650      	mov	r0, sl
 8019db2:	f000 fb0e 	bl	801a3d2 <__hi0bits>
 8019db6:	f8d9 6000 	ldr.w	r6, [r9]
 8019dba:	1a38      	subs	r0, r7, r0
 8019dbc:	42b0      	cmp	r0, r6
 8019dbe:	dd26      	ble.n	8019e0e <__gethex+0x250>
 8019dc0:	1b87      	subs	r7, r0, r6
 8019dc2:	4639      	mov	r1, r7
 8019dc4:	4628      	mov	r0, r5
 8019dc6:	f000 fe0f 	bl	801a9e8 <__any_on>
 8019dca:	b1c8      	cbz	r0, 8019e00 <__gethex+0x242>
 8019dcc:	1e7b      	subs	r3, r7, #1
 8019dce:	115a      	asrs	r2, r3, #5
 8019dd0:	f003 011f 	and.w	r1, r3, #31
 8019dd4:	f04f 0801 	mov.w	r8, #1
 8019dd8:	f85b 2022 	ldr.w	r2, [fp, r2, lsl #2]
 8019ddc:	fa08 f101 	lsl.w	r1, r8, r1
 8019de0:	4211      	tst	r1, r2
 8019de2:	d00e      	beq.n	8019e02 <__gethex+0x244>
 8019de4:	4543      	cmp	r3, r8
 8019de6:	dc02      	bgt.n	8019dee <__gethex+0x230>
 8019de8:	f04f 0802 	mov.w	r8, #2
 8019dec:	e009      	b.n	8019e02 <__gethex+0x244>
 8019dee:	4628      	mov	r0, r5
 8019df0:	1eb9      	subs	r1, r7, #2
 8019df2:	f000 fdf9 	bl	801a9e8 <__any_on>
 8019df6:	2800      	cmp	r0, #0
 8019df8:	d0f6      	beq.n	8019de8 <__gethex+0x22a>
 8019dfa:	f04f 0803 	mov.w	r8, #3
 8019dfe:	e000      	b.n	8019e02 <__gethex+0x244>
 8019e00:	4680      	mov	r8, r0
 8019e02:	4628      	mov	r0, r5
 8019e04:	4639      	mov	r1, r7
 8019e06:	f7ff fe8f 	bl	8019b28 <rshift>
 8019e0a:	443c      	add	r4, r7
 8019e0c:	e00c      	b.n	8019e28 <__gethex+0x26a>
 8019e0e:	da09      	bge.n	8019e24 <__gethex+0x266>
 8019e10:	1a37      	subs	r7, r6, r0
 8019e12:	4629      	mov	r1, r5
 8019e14:	9801      	ldr	r0, [sp, #4]
 8019e16:	463a      	mov	r2, r7
 8019e18:	f000 fc10 	bl	801a63c <__lshift>
 8019e1c:	1be4      	subs	r4, r4, r7
 8019e1e:	4605      	mov	r5, r0
 8019e20:	f100 0b14 	add.w	fp, r0, #20
 8019e24:	f04f 0800 	mov.w	r8, #0
 8019e28:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8019e2c:	429c      	cmp	r4, r3
 8019e2e:	dd08      	ble.n	8019e42 <__gethex+0x284>
 8019e30:	9801      	ldr	r0, [sp, #4]
 8019e32:	4629      	mov	r1, r5
 8019e34:	f000 fa38 	bl	801a2a8 <_Bfree>
 8019e38:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019e3a:	2300      	movs	r3, #0
 8019e3c:	6013      	str	r3, [r2, #0]
 8019e3e:	20a3      	movs	r0, #163	; 0xa3
 8019e40:	e0df      	b.n	801a002 <__gethex+0x444>
 8019e42:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8019e46:	4284      	cmp	r4, r0
 8019e48:	da53      	bge.n	8019ef2 <__gethex+0x334>
 8019e4a:	1b04      	subs	r4, r0, r4
 8019e4c:	42b4      	cmp	r4, r6
 8019e4e:	db2e      	blt.n	8019eae <__gethex+0x2f0>
 8019e50:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8019e54:	2b02      	cmp	r3, #2
 8019e56:	d01a      	beq.n	8019e8e <__gethex+0x2d0>
 8019e58:	2b03      	cmp	r3, #3
 8019e5a:	d01c      	beq.n	8019e96 <__gethex+0x2d8>
 8019e5c:	2b01      	cmp	r3, #1
 8019e5e:	d11d      	bne.n	8019e9c <__gethex+0x2de>
 8019e60:	42b4      	cmp	r4, r6
 8019e62:	d11b      	bne.n	8019e9c <__gethex+0x2de>
 8019e64:	2e01      	cmp	r6, #1
 8019e66:	dc0b      	bgt.n	8019e80 <__gethex+0x2c2>
 8019e68:	9a04      	ldr	r2, [sp, #16]
 8019e6a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8019e6e:	6013      	str	r3, [r2, #0]
 8019e70:	2301      	movs	r3, #1
 8019e72:	612b      	str	r3, [r5, #16]
 8019e74:	f8cb 3000 	str.w	r3, [fp]
 8019e78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019e7a:	2062      	movs	r0, #98	; 0x62
 8019e7c:	601d      	str	r5, [r3, #0]
 8019e7e:	e0c0      	b.n	801a002 <__gethex+0x444>
 8019e80:	4628      	mov	r0, r5
 8019e82:	1e71      	subs	r1, r6, #1
 8019e84:	f000 fdb0 	bl	801a9e8 <__any_on>
 8019e88:	2800      	cmp	r0, #0
 8019e8a:	d1ed      	bne.n	8019e68 <__gethex+0x2aa>
 8019e8c:	e006      	b.n	8019e9c <__gethex+0x2de>
 8019e8e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019e90:	2b00      	cmp	r3, #0
 8019e92:	d0e9      	beq.n	8019e68 <__gethex+0x2aa>
 8019e94:	e002      	b.n	8019e9c <__gethex+0x2de>
 8019e96:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019e98:	2b00      	cmp	r3, #0
 8019e9a:	d1e5      	bne.n	8019e68 <__gethex+0x2aa>
 8019e9c:	9801      	ldr	r0, [sp, #4]
 8019e9e:	4629      	mov	r1, r5
 8019ea0:	f000 fa02 	bl	801a2a8 <_Bfree>
 8019ea4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019ea6:	2300      	movs	r3, #0
 8019ea8:	6013      	str	r3, [r2, #0]
 8019eaa:	2050      	movs	r0, #80	; 0x50
 8019eac:	e0a9      	b.n	801a002 <__gethex+0x444>
 8019eae:	1e67      	subs	r7, r4, #1
 8019eb0:	f1b8 0f00 	cmp.w	r8, #0
 8019eb4:	d107      	bne.n	8019ec6 <__gethex+0x308>
 8019eb6:	2f00      	cmp	r7, #0
 8019eb8:	dd07      	ble.n	8019eca <__gethex+0x30c>
 8019eba:	4628      	mov	r0, r5
 8019ebc:	4639      	mov	r1, r7
 8019ebe:	f000 fd93 	bl	801a9e8 <__any_on>
 8019ec2:	4680      	mov	r8, r0
 8019ec4:	e001      	b.n	8019eca <__gethex+0x30c>
 8019ec6:	f04f 0801 	mov.w	r8, #1
 8019eca:	117a      	asrs	r2, r7, #5
 8019ecc:	2301      	movs	r3, #1
 8019ece:	f007 071f 	and.w	r7, r7, #31
 8019ed2:	f85b 2022 	ldr.w	r2, [fp, r2, lsl #2]
 8019ed6:	40bb      	lsls	r3, r7
 8019ed8:	4213      	tst	r3, r2
 8019eda:	4621      	mov	r1, r4
 8019edc:	4628      	mov	r0, r5
 8019ede:	bf18      	it	ne
 8019ee0:	f048 0802 	orrne.w	r8, r8, #2
 8019ee4:	1b36      	subs	r6, r6, r4
 8019ee6:	f7ff fe1f 	bl	8019b28 <rshift>
 8019eea:	2702      	movs	r7, #2
 8019eec:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8019ef0:	e000      	b.n	8019ef4 <__gethex+0x336>
 8019ef2:	2701      	movs	r7, #1
 8019ef4:	f1b8 0f00 	cmp.w	r8, #0
 8019ef8:	d07e      	beq.n	8019ff8 <__gethex+0x43a>
 8019efa:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8019efe:	2b02      	cmp	r3, #2
 8019f00:	d00e      	beq.n	8019f20 <__gethex+0x362>
 8019f02:	2b03      	cmp	r3, #3
 8019f04:	d010      	beq.n	8019f28 <__gethex+0x36a>
 8019f06:	2b01      	cmp	r3, #1
 8019f08:	d174      	bne.n	8019ff4 <__gethex+0x436>
 8019f0a:	f018 0f02 	tst.w	r8, #2
 8019f0e:	d071      	beq.n	8019ff4 <__gethex+0x436>
 8019f10:	f8db 0000 	ldr.w	r0, [fp]
 8019f14:	ea48 0800 	orr.w	r8, r8, r0
 8019f18:	f018 0f01 	tst.w	r8, #1
 8019f1c:	d107      	bne.n	8019f2e <__gethex+0x370>
 8019f1e:	e069      	b.n	8019ff4 <__gethex+0x436>
 8019f20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019f22:	f1c3 0301 	rsb	r3, r3, #1
 8019f26:	9313      	str	r3, [sp, #76]	; 0x4c
 8019f28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019f2a:	2b00      	cmp	r3, #0
 8019f2c:	d062      	beq.n	8019ff4 <__gethex+0x436>
 8019f2e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8019f32:	f105 0314 	add.w	r3, r5, #20
 8019f36:	ea4f 088a 	mov.w	r8, sl, lsl #2
 8019f3a:	eb03 0108 	add.w	r1, r3, r8
 8019f3e:	681a      	ldr	r2, [r3, #0]
 8019f40:	1c50      	adds	r0, r2, #1
 8019f42:	d002      	beq.n	8019f4a <__gethex+0x38c>
 8019f44:	3201      	adds	r2, #1
 8019f46:	601a      	str	r2, [r3, #0]
 8019f48:	e021      	b.n	8019f8e <__gethex+0x3d0>
 8019f4a:	2200      	movs	r2, #0
 8019f4c:	f843 2b04 	str.w	r2, [r3], #4
 8019f50:	428b      	cmp	r3, r1
 8019f52:	d3f4      	bcc.n	8019f3e <__gethex+0x380>
 8019f54:	68ab      	ldr	r3, [r5, #8]
 8019f56:	459a      	cmp	sl, r3
 8019f58:	db12      	blt.n	8019f80 <__gethex+0x3c2>
 8019f5a:	6869      	ldr	r1, [r5, #4]
 8019f5c:	9801      	ldr	r0, [sp, #4]
 8019f5e:	3101      	adds	r1, #1
 8019f60:	f000 f96d 	bl	801a23e <_Balloc>
 8019f64:	692a      	ldr	r2, [r5, #16]
 8019f66:	3202      	adds	r2, #2
 8019f68:	f105 010c 	add.w	r1, r5, #12
 8019f6c:	4683      	mov	fp, r0
 8019f6e:	0092      	lsls	r2, r2, #2
 8019f70:	300c      	adds	r0, #12
 8019f72:	f7fc fe4e 	bl	8016c12 <memcpy>
 8019f76:	4629      	mov	r1, r5
 8019f78:	9801      	ldr	r0, [sp, #4]
 8019f7a:	f000 f995 	bl	801a2a8 <_Bfree>
 8019f7e:	465d      	mov	r5, fp
 8019f80:	692b      	ldr	r3, [r5, #16]
 8019f82:	1c5a      	adds	r2, r3, #1
 8019f84:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8019f88:	612a      	str	r2, [r5, #16]
 8019f8a:	2201      	movs	r2, #1
 8019f8c:	615a      	str	r2, [r3, #20]
 8019f8e:	2f02      	cmp	r7, #2
 8019f90:	f105 0214 	add.w	r2, r5, #20
 8019f94:	d110      	bne.n	8019fb8 <__gethex+0x3fa>
 8019f96:	f8d9 3000 	ldr.w	r3, [r9]
 8019f9a:	3b01      	subs	r3, #1
 8019f9c:	429e      	cmp	r6, r3
 8019f9e:	d126      	bne.n	8019fee <__gethex+0x430>
 8019fa0:	1171      	asrs	r1, r6, #5
 8019fa2:	2301      	movs	r3, #1
 8019fa4:	f006 061f 	and.w	r6, r6, #31
 8019fa8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8019fac:	40b3      	lsls	r3, r6
 8019fae:	4213      	tst	r3, r2
 8019fb0:	bf0c      	ite	eq
 8019fb2:	2702      	moveq	r7, #2
 8019fb4:	2701      	movne	r7, #1
 8019fb6:	e01a      	b.n	8019fee <__gethex+0x430>
 8019fb8:	692b      	ldr	r3, [r5, #16]
 8019fba:	4553      	cmp	r3, sl
 8019fbc:	dd0a      	ble.n	8019fd4 <__gethex+0x416>
 8019fbe:	4628      	mov	r0, r5
 8019fc0:	2101      	movs	r1, #1
 8019fc2:	f7ff fdb1 	bl	8019b28 <rshift>
 8019fc6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8019fca:	3401      	adds	r4, #1
 8019fcc:	429c      	cmp	r4, r3
 8019fce:	f73f af2f 	bgt.w	8019e30 <__gethex+0x272>
 8019fd2:	e00b      	b.n	8019fec <__gethex+0x42e>
 8019fd4:	f016 061f 	ands.w	r6, r6, #31
 8019fd8:	d008      	beq.n	8019fec <__gethex+0x42e>
 8019fda:	4490      	add	r8, r2
 8019fdc:	f1c6 0620 	rsb	r6, r6, #32
 8019fe0:	f858 0c04 	ldr.w	r0, [r8, #-4]
 8019fe4:	f000 f9f5 	bl	801a3d2 <__hi0bits>
 8019fe8:	42b0      	cmp	r0, r6
 8019fea:	dbe8      	blt.n	8019fbe <__gethex+0x400>
 8019fec:	2701      	movs	r7, #1
 8019fee:	f047 0720 	orr.w	r7, r7, #32
 8019ff2:	e001      	b.n	8019ff8 <__gethex+0x43a>
 8019ff4:	f047 0710 	orr.w	r7, r7, #16
 8019ff8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019ffa:	601d      	str	r5, [r3, #0]
 8019ffc:	9b04      	ldr	r3, [sp, #16]
 8019ffe:	4638      	mov	r0, r7
 801a000:	601c      	str	r4, [r3, #0]
 801a002:	b009      	add	sp, #36	; 0x24
 801a004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a008 <L_shift>:
 801a008:	f1c2 0208 	rsb	r2, r2, #8
 801a00c:	0092      	lsls	r2, r2, #2
 801a00e:	b570      	push	{r4, r5, r6, lr}
 801a010:	f1c2 0620 	rsb	r6, r2, #32
 801a014:	6843      	ldr	r3, [r0, #4]
 801a016:	6805      	ldr	r5, [r0, #0]
 801a018:	fa03 f406 	lsl.w	r4, r3, r6
 801a01c:	432c      	orrs	r4, r5
 801a01e:	40d3      	lsrs	r3, r2
 801a020:	6004      	str	r4, [r0, #0]
 801a022:	f840 3f04 	str.w	r3, [r0, #4]!
 801a026:	4288      	cmp	r0, r1
 801a028:	d3f4      	bcc.n	801a014 <L_shift+0xc>
 801a02a:	bd70      	pop	{r4, r5, r6, pc}

0801a02c <__hexnan>:
 801a02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a030:	680e      	ldr	r6, [r1, #0]
 801a032:	f8d0 a000 	ldr.w	sl, [r0]
 801a036:	1175      	asrs	r5, r6, #5
 801a038:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 801a03c:	f016 031f 	ands.w	r3, r6, #31
 801a040:	b085      	sub	sp, #20
 801a042:	bf18      	it	ne
 801a044:	3504      	addne	r5, #4
 801a046:	f1a5 0904 	sub.w	r9, r5, #4
 801a04a:	4617      	mov	r7, r2
 801a04c:	2200      	movs	r2, #0
 801a04e:	4683      	mov	fp, r0
 801a050:	9301      	str	r3, [sp, #4]
 801a052:	f845 2c04 	str.w	r2, [r5, #-4]
 801a056:	46c8      	mov	r8, r9
 801a058:	464c      	mov	r4, r9
 801a05a:	9200      	str	r2, [sp, #0]
 801a05c:	4616      	mov	r6, r2
 801a05e:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 801a062:	2900      	cmp	r1, #0
 801a064:	d03a      	beq.n	801a0dc <__hexnan+0xb0>
 801a066:	4608      	mov	r0, r1
 801a068:	9203      	str	r2, [sp, #12]
 801a06a:	9102      	str	r1, [sp, #8]
 801a06c:	f7ff fd92 	bl	8019b94 <__hexdig_fun>
 801a070:	9902      	ldr	r1, [sp, #8]
 801a072:	9a03      	ldr	r2, [sp, #12]
 801a074:	b9e8      	cbnz	r0, 801a0b2 <__hexnan+0x86>
 801a076:	2920      	cmp	r1, #32
 801a078:	d814      	bhi.n	801a0a4 <__hexnan+0x78>
 801a07a:	9b00      	ldr	r3, [sp, #0]
 801a07c:	42b3      	cmp	r3, r6
 801a07e:	daee      	bge.n	801a05e <__hexnan+0x32>
 801a080:	4544      	cmp	r4, r8
 801a082:	d205      	bcs.n	801a090 <__hexnan+0x64>
 801a084:	2a07      	cmp	r2, #7
 801a086:	dc03      	bgt.n	801a090 <__hexnan+0x64>
 801a088:	4620      	mov	r0, r4
 801a08a:	4641      	mov	r1, r8
 801a08c:	f7ff ffbc 	bl	801a008 <L_shift>
 801a090:	42bc      	cmp	r4, r7
 801a092:	d921      	bls.n	801a0d8 <__hexnan+0xac>
 801a094:	f1a4 0804 	sub.w	r8, r4, #4
 801a098:	2200      	movs	r2, #0
 801a09a:	f844 2c04 	str.w	r2, [r4, #-4]
 801a09e:	9600      	str	r6, [sp, #0]
 801a0a0:	4644      	mov	r4, r8
 801a0a2:	e7dc      	b.n	801a05e <__hexnan+0x32>
 801a0a4:	2929      	cmp	r1, #41	; 0x29
 801a0a6:	d145      	bne.n	801a134 <__hexnan+0x108>
 801a0a8:	f10a 0301 	add.w	r3, sl, #1
 801a0ac:	f8cb 3000 	str.w	r3, [fp]
 801a0b0:	e014      	b.n	801a0dc <__hexnan+0xb0>
 801a0b2:	3201      	adds	r2, #1
 801a0b4:	2a08      	cmp	r2, #8
 801a0b6:	f106 0601 	add.w	r6, r6, #1
 801a0ba:	dd06      	ble.n	801a0ca <__hexnan+0x9e>
 801a0bc:	42bc      	cmp	r4, r7
 801a0be:	d9ce      	bls.n	801a05e <__hexnan+0x32>
 801a0c0:	2200      	movs	r2, #0
 801a0c2:	f844 2c04 	str.w	r2, [r4, #-4]
 801a0c6:	3c04      	subs	r4, #4
 801a0c8:	2201      	movs	r2, #1
 801a0ca:	6821      	ldr	r1, [r4, #0]
 801a0cc:	f000 000f 	and.w	r0, r0, #15
 801a0d0:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 801a0d4:	6020      	str	r0, [r4, #0]
 801a0d6:	e7c2      	b.n	801a05e <__hexnan+0x32>
 801a0d8:	2208      	movs	r2, #8
 801a0da:	e7c0      	b.n	801a05e <__hexnan+0x32>
 801a0dc:	b356      	cbz	r6, 801a134 <__hexnan+0x108>
 801a0de:	4544      	cmp	r4, r8
 801a0e0:	d205      	bcs.n	801a0ee <__hexnan+0xc2>
 801a0e2:	2a07      	cmp	r2, #7
 801a0e4:	dc03      	bgt.n	801a0ee <__hexnan+0xc2>
 801a0e6:	4620      	mov	r0, r4
 801a0e8:	4641      	mov	r1, r8
 801a0ea:	f7ff ff8d 	bl	801a008 <L_shift>
 801a0ee:	42bc      	cmp	r4, r7
 801a0f0:	d90c      	bls.n	801a10c <__hexnan+0xe0>
 801a0f2:	463b      	mov	r3, r7
 801a0f4:	f854 2b04 	ldr.w	r2, [r4], #4
 801a0f8:	f843 2b04 	str.w	r2, [r3], #4
 801a0fc:	454c      	cmp	r4, r9
 801a0fe:	d9f9      	bls.n	801a0f4 <__hexnan+0xc8>
 801a100:	2200      	movs	r2, #0
 801a102:	f843 2b04 	str.w	r2, [r3], #4
 801a106:	454b      	cmp	r3, r9
 801a108:	d9fa      	bls.n	801a100 <__hexnan+0xd4>
 801a10a:	e00b      	b.n	801a124 <__hexnan+0xf8>
 801a10c:	9b01      	ldr	r3, [sp, #4]
 801a10e:	b14b      	cbz	r3, 801a124 <__hexnan+0xf8>
 801a110:	f1c3 0620 	rsb	r6, r3, #32
 801a114:	f855 2c04 	ldr.w	r2, [r5, #-4]
 801a118:	f04f 33ff 	mov.w	r3, #4294967295
 801a11c:	40f3      	lsrs	r3, r6
 801a11e:	4013      	ands	r3, r2
 801a120:	f845 3c04 	str.w	r3, [r5, #-4]
 801a124:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801a128:	b933      	cbnz	r3, 801a138 <__hexnan+0x10c>
 801a12a:	42bd      	cmp	r5, r7
 801a12c:	d1fa      	bne.n	801a124 <__hexnan+0xf8>
 801a12e:	2301      	movs	r3, #1
 801a130:	602b      	str	r3, [r5, #0]
 801a132:	e001      	b.n	801a138 <__hexnan+0x10c>
 801a134:	2004      	movs	r0, #4
 801a136:	e000      	b.n	801a13a <__hexnan+0x10e>
 801a138:	2005      	movs	r0, #5
 801a13a:	b005      	add	sp, #20
 801a13c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a140 <_localeconv_r>:
 801a140:	4800      	ldr	r0, [pc, #0]	; (801a144 <_localeconv_r+0x4>)
 801a142:	4770      	bx	lr
 801a144:	20001770 	.word	0x20001770

0801a148 <_lseek_r>:
 801a148:	b538      	push	{r3, r4, r5, lr}
 801a14a:	4c07      	ldr	r4, [pc, #28]	; (801a168 <_lseek_r+0x20>)
 801a14c:	4605      	mov	r5, r0
 801a14e:	2000      	movs	r0, #0
 801a150:	6020      	str	r0, [r4, #0]
 801a152:	4608      	mov	r0, r1
 801a154:	4611      	mov	r1, r2
 801a156:	461a      	mov	r2, r3
 801a158:	f7fa fa64 	bl	8014624 <_lseek>
 801a15c:	1c43      	adds	r3, r0, #1
 801a15e:	d102      	bne.n	801a166 <_lseek_r+0x1e>
 801a160:	6823      	ldr	r3, [r4, #0]
 801a162:	b103      	cbz	r3, 801a166 <_lseek_r+0x1e>
 801a164:	602b      	str	r3, [r5, #0]
 801a166:	bd38      	pop	{r3, r4, r5, pc}
 801a168:	20001c18 	.word	0x20001c18

0801a16c <__smakebuf_r>:
 801a16c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a16e:	898b      	ldrh	r3, [r1, #12]
 801a170:	079d      	lsls	r5, r3, #30
 801a172:	b091      	sub	sp, #68	; 0x44
 801a174:	4606      	mov	r6, r0
 801a176:	460c      	mov	r4, r1
 801a178:	d426      	bmi.n	801a1c8 <__smakebuf_r+0x5c>
 801a17a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a17e:	2900      	cmp	r1, #0
 801a180:	da09      	bge.n	801a196 <__smakebuf_r+0x2a>
 801a182:	89a3      	ldrh	r3, [r4, #12]
 801a184:	f013 0f80 	tst.w	r3, #128	; 0x80
 801a188:	f04f 0500 	mov.w	r5, #0
 801a18c:	bf14      	ite	ne
 801a18e:	2740      	movne	r7, #64	; 0x40
 801a190:	f44f 6780 	moveq.w	r7, #1024	; 0x400
 801a194:	e00d      	b.n	801a1b2 <__smakebuf_r+0x46>
 801a196:	aa01      	add	r2, sp, #4
 801a198:	f000 fdcc 	bl	801ad34 <_fstat_r>
 801a19c:	2800      	cmp	r0, #0
 801a19e:	dbf0      	blt.n	801a182 <__smakebuf_r+0x16>
 801a1a0:	9d02      	ldr	r5, [sp, #8]
 801a1a2:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 801a1a6:	f5a5 5100 	sub.w	r1, r5, #8192	; 0x2000
 801a1aa:	424d      	negs	r5, r1
 801a1ac:	414d      	adcs	r5, r1
 801a1ae:	f44f 6780 	mov.w	r7, #1024	; 0x400
 801a1b2:	4630      	mov	r0, r6
 801a1b4:	4639      	mov	r1, r7
 801a1b6:	f7fc fd91 	bl	8016cdc <_malloc_r>
 801a1ba:	b960      	cbnz	r0, 801a1d6 <__smakebuf_r+0x6a>
 801a1bc:	89a3      	ldrh	r3, [r4, #12]
 801a1be:	059a      	lsls	r2, r3, #22
 801a1c0:	d41d      	bmi.n	801a1fe <__smakebuf_r+0x92>
 801a1c2:	f043 0302 	orr.w	r3, r3, #2
 801a1c6:	81a3      	strh	r3, [r4, #12]
 801a1c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a1cc:	6023      	str	r3, [r4, #0]
 801a1ce:	6123      	str	r3, [r4, #16]
 801a1d0:	2301      	movs	r3, #1
 801a1d2:	6163      	str	r3, [r4, #20]
 801a1d4:	e013      	b.n	801a1fe <__smakebuf_r+0x92>
 801a1d6:	4b0b      	ldr	r3, [pc, #44]	; (801a204 <__smakebuf_r+0x98>)
 801a1d8:	62b3      	str	r3, [r6, #40]	; 0x28
 801a1da:	89a3      	ldrh	r3, [r4, #12]
 801a1dc:	6020      	str	r0, [r4, #0]
 801a1de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a1e2:	81a3      	strh	r3, [r4, #12]
 801a1e4:	6120      	str	r0, [r4, #16]
 801a1e6:	6167      	str	r7, [r4, #20]
 801a1e8:	b14d      	cbz	r5, 801a1fe <__smakebuf_r+0x92>
 801a1ea:	4630      	mov	r0, r6
 801a1ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a1f0:	f000 fdb2 	bl	801ad58 <_isatty_r>
 801a1f4:	b118      	cbz	r0, 801a1fe <__smakebuf_r+0x92>
 801a1f6:	89a3      	ldrh	r3, [r4, #12]
 801a1f8:	f043 0301 	orr.w	r3, r3, #1
 801a1fc:	81a3      	strh	r3, [r4, #12]
 801a1fe:	b011      	add	sp, #68	; 0x44
 801a200:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a202:	bf00      	nop
 801a204:	080169f9 	.word	0x080169f9

0801a208 <memmove>:
 801a208:	4281      	cmp	r1, r0
 801a20a:	b510      	push	{r4, lr}
 801a20c:	eb01 0302 	add.w	r3, r1, r2
 801a210:	d301      	bcc.n	801a216 <memmove+0xe>
 801a212:	1e42      	subs	r2, r0, #1
 801a214:	e00b      	b.n	801a22e <memmove+0x26>
 801a216:	4298      	cmp	r0, r3
 801a218:	d2fb      	bcs.n	801a212 <memmove+0xa>
 801a21a:	1881      	adds	r1, r0, r2
 801a21c:	1ad2      	subs	r2, r2, r3
 801a21e:	42d3      	cmn	r3, r2
 801a220:	d004      	beq.n	801a22c <memmove+0x24>
 801a222:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a226:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801a22a:	e7f8      	b.n	801a21e <memmove+0x16>
 801a22c:	bd10      	pop	{r4, pc}
 801a22e:	4299      	cmp	r1, r3
 801a230:	d004      	beq.n	801a23c <memmove+0x34>
 801a232:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a236:	f802 4f01 	strb.w	r4, [r2, #1]!
 801a23a:	e7f8      	b.n	801a22e <memmove+0x26>
 801a23c:	bd10      	pop	{r4, pc}

0801a23e <_Balloc>:
 801a23e:	b570      	push	{r4, r5, r6, lr}
 801a240:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801a242:	4604      	mov	r4, r0
 801a244:	460e      	mov	r6, r1
 801a246:	b93d      	cbnz	r5, 801a258 <_Balloc+0x1a>
 801a248:	2010      	movs	r0, #16
 801a24a:	f7fc fcc3 	bl	8016bd4 <malloc>
 801a24e:	6260      	str	r0, [r4, #36]	; 0x24
 801a250:	6045      	str	r5, [r0, #4]
 801a252:	6085      	str	r5, [r0, #8]
 801a254:	6005      	str	r5, [r0, #0]
 801a256:	60c5      	str	r5, [r0, #12]
 801a258:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801a25a:	68eb      	ldr	r3, [r5, #12]
 801a25c:	b143      	cbz	r3, 801a270 <_Balloc+0x32>
 801a25e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a260:	68db      	ldr	r3, [r3, #12]
 801a262:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801a266:	b178      	cbz	r0, 801a288 <_Balloc+0x4a>
 801a268:	6802      	ldr	r2, [r0, #0]
 801a26a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801a26e:	e017      	b.n	801a2a0 <_Balloc+0x62>
 801a270:	4620      	mov	r0, r4
 801a272:	2104      	movs	r1, #4
 801a274:	2221      	movs	r2, #33	; 0x21
 801a276:	f7fc fcdf 	bl	8016c38 <_calloc_r>
 801a27a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a27c:	60e8      	str	r0, [r5, #12]
 801a27e:	68db      	ldr	r3, [r3, #12]
 801a280:	2b00      	cmp	r3, #0
 801a282:	d1ec      	bne.n	801a25e <_Balloc+0x20>
 801a284:	2000      	movs	r0, #0
 801a286:	bd70      	pop	{r4, r5, r6, pc}
 801a288:	2101      	movs	r1, #1
 801a28a:	fa01 f506 	lsl.w	r5, r1, r6
 801a28e:	1d6a      	adds	r2, r5, #5
 801a290:	4620      	mov	r0, r4
 801a292:	0092      	lsls	r2, r2, #2
 801a294:	f7fc fcd0 	bl	8016c38 <_calloc_r>
 801a298:	2800      	cmp	r0, #0
 801a29a:	d0f3      	beq.n	801a284 <_Balloc+0x46>
 801a29c:	6046      	str	r6, [r0, #4]
 801a29e:	6085      	str	r5, [r0, #8]
 801a2a0:	2300      	movs	r3, #0
 801a2a2:	6103      	str	r3, [r0, #16]
 801a2a4:	60c3      	str	r3, [r0, #12]
 801a2a6:	bd70      	pop	{r4, r5, r6, pc}

0801a2a8 <_Bfree>:
 801a2a8:	b570      	push	{r4, r5, r6, lr}
 801a2aa:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801a2ac:	4606      	mov	r6, r0
 801a2ae:	460d      	mov	r5, r1
 801a2b0:	b93c      	cbnz	r4, 801a2c2 <_Bfree+0x1a>
 801a2b2:	2010      	movs	r0, #16
 801a2b4:	f7fc fc8e 	bl	8016bd4 <malloc>
 801a2b8:	6270      	str	r0, [r6, #36]	; 0x24
 801a2ba:	6044      	str	r4, [r0, #4]
 801a2bc:	6084      	str	r4, [r0, #8]
 801a2be:	6004      	str	r4, [r0, #0]
 801a2c0:	60c4      	str	r4, [r0, #12]
 801a2c2:	b13d      	cbz	r5, 801a2d4 <_Bfree+0x2c>
 801a2c4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801a2c6:	686a      	ldr	r2, [r5, #4]
 801a2c8:	68db      	ldr	r3, [r3, #12]
 801a2ca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801a2ce:	6029      	str	r1, [r5, #0]
 801a2d0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801a2d4:	bd70      	pop	{r4, r5, r6, pc}

0801a2d6 <__multadd>:
 801a2d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a2da:	690f      	ldr	r7, [r1, #16]
 801a2dc:	4698      	mov	r8, r3
 801a2de:	4606      	mov	r6, r0
 801a2e0:	460c      	mov	r4, r1
 801a2e2:	f101 0e14 	add.w	lr, r1, #20
 801a2e6:	2300      	movs	r3, #0
 801a2e8:	f8de 0000 	ldr.w	r0, [lr]
 801a2ec:	b285      	uxth	r5, r0
 801a2ee:	0c01      	lsrs	r1, r0, #16
 801a2f0:	fb02 8505 	mla	r5, r2, r5, r8
 801a2f4:	4351      	muls	r1, r2
 801a2f6:	eb01 4115 	add.w	r1, r1, r5, lsr #16
 801a2fa:	3301      	adds	r3, #1
 801a2fc:	b2ad      	uxth	r5, r5
 801a2fe:	ea4f 4811 	mov.w	r8, r1, lsr #16
 801a302:	42bb      	cmp	r3, r7
 801a304:	eb05 4101 	add.w	r1, r5, r1, lsl #16
 801a308:	f84e 1b04 	str.w	r1, [lr], #4
 801a30c:	dbec      	blt.n	801a2e8 <__multadd+0x12>
 801a30e:	f1b8 0f00 	cmp.w	r8, #0
 801a312:	d01b      	beq.n	801a34c <__multadd+0x76>
 801a314:	68a3      	ldr	r3, [r4, #8]
 801a316:	429f      	cmp	r7, r3
 801a318:	db12      	blt.n	801a340 <__multadd+0x6a>
 801a31a:	6861      	ldr	r1, [r4, #4]
 801a31c:	4630      	mov	r0, r6
 801a31e:	3101      	adds	r1, #1
 801a320:	f7ff ff8d 	bl	801a23e <_Balloc>
 801a324:	6922      	ldr	r2, [r4, #16]
 801a326:	3202      	adds	r2, #2
 801a328:	f104 010c 	add.w	r1, r4, #12
 801a32c:	4605      	mov	r5, r0
 801a32e:	0092      	lsls	r2, r2, #2
 801a330:	300c      	adds	r0, #12
 801a332:	f7fc fc6e 	bl	8016c12 <memcpy>
 801a336:	4621      	mov	r1, r4
 801a338:	4630      	mov	r0, r6
 801a33a:	f7ff ffb5 	bl	801a2a8 <_Bfree>
 801a33e:	462c      	mov	r4, r5
 801a340:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 801a344:	3701      	adds	r7, #1
 801a346:	f8c3 8014 	str.w	r8, [r3, #20]
 801a34a:	6127      	str	r7, [r4, #16]
 801a34c:	4620      	mov	r0, r4
 801a34e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a352 <__s2b>:
 801a352:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a356:	460c      	mov	r4, r1
 801a358:	4615      	mov	r5, r2
 801a35a:	4698      	mov	r8, r3
 801a35c:	2209      	movs	r2, #9
 801a35e:	3308      	adds	r3, #8
 801a360:	4607      	mov	r7, r0
 801a362:	fb93 f2f2 	sdiv	r2, r3, r2
 801a366:	2100      	movs	r1, #0
 801a368:	2301      	movs	r3, #1
 801a36a:	429a      	cmp	r2, r3
 801a36c:	dd02      	ble.n	801a374 <__s2b+0x22>
 801a36e:	005b      	lsls	r3, r3, #1
 801a370:	3101      	adds	r1, #1
 801a372:	e7fa      	b.n	801a36a <__s2b+0x18>
 801a374:	4638      	mov	r0, r7
 801a376:	f7ff ff62 	bl	801a23e <_Balloc>
 801a37a:	9b08      	ldr	r3, [sp, #32]
 801a37c:	6143      	str	r3, [r0, #20]
 801a37e:	2d09      	cmp	r5, #9
 801a380:	f04f 0301 	mov.w	r3, #1
 801a384:	4601      	mov	r1, r0
 801a386:	6103      	str	r3, [r0, #16]
 801a388:	dd10      	ble.n	801a3ac <__s2b+0x5a>
 801a38a:	f104 0609 	add.w	r6, r4, #9
 801a38e:	46b1      	mov	r9, r6
 801a390:	442c      	add	r4, r5
 801a392:	f819 3b01 	ldrb.w	r3, [r9], #1
 801a396:	4638      	mov	r0, r7
 801a398:	220a      	movs	r2, #10
 801a39a:	3b30      	subs	r3, #48	; 0x30
 801a39c:	f7ff ff9b 	bl	801a2d6 <__multadd>
 801a3a0:	45a1      	cmp	r9, r4
 801a3a2:	4601      	mov	r1, r0
 801a3a4:	d1f5      	bne.n	801a392 <__s2b+0x40>
 801a3a6:	1974      	adds	r4, r6, r5
 801a3a8:	3c08      	subs	r4, #8
 801a3aa:	e001      	b.n	801a3b0 <__s2b+0x5e>
 801a3ac:	340a      	adds	r4, #10
 801a3ae:	2509      	movs	r5, #9
 801a3b0:	4626      	mov	r6, r4
 801a3b2:	1b2b      	subs	r3, r5, r4
 801a3b4:	4433      	add	r3, r6
 801a3b6:	4543      	cmp	r3, r8
 801a3b8:	da08      	bge.n	801a3cc <__s2b+0x7a>
 801a3ba:	f816 3b01 	ldrb.w	r3, [r6], #1
 801a3be:	4638      	mov	r0, r7
 801a3c0:	220a      	movs	r2, #10
 801a3c2:	3b30      	subs	r3, #48	; 0x30
 801a3c4:	f7ff ff87 	bl	801a2d6 <__multadd>
 801a3c8:	4601      	mov	r1, r0
 801a3ca:	e7f2      	b.n	801a3b2 <__s2b+0x60>
 801a3cc:	4608      	mov	r0, r1
 801a3ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801a3d2 <__hi0bits>:
 801a3d2:	0c03      	lsrs	r3, r0, #16
 801a3d4:	041b      	lsls	r3, r3, #16
 801a3d6:	b913      	cbnz	r3, 801a3de <__hi0bits+0xc>
 801a3d8:	0400      	lsls	r0, r0, #16
 801a3da:	2310      	movs	r3, #16
 801a3dc:	e000      	b.n	801a3e0 <__hi0bits+0xe>
 801a3de:	2300      	movs	r3, #0
 801a3e0:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801a3e4:	bf04      	itt	eq
 801a3e6:	0200      	lsleq	r0, r0, #8
 801a3e8:	3308      	addeq	r3, #8
 801a3ea:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801a3ee:	bf04      	itt	eq
 801a3f0:	0100      	lsleq	r0, r0, #4
 801a3f2:	3304      	addeq	r3, #4
 801a3f4:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801a3f8:	bf04      	itt	eq
 801a3fa:	0080      	lsleq	r0, r0, #2
 801a3fc:	3302      	addeq	r3, #2
 801a3fe:	2800      	cmp	r0, #0
 801a400:	db03      	blt.n	801a40a <__hi0bits+0x38>
 801a402:	0042      	lsls	r2, r0, #1
 801a404:	d503      	bpl.n	801a40e <__hi0bits+0x3c>
 801a406:	1c58      	adds	r0, r3, #1
 801a408:	4770      	bx	lr
 801a40a:	4618      	mov	r0, r3
 801a40c:	4770      	bx	lr
 801a40e:	2020      	movs	r0, #32
 801a410:	4770      	bx	lr

0801a412 <__lo0bits>:
 801a412:	6803      	ldr	r3, [r0, #0]
 801a414:	f013 0207 	ands.w	r2, r3, #7
 801a418:	d00b      	beq.n	801a432 <__lo0bits+0x20>
 801a41a:	07d9      	lsls	r1, r3, #31
 801a41c:	d422      	bmi.n	801a464 <__lo0bits+0x52>
 801a41e:	079a      	lsls	r2, r3, #30
 801a420:	bf4b      	itete	mi
 801a422:	085b      	lsrmi	r3, r3, #1
 801a424:	089b      	lsrpl	r3, r3, #2
 801a426:	6003      	strmi	r3, [r0, #0]
 801a428:	6003      	strpl	r3, [r0, #0]
 801a42a:	bf4c      	ite	mi
 801a42c:	2001      	movmi	r0, #1
 801a42e:	2002      	movpl	r0, #2
 801a430:	4770      	bx	lr
 801a432:	b299      	uxth	r1, r3
 801a434:	b909      	cbnz	r1, 801a43a <__lo0bits+0x28>
 801a436:	0c1b      	lsrs	r3, r3, #16
 801a438:	2210      	movs	r2, #16
 801a43a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801a43e:	bf04      	itt	eq
 801a440:	0a1b      	lsreq	r3, r3, #8
 801a442:	3208      	addeq	r2, #8
 801a444:	0719      	lsls	r1, r3, #28
 801a446:	bf04      	itt	eq
 801a448:	091b      	lsreq	r3, r3, #4
 801a44a:	3204      	addeq	r2, #4
 801a44c:	0799      	lsls	r1, r3, #30
 801a44e:	bf04      	itt	eq
 801a450:	089b      	lsreq	r3, r3, #2
 801a452:	3202      	addeq	r2, #2
 801a454:	07d9      	lsls	r1, r3, #31
 801a456:	d402      	bmi.n	801a45e <__lo0bits+0x4c>
 801a458:	085b      	lsrs	r3, r3, #1
 801a45a:	d005      	beq.n	801a468 <__lo0bits+0x56>
 801a45c:	3201      	adds	r2, #1
 801a45e:	6003      	str	r3, [r0, #0]
 801a460:	4610      	mov	r0, r2
 801a462:	4770      	bx	lr
 801a464:	2000      	movs	r0, #0
 801a466:	4770      	bx	lr
 801a468:	2020      	movs	r0, #32
 801a46a:	4770      	bx	lr

0801a46c <__i2b>:
 801a46c:	b510      	push	{r4, lr}
 801a46e:	460c      	mov	r4, r1
 801a470:	2101      	movs	r1, #1
 801a472:	f7ff fee4 	bl	801a23e <_Balloc>
 801a476:	2201      	movs	r2, #1
 801a478:	6144      	str	r4, [r0, #20]
 801a47a:	6102      	str	r2, [r0, #16]
 801a47c:	bd10      	pop	{r4, pc}

0801a47e <__multiply>:
 801a47e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a482:	4614      	mov	r4, r2
 801a484:	690a      	ldr	r2, [r1, #16]
 801a486:	6923      	ldr	r3, [r4, #16]
 801a488:	429a      	cmp	r2, r3
 801a48a:	bfb8      	it	lt
 801a48c:	460b      	movlt	r3, r1
 801a48e:	4688      	mov	r8, r1
 801a490:	bfbc      	itt	lt
 801a492:	46a0      	movlt	r8, r4
 801a494:	461c      	movlt	r4, r3
 801a496:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801a49a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801a49e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801a4a2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801a4a6:	eb07 0609 	add.w	r6, r7, r9
 801a4aa:	429e      	cmp	r6, r3
 801a4ac:	bfc8      	it	gt
 801a4ae:	3101      	addgt	r1, #1
 801a4b0:	f7ff fec5 	bl	801a23e <_Balloc>
 801a4b4:	f100 0514 	add.w	r5, r0, #20
 801a4b8:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 801a4bc:	462b      	mov	r3, r5
 801a4be:	4563      	cmp	r3, ip
 801a4c0:	d203      	bcs.n	801a4ca <__multiply+0x4c>
 801a4c2:	2200      	movs	r2, #0
 801a4c4:	f843 2b04 	str.w	r2, [r3], #4
 801a4c8:	e7f9      	b.n	801a4be <__multiply+0x40>
 801a4ca:	f104 0214 	add.w	r2, r4, #20
 801a4ce:	f108 0114 	add.w	r1, r8, #20
 801a4d2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801a4d6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801a4da:	9300      	str	r3, [sp, #0]
 801a4dc:	9b00      	ldr	r3, [sp, #0]
 801a4de:	9201      	str	r2, [sp, #4]
 801a4e0:	429a      	cmp	r2, r3
 801a4e2:	d257      	bcs.n	801a594 <__multiply+0x116>
 801a4e4:	f8b2 b000 	ldrh.w	fp, [r2]
 801a4e8:	f1bb 0f00 	cmp.w	fp, #0
 801a4ec:	d023      	beq.n	801a536 <__multiply+0xb8>
 801a4ee:	4689      	mov	r9, r1
 801a4f0:	46ae      	mov	lr, r5
 801a4f2:	f04f 0800 	mov.w	r8, #0
 801a4f6:	f859 4b04 	ldr.w	r4, [r9], #4
 801a4fa:	f8be a000 	ldrh.w	sl, [lr]
 801a4fe:	b2a3      	uxth	r3, r4
 801a500:	fb0b a303 	mla	r3, fp, r3, sl
 801a504:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801a508:	f8de 4000 	ldr.w	r4, [lr]
 801a50c:	4443      	add	r3, r8
 801a50e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801a512:	fb0b 840a 	mla	r4, fp, sl, r8
 801a516:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801a51a:	46f2      	mov	sl, lr
 801a51c:	b29b      	uxth	r3, r3
 801a51e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801a522:	454f      	cmp	r7, r9
 801a524:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801a528:	f84a 3b04 	str.w	r3, [sl], #4
 801a52c:	d901      	bls.n	801a532 <__multiply+0xb4>
 801a52e:	46d6      	mov	lr, sl
 801a530:	e7e1      	b.n	801a4f6 <__multiply+0x78>
 801a532:	f8ce 8004 	str.w	r8, [lr, #4]
 801a536:	9b01      	ldr	r3, [sp, #4]
 801a538:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801a53c:	3204      	adds	r2, #4
 801a53e:	f1ba 0f00 	cmp.w	sl, #0
 801a542:	d021      	beq.n	801a588 <__multiply+0x10a>
 801a544:	682b      	ldr	r3, [r5, #0]
 801a546:	462c      	mov	r4, r5
 801a548:	4689      	mov	r9, r1
 801a54a:	f04f 0800 	mov.w	r8, #0
 801a54e:	f8b9 e000 	ldrh.w	lr, [r9]
 801a552:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 801a556:	fb0a be0e 	mla	lr, sl, lr, fp
 801a55a:	44f0      	add	r8, lr
 801a55c:	46a3      	mov	fp, r4
 801a55e:	b29b      	uxth	r3, r3
 801a560:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 801a564:	f84b 3b04 	str.w	r3, [fp], #4
 801a568:	f859 3b04 	ldr.w	r3, [r9], #4
 801a56c:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 801a570:	0c1b      	lsrs	r3, r3, #16
 801a572:	fb0a e303 	mla	r3, sl, r3, lr
 801a576:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 801a57a:	45b9      	cmp	r9, r7
 801a57c:	ea4f 4813 	mov.w	r8, r3, lsr #16
 801a580:	d201      	bcs.n	801a586 <__multiply+0x108>
 801a582:	465c      	mov	r4, fp
 801a584:	e7e3      	b.n	801a54e <__multiply+0xd0>
 801a586:	6063      	str	r3, [r4, #4]
 801a588:	3504      	adds	r5, #4
 801a58a:	e7a7      	b.n	801a4dc <__multiply+0x5e>
 801a58c:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 801a590:	b913      	cbnz	r3, 801a598 <__multiply+0x11a>
 801a592:	3e01      	subs	r6, #1
 801a594:	2e00      	cmp	r6, #0
 801a596:	dcf9      	bgt.n	801a58c <__multiply+0x10e>
 801a598:	6106      	str	r6, [r0, #16]
 801a59a:	b003      	add	sp, #12
 801a59c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a5a0 <__pow5mult>:
 801a5a0:	f012 0303 	ands.w	r3, r2, #3
 801a5a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a5a8:	4606      	mov	r6, r0
 801a5aa:	460f      	mov	r7, r1
 801a5ac:	4615      	mov	r5, r2
 801a5ae:	d007      	beq.n	801a5c0 <__pow5mult+0x20>
 801a5b0:	3b01      	subs	r3, #1
 801a5b2:	4a21      	ldr	r2, [pc, #132]	; (801a638 <__pow5mult+0x98>)
 801a5b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801a5b8:	2300      	movs	r3, #0
 801a5ba:	f7ff fe8c 	bl	801a2d6 <__multadd>
 801a5be:	4607      	mov	r7, r0
 801a5c0:	10ad      	asrs	r5, r5, #2
 801a5c2:	d035      	beq.n	801a630 <__pow5mult+0x90>
 801a5c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801a5c6:	b93c      	cbnz	r4, 801a5d8 <__pow5mult+0x38>
 801a5c8:	2010      	movs	r0, #16
 801a5ca:	f7fc fb03 	bl	8016bd4 <malloc>
 801a5ce:	6270      	str	r0, [r6, #36]	; 0x24
 801a5d0:	6044      	str	r4, [r0, #4]
 801a5d2:	6084      	str	r4, [r0, #8]
 801a5d4:	6004      	str	r4, [r0, #0]
 801a5d6:	60c4      	str	r4, [r0, #12]
 801a5d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801a5dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801a5e0:	b97c      	cbnz	r4, 801a602 <__pow5mult+0x62>
 801a5e2:	4630      	mov	r0, r6
 801a5e4:	f240 2171 	movw	r1, #625	; 0x271
 801a5e8:	f7ff ff40 	bl	801a46c <__i2b>
 801a5ec:	2300      	movs	r3, #0
 801a5ee:	f8c8 0008 	str.w	r0, [r8, #8]
 801a5f2:	4604      	mov	r4, r0
 801a5f4:	6003      	str	r3, [r0, #0]
 801a5f6:	e004      	b.n	801a602 <__pow5mult+0x62>
 801a5f8:	106d      	asrs	r5, r5, #1
 801a5fa:	d019      	beq.n	801a630 <__pow5mult+0x90>
 801a5fc:	6820      	ldr	r0, [r4, #0]
 801a5fe:	b170      	cbz	r0, 801a61e <__pow5mult+0x7e>
 801a600:	4604      	mov	r4, r0
 801a602:	07eb      	lsls	r3, r5, #31
 801a604:	d5f8      	bpl.n	801a5f8 <__pow5mult+0x58>
 801a606:	4639      	mov	r1, r7
 801a608:	4622      	mov	r2, r4
 801a60a:	4630      	mov	r0, r6
 801a60c:	f7ff ff37 	bl	801a47e <__multiply>
 801a610:	4639      	mov	r1, r7
 801a612:	4680      	mov	r8, r0
 801a614:	4630      	mov	r0, r6
 801a616:	f7ff fe47 	bl	801a2a8 <_Bfree>
 801a61a:	4647      	mov	r7, r8
 801a61c:	e7ec      	b.n	801a5f8 <__pow5mult+0x58>
 801a61e:	4630      	mov	r0, r6
 801a620:	4621      	mov	r1, r4
 801a622:	4622      	mov	r2, r4
 801a624:	f7ff ff2b 	bl	801a47e <__multiply>
 801a628:	2300      	movs	r3, #0
 801a62a:	6020      	str	r0, [r4, #0]
 801a62c:	6003      	str	r3, [r0, #0]
 801a62e:	e7e7      	b.n	801a600 <__pow5mult+0x60>
 801a630:	4638      	mov	r0, r7
 801a632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a636:	bf00      	nop
 801a638:	0801d420 	.word	0x0801d420

0801a63c <__lshift>:
 801a63c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a640:	460c      	mov	r4, r1
 801a642:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801a646:	6923      	ldr	r3, [r4, #16]
 801a648:	6849      	ldr	r1, [r1, #4]
 801a64a:	eb0a 0903 	add.w	r9, sl, r3
 801a64e:	68a3      	ldr	r3, [r4, #8]
 801a650:	4607      	mov	r7, r0
 801a652:	4616      	mov	r6, r2
 801a654:	f109 0501 	add.w	r5, r9, #1
 801a658:	429d      	cmp	r5, r3
 801a65a:	dd02      	ble.n	801a662 <__lshift+0x26>
 801a65c:	3101      	adds	r1, #1
 801a65e:	005b      	lsls	r3, r3, #1
 801a660:	e7fa      	b.n	801a658 <__lshift+0x1c>
 801a662:	4638      	mov	r0, r7
 801a664:	f7ff fdeb 	bl	801a23e <_Balloc>
 801a668:	2300      	movs	r3, #0
 801a66a:	4680      	mov	r8, r0
 801a66c:	f100 0114 	add.w	r1, r0, #20
 801a670:	4553      	cmp	r3, sl
 801a672:	da04      	bge.n	801a67e <__lshift+0x42>
 801a674:	2200      	movs	r2, #0
 801a676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801a67a:	3301      	adds	r3, #1
 801a67c:	e7f8      	b.n	801a670 <__lshift+0x34>
 801a67e:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 801a682:	6920      	ldr	r0, [r4, #16]
 801a684:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801a688:	f016 021f 	ands.w	r2, r6, #31
 801a68c:	f104 0114 	add.w	r1, r4, #20
 801a690:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 801a694:	d014      	beq.n	801a6c0 <__lshift+0x84>
 801a696:	f1c2 0c20 	rsb	ip, r2, #32
 801a69a:	2000      	movs	r0, #0
 801a69c:	680e      	ldr	r6, [r1, #0]
 801a69e:	4096      	lsls	r6, r2
 801a6a0:	4330      	orrs	r0, r6
 801a6a2:	469a      	mov	sl, r3
 801a6a4:	f843 0b04 	str.w	r0, [r3], #4
 801a6a8:	f851 0b04 	ldr.w	r0, [r1], #4
 801a6ac:	4571      	cmp	r1, lr
 801a6ae:	fa20 f00c 	lsr.w	r0, r0, ip
 801a6b2:	d3f3      	bcc.n	801a69c <__lshift+0x60>
 801a6b4:	f8ca 0004 	str.w	r0, [sl, #4]
 801a6b8:	b148      	cbz	r0, 801a6ce <__lshift+0x92>
 801a6ba:	f109 0502 	add.w	r5, r9, #2
 801a6be:	e006      	b.n	801a6ce <__lshift+0x92>
 801a6c0:	3b04      	subs	r3, #4
 801a6c2:	f851 2b04 	ldr.w	r2, [r1], #4
 801a6c6:	f843 2f04 	str.w	r2, [r3, #4]!
 801a6ca:	4571      	cmp	r1, lr
 801a6cc:	d3f9      	bcc.n	801a6c2 <__lshift+0x86>
 801a6ce:	3d01      	subs	r5, #1
 801a6d0:	4638      	mov	r0, r7
 801a6d2:	f8c8 5010 	str.w	r5, [r8, #16]
 801a6d6:	4621      	mov	r1, r4
 801a6d8:	f7ff fde6 	bl	801a2a8 <_Bfree>
 801a6dc:	4640      	mov	r0, r8
 801a6de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801a6e2 <__mcmp>:
 801a6e2:	6903      	ldr	r3, [r0, #16]
 801a6e4:	690a      	ldr	r2, [r1, #16]
 801a6e6:	1a9b      	subs	r3, r3, r2
 801a6e8:	b510      	push	{r4, lr}
 801a6ea:	d111      	bne.n	801a710 <__mcmp+0x2e>
 801a6ec:	0092      	lsls	r2, r2, #2
 801a6ee:	3014      	adds	r0, #20
 801a6f0:	3114      	adds	r1, #20
 801a6f2:	1883      	adds	r3, r0, r2
 801a6f4:	440a      	add	r2, r1
 801a6f6:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 801a6fa:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801a6fe:	428c      	cmp	r4, r1
 801a700:	d002      	beq.n	801a708 <__mcmp+0x26>
 801a702:	d307      	bcc.n	801a714 <__mcmp+0x32>
 801a704:	2001      	movs	r0, #1
 801a706:	bd10      	pop	{r4, pc}
 801a708:	4283      	cmp	r3, r0
 801a70a:	d8f4      	bhi.n	801a6f6 <__mcmp+0x14>
 801a70c:	2000      	movs	r0, #0
 801a70e:	bd10      	pop	{r4, pc}
 801a710:	4618      	mov	r0, r3
 801a712:	bd10      	pop	{r4, pc}
 801a714:	f04f 30ff 	mov.w	r0, #4294967295
 801a718:	bd10      	pop	{r4, pc}

0801a71a <__mdiff>:
 801a71a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a71e:	4607      	mov	r7, r0
 801a720:	460c      	mov	r4, r1
 801a722:	4608      	mov	r0, r1
 801a724:	4611      	mov	r1, r2
 801a726:	4615      	mov	r5, r2
 801a728:	f7ff ffdb 	bl	801a6e2 <__mcmp>
 801a72c:	1e06      	subs	r6, r0, #0
 801a72e:	d108      	bne.n	801a742 <__mdiff+0x28>
 801a730:	4638      	mov	r0, r7
 801a732:	4631      	mov	r1, r6
 801a734:	f7ff fd83 	bl	801a23e <_Balloc>
 801a738:	2301      	movs	r3, #1
 801a73a:	6103      	str	r3, [r0, #16]
 801a73c:	6146      	str	r6, [r0, #20]
 801a73e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a742:	bfbc      	itt	lt
 801a744:	4623      	movlt	r3, r4
 801a746:	462c      	movlt	r4, r5
 801a748:	4638      	mov	r0, r7
 801a74a:	6861      	ldr	r1, [r4, #4]
 801a74c:	bfba      	itte	lt
 801a74e:	461d      	movlt	r5, r3
 801a750:	2601      	movlt	r6, #1
 801a752:	2600      	movge	r6, #0
 801a754:	f7ff fd73 	bl	801a23e <_Balloc>
 801a758:	692b      	ldr	r3, [r5, #16]
 801a75a:	60c6      	str	r6, [r0, #12]
 801a75c:	6926      	ldr	r6, [r4, #16]
 801a75e:	f105 0914 	add.w	r9, r5, #20
 801a762:	3414      	adds	r4, #20
 801a764:	eb04 0786 	add.w	r7, r4, r6, lsl #2
 801a768:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801a76c:	f100 0514 	add.w	r5, r0, #20
 801a770:	f04f 0c00 	mov.w	ip, #0
 801a774:	f854 3b04 	ldr.w	r3, [r4], #4
 801a778:	f859 2b04 	ldr.w	r2, [r9], #4
 801a77c:	fa1c f183 	uxtah	r1, ip, r3
 801a780:	fa1f fe82 	uxth.w	lr, r2
 801a784:	0c12      	lsrs	r2, r2, #16
 801a786:	ebce 0101 	rsb	r1, lr, r1
 801a78a:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
 801a78e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801a792:	b289      	uxth	r1, r1
 801a794:	ea4f 4c23 	mov.w	ip, r3, asr #16
 801a798:	45c8      	cmp	r8, r9
 801a79a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801a79e:	46a6      	mov	lr, r4
 801a7a0:	f845 3b04 	str.w	r3, [r5], #4
 801a7a4:	d8e6      	bhi.n	801a774 <__mdiff+0x5a>
 801a7a6:	45be      	cmp	lr, r7
 801a7a8:	d20e      	bcs.n	801a7c8 <__mdiff+0xae>
 801a7aa:	f85e 2b04 	ldr.w	r2, [lr], #4
 801a7ae:	fa1c f482 	uxtah	r4, ip, r2
 801a7b2:	0c12      	lsrs	r2, r2, #16
 801a7b4:	eb02 4224 	add.w	r2, r2, r4, asr #16
 801a7b8:	b2a4      	uxth	r4, r4
 801a7ba:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801a7be:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 801a7c2:	f845 2b04 	str.w	r2, [r5], #4
 801a7c6:	e7ee      	b.n	801a7a6 <__mdiff+0x8c>
 801a7c8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801a7cc:	b90b      	cbnz	r3, 801a7d2 <__mdiff+0xb8>
 801a7ce:	3e01      	subs	r6, #1
 801a7d0:	e7fa      	b.n	801a7c8 <__mdiff+0xae>
 801a7d2:	6106      	str	r6, [r0, #16]
 801a7d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801a7d8 <__ulp>:
 801a7d8:	4b10      	ldr	r3, [pc, #64]	; (801a81c <__ulp+0x44>)
 801a7da:	400b      	ands	r3, r1
 801a7dc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801a7e0:	2b00      	cmp	r3, #0
 801a7e2:	dd02      	ble.n	801a7ea <__ulp+0x12>
 801a7e4:	2000      	movs	r0, #0
 801a7e6:	4619      	mov	r1, r3
 801a7e8:	4770      	bx	lr
 801a7ea:	425b      	negs	r3, r3
 801a7ec:	151b      	asrs	r3, r3, #20
 801a7ee:	2b13      	cmp	r3, #19
 801a7f0:	f04f 0000 	mov.w	r0, #0
 801a7f4:	f04f 0100 	mov.w	r1, #0
 801a7f8:	dc04      	bgt.n	801a804 <__ulp+0x2c>
 801a7fa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801a7fe:	fa42 f103 	asr.w	r1, r2, r3
 801a802:	4770      	bx	lr
 801a804:	2b32      	cmp	r3, #50	; 0x32
 801a806:	f04f 0201 	mov.w	r2, #1
 801a80a:	bfda      	itte	le
 801a80c:	f1c3 0333 	rsble	r3, r3, #51	; 0x33
 801a810:	fa02 f303 	lslle.w	r3, r2, r3
 801a814:	4613      	movgt	r3, r2
 801a816:	4618      	mov	r0, r3
 801a818:	4770      	bx	lr
 801a81a:	bf00      	nop
 801a81c:	7ff00000 	.word	0x7ff00000

0801a820 <__b2d>:
 801a820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a824:	6905      	ldr	r5, [r0, #16]
 801a826:	f100 0714 	add.w	r7, r0, #20
 801a82a:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801a82e:	4688      	mov	r8, r1
 801a830:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801a834:	4620      	mov	r0, r4
 801a836:	f7ff fdcc 	bl	801a3d2 <__hi0bits>
 801a83a:	f1c0 0320 	rsb	r3, r0, #32
 801a83e:	280a      	cmp	r0, #10
 801a840:	f1a5 0604 	sub.w	r6, r5, #4
 801a844:	f8c8 3000 	str.w	r3, [r8]
 801a848:	dc11      	bgt.n	801a86e <__b2d+0x4e>
 801a84a:	f1c0 0e0b 	rsb	lr, r0, #11
 801a84e:	fa24 f10e 	lsr.w	r1, r4, lr
 801a852:	42be      	cmp	r6, r7
 801a854:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 801a858:	bf8c      	ite	hi
 801a85a:	f855 1c08 	ldrhi.w	r1, [r5, #-8]
 801a85e:	2100      	movls	r1, #0
 801a860:	3015      	adds	r0, #21
 801a862:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801a866:	fa21 f10e 	lsr.w	r1, r1, lr
 801a86a:	4084      	lsls	r4, r0
 801a86c:	e01b      	b.n	801a8a6 <__b2d+0x86>
 801a86e:	42be      	cmp	r6, r7
 801a870:	bf86      	itte	hi
 801a872:	f1a5 0608 	subhi.w	r6, r5, #8
 801a876:	f855 1c08 	ldrhi.w	r1, [r5, #-8]
 801a87a:	2100      	movls	r1, #0
 801a87c:	f1b0 050b 	subs.w	r5, r0, #11
 801a880:	d014      	beq.n	801a8ac <__b2d+0x8c>
 801a882:	40ac      	lsls	r4, r5
 801a884:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
 801a888:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 801a88c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 801a890:	fa21 fe00 	lsr.w	lr, r1, r0
 801a894:	42be      	cmp	r6, r7
 801a896:	ea44 030e 	orr.w	r3, r4, lr
 801a89a:	bf8c      	ite	hi
 801a89c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801a8a0:	2400      	movls	r4, #0
 801a8a2:	40c4      	lsrs	r4, r0
 801a8a4:	40a9      	lsls	r1, r5
 801a8a6:	ea44 0201 	orr.w	r2, r4, r1
 801a8aa:	e004      	b.n	801a8b6 <__b2d+0x96>
 801a8ac:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801a8b0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801a8b4:	460a      	mov	r2, r1
 801a8b6:	4610      	mov	r0, r2
 801a8b8:	4619      	mov	r1, r3
 801a8ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a8be <__d2b>:
 801a8be:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801a8c2:	2101      	movs	r1, #1
 801a8c4:	461d      	mov	r5, r3
 801a8c6:	9f08      	ldr	r7, [sp, #32]
 801a8c8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801a8ca:	4614      	mov	r4, r2
 801a8cc:	f7ff fcb7 	bl	801a23e <_Balloc>
 801a8d0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 801a8d4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 801a8d8:	4680      	mov	r8, r0
 801a8da:	b10d      	cbz	r5, 801a8e0 <__d2b+0x22>
 801a8dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801a8e0:	9301      	str	r3, [sp, #4]
 801a8e2:	b1ec      	cbz	r4, 801a920 <__d2b+0x62>
 801a8e4:	a802      	add	r0, sp, #8
 801a8e6:	f840 4d08 	str.w	r4, [r0, #-8]!
 801a8ea:	f7ff fd92 	bl	801a412 <__lo0bits>
 801a8ee:	9b00      	ldr	r3, [sp, #0]
 801a8f0:	b150      	cbz	r0, 801a908 <__d2b+0x4a>
 801a8f2:	9a01      	ldr	r2, [sp, #4]
 801a8f4:	f1c0 0120 	rsb	r1, r0, #32
 801a8f8:	fa02 f101 	lsl.w	r1, r2, r1
 801a8fc:	430b      	orrs	r3, r1
 801a8fe:	40c2      	lsrs	r2, r0
 801a900:	f8c8 3014 	str.w	r3, [r8, #20]
 801a904:	9201      	str	r2, [sp, #4]
 801a906:	e001      	b.n	801a90c <__d2b+0x4e>
 801a908:	f8c8 3014 	str.w	r3, [r8, #20]
 801a90c:	9b01      	ldr	r3, [sp, #4]
 801a90e:	f8c8 3018 	str.w	r3, [r8, #24]
 801a912:	2b00      	cmp	r3, #0
 801a914:	bf14      	ite	ne
 801a916:	2402      	movne	r4, #2
 801a918:	2401      	moveq	r4, #1
 801a91a:	f8c8 4010 	str.w	r4, [r8, #16]
 801a91e:	e009      	b.n	801a934 <__d2b+0x76>
 801a920:	a801      	add	r0, sp, #4
 801a922:	f7ff fd76 	bl	801a412 <__lo0bits>
 801a926:	2401      	movs	r4, #1
 801a928:	9b01      	ldr	r3, [sp, #4]
 801a92a:	f8c8 3014 	str.w	r3, [r8, #20]
 801a92e:	f8c8 4010 	str.w	r4, [r8, #16]
 801a932:	3020      	adds	r0, #32
 801a934:	b135      	cbz	r5, 801a944 <__d2b+0x86>
 801a936:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801a93a:	4405      	add	r5, r0
 801a93c:	603d      	str	r5, [r7, #0]
 801a93e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801a942:	e009      	b.n	801a958 <__d2b+0x9a>
 801a944:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 801a948:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801a94c:	6038      	str	r0, [r7, #0]
 801a94e:	6918      	ldr	r0, [r3, #16]
 801a950:	f7ff fd3f 	bl	801a3d2 <__hi0bits>
 801a954:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 801a958:	6030      	str	r0, [r6, #0]
 801a95a:	4640      	mov	r0, r8
 801a95c:	b002      	add	sp, #8
 801a95e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a962 <__ratio>:
 801a962:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a966:	4688      	mov	r8, r1
 801a968:	4669      	mov	r1, sp
 801a96a:	4681      	mov	r9, r0
 801a96c:	f7ff ff58 	bl	801a820 <__b2d>
 801a970:	460f      	mov	r7, r1
 801a972:	4606      	mov	r6, r0
 801a974:	a901      	add	r1, sp, #4
 801a976:	4640      	mov	r0, r8
 801a978:	f7ff ff52 	bl	801a820 <__b2d>
 801a97c:	9a01      	ldr	r2, [sp, #4]
 801a97e:	9b00      	ldr	r3, [sp, #0]
 801a980:	460d      	mov	r5, r1
 801a982:	1a9b      	subs	r3, r3, r2
 801a984:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801a988:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801a98c:	1a52      	subs	r2, r2, r1
 801a98e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801a992:	2b00      	cmp	r3, #0
 801a994:	bfc8      	it	gt
 801a996:	eb07 5703 	addgt.w	r7, r7, r3, lsl #20
 801a99a:	4604      	mov	r4, r0
 801a99c:	bfd8      	it	le
 801a99e:	eba5 5503 	suble.w	r5, r5, r3, lsl #20
 801a9a2:	4630      	mov	r0, r6
 801a9a4:	4639      	mov	r1, r7
 801a9a6:	4622      	mov	r2, r4
 801a9a8:	462b      	mov	r3, r5
 801a9aa:	f000 fcd1 	bl	801b350 <__aeabi_ddiv>
 801a9ae:	b003      	add	sp, #12
 801a9b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801a9b4 <__copybits>:
 801a9b4:	3901      	subs	r1, #1
 801a9b6:	b510      	push	{r4, lr}
 801a9b8:	1149      	asrs	r1, r1, #5
 801a9ba:	6914      	ldr	r4, [r2, #16]
 801a9bc:	3101      	adds	r1, #1
 801a9be:	f102 0314 	add.w	r3, r2, #20
 801a9c2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801a9c6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801a9ca:	42a3      	cmp	r3, r4
 801a9cc:	4602      	mov	r2, r0
 801a9ce:	d204      	bcs.n	801a9da <__copybits+0x26>
 801a9d0:	f853 2b04 	ldr.w	r2, [r3], #4
 801a9d4:	f840 2b04 	str.w	r2, [r0], #4
 801a9d8:	e7f7      	b.n	801a9ca <__copybits+0x16>
 801a9da:	428a      	cmp	r2, r1
 801a9dc:	d203      	bcs.n	801a9e6 <__copybits+0x32>
 801a9de:	2300      	movs	r3, #0
 801a9e0:	f842 3b04 	str.w	r3, [r2], #4
 801a9e4:	e7f9      	b.n	801a9da <__copybits+0x26>
 801a9e6:	bd10      	pop	{r4, pc}

0801a9e8 <__any_on>:
 801a9e8:	f100 0214 	add.w	r2, r0, #20
 801a9ec:	6900      	ldr	r0, [r0, #16]
 801a9ee:	114b      	asrs	r3, r1, #5
 801a9f0:	4283      	cmp	r3, r0
 801a9f2:	b510      	push	{r4, lr}
 801a9f4:	dc0c      	bgt.n	801aa10 <__any_on+0x28>
 801a9f6:	da0c      	bge.n	801aa12 <__any_on+0x2a>
 801a9f8:	f011 011f 	ands.w	r1, r1, #31
 801a9fc:	d009      	beq.n	801aa12 <__any_on+0x2a>
 801a9fe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801aa02:	fa24 f001 	lsr.w	r0, r4, r1
 801aa06:	fa00 f101 	lsl.w	r1, r0, r1
 801aa0a:	42a1      	cmp	r1, r4
 801aa0c:	d10c      	bne.n	801aa28 <__any_on+0x40>
 801aa0e:	e000      	b.n	801aa12 <__any_on+0x2a>
 801aa10:	4603      	mov	r3, r0
 801aa12:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801aa16:	4293      	cmp	r3, r2
 801aa18:	d904      	bls.n	801aa24 <__any_on+0x3c>
 801aa1a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801aa1e:	2900      	cmp	r1, #0
 801aa20:	d0f9      	beq.n	801aa16 <__any_on+0x2e>
 801aa22:	e001      	b.n	801aa28 <__any_on+0x40>
 801aa24:	2000      	movs	r0, #0
 801aa26:	bd10      	pop	{r4, pc}
 801aa28:	2001      	movs	r0, #1
 801aa2a:	bd10      	pop	{r4, pc}

0801aa2c <_realloc_r>:
 801aa2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aa2e:	4607      	mov	r7, r0
 801aa30:	4615      	mov	r5, r2
 801aa32:	460e      	mov	r6, r1
 801aa34:	b921      	cbnz	r1, 801aa40 <_realloc_r+0x14>
 801aa36:	4611      	mov	r1, r2
 801aa38:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801aa3c:	f7fc b94e 	b.w	8016cdc <_malloc_r>
 801aa40:	b91a      	cbnz	r2, 801aa4a <_realloc_r+0x1e>
 801aa42:	f7fc f907 	bl	8016c54 <_free_r>
 801aa46:	4628      	mov	r0, r5
 801aa48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aa4a:	f000 f995 	bl	801ad78 <_malloc_usable_size_r>
 801aa4e:	42a8      	cmp	r0, r5
 801aa50:	d20e      	bcs.n	801aa70 <_realloc_r+0x44>
 801aa52:	4638      	mov	r0, r7
 801aa54:	4629      	mov	r1, r5
 801aa56:	f7fc f941 	bl	8016cdc <_malloc_r>
 801aa5a:	4604      	mov	r4, r0
 801aa5c:	b150      	cbz	r0, 801aa74 <_realloc_r+0x48>
 801aa5e:	4631      	mov	r1, r6
 801aa60:	462a      	mov	r2, r5
 801aa62:	f7fc f8d6 	bl	8016c12 <memcpy>
 801aa66:	4638      	mov	r0, r7
 801aa68:	4631      	mov	r1, r6
 801aa6a:	f7fc f8f3 	bl	8016c54 <_free_r>
 801aa6e:	e001      	b.n	801aa74 <_realloc_r+0x48>
 801aa70:	4630      	mov	r0, r6
 801aa72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aa74:	4620      	mov	r0, r4
 801aa76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801aa78 <__ssputs_r>:
 801aa78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aa7c:	688e      	ldr	r6, [r1, #8]
 801aa7e:	42b3      	cmp	r3, r6
 801aa80:	4682      	mov	sl, r0
 801aa82:	460c      	mov	r4, r1
 801aa84:	4690      	mov	r8, r2
 801aa86:	4699      	mov	r9, r3
 801aa88:	d340      	bcc.n	801ab0c <__ssputs_r+0x94>
 801aa8a:	898a      	ldrh	r2, [r1, #12]
 801aa8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801aa90:	d03a      	beq.n	801ab08 <__ssputs_r+0x90>
 801aa92:	6825      	ldr	r5, [r4, #0]
 801aa94:	6909      	ldr	r1, [r1, #16]
 801aa96:	1a6f      	subs	r7, r5, r1
 801aa98:	6965      	ldr	r5, [r4, #20]
 801aa9a:	2302      	movs	r3, #2
 801aa9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801aaa0:	fb95 f5f3 	sdiv	r5, r5, r3
 801aaa4:	1c7b      	adds	r3, r7, #1
 801aaa6:	444b      	add	r3, r9
 801aaa8:	429d      	cmp	r5, r3
 801aaaa:	bf38      	it	cc
 801aaac:	461d      	movcc	r5, r3
 801aaae:	0553      	lsls	r3, r2, #21
 801aab0:	d50f      	bpl.n	801aad2 <__ssputs_r+0x5a>
 801aab2:	4629      	mov	r1, r5
 801aab4:	f7fc f912 	bl	8016cdc <_malloc_r>
 801aab8:	4606      	mov	r6, r0
 801aaba:	b198      	cbz	r0, 801aae4 <__ssputs_r+0x6c>
 801aabc:	6921      	ldr	r1, [r4, #16]
 801aabe:	463a      	mov	r2, r7
 801aac0:	f7fc f8a7 	bl	8016c12 <memcpy>
 801aac4:	89a3      	ldrh	r3, [r4, #12]
 801aac6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801aaca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801aace:	81a3      	strh	r3, [r4, #12]
 801aad0:	e013      	b.n	801aafa <__ssputs_r+0x82>
 801aad2:	462a      	mov	r2, r5
 801aad4:	f7ff ffaa 	bl	801aa2c <_realloc_r>
 801aad8:	4606      	mov	r6, r0
 801aada:	b970      	cbnz	r0, 801aafa <__ssputs_r+0x82>
 801aadc:	4650      	mov	r0, sl
 801aade:	6921      	ldr	r1, [r4, #16]
 801aae0:	f7fc f8b8 	bl	8016c54 <_free_r>
 801aae4:	230c      	movs	r3, #12
 801aae6:	f8ca 3000 	str.w	r3, [sl]
 801aaea:	89a3      	ldrh	r3, [r4, #12]
 801aaec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801aaf0:	81a3      	strh	r3, [r4, #12]
 801aaf2:	f04f 30ff 	mov.w	r0, #4294967295
 801aaf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aafa:	6126      	str	r6, [r4, #16]
 801aafc:	6165      	str	r5, [r4, #20]
 801aafe:	443e      	add	r6, r7
 801ab00:	1bed      	subs	r5, r5, r7
 801ab02:	6026      	str	r6, [r4, #0]
 801ab04:	60a5      	str	r5, [r4, #8]
 801ab06:	464e      	mov	r6, r9
 801ab08:	45b1      	cmp	r9, r6
 801ab0a:	d200      	bcs.n	801ab0e <__ssputs_r+0x96>
 801ab0c:	464e      	mov	r6, r9
 801ab0e:	4632      	mov	r2, r6
 801ab10:	6820      	ldr	r0, [r4, #0]
 801ab12:	4641      	mov	r1, r8
 801ab14:	f7ff fb78 	bl	801a208 <memmove>
 801ab18:	68a3      	ldr	r3, [r4, #8]
 801ab1a:	1b9b      	subs	r3, r3, r6
 801ab1c:	60a3      	str	r3, [r4, #8]
 801ab1e:	6823      	ldr	r3, [r4, #0]
 801ab20:	441e      	add	r6, r3
 801ab22:	6026      	str	r6, [r4, #0]
 801ab24:	2000      	movs	r0, #0
 801ab26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801ab2c <_svfiprintf_r>:
 801ab2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ab30:	b09d      	sub	sp, #116	; 0x74
 801ab32:	4606      	mov	r6, r0
 801ab34:	9303      	str	r3, [sp, #12]
 801ab36:	898b      	ldrh	r3, [r1, #12]
 801ab38:	061c      	lsls	r4, r3, #24
 801ab3a:	460d      	mov	r5, r1
 801ab3c:	4690      	mov	r8, r2
 801ab3e:	d50c      	bpl.n	801ab5a <_svfiprintf_r+0x2e>
 801ab40:	690b      	ldr	r3, [r1, #16]
 801ab42:	b953      	cbnz	r3, 801ab5a <_svfiprintf_r+0x2e>
 801ab44:	2140      	movs	r1, #64	; 0x40
 801ab46:	f7fc f8c9 	bl	8016cdc <_malloc_r>
 801ab4a:	6028      	str	r0, [r5, #0]
 801ab4c:	6128      	str	r0, [r5, #16]
 801ab4e:	b910      	cbnz	r0, 801ab56 <_svfiprintf_r+0x2a>
 801ab50:	230c      	movs	r3, #12
 801ab52:	6033      	str	r3, [r6, #0]
 801ab54:	e0cc      	b.n	801acf0 <_svfiprintf_r+0x1c4>
 801ab56:	2340      	movs	r3, #64	; 0x40
 801ab58:	616b      	str	r3, [r5, #20]
 801ab5a:	2300      	movs	r3, #0
 801ab5c:	9309      	str	r3, [sp, #36]	; 0x24
 801ab5e:	2320      	movs	r3, #32
 801ab60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ab64:	2330      	movs	r3, #48	; 0x30
 801ab66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ab6a:	4643      	mov	r3, r8
 801ab6c:	461c      	mov	r4, r3
 801ab6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ab72:	b91a      	cbnz	r2, 801ab7c <_svfiprintf_r+0x50>
 801ab74:	ebb4 0908 	subs.w	r9, r4, r8
 801ab78:	d00f      	beq.n	801ab9a <_svfiprintf_r+0x6e>
 801ab7a:	e002      	b.n	801ab82 <_svfiprintf_r+0x56>
 801ab7c:	2a25      	cmp	r2, #37	; 0x25
 801ab7e:	d1f5      	bne.n	801ab6c <_svfiprintf_r+0x40>
 801ab80:	e7f8      	b.n	801ab74 <_svfiprintf_r+0x48>
 801ab82:	4630      	mov	r0, r6
 801ab84:	4629      	mov	r1, r5
 801ab86:	4642      	mov	r2, r8
 801ab88:	464b      	mov	r3, r9
 801ab8a:	f7ff ff75 	bl	801aa78 <__ssputs_r>
 801ab8e:	3001      	adds	r0, #1
 801ab90:	f000 80a9 	beq.w	801ace6 <_svfiprintf_r+0x1ba>
 801ab94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ab96:	444b      	add	r3, r9
 801ab98:	9309      	str	r3, [sp, #36]	; 0x24
 801ab9a:	7823      	ldrb	r3, [r4, #0]
 801ab9c:	2b00      	cmp	r3, #0
 801ab9e:	f000 80a2 	beq.w	801ace6 <_svfiprintf_r+0x1ba>
 801aba2:	2300      	movs	r3, #0
 801aba4:	f04f 32ff 	mov.w	r2, #4294967295
 801aba8:	9304      	str	r3, [sp, #16]
 801abaa:	9307      	str	r3, [sp, #28]
 801abac:	9205      	str	r2, [sp, #20]
 801abae:	9306      	str	r3, [sp, #24]
 801abb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801abb4:	931a      	str	r3, [sp, #104]	; 0x68
 801abb6:	f104 0801 	add.w	r8, r4, #1
 801abba:	4644      	mov	r4, r8
 801abbc:	f8df 9148 	ldr.w	r9, [pc, #328]	; 801ad08 <_svfiprintf_r+0x1dc>
 801abc0:	7821      	ldrb	r1, [r4, #0]
 801abc2:	4648      	mov	r0, r9
 801abc4:	2205      	movs	r2, #5
 801abc6:	f7fc f815 	bl	8016bf4 <memchr>
 801abca:	f108 0801 	add.w	r8, r8, #1
 801abce:	9b04      	ldr	r3, [sp, #16]
 801abd0:	b130      	cbz	r0, 801abe0 <_svfiprintf_r+0xb4>
 801abd2:	ebc9 0000 	rsb	r0, r9, r0
 801abd6:	2201      	movs	r2, #1
 801abd8:	4082      	lsls	r2, r0
 801abda:	4313      	orrs	r3, r2
 801abdc:	9304      	str	r3, [sp, #16]
 801abde:	e7ec      	b.n	801abba <_svfiprintf_r+0x8e>
 801abe0:	06d8      	lsls	r0, r3, #27
 801abe2:	bf44      	itt	mi
 801abe4:	2220      	movmi	r2, #32
 801abe6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801abea:	0719      	lsls	r1, r3, #28
 801abec:	bf44      	itt	mi
 801abee:	222b      	movmi	r2, #43	; 0x2b
 801abf0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801abf4:	7822      	ldrb	r2, [r4, #0]
 801abf6:	2a2a      	cmp	r2, #42	; 0x2a
 801abf8:	d002      	beq.n	801ac00 <_svfiprintf_r+0xd4>
 801abfa:	9907      	ldr	r1, [sp, #28]
 801abfc:	4623      	mov	r3, r4
 801abfe:	e00e      	b.n	801ac1e <_svfiprintf_r+0xf2>
 801ac00:	9a03      	ldr	r2, [sp, #12]
 801ac02:	1d11      	adds	r1, r2, #4
 801ac04:	6812      	ldr	r2, [r2, #0]
 801ac06:	9103      	str	r1, [sp, #12]
 801ac08:	2a00      	cmp	r2, #0
 801ac0a:	bfbb      	ittet	lt
 801ac0c:	4252      	neglt	r2, r2
 801ac0e:	f043 0302 	orrlt.w	r3, r3, #2
 801ac12:	9207      	strge	r2, [sp, #28]
 801ac14:	9207      	strlt	r2, [sp, #28]
 801ac16:	bfb8      	it	lt
 801ac18:	9304      	strlt	r3, [sp, #16]
 801ac1a:	3401      	adds	r4, #1
 801ac1c:	e00a      	b.n	801ac34 <_svfiprintf_r+0x108>
 801ac1e:	461c      	mov	r4, r3
 801ac20:	3301      	adds	r3, #1
 801ac22:	7822      	ldrb	r2, [r4, #0]
 801ac24:	3a30      	subs	r2, #48	; 0x30
 801ac26:	2a09      	cmp	r2, #9
 801ac28:	d803      	bhi.n	801ac32 <_svfiprintf_r+0x106>
 801ac2a:	200a      	movs	r0, #10
 801ac2c:	fb00 2101 	mla	r1, r0, r1, r2
 801ac30:	e7f5      	b.n	801ac1e <_svfiprintf_r+0xf2>
 801ac32:	9107      	str	r1, [sp, #28]
 801ac34:	7823      	ldrb	r3, [r4, #0]
 801ac36:	2b2e      	cmp	r3, #46	; 0x2e
 801ac38:	d11a      	bne.n	801ac70 <_svfiprintf_r+0x144>
 801ac3a:	7863      	ldrb	r3, [r4, #1]
 801ac3c:	2b2a      	cmp	r3, #42	; 0x2a
 801ac3e:	d10a      	bne.n	801ac56 <_svfiprintf_r+0x12a>
 801ac40:	9b03      	ldr	r3, [sp, #12]
 801ac42:	1d1a      	adds	r2, r3, #4
 801ac44:	681b      	ldr	r3, [r3, #0]
 801ac46:	9203      	str	r2, [sp, #12]
 801ac48:	2b00      	cmp	r3, #0
 801ac4a:	bfb8      	it	lt
 801ac4c:	f04f 33ff 	movlt.w	r3, #4294967295
 801ac50:	3402      	adds	r4, #2
 801ac52:	9305      	str	r3, [sp, #20]
 801ac54:	e00c      	b.n	801ac70 <_svfiprintf_r+0x144>
 801ac56:	1c61      	adds	r1, r4, #1
 801ac58:	2200      	movs	r2, #0
 801ac5a:	460c      	mov	r4, r1
 801ac5c:	3101      	adds	r1, #1
 801ac5e:	7823      	ldrb	r3, [r4, #0]
 801ac60:	3b30      	subs	r3, #48	; 0x30
 801ac62:	2b09      	cmp	r3, #9
 801ac64:	d803      	bhi.n	801ac6e <_svfiprintf_r+0x142>
 801ac66:	200a      	movs	r0, #10
 801ac68:	fb00 3202 	mla	r2, r0, r2, r3
 801ac6c:	e7f5      	b.n	801ac5a <_svfiprintf_r+0x12e>
 801ac6e:	9205      	str	r2, [sp, #20]
 801ac70:	f8df 8098 	ldr.w	r8, [pc, #152]	; 801ad0c <_svfiprintf_r+0x1e0>
 801ac74:	7821      	ldrb	r1, [r4, #0]
 801ac76:	4640      	mov	r0, r8
 801ac78:	2203      	movs	r2, #3
 801ac7a:	f7fb ffbb 	bl	8016bf4 <memchr>
 801ac7e:	b138      	cbz	r0, 801ac90 <_svfiprintf_r+0x164>
 801ac80:	9a04      	ldr	r2, [sp, #16]
 801ac82:	ebc8 0000 	rsb	r0, r8, r0
 801ac86:	2340      	movs	r3, #64	; 0x40
 801ac88:	4083      	lsls	r3, r0
 801ac8a:	4313      	orrs	r3, r2
 801ac8c:	9304      	str	r3, [sp, #16]
 801ac8e:	3401      	adds	r4, #1
 801ac90:	7821      	ldrb	r1, [r4, #0]
 801ac92:	481a      	ldr	r0, [pc, #104]	; (801acfc <_svfiprintf_r+0x1d0>)
 801ac94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ac98:	2206      	movs	r2, #6
 801ac9a:	f104 0801 	add.w	r8, r4, #1
 801ac9e:	f7fb ffa9 	bl	8016bf4 <memchr>
 801aca2:	b188      	cbz	r0, 801acc8 <_svfiprintf_r+0x19c>
 801aca4:	4b16      	ldr	r3, [pc, #88]	; (801ad00 <_svfiprintf_r+0x1d4>)
 801aca6:	b933      	cbnz	r3, 801acb6 <_svfiprintf_r+0x18a>
 801aca8:	9b03      	ldr	r3, [sp, #12]
 801acaa:	3307      	adds	r3, #7
 801acac:	f023 0307 	bic.w	r3, r3, #7
 801acb0:	3308      	adds	r3, #8
 801acb2:	9303      	str	r3, [sp, #12]
 801acb4:	e013      	b.n	801acde <_svfiprintf_r+0x1b2>
 801acb6:	ab03      	add	r3, sp, #12
 801acb8:	9300      	str	r3, [sp, #0]
 801acba:	4630      	mov	r0, r6
 801acbc:	a904      	add	r1, sp, #16
 801acbe:	462a      	mov	r2, r5
 801acc0:	4b10      	ldr	r3, [pc, #64]	; (801ad04 <_svfiprintf_r+0x1d8>)
 801acc2:	f7fc fa2f 	bl	8017124 <_printf_float>
 801acc6:	e007      	b.n	801acd8 <_svfiprintf_r+0x1ac>
 801acc8:	ab03      	add	r3, sp, #12
 801acca:	9300      	str	r3, [sp, #0]
 801accc:	4630      	mov	r0, r6
 801acce:	a904      	add	r1, sp, #16
 801acd0:	462a      	mov	r2, r5
 801acd2:	4b0c      	ldr	r3, [pc, #48]	; (801ad04 <_svfiprintf_r+0x1d8>)
 801acd4:	f7fc fce2 	bl	801769c <_printf_i>
 801acd8:	1c42      	adds	r2, r0, #1
 801acda:	4607      	mov	r7, r0
 801acdc:	d003      	beq.n	801ace6 <_svfiprintf_r+0x1ba>
 801acde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ace0:	443b      	add	r3, r7
 801ace2:	9309      	str	r3, [sp, #36]	; 0x24
 801ace4:	e741      	b.n	801ab6a <_svfiprintf_r+0x3e>
 801ace6:	89ab      	ldrh	r3, [r5, #12]
 801ace8:	065b      	lsls	r3, r3, #25
 801acea:	d401      	bmi.n	801acf0 <_svfiprintf_r+0x1c4>
 801acec:	9809      	ldr	r0, [sp, #36]	; 0x24
 801acee:	e001      	b.n	801acf4 <_svfiprintf_r+0x1c8>
 801acf0:	f04f 30ff 	mov.w	r0, #4294967295
 801acf4:	b01d      	add	sp, #116	; 0x74
 801acf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801acfa:	bf00      	nop
 801acfc:	0801d17e 	.word	0x0801d17e
 801ad00:	08017125 	.word	0x08017125
 801ad04:	0801aa79 	.word	0x0801aa79
 801ad08:	0801d174 	.word	0x0801d174
 801ad0c:	0801d17a 	.word	0x0801d17a

0801ad10 <_read_r>:
 801ad10:	b538      	push	{r3, r4, r5, lr}
 801ad12:	4c07      	ldr	r4, [pc, #28]	; (801ad30 <_read_r+0x20>)
 801ad14:	4605      	mov	r5, r0
 801ad16:	2000      	movs	r0, #0
 801ad18:	6020      	str	r0, [r4, #0]
 801ad1a:	4608      	mov	r0, r1
 801ad1c:	4611      	mov	r1, r2
 801ad1e:	461a      	mov	r2, r3
 801ad20:	f7f9 fc24 	bl	801456c <_read>
 801ad24:	1c43      	adds	r3, r0, #1
 801ad26:	d102      	bne.n	801ad2e <_read_r+0x1e>
 801ad28:	6823      	ldr	r3, [r4, #0]
 801ad2a:	b103      	cbz	r3, 801ad2e <_read_r+0x1e>
 801ad2c:	602b      	str	r3, [r5, #0]
 801ad2e:	bd38      	pop	{r3, r4, r5, pc}
 801ad30:	20001c18 	.word	0x20001c18

0801ad34 <_fstat_r>:
 801ad34:	b538      	push	{r3, r4, r5, lr}
 801ad36:	4c07      	ldr	r4, [pc, #28]	; (801ad54 <_fstat_r+0x20>)
 801ad38:	2300      	movs	r3, #0
 801ad3a:	4605      	mov	r5, r0
 801ad3c:	4608      	mov	r0, r1
 801ad3e:	4611      	mov	r1, r2
 801ad40:	6023      	str	r3, [r4, #0]
 801ad42:	f7f9 fc95 	bl	8014670 <_fstat>
 801ad46:	1c43      	adds	r3, r0, #1
 801ad48:	d102      	bne.n	801ad50 <_fstat_r+0x1c>
 801ad4a:	6823      	ldr	r3, [r4, #0]
 801ad4c:	b103      	cbz	r3, 801ad50 <_fstat_r+0x1c>
 801ad4e:	602b      	str	r3, [r5, #0]
 801ad50:	bd38      	pop	{r3, r4, r5, pc}
 801ad52:	bf00      	nop
 801ad54:	20001c18 	.word	0x20001c18

0801ad58 <_isatty_r>:
 801ad58:	b538      	push	{r3, r4, r5, lr}
 801ad5a:	4c06      	ldr	r4, [pc, #24]	; (801ad74 <_isatty_r+0x1c>)
 801ad5c:	2300      	movs	r3, #0
 801ad5e:	4605      	mov	r5, r0
 801ad60:	4608      	mov	r0, r1
 801ad62:	6023      	str	r3, [r4, #0]
 801ad64:	f7f9 fc3c 	bl	80145e0 <_isatty>
 801ad68:	1c43      	adds	r3, r0, #1
 801ad6a:	d102      	bne.n	801ad72 <_isatty_r+0x1a>
 801ad6c:	6823      	ldr	r3, [r4, #0]
 801ad6e:	b103      	cbz	r3, 801ad72 <_isatty_r+0x1a>
 801ad70:	602b      	str	r3, [r5, #0]
 801ad72:	bd38      	pop	{r3, r4, r5, pc}
 801ad74:	20001c18 	.word	0x20001c18

0801ad78 <_malloc_usable_size_r>:
 801ad78:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801ad7c:	2800      	cmp	r0, #0
 801ad7e:	bfbe      	ittt	lt
 801ad80:	1809      	addlt	r1, r1, r0
 801ad82:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 801ad86:	18c0      	addlt	r0, r0, r3
 801ad88:	3804      	subs	r0, #4
 801ad8a:	4770      	bx	lr

0801ad8c <__aeabi_drsub>:
 801ad8c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 801ad90:	e002      	b.n	801ad98 <__adddf3>
 801ad92:	bf00      	nop

0801ad94 <__aeabi_dsub>:
 801ad94:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0801ad98 <__adddf3>:
 801ad98:	b530      	push	{r4, r5, lr}
 801ad9a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 801ad9e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 801ada2:	ea94 0f05 	teq	r4, r5
 801ada6:	bf08      	it	eq
 801ada8:	ea90 0f02 	teqeq	r0, r2
 801adac:	bf1f      	itttt	ne
 801adae:	ea54 0c00 	orrsne.w	ip, r4, r0
 801adb2:	ea55 0c02 	orrsne.w	ip, r5, r2
 801adb6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 801adba:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 801adbe:	f000 80e2 	beq.w	801af86 <__adddf3+0x1ee>
 801adc2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 801adc6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 801adca:	bfb8      	it	lt
 801adcc:	426d      	neglt	r5, r5
 801adce:	dd0c      	ble.n	801adea <__adddf3+0x52>
 801add0:	442c      	add	r4, r5
 801add2:	ea80 0202 	eor.w	r2, r0, r2
 801add6:	ea81 0303 	eor.w	r3, r1, r3
 801adda:	ea82 0000 	eor.w	r0, r2, r0
 801adde:	ea83 0101 	eor.w	r1, r3, r1
 801ade2:	ea80 0202 	eor.w	r2, r0, r2
 801ade6:	ea81 0303 	eor.w	r3, r1, r3
 801adea:	2d36      	cmp	r5, #54	; 0x36
 801adec:	bf88      	it	hi
 801adee:	bd30      	pophi	{r4, r5, pc}
 801adf0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 801adf4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801adf8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 801adfc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 801ae00:	d002      	beq.n	801ae08 <__adddf3+0x70>
 801ae02:	4240      	negs	r0, r0
 801ae04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801ae08:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 801ae0c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 801ae10:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 801ae14:	d002      	beq.n	801ae1c <__adddf3+0x84>
 801ae16:	4252      	negs	r2, r2
 801ae18:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 801ae1c:	ea94 0f05 	teq	r4, r5
 801ae20:	f000 80a7 	beq.w	801af72 <__adddf3+0x1da>
 801ae24:	f1a4 0401 	sub.w	r4, r4, #1
 801ae28:	f1d5 0e20 	rsbs	lr, r5, #32
 801ae2c:	db0d      	blt.n	801ae4a <__adddf3+0xb2>
 801ae2e:	fa02 fc0e 	lsl.w	ip, r2, lr
 801ae32:	fa22 f205 	lsr.w	r2, r2, r5
 801ae36:	1880      	adds	r0, r0, r2
 801ae38:	f141 0100 	adc.w	r1, r1, #0
 801ae3c:	fa03 f20e 	lsl.w	r2, r3, lr
 801ae40:	1880      	adds	r0, r0, r2
 801ae42:	fa43 f305 	asr.w	r3, r3, r5
 801ae46:	4159      	adcs	r1, r3
 801ae48:	e00e      	b.n	801ae68 <__adddf3+0xd0>
 801ae4a:	f1a5 0520 	sub.w	r5, r5, #32
 801ae4e:	f10e 0e20 	add.w	lr, lr, #32
 801ae52:	2a01      	cmp	r2, #1
 801ae54:	fa03 fc0e 	lsl.w	ip, r3, lr
 801ae58:	bf28      	it	cs
 801ae5a:	f04c 0c02 	orrcs.w	ip, ip, #2
 801ae5e:	fa43 f305 	asr.w	r3, r3, r5
 801ae62:	18c0      	adds	r0, r0, r3
 801ae64:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 801ae68:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 801ae6c:	d507      	bpl.n	801ae7e <__adddf3+0xe6>
 801ae6e:	f04f 0e00 	mov.w	lr, #0
 801ae72:	f1dc 0c00 	rsbs	ip, ip, #0
 801ae76:	eb7e 0000 	sbcs.w	r0, lr, r0
 801ae7a:	eb6e 0101 	sbc.w	r1, lr, r1
 801ae7e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 801ae82:	d31b      	bcc.n	801aebc <__adddf3+0x124>
 801ae84:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 801ae88:	d30c      	bcc.n	801aea4 <__adddf3+0x10c>
 801ae8a:	0849      	lsrs	r1, r1, #1
 801ae8c:	ea5f 0030 	movs.w	r0, r0, rrx
 801ae90:	ea4f 0c3c 	mov.w	ip, ip, rrx
 801ae94:	f104 0401 	add.w	r4, r4, #1
 801ae98:	ea4f 5244 	mov.w	r2, r4, lsl #21
 801ae9c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 801aea0:	f080 809a 	bcs.w	801afd8 <__adddf3+0x240>
 801aea4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 801aea8:	bf08      	it	eq
 801aeaa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 801aeae:	f150 0000 	adcs.w	r0, r0, #0
 801aeb2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 801aeb6:	ea41 0105 	orr.w	r1, r1, r5
 801aeba:	bd30      	pop	{r4, r5, pc}
 801aebc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 801aec0:	4140      	adcs	r0, r0
 801aec2:	eb41 0101 	adc.w	r1, r1, r1
 801aec6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 801aeca:	f1a4 0401 	sub.w	r4, r4, #1
 801aece:	d1e9      	bne.n	801aea4 <__adddf3+0x10c>
 801aed0:	f091 0f00 	teq	r1, #0
 801aed4:	bf04      	itt	eq
 801aed6:	4601      	moveq	r1, r0
 801aed8:	2000      	moveq	r0, #0
 801aeda:	fab1 f381 	clz	r3, r1
 801aede:	bf08      	it	eq
 801aee0:	3320      	addeq	r3, #32
 801aee2:	f1a3 030b 	sub.w	r3, r3, #11
 801aee6:	f1b3 0220 	subs.w	r2, r3, #32
 801aeea:	da0c      	bge.n	801af06 <__adddf3+0x16e>
 801aeec:	320c      	adds	r2, #12
 801aeee:	dd08      	ble.n	801af02 <__adddf3+0x16a>
 801aef0:	f102 0c14 	add.w	ip, r2, #20
 801aef4:	f1c2 020c 	rsb	r2, r2, #12
 801aef8:	fa01 f00c 	lsl.w	r0, r1, ip
 801aefc:	fa21 f102 	lsr.w	r1, r1, r2
 801af00:	e00c      	b.n	801af1c <__adddf3+0x184>
 801af02:	f102 0214 	add.w	r2, r2, #20
 801af06:	bfd8      	it	le
 801af08:	f1c2 0c20 	rsble	ip, r2, #32
 801af0c:	fa01 f102 	lsl.w	r1, r1, r2
 801af10:	fa20 fc0c 	lsr.w	ip, r0, ip
 801af14:	bfdc      	itt	le
 801af16:	ea41 010c 	orrle.w	r1, r1, ip
 801af1a:	4090      	lslle	r0, r2
 801af1c:	1ae4      	subs	r4, r4, r3
 801af1e:	bfa2      	ittt	ge
 801af20:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 801af24:	4329      	orrge	r1, r5
 801af26:	bd30      	popge	{r4, r5, pc}
 801af28:	ea6f 0404 	mvn.w	r4, r4
 801af2c:	3c1f      	subs	r4, #31
 801af2e:	da1c      	bge.n	801af6a <__adddf3+0x1d2>
 801af30:	340c      	adds	r4, #12
 801af32:	dc0e      	bgt.n	801af52 <__adddf3+0x1ba>
 801af34:	f104 0414 	add.w	r4, r4, #20
 801af38:	f1c4 0220 	rsb	r2, r4, #32
 801af3c:	fa20 f004 	lsr.w	r0, r0, r4
 801af40:	fa01 f302 	lsl.w	r3, r1, r2
 801af44:	ea40 0003 	orr.w	r0, r0, r3
 801af48:	fa21 f304 	lsr.w	r3, r1, r4
 801af4c:	ea45 0103 	orr.w	r1, r5, r3
 801af50:	bd30      	pop	{r4, r5, pc}
 801af52:	f1c4 040c 	rsb	r4, r4, #12
 801af56:	f1c4 0220 	rsb	r2, r4, #32
 801af5a:	fa20 f002 	lsr.w	r0, r0, r2
 801af5e:	fa01 f304 	lsl.w	r3, r1, r4
 801af62:	ea40 0003 	orr.w	r0, r0, r3
 801af66:	4629      	mov	r1, r5
 801af68:	bd30      	pop	{r4, r5, pc}
 801af6a:	fa21 f004 	lsr.w	r0, r1, r4
 801af6e:	4629      	mov	r1, r5
 801af70:	bd30      	pop	{r4, r5, pc}
 801af72:	f094 0f00 	teq	r4, #0
 801af76:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 801af7a:	bf06      	itte	eq
 801af7c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 801af80:	3401      	addeq	r4, #1
 801af82:	3d01      	subne	r5, #1
 801af84:	e74e      	b.n	801ae24 <__adddf3+0x8c>
 801af86:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 801af8a:	bf18      	it	ne
 801af8c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 801af90:	d029      	beq.n	801afe6 <__adddf3+0x24e>
 801af92:	ea94 0f05 	teq	r4, r5
 801af96:	bf08      	it	eq
 801af98:	ea90 0f02 	teqeq	r0, r2
 801af9c:	d005      	beq.n	801afaa <__adddf3+0x212>
 801af9e:	ea54 0c00 	orrs.w	ip, r4, r0
 801afa2:	bf04      	itt	eq
 801afa4:	4619      	moveq	r1, r3
 801afa6:	4610      	moveq	r0, r2
 801afa8:	bd30      	pop	{r4, r5, pc}
 801afaa:	ea91 0f03 	teq	r1, r3
 801afae:	bf1e      	ittt	ne
 801afb0:	2100      	movne	r1, #0
 801afb2:	2000      	movne	r0, #0
 801afb4:	bd30      	popne	{r4, r5, pc}
 801afb6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 801afba:	d105      	bne.n	801afc8 <__adddf3+0x230>
 801afbc:	0040      	lsls	r0, r0, #1
 801afbe:	4149      	adcs	r1, r1
 801afc0:	bf28      	it	cs
 801afc2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 801afc6:	bd30      	pop	{r4, r5, pc}
 801afc8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 801afcc:	bf3c      	itt	cc
 801afce:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 801afd2:	bd30      	popcc	{r4, r5, pc}
 801afd4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 801afd8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 801afdc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801afe0:	f04f 0000 	mov.w	r0, #0
 801afe4:	bd30      	pop	{r4, r5, pc}
 801afe6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 801afea:	bf1a      	itte	ne
 801afec:	4619      	movne	r1, r3
 801afee:	4610      	movne	r0, r2
 801aff0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 801aff4:	bf1c      	itt	ne
 801aff6:	460b      	movne	r3, r1
 801aff8:	4602      	movne	r2, r0
 801affa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 801affe:	bf06      	itte	eq
 801b000:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 801b004:	ea91 0f03 	teqeq	r1, r3
 801b008:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 801b00c:	bd30      	pop	{r4, r5, pc}
 801b00e:	bf00      	nop

0801b010 <__aeabi_ui2d>:
 801b010:	f090 0f00 	teq	r0, #0
 801b014:	bf04      	itt	eq
 801b016:	2100      	moveq	r1, #0
 801b018:	4770      	bxeq	lr
 801b01a:	b530      	push	{r4, r5, lr}
 801b01c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 801b020:	f104 0432 	add.w	r4, r4, #50	; 0x32
 801b024:	f04f 0500 	mov.w	r5, #0
 801b028:	f04f 0100 	mov.w	r1, #0
 801b02c:	e750      	b.n	801aed0 <__adddf3+0x138>
 801b02e:	bf00      	nop

0801b030 <__aeabi_i2d>:
 801b030:	f090 0f00 	teq	r0, #0
 801b034:	bf04      	itt	eq
 801b036:	2100      	moveq	r1, #0
 801b038:	4770      	bxeq	lr
 801b03a:	b530      	push	{r4, r5, lr}
 801b03c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 801b040:	f104 0432 	add.w	r4, r4, #50	; 0x32
 801b044:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 801b048:	bf48      	it	mi
 801b04a:	4240      	negmi	r0, r0
 801b04c:	f04f 0100 	mov.w	r1, #0
 801b050:	e73e      	b.n	801aed0 <__adddf3+0x138>
 801b052:	bf00      	nop

0801b054 <__aeabi_f2d>:
 801b054:	0042      	lsls	r2, r0, #1
 801b056:	ea4f 01e2 	mov.w	r1, r2, asr #3
 801b05a:	ea4f 0131 	mov.w	r1, r1, rrx
 801b05e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 801b062:	bf1f      	itttt	ne
 801b064:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 801b068:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 801b06c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 801b070:	4770      	bxne	lr
 801b072:	f092 0f00 	teq	r2, #0
 801b076:	bf14      	ite	ne
 801b078:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 801b07c:	4770      	bxeq	lr
 801b07e:	b530      	push	{r4, r5, lr}
 801b080:	f44f 7460 	mov.w	r4, #896	; 0x380
 801b084:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 801b088:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801b08c:	e720      	b.n	801aed0 <__adddf3+0x138>
 801b08e:	bf00      	nop

0801b090 <__aeabi_ul2d>:
 801b090:	ea50 0201 	orrs.w	r2, r0, r1
 801b094:	bf08      	it	eq
 801b096:	4770      	bxeq	lr
 801b098:	b530      	push	{r4, r5, lr}
 801b09a:	f04f 0500 	mov.w	r5, #0
 801b09e:	e00a      	b.n	801b0b6 <__aeabi_l2d+0x16>

0801b0a0 <__aeabi_l2d>:
 801b0a0:	ea50 0201 	orrs.w	r2, r0, r1
 801b0a4:	bf08      	it	eq
 801b0a6:	4770      	bxeq	lr
 801b0a8:	b530      	push	{r4, r5, lr}
 801b0aa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 801b0ae:	d502      	bpl.n	801b0b6 <__aeabi_l2d+0x16>
 801b0b0:	4240      	negs	r0, r0
 801b0b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801b0b6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 801b0ba:	f104 0432 	add.w	r4, r4, #50	; 0x32
 801b0be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 801b0c2:	f43f aedc 	beq.w	801ae7e <__adddf3+0xe6>
 801b0c6:	f04f 0203 	mov.w	r2, #3
 801b0ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 801b0ce:	bf18      	it	ne
 801b0d0:	3203      	addne	r2, #3
 801b0d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 801b0d6:	bf18      	it	ne
 801b0d8:	3203      	addne	r2, #3
 801b0da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 801b0de:	f1c2 0320 	rsb	r3, r2, #32
 801b0e2:	fa00 fc03 	lsl.w	ip, r0, r3
 801b0e6:	fa20 f002 	lsr.w	r0, r0, r2
 801b0ea:	fa01 fe03 	lsl.w	lr, r1, r3
 801b0ee:	ea40 000e 	orr.w	r0, r0, lr
 801b0f2:	fa21 f102 	lsr.w	r1, r1, r2
 801b0f6:	4414      	add	r4, r2
 801b0f8:	e6c1      	b.n	801ae7e <__adddf3+0xe6>
 801b0fa:	bf00      	nop

0801b0fc <__aeabi_dmul>:
 801b0fc:	b570      	push	{r4, r5, r6, lr}
 801b0fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 801b102:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 801b106:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 801b10a:	bf1d      	ittte	ne
 801b10c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 801b110:	ea94 0f0c 	teqne	r4, ip
 801b114:	ea95 0f0c 	teqne	r5, ip
 801b118:	f000 f8de 	bleq	801b2d8 <__aeabi_dmul+0x1dc>
 801b11c:	442c      	add	r4, r5
 801b11e:	ea81 0603 	eor.w	r6, r1, r3
 801b122:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 801b126:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 801b12a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 801b12e:	bf18      	it	ne
 801b130:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 801b134:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801b138:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801b13c:	d038      	beq.n	801b1b0 <__aeabi_dmul+0xb4>
 801b13e:	fba0 ce02 	umull	ip, lr, r0, r2
 801b142:	f04f 0500 	mov.w	r5, #0
 801b146:	fbe1 e502 	umlal	lr, r5, r1, r2
 801b14a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 801b14e:	fbe0 e503 	umlal	lr, r5, r0, r3
 801b152:	f04f 0600 	mov.w	r6, #0
 801b156:	fbe1 5603 	umlal	r5, r6, r1, r3
 801b15a:	f09c 0f00 	teq	ip, #0
 801b15e:	bf18      	it	ne
 801b160:	f04e 0e01 	orrne.w	lr, lr, #1
 801b164:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 801b168:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 801b16c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 801b170:	d204      	bcs.n	801b17c <__aeabi_dmul+0x80>
 801b172:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 801b176:	416d      	adcs	r5, r5
 801b178:	eb46 0606 	adc.w	r6, r6, r6
 801b17c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 801b180:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 801b184:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 801b188:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 801b18c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 801b190:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 801b194:	bf88      	it	hi
 801b196:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 801b19a:	d81e      	bhi.n	801b1da <__aeabi_dmul+0xde>
 801b19c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 801b1a0:	bf08      	it	eq
 801b1a2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 801b1a6:	f150 0000 	adcs.w	r0, r0, #0
 801b1aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 801b1ae:	bd70      	pop	{r4, r5, r6, pc}
 801b1b0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 801b1b4:	ea46 0101 	orr.w	r1, r6, r1
 801b1b8:	ea40 0002 	orr.w	r0, r0, r2
 801b1bc:	ea81 0103 	eor.w	r1, r1, r3
 801b1c0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 801b1c4:	bfc2      	ittt	gt
 801b1c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 801b1ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 801b1ce:	bd70      	popgt	{r4, r5, r6, pc}
 801b1d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801b1d4:	f04f 0e00 	mov.w	lr, #0
 801b1d8:	3c01      	subs	r4, #1
 801b1da:	f300 80ab 	bgt.w	801b334 <__aeabi_dmul+0x238>
 801b1de:	f114 0f36 	cmn.w	r4, #54	; 0x36
 801b1e2:	bfde      	ittt	le
 801b1e4:	2000      	movle	r0, #0
 801b1e6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 801b1ea:	bd70      	pople	{r4, r5, r6, pc}
 801b1ec:	f1c4 0400 	rsb	r4, r4, #0
 801b1f0:	3c20      	subs	r4, #32
 801b1f2:	da35      	bge.n	801b260 <__aeabi_dmul+0x164>
 801b1f4:	340c      	adds	r4, #12
 801b1f6:	dc1b      	bgt.n	801b230 <__aeabi_dmul+0x134>
 801b1f8:	f104 0414 	add.w	r4, r4, #20
 801b1fc:	f1c4 0520 	rsb	r5, r4, #32
 801b200:	fa00 f305 	lsl.w	r3, r0, r5
 801b204:	fa20 f004 	lsr.w	r0, r0, r4
 801b208:	fa01 f205 	lsl.w	r2, r1, r5
 801b20c:	ea40 0002 	orr.w	r0, r0, r2
 801b210:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 801b214:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801b218:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 801b21c:	fa21 f604 	lsr.w	r6, r1, r4
 801b220:	eb42 0106 	adc.w	r1, r2, r6
 801b224:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 801b228:	bf08      	it	eq
 801b22a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801b22e:	bd70      	pop	{r4, r5, r6, pc}
 801b230:	f1c4 040c 	rsb	r4, r4, #12
 801b234:	f1c4 0520 	rsb	r5, r4, #32
 801b238:	fa00 f304 	lsl.w	r3, r0, r4
 801b23c:	fa20 f005 	lsr.w	r0, r0, r5
 801b240:	fa01 f204 	lsl.w	r2, r1, r4
 801b244:	ea40 0002 	orr.w	r0, r0, r2
 801b248:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 801b24c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 801b250:	f141 0100 	adc.w	r1, r1, #0
 801b254:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 801b258:	bf08      	it	eq
 801b25a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801b25e:	bd70      	pop	{r4, r5, r6, pc}
 801b260:	f1c4 0520 	rsb	r5, r4, #32
 801b264:	fa00 f205 	lsl.w	r2, r0, r5
 801b268:	ea4e 0e02 	orr.w	lr, lr, r2
 801b26c:	fa20 f304 	lsr.w	r3, r0, r4
 801b270:	fa01 f205 	lsl.w	r2, r1, r5
 801b274:	ea43 0302 	orr.w	r3, r3, r2
 801b278:	fa21 f004 	lsr.w	r0, r1, r4
 801b27c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 801b280:	fa21 f204 	lsr.w	r2, r1, r4
 801b284:	ea20 0002 	bic.w	r0, r0, r2
 801b288:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 801b28c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 801b290:	bf08      	it	eq
 801b292:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801b296:	bd70      	pop	{r4, r5, r6, pc}
 801b298:	f094 0f00 	teq	r4, #0
 801b29c:	d10f      	bne.n	801b2be <__aeabi_dmul+0x1c2>
 801b29e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 801b2a2:	0040      	lsls	r0, r0, #1
 801b2a4:	eb41 0101 	adc.w	r1, r1, r1
 801b2a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 801b2ac:	bf08      	it	eq
 801b2ae:	3c01      	subeq	r4, #1
 801b2b0:	d0f7      	beq.n	801b2a2 <__aeabi_dmul+0x1a6>
 801b2b2:	ea41 0106 	orr.w	r1, r1, r6
 801b2b6:	f095 0f00 	teq	r5, #0
 801b2ba:	bf18      	it	ne
 801b2bc:	4770      	bxne	lr
 801b2be:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 801b2c2:	0052      	lsls	r2, r2, #1
 801b2c4:	eb43 0303 	adc.w	r3, r3, r3
 801b2c8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 801b2cc:	bf08      	it	eq
 801b2ce:	3d01      	subeq	r5, #1
 801b2d0:	d0f7      	beq.n	801b2c2 <__aeabi_dmul+0x1c6>
 801b2d2:	ea43 0306 	orr.w	r3, r3, r6
 801b2d6:	4770      	bx	lr
 801b2d8:	ea94 0f0c 	teq	r4, ip
 801b2dc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 801b2e0:	bf18      	it	ne
 801b2e2:	ea95 0f0c 	teqne	r5, ip
 801b2e6:	d00c      	beq.n	801b302 <__aeabi_dmul+0x206>
 801b2e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 801b2ec:	bf18      	it	ne
 801b2ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801b2f2:	d1d1      	bne.n	801b298 <__aeabi_dmul+0x19c>
 801b2f4:	ea81 0103 	eor.w	r1, r1, r3
 801b2f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 801b2fc:	f04f 0000 	mov.w	r0, #0
 801b300:	bd70      	pop	{r4, r5, r6, pc}
 801b302:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 801b306:	bf06      	itte	eq
 801b308:	4610      	moveq	r0, r2
 801b30a:	4619      	moveq	r1, r3
 801b30c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801b310:	d019      	beq.n	801b346 <__aeabi_dmul+0x24a>
 801b312:	ea94 0f0c 	teq	r4, ip
 801b316:	d102      	bne.n	801b31e <__aeabi_dmul+0x222>
 801b318:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 801b31c:	d113      	bne.n	801b346 <__aeabi_dmul+0x24a>
 801b31e:	ea95 0f0c 	teq	r5, ip
 801b322:	d105      	bne.n	801b330 <__aeabi_dmul+0x234>
 801b324:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 801b328:	bf1c      	itt	ne
 801b32a:	4610      	movne	r0, r2
 801b32c:	4619      	movne	r1, r3
 801b32e:	d10a      	bne.n	801b346 <__aeabi_dmul+0x24a>
 801b330:	ea81 0103 	eor.w	r1, r1, r3
 801b334:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 801b338:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 801b33c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801b340:	f04f 0000 	mov.w	r0, #0
 801b344:	bd70      	pop	{r4, r5, r6, pc}
 801b346:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 801b34a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 801b34e:	bd70      	pop	{r4, r5, r6, pc}

0801b350 <__aeabi_ddiv>:
 801b350:	b570      	push	{r4, r5, r6, lr}
 801b352:	f04f 0cff 	mov.w	ip, #255	; 0xff
 801b356:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 801b35a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 801b35e:	bf1d      	ittte	ne
 801b360:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 801b364:	ea94 0f0c 	teqne	r4, ip
 801b368:	ea95 0f0c 	teqne	r5, ip
 801b36c:	f000 f8a7 	bleq	801b4be <__aeabi_ddiv+0x16e>
 801b370:	eba4 0405 	sub.w	r4, r4, r5
 801b374:	ea81 0e03 	eor.w	lr, r1, r3
 801b378:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 801b37c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801b380:	f000 8088 	beq.w	801b494 <__aeabi_ddiv+0x144>
 801b384:	ea4f 3303 	mov.w	r3, r3, lsl #12
 801b388:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 801b38c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 801b390:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 801b394:	ea4f 2202 	mov.w	r2, r2, lsl #8
 801b398:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 801b39c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 801b3a0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 801b3a4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 801b3a8:	429d      	cmp	r5, r3
 801b3aa:	bf08      	it	eq
 801b3ac:	4296      	cmpeq	r6, r2
 801b3ae:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 801b3b2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 801b3b6:	d202      	bcs.n	801b3be <__aeabi_ddiv+0x6e>
 801b3b8:	085b      	lsrs	r3, r3, #1
 801b3ba:	ea4f 0232 	mov.w	r2, r2, rrx
 801b3be:	1ab6      	subs	r6, r6, r2
 801b3c0:	eb65 0503 	sbc.w	r5, r5, r3
 801b3c4:	085b      	lsrs	r3, r3, #1
 801b3c6:	ea4f 0232 	mov.w	r2, r2, rrx
 801b3ca:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 801b3ce:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 801b3d2:	ebb6 0e02 	subs.w	lr, r6, r2
 801b3d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 801b3da:	bf22      	ittt	cs
 801b3dc:	1ab6      	subcs	r6, r6, r2
 801b3de:	4675      	movcs	r5, lr
 801b3e0:	ea40 000c 	orrcs.w	r0, r0, ip
 801b3e4:	085b      	lsrs	r3, r3, #1
 801b3e6:	ea4f 0232 	mov.w	r2, r2, rrx
 801b3ea:	ebb6 0e02 	subs.w	lr, r6, r2
 801b3ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 801b3f2:	bf22      	ittt	cs
 801b3f4:	1ab6      	subcs	r6, r6, r2
 801b3f6:	4675      	movcs	r5, lr
 801b3f8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 801b3fc:	085b      	lsrs	r3, r3, #1
 801b3fe:	ea4f 0232 	mov.w	r2, r2, rrx
 801b402:	ebb6 0e02 	subs.w	lr, r6, r2
 801b406:	eb75 0e03 	sbcs.w	lr, r5, r3
 801b40a:	bf22      	ittt	cs
 801b40c:	1ab6      	subcs	r6, r6, r2
 801b40e:	4675      	movcs	r5, lr
 801b410:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 801b414:	085b      	lsrs	r3, r3, #1
 801b416:	ea4f 0232 	mov.w	r2, r2, rrx
 801b41a:	ebb6 0e02 	subs.w	lr, r6, r2
 801b41e:	eb75 0e03 	sbcs.w	lr, r5, r3
 801b422:	bf22      	ittt	cs
 801b424:	1ab6      	subcs	r6, r6, r2
 801b426:	4675      	movcs	r5, lr
 801b428:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 801b42c:	ea55 0e06 	orrs.w	lr, r5, r6
 801b430:	d018      	beq.n	801b464 <__aeabi_ddiv+0x114>
 801b432:	ea4f 1505 	mov.w	r5, r5, lsl #4
 801b436:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 801b43a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 801b43e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801b442:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 801b446:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801b44a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 801b44e:	d1c0      	bne.n	801b3d2 <__aeabi_ddiv+0x82>
 801b450:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 801b454:	d10b      	bne.n	801b46e <__aeabi_ddiv+0x11e>
 801b456:	ea41 0100 	orr.w	r1, r1, r0
 801b45a:	f04f 0000 	mov.w	r0, #0
 801b45e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 801b462:	e7b6      	b.n	801b3d2 <__aeabi_ddiv+0x82>
 801b464:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 801b468:	bf04      	itt	eq
 801b46a:	4301      	orreq	r1, r0
 801b46c:	2000      	moveq	r0, #0
 801b46e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 801b472:	bf88      	it	hi
 801b474:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 801b478:	f63f aeaf 	bhi.w	801b1da <__aeabi_dmul+0xde>
 801b47c:	ebb5 0c03 	subs.w	ip, r5, r3
 801b480:	bf04      	itt	eq
 801b482:	ebb6 0c02 	subseq.w	ip, r6, r2
 801b486:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 801b48a:	f150 0000 	adcs.w	r0, r0, #0
 801b48e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 801b492:	bd70      	pop	{r4, r5, r6, pc}
 801b494:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 801b498:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 801b49c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 801b4a0:	bfc2      	ittt	gt
 801b4a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 801b4a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 801b4aa:	bd70      	popgt	{r4, r5, r6, pc}
 801b4ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801b4b0:	f04f 0e00 	mov.w	lr, #0
 801b4b4:	3c01      	subs	r4, #1
 801b4b6:	e690      	b.n	801b1da <__aeabi_dmul+0xde>
 801b4b8:	ea45 0e06 	orr.w	lr, r5, r6
 801b4bc:	e68d      	b.n	801b1da <__aeabi_dmul+0xde>
 801b4be:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 801b4c2:	ea94 0f0c 	teq	r4, ip
 801b4c6:	bf08      	it	eq
 801b4c8:	ea95 0f0c 	teqeq	r5, ip
 801b4cc:	f43f af3b 	beq.w	801b346 <__aeabi_dmul+0x24a>
 801b4d0:	ea94 0f0c 	teq	r4, ip
 801b4d4:	d10a      	bne.n	801b4ec <__aeabi_ddiv+0x19c>
 801b4d6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 801b4da:	f47f af34 	bne.w	801b346 <__aeabi_dmul+0x24a>
 801b4de:	ea95 0f0c 	teq	r5, ip
 801b4e2:	f47f af25 	bne.w	801b330 <__aeabi_dmul+0x234>
 801b4e6:	4610      	mov	r0, r2
 801b4e8:	4619      	mov	r1, r3
 801b4ea:	e72c      	b.n	801b346 <__aeabi_dmul+0x24a>
 801b4ec:	ea95 0f0c 	teq	r5, ip
 801b4f0:	d106      	bne.n	801b500 <__aeabi_ddiv+0x1b0>
 801b4f2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 801b4f6:	f43f aefd 	beq.w	801b2f4 <__aeabi_dmul+0x1f8>
 801b4fa:	4610      	mov	r0, r2
 801b4fc:	4619      	mov	r1, r3
 801b4fe:	e722      	b.n	801b346 <__aeabi_dmul+0x24a>
 801b500:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 801b504:	bf18      	it	ne
 801b506:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801b50a:	f47f aec5 	bne.w	801b298 <__aeabi_dmul+0x19c>
 801b50e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 801b512:	f47f af0d 	bne.w	801b330 <__aeabi_dmul+0x234>
 801b516:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 801b51a:	f47f aeeb 	bne.w	801b2f4 <__aeabi_dmul+0x1f8>
 801b51e:	e712      	b.n	801b346 <__aeabi_dmul+0x24a>

0801b520 <__gedf2>:
 801b520:	f04f 3cff 	mov.w	ip, #4294967295
 801b524:	e006      	b.n	801b534 <__cmpdf2+0x4>
 801b526:	bf00      	nop

0801b528 <__ledf2>:
 801b528:	f04f 0c01 	mov.w	ip, #1
 801b52c:	e002      	b.n	801b534 <__cmpdf2+0x4>
 801b52e:	bf00      	nop

0801b530 <__cmpdf2>:
 801b530:	f04f 0c01 	mov.w	ip, #1
 801b534:	f84d cd04 	str.w	ip, [sp, #-4]!
 801b538:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801b53c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 801b540:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 801b544:	bf18      	it	ne
 801b546:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 801b54a:	d01b      	beq.n	801b584 <__cmpdf2+0x54>
 801b54c:	b001      	add	sp, #4
 801b54e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 801b552:	bf0c      	ite	eq
 801b554:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 801b558:	ea91 0f03 	teqne	r1, r3
 801b55c:	bf02      	ittt	eq
 801b55e:	ea90 0f02 	teqeq	r0, r2
 801b562:	2000      	moveq	r0, #0
 801b564:	4770      	bxeq	lr
 801b566:	f110 0f00 	cmn.w	r0, #0
 801b56a:	ea91 0f03 	teq	r1, r3
 801b56e:	bf58      	it	pl
 801b570:	4299      	cmppl	r1, r3
 801b572:	bf08      	it	eq
 801b574:	4290      	cmpeq	r0, r2
 801b576:	bf2c      	ite	cs
 801b578:	17d8      	asrcs	r0, r3, #31
 801b57a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 801b57e:	f040 0001 	orr.w	r0, r0, #1
 801b582:	4770      	bx	lr
 801b584:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801b588:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 801b58c:	d102      	bne.n	801b594 <__cmpdf2+0x64>
 801b58e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 801b592:	d107      	bne.n	801b5a4 <__cmpdf2+0x74>
 801b594:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 801b598:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 801b59c:	d1d6      	bne.n	801b54c <__cmpdf2+0x1c>
 801b59e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 801b5a2:	d0d3      	beq.n	801b54c <__cmpdf2+0x1c>
 801b5a4:	f85d 0b04 	ldr.w	r0, [sp], #4
 801b5a8:	4770      	bx	lr
 801b5aa:	bf00      	nop

0801b5ac <__aeabi_cdrcmple>:
 801b5ac:	4684      	mov	ip, r0
 801b5ae:	4610      	mov	r0, r2
 801b5b0:	4662      	mov	r2, ip
 801b5b2:	468c      	mov	ip, r1
 801b5b4:	4619      	mov	r1, r3
 801b5b6:	4663      	mov	r3, ip
 801b5b8:	e000      	b.n	801b5bc <__aeabi_cdcmpeq>
 801b5ba:	bf00      	nop

0801b5bc <__aeabi_cdcmpeq>:
 801b5bc:	b501      	push	{r0, lr}
 801b5be:	f7ff ffb7 	bl	801b530 <__cmpdf2>
 801b5c2:	2800      	cmp	r0, #0
 801b5c4:	bf48      	it	mi
 801b5c6:	f110 0f00 	cmnmi.w	r0, #0
 801b5ca:	bd01      	pop	{r0, pc}

0801b5cc <__aeabi_dcmpeq>:
 801b5cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 801b5d0:	f7ff fff4 	bl	801b5bc <__aeabi_cdcmpeq>
 801b5d4:	bf0c      	ite	eq
 801b5d6:	2001      	moveq	r0, #1
 801b5d8:	2000      	movne	r0, #0
 801b5da:	f85d fb08 	ldr.w	pc, [sp], #8
 801b5de:	bf00      	nop

0801b5e0 <__aeabi_dcmplt>:
 801b5e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 801b5e4:	f7ff ffea 	bl	801b5bc <__aeabi_cdcmpeq>
 801b5e8:	bf34      	ite	cc
 801b5ea:	2001      	movcc	r0, #1
 801b5ec:	2000      	movcs	r0, #0
 801b5ee:	f85d fb08 	ldr.w	pc, [sp], #8
 801b5f2:	bf00      	nop

0801b5f4 <__aeabi_dcmple>:
 801b5f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 801b5f8:	f7ff ffe0 	bl	801b5bc <__aeabi_cdcmpeq>
 801b5fc:	bf94      	ite	ls
 801b5fe:	2001      	movls	r0, #1
 801b600:	2000      	movhi	r0, #0
 801b602:	f85d fb08 	ldr.w	pc, [sp], #8
 801b606:	bf00      	nop

0801b608 <__aeabi_dcmpge>:
 801b608:	f84d ed08 	str.w	lr, [sp, #-8]!
 801b60c:	f7ff ffce 	bl	801b5ac <__aeabi_cdrcmple>
 801b610:	bf94      	ite	ls
 801b612:	2001      	movls	r0, #1
 801b614:	2000      	movhi	r0, #0
 801b616:	f85d fb08 	ldr.w	pc, [sp], #8
 801b61a:	bf00      	nop

0801b61c <__aeabi_dcmpgt>:
 801b61c:	f84d ed08 	str.w	lr, [sp, #-8]!
 801b620:	f7ff ffc4 	bl	801b5ac <__aeabi_cdrcmple>
 801b624:	bf34      	ite	cc
 801b626:	2001      	movcc	r0, #1
 801b628:	2000      	movcs	r0, #0
 801b62a:	f85d fb08 	ldr.w	pc, [sp], #8
 801b62e:	bf00      	nop

0801b630 <__aeabi_d2iz>:
 801b630:	ea4f 0241 	mov.w	r2, r1, lsl #1
 801b634:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 801b638:	d215      	bcs.n	801b666 <__aeabi_d2iz+0x36>
 801b63a:	d511      	bpl.n	801b660 <__aeabi_d2iz+0x30>
 801b63c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 801b640:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 801b644:	d912      	bls.n	801b66c <__aeabi_d2iz+0x3c>
 801b646:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 801b64a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801b64e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 801b652:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 801b656:	fa23 f002 	lsr.w	r0, r3, r2
 801b65a:	bf18      	it	ne
 801b65c:	4240      	negne	r0, r0
 801b65e:	4770      	bx	lr
 801b660:	f04f 0000 	mov.w	r0, #0
 801b664:	4770      	bx	lr
 801b666:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 801b66a:	d105      	bne.n	801b678 <__aeabi_d2iz+0x48>
 801b66c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 801b670:	bf08      	it	eq
 801b672:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 801b676:	4770      	bx	lr
 801b678:	f04f 0000 	mov.w	r0, #0
 801b67c:	4770      	bx	lr
 801b67e:	bf00      	nop

0801b680 <__aeabi_d2uiz>:
 801b680:	004a      	lsls	r2, r1, #1
 801b682:	d211      	bcs.n	801b6a8 <__aeabi_d2uiz+0x28>
 801b684:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 801b688:	d211      	bcs.n	801b6ae <__aeabi_d2uiz+0x2e>
 801b68a:	d50d      	bpl.n	801b6a8 <__aeabi_d2uiz+0x28>
 801b68c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 801b690:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 801b694:	d40e      	bmi.n	801b6b4 <__aeabi_d2uiz+0x34>
 801b696:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 801b69a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801b69e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 801b6a2:	fa23 f002 	lsr.w	r0, r3, r2
 801b6a6:	4770      	bx	lr
 801b6a8:	f04f 0000 	mov.w	r0, #0
 801b6ac:	4770      	bx	lr
 801b6ae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 801b6b2:	d102      	bne.n	801b6ba <__aeabi_d2uiz+0x3a>
 801b6b4:	f04f 30ff 	mov.w	r0, #4294967295
 801b6b8:	4770      	bx	lr
 801b6ba:	f04f 0000 	mov.w	r0, #0
 801b6be:	4770      	bx	lr

0801b6c0 <__aeabi_d2f>:
 801b6c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 801b6c4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 801b6c8:	bf24      	itt	cs
 801b6ca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 801b6ce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 801b6d2:	d90d      	bls.n	801b6f0 <__aeabi_d2f+0x30>
 801b6d4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 801b6d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 801b6dc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 801b6e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 801b6e4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 801b6e8:	bf08      	it	eq
 801b6ea:	f020 0001 	biceq.w	r0, r0, #1
 801b6ee:	4770      	bx	lr
 801b6f0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 801b6f4:	d121      	bne.n	801b73a <__aeabi_d2f+0x7a>
 801b6f6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 801b6fa:	bfbc      	itt	lt
 801b6fc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 801b700:	4770      	bxlt	lr
 801b702:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801b706:	ea4f 5252 	mov.w	r2, r2, lsr #21
 801b70a:	f1c2 0218 	rsb	r2, r2, #24
 801b70e:	f1c2 0c20 	rsb	ip, r2, #32
 801b712:	fa10 f30c 	lsls.w	r3, r0, ip
 801b716:	fa20 f002 	lsr.w	r0, r0, r2
 801b71a:	bf18      	it	ne
 801b71c:	f040 0001 	orrne.w	r0, r0, #1
 801b720:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 801b724:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 801b728:	fa03 fc0c 	lsl.w	ip, r3, ip
 801b72c:	ea40 000c 	orr.w	r0, r0, ip
 801b730:	fa23 f302 	lsr.w	r3, r3, r2
 801b734:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801b738:	e7cc      	b.n	801b6d4 <__aeabi_d2f+0x14>
 801b73a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 801b73e:	d107      	bne.n	801b750 <__aeabi_d2f+0x90>
 801b740:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 801b744:	bf1e      	ittt	ne
 801b746:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 801b74a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 801b74e:	4770      	bxne	lr
 801b750:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 801b754:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 801b758:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801b75c:	4770      	bx	lr
 801b75e:	bf00      	nop

0801b760 <__aeabi_frsub>:
 801b760:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 801b764:	e002      	b.n	801b76c <__addsf3>
 801b766:	bf00      	nop

0801b768 <__aeabi_fsub>:
 801b768:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0801b76c <__addsf3>:
 801b76c:	0042      	lsls	r2, r0, #1
 801b76e:	bf1f      	itttt	ne
 801b770:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 801b774:	ea92 0f03 	teqne	r2, r3
 801b778:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 801b77c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 801b780:	d06a      	beq.n	801b858 <__addsf3+0xec>
 801b782:	ea4f 6212 	mov.w	r2, r2, lsr #24
 801b786:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 801b78a:	bfc1      	itttt	gt
 801b78c:	18d2      	addgt	r2, r2, r3
 801b78e:	4041      	eorgt	r1, r0
 801b790:	4048      	eorgt	r0, r1
 801b792:	4041      	eorgt	r1, r0
 801b794:	bfb8      	it	lt
 801b796:	425b      	neglt	r3, r3
 801b798:	2b19      	cmp	r3, #25
 801b79a:	bf88      	it	hi
 801b79c:	4770      	bxhi	lr
 801b79e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 801b7a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801b7a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 801b7aa:	bf18      	it	ne
 801b7ac:	4240      	negne	r0, r0
 801b7ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 801b7b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 801b7b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 801b7ba:	bf18      	it	ne
 801b7bc:	4249      	negne	r1, r1
 801b7be:	ea92 0f03 	teq	r2, r3
 801b7c2:	d03f      	beq.n	801b844 <__addsf3+0xd8>
 801b7c4:	f1a2 0201 	sub.w	r2, r2, #1
 801b7c8:	fa41 fc03 	asr.w	ip, r1, r3
 801b7cc:	eb10 000c 	adds.w	r0, r0, ip
 801b7d0:	f1c3 0320 	rsb	r3, r3, #32
 801b7d4:	fa01 f103 	lsl.w	r1, r1, r3
 801b7d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 801b7dc:	d502      	bpl.n	801b7e4 <__addsf3+0x78>
 801b7de:	4249      	negs	r1, r1
 801b7e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 801b7e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 801b7e8:	d313      	bcc.n	801b812 <__addsf3+0xa6>
 801b7ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 801b7ee:	d306      	bcc.n	801b7fe <__addsf3+0x92>
 801b7f0:	0840      	lsrs	r0, r0, #1
 801b7f2:	ea4f 0131 	mov.w	r1, r1, rrx
 801b7f6:	f102 0201 	add.w	r2, r2, #1
 801b7fa:	2afe      	cmp	r2, #254	; 0xfe
 801b7fc:	d251      	bcs.n	801b8a2 <__addsf3+0x136>
 801b7fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 801b802:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 801b806:	bf08      	it	eq
 801b808:	f020 0001 	biceq.w	r0, r0, #1
 801b80c:	ea40 0003 	orr.w	r0, r0, r3
 801b810:	4770      	bx	lr
 801b812:	0049      	lsls	r1, r1, #1
 801b814:	eb40 0000 	adc.w	r0, r0, r0
 801b818:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 801b81c:	f1a2 0201 	sub.w	r2, r2, #1
 801b820:	d1ed      	bne.n	801b7fe <__addsf3+0x92>
 801b822:	fab0 fc80 	clz	ip, r0
 801b826:	f1ac 0c08 	sub.w	ip, ip, #8
 801b82a:	ebb2 020c 	subs.w	r2, r2, ip
 801b82e:	fa00 f00c 	lsl.w	r0, r0, ip
 801b832:	bfaa      	itet	ge
 801b834:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 801b838:	4252      	neglt	r2, r2
 801b83a:	4318      	orrge	r0, r3
 801b83c:	bfbc      	itt	lt
 801b83e:	40d0      	lsrlt	r0, r2
 801b840:	4318      	orrlt	r0, r3
 801b842:	4770      	bx	lr
 801b844:	f092 0f00 	teq	r2, #0
 801b848:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 801b84c:	bf06      	itte	eq
 801b84e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 801b852:	3201      	addeq	r2, #1
 801b854:	3b01      	subne	r3, #1
 801b856:	e7b5      	b.n	801b7c4 <__addsf3+0x58>
 801b858:	ea4f 0341 	mov.w	r3, r1, lsl #1
 801b85c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 801b860:	bf18      	it	ne
 801b862:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 801b866:	d021      	beq.n	801b8ac <__addsf3+0x140>
 801b868:	ea92 0f03 	teq	r2, r3
 801b86c:	d004      	beq.n	801b878 <__addsf3+0x10c>
 801b86e:	f092 0f00 	teq	r2, #0
 801b872:	bf08      	it	eq
 801b874:	4608      	moveq	r0, r1
 801b876:	4770      	bx	lr
 801b878:	ea90 0f01 	teq	r0, r1
 801b87c:	bf1c      	itt	ne
 801b87e:	2000      	movne	r0, #0
 801b880:	4770      	bxne	lr
 801b882:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 801b886:	d104      	bne.n	801b892 <__addsf3+0x126>
 801b888:	0040      	lsls	r0, r0, #1
 801b88a:	bf28      	it	cs
 801b88c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 801b890:	4770      	bx	lr
 801b892:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 801b896:	bf3c      	itt	cc
 801b898:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 801b89c:	4770      	bxcc	lr
 801b89e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 801b8a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 801b8a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801b8aa:	4770      	bx	lr
 801b8ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 801b8b0:	bf16      	itet	ne
 801b8b2:	4608      	movne	r0, r1
 801b8b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 801b8b8:	4601      	movne	r1, r0
 801b8ba:	0242      	lsls	r2, r0, #9
 801b8bc:	bf06      	itte	eq
 801b8be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 801b8c2:	ea90 0f01 	teqeq	r0, r1
 801b8c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 801b8ca:	4770      	bx	lr

0801b8cc <__aeabi_ui2f>:
 801b8cc:	f04f 0300 	mov.w	r3, #0
 801b8d0:	e004      	b.n	801b8dc <__aeabi_i2f+0x8>
 801b8d2:	bf00      	nop

0801b8d4 <__aeabi_i2f>:
 801b8d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 801b8d8:	bf48      	it	mi
 801b8da:	4240      	negmi	r0, r0
 801b8dc:	ea5f 0c00 	movs.w	ip, r0
 801b8e0:	bf08      	it	eq
 801b8e2:	4770      	bxeq	lr
 801b8e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 801b8e8:	4601      	mov	r1, r0
 801b8ea:	f04f 0000 	mov.w	r0, #0
 801b8ee:	e01c      	b.n	801b92a <__aeabi_l2f+0x2a>

0801b8f0 <__aeabi_ul2f>:
 801b8f0:	ea50 0201 	orrs.w	r2, r0, r1
 801b8f4:	bf08      	it	eq
 801b8f6:	4770      	bxeq	lr
 801b8f8:	f04f 0300 	mov.w	r3, #0
 801b8fc:	e00a      	b.n	801b914 <__aeabi_l2f+0x14>
 801b8fe:	bf00      	nop

0801b900 <__aeabi_l2f>:
 801b900:	ea50 0201 	orrs.w	r2, r0, r1
 801b904:	bf08      	it	eq
 801b906:	4770      	bxeq	lr
 801b908:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 801b90c:	d502      	bpl.n	801b914 <__aeabi_l2f+0x14>
 801b90e:	4240      	negs	r0, r0
 801b910:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801b914:	ea5f 0c01 	movs.w	ip, r1
 801b918:	bf02      	ittt	eq
 801b91a:	4684      	moveq	ip, r0
 801b91c:	4601      	moveq	r1, r0
 801b91e:	2000      	moveq	r0, #0
 801b920:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 801b924:	bf08      	it	eq
 801b926:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 801b92a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 801b92e:	fabc f28c 	clz	r2, ip
 801b932:	3a08      	subs	r2, #8
 801b934:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 801b938:	db10      	blt.n	801b95c <__aeabi_l2f+0x5c>
 801b93a:	fa01 fc02 	lsl.w	ip, r1, r2
 801b93e:	4463      	add	r3, ip
 801b940:	fa00 fc02 	lsl.w	ip, r0, r2
 801b944:	f1c2 0220 	rsb	r2, r2, #32
 801b948:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 801b94c:	fa20 f202 	lsr.w	r2, r0, r2
 801b950:	eb43 0002 	adc.w	r0, r3, r2
 801b954:	bf08      	it	eq
 801b956:	f020 0001 	biceq.w	r0, r0, #1
 801b95a:	4770      	bx	lr
 801b95c:	f102 0220 	add.w	r2, r2, #32
 801b960:	fa01 fc02 	lsl.w	ip, r1, r2
 801b964:	f1c2 0220 	rsb	r2, r2, #32
 801b968:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 801b96c:	fa21 f202 	lsr.w	r2, r1, r2
 801b970:	eb43 0002 	adc.w	r0, r3, r2
 801b974:	bf08      	it	eq
 801b976:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 801b97a:	4770      	bx	lr

0801b97c <__aeabi_fmul>:
 801b97c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 801b980:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 801b984:	bf1e      	ittt	ne
 801b986:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 801b98a:	ea92 0f0c 	teqne	r2, ip
 801b98e:	ea93 0f0c 	teqne	r3, ip
 801b992:	d06f      	beq.n	801ba74 <__aeabi_fmul+0xf8>
 801b994:	441a      	add	r2, r3
 801b996:	ea80 0c01 	eor.w	ip, r0, r1
 801b99a:	0240      	lsls	r0, r0, #9
 801b99c:	bf18      	it	ne
 801b99e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 801b9a2:	d01e      	beq.n	801b9e2 <__aeabi_fmul+0x66>
 801b9a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801b9a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 801b9ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 801b9b0:	fba0 3101 	umull	r3, r1, r0, r1
 801b9b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 801b9b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 801b9bc:	bf3e      	ittt	cc
 801b9be:	0049      	lslcc	r1, r1, #1
 801b9c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 801b9c4:	005b      	lslcc	r3, r3, #1
 801b9c6:	ea40 0001 	orr.w	r0, r0, r1
 801b9ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 801b9ce:	2afd      	cmp	r2, #253	; 0xfd
 801b9d0:	d81d      	bhi.n	801ba0e <__aeabi_fmul+0x92>
 801b9d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801b9d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 801b9da:	bf08      	it	eq
 801b9dc:	f020 0001 	biceq.w	r0, r0, #1
 801b9e0:	4770      	bx	lr
 801b9e2:	f090 0f00 	teq	r0, #0
 801b9e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 801b9ea:	bf08      	it	eq
 801b9ec:	0249      	lsleq	r1, r1, #9
 801b9ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 801b9f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 801b9f6:	3a7f      	subs	r2, #127	; 0x7f
 801b9f8:	bfc2      	ittt	gt
 801b9fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 801b9fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 801ba02:	4770      	bxgt	lr
 801ba04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801ba08:	f04f 0300 	mov.w	r3, #0
 801ba0c:	3a01      	subs	r2, #1
 801ba0e:	dc5d      	bgt.n	801bacc <__aeabi_fmul+0x150>
 801ba10:	f112 0f19 	cmn.w	r2, #25
 801ba14:	bfdc      	itt	le
 801ba16:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 801ba1a:	4770      	bxle	lr
 801ba1c:	f1c2 0200 	rsb	r2, r2, #0
 801ba20:	0041      	lsls	r1, r0, #1
 801ba22:	fa21 f102 	lsr.w	r1, r1, r2
 801ba26:	f1c2 0220 	rsb	r2, r2, #32
 801ba2a:	fa00 fc02 	lsl.w	ip, r0, r2
 801ba2e:	ea5f 0031 	movs.w	r0, r1, rrx
 801ba32:	f140 0000 	adc.w	r0, r0, #0
 801ba36:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 801ba3a:	bf08      	it	eq
 801ba3c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 801ba40:	4770      	bx	lr
 801ba42:	f092 0f00 	teq	r2, #0
 801ba46:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 801ba4a:	bf02      	ittt	eq
 801ba4c:	0040      	lsleq	r0, r0, #1
 801ba4e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 801ba52:	3a01      	subeq	r2, #1
 801ba54:	d0f9      	beq.n	801ba4a <__aeabi_fmul+0xce>
 801ba56:	ea40 000c 	orr.w	r0, r0, ip
 801ba5a:	f093 0f00 	teq	r3, #0
 801ba5e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 801ba62:	bf02      	ittt	eq
 801ba64:	0049      	lsleq	r1, r1, #1
 801ba66:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 801ba6a:	3b01      	subeq	r3, #1
 801ba6c:	d0f9      	beq.n	801ba62 <__aeabi_fmul+0xe6>
 801ba6e:	ea41 010c 	orr.w	r1, r1, ip
 801ba72:	e78f      	b.n	801b994 <__aeabi_fmul+0x18>
 801ba74:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 801ba78:	ea92 0f0c 	teq	r2, ip
 801ba7c:	bf18      	it	ne
 801ba7e:	ea93 0f0c 	teqne	r3, ip
 801ba82:	d00a      	beq.n	801ba9a <__aeabi_fmul+0x11e>
 801ba84:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 801ba88:	bf18      	it	ne
 801ba8a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 801ba8e:	d1d8      	bne.n	801ba42 <__aeabi_fmul+0xc6>
 801ba90:	ea80 0001 	eor.w	r0, r0, r1
 801ba94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801ba98:	4770      	bx	lr
 801ba9a:	f090 0f00 	teq	r0, #0
 801ba9e:	bf17      	itett	ne
 801baa0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 801baa4:	4608      	moveq	r0, r1
 801baa6:	f091 0f00 	teqne	r1, #0
 801baaa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 801baae:	d014      	beq.n	801bada <__aeabi_fmul+0x15e>
 801bab0:	ea92 0f0c 	teq	r2, ip
 801bab4:	d101      	bne.n	801baba <__aeabi_fmul+0x13e>
 801bab6:	0242      	lsls	r2, r0, #9
 801bab8:	d10f      	bne.n	801bada <__aeabi_fmul+0x15e>
 801baba:	ea93 0f0c 	teq	r3, ip
 801babe:	d103      	bne.n	801bac8 <__aeabi_fmul+0x14c>
 801bac0:	024b      	lsls	r3, r1, #9
 801bac2:	bf18      	it	ne
 801bac4:	4608      	movne	r0, r1
 801bac6:	d108      	bne.n	801bada <__aeabi_fmul+0x15e>
 801bac8:	ea80 0001 	eor.w	r0, r0, r1
 801bacc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801bad0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 801bad4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801bad8:	4770      	bx	lr
 801bada:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 801bade:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 801bae2:	4770      	bx	lr

0801bae4 <__aeabi_fdiv>:
 801bae4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 801bae8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 801baec:	bf1e      	ittt	ne
 801baee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 801baf2:	ea92 0f0c 	teqne	r2, ip
 801baf6:	ea93 0f0c 	teqne	r3, ip
 801bafa:	d069      	beq.n	801bbd0 <__aeabi_fdiv+0xec>
 801bafc:	eba2 0203 	sub.w	r2, r2, r3
 801bb00:	ea80 0c01 	eor.w	ip, r0, r1
 801bb04:	0249      	lsls	r1, r1, #9
 801bb06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 801bb0a:	d037      	beq.n	801bb7c <__aeabi_fdiv+0x98>
 801bb0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801bb10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 801bb14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 801bb18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 801bb1c:	428b      	cmp	r3, r1
 801bb1e:	bf38      	it	cc
 801bb20:	005b      	lslcc	r3, r3, #1
 801bb22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 801bb26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 801bb2a:	428b      	cmp	r3, r1
 801bb2c:	bf24      	itt	cs
 801bb2e:	1a5b      	subcs	r3, r3, r1
 801bb30:	ea40 000c 	orrcs.w	r0, r0, ip
 801bb34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 801bb38:	bf24      	itt	cs
 801bb3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 801bb3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 801bb42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 801bb46:	bf24      	itt	cs
 801bb48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 801bb4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 801bb50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 801bb54:	bf24      	itt	cs
 801bb56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 801bb5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 801bb5e:	011b      	lsls	r3, r3, #4
 801bb60:	bf18      	it	ne
 801bb62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 801bb66:	d1e0      	bne.n	801bb2a <__aeabi_fdiv+0x46>
 801bb68:	2afd      	cmp	r2, #253	; 0xfd
 801bb6a:	f63f af50 	bhi.w	801ba0e <__aeabi_fmul+0x92>
 801bb6e:	428b      	cmp	r3, r1
 801bb70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 801bb74:	bf08      	it	eq
 801bb76:	f020 0001 	biceq.w	r0, r0, #1
 801bb7a:	4770      	bx	lr
 801bb7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 801bb80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 801bb84:	327f      	adds	r2, #127	; 0x7f
 801bb86:	bfc2      	ittt	gt
 801bb88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 801bb8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 801bb90:	4770      	bxgt	lr
 801bb92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801bb96:	f04f 0300 	mov.w	r3, #0
 801bb9a:	3a01      	subs	r2, #1
 801bb9c:	e737      	b.n	801ba0e <__aeabi_fmul+0x92>
 801bb9e:	f092 0f00 	teq	r2, #0
 801bba2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 801bba6:	bf02      	ittt	eq
 801bba8:	0040      	lsleq	r0, r0, #1
 801bbaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 801bbae:	3a01      	subeq	r2, #1
 801bbb0:	d0f9      	beq.n	801bba6 <__aeabi_fdiv+0xc2>
 801bbb2:	ea40 000c 	orr.w	r0, r0, ip
 801bbb6:	f093 0f00 	teq	r3, #0
 801bbba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 801bbbe:	bf02      	ittt	eq
 801bbc0:	0049      	lsleq	r1, r1, #1
 801bbc2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 801bbc6:	3b01      	subeq	r3, #1
 801bbc8:	d0f9      	beq.n	801bbbe <__aeabi_fdiv+0xda>
 801bbca:	ea41 010c 	orr.w	r1, r1, ip
 801bbce:	e795      	b.n	801bafc <__aeabi_fdiv+0x18>
 801bbd0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 801bbd4:	ea92 0f0c 	teq	r2, ip
 801bbd8:	d108      	bne.n	801bbec <__aeabi_fdiv+0x108>
 801bbda:	0242      	lsls	r2, r0, #9
 801bbdc:	f47f af7d 	bne.w	801bada <__aeabi_fmul+0x15e>
 801bbe0:	ea93 0f0c 	teq	r3, ip
 801bbe4:	f47f af70 	bne.w	801bac8 <__aeabi_fmul+0x14c>
 801bbe8:	4608      	mov	r0, r1
 801bbea:	e776      	b.n	801bada <__aeabi_fmul+0x15e>
 801bbec:	ea93 0f0c 	teq	r3, ip
 801bbf0:	d104      	bne.n	801bbfc <__aeabi_fdiv+0x118>
 801bbf2:	024b      	lsls	r3, r1, #9
 801bbf4:	f43f af4c 	beq.w	801ba90 <__aeabi_fmul+0x114>
 801bbf8:	4608      	mov	r0, r1
 801bbfa:	e76e      	b.n	801bada <__aeabi_fmul+0x15e>
 801bbfc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 801bc00:	bf18      	it	ne
 801bc02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 801bc06:	d1ca      	bne.n	801bb9e <__aeabi_fdiv+0xba>
 801bc08:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 801bc0c:	f47f af5c 	bne.w	801bac8 <__aeabi_fmul+0x14c>
 801bc10:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 801bc14:	f47f af3c 	bne.w	801ba90 <__aeabi_fmul+0x114>
 801bc18:	e75f      	b.n	801bada <__aeabi_fmul+0x15e>
 801bc1a:	bf00      	nop

0801bc1c <__gesf2>:
 801bc1c:	f04f 3cff 	mov.w	ip, #4294967295
 801bc20:	e006      	b.n	801bc30 <__cmpsf2+0x4>
 801bc22:	bf00      	nop

0801bc24 <__lesf2>:
 801bc24:	f04f 0c01 	mov.w	ip, #1
 801bc28:	e002      	b.n	801bc30 <__cmpsf2+0x4>
 801bc2a:	bf00      	nop

0801bc2c <__cmpsf2>:
 801bc2c:	f04f 0c01 	mov.w	ip, #1
 801bc30:	f84d cd04 	str.w	ip, [sp, #-4]!
 801bc34:	ea4f 0240 	mov.w	r2, r0, lsl #1
 801bc38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 801bc3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 801bc40:	bf18      	it	ne
 801bc42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 801bc46:	d011      	beq.n	801bc6c <__cmpsf2+0x40>
 801bc48:	b001      	add	sp, #4
 801bc4a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 801bc4e:	bf18      	it	ne
 801bc50:	ea90 0f01 	teqne	r0, r1
 801bc54:	bf58      	it	pl
 801bc56:	ebb2 0003 	subspl.w	r0, r2, r3
 801bc5a:	bf88      	it	hi
 801bc5c:	17c8      	asrhi	r0, r1, #31
 801bc5e:	bf38      	it	cc
 801bc60:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 801bc64:	bf18      	it	ne
 801bc66:	f040 0001 	orrne.w	r0, r0, #1
 801bc6a:	4770      	bx	lr
 801bc6c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 801bc70:	d102      	bne.n	801bc78 <__cmpsf2+0x4c>
 801bc72:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 801bc76:	d105      	bne.n	801bc84 <__cmpsf2+0x58>
 801bc78:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 801bc7c:	d1e4      	bne.n	801bc48 <__cmpsf2+0x1c>
 801bc7e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 801bc82:	d0e1      	beq.n	801bc48 <__cmpsf2+0x1c>
 801bc84:	f85d 0b04 	ldr.w	r0, [sp], #4
 801bc88:	4770      	bx	lr
 801bc8a:	bf00      	nop

0801bc8c <__aeabi_cfrcmple>:
 801bc8c:	4684      	mov	ip, r0
 801bc8e:	4608      	mov	r0, r1
 801bc90:	4661      	mov	r1, ip
 801bc92:	e7ff      	b.n	801bc94 <__aeabi_cfcmpeq>

0801bc94 <__aeabi_cfcmpeq>:
 801bc94:	b50f      	push	{r0, r1, r2, r3, lr}
 801bc96:	f7ff ffc9 	bl	801bc2c <__cmpsf2>
 801bc9a:	2800      	cmp	r0, #0
 801bc9c:	bf48      	it	mi
 801bc9e:	f110 0f00 	cmnmi.w	r0, #0
 801bca2:	bd0f      	pop	{r0, r1, r2, r3, pc}

0801bca4 <__aeabi_fcmpeq>:
 801bca4:	f84d ed08 	str.w	lr, [sp, #-8]!
 801bca8:	f7ff fff4 	bl	801bc94 <__aeabi_cfcmpeq>
 801bcac:	bf0c      	ite	eq
 801bcae:	2001      	moveq	r0, #1
 801bcb0:	2000      	movne	r0, #0
 801bcb2:	f85d fb08 	ldr.w	pc, [sp], #8
 801bcb6:	bf00      	nop

0801bcb8 <__aeabi_fcmplt>:
 801bcb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 801bcbc:	f7ff ffea 	bl	801bc94 <__aeabi_cfcmpeq>
 801bcc0:	bf34      	ite	cc
 801bcc2:	2001      	movcc	r0, #1
 801bcc4:	2000      	movcs	r0, #0
 801bcc6:	f85d fb08 	ldr.w	pc, [sp], #8
 801bcca:	bf00      	nop

0801bccc <__aeabi_fcmple>:
 801bccc:	f84d ed08 	str.w	lr, [sp, #-8]!
 801bcd0:	f7ff ffe0 	bl	801bc94 <__aeabi_cfcmpeq>
 801bcd4:	bf94      	ite	ls
 801bcd6:	2001      	movls	r0, #1
 801bcd8:	2000      	movhi	r0, #0
 801bcda:	f85d fb08 	ldr.w	pc, [sp], #8
 801bcde:	bf00      	nop

0801bce0 <__aeabi_fcmpge>:
 801bce0:	f84d ed08 	str.w	lr, [sp, #-8]!
 801bce4:	f7ff ffd2 	bl	801bc8c <__aeabi_cfrcmple>
 801bce8:	bf94      	ite	ls
 801bcea:	2001      	movls	r0, #1
 801bcec:	2000      	movhi	r0, #0
 801bcee:	f85d fb08 	ldr.w	pc, [sp], #8
 801bcf2:	bf00      	nop

0801bcf4 <__aeabi_fcmpgt>:
 801bcf4:	f84d ed08 	str.w	lr, [sp, #-8]!
 801bcf8:	f7ff ffc8 	bl	801bc8c <__aeabi_cfrcmple>
 801bcfc:	bf34      	ite	cc
 801bcfe:	2001      	movcc	r0, #1
 801bd00:	2000      	movcs	r0, #0
 801bd02:	f85d fb08 	ldr.w	pc, [sp], #8
 801bd06:	bf00      	nop

0801bd08 <__aeabi_fcmpun>:
 801bd08:	ea4f 0240 	mov.w	r2, r0, lsl #1
 801bd0c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 801bd10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 801bd14:	d102      	bne.n	801bd1c <__aeabi_fcmpun+0x14>
 801bd16:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 801bd1a:	d108      	bne.n	801bd2e <__aeabi_fcmpun+0x26>
 801bd1c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 801bd20:	d102      	bne.n	801bd28 <__aeabi_fcmpun+0x20>
 801bd22:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 801bd26:	d102      	bne.n	801bd2e <__aeabi_fcmpun+0x26>
 801bd28:	f04f 0000 	mov.w	r0, #0
 801bd2c:	4770      	bx	lr
 801bd2e:	f04f 0001 	mov.w	r0, #1
 801bd32:	4770      	bx	lr

0801bd34 <__aeabi_f2uiz>:
 801bd34:	0042      	lsls	r2, r0, #1
 801bd36:	d20e      	bcs.n	801bd56 <__aeabi_f2uiz+0x22>
 801bd38:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 801bd3c:	d30b      	bcc.n	801bd56 <__aeabi_f2uiz+0x22>
 801bd3e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 801bd42:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 801bd46:	d409      	bmi.n	801bd5c <__aeabi_f2uiz+0x28>
 801bd48:	ea4f 2300 	mov.w	r3, r0, lsl #8
 801bd4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801bd50:	fa23 f002 	lsr.w	r0, r3, r2
 801bd54:	4770      	bx	lr
 801bd56:	f04f 0000 	mov.w	r0, #0
 801bd5a:	4770      	bx	lr
 801bd5c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 801bd60:	d101      	bne.n	801bd66 <__aeabi_f2uiz+0x32>
 801bd62:	0242      	lsls	r2, r0, #9
 801bd64:	d102      	bne.n	801bd6c <__aeabi_f2uiz+0x38>
 801bd66:	f04f 30ff 	mov.w	r0, #4294967295
 801bd6a:	4770      	bx	lr
 801bd6c:	f04f 0000 	mov.w	r0, #0
 801bd70:	4770      	bx	lr
 801bd72:	bf00      	nop

0801bd74 <selfrel_offset31>:
 801bd74:	6803      	ldr	r3, [r0, #0]
 801bd76:	005a      	lsls	r2, r3, #1
 801bd78:	bf4c      	ite	mi
 801bd7a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801bd7e:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 801bd82:	4418      	add	r0, r3
 801bd84:	4770      	bx	lr
 801bd86:	bf00      	nop

0801bd88 <search_EIT_table>:
 801bd88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd8c:	b083      	sub	sp, #12
 801bd8e:	b399      	cbz	r1, 801bdf8 <search_EIT_table+0x70>
 801bd90:	1e4b      	subs	r3, r1, #1
 801bd92:	4617      	mov	r7, r2
 801bd94:	4605      	mov	r5, r0
 801bd96:	9301      	str	r3, [sp, #4]
 801bd98:	4698      	mov	r8, r3
 801bd9a:	2600      	movs	r6, #0
 801bd9c:	eb06 0408 	add.w	r4, r6, r8
 801bda0:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 801bda4:	1064      	asrs	r4, r4, #1
 801bda6:	ea4f 0ac4 	mov.w	sl, r4, lsl #3
 801bdaa:	eb05 0b0a 	add.w	fp, r5, sl
 801bdae:	4658      	mov	r0, fp
 801bdb0:	f7ff ffe0 	bl	801bd74 <selfrel_offset31>
 801bdb4:	9b01      	ldr	r3, [sp, #4]
 801bdb6:	4681      	mov	r9, r0
 801bdb8:	42a3      	cmp	r3, r4
 801bdba:	f10a 0008 	add.w	r0, sl, #8
 801bdbe:	4428      	add	r0, r5
 801bdc0:	d00e      	beq.n	801bde0 <search_EIT_table+0x58>
 801bdc2:	f7ff ffd7 	bl	801bd74 <selfrel_offset31>
 801bdc6:	45b9      	cmp	r9, r7
 801bdc8:	f100 30ff 	add.w	r0, r0, #4294967295
 801bdcc:	d904      	bls.n	801bdd8 <search_EIT_table+0x50>
 801bdce:	42b4      	cmp	r4, r6
 801bdd0:	d00c      	beq.n	801bdec <search_EIT_table+0x64>
 801bdd2:	f104 38ff 	add.w	r8, r4, #4294967295
 801bdd6:	e7e1      	b.n	801bd9c <search_EIT_table+0x14>
 801bdd8:	42b8      	cmp	r0, r7
 801bdda:	d203      	bcs.n	801bde4 <search_EIT_table+0x5c>
 801bddc:	1c66      	adds	r6, r4, #1
 801bdde:	e7dd      	b.n	801bd9c <search_EIT_table+0x14>
 801bde0:	45b9      	cmp	r9, r7
 801bde2:	d8f4      	bhi.n	801bdce <search_EIT_table+0x46>
 801bde4:	4658      	mov	r0, fp
 801bde6:	b003      	add	sp, #12
 801bde8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bdec:	f04f 0b00 	mov.w	fp, #0
 801bdf0:	4658      	mov	r0, fp
 801bdf2:	b003      	add	sp, #12
 801bdf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bdf8:	468b      	mov	fp, r1
 801bdfa:	4658      	mov	r0, fp
 801bdfc:	b003      	add	sp, #12
 801bdfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be02:	bf00      	nop

0801be04 <__gnu_unwind_get_pr_addr>:
 801be04:	2801      	cmp	r0, #1
 801be06:	d007      	beq.n	801be18 <__gnu_unwind_get_pr_addr+0x14>
 801be08:	2802      	cmp	r0, #2
 801be0a:	d007      	beq.n	801be1c <__gnu_unwind_get_pr_addr+0x18>
 801be0c:	4b04      	ldr	r3, [pc, #16]	; (801be20 <__gnu_unwind_get_pr_addr+0x1c>)
 801be0e:	2800      	cmp	r0, #0
 801be10:	bf0c      	ite	eq
 801be12:	4618      	moveq	r0, r3
 801be14:	2000      	movne	r0, #0
 801be16:	4770      	bx	lr
 801be18:	4802      	ldr	r0, [pc, #8]	; (801be24 <__gnu_unwind_get_pr_addr+0x20>)
 801be1a:	4770      	bx	lr
 801be1c:	4802      	ldr	r0, [pc, #8]	; (801be28 <__gnu_unwind_get_pr_addr+0x24>)
 801be1e:	4770      	bx	lr
 801be20:	0801c511 	.word	0x0801c511
 801be24:	0801c515 	.word	0x0801c515
 801be28:	0801c519 	.word	0x0801c519

0801be2c <get_eit_entry>:
 801be2c:	b530      	push	{r4, r5, lr}
 801be2e:	4b24      	ldr	r3, [pc, #144]	; (801bec0 <get_eit_entry+0x94>)
 801be30:	b083      	sub	sp, #12
 801be32:	4604      	mov	r4, r0
 801be34:	1e8d      	subs	r5, r1, #2
 801be36:	b37b      	cbz	r3, 801be98 <get_eit_entry+0x6c>
 801be38:	4628      	mov	r0, r5
 801be3a:	a901      	add	r1, sp, #4
 801be3c:	f3af 8000 	nop.w
 801be40:	b320      	cbz	r0, 801be8c <get_eit_entry+0x60>
 801be42:	9901      	ldr	r1, [sp, #4]
 801be44:	462a      	mov	r2, r5
 801be46:	f7ff ff9f 	bl	801bd88 <search_EIT_table>
 801be4a:	4605      	mov	r5, r0
 801be4c:	b1f0      	cbz	r0, 801be8c <get_eit_entry+0x60>
 801be4e:	f7ff ff91 	bl	801bd74 <selfrel_offset31>
 801be52:	686b      	ldr	r3, [r5, #4]
 801be54:	64a0      	str	r0, [r4, #72]	; 0x48
 801be56:	2b01      	cmp	r3, #1
 801be58:	d012      	beq.n	801be80 <get_eit_entry+0x54>
 801be5a:	2b00      	cmp	r3, #0
 801be5c:	f105 0004 	add.w	r0, r5, #4
 801be60:	db20      	blt.n	801bea4 <get_eit_entry+0x78>
 801be62:	f7ff ff87 	bl	801bd74 <selfrel_offset31>
 801be66:	2300      	movs	r3, #0
 801be68:	64e0      	str	r0, [r4, #76]	; 0x4c
 801be6a:	6523      	str	r3, [r4, #80]	; 0x50
 801be6c:	6803      	ldr	r3, [r0, #0]
 801be6e:	2b00      	cmp	r3, #0
 801be70:	db1c      	blt.n	801beac <get_eit_entry+0x80>
 801be72:	f7ff ff7f 	bl	801bd74 <selfrel_offset31>
 801be76:	2300      	movs	r3, #0
 801be78:	6120      	str	r0, [r4, #16]
 801be7a:	4618      	mov	r0, r3
 801be7c:	b003      	add	sp, #12
 801be7e:	bd30      	pop	{r4, r5, pc}
 801be80:	2300      	movs	r3, #0
 801be82:	6123      	str	r3, [r4, #16]
 801be84:	2305      	movs	r3, #5
 801be86:	4618      	mov	r0, r3
 801be88:	b003      	add	sp, #12
 801be8a:	bd30      	pop	{r4, r5, pc}
 801be8c:	2300      	movs	r3, #0
 801be8e:	6123      	str	r3, [r4, #16]
 801be90:	2309      	movs	r3, #9
 801be92:	4618      	mov	r0, r3
 801be94:	b003      	add	sp, #12
 801be96:	bd30      	pop	{r4, r5, pc}
 801be98:	490a      	ldr	r1, [pc, #40]	; (801bec4 <get_eit_entry+0x98>)
 801be9a:	480b      	ldr	r0, [pc, #44]	; (801bec8 <get_eit_entry+0x9c>)
 801be9c:	1a09      	subs	r1, r1, r0
 801be9e:	10c9      	asrs	r1, r1, #3
 801bea0:	9101      	str	r1, [sp, #4]
 801bea2:	e7cf      	b.n	801be44 <get_eit_entry+0x18>
 801bea4:	2301      	movs	r3, #1
 801bea6:	64e0      	str	r0, [r4, #76]	; 0x4c
 801bea8:	6523      	str	r3, [r4, #80]	; 0x50
 801beaa:	e7df      	b.n	801be6c <get_eit_entry+0x40>
 801beac:	f3c3 6003 	ubfx	r0, r3, #24, #4
 801beb0:	f7ff ffa8 	bl	801be04 <__gnu_unwind_get_pr_addr>
 801beb4:	2800      	cmp	r0, #0
 801beb6:	6120      	str	r0, [r4, #16]
 801beb8:	bf0c      	ite	eq
 801beba:	2309      	moveq	r3, #9
 801bebc:	2300      	movne	r3, #0
 801bebe:	e7dc      	b.n	801be7a <get_eit_entry+0x4e>
 801bec0:	00000000 	.word	0x00000000
 801bec4:	0801d510 	.word	0x0801d510
 801bec8:	0801d448 	.word	0x0801d448

0801becc <restore_non_core_regs>:
 801becc:	6803      	ldr	r3, [r0, #0]
 801bece:	07da      	lsls	r2, r3, #31
 801bed0:	b510      	push	{r4, lr}
 801bed2:	4604      	mov	r4, r0
 801bed4:	d406      	bmi.n	801bee4 <restore_non_core_regs+0x18>
 801bed6:	079b      	lsls	r3, r3, #30
 801bed8:	f100 0048 	add.w	r0, r0, #72	; 0x48
 801bedc:	d509      	bpl.n	801bef2 <restore_non_core_regs+0x26>
 801bede:	f000 fc85 	bl	801c7ec <__gnu_Unwind_Restore_VFP_D>
 801bee2:	6823      	ldr	r3, [r4, #0]
 801bee4:	0759      	lsls	r1, r3, #29
 801bee6:	d509      	bpl.n	801befc <restore_non_core_regs+0x30>
 801bee8:	071a      	lsls	r2, r3, #28
 801beea:	d50e      	bpl.n	801bf0a <restore_non_core_regs+0x3e>
 801beec:	06db      	lsls	r3, r3, #27
 801beee:	d513      	bpl.n	801bf18 <restore_non_core_regs+0x4c>
 801bef0:	bd10      	pop	{r4, pc}
 801bef2:	f000 fc73 	bl	801c7dc <__gnu_Unwind_Restore_VFP>
 801bef6:	6823      	ldr	r3, [r4, #0]
 801bef8:	0759      	lsls	r1, r3, #29
 801befa:	d4f5      	bmi.n	801bee8 <restore_non_core_regs+0x1c>
 801befc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801bf00:	f000 fc7c 	bl	801c7fc <__gnu_Unwind_Restore_VFP_D_16_to_31>
 801bf04:	6823      	ldr	r3, [r4, #0]
 801bf06:	071a      	lsls	r2, r3, #28
 801bf08:	d4f0      	bmi.n	801beec <restore_non_core_regs+0x20>
 801bf0a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 801bf0e:	f000 fc7d 	bl	801c80c <__gnu_Unwind_Restore_WMMXD>
 801bf12:	6823      	ldr	r3, [r4, #0]
 801bf14:	06db      	lsls	r3, r3, #27
 801bf16:	d4eb      	bmi.n	801bef0 <restore_non_core_regs+0x24>
 801bf18:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 801bf1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bf20:	f000 bcb8 	b.w	801c894 <__gnu_Unwind_Restore_WMMXC>

0801bf24 <_Unwind_decode_typeinfo_ptr.isra.0>:
 801bf24:	6803      	ldr	r3, [r0, #0]
 801bf26:	b10b      	cbz	r3, 801bf2c <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
 801bf28:	4418      	add	r0, r3
 801bf2a:	4770      	bx	lr
 801bf2c:	4618      	mov	r0, r3
 801bf2e:	4770      	bx	lr

0801bf30 <__gnu_unwind_24bit.isra.1>:
 801bf30:	2009      	movs	r0, #9
 801bf32:	4770      	bx	lr

0801bf34 <_Unwind_DebugHook>:
 801bf34:	4770      	bx	lr
 801bf36:	bf00      	nop

0801bf38 <unwind_phase2>:
 801bf38:	b570      	push	{r4, r5, r6, lr}
 801bf3a:	4604      	mov	r4, r0
 801bf3c:	460d      	mov	r5, r1
 801bf3e:	e008      	b.n	801bf52 <unwind_phase2+0x1a>
 801bf40:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 801bf42:	6163      	str	r3, [r4, #20]
 801bf44:	2001      	movs	r0, #1
 801bf46:	6923      	ldr	r3, [r4, #16]
 801bf48:	4621      	mov	r1, r4
 801bf4a:	462a      	mov	r2, r5
 801bf4c:	4798      	blx	r3
 801bf4e:	2808      	cmp	r0, #8
 801bf50:	d108      	bne.n	801bf64 <unwind_phase2+0x2c>
 801bf52:	4620      	mov	r0, r4
 801bf54:	6c29      	ldr	r1, [r5, #64]	; 0x40
 801bf56:	f7ff ff69 	bl	801be2c <get_eit_entry>
 801bf5a:	4606      	mov	r6, r0
 801bf5c:	2800      	cmp	r0, #0
 801bf5e:	d0ef      	beq.n	801bf40 <unwind_phase2+0x8>
 801bf60:	f7fa fbf0 	bl	8016744 <abort>
 801bf64:	2807      	cmp	r0, #7
 801bf66:	d1fb      	bne.n	801bf60 <unwind_phase2+0x28>
 801bf68:	4630      	mov	r0, r6
 801bf6a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 801bf6c:	f7ff ffe2 	bl	801bf34 <_Unwind_DebugHook>
 801bf70:	1d28      	adds	r0, r5, #4
 801bf72:	f000 fc27 	bl	801c7c4 <__restore_core_regs>
 801bf76:	bf00      	nop

0801bf78 <unwind_phase2_forced>:
 801bf78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bf7c:	1d0c      	adds	r4, r1, #4
 801bf7e:	4606      	mov	r6, r0
 801bf80:	4617      	mov	r7, r2
 801bf82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bf84:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 801bf88:	ad03      	add	r5, sp, #12
 801bf8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801bf8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bf8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801bf90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bf92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801bf94:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801bf98:	ac02      	add	r4, sp, #8
 801bf9a:	f04f 0e00 	mov.w	lr, #0
 801bf9e:	f8d6 800c 	ldr.w	r8, [r6, #12]
 801bfa2:	f8d6 9018 	ldr.w	r9, [r6, #24]
 801bfa6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 801bfaa:	4630      	mov	r0, r6
 801bfac:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801bfae:	f8c4 e000 	str.w	lr, [r4]
 801bfb2:	f7ff ff3b 	bl	801be2c <get_eit_entry>
 801bfb6:	2f00      	cmp	r7, #0
 801bfb8:	4605      	mov	r5, r0
 801bfba:	bf0c      	ite	eq
 801bfbc:	2709      	moveq	r7, #9
 801bfbe:	270a      	movne	r7, #10
 801bfc0:	b17d      	cbz	r5, 801bfe2 <unwind_phase2_forced+0x6a>
 801bfc2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801bfc4:	f047 0110 	orr.w	r1, r7, #16
 801bfc8:	e88d 0210 	stmia.w	sp, {r4, r9}
 801bfcc:	2001      	movs	r0, #1
 801bfce:	6463      	str	r3, [r4, #68]	; 0x44
 801bfd0:	4632      	mov	r2, r6
 801bfd2:	4633      	mov	r3, r6
 801bfd4:	47c0      	blx	r8
 801bfd6:	bb78      	cbnz	r0, 801c038 <unwind_phase2_forced+0xc0>
 801bfd8:	4628      	mov	r0, r5
 801bfda:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 801bfde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bfe2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801bfe4:	6173      	str	r3, [r6, #20]
 801bfe6:	4621      	mov	r1, r4
 801bfe8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801bfec:	a87a      	add	r0, sp, #488	; 0x1e8
 801bfee:	f7fa fe10 	bl	8016c12 <memcpy>
 801bff2:	6933      	ldr	r3, [r6, #16]
 801bff4:	4631      	mov	r1, r6
 801bff6:	aa7a      	add	r2, sp, #488	; 0x1e8
 801bff8:	4638      	mov	r0, r7
 801bffa:	4798      	blx	r3
 801bffc:	9b88      	ldr	r3, [sp, #544]	; 0x220
 801bffe:	4682      	mov	sl, r0
 801c000:	e88d 0210 	stmia.w	sp, {r4, r9}
 801c004:	4639      	mov	r1, r7
 801c006:	6463      	str	r3, [r4, #68]	; 0x44
 801c008:	2001      	movs	r0, #1
 801c00a:	4632      	mov	r2, r6
 801c00c:	4633      	mov	r3, r6
 801c00e:	47c0      	blx	r8
 801c010:	b990      	cbnz	r0, 801c038 <unwind_phase2_forced+0xc0>
 801c012:	4620      	mov	r0, r4
 801c014:	a97a      	add	r1, sp, #488	; 0x1e8
 801c016:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801c01a:	f7fa fdfa 	bl	8016c12 <memcpy>
 801c01e:	f1ba 0f08 	cmp.w	sl, #8
 801c022:	d106      	bne.n	801c032 <unwind_phase2_forced+0xba>
 801c024:	4630      	mov	r0, r6
 801c026:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801c028:	f7ff ff00 	bl	801be2c <get_eit_entry>
 801c02c:	2709      	movs	r7, #9
 801c02e:	4605      	mov	r5, r0
 801c030:	e7c6      	b.n	801bfc0 <unwind_phase2_forced+0x48>
 801c032:	f1ba 0f07 	cmp.w	sl, #7
 801c036:	d004      	beq.n	801c042 <unwind_phase2_forced+0xca>
 801c038:	2009      	movs	r0, #9
 801c03a:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 801c03e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c042:	4628      	mov	r0, r5
 801c044:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801c046:	f7ff ff75 	bl	801bf34 <_Unwind_DebugHook>
 801c04a:	a803      	add	r0, sp, #12
 801c04c:	f000 fbba 	bl	801c7c4 <__restore_core_regs>

0801c050 <_Unwind_GetCFA>:
 801c050:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801c052:	4770      	bx	lr

0801c054 <__gnu_Unwind_RaiseException>:
 801c054:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c056:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 801c058:	640b      	str	r3, [r1, #64]	; 0x40
 801c05a:	1d0e      	adds	r6, r1, #4
 801c05c:	460f      	mov	r7, r1
 801c05e:	4604      	mov	r4, r0
 801c060:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801c062:	b0f9      	sub	sp, #484	; 0x1e4
 801c064:	ad01      	add	r5, sp, #4
 801c066:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801c068:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801c06a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801c06c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801c06e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801c070:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 801c074:	f04f 36ff 	mov.w	r6, #4294967295
 801c078:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 801c07c:	9600      	str	r6, [sp, #0]
 801c07e:	e006      	b.n	801c08e <__gnu_Unwind_RaiseException+0x3a>
 801c080:	6923      	ldr	r3, [r4, #16]
 801c082:	4621      	mov	r1, r4
 801c084:	466a      	mov	r2, sp
 801c086:	4798      	blx	r3
 801c088:	2808      	cmp	r0, #8
 801c08a:	4605      	mov	r5, r0
 801c08c:	d108      	bne.n	801c0a0 <__gnu_Unwind_RaiseException+0x4c>
 801c08e:	4620      	mov	r0, r4
 801c090:	9910      	ldr	r1, [sp, #64]	; 0x40
 801c092:	f7ff fecb 	bl	801be2c <get_eit_entry>
 801c096:	2800      	cmp	r0, #0
 801c098:	d0f2      	beq.n	801c080 <__gnu_Unwind_RaiseException+0x2c>
 801c09a:	2009      	movs	r0, #9
 801c09c:	b079      	add	sp, #484	; 0x1e4
 801c09e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c0a0:	4668      	mov	r0, sp
 801c0a2:	f7ff ff13 	bl	801becc <restore_non_core_regs>
 801c0a6:	2d06      	cmp	r5, #6
 801c0a8:	d1f7      	bne.n	801c09a <__gnu_Unwind_RaiseException+0x46>
 801c0aa:	4620      	mov	r0, r4
 801c0ac:	4639      	mov	r1, r7
 801c0ae:	f7ff ff43 	bl	801bf38 <unwind_phase2>
 801c0b2:	bf00      	nop

0801c0b4 <__gnu_Unwind_ForcedUnwind>:
 801c0b4:	b430      	push	{r4, r5}
 801c0b6:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 801c0b8:	60c1      	str	r1, [r0, #12]
 801c0ba:	6182      	str	r2, [r0, #24]
 801c0bc:	4619      	mov	r1, r3
 801c0be:	641d      	str	r5, [r3, #64]	; 0x40
 801c0c0:	2200      	movs	r2, #0
 801c0c2:	bc30      	pop	{r4, r5}
 801c0c4:	e758      	b.n	801bf78 <unwind_phase2_forced>
 801c0c6:	bf00      	nop

0801c0c8 <__gnu_Unwind_Resume>:
 801c0c8:	b570      	push	{r4, r5, r6, lr}
 801c0ca:	68c6      	ldr	r6, [r0, #12]
 801c0cc:	6943      	ldr	r3, [r0, #20]
 801c0ce:	640b      	str	r3, [r1, #64]	; 0x40
 801c0d0:	4604      	mov	r4, r0
 801c0d2:	460d      	mov	r5, r1
 801c0d4:	b126      	cbz	r6, 801c0e0 <__gnu_Unwind_Resume+0x18>
 801c0d6:	2201      	movs	r2, #1
 801c0d8:	f7ff ff4e 	bl	801bf78 <unwind_phase2_forced>
 801c0dc:	f7fa fb32 	bl	8016744 <abort>
 801c0e0:	6903      	ldr	r3, [r0, #16]
 801c0e2:	4621      	mov	r1, r4
 801c0e4:	2002      	movs	r0, #2
 801c0e6:	462a      	mov	r2, r5
 801c0e8:	4798      	blx	r3
 801c0ea:	2807      	cmp	r0, #7
 801c0ec:	d007      	beq.n	801c0fe <__gnu_Unwind_Resume+0x36>
 801c0ee:	2808      	cmp	r0, #8
 801c0f0:	d103      	bne.n	801c0fa <__gnu_Unwind_Resume+0x32>
 801c0f2:	4620      	mov	r0, r4
 801c0f4:	4629      	mov	r1, r5
 801c0f6:	f7ff ff1f 	bl	801bf38 <unwind_phase2>
 801c0fa:	f7fa fb23 	bl	8016744 <abort>
 801c0fe:	4630      	mov	r0, r6
 801c100:	6c29      	ldr	r1, [r5, #64]	; 0x40
 801c102:	f7ff ff17 	bl	801bf34 <_Unwind_DebugHook>
 801c106:	1d28      	adds	r0, r5, #4
 801c108:	f000 fb5c 	bl	801c7c4 <__restore_core_regs>

0801c10c <__gnu_Unwind_Resume_or_Rethrow>:
 801c10c:	68c2      	ldr	r2, [r0, #12]
 801c10e:	b11a      	cbz	r2, 801c118 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 801c110:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 801c112:	640a      	str	r2, [r1, #64]	; 0x40
 801c114:	2200      	movs	r2, #0
 801c116:	e72f      	b.n	801bf78 <unwind_phase2_forced>
 801c118:	e79c      	b.n	801c054 <__gnu_Unwind_RaiseException>
 801c11a:	bf00      	nop

0801c11c <_Unwind_Complete>:
 801c11c:	4770      	bx	lr
 801c11e:	bf00      	nop

0801c120 <_Unwind_DeleteException>:
 801c120:	6883      	ldr	r3, [r0, #8]
 801c122:	b113      	cbz	r3, 801c12a <_Unwind_DeleteException+0xa>
 801c124:	4601      	mov	r1, r0
 801c126:	2001      	movs	r0, #1
 801c128:	4718      	bx	r3
 801c12a:	4770      	bx	lr

0801c12c <_Unwind_VRS_Get>:
 801c12c:	b500      	push	{lr}
 801c12e:	2904      	cmp	r1, #4
 801c130:	d807      	bhi.n	801c142 <_Unwind_VRS_Get+0x16>
 801c132:	e8df f001 	tbb	[pc, r1]
 801c136:	0903      	.short	0x0903
 801c138:	0906      	.short	0x0906
 801c13a:	09          	.byte	0x09
 801c13b:	00          	.byte	0x00
 801c13c:	b90b      	cbnz	r3, 801c142 <_Unwind_VRS_Get+0x16>
 801c13e:	2a0f      	cmp	r2, #15
 801c140:	d905      	bls.n	801c14e <_Unwind_VRS_Get+0x22>
 801c142:	2002      	movs	r0, #2
 801c144:	f85d fb04 	ldr.w	pc, [sp], #4
 801c148:	2001      	movs	r0, #1
 801c14a:	f85d fb04 	ldr.w	pc, [sp], #4
 801c14e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801c152:	4618      	mov	r0, r3
 801c154:	6853      	ldr	r3, [r2, #4]
 801c156:	9a01      	ldr	r2, [sp, #4]
 801c158:	6013      	str	r3, [r2, #0]
 801c15a:	f85d fb04 	ldr.w	pc, [sp], #4
 801c15e:	bf00      	nop

0801c160 <_Unwind_GetGR>:
 801c160:	b500      	push	{lr}
 801c162:	b085      	sub	sp, #20
 801c164:	460a      	mov	r2, r1
 801c166:	ab03      	add	r3, sp, #12
 801c168:	2100      	movs	r1, #0
 801c16a:	9300      	str	r3, [sp, #0]
 801c16c:	460b      	mov	r3, r1
 801c16e:	f7ff ffdd 	bl	801c12c <_Unwind_VRS_Get>
 801c172:	9803      	ldr	r0, [sp, #12]
 801c174:	b005      	add	sp, #20
 801c176:	f85d fb04 	ldr.w	pc, [sp], #4
 801c17a:	bf00      	nop

0801c17c <_Unwind_VRS_Set>:
 801c17c:	b500      	push	{lr}
 801c17e:	2904      	cmp	r1, #4
 801c180:	d807      	bhi.n	801c192 <_Unwind_VRS_Set+0x16>
 801c182:	e8df f001 	tbb	[pc, r1]
 801c186:	0903      	.short	0x0903
 801c188:	0906      	.short	0x0906
 801c18a:	09          	.byte	0x09
 801c18b:	00          	.byte	0x00
 801c18c:	b90b      	cbnz	r3, 801c192 <_Unwind_VRS_Set+0x16>
 801c18e:	2a0f      	cmp	r2, #15
 801c190:	d905      	bls.n	801c19e <_Unwind_VRS_Set+0x22>
 801c192:	2002      	movs	r0, #2
 801c194:	f85d fb04 	ldr.w	pc, [sp], #4
 801c198:	2001      	movs	r0, #1
 801c19a:	f85d fb04 	ldr.w	pc, [sp], #4
 801c19e:	9901      	ldr	r1, [sp, #4]
 801c1a0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801c1a4:	6809      	ldr	r1, [r1, #0]
 801c1a6:	6051      	str	r1, [r2, #4]
 801c1a8:	4618      	mov	r0, r3
 801c1aa:	f85d fb04 	ldr.w	pc, [sp], #4
 801c1ae:	bf00      	nop

0801c1b0 <_Unwind_SetGR>:
 801c1b0:	b510      	push	{r4, lr}
 801c1b2:	b084      	sub	sp, #16
 801c1b4:	ab04      	add	r3, sp, #16
 801c1b6:	460c      	mov	r4, r1
 801c1b8:	f843 2d04 	str.w	r2, [r3, #-4]!
 801c1bc:	2100      	movs	r1, #0
 801c1be:	9300      	str	r3, [sp, #0]
 801c1c0:	4622      	mov	r2, r4
 801c1c2:	460b      	mov	r3, r1
 801c1c4:	f7ff ffda 	bl	801c17c <_Unwind_VRS_Set>
 801c1c8:	b004      	add	sp, #16
 801c1ca:	bd10      	pop	{r4, pc}

0801c1cc <__gnu_Unwind_Backtrace>:
 801c1cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c1ce:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 801c1d0:	6413      	str	r3, [r2, #64]	; 0x40
 801c1d2:	1d15      	adds	r5, r2, #4
 801c1d4:	4607      	mov	r7, r0
 801c1d6:	460e      	mov	r6, r1
 801c1d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c1da:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 801c1de:	ac17      	add	r4, sp, #92	; 0x5c
 801c1e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c1e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c1e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c1e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c1e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c1ea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801c1ee:	f04f 35ff 	mov.w	r5, #4294967295
 801c1f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801c1f6:	9516      	str	r5, [sp, #88]	; 0x58
 801c1f8:	e010      	b.n	801c21c <__gnu_Unwind_Backtrace+0x50>
 801c1fa:	a816      	add	r0, sp, #88	; 0x58
 801c1fc:	f7ff ffd8 	bl	801c1b0 <_Unwind_SetGR>
 801c200:	4631      	mov	r1, r6
 801c202:	a816      	add	r0, sp, #88	; 0x58
 801c204:	47b8      	blx	r7
 801c206:	4669      	mov	r1, sp
 801c208:	aa16      	add	r2, sp, #88	; 0x58
 801c20a:	b978      	cbnz	r0, 801c22c <__gnu_Unwind_Backtrace+0x60>
 801c20c:	9b04      	ldr	r3, [sp, #16]
 801c20e:	2008      	movs	r0, #8
 801c210:	4798      	blx	r3
 801c212:	2805      	cmp	r0, #5
 801c214:	4604      	mov	r4, r0
 801c216:	d00a      	beq.n	801c22e <__gnu_Unwind_Backtrace+0x62>
 801c218:	2809      	cmp	r0, #9
 801c21a:	d007      	beq.n	801c22c <__gnu_Unwind_Backtrace+0x60>
 801c21c:	9926      	ldr	r1, [sp, #152]	; 0x98
 801c21e:	4668      	mov	r0, sp
 801c220:	f7ff fe04 	bl	801be2c <get_eit_entry>
 801c224:	466a      	mov	r2, sp
 801c226:	210c      	movs	r1, #12
 801c228:	2800      	cmp	r0, #0
 801c22a:	d0e6      	beq.n	801c1fa <__gnu_Unwind_Backtrace+0x2e>
 801c22c:	2409      	movs	r4, #9
 801c22e:	a816      	add	r0, sp, #88	; 0x58
 801c230:	f7ff fe4c 	bl	801becc <restore_non_core_regs>
 801c234:	4620      	mov	r0, r4
 801c236:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 801c23a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c23c <__gnu_unwind_pr_common>:
 801c23c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c240:	460d      	mov	r5, r1
 801c242:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 801c244:	b08b      	sub	sp, #44	; 0x2c
 801c246:	1d0c      	adds	r4, r1, #4
 801c248:	6809      	ldr	r1, [r1, #0]
 801c24a:	9107      	str	r1, [sp, #28]
 801c24c:	4690      	mov	r8, r2
 801c24e:	9408      	str	r4, [sp, #32]
 801c250:	f000 0903 	and.w	r9, r0, #3
 801c254:	461e      	mov	r6, r3
 801c256:	2b00      	cmp	r3, #0
 801c258:	d164      	bne.n	801c324 <__gnu_unwind_pr_common+0xe8>
 801c25a:	0209      	lsls	r1, r1, #8
 801c25c:	2303      	movs	r3, #3
 801c25e:	9107      	str	r1, [sp, #28]
 801c260:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 801c264:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801c268:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801c26a:	f1b9 0f02 	cmp.w	r9, #2
 801c26e:	bf08      	it	eq
 801c270:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 801c272:	f013 0301 	ands.w	r3, r3, #1
 801c276:	d143      	bne.n	801c300 <__gnu_unwind_pr_common+0xc4>
 801c278:	f000 0008 	and.w	r0, r0, #8
 801c27c:	b2c2      	uxtb	r2, r0
 801c27e:	9203      	str	r2, [sp, #12]
 801c280:	9301      	str	r3, [sp, #4]
 801c282:	6827      	ldr	r7, [r4, #0]
 801c284:	2f00      	cmp	r7, #0
 801c286:	d03d      	beq.n	801c304 <__gnu_unwind_pr_common+0xc8>
 801c288:	2e02      	cmp	r6, #2
 801c28a:	d047      	beq.n	801c31c <__gnu_unwind_pr_common+0xe0>
 801c28c:	8827      	ldrh	r7, [r4, #0]
 801c28e:	f8b4 a002 	ldrh.w	sl, [r4, #2]
 801c292:	3404      	adds	r4, #4
 801c294:	6cab      	ldr	r3, [r5, #72]	; 0x48
 801c296:	f02a 0b01 	bic.w	fp, sl, #1
 801c29a:	4640      	mov	r0, r8
 801c29c:	210f      	movs	r1, #15
 801c29e:	449b      	add	fp, r3
 801c2a0:	f7ff ff5e 	bl	801c160 <_Unwind_GetGR>
 801c2a4:	4583      	cmp	fp, r0
 801c2a6:	d837      	bhi.n	801c318 <__gnu_unwind_pr_common+0xdc>
 801c2a8:	f027 0301 	bic.w	r3, r7, #1
 801c2ac:	449b      	add	fp, r3
 801c2ae:	4558      	cmp	r0, fp
 801c2b0:	bf2c      	ite	cs
 801c2b2:	2000      	movcs	r0, #0
 801c2b4:	2001      	movcc	r0, #1
 801c2b6:	f00a 0a01 	and.w	sl, sl, #1
 801c2ba:	f007 0701 	and.w	r7, r7, #1
 801c2be:	ea47 0a4a 	orr.w	sl, r7, sl, lsl #1
 801c2c2:	f1ba 0f01 	cmp.w	sl, #1
 801c2c6:	d043      	beq.n	801c350 <__gnu_unwind_pr_common+0x114>
 801c2c8:	d33a      	bcc.n	801c340 <__gnu_unwind_pr_common+0x104>
 801c2ca:	f1ba 0f02 	cmp.w	sl, #2
 801c2ce:	d11f      	bne.n	801c310 <__gnu_unwind_pr_common+0xd4>
 801c2d0:	6823      	ldr	r3, [r4, #0]
 801c2d2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801c2d6:	9202      	str	r2, [sp, #8]
 801c2d8:	f1b9 0f00 	cmp.w	r9, #0
 801c2dc:	d17b      	bne.n	801c3d6 <__gnu_unwind_pr_common+0x19a>
 801c2de:	b138      	cbz	r0, 801c2f0 <__gnu_unwind_pr_common+0xb4>
 801c2e0:	9a03      	ldr	r2, [sp, #12]
 801c2e2:	2a00      	cmp	r2, #0
 801c2e4:	f000 8083 	beq.w	801c3ee <__gnu_unwind_pr_common+0x1b2>
 801c2e8:	9a02      	ldr	r2, [sp, #8]
 801c2ea:	2a00      	cmp	r2, #0
 801c2ec:	f000 80a6 	beq.w	801c43c <__gnu_unwind_pr_common+0x200>
 801c2f0:	2b00      	cmp	r3, #0
 801c2f2:	db7a      	blt.n	801c3ea <__gnu_unwind_pr_common+0x1ae>
 801c2f4:	9b02      	ldr	r3, [sp, #8]
 801c2f6:	f103 0a01 	add.w	sl, r3, #1
 801c2fa:	eb04 048a 	add.w	r4, r4, sl, lsl #2
 801c2fe:	e7c0      	b.n	801c282 <__gnu_unwind_pr_common+0x46>
 801c300:	2300      	movs	r3, #0
 801c302:	9301      	str	r3, [sp, #4]
 801c304:	2e02      	cmp	r6, #2
 801c306:	dd40      	ble.n	801c38a <__gnu_unwind_pr_common+0x14e>
 801c308:	f7ff fe12 	bl	801bf30 <__gnu_unwind_24bit.isra.1>
 801c30c:	2800      	cmp	r0, #0
 801c30e:	d042      	beq.n	801c396 <__gnu_unwind_pr_common+0x15a>
 801c310:	2009      	movs	r0, #9
 801c312:	b00b      	add	sp, #44	; 0x2c
 801c314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c318:	2000      	movs	r0, #0
 801c31a:	e7cc      	b.n	801c2b6 <__gnu_unwind_pr_common+0x7a>
 801c31c:	f8d4 a004 	ldr.w	sl, [r4, #4]
 801c320:	3408      	adds	r4, #8
 801c322:	e7b7      	b.n	801c294 <__gnu_unwind_pr_common+0x58>
 801c324:	2b02      	cmp	r3, #2
 801c326:	dc9f      	bgt.n	801c268 <__gnu_unwind_pr_common+0x2c>
 801c328:	0c0b      	lsrs	r3, r1, #16
 801c32a:	b2df      	uxtb	r7, r3
 801c32c:	0409      	lsls	r1, r1, #16
 801c32e:	2202      	movs	r2, #2
 801c330:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 801c334:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 801c338:	9107      	str	r1, [sp, #28]
 801c33a:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 801c33e:	e793      	b.n	801c268 <__gnu_unwind_pr_common+0x2c>
 801c340:	f1b9 0f00 	cmp.w	r9, #0
 801c344:	d002      	beq.n	801c34c <__gnu_unwind_pr_common+0x110>
 801c346:	2800      	cmp	r0, #0
 801c348:	f040 80ad 	bne.w	801c4a6 <__gnu_unwind_pr_common+0x26a>
 801c34c:	3404      	adds	r4, #4
 801c34e:	e798      	b.n	801c282 <__gnu_unwind_pr_common+0x46>
 801c350:	f1b9 0f00 	cmp.w	r9, #0
 801c354:	d126      	bne.n	801c3a4 <__gnu_unwind_pr_common+0x168>
 801c356:	b1b0      	cbz	r0, 801c386 <__gnu_unwind_pr_common+0x14a>
 801c358:	e894 000c 	ldmia.w	r4, {r2, r3}
 801c35c:	0fd7      	lsrs	r7, r2, #31
 801c35e:	1c9a      	adds	r2, r3, #2
 801c360:	d0d6      	beq.n	801c310 <__gnu_unwind_pr_common+0xd4>
 801c362:	f105 0258 	add.w	r2, r5, #88	; 0x58
 801c366:	3301      	adds	r3, #1
 801c368:	9206      	str	r2, [sp, #24]
 801c36a:	f000 8092 	beq.w	801c492 <__gnu_unwind_pr_common+0x256>
 801c36e:	1d20      	adds	r0, r4, #4
 801c370:	f7ff fdd8 	bl	801bf24 <_Unwind_decode_typeinfo_ptr.isra.0>
 801c374:	463a      	mov	r2, r7
 801c376:	4601      	mov	r1, r0
 801c378:	ab06      	add	r3, sp, #24
 801c37a:	4628      	mov	r0, r5
 801c37c:	f3af 8000 	nop.w
 801c380:	2800      	cmp	r0, #0
 801c382:	f040 80b5 	bne.w	801c4f0 <__gnu_unwind_pr_common+0x2b4>
 801c386:	3408      	adds	r4, #8
 801c388:	e77b      	b.n	801c282 <__gnu_unwind_pr_common+0x46>
 801c38a:	4640      	mov	r0, r8
 801c38c:	a907      	add	r1, sp, #28
 801c38e:	f000 fb1b 	bl	801c9c8 <__gnu_unwind_execute>
 801c392:	2800      	cmp	r0, #0
 801c394:	d1bc      	bne.n	801c310 <__gnu_unwind_pr_common+0xd4>
 801c396:	9b01      	ldr	r3, [sp, #4]
 801c398:	2b00      	cmp	r3, #0
 801c39a:	d159      	bne.n	801c450 <__gnu_unwind_pr_common+0x214>
 801c39c:	2008      	movs	r0, #8
 801c39e:	b00b      	add	sp, #44	; 0x2c
 801c3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c3a4:	4640      	mov	r0, r8
 801c3a6:	210d      	movs	r1, #13
 801c3a8:	6a2f      	ldr	r7, [r5, #32]
 801c3aa:	f7ff fed9 	bl	801c160 <_Unwind_GetGR>
 801c3ae:	4287      	cmp	r7, r0
 801c3b0:	d1e9      	bne.n	801c386 <__gnu_unwind_pr_common+0x14a>
 801c3b2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 801c3b4:	429c      	cmp	r4, r3
 801c3b6:	d1e6      	bne.n	801c386 <__gnu_unwind_pr_common+0x14a>
 801c3b8:	4620      	mov	r0, r4
 801c3ba:	f7ff fcdb 	bl	801bd74 <selfrel_offset31>
 801c3be:	210f      	movs	r1, #15
 801c3c0:	4602      	mov	r2, r0
 801c3c2:	4640      	mov	r0, r8
 801c3c4:	f7ff fef4 	bl	801c1b0 <_Unwind_SetGR>
 801c3c8:	4640      	mov	r0, r8
 801c3ca:	462a      	mov	r2, r5
 801c3cc:	2100      	movs	r1, #0
 801c3ce:	f7ff feef 	bl	801c1b0 <_Unwind_SetGR>
 801c3d2:	2007      	movs	r0, #7
 801c3d4:	e79d      	b.n	801c312 <__gnu_unwind_pr_common+0xd6>
 801c3d6:	4640      	mov	r0, r8
 801c3d8:	210d      	movs	r1, #13
 801c3da:	6a2f      	ldr	r7, [r5, #32]
 801c3dc:	f7ff fec0 	bl	801c160 <_Unwind_GetGR>
 801c3e0:	4287      	cmp	r7, r0
 801c3e2:	d045      	beq.n	801c470 <__gnu_unwind_pr_common+0x234>
 801c3e4:	6823      	ldr	r3, [r4, #0]
 801c3e6:	2b00      	cmp	r3, #0
 801c3e8:	da84      	bge.n	801c2f4 <__gnu_unwind_pr_common+0xb8>
 801c3ea:	3404      	adds	r4, #4
 801c3ec:	e782      	b.n	801c2f4 <__gnu_unwind_pr_common+0xb8>
 801c3ee:	9b02      	ldr	r3, [sp, #8]
 801c3f0:	b323      	cbz	r3, 801c43c <__gnu_unwind_pr_common+0x200>
 801c3f2:	f105 0358 	add.w	r3, r5, #88	; 0x58
 801c3f6:	9605      	str	r6, [sp, #20]
 801c3f8:	f104 0a04 	add.w	sl, r4, #4
 801c3fc:	9f03      	ldr	r7, [sp, #12]
 801c3fe:	f8dd b008 	ldr.w	fp, [sp, #8]
 801c402:	f8cd 9010 	str.w	r9, [sp, #16]
 801c406:	461e      	mov	r6, r3
 801c408:	e002      	b.n	801c410 <__gnu_unwind_pr_common+0x1d4>
 801c40a:	45d9      	cmp	r9, fp
 801c40c:	464f      	mov	r7, r9
 801c40e:	d015      	beq.n	801c43c <__gnu_unwind_pr_common+0x200>
 801c410:	4650      	mov	r0, sl
 801c412:	9606      	str	r6, [sp, #24]
 801c414:	f7ff fd86 	bl	801bf24 <_Unwind_decode_typeinfo_ptr.isra.0>
 801c418:	2200      	movs	r2, #0
 801c41a:	4601      	mov	r1, r0
 801c41c:	ab06      	add	r3, sp, #24
 801c41e:	4628      	mov	r0, r5
 801c420:	f3af 8000 	nop.w
 801c424:	f107 0901 	add.w	r9, r7, #1
 801c428:	f10a 0a04 	add.w	sl, sl, #4
 801c42c:	2800      	cmp	r0, #0
 801c42e:	d0ec      	beq.n	801c40a <__gnu_unwind_pr_common+0x1ce>
 801c430:	9b02      	ldr	r3, [sp, #8]
 801c432:	f8dd 9010 	ldr.w	r9, [sp, #16]
 801c436:	9e05      	ldr	r6, [sp, #20]
 801c438:	429f      	cmp	r7, r3
 801c43a:	d1d3      	bne.n	801c3e4 <__gnu_unwind_pr_common+0x1a8>
 801c43c:	4640      	mov	r0, r8
 801c43e:	210d      	movs	r1, #13
 801c440:	f7ff fe8e 	bl	801c160 <_Unwind_GetGR>
 801c444:	9b06      	ldr	r3, [sp, #24]
 801c446:	6228      	str	r0, [r5, #32]
 801c448:	62ac      	str	r4, [r5, #40]	; 0x28
 801c44a:	626b      	str	r3, [r5, #36]	; 0x24
 801c44c:	2006      	movs	r0, #6
 801c44e:	e760      	b.n	801c312 <__gnu_unwind_pr_common+0xd6>
 801c450:	210f      	movs	r1, #15
 801c452:	4640      	mov	r0, r8
 801c454:	f7ff fe84 	bl	801c160 <_Unwind_GetGR>
 801c458:	210e      	movs	r1, #14
 801c45a:	4602      	mov	r2, r0
 801c45c:	4640      	mov	r0, r8
 801c45e:	f7ff fea7 	bl	801c1b0 <_Unwind_SetGR>
 801c462:	4640      	mov	r0, r8
 801c464:	210f      	movs	r1, #15
 801c466:	4a29      	ldr	r2, [pc, #164]	; (801c50c <__gnu_unwind_pr_common+0x2d0>)
 801c468:	f7ff fea2 	bl	801c1b0 <_Unwind_SetGR>
 801c46c:	2007      	movs	r0, #7
 801c46e:	e750      	b.n	801c312 <__gnu_unwind_pr_common+0xd6>
 801c470:	6aab      	ldr	r3, [r5, #40]	; 0x28
 801c472:	429c      	cmp	r4, r3
 801c474:	d1b6      	bne.n	801c3e4 <__gnu_unwind_pr_common+0x1a8>
 801c476:	2204      	movs	r2, #4
 801c478:	2700      	movs	r7, #0
 801c47a:	18a3      	adds	r3, r4, r2
 801c47c:	9902      	ldr	r1, [sp, #8]
 801c47e:	62a9      	str	r1, [r5, #40]	; 0x28
 801c480:	62ef      	str	r7, [r5, #44]	; 0x2c
 801c482:	632a      	str	r2, [r5, #48]	; 0x30
 801c484:	636b      	str	r3, [r5, #52]	; 0x34
 801c486:	6823      	ldr	r3, [r4, #0]
 801c488:	42bb      	cmp	r3, r7
 801c48a:	db1f      	blt.n	801c4cc <__gnu_unwind_pr_common+0x290>
 801c48c:	2301      	movs	r3, #1
 801c48e:	9301      	str	r3, [sp, #4]
 801c490:	e730      	b.n	801c2f4 <__gnu_unwind_pr_common+0xb8>
 801c492:	4640      	mov	r0, r8
 801c494:	210d      	movs	r1, #13
 801c496:	f7ff fe63 	bl	801c160 <_Unwind_GetGR>
 801c49a:	6228      	str	r0, [r5, #32]
 801c49c:	9b06      	ldr	r3, [sp, #24]
 801c49e:	626b      	str	r3, [r5, #36]	; 0x24
 801c4a0:	62ac      	str	r4, [r5, #40]	; 0x28
 801c4a2:	2006      	movs	r0, #6
 801c4a4:	e735      	b.n	801c312 <__gnu_unwind_pr_common+0xd6>
 801c4a6:	4620      	mov	r0, r4
 801c4a8:	f7ff fc64 	bl	801bd74 <selfrel_offset31>
 801c4ac:	3404      	adds	r4, #4
 801c4ae:	4606      	mov	r6, r0
 801c4b0:	63ac      	str	r4, [r5, #56]	; 0x38
 801c4b2:	4628      	mov	r0, r5
 801c4b4:	f3af 8000 	nop.w
 801c4b8:	2800      	cmp	r0, #0
 801c4ba:	f43f af29 	beq.w	801c310 <__gnu_unwind_pr_common+0xd4>
 801c4be:	4640      	mov	r0, r8
 801c4c0:	4632      	mov	r2, r6
 801c4c2:	210f      	movs	r1, #15
 801c4c4:	f7ff fe74 	bl	801c1b0 <_Unwind_SetGR>
 801c4c8:	2007      	movs	r0, #7
 801c4ca:	e722      	b.n	801c312 <__gnu_unwind_pr_common+0xd6>
 801c4cc:	4608      	mov	r0, r1
 801c4ce:	3001      	adds	r0, #1
 801c4d0:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 801c4d4:	f7ff fc4e 	bl	801bd74 <selfrel_offset31>
 801c4d8:	210f      	movs	r1, #15
 801c4da:	4602      	mov	r2, r0
 801c4dc:	4640      	mov	r0, r8
 801c4de:	f7ff fe67 	bl	801c1b0 <_Unwind_SetGR>
 801c4e2:	4640      	mov	r0, r8
 801c4e4:	4639      	mov	r1, r7
 801c4e6:	462a      	mov	r2, r5
 801c4e8:	f7ff fe62 	bl	801c1b0 <_Unwind_SetGR>
 801c4ec:	2007      	movs	r0, #7
 801c4ee:	e710      	b.n	801c312 <__gnu_unwind_pr_common+0xd6>
 801c4f0:	4607      	mov	r7, r0
 801c4f2:	210d      	movs	r1, #13
 801c4f4:	4640      	mov	r0, r8
 801c4f6:	f7ff fe33 	bl	801c160 <_Unwind_GetGR>
 801c4fa:	2f02      	cmp	r7, #2
 801c4fc:	6228      	str	r0, [r5, #32]
 801c4fe:	d1cd      	bne.n	801c49c <__gnu_unwind_pr_common+0x260>
 801c500:	462b      	mov	r3, r5
 801c502:	9a06      	ldr	r2, [sp, #24]
 801c504:	f843 2f2c 	str.w	r2, [r3, #44]!
 801c508:	626b      	str	r3, [r5, #36]	; 0x24
 801c50a:	e7c9      	b.n	801c4a0 <__gnu_unwind_pr_common+0x264>
 801c50c:	00000000 	.word	0x00000000

0801c510 <__aeabi_unwind_cpp_pr0>:
 801c510:	2300      	movs	r3, #0
 801c512:	e693      	b.n	801c23c <__gnu_unwind_pr_common>

0801c514 <__aeabi_unwind_cpp_pr1>:
 801c514:	2301      	movs	r3, #1
 801c516:	e691      	b.n	801c23c <__gnu_unwind_pr_common>

0801c518 <__aeabi_unwind_cpp_pr2>:
 801c518:	2302      	movs	r3, #2
 801c51a:	e68f      	b.n	801c23c <__gnu_unwind_pr_common>

0801c51c <_Unwind_VRS_Pop>:
 801c51c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c51e:	4605      	mov	r5, r0
 801c520:	b0c5      	sub	sp, #276	; 0x114
 801c522:	2904      	cmp	r1, #4
 801c524:	d80c      	bhi.n	801c540 <_Unwind_VRS_Pop+0x24>
 801c526:	e8df f001 	tbb	[pc, r1]
 801c52a:	0356      	.short	0x0356
 801c52c:	300b      	.short	0x300b
 801c52e:	0e          	.byte	0x0e
 801c52f:	00          	.byte	0x00
 801c530:	2b01      	cmp	r3, #1
 801c532:	ea4f 4412 	mov.w	r4, r2, lsr #16
 801c536:	b296      	uxth	r6, r2
 801c538:	d065      	beq.n	801c606 <_Unwind_VRS_Pop+0xea>
 801c53a:	2b05      	cmp	r3, #5
 801c53c:	f000 8084 	beq.w	801c648 <_Unwind_VRS_Pop+0x12c>
 801c540:	2002      	movs	r0, #2
 801c542:	b045      	add	sp, #276	; 0x114
 801c544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c546:	2b00      	cmp	r3, #0
 801c548:	d1fa      	bne.n	801c540 <_Unwind_VRS_Pop+0x24>
 801c54a:	2a10      	cmp	r2, #16
 801c54c:	d8f8      	bhi.n	801c540 <_Unwind_VRS_Pop+0x24>
 801c54e:	682b      	ldr	r3, [r5, #0]
 801c550:	06dc      	lsls	r4, r3, #27
 801c552:	f100 80eb 	bmi.w	801c72c <_Unwind_VRS_Pop+0x210>
 801c556:	ae22      	add	r6, sp, #136	; 0x88
 801c558:	4630      	mov	r0, r6
 801c55a:	9201      	str	r2, [sp, #4]
 801c55c:	f000 f9a4 	bl	801c8a8 <__gnu_Unwind_Save_WMMXC>
 801c560:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801c562:	9a01      	ldr	r2, [sp, #4]
 801c564:	2300      	movs	r3, #0
 801c566:	2401      	movs	r4, #1
 801c568:	fa04 f103 	lsl.w	r1, r4, r3
 801c56c:	4211      	tst	r1, r2
 801c56e:	d003      	beq.n	801c578 <_Unwind_VRS_Pop+0x5c>
 801c570:	6801      	ldr	r1, [r0, #0]
 801c572:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 801c576:	3004      	adds	r0, #4
 801c578:	3301      	adds	r3, #1
 801c57a:	2b04      	cmp	r3, #4
 801c57c:	d1f4      	bne.n	801c568 <_Unwind_VRS_Pop+0x4c>
 801c57e:	63a8      	str	r0, [r5, #56]	; 0x38
 801c580:	4630      	mov	r0, r6
 801c582:	f000 f987 	bl	801c894 <__gnu_Unwind_Restore_WMMXC>
 801c586:	2000      	movs	r0, #0
 801c588:	e7db      	b.n	801c542 <_Unwind_VRS_Pop+0x26>
 801c58a:	2b03      	cmp	r3, #3
 801c58c:	d1d8      	bne.n	801c540 <_Unwind_VRS_Pop+0x24>
 801c58e:	0c14      	lsrs	r4, r2, #16
 801c590:	b297      	uxth	r7, r2
 801c592:	193b      	adds	r3, r7, r4
 801c594:	2b10      	cmp	r3, #16
 801c596:	d8d3      	bhi.n	801c540 <_Unwind_VRS_Pop+0x24>
 801c598:	682b      	ldr	r3, [r5, #0]
 801c59a:	071e      	lsls	r6, r3, #28
 801c59c:	f100 80e6 	bmi.w	801c76c <_Unwind_VRS_Pop+0x250>
 801c5a0:	ae22      	add	r6, sp, #136	; 0x88
 801c5a2:	4630      	mov	r0, r6
 801c5a4:	007f      	lsls	r7, r7, #1
 801c5a6:	f000 f953 	bl	801c850 <__gnu_Unwind_Save_WMMXD>
 801c5aa:	eb06 02c4 	add.w	r2, r6, r4, lsl #3
 801c5ae:	1e7b      	subs	r3, r7, #1
 801c5b0:	6bac      	ldr	r4, [r5, #56]	; 0x38
 801c5b2:	b157      	cbz	r7, 801c5ca <_Unwind_VRS_Pop+0xae>
 801c5b4:	3a04      	subs	r2, #4
 801c5b6:	4621      	mov	r1, r4
 801c5b8:	f851 0b04 	ldr.w	r0, [r1], #4
 801c5bc:	f842 0f04 	str.w	r0, [r2, #4]!
 801c5c0:	3b01      	subs	r3, #1
 801c5c2:	1c58      	adds	r0, r3, #1
 801c5c4:	d1f8      	bne.n	801c5b8 <_Unwind_VRS_Pop+0x9c>
 801c5c6:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 801c5ca:	4630      	mov	r0, r6
 801c5cc:	63ac      	str	r4, [r5, #56]	; 0x38
 801c5ce:	f000 f91d 	bl	801c80c <__gnu_Unwind_Restore_WMMXD>
 801c5d2:	2000      	movs	r0, #0
 801c5d4:	e7b5      	b.n	801c542 <_Unwind_VRS_Pop+0x26>
 801c5d6:	2b00      	cmp	r3, #0
 801c5d8:	d1b2      	bne.n	801c540 <_Unwind_VRS_Pop+0x24>
 801c5da:	6bac      	ldr	r4, [r5, #56]	; 0x38
 801c5dc:	b297      	uxth	r7, r2
 801c5de:	1d28      	adds	r0, r5, #4
 801c5e0:	2601      	movs	r6, #1
 801c5e2:	fa06 f103 	lsl.w	r1, r6, r3
 801c5e6:	4239      	tst	r1, r7
 801c5e8:	f103 0301 	add.w	r3, r3, #1
 801c5ec:	d002      	beq.n	801c5f4 <_Unwind_VRS_Pop+0xd8>
 801c5ee:	6821      	ldr	r1, [r4, #0]
 801c5f0:	6001      	str	r1, [r0, #0]
 801c5f2:	3404      	adds	r4, #4
 801c5f4:	2b10      	cmp	r3, #16
 801c5f6:	f100 0004 	add.w	r0, r0, #4
 801c5fa:	d1f2      	bne.n	801c5e2 <_Unwind_VRS_Pop+0xc6>
 801c5fc:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 801c600:	d120      	bne.n	801c644 <_Unwind_VRS_Pop+0x128>
 801c602:	63ac      	str	r4, [r5, #56]	; 0x38
 801c604:	e79d      	b.n	801c542 <_Unwind_VRS_Pop+0x26>
 801c606:	1932      	adds	r2, r6, r4
 801c608:	2a10      	cmp	r2, #16
 801c60a:	d899      	bhi.n	801c540 <_Unwind_VRS_Pop+0x24>
 801c60c:	2c0f      	cmp	r4, #15
 801c60e:	d897      	bhi.n	801c540 <_Unwind_VRS_Pop+0x24>
 801c610:	6829      	ldr	r1, [r5, #0]
 801c612:	07c8      	lsls	r0, r1, #31
 801c614:	f04f 0700 	mov.w	r7, #0
 801c618:	d455      	bmi.n	801c6c6 <_Unwind_VRS_Pop+0x1aa>
 801c61a:	a822      	add	r0, sp, #136	; 0x88
 801c61c:	9301      	str	r3, [sp, #4]
 801c61e:	f000 f8e1 	bl	801c7e4 <__gnu_Unwind_Save_VFP>
 801c622:	9b01      	ldr	r3, [sp, #4]
 801c624:	e019      	b.n	801c65a <_Unwind_VRS_Pop+0x13e>
 801c626:	4608      	mov	r0, r1
 801c628:	4637      	mov	r7, r6
 801c62a:	2b01      	cmp	r3, #1
 801c62c:	f000 8098 	beq.w	801c760 <_Unwind_VRS_Pop+0x244>
 801c630:	2c0f      	cmp	r4, #15
 801c632:	63a8      	str	r0, [r5, #56]	; 0x38
 801c634:	d802      	bhi.n	801c63c <_Unwind_VRS_Pop+0x120>
 801c636:	a822      	add	r0, sp, #136	; 0x88
 801c638:	f000 f8d8 	bl	801c7ec <__gnu_Unwind_Restore_VFP_D>
 801c63c:	b117      	cbz	r7, 801c644 <_Unwind_VRS_Pop+0x128>
 801c63e:	a802      	add	r0, sp, #8
 801c640:	f000 f8dc 	bl	801c7fc <__gnu_Unwind_Restore_VFP_D_16_to_31>
 801c644:	2000      	movs	r0, #0
 801c646:	e77c      	b.n	801c542 <_Unwind_VRS_Pop+0x26>
 801c648:	1937      	adds	r7, r6, r4
 801c64a:	2f20      	cmp	r7, #32
 801c64c:	f63f af78 	bhi.w	801c540 <_Unwind_VRS_Pop+0x24>
 801c650:	2c0f      	cmp	r4, #15
 801c652:	d930      	bls.n	801c6b6 <_Unwind_VRS_Pop+0x19a>
 801c654:	4637      	mov	r7, r6
 801c656:	2e00      	cmp	r6, #0
 801c658:	d145      	bne.n	801c6e6 <_Unwind_VRS_Pop+0x1ca>
 801c65a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 801c65c:	4632      	mov	r2, r6
 801c65e:	2e00      	cmp	r6, #0
 801c660:	d0e1      	beq.n	801c626 <_Unwind_VRS_Pop+0x10a>
 801c662:	2700      	movs	r7, #0
 801c664:	a844      	add	r0, sp, #272	; 0x110
 801c666:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 801c66a:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 801c66e:	f10c 32ff 	add.w	r2, ip, #4294967295
 801c672:	388c      	subs	r0, #140	; 0x8c
 801c674:	468e      	mov	lr, r1
 801c676:	f85e 6b04 	ldr.w	r6, [lr], #4
 801c67a:	f840 6f04 	str.w	r6, [r0, #4]!
 801c67e:	3a01      	subs	r2, #1
 801c680:	1c56      	adds	r6, r2, #1
 801c682:	d1f8      	bne.n	801c676 <_Unwind_VRS_Pop+0x15a>
 801c684:	eb01 008c 	add.w	r0, r1, ip, lsl #2
 801c688:	2f00      	cmp	r7, #0
 801c68a:	d0ce      	beq.n	801c62a <_Unwind_VRS_Pop+0x10e>
 801c68c:	2c10      	cmp	r4, #16
 801c68e:	4622      	mov	r2, r4
 801c690:	a944      	add	r1, sp, #272	; 0x110
 801c692:	bf38      	it	cc
 801c694:	2210      	movcc	r2, #16
 801c696:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801c69a:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 801c69e:	4601      	mov	r1, r0
 801c6a0:	0078      	lsls	r0, r7, #1
 801c6a2:	3a04      	subs	r2, #4
 801c6a4:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 801c6a8:	f851 6b04 	ldr.w	r6, [r1], #4
 801c6ac:	f842 6f04 	str.w	r6, [r2, #4]!
 801c6b0:	4281      	cmp	r1, r0
 801c6b2:	d1f9      	bne.n	801c6a8 <_Unwind_VRS_Pop+0x18c>
 801c6b4:	e7b9      	b.n	801c62a <_Unwind_VRS_Pop+0x10e>
 801c6b6:	2f10      	cmp	r7, #16
 801c6b8:	d942      	bls.n	801c740 <_Unwind_VRS_Pop+0x224>
 801c6ba:	682a      	ldr	r2, [r5, #0]
 801c6bc:	07d0      	lsls	r0, r2, #31
 801c6be:	f1a7 0710 	sub.w	r7, r7, #16
 801c6c2:	4611      	mov	r1, r2
 801c6c4:	d510      	bpl.n	801c6e8 <_Unwind_VRS_Pop+0x1cc>
 801c6c6:	f021 0201 	bic.w	r2, r1, #1
 801c6ca:	2b05      	cmp	r3, #5
 801c6cc:	602a      	str	r2, [r5, #0]
 801c6ce:	9301      	str	r3, [sp, #4]
 801c6d0:	4628      	mov	r0, r5
 801c6d2:	d05b      	beq.n	801c78c <_Unwind_VRS_Pop+0x270>
 801c6d4:	f021 0103 	bic.w	r1, r1, #3
 801c6d8:	f840 1b48 	str.w	r1, [r0], #72
 801c6dc:	f000 f882 	bl	801c7e4 <__gnu_Unwind_Save_VFP>
 801c6e0:	9b01      	ldr	r3, [sp, #4]
 801c6e2:	2f00      	cmp	r7, #0
 801c6e4:	d04a      	beq.n	801c77c <_Unwind_VRS_Pop+0x260>
 801c6e6:	682a      	ldr	r2, [r5, #0]
 801c6e8:	0751      	lsls	r1, r2, #29
 801c6ea:	d45b      	bmi.n	801c7a4 <_Unwind_VRS_Pop+0x288>
 801c6ec:	2b01      	cmp	r3, #1
 801c6ee:	d063      	beq.n	801c7b8 <_Unwind_VRS_Pop+0x29c>
 801c6f0:	2c0f      	cmp	r4, #15
 801c6f2:	d804      	bhi.n	801c6fe <_Unwind_VRS_Pop+0x1e2>
 801c6f4:	a822      	add	r0, sp, #136	; 0x88
 801c6f6:	9301      	str	r3, [sp, #4]
 801c6f8:	f000 f87c 	bl	801c7f4 <__gnu_Unwind_Save_VFP_D>
 801c6fc:	9b01      	ldr	r3, [sp, #4]
 801c6fe:	2f00      	cmp	r7, #0
 801c700:	d0ab      	beq.n	801c65a <_Unwind_VRS_Pop+0x13e>
 801c702:	a802      	add	r0, sp, #8
 801c704:	9301      	str	r3, [sp, #4]
 801c706:	f000 f87d 	bl	801c804 <__gnu_Unwind_Save_VFP_D_16_to_31>
 801c70a:	9b01      	ldr	r3, [sp, #4]
 801c70c:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 801c70e:	f1c4 0210 	rsb	r2, r4, #16
 801c712:	2a00      	cmp	r2, #0
 801c714:	dca6      	bgt.n	801c664 <_Unwind_VRS_Pop+0x148>
 801c716:	2c10      	cmp	r4, #16
 801c718:	4622      	mov	r2, r4
 801c71a:	a844      	add	r0, sp, #272	; 0x110
 801c71c:	bf38      	it	cc
 801c71e:	2210      	movcc	r2, #16
 801c720:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 801c724:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 801c728:	0078      	lsls	r0, r7, #1
 801c72a:	e7ba      	b.n	801c6a2 <_Unwind_VRS_Pop+0x186>
 801c72c:	f023 0310 	bic.w	r3, r3, #16
 801c730:	602b      	str	r3, [r5, #0]
 801c732:	f505 70e8 	add.w	r0, r5, #464	; 0x1d0
 801c736:	9201      	str	r2, [sp, #4]
 801c738:	f000 f8b6 	bl	801c8a8 <__gnu_Unwind_Save_WMMXC>
 801c73c:	9a01      	ldr	r2, [sp, #4]
 801c73e:	e70a      	b.n	801c556 <_Unwind_VRS_Pop+0x3a>
 801c740:	6829      	ldr	r1, [r5, #0]
 801c742:	07c8      	lsls	r0, r1, #31
 801c744:	d51d      	bpl.n	801c782 <_Unwind_VRS_Pop+0x266>
 801c746:	f021 0201 	bic.w	r2, r1, #1
 801c74a:	4628      	mov	r0, r5
 801c74c:	f042 0202 	orr.w	r2, r2, #2
 801c750:	f840 2b48 	str.w	r2, [r0], #72
 801c754:	9301      	str	r3, [sp, #4]
 801c756:	2700      	movs	r7, #0
 801c758:	f000 f84c 	bl	801c7f4 <__gnu_Unwind_Save_VFP_D>
 801c75c:	9b01      	ldr	r3, [sp, #4]
 801c75e:	e7c9      	b.n	801c6f4 <_Unwind_VRS_Pop+0x1d8>
 801c760:	3004      	adds	r0, #4
 801c762:	63a8      	str	r0, [r5, #56]	; 0x38
 801c764:	a822      	add	r0, sp, #136	; 0x88
 801c766:	f000 f839 	bl	801c7dc <__gnu_Unwind_Restore_VFP>
 801c76a:	e76b      	b.n	801c644 <_Unwind_VRS_Pop+0x128>
 801c76c:	f023 0308 	bic.w	r3, r3, #8
 801c770:	602b      	str	r3, [r5, #0]
 801c772:	f505 70a8 	add.w	r0, r5, #336	; 0x150
 801c776:	f000 f86b 	bl	801c850 <__gnu_Unwind_Save_WMMXD>
 801c77a:	e711      	b.n	801c5a0 <_Unwind_VRS_Pop+0x84>
 801c77c:	2b01      	cmp	r3, #1
 801c77e:	f43f af4c 	beq.w	801c61a <_Unwind_VRS_Pop+0xfe>
 801c782:	2c0f      	cmp	r4, #15
 801c784:	bf98      	it	ls
 801c786:	2700      	movls	r7, #0
 801c788:	d9b4      	bls.n	801c6f4 <_Unwind_VRS_Pop+0x1d8>
 801c78a:	e766      	b.n	801c65a <_Unwind_VRS_Pop+0x13e>
 801c78c:	f042 0202 	orr.w	r2, r2, #2
 801c790:	f840 2b48 	str.w	r2, [r0], #72
 801c794:	f000 f82e 	bl	801c7f4 <__gnu_Unwind_Save_VFP_D>
 801c798:	9b01      	ldr	r3, [sp, #4]
 801c79a:	2f00      	cmp	r7, #0
 801c79c:	d0aa      	beq.n	801c6f4 <_Unwind_VRS_Pop+0x1d8>
 801c79e:	682a      	ldr	r2, [r5, #0]
 801c7a0:	0751      	lsls	r1, r2, #29
 801c7a2:	d5a5      	bpl.n	801c6f0 <_Unwind_VRS_Pop+0x1d4>
 801c7a4:	4628      	mov	r0, r5
 801c7a6:	f022 0204 	bic.w	r2, r2, #4
 801c7aa:	f840 2bd0 	str.w	r2, [r0], #208
 801c7ae:	9301      	str	r3, [sp, #4]
 801c7b0:	f000 f828 	bl	801c804 <__gnu_Unwind_Save_VFP_D_16_to_31>
 801c7b4:	9b01      	ldr	r3, [sp, #4]
 801c7b6:	e799      	b.n	801c6ec <_Unwind_VRS_Pop+0x1d0>
 801c7b8:	a822      	add	r0, sp, #136	; 0x88
 801c7ba:	9301      	str	r3, [sp, #4]
 801c7bc:	f000 f812 	bl	801c7e4 <__gnu_Unwind_Save_VFP>
 801c7c0:	9b01      	ldr	r3, [sp, #4]
 801c7c2:	e7a3      	b.n	801c70c <_Unwind_VRS_Pop+0x1f0>

0801c7c4 <__restore_core_regs>:
 801c7c4:	f100 0134 	add.w	r1, r0, #52	; 0x34
 801c7c8:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 801c7cc:	469c      	mov	ip, r3
 801c7ce:	46a6      	mov	lr, r4
 801c7d0:	f84c 5d04 	str.w	r5, [ip, #-4]!
 801c7d4:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 801c7d8:	46e5      	mov	sp, ip
 801c7da:	bd00      	pop	{pc}

0801c7dc <__gnu_Unwind_Restore_VFP>:
 801c7dc:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 801c7e0:	4770      	bx	lr
 801c7e2:	bf00      	nop

0801c7e4 <__gnu_Unwind_Save_VFP>:
 801c7e4:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 801c7e8:	4770      	bx	lr
 801c7ea:	bf00      	nop

0801c7ec <__gnu_Unwind_Restore_VFP_D>:
 801c7ec:	ec90 0b20 	vldmia	r0, {d0-d15}
 801c7f0:	4770      	bx	lr
 801c7f2:	bf00      	nop

0801c7f4 <__gnu_Unwind_Save_VFP_D>:
 801c7f4:	ec80 0b20 	vstmia	r0, {d0-d15}
 801c7f8:	4770      	bx	lr
 801c7fa:	bf00      	nop

0801c7fc <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 801c7fc:	ecd0 0b20 	vldmia	r0, {d16-d31}
 801c800:	4770      	bx	lr
 801c802:	bf00      	nop

0801c804 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 801c804:	ecc0 0b20 	vstmia	r0, {d16-d31}
 801c808:	4770      	bx	lr
 801c80a:	bf00      	nop

0801c80c <__gnu_Unwind_Restore_WMMXD>:
 801c80c:	ecf0 0102 	ldfe	f0, [r0], #8
 801c810:	ecf0 1102 	ldfe	f1, [r0], #8
 801c814:	ecf0 2102 	ldfe	f2, [r0], #8
 801c818:	ecf0 3102 	ldfe	f3, [r0], #8
 801c81c:	ecf0 4102 	ldfe	f4, [r0], #8
 801c820:	ecf0 5102 	ldfe	f5, [r0], #8
 801c824:	ecf0 6102 	ldfe	f6, [r0], #8
 801c828:	ecf0 7102 	ldfe	f7, [r0], #8
 801c82c:	ecf0 8102 	ldfp	f0, [r0], #8
 801c830:	ecf0 9102 	ldfp	f1, [r0], #8
 801c834:	ecf0 a102 	ldfp	f2, [r0], #8
 801c838:	ecf0 b102 	ldfp	f3, [r0], #8
 801c83c:	ecf0 c102 	ldfp	f4, [r0], #8
 801c840:	ecf0 d102 	ldfp	f5, [r0], #8
 801c844:	ecf0 e102 	ldfp	f6, [r0], #8
 801c848:	ecf0 f102 	ldfp	f7, [r0], #8
 801c84c:	4770      	bx	lr
 801c84e:	bf00      	nop

0801c850 <__gnu_Unwind_Save_WMMXD>:
 801c850:	ece0 0102 	stfe	f0, [r0], #8
 801c854:	ece0 1102 	stfe	f1, [r0], #8
 801c858:	ece0 2102 	stfe	f2, [r0], #8
 801c85c:	ece0 3102 	stfe	f3, [r0], #8
 801c860:	ece0 4102 	stfe	f4, [r0], #8
 801c864:	ece0 5102 	stfe	f5, [r0], #8
 801c868:	ece0 6102 	stfe	f6, [r0], #8
 801c86c:	ece0 7102 	stfe	f7, [r0], #8
 801c870:	ece0 8102 	stfp	f0, [r0], #8
 801c874:	ece0 9102 	stfp	f1, [r0], #8
 801c878:	ece0 a102 	stfp	f2, [r0], #8
 801c87c:	ece0 b102 	stfp	f3, [r0], #8
 801c880:	ece0 c102 	stfp	f4, [r0], #8
 801c884:	ece0 d102 	stfp	f5, [r0], #8
 801c888:	ece0 e102 	stfp	f6, [r0], #8
 801c88c:	ece0 f102 	stfp	f7, [r0], #8
 801c890:	4770      	bx	lr
 801c892:	bf00      	nop

0801c894 <__gnu_Unwind_Restore_WMMXC>:
 801c894:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 801c898:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 801c89c:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 801c8a0:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 801c8a4:	4770      	bx	lr
 801c8a6:	bf00      	nop

0801c8a8 <__gnu_Unwind_Save_WMMXC>:
 801c8a8:	fca0 8101 	stc2	1, cr8, [r0], #4
 801c8ac:	fca0 9101 	stc2	1, cr9, [r0], #4
 801c8b0:	fca0 a101 	stc2	1, cr10, [r0], #4
 801c8b4:	fca0 b101 	stc2	1, cr11, [r0], #4
 801c8b8:	4770      	bx	lr
 801c8ba:	bf00      	nop

0801c8bc <_Unwind_RaiseException>:
 801c8bc:	46ec      	mov	ip, sp
 801c8be:	b500      	push	{lr}
 801c8c0:	e92d 5000 	stmdb	sp!, {ip, lr}
 801c8c4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 801c8c8:	f04f 0300 	mov.w	r3, #0
 801c8cc:	e92d 000c 	stmdb	sp!, {r2, r3}
 801c8d0:	a901      	add	r1, sp, #4
 801c8d2:	f7ff fbbf 	bl	801c054 <__gnu_Unwind_RaiseException>
 801c8d6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 801c8da:	b012      	add	sp, #72	; 0x48
 801c8dc:	4770      	bx	lr
 801c8de:	bf00      	nop

0801c8e0 <_Unwind_Resume>:
 801c8e0:	46ec      	mov	ip, sp
 801c8e2:	b500      	push	{lr}
 801c8e4:	e92d 5000 	stmdb	sp!, {ip, lr}
 801c8e8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 801c8ec:	f04f 0300 	mov.w	r3, #0
 801c8f0:	e92d 000c 	stmdb	sp!, {r2, r3}
 801c8f4:	a901      	add	r1, sp, #4
 801c8f6:	f7ff fbe7 	bl	801c0c8 <__gnu_Unwind_Resume>
 801c8fa:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 801c8fe:	b012      	add	sp, #72	; 0x48
 801c900:	4770      	bx	lr
 801c902:	bf00      	nop

0801c904 <_Unwind_Resume_or_Rethrow>:
 801c904:	46ec      	mov	ip, sp
 801c906:	b500      	push	{lr}
 801c908:	e92d 5000 	stmdb	sp!, {ip, lr}
 801c90c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 801c910:	f04f 0300 	mov.w	r3, #0
 801c914:	e92d 000c 	stmdb	sp!, {r2, r3}
 801c918:	a901      	add	r1, sp, #4
 801c91a:	f7ff fbf7 	bl	801c10c <__gnu_Unwind_Resume_or_Rethrow>
 801c91e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 801c922:	b012      	add	sp, #72	; 0x48
 801c924:	4770      	bx	lr
 801c926:	bf00      	nop

0801c928 <_Unwind_ForcedUnwind>:
 801c928:	46ec      	mov	ip, sp
 801c92a:	b500      	push	{lr}
 801c92c:	e92d 5000 	stmdb	sp!, {ip, lr}
 801c930:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 801c934:	f04f 0300 	mov.w	r3, #0
 801c938:	e92d 000c 	stmdb	sp!, {r2, r3}
 801c93c:	ab01      	add	r3, sp, #4
 801c93e:	f7ff fbb9 	bl	801c0b4 <__gnu_Unwind_ForcedUnwind>
 801c942:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 801c946:	b012      	add	sp, #72	; 0x48
 801c948:	4770      	bx	lr
 801c94a:	bf00      	nop

0801c94c <_Unwind_Backtrace>:
 801c94c:	46ec      	mov	ip, sp
 801c94e:	b500      	push	{lr}
 801c950:	e92d 5000 	stmdb	sp!, {ip, lr}
 801c954:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 801c958:	f04f 0300 	mov.w	r3, #0
 801c95c:	e92d 000c 	stmdb	sp!, {r2, r3}
 801c960:	aa01      	add	r2, sp, #4
 801c962:	f7ff fc33 	bl	801c1cc <__gnu_Unwind_Backtrace>
 801c966:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 801c96a:	b012      	add	sp, #72	; 0x48
 801c96c:	4770      	bx	lr
 801c96e:	bf00      	nop

0801c970 <next_unwind_byte>:
 801c970:	7a03      	ldrb	r3, [r0, #8]
 801c972:	b91b      	cbnz	r3, 801c97c <next_unwind_byte+0xc>
 801c974:	7a43      	ldrb	r3, [r0, #9]
 801c976:	b943      	cbnz	r3, 801c98a <next_unwind_byte+0x1a>
 801c978:	20b0      	movs	r0, #176	; 0xb0
 801c97a:	4770      	bx	lr
 801c97c:	1e5a      	subs	r2, r3, #1
 801c97e:	6803      	ldr	r3, [r0, #0]
 801c980:	7202      	strb	r2, [r0, #8]
 801c982:	021a      	lsls	r2, r3, #8
 801c984:	6002      	str	r2, [r0, #0]
 801c986:	0e18      	lsrs	r0, r3, #24
 801c988:	4770      	bx	lr
 801c98a:	6842      	ldr	r2, [r0, #4]
 801c98c:	3b01      	subs	r3, #1
 801c98e:	b410      	push	{r4}
 801c990:	7243      	strb	r3, [r0, #9]
 801c992:	6813      	ldr	r3, [r2, #0]
 801c994:	2103      	movs	r1, #3
 801c996:	1d14      	adds	r4, r2, #4
 801c998:	7201      	strb	r1, [r0, #8]
 801c99a:	021a      	lsls	r2, r3, #8
 801c99c:	6044      	str	r4, [r0, #4]
 801c99e:	6002      	str	r2, [r0, #0]
 801c9a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c9a4:	0e18      	lsrs	r0, r3, #24
 801c9a6:	4770      	bx	lr

0801c9a8 <_Unwind_GetGR.constprop.0>:
 801c9a8:	b500      	push	{lr}
 801c9aa:	b085      	sub	sp, #20
 801c9ac:	ab03      	add	r3, sp, #12
 801c9ae:	2100      	movs	r1, #0
 801c9b0:	9300      	str	r3, [sp, #0]
 801c9b2:	220c      	movs	r2, #12
 801c9b4:	460b      	mov	r3, r1
 801c9b6:	f7ff fbb9 	bl	801c12c <_Unwind_VRS_Get>
 801c9ba:	9803      	ldr	r0, [sp, #12]
 801c9bc:	b005      	add	sp, #20
 801c9be:	f85d fb04 	ldr.w	pc, [sp], #4
 801c9c2:	bf00      	nop

0801c9c4 <unwind_UCB_from_context>:
 801c9c4:	e7f0      	b.n	801c9a8 <_Unwind_GetGR.constprop.0>
 801c9c6:	bf00      	nop

0801c9c8 <__gnu_unwind_execute>:
 801c9c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c9cc:	4606      	mov	r6, r0
 801c9ce:	b085      	sub	sp, #20
 801c9d0:	460d      	mov	r5, r1
 801c9d2:	f04f 0800 	mov.w	r8, #0
 801c9d6:	4628      	mov	r0, r5
 801c9d8:	f7ff ffca 	bl	801c970 <next_unwind_byte>
 801c9dc:	28b0      	cmp	r0, #176	; 0xb0
 801c9de:	4604      	mov	r4, r0
 801c9e0:	f000 80b5 	beq.w	801cb4e <__gnu_unwind_execute+0x186>
 801c9e4:	f020 017f 	bic.w	r1, r0, #127	; 0x7f
 801c9e8:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 801c9ec:	d020      	beq.n	801ca30 <__gnu_unwind_execute+0x68>
 801c9ee:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 801c9f2:	2b80      	cmp	r3, #128	; 0x80
 801c9f4:	d07a      	beq.n	801caec <__gnu_unwind_execute+0x124>
 801c9f6:	2b90      	cmp	r3, #144	; 0x90
 801c9f8:	d036      	beq.n	801ca68 <__gnu_unwind_execute+0xa0>
 801c9fa:	2ba0      	cmp	r3, #160	; 0xa0
 801c9fc:	d049      	beq.n	801ca92 <__gnu_unwind_execute+0xca>
 801c9fe:	2bb0      	cmp	r3, #176	; 0xb0
 801ca00:	d05c      	beq.n	801cabc <__gnu_unwind_execute+0xf4>
 801ca02:	2bc0      	cmp	r3, #192	; 0xc0
 801ca04:	f000 8089 	beq.w	801cb1a <__gnu_unwind_execute+0x152>
 801ca08:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 801ca0c:	2bd0      	cmp	r3, #208	; 0xd0
 801ca0e:	d10b      	bne.n	801ca28 <__gnu_unwind_execute+0x60>
 801ca10:	f000 0207 	and.w	r2, r0, #7
 801ca14:	3201      	adds	r2, #1
 801ca16:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 801ca1a:	4630      	mov	r0, r6
 801ca1c:	2101      	movs	r1, #1
 801ca1e:	2305      	movs	r3, #5
 801ca20:	f7ff fd7c 	bl	801c51c <_Unwind_VRS_Pop>
 801ca24:	2800      	cmp	r0, #0
 801ca26:	d0d6      	beq.n	801c9d6 <__gnu_unwind_execute+0xe>
 801ca28:	2009      	movs	r0, #9
 801ca2a:	b005      	add	sp, #20
 801ca2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ca30:	f10d 090c 	add.w	r9, sp, #12
 801ca34:	460b      	mov	r3, r1
 801ca36:	0087      	lsls	r7, r0, #2
 801ca38:	f8cd 9000 	str.w	r9, [sp]
 801ca3c:	4630      	mov	r0, r6
 801ca3e:	220d      	movs	r2, #13
 801ca40:	f7ff fb74 	bl	801c12c <_Unwind_VRS_Get>
 801ca44:	b2ff      	uxtb	r7, r7
 801ca46:	9b03      	ldr	r3, [sp, #12]
 801ca48:	f8cd 9000 	str.w	r9, [sp]
 801ca4c:	3704      	adds	r7, #4
 801ca4e:	0660      	lsls	r0, r4, #25
 801ca50:	f04f 0100 	mov.w	r1, #0
 801ca54:	bf4c      	ite	mi
 801ca56:	1bdf      	submi	r7, r3, r7
 801ca58:	18ff      	addpl	r7, r7, r3
 801ca5a:	4630      	mov	r0, r6
 801ca5c:	460b      	mov	r3, r1
 801ca5e:	220d      	movs	r2, #13
 801ca60:	9703      	str	r7, [sp, #12]
 801ca62:	f7ff fb8b 	bl	801c17c <_Unwind_VRS_Set>
 801ca66:	e7b6      	b.n	801c9d6 <__gnu_unwind_execute+0xe>
 801ca68:	f000 030d 	and.w	r3, r0, #13
 801ca6c:	2b0d      	cmp	r3, #13
 801ca6e:	d0db      	beq.n	801ca28 <__gnu_unwind_execute+0x60>
 801ca70:	af03      	add	r7, sp, #12
 801ca72:	2100      	movs	r1, #0
 801ca74:	f000 020f 	and.w	r2, r0, #15
 801ca78:	460b      	mov	r3, r1
 801ca7a:	9700      	str	r7, [sp, #0]
 801ca7c:	4630      	mov	r0, r6
 801ca7e:	f7ff fb55 	bl	801c12c <_Unwind_VRS_Get>
 801ca82:	2100      	movs	r1, #0
 801ca84:	9700      	str	r7, [sp, #0]
 801ca86:	460b      	mov	r3, r1
 801ca88:	4630      	mov	r0, r6
 801ca8a:	220d      	movs	r2, #13
 801ca8c:	f7ff fb76 	bl	801c17c <_Unwind_VRS_Set>
 801ca90:	e7a1      	b.n	801c9d6 <__gnu_unwind_execute+0xe>
 801ca92:	43c3      	mvns	r3, r0
 801ca94:	f003 0307 	and.w	r3, r3, #7
 801ca98:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 801ca9c:	411a      	asrs	r2, r3
 801ca9e:	0701      	lsls	r1, r0, #28
 801caa0:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 801caa4:	f04f 0100 	mov.w	r1, #0
 801caa8:	bf48      	it	mi
 801caaa:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 801caae:	460b      	mov	r3, r1
 801cab0:	4630      	mov	r0, r6
 801cab2:	f7ff fd33 	bl	801c51c <_Unwind_VRS_Pop>
 801cab6:	2800      	cmp	r0, #0
 801cab8:	d1b6      	bne.n	801ca28 <__gnu_unwind_execute+0x60>
 801caba:	e78c      	b.n	801c9d6 <__gnu_unwind_execute+0xe>
 801cabc:	28b1      	cmp	r0, #177	; 0xb1
 801cabe:	d04c      	beq.n	801cb5a <__gnu_unwind_execute+0x192>
 801cac0:	28b2      	cmp	r0, #178	; 0xb2
 801cac2:	d05d      	beq.n	801cb80 <__gnu_unwind_execute+0x1b8>
 801cac4:	28b3      	cmp	r0, #179	; 0xb3
 801cac6:	f000 808a 	beq.w	801cbde <__gnu_unwind_execute+0x216>
 801caca:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 801cace:	2bb4      	cmp	r3, #180	; 0xb4
 801cad0:	d0aa      	beq.n	801ca28 <__gnu_unwind_execute+0x60>
 801cad2:	f000 0207 	and.w	r2, r0, #7
 801cad6:	3201      	adds	r2, #1
 801cad8:	2101      	movs	r1, #1
 801cada:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 801cade:	460b      	mov	r3, r1
 801cae0:	4630      	mov	r0, r6
 801cae2:	f7ff fd1b 	bl	801c51c <_Unwind_VRS_Pop>
 801cae6:	2800      	cmp	r0, #0
 801cae8:	d19e      	bne.n	801ca28 <__gnu_unwind_execute+0x60>
 801caea:	e774      	b.n	801c9d6 <__gnu_unwind_execute+0xe>
 801caec:	4628      	mov	r0, r5
 801caee:	f7ff ff3f 	bl	801c970 <next_unwind_byte>
 801caf2:	0224      	lsls	r4, r4, #8
 801caf4:	4320      	orrs	r0, r4
 801caf6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801cafa:	d095      	beq.n	801ca28 <__gnu_unwind_execute+0x60>
 801cafc:	0104      	lsls	r4, r0, #4
 801cafe:	2100      	movs	r1, #0
 801cb00:	b2a2      	uxth	r2, r4
 801cb02:	460b      	mov	r3, r1
 801cb04:	4630      	mov	r0, r6
 801cb06:	f7ff fd09 	bl	801c51c <_Unwind_VRS_Pop>
 801cb0a:	2800      	cmp	r0, #0
 801cb0c:	d18c      	bne.n	801ca28 <__gnu_unwind_execute+0x60>
 801cb0e:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 801cb12:	bf18      	it	ne
 801cb14:	f04f 0801 	movne.w	r8, #1
 801cb18:	e75d      	b.n	801c9d6 <__gnu_unwind_execute+0xe>
 801cb1a:	28c6      	cmp	r0, #198	; 0xc6
 801cb1c:	d072      	beq.n	801cc04 <__gnu_unwind_execute+0x23c>
 801cb1e:	28c7      	cmp	r0, #199	; 0xc7
 801cb20:	d07a      	beq.n	801cc18 <__gnu_unwind_execute+0x250>
 801cb22:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 801cb26:	2bc0      	cmp	r3, #192	; 0xc0
 801cb28:	f000 8089 	beq.w	801cc3e <__gnu_unwind_execute+0x276>
 801cb2c:	28c8      	cmp	r0, #200	; 0xc8
 801cb2e:	f000 80a5 	beq.w	801cc7c <__gnu_unwind_execute+0x2b4>
 801cb32:	28c9      	cmp	r0, #201	; 0xc9
 801cb34:	f47f af78 	bne.w	801ca28 <__gnu_unwind_execute+0x60>
 801cb38:	4628      	mov	r0, r5
 801cb3a:	f7ff ff19 	bl	801c970 <next_unwind_byte>
 801cb3e:	f000 020f 	and.w	r2, r0, #15
 801cb42:	3201      	adds	r2, #1
 801cb44:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 801cb48:	ea42 3200 	orr.w	r2, r2, r0, lsl #12
 801cb4c:	e765      	b.n	801ca1a <__gnu_unwind_execute+0x52>
 801cb4e:	f1b8 0f00 	cmp.w	r8, #0
 801cb52:	f000 8082 	beq.w	801cc5a <__gnu_unwind_execute+0x292>
 801cb56:	2000      	movs	r0, #0
 801cb58:	e767      	b.n	801ca2a <__gnu_unwind_execute+0x62>
 801cb5a:	4628      	mov	r0, r5
 801cb5c:	f7ff ff08 	bl	801c970 <next_unwind_byte>
 801cb60:	4602      	mov	r2, r0
 801cb62:	2800      	cmp	r0, #0
 801cb64:	f43f af60 	beq.w	801ca28 <__gnu_unwind_execute+0x60>
 801cb68:	f010 01f0 	ands.w	r1, r0, #240	; 0xf0
 801cb6c:	f47f af5c 	bne.w	801ca28 <__gnu_unwind_execute+0x60>
 801cb70:	4630      	mov	r0, r6
 801cb72:	460b      	mov	r3, r1
 801cb74:	f7ff fcd2 	bl	801c51c <_Unwind_VRS_Pop>
 801cb78:	2800      	cmp	r0, #0
 801cb7a:	f47f af55 	bne.w	801ca28 <__gnu_unwind_execute+0x60>
 801cb7e:	e72a      	b.n	801c9d6 <__gnu_unwind_execute+0xe>
 801cb80:	2100      	movs	r1, #0
 801cb82:	f10d 090c 	add.w	r9, sp, #12
 801cb86:	220d      	movs	r2, #13
 801cb88:	460b      	mov	r3, r1
 801cb8a:	f8cd 9000 	str.w	r9, [sp]
 801cb8e:	4630      	mov	r0, r6
 801cb90:	f7ff facc 	bl	801c12c <_Unwind_VRS_Get>
 801cb94:	4628      	mov	r0, r5
 801cb96:	f7ff feeb 	bl	801c970 <next_unwind_byte>
 801cb9a:	0602      	lsls	r2, r0, #24
 801cb9c:	f04f 0402 	mov.w	r4, #2
 801cba0:	d50c      	bpl.n	801cbbc <__gnu_unwind_execute+0x1f4>
 801cba2:	9b03      	ldr	r3, [sp, #12]
 801cba4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801cba8:	40a0      	lsls	r0, r4
 801cbaa:	4403      	add	r3, r0
 801cbac:	4628      	mov	r0, r5
 801cbae:	9303      	str	r3, [sp, #12]
 801cbb0:	f7ff fede 	bl	801c970 <next_unwind_byte>
 801cbb4:	0603      	lsls	r3, r0, #24
 801cbb6:	f104 0407 	add.w	r4, r4, #7
 801cbba:	d4f2      	bmi.n	801cba2 <__gnu_unwind_execute+0x1da>
 801cbbc:	9b03      	ldr	r3, [sp, #12]
 801cbbe:	f8cd 9000 	str.w	r9, [sp]
 801cbc2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801cbc6:	40a0      	lsls	r0, r4
 801cbc8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 801cbcc:	2100      	movs	r1, #0
 801cbce:	181c      	adds	r4, r3, r0
 801cbd0:	220d      	movs	r2, #13
 801cbd2:	460b      	mov	r3, r1
 801cbd4:	4630      	mov	r0, r6
 801cbd6:	9403      	str	r4, [sp, #12]
 801cbd8:	f7ff fad0 	bl	801c17c <_Unwind_VRS_Set>
 801cbdc:	e6fb      	b.n	801c9d6 <__gnu_unwind_execute+0xe>
 801cbde:	4628      	mov	r0, r5
 801cbe0:	f7ff fec6 	bl	801c970 <next_unwind_byte>
 801cbe4:	f000 020f 	and.w	r2, r0, #15
 801cbe8:	3201      	adds	r2, #1
 801cbea:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 801cbee:	2101      	movs	r1, #1
 801cbf0:	ea42 3200 	orr.w	r2, r2, r0, lsl #12
 801cbf4:	460b      	mov	r3, r1
 801cbf6:	4630      	mov	r0, r6
 801cbf8:	f7ff fc90 	bl	801c51c <_Unwind_VRS_Pop>
 801cbfc:	2800      	cmp	r0, #0
 801cbfe:	f47f af13 	bne.w	801ca28 <__gnu_unwind_execute+0x60>
 801cc02:	e6e8      	b.n	801c9d6 <__gnu_unwind_execute+0xe>
 801cc04:	4628      	mov	r0, r5
 801cc06:	f7ff feb3 	bl	801c970 <next_unwind_byte>
 801cc0a:	f000 020f 	and.w	r2, r0, #15
 801cc0e:	3201      	adds	r2, #1
 801cc10:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 801cc14:	2103      	movs	r1, #3
 801cc16:	e7eb      	b.n	801cbf0 <__gnu_unwind_execute+0x228>
 801cc18:	4628      	mov	r0, r5
 801cc1a:	f7ff fea9 	bl	801c970 <next_unwind_byte>
 801cc1e:	4602      	mov	r2, r0
 801cc20:	2800      	cmp	r0, #0
 801cc22:	f43f af01 	beq.w	801ca28 <__gnu_unwind_execute+0x60>
 801cc26:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 801cc2a:	f47f aefd 	bne.w	801ca28 <__gnu_unwind_execute+0x60>
 801cc2e:	4630      	mov	r0, r6
 801cc30:	2104      	movs	r1, #4
 801cc32:	f7ff fc73 	bl	801c51c <_Unwind_VRS_Pop>
 801cc36:	2800      	cmp	r0, #0
 801cc38:	f47f aef6 	bne.w	801ca28 <__gnu_unwind_execute+0x60>
 801cc3c:	e6cb      	b.n	801c9d6 <__gnu_unwind_execute+0xe>
 801cc3e:	f000 020f 	and.w	r2, r0, #15
 801cc42:	3201      	adds	r2, #1
 801cc44:	2103      	movs	r1, #3
 801cc46:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 801cc4a:	460b      	mov	r3, r1
 801cc4c:	4630      	mov	r0, r6
 801cc4e:	f7ff fc65 	bl	801c51c <_Unwind_VRS_Pop>
 801cc52:	2800      	cmp	r0, #0
 801cc54:	f47f aee8 	bne.w	801ca28 <__gnu_unwind_execute+0x60>
 801cc58:	e6bd      	b.n	801c9d6 <__gnu_unwind_execute+0xe>
 801cc5a:	ac03      	add	r4, sp, #12
 801cc5c:	4641      	mov	r1, r8
 801cc5e:	220e      	movs	r2, #14
 801cc60:	4643      	mov	r3, r8
 801cc62:	9400      	str	r4, [sp, #0]
 801cc64:	4630      	mov	r0, r6
 801cc66:	f7ff fa61 	bl	801c12c <_Unwind_VRS_Get>
 801cc6a:	9400      	str	r4, [sp, #0]
 801cc6c:	4630      	mov	r0, r6
 801cc6e:	4641      	mov	r1, r8
 801cc70:	220f      	movs	r2, #15
 801cc72:	4643      	mov	r3, r8
 801cc74:	f7ff fa82 	bl	801c17c <_Unwind_VRS_Set>
 801cc78:	4640      	mov	r0, r8
 801cc7a:	e6d6      	b.n	801ca2a <__gnu_unwind_execute+0x62>
 801cc7c:	4628      	mov	r0, r5
 801cc7e:	f7ff fe77 	bl	801c970 <next_unwind_byte>
 801cc82:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 801cc86:	f000 030f 	and.w	r3, r0, #15
 801cc8a:	3210      	adds	r2, #16
 801cc8c:	3301      	adds	r3, #1
 801cc8e:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 801cc92:	e6c2      	b.n	801ca1a <__gnu_unwind_execute+0x52>

0801cc94 <__gnu_unwind_frame>:
 801cc94:	b510      	push	{r4, lr}
 801cc96:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801cc98:	b084      	sub	sp, #16
 801cc9a:	685a      	ldr	r2, [r3, #4]
 801cc9c:	2003      	movs	r0, #3
 801cc9e:	f88d 000c 	strb.w	r0, [sp, #12]
 801cca2:	79dc      	ldrb	r4, [r3, #7]
 801cca4:	f88d 400d 	strb.w	r4, [sp, #13]
 801cca8:	0212      	lsls	r2, r2, #8
 801ccaa:	3308      	adds	r3, #8
 801ccac:	4608      	mov	r0, r1
 801ccae:	a901      	add	r1, sp, #4
 801ccb0:	9201      	str	r2, [sp, #4]
 801ccb2:	9302      	str	r3, [sp, #8]
 801ccb4:	f7ff fe88 	bl	801c9c8 <__gnu_unwind_execute>
 801ccb8:	b004      	add	sp, #16
 801ccba:	bd10      	pop	{r4, pc}

0801ccbc <_Unwind_GetRegionStart>:
 801ccbc:	b508      	push	{r3, lr}
 801ccbe:	f7ff fe81 	bl	801c9c4 <unwind_UCB_from_context>
 801ccc2:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801ccc4:	bd08      	pop	{r3, pc}
 801ccc6:	bf00      	nop

0801ccc8 <_Unwind_GetLanguageSpecificData>:
 801ccc8:	b508      	push	{r3, lr}
 801ccca:	f7ff fe7b 	bl	801c9c4 <unwind_UCB_from_context>
 801ccce:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801ccd0:	79d8      	ldrb	r0, [r3, #7]
 801ccd2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801ccd6:	3008      	adds	r0, #8
 801ccd8:	bd08      	pop	{r3, pc}
 801ccda:	bf00      	nop

0801ccdc <_Unwind_GetDataRelBase>:
 801ccdc:	b508      	push	{r3, lr}
 801ccde:	f7f9 fd31 	bl	8016744 <abort>
 801cce2:	bf00      	nop

0801cce4 <_Unwind_GetTextRelBase>:
 801cce4:	b508      	push	{r3, lr}
 801cce6:	f7f9 fd2d 	bl	8016744 <abort>
 801ccea:	bf00      	nop

0801ccec <_getpid>:
 801ccec:	4b02      	ldr	r3, [pc, #8]	; (801ccf8 <_getpid+0xc>)
 801ccee:	2258      	movs	r2, #88	; 0x58
 801ccf0:	601a      	str	r2, [r3, #0]
 801ccf2:	f04f 30ff 	mov.w	r0, #4294967295
 801ccf6:	4770      	bx	lr
 801ccf8:	20001c18 	.word	0x20001c18

0801ccfc <_kill>:
 801ccfc:	4b02      	ldr	r3, [pc, #8]	; (801cd08 <_kill+0xc>)
 801ccfe:	2258      	movs	r2, #88	; 0x58
 801cd00:	601a      	str	r2, [r3, #0]
 801cd02:	f04f 30ff 	mov.w	r0, #4294967295
 801cd06:	4770      	bx	lr
 801cd08:	20001c18 	.word	0x20001c18

0801cd0c <_init>:
 801cd0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cd0e:	bf00      	nop
 801cd10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cd12:	bc08      	pop	{r3}
 801cd14:	469e      	mov	lr, r3
 801cd16:	4770      	bx	lr

0801cd18 <_fini>:
 801cd18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cd1a:	bf00      	nop
 801cd1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cd1e:	bc08      	pop	{r3}
 801cd20:	469e      	mov	lr, r3
 801cd22:	4770      	bx	lr
	...
 801cd30:	00000006 	.word	0x00000006
 801cd34:	00000007 	.word	0x00000007
 801cd38:	00000008 	.word	0x00000008
 801cd3c:	00000009 	.word	0x00000009
 801cd40:	0000000a 	.word	0x0000000a
 801cd44:	00000017 	.word	0x00000017
 801cd48:	00000017 	.word	0x00000017
 801cd4c:	00000017 	.word	0x00000017
 801cd50:	00000017 	.word	0x00000017
 801cd54:	00000017 	.word	0x00000017
 801cd58:	00000028 	.word	0x00000028
 801cd5c:	00000028 	.word	0x00000028
 801cd60:	00000028 	.word	0x00000028
 801cd64:	00000028 	.word	0x00000028
 801cd68:	00000028 	.word	0x00000028
 801cd6c:	00000028 	.word	0x00000028
 801cd70:	00007325 	.word	0x00007325
 801cd74:	4f525245 	.word	0x4f525245
 801cd78:	4d203a52 	.word	0x4d203a52
 801cd7c:	4f4c5841 	.word	0x4f4c5841
 801cd80:	52545347 	.word	0x52545347
 801cd84:	53474e49 	.word	0x53474e49
 801cd88:	20455a49 	.word	0x20455a49
 801cd8c:	65637865 	.word	0x65637865
 801cd90:	64656465 	.word	0x64656465
 801cd94:	00000000 	.word	0x00000000
 801cd98:	2d6a626f 	.word	0x2d6a626f
 801cd9c:	6e69703e 	.word	0x6e69703e
 801cda0:	203d2120 	.word	0x203d2120
 801cda4:	6e695028 	.word	0x6e695028
 801cda8:	656d614e 	.word	0x656d614e
 801cdac:	00434e29 	.word	0x00434e29
 801cdb0:	6c5c3a43 	.word	0x6c5c3a43
 801cdb4:	756c696c 	.word	0x756c696c
 801cdb8:	655a5c6d 	.word	0x655a5c6d
 801cdbc:	5c67696c 	.word	0x5c67696c
 801cdc0:	6465626d 	.word	0x6465626d
 801cdc4:	5241542f 	.word	0x5241542f
 801cdc8:	5f544547 	.word	0x5f544547
 801cdcc:	43534944 	.word	0x43534944
 801cdd0:	37465f4f 	.word	0x37465f4f
 801cdd4:	474e3634 	.word	0x474e3634
 801cdd8:	5241542f 	.word	0x5241542f
 801cddc:	5f544547 	.word	0x5f544547
 801cde0:	2f4d5453 	.word	0x2f4d5453
 801cde4:	47524154 	.word	0x47524154
 801cde8:	535f5445 	.word	0x535f5445
 801cdec:	32334d54 	.word	0x32334d54
 801cdf0:	672f3746 	.word	0x672f3746
 801cdf4:	5f6f6970 	.word	0x5f6f6970
 801cdf8:	656a626f 	.word	0x656a626f
 801cdfc:	682e7463 	.word	0x682e7463
 801ce00:	00000000 	.word	0x00000000

0801ce04 <APBAHBPrescTable>:
 801ce04:	00000000 04030201 04030201 09080706     ................

0801ce14 <CSWTCH.36>:
 801ce14:	10101000 10101004 10101002 00000008     ................

0801ce24 <CSWTCH.35>:
 801ce24:	08020401 206e6970 28203d21 4e6e6950     ....pin != (PinN
 801ce34:	29656d61 0000434e 6d5c3a43 2d646562     ame)NC..C:\mbed-
 801ce44:	7473616d 6c5c7265 61726269 73656972     master\libraries
 801ce54:	65626d5c 61745c64 74656772 61685c73     \mbed\targets\ha
 801ce64:	41545c6c 54454752 4d54535f 5241545c     l\TARGET_STM\TAR
 801ce74:	5f544547 334d5453 5c374632 6f697067     GET_STM32F7\gpio
 801ce84:	6970615f 0000632e 2d6a626f 6e69703e     _api.c..obj->pin
 801ce94:	203d2120 6e695028 656d614e 00434e29      != (PinName)NC.

0801cea4 <gpio_mode>:
 801cea4:	00000000 00000001 00000011 00000002     ................
 801ceb4:	00000012 00000003 10110000 10210000     ..............!.
 801cec4:	10310000 10120000 10220000 10320000     ..1......."...2.
 801ced4:	10000000 6d6e6950 65207061 726f7272     ....Pinmap error
 801cee4:	7277203a 20676e6f 74726f70 6d756e20     : wrong port num
 801cef4:	2e726562 00000000 206e6970 28203d21     ber.....pin != (
 801cf04:	4e6e6950 29656d61 0000434e 6d5c3a43     PinName)NC..C:\m
 801cf14:	2d646562 7473616d 6c5c7265 61726269     bed-master\libra
 801cf24:	73656972 65626d5c 61745c64 74656772     ries\mbed\target
 801cf34:	61685c73 41545c6c 54454752 4d54535f     s\hal\TARGET_STM
 801cf44:	5241545c 5f544547 334d5453 5c374632     \TARGET_STM32F7\
 801cf54:	6d6e6970 632e7061 00000000 6e6e6143     pinmap.c....Cann
 801cf64:	6920746f 6974696e 7a696c61 41552065     ot initialize UA
 801cf74:	00005452 2d6a626f 7261753e 3d212074     RT..obj->uart !=
 801cf84:	41552820 614e5452 4e29656d 00000043      (UARTName)NC...
 801cf94:	6d5c3a43 2d646562 7473616d 6c5c7265     C:\mbed-master\l
 801cfa4:	61726269 73656972 65626d5c 61745c64     ibraries\mbed\ta
 801cfb4:	74656772 61685c73 41545c6c 54454752     rgets\hal\TARGET
 801cfc4:	4d54535f 5241545c 5f544547 334d5453     _STM\TARGET_STM3
 801cfd4:	5c374632 69726573 615f6c61 632e6970     2F7\serial_api.c
 801cfe4:	00000000 6465626d 73736120 61747265     ....mbed asserta
 801cff4:	6e6f6974 69616620 3a64656c 2c732520     tion failed: %s,
 801d004:	6c696620 25203a65 6c202c73 20656e69      file: %s, line 
 801d014:	0a206425 00000000 6c756f63 6f6e2064     %d .....could no
 801d024:	69702074 74756f6e 00000000 6d6e6970     t pinout....pinm
 801d034:	6d207061 6d2d7369 68637461 00000000     ap mis-match....
 801d044:	6d6e6970 6e207061 6620746f 646e756f     pinmap not found
 801d054:	726f6620 72657020 65687069 006c6172      for peripheral.
 801d064:	6d6e6970 6e207061 6620746f 646e756f     pinmap not found
 801d074:	726f6620 6e756620 6f697463 0000006e      for function...

0801d084 <us_interface>:
 801d084:	080162b9 080162e5 08016329 08016341     .b...b..)c..Ac..
 801d094:	08016305                                .c..

0801d098 <us_data>:
 801d098:	0801d084 20001b40                       ....@.. 

0801d0a0 <PinMap_UART_TX>:
 801d0a0:	00000000 40004c00 00000413 00000009     .....L.@........
 801d0b0:	40011000 00000393 00000026 40011400     ...@....&......@
 801d0c0:	00000413 00000057 40007800 00000413     ....W....x.@....
 801d0d0:	0000ffff ffffffff 00000000              ............

0801d0dc <PinMap_UART_RX>:
 801d0dc:	00000017 40011000 00000393 00000027     .......@....'...
 801d0ec:	40011400 00000413 00000056 40007800     ...@....V....x.@
 801d0fc:	00000413 0000ffff ffffffff 00000000     ................

0801d10c <__sf_fake_stdin>:
	...

0801d12c <__sf_fake_stdout>:
	...

0801d14c <__sf_fake_stderr>:
	...
 801d16c:	00000043                                C...

0801d170 <_global_impure_ptr>:
 801d170:	20001708 2b302d23 6c680020 6665004c     ... #-0+ .hlL.ef
 801d180:	47464567 464e4900 666e6900 4e414e00     gEFG.INF.inf.NAN
 801d190:	6e616e00 30003000 34333231 38373635     .nan.0.012345678
 801d1a0:	43424139 00464544 33323130 37363534     9ABCDEF.01234567
 801d1b0:	62613938 66656463 6c256500 00000064     89abcdef.e%ld...

0801d1c0 <fpinan.5315>:
 801d1c0:	00000034 fffffbce 000003cb 00000001     4...............
	...

0801d1d8 <tinytens>:
 801d1d8:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
 801d1e8:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
 801d1f8:	64ac6f43 11680628                       Co.d(.h.

0801d200 <fpi.5279>:
 801d200:	00000035 fffffbce 000003cb 00000001     5...............
 801d210:	00000000                                ....

0801d214 <_ctype_>:
 801d214:	20202000 20202020 28282020 20282828     .         ((((( 
 801d224:	20202020 20202020 20202020 20202020                     
 801d234:	10108820 10101010 10101010 10101010      ...............
 801d244:	04040410 04040404 10040404 10101010     ................
 801d254:	41411010 41414141 01010101 01010101     ..AAAAAA........
 801d264:	01010101 01010101 01010101 10101010     ................
 801d274:	42421010 42424242 02020202 02020202     ..BBBBBB........
 801d284:	02020202 02020202 02020202 10101010     ................
 801d294:	00000020 00000000 00000000 00000000      ...............
	...
 801d314:	666e4900 74696e69 614e0079 4f50004e     .Infinity.NaN.PO
 801d324:	00584953 0000002e 00000000              SIX.........

0801d330 <__mprec_tens>:
 801d330:	00000000 3ff00000 00000000 40240000     .......?......$@
 801d340:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 801d350:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 801d360:	00000000 412e8480 00000000 416312d0     .......A......cA
 801d370:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 801d380:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 801d390:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 801d3a0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 801d3b0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 801d3c0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 801d3d0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 801d3e0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 801d3f0:	79d99db4 44ea7843                       ...yCx.D

0801d3f8 <__mprec_bigtens>:
 801d3f8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 801d408:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 801d418:	7f73bf3c 75154fdd                       <.s..O.u

0801d420 <p05.5314>:
 801d420:	00000005 00000019 0000007d              ........}...

0801d42c <__EH_FRAME_BEGIN__>:
 801d42c:	00000000                                ....
